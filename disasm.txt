
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b4 d6 00 00       	call   c000d6d4 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 e8 01 00       	call   c001e898 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 74 f4 01 c0       	mov    ebx,0xc001f474
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c f4 01 c0    	cmp    ebx,0xc001f47c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 48 b3 03 c0       	mov    eax,0xc003b348
c0000049:	3d 48 b3 03 c0       	cmp    eax,0xc003b348
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 48 b3 03 c0       	push   0xc003b348
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 48 b3 03 c0       	mov    eax,0xc003b348
c0000075:	2d 48 b3 03 c0       	sub    eax,0xc003b348
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 48 b3 03 c0       	push   0xc003b348
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 b4 03 c0 00 	cmp    BYTE PTR ds:0xc003b4e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 f4 01 c0       	mov    ebx,0xc001f484
c00000bb:	81 eb 80 f4 01 c0    	sub    ebx,0xc001f480
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 f4 01 c0       	mov    esi,0xc001f480
c00000ca:	a1 ec b4 03 c0       	mov    eax,ds:0xc003b4ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec b4 03 c0       	mov    ds:0xc003b4ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec b4 03 c0       	mov    eax,ds:0xc003b4ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 48 b3 03 c0       	push   0xc003b348
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 b4 03 c0 01 	mov    BYTE PTR ds:0xc003b4e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 b4 03 c0       	push   0xc003b4f0
c000012c:	68 48 b3 03 c0       	push   0xc003b348
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 ff 1f 01 00       	call   c001225e <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 43 dc 00 00       	call   c000deac <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 2f e0 00 00       	call   c000e2bf <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 d5 e7 00 00       	call   c000ea6e <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 04 dc 00 00       	call   c000deac <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 c4 ba 03 c0 	lgdtd  ds:0xc003bac4
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 21 3f 01 c0       	mov    ecx,0xc0013f21
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 21 3f 01 c0       	mov    ecx,0xc0013f21
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   
c000056f:	90                   	nop

c0000570 <memcmp>:
c0000570:	56                   	push   esi
c0000571:	53                   	push   ebx
c0000572:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000057a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000057e:	85 f6                	test   esi,esi
c0000580:	74 1d                	je     c000059f <memcmp+0x2f>
c0000582:	8a 08                	mov    cl,BYTE PTR [eax]
c0000584:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000587:	38 cb                	cmp    bl,cl
c0000589:	75 19                	jne    c00005a4 <memcmp+0x34>
c000058b:	01 c6                	add    esi,eax
c000058d:	eb 0a                	jmp    c0000599 <memcmp+0x29>
c000058f:	90                   	nop
c0000590:	8a 08                	mov    cl,BYTE PTR [eax]
c0000592:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000595:	38 d9                	cmp    cl,bl
c0000597:	75 0b                	jne    c00005a4 <memcmp+0x34>
c0000599:	40                   	inc    eax
c000059a:	42                   	inc    edx
c000059b:	39 f0                	cmp    eax,esi
c000059d:	75 f1                	jne    c0000590 <memcmp+0x20>
c000059f:	31 c0                	xor    eax,eax
c00005a1:	5b                   	pop    ebx
c00005a2:	5e                   	pop    esi
c00005a3:	c3                   	ret    
c00005a4:	0f b6 c1             	movzx  eax,cl
c00005a7:	29 d8                	sub    eax,ebx
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    

c00005ac <memmove>:
c00005ac:	55                   	push   ebp
c00005ad:	57                   	push   edi
c00005ae:	56                   	push   esi
c00005af:	53                   	push   ebx
c00005b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005b4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005bc:	39 dd                	cmp    ebp,ebx
c00005be:	0f 83 80 00 00 00    	jae    c0000644 <memmove+0x98>
c00005c4:	85 d2                	test   edx,edx
c00005c6:	74 74                	je     c000063c <memmove+0x90>
c00005c8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005cb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ce:	39 cd                	cmp    ebp,ecx
c00005d0:	0f 93 c1             	setae  cl
c00005d3:	39 f3                	cmp    ebx,esi
c00005d5:	0f 93 c0             	setae  al
c00005d8:	89 c6                	mov    esi,eax
c00005da:	09 ce                	or     esi,ecx
c00005dc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005df:	89 f0                	mov    eax,esi
c00005e1:	83 f9 0c             	cmp    ecx,0xc
c00005e4:	0f 97 c1             	seta   cl
c00005e7:	84 c8                	test   al,cl
c00005e9:	74 75                	je     c0000660 <memmove+0xb4>
c00005eb:	89 e9                	mov    ecx,ebp
c00005ed:	09 d9                	or     ecx,ebx
c00005ef:	83 e1 03             	and    ecx,0x3
c00005f2:	75 6c                	jne    c0000660 <memmove+0xb4>
c00005f4:	89 d7                	mov    edi,edx
c00005f6:	89 d9                	mov    ecx,ebx
c00005f8:	83 e7 fc             	and    edi,0xfffffffc
c00005fb:	89 ee                	mov    esi,ebp
c00005fd:	01 df                	add    edi,ebx
c00005ff:	90                   	nop
c0000600:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000602:	83 c6 04             	add    esi,0x4
c0000605:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000608:	83 c1 04             	add    ecx,0x4
c000060b:	39 f9                	cmp    ecx,edi
c000060d:	75 f1                	jne    c0000600 <memmove+0x54>
c000060f:	89 d1                	mov    ecx,edx
c0000611:	89 d7                	mov    edi,edx
c0000613:	83 e1 fc             	and    ecx,0xfffffffc
c0000616:	29 cf                	sub    edi,ecx
c0000618:	01 cb                	add    ebx,ecx
c000061a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000061e:	39 ca                	cmp    edx,ecx
c0000620:	74 1a                	je     c000063c <memmove+0x90>
c0000622:	8a 03                	mov    al,BYTE PTR [ebx]
c0000624:	83 ff 01             	cmp    edi,0x1
c0000627:	88 06                	mov    BYTE PTR [esi],al
c0000629:	74 11                	je     c000063c <memmove+0x90>
c000062b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000062e:	83 ff 02             	cmp    edi,0x2
c0000631:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000634:	74 06                	je     c000063c <memmove+0x90>
c0000636:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000639:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000063c:	5b                   	pop    ebx
c000063d:	89 e8                	mov    eax,ebp
c000063f:	5e                   	pop    esi
c0000640:	5f                   	pop    edi
c0000641:	5d                   	pop    ebp
c0000642:	c3                   	ret    
c0000643:	90                   	nop
c0000644:	76 f6                	jbe    c000063c <memmove+0x90>
c0000646:	85 d2                	test   edx,edx
c0000648:	74 f2                	je     c000063c <memmove+0x90>
c000064a:	4b                   	dec    ebx
c000064b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000064e:	66 90                	xchg   ax,ax
c0000650:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000653:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000656:	4a                   	dec    edx
c0000657:	75 f7                	jne    c0000650 <memmove+0xa4>
c0000659:	5b                   	pop    ebx
c000065a:	89 e8                	mov    eax,ebp
c000065c:	5e                   	pop    esi
c000065d:	5f                   	pop    edi
c000065e:	5d                   	pop    ebp
c000065f:	c3                   	ret    
c0000660:	01 ea                	add    edx,ebp
c0000662:	89 e9                	mov    ecx,ebp
c0000664:	8a 03                	mov    al,BYTE PTR [ebx]
c0000666:	41                   	inc    ecx
c0000667:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000066a:	43                   	inc    ebx
c000066b:	39 d1                	cmp    ecx,edx
c000066d:	75 f5                	jne    c0000664 <memmove+0xb8>
c000066f:	eb cb                	jmp    c000063c <memmove+0x90>
c0000671:	8d 76 00             	lea    esi,[esi+0x0]

c0000674 <memcpy>:
c0000674:	57                   	push   edi
c0000675:	56                   	push   esi
c0000676:	53                   	push   ebx
c0000677:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000067b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000067f:	89 d3                	mov    ebx,edx
c0000681:	89 d1                	mov    ecx,edx
c0000683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000687:	83 e3 03             	and    ebx,0x3
c000068a:	c1 e9 02             	shr    ecx,0x2
c000068d:	89 c7                	mov    edi,eax
c000068f:	fc                   	cld    
c0000690:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000692:	85 db                	test   ebx,ebx
c0000694:	74 24                	je     c00006ba <memcpy+0x46>
c0000696:	89 d7                	mov    edi,edx
c0000698:	29 df                	sub    edi,ebx
c000069a:	83 fb 01             	cmp    ebx,0x1
c000069d:	8a 0c 3e             	mov    cl,BYTE PTR [esi+edi*1]
c00006a0:	88 0c 38             	mov    BYTE PTR [eax+edi*1],cl
c00006a3:	74 15                	je     c00006ba <memcpy+0x46>
c00006a5:	8a 54 3e 01          	mov    dl,BYTE PTR [esi+edi*1+0x1]
c00006a9:	83 fb 03             	cmp    ebx,0x3
c00006ac:	88 54 38 01          	mov    BYTE PTR [eax+edi*1+0x1],dl
c00006b0:	75 08                	jne    c00006ba <memcpy+0x46>
c00006b2:	8a 5c 3e 02          	mov    bl,BYTE PTR [esi+edi*1+0x2]
c00006b6:	88 5c 38 02          	mov    BYTE PTR [eax+edi*1+0x2],bl
c00006ba:	5b                   	pop    ebx
c00006bb:	5e                   	pop    esi
c00006bc:	5f                   	pop    edi
c00006bd:	c3                   	ret    
c00006be:	66 90                	xchg   ax,ax

c00006c0 <memset>:
c00006c0:	57                   	push   edi
c00006c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c5:	85 c9                	test   ecx,ecx
c00006c7:	74 0b                	je     c00006d4 <memset+0x14>
c00006c9:	fc                   	cld    
c00006ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006d2:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006d8:	5f                   	pop    edi
c00006d9:	c3                   	ret    
c00006da:	66 90                	xchg   ax,ax

c00006dc <strlen>:
c00006dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e0:	31 c0                	xor    eax,eax
c00006e2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006e5:	74 09                	je     c00006f0 <strlen+0x14>
c00006e7:	90                   	nop
c00006e8:	40                   	inc    eax
c00006e9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strlen+0xc>
c00006ef:	c3                   	ret    
c00006f0:	c3                   	ret    
c00006f1:	8d 76 00             	lea    esi,[esi+0x0]

c00006f4 <strpbrk>:
c00006f4:	57                   	push   edi
c00006f5:	56                   	push   esi
c00006f6:	53                   	push   ebx
c00006f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006ff:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000701:	84 db                	test   bl,bl
c0000703:	74 21                	je     c0000726 <strpbrk+0x32>
c0000705:	8a 07                	mov    al,BYTE PTR [edi]
c0000707:	84 c0                	test   al,al
c0000709:	74 14                	je     c000071f <strpbrk+0x2b>
c000070b:	38 d8                	cmp    al,bl
c000070d:	74 19                	je     c0000728 <strpbrk+0x34>
c000070f:	89 fa                	mov    edx,edi
c0000711:	eb 05                	jmp    c0000718 <strpbrk+0x24>
c0000713:	90                   	nop
c0000714:	38 d9                	cmp    cl,bl
c0000716:	74 10                	je     c0000728 <strpbrk+0x34>
c0000718:	42                   	inc    edx
c0000719:	8a 0a                	mov    cl,BYTE PTR [edx]
c000071b:	84 c9                	test   cl,cl
c000071d:	75 f5                	jne    c0000714 <strpbrk+0x20>
c000071f:	46                   	inc    esi
c0000720:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000722:	84 db                	test   bl,bl
c0000724:	75 e1                	jne    c0000707 <strpbrk+0x13>
c0000726:	31 f6                	xor    esi,esi
c0000728:	89 f0                	mov    eax,esi
c000072a:	5b                   	pop    ebx
c000072b:	5e                   	pop    esi
c000072c:	5f                   	pop    edi
c000072d:	c3                   	ret    
c000072e:	66 90                	xchg   ax,ax

c0000730 <strtok>:
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000736:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000073a:	85 db                	test   ebx,ebx
c000073c:	75 07                	jne    c0000745 <strtok+0x15>
c000073e:	eb 2c                	jmp    c000076c <strtok+0x3c>
c0000740:	43                   	inc    ebx
c0000741:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000745:	56                   	push   esi
c0000746:	53                   	push   ebx
c0000747:	e8 a8 ff ff ff       	call   c00006f4 <strpbrk>
c000074c:	5a                   	pop    edx
c000074d:	a3 08 b5 03 c0       	mov    ds:0xc003b508,eax
c0000752:	59                   	pop    ecx
c0000753:	39 d8                	cmp    eax,ebx
c0000755:	74 e9                	je     c0000740 <strtok+0x10>
c0000757:	85 c0                	test   eax,eax
c0000759:	74 1b                	je     c0000776 <strtok+0x46>
c000075b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000075e:	8d 50 01             	lea    edx,[eax+0x1]
c0000761:	89 d8                	mov    eax,ebx
c0000763:	89 15 08 b5 03 c0    	mov    DWORD PTR ds:0xc003b508,edx
c0000769:	5b                   	pop    ebx
c000076a:	5e                   	pop    esi
c000076b:	c3                   	ret    
c000076c:	8b 1d 08 b5 03 c0    	mov    ebx,DWORD PTR ds:0xc003b508
c0000772:	85 db                	test   ebx,ebx
c0000774:	75 cf                	jne    c0000745 <strtok+0x15>
c0000776:	31 c0                	xor    eax,eax
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    
c000077b:	90                   	nop

c000077c <strcpy>:
c000077c:	53                   	push   ebx
c000077d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000781:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000785:	89 c3                	mov    ebx,eax
c0000787:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000789:	84 d2                	test   dl,dl
c000078b:	74 0d                	je     c000079a <strcpy+0x1e>
c000078d:	8d 76 00             	lea    esi,[esi+0x0]
c0000790:	88 13                	mov    BYTE PTR [ebx],dl
c0000792:	41                   	inc    ecx
c0000793:	43                   	inc    ebx
c0000794:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000796:	84 d2                	test   dl,dl
c0000798:	75 f6                	jne    c0000790 <strcpy+0x14>
c000079a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000079d:	5b                   	pop    ebx
c000079e:	c3                   	ret    
c000079f:	90                   	nop

c00007a0 <strncpy>:
c00007a0:	55                   	push   ebp
c00007a1:	57                   	push   edi
c00007a2:	56                   	push   esi
c00007a3:	53                   	push   ebx
c00007a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00007a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00007ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00007b0:	85 c0                	test   eax,eax
c00007b2:	74 39                	je     c00007ed <strncpy+0x4d>
c00007b4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b6:	8d 48 ff             	lea    ecx,[eax-0x1]
c00007b9:	8d 55 01             	lea    edx,[ebp+0x1]
c00007bc:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00007bf:	84 db                	test   bl,bl
c00007c1:	74 31                	je     c00007f4 <strncpy+0x54>
c00007c3:	85 c9                	test   ecx,ecx
c00007c5:	74 26                	je     c00007ed <strncpy+0x4d>
c00007c7:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00007ca:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007cd:	8d 55 02             	lea    edx,[ebp+0x2]
c00007d0:	8d 46 02             	lea    eax,[esi+0x2]
c00007d3:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007d6:	84 db                	test   bl,bl
c00007d8:	75 0f                	jne    c00007e9 <strncpy+0x49>
c00007da:	eb 18                	jmp    c00007f4 <strncpy+0x54>
c00007dc:	40                   	inc    eax
c00007dd:	42                   	inc    edx
c00007de:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007e1:	49                   	dec    ecx
c00007e2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007e5:	84 db                	test   bl,bl
c00007e7:	74 0b                	je     c00007f4 <strncpy+0x54>
c00007e9:	85 c9                	test   ecx,ecx
c00007eb:	75 ef                	jne    c00007dc <strncpy+0x3c>
c00007ed:	5b                   	pop    ebx
c00007ee:	89 e8                	mov    eax,ebp
c00007f0:	5e                   	pop    esi
c00007f1:	5f                   	pop    edi
c00007f2:	5d                   	pop    ebp
c00007f3:	c3                   	ret    
c00007f4:	85 c9                	test   ecx,ecx
c00007f6:	74 f5                	je     c00007ed <strncpy+0x4d>
c00007f8:	fc                   	cld    
c00007f9:	31 c0                	xor    eax,eax
c00007fb:	89 d7                	mov    edi,edx
c00007fd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007ff:	89 e8                	mov    eax,ebp
c0000801:	5b                   	pop    ebx
c0000802:	5e                   	pop    esi
c0000803:	5f                   	pop    edi
c0000804:	5d                   	pop    ebp
c0000805:	c3                   	ret    
c0000806:	66 90                	xchg   ax,ax

c0000808 <strcmp>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000812:	8a 16                	mov    dl,BYTE PTR [esi]
c0000814:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 1d                	jne    c0000838 <strcmp+0x30>
c000081b:	84 c9                	test   cl,cl
c000081d:	74 21                	je     c0000840 <strcmp+0x38>
c000081f:	b8 01 00 00 00       	mov    eax,0x1
c0000824:	eb 07                	jmp    c000082d <strcmp+0x25>
c0000826:	66 90                	xchg   ax,ax
c0000828:	40                   	inc    eax
c0000829:	84 d2                	test   dl,dl
c000082b:	74 13                	je     c0000840 <strcmp+0x38>
c000082d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000830:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000834:	38 ca                	cmp    dl,cl
c0000836:	74 f0                	je     c0000828 <strcmp+0x20>
c0000838:	0f b6 c2             	movzx  eax,dl
c000083b:	5b                   	pop    ebx
c000083c:	29 c8                	sub    eax,ecx
c000083e:	5e                   	pop    esi
c000083f:	c3                   	ret    
c0000840:	31 c0                	xor    eax,eax
c0000842:	5b                   	pop    ebx
c0000843:	5e                   	pop    esi
c0000844:	c3                   	ret    
c0000845:	8d 76 00             	lea    esi,[esi+0x0]

c0000848 <strchr>:
c0000848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000084c:	8a 10                	mov    dl,BYTE PTR [eax]
c000084e:	84 d2                	test   dl,dl
c0000850:	74 15                	je     c0000867 <strchr+0x1f>
c0000852:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000856:	38 ca                	cmp    dl,cl
c0000858:	75 06                	jne    c0000860 <strchr+0x18>
c000085a:	eb 0e                	jmp    c000086a <strchr+0x22>
c000085c:	38 ca                	cmp    dl,cl
c000085e:	74 09                	je     c0000869 <strchr+0x21>
c0000860:	40                   	inc    eax
c0000861:	8a 10                	mov    dl,BYTE PTR [eax]
c0000863:	84 d2                	test   dl,dl
c0000865:	75 f5                	jne    c000085c <strchr+0x14>
c0000867:	31 c0                	xor    eax,eax
c0000869:	c3                   	ret    
c000086a:	c3                   	ret    
c000086b:	90                   	nop

c000086c <strncmp>:
c000086c:	57                   	push   edi
c000086d:	56                   	push   esi
c000086e:	53                   	push   ebx
c000086f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000873:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000877:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000087b:	85 ff                	test   edi,edi
c000087d:	74 28                	je     c00008a7 <strncmp+0x3b>
c000087f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000881:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000884:	38 d1                	cmp    cl,dl
c0000886:	75 28                	jne    c00008b0 <strncmp+0x44>
c0000888:	8d 46 01             	lea    eax,[esi+0x1]
c000088b:	84 c9                	test   cl,cl
c000088d:	74 18                	je     c00008a7 <strncmp+0x3b>
c000088f:	01 fe                	add    esi,edi
c0000891:	eb 0f                	jmp    c00008a2 <strncmp+0x36>
c0000893:	90                   	nop
c0000894:	8a 10                	mov    dl,BYTE PTR [eax]
c0000896:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000899:	38 ca                	cmp    dl,cl
c000089b:	75 13                	jne    c00008b0 <strncmp+0x44>
c000089d:	40                   	inc    eax
c000089e:	84 d2                	test   dl,dl
c00008a0:	74 05                	je     c00008a7 <strncmp+0x3b>
c00008a2:	43                   	inc    ebx
c00008a3:	39 c6                	cmp    esi,eax
c00008a5:	75 ed                	jne    c0000894 <strncmp+0x28>
c00008a7:	5b                   	pop    ebx
c00008a8:	31 c0                	xor    eax,eax
c00008aa:	5e                   	pop    esi
c00008ab:	5f                   	pop    edi
c00008ac:	c3                   	ret    
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	5b                   	pop    ebx
c00008b1:	0f b6 c2             	movzx  eax,dl
c00008b4:	5e                   	pop    esi
c00008b5:	29 c8                	sub    eax,ecx
c00008b7:	5f                   	pop    edi
c00008b8:	c3                   	ret    
c00008b9:	8d 76 00             	lea    esi,[esi+0x0]

c00008bc <strcat>:
c00008bc:	56                   	push   esi
c00008bd:	53                   	push   ebx
c00008be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008c6:	89 c3                	mov    ebx,eax
c00008c8:	eb 04                	jmp    c00008ce <strcat+0x12>
c00008ca:	66 90                	xchg   ax,ax
c00008cc:	89 d3                	mov    ebx,edx
c00008ce:	8d 53 01             	lea    edx,[ebx+0x1]
c00008d1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d5:	75 f5                	jne    c00008cc <strcat+0x10>
c00008d7:	31 d2                	xor    edx,edx
c00008d9:	8d 76 00             	lea    esi,[esi+0x0]
c00008dc:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008df:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008e2:	42                   	inc    edx
c00008e3:	84 c9                	test   cl,cl
c00008e5:	75 f5                	jne    c00008dc <strcat+0x20>
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strncat>:
c00008ec:	56                   	push   esi
c00008ed:	53                   	push   ebx
c00008ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008fa:	85 f6                	test   esi,esi
c00008fc:	74 1e                	je     c000091c <strncat+0x30>
c00008fe:	89 c2                	mov    edx,eax
c0000900:	42                   	inc    edx
c0000901:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000905:	75 f9                	jne    c0000900 <strncat+0x14>
c0000907:	01 ce                	add    esi,ecx
c0000909:	eb 06                	jmp    c0000911 <strncat+0x25>
c000090b:	90                   	nop
c000090c:	39 f1                	cmp    ecx,esi
c000090e:	74 10                	je     c0000920 <strncat+0x34>
c0000910:	42                   	inc    edx
c0000911:	41                   	inc    ecx
c0000912:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000915:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000918:	84 db                	test   bl,bl
c000091a:	75 f0                	jne    c000090c <strncat+0x20>
c000091c:	5b                   	pop    ebx
c000091d:	5e                   	pop    esi
c000091e:	c3                   	ret    
c000091f:	90                   	nop
c0000920:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000923:	5b                   	pop    ebx
c0000924:	5e                   	pop    esi
c0000925:	c3                   	ret    
c0000926:	66 90                	xchg   ax,ax

c0000928 <strstr>:
c0000928:	57                   	push   edi
c0000929:	56                   	push   esi
c000092a:	53                   	push   ebx
c000092b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000092f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000933:	57                   	push   edi
c0000934:	e8 a3 fd ff ff       	call   c00006dc <strlen>
c0000939:	59                   	pop    ecx
c000093a:	85 c0                	test   eax,eax
c000093c:	74 2a                	je     c0000968 <strstr+0x40>
c000093e:	89 c6                	mov    esi,eax
c0000940:	eb 12                	jmp    c0000954 <strstr+0x2c>
c0000942:	66 90                	xchg   ax,ax
c0000944:	56                   	push   esi
c0000945:	57                   	push   edi
c0000946:	53                   	push   ebx
c0000947:	e8 24 fc ff ff       	call   c0000570 <memcmp>
c000094c:	83 c4 0c             	add    esp,0xc
c000094f:	85 c0                	test   eax,eax
c0000951:	74 15                	je     c0000968 <strstr+0x40>
c0000953:	43                   	inc    ebx
c0000954:	53                   	push   ebx
c0000955:	e8 82 fd ff ff       	call   c00006dc <strlen>
c000095a:	5a                   	pop    edx
c000095b:	39 f0                	cmp    eax,esi
c000095d:	73 e5                	jae    c0000944 <strstr+0x1c>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	89 d8                	mov    eax,ebx
c000096a:	5b                   	pop    ebx
c000096b:	5e                   	pop    esi
c000096c:	5f                   	pop    edi
c000096d:	c3                   	ret    
c000096e:	66 90                	xchg   ax,ax

c0000970 <toupper>:
c0000970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000974:	0f b6 d0             	movzx  edx,al
c0000977:	f6 82 a0 f4 01 c0 02 	test   BYTE PTR [edx-0x3ffe0b60],0x2
c000097e:	74 03                	je     c0000983 <toupper+0x13>
c0000980:	83 e8 20             	sub    eax,0x20
c0000983:	c3                   	ret    

c0000984 <tolower>:
c0000984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000988:	0f b6 d0             	movzx  edx,al
c000098b:	f6 82 a0 f4 01 c0 01 	test   BYTE PTR [edx-0x3ffe0b60],0x1
c0000992:	74 03                	je     c0000997 <tolower+0x13>
c0000994:	83 c0 20             	add    eax,0x20
c0000997:	c3                   	ret    

c0000998 <simple_strtoul>:
c0000998:	55                   	push   ebp
c0000999:	57                   	push   edi
c000099a:	56                   	push   esi
c000099b:	53                   	push   ebx
c000099c:	83 ec 08             	sub    esp,0x8
c000099f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00009a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00009a7:	90                   	nop
c00009a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00009ab:	f6 82 a0 f4 01 c0 08 	test   BYTE PTR [edx-0x3ffe0b60],0x8
c00009b2:	75 05                	jne    c00009b9 <simple_strtoul+0x21>
c00009b4:	80 fa 09             	cmp    dl,0x9
c00009b7:	75 03                	jne    c00009bc <simple_strtoul+0x24>
c00009b9:	41                   	inc    ecx
c00009ba:	eb ec                	jmp    c00009a8 <simple_strtoul+0x10>
c00009bc:	80 fa 2d             	cmp    dl,0x2d
c00009bf:	0f 84 1b 01 00 00    	je     c0000ae0 <simple_strtoul+0x148>
c00009c5:	80 fa 2b             	cmp    dl,0x2b
c00009c8:	0f 84 c2 00 00 00    	je     c0000a90 <simple_strtoul+0xf8>
c00009ce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009d6:	85 f6                	test   esi,esi
c00009d8:	0f 85 c3 00 00 00    	jne    c0000aa1 <simple_strtoul+0x109>
c00009de:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e0:	80 fa 30             	cmp    dl,0x30
c00009e3:	0f 84 47 01 00 00    	je     c0000b30 <simple_strtoul+0x198>
c00009e9:	be 0a 00 00 00       	mov    esi,0xa
c00009ee:	84 d2                	test   dl,dl
c00009f0:	0f 84 6f 01 00 00    	je     c0000b65 <simple_strtoul+0x1cd>
c00009f6:	31 ed                	xor    ebp,ebp
c00009f8:	31 ff                	xor    edi,edi
c00009fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a01:	eb 2b                	jmp    c0000a2e <simple_strtoul+0x96>
c0000a03:	90                   	nop
c0000a04:	83 eb 30             	sub    ebx,0x30
c0000a07:	39 f3                	cmp    ebx,esi
c0000a09:	73 4d                	jae    c0000a58 <simple_strtoul+0xc0>
c0000a0b:	31 d2                	xor    edx,edx
c0000a0d:	89 d8                	mov    eax,ebx
c0000a0f:	f7 d0                	not    eax
c0000a11:	f7 f6                	div    esi
c0000a13:	39 f8                	cmp    eax,edi
c0000a15:	0f 82 b1 00 00 00    	jb     c0000acc <simple_strtoul+0x134>
c0000a1b:	0f af fe             	imul   edi,esi
c0000a1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a25:	01 df                	add    edi,ebx
c0000a27:	41                   	inc    ecx
c0000a28:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a2a:	84 d2                	test   dl,dl
c0000a2c:	74 2a                	je     c0000a58 <simple_strtoul+0xc0>
c0000a2e:	0f b6 da             	movzx  ebx,dl
c0000a31:	f6 83 a0 f4 01 c0 04 	test   BYTE PTR [ebx-0x3ffe0b60],0x4
c0000a38:	75 ca                	jne    c0000a04 <simple_strtoul+0x6c>
c0000a3a:	0f be d2             	movsx  edx,dl
c0000a3d:	52                   	push   edx
c0000a3e:	e8 2d ff ff ff       	call   c0000970 <toupper>
c0000a43:	5b                   	pop    ebx
c0000a44:	0f b6 d0             	movzx  edx,al
c0000a47:	f6 82 a0 f4 01 c0 01 	test   BYTE PTR [edx-0x3ffe0b60],0x1
c0000a4e:	74 08                	je     c0000a58 <simple_strtoul+0xc0>
c0000a50:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a53:	39 f3                	cmp    ebx,esi
c0000a55:	72 b4                	jb     c0000a0b <simple_strtoul+0x73>
c0000a57:	90                   	nop
c0000a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a5c:	85 c0                	test   eax,eax
c0000a5e:	74 14                	je     c0000a74 <simple_strtoul+0xdc>
c0000a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a63:	09 f8                	or     eax,edi
c0000a65:	75 71                	jne    c0000ad8 <simple_strtoul+0x140>
c0000a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a6f:	31 ff                	xor    edi,edi
c0000a71:	89 30                	mov    DWORD PTR [eax],esi
c0000a73:	90                   	nop
c0000a74:	4d                   	dec    ebp
c0000a75:	75 05                	jne    c0000a7c <simple_strtoul+0xe4>
c0000a77:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a7c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a81:	75 02                	jne    c0000a85 <simple_strtoul+0xed>
c0000a83:	f7 df                	neg    edi
c0000a85:	83 c4 08             	add    esp,0x8
c0000a88:	89 f8                	mov    eax,edi
c0000a8a:	5b                   	pop    ebx
c0000a8b:	5e                   	pop    esi
c0000a8c:	5f                   	pop    edi
c0000a8d:	5d                   	pop    ebp
c0000a8e:	c3                   	ret    
c0000a8f:	90                   	nop
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a99:	85 f6                	test   esi,esi
c0000a9b:	0f 84 3d ff ff ff    	je     c00009de <simple_strtoul+0x46>
c0000aa1:	8d 46 fe             	lea    eax,[esi-0x2]
c0000aa4:	83 f8 22             	cmp    eax,0x22
c0000aa7:	77 6a                	ja     c0000b13 <simple_strtoul+0x17b>
c0000aa9:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aab:	83 fe 08             	cmp    esi,0x8
c0000aae:	0f 84 a2 00 00 00    	je     c0000b56 <simple_strtoul+0x1be>
c0000ab4:	83 fe 10             	cmp    esi,0x10
c0000ab7:	0f 85 31 ff ff ff    	jne    c00009ee <simple_strtoul+0x56>
c0000abd:	80 fa 30             	cmp    dl,0x30
c0000ac0:	74 2c                	je     c0000aee <simple_strtoul+0x156>
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	e9 22 ff ff ff       	jmp    c00009ee <simple_strtoul+0x56>
c0000acc:	bd 01 00 00 00       	mov    ebp,0x1
c0000ad1:	31 ff                	xor    edi,edi
c0000ad3:	e9 4f ff ff ff       	jmp    c0000a27 <simple_strtoul+0x8f>
c0000ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adc:	89 08                	mov    DWORD PTR [eax],ecx
c0000ade:	eb 94                	jmp    c0000a74 <simple_strtoul+0xdc>
c0000ae0:	41                   	inc    ecx
c0000ae1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ae9:	e9 e8 fe ff ff       	jmp    c00009d6 <simple_strtoul+0x3e>
c0000aee:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af2:	88 04 24             	mov    BYTE PTR [esp],al
c0000af5:	50                   	push   eax
c0000af6:	e8 89 fe ff ff       	call   c0000984 <tolower>
c0000afb:	5e                   	pop    esi
c0000afc:	83 f8 78             	cmp    eax,0x78
c0000aff:	0f 84 84 00 00 00    	je     c0000b89 <simple_strtoul+0x1f1>
c0000b05:	41                   	inc    ecx
c0000b06:	be 10 00 00 00       	mov    esi,0x10
c0000b0b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0e:	e9 db fe ff ff       	jmp    c00009ee <simple_strtoul+0x56>
c0000b13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b17:	85 ff                	test   edi,edi
c0000b19:	74 5c                	je     c0000b77 <simple_strtoul+0x1df>
c0000b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1f:	85 c9                	test   ecx,ecx
c0000b21:	75 4e                	jne    c0000b71 <simple_strtoul+0x1d9>
c0000b23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b29:	31 ff                	xor    edi,edi
c0000b2b:	e9 4c ff ff ff       	jmp    c0000a7c <simple_strtoul+0xe4>
c0000b30:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b34:	88 04 24             	mov    BYTE PTR [esp],al
c0000b37:	50                   	push   eax
c0000b38:	e8 47 fe ff ff       	call   c0000984 <tolower>
c0000b3d:	5d                   	pop    ebp
c0000b3e:	83 f8 78             	cmp    eax,0x78
c0000b41:	74 3b                	je     c0000b7e <simple_strtoul+0x1e6>
c0000b43:	41                   	inc    ecx
c0000b44:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b47:	80 fa 30             	cmp    dl,0x30
c0000b4a:	74 13                	je     c0000b5f <simple_strtoul+0x1c7>
c0000b4c:	be 08 00 00 00       	mov    esi,0x8
c0000b51:	e9 98 fe ff ff       	jmp    c00009ee <simple_strtoul+0x56>
c0000b56:	80 fa 30             	cmp    dl,0x30
c0000b59:	0f 85 8f fe ff ff    	jne    c00009ee <simple_strtoul+0x56>
c0000b5f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b62:	41                   	inc    ecx
c0000b63:	eb e7                	jmp    c0000b4c <simple_strtoul+0x1b4>
c0000b65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b69:	85 d2                	test   edx,edx
c0000b6b:	74 0a                	je     c0000b77 <simple_strtoul+0x1df>
c0000b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b71:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b75:	89 30                	mov    DWORD PTR [eax],esi
c0000b77:	31 ff                	xor    edi,edi
c0000b79:	e9 fe fe ff ff       	jmp    c0000a7c <simple_strtoul+0xe4>
c0000b7e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b81:	83 c1 02             	add    ecx,0x2
c0000b84:	e9 34 ff ff ff       	jmp    c0000abd <simple_strtoul+0x125>
c0000b89:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b8c:	be 10 00 00 00       	mov    esi,0x10
c0000b91:	83 c1 02             	add    ecx,0x2
c0000b94:	e9 55 fe ff ff       	jmp    c00009ee <simple_strtoul+0x56>

c0000b99 <largebin_index>:
c0000b99:	89 c2                	mov    edx,eax
c0000b9b:	c1 ea 08             	shr    edx,0x8
c0000b9e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ba4:	77 10                	ja     c0000bb6 <largebin_index+0x1d>
c0000ba6:	0f bd d2             	bsr    edx,edx
c0000ba9:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bac:	d3 e8                	shr    eax,cl
c0000bae:	83 e0 03             	and    eax,0x3
c0000bb1:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000bb5:	c3                   	ret    
c0000bb6:	b8 5f 00 00 00       	mov    eax,0x5f
c0000bbb:	c3                   	ret    

c0000bbc <malloc_init_state>:
c0000bbc:	53                   	push   ebx
c0000bbd:	8d 50 34             	lea    edx,[eax+0x34]
c0000bc0:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000bc6:	89 d1                	mov    ecx,edx
c0000bc8:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000bcb:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000bce:	83 c2 08             	add    edx,0x8
c0000bd1:	39 da                	cmp    edx,ebx
c0000bd3:	75 f3                	jne    c0000bc8 <malloc_init_state+0xc>
c0000bd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd7:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000be1:	83 e2 03             	and    edx,0x3
c0000be4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bee:	83 ca 48             	or     edx,0x48
c0000bf1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bfb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c05:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c0c:	89 10                	mov    DWORD PTR [eax],edx
c0000c0e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c11:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c1b:	5b                   	pop    ebx
c0000c1c:	c3                   	ret    

c0000c1d <malloc_consolidate>:
c0000c1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c1f:	85 d2                	test   edx,edx
c0000c21:	0f 84 d8 00 00 00    	je     c0000cff <malloc_consolidate+0xe2>
c0000c27:	55                   	push   ebp
c0000c28:	83 e2 fd             	and    edx,0xfffffffd
c0000c2b:	57                   	push   edi
c0000c2c:	89 c5                	mov    ebp,eax
c0000c2e:	56                   	push   esi
c0000c2f:	8d 78 34             	lea    edi,[eax+0x34]
c0000c32:	53                   	push   ebx
c0000c33:	83 ec 10             	sub    esp,0x10
c0000c36:	89 10                	mov    DWORD PTR [eax],edx
c0000c38:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c3c:	c1 ea 03             	shr    edx,0x3
c0000c3f:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c43:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c47:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c4a:	85 d2                	test   edx,edx
c0000c4c:	0f 84 98 00 00 00    	je     c0000cea <malloc_consolidate+0xcd>
c0000c52:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c59:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c5c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c63:	89 f9                	mov    ecx,edi
c0000c65:	83 e1 fe             	and    ecx,0xfffffffe
c0000c68:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c6b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c6e:	83 e3 fc             	and    ebx,0xfffffffc
c0000c71:	83 e7 01             	and    edi,0x1
c0000c74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c77:	75 14                	jne    c0000c8d <malloc_consolidate+0x70>
c0000c79:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c7b:	29 fa                	sub    edx,edi
c0000c7d:	01 f9                	add    ecx,edi
c0000c7f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c82:	89 fb                	mov    ebx,edi
c0000c84:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c87:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c8a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c8d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c90:	74 40                	je     c0000cd2 <malloc_consolidate+0xb5>
c0000c92:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c95:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c98:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c9c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c9f:	83 e7 01             	and    edi,0x1
c0000ca2:	75 0e                	jne    c0000cb2 <malloc_consolidate+0x95>
c0000ca4:	01 d9                	add    ecx,ebx
c0000ca6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ca9:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cac:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000caf:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000cb2:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000cb5:	89 ce                	mov    esi,ecx
c0000cb7:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000cba:	83 ce 01             	or     esi,0x1
c0000cbd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000cc0:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000cc3:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000cc6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000cca:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ccd:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000cd0:	eb 0c                	jmp    c0000cde <malloc_consolidate+0xc1>
c0000cd2:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000cd5:	83 c9 01             	or     ecx,0x1
c0000cd8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000cdb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ce2:	85 d2                	test   edx,edx
c0000ce4:	0f 85 6f ff ff ff    	jne    c0000c59 <malloc_consolidate+0x3c>
c0000cea:	83 c5 04             	add    ebp,0x4
c0000ced:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cf1:	0f 85 50 ff ff ff    	jne    c0000c47 <malloc_consolidate+0x2a>
c0000cf7:	83 c4 10             	add    esp,0x10
c0000cfa:	5b                   	pop    ebx
c0000cfb:	5e                   	pop    esi
c0000cfc:	5f                   	pop    edi
c0000cfd:	5d                   	pop    ebp
c0000cfe:	c3                   	ret    
c0000cff:	e9 b8 fe ff ff       	jmp    c0000bbc <malloc_init_state>

c0000d04 <dlfree>:
c0000d04:	57                   	push   edi
c0000d05:	56                   	push   esi
c0000d06:	53                   	push   ebx
c0000d07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d0b:	85 db                	test   ebx,ebx
c0000d0d:	0f 84 e2 00 00 00    	je     c0000df5 <dlfree+0xf1>
c0000d13:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d16:	8b 0d 20 b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b520
c0000d1c:	89 f0                	mov    eax,esi
c0000d1e:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d21:	83 e0 fc             	and    eax,0xfffffffc
c0000d24:	39 c1                	cmp    ecx,eax
c0000d26:	72 24                	jb     c0000d4c <dlfree+0x48>
c0000d28:	83 c9 03             	or     ecx,0x3
c0000d2b:	c1 e8 03             	shr    eax,0x3
c0000d2e:	89 0d 20 b5 03 c0    	mov    DWORD PTR ds:0xc003b520,ecx
c0000d34:	83 e8 02             	sub    eax,0x2
c0000d37:	8b 0c 85 24 b5 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4adc]
c0000d3e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d40:	89 14 85 24 b5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4adc],edx
c0000d47:	e9 a9 00 00 00       	jmp    c0000df5 <dlfree+0xf1>
c0000d4c:	83 e6 02             	and    esi,0x2
c0000d4f:	0f 85 a0 00 00 00    	jne    c0000df5 <dlfree+0xf1>
c0000d55:	83 c9 01             	or     ecx,0x1
c0000d58:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d5b:	89 0d 20 b5 03 c0    	mov    DWORD PTR ds:0xc003b520,ecx
c0000d61:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d64:	83 e1 fc             	and    ecx,0xfffffffc
c0000d67:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d6b:	75 13                	jne    c0000d80 <dlfree+0x7c>
c0000d6d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d70:	29 da                	sub    edx,ebx
c0000d72:	01 d8                	add    eax,ebx
c0000d74:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d77:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d7a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d7d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d80:	39 35 4c b5 03 c0    	cmp    DWORD PTR ds:0xc003b54c,esi
c0000d86:	74 40                	je     c0000dc8 <dlfree+0xc4>
c0000d88:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d8c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d8f:	80 e3 01             	and    bl,0x1
c0000d92:	75 0e                	jne    c0000da2 <dlfree+0x9e>
c0000d94:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d97:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d9a:	01 c8                	add    eax,ecx
c0000d9c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d9f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000da2:	8b 0d 5c b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b55c
c0000da8:	c7 42 0c 54 b5 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b554
c0000daf:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000db2:	89 15 5c b5 03 c0    	mov    DWORD PTR ds:0xc003b55c,edx
c0000db8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000dbb:	89 c1                	mov    ecx,eax
c0000dbd:	83 c9 01             	or     ecx,0x1
c0000dc0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000dc3:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000dc6:	eb 10                	jmp    c0000dd8 <dlfree+0xd4>
c0000dc8:	01 c8                	add    eax,ecx
c0000dca:	89 c1                	mov    ecx,eax
c0000dcc:	83 c9 01             	or     ecx,0x1
c0000dcf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000dd2:	89 15 4c b5 03 c0    	mov    DWORD PTR ds:0xc003b54c,edx
c0000dd8:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ddd:	76 16                	jbe    c0000df5 <dlfree+0xf1>
c0000ddf:	f6 05 20 b5 03 c0 02 	test   BYTE PTR ds:0xc003b520,0x2
c0000de6:	74 0d                	je     c0000df5 <dlfree+0xf1>
c0000de8:	5b                   	pop    ebx
c0000de9:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c0000dee:	5e                   	pop    esi
c0000def:	5f                   	pop    edi
c0000df0:	e9 28 fe ff ff       	jmp    c0000c1d <malloc_consolidate>
c0000df5:	5b                   	pop    ebx
c0000df6:	5e                   	pop    esi
c0000df7:	5f                   	pop    edi
c0000df8:	c3                   	ret    

c0000df9 <sYSMALLOc>:
c0000df9:	55                   	push   ebp
c0000dfa:	57                   	push   edi
c0000dfb:	56                   	push   esi
c0000dfc:	53                   	push   ebx
c0000dfd:	89 d3                	mov    ebx,edx
c0000dff:	83 ec 2c             	sub    esp,0x2c
c0000e02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e06:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e0c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e0f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e16:	74 1f                	je     c0000e37 <sYSMALLOc+0x3e>
c0000e18:	89 d8                	mov    eax,ebx
c0000e1a:	e8 fe fd ff ff       	call   c0000c1d <malloc_consolidate>
c0000e1f:	83 ec 0c             	sub    esp,0xc
c0000e22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e26:	83 e8 07             	sub    eax,0x7
c0000e29:	50                   	push   eax
c0000e2a:	e8 30 02 00 00       	call   c000105f <dlmalloc>
c0000e2f:	83 c4 10             	add    esp,0x10
c0000e32:	e9 20 02 00 00       	jmp    c0001057 <sYSMALLOc+0x25e>
c0000e37:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e3a:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e40:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e43:	83 e0 fc             	and    eax,0xfffffffc
c0000e46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e4e:	83 c0 10             	add    eax,0x10
c0000e51:	01 c1                	add    ecx,eax
c0000e53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e57:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e5e:	74 04                	je     c0000e64 <sYSMALLOc+0x6b>
c0000e60:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e64:	f7 da                	neg    edx
c0000e66:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e6e:	21 d1                	and    ecx,edx
c0000e70:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e74:	7f 07                	jg     c0000e7d <sYSMALLOc+0x84>
c0000e76:	31 c0                	xor    eax,eax
c0000e78:	e9 da 01 00 00       	jmp    c0001057 <sYSMALLOc+0x25e>
c0000e7d:	83 ec 0c             	sub    esp,0xc
c0000e80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e84:	e8 a9 c3 00 00       	call   c000d232 <sbrk>
c0000e89:	83 c4 10             	add    esp,0x10
c0000e8c:	89 c6                	mov    esi,eax
c0000e8e:	83 f8 ff             	cmp    eax,0xffffffff
c0000e91:	74 e3                	je     c0000e76 <sYSMALLOc+0x7d>
c0000e93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e97:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e9b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e9e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000ea4:	39 f1                	cmp    ecx,esi
c0000ea6:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000eac:	75 13                	jne    c0000ec1 <sYSMALLOc+0xc8>
c0000eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eb2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb6:	83 c8 01             	or     eax,0x1
c0000eb9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ebc:	e9 3e 01 00 00       	jmp    c0000fff <sYSMALLOc+0x206>
c0000ec1:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000ec7:	88 d0                	mov    al,dl
c0000ec9:	83 e0 01             	and    eax,0x1
c0000ecc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ed1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ed5:	0f 95 c0             	setne  al
c0000ed8:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000edc:	39 f1                	cmp    ecx,esi
c0000ede:	76 12                	jbe    c0000ef2 <sYSMALLOc+0xf9>
c0000ee0:	84 c0                	test   al,al
c0000ee2:	74 0e                	je     c0000ef2 <sYSMALLOc+0xf9>
c0000ee4:	83 e2 fe             	and    edx,0xfffffffe
c0000ee7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eed:	e9 83 00 00 00       	jmp    c0000f75 <sYSMALLOc+0x17c>
c0000ef2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ef7:	74 7c                	je     c0000f75 <sYSMALLOc+0x17c>
c0000ef9:	84 c0                	test   al,al
c0000efb:	74 0c                	je     c0000f09 <sYSMALLOc+0x110>
c0000efd:	89 f0                	mov    eax,esi
c0000eff:	29 c8                	sub    eax,ecx
c0000f01:	01 e8                	add    eax,ebp
c0000f03:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f09:	89 f2                	mov    edx,esi
c0000f0b:	83 e2 07             	and    edx,0x7
c0000f0e:	74 0c                	je     c0000f1c <sYSMALLOc+0x123>
c0000f10:	b8 08 00 00 00       	mov    eax,0x8
c0000f15:	29 d0                	sub    eax,edx
c0000f17:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f1a:	eb 04                	jmp    c0000f20 <sYSMALLOc+0x127>
c0000f1c:	89 f5                	mov    ebp,esi
c0000f1e:	31 c0                	xor    eax,eax
c0000f20:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f2c:	01 c1                	add    ecx,eax
c0000f2e:	83 ec 0c             	sub    esp,0xc
c0000f31:	01 f1                	add    ecx,esi
c0000f33:	01 ca                	add    edx,ecx
c0000f35:	29 c8                	sub    eax,ecx
c0000f37:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f3b:	01 c2                	add    edx,eax
c0000f3d:	52                   	push   edx
c0000f3e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f42:	e8 eb c2 00 00       	call   c000d232 <sbrk>
c0000f47:	83 c4 10             	add    esp,0x10
c0000f4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f51:	75 0f                	jne    c0000f62 <sYSMALLOc+0x169>
c0000f53:	83 ec 0c             	sub    esp,0xc
c0000f56:	6a 00                	push   0x0
c0000f58:	e8 d5 c2 00 00       	call   c000d232 <sbrk>
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	eb 30                	jmp    c0000f92 <sYSMALLOc+0x199>
c0000f62:	39 c6                	cmp    esi,eax
c0000f64:	76 33                	jbe    c0000f99 <sYSMALLOc+0x1a0>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f71:	01 f0                	add    eax,esi
c0000f73:	eb 1d                	jmp    c0000f92 <sYSMALLOc+0x199>
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	89 f5                	mov    ebp,esi
c0000f7a:	6a 00                	push   0x0
c0000f7c:	e8 b1 c2 00 00       	call   c000d232 <sbrk>
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	29 f2                	sub    edx,esi
c0000f85:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f89:	83 c4 10             	add    esp,0x10
c0000f8c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f92:	31 d2                	xor    edx,edx
c0000f94:	83 f8 ff             	cmp    eax,0xffffffff
c0000f97:	74 66                	je     c0000fff <sYSMALLOc+0x206>
c0000f99:	29 e8                	sub    eax,ebp
c0000f9b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f9e:	01 d0                	add    eax,edx
c0000fa0:	83 c8 01             	or     eax,0x1
c0000fa3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000fa6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fac:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fb1:	74 4c                	je     c0000fff <sYSMALLOc+0x206>
c0000fb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000fb7:	83 e8 0c             	sub    eax,0xc
c0000fba:	83 e0 f8             	and    eax,0xfffffff8
c0000fbd:	89 c2                	mov    edx,eax
c0000fbf:	83 ca 01             	or     edx,0x1
c0000fc2:	83 f8 0f             	cmp    eax,0xf
c0000fc5:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000fc8:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fd0:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fd8:	76 25                	jbe    c0000fff <sYSMALLOc+0x206>
c0000fda:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fe0:	83 ec 0c             	sub    esp,0xc
c0000fe3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fed:	83 c7 08             	add    edi,0x8
c0000ff0:	57                   	push   edi
c0000ff1:	e8 0e fd ff ff       	call   c0000d04 <dlfree>
c0000ff6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ffc:	83 c4 10             	add    esp,0x10
c0000fff:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001005:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000100b:	73 06                	jae    c0001013 <sYSMALLOc+0x21a>
c000100d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001013:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001019:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000101f:	73 06                	jae    c0001027 <sYSMALLOc+0x22e>
c0001021:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001027:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000102a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000102d:	83 e2 fc             	and    edx,0xfffffffc
c0001030:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001034:	0f 82 3c fe ff ff    	jb     c0000e76 <sYSMALLOc+0x7d>
c000103a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000103e:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001041:	29 fa                	sub    edx,edi
c0001043:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001046:	83 ca 01             	or     edx,0x1
c0001049:	89 fb                	mov    ebx,edi
c000104b:	83 c0 08             	add    eax,0x8
c000104e:	83 cb 01             	or     ebx,0x1
c0001051:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001054:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001057:	83 c4 2c             	add    esp,0x2c
c000105a:	5b                   	pop    ebx
c000105b:	5e                   	pop    esi
c000105c:	5f                   	pop    edi
c000105d:	5d                   	pop    ebp
c000105e:	c3                   	ret    

c000105f <dlmalloc>:
c000105f:	55                   	push   ebp
c0001060:	57                   	push   edi
c0001061:	56                   	push   esi
c0001062:	53                   	push   ebx
c0001063:	83 ec 1c             	sub    esp,0x1c
c0001066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000106a:	83 f8 df             	cmp    eax,0xffffffdf
c000106d:	0f 87 70 03 00 00    	ja     c00013e3 <dlmalloc+0x384>
c0001073:	83 c0 0b             	add    eax,0xb
c0001076:	be 10 00 00 00       	mov    esi,0x10
c000107b:	83 f8 0f             	cmp    eax,0xf
c000107e:	76 05                	jbe    c0001085 <dlmalloc+0x26>
c0001080:	83 e0 f8             	and    eax,0xfffffff8
c0001083:	89 c6                	mov    esi,eax
c0001085:	8b 3d 20 b5 03 c0    	mov    edi,DWORD PTR ds:0xc003b520
c000108b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001091:	75 17                	jne    c00010aa <dlmalloc+0x4b>
c0001093:	85 ff                	test   edi,edi
c0001095:	0f 85 05 03 00 00    	jne    c00013a0 <dlmalloc+0x341>
c000109b:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c00010a0:	e8 78 fb ff ff       	call   c0000c1d <malloc_consolidate>
c00010a5:	e9 f6 02 00 00       	jmp    c00013a0 <dlmalloc+0x341>
c00010aa:	39 f7                	cmp    edi,esi
c00010ac:	72 1f                	jb     c00010cd <dlmalloc+0x6e>
c00010ae:	89 f2                	mov    edx,esi
c00010b0:	c1 ea 03             	shr    edx,0x3
c00010b3:	83 ea 02             	sub    edx,0x2
c00010b6:	8b 04 95 24 b5 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4adc]
c00010bd:	85 c0                	test   eax,eax
c00010bf:	74 0c                	je     c00010cd <dlmalloc+0x6e>
c00010c1:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00010c4:	89 0c 95 24 b5 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4adc],ecx
c00010cb:	eb 30                	jmp    c00010fd <dlmalloc+0x9e>
c00010cd:	89 f0                	mov    eax,esi
c00010cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010d5:	77 2e                	ja     c0001105 <dlmalloc+0xa6>
c00010d7:	c1 e8 03             	shr    eax,0x3
c00010da:	8d 14 c5 54 b5 03 c0 	lea    edx,[eax*8-0x3ffc4aac]
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010eb:	39 c3                	cmp    ebx,eax
c00010ed:	74 2e                	je     c000111d <dlmalloc+0xbe>
c00010ef:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010f2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010f7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010fa:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010fd:	83 c0 08             	add    eax,0x8
c0001100:	e9 e0 02 00 00       	jmp    c00013e5 <dlmalloc+0x386>
c0001105:	e8 8f fa ff ff       	call   c0000b99 <largebin_index>
c000110a:	83 e7 02             	and    edi,0x2
c000110d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001111:	74 0a                	je     c000111d <dlmalloc+0xbe>
c0001113:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c0001118:	e8 00 fb ff ff       	call   c0000c1d <malloc_consolidate>
c000111d:	8d 46 10             	lea    eax,[esi+0x10]
c0001120:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001124:	8b 1d 60 b5 03 c0    	mov    ebx,DWORD PTR ds:0xc003b560
c000112a:	81 fb 54 b5 03 c0    	cmp    ebx,0xc003b554
c0001130:	0f 84 13 01 00 00    	je     c0001249 <dlmalloc+0x1ea>
c0001136:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001139:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000113c:	83 e7 fc             	and    edi,0xfffffffc
c000113f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001145:	77 4c                	ja     c0001193 <dlmalloc+0x134>
c0001147:	3d 54 b5 03 c0       	cmp    eax,0xc003b554
c000114c:	75 45                	jne    c0001193 <dlmalloc+0x134>
c000114e:	39 1d 50 b5 03 c0    	cmp    DWORD PTR ds:0xc003b550,ebx
c0001154:	75 3d                	jne    c0001193 <dlmalloc+0x134>
c0001156:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000115a:	73 37                	jae    c0001193 <dlmalloc+0x134>
c000115c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000115f:	89 fa                	mov    edx,edi
c0001161:	a3 5c b5 03 c0       	mov    ds:0xc003b55c,eax
c0001166:	a3 60 b5 03 c0       	mov    ds:0xc003b560,eax
c000116b:	a3 50 b5 03 c0       	mov    ds:0xc003b550,eax
c0001170:	29 f2                	sub    edx,esi
c0001172:	c7 40 08 54 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b554
c0001179:	c7 40 0c 54 b5 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b554
c0001180:	83 ce 01             	or     esi,0x1
c0001183:	89 d1                	mov    ecx,edx
c0001185:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001188:	83 c9 01             	or     ecx,0x1
c000118b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000118e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001191:	eb 15                	jmp    c00011a8 <dlmalloc+0x149>
c0001193:	a3 60 b5 03 c0       	mov    ds:0xc003b560,eax
c0001198:	39 fe                	cmp    esi,edi
c000119a:	c7 40 08 54 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b554
c00011a1:	75 0d                	jne    c00011b0 <dlmalloc+0x151>
c00011a3:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011a8:	8d 43 08             	lea    eax,[ebx+0x8]
c00011ab:	e9 35 02 00 00       	jmp    c00013e5 <dlmalloc+0x386>
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	81 ff ff 00 00 00    	cmp    edi,0xff
c00011b8:	77 19                	ja     c00011d3 <dlmalloc+0x174>
c00011ba:	c1 e8 03             	shr    eax,0x3
c00011bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00011c0:	83 c2 0d             	add    edx,0xd
c00011c3:	8d 2c 95 18 b5 03 c0 	lea    ebp,[edx*4-0x3ffc4ae8]
c00011ca:	8b 14 95 20 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4ae0]
c00011d1:	eb 46                	jmp    c0001219 <dlmalloc+0x1ba>
c00011d3:	e8 c1 f9 ff ff       	call   c0000b99 <largebin_index>
c00011d8:	8d 14 00             	lea    edx,[eax+eax*1]
c00011db:	83 c2 0d             	add    edx,0xd
c00011de:	8d 0c 95 20 b5 03 c0 	lea    ecx,[edx*4-0x3ffc4ae0]
c00011e5:	8b 14 95 20 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4ae0]
c00011ec:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ef:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011f3:	89 d5                	mov    ebp,edx
c00011f5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011f9:	74 1e                	je     c0001219 <dlmalloc+0x1ba>
c00011fb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011fe:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001201:	77 12                	ja     c0001215 <dlmalloc+0x1b6>
c0001203:	83 cf 01             	or     edi,0x1
c0001206:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001209:	76 05                	jbe    c0001210 <dlmalloc+0x1b1>
c000120b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000120e:	eb f6                	jmp    c0001206 <dlmalloc+0x1a7>
c0001210:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001213:	eb 04                	jmp    c0001219 <dlmalloc+0x1ba>
c0001215:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001219:	89 c7                	mov    edi,eax
c000121b:	88 c1                	mov    cl,al
c000121d:	c1 ff 05             	sar    edi,0x5
c0001220:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001224:	bf 01 00 00 00       	mov    edi,0x1
c0001229:	d3 e7                	shl    edi,cl
c000122b:	89 f8                	mov    eax,edi
c000122d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001231:	09 04 bd 54 b8 03 c0 	or     DWORD PTR [edi*4-0x3ffc47ac],eax
c0001238:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000123b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000123e:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001241:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001244:	e9 db fe ff ff       	jmp    c0001124 <dlmalloc+0xc5>
c0001249:	81 fe ff 00 00 00    	cmp    esi,0xff
c000124f:	76 78                	jbe    c00012c9 <dlmalloc+0x26a>
c0001251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001255:	8d 04 c5 54 b5 03 c0 	lea    eax,[eax*8-0x3ffc4aac]
c000125c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000125f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001262:	39 ca                	cmp    edx,ecx
c0001264:	74 63                	je     c00012c9 <dlmalloc+0x26a>
c0001266:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001269:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000126c:	83 e3 fc             	and    ebx,0xfffffffc
c000126f:	39 de                	cmp    esi,ebx
c0001271:	77 52                	ja     c00012c5 <dlmalloc+0x266>
c0001273:	89 df                	mov    edi,ebx
c0001275:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001278:	29 f7                	sub    edi,esi
c000127a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000127d:	01 d3                	add    ebx,edx
c000127f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001282:	83 ff 0f             	cmp    edi,0xf
c0001285:	8d 42 08             	lea    eax,[edx+0x8]
c0001288:	77 09                	ja     c0001293 <dlmalloc+0x234>
c000128a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000128e:	e9 52 01 00 00       	jmp    c00013e5 <dlmalloc+0x386>
c0001293:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001296:	83 ce 01             	or     esi,0x1
c0001299:	89 0d 5c b5 03 c0    	mov    DWORD PTR ds:0xc003b55c,ecx
c000129f:	89 0d 60 b5 03 c0    	mov    DWORD PTR ds:0xc003b560,ecx
c00012a5:	c7 41 08 54 b5 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b554
c00012ac:	c7 41 0c 54 b5 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b554
c00012b3:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00012b6:	89 fa                	mov    edx,edi
c00012b8:	83 ca 01             	or     edx,0x1
c00012bb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00012be:	89 3b                	mov    DWORD PTR [ebx],edi
c00012c0:	e9 20 01 00 00       	jmp    c00013e5 <dlmalloc+0x386>
c00012c5:	89 c2                	mov    edx,eax
c00012c7:	eb 99                	jmp    c0001262 <dlmalloc+0x203>
c00012c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	41                   	inc    ecx
c00012d3:	89 cb                	mov    ebx,ecx
c00012d5:	8d 14 cd 4c b5 03 c0 	lea    edx,[ecx*8-0x3ffc4ab4]
c00012dc:	c1 eb 05             	shr    ebx,0x5
c00012df:	d3 e0                	shl    eax,cl
c00012e1:	8b 3c 9d 54 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc47ac]
c00012e8:	39 f8                	cmp    eax,edi
c00012ea:	77 04                	ja     c00012f0 <dlmalloc+0x291>
c00012ec:	85 c0                	test   eax,eax
c00012ee:	75 26                	jne    c0001316 <dlmalloc+0x2b7>
c00012f0:	43                   	inc    ebx
c00012f1:	83 fb 02             	cmp    ebx,0x2
c00012f4:	0f 87 a6 00 00 00    	ja     c00013a0 <dlmalloc+0x341>
c00012fa:	8b 3c 9d 54 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc47ac]
c0001301:	85 ff                	test   edi,edi
c0001303:	74 eb                	je     c00012f0 <dlmalloc+0x291>
c0001305:	89 d8                	mov    eax,ebx
c0001307:	c1 e0 06             	shl    eax,0x6
c000130a:	8d 14 85 4c b5 03 c0 	lea    edx,[eax*4-0x3ffc4ab4]
c0001311:	b8 01 00 00 00       	mov    eax,0x1
c0001316:	85 f8                	test   eax,edi
c0001318:	75 07                	jne    c0001321 <dlmalloc+0x2c2>
c000131a:	83 c2 08             	add    edx,0x8
c000131d:	01 c0                	add    eax,eax
c000131f:	eb f5                	jmp    c0001316 <dlmalloc+0x2b7>
c0001321:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001324:	39 ca                	cmp    edx,ecx
c0001326:	75 14                	jne    c000133c <dlmalloc+0x2dd>
c0001328:	89 c1                	mov    ecx,eax
c000132a:	83 c2 08             	add    edx,0x8
c000132d:	f7 d1                	not    ecx
c000132f:	01 c0                	add    eax,eax
c0001331:	21 cf                	and    edi,ecx
c0001333:	89 3c 9d 54 b8 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc47ac],edi
c000133a:	eb ac                	jmp    c00012e8 <dlmalloc+0x289>
c000133c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000133f:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001342:	83 e0 fc             	and    eax,0xfffffffc
c0001345:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001348:	89 c3                	mov    ebx,eax
c000134a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000134d:	29 f3                	sub    ebx,esi
c000134f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001352:	83 fb 0f             	cmp    ebx,0xf
c0001355:	8d 41 08             	lea    eax,[ecx+0x8]
c0001358:	77 09                	ja     c0001363 <dlmalloc+0x304>
c000135a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000135e:	e9 82 00 00 00       	jmp    c00013e5 <dlmalloc+0x386>
c0001363:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001366:	81 fe ff 00 00 00    	cmp    esi,0xff
c000136c:	89 3d 5c b5 03 c0    	mov    DWORD PTR ds:0xc003b55c,edi
c0001372:	89 3d 60 b5 03 c0    	mov    DWORD PTR ds:0xc003b560,edi
c0001378:	c7 47 08 54 b5 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b554
c000137f:	c7 47 0c 54 b5 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b554
c0001386:	77 06                	ja     c000138e <dlmalloc+0x32f>
c0001388:	89 3d 50 b5 03 c0    	mov    DWORD PTR ds:0xc003b550,edi
c000138e:	83 ce 01             	or     esi,0x1
c0001391:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001394:	89 d9                	mov    ecx,ebx
c0001396:	83 c9 01             	or     ecx,0x1
c0001399:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000139c:	89 1a                	mov    DWORD PTR [edx],ebx
c000139e:	eb 45                	jmp    c00013e5 <dlmalloc+0x386>
c00013a0:	a1 4c b5 03 c0       	mov    eax,ds:0xc003b54c
c00013a5:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013ab:	83 e2 fc             	and    edx,0xfffffffc
c00013ae:	39 d1                	cmp    ecx,edx
c00013b0:	77 1e                	ja     c00013d0 <dlmalloc+0x371>
c00013b2:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00013b5:	89 f3                	mov    ebx,esi
c00013b7:	89 0d 4c b5 03 c0    	mov    DWORD PTR ds:0xc003b54c,ecx
c00013bd:	83 cb 01             	or     ebx,0x1
c00013c0:	29 f2                	sub    edx,esi
c00013c2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013c5:	83 ca 01             	or     edx,0x1
c00013c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013cb:	e9 2d fd ff ff       	jmp    c00010fd <dlmalloc+0x9e>
c00013d0:	83 c4 1c             	add    esp,0x1c
c00013d3:	89 f0                	mov    eax,esi
c00013d5:	5b                   	pop    ebx
c00013d6:	ba 20 b5 03 c0       	mov    edx,0xc003b520
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 16 fa ff ff       	jmp    c0000df9 <sYSMALLOc>
c00013e3:	31 c0                	xor    eax,eax
c00013e5:	83 c4 1c             	add    esp,0x1c
c00013e8:	5b                   	pop    ebx
c00013e9:	5e                   	pop    esi
c00013ea:	5f                   	pop    edi
c00013eb:	5d                   	pop    ebp
c00013ec:	c3                   	ret    

c00013ed <iALLOc>:
c00013ed:	55                   	push   ebp
c00013ee:	89 c5                	mov    ebp,eax
c00013f0:	57                   	push   edi
c00013f1:	56                   	push   esi
c00013f2:	53                   	push   ebx
c00013f3:	83 ec 2c             	sub    esp,0x2c
c00013f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013fa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001402:	83 3d 20 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b520,0x0
c0001409:	75 12                	jne    c000141d <iALLOc+0x30>
c000140b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000140f:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c0001414:	e8 04 f8 ff ff       	call   c0000c1d <malloc_consolidate>
c0001419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000141d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001422:	74 12                	je     c0001436 <iALLOc+0x49>
c0001424:	85 ed                	test   ebp,ebp
c0001426:	0f 84 64 01 00 00    	je     c0001590 <iALLOc+0x1a3>
c000142c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001434:	eb 33                	jmp    c0001469 <iALLOc+0x7c>
c0001436:	85 ed                	test   ebp,ebp
c0001438:	75 14                	jne    c000144e <iALLOc+0x61>
c000143a:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001442:	83 c4 2c             	add    esp,0x2c
c0001445:	5b                   	pop    ebx
c0001446:	5e                   	pop    esi
c0001447:	5f                   	pop    edi
c0001448:	5d                   	pop    ebp
c0001449:	e9 11 fc ff ff       	jmp    c000105f <dlmalloc>
c000144e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001455:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000145d:	83 f8 0f             	cmp    eax,0xf
c0001460:	76 07                	jbe    c0001469 <iALLOc+0x7c>
c0001462:	83 e0 f8             	and    eax,0xfffffff8
c0001465:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001469:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000146e:	75 09                	jne    c0001479 <iALLOc+0x8c>
c0001470:	89 d0                	mov    eax,edx
c0001472:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001475:	31 f6                	xor    esi,esi
c0001477:	eb 3b                	jmp    c00014b4 <iALLOc+0xc7>
c0001479:	8b 02                	mov    eax,DWORD PTR [edx]
c000147b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001483:	83 c0 0b             	add    eax,0xb
c0001486:	83 f8 0f             	cmp    eax,0xf
c0001489:	76 07                	jbe    c0001492 <iALLOc+0xa5>
c000148b:	83 e0 f8             	and    eax,0xfffffff8
c000148e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001492:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001496:	0f af f5             	imul   esi,ebp
c0001499:	eb 25                	jmp    c00014c0 <iALLOc+0xd3>
c000149b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000149d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014a0:	bb 10 00 00 00       	mov    ebx,0x10
c00014a5:	83 f9 0f             	cmp    ecx,0xf
c00014a8:	76 05                	jbe    c00014af <iALLOc+0xc2>
c00014aa:	83 e1 f8             	and    ecx,0xfffffff8
c00014ad:	89 cb                	mov    ebx,ecx
c00014af:	01 de                	add    esi,ebx
c00014b1:	83 c0 04             	add    eax,0x4
c00014b4:	39 c7                	cmp    edi,eax
c00014b6:	75 e3                	jne    c000149b <iALLOc+0xae>
c00014b8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00014c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00014c4:	8b 1d 74 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b874
c00014ca:	83 ec 0c             	sub    esp,0xc
c00014cd:	c7 05 74 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b874,0x0
c00014d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014db:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014df:	50                   	push   eax
c00014e0:	e8 7a fb ff ff       	call   c000105f <dlmalloc>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	89 1d 74 b8 03 c0    	mov    DWORD PTR ds:0xc003b874,ebx
c00014ee:	85 c0                	test   eax,eax
c00014f0:	0f 84 92 00 00 00    	je     c0001588 <iALLOc+0x19b>
c00014f6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014f9:	8d 78 f8             	lea    edi,[eax-0x8]
c00014fc:	83 e3 fc             	and    ebx,0xfffffffc
c00014ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001503:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001508:	74 1e                	je     c0001528 <iALLOc+0x13b>
c000150a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000150e:	89 d9                	mov    ecx,ebx
c0001510:	52                   	push   edx
c0001511:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001515:	83 e9 04             	sub    ecx,0x4
c0001518:	51                   	push   ecx
c0001519:	6a 00                	push   0x0
c000151b:	50                   	push   eax
c000151c:	e8 9f f1 ff ff       	call   c00006c0 <memset>
c0001521:	83 c4 10             	add    esp,0x10
c0001524:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001528:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000152d:	75 14                	jne    c0001543 <iALLOc+0x156>
c000152f:	8d 04 37             	lea    eax,[edi+esi*1]
c0001532:	29 f3                	sub    ebx,esi
c0001534:	8d 48 08             	lea    ecx,[eax+0x8]
c0001537:	83 cb 01             	or     ebx,0x1
c000153a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000153e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001541:	89 f3                	mov    ebx,esi
c0001543:	31 c0                	xor    eax,eax
c0001545:	4d                   	dec    ebp
c0001546:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001549:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000154d:	39 c5                	cmp    ebp,eax
c000154f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001552:	74 2c                	je     c0001580 <iALLOc+0x193>
c0001554:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001558:	85 c9                	test   ecx,ecx
c000155a:	75 15                	jne    c0001571 <iALLOc+0x184>
c000155c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000155f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001562:	b9 10 00 00 00       	mov    ecx,0x10
c0001567:	83 fe 0f             	cmp    esi,0xf
c000156a:	76 05                	jbe    c0001571 <iALLOc+0x184>
c000156c:	83 e6 f8             	and    esi,0xfffffff8
c000156f:	89 f1                	mov    ecx,esi
c0001571:	89 ce                	mov    esi,ecx
c0001573:	29 cb                	sub    ebx,ecx
c0001575:	83 ce 01             	or     esi,0x1
c0001578:	40                   	inc    eax
c0001579:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000157c:	01 cf                	add    edi,ecx
c000157e:	eb c6                	jmp    c0001546 <iALLOc+0x159>
c0001580:	83 cb 01             	or     ebx,0x1
c0001583:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001586:	eb 08                	jmp    c0001590 <iALLOc+0x1a3>
c0001588:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001590:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001594:	83 c4 2c             	add    esp,0x2c
c0001597:	5b                   	pop    ebx
c0001598:	5e                   	pop    esi
c0001599:	5f                   	pop    edi
c000159a:	5d                   	pop    ebp
c000159b:	c3                   	ret    

c000159c <dlrealloc>:
c000159c:	55                   	push   ebp
c000159d:	57                   	push   edi
c000159e:	56                   	push   esi
c000159f:	53                   	push   ebx
c00015a0:	83 ec 1c             	sub    esp,0x1c
c00015a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015ab:	85 db                	test   ebx,ebx
c00015ad:	75 10                	jne    c00015bf <dlrealloc+0x23>
c00015af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015b3:	83 c4 1c             	add    esp,0x1c
c00015b6:	5b                   	pop    ebx
c00015b7:	5e                   	pop    esi
c00015b8:	5f                   	pop    edi
c00015b9:	5d                   	pop    ebp
c00015ba:	e9 a0 fa ff ff       	jmp    c000105f <dlmalloc>
c00015bf:	83 f8 df             	cmp    eax,0xffffffdf
c00015c2:	76 07                	jbe    c00015cb <dlrealloc+0x2f>
c00015c4:	31 db                	xor    ebx,ebx
c00015c6:	e9 7c 01 00 00       	jmp    c0001747 <dlrealloc+0x1ab>
c00015cb:	83 c0 0b             	add    eax,0xb
c00015ce:	bf 10 00 00 00       	mov    edi,0x10
c00015d3:	83 f8 0f             	cmp    eax,0xf
c00015d6:	76 05                	jbe    c00015dd <dlrealloc+0x41>
c00015d8:	83 e0 f8             	and    eax,0xfffffff8
c00015db:	89 c7                	mov    edi,eax
c00015dd:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015e0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00015e3:	89 c6                	mov    esi,eax
c00015e5:	83 e6 fc             	and    esi,0xfffffffc
c00015e8:	a8 02                	test   al,0x2
c00015ea:	75 d8                	jne    c00015c4 <dlrealloc+0x28>
c00015ec:	39 f7                	cmp    edi,esi
c00015ee:	0f 86 15 01 00 00    	jbe    c0001709 <dlrealloc+0x16d>
c00015f4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00015f8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015fb:	39 15 4c b5 03 c0    	cmp    DWORD PTR ds:0xc003b54c,edx
c0001601:	75 33                	jne    c0001636 <dlrealloc+0x9a>
c0001603:	83 e1 fc             	and    ecx,0xfffffffc
c0001606:	01 f1                	add    ecx,esi
c0001608:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000160c:	8d 4f 10             	lea    ecx,[edi+0x10]
c000160f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001613:	77 49                	ja     c000165e <dlrealloc+0xc2>
c0001615:	01 fd                	add    ebp,edi
c0001617:	83 e0 01             	and    eax,0x1
c000161a:	09 f8                	or     eax,edi
c000161c:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000161f:	89 2d 4c b5 03 c0    	mov    DWORD PTR ds:0xc003b54c,ebp
c0001625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001629:	29 f8                	sub    eax,edi
c000162b:	83 c8 01             	or     eax,0x1
c000162e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001631:	e9 11 01 00 00       	jmp    c0001747 <dlrealloc+0x1ab>
c0001636:	89 c8                	mov    eax,ecx
c0001638:	83 e0 fe             	and    eax,0xfffffffe
c000163b:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001640:	75 1c                	jne    c000165e <dlrealloc+0xc2>
c0001642:	83 e1 fc             	and    ecx,0xfffffffc
c0001645:	01 f1                	add    ecx,esi
c0001647:	39 cf                	cmp    edi,ecx
c0001649:	77 13                	ja     c000165e <dlrealloc+0xc2>
c000164b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000164e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001651:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001654:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001657:	89 ce                	mov    esi,ecx
c0001659:	e9 ab 00 00 00       	jmp    c0001709 <dlrealloc+0x16d>
c000165e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001662:	8d 47 f9             	lea    eax,[edi-0x7]
c0001665:	83 ec 0c             	sub    esp,0xc
c0001668:	50                   	push   eax
c0001669:	e8 f1 f9 ff ff       	call   c000105f <dlmalloc>
c000166e:	83 c4 10             	add    esp,0x10
c0001671:	89 c1                	mov    ecx,eax
c0001673:	85 c0                	test   eax,eax
c0001675:	0f 84 49 ff ff ff    	je     c00015c4 <dlrealloc+0x28>
c000167b:	8d 40 f8             	lea    eax,[eax-0x8]
c000167e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001682:	39 c2                	cmp    edx,eax
c0001684:	75 0a                	jne    c0001690 <dlrealloc+0xf4>
c0001686:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001689:	83 e0 fc             	and    eax,0xfffffffc
c000168c:	01 c6                	add    esi,eax
c000168e:	eb 79                	jmp    c0001709 <dlrealloc+0x16d>
c0001690:	83 ee 04             	sub    esi,0x4
c0001693:	83 fe 27             	cmp    esi,0x27
c0001696:	76 16                	jbe    c00016ae <dlrealloc+0x112>
c0001698:	50                   	push   eax
c0001699:	56                   	push   esi
c000169a:	53                   	push   ebx
c000169b:	51                   	push   ecx
c000169c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00016a0:	e8 cf ef ff ff       	call   c0000674 <memcpy>
c00016a5:	83 c4 10             	add    esp,0x10
c00016a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00016ac:	eb 43                	jmp    c00016f1 <dlrealloc+0x155>
c00016ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00016b0:	83 fe 13             	cmp    esi,0x13
c00016b3:	89 01                	mov    DWORD PTR [ecx],eax
c00016b5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00016b8:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00016bb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00016be:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00016c1:	76 2e                	jbe    c00016f1 <dlrealloc+0x155>
c00016c3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00016c6:	83 fe 1b             	cmp    esi,0x1b
c00016c9:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00016cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00016cf:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00016d2:	76 1d                	jbe    c00016f1 <dlrealloc+0x155>
c00016d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00016d7:	83 fe 23             	cmp    esi,0x23
c00016da:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00016dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00016e0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00016e3:	76 0c                	jbe    c00016f1 <dlrealloc+0x155>
c00016e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00016e8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00016eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00016ee:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00016f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f5:	83 ec 0c             	sub    esp,0xc
c00016f8:	53                   	push   ebx
c00016f9:	e8 06 f6 ff ff       	call   c0000d04 <dlfree>
c00016fe:	83 c4 10             	add    esp,0x10
c0001701:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001705:	89 cb                	mov    ebx,ecx
c0001707:	eb 3e                	jmp    c0001747 <dlrealloc+0x1ab>
c0001709:	89 f2                	mov    edx,esi
c000170b:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000170e:	29 fa                	sub    edx,edi
c0001710:	83 e1 01             	and    ecx,0x1
c0001713:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001717:	83 fa 0f             	cmp    edx,0xf
c000171a:	77 0b                	ja     c0001727 <dlrealloc+0x18b>
c000171c:	09 ce                	or     esi,ecx
c000171e:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001721:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001725:	eb 20                	jmp    c0001747 <dlrealloc+0x1ab>
c0001727:	01 fd                	add    ebp,edi
c0001729:	83 ec 0c             	sub    esp,0xc
c000172c:	09 cf                	or     edi,ecx
c000172e:	83 ca 01             	or     edx,0x1
c0001731:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001734:	83 c5 08             	add    ebp,0x8
c0001737:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000173a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000173e:	55                   	push   ebp
c000173f:	e8 c0 f5 ff ff       	call   c0000d04 <dlfree>
c0001744:	83 c4 10             	add    esp,0x10
c0001747:	83 c4 1c             	add    esp,0x1c
c000174a:	89 d8                	mov    eax,ebx
c000174c:	5b                   	pop    ebx
c000174d:	5e                   	pop    esi
c000174e:	5f                   	pop    edi
c000174f:	5d                   	pop    ebp
c0001750:	c3                   	ret    

c0001751 <dlmemalign>:
c0001751:	55                   	push   ebp
c0001752:	57                   	push   edi
c0001753:	56                   	push   esi
c0001754:	53                   	push   ebx
c0001755:	83 ec 0c             	sub    esp,0xc
c0001758:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000175c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001760:	83 fa 08             	cmp    edx,0x8
c0001763:	77 10                	ja     c0001775 <dlmemalign+0x24>
c0001765:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001769:	83 c4 0c             	add    esp,0xc
c000176c:	5b                   	pop    ebx
c000176d:	5e                   	pop    esi
c000176e:	5f                   	pop    edi
c000176f:	5d                   	pop    ebp
c0001770:	e9 ea f8 ff ff       	jmp    c000105f <dlmalloc>
c0001775:	bf 10 00 00 00       	mov    edi,0x10
c000177a:	83 fa 0f             	cmp    edx,0xf
c000177d:	76 13                	jbe    c0001792 <dlmemalign+0x41>
c000177f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001782:	85 d1                	test   ecx,edx
c0001784:	75 04                	jne    c000178a <dlmemalign+0x39>
c0001786:	89 d7                	mov    edi,edx
c0001788:	eb 08                	jmp    c0001792 <dlmemalign+0x41>
c000178a:	39 d7                	cmp    edi,edx
c000178c:	73 04                	jae    c0001792 <dlmemalign+0x41>
c000178e:	01 ff                	add    edi,edi
c0001790:	eb f8                	jmp    c000178a <dlmemalign+0x39>
c0001792:	83 f8 df             	cmp    eax,0xffffffdf
c0001795:	76 07                	jbe    c000179e <dlmemalign+0x4d>
c0001797:	31 c0                	xor    eax,eax
c0001799:	e9 ce 00 00 00       	jmp    c000186c <dlmemalign+0x11b>
c000179e:	83 c0 0b             	add    eax,0xb
c00017a1:	bd 10 00 00 00       	mov    ebp,0x10
c00017a6:	83 f8 0f             	cmp    eax,0xf
c00017a9:	76 05                	jbe    c00017b0 <dlmemalign+0x5f>
c00017ab:	83 e0 f8             	and    eax,0xfffffff8
c00017ae:	89 c5                	mov    ebp,eax
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017b7:	50                   	push   eax
c00017b8:	e8 a2 f8 ff ff       	call   c000105f <dlmalloc>
c00017bd:	83 c4 10             	add    esp,0x10
c00017c0:	89 c1                	mov    ecx,eax
c00017c2:	85 c0                	test   eax,eax
c00017c4:	74 d1                	je     c0001797 <dlmemalign+0x46>
c00017c6:	31 d2                	xor    edx,edx
c00017c8:	8d 70 f8             	lea    esi,[eax-0x8]
c00017cb:	f7 f7                	div    edi
c00017cd:	85 d2                	test   edx,edx
c00017cf:	74 62                	je     c0001833 <dlmemalign+0xe2>
c00017d1:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00017d5:	89 f8                	mov    eax,edi
c00017d7:	f7 d8                	neg    eax
c00017d9:	21 c3                	and    ebx,eax
c00017db:	83 eb 08             	sub    ebx,0x8
c00017de:	89 d8                	mov    eax,ebx
c00017e0:	29 f0                	sub    eax,esi
c00017e2:	83 f8 0f             	cmp    eax,0xf
c00017e5:	77 02                	ja     c00017e9 <dlmemalign+0x98>
c00017e7:	01 fb                	add    ebx,edi
c00017e9:	89 d8                	mov    eax,ebx
c00017eb:	29 f0                	sub    eax,esi
c00017ed:	89 c6                	mov    esi,eax
c00017ef:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017f2:	89 c2                	mov    edx,eax
c00017f4:	83 e2 fc             	and    edx,0xfffffffc
c00017f7:	29 f2                	sub    edx,esi
c00017f9:	a8 02                	test   al,0x2
c00017fb:	74 10                	je     c000180d <dlmemalign+0xbc>
c00017fd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001800:	83 ca 02             	or     edx,0x2
c0001803:	8d 43 08             	lea    eax,[ebx+0x8]
c0001806:	89 33                	mov    DWORD PTR [ebx],esi
c0001808:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000180b:	eb 5f                	jmp    c000186c <dlmemalign+0x11b>
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	89 d0                	mov    eax,edx
c0001812:	83 c8 01             	or     eax,0x1
c0001815:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001818:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000181d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001820:	83 e0 01             	and    eax,0x1
c0001823:	09 f0                	or     eax,esi
c0001825:	89 de                	mov    esi,ebx
c0001827:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000182a:	51                   	push   ecx
c000182b:	e8 d4 f4 ff ff       	call   c0000d04 <dlfree>
c0001830:	83 c4 10             	add    esp,0x10
c0001833:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001836:	a8 02                	test   al,0x2
c0001838:	75 2f                	jne    c0001869 <dlmemalign+0x118>
c000183a:	83 e0 fc             	and    eax,0xfffffffc
c000183d:	8d 55 10             	lea    edx,[ebp+0x10]
c0001840:	39 c2                	cmp    edx,eax
c0001842:	73 25                	jae    c0001869 <dlmemalign+0x118>
c0001844:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	29 e8                	sub    eax,ebp
c000184c:	83 c2 08             	add    edx,0x8
c000184f:	83 c8 01             	or     eax,0x1
c0001852:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001855:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001858:	83 e0 01             	and    eax,0x1
c000185b:	09 c5                	or     ebp,eax
c000185d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001860:	52                   	push   edx
c0001861:	e8 9e f4 ff ff       	call   c0000d04 <dlfree>
c0001866:	83 c4 10             	add    esp,0x10
c0001869:	8d 46 08             	lea    eax,[esi+0x8]
c000186c:	83 c4 0c             	add    esp,0xc
c000186f:	5b                   	pop    ebx
c0001870:	5e                   	pop    esi
c0001871:	5f                   	pop    edi
c0001872:	5d                   	pop    ebp
c0001873:	c3                   	ret    

c0001874 <dlcalloc>:
c0001874:	53                   	push   ebx
c0001875:	83 ec 14             	sub    esp,0x14
c0001878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000187c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001881:	50                   	push   eax
c0001882:	e8 d8 f7 ff ff       	call   c000105f <dlmalloc>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 c3                	mov    ebx,eax
c000188c:	85 c0                	test   eax,eax
c000188e:	74 77                	je     c0001907 <dlcalloc+0x93>
c0001890:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001893:	89 d0                	mov    eax,edx
c0001895:	83 e0 fc             	and    eax,0xfffffffc
c0001898:	80 e2 02             	and    dl,0x2
c000189b:	75 5a                	jne    c00018f7 <dlcalloc+0x83>
c000189d:	83 e8 04             	sub    eax,0x4
c00018a0:	83 f8 27             	cmp    eax,0x27
c00018a3:	76 03                	jbe    c00018a8 <dlcalloc+0x34>
c00018a5:	51                   	push   ecx
c00018a6:	eb 53                	jmp    c00018fb <dlcalloc+0x87>
c00018a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018ae:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018b5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018bc:	83 f8 13             	cmp    eax,0x13
c00018bf:	76 46                	jbe    c0001907 <dlcalloc+0x93>
c00018c1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00018c8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00018cf:	83 f8 1b             	cmp    eax,0x1b
c00018d2:	76 33                	jbe    c0001907 <dlcalloc+0x93>
c00018d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00018db:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018e2:	83 f8 23             	cmp    eax,0x23
c00018e5:	76 20                	jbe    c0001907 <dlcalloc+0x93>
c00018e7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018ee:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018f5:	eb 10                	jmp    c0001907 <dlcalloc+0x93>
c00018f7:	83 e8 08             	sub    eax,0x8
c00018fa:	52                   	push   edx
c00018fb:	50                   	push   eax
c00018fc:	6a 00                	push   0x0
c00018fe:	53                   	push   ebx
c00018ff:	e8 bc ed ff ff       	call   c00006c0 <memset>
c0001904:	83 c4 10             	add    esp,0x10
c0001907:	89 d8                	mov    eax,ebx
c0001909:	83 c4 08             	add    esp,0x8
c000190c:	5b                   	pop    ebx
c000190d:	c3                   	ret    

c000190e <dlcfree>:
c000190e:	e9 f1 f3 ff ff       	jmp    c0000d04 <dlfree>

c0001913 <dlindependent_calloc>:
c0001913:	83 ec 28             	sub    esp,0x28
c0001916:	b9 03 00 00 00       	mov    ecx,0x3
c000191b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000191f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001927:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000192b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000192f:	e8 b9 fa ff ff       	call   c00013ed <iALLOc>
c0001934:	83 c4 2c             	add    esp,0x2c
c0001937:	c3                   	ret    

c0001938 <dlindependent_comalloc>:
c0001938:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000193c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001940:	31 c9                	xor    ecx,ecx
c0001942:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000194a:	e9 9e fa ff ff       	jmp    c00013ed <iALLOc>

c000194f <dlvalloc>:
c000194f:	83 ec 0c             	sub    esp,0xc
c0001952:	83 3d 20 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b520,0x0
c0001959:	75 0a                	jne    c0001965 <dlvalloc+0x16>
c000195b:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c0001960:	e8 b8 f2 ff ff       	call   c0000c1d <malloc_consolidate>
c0001965:	50                   	push   eax
c0001966:	50                   	push   eax
c0001967:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000196b:	ff 35 7c b8 03 c0    	push   DWORD PTR ds:0xc003b87c
c0001971:	e8 db fd ff ff       	call   c0001751 <dlmemalign>
c0001976:	83 c4 1c             	add    esp,0x1c
c0001979:	c3                   	ret    

c000197a <dlpvalloc>:
c000197a:	83 ec 0c             	sub    esp,0xc
c000197d:	83 3d 20 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b520,0x0
c0001984:	75 0a                	jne    c0001990 <dlpvalloc+0x16>
c0001986:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c000198b:	e8 8d f2 ff ff       	call   c0000c1d <malloc_consolidate>
c0001990:	a1 7c b8 03 c0       	mov    eax,ds:0xc003b87c
c0001995:	89 c1                	mov    ecx,eax
c0001997:	52                   	push   edx
c0001998:	f7 d9                	neg    ecx
c000199a:	52                   	push   edx
c000199b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000199f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019a3:	21 ca                	and    edx,ecx
c00019a5:	52                   	push   edx
c00019a6:	50                   	push   eax
c00019a7:	e8 a5 fd ff ff       	call   c0001751 <dlmemalign>
c00019ac:	83 c4 1c             	add    esp,0x1c
c00019af:	c3                   	ret    

c00019b0 <dlmalloc_trim>:
c00019b0:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c00019b5:	e8 63 f2 ff ff       	call   c0000c1d <malloc_consolidate>
c00019ba:	31 c0                	xor    eax,eax
c00019bc:	c3                   	ret    

c00019bd <dlmalloc_usable_size>:
c00019bd:	53                   	push   ebx
c00019be:	31 c0                	xor    eax,eax
c00019c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019c4:	85 c9                	test   ecx,ecx
c00019c6:	74 24                	je     c00019ec <dlmalloc_usable_size+0x2f>
c00019c8:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00019cb:	f6 c2 02             	test   dl,0x2
c00019ce:	74 08                	je     c00019d8 <dlmalloc_usable_size+0x1b>
c00019d0:	83 e2 fc             	and    edx,0xfffffffc
c00019d3:	8d 42 f8             	lea    eax,[edx-0x8]
c00019d6:	eb 14                	jmp    c00019ec <dlmalloc_usable_size+0x2f>
c00019d8:	89 d3                	mov    ebx,edx
c00019da:	31 c0                	xor    eax,eax
c00019dc:	83 e3 fe             	and    ebx,0xfffffffe
c00019df:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019e4:	74 06                	je     c00019ec <dlmalloc_usable_size+0x2f>
c00019e6:	83 e2 fc             	and    edx,0xfffffffc
c00019e9:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ec:	5b                   	pop    ebx
c00019ed:	c3                   	ret    

c00019ee <dlmallinfo>:
c00019ee:	55                   	push   ebp
c00019ef:	57                   	push   edi
c00019f0:	56                   	push   esi
c00019f1:	53                   	push   ebx
c00019f2:	83 ec 08             	sub    esp,0x8
c00019f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019f9:	83 3d 4c b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b54c,0x0
c0001a00:	75 0a                	jne    c0001a0c <dlmallinfo+0x1e>
c0001a02:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c0001a07:	e8 11 f2 ff ff       	call   c0000c1d <malloc_consolidate>
c0001a0c:	a1 4c b5 03 c0       	mov    eax,ds:0xc003b54c
c0001a11:	31 ed                	xor    ebp,ebp
c0001a13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a16:	31 c9                	xor    ecx,ecx
c0001a18:	83 e0 fc             	and    eax,0xfffffffc
c0001a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1f:	31 c0                	xor    eax,eax
c0001a21:	8b 14 85 24 b5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4adc]
c0001a28:	85 d2                	test   edx,edx
c0001a2a:	74 0e                	je     c0001a3a <dlmallinfo+0x4c>
c0001a2c:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a2f:	45                   	inc    ebp
c0001a30:	83 e6 fc             	and    esi,0xfffffffc
c0001a33:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a36:	01 f1                	add    ecx,esi
c0001a38:	eb ee                	jmp    c0001a28 <dlmallinfo+0x3a>
c0001a3a:	40                   	inc    eax
c0001a3b:	83 f8 0a             	cmp    eax,0xa
c0001a3e:	75 e1                	jne    c0001a21 <dlmallinfo+0x33>
c0001a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a44:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a4b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a4e:	b8 54 b5 03 c0       	mov    eax,0xc003b554
c0001a53:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a56:	39 f0                	cmp    eax,esi
c0001a58:	74 10                	je     c0001a6a <dlmallinfo+0x7c>
c0001a5a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a5d:	ff 04 24             	inc    DWORD PTR [esp]
c0001a60:	83 e7 fc             	and    edi,0xfffffffc
c0001a63:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a66:	01 fa                	add    edx,edi
c0001a68:	eb ec                	jmp    c0001a56 <dlmallinfo+0x68>
c0001a6a:	83 c0 08             	add    eax,0x8
c0001a6d:	3d 4c b8 03 c0       	cmp    eax,0xc003b84c
c0001a72:	75 df                	jne    c0001a53 <dlmallinfo+0x65>
c0001a74:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a77:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a7a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a7d:	a1 88 b8 03 c0       	mov    eax,ds:0xc003b888
c0001a82:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a85:	89 03                	mov    DWORD PTR [ebx],eax
c0001a87:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a8a:	8b 35 70 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b870
c0001a90:	29 d0                	sub    eax,edx
c0001a92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a95:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a98:	8b 35 84 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b884
c0001a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001aa2:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001aa5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001aa8:	8b 35 94 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b894
c0001aae:	89 d8                	mov    eax,ebx
c0001ab0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001ab3:	83 c4 08             	add    esp,0x8
c0001ab6:	5b                   	pop    ebx
c0001ab7:	5e                   	pop    esi
c0001ab8:	5f                   	pop    edi
c0001ab9:	5d                   	pop    ebp
c0001aba:	c2 04 00             	ret    0x4

c0001abd <dlmalloc_stats>:
c0001abd:	83 ec 30             	sub    esp,0x30
c0001ac0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ac4:	50                   	push   eax
c0001ac5:	e8 24 ff ff ff       	call   c00019ee <dlmallinfo>
c0001aca:	83 c4 30             	add    esp,0x30
c0001acd:	c3                   	ret    

c0001ace <dlmallopt>:
c0001ace:	56                   	push   esi
c0001acf:	b8 20 b5 03 c0       	mov    eax,0xc003b520
c0001ad4:	53                   	push   ebx
c0001ad5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001add:	e8 3b f1 ff ff       	call   c0000c1d <malloc_consolidate>
c0001ae2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ae5:	83 f8 05             	cmp    eax,0x5
c0001ae8:	77 67                	ja     c0001b51 <dlmallopt+0x83>
c0001aea:	ff 24 85 a4 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a5c]
c0001af1:	83 fb 50             	cmp    ebx,0x50
c0001af4:	77 5b                	ja     c0001b51 <dlmallopt+0x83>
c0001af6:	ba 08 00 00 00       	mov    edx,0x8
c0001afb:	85 db                	test   ebx,ebx
c0001afd:	74 12                	je     c0001b11 <dlmallopt+0x43>
c0001aff:	83 c3 0b             	add    ebx,0xb
c0001b02:	ba 10 00 00 00       	mov    edx,0x10
c0001b07:	83 fb 0f             	cmp    ebx,0xf
c0001b0a:	76 05                	jbe    c0001b11 <dlmallopt+0x43>
c0001b0c:	89 da                	mov    edx,ebx
c0001b0e:	83 e2 f8             	and    edx,0xfffffff8
c0001b11:	a1 20 b5 03 c0       	mov    eax,ds:0xc003b520
c0001b16:	83 e0 03             	and    eax,0x3
c0001b19:	09 d0                	or     eax,edx
c0001b1b:	a3 20 b5 03 c0       	mov    ds:0xc003b520,eax
c0001b20:	eb 31                	jmp    c0001b53 <dlmallopt+0x85>
c0001b22:	89 1d 64 b8 03 c0    	mov    DWORD PTR ds:0xc003b864,ebx
c0001b28:	eb 06                	jmp    c0001b30 <dlmallopt+0x62>
c0001b2a:	89 1d 68 b8 03 c0    	mov    DWORD PTR ds:0xc003b868,ebx
c0001b30:	be 01 00 00 00       	mov    esi,0x1
c0001b35:	eb 1c                	jmp    c0001b53 <dlmallopt+0x85>
c0001b37:	89 1d 6c b8 03 c0    	mov    DWORD PTR ds:0xc003b86c,ebx
c0001b3d:	eb f1                	jmp    c0001b30 <dlmallopt+0x62>
c0001b3f:	31 f6                	xor    esi,esi
c0001b41:	85 db                	test   ebx,ebx
c0001b43:	75 0e                	jne    c0001b53 <dlmallopt+0x85>
c0001b45:	c7 05 74 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b874,0x0
c0001b4f:	eb df                	jmp    c0001b30 <dlmallopt+0x62>
c0001b51:	31 f6                	xor    esi,esi
c0001b53:	89 f0                	mov    eax,esi
c0001b55:	5b                   	pop    ebx
c0001b56:	5e                   	pop    esi
c0001b57:	c3                   	ret    

c0001b58 <disk_status>:
c0001b58:	31 c0                	xor    eax,eax
c0001b5a:	c3                   	ret    

c0001b5b <disk_initialize>:
c0001b5b:	31 c0                	xor    eax,eax
c0001b5d:	c3                   	ret    

c0001b5e <disk_read>:
c0001b5e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b63:	0f b6 04 85 80 c7 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3880]
c0001b6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b6f:	e9 24 7a 01 00       	jmp    c0019598 <fatWrapperReadDisk>

c0001b74 <disk_write>:
c0001b74:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b79:	0f b6 04 85 80 c7 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3880]
c0001b81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b85:	e9 55 7a 01 00       	jmp    c00195df <fatWrapperWriteDisk>

c0001b8a <disk_ioctl>:
c0001b8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b93:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b98:	0f b6 04 85 80 c7 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3880]
c0001ba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ba4:	e9 7d 7a 01 00       	jmp    c0019626 <fatWrapperIoctl>

c0001ba9 <ld_word>:
c0001ba9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb0:	c1 e2 08             	shl    edx,0x8
c0001bb3:	09 d0                	or     eax,edx
c0001bb5:	c3                   	ret    

c0001bb6 <ld_dword>:
c0001bb6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001bba:	89 d1                	mov    ecx,edx
c0001bbc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bc0:	c1 e1 08             	shl    ecx,0x8
c0001bc3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc6:	09 ca                	or     edx,ecx
c0001bc8:	c1 e2 08             	shl    edx,0x8
c0001bcb:	09 d0                	or     eax,edx
c0001bcd:	c3                   	ret    

c0001bce <ld_qword>:
c0001bce:	57                   	push   edi
c0001bcf:	56                   	push   esi
c0001bd0:	53                   	push   ebx
c0001bd1:	31 db                	xor    ebx,ebx
c0001bd3:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001bd6:	89 df                	mov    edi,ebx
c0001bd8:	89 ce                	mov    esi,ecx
c0001bda:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001bde:	0f a4 f7 08          	shld   edi,esi,0x8
c0001be2:	c1 e6 08             	shl    esi,0x8
c0001be5:	09 f2                	or     edx,esi
c0001be7:	89 d6                	mov    esi,edx
c0001be9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001bed:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bf1:	c1 e6 08             	shl    esi,0x8
c0001bf4:	09 f2                	or     edx,esi
c0001bf6:	89 d6                	mov    esi,edx
c0001bf8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bfc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c03:	c1 e6 08             	shl    esi,0x8
c0001c06:	89 fb                	mov    ebx,edi
c0001c08:	09 f2                	or     edx,esi
c0001c0a:	89 d1                	mov    ecx,edx
c0001c0c:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c10:	c1 e1 08             	shl    ecx,0x8
c0001c13:	89 da                	mov    edx,ebx
c0001c15:	09 c8                	or     eax,ecx
c0001c17:	5b                   	pop    ebx
c0001c18:	5e                   	pop    esi
c0001c19:	5f                   	pop    edi
c0001c1a:	c3                   	ret    

c0001c1b <st_word>:
c0001c1b:	66 89 10             	mov    WORD PTR [eax],dx
c0001c1e:	c3                   	ret    

c0001c1f <st_dword>:
c0001c1f:	89 10                	mov    DWORD PTR [eax],edx
c0001c21:	c3                   	ret    

c0001c22 <st_qword>:
c0001c22:	89 10                	mov    DWORD PTR [eax],edx
c0001c24:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001c27:	c3                   	ret    

c0001c28 <mem_cpy>:
c0001c28:	85 c9                	test   ecx,ecx
c0001c2a:	74 10                	je     c0001c3c <mem_cpy+0x14>
c0001c2c:	57                   	push   edi
c0001c2d:	01 c1                	add    ecx,eax
c0001c2f:	56                   	push   esi
c0001c30:	89 c7                	mov    edi,eax
c0001c32:	89 d6                	mov    esi,edx
c0001c34:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001c35:	39 f9                	cmp    ecx,edi
c0001c37:	75 fb                	jne    c0001c34 <mem_cpy+0xc>
c0001c39:	5e                   	pop    esi
c0001c3a:	5f                   	pop    edi
c0001c3b:	c3                   	ret    
c0001c3c:	c3                   	ret    

c0001c3d <mem_set>:
c0001c3d:	01 c1                	add    ecx,eax
c0001c3f:	40                   	inc    eax
c0001c40:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c43:	39 c8                	cmp    eax,ecx
c0001c45:	75 f8                	jne    c0001c3f <mem_set+0x2>
c0001c47:	c3                   	ret    

c0001c48 <mem_cmp>:
c0001c48:	57                   	push   edi
c0001c49:	56                   	push   esi
c0001c4a:	89 c6                	mov    esi,eax
c0001c4c:	53                   	push   ebx
c0001c4d:	46                   	inc    esi
c0001c4e:	42                   	inc    edx
c0001c4f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c53:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c57:	29 fb                	sub    ebx,edi
c0001c59:	89 cf                	mov    edi,ecx
c0001c5b:	29 f7                	sub    edi,esi
c0001c5d:	01 c7                	add    edi,eax
c0001c5f:	74 04                	je     c0001c65 <mem_cmp+0x1d>
c0001c61:	85 db                	test   ebx,ebx
c0001c63:	74 e8                	je     c0001c4d <mem_cmp+0x5>
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	5b                   	pop    ebx
c0001c68:	5e                   	pop    esi
c0001c69:	5f                   	pop    edi
c0001c6a:	c3                   	ret    

c0001c6b <chk_chr>:
c0001c6b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c6e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c71:	74 07                	je     c0001c7a <chk_chr+0xf>
c0001c73:	39 d1                	cmp    ecx,edx
c0001c75:	74 03                	je     c0001c7a <chk_chr+0xf>
c0001c77:	40                   	inc    eax
c0001c78:	eb f1                	jmp    c0001c6b <chk_chr>
c0001c7a:	89 c8                	mov    eax,ecx
c0001c7c:	c3                   	ret    

c0001c7d <dbc_1st>:
c0001c7d:	31 c0                	xor    eax,eax
c0001c7f:	c3                   	ret    

c0001c80 <dbc_2nd>:
c0001c80:	31 c0                	xor    eax,eax
c0001c82:	c3                   	ret    

c0001c83 <tchar2uni>:
c0001c83:	57                   	push   edi
c0001c84:	89 c7                	mov    edi,eax
c0001c86:	56                   	push   esi
c0001c87:	53                   	push   ebx
c0001c88:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c8a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c8c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c8f:	84 c9                	test   cl,cl
c0001c91:	78 0a                	js     c0001c9d <tchar2uni+0x1a>
c0001c93:	0f b6 d1             	movzx  edx,cl
c0001c96:	89 f3                	mov    ebx,esi
c0001c98:	e9 9f 00 00 00       	jmp    c0001d3c <tchar2uni+0xb9>
c0001c9d:	88 ca                	mov    dl,cl
c0001c9f:	83 e2 e0             	and    edx,0xffffffe0
c0001ca2:	80 fa c0             	cmp    dl,0xc0
c0001ca5:	75 0c                	jne    c0001cb3 <tchar2uni+0x30>
c0001ca7:	89 ca                	mov    edx,ecx
c0001ca9:	b9 01 00 00 00       	mov    ecx,0x1
c0001cae:	83 e2 1f             	and    edx,0x1f
c0001cb1:	eb 2e                	jmp    c0001ce1 <tchar2uni+0x5e>
c0001cb3:	88 ca                	mov    dl,cl
c0001cb5:	83 e2 f0             	and    edx,0xfffffff0
c0001cb8:	80 fa e0             	cmp    dl,0xe0
c0001cbb:	75 0c                	jne    c0001cc9 <tchar2uni+0x46>
c0001cbd:	89 ca                	mov    edx,ecx
c0001cbf:	b9 02 00 00 00       	mov    ecx,0x2
c0001cc4:	83 e2 0f             	and    edx,0xf
c0001cc7:	eb 18                	jmp    c0001ce1 <tchar2uni+0x5e>
c0001cc9:	88 ca                	mov    dl,cl
c0001ccb:	83 e2 f8             	and    edx,0xfffffff8
c0001cce:	88 d0                	mov    al,dl
c0001cd0:	83 ca ff             	or     edx,0xffffffff
c0001cd3:	3c f0                	cmp    al,0xf0
c0001cd5:	75 6c                	jne    c0001d43 <tchar2uni+0xc0>
c0001cd7:	89 ca                	mov    edx,ecx
c0001cd9:	b9 03 00 00 00       	mov    ecx,0x3
c0001cde:	83 e2 07             	and    edx,0x7
c0001ce1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ce5:	46                   	inc    esi
c0001ce6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ce9:	88 c8                	mov    al,cl
c0001ceb:	83 e0 c0             	and    eax,0xffffffc0
c0001cee:	3c 80                	cmp    al,0x80
c0001cf0:	75 4e                	jne    c0001d40 <tchar2uni+0xbd>
c0001cf2:	c1 e2 06             	shl    edx,0x6
c0001cf5:	83 e1 3f             	and    ecx,0x3f
c0001cf8:	09 ca                	or     edx,ecx
c0001cfa:	39 de                	cmp    esi,ebx
c0001cfc:	75 e7                	jne    c0001ce5 <tchar2uni+0x62>
c0001cfe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d01:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d07:	77 37                	ja     c0001d40 <tchar2uni+0xbd>
c0001d09:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d0f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d15:	76 29                	jbe    c0001d40 <tchar2uni+0xbd>
c0001d17:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d1d:	76 1d                	jbe    c0001d3c <tchar2uni+0xb9>
c0001d1f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001d25:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001d2b:	c1 e1 06             	shl    ecx,0x6
c0001d2e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001d34:	09 ca                	or     edx,ecx
c0001d36:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001d3c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d3e:	eb 03                	jmp    c0001d43 <tchar2uni+0xc0>
c0001d40:	83 ca ff             	or     edx,0xffffffff
c0001d43:	5b                   	pop    ebx
c0001d44:	89 d0                	mov    eax,edx
c0001d46:	5e                   	pop    esi
c0001d47:	5f                   	pop    edi
c0001d48:	c3                   	ret    

c0001d49 <put_utf>:
c0001d49:	53                   	push   ebx
c0001d4a:	83 f8 7f             	cmp    eax,0x7f
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	b0 00                	mov    al,0x0
c0001d51:	77 11                	ja     c0001d64 <put_utf+0x1b>
c0001d53:	85 c9                	test   ecx,ecx
c0001d55:	0f 84 e5 00 00 00    	je     c0001e40 <put_utf+0xf7>
c0001d5b:	88 1a                	mov    BYTE PTR [edx],bl
c0001d5d:	b0 01                	mov    al,0x1
c0001d5f:	e9 dc 00 00 00       	jmp    c0001e40 <put_utf+0xf7>
c0001d64:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d6a:	77 23                	ja     c0001d8f <put_utf+0x46>
c0001d6c:	83 f9 01             	cmp    ecx,0x1
c0001d6f:	0f 86 cb 00 00 00    	jbe    c0001e40 <put_utf+0xf7>
c0001d75:	89 d8                	mov    eax,ebx
c0001d77:	83 e3 3f             	and    ebx,0x3f
c0001d7a:	c1 e8 06             	shr    eax,0x6
c0001d7d:	83 cb 80             	or     ebx,0xffffff80
c0001d80:	83 c8 c0             	or     eax,0xffffffc0
c0001d83:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d86:	88 02                	mov    BYTE PTR [edx],al
c0001d88:	b0 02                	mov    al,0x2
c0001d8a:	e9 b1 00 00 00       	jmp    c0001e40 <put_utf+0xf7>
c0001d8f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d95:	77 40                	ja     c0001dd7 <put_utf+0x8e>
c0001d97:	83 f9 02             	cmp    ecx,0x2
c0001d9a:	0f 86 a0 00 00 00    	jbe    c0001e40 <put_utf+0xf7>
c0001da0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001da6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dac:	0f 86 8e 00 00 00    	jbe    c0001e40 <put_utf+0xf7>
c0001db2:	89 d8                	mov    eax,ebx
c0001db4:	c1 e8 0c             	shr    eax,0xc
c0001db7:	83 c8 e0             	or     eax,0xffffffe0
c0001dba:	88 02                	mov    BYTE PTR [edx],al
c0001dbc:	89 d8                	mov    eax,ebx
c0001dbe:	83 e3 3f             	and    ebx,0x3f
c0001dc1:	c1 e8 06             	shr    eax,0x6
c0001dc4:	83 cb 80             	or     ebx,0xffffff80
c0001dc7:	83 e0 3f             	and    eax,0x3f
c0001dca:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001dcd:	83 c8 80             	or     eax,0xffffff80
c0001dd0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd3:	b0 03                	mov    al,0x3
c0001dd5:	eb 69                	jmp    c0001e40 <put_utf+0xf7>
c0001dd7:	83 f9 03             	cmp    ecx,0x3
c0001dda:	76 64                	jbe    c0001e40 <put_utf+0xf7>
c0001ddc:	89 d9                	mov    ecx,ebx
c0001dde:	0f b7 c3             	movzx  eax,bx
c0001de1:	66 31 c9             	xor    cx,cx
c0001de4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dea:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001df0:	c1 e9 06             	shr    ecx,0x6
c0001df3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001df9:	77 43                	ja     c0001e3e <put_utf+0xf5>
c0001dfb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e01:	77 3b                	ja     c0001e3e <put_utf+0xf5>
c0001e03:	09 cb                	or     ebx,ecx
c0001e05:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e0b:	89 d8                	mov    eax,ebx
c0001e0d:	c1 e8 12             	shr    eax,0x12
c0001e10:	83 c8 f0             	or     eax,0xfffffff0
c0001e13:	88 02                	mov    BYTE PTR [edx],al
c0001e15:	89 d8                	mov    eax,ebx
c0001e17:	c1 e8 0c             	shr    eax,0xc
c0001e1a:	83 e0 3f             	and    eax,0x3f
c0001e1d:	83 c8 80             	or     eax,0xffffff80
c0001e20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e23:	89 d8                	mov    eax,ebx
c0001e25:	83 e3 3f             	and    ebx,0x3f
c0001e28:	c1 e8 06             	shr    eax,0x6
c0001e2b:	83 cb 80             	or     ebx,0xffffff80
c0001e2e:	83 e0 3f             	and    eax,0x3f
c0001e31:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001e34:	83 c8 80             	or     eax,0xffffff80
c0001e37:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001e3a:	b0 04                	mov    al,0x4
c0001e3c:	eb 02                	jmp    c0001e40 <put_utf+0xf7>
c0001e3e:	31 c0                	xor    eax,eax
c0001e40:	5b                   	pop    ebx
c0001e41:	c3                   	ret    

c0001e42 <clst2sect>:
c0001e42:	89 c1                	mov    ecx,eax
c0001e44:	83 ea 02             	sub    edx,0x2
c0001e47:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e4a:	83 e8 02             	sub    eax,0x2
c0001e4d:	39 d0                	cmp    eax,edx
c0001e4f:	76 0d                	jbe    c0001e5e <clst2sect+0x1c>
c0001e51:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e55:	f7 e2                	mul    edx
c0001e57:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e5a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e5d:	c3                   	ret    
c0001e5e:	31 c0                	xor    eax,eax
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	c3                   	ret    

c0001e63 <clmt_clust>:
c0001e63:	57                   	push   edi
c0001e64:	89 cf                	mov    edi,ecx
c0001e66:	56                   	push   esi
c0001e67:	89 d6                	mov    esi,edx
c0001e69:	53                   	push   ebx
c0001e6a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e6e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e71:	89 f2                	mov    edx,esi
c0001e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e75:	c1 ef 09             	shr    edi,0x9
c0001e78:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e7c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e7f:	89 f9                	mov    ecx,edi
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	57                   	push   edi
c0001e84:	56                   	push   esi
c0001e85:	51                   	push   ecx
c0001e86:	52                   	push   edx
c0001e87:	e8 b0 c7 01 00       	call   c001e63c <__udivdi3>
c0001e8c:	83 c4 10             	add    esp,0x10
c0001e8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e91:	85 d2                	test   edx,edx
c0001e93:	74 10                	je     c0001ea5 <clmt_clust+0x42>
c0001e95:	39 d0                	cmp    eax,edx
c0001e97:	72 07                	jb     c0001ea0 <clmt_clust+0x3d>
c0001e99:	29 d0                	sub    eax,edx
c0001e9b:	83 c3 08             	add    ebx,0x8
c0001e9e:	eb ef                	jmp    c0001e8f <clmt_clust+0x2c>
c0001ea0:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001ea3:	89 c2                	mov    edx,eax
c0001ea5:	5b                   	pop    ebx
c0001ea6:	89 d0                	mov    eax,edx
c0001ea8:	5e                   	pop    esi
c0001ea9:	5f                   	pop    edi
c0001eaa:	c3                   	ret    

c0001eab <pick_lfn>:
c0001eab:	55                   	push   ebp
c0001eac:	57                   	push   edi
c0001ead:	56                   	push   esi
c0001eae:	89 d6                	mov    esi,edx
c0001eb0:	53                   	push   ebx
c0001eb1:	89 c3                	mov    ebx,eax
c0001eb3:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001eb6:	e8 ee fc ff ff       	call   c0001ba9 <ld_word>
c0001ebb:	66 85 c0             	test   ax,ax
c0001ebe:	74 04                	je     c0001ec4 <pick_lfn+0x19>
c0001ec0:	31 c0                	xor    eax,eax
c0001ec2:	eb 5c                	jmp    c0001f20 <pick_lfn+0x75>
c0001ec4:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001ec7:	bd 01 00 00 00       	mov    ebp,0x1
c0001ecc:	83 e1 bf             	and    ecx,0xffffffbf
c0001ecf:	31 ff                	xor    edi,edi
c0001ed1:	49                   	dec    ecx
c0001ed2:	6b c9 0d             	imul   ecx,ecx,0xd
c0001ed5:	0f b6 87 c0 f6 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0940]
c0001edc:	01 f0                	add    eax,esi
c0001ede:	e8 c6 fc ff ff       	call   c0001ba9 <ld_word>
c0001ee3:	66 85 ed             	test   bp,bp
c0001ee6:	74 11                	je     c0001ef9 <pick_lfn+0x4e>
c0001ee8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eee:	77 d0                	ja     c0001ec0 <pick_lfn+0x15>
c0001ef0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ef4:	89 c5                	mov    ebp,eax
c0001ef6:	41                   	inc    ecx
c0001ef7:	eb 04                	jmp    c0001efd <pick_lfn+0x52>
c0001ef9:	66 40                	inc    ax
c0001efb:	75 c3                	jne    c0001ec0 <pick_lfn+0x15>
c0001efd:	47                   	inc    edi
c0001efe:	83 ff 0d             	cmp    edi,0xd
c0001f01:	75 d2                	jne    c0001ed5 <pick_lfn+0x2a>
c0001f03:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f06:	74 13                	je     c0001f1b <pick_lfn+0x70>
c0001f08:	66 85 ed             	test   bp,bp
c0001f0b:	74 0e                	je     c0001f1b <pick_lfn+0x70>
c0001f0d:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f13:	77 ab                	ja     c0001ec0 <pick_lfn+0x15>
c0001f15:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f1b:	b8 01 00 00 00       	mov    eax,0x1
c0001f20:	5b                   	pop    ebx
c0001f21:	5e                   	pop    esi
c0001f22:	5f                   	pop    edi
c0001f23:	5d                   	pop    ebp
c0001f24:	c3                   	ret    

c0001f25 <put_lfn>:
c0001f25:	55                   	push   ebp
c0001f26:	31 ed                	xor    ebp,ebp
c0001f28:	57                   	push   edi
c0001f29:	89 d7                	mov    edi,edx
c0001f2b:	56                   	push   esi
c0001f2c:	31 f6                	xor    esi,esi
c0001f2e:	53                   	push   ebx
c0001f2f:	83 ec 08             	sub    esp,0x8
c0001f32:	89 04 24             	mov    DWORD PTR [esp],eax
c0001f35:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001f3d:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f43:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f46:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f49:	31 d2                	xor    edx,edx
c0001f4b:	e8 cb fc ff ff       	call   c0001c1b <st_word>
c0001f50:	0f b6 d9             	movzx  ebx,cl
c0001f53:	4b                   	dec    ebx
c0001f54:	6b db 0d             	imul   ebx,ebx,0xd
c0001f57:	66 83 fe ff          	cmp    si,0xffff
c0001f5b:	74 08                	je     c0001f65 <put_lfn+0x40>
c0001f5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f60:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f64:	43                   	inc    ebx
c0001f65:	0f b6 85 c0 f6 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0940]
c0001f6c:	0f b7 d6             	movzx  edx,si
c0001f6f:	01 f8                	add    eax,edi
c0001f71:	e8 a5 fc ff ff       	call   c0001c1b <st_word>
c0001f76:	66 85 f6             	test   si,si
c0001f79:	75 03                	jne    c0001f7e <put_lfn+0x59>
c0001f7b:	83 ce ff             	or     esi,0xffffffff
c0001f7e:	45                   	inc    ebp
c0001f7f:	83 fd 0d             	cmp    ebp,0xd
c0001f82:	75 d3                	jne    c0001f57 <put_lfn+0x32>
c0001f84:	66 46                	inc    si
c0001f86:	74 0a                	je     c0001f92 <put_lfn+0x6d>
c0001f88:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f90:	75 09                	jne    c0001f9b <put_lfn+0x76>
c0001f92:	88 c8                	mov    al,cl
c0001f94:	83 c8 40             	or     eax,0x40
c0001f97:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f9b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f9f:	88 07                	mov    BYTE PTR [edi],al
c0001fa1:	83 c4 08             	add    esp,0x8
c0001fa4:	5b                   	pop    ebx
c0001fa5:	5e                   	pop    esi
c0001fa6:	5f                   	pop    edi
c0001fa7:	5d                   	pop    ebp
c0001fa8:	c3                   	ret    

c0001fa9 <gen_numname>:
c0001fa9:	57                   	push   edi
c0001faa:	89 cf                	mov    edi,ecx
c0001fac:	56                   	push   esi
c0001fad:	b9 0b 00 00 00       	mov    ecx,0xb
c0001fb2:	53                   	push   ebx
c0001fb3:	89 c6                	mov    esi,eax
c0001fb5:	83 ec 10             	sub    esp,0x10
c0001fb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001fbc:	e8 67 fc ff ff       	call   c0001c28 <mem_cpy>
c0001fc1:	83 fb 05             	cmp    ebx,0x5
c0001fc4:	76 2d                	jbe    c0001ff3 <gen_numname+0x4a>
c0001fc6:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001fc9:	66 85 c0             	test   ax,ax
c0001fcc:	74 25                	je     c0001ff3 <gen_numname+0x4a>
c0001fce:	83 c7 02             	add    edi,0x2
c0001fd1:	ba 10 00 00 00       	mov    edx,0x10
c0001fd6:	01 db                	add    ebx,ebx
c0001fd8:	89 c1                	mov    ecx,eax
c0001fda:	66 d1 e8             	shr    ax,1
c0001fdd:	83 e1 01             	and    ecx,0x1
c0001fe0:	01 cb                	add    ebx,ecx
c0001fe2:	0f ba e3 10          	bt     ebx,0x10
c0001fe6:	73 06                	jae    c0001fee <gen_numname+0x45>
c0001fe8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fee:	4a                   	dec    edx
c0001fef:	75 e5                	jne    c0001fd6 <gen_numname+0x2d>
c0001ff1:	eb d3                	jmp    c0001fc6 <gen_numname+0x1d>
c0001ff3:	b8 07 00 00 00       	mov    eax,0x7
c0001ff8:	88 d9                	mov    cl,bl
c0001ffa:	83 e1 0f             	and    ecx,0xf
c0001ffd:	8d 51 30             	lea    edx,[ecx+0x30]
c0002000:	80 fa 39             	cmp    dl,0x39
c0002003:	76 03                	jbe    c0002008 <gen_numname+0x5f>
c0002005:	8d 51 37             	lea    edx,[ecx+0x37]
c0002008:	8d 48 ff             	lea    ecx,[eax-0x1]
c000200b:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000200f:	89 da                	mov    edx,ebx
c0002011:	c1 ea 04             	shr    edx,0x4
c0002014:	83 fb 0f             	cmp    ebx,0xf
c0002017:	76 06                	jbe    c000201f <gen_numname+0x76>
c0002019:	89 c8                	mov    eax,ecx
c000201b:	89 d3                	mov    ebx,edx
c000201d:	eb d9                	jmp    c0001ff8 <gen_numname+0x4f>
c000201f:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002024:	31 d2                	xor    edx,edx
c0002026:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002029:	8d 04 16             	lea    eax,[esi+edx*1]
c000202c:	39 ca                	cmp    edx,ecx
c000202e:	73 18                	jae    c0002048 <gen_numname+0x9f>
c0002030:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002033:	3c 20                	cmp    al,0x20
c0002035:	74 11                	je     c0002048 <gen_numname+0x9f>
c0002037:	e8 41 fc ff ff       	call   c0001c7d <dbc_1st>
c000203c:	85 c0                	test   eax,eax
c000203e:	74 05                	je     c0002045 <gen_numname+0x9c>
c0002040:	39 d3                	cmp    ebx,edx
c0002042:	74 04                	je     c0002048 <gen_numname+0x9f>
c0002044:	42                   	inc    edx
c0002045:	42                   	inc    edx
c0002046:	eb e1                	jmp    c0002029 <gen_numname+0x80>
c0002048:	b0 20                	mov    al,0x20
c000204a:	83 f9 07             	cmp    ecx,0x7
c000204d:	77 05                	ja     c0002054 <gen_numname+0xab>
c000204f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002053:	41                   	inc    ecx
c0002054:	42                   	inc    edx
c0002055:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002059:	83 fa 07             	cmp    edx,0x7
c000205c:	76 ea                	jbe    c0002048 <gen_numname+0x9f>
c000205e:	83 c4 10             	add    esp,0x10
c0002061:	5b                   	pop    ebx
c0002062:	5e                   	pop    esi
c0002063:	5f                   	pop    edi
c0002064:	c3                   	ret    

c0002065 <sum_sfn>:
c0002065:	31 c9                	xor    ecx,ecx
c0002067:	31 d2                	xor    edx,edx
c0002069:	d0 ca                	ror    dl,1
c000206b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000206e:	41                   	inc    ecx
c000206f:	83 f9 0b             	cmp    ecx,0xb
c0002072:	75 f5                	jne    c0002069 <sum_sfn+0x4>
c0002074:	88 d0                	mov    al,dl
c0002076:	c3                   	ret    

c0002077 <xdir_sum>:
c0002077:	56                   	push   esi
c0002078:	31 c9                	xor    ecx,ecx
c000207a:	53                   	push   ebx
c000207b:	31 d2                	xor    edx,edx
c000207d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002081:	43                   	inc    ebx
c0002082:	c1 e3 05             	shl    ebx,0x5
c0002085:	83 fa 02             	cmp    edx,0x2
c0002088:	74 0b                	je     c0002095 <xdir_sum+0x1e>
c000208a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000208e:	66 d1 c9             	ror    cx,1
c0002091:	01 f1                	add    ecx,esi
c0002093:	eb 05                	jmp    c000209a <xdir_sum+0x23>
c0002095:	ba 03 00 00 00       	mov    edx,0x3
c000209a:	42                   	inc    edx
c000209b:	39 d3                	cmp    ebx,edx
c000209d:	77 e6                	ja     c0002085 <xdir_sum+0xe>
c000209f:	89 c8                	mov    eax,ecx
c00020a1:	5b                   	pop    ebx
c00020a2:	5e                   	pop    esi
c00020a3:	c3                   	ret    

c00020a4 <xsum32>:
c00020a4:	d1 ca                	ror    edx,1
c00020a6:	0f b6 c0             	movzx  eax,al
c00020a9:	01 d0                	add    eax,edx
c00020ab:	c3                   	ret    

c00020ac <get_xfileinfo>:
c00020ac:	55                   	push   ebp
c00020ad:	31 c9                	xor    ecx,ecx
c00020af:	57                   	push   edi
c00020b0:	bd 40 00 00 00       	mov    ebp,0x40
c00020b5:	56                   	push   esi
c00020b6:	31 ff                	xor    edi,edi
c00020b8:	53                   	push   ebx
c00020b9:	89 c6                	mov    esi,eax
c00020bb:	83 ec 0c             	sub    esp,0xc
c00020be:	89 d3                	mov    ebx,edx
c00020c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020c7:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00020cb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00020ce:	76 6d                	jbe    c000213d <get_xfileinfo+0x91>
c00020d0:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00020d6:	76 0b                	jbe    c00020e3 <get_xfileinfo+0x37>
c00020d8:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00020dc:	bf 01 00 00 00       	mov    edi,0x1
c00020e1:	eb 63                	jmp    c0002146 <get_xfileinfo+0x9a>
c00020e3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020e9:	75 03                	jne    c00020ee <get_xfileinfo+0x42>
c00020eb:	83 c5 02             	add    ebp,0x2
c00020ee:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020f1:	83 c5 02             	add    ebp,0x2
c00020f4:	e8 b0 fa ff ff       	call   c0001ba9 <ld_word>
c00020f9:	ff 04 24             	inc    DWORD PTR [esp]
c00020fc:	66 85 c9             	test   cx,cx
c00020ff:	75 0d                	jne    c000210e <get_xfileinfo+0x62>
c0002101:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002107:	66 81 fa ff 07       	cmp    dx,0x7ff
c000210c:	76 2b                	jbe    c0002139 <get_xfileinfo+0x8d>
c000210e:	c1 e1 10             	shl    ecx,0x10
c0002111:	ba ff 00 00 00       	mov    edx,0xff
c0002116:	0f b7 c0             	movzx  eax,ax
c0002119:	29 fa                	sub    edx,edi
c000211b:	09 c8                	or     eax,ecx
c000211d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0002121:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002125:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0002129:	e8 1b fc ff ff       	call   c0001d49 <put_utf>
c000212e:	84 c0                	test   al,al
c0002130:	74 a6                	je     c00020d8 <get_xfileinfo+0x2c>
c0002132:	0f b6 c0             	movzx  eax,al
c0002135:	01 c7                	add    edi,eax
c0002137:	31 c0                	xor    eax,eax
c0002139:	89 c1                	mov    ecx,eax
c000213b:	eb 8a                	jmp    c00020c7 <get_xfileinfo+0x1b>
c000213d:	85 ff                	test   edi,edi
c000213f:	74 97                	je     c00020d8 <get_xfileinfo+0x2c>
c0002141:	66 85 c9             	test   cx,cx
c0002144:	75 92                	jne    c00020d8 <get_xfileinfo+0x2c>
c0002146:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000214b:	31 c0                	xor    eax,eax
c000214d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002151:	31 d2                	xor    edx,edx
c0002153:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002156:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002159:	80 e1 10             	and    cl,0x10
c000215c:	75 08                	jne    c0002166 <get_xfileinfo+0xba>
c000215e:	8d 46 38             	lea    eax,[esi+0x38]
c0002161:	e8 68 fa ff ff       	call   c0001bce <ld_qword>
c0002166:	89 03                	mov    DWORD PTR [ebx],eax
c0002168:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000216b:	8d 46 0c             	lea    eax,[esi+0xc]
c000216e:	e8 36 fa ff ff       	call   c0001ba9 <ld_word>
c0002173:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002177:	8d 46 0e             	lea    eax,[esi+0xe]
c000217a:	e8 2a fa ff ff       	call   c0001ba9 <ld_word>
c000217f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002183:	83 c4 0c             	add    esp,0xc
c0002186:	5b                   	pop    ebx
c0002187:	5e                   	pop    esi
c0002188:	5f                   	pop    edi
c0002189:	5d                   	pop    ebp
c000218a:	c3                   	ret    

c000218b <get_ldnumber>:
c000218b:	8b 10                	mov    edx,DWORD PTR [eax]
c000218d:	85 d2                	test   edx,edx
c000218f:	74 14                	je     c00021a5 <get_ldnumber+0x1a>
c0002191:	56                   	push   esi
c0002192:	53                   	push   ebx
c0002193:	89 d3                	mov    ebx,edx
c0002195:	43                   	inc    ebx
c0002196:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002199:	80 f9 1f             	cmp    cl,0x1f
c000219c:	76 0d                	jbe    c00021ab <get_ldnumber+0x20>
c000219e:	80 f9 3a             	cmp    cl,0x3a
c00021a1:	75 f2                	jne    c0002195 <get_ldnumber+0xa>
c00021a3:	eb 0a                	jmp    c00021af <get_ldnumber+0x24>
c00021a5:	83 c9 ff             	or     ecx,0xffffffff
c00021a8:	89 c8                	mov    eax,ecx
c00021aa:	c3                   	ret    
c00021ab:	31 c9                	xor    ecx,ecx
c00021ad:	eb 24                	jmp    c00021d3 <get_ldnumber+0x48>
c00021af:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00021b2:	8d 4e d0             	lea    ecx,[esi-0x30]
c00021b5:	80 f9 09             	cmp    cl,0x9
c00021b8:	77 16                	ja     c00021d0 <get_ldnumber+0x45>
c00021ba:	83 c2 02             	add    edx,0x2
c00021bd:	83 c9 ff             	or     ecx,0xffffffff
c00021c0:	39 d3                	cmp    ebx,edx
c00021c2:	75 0f                	jne    c00021d3 <get_ldnumber+0x48>
c00021c4:	89 f2                	mov    edx,esi
c00021c6:	89 18                	mov    DWORD PTR [eax],ebx
c00021c8:	0f be ca             	movsx  ecx,dl
c00021cb:	83 e9 30             	sub    ecx,0x30
c00021ce:	eb 03                	jmp    c00021d3 <get_ldnumber+0x48>
c00021d0:	83 c9 ff             	or     ecx,0xffffffff
c00021d3:	89 c8                	mov    eax,ecx
c00021d5:	5b                   	pop    ebx
c00021d6:	5e                   	pop    esi
c00021d7:	c3                   	ret    

c00021d8 <crc32>:
c00021d8:	56                   	push   esi
c00021d9:	89 d6                	mov    esi,edx
c00021db:	53                   	push   ebx
c00021dc:	b2 01                	mov    dl,0x1
c00021de:	bb 08 00 00 00       	mov    ebx,0x8
c00021e3:	89 f1                	mov    ecx,esi
c00021e5:	84 d1                	test   cl,dl
c00021e7:	0f 95 c1             	setne  cl
c00021ea:	0f b6 c9             	movzx  ecx,cl
c00021ed:	31 c1                	xor    ecx,eax
c00021ef:	89 c8                	mov    eax,ecx
c00021f1:	d1 e8                	shr    eax,1
c00021f3:	80 e1 01             	and    cl,0x1
c00021f6:	74 05                	je     c00021fd <crc32+0x25>
c00021f8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021fd:	d1 e2                	shl    edx,1
c00021ff:	4b                   	dec    ebx
c0002200:	75 e1                	jne    c00021e3 <crc32+0xb>
c0002202:	5b                   	pop    ebx
c0002203:	5e                   	pop    esi
c0002204:	c3                   	ret    

c0002205 <test_gpt_header>:
c0002205:	55                   	push   ebp
c0002206:	b9 10 00 00 00       	mov    ecx,0x10
c000220b:	57                   	push   edi
c000220c:	ba c0 f5 01 c0       	mov    edx,0xc001f5c0
c0002211:	56                   	push   esi
c0002212:	31 ff                	xor    edi,edi
c0002214:	53                   	push   ebx
c0002215:	89 c3                	mov    ebx,eax
c0002217:	e8 2c fa ff ff       	call   c0001c48 <mem_cmp>
c000221c:	85 c0                	test   eax,eax
c000221e:	75 55                	jne    c0002275 <test_gpt_header+0x70>
c0002220:	89 c7                	mov    edi,eax
c0002222:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002227:	83 ce ff             	or     esi,0xffffffff
c000222a:	31 d2                	xor    edx,edx
c000222c:	83 fd 03             	cmp    ebp,0x3
c000222f:	76 05                	jbe    c0002236 <test_gpt_header+0x31>
c0002231:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002236:	89 f0                	mov    eax,esi
c0002238:	45                   	inc    ebp
c0002239:	e8 9a ff ff ff       	call   c00021d8 <crc32>
c000223e:	83 fd 4c             	cmp    ebp,0x4c
c0002241:	89 c6                	mov    esi,eax
c0002243:	75 e5                	jne    c000222a <test_gpt_header+0x25>
c0002245:	8d 43 10             	lea    eax,[ebx+0x10]
c0002248:	f7 d6                	not    esi
c000224a:	e8 67 f9 ff ff       	call   c0001bb6 <ld_dword>
c000224f:	39 c6                	cmp    esi,eax
c0002251:	75 22                	jne    c0002275 <test_gpt_header+0x70>
c0002253:	8d 43 54             	lea    eax,[ebx+0x54]
c0002256:	e8 5b f9 ff ff       	call   c0001bb6 <ld_dword>
c000225b:	83 c0 80             	add    eax,0xffffff80
c000225e:	75 15                	jne    c0002275 <test_gpt_header+0x70>
c0002260:	8d 43 50             	lea    eax,[ebx+0x50]
c0002263:	e8 4e f9 ff ff       	call   c0001bb6 <ld_dword>
c0002268:	3d 80 00 00 00       	cmp    eax,0x80
c000226d:	0f 96 c0             	setbe  al
c0002270:	0f b6 c0             	movzx  eax,al
c0002273:	89 c7                	mov    edi,eax
c0002275:	5b                   	pop    ebx
c0002276:	89 f8                	mov    eax,edi
c0002278:	5e                   	pop    esi
c0002279:	5f                   	pop    edi
c000227a:	5d                   	pop    ebp
c000227b:	c3                   	ret    

c000227c <make_rand>:
c000227c:	56                   	push   esi
c000227d:	85 c0                	test   eax,eax
c000227f:	53                   	push   ebx
c0002280:	75 05                	jne    c0002287 <make_rand+0xb>
c0002282:	b8 01 00 00 00       	mov    eax,0x1
c0002287:	01 d1                	add    ecx,edx
c0002289:	bb 08 00 00 00       	mov    ebx,0x8
c000228e:	89 c6                	mov    esi,eax
c0002290:	d1 e8                	shr    eax,1
c0002292:	83 e6 01             	and    esi,0x1
c0002295:	85 f6                	test   esi,esi
c0002297:	74 05                	je     c000229e <make_rand+0x22>
c0002299:	35 00 00 00 a3       	xor    eax,0xa3000000
c000229e:	4b                   	dec    ebx
c000229f:	75 ed                	jne    c000228e <make_rand+0x12>
c00022a1:	42                   	inc    edx
c00022a2:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00022a5:	39 ca                	cmp    edx,ecx
c00022a7:	75 e0                	jne    c0002289 <make_rand+0xd>
c00022a9:	5b                   	pop    ebx
c00022aa:	5e                   	pop    esi
c00022ab:	c3                   	ret    

c00022ac <validate>:
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 d6                	mov    esi,edx
c00022b0:	51                   	push   ecx
c00022b1:	85 c0                	test   eax,eax
c00022b3:	75 09                	jne    c00022be <validate+0x12>
c00022b5:	b8 09 00 00 00       	mov    eax,0x9
c00022ba:	31 c9                	xor    ecx,ecx
c00022bc:	eb 2f                	jmp    c00022ed <validate+0x41>
c00022be:	89 c3                	mov    ebx,eax
c00022c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00022c2:	85 c0                	test   eax,eax
c00022c4:	74 ef                	je     c00022b5 <validate+0x9>
c00022c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022c9:	74 ea                	je     c00022b5 <validate+0x9>
c00022cb:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00022cf:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00022d3:	75 e0                	jne    c00022b5 <validate+0x9>
c00022d5:	83 ec 0c             	sub    esp,0xc
c00022d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022dc:	50                   	push   eax
c00022dd:	e8 76 f8 ff ff       	call   c0001b58 <disk_status>
c00022e2:	83 c4 10             	add    esp,0x10
c00022e5:	a8 01                	test   al,0x1
c00022e7:	75 cc                	jne    c00022b5 <validate+0x9>
c00022e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022eb:	31 c0                	xor    eax,eax
c00022ed:	89 0e                	mov    DWORD PTR [esi],ecx
c00022ef:	5a                   	pop    edx
c00022f0:	5b                   	pop    ebx
c00022f1:	5e                   	pop    esi
c00022f2:	c3                   	ret    

c00022f3 <sync_window>:
c00022f3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022f7:	0f 84 85 00 00 00    	je     c0002382 <sync_window+0x8f>
c00022fd:	55                   	push   ebp
c00022fe:	8d 68 54             	lea    ebp,[eax+0x54]
c0002301:	57                   	push   edi
c0002302:	56                   	push   esi
c0002303:	53                   	push   ebx
c0002304:	89 c3                	mov    ebx,eax
c0002306:	83 ec 28             	sub    esp,0x28
c0002309:	6a 01                	push   0x1
c000230b:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000230e:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002311:	55                   	push   ebp
c0002312:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002316:	50                   	push   eax
c0002317:	e8 58 f8 ff ff       	call   c0001b74 <disk_write>
c000231c:	83 c4 20             	add    esp,0x20
c000231f:	ba 01 00 00 00       	mov    edx,0x1
c0002324:	85 c0                	test   eax,eax
c0002326:	75 50                	jne    c0002378 <sync_window+0x85>
c0002328:	31 ff                	xor    edi,edi
c000232a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000232d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002331:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002335:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002338:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000233b:	89 c6                	mov    esi,eax
c000233d:	89 d7                	mov    edi,edx
c000233f:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002342:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002346:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002349:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000234d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002351:	73 23                	jae    c0002376 <sync_window+0x83>
c0002353:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002357:	75 1d                	jne    c0002376 <sync_window+0x83>
c0002359:	83 ec 0c             	sub    esp,0xc
c000235c:	6a 01                	push   0x1
c000235e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002362:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002366:	52                   	push   edx
c0002367:	50                   	push   eax
c0002368:	55                   	push   ebp
c0002369:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000236d:	50                   	push   eax
c000236e:	e8 01 f8 ff ff       	call   c0001b74 <disk_write>
c0002373:	83 c4 20             	add    esp,0x20
c0002376:	31 d2                	xor    edx,edx
c0002378:	83 c4 1c             	add    esp,0x1c
c000237b:	89 d0                	mov    eax,edx
c000237d:	5b                   	pop    ebx
c000237e:	5e                   	pop    esi
c000237f:	5f                   	pop    edi
c0002380:	5d                   	pop    ebp
c0002381:	c3                   	ret    
c0002382:	31 d2                	xor    edx,edx
c0002384:	89 d0                	mov    eax,edx
c0002386:	c3                   	ret    

c0002387 <move_window>:
c0002387:	56                   	push   esi
c0002388:	53                   	push   ebx
c0002389:	89 c3                	mov    ebx,eax
c000238b:	83 ec 14             	sub    esp,0x14
c000238e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002391:	75 07                	jne    c000239a <move_window+0x13>
c0002393:	31 f6                	xor    esi,esi
c0002395:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002398:	74 59                	je     c00023f3 <move_window+0x6c>
c000239a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000239e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00023a2:	89 d8                	mov    eax,ebx
c00023a4:	e8 4a ff ff ff       	call   c00022f3 <sync_window>
c00023a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00023ad:	89 c6                	mov    esi,eax
c00023af:	85 c0                	test   eax,eax
c00023b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023b5:	75 3c                	jne    c00023f3 <move_window+0x6c>
c00023b7:	83 ec 0c             	sub    esp,0xc
c00023ba:	8d 43 54             	lea    eax,[ebx+0x54]
c00023bd:	6a 01                	push   0x1
c00023bf:	51                   	push   ecx
c00023c0:	52                   	push   edx
c00023c1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00023c5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00023c9:	50                   	push   eax
c00023ca:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 8a f7 ff ff       	call   c0001b5e <disk_read>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	85 c0                	test   eax,eax
c00023d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00023dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023e1:	74 0a                	je     c00023ed <move_window+0x66>
c00023e3:	83 ca ff             	or     edx,0xffffffff
c00023e6:	be 01 00 00 00       	mov    esi,0x1
c00023eb:	89 d1                	mov    ecx,edx
c00023ed:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023f0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023f3:	89 f0                	mov    eax,esi
c00023f5:	83 c4 14             	add    esp,0x14
c00023f8:	5b                   	pop    ebx
c00023f9:	5e                   	pop    esi
c00023fa:	c3                   	ret    

c00023fb <check_fs>:
c00023fb:	53                   	push   ebx
c00023fc:	89 c3                	mov    ebx,eax
c00023fe:	83 ec 08             	sub    esp,0x8
c0002401:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002405:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000240c:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002413:	e8 6f ff ff ff       	call   c0002387 <move_window>
c0002418:	ba 04 00 00 00       	mov    edx,0x4
c000241d:	85 c0                	test   eax,eax
c000241f:	0f 85 89 00 00 00    	jne    c00024ae <check_fs+0xb3>
c0002425:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000242b:	e8 79 f7 ff ff       	call   c0001ba9 <ld_word>
c0002430:	ba 03 00 00 00       	mov    edx,0x3
c0002435:	66 3d 55 aa          	cmp    ax,0xaa55
c0002439:	75 73                	jne    c00024ae <check_fs+0xb3>
c000243b:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0002440:	8d 43 54             	lea    eax,[ebx+0x54]
c0002443:	b9 0b 00 00 00       	mov    ecx,0xb
c0002448:	e8 fb f7 ff ff       	call   c0001c48 <mem_cmp>
c000244d:	ba 01 00 00 00       	mov    edx,0x1
c0002452:	85 c0                	test   eax,eax
c0002454:	74 58                	je     c00024ae <check_fs+0xb3>
c0002456:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002459:	8d 50 18             	lea    edx,[eax+0x18]
c000245c:	80 fa 01             	cmp    dl,0x1
c000245f:	76 09                	jbe    c000246a <check_fs+0x6f>
c0002461:	ba 02 00 00 00       	mov    edx,0x2
c0002466:	3c eb                	cmp    al,0xeb
c0002468:	75 44                	jne    c00024ae <check_fs+0xb3>
c000246a:	ba d4 a3 03 c0       	mov    edx,0xc003a3d4
c000246f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002475:	b9 03 00 00 00       	mov    ecx,0x3
c000247a:	e8 c9 f7 ff ff       	call   c0001c48 <mem_cmp>
c000247f:	31 d2                	xor    edx,edx
c0002481:	85 c0                	test   eax,eax
c0002483:	74 29                	je     c00024ae <check_fs+0xb3>
c0002485:	ba ec f6 01 c0       	mov    edx,0xc001f6ec
c000248a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002490:	b9 05 00 00 00       	mov    ecx,0x5
c0002495:	e8 ae f7 ff ff       	call   c0001c48 <mem_cmp>
c000249a:	31 d2                	xor    edx,edx
c000249c:	85 c0                	test   eax,eax
c000249e:	74 0e                	je     c00024ae <check_fs+0xb3>
c00024a0:	31 d2                	xor    edx,edx
c00024a2:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00024a9:	0f 95 c2             	setne  dl
c00024ac:	01 d2                	add    edx,edx
c00024ae:	89 d0                	mov    eax,edx
c00024b0:	83 c4 08             	add    esp,0x8
c00024b3:	5b                   	pop    ebx
c00024b4:	c3                   	ret    

c00024b5 <find_volume>:
c00024b5:	55                   	push   ebp
c00024b6:	31 c9                	xor    ecx,ecx
c00024b8:	57                   	push   edi
c00024b9:	56                   	push   esi
c00024ba:	89 d6                	mov    esi,edx
c00024bc:	53                   	push   ebx
c00024bd:	31 d2                	xor    edx,edx
c00024bf:	83 ec 3c             	sub    esp,0x3c
c00024c2:	89 c3                	mov    ebx,eax
c00024c4:	e8 32 ff ff ff       	call   c00023fb <check_fs>
c00024c9:	83 f8 02             	cmp    eax,0x2
c00024cc:	74 0e                	je     c00024dc <find_volume+0x27>
c00024ce:	0f 87 5d 01 00 00    	ja     c0002631 <find_volume+0x17c>
c00024d4:	85 f6                	test   esi,esi
c00024d6:	0f 84 55 01 00 00    	je     c0002631 <find_volume+0x17c>
c00024dc:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024e3:	0f 85 dd 00 00 00    	jne    c00025c6 <find_volume+0x111>
c00024e9:	31 c9                	xor    ecx,ecx
c00024eb:	ba 01 00 00 00       	mov    edx,0x1
c00024f0:	89 d8                	mov    eax,ebx
c00024f2:	e8 90 fe ff ff       	call   c0002387 <move_window>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	74 0a                	je     c0002505 <find_volume+0x50>
c00024fb:	b8 04 00 00 00       	mov    eax,0x4
c0002500:	e9 2c 01 00 00       	jmp    c0002631 <find_volume+0x17c>
c0002505:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002508:	89 e8                	mov    eax,ebp
c000250a:	e8 f6 fc ff ff       	call   c0002205 <test_gpt_header>
c000250f:	85 c0                	test   eax,eax
c0002511:	75 0a                	jne    c000251d <find_volume+0x68>
c0002513:	b8 03 00 00 00       	mov    eax,0x3
c0002518:	e9 14 01 00 00       	jmp    c0002631 <find_volume+0x17c>
c000251d:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002523:	e8 8e f6 ff ff       	call   c0001bb6 <ld_dword>
c0002528:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000252c:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002532:	e8 97 f6 ff ff       	call   c0001bce <ld_qword>
c0002537:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000253f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002543:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002547:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000254f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002553:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002557:	74 ba                	je     c0002513 <find_volume+0x5e>
c0002559:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000255d:	31 c9                	xor    ecx,ecx
c000255f:	c1 e7 07             	shl    edi,0x7
c0002562:	89 d8                	mov    eax,ebx
c0002564:	89 fa                	mov    edx,edi
c0002566:	c1 ea 09             	shr    edx,0x9
c0002569:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000256d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002571:	e8 11 fe ff ff       	call   c0002387 <move_window>
c0002576:	85 c0                	test   eax,eax
c0002578:	75 81                	jne    c00024fb <find_volume+0x46>
c000257a:	81 e7 80 01 00 00    	and    edi,0x180
c0002580:	b9 10 00 00 00       	mov    ecx,0x10
c0002585:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002589:	ba d0 f6 01 c0       	mov    edx,0xc001f6d0
c000258e:	e8 b5 f6 ff ff       	call   c0001c48 <mem_cmp>
c0002593:	85 c0                	test   eax,eax
c0002595:	75 29                	jne    c00025c0 <find_volume+0x10b>
c0002597:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000259b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000259f:	e8 2a f6 ff ff       	call   c0001bce <ld_qword>
c00025a4:	89 d1                	mov    ecx,edx
c00025a6:	89 c2                	mov    edx,eax
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 4c fe ff ff       	call   c00023fb <check_fs>
c00025af:	85 f6                	test   esi,esi
c00025b1:	75 07                	jne    c00025ba <find_volume+0x105>
c00025b3:	83 f8 01             	cmp    eax,0x1
c00025b6:	77 08                	ja     c00025c0 <find_volume+0x10b>
c00025b8:	eb 77                	jmp    c0002631 <find_volume+0x17c>
c00025ba:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00025be:	74 71                	je     c0002631 <find_volume+0x17c>
c00025c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00025c4:	eb 89                	jmp    c000254f <find_volume+0x9a>
c00025c6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00025ca:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00025d0:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00025d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025da:	89 cd                	mov    ebp,ecx
c00025dc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025e0:	89 f8                	mov    eax,edi
c00025e2:	83 c7 10             	add    edi,0x10
c00025e5:	e8 cc f5 ff ff       	call   c0001bb6 <ld_dword>
c00025ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025ee:	89 01                	mov    DWORD PTR [ecx],eax
c00025f0:	83 c1 04             	add    ecx,0x4
c00025f3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025f7:	75 e3                	jne    c00025dc <find_volume+0x127>
c00025f9:	31 ff                	xor    edi,edi
c00025fb:	85 f6                	test   esi,esi
c00025fd:	74 03                	je     c0002602 <find_volume+0x14d>
c00025ff:	8d 7e ff             	lea    edi,[esi-0x1]
c0002602:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002606:	85 d2                	test   edx,edx
c0002608:	74 14                	je     c000261e <find_volume+0x169>
c000260a:	31 c9                	xor    ecx,ecx
c000260c:	89 d8                	mov    eax,ebx
c000260e:	e8 e8 fd ff ff       	call   c00023fb <check_fs>
c0002613:	83 f8 01             	cmp    eax,0x1
c0002616:	76 19                	jbe    c0002631 <find_volume+0x17c>
c0002618:	85 f6                	test   esi,esi
c000261a:	74 0f                	je     c000262b <find_volume+0x176>
c000261c:	eb 13                	jmp    c0002631 <find_volume+0x17c>
c000261e:	85 f6                	test   esi,esi
c0002620:	0f 85 ed fe ff ff    	jne    c0002513 <find_volume+0x5e>
c0002626:	b8 03 00 00 00       	mov    eax,0x3
c000262b:	47                   	inc    edi
c000262c:	83 ff 03             	cmp    edi,0x3
c000262f:	76 d1                	jbe    c0002602 <find_volume+0x14d>
c0002631:	83 c4 3c             	add    esp,0x3c
c0002634:	5b                   	pop    ebx
c0002635:	5e                   	pop    esi
c0002636:	5f                   	pop    edi
c0002637:	5d                   	pop    ebp
c0002638:	c3                   	ret    

c0002639 <mount_volume>:
c0002639:	55                   	push   ebp
c000263a:	57                   	push   edi
c000263b:	89 cf                	mov    edi,ecx
c000263d:	56                   	push   esi
c000263e:	53                   	push   ebx
c000263f:	bb 0b 00 00 00       	mov    ebx,0xb
c0002644:	83 ec 3c             	sub    esp,0x3c
c0002647:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000264d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002651:	e8 35 fb ff ff       	call   c000218b <get_ldnumber>
c0002656:	85 c0                	test   eax,eax
c0002658:	0f 88 3a 05 00 00    	js     c0002b98 <mount_volume+0x55f>
c000265e:	8b 2c 85 c0 b8 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc4740]
c0002665:	89 c6                	mov    esi,eax
c0002667:	bb 0c 00 00 00       	mov    ebx,0xc
c000266c:	85 ed                	test   ebp,ebp
c000266e:	0f 84 24 05 00 00    	je     c0002b98 <mount_volume+0x55f>
c0002674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002678:	83 e7 fe             	and    edi,0xfffffffe
c000267b:	89 2a                	mov    DWORD PTR [edx],ebp
c000267d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002681:	74 32                	je     c00026b5 <mount_volume+0x7c>
c0002683:	83 ec 0c             	sub    esp,0xc
c0002686:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000268a:	50                   	push   eax
c000268b:	e8 c8 f4 ff ff       	call   c0001b58 <disk_status>
c0002690:	83 c4 10             	add    esp,0x10
c0002693:	a8 01                	test   al,0x1
c0002695:	75 1e                	jne    c00026b5 <mount_volume+0x7c>
c0002697:	31 db                	xor    ebx,ebx
c0002699:	89 f9                	mov    ecx,edi
c000269b:	84 c9                	test   cl,cl
c000269d:	0f 84 f5 04 00 00    	je     c0002b98 <mount_volume+0x55f>
c00026a3:	a8 04                	test   al,0x4
c00026a5:	0f 84 ed 04 00 00    	je     c0002b98 <mount_volume+0x55f>
c00026ab:	bb 0a 00 00 00       	mov    ebx,0xa
c00026b0:	e9 e3 04 00 00       	jmp    c0002b98 <mount_volume+0x55f>
c00026b5:	83 ec 0c             	sub    esp,0xc
c00026b8:	89 f0                	mov    eax,esi
c00026ba:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00026be:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00026c1:	0f b6 f0             	movzx  esi,al
c00026c4:	bb 03 00 00 00       	mov    ebx,0x3
c00026c9:	56                   	push   esi
c00026ca:	e8 8c f4 ff ff       	call   c0001b5b <disk_initialize>
c00026cf:	83 c4 10             	add    esp,0x10
c00026d2:	a8 01                	test   al,0x1
c00026d4:	0f 85 be 04 00 00    	jne    c0002b98 <mount_volume+0x55f>
c00026da:	89 f9                	mov    ecx,edi
c00026dc:	84 c9                	test   cl,cl
c00026de:	74 04                	je     c00026e4 <mount_volume+0xab>
c00026e0:	a8 04                	test   al,0x4
c00026e2:	75 c7                	jne    c00026ab <mount_volume+0x72>
c00026e4:	31 d2                	xor    edx,edx
c00026e6:	89 e8                	mov    eax,ebp
c00026e8:	e8 c8 fd ff ff       	call   c00024b5 <find_volume>
c00026ed:	83 f8 04             	cmp    eax,0x4
c00026f0:	75 0a                	jne    c00026fc <mount_volume+0xc3>
c00026f2:	bb 01 00 00 00       	mov    ebx,0x1
c00026f7:	e9 9c 04 00 00       	jmp    c0002b98 <mount_volume+0x55f>
c00026fc:	83 f8 01             	cmp    eax,0x1
c00026ff:	76 0a                	jbe    c000270b <mount_volume+0xd2>
c0002701:	bb 0d 00 00 00       	mov    ebx,0xd
c0002706:	e9 8d 04 00 00       	jmp    c0002b98 <mount_volume+0x55f>
c000270b:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000270e:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002711:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002715:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002719:	75 17                	jne    c0002732 <mount_volume+0xf9>
c000271b:	b8 0b 00 00 00       	mov    eax,0xb
c0002720:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002725:	75 da                	jne    c0002701 <mount_volume+0xc8>
c0002727:	40                   	inc    eax
c0002728:	83 f8 40             	cmp    eax,0x40
c000272b:	75 f3                	jne    c0002720 <mount_volume+0xe7>
c000272d:	e9 5a 02 00 00       	jmp    c000298c <mount_volume+0x353>
c0002732:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002735:	e8 6f f4 ff ff       	call   c0001ba9 <ld_word>
c000273a:	66 3d 00 02          	cmp    ax,0x200
c000273e:	75 c1                	jne    c0002701 <mount_volume+0xc8>
c0002740:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002743:	e8 61 f4 ff ff       	call   c0001ba9 <ld_word>
c0002748:	0f b7 c0             	movzx  eax,ax
c000274b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000274f:	85 c0                	test   eax,eax
c0002751:	75 0c                	jne    c000275f <mount_volume+0x126>
c0002753:	8d 45 78             	lea    eax,[ebp+0x78]
c0002756:	e8 5b f4 ff ff       	call   c0001bb6 <ld_dword>
c000275b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000275f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002763:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002766:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002769:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000276d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002770:	48                   	dec    eax
c0002771:	3c 01                	cmp    al,0x1
c0002773:	77 8c                	ja     c0002701 <mount_volume+0xc8>
c0002775:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002779:	89 c3                	mov    ebx,eax
c000277b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000277f:	66 85 c0             	test   ax,ax
c0002782:	0f 84 79 ff ff ff    	je     c0002701 <mount_volume+0xc8>
c0002788:	8d 40 ff             	lea    eax,[eax-0x1]
c000278b:	85 d8                	test   eax,ebx
c000278d:	0f 85 6e ff ff ff    	jne    c0002701 <mount_volume+0xc8>
c0002793:	8d 45 65             	lea    eax,[ebp+0x65]
c0002796:	e8 0e f4 ff ff       	call   c0001ba9 <ld_word>
c000279b:	89 c7                	mov    edi,eax
c000279d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00027a1:	a8 0f                	test   al,0xf
c00027a3:	0f 85 58 ff ff ff    	jne    c0002701 <mount_volume+0xc8>
c00027a9:	8d 45 67             	lea    eax,[ebp+0x67]
c00027ac:	e8 f8 f3 ff ff       	call   c0001ba9 <ld_word>
c00027b1:	0f b7 f0             	movzx  esi,ax
c00027b4:	85 f6                	test   esi,esi
c00027b6:	75 0a                	jne    c00027c2 <mount_volume+0x189>
c00027b8:	8d 45 74             	lea    eax,[ebp+0x74]
c00027bb:	e8 f6 f3 ff ff       	call   c0001bb6 <ld_dword>
c00027c0:	89 c6                	mov    esi,eax
c00027c2:	8d 45 62             	lea    eax,[ebp+0x62]
c00027c5:	e8 df f3 ff ff       	call   c0001ba9 <ld_word>
c00027ca:	66 85 c0             	test   ax,ax
c00027cd:	0f 84 2e ff ff ff    	je     c0002701 <mount_volume+0xc8>
c00027d3:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00027d8:	0f b7 c8             	movzx  ecx,ax
c00027db:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027e4:	89 fa                	mov    edx,edi
c00027e6:	66 c1 ea 04          	shr    dx,0x4
c00027ea:	0f b7 d2             	movzx  edx,dx
c00027ed:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027f1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027f8:	39 c6                	cmp    esi,eax
c00027fa:	0f 82 01 ff ff ff    	jb     c0002701 <mount_volume+0xc8>
c0002800:	29 c6                	sub    esi,eax
c0002802:	31 d2                	xor    edx,edx
c0002804:	89 f0                	mov    eax,esi
c0002806:	f7 f3                	div    ebx
c0002808:	39 de                	cmp    esi,ebx
c000280a:	0f 82 f1 fe ff ff    	jb     c0002701 <mount_volume+0xc8>
c0002810:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002815:	0f 87 e6 fe ff ff    	ja     c0002701 <mount_volume+0xc8>
c000281b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002820:	0f 86 63 03 00 00    	jbe    c0002b89 <mount_volume+0x550>
c0002826:	bb 03 00 00 00       	mov    ebx,0x3
c000282b:	8d 70 02             	lea    esi,[eax+0x2]
c000282e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002836:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002839:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000283c:	31 d2                	xor    edx,edx
c000283e:	89 c8                	mov    eax,ecx
c0002840:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000284b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000284f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002853:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002856:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002859:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000285d:	31 d2                	xor    edx,edx
c000285f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002863:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002867:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000286a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000286d:	83 fb 03             	cmp    ebx,0x3
c0002870:	75 2b                	jne    c000289d <mount_volume+0x264>
c0002872:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002875:	e8 2f f3 ff ff       	call   c0001ba9 <ld_word>
c000287a:	66 09 c7             	or     di,ax
c000287d:	0f 85 7e fe ff ff    	jne    c0002701 <mount_volume+0xc8>
c0002883:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002889:	c1 e6 02             	shl    esi,0x2
c000288c:	e8 25 f3 ff ff       	call   c0001bb6 <ld_dword>
c0002891:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002898:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000289b:	eb 30                	jmp    c00028cd <mount_volume+0x294>
c000289d:	66 85 ff             	test   di,di
c00028a0:	0f 84 5b fe ff ff    	je     c0002701 <mount_volume+0xc8>
c00028a6:	31 d2                	xor    edx,edx
c00028a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00028ac:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00028b0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00028b4:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00028b7:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00028ba:	83 fb 02             	cmp    ebx,0x2
c00028bd:	75 04                	jne    c00028c3 <mount_volume+0x28a>
c00028bf:	01 f6                	add    esi,esi
c00028c1:	eb 0a                	jmp    c00028cd <mount_volume+0x294>
c00028c3:	8d 04 76             	lea    eax,[esi+esi*2]
c00028c6:	83 e6 01             	and    esi,0x1
c00028c9:	d1 e8                	shr    eax,1
c00028cb:	01 c6                	add    esi,eax
c00028cd:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00028d3:	c1 ee 09             	shr    esi,0x9
c00028d6:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00028da:	0f 87 21 fe ff ff    	ja     c0002701 <mount_volume+0xc8>
c00028e0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028e7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028ee:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028f2:	83 fb 03             	cmp    ebx,0x3
c00028f5:	75 7a                	jne    c0002971 <mount_volume+0x338>
c00028f7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028fd:	e8 a7 f2 ff ff       	call   c0001ba9 <ld_word>
c0002902:	66 48                	dec    ax
c0002904:	75 6b                	jne    c0002971 <mount_volume+0x338>
c0002906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000290a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000290e:	83 c2 01             	add    edx,0x1
c0002911:	89 e8                	mov    eax,ebp
c0002913:	83 d1 00             	adc    ecx,0x0
c0002916:	e8 6c fa ff ff       	call   c0002387 <move_window>
c000291b:	85 c0                	test   eax,eax
c000291d:	75 52                	jne    c0002971 <mount_volume+0x338>
c000291f:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002923:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002929:	e8 7b f2 ff ff       	call   c0001ba9 <ld_word>
c000292e:	66 3d 55 aa          	cmp    ax,0xaa55
c0002932:	75 3d                	jne    c0002971 <mount_volume+0x338>
c0002934:	8d 45 54             	lea    eax,[ebp+0x54]
c0002937:	e8 7a f2 ff ff       	call   c0001bb6 <ld_dword>
c000293c:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002941:	75 2e                	jne    c0002971 <mount_volume+0x338>
c0002943:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002949:	e8 68 f2 ff ff       	call   c0001bb6 <ld_dword>
c000294e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002953:	75 1c                	jne    c0002971 <mount_volume+0x338>
c0002955:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000295b:	e8 56 f2 ff ff       	call   c0001bb6 <ld_dword>
c0002960:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002963:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002969:	e8 48 f2 ff ff       	call   c0001bb6 <ld_dword>
c000296e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002971:	66 a1 a0 b8 03 c0    	mov    ax,ds:0xc003b8a0
c0002977:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000297a:	40                   	inc    eax
c000297b:	31 db                	xor    ebx,ebx
c000297d:	66 a3 a0 b8 03 c0    	mov    ds:0xc003b8a0,ax
c0002983:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002987:	e9 0c 02 00 00       	jmp    c0002b98 <mount_volume+0x55f>
c000298c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002992:	e8 12 f2 ff ff       	call   c0001ba9 <ld_word>
c0002997:	66 3d 00 01          	cmp    ax,0x100
c000299b:	0f 85 60 fd ff ff    	jne    c0002701 <mount_volume+0xc8>
c00029a1:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c00029a8:	0f 85 53 fd ff ff    	jne    c0002701 <mount_volume+0xc8>
c00029ae:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c00029b4:	e8 15 f2 ff ff       	call   c0001bce <ld_qword>
c00029b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00029bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00029c1:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00029c7:	e8 ea f1 ff ff       	call   c0001bb6 <ld_dword>
c00029cc:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00029cf:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00029d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00029d8:	fe c8                	dec    al
c00029da:	0f 85 21 fd ff ff    	jne    c0002701 <mount_volume+0xc8>
c00029e0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029e7:	bb 01 00 00 00       	mov    ebx,0x1
c00029ec:	d3 e3                	shl    ebx,cl
c00029ee:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029f2:	66 85 db             	test   bx,bx
c00029f5:	0f 84 06 fd ff ff    	je     c0002701 <mount_volume+0xc8>
c00029fb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a01:	e8 b0 f1 ff ff       	call   c0001bb6 <ld_dword>
c0002a06:	89 c6                	mov    esi,eax
c0002a08:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a0d:	0f 87 ee fc ff ff    	ja     c0002701 <mount_volume+0xc8>
c0002a13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a17:	8d 40 02             	lea    eax,[eax+0x2]
c0002a1a:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a1d:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a24:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002a27:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002a2d:	e8 84 f1 ff ff       	call   c0001bb6 <ld_dword>
c0002a32:	31 d2                	xor    edx,edx
c0002a34:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a38:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a40:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a44:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a47:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a4a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a50:	e8 61 f1 ff ff       	call   c0001bb6 <ld_dword>
c0002a55:	31 d2                	xor    edx,edx
c0002a57:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a5b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a5f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a63:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a66:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a69:	0f b7 c3             	movzx  eax,bx
c0002a6c:	31 d2                	xor    edx,edx
c0002a6e:	0f af f0             	imul   esi,eax
c0002a71:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a75:	89 f0                	mov    eax,esi
c0002a77:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a7b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a7f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a83:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a87:	39 c1                	cmp    ecx,eax
c0002a89:	89 df                	mov    edi,ebx
c0002a8b:	19 d7                	sbb    edi,edx
c0002a8d:	0f 82 6e fc ff ff    	jb     c0002701 <mount_volume+0xc8>
c0002a93:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a99:	31 db                	xor    ebx,ebx
c0002a9b:	e8 16 f1 ff ff       	call   c0001bb6 <ld_dword>
c0002aa0:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002aa7:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002aaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ab2:	85 db                	test   ebx,ebx
c0002ab4:	75 39                	jne    c0002aef <mount_volume+0x4b6>
c0002ab6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aba:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002abe:	0f 86 3d fc ff ff    	jbe    c0002701 <mount_volume+0xc8>
c0002ac4:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002ac7:	31 ff                	xor    edi,edi
c0002ac9:	89 e8                	mov    eax,ebp
c0002acb:	e8 72 f3 ff ff       	call   c0001e42 <clst2sect>
c0002ad0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002ad4:	01 c6                	add    esi,eax
c0002ad6:	89 e8                	mov    eax,ebp
c0002ad8:	11 d7                	adc    edi,edx
c0002ada:	89 f2                	mov    edx,esi
c0002adc:	89 f9                	mov    ecx,edi
c0002ade:	e8 a4 f8 ff ff       	call   c0002387 <move_window>
c0002ae3:	85 c0                	test   eax,eax
c0002ae5:	0f 85 07 fc ff ff    	jne    c00026f2 <mount_volume+0xb9>
c0002aeb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aef:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002af4:	74 0b                	je     c0002b01 <mount_volume+0x4c8>
c0002af6:	83 c3 20             	add    ebx,0x20
c0002af9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aff:	eb b1                	jmp    c0002ab2 <mount_volume+0x479>
c0002b01:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b04:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b08:	e8 a9 f0 ff ff       	call   c0001bb6 <ld_dword>
c0002b0d:	89 c3                	mov    ebx,eax
c0002b0f:	83 f8 01             	cmp    eax,0x1
c0002b12:	0f 86 e9 fb ff ff    	jbe    c0002701 <mount_volume+0xc8>
c0002b18:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b1b:	0f 86 e0 fb ff ff    	jbe    c0002701 <mount_volume+0xc8>
c0002b21:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002b24:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b28:	0f af c2             	imul   eax,edx
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002b30:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002b33:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002b36:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002b39:	31 c9                	xor    ecx,ecx
c0002b3b:	89 da                	mov    edx,ebx
c0002b3d:	89 e8                	mov    eax,ebp
c0002b3f:	c1 ea 07             	shr    edx,0x7
c0002b42:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b45:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b48:	e8 3a f8 ff ff       	call   c0002387 <move_window>
c0002b4d:	85 c0                	test   eax,eax
c0002b4f:	0f 85 9d fb ff ff    	jne    c00026f2 <mount_volume+0xb9>
c0002b55:	89 d8                	mov    eax,ebx
c0002b57:	83 e0 7f             	and    eax,0x7f
c0002b5a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b5d:	e8 54 f0 ff ff       	call   c0001bb6 <ld_dword>
c0002b62:	83 f8 ff             	cmp    eax,0xffffffff
c0002b65:	74 0a                	je     c0002b71 <mount_volume+0x538>
c0002b67:	43                   	inc    ebx
c0002b68:	39 d8                	cmp    eax,ebx
c0002b6a:	74 cd                	je     c0002b39 <mount_volume+0x500>
c0002b6c:	e9 90 fb ff ff       	jmp    c0002701 <mount_volume+0xc8>
c0002b71:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b78:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b7f:	bb 04 00 00 00       	mov    ebx,0x4
c0002b84:	e9 e8 fd ff ff       	jmp    c0002971 <mount_volume+0x338>
c0002b89:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b8e:	19 db                	sbb    ebx,ebx
c0002b90:	83 c3 02             	add    ebx,0x2
c0002b93:	e9 93 fc ff ff       	jmp    c000282b <mount_volume+0x1f2>
c0002b98:	83 c4 3c             	add    esp,0x3c
c0002b9b:	89 d8                	mov    eax,ebx
c0002b9d:	5b                   	pop    ebx
c0002b9e:	5e                   	pop    esi
c0002b9f:	5f                   	pop    edi
c0002ba0:	5d                   	pop    ebp
c0002ba1:	c3                   	ret    

c0002ba2 <find_bitmap>:
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 c7                	mov    edi,eax
c0002ba6:	56                   	push   esi
c0002ba7:	8d 72 fe             	lea    esi,[edx-0x2]
c0002baa:	53                   	push   ebx
c0002bab:	83 ec 1c             	sub    esp,0x1c
c0002bae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002bb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002bb5:	83 e8 02             	sub    eax,0x2
c0002bb8:	39 f0                	cmp    eax,esi
c0002bba:	77 02                	ja     c0002bbe <find_bitmap+0x1c>
c0002bbc:	31 f6                	xor    esi,esi
c0002bbe:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002bc2:	89 f3                	mov    ebx,esi
c0002bc4:	31 ed                	xor    ebp,ebp
c0002bc6:	31 c9                	xor    ecx,ecx
c0002bc8:	89 da                	mov    edx,ebx
c0002bca:	89 f8                	mov    eax,edi
c0002bcc:	c1 ea 0c             	shr    edx,0xc
c0002bcf:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002bd2:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002bd5:	e8 ad f7 ff ff       	call   c0002387 <move_window>
c0002bda:	85 c0                	test   eax,eax
c0002bdc:	75 68                	jne    c0002c46 <find_bitmap+0xa4>
c0002bde:	89 da                	mov    edx,ebx
c0002be0:	89 d9                	mov    ecx,ebx
c0002be2:	c1 ea 03             	shr    edx,0x3
c0002be5:	83 e1 07             	and    ecx,0x7
c0002be8:	b8 01 00 00 00       	mov    eax,0x1
c0002bed:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bf3:	d3 e0                	shl    eax,cl
c0002bf5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bf8:	83 e9 02             	sub    ecx,0x2
c0002bfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bff:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c03:	43                   	inc    ebx
c0002c04:	21 c1                	and    ecx,eax
c0002c06:	d1 e0                	shl    eax,1
c0002c08:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c0c:	77 09                	ja     c0002c17 <find_bitmap+0x75>
c0002c0e:	31 db                	xor    ebx,ebx
c0002c10:	ba 00 02 00 00       	mov    edx,0x200
c0002c15:	31 c0                	xor    eax,eax
c0002c17:	84 c9                	test   cl,cl
c0002c19:	75 10                	jne    c0002c2b <find_bitmap+0x89>
c0002c1b:	45                   	inc    ebp
c0002c1c:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c20:	75 0f                	jne    c0002c31 <find_bitmap+0x8f>
c0002c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c26:	83 c0 02             	add    eax,0x2
c0002c29:	eb 22                	jmp    c0002c4d <find_bitmap+0xab>
c0002c2b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002c2f:	31 ed                	xor    ebp,ebp
c0002c31:	39 de                	cmp    esi,ebx
c0002c33:	74 16                	je     c0002c4b <find_bitmap+0xa9>
c0002c35:	84 c0                	test   al,al
c0002c37:	75 c6                	jne    c0002bff <find_bitmap+0x5d>
c0002c39:	42                   	inc    edx
c0002c3a:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c40:	77 84                	ja     c0002bc6 <find_bitmap+0x24>
c0002c42:	b0 01                	mov    al,0x1
c0002c44:	eb b9                	jmp    c0002bff <find_bitmap+0x5d>
c0002c46:	83 c8 ff             	or     eax,0xffffffff
c0002c49:	eb 02                	jmp    c0002c4d <find_bitmap+0xab>
c0002c4b:	31 c0                	xor    eax,eax
c0002c4d:	83 c4 1c             	add    esp,0x1c
c0002c50:	5b                   	pop    ebx
c0002c51:	5e                   	pop    esi
c0002c52:	5f                   	pop    edi
c0002c53:	5d                   	pop    ebp
c0002c54:	c3                   	ret    

c0002c55 <change_bitmap>:
c0002c55:	55                   	push   ebp
c0002c56:	89 cd                	mov    ebp,ecx
c0002c58:	57                   	push   edi
c0002c59:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c5c:	56                   	push   esi
c0002c5d:	89 c7                	mov    edi,eax
c0002c5f:	53                   	push   ebx
c0002c60:	89 c8                	mov    eax,ecx
c0002c62:	83 ec 1c             	sub    esp,0x1c
c0002c65:	31 d2                	xor    edx,edx
c0002c67:	89 ce                	mov    esi,ecx
c0002c69:	c1 e8 0c             	shr    eax,0xc
c0002c6c:	bb 01 00 00 00       	mov    ebx,0x1
c0002c71:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c74:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c77:	c1 ee 03             	shr    esi,0x3
c0002c7a:	83 e1 07             	and    ecx,0x7
c0002c7d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c83:	d3 e3                	shl    ebx,cl
c0002c85:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c89:	89 c1                	mov    ecx,eax
c0002c8b:	89 d3                	mov    ebx,edx
c0002c8d:	83 c1 01             	add    ecx,0x1
c0002c90:	83 d3 00             	adc    ebx,0x0
c0002c93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c97:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c9b:	89 d1                	mov    ecx,edx
c0002c9d:	89 c2                	mov    edx,eax
c0002c9f:	89 f8                	mov    eax,edi
c0002ca1:	e8 e1 f6 ff ff       	call   c0002387 <move_window>
c0002ca6:	89 c1                	mov    ecx,eax
c0002ca8:	85 c0                	test   eax,eax
c0002caa:	75 48                	jne    c0002cf4 <change_bitmap+0x9f>
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002cb2:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002cb6:	0f 95 c2             	setne  dl
c0002cb9:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002cbd:	74 3c                	je     c0002cfb <change_bitmap+0xa6>
c0002cbf:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002cc3:	4d                   	dec    ebp
c0002cc4:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002cc8:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ccc:	74 32                	je     c0002d00 <change_bitmap+0xab>
c0002cce:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002cd2:	75 d8                	jne    c0002cac <change_bitmap+0x57>
c0002cd4:	8d 46 01             	lea    eax,[esi+0x1]
c0002cd7:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002cdc:	89 c3                	mov    ebx,eax
c0002cde:	31 f6                	xor    esi,esi
c0002ce0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ce4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ce8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cee:	74 99                	je     c0002c89 <change_bitmap+0x34>
c0002cf0:	89 de                	mov    esi,ebx
c0002cf2:	eb b8                	jmp    c0002cac <change_bitmap+0x57>
c0002cf4:	b9 01 00 00 00       	mov    ecx,0x1
c0002cf9:	eb 05                	jmp    c0002d00 <change_bitmap+0xab>
c0002cfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002d00:	83 c4 1c             	add    esp,0x1c
c0002d03:	89 c8                	mov    eax,ecx
c0002d05:	5b                   	pop    ebx
c0002d06:	5e                   	pop    esi
c0002d07:	5f                   	pop    edi
c0002d08:	5d                   	pop    ebp
c0002d09:	c3                   	ret    

c0002d0a <put_fat>:
c0002d0a:	83 fa 01             	cmp    edx,0x1
c0002d0d:	0f 86 7b 01 00 00    	jbe    c0002e8e <put_fat+0x184>
c0002d13:	55                   	push   ebp
c0002d14:	57                   	push   edi
c0002d15:	89 cf                	mov    edi,ecx
c0002d17:	56                   	push   esi
c0002d18:	b9 02 00 00 00       	mov    ecx,0x2
c0002d1d:	53                   	push   ebx
c0002d1e:	89 c6                	mov    esi,eax
c0002d20:	83 ec 1c             	sub    esp,0x1c
c0002d23:	89 d3                	mov    ebx,edx
c0002d25:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002d28:	0f 86 68 01 00 00    	jbe    c0002e96 <put_fat+0x18c>
c0002d2e:	8a 00                	mov    al,BYTE PTR [eax]
c0002d30:	3c 02                	cmp    al,0x2
c0002d32:	0f 84 c7 00 00 00    	je     c0002dff <put_fat+0xf5>
c0002d38:	77 09                	ja     c0002d43 <put_fat+0x39>
c0002d3a:	fe c8                	dec    al
c0002d3c:	74 17                	je     c0002d55 <put_fat+0x4b>
c0002d3e:	e9 53 01 00 00       	jmp    c0002e96 <put_fat+0x18c>
c0002d43:	b9 02 00 00 00       	mov    ecx,0x2
c0002d48:	3c 04                	cmp    al,0x4
c0002d4a:	0f 86 e1 00 00 00    	jbe    c0002e31 <put_fat+0x127>
c0002d50:	e9 41 01 00 00       	jmp    c0002e96 <put_fat+0x18c>
c0002d55:	89 d5                	mov    ebp,edx
c0002d57:	31 c9                	xor    ecx,ecx
c0002d59:	d1 ed                	shr    ebp,1
c0002d5b:	89 f0                	mov    eax,esi
c0002d5d:	01 d5                	add    ebp,edx
c0002d5f:	89 ea                	mov    edx,ebp
c0002d61:	c1 ea 09             	shr    edx,0x9
c0002d64:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d67:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6a:	e8 18 f6 ff ff       	call   c0002387 <move_window>
c0002d6f:	89 c1                	mov    ecx,eax
c0002d71:	85 c0                	test   eax,eax
c0002d73:	0f 85 1d 01 00 00    	jne    c0002e96 <put_fat+0x18c>
c0002d79:	8d 46 54             	lea    eax,[esi+0x54]
c0002d7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d80:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d83:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d8d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d91:	89 f8                	mov    eax,edi
c0002d93:	83 e3 01             	and    ebx,0x1
c0002d96:	74 0d                	je     c0002da5 <put_fat+0x9b>
c0002d98:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d9b:	89 fa                	mov    edx,edi
c0002d9d:	83 e0 0f             	and    eax,0xf
c0002da0:	c1 e2 04             	shl    edx,0x4
c0002da3:	09 d0                	or     eax,edx
c0002da5:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002da8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dac:	31 c9                	xor    ecx,ecx
c0002dae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002db2:	c1 ea 09             	shr    edx,0x9
c0002db5:	89 f0                	mov    eax,esi
c0002db7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dba:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbd:	e8 c5 f5 ff ff       	call   c0002387 <move_window>
c0002dc2:	89 c1                	mov    ecx,eax
c0002dc4:	85 c0                	test   eax,eax
c0002dc6:	0f 85 ca 00 00 00    	jne    c0002e96 <put_fat+0x18c>
c0002dcc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002dd0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002dd6:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002dda:	85 db                	test   ebx,ebx
c0002ddc:	74 07                	je     c0002de5 <put_fat+0xdb>
c0002dde:	c1 ef 04             	shr    edi,0x4
c0002de1:	89 fa                	mov    edx,edi
c0002de3:	eb 0e                	jmp    c0002df3 <put_fat+0xe9>
c0002de5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002de8:	c1 ef 08             	shr    edi,0x8
c0002deb:	83 e2 f0             	and    edx,0xfffffff0
c0002dee:	83 e7 0f             	and    edi,0xf
c0002df1:	09 fa                	or     edx,edi
c0002df3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002df6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dfa:	e9 97 00 00 00       	jmp    c0002e96 <put_fat+0x18c>
c0002dff:	31 c9                	xor    ecx,ecx
c0002e01:	c1 ea 08             	shr    edx,0x8
c0002e04:	89 f0                	mov    eax,esi
c0002e06:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e09:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e0c:	e8 76 f5 ff ff       	call   c0002387 <move_window>
c0002e11:	89 c1                	mov    ecx,eax
c0002e13:	85 c0                	test   eax,eax
c0002e15:	75 7f                	jne    c0002e96 <put_fat+0x18c>
c0002e17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e1b:	01 db                	add    ebx,ebx
c0002e1d:	0f b7 d7             	movzx  edx,di
c0002e20:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002e26:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002e2a:	e8 ec ed ff ff       	call   c0001c1b <st_word>
c0002e2f:	eb 53                	jmp    c0002e84 <put_fat+0x17a>
c0002e31:	31 c9                	xor    ecx,ecx
c0002e33:	c1 ea 07             	shr    edx,0x7
c0002e36:	89 f0                	mov    eax,esi
c0002e38:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e3b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3e:	e8 44 f5 ff ff       	call   c0002387 <move_window>
c0002e43:	89 c1                	mov    ecx,eax
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 4d                	jne    c0002e96 <put_fat+0x18c>
c0002e49:	c1 e3 02             	shl    ebx,0x2
c0002e4c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e52:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e55:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e59:	74 1c                	je     c0002e77 <put_fat+0x16d>
c0002e5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e5f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e65:	89 d8                	mov    eax,ebx
c0002e67:	e8 4a ed ff ff       	call   c0001bb6 <ld_dword>
c0002e6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e70:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e75:	09 c7                	or     edi,eax
c0002e77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e7b:	89 fa                	mov    edx,edi
c0002e7d:	89 d8                	mov    eax,ebx
c0002e7f:	e8 9b ed ff ff       	call   c0001c1f <st_dword>
c0002e84:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e8c:	eb 08                	jmp    c0002e96 <put_fat+0x18c>
c0002e8e:	b9 02 00 00 00       	mov    ecx,0x2
c0002e93:	89 c8                	mov    eax,ecx
c0002e95:	c3                   	ret    
c0002e96:	83 c4 1c             	add    esp,0x1c
c0002e99:	89 c8                	mov    eax,ecx
c0002e9b:	5b                   	pop    ebx
c0002e9c:	5e                   	pop    esi
c0002e9d:	5f                   	pop    edi
c0002e9e:	5d                   	pop    ebp
c0002e9f:	c3                   	ret    

c0002ea0 <fill_last_frag>:
c0002ea0:	57                   	push   edi
c0002ea1:	89 cf                	mov    edi,ecx
c0002ea3:	56                   	push   esi
c0002ea4:	89 d6                	mov    esi,edx
c0002ea6:	53                   	push   ebx
c0002ea7:	89 c3                	mov    ebx,eax
c0002ea9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 21                	je     c0002ed1 <fill_last_frag+0x31>
c0002eb0:	89 f9                	mov    ecx,edi
c0002eb2:	83 f8 01             	cmp    eax,0x1
c0002eb5:	76 05                	jbe    c0002ebc <fill_last_frag+0x1c>
c0002eb7:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002eba:	29 c1                	sub    ecx,eax
c0002ebc:	8d 56 01             	lea    edx,[esi+0x1]
c0002ebf:	29 c2                	sub    edx,eax
c0002ec1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ec3:	e8 42 fe ff ff       	call   c0002d0a <put_fat>
c0002ec8:	85 c0                	test   eax,eax
c0002eca:	75 05                	jne    c0002ed1 <fill_last_frag+0x31>
c0002ecc:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002ecf:	eb d8                	jmp    c0002ea9 <fill_last_frag+0x9>
c0002ed1:	5b                   	pop    ebx
c0002ed2:	5e                   	pop    esi
c0002ed3:	5f                   	pop    edi
c0002ed4:	c3                   	ret    

c0002ed5 <fill_first_frag>:
c0002ed5:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002ed9:	75 2d                	jne    c0002f08 <fill_first_frag+0x33>
c0002edb:	57                   	push   edi
c0002edc:	56                   	push   esi
c0002edd:	53                   	push   ebx
c0002ede:	89 c3                	mov    ebx,eax
c0002ee0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ee3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ee6:	01 d7                	add    edi,edx
c0002ee8:	39 fa                	cmp    edx,edi
c0002eea:	74 14                	je     c0002f00 <fill_first_frag+0x2b>
c0002eec:	8d 72 01             	lea    esi,[edx+0x1]
c0002eef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ef1:	89 f1                	mov    ecx,esi
c0002ef3:	e8 12 fe ff ff       	call   c0002d0a <put_fat>
c0002ef8:	89 f2                	mov    edx,esi
c0002efa:	85 c0                	test   eax,eax
c0002efc:	74 ea                	je     c0002ee8 <fill_first_frag+0x13>
c0002efe:	eb 0b                	jmp    c0002f0b <fill_first_frag+0x36>
c0002f00:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f04:	31 c0                	xor    eax,eax
c0002f06:	eb 03                	jmp    c0002f0b <fill_first_frag+0x36>
c0002f08:	31 c0                	xor    eax,eax
c0002f0a:	c3                   	ret    
c0002f0b:	5b                   	pop    ebx
c0002f0c:	5e                   	pop    esi
c0002f0d:	5f                   	pop    edi
c0002f0e:	c3                   	ret    

c0002f0f <get_fat>:
c0002f0f:	83 fa 01             	cmp    edx,0x1
c0002f12:	0f 86 db 01 00 00    	jbe    c00030f3 <get_fat+0x1e4>
c0002f18:	55                   	push   ebp
c0002f19:	b9 01 00 00 00       	mov    ecx,0x1
c0002f1e:	57                   	push   edi
c0002f1f:	56                   	push   esi
c0002f20:	53                   	push   ebx
c0002f21:	83 ec 1c             	sub    esp,0x1c
c0002f24:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f26:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002f29:	0f 86 cc 01 00 00    	jbe    c00030fb <get_fat+0x1ec>
c0002f2f:	89 c3                	mov    ebx,eax
c0002f31:	89 d6                	mov    esi,edx
c0002f33:	8a 07                	mov    al,BYTE PTR [edi]
c0002f35:	3c 02                	cmp    al,0x2
c0002f37:	0f 84 99 00 00 00    	je     c0002fd6 <get_fat+0xc7>
c0002f3d:	77 09                	ja     c0002f48 <get_fat+0x39>
c0002f3f:	fe c8                	dec    al
c0002f41:	74 1a                	je     c0002f5d <get_fat+0x4e>
c0002f43:	e9 b3 01 00 00       	jmp    c00030fb <get_fat+0x1ec>
c0002f48:	3c 03                	cmp    al,0x3
c0002f4a:	0f 84 b5 00 00 00    	je     c0003005 <get_fat+0xf6>
c0002f50:	3c 04                	cmp    al,0x4
c0002f52:	0f 84 e3 00 00 00    	je     c000303b <get_fat+0x12c>
c0002f58:	e9 9e 01 00 00       	jmp    c00030fb <get_fat+0x1ec>
c0002f5d:	89 d3                	mov    ebx,edx
c0002f5f:	31 c9                	xor    ecx,ecx
c0002f61:	d1 eb                	shr    ebx,1
c0002f63:	89 f8                	mov    eax,edi
c0002f65:	01 d3                	add    ebx,edx
c0002f67:	89 da                	mov    edx,ebx
c0002f69:	c1 ea 09             	shr    edx,0x9
c0002f6c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f72:	e8 10 f4 ff ff       	call   c0002387 <move_window>
c0002f77:	85 c0                	test   eax,eax
c0002f79:	74 08                	je     c0002f83 <get_fat+0x74>
c0002f7b:	83 c9 ff             	or     ecx,0xffffffff
c0002f7e:	e9 78 01 00 00       	jmp    c00030fb <get_fat+0x1ec>
c0002f83:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f86:	31 c9                	xor    ecx,ecx
c0002f88:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f8e:	89 ea                	mov    edx,ebp
c0002f90:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f94:	c1 ea 09             	shr    edx,0x9
c0002f97:	89 f8                	mov    eax,edi
c0002f99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f9c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f9f:	e8 e3 f3 ff ff       	call   c0002387 <move_window>
c0002fa4:	85 c0                	test   eax,eax
c0002fa6:	75 d3                	jne    c0002f7b <get_fat+0x6c>
c0002fa8:	0f b6 c3             	movzx  eax,bl
c0002fab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fb1:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002fb6:	c1 e3 08             	shl    ebx,0x8
c0002fb9:	09 c3                	or     ebx,eax
c0002fbb:	89 d9                	mov    ecx,ebx
c0002fbd:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fc3:	83 e6 01             	and    esi,0x1
c0002fc6:	0f 84 2f 01 00 00    	je     c00030fb <get_fat+0x1ec>
c0002fcc:	89 d9                	mov    ecx,ebx
c0002fce:	c1 e9 04             	shr    ecx,0x4
c0002fd1:	e9 25 01 00 00       	jmp    c00030fb <get_fat+0x1ec>
c0002fd6:	31 c9                	xor    ecx,ecx
c0002fd8:	c1 ea 08             	shr    edx,0x8
c0002fdb:	89 f8                	mov    eax,edi
c0002fdd:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fe0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fe3:	e8 9f f3 ff ff       	call   c0002387 <move_window>
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	75 8f                	jne    c0002f7b <get_fat+0x6c>
c0002fec:	01 f6                	add    esi,esi
c0002fee:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ff8:	e8 ac eb ff ff       	call   c0001ba9 <ld_word>
c0002ffd:	0f b7 c8             	movzx  ecx,ax
c0003000:	e9 f6 00 00 00       	jmp    c00030fb <get_fat+0x1ec>
c0003005:	31 c9                	xor    ecx,ecx
c0003007:	c1 ea 07             	shr    edx,0x7
c000300a:	89 f8                	mov    eax,edi
c000300c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000300f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003012:	e8 70 f3 ff ff       	call   c0002387 <move_window>
c0003017:	85 c0                	test   eax,eax
c0003019:	0f 85 5c ff ff ff    	jne    c0002f7b <get_fat+0x6c>
c000301f:	c1 e6 02             	shl    esi,0x2
c0003022:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003028:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000302c:	e8 85 eb ff ff       	call   c0001bb6 <ld_dword>
c0003031:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003036:	e9 b4 00 00 00       	jmp    c00030ef <get_fat+0x1e0>
c000303b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000303e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003041:	89 d1                	mov    ecx,edx
c0003043:	09 c1                	or     ecx,eax
c0003045:	74 06                	je     c000304d <get_fat+0x13e>
c0003047:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000304b:	75 0f                	jne    c000305c <get_fat+0x14d>
c000304d:	b9 01 00 00 00       	mov    ecx,0x1
c0003052:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003056:	0f 85 9f 00 00 00    	jne    c00030fb <get_fat+0x1ec>
c000305c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003060:	89 f5                	mov    ebp,esi
c0003062:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003067:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000306a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000306d:	80 f9 02             	cmp    cl,0x2
c0003070:	75 35                	jne    c00030a7 <get_fat+0x198>
c0003072:	83 c0 ff             	add    eax,0xffffffff
c0003075:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000307a:	83 d2 ff             	adc    edx,0xffffffff
c000307d:	31 db                	xor    ebx,ebx
c000307f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003083:	53                   	push   ebx
c0003084:	c1 ea 09             	shr    edx,0x9
c0003087:	51                   	push   ecx
c0003088:	52                   	push   edx
c0003089:	50                   	push   eax
c000308a:	e8 ad b5 01 00       	call   c001e63c <__udivdi3>
c000308f:	83 c4 10             	add    esp,0x10
c0003092:	b9 01 00 00 00       	mov    ecx,0x1
c0003097:	39 c5                	cmp    ebp,eax
c0003099:	77 60                	ja     c00030fb <get_fat+0x1ec>
c000309b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00030a0:	74 59                	je     c00030fb <get_fat+0x1ec>
c00030a2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00030a5:	eb 54                	jmp    c00030fb <get_fat+0x1ec>
c00030a7:	80 f9 03             	cmp    cl,0x3
c00030aa:	75 05                	jne    c00030b1 <get_fat+0x1a2>
c00030ac:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c00030af:	77 f1                	ja     c00030a2 <get_fat+0x193>
c00030b1:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00030b6:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c00030ba:	75 3f                	jne    c00030fb <get_fat+0x1ec>
c00030bc:	31 c9                	xor    ecx,ecx
c00030be:	89 f2                	mov    edx,esi
c00030c0:	89 f8                	mov    eax,edi
c00030c2:	c1 ea 07             	shr    edx,0x7
c00030c5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030cb:	e8 b7 f2 ff ff       	call   c0002387 <move_window>
c00030d0:	85 c0                	test   eax,eax
c00030d2:	0f 85 a3 fe ff ff    	jne    c0002f7b <get_fat+0x6c>
c00030d8:	c1 e6 02             	shl    esi,0x2
c00030db:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e5:	e8 cc ea ff ff       	call   c0001bb6 <ld_dword>
c00030ea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030ef:	89 c1                	mov    ecx,eax
c00030f1:	eb 08                	jmp    c00030fb <get_fat+0x1ec>
c00030f3:	b9 01 00 00 00       	mov    ecx,0x1
c00030f8:	89 c8                	mov    eax,ecx
c00030fa:	c3                   	ret    
c00030fb:	83 c4 1c             	add    esp,0x1c
c00030fe:	89 c8                	mov    eax,ecx
c0003100:	5b                   	pop    ebx
c0003101:	5e                   	pop    esi
c0003102:	5f                   	pop    edi
c0003103:	5d                   	pop    ebp
c0003104:	c3                   	ret    

c0003105 <dir_sdi>:
c0003105:	55                   	push   ebp
c0003106:	57                   	push   edi
c0003107:	56                   	push   esi
c0003108:	53                   	push   ebx
c0003109:	89 c3                	mov    ebx,eax
c000310b:	83 ec 1c             	sub    esp,0x1c
c000310e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003110:	31 c0                	xor    eax,eax
c0003112:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003115:	0f 94 c0             	sete   al
c0003118:	48                   	dec    eax
c0003119:	25 00 00 20 f0       	and    eax,0xf0200000
c000311e:	05 00 00 00 10       	add    eax,0x10000000
c0003123:	39 d0                	cmp    eax,edx
c0003125:	77 0a                	ja     c0003131 <dir_sdi+0x2c>
c0003127:	b8 02 00 00 00       	mov    eax,0x2
c000312c:	e9 c4 00 00 00       	jmp    c00031f5 <dir_sdi+0xf0>
c0003131:	89 d6                	mov    esi,edx
c0003133:	f6 c2 1f             	test   dl,0x1f
c0003136:	75 ef                	jne    c0003127 <dir_sdi+0x22>
c0003138:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000313b:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000313e:	85 c9                	test   ecx,ecx
c0003140:	75 2d                	jne    c000316f <dir_sdi+0x6a>
c0003142:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003145:	77 1b                	ja     c0003162 <dir_sdi+0x5d>
c0003147:	89 f2                	mov    edx,esi
c0003149:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000314d:	c1 ea 05             	shr    edx,0x5
c0003150:	39 c2                	cmp    edx,eax
c0003152:	73 d3                	jae    c0003127 <dir_sdi+0x22>
c0003154:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003157:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000315a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003160:	eb 4b                	jmp    c00031ad <dir_sdi+0xa8>
c0003162:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003165:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003169:	85 c0                	test   eax,eax
c000316b:	74 da                	je     c0003147 <dir_sdi+0x42>
c000316d:	89 c1                	mov    ecx,eax
c000316f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003173:	c1 e5 09             	shl    ebp,0x9
c0003176:	89 ca                	mov    edx,ecx
c0003178:	39 ee                	cmp    esi,ebp
c000317a:	72 1c                	jb     c0003198 <dir_sdi+0x93>
c000317c:	89 d8                	mov    eax,ebx
c000317e:	e8 8c fd ff ff       	call   c0002f0f <get_fat>
c0003183:	89 c1                	mov    ecx,eax
c0003185:	83 f8 ff             	cmp    eax,0xffffffff
c0003188:	74 66                	je     c00031f0 <dir_sdi+0xeb>
c000318a:	83 f8 01             	cmp    eax,0x1
c000318d:	76 98                	jbe    c0003127 <dir_sdi+0x22>
c000318f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003192:	76 93                	jbe    c0003127 <dir_sdi+0x22>
c0003194:	29 ee                	sub    esi,ebp
c0003196:	eb de                	jmp    c0003176 <dir_sdi+0x71>
c0003198:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000319c:	89 f8                	mov    eax,edi
c000319e:	e8 9f ec ff ff       	call   c0001e42 <clst2sect>
c00031a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00031a7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031aa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031ad:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00031b0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00031b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00031b6:	89 d1                	mov    ecx,edx
c00031b8:	09 c1                	or     ecx,eax
c00031ba:	0f 84 67 ff ff ff    	je     c0003127 <dir_sdi+0x22>
c00031c0:	89 f1                	mov    ecx,esi
c00031c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00031ca:	c1 e9 09             	shr    ecx,0x9
c00031cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031d1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00031d5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00031d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031dc:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031e2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031e5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031e9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ec:	31 c0                	xor    eax,eax
c00031ee:	eb 05                	jmp    c00031f5 <dir_sdi+0xf0>
c00031f0:	b8 01 00 00 00       	mov    eax,0x1
c00031f5:	83 c4 1c             	add    esp,0x1c
c00031f8:	5b                   	pop    ebx
c00031f9:	5e                   	pop    esi
c00031fa:	5f                   	pop    edi
c00031fb:	5d                   	pop    ebp
c00031fc:	c3                   	ret    

c00031fd <create_chain>:
c00031fd:	55                   	push   ebp
c00031fe:	89 c5                	mov    ebp,eax
c0003200:	57                   	push   edi
c0003201:	56                   	push   esi
c0003202:	53                   	push   ebx
c0003203:	83 ec 1c             	sub    esp,0x1c
c0003206:	85 d2                	test   edx,edx
c0003208:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000320c:	8b 30                	mov    esi,DWORD PTR [eax]
c000320e:	75 0e                	jne    c000321e <create_chain+0x21>
c0003210:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003213:	85 ff                	test   edi,edi
c0003215:	74 39                	je     c0003250 <create_chain+0x53>
c0003217:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000321a:	77 39                	ja     c0003255 <create_chain+0x58>
c000321c:	eb 32                	jmp    c0003250 <create_chain+0x53>
c000321e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003222:	e8 e8 fc ff ff       	call   c0002f0f <get_fat>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	83 f8 01             	cmp    eax,0x1
c000322c:	77 0a                	ja     c0003238 <create_chain+0x3b>
c000322e:	bb 01 00 00 00       	mov    ebx,0x1
c0003233:	e9 ba 01 00 00       	jmp    c00033f2 <create_chain+0x1f5>
c0003238:	83 f8 ff             	cmp    eax,0xffffffff
c000323b:	0f 84 62 01 00 00    	je     c00033a3 <create_chain+0x1a6>
c0003241:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003244:	0f 87 a8 01 00 00    	ja     c00033f2 <create_chain+0x1f5>
c000324a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000324e:	eb 05                	jmp    c0003255 <create_chain+0x58>
c0003250:	bf 01 00 00 00       	mov    edi,0x1
c0003255:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003259:	75 07                	jne    c0003262 <create_chain+0x65>
c000325b:	31 db                	xor    ebx,ebx
c000325d:	e9 90 01 00 00       	jmp    c00033f2 <create_chain+0x1f5>
c0003262:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003265:	75 74                	jne    c00032db <create_chain+0xde>
c0003267:	b9 01 00 00 00       	mov    ecx,0x1
c000326c:	89 fa                	mov    edx,edi
c000326e:	89 f0                	mov    eax,esi
c0003270:	e8 2d f9 ff ff       	call   c0002ba2 <find_bitmap>
c0003275:	89 c3                	mov    ebx,eax
c0003277:	8d 40 ff             	lea    eax,[eax-0x1]
c000327a:	83 f8 fd             	cmp    eax,0xfffffffd
c000327d:	0f 87 6f 01 00 00    	ja     c00033f2 <create_chain+0x1f5>
c0003283:	83 ec 0c             	sub    esp,0xc
c0003286:	b9 01 00 00 00       	mov    ecx,0x1
c000328b:	6a 01                	push   0x1
c000328d:	89 da                	mov    edx,ebx
c000328f:	89 f0                	mov    eax,esi
c0003291:	e8 bf f9 ff ff       	call   c0002c55 <change_bitmap>
c0003296:	83 c4 10             	add    esp,0x10
c0003299:	83 f8 02             	cmp    eax,0x2
c000329c:	74 90                	je     c000322e <create_chain+0x31>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 84 fc 00 00 00    	je     c00033a3 <create_chain+0x1a6>
c00032a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00032ac:	75 09                	jne    c00032b7 <create_chain+0xba>
c00032ae:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00032b2:	e9 0c 01 00 00       	jmp    c00033c3 <create_chain+0x1c6>
c00032b7:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00032bb:	0f 85 e7 00 00 00    	jne    c00033a8 <create_chain+0x1ab>
c00032c1:	8d 57 01             	lea    edx,[edi+0x1]
c00032c4:	39 da                	cmp    edx,ebx
c00032c6:	0f 84 f7 00 00 00    	je     c00033c3 <create_chain+0x1c6>
c00032cc:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00032cf:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00032d3:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00032d6:	e9 cd 00 00 00       	jmp    c00033a8 <create_chain+0x1ab>
c00032db:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032df:	75 41                	jne    c0003322 <create_chain+0x125>
c00032e1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032e4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032e7:	77 05                	ja     c00032ee <create_chain+0xf1>
c00032e9:	bb 02 00 00 00       	mov    ebx,0x2
c00032ee:	89 da                	mov    edx,ebx
c00032f0:	89 e8                	mov    eax,ebp
c00032f2:	e8 18 fc ff ff       	call   c0002f0f <get_fat>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 2e ff ff ff    	je     c000322e <create_chain+0x31>
c0003300:	83 f8 ff             	cmp    eax,0xffffffff
c0003303:	0f 84 9a 00 00 00    	je     c00033a3 <create_chain+0x1a6>
c0003309:	85 c0                	test   eax,eax
c000330b:	74 11                	je     c000331e <create_chain+0x121>
c000330d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003310:	83 f8 01             	cmp    eax,0x1
c0003313:	76 0d                	jbe    c0003322 <create_chain+0x125>
c0003315:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003318:	76 08                	jbe    c0003322 <create_chain+0x125>
c000331a:	89 c7                	mov    edi,eax
c000331c:	eb 04                	jmp    c0003322 <create_chain+0x125>
c000331e:	85 db                	test   ebx,ebx
c0003320:	75 38                	jne    c000335a <create_chain+0x15d>
c0003322:	89 fb                	mov    ebx,edi
c0003324:	43                   	inc    ebx
c0003325:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003328:	77 0e                	ja     c0003338 <create_chain+0x13b>
c000332a:	83 ff 01             	cmp    edi,0x1
c000332d:	0f 86 28 ff ff ff    	jbe    c000325b <create_chain+0x5e>
c0003333:	bb 02 00 00 00       	mov    ebx,0x2
c0003338:	89 da                	mov    edx,ebx
c000333a:	89 e8                	mov    eax,ebp
c000333c:	e8 ce fb ff ff       	call   c0002f0f <get_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 15                	je     c000335a <create_chain+0x15d>
c0003345:	83 f8 01             	cmp    eax,0x1
c0003348:	0f 84 e0 fe ff ff    	je     c000322e <create_chain+0x31>
c000334e:	40                   	inc    eax
c000334f:	74 52                	je     c00033a3 <create_chain+0x1a6>
c0003351:	39 fb                	cmp    ebx,edi
c0003353:	75 cf                	jne    c0003324 <create_chain+0x127>
c0003355:	e9 01 ff ff ff       	jmp    c000325b <create_chain+0x5e>
c000335a:	83 c9 ff             	or     ecx,0xffffffff
c000335d:	89 da                	mov    edx,ebx
c000335f:	89 f0                	mov    eax,esi
c0003361:	e8 a4 f9 ff ff       	call   c0002d0a <put_fat>
c0003366:	85 c0                	test   eax,eax
c0003368:	75 32                	jne    c000339c <create_chain+0x19f>
c000336a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336f:	74 11                	je     c0003382 <create_chain+0x185>
c0003371:	89 d9                	mov    ecx,ebx
c0003373:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003377:	89 f0                	mov    eax,esi
c0003379:	e8 8c f9 ff ff       	call   c0002d0a <put_fat>
c000337e:	85 c0                	test   eax,eax
c0003380:	75 1a                	jne    c000339c <create_chain+0x19f>
c0003382:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003385:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003388:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000338b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000338e:	39 d0                	cmp    eax,edx
c0003390:	77 04                	ja     c0003396 <create_chain+0x199>
c0003392:	48                   	dec    eax
c0003393:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003396:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000339a:	eb 56                	jmp    c00033f2 <create_chain+0x1f5>
c000339c:	48                   	dec    eax
c000339d:	0f 85 8b fe ff ff    	jne    c000322e <create_chain+0x31>
c00033a3:	83 cb ff             	or     ebx,0xffffffff
c00033a6:	eb 4a                	jmp    c00033f2 <create_chain+0x1f5>
c00033a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033ac:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033af:	41                   	inc    ecx
c00033b0:	39 d9                	cmp    ecx,ebx
c00033b2:	75 19                	jne    c00033cd <create_chain+0x1d0>
c00033b4:	b9 02 00 00 00       	mov    ecx,0x2
c00033b9:	85 d2                	test   edx,edx
c00033bb:	74 03                	je     c00033c0 <create_chain+0x1c3>
c00033bd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00033c0:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00033c3:	85 c0                	test   eax,eax
c00033c5:	0f 85 63 fe ff ff    	jne    c000322e <create_chain+0x31>
c00033cb:	eb b5                	jmp    c0003382 <create_chain+0x185>
c00033cd:	85 d2                	test   edx,edx
c00033cf:	75 07                	jne    c00033d8 <create_chain+0x1db>
c00033d1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033d8:	89 d9                	mov    ecx,ebx
c00033da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033de:	89 e8                	mov    eax,ebp
c00033e0:	e8 bb fa ff ff       	call   c0002ea0 <fill_last_frag>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	75 b3                	jne    c000339c <create_chain+0x19f>
c00033e9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033f0:	eb 90                	jmp    c0003382 <create_chain+0x185>
c00033f2:	83 c4 1c             	add    esp,0x1c
c00033f5:	89 d8                	mov    eax,ebx
c00033f7:	5b                   	pop    ebx
c00033f8:	5e                   	pop    esi
c00033f9:	5f                   	pop    edi
c00033fa:	5d                   	pop    ebp
c00033fb:	c3                   	ret    

c00033fc <remove_chain>:
c00033fc:	55                   	push   ebp
c00033fd:	57                   	push   edi
c00033fe:	56                   	push   esi
c00033ff:	53                   	push   ebx
c0003400:	83 ec 1c             	sub    esp,0x1c
c0003403:	83 fa 01             	cmp    edx,0x1
c0003406:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000340a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000340c:	77 0a                	ja     c0003418 <remove_chain+0x1c>
c000340e:	b8 02 00 00 00       	mov    eax,0x2
c0003413:	e9 24 01 00 00       	jmp    c000353c <remove_chain+0x140>
c0003418:	89 d6                	mov    esi,edx
c000341a:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000341d:	76 ef                	jbe    c000340e <remove_chain+0x12>
c000341f:	89 c7                	mov    edi,eax
c0003421:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003426:	75 06                	jne    c000342e <remove_chain+0x32>
c0003428:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000342c:	eb 54                	jmp    c0003482 <remove_chain+0x86>
c000342e:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003431:	75 06                	jne    c0003439 <remove_chain+0x3d>
c0003433:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003437:	74 ef                	je     c0003428 <remove_chain+0x2c>
c0003439:	83 c9 ff             	or     ecx,0xffffffff
c000343c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003440:	89 d8                	mov    eax,ebx
c0003442:	e8 c3 f8 ff ff       	call   c0002d0a <put_fat>
c0003447:	85 c0                	test   eax,eax
c0003449:	74 dd                	je     c0003428 <remove_chain+0x2c>
c000344b:	e9 ec 00 00 00       	jmp    c000353c <remove_chain+0x140>
c0003450:	83 f8 01             	cmp    eax,0x1
c0003453:	74 b9                	je     c000340e <remove_chain+0x12>
c0003455:	83 f8 ff             	cmp    eax,0xffffffff
c0003458:	74 6d                	je     c00034c7 <remove_chain+0xcb>
c000345a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000345d:	75 6f                	jne    c00034ce <remove_chain+0xd2>
c000345f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003462:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003465:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003468:	39 d0                	cmp    eax,edx
c000346a:	73 08                	jae    c0003474 <remove_chain+0x78>
c000346c:	40                   	inc    eax
c000346d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003471:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003474:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003477:	39 e9                	cmp    ecx,ebp
c0003479:	75 64                	jne    c00034df <remove_chain+0xe3>
c000347b:	89 ee                	mov    esi,ebp
c000347d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003480:	76 0f                	jbe    c0003491 <remove_chain+0x95>
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 f8                	mov    eax,edi
c0003486:	e8 84 fa ff ff       	call   c0002f0f <get_fat>
c000348b:	89 c5                	mov    ebp,eax
c000348d:	85 c0                	test   eax,eax
c000348f:	75 bf                	jne    c0003450 <remove_chain+0x54>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	0f 85 a0 00 00 00    	jne    c000353a <remove_chain+0x13e>
c000349a:	eb 6c                	jmp    c0003508 <remove_chain+0x10c>
c000349c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000349f:	84 c0                	test   al,al
c00034a1:	75 7d                	jne    c0003520 <remove_chain+0x124>
c00034a3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00034a6:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00034aa:	0f 84 86 00 00 00    	je     c0003536 <remove_chain+0x13a>
c00034b0:	89 da                	mov    edx,ebx
c00034b2:	89 f8                	mov    eax,edi
c00034b4:	e8 56 fa ff ff       	call   c0002f0f <get_fat>
c00034b9:	83 f8 01             	cmp    eax,0x1
c00034bc:	0f 86 4c ff ff ff    	jbe    c000340e <remove_chain+0x12>
c00034c2:	83 f8 ff             	cmp    eax,0xffffffff
c00034c5:	75 4e                	jne    c0003515 <remove_chain+0x119>
c00034c7:	b8 01 00 00 00       	mov    eax,0x1
c00034cc:	eb 6e                	jmp    c000353c <remove_chain+0x140>
c00034ce:	31 c9                	xor    ecx,ecx
c00034d0:	89 f2                	mov    edx,esi
c00034d2:	89 d8                	mov    eax,ebx
c00034d4:	e8 31 f8 ff ff       	call   c0002d0a <put_fat>
c00034d9:	85 c0                	test   eax,eax
c00034db:	74 82                	je     c000345f <remove_chain+0x63>
c00034dd:	eb 5d                	jmp    c000353c <remove_chain+0x140>
c00034df:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e2:	75 1b                	jne    c00034ff <remove_chain+0x103>
c00034e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034e8:	89 d8                	mov    eax,ebx
c00034ea:	83 ec 0c             	sub    esp,0xc
c00034ed:	6a 00                	push   0x0
c00034ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034f3:	e8 5d f7 ff ff       	call   c0002c55 <change_bitmap>
c00034f8:	83 c4 10             	add    esp,0x10
c00034fb:	85 c0                	test   eax,eax
c00034fd:	75 3d                	jne    c000353c <remove_chain+0x140>
c00034ff:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003503:	e9 73 ff ff ff       	jmp    c000347b <remove_chain+0x7f>
c0003508:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000350d:	75 8d                	jne    c000349c <remove_chain+0xa0>
c000350f:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003513:	eb 25                	jmp    c000353a <remove_chain+0x13e>
c0003515:	8d 53 01             	lea    edx,[ebx+0x1]
c0003518:	89 c3                	mov    ebx,eax
c000351a:	39 c2                	cmp    edx,eax
c000351c:	74 88                	je     c00034a6 <remove_chain+0xaa>
c000351e:	eb 1a                	jmp    c000353a <remove_chain+0x13e>
c0003520:	3c 03                	cmp    al,0x3
c0003522:	75 16                	jne    c000353a <remove_chain+0x13e>
c0003524:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003527:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000352b:	77 0d                	ja     c000353a <remove_chain+0x13e>
c000352d:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003530:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003534:	72 04                	jb     c000353a <remove_chain+0x13e>
c0003536:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000353a:	31 c0                	xor    eax,eax
c000353c:	83 c4 1c             	add    esp,0x1c
c000353f:	5b                   	pop    ebx
c0003540:	5e                   	pop    esi
c0003541:	5f                   	pop    edi
c0003542:	5d                   	pop    ebp
c0003543:	c3                   	ret    

c0003544 <dir_clear>:
c0003544:	55                   	push   ebp
c0003545:	57                   	push   edi
c0003546:	56                   	push   esi
c0003547:	89 c6                	mov    esi,eax
c0003549:	53                   	push   ebx
c000354a:	83 ec 1c             	sub    esp,0x1c
c000354d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003551:	e8 9d ed ff ff       	call   c00022f3 <sync_window>
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 de 00 00 00    	jne    c000363c <dir_clear+0xf8>
c000355e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003562:	89 f0                	mov    eax,esi
c0003564:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003567:	e8 d6 e8 ff ff       	call   c0001e42 <clst2sect>
c000356c:	b9 00 02 00 00       	mov    ecx,0x200
c0003571:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003575:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003579:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000357c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000357f:	89 e8                	mov    eax,ebp
c0003581:	31 d2                	xor    edx,edx
c0003583:	e8 b5 e6 ff ff       	call   c0001c3d <mem_set>
c0003588:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000358c:	c1 e3 09             	shl    ebx,0x9
c000358f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003595:	76 1f                	jbe    c00035b6 <dir_clear+0x72>
c0003597:	bb 00 80 00 00       	mov    ebx,0x8000
c000359c:	eb 18                	jmp    c00035b6 <dir_clear+0x72>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	53                   	push   ebx
c00035a2:	e8 35 4e 00 00       	call   c00083dc <ff_memalloc>
c00035a7:	83 c4 10             	add    esp,0x10
c00035aa:	89 c7                	mov    edi,eax
c00035ac:	85 c0                	test   eax,eax
c00035ae:	0f 85 8f 00 00 00    	jne    c0003643 <dir_clear+0xff>
c00035b4:	d1 eb                	shr    ebx,1
c00035b6:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00035bc:	77 e0                	ja     c000359e <dir_clear+0x5a>
c00035be:	31 db                	xor    ebx,ebx
c00035c0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c4:	39 d8                	cmp    eax,ebx
c00035c6:	76 66                	jbe    c000362e <dir_clear+0xea>
c00035c8:	83 ec 0c             	sub    esp,0xc
c00035cb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cf:	6a 01                	push   0x1
c00035d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00035d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00035d9:	55                   	push   ebp
c00035da:	50                   	push   eax
c00035db:	e8 94 e5 ff ff       	call   c0001b74 <disk_write>
c00035e0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035e5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ea:	83 c4 20             	add    esp,0x20
c00035ed:	85 c0                	test   eax,eax
c00035ef:	75 3d                	jne    c000362e <dir_clear+0xea>
c00035f1:	43                   	inc    ebx
c00035f2:	eb cc                	jmp    c00035c0 <dir_clear+0x7c>
c00035f4:	83 ec 0c             	sub    esp,0xc
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	55                   	push   ebp
c00035fa:	89 d8                	mov    eax,ebx
c00035fc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003600:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003604:	52                   	push   edx
c0003605:	50                   	push   eax
c0003606:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000360a:	57                   	push   edi
c000360b:	50                   	push   eax
c000360c:	e8 63 e5 ff ff       	call   c0001b74 <disk_write>
c0003611:	83 c4 20             	add    esp,0x20
c0003614:	85 c0                	test   eax,eax
c0003616:	75 0a                	jne    c0003622 <dir_clear+0xde>
c0003618:	01 eb                	add    ebx,ebp
c000361a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000361e:	39 d8                	cmp    eax,ebx
c0003620:	77 d2                	ja     c00035f4 <dir_clear+0xb0>
c0003622:	83 ec 0c             	sub    esp,0xc
c0003625:	57                   	push   edi
c0003626:	e8 c7 4d 00 00       	call   c00083f2 <ff_memfree>
c000362b:	83 c4 10             	add    esp,0x10
c000362e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003632:	39 d8                	cmp    eax,ebx
c0003634:	0f 95 c0             	setne  al
c0003637:	0f b6 c0             	movzx  eax,al
c000363a:	eb 19                	jmp    c0003655 <dir_clear+0x111>
c000363c:	b8 01 00 00 00       	mov    eax,0x1
c0003641:	eb 12                	jmp    c0003655 <dir_clear+0x111>
c0003643:	89 d9                	mov    ecx,ebx
c0003645:	31 d2                	xor    edx,edx
c0003647:	c1 eb 09             	shr    ebx,0x9
c000364a:	e8 ee e5 ff ff       	call   c0001c3d <mem_set>
c000364f:	89 dd                	mov    ebp,ebx
c0003651:	31 db                	xor    ebx,ebx
c0003653:	eb c5                	jmp    c000361a <dir_clear+0xd6>
c0003655:	83 c4 1c             	add    esp,0x1c
c0003658:	5b                   	pop    ebx
c0003659:	5e                   	pop    esi
c000365a:	5f                   	pop    edi
c000365b:	5d                   	pop    ebp
c000365c:	c3                   	ret    

c000365d <dir_next>:
c000365d:	55                   	push   ebp
c000365e:	57                   	push   edi
c000365f:	56                   	push   esi
c0003660:	53                   	push   ebx
c0003661:	89 c3                	mov    ebx,eax
c0003663:	83 ec 1c             	sub    esp,0x1c
c0003666:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003668:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000366c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000366f:	8d 78 20             	lea    edi,[eax+0x20]
c0003672:	31 c0                	xor    eax,eax
c0003674:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003678:	0f 94 c0             	sete   al
c000367b:	48                   	dec    eax
c000367c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003681:	05 00 00 00 10       	add    eax,0x10000000
c0003686:	39 f8                	cmp    eax,edi
c0003688:	77 0e                	ja     c0003698 <dir_next+0x3b>
c000368a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003691:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003698:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000369b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000369e:	b8 04 00 00 00       	mov    eax,0x4
c00036a3:	89 ce                	mov    esi,ecx
c00036a5:	09 d6                	or     esi,edx
c00036a7:	0f 84 da 00 00 00    	je     c0003787 <dir_next+0x12a>
c00036ad:	89 f8                	mov    eax,edi
c00036af:	25 ff 01 00 00       	and    eax,0x1ff
c00036b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00036b8:	0f 85 b9 00 00 00    	jne    c0003777 <dir_next+0x11a>
c00036be:	83 c2 01             	add    edx,0x1
c00036c1:	83 d1 00             	adc    ecx,0x0
c00036c4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00036c7:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00036ca:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036cd:	85 d2                	test   edx,edx
c00036cf:	75 29                	jne    c00036fa <dir_next+0x9d>
c00036d1:	89 fa                	mov    edx,edi
c00036d3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036d7:	c1 ea 05             	shr    edx,0x5
c00036da:	39 c2                	cmp    edx,eax
c00036dc:	0f 82 95 00 00 00    	jb     c0003777 <dir_next+0x11a>
c00036e2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036e9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036f0:	b8 04 00 00 00       	mov    eax,0x4
c00036f5:	e9 8d 00 00 00       	jmp    c0003787 <dir_next+0x12a>
c00036fa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036fe:	89 f9                	mov    ecx,edi
c0003700:	48                   	dec    eax
c0003701:	c1 e9 09             	shr    ecx,0x9
c0003704:	85 c8                	test   eax,ecx
c0003706:	75 6f                	jne    c0003777 <dir_next+0x11a>
c0003708:	89 d8                	mov    eax,ebx
c000370a:	e8 00 f8 ff ff       	call   c0002f0f <get_fat>
c000370f:	89 c6                	mov    esi,eax
c0003711:	83 f8 01             	cmp    eax,0x1
c0003714:	77 07                	ja     c000371d <dir_next+0xc0>
c0003716:	b8 02 00 00 00       	mov    eax,0x2
c000371b:	eb 6a                	jmp    c0003787 <dir_next+0x12a>
c000371d:	83 f8 ff             	cmp    eax,0xffffffff
c0003720:	75 07                	jne    c0003729 <dir_next+0xcc>
c0003722:	b8 01 00 00 00       	mov    eax,0x1
c0003727:	eb 5e                	jmp    c0003787 <dir_next+0x12a>
c0003729:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000372c:	77 37                	ja     c0003765 <dir_next+0x108>
c000372e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003733:	74 ad                	je     c00036e2 <dir_next+0x85>
c0003735:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003738:	89 d8                	mov    eax,ebx
c000373a:	e8 be fa ff ff       	call   c00031fd <create_chain>
c000373f:	89 c6                	mov    esi,eax
c0003741:	b8 07 00 00 00       	mov    eax,0x7
c0003746:	85 f6                	test   esi,esi
c0003748:	74 3d                	je     c0003787 <dir_next+0x12a>
c000374a:	83 fe 01             	cmp    esi,0x1
c000374d:	74 c7                	je     c0003716 <dir_next+0xb9>
c000374f:	83 fe ff             	cmp    esi,0xffffffff
c0003752:	74 ce                	je     c0003722 <dir_next+0xc5>
c0003754:	89 f2                	mov    edx,esi
c0003756:	89 e8                	mov    eax,ebp
c0003758:	e8 e7 fd ff ff       	call   c0003544 <dir_clear>
c000375d:	85 c0                	test   eax,eax
c000375f:	75 c1                	jne    c0003722 <dir_next+0xc5>
c0003761:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003765:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003768:	89 f2                	mov    edx,esi
c000376a:	89 e8                	mov    eax,ebp
c000376c:	e8 d1 e6 ff ff       	call   c0001e42 <clst2sect>
c0003771:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003774:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003777:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000377b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000377e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003782:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003785:	31 c0                	xor    eax,eax
c0003787:	83 c4 1c             	add    esp,0x1c
c000378a:	5b                   	pop    ebx
c000378b:	5e                   	pop    esi
c000378c:	5f                   	pop    edi
c000378d:	5d                   	pop    ebp
c000378e:	c3                   	ret    

c000378f <load_xdir>:
c000378f:	55                   	push   ebp
c0003790:	57                   	push   edi
c0003791:	56                   	push   esi
c0003792:	89 c6                	mov    esi,eax
c0003794:	53                   	push   ebx
c0003795:	83 ec 1c             	sub    esp,0x1c
c0003798:	8b 00                	mov    eax,DWORD PTR [eax]
c000379a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037a3:	e8 df eb ff ff       	call   c0002387 <move_window>
c00037a8:	89 c3                	mov    ebx,eax
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 0c 01 00 00    	jne    c00038be <load_xdir+0x12f>
c00037b2:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037b5:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00037b8:	0f 85 fb 00 00 00    	jne    c00038b9 <load_xdir+0x12a>
c00037be:	89 f8                	mov    eax,edi
c00037c0:	b9 20 00 00 00       	mov    ecx,0x20
c00037c5:	e8 5e e4 ff ff       	call   c0001c28 <mem_cpy>
c00037ca:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00037ce:	40                   	inc    eax
c00037cf:	c1 e0 05             	shl    eax,0x5
c00037d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00037d6:	83 e8 60             	sub    eax,0x60
c00037d9:	3d 00 02 00 00       	cmp    eax,0x200
c00037de:	0f 87 d5 00 00 00    	ja     c00038b9 <load_xdir+0x12a>
c00037e4:	31 d2                	xor    edx,edx
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	e8 70 fe ff ff       	call   c000365d <dir_next>
c00037ed:	89 c3                	mov    ebx,eax
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 84 c1 00 00 00    	je     c00038b9 <load_xdir+0x12a>
c00037f8:	85 c0                	test   eax,eax
c00037fa:	0f 85 be 00 00 00    	jne    c00038be <load_xdir+0x12f>
c0003800:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003803:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003806:	8b 06                	mov    eax,DWORD PTR [esi]
c0003808:	e8 7a eb ff ff       	call   c0002387 <move_window>
c000380d:	89 c3                	mov    ebx,eax
c000380f:	85 c0                	test   eax,eax
c0003811:	0f 85 a7 00 00 00    	jne    c00038be <load_xdir+0x12f>
c0003817:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000381a:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000381d:	0f 85 96 00 00 00    	jne    c00038b9 <load_xdir+0x12a>
c0003823:	8d 47 20             	lea    eax,[edi+0x20]
c0003826:	b9 20 00 00 00       	mov    ecx,0x20
c000382b:	e8 f8 e3 ff ff       	call   c0001c28 <mem_cpy>
c0003830:	31 d2                	xor    edx,edx
c0003832:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003836:	b9 0f 00 00 00       	mov    ecx,0xf
c000383b:	83 c0 2c             	add    eax,0x2c
c000383e:	f7 f1                	div    ecx
c0003840:	c1 e0 05             	shl    eax,0x5
c0003843:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003847:	77 70                	ja     c00038b9 <load_xdir+0x12a>
c0003849:	bd 40 00 00 00       	mov    ebp,0x40
c000384e:	31 d2                	xor    edx,edx
c0003850:	89 f0                	mov    eax,esi
c0003852:	e8 06 fe ff ff       	call   c000365d <dir_next>
c0003857:	89 c3                	mov    ebx,eax
c0003859:	83 f8 04             	cmp    eax,0x4
c000385c:	74 5b                	je     c00038b9 <load_xdir+0x12a>
c000385e:	85 c0                	test   eax,eax
c0003860:	75 5c                	jne    c00038be <load_xdir+0x12f>
c0003862:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003865:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003868:	8b 06                	mov    eax,DWORD PTR [esi]
c000386a:	e8 18 eb ff ff       	call   c0002387 <move_window>
c000386f:	89 c3                	mov    ebx,eax
c0003871:	85 c0                	test   eax,eax
c0003873:	75 49                	jne    c00038be <load_xdir+0x12f>
c0003875:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003878:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000387b:	75 3c                	jne    c00038b9 <load_xdir+0x12a>
c000387d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003883:	77 0d                	ja     c0003892 <load_xdir+0x103>
c0003885:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003888:	b9 20 00 00 00       	mov    ecx,0x20
c000388d:	e8 96 e3 ff ff       	call   c0001c28 <mem_cpy>
c0003892:	83 c5 20             	add    ebp,0x20
c0003895:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003899:	77 b3                	ja     c000384e <load_xdir+0xbf>
c000389b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00038a1:	77 1b                	ja     c00038be <load_xdir+0x12f>
c00038a3:	89 f8                	mov    eax,edi
c00038a5:	e8 cd e7 ff ff       	call   c0002077 <xdir_sum>
c00038aa:	89 c1                	mov    ecx,eax
c00038ac:	8d 47 02             	lea    eax,[edi+0x2]
c00038af:	e8 f5 e2 ff ff       	call   c0001ba9 <ld_word>
c00038b4:	66 39 c1             	cmp    cx,ax
c00038b7:	74 05                	je     c00038be <load_xdir+0x12f>
c00038b9:	bb 02 00 00 00       	mov    ebx,0x2
c00038be:	83 c4 1c             	add    esp,0x1c
c00038c1:	89 d8                	mov    eax,ebx
c00038c3:	5b                   	pop    ebx
c00038c4:	5e                   	pop    esi
c00038c5:	5f                   	pop    edi
c00038c6:	5d                   	pop    ebp
c00038c7:	c3                   	ret    

c00038c8 <load_obj_xdir>:
c00038c8:	53                   	push   ebx
c00038c9:	89 c3                	mov    ebx,eax
c00038cb:	83 ec 08             	sub    esp,0x8
c00038ce:	8b 02                	mov    eax,DWORD PTR [edx]
c00038d0:	89 03                	mov    DWORD PTR [ebx],eax
c00038d2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00038d5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00038d8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038db:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038de:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038e1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038e8:	30 c0                	xor    al,al
c00038ea:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038f1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038f4:	89 d8                	mov    eax,ebx
c00038f6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038f9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038fc:	e8 04 f8 ff ff       	call   c0003105 <dir_sdi>
c0003901:	85 c0                	test   eax,eax
c0003903:	75 0b                	jne    c0003910 <load_obj_xdir+0x48>
c0003905:	89 d8                	mov    eax,ebx
c0003907:	83 c4 08             	add    esp,0x8
c000390a:	5b                   	pop    ebx
c000390b:	e9 7f fe ff ff       	jmp    c000378f <load_xdir>
c0003910:	83 c4 08             	add    esp,0x8
c0003913:	5b                   	pop    ebx
c0003914:	c3                   	ret    

c0003915 <dir_read>:
c0003915:	55                   	push   ebp
c0003916:	bd 04 00 00 00       	mov    ebp,0x4
c000391b:	57                   	push   edi
c000391c:	56                   	push   esi
c000391d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003922:	53                   	push   ebx
c0003923:	89 c3                	mov    ebx,eax
c0003925:	83 ec 1c             	sub    esp,0x1c
c0003928:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000392c:	8b 38                	mov    edi,DWORD PTR [eax]
c000392e:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003933:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003936:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003939:	89 c8                	mov    eax,ecx
c000393b:	09 d0                	or     eax,edx
c000393d:	0f 84 25 01 00 00    	je     c0003a68 <dir_read+0x153>
c0003943:	89 f8                	mov    eax,edi
c0003945:	e8 3d ea ff ff       	call   c0002387 <move_window>
c000394a:	89 c5                	mov    ebp,eax
c000394c:	85 c0                	test   eax,eax
c000394e:	0f 85 23 01 00 00    	jne    c0003a77 <dir_read+0x162>
c0003954:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003957:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003959:	84 c9                	test   cl,cl
c000395b:	0f 84 11 01 00 00    	je     c0003a72 <dir_read+0x15d>
c0003961:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003964:	75 48                	jne    c00039ae <dir_read+0x99>
c0003966:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000396b:	74 10                	je     c000397d <dir_read+0x68>
c000396d:	80 f9 83             	cmp    cl,0x83
c0003970:	0f 85 dd 00 00 00    	jne    c0003a53 <dir_read+0x13e>
c0003976:	31 ed                	xor    ebp,ebp
c0003978:	e9 08 01 00 00       	jmp    c0003a85 <dir_read+0x170>
c000397d:	80 f9 85             	cmp    cl,0x85
c0003980:	0f 85 cd 00 00 00    	jne    c0003a53 <dir_read+0x13e>
c0003986:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003989:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000398c:	89 d8                	mov    eax,ebx
c000398e:	e8 fc fd ff ff       	call   c000378f <load_xdir>
c0003993:	89 c5                	mov    ebp,eax
c0003995:	85 c0                	test   eax,eax
c0003997:	0f 85 da 00 00 00    	jne    c0003a77 <dir_read+0x162>
c000399d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00039a0:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00039a3:	83 e0 3f             	and    eax,0x3f
c00039a6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00039a9:	e9 d7 00 00 00       	jmp    c0003a85 <dir_read+0x170>
c00039ae:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00039b1:	83 e0 3f             	and    eax,0x3f
c00039b4:	80 f9 2e             	cmp    cl,0x2e
c00039b7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00039bb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00039be:	0f 84 8a 00 00 00    	je     c0003a4e <dir_read+0x139>
c00039c4:	80 f9 e5             	cmp    cl,0xe5
c00039c7:	0f 84 81 00 00 00    	je     c0003a4e <dir_read+0x139>
c00039cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039d1:	83 e0 1f             	and    eax,0x1f
c00039d4:	83 f8 08             	cmp    eax,0x8
c00039d7:	0f 94 c0             	sete   al
c00039da:	0f b6 c0             	movzx  eax,al
c00039dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039e1:	75 6b                	jne    c0003a4e <dir_read+0x139>
c00039e3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039e8:	75 44                	jne    c0003a2e <dir_read+0x119>
c00039ea:	f6 c1 40             	test   cl,0x40
c00039ed:	74 12                	je     c0003a01 <dir_read+0xec>
c00039ef:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039f2:	83 e1 bf             	and    ecx,0xffffffbf
c00039f5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039fc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039ff:	eb 06                	jmp    c0003a07 <dir_read+0xf2>
c0003a01:	89 f0                	mov    eax,esi
c0003a03:	38 c8                	cmp    al,cl
c0003a05:	75 47                	jne    c0003a4e <dir_read+0x139>
c0003a07:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a0b:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a10:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a13:	75 3e                	jne    c0003a53 <dir_read+0x13e>
c0003a15:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a19:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a1c:	e8 8a e4 ff ff       	call   c0001eab <pick_lfn>
c0003a21:	85 c0                	test   eax,eax
c0003a23:	74 2e                	je     c0003a53 <dir_read+0x13e>
c0003a25:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003a29:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003a2c:	eb 25                	jmp    c0003a53 <dir_read+0x13e>
c0003a2e:	89 f0                	mov    eax,esi
c0003a30:	84 c0                	test   al,al
c0003a32:	75 11                	jne    c0003a45 <dir_read+0x130>
c0003a34:	89 d0                	mov    eax,edx
c0003a36:	e8 2a e6 ff ff       	call   c0002065 <sum_sfn>
c0003a3b:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a3f:	0f 84 31 ff ff ff    	je     c0003976 <dir_read+0x61>
c0003a45:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a4c:	eb 37                	jmp    c0003a85 <dir_read+0x170>
c0003a4e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a53:	31 d2                	xor    edx,edx
c0003a55:	89 d8                	mov    eax,ebx
c0003a57:	e8 01 fc ff ff       	call   c000365d <dir_next>
c0003a5c:	89 c5                	mov    ebp,eax
c0003a5e:	85 c0                	test   eax,eax
c0003a60:	0f 84 cd fe ff ff    	je     c0003933 <dir_read+0x1e>
c0003a66:	eb 0f                	jmp    c0003a77 <dir_read+0x162>
c0003a68:	85 ed                	test   ebp,ebp
c0003a6a:	0f 84 06 ff ff ff    	je     c0003976 <dir_read+0x61>
c0003a70:	eb 05                	jmp    c0003a77 <dir_read+0x162>
c0003a72:	bd 04 00 00 00       	mov    ebp,0x4
c0003a77:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a7e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a85:	83 c4 1c             	add    esp,0x1c
c0003a88:	89 e8                	mov    eax,ebp
c0003a8a:	5b                   	pop    ebx
c0003a8b:	5e                   	pop    esi
c0003a8c:	5f                   	pop    edi
c0003a8d:	5d                   	pop    ebp
c0003a8e:	c3                   	ret    

c0003a8f <dir_alloc>:
c0003a8f:	55                   	push   ebp
c0003a90:	89 d5                	mov    ebp,edx
c0003a92:	57                   	push   edi
c0003a93:	31 d2                	xor    edx,edx
c0003a95:	56                   	push   esi
c0003a96:	53                   	push   ebx
c0003a97:	89 c3                	mov    ebx,eax
c0003a99:	83 ec 0c             	sub    esp,0xc
c0003a9c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a9e:	e8 62 f6 ff ff       	call   c0003105 <dir_sdi>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	75 4e                	jne    c0003af5 <dir_alloc+0x66>
c0003aa7:	31 f6                	xor    esi,esi
c0003aa9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003aac:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003aaf:	89 f8                	mov    eax,edi
c0003ab1:	e8 d1 e8 ff ff       	call   c0002387 <move_window>
c0003ab6:	85 c0                	test   eax,eax
c0003ab8:	75 3b                	jne    c0003af5 <dir_alloc+0x66>
c0003aba:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003abd:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003ac0:	8a 12                	mov    dl,BYTE PTR [edx]
c0003ac2:	75 07                	jne    c0003acb <dir_alloc+0x3c>
c0003ac4:	f7 d2                	not    edx
c0003ac6:	c0 ea 07             	shr    dl,0x7
c0003ac9:	eb 0d                	jmp    c0003ad8 <dir_alloc+0x49>
c0003acb:	84 d2                	test   dl,dl
c0003acd:	0f 94 c1             	sete   cl
c0003ad0:	80 fa e5             	cmp    dl,0xe5
c0003ad3:	0f 94 c2             	sete   dl
c0003ad6:	09 ca                	or     edx,ecx
c0003ad8:	84 d2                	test   dl,dl
c0003ada:	74 07                	je     c0003ae3 <dir_alloc+0x54>
c0003adc:	46                   	inc    esi
c0003add:	39 ee                	cmp    esi,ebp
c0003adf:	75 04                	jne    c0003ae5 <dir_alloc+0x56>
c0003ae1:	eb 1c                	jmp    c0003aff <dir_alloc+0x70>
c0003ae3:	31 f6                	xor    esi,esi
c0003ae5:	ba 01 00 00 00       	mov    edx,0x1
c0003aea:	89 d8                	mov    eax,ebx
c0003aec:	e8 6c fb ff ff       	call   c000365d <dir_next>
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 b4                	je     c0003aa9 <dir_alloc+0x1a>
c0003af5:	83 f8 04             	cmp    eax,0x4
c0003af8:	75 05                	jne    c0003aff <dir_alloc+0x70>
c0003afa:	b8 07 00 00 00       	mov    eax,0x7
c0003aff:	83 c4 0c             	add    esp,0xc
c0003b02:	5b                   	pop    ebx
c0003b03:	5e                   	pop    esi
c0003b04:	5f                   	pop    edi
c0003b05:	5d                   	pop    ebp
c0003b06:	c3                   	ret    

c0003b07 <store_xdir>:
c0003b07:	55                   	push   ebp
c0003b08:	57                   	push   edi
c0003b09:	89 c7                	mov    edi,eax
c0003b0b:	56                   	push   esi
c0003b0c:	53                   	push   ebx
c0003b0d:	83 ec 0c             	sub    esp,0xc
c0003b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b12:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b15:	89 e8                	mov    eax,ebp
c0003b17:	e8 5b e5 ff ff       	call   c0002077 <xdir_sum>
c0003b1c:	0f b7 d0             	movzx  edx,ax
c0003b1f:	8d 45 02             	lea    eax,[ebp+0x2]
c0003b22:	e8 f4 e0 ff ff       	call   c0001c1b <st_word>
c0003b27:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003b2b:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	e8 d0 f5 ff ff       	call   c0003105 <dir_sdi>
c0003b35:	89 c6                	mov    esi,eax
c0003b37:	85 f6                	test   esi,esi
c0003b39:	75 3d                	jne    c0003b78 <store_xdir+0x71>
c0003b3b:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b3e:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b41:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b43:	e8 3f e8 ff ff       	call   c0002387 <move_window>
c0003b48:	89 c6                	mov    esi,eax
c0003b4a:	85 c0                	test   eax,eax
c0003b4c:	75 2a                	jne    c0003b78 <store_xdir+0x71>
c0003b4e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b51:	b9 20 00 00 00       	mov    ecx,0x20
c0003b56:	89 ea                	mov    edx,ebp
c0003b58:	e8 cb e0 ff ff       	call   c0001c28 <mem_cpy>
c0003b5d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b5f:	85 db                	test   ebx,ebx
c0003b61:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b65:	74 11                	je     c0003b78 <store_xdir+0x71>
c0003b67:	31 d2                	xor    edx,edx
c0003b69:	89 f8                	mov    eax,edi
c0003b6b:	83 c5 20             	add    ebp,0x20
c0003b6e:	e8 ea fa ff ff       	call   c000365d <dir_next>
c0003b73:	4b                   	dec    ebx
c0003b74:	89 c6                	mov    esi,eax
c0003b76:	eb bf                	jmp    c0003b37 <store_xdir+0x30>
c0003b78:	89 f0                	mov    eax,esi
c0003b7a:	83 fe 02             	cmp    esi,0x2
c0003b7d:	76 05                	jbe    c0003b84 <store_xdir+0x7d>
c0003b7f:	b8 02 00 00 00       	mov    eax,0x2
c0003b84:	83 c4 0c             	add    esp,0xc
c0003b87:	5b                   	pop    ebx
c0003b88:	5e                   	pop    esi
c0003b89:	5f                   	pop    edi
c0003b8a:	5d                   	pop    ebp
c0003b8b:	c3                   	ret    

c0003b8c <dir_remove>:
c0003b8c:	57                   	push   edi
c0003b8d:	56                   	push   esi
c0003b8e:	53                   	push   ebx
c0003b8f:	89 c3                	mov    ebx,eax
c0003b91:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b94:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b96:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b99:	83 fa ff             	cmp    edx,0xffffffff
c0003b9c:	74 09                	je     c0003ba7 <dir_remove+0x1b>
c0003b9e:	e8 62 f5 ff ff       	call   c0003105 <dir_sdi>
c0003ba3:	85 c0                	test   eax,eax
c0003ba5:	75 41                	jne    c0003be8 <dir_remove+0x5c>
c0003ba7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003baa:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003bad:	89 f0                	mov    eax,esi
c0003baf:	e8 d3 e7 ff ff       	call   c0002387 <move_window>
c0003bb4:	85 c0                	test   eax,eax
c0003bb6:	75 26                	jne    c0003bde <dir_remove+0x52>
c0003bb8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bbb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003bbe:	75 05                	jne    c0003bc5 <dir_remove+0x39>
c0003bc0:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003bc3:	eb 03                	jmp    c0003bc8 <dir_remove+0x3c>
c0003bc5:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003bc8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bcc:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003bcf:	73 17                	jae    c0003be8 <dir_remove+0x5c>
c0003bd1:	31 d2                	xor    edx,edx
c0003bd3:	89 d8                	mov    eax,ebx
c0003bd5:	e8 83 fa ff ff       	call   c000365d <dir_next>
c0003bda:	85 c0                	test   eax,eax
c0003bdc:	74 c9                	je     c0003ba7 <dir_remove+0x1b>
c0003bde:	83 f8 04             	cmp    eax,0x4
c0003be1:	75 05                	jne    c0003be8 <dir_remove+0x5c>
c0003be3:	b8 02 00 00 00       	mov    eax,0x2
c0003be8:	5b                   	pop    ebx
c0003be9:	5e                   	pop    esi
c0003bea:	5f                   	pop    edi
c0003beb:	c3                   	ret    

c0003bec <create_name>:
c0003bec:	55                   	push   ebp
c0003bed:	89 d5                	mov    ebp,edx
c0003bef:	57                   	push   edi
c0003bf0:	89 c7                	mov    edi,eax
c0003bf2:	56                   	push   esi
c0003bf3:	31 f6                	xor    esi,esi
c0003bf5:	53                   	push   ebx
c0003bf6:	83 ec 3c             	sub    esp,0x3c
c0003bf9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bfb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bff:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c08:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c0c:	e8 72 e0 ff ff       	call   c0001c83 <tchar2uni>
c0003c11:	89 c3                	mov    ebx,eax
c0003c13:	83 f8 ff             	cmp    eax,0xffffffff
c0003c16:	75 0a                	jne    c0003c22 <create_name+0x36>
c0003c18:	b8 06 00 00 00       	mov    eax,0x6
c0003c1d:	e9 9e 02 00 00       	jmp    c0003ec0 <create_name+0x2d4>
c0003c22:	3d ff ff 00 00       	cmp    eax,0xffff
c0003c27:	76 0c                	jbe    c0003c35 <create_name+0x49>
c0003c29:	c1 e8 10             	shr    eax,0x10
c0003c2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003c30:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003c34:	46                   	inc    esi
c0003c35:	66 83 fb 1f          	cmp    bx,0x1f
c0003c39:	76 4f                	jbe    c0003c8a <create_name+0x9e>
c0003c3b:	66 83 fb 5c          	cmp    bx,0x5c
c0003c3f:	74 35                	je     c0003c76 <create_name+0x8a>
c0003c41:	66 83 fb 2f          	cmp    bx,0x2f
c0003c45:	74 2f                	je     c0003c76 <create_name+0x8a>
c0003c47:	66 83 fb 7f          	cmp    bx,0x7f
c0003c4b:	77 11                	ja     c0003c5e <create_name+0x72>
c0003c4d:	0f b7 d3             	movzx  edx,bx
c0003c50:	b8 f2 f6 01 c0       	mov    eax,0xc001f6f2
c0003c55:	e8 11 e0 ff ff       	call   c0001c6b <chk_chr>
c0003c5a:	85 c0                	test   eax,eax
c0003c5c:	75 ba                	jne    c0003c18 <create_name+0x2c>
c0003c5e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c64:	77 b2                	ja     c0003c18 <create_name+0x2c>
c0003c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c6a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c6e:	46                   	inc    esi
c0003c6f:	eb 97                	jmp    c0003c08 <create_name+0x1c>
c0003c71:	40                   	inc    eax
c0003c72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c7a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c7c:	80 fa 2f             	cmp    dl,0x2f
c0003c7f:	74 f0                	je     c0003c71 <create_name+0x85>
c0003c81:	80 fa 5c             	cmp    dl,0x5c
c0003c84:	74 eb                	je     c0003c71 <create_name+0x85>
c0003c86:	31 db                	xor    ebx,ebx
c0003c88:	eb 02                	jmp    c0003c8c <create_name+0xa0>
c0003c8a:	b3 04                	mov    bl,0x4
c0003c8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c93:	85 f6                	test   esi,esi
c0003c95:	74 18                	je     c0003caf <create_name+0xc3>
c0003c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c9b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003ca0:	66 83 f8 20          	cmp    ax,0x20
c0003ca4:	74 06                	je     c0003cac <create_name+0xc0>
c0003ca6:	66 83 f8 2e          	cmp    ax,0x2e
c0003caa:	75 03                	jne    c0003caf <create_name+0xc3>
c0003cac:	4e                   	dec    esi
c0003cad:	eb e4                	jmp    c0003c93 <create_name+0xa7>
c0003caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb3:	31 ed                	xor    ebp,ebp
c0003cb5:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003cbb:	85 f6                	test   esi,esi
c0003cbd:	0f 84 55 ff ff ff    	je     c0003c18 <create_name+0x2c>
c0003cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cc7:	8d 55 01             	lea    edx,[ebp+0x1]
c0003cca:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003cce:	66 83 f8 20          	cmp    ax,0x20
c0003cd2:	75 04                	jne    c0003cd8 <create_name+0xec>
c0003cd4:	89 d5                	mov    ebp,edx
c0003cd6:	eb eb                	jmp    c0003cc3 <create_name+0xd7>
c0003cd8:	85 ed                	test   ebp,ebp
c0003cda:	75 06                	jne    c0003ce2 <create_name+0xf6>
c0003cdc:	66 83 f8 2e          	cmp    ax,0x2e
c0003ce0:	75 08                	jne    c0003cea <create_name+0xfe>
c0003ce2:	83 cb 03             	or     ebx,0x3
c0003ce5:	eb 03                	jmp    c0003cea <create_name+0xfe>
c0003ce7:	4e                   	dec    esi
c0003ce8:	74 0c                	je     c0003cf6 <create_name+0x10a>
c0003cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cee:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cf4:	75 f1                	jne    c0003ce7 <create_name+0xfb>
c0003cf6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cfb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cfe:	ba 20 00 00 00       	mov    edx,0x20
c0003d03:	e8 35 df ff ff       	call   c0001c3d <mem_set>
c0003d08:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d10:	31 c9                	xor    ecx,ecx
c0003d12:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d17:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003d26:	66 85 ed             	test   bp,bp
c0003d29:	0f 84 30 01 00 00    	je     c0003e5f <create_name+0x273>
c0003d2f:	66 83 fd 20          	cmp    bp,0x20
c0003d33:	74 10                	je     c0003d45 <create_name+0x159>
c0003d35:	66 83 fd 2e          	cmp    bp,0x2e
c0003d39:	75 13                	jne    c0003d4e <create_name+0x162>
c0003d3b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3f:	0f 84 6b 01 00 00    	je     c0003eb0 <create_name+0x2c4>
c0003d45:	83 cb 03             	or     ebx,0x3
c0003d48:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d4c:	eb c9                	jmp    c0003d17 <create_name+0x12b>
c0003d4e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d52:	73 0b                	jae    c0003d5f <create_name+0x173>
c0003d54:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d58:	75 47                	jne    c0003da1 <create_name+0x1b5>
c0003d5a:	e9 51 01 00 00       	jmp    c0003eb0 <create_name+0x2c4>
c0003d5f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d64:	75 10                	jne    c0003d76 <create_name+0x18a>
c0003d66:	83 cb 03             	or     ebx,0x3
c0003d69:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d71:	e9 e9 00 00 00       	jmp    c0003e5f <create_name+0x273>
c0003d76:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d7a:	74 0d                	je     c0003d89 <create_name+0x19d>
c0003d7c:	83 cb 03             	or     ebx,0x3
c0003d7f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d83:	0f 87 d6 00 00 00    	ja     c0003e5f <create_name+0x273>
c0003d89:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d8e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d92:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d9a:	b9 08 00 00 00       	mov    ecx,0x8
c0003d9f:	eb a7                	jmp    c0003d48 <create_name+0x15c>
c0003da1:	66 83 fd 7f          	cmp    bp,0x7f
c0003da5:	76 68                	jbe    c0003e0f <create_name+0x223>
c0003da7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003dab:	88 da                	mov    dl,bl
c0003dad:	83 ca 02             	or     edx,0x2
c0003db0:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003db4:	50                   	push   eax
c0003db5:	50                   	push   eax
c0003db6:	68 b5 01 00 00       	push   0x1b5
c0003dbb:	55                   	push   ebp
c0003dbc:	e8 48 46 00 00       	call   c0008409 <ff_uni2oem>
c0003dc1:	83 c4 10             	add    esp,0x10
c0003dc4:	89 c5                	mov    ebp,eax
c0003dc6:	a8 80                	test   al,0x80
c0003dc8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003dcc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003dd0:	74 0c                	je     c0003dde <create_name+0x1f2>
c0003dd2:	83 e5 7f             	and    ebp,0x7f
c0003dd5:	0f b6 ad 40 f6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe09c0]
c0003ddc:	eb 2a                	jmp    c0003e08 <create_name+0x21c>
c0003dde:	66 3d ff 00          	cmp    ax,0xff
c0003de2:	76 24                	jbe    c0003e08 <create_name+0x21c>
c0003de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003de8:	48                   	dec    eax
c0003de9:	39 c8                	cmp    eax,ecx
c0003deb:	77 0c                	ja     c0003df9 <create_name+0x20d>
c0003ded:	83 cb 03             	or     ebx,0x3
c0003df0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003df4:	e9 4f ff ff ff       	jmp    c0003d48 <create_name+0x15c>
c0003df9:	89 e8                	mov    eax,ebp
c0003dfb:	88 d3                	mov    bl,dl
c0003dfd:	66 c1 e8 08          	shr    ax,0x8
c0003e01:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e05:	41                   	inc    ecx
c0003e06:	eb 4b                	jmp    c0003e53 <create_name+0x267>
c0003e08:	88 d3                	mov    bl,dl
c0003e0a:	66 85 ed             	test   bp,bp
c0003e0d:	74 19                	je     c0003e28 <create_name+0x23c>
c0003e0f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e13:	0f b7 d5             	movzx  edx,bp
c0003e16:	b8 fb f6 01 c0       	mov    eax,0xc001f6fb
c0003e1b:	e8 4b de ff ff       	call   c0001c6b <chk_chr>
c0003e20:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003e24:	85 c0                	test   eax,eax
c0003e26:	74 0a                	je     c0003e32 <create_name+0x246>
c0003e28:	83 cb 03             	or     ebx,0x3
c0003e2b:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003e30:	eb 21                	jmp    c0003e53 <create_name+0x267>
c0003e32:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003e35:	66 83 f8 19          	cmp    ax,0x19
c0003e39:	77 07                	ja     c0003e42 <create_name+0x256>
c0003e3b:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e40:	eb 11                	jmp    c0003e53 <create_name+0x267>
c0003e42:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e45:	66 83 f8 19          	cmp    ax,0x19
c0003e49:	77 08                	ja     c0003e53 <create_name+0x267>
c0003e4b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e50:	83 ed 20             	sub    ebp,0x20
c0003e53:	89 e8                	mov    eax,ebp
c0003e55:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e59:	41                   	inc    ecx
c0003e5a:	e9 e9 fe ff ff       	jmp    c0003d48 <create_name+0x15c>
c0003e5f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e63:	75 04                	jne    c0003e69 <create_name+0x27d>
c0003e65:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e69:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e6e:	75 05                	jne    c0003e75 <create_name+0x289>
c0003e70:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e75:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e79:	83 e0 0c             	and    eax,0xc
c0003e7c:	3c 0c                	cmp    al,0xc
c0003e7e:	74 0b                	je     c0003e8b <create_name+0x29f>
c0003e80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e84:	83 e0 03             	and    eax,0x3
c0003e87:	3c 03                	cmp    al,0x3
c0003e89:	75 05                	jne    c0003e90 <create_name+0x2a4>
c0003e8b:	83 cb 02             	or     ebx,0x2
c0003e8e:	eb 19                	jmp    c0003ea9 <create_name+0x2bd>
c0003e90:	f6 c3 02             	test   bl,0x2
c0003e93:	75 14                	jne    c0003ea9 <create_name+0x2bd>
c0003e95:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e9a:	74 03                	je     c0003e9f <create_name+0x2b3>
c0003e9c:	83 cb 10             	or     ebx,0x10
c0003e9f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003ea4:	74 03                	je     c0003ea9 <create_name+0x2bd>
c0003ea6:	83 cb 08             	or     ebx,0x8
c0003ea9:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003eac:	31 c0                	xor    eax,eax
c0003eae:	eb 10                	jmp    c0003ec0 <create_name+0x2d4>
c0003eb0:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003eb5:	0f 85 ce fe ff ff    	jne    c0003d89 <create_name+0x19d>
c0003ebb:	e9 a6 fe ff ff       	jmp    c0003d66 <create_name+0x17a>
c0003ec0:	83 c4 3c             	add    esp,0x3c
c0003ec3:	5b                   	pop    ebx
c0003ec4:	5e                   	pop    esi
c0003ec5:	5f                   	pop    edi
c0003ec6:	5d                   	pop    ebp
c0003ec7:	c3                   	ret    

c0003ec8 <xname_sum>:
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c6                	mov    esi,eax
c0003ecc:	51                   	push   ecx
c0003ecd:	31 db                	xor    ebx,ebx
c0003ecf:	83 c6 02             	add    esi,0x2
c0003ed2:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003ed6:	66 85 c0             	test   ax,ax
c0003ed9:	74 1f                	je     c0003efa <xname_sum+0x32>
c0003edb:	83 ec 0c             	sub    esp,0xc
c0003ede:	66 d1 cb             	ror    bx,1
c0003ee1:	50                   	push   eax
c0003ee2:	e8 1e 46 00 00       	call   c0008505 <ff_wtoupper>
c0003ee7:	83 c4 10             	add    esp,0x10
c0003eea:	0f b6 d0             	movzx  edx,al
c0003eed:	66 c1 e8 08          	shr    ax,0x8
c0003ef1:	01 d3                	add    ebx,edx
c0003ef3:	66 d1 cb             	ror    bx,1
c0003ef6:	01 c3                	add    ebx,eax
c0003ef8:	eb d5                	jmp    c0003ecf <xname_sum+0x7>
c0003efa:	89 d8                	mov    eax,ebx
c0003efc:	5a                   	pop    edx
c0003efd:	5b                   	pop    ebx
c0003efe:	5e                   	pop    esi
c0003eff:	c3                   	ret    

c0003f00 <create_xdir>:
c0003f00:	55                   	push   ebp
c0003f01:	b9 40 00 00 00       	mov    ecx,0x40
c0003f06:	57                   	push   edi
c0003f07:	bd 01 00 00 00       	mov    ebp,0x1
c0003f0c:	56                   	push   esi
c0003f0d:	31 ff                	xor    edi,edi
c0003f0f:	53                   	push   ebx
c0003f10:	be 40 00 00 00       	mov    esi,0x40
c0003f15:	89 c3                	mov    ebx,eax
c0003f17:	83 ec 1c             	sub    esp,0x1c
c0003f1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f1e:	31 d2                	xor    edx,edx
c0003f20:	e8 18 dd ff ff       	call   c0001c3d <mem_set>
c0003f25:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003f28:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003f2c:	31 c9                	xor    ecx,ecx
c0003f2e:	8d 46 01             	lea    eax,[esi+0x1]
c0003f31:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003f35:	83 c6 02             	add    esi,0x2
c0003f38:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003f3c:	66 85 ed             	test   bp,bp
c0003f3f:	74 12                	je     c0003f53 <create_xdir+0x53>
c0003f41:	0f b6 c1             	movzx  eax,cl
c0003f44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f48:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f4c:	66 83 fd 01          	cmp    bp,0x1
c0003f50:	80 d9 ff             	sbb    cl,0xff
c0003f53:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f56:	0f b7 d5             	movzx  edx,bp
c0003f59:	83 c6 02             	add    esi,0x2
c0003f5c:	e8 ba dc ff ff       	call   c0001c1b <st_word>
c0003f61:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f67:	75 d3                	jne    c0003f3c <create_xdir+0x3c>
c0003f69:	8d 47 01             	lea    eax,[edi+0x1]
c0003f6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f70:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f74:	0f b6 c1             	movzx  eax,cl
c0003f77:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f7c:	74 07                	je     c0003f85 <create_xdir+0x85>
c0003f7e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f83:	eb a9                	jmp    c0003f2e <create_xdir+0x2e>
c0003f85:	8d 47 02             	lea    eax,[edi+0x2]
c0003f88:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f8b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f8e:	89 d0                	mov    eax,edx
c0003f90:	e8 33 ff ff ff       	call   c0003ec8 <xname_sum>
c0003f95:	83 c4 1c             	add    esp,0x1c
c0003f98:	0f b7 d0             	movzx  edx,ax
c0003f9b:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f9e:	5b                   	pop    ebx
c0003f9f:	5e                   	pop    esi
c0003fa0:	5f                   	pop    edi
c0003fa1:	5d                   	pop    ebp
c0003fa2:	e9 74 dc ff ff       	jmp    c0001c1b <st_word>

c0003fa7 <cmp_lfn>:
c0003fa7:	55                   	push   ebp
c0003fa8:	57                   	push   edi
c0003fa9:	89 d7                	mov    edi,edx
c0003fab:	56                   	push   esi
c0003fac:	53                   	push   ebx
c0003fad:	83 ec 1c             	sub    esp,0x1c
c0003fb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003fb4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003fb7:	e8 ed db ff ff       	call   c0001ba9 <ld_word>
c0003fbc:	66 85 c0             	test   ax,ax
c0003fbf:	74 07                	je     c0003fc8 <cmp_lfn+0x21>
c0003fc1:	31 c0                	xor    eax,eax
c0003fc3:	e9 9a 00 00 00       	jmp    c0004062 <cmp_lfn+0xbb>
c0003fc8:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003fca:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcf:	83 e3 3f             	and    ebx,0x3f
c0003fd2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003fda:	4b                   	dec    ebx
c0003fdb:	6b db 0d             	imul   ebx,ebx,0xd
c0003fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fe2:	0f b6 80 c0 f6 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0940]
c0003fe9:	01 f8                	add    eax,edi
c0003feb:	e8 b9 db ff ff       	call   c0001ba9 <ld_word>
c0003ff0:	66 85 ed             	test   bp,bp
c0003ff3:	89 c6                	mov    esi,eax
c0003ff5:	74 3c                	je     c0004033 <cmp_lfn+0x8c>
c0003ff7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ffd:	77 c2                	ja     c0003fc1 <cmp_lfn+0x1a>
c0003fff:	83 ec 0c             	sub    esp,0xc
c0004002:	0f b7 c0             	movzx  eax,ax
c0004005:	50                   	push   eax
c0004006:	e8 fa 44 00 00       	call   c0008505 <ff_wtoupper>
c000400b:	89 c5                	mov    ebp,eax
c000400d:	8d 43 01             	lea    eax,[ebx+0x1]
c0004010:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004014:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004018:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000401c:	89 04 24             	mov    DWORD PTR [esp],eax
c000401f:	e8 e1 44 00 00       	call   c0008505 <ff_wtoupper>
c0004024:	83 c4 10             	add    esp,0x10
c0004027:	39 c5                	cmp    ebp,eax
c0004029:	75 96                	jne    c0003fc1 <cmp_lfn+0x1a>
c000402b:	89 f5                	mov    ebp,esi
c000402d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004031:	eb 04                	jmp    c0004037 <cmp_lfn+0x90>
c0004033:	66 46                	inc    si
c0004035:	75 8a                	jne    c0003fc1 <cmp_lfn+0x1a>
c0004037:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c000403b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004040:	75 9c                	jne    c0003fde <cmp_lfn+0x37>
c0004042:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004045:	74 16                	je     c000405d <cmp_lfn+0xb6>
c0004047:	66 85 ed             	test   bp,bp
c000404a:	74 11                	je     c000405d <cmp_lfn+0xb6>
c000404c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004050:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004055:	0f 94 c0             	sete   al
c0004058:	0f b6 c0             	movzx  eax,al
c000405b:	eb 05                	jmp    c0004062 <cmp_lfn+0xbb>
c000405d:	b8 01 00 00 00       	mov    eax,0x1
c0004062:	83 c4 1c             	add    esp,0x1c
c0004065:	5b                   	pop    ebx
c0004066:	5e                   	pop    esi
c0004067:	5f                   	pop    edi
c0004068:	5d                   	pop    ebp
c0004069:	c3                   	ret    

c000406a <dir_find>:
c000406a:	55                   	push   ebp
c000406b:	31 d2                	xor    edx,edx
c000406d:	57                   	push   edi
c000406e:	56                   	push   esi
c000406f:	53                   	push   ebx
c0004070:	89 c3                	mov    ebx,eax
c0004072:	83 ec 1c             	sub    esp,0x1c
c0004075:	8b 30                	mov    esi,DWORD PTR [eax]
c0004077:	e8 89 f0 ff ff       	call   c0003105 <dir_sdi>
c000407c:	89 04 24             	mov    DWORD PTR [esp],eax
c000407f:	85 c0                	test   eax,eax
c0004081:	0f 85 9e 01 00 00    	jne    c0004225 <dir_find+0x1bb>
c0004087:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000408a:	0f 85 8d 00 00 00    	jne    c000411d <dir_find+0xb3>
c0004090:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004093:	e8 30 fe ff ff       	call   c0003ec8 <xname_sum>
c0004098:	89 c7                	mov    edi,eax
c000409a:	31 d2                	xor    edx,edx
c000409c:	89 d8                	mov    eax,ebx
c000409e:	e8 72 f8 ff ff       	call   c0003915 <dir_read>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 85 5e 01 00 00    	jne    c0004209 <dir_find+0x19f>
c00040ab:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00040ae:	8d 41 24             	lea    eax,[ecx+0x24]
c00040b1:	e8 f3 da ff ff       	call   c0001ba9 <ld_word>
c00040b6:	66 39 f8             	cmp    ax,di
c00040b9:	75 df                	jne    c000409a <dir_find+0x30>
c00040bb:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c00040be:	31 ed                	xor    ebp,ebp
c00040c0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00040c4:	ba 40 00 00 00       	mov    edx,0x40
c00040c9:	89 e9                	mov    ecx,ebp
c00040cb:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00040cf:	0f 84 42 01 00 00    	je     c0004217 <dir_find+0x1ad>
c00040d5:	f6 c2 1f             	test   dl,0x1f
c00040d8:	75 03                	jne    c00040dd <dir_find+0x73>
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040e1:	89 d0                	mov    eax,edx
c00040e3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040e6:	e8 be da ff ff       	call   c0001ba9 <ld_word>
c00040eb:	83 ec 0c             	sub    esp,0xc
c00040ee:	0f b7 c0             	movzx  eax,ax
c00040f1:	50                   	push   eax
c00040f2:	e8 0e 44 00 00       	call   c0008505 <ff_wtoupper>
c00040f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040fb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040fe:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004102:	89 04 24             	mov    DWORD PTR [esp],eax
c0004105:	e8 fb 43 00 00       	call   c0008505 <ff_wtoupper>
c000410a:	83 c4 10             	add    esp,0x10
c000410d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0004111:	75 87                	jne    c000409a <dir_find+0x30>
c0004113:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004117:	45                   	inc    ebp
c0004118:	83 c2 02             	add    edx,0x2
c000411b:	eb ac                	jmp    c00040c9 <dir_find+0x5f>
c000411d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004124:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0004129:	bf ff ff ff ff       	mov    edi,0xffffffff
c000412e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004131:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004134:	89 f0                	mov    eax,esi
c0004136:	e8 4c e2 ff ff       	call   c0002387 <move_window>
c000413b:	85 c0                	test   eax,eax
c000413d:	0f 85 c6 00 00 00    	jne    c0004209 <dir_find+0x19f>
c0004143:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004146:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004149:	84 c9                	test   cl,cl
c000414b:	0f 84 bd 00 00 00    	je     c000420e <dir_find+0x1a4>
c0004151:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004154:	88 d0                	mov    al,dl
c0004156:	83 e0 3f             	and    eax,0x3f
c0004159:	80 f9 e5             	cmp    cl,0xe5
c000415c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000415f:	0f 84 87 00 00 00    	je     c00041ec <dir_find+0x182>
c0004165:	80 e2 08             	and    dl,0x8
c0004168:	74 06                	je     c0004170 <dir_find+0x106>
c000416a:	3c 0f                	cmp    al,0xf
c000416c:	75 7e                	jne    c00041ec <dir_find+0x182>
c000416e:	eb 04                	jmp    c0004174 <dir_find+0x10a>
c0004170:	3c 0f                	cmp    al,0xf
c0004172:	75 4c                	jne    c00041c0 <dir_find+0x156>
c0004174:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004178:	75 7e                	jne    c00041f8 <dir_find+0x18e>
c000417a:	f6 c1 40             	test   cl,0x40
c000417d:	74 12                	je     c0004191 <dir_find+0x127>
c000417f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004182:	83 e1 bf             	and    ecx,0xffffffbf
c0004185:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004189:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000418c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000418f:	eb 06                	jmp    c0004197 <dir_find+0x12d>
c0004191:	89 f8                	mov    eax,edi
c0004193:	38 c8                	cmp    al,cl
c0004195:	75 5c                	jne    c00041f3 <dir_find+0x189>
c0004197:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000419b:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a0:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00041a3:	75 53                	jne    c00041f8 <dir_find+0x18e>
c00041a5:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00041a9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041ac:	89 ea                	mov    edx,ebp
c00041ae:	e8 f4 fd ff ff       	call   c0003fa7 <cmp_lfn>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	74 41                	je     c00041f8 <dir_find+0x18e>
c00041b7:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c00041bb:	8d 79 ff             	lea    edi,[ecx-0x1]
c00041be:	eb 38                	jmp    c00041f8 <dir_find+0x18e>
c00041c0:	89 f8                	mov    eax,edi
c00041c2:	84 c0                	test   al,al
c00041c4:	75 0d                	jne    c00041d3 <dir_find+0x169>
c00041c6:	89 e8                	mov    eax,ebp
c00041c8:	e8 98 de ff ff       	call   c0002065 <sum_sfn>
c00041cd:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00041d1:	74 52                	je     c0004225 <dir_find+0x1bb>
c00041d3:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00041d7:	75 13                	jne    c00041ec <dir_find+0x182>
c00041d9:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00041dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00041e1:	89 e8                	mov    eax,ebp
c00041e3:	e8 60 da ff ff       	call   c0001c48 <mem_cmp>
c00041e8:	85 c0                	test   eax,eax
c00041ea:	74 39                	je     c0004225 <dir_find+0x1bb>
c00041ec:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041f8:	31 d2                	xor    edx,edx
c00041fa:	89 d8                	mov    eax,ebx
c00041fc:	e8 5c f4 ff ff       	call   c000365d <dir_next>
c0004201:	85 c0                	test   eax,eax
c0004203:	0f 84 25 ff ff ff    	je     c000412e <dir_find+0xc4>
c0004209:	89 04 24             	mov    DWORD PTR [esp],eax
c000420c:	eb 17                	jmp    c0004225 <dir_find+0x1bb>
c000420e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004215:	eb 0e                	jmp    c0004225 <dir_find+0x1bb>
c0004217:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000421a:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000421f:	0f 85 75 fe ff ff    	jne    c000409a <dir_find+0x30>
c0004225:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004228:	83 c4 1c             	add    esp,0x1c
c000422b:	5b                   	pop    ebx
c000422c:	5e                   	pop    esi
c000422d:	5f                   	pop    edi
c000422e:	5d                   	pop    ebp
c000422f:	c3                   	ret    

c0004230 <dir_register>:
c0004230:	55                   	push   ebp
c0004231:	57                   	push   edi
c0004232:	56                   	push   esi
c0004233:	be 06 00 00 00       	mov    esi,0x6
c0004238:	53                   	push   ebx
c0004239:	83 ec 6c             	sub    esp,0x6c
c000423c:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004240:	0f 85 62 02 00 00    	jne    c00044a8 <dir_register+0x278>
c0004246:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004248:	31 ff                	xor    edi,edi
c000424a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000424d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004252:	74 03                	je     c0004257 <dir_register+0x27>
c0004254:	47                   	inc    edi
c0004255:	eb f6                	jmp    c000424d <dir_register+0x1d>
c0004257:	89 c3                	mov    ebx,eax
c0004259:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000425d:	0f 85 e1 00 00 00    	jne    c0004344 <dir_register+0x114>
c0004263:	83 c7 0e             	add    edi,0xe
c0004266:	b9 0f 00 00 00       	mov    ecx,0xf
c000426b:	89 f8                	mov    eax,edi
c000426d:	31 d2                	xor    edx,edx
c000426f:	f7 f1                	div    ecx
c0004271:	8d 50 02             	lea    edx,[eax+0x2]
c0004274:	89 c7                	mov    edi,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 12 f8 ff ff       	call   c0003a8f <dir_alloc>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 21 02 00 00    	jne    c00044a8 <dir_register+0x278>
c0004287:	81 c7 01 00 00 08    	add    edi,0x8000001
c000428d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004290:	c1 e7 05             	shl    edi,0x5
c0004293:	29 f8                	sub    eax,edi
c0004295:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004298:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000429b:	a8 04                	test   al,0x4
c000429d:	0f 84 91 00 00 00    	je     c0004334 <dir_register+0x104>
c00042a3:	83 e0 fb             	and    eax,0xfffffffb
c00042a6:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00042a9:	89 d8                	mov    eax,ebx
c00042ab:	e8 25 ec ff ff       	call   c0002ed5 <fill_first_frag>
c00042b0:	85 c0                	test   eax,eax
c00042b2:	0f 85 ee 01 00 00    	jne    c00044a6 <dir_register+0x276>
c00042b8:	83 c9 ff             	or     ecx,0xffffffff
c00042bb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00042be:	89 d8                	mov    eax,ebx
c00042c0:	e8 db eb ff ff       	call   c0002ea0 <fill_last_frag>
c00042c5:	85 c0                	test   eax,eax
c00042c7:	0f 85 d9 01 00 00    	jne    c00044a6 <dir_register+0x276>
c00042cd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042d1:	74 61                	je     c0004334 <dir_register+0x104>
c00042d3:	89 da                	mov    edx,ebx
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 ea f5 ff ff       	call   c00038c8 <load_obj_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 c0 01 00 00    	jne    c00044a6 <dir_register+0x276>
c00042e6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ea:	31 c9                	xor    ecx,ecx
c00042ec:	c1 e2 09             	shl    edx,0x9
c00042ef:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042f2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042f5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042f8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042fb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fe:	83 c0 38             	add    eax,0x38
c0004301:	e8 1c d9 ff ff       	call   c0001c22 <st_qword>
c0004306:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004309:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000430c:	83 c0 28             	add    eax,0x28
c000430f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004312:	e8 0b d9 ff ff       	call   c0001c22 <st_qword>
c0004317:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000431a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000431d:	83 c8 01             	or     eax,0x1
c0004320:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004323:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004327:	e8 db f7 ff ff       	call   c0003b07 <store_xdir>
c000432c:	85 c0                	test   eax,eax
c000432e:	0f 85 72 01 00 00    	jne    c00044a6 <dir_register+0x276>
c0004334:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004337:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000433a:	e8 c1 fb ff ff       	call   c0003f00 <create_xdir>
c000433f:	e9 64 01 00 00       	jmp    c00044a8 <dir_register+0x278>
c0004344:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004347:	b9 0c 00 00 00       	mov    ecx,0xc
c000434c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004350:	89 c2                	mov    edx,eax
c0004352:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004356:	e8 cd d8 ff ff       	call   c0001c28 <mem_cpy>
c000435b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004360:	74 58                	je     c00043ba <dir_register+0x18a>
c0004362:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004366:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000436e:	83 ec 0c             	sub    esp,0xc
c0004371:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004374:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004378:	8d 54 24 24          	lea    edx,[esp+0x24]
c000437c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004380:	e8 24 dc ff ff       	call   c0001fa9 <gen_numname>
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 de fc ff ff       	call   c000406a <dir_find>
c000438c:	83 c4 10             	add    esp,0x10
c000438f:	89 c6                	mov    esi,eax
c0004391:	85 c0                	test   eax,eax
c0004393:	75 15                	jne    c00043aa <dir_register+0x17a>
c0004395:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004399:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000439e:	75 ce                	jne    c000436e <dir_register+0x13e>
c00043a0:	be 07 00 00 00       	mov    esi,0x7
c00043a5:	e9 fe 00 00 00       	jmp    c00044a8 <dir_register+0x278>
c00043aa:	83 f8 04             	cmp    eax,0x4
c00043ad:	0f 85 f5 00 00 00    	jne    c00044a8 <dir_register+0x278>
c00043b3:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00043b7:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00043ba:	b9 01 00 00 00       	mov    ecx,0x1
c00043bf:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00043c4:	74 0f                	je     c00043d5 <dir_register+0x1a5>
c00043c6:	b9 0d 00 00 00       	mov    ecx,0xd
c00043cb:	8d 47 0c             	lea    eax,[edi+0xc]
c00043ce:	31 d2                	xor    edx,edx
c00043d0:	f7 f1                	div    ecx
c00043d2:	8d 48 01             	lea    ecx,[eax+0x1]
c00043d5:	89 ca                	mov    edx,ecx
c00043d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043db:	89 d8                	mov    eax,ebx
c00043dd:	e8 ad f6 ff ff       	call   c0003a8f <dir_alloc>
c00043e2:	89 c6                	mov    esi,eax
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 bc 00 00 00    	jne    c00044a8 <dir_register+0x278>
c00043ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043f0:	49                   	dec    ecx
c00043f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043f5:	74 6a                	je     c0004461 <dir_register+0x231>
c00043f7:	89 c8                	mov    eax,ecx
c00043f9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043fc:	c1 e0 05             	shl    eax,0x5
c00043ff:	29 c2                	sub    edx,eax
c0004401:	89 d8                	mov    eax,ebx
c0004403:	e8 fd ec ff ff       	call   c0003105 <dir_sdi>
c0004408:	89 c6                	mov    esi,eax
c000440a:	85 c0                	test   eax,eax
c000440c:	0f 85 96 00 00 00    	jne    c00044a8 <dir_register+0x278>
c0004412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004416:	e8 4a dc ff ff       	call   c0002065 <sum_sfn>
c000441b:	0f b6 f8             	movzx  edi,al
c000441e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004421:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004424:	89 e8                	mov    eax,ebp
c0004426:	e8 5c df ff ff       	call   c0002387 <move_window>
c000442b:	89 c6                	mov    esi,eax
c000442d:	85 c0                	test   eax,eax
c000442f:	75 77                	jne    c00044a8 <dir_register+0x278>
c0004431:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004436:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004439:	83 ec 0c             	sub    esp,0xc
c000443c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000443f:	57                   	push   edi
c0004440:	e8 e0 da ff ff       	call   c0001f25 <put_lfn>
c0004445:	31 d2                	xor    edx,edx
c0004447:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444b:	89 d8                	mov    eax,ebx
c000444d:	e8 0b f2 ff ff       	call   c000365d <dir_next>
c0004452:	83 c4 10             	add    esp,0x10
c0004455:	89 c6                	mov    esi,eax
c0004457:	85 c0                	test   eax,eax
c0004459:	75 4d                	jne    c00044a8 <dir_register+0x278>
c000445b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000445f:	75 bd                	jne    c000441e <dir_register+0x1ee>
c0004461:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004464:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004467:	89 e8                	mov    eax,ebp
c0004469:	e8 19 df ff ff       	call   c0002387 <move_window>
c000446e:	89 c6                	mov    esi,eax
c0004470:	85 c0                	test   eax,eax
c0004472:	75 34                	jne    c00044a8 <dir_register+0x278>
c0004474:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004477:	b9 20 00 00 00       	mov    ecx,0x20
c000447c:	31 d2                	xor    edx,edx
c000447e:	e8 ba d7 ff ff       	call   c0001c3d <mem_set>
c0004483:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004486:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000448a:	b9 0b 00 00 00       	mov    ecx,0xb
c000448f:	e8 94 d7 ff ff       	call   c0001c28 <mem_cpy>
c0004494:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004497:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000449a:	83 e0 18             	and    eax,0x18
c000449d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00044a0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044a4:	eb 02                	jmp    c00044a8 <dir_register+0x278>
c00044a6:	89 c6                	mov    esi,eax
c00044a8:	83 c4 6c             	add    esp,0x6c
c00044ab:	89 f0                	mov    eax,esi
c00044ad:	5b                   	pop    ebx
c00044ae:	5e                   	pop    esi
c00044af:	5f                   	pop    edi
c00044b0:	5d                   	pop    ebp
c00044b1:	c3                   	ret    

c00044b2 <sync_fs>:
c00044b2:	56                   	push   esi
c00044b3:	53                   	push   ebx
c00044b4:	53                   	push   ebx
c00044b5:	89 c3                	mov    ebx,eax
c00044b7:	e8 37 de ff ff       	call   c00022f3 <sync_window>
c00044bc:	85 c0                	test   eax,eax
c00044be:	0f 85 b1 00 00 00    	jne    c0004575 <sync_fs+0xc3>
c00044c4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00044c7:	0f 85 8e 00 00 00    	jne    c000455b <sync_fs+0xa9>
c00044cd:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00044d1:	0f 85 84 00 00 00    	jne    c000455b <sync_fs+0xa9>
c00044d7:	b9 00 02 00 00       	mov    ecx,0x200
c00044dc:	8d 73 54             	lea    esi,[ebx+0x54]
c00044df:	31 d2                	xor    edx,edx
c00044e1:	89 f0                	mov    eax,esi
c00044e3:	e8 55 d7 ff ff       	call   c0001c3d <mem_set>
c00044e8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044ee:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044f3:	e8 23 d7 ff ff       	call   c0001c1b <st_word>
c00044f8:	ba 52 52 61 41       	mov    edx,0x41615252
c00044fd:	89 f0                	mov    eax,esi
c00044ff:	e8 1b d7 ff ff       	call   c0001c1f <st_dword>
c0004504:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000450a:	ba 72 72 41 61       	mov    edx,0x61417272
c000450f:	e8 0b d7 ff ff       	call   c0001c1f <st_dword>
c0004514:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004517:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000451d:	e8 fd d6 ff ff       	call   c0001c1f <st_dword>
c0004522:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004525:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000452b:	e8 ef d6 ff ff       	call   c0001c1f <st_dword>
c0004530:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004533:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004536:	83 c0 01             	add    eax,0x1
c0004539:	83 d2 00             	adc    edx,0x0
c000453c:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c000453f:	83 ec 0c             	sub    esp,0xc
c0004542:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004545:	6a 01                	push   0x1
c0004547:	52                   	push   edx
c0004548:	50                   	push   eax
c0004549:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000454d:	56                   	push   esi
c000454e:	50                   	push   eax
c000454f:	e8 20 d6 ff ff       	call   c0001b74 <disk_write>
c0004554:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004558:	83 c4 20             	add    esp,0x20
c000455b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000455f:	51                   	push   ecx
c0004560:	6a 00                	push   0x0
c0004562:	6a 00                	push   0x0
c0004564:	50                   	push   eax
c0004565:	e8 20 d6 ff ff       	call   c0001b8a <disk_ioctl>
c000456a:	83 c4 10             	add    esp,0x10
c000456d:	85 c0                	test   eax,eax
c000456f:	0f 95 c0             	setne  al
c0004572:	0f b6 c0             	movzx  eax,al
c0004575:	5a                   	pop    edx
c0004576:	5b                   	pop    ebx
c0004577:	5e                   	pop    esi
c0004578:	c3                   	ret    

c0004579 <create_partition>:
c0004579:	55                   	push   ebp
c000457a:	0f b6 c0             	movzx  eax,al
c000457d:	57                   	push   edi
c000457e:	56                   	push   esi
c000457f:	53                   	push   ebx
c0004580:	83 ec 60             	sub    esp,0x60
c0004583:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004587:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000458b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000458f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004593:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004597:	50                   	push   eax
c0004598:	6a 01                	push   0x1
c000459a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000459e:	e8 e7 d5 ff ff       	call   c0001b8a <disk_ioctl>
c00045a3:	83 c4 10             	add    esp,0x10
c00045a6:	85 c0                	test   eax,eax
c00045a8:	74 0a                	je     c00045b4 <create_partition+0x3b>
c00045aa:	b8 01 00 00 00       	mov    eax,0x1
c00045af:	e9 67 05 00 00       	jmp    c0004b1b <create_partition+0x5a2>
c00045b4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00045b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00045bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00045c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00045c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00045c9:	0f 86 ed 03 00 00    	jbe    c00049bc <create_partition+0x443>
c00045cf:	83 c0 df             	add    eax,0xffffffdf
c00045d2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00045da:	83 d2 ff             	adc    edx,0xffffffff
c00045dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045ed:	83 c0 bd             	add    eax,0xffffffbd
c00045f0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045f7:	83 d2 ff             	adc    edx,0xffffffff
c00045fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045fe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004602:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000460a:	be 22 00 00 00       	mov    esi,0x22
c000460f:	31 ff                	xor    edi,edi
c0004611:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004619:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004621:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004629:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000462d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004633:	75 0e                	jne    c0004643 <create_partition+0xca>
c0004635:	b9 00 02 00 00       	mov    ecx,0x200
c000463a:	31 d2                	xor    edx,edx
c000463c:	89 d8                	mov    eax,ebx
c000463e:	e8 fa d5 ff ff       	call   c0001c3d <mem_set>
c0004643:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004647:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004652:	0f 84 23 01 00 00    	je     c000477b <create_partition+0x202>
c0004658:	89 f0                	mov    eax,esi
c000465a:	89 fa                	mov    edx,edi
c000465c:	05 ff 07 00 00       	add    eax,0x7ff
c0004661:	83 d2 00             	adc    edx,0x0
c0004664:	89 c1                	mov    ecx,eax
c0004666:	89 d7                	mov    edi,edx
c0004668:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000466e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004672:	89 ce                	mov    esi,ecx
c0004674:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004678:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000467c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004680:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	89 04 24             	mov    DWORD PTR [esp],eax
c000468a:	b8 64 00 00 00       	mov    eax,0x64
c000468f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004692:	b8 00 00 00 00       	mov    eax,0x0
c0004697:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000469b:	72 41                	jb     c00046de <create_partition+0x165>
c000469d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00046a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046a5:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c00046a9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00046ae:	01 c1                	add    ecx,eax
c00046b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00046b4:	f7 24 24             	mul    DWORD PTR [esp]
c00046b7:	6a 00                	push   0x0
c00046b9:	01 ca                	add    edx,ecx
c00046bb:	6a 64                	push   0x64
c00046bd:	52                   	push   edx
c00046be:	50                   	push   eax
c00046bf:	e8 78 9f 01 00       	call   c001e63c <__udivdi3>
c00046c4:	83 c4 10             	add    esp,0x10
c00046c7:	05 ff 07 00 00       	add    eax,0x7ff
c00046cc:	83 d2 00             	adc    edx,0x0
c00046cf:	89 c1                	mov    ecx,eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046de:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046e5:	01 f0                	add    eax,esi
c00046e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046eb:	11 fa                	adc    edx,edi
c00046ed:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046f1:	19 d1                	sbb    ecx,edx
c00046f3:	73 2e                	jae    c0004723 <create_partition+0x1aa>
c00046f5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046f9:	89 f8                	mov    eax,edi
c00046fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004702:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004706:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000470e:	73 6b                	jae    c000477b <create_partition+0x202>
c0004710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004714:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004718:	29 f0                	sub    eax,esi
c000471a:	19 fa                	sbb    edx,edi
c000471c:	89 04 24             	mov    DWORD PTR [esp],eax
c000471f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004727:	0b 04 24             	or     eax,DWORD PTR [esp]
c000472a:	74 4f                	je     c000477b <create_partition+0x202>
c000472c:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000472f:	b9 10 00 00 00       	mov    ecx,0x10
c0004734:	ba d0 f6 01 c0       	mov    edx,0xc001f6d0
c0004739:	e8 ea d4 ff ff       	call   c0001c28 <mem_cpy>
c000473e:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004742:	b9 10 00 00 00       	mov    ecx,0x10
c0004747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000474b:	e8 2c db ff ff       	call   c000227c <make_rand>
c0004750:	89 f2                	mov    edx,esi
c0004752:	89 f9                	mov    ecx,edi
c0004754:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004758:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000475c:	e8 c1 d4 ff ff       	call   c0001c22 <st_qword>
c0004761:	03 34 24             	add    esi,DWORD PTR [esp]
c0004764:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004768:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000476c:	89 f2                	mov    edx,esi
c000476e:	89 f9                	mov    ecx,edi
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	83 d1 ff             	adc    ecx,0xffffffff
c0004776:	e8 a7 d4 ff ff       	call   c0001c22 <st_qword>
c000477b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000477f:	83 e8 80             	sub    eax,0xffffff80
c0004782:	89 c5                	mov    ebp,eax
c0004784:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004788:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000478e:	75 6b                	jne    c00047fb <create_partition+0x282>
c0004790:	45                   	inc    ebp
c0004791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004795:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000479a:	e8 39 da ff ff       	call   c00021d8 <crc32>
c000479f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00047a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00047a9:	75 e5                	jne    c0004790 <create_partition+0x217>
c00047ab:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00047af:	31 d2                	xor    edx,edx
c00047b1:	83 ec 0c             	sub    esp,0xc
c00047b4:	c1 ed 09             	shr    ebp,0x9
c00047b7:	6a 01                	push   0x1
c00047b9:	8d 45 02             	lea    eax,[ebp+0x2]
c00047bc:	52                   	push   edx
c00047bd:	50                   	push   eax
c00047be:	53                   	push   ebx
c00047bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047c3:	e8 ac d3 ff ff       	call   c0001b74 <disk_write>
c00047c8:	83 c4 20             	add    esp,0x20
c00047cb:	85 c0                	test   eax,eax
c00047cd:	0f 85 d7 fd ff ff    	jne    c00045aa <create_partition+0x31>
c00047d3:	83 ec 0c             	sub    esp,0xc
c00047d6:	31 d2                	xor    edx,edx
c00047d8:	6a 01                	push   0x1
c00047da:	89 e8                	mov    eax,ebp
c00047dc:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047e0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047e4:	52                   	push   edx
c00047e5:	50                   	push   eax
c00047e6:	53                   	push   ebx
c00047e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047eb:	e8 84 d3 ff ff       	call   c0001b74 <disk_write>
c00047f0:	83 c4 20             	add    esp,0x20
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 af fd ff ff    	jne    c00045aa <create_partition+0x31>
c00047fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004803:	3d 00 40 00 00       	cmp    eax,0x4000
c0004808:	74 0d                	je     c0004817 <create_partition+0x29e>
c000480a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000480e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004812:	e9 12 fe ff ff       	jmp    c0004629 <create_partition+0xb0>
c0004817:	31 d2                	xor    edx,edx
c0004819:	b9 00 02 00 00       	mov    ecx,0x200
c000481e:	89 d8                	mov    eax,ebx
c0004820:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004823:	e8 15 d4 ff ff       	call   c0001c3d <mem_set>
c0004828:	8d 7b 48             	lea    edi,[ebx+0x48]
c000482b:	b9 10 00 00 00       	mov    ecx,0x10
c0004830:	ba c0 f5 01 c0       	mov    edx,0xc001f5c0
c0004835:	89 d8                	mov    eax,ebx
c0004837:	e8 ec d3 ff ff       	call   c0001c28 <mem_cpy>
c000483c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004840:	8d 43 58             	lea    eax,[ebx+0x58]
c0004843:	f7 d2                	not    edx
c0004845:	e8 d5 d3 ff ff       	call   c0001c1f <st_dword>
c000484a:	8d 43 18             	lea    eax,[ebx+0x18]
c000484d:	31 c9                	xor    ecx,ecx
c000484f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004852:	ba 01 00 00 00       	mov    edx,0x1
c0004857:	e8 c6 d3 ff ff       	call   c0001c22 <st_qword>
c000485c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004860:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004864:	83 c2 ff             	add    edx,0xffffffff
c0004867:	89 e8                	mov    eax,ebp
c0004869:	83 d1 ff             	adc    ecx,0xffffffff
c000486c:	e8 b1 d3 ff ff       	call   c0001c22 <st_qword>
c0004871:	31 c9                	xor    ecx,ecx
c0004873:	8d 43 28             	lea    eax,[ebx+0x28]
c0004876:	ba 22 00 00 00       	mov    edx,0x22
c000487b:	e8 a2 d3 ff ff       	call   c0001c22 <st_qword>
c0004880:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004884:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004888:	83 c2 de             	add    edx,0xffffffde
c000488b:	8d 43 30             	lea    eax,[ebx+0x30]
c000488e:	83 d1 ff             	adc    ecx,0xffffffff
c0004891:	31 f6                	xor    esi,esi
c0004893:	e8 8a d3 ff ff       	call   c0001c22 <st_qword>
c0004898:	8d 43 54             	lea    eax,[ebx+0x54]
c000489b:	ba 80 00 00 00       	mov    edx,0x80
c00048a0:	e8 7a d3 ff ff       	call   c0001c1f <st_dword>
c00048a5:	8d 43 50             	lea    eax,[ebx+0x50]
c00048a8:	ba 80 00 00 00       	mov    edx,0x80
c00048ad:	e8 6d d3 ff ff       	call   c0001c1f <st_dword>
c00048b2:	ba 02 00 00 00       	mov    edx,0x2
c00048b7:	89 f8                	mov    eax,edi
c00048b9:	e8 61 d3 ff ff       	call   c0001c1f <st_dword>
c00048be:	8d 53 38             	lea    edx,[ebx+0x38]
c00048c1:	b9 10 00 00 00       	mov    ecx,0x10
c00048c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00048ca:	e8 ad d9 ff ff       	call   c000227c <make_rand>
c00048cf:	83 c8 ff             	or     eax,0xffffffff
c00048d2:	46                   	inc    esi
c00048d3:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00048d8:	e8 fb d8 ff ff       	call   c00021d8 <crc32>
c00048dd:	83 fe 5c             	cmp    esi,0x5c
c00048e0:	75 f0                	jne    c00048d2 <create_partition+0x359>
c00048e2:	f7 d0                	not    eax
c00048e4:	8d 73 10             	lea    esi,[ebx+0x10]
c00048e7:	89 c2                	mov    edx,eax
c00048e9:	89 f0                	mov    eax,esi
c00048eb:	e8 2f d3 ff ff       	call   c0001c1f <st_dword>
c00048f0:	83 ec 0c             	sub    esp,0xc
c00048f3:	6a 01                	push   0x1
c00048f5:	6a 00                	push   0x0
c00048f7:	6a 01                	push   0x1
c00048f9:	53                   	push   ebx
c00048fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048fe:	e8 71 d2 ff ff       	call   c0001b74 <disk_write>
c0004903:	83 c4 20             	add    esp,0x20
c0004906:	85 c0                	test   eax,eax
c0004908:	0f 85 9c fc ff ff    	jne    c00045aa <create_partition+0x31>
c000490e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004912:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004916:	83 c2 ff             	add    edx,0xffffffff
c0004919:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000491c:	83 d1 ff             	adc    ecx,0xffffffff
c000491f:	e8 fe d2 ff ff       	call   c0001c22 <st_qword>
c0004924:	ba 01 00 00 00       	mov    edx,0x1
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	89 e8                	mov    eax,ebp
c000492d:	e8 f0 d2 ff ff       	call   c0001c22 <st_qword>
c0004932:	89 f8                	mov    eax,edi
c0004934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004938:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000493c:	31 ff                	xor    edi,edi
c000493e:	e8 df d2 ff ff       	call   c0001c22 <st_qword>
c0004943:	89 f0                	mov    eax,esi
c0004945:	31 d2                	xor    edx,edx
c0004947:	e8 d3 d2 ff ff       	call   c0001c1f <st_dword>
c000494c:	83 c8 ff             	or     eax,0xffffffff
c000494f:	47                   	inc    edi
c0004950:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004955:	e8 7e d8 ff ff       	call   c00021d8 <crc32>
c000495a:	83 ff 5c             	cmp    edi,0x5c
c000495d:	75 f0                	jne    c000494f <create_partition+0x3d6>
c000495f:	f7 d0                	not    eax
c0004961:	89 c2                	mov    edx,eax
c0004963:	89 f0                	mov    eax,esi
c0004965:	e8 b5 d2 ff ff       	call   c0001c1f <st_dword>
c000496a:	83 ec 0c             	sub    esp,0xc
c000496d:	6a 01                	push   0x1
c000496f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004973:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004977:	83 c0 ff             	add    eax,0xffffffff
c000497a:	83 d2 ff             	adc    edx,0xffffffff
c000497d:	52                   	push   edx
c000497e:	50                   	push   eax
c000497f:	53                   	push   ebx
c0004980:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004984:	e8 eb d1 ff ff       	call   c0001b74 <disk_write>
c0004989:	83 c4 20             	add    esp,0x20
c000498c:	85 c0                	test   eax,eax
c000498e:	0f 85 16 fc ff ff    	jne    c00045aa <create_partition+0x31>
c0004994:	31 d2                	xor    edx,edx
c0004996:	89 d8                	mov    eax,ebx
c0004998:	b9 00 02 00 00       	mov    ecx,0x200
c000499d:	e8 9b d2 ff ff       	call   c0001c3d <mem_set>
c00049a2:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c00049a8:	b9 10 00 00 00       	mov    ecx,0x10
c00049ad:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c00049b2:	e8 71 d2 ff ff       	call   c0001c28 <mem_cpy>
c00049b7:	e9 21 01 00 00       	jmp    c0004add <create_partition+0x564>
c00049bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c0:	b9 05 00 00 00       	mov    ecx,0x5
c00049c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00049c8:	bf 08 00 00 00       	mov    edi,0x8
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	31 d2                	xor    edx,edx
c00049d1:	0f b6 f0             	movzx  esi,al
c00049d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d7:	f7 f6                	div    esi
c00049d9:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049de:	76 0a                	jbe    c00049ea <create_partition+0x471>
c00049e0:	d1 e7                	shl    edi,1
c00049e2:	49                   	dec    ecx
c00049e3:	75 e8                	jne    c00049cd <create_partition+0x454>
c00049e5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ea:	b9 00 02 00 00       	mov    ecx,0x200
c00049ef:	31 d2                	xor    edx,edx
c00049f1:	89 d8                	mov    eax,ebx
c00049f3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049f9:	e8 3f d2 ff ff       	call   c0001c3d <mem_set>
c00049fe:	b9 64 00 00 00       	mov    ecx,0x64
c0004a03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a06:	31 d2                	xor    edx,edx
c0004a08:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a10:	f7 f1                	div    ecx
c0004a12:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a17:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a1b:	89 f8                	mov    eax,edi
c0004a1d:	0f b6 c0             	movzx  eax,al
c0004a20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004a24:	e9 80 00 00 00       	jmp    c0004aa9 <create_partition+0x530>
c0004a29:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004a2c:	29 cf                	sub    edi,ecx
c0004a2e:	89 ca                	mov    edx,ecx
c0004a30:	89 f0                	mov    eax,esi
c0004a32:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a37:	e8 e3 d1 ff ff       	call   c0001c1f <st_dword>
c0004a3c:	8d 46 04             	lea    eax,[esi+0x4]
c0004a3f:	89 fa                	mov    edx,edi
c0004a41:	83 c6 10             	add    esi,0x10
c0004a44:	e8 d6 d1 ff ff       	call   c0001c1f <st_dword>
c0004a49:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a52:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a56:	89 c8                	mov    eax,ecx
c0004a58:	01 f9                	add    ecx,edi
c0004a5a:	f7 f5                	div    ebp
c0004a5c:	89 d5                	mov    ebp,edx
c0004a5e:	31 d2                	xor    edx,edx
c0004a60:	45                   	inc    ebp
c0004a61:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a65:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a68:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a6b:	89 c2                	mov    edx,eax
c0004a6d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a70:	c1 ea 02             	shr    edx,0x2
c0004a73:	83 e2 c0             	and    edx,0xffffffc0
c0004a76:	09 ea                	or     edx,ebp
c0004a78:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a7d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a80:	31 d2                	xor    edx,edx
c0004a82:	f7 f5                	div    ebp
c0004a84:	89 d7                	mov    edi,edx
c0004a86:	31 d2                	xor    edx,edx
c0004a88:	47                   	inc    edi
c0004a89:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a8d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a90:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a93:	89 c5                	mov    ebp,eax
c0004a95:	c1 ed 02             	shr    ebp,0x2
c0004a98:	83 e5 c0             	and    ebp,0xffffffc0
c0004a9b:	09 ef                	or     edi,ebp
c0004a9d:	89 fa                	mov    edx,edi
c0004a9f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004aa2:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004aa7:	74 34                	je     c0004add <create_partition+0x564>
c0004aa9:	85 c9                	test   ecx,ecx
c0004aab:	74 30                	je     c0004add <create_partition+0x564>
c0004aad:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004ab0:	76 2b                	jbe    c0004add <create_partition+0x564>
c0004ab2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ab6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004aba:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004abd:	83 ff 64             	cmp    edi,0x64
c0004ac0:	76 4b                	jbe    c0004b0d <create_partition+0x594>
c0004ac2:	89 f8                	mov    eax,edi
c0004ac4:	01 c8                	add    eax,ecx
c0004ac6:	0f 82 5d ff ff ff    	jb     c0004a29 <create_partition+0x4b0>
c0004acc:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004acf:	0f 87 54 ff ff ff    	ja     c0004a29 <create_partition+0x4b0>
c0004ad5:	85 ff                	test   edi,edi
c0004ad7:	0f 85 51 ff ff ff    	jne    c0004a2e <create_partition+0x4b5>
c0004add:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ae3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ae8:	e8 2e d1 ff ff       	call   c0001c1b <st_word>
c0004aed:	83 ec 0c             	sub    esp,0xc
c0004af0:	6a 01                	push   0x1
c0004af2:	6a 00                	push   0x0
c0004af4:	6a 00                	push   0x0
c0004af6:	53                   	push   ebx
c0004af7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004afb:	e8 74 d0 ff ff       	call   c0001b74 <disk_write>
c0004b00:	83 c4 20             	add    esp,0x20
c0004b03:	85 c0                	test   eax,eax
c0004b05:	0f 95 c0             	setne  al
c0004b08:	0f b6 c0             	movzx  eax,al
c0004b0b:	eb 0e                	jmp    c0004b1b <create_partition+0x5a2>
c0004b0d:	74 07                	je     c0004b16 <create_partition+0x59d>
c0004b0f:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b14:	eb ac                	jmp    c0004ac2 <create_partition+0x549>
c0004b16:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b19:	eb a7                	jmp    c0004ac2 <create_partition+0x549>
c0004b1b:	83 c4 5c             	add    esp,0x5c
c0004b1e:	5b                   	pop    ebx
c0004b1f:	5e                   	pop    esi
c0004b20:	5f                   	pop    edi
c0004b21:	5d                   	pop    ebp
c0004b22:	c3                   	ret    

c0004b23 <get_fileinfo>:
c0004b23:	55                   	push   ebp
c0004b24:	57                   	push   edi
c0004b25:	56                   	push   esi
c0004b26:	53                   	push   ebx
c0004b27:	83 ec 1c             	sub    esp,0x1c
c0004b2a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b2c:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004b30:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004b34:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004b37:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004b3a:	0f 84 dc 01 00 00    	je     c0004d1c <get_fileinfo+0x1f9>
c0004b40:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b43:	75 0f                	jne    c0004b54 <get_fileinfo+0x31>
c0004b45:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b48:	83 c4 1c             	add    esp,0x1c
c0004b4b:	5b                   	pop    ebx
c0004b4c:	5e                   	pop    esi
c0004b4d:	5f                   	pop    edi
c0004b4e:	5d                   	pop    ebp
c0004b4f:	e9 58 d5 ff ff       	jmp    c00020ac <get_xfileinfo>
c0004b54:	89 d3                	mov    ebx,edx
c0004b56:	89 c6                	mov    esi,eax
c0004b58:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b5c:	74 6a                	je     c0004bc8 <get_fileinfo+0xa5>
c0004b5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b66:	31 ed                	xor    ebp,ebp
c0004b68:	31 ff                	xor    edi,edi
c0004b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b72:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b75:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b79:	66 85 d2             	test   dx,dx
c0004b7c:	74 3e                	je     c0004bbc <get_fileinfo+0x99>
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	75 0c                	jne    c0004b8f <get_fileinfo+0x6c>
c0004b83:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b89:	66 3d ff 07          	cmp    ax,0x7ff
c0004b8d:	76 22                	jbe    c0004bb1 <get_fileinfo+0x8e>
c0004b8f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b94:	89 e8                	mov    eax,ebp
c0004b96:	29 f9                	sub    ecx,edi
c0004b98:	c1 e0 10             	shl    eax,0x10
c0004b9b:	09 d0                	or     eax,edx
c0004b9d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004ba1:	e8 a3 d1 ff ff       	call   c0001d49 <put_utf>
c0004ba6:	84 c0                	test   al,al
c0004ba8:	74 10                	je     c0004bba <get_fileinfo+0x97>
c0004baa:	0f b6 c0             	movzx  eax,al
c0004bad:	31 d2                	xor    edx,edx
c0004baf:	01 c7                	add    edi,eax
c0004bb1:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004bb6:	89 d5                	mov    ebp,edx
c0004bb8:	eb b0                	jmp    c0004b6a <get_fileinfo+0x47>
c0004bba:	31 ff                	xor    edi,edi
c0004bbc:	66 85 ed             	test   bp,bp
c0004bbf:	74 02                	je     c0004bc3 <get_fileinfo+0xa0>
c0004bc1:	31 ff                	xor    edi,edi
c0004bc3:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004bc8:	31 ff                	xor    edi,edi
c0004bca:	31 c9                	xor    ecx,ecx
c0004bcc:	83 f9 0a             	cmp    ecx,0xa
c0004bcf:	0f 87 ad 00 00 00    	ja     c0004c82 <get_fileinfo+0x15f>
c0004bd5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004bdb:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004bdf:	66 83 fa 20          	cmp    dx,0x20
c0004be3:	0f 84 92 00 00 00    	je     c0004c7b <get_fileinfo+0x158>
c0004be9:	66 83 fa 05          	cmp    dx,0x5
c0004bed:	75 05                	jne    c0004bf4 <get_fileinfo+0xd1>
c0004bef:	ba e5 00 00 00       	mov    edx,0xe5
c0004bf4:	83 ff 0b             	cmp    edi,0xb
c0004bf7:	77 0b                	ja     c0004c04 <get_fileinfo+0xe1>
c0004bf9:	83 fd 09             	cmp    ebp,0x9
c0004bfc:	75 06                	jne    c0004c04 <get_fileinfo+0xe1>
c0004bfe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c03:	47                   	inc    edi
c0004c04:	0f b7 c2             	movzx  eax,dx
c0004c07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c0b:	e8 6d d0 ff ff       	call   c0001c7d <dbc_1st>
c0004c10:	85 c0                	test   eax,eax
c0004c12:	74 2f                	je     c0004c43 <get_fileinfo+0x120>
c0004c14:	83 fd 08             	cmp    ebp,0x8
c0004c17:	74 2a                	je     c0004c43 <get_fileinfo+0x120>
c0004c19:	83 fd 0b             	cmp    ebp,0xb
c0004c1c:	74 25                	je     c0004c43 <get_fileinfo+0x120>
c0004c1e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c21:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004c25:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004c29:	e8 52 d0 ff ff       	call   c0001c80 <dbc_2nd>
c0004c2e:	85 c0                	test   eax,eax
c0004c30:	74 11                	je     c0004c43 <get_fileinfo+0x120>
c0004c32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004c3b:	c1 e2 08             	shl    edx,0x8
c0004c3e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c41:	09 c2                	or     edx,eax
c0004c43:	0f b7 d2             	movzx  edx,dx
c0004c46:	50                   	push   eax
c0004c47:	50                   	push   eax
c0004c48:	68 b5 01 00 00       	push   0x1b5
c0004c4d:	52                   	push   edx
c0004c4e:	e8 46 38 00 00       	call   c0008499 <ff_oem2uni>
c0004c53:	83 c4 10             	add    esp,0x10
c0004c56:	66 85 c0             	test   ax,ax
c0004c59:	75 04                	jne    c0004c5f <get_fileinfo+0x13c>
c0004c5b:	31 ff                	xor    edi,edi
c0004c5d:	eb 23                	jmp    c0004c82 <get_fileinfo+0x15f>
c0004c5f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c64:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c68:	29 f9                	sub    ecx,edi
c0004c6a:	0f b7 c0             	movzx  eax,ax
c0004c6d:	e8 d7 d0 ff ff       	call   c0001d49 <put_utf>
c0004c72:	84 c0                	test   al,al
c0004c74:	74 e5                	je     c0004c5b <get_fileinfo+0x138>
c0004c76:	0f b6 c0             	movzx  eax,al
c0004c79:	01 c7                	add    edi,eax
c0004c7b:	89 e9                	mov    ecx,ebp
c0004c7d:	e9 4a ff ff ff       	jmp    c0004bcc <get_fileinfo+0xa9>
c0004c82:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c87:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c8b:	75 54                	jne    c0004ce1 <get_fileinfo+0x1be>
c0004c8d:	85 ff                	test   edi,edi
c0004c8f:	75 0b                	jne    c0004c9c <get_fileinfo+0x179>
c0004c91:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c95:	ba 01 00 00 00       	mov    edx,0x1
c0004c9a:	eb 33                	jmp    c0004ccf <get_fileinfo+0x1ac>
c0004c9c:	b1 08                	mov    cl,0x8
c0004c9e:	31 d2                	xor    edx,edx
c0004ca0:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004ca6:	84 c0                	test   al,al
c0004ca8:	74 25                	je     c0004ccf <get_fileinfo+0x1ac>
c0004caa:	66 83 f8 2e          	cmp    ax,0x2e
c0004cae:	74 16                	je     c0004cc6 <get_fileinfo+0x1a3>
c0004cb0:	8d 78 bf             	lea    edi,[eax-0x41]
c0004cb3:	66 83 ff 19          	cmp    di,0x19
c0004cb7:	77 0f                	ja     c0004cc8 <get_fileinfo+0x1a5>
c0004cb9:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004cbc:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004cbf:	74 07                	je     c0004cc8 <get_fileinfo+0x1a5>
c0004cc1:	83 c0 20             	add    eax,0x20
c0004cc4:	eb 02                	jmp    c0004cc8 <get_fileinfo+0x1a5>
c0004cc6:	b1 10                	mov    cl,0x10
c0004cc8:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ccc:	42                   	inc    edx
c0004ccd:	eb d1                	jmp    c0004ca0 <get_fileinfo+0x17d>
c0004ccf:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004cd4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004cdb:	75 04                	jne    c0004ce1 <get_fileinfo+0x1be>
c0004cdd:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ce1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ce7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cea:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ced:	83 c0 1c             	add    eax,0x1c
c0004cf0:	e8 c1 ce ff ff       	call   c0001bb6 <ld_dword>
c0004cf5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cfc:	89 03                	mov    DWORD PTR [ebx],eax
c0004cfe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d01:	83 c0 16             	add    eax,0x16
c0004d04:	e8 a0 ce ff ff       	call   c0001ba9 <ld_word>
c0004d09:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d0d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d10:	83 c0 18             	add    eax,0x18
c0004d13:	e8 91 ce ff ff       	call   c0001ba9 <ld_word>
c0004d18:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d1c:	83 c4 1c             	add    esp,0x1c
c0004d1f:	5b                   	pop    ebx
c0004d20:	5e                   	pop    esi
c0004d21:	5f                   	pop    edi
c0004d22:	5d                   	pop    ebp
c0004d23:	c3                   	ret    

c0004d24 <ld_clust.isra.0>:
c0004d24:	56                   	push   esi
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	53                   	push   ebx
c0004d28:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	e8 77 ce ff ff       	call   c0001ba9 <ld_word>
c0004d32:	0f b7 c8             	movzx  ecx,ax
c0004d35:	89 f0                	mov    eax,esi
c0004d37:	3c 03                	cmp    al,0x3
c0004d39:	75 0d                	jne    c0004d48 <ld_clust.isra.0+0x24>
c0004d3b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d3e:	e8 66 ce ff ff       	call   c0001ba9 <ld_word>
c0004d43:	c1 e0 10             	shl    eax,0x10
c0004d46:	09 c1                	or     ecx,eax
c0004d48:	89 c8                	mov    eax,ecx
c0004d4a:	5b                   	pop    ebx
c0004d4b:	5e                   	pop    esi
c0004d4c:	c3                   	ret    

c0004d4d <st_clust.isra.1>:
c0004d4d:	56                   	push   esi
c0004d4e:	89 c6                	mov    esi,eax
c0004d50:	53                   	push   ebx
c0004d51:	89 d3                	mov    ebx,edx
c0004d53:	0f b7 d1             	movzx  edx,cx
c0004d56:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d59:	e8 bd ce ff ff       	call   c0001c1b <st_word>
c0004d5e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d61:	75 0f                	jne    c0004d72 <st_clust.isra.1+0x25>
c0004d63:	c1 e9 10             	shr    ecx,0x10
c0004d66:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d69:	89 ca                	mov    edx,ecx
c0004d6b:	5b                   	pop    ebx
c0004d6c:	5e                   	pop    esi
c0004d6d:	e9 a9 ce ff ff       	jmp    c0001c1b <st_word>
c0004d72:	5b                   	pop    ebx
c0004d73:	5e                   	pop    esi
c0004d74:	c3                   	ret    

c0004d75 <init_alloc_info.isra.2>:
c0004d75:	56                   	push   esi
c0004d76:	53                   	push   ebx
c0004d77:	89 c6                	mov    esi,eax
c0004d79:	89 d3                	mov    ebx,edx
c0004d7b:	51                   	push   ecx
c0004d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d7e:	83 c0 34             	add    eax,0x34
c0004d81:	e8 30 ce ff ff       	call   c0001bb6 <ld_dword>
c0004d86:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d89:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d8b:	83 c0 38             	add    eax,0x38
c0004d8e:	e8 3b ce ff ff       	call   c0001bce <ld_qword>
c0004d93:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d96:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d99:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d9b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d9e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da5:	83 e0 02             	and    eax,0x2
c0004da8:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004dab:	5b                   	pop    ebx
c0004dac:	5b                   	pop    ebx
c0004dad:	5e                   	pop    esi
c0004dae:	c3                   	ret    

c0004daf <follow_path>:
c0004daf:	56                   	push   esi
c0004db0:	53                   	push   ebx
c0004db1:	89 c3                	mov    ebx,eax
c0004db3:	83 ec 14             	sub    esp,0x14
c0004db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004dba:	8b 30                	mov    esi,DWORD PTR [eax]
c0004dbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dc0:	8a 10                	mov    dl,BYTE PTR [eax]
c0004dc2:	80 fa 5c             	cmp    dl,0x5c
c0004dc5:	75 07                	jne    c0004dce <follow_path+0x1f>
c0004dc7:	40                   	inc    eax
c0004dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004dcc:	eb ee                	jmp    c0004dbc <follow_path+0xd>
c0004dce:	80 fa 2f             	cmp    dl,0x2f
c0004dd1:	74 f4                	je     c0004dc7 <follow_path+0x18>
c0004dd3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004dda:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004de1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004de4:	77 52                	ja     c0004e38 <follow_path+0x89>
c0004de6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dea:	31 d2                	xor    edx,edx
c0004dec:	89 d8                	mov    eax,ebx
c0004dee:	e8 12 e3 ff ff       	call   c0003105 <dir_sdi>
c0004df3:	eb 7c                	jmp    c0004e71 <follow_path+0xc2>
c0004df5:	89 d8                	mov    eax,ebx
c0004df7:	e8 6e f2 ff ff       	call   c000406a <dir_find>
c0004dfc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dff:	85 c0                	test   eax,eax
c0004e01:	75 46                	jne    c0004e49 <follow_path+0x9a>
c0004e03:	80 e2 04             	and    dl,0x4
c0004e06:	75 69                	jne    c0004e71 <follow_path+0xc2>
c0004e08:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e0c:	74 5e                	je     c0004e6c <follow_path+0xbd>
c0004e0e:	8a 06                	mov    al,BYTE PTR [esi]
c0004e10:	3c 04                	cmp    al,0x4
c0004e12:	75 41                	jne    c0004e55 <follow_path+0xa6>
c0004e14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e17:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e1b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e21:	30 c0                	xor    al,al
c0004e23:	09 d0                	or     eax,edx
c0004e25:	89 da                	mov    edx,ebx
c0004e27:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004e2a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004e2d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004e30:	8d 46 10             	lea    eax,[esi+0x10]
c0004e33:	e8 3d ff ff ff       	call   c0004d75 <init_alloc_info.isra.2>
c0004e38:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e3c:	89 d8                	mov    eax,ebx
c0004e3e:	e8 a9 ed ff ff       	call   c0003bec <create_name>
c0004e43:	85 c0                	test   eax,eax
c0004e45:	74 ae                	je     c0004df5 <follow_path+0x46>
c0004e47:	eb 28                	jmp    c0004e71 <follow_path+0xc2>
c0004e49:	83 f8 04             	cmp    eax,0x4
c0004e4c:	75 23                	jne    c0004e71 <follow_path+0xc2>
c0004e4e:	80 e2 04             	and    dl,0x4
c0004e51:	74 19                	je     c0004e6c <follow_path+0xbd>
c0004e53:	eb 1c                	jmp    c0004e71 <follow_path+0xc2>
c0004e55:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e58:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e5e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e62:	e8 bd fe ff ff       	call   c0004d24 <ld_clust.isra.0>
c0004e67:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e6a:	eb cc                	jmp    c0004e38 <follow_path+0x89>
c0004e6c:	b8 05 00 00 00       	mov    eax,0x5
c0004e71:	83 c4 14             	add    esp,0x14
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <f_mount>:
c0004e77:	53                   	push   ebx
c0004e78:	83 ec 18             	sub    esp,0x18
c0004e7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e8b:	e8 fb d2 ff ff       	call   c000218b <get_ldnumber>
c0004e90:	89 c2                	mov    edx,eax
c0004e92:	b8 0b 00 00 00       	mov    eax,0xb
c0004e97:	85 d2                	test   edx,edx
c0004e99:	78 39                	js     c0004ed4 <f_mount+0x5d>
c0004e9b:	8b 04 95 c0 b8 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4740]
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	74 03                	je     c0004ea9 <f_mount+0x32>
c0004ea6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ead:	85 c0                	test   eax,eax
c0004eaf:	74 03                	je     c0004eb4 <f_mount+0x3d>
c0004eb1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb8:	89 04 95 c0 b8 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4740],eax
c0004ebf:	31 c0                	xor    eax,eax
c0004ec1:	84 db                	test   bl,bl
c0004ec3:	74 0f                	je     c0004ed4 <f_mount+0x5d>
c0004ec5:	31 c9                	xor    ecx,ecx
c0004ec7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 65 d7 ff ff       	call   c0002639 <mount_volume>
c0004ed4:	83 c4 18             	add    esp,0x18
c0004ed7:	5b                   	pop    ebx
c0004ed8:	c3                   	ret    

c0004ed9 <f_open>:
c0004ed9:	55                   	push   ebp
c0004eda:	bd 09 00 00 00       	mov    ebp,0x9
c0004edf:	57                   	push   edi
c0004ee0:	56                   	push   esi
c0004ee1:	53                   	push   ebx
c0004ee2:	83 ec 7c             	sub    esp,0x7c
c0004ee5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eec:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ef3:	85 db                	test   ebx,ebx
c0004ef5:	0f 84 10 04 00 00    	je     c000530b <f_open+0x432>
c0004efb:	89 fe                	mov    esi,edi
c0004efd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f01:	83 e6 3f             	and    esi,0x3f
c0004f04:	89 f0                	mov    eax,esi
c0004f06:	0f b6 c8             	movzx  ecx,al
c0004f09:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f10:	e8 24 d7 ff ff       	call   c0002639 <mount_volume>
c0004f15:	89 c5                	mov    ebp,eax
c0004f17:	85 c0                	test   eax,eax
c0004f19:	0f 85 e6 03 00 00    	jne    c0005305 <f_open+0x42c>
c0004f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f23:	bd 11 00 00 00       	mov    ebp,0x11
c0004f28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	68 60 04 00 00       	push   0x460
c0004f34:	e8 a3 34 00 00       	call   c00083dc <ff_memalloc>
c0004f39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004f3d:	83 c4 10             	add    esp,0x10
c0004f40:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f45:	0f 84 c0 03 00 00    	je     c000530b <f_open+0x432>
c0004f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f53:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f59:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f5c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f5f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f6a:	e8 40 fe ff ff       	call   c0004daf <follow_path>
c0004f6f:	89 c5                	mov    ebp,eax
c0004f71:	85 c0                	test   eax,eax
c0004f73:	75 0c                	jne    c0004f81 <f_open+0xa8>
c0004f75:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f7a:	79 05                	jns    c0004f81 <f_open+0xa8>
c0004f7c:	bd 06 00 00 00       	mov    ebp,0x6
c0004f81:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f87:	0f 84 84 01 00 00    	je     c0005111 <f_open+0x238>
c0004f8d:	85 ed                	test   ebp,ebp
c0004f8f:	74 20                	je     c0004fb1 <f_open+0xd8>
c0004f91:	83 fd 04             	cmp    ebp,0x4
c0004f94:	0f 85 58 03 00 00    	jne    c00052f2 <f_open+0x419>
c0004f9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f9e:	83 ce 08             	or     esi,0x8
c0004fa1:	e8 8a f2 ff ff       	call   c0004230 <dir_register>
c0004fa6:	89 c5                	mov    ebp,eax
c0004fa8:	85 c0                	test   eax,eax
c0004faa:	74 2f                	je     c0004fdb <f_open+0x102>
c0004fac:	e9 41 03 00 00       	jmp    c00052f2 <f_open+0x419>
c0004fb1:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb6:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004fbb:	0f 85 31 03 00 00    	jne    c00052f2 <f_open+0x419>
c0004fc1:	bd 08 00 00 00       	mov    ebp,0x8
c0004fc6:	f7 c7 04 00 00 00    	test   edi,0x4
c0004fcc:	0f 85 20 03 00 00    	jne    c00052f2 <f_open+0x419>
c0004fd2:	83 e7 08             	and    edi,0x8
c0004fd5:	0f 84 65 01 00 00    	je     c0005140 <f_open+0x267>
c0004fdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fdf:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe1:	3c 04                	cmp    al,0x4
c0004fe3:	0f 85 97 00 00 00    	jne    c0005080 <f_open+0x1a7>
c0004fe9:	8d 42 10             	lea    eax,[edx+0x10]
c0004fec:	89 13                	mov    DWORD PTR [ebx],edx
c0004fee:	89 da                	mov    edx,ebx
c0004ff0:	e8 80 fd ff ff       	call   c0004d75 <init_alloc_info.isra.2>
c0004ff5:	31 d2                	xor    edx,edx
c0004ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ffb:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005000:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005003:	83 c0 02             	add    eax,0x2
c0005006:	e8 32 cc ff ff       	call   c0001c3d <mem_set>
c000500b:	b9 1a 00 00 00       	mov    ecx,0x1a
c0005010:	31 d2                	xor    edx,edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005019:	83 c0 26             	add    eax,0x26
c000501c:	e8 1c cc ff ff       	call   c0001c3d <mem_set>
c0005021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005025:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005028:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c000502c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005031:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005034:	83 c0 08             	add    eax,0x8
c0005037:	e8 e3 cb ff ff       	call   c0001c1f <st_dword>
c000503c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005040:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005043:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005047:	8d 44 24 24          	lea    eax,[esp+0x24]
c000504b:	e8 b7 ea ff ff       	call   c0003b07 <store_xdir>
c0005050:	89 c5                	mov    ebp,eax
c0005052:	85 c0                	test   eax,eax
c0005054:	0f 85 98 02 00 00    	jne    c00052f2 <f_open+0x419>
c000505a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000505d:	85 d2                	test   edx,edx
c000505f:	0f 84 db 00 00 00    	je     c0005140 <f_open+0x267>
c0005065:	31 c9                	xor    ecx,ecx
c0005067:	89 d8                	mov    eax,ebx
c0005069:	e8 8e e3 ff ff       	call   c00033fc <remove_chain>
c000506e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005072:	89 c5                	mov    ebp,eax
c0005074:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005077:	48                   	dec    eax
c0005078:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000507b:	e9 b8 00 00 00       	jmp    c0005138 <f_open+0x25f>
c0005080:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005084:	89 ea                	mov    edx,ebp
c0005086:	e8 99 fc ff ff       	call   c0004d24 <ld_clust.isra.0>
c000508b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005090:	89 c7                	mov    edi,eax
c0005092:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005095:	e8 85 cb ff ff       	call   c0001c1f <st_dword>
c000509a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000509e:	31 c9                	xor    ecx,ecx
c00050a0:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00050a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a8:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00050ac:	e8 9c fc ff ff       	call   c0004d4d <st_clust.isra.1>
c00050b1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	83 c0 1c             	add    eax,0x1c
c00050ba:	e8 60 cb ff ff       	call   c0001c1f <st_dword>
c00050bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c3:	85 ff                	test   edi,edi
c00050c5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050c9:	74 75                	je     c0005140 <f_open+0x267>
c00050cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050cf:	31 c9                	xor    ecx,ecx
c00050d1:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00050d4:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00050d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050df:	89 fa                	mov    edx,edi
c00050e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e5:	e8 12 e3 ff ff       	call   c00033fc <remove_chain>
c00050ea:	89 c5                	mov    ebp,eax
c00050ec:	85 c0                	test   eax,eax
c00050ee:	0f 85 fe 01 00 00    	jne    c00052f2 <f_open+0x419>
c00050f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	4f                   	dec    edi
c0005101:	e8 81 d2 ff ff       	call   c0002387 <move_window>
c0005106:	89 c5                	mov    ebp,eax
c0005108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000510c:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000510f:	eb 27                	jmp    c0005138 <f_open+0x25f>
c0005111:	85 ed                	test   ebp,ebp
c0005113:	0f 85 d9 01 00 00    	jne    c00052f2 <f_open+0x419>
c0005119:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000511d:	bd 04 00 00 00       	mov    ebp,0x4
c0005122:	a8 10                	test   al,0x10
c0005124:	0f 85 c8 01 00 00    	jne    c00052f2 <f_open+0x419>
c000512a:	83 e7 02             	and    edi,0x2
c000512d:	74 11                	je     c0005140 <f_open+0x267>
c000512f:	bd 07 00 00 00       	mov    ebp,0x7
c0005134:	a8 01                	test   al,0x1
c0005136:	eb 02                	jmp    c000513a <f_open+0x261>
c0005138:	85 ed                	test   ebp,ebp
c000513a:	0f 85 b2 01 00 00    	jne    c00052f2 <f_open+0x419>
c0005140:	f7 c6 08 00 00 00    	test   esi,0x8
c0005146:	74 03                	je     c000514b <f_open+0x272>
c0005148:	83 ce 40             	or     esi,0x40
c000514b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000514f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005152:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005155:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005158:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000515b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000515f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005162:	8a 02                	mov    al,BYTE PTR [edx]
c0005164:	3c 04                	cmp    al,0x4
c0005166:	75 2a                	jne    c0005192 <f_open+0x2b9>
c0005168:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000516c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005171:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005178:	30 c0                	xor    al,al
c000517a:	09 c8                	or     eax,ecx
c000517c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000517f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005183:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005186:	8d 42 10             	lea    eax,[edx+0x10]
c0005189:	89 da                	mov    edx,ebx
c000518b:	e8 e5 fb ff ff       	call   c0004d75 <init_alloc_info.isra.2>
c0005190:	eb 1c                	jmp    c00051ae <f_open+0x2d5>
c0005192:	89 fa                	mov    edx,edi
c0005194:	e8 8b fb ff ff       	call   c0004d24 <ld_clust.isra.0>
c0005199:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000519c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000519f:	e8 12 ca ff ff       	call   c0001bb6 <ld_dword>
c00051a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00051ab:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00051ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b2:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c00051b9:	89 03                	mov    DWORD PTR [ebx],eax
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00051c1:	b9 00 02 00 00       	mov    ecx,0x200
c00051c6:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00051ca:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00051ce:	89 f0                	mov    eax,esi
c00051d0:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00051d7:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00051da:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051e1:	8d 43 50             	lea    eax,[ebx+0x50]
c00051e4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051eb:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051f6:	e8 42 ca ff ff       	call   c0001c3d <mem_set>
c00051fb:	83 e6 20             	and    esi,0x20
c00051fe:	75 07                	jne    c0005207 <f_open+0x32e>
c0005200:	31 ed                	xor    ebp,ebp
c0005202:	e9 eb 00 00 00       	jmp    c00052f2 <f_open+0x419>
c0005207:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000520a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000520d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005211:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005219:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000521d:	74 e1                	je     c0005200 <f_open+0x327>
c000521f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005223:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005227:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000522a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000522d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005231:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005234:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005238:	31 ff                	xor    edi,edi
c000523a:	c1 e5 09             	shl    ebp,0x9
c000523d:	89 ee                	mov    esi,ebp
c000523f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005243:	89 f8                	mov    eax,edi
c0005245:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005249:	73 22                	jae    c000526d <f_open+0x394>
c000524b:	89 d8                	mov    eax,ebx
c000524d:	e8 bd dc ff ff       	call   c0002f0f <get_fat>
c0005252:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005256:	89 c2                	mov    edx,eax
c0005258:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	76 10                	jbe    c0005271 <f_open+0x398>
c0005261:	83 f8 ff             	cmp    eax,0xffffffff
c0005264:	75 d9                	jne    c000523f <f_open+0x366>
c0005266:	bd 01 00 00 00       	mov    ebp,0x1
c000526b:	eb 09                	jmp    c0005276 <f_open+0x39d>
c000526d:	31 ed                	xor    ebp,ebp
c000526f:	eb 05                	jmp    c0005276 <f_open+0x39d>
c0005271:	bd 02 00 00 00       	mov    ebp,0x2
c0005276:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005279:	85 ed                	test   ebp,ebp
c000527b:	75 75                	jne    c00052f2 <f_open+0x419>
c000527d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005281:	25 ff 01 00 00       	and    eax,0x1ff
c0005286:	0f 84 74 ff ff ff    	je     c0005200 <f_open+0x327>
c000528c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005290:	bd 02 00 00 00       	mov    ebp,0x2
c0005295:	89 c8                	mov    eax,ecx
c0005297:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000529b:	e8 a2 cb ff ff       	call   c0001e42 <clst2sect>
c00052a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00052a4:	89 d7                	mov    edi,edx
c00052a6:	09 c7                	or     edi,eax
c00052a8:	74 48                	je     c00052f2 <f_open+0x419>
c00052aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00052ae:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00052b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00052ba:	0f ac fe 09          	shrd   esi,edi,0x9
c00052be:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00052c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00052c6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00052c9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00052cd:	83 ec 0c             	sub    esp,0xc
c00052d0:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00052d3:	6a 01                	push   0x1
c00052d5:	52                   	push   edx
c00052d6:	50                   	push   eax
c00052d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00052db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052df:	50                   	push   eax
c00052e0:	e8 79 c8 ff ff       	call   c0001b5e <disk_read>
c00052e5:	83 c4 20             	add    esp,0x20
c00052e8:	85 c0                	test   eax,eax
c00052ea:	0f 95 c0             	setne  al
c00052ed:	0f b6 c0             	movzx  eax,al
c00052f0:	89 c5                	mov    ebp,eax
c00052f2:	83 ec 0c             	sub    esp,0xc
c00052f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052f9:	e8 f4 30 00 00       	call   c00083f2 <ff_memfree>
c00052fe:	83 c4 10             	add    esp,0x10
c0005301:	85 ed                	test   ebp,ebp
c0005303:	74 06                	je     c000530b <f_open+0x432>
c0005305:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000530b:	83 c4 7c             	add    esp,0x7c
c000530e:	89 e8                	mov    eax,ebp
c0005310:	5b                   	pop    ebx
c0005311:	5e                   	pop    esi
c0005312:	5f                   	pop    edi
c0005313:	5d                   	pop    ebp
c0005314:	c3                   	ret    

c0005315 <f_read>:
c0005315:	55                   	push   ebp
c0005316:	57                   	push   edi
c0005317:	56                   	push   esi
c0005318:	53                   	push   ebx
c0005319:	83 ec 2c             	sub    esp,0x2c
c000531c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005320:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005324:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000532a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000532e:	89 d8                	mov    eax,ebx
c0005330:	e8 77 cf ff ff       	call   c00022ac <validate>
c0005335:	89 c5                	mov    ebp,eax
c0005337:	85 c0                	test   eax,eax
c0005339:	0f 85 4c 02 00 00    	jne    c000558b <f_read+0x276>
c000533f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005343:	85 ed                	test   ebp,ebp
c0005345:	0f 85 40 02 00 00    	jne    c000558b <f_read+0x276>
c000534b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000534f:	0f 84 31 02 00 00    	je     c0005586 <f_read+0x271>
c0005355:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005358:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000535b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000535e:	bf 00 00 00 00       	mov    edi,0x0
c0005363:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005366:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000536a:	89 d1                	mov    ecx,edx
c000536c:	19 f9                	sbb    ecx,edi
c000536e:	0f 83 cf 00 00 00    	jae    c0005443 <f_read+0x12e>
c0005374:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005378:	e9 c6 00 00 00       	jmp    c0005443 <f_read+0x12e>
c000537d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005380:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005383:	89 d0                	mov    eax,edx
c0005385:	25 ff 01 00 00       	and    eax,0x1ff
c000538a:	0f 85 c9 01 00 00    	jne    c0005559 <f_read+0x244>
c0005390:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005394:	89 d6                	mov    esi,edx
c0005396:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000539a:	89 cf                	mov    edi,ecx
c000539c:	48                   	dec    eax
c000539d:	0f ac fe 09          	shrd   esi,edi,0x9
c00053a1:	21 f0                	and    eax,esi
c00053a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a7:	0f 84 a6 00 00 00    	je     c0005453 <f_read+0x13e>
c00053ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053b1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00053b4:	89 c8                	mov    eax,ecx
c00053b6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00053b9:	e8 84 ca ff ff       	call   c0001e42 <clst2sect>
c00053be:	89 d7                	mov    edi,edx
c00053c0:	09 c7                	or     edi,eax
c00053c2:	0f 84 b4 00 00 00    	je     c000547c <f_read+0x167>
c00053c8:	31 ff                	xor    edi,edi
c00053ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00053ce:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00053d1:	01 c6                	add    esi,eax
c00053d3:	11 d7                	adc    edi,edx
c00053d5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00053dd:	0f 86 fd 00 00 00    	jbe    c00054e0 <f_read+0x1cb>
c00053e3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053eb:	c1 e8 09             	shr    eax,0x9
c00053ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00053f1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053f5:	03 14 24             	add    edx,DWORD PTR [esp]
c00053f8:	39 c2                	cmp    edx,eax
c00053fa:	76 07                	jbe    c0005403 <f_read+0xee>
c00053fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005400:	89 04 24             	mov    DWORD PTR [esp],eax
c0005403:	83 ec 0c             	sub    esp,0xc
c0005406:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000540a:	57                   	push   edi
c000540b:	56                   	push   esi
c000540c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005410:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005414:	50                   	push   eax
c0005415:	e8 44 c7 ff ff       	call   c0001b5e <disk_read>
c000541a:	83 c4 20             	add    esp,0x20
c000541d:	85 c0                	test   eax,eax
c000541f:	75 6e                	jne    c000548f <f_read+0x17a>
c0005421:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005425:	78 7e                	js     c00054a5 <f_read+0x190>
c0005427:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000542a:	c1 e6 09             	shl    esi,0x9
c000542d:	31 ff                	xor    edi,edi
c000542f:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005433:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005437:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000543b:	01 30                	add    DWORD PTR [eax],esi
c000543d:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005440:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005448:	0f 85 2f ff ff ff    	jne    c000537d <f_read+0x68>
c000544e:	e9 38 01 00 00       	jmp    c000558b <f_read+0x276>
c0005453:	89 c8                	mov    eax,ecx
c0005455:	09 d0                	or     eax,edx
c0005457:	75 05                	jne    c000545e <f_read+0x149>
c0005459:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000545c:	eb 19                	jmp    c0005477 <f_read+0x162>
c000545e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005462:	74 09                	je     c000546d <f_read+0x158>
c0005464:	89 d8                	mov    eax,ebx
c0005466:	e8 f8 c9 ff ff       	call   c0001e63 <clmt_clust>
c000546b:	eb 0a                	jmp    c0005477 <f_read+0x162>
c000546d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005470:	89 d8                	mov    eax,ebx
c0005472:	e8 98 da ff ff       	call   c0002f0f <get_fat>
c0005477:	83 f8 01             	cmp    eax,0x1
c000547a:	77 0e                	ja     c000548a <f_read+0x175>
c000547c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005480:	bd 02 00 00 00       	mov    ebp,0x2
c0005485:	e9 01 01 00 00       	jmp    c000558b <f_read+0x276>
c000548a:	83 f8 ff             	cmp    eax,0xffffffff
c000548d:	75 0e                	jne    c000549d <f_read+0x188>
c000548f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005493:	bd 01 00 00 00       	mov    ebp,0x1
c0005498:	e9 ee 00 00 00       	jmp    c000558b <f_read+0x276>
c000549d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00054a0:	e9 08 ff ff ff       	jmp    c00053ad <f_read+0x98>
c00054a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054ab:	29 f0                	sub    eax,esi
c00054ad:	19 fa                	sbb    edx,edi
c00054af:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00054b2:	89 d7                	mov    edi,edx
c00054b4:	ba 00 00 00 00       	mov    edx,0x0
c00054b9:	89 f9                	mov    ecx,edi
c00054bb:	19 d1                	sbb    ecx,edx
c00054bd:	0f 83 64 ff ff ff    	jae    c0005427 <f_read+0x112>
c00054c3:	89 c7                	mov    edi,eax
c00054c5:	8d 53 50             	lea    edx,[ebx+0x50]
c00054c8:	c1 e7 09             	shl    edi,0x9
c00054cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054cf:	b9 00 02 00 00       	mov    ecx,0x200
c00054d4:	01 f8                	add    eax,edi
c00054d6:	e8 4d c7 ff ff       	call   c0001c28 <mem_cpy>
c00054db:	e9 47 ff ff ff       	jmp    c0005427 <f_read+0x112>
c00054e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054e3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054ed:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054f1:	75 05                	jne    c00054f8 <f_read+0x1e3>
c00054f3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054f6:	74 5b                	je     c0005553 <f_read+0x23e>
c00054f8:	8d 43 50             	lea    eax,[ebx+0x50]
c00054fb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005503:	79 2a                	jns    c000552f <f_read+0x21a>
c0005505:	83 ec 0c             	sub    esp,0xc
c0005508:	6a 01                	push   0x1
c000550a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000550e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005512:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005516:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000551a:	50                   	push   eax
c000551b:	e8 54 c6 ff ff       	call   c0001b74 <disk_write>
c0005520:	83 c4 20             	add    esp,0x20
c0005523:	85 c0                	test   eax,eax
c0005525:	0f 85 64 ff ff ff    	jne    c000548f <f_read+0x17a>
c000552b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000552f:	83 ec 0c             	sub    esp,0xc
c0005532:	6a 01                	push   0x1
c0005534:	57                   	push   edi
c0005535:	56                   	push   esi
c0005536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000553a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000553e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005542:	50                   	push   eax
c0005543:	e8 16 c6 ff ff       	call   c0001b5e <disk_read>
c0005548:	83 c4 20             	add    esp,0x20
c000554b:	85 c0                	test   eax,eax
c000554d:	0f 85 3c ff ff ff    	jne    c000548f <f_read+0x17a>
c0005553:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005556:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005559:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000555c:	ba 00 02 00 00       	mov    edx,0x200
c0005561:	25 ff 01 00 00       	and    eax,0x1ff
c0005566:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000556a:	29 c2                	sub    edx,eax
c000556c:	39 d6                	cmp    esi,edx
c000556e:	76 02                	jbe    c0005572 <f_read+0x25d>
c0005570:	89 d6                	mov    esi,edx
c0005572:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005576:	89 f1                	mov    ecx,esi
c0005578:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000557c:	e8 a7 c6 ff ff       	call   c0001c28 <mem_cpy>
c0005581:	e9 a7 fe ff ff       	jmp    c000542d <f_read+0x118>
c0005586:	bd 07 00 00 00       	mov    ebp,0x7
c000558b:	83 c4 2c             	add    esp,0x2c
c000558e:	89 e8                	mov    eax,ebp
c0005590:	5b                   	pop    ebx
c0005591:	5e                   	pop    esi
c0005592:	5f                   	pop    edi
c0005593:	5d                   	pop    ebp
c0005594:	c3                   	ret    

c0005595 <f_write>:
c0005595:	55                   	push   ebp
c0005596:	57                   	push   edi
c0005597:	56                   	push   esi
c0005598:	53                   	push   ebx
c0005599:	83 ec 2c             	sub    esp,0x2c
c000559c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055a0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00055a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00055aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00055ae:	89 d8                	mov    eax,ebx
c00055b0:	e8 f7 cc ff ff       	call   c00022ac <validate>
c00055b5:	89 c5                	mov    ebp,eax
c00055b7:	85 c0                	test   eax,eax
c00055b9:	0f 85 86 02 00 00    	jne    c0005845 <f_write+0x2b0>
c00055bf:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00055c3:	85 ed                	test   ebp,ebp
c00055c5:	0f 85 7a 02 00 00    	jne    c0005845 <f_write+0x2b0>
c00055cb:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00055cf:	0f 84 6b 02 00 00    	je     c0005840 <f_write+0x2ab>
c00055d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00055dc:	0f 84 43 01 00 00    	je     c0005725 <f_write+0x190>
c00055e2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e5:	89 c1                	mov    ecx,eax
c00055e7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055eb:	0f 83 34 01 00 00    	jae    c0005725 <f_write+0x190>
c00055f1:	f7 d0                	not    eax
c00055f3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055f7:	e9 29 01 00 00       	jmp    c0005725 <f_write+0x190>
c00055fc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055ff:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005602:	89 d0                	mov    eax,edx
c0005604:	25 ff 01 00 00       	and    eax,0x1ff
c0005609:	0f 85 00 02 00 00    	jne    c000580f <f_write+0x27a>
c000560f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005613:	89 d6                	mov    esi,edx
c0005615:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005619:	89 cf                	mov    edi,ecx
c000561b:	48                   	dec    eax
c000561c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005620:	21 f0                	and    eax,esi
c0005622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005626:	0f 84 06 01 00 00    	je     c0005732 <f_write+0x19d>
c000562c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005630:	0f 88 6e 01 00 00    	js     c00057a4 <f_write+0x20f>
c0005636:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000563a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000563d:	89 c8                	mov    eax,ecx
c000563f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005643:	e8 fa c7 ff ff       	call   c0001e42 <clst2sect>
c0005648:	89 d1                	mov    ecx,edx
c000564a:	09 c1                	or     ecx,eax
c000564c:	0f 84 1c 01 00 00    	je     c000576e <f_write+0x1d9>
c0005652:	31 ff                	xor    edi,edi
c0005654:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005658:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000565c:	01 c6                	add    esi,eax
c000565e:	11 d7                	adc    edi,edx
c0005660:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005668:	0f 86 63 01 00 00    	jbe    c00057d1 <f_write+0x23c>
c000566e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005672:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005676:	c1 e8 09             	shr    eax,0x9
c0005679:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000567d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005681:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005685:	39 c2                	cmp    edx,eax
c0005687:	76 08                	jbe    c0005691 <f_write+0xfc>
c0005689:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000568d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005691:	83 ec 0c             	sub    esp,0xc
c0005694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005698:	57                   	push   edi
c0005699:	56                   	push   esi
c000569a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000569e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056a2:	50                   	push   eax
c00056a3:	e8 cc c4 ff ff       	call   c0001b74 <disk_write>
c00056a8:	83 c4 20             	add    esp,0x20
c00056ab:	85 c0                	test   eax,eax
c00056ad:	0f 85 ce 00 00 00    	jne    c0005781 <f_write+0x1ec>
c00056b3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00056b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00056b9:	29 f0                	sub    eax,esi
c00056bb:	19 fa                	sbb    edx,edi
c00056bd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00056c1:	89 d7                	mov    edi,edx
c00056c3:	ba 00 00 00 00       	mov    edx,0x0
c00056c8:	89 f9                	mov    ecx,edi
c00056ca:	19 d1                	sbb    ecx,edx
c00056cc:	73 1c                	jae    c00056ea <f_write+0x155>
c00056ce:	89 c7                	mov    edi,eax
c00056d0:	b9 00 02 00 00       	mov    ecx,0x200
c00056d5:	c1 e7 09             	shl    edi,0x9
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056df:	89 fa                	mov    edx,edi
c00056e1:	e8 42 c5 ff ff       	call   c0001c28 <mem_cpy>
c00056e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056ee:	c1 e6 09             	shl    esi,0x9
c00056f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056f5:	31 ff                	xor    edi,edi
c00056f7:	01 30                	add    DWORD PTR [eax],esi
c00056f9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056fd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005701:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005704:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005707:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000570a:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000570d:	89 c1                	mov    ecx,eax
c000570f:	39 f2                	cmp    edx,esi
c0005711:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005714:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005717:	19 f9                	sbb    ecx,edi
c0005719:	73 04                	jae    c000571f <f_write+0x18a>
c000571b:	89 f2                	mov    edx,esi
c000571d:	89 f8                	mov    eax,edi
c000571f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005722:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005725:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000572a:	0f 85 cc fe ff ff    	jne    c00055fc <f_write+0x67>
c0005730:	eb 2e                	jmp    c0005760 <f_write+0x1cb>
c0005732:	89 c8                	mov    eax,ecx
c0005734:	09 d0                	or     eax,edx
c0005736:	75 0b                	jne    c0005743 <f_write+0x1ae>
c0005738:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000573b:	31 d2                	xor    edx,edx
c000573d:	85 c0                	test   eax,eax
c000573f:	75 28                	jne    c0005769 <f_write+0x1d4>
c0005741:	eb 12                	jmp    c0005755 <f_write+0x1c0>
c0005743:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005747:	74 09                	je     c0005752 <f_write+0x1bd>
c0005749:	89 d8                	mov    eax,ebx
c000574b:	e8 13 c7 ff ff       	call   c0001e63 <clmt_clust>
c0005750:	eb 0a                	jmp    c000575c <f_write+0x1c7>
c0005752:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005755:	89 d8                	mov    eax,ebx
c0005757:	e8 a1 da ff ff       	call   c00031fd <create_chain>
c000575c:	85 c0                	test   eax,eax
c000575e:	75 09                	jne    c0005769 <f_write+0x1d4>
c0005760:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005764:	e9 dc 00 00 00       	jmp    c0005845 <f_write+0x2b0>
c0005769:	83 f8 01             	cmp    eax,0x1
c000576c:	75 0e                	jne    c000577c <f_write+0x1e7>
c000576e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005772:	bd 02 00 00 00       	mov    ebp,0x2
c0005777:	e9 c9 00 00 00       	jmp    c0005845 <f_write+0x2b0>
c000577c:	83 f8 ff             	cmp    eax,0xffffffff
c000577f:	75 0e                	jne    c000578f <f_write+0x1fa>
c0005781:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005785:	bd 01 00 00 00       	mov    ebp,0x1
c000578a:	e9 b6 00 00 00       	jmp    c0005845 <f_write+0x2b0>
c000578f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005792:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005796:	0f 85 90 fe ff ff    	jne    c000562c <f_write+0x97>
c000579c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000579f:	e9 88 fe ff ff       	jmp    c000562c <f_write+0x97>
c00057a4:	83 ec 0c             	sub    esp,0xc
c00057a7:	8d 43 50             	lea    eax,[ebx+0x50]
c00057aa:	6a 01                	push   0x1
c00057ac:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00057af:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00057b2:	50                   	push   eax
c00057b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00057b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00057bb:	50                   	push   eax
c00057bc:	e8 b3 c3 ff ff       	call   c0001b74 <disk_write>
c00057c1:	83 c4 20             	add    esp,0x20
c00057c4:	85 c0                	test   eax,eax
c00057c6:	75 b9                	jne    c0005781 <f_write+0x1ec>
c00057c8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057cc:	e9 65 fe ff ff       	jmp    c0005636 <f_write+0xa1>
c00057d1:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00057d4:	75 05                	jne    c00057db <f_write+0x246>
c00057d6:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00057d9:	74 2e                	je     c0005809 <f_write+0x274>
c00057db:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057de:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057e4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057e7:	73 20                	jae    c0005809 <f_write+0x274>
c00057e9:	83 ec 0c             	sub    esp,0xc
c00057ec:	8d 43 50             	lea    eax,[ebx+0x50]
c00057ef:	6a 01                	push   0x1
c00057f1:	57                   	push   edi
c00057f2:	56                   	push   esi
c00057f3:	50                   	push   eax
c00057f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057f8:	50                   	push   eax
c00057f9:	e8 60 c3 ff ff       	call   c0001b5e <disk_read>
c00057fe:	83 c4 20             	add    esp,0x20
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 78 ff ff ff    	jne    c0005781 <f_write+0x1ec>
c0005809:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000580c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000580f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005812:	ba 00 02 00 00       	mov    edx,0x200
c0005817:	25 ff 01 00 00       	and    eax,0x1ff
c000581c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005820:	29 c2                	sub    edx,eax
c0005822:	39 d6                	cmp    esi,edx
c0005824:	76 02                	jbe    c0005828 <f_write+0x293>
c0005826:	89 d6                	mov    esi,edx
c0005828:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000582c:	89 f1                	mov    ecx,esi
c000582e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005832:	e8 f1 c3 ff ff       	call   c0001c28 <mem_cpy>
c0005837:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000583b:	e9 b1 fe ff ff       	jmp    c00056f1 <f_write+0x15c>
c0005840:	bd 07 00 00 00       	mov    ebp,0x7
c0005845:	83 c4 2c             	add    esp,0x2c
c0005848:	89 e8                	mov    eax,ebp
c000584a:	5b                   	pop    ebx
c000584b:	5e                   	pop    esi
c000584c:	5f                   	pop    edi
c000584d:	5d                   	pop    ebp
c000584e:	c3                   	ret    

c000584f <f_sync>:
c000584f:	56                   	push   esi
c0005850:	53                   	push   ebx
c0005851:	83 ec 64             	sub    esp,0x64
c0005854:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005858:	8d 54 24 10          	lea    edx,[esp+0x10]
c000585c:	89 d8                	mov    eax,ebx
c000585e:	e8 49 ca ff ff       	call   c00022ac <validate>
c0005863:	85 c0                	test   eax,eax
c0005865:	0f 85 ba 01 00 00    	jne    c0005a25 <f_sync+0x1d6>
c000586b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000586e:	f6 c2 40             	test   dl,0x40
c0005871:	0f 84 ae 01 00 00    	je     c0005a25 <f_sync+0x1d6>
c0005877:	84 d2                	test   dl,dl
c0005879:	79 33                	jns    c00058ae <f_sync+0x5f>
c000587b:	83 ec 0c             	sub    esp,0xc
c000587e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005881:	6a 01                	push   0x1
c0005883:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005886:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005889:	50                   	push   eax
c000588a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000588e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005892:	50                   	push   eax
c0005893:	e8 dc c2 ff ff       	call   c0001b74 <disk_write>
c0005898:	83 c4 20             	add    esp,0x20
c000589b:	89 c2                	mov    edx,eax
c000589d:	b8 01 00 00 00       	mov    eax,0x1
c00058a2:	85 d2                	test   edx,edx
c00058a4:	0f 85 7b 01 00 00    	jne    c0005a25 <f_sync+0x1d6>
c00058aa:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058b5:	0f 85 11 01 00 00    	jne    c00059cc <f_sync+0x17d>
c00058bb:	89 d8                	mov    eax,ebx
c00058bd:	e8 13 d6 ff ff       	call   c0002ed5 <fill_first_frag>
c00058c2:	85 c0                	test   eax,eax
c00058c4:	0f 85 5b 01 00 00    	jne    c0005a25 <f_sync+0x1d6>
c00058ca:	83 c9 ff             	or     ecx,0xffffffff
c00058cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00058d0:	89 d8                	mov    eax,ebx
c00058d2:	e8 c9 d5 ff ff       	call   c0002ea0 <fill_last_frag>
c00058d7:	85 c0                	test   eax,eax
c00058d9:	0f 85 46 01 00 00    	jne    c0005a25 <f_sync+0x1d6>
c00058df:	83 ec 0c             	sub    esp,0xc
c00058e2:	68 60 04 00 00       	push   0x460
c00058e7:	e8 f0 2a 00 00       	call   c00083dc <ff_memalloc>
c00058ec:	83 c4 10             	add    esp,0x10
c00058ef:	89 c6                	mov    esi,eax
c00058f1:	b8 11 00 00 00       	mov    eax,0x11
c00058f6:	85 f6                	test   esi,esi
c00058f8:	0f 84 27 01 00 00    	je     c0005a25 <f_sync+0x1d6>
c00058fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005902:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005908:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000590b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000590e:	89 da                	mov    edx,ebx
c0005910:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005914:	e8 af df ff ff       	call   c00038c8 <load_obj_xdir>
c0005919:	85 c0                	test   eax,eax
c000591b:	0f 85 95 00 00 00    	jne    c00059b6 <f_sync+0x167>
c0005921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005925:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005928:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c000592c:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c000592f:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005932:	83 ca 01             	or     edx,0x1
c0005935:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005938:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 34             	add    eax,0x34
c0005941:	e8 d9 c2 ff ff       	call   c0001c1f <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000594d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005950:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005953:	83 c0 38             	add    eax,0x38
c0005956:	e8 c7 c2 ff ff       	call   c0001c22 <st_qword>
c000595b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000595e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005962:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005965:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005968:	83 c0 28             	add    eax,0x28
c000596b:	e8 b2 c2 ff ff       	call   c0001c22 <st_qword>
c0005970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005974:	ba 00 00 21 50       	mov    edx,0x50210000
c0005979:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000597c:	83 c0 0c             	add    eax,0xc
c000597f:	e8 9b c2 ff ff       	call   c0001c1f <st_dword>
c0005984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005988:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000598b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000598f:	31 d2                	xor    edx,edx
c0005991:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005994:	83 c0 10             	add    eax,0x10
c0005997:	e8 83 c2 ff ff       	call   c0001c1f <st_dword>
c000599c:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059a0:	e8 62 e1 ff ff       	call   c0003b07 <store_xdir>
c00059a5:	85 c0                	test   eax,eax
c00059a7:	75 0d                	jne    c00059b6 <f_sync+0x167>
c00059a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ad:	e8 00 eb ff ff       	call   c00044b2 <sync_fs>
c00059b2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00059ba:	83 ec 0c             	sub    esp,0xc
c00059bd:	56                   	push   esi
c00059be:	e8 2f 2a 00 00       	call   c00083f2 <ff_memfree>
c00059c3:	83 c4 10             	add    esp,0x10
c00059c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059ca:	eb 59                	jmp    c0005a25 <f_sync+0x1d6>
c00059cc:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00059cf:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00059d2:	e8 b0 c9 ff ff       	call   c0002387 <move_window>
c00059d7:	85 c0                	test   eax,eax
c00059d9:	75 4a                	jne    c0005a25 <f_sync+0x1d6>
c00059db:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059de:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059e2:	89 f2                	mov    edx,esi
c00059e4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059e9:	e8 5f f3 ff ff       	call   c0004d4d <st_clust.isra.1>
c00059ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059f1:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059f4:	e8 26 c2 ff ff       	call   c0001c1f <st_dword>
c00059f9:	8d 46 16             	lea    eax,[esi+0x16]
c00059fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a01:	e8 19 c2 ff ff       	call   c0001c1f <st_dword>
c0005a06:	8d 46 12             	lea    eax,[esi+0x12]
c0005a09:	31 d2                	xor    edx,edx
c0005a0b:	e8 0b c2 ff ff       	call   c0001c1b <st_word>
c0005a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a14:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1c:	e8 91 ea ff ff       	call   c00044b2 <sync_fs>
c0005a21:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a25:	83 c4 64             	add    esp,0x64
c0005a28:	5b                   	pop    ebx
c0005a29:	5e                   	pop    esi
c0005a2a:	c3                   	ret    

c0005a2b <f_close>:
c0005a2b:	53                   	push   ebx
c0005a2c:	83 ec 24             	sub    esp,0x24
c0005a2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005a33:	53                   	push   ebx
c0005a34:	e8 16 fe ff ff       	call   c000584f <f_sync>
c0005a39:	83 c4 10             	add    esp,0x10
c0005a3c:	85 c0                	test   eax,eax
c0005a3e:	75 15                	jne    c0005a55 <f_close+0x2a>
c0005a40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a44:	89 d8                	mov    eax,ebx
c0005a46:	e8 61 c8 ff ff       	call   c00022ac <validate>
c0005a4b:	85 c0                	test   eax,eax
c0005a4d:	75 06                	jne    c0005a55 <f_close+0x2a>
c0005a4f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a55:	83 c4 18             	add    esp,0x18
c0005a58:	5b                   	pop    ebx
c0005a59:	c3                   	ret    

c0005a5a <f_lseek>:
c0005a5a:	55                   	push   ebp
c0005a5b:	57                   	push   edi
c0005a5c:	56                   	push   esi
c0005a5d:	53                   	push   ebx
c0005a5e:	83 ec 3c             	sub    esp,0x3c
c0005a61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a65:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a69:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a74:	89 d8                	mov    eax,ebx
c0005a76:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a7a:	e8 2d c8 ff ff       	call   c00022ac <validate>
c0005a7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a83:	85 c0                	test   eax,eax
c0005a85:	0f 85 7a 04 00 00    	jne    c0005f05 <f_lseek+0x4ab>
c0005a8b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a93:	85 c0                	test   eax,eax
c0005a95:	0f 85 6a 04 00 00    	jne    c0005f05 <f_lseek+0x4ab>
c0005a9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a9f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005aa2:	74 0c                	je     c0005ab0 <f_lseek+0x56>
c0005aa4:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005aa7:	85 c0                	test   eax,eax
c0005aa9:	75 1f                	jne    c0005aca <f_lseek+0x70>
c0005aab:	e9 b5 01 00 00       	jmp    c0005c65 <f_lseek+0x20b>
c0005ab0:	83 c9 ff             	or     ecx,0xffffffff
c0005ab3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005ab6:	89 d8                	mov    eax,ebx
c0005ab8:	e8 e3 d3 ff ff       	call   c0002ea0 <fill_last_frag>
c0005abd:	85 c0                	test   eax,eax
c0005abf:	74 e3                	je     c0005aa4 <f_lseek+0x4a>
c0005ac1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ac5:	e9 3b 04 00 00       	jmp    c0005f05 <f_lseek+0x4ab>
c0005aca:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005acf:	0f 85 ac 00 00 00    	jne    c0005b81 <f_lseek+0x127>
c0005ad5:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005ad9:	0f 85 a2 00 00 00    	jne    c0005b81 <f_lseek+0x127>
c0005adf:	8d 78 04             	lea    edi,[eax+0x4]
c0005ae2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ae7:	be 02 00 00 00       	mov    esi,0x2
c0005aec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005af0:	85 ed                	test   ebp,ebp
c0005af2:	74 73                	je     c0005b67 <f_lseek+0x10d>
c0005af4:	89 e9                	mov    ecx,ebp
c0005af6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005afd:	ff 04 24             	inc    DWORD PTR [esp]
c0005b00:	89 ca                	mov    edx,ecx
c0005b02:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b06:	89 d8                	mov    eax,ebx
c0005b08:	e8 02 d4 ff ff       	call   c0002f0f <get_fat>
c0005b0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b11:	83 f8 01             	cmp    eax,0x1
c0005b14:	77 11                	ja     c0005b27 <f_lseek+0xcd>
c0005b16:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b1a:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005b22:	e9 de 03 00 00       	jmp    c0005f05 <f_lseek+0x4ab>
c0005b27:	83 f8 ff             	cmp    eax,0xffffffff
c0005b2a:	75 11                	jne    c0005b3d <f_lseek+0xe3>
c0005b2c:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005b30:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005b38:	e9 c8 03 00 00       	jmp    c0005f05 <f_lseek+0x4ab>
c0005b3d:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b40:	89 c1                	mov    ecx,eax
c0005b42:	39 c2                	cmp    edx,eax
c0005b44:	74 b7                	je     c0005afd <f_lseek+0xa3>
c0005b46:	83 c6 02             	add    esi,0x2
c0005b49:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b4d:	72 0b                	jb     c0005b5a <f_lseek+0x100>
c0005b4f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b52:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b55:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b57:	83 c7 08             	add    edi,0x8
c0005b5a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b5e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b61:	76 04                	jbe    c0005b67 <f_lseek+0x10d>
c0005b63:	89 c5                	mov    ebp,eax
c0005b65:	eb 8d                	jmp    c0005af4 <f_lseek+0x9a>
c0005b67:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b6a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b6e:	89 30                	mov    DWORD PTR [eax],esi
c0005b70:	0f 87 87 03 00 00    	ja     c0005efd <f_lseek+0x4a3>
c0005b76:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b7c:	e9 84 03 00 00       	jmp    c0005f05 <f_lseek+0x4ab>
c0005b81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b84:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b93:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b9a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b9e:	73 0f                	jae    c0005baf <f_lseek+0x155>
c0005ba0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ba3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005baf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005bb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bb7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005bba:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bc1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005bc5:	0f 84 3a 03 00 00    	je     c0005f05 <f_lseek+0x4ab>
c0005bcb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bd3:	83 c6 ff             	add    esi,0xffffffff
c0005bd6:	89 d8                	mov    eax,ebx
c0005bd8:	83 d7 ff             	adc    edi,0xffffffff
c0005bdb:	89 f2                	mov    edx,esi
c0005bdd:	89 f9                	mov    ecx,edi
c0005bdf:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005be3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005be6:	e8 78 c2 ff ff       	call   c0001e63 <clmt_clust>
c0005beb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bef:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bf2:	89 c2                	mov    edx,eax
c0005bf4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bf8:	89 c8                	mov    eax,ecx
c0005bfa:	e8 43 c2 ff ff       	call   c0001e42 <clst2sect>
c0005bff:	89 d7                	mov    edi,edx
c0005c01:	09 c7                	or     edi,eax
c0005c03:	0f 84 0d ff ff ff    	je     c0005b16 <f_lseek+0xbc>
c0005c09:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c0d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c13:	0f 84 ec 02 00 00    	je     c0005f05 <f_lseek+0x4ab>
c0005c19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c24:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005c28:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c2c:	4d                   	dec    ebp
c0005c2d:	31 ff                	xor    edi,edi
c0005c2f:	21 ee                	and    esi,ebp
c0005c31:	01 c6                	add    esi,eax
c0005c33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c36:	11 d7                	adc    edi,edx
c0005c38:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c3b:	39 fa                	cmp    edx,edi
c0005c3d:	75 08                	jne    c0005c47 <f_lseek+0x1ed>
c0005c3f:	39 f0                	cmp    eax,esi
c0005c41:	0f 84 be 02 00 00    	je     c0005f05 <f_lseek+0x4ab>
c0005c47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c4e:	0f 89 80 02 00 00    	jns    c0005ed4 <f_lseek+0x47a>
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	6a 01                	push   0x1
c0005c59:	52                   	push   edx
c0005c5a:	50                   	push   eax
c0005c5b:	55                   	push   ebp
c0005c5c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c60:	e9 5a 02 00 00       	jmp    c0005ebf <f_lseek+0x465>
c0005c65:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c69:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c6c:	74 16                	je     c0005c84 <f_lseek+0x22a>
c0005c6e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c73:	76 0f                	jbe    c0005c84 <f_lseek+0x22a>
c0005c75:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c84:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c87:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c8a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c8d:	89 c7                	mov    edi,eax
c0005c8f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c93:	73 0d                	jae    c0005ca2 <f_lseek+0x248>
c0005c95:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c99:	75 07                	jne    c0005ca2 <f_lseek+0x248>
c0005c9b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005ca2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ca5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ca8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cac:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005cb3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005cba:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005cbd:	75 09                	jne    c0005cc8 <f_lseek+0x26e>
c0005cbf:	31 f6                	xor    esi,esi
c0005cc1:	31 ff                	xor    edi,edi
c0005cc3:	e9 af 01 00 00       	jmp    c0005e77 <f_lseek+0x41d>
c0005cc8:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ccc:	89 d7                	mov    edi,edx
c0005cce:	c1 e1 09             	shl    ecx,0x9
c0005cd1:	09 c7                	or     edi,eax
c0005cd3:	89 cd                	mov    ebp,ecx
c0005cd5:	74 6d                	je     c0005d44 <f_lseek+0x2ea>
c0005cd7:	83 c0 ff             	add    eax,0xffffffff
c0005cda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005cde:	83 d2 ff             	adc    edx,0xffffffff
c0005ce1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ce8:	83 c0 ff             	add    eax,0xffffffff
c0005ceb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cef:	83 d2 ff             	adc    edx,0xffffffff
c0005cf2:	31 ff                	xor    edi,edi
c0005cf4:	57                   	push   edi
c0005cf5:	51                   	push   ecx
c0005cf6:	52                   	push   edx
c0005cf7:	50                   	push   eax
c0005cf8:	e8 3f 89 01 00       	call   c001e63c <__udivdi3>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d08:	57                   	push   edi
c0005d09:	55                   	push   ebp
c0005d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d12:	e8 25 89 01 00       	call   c001e63c <__udivdi3>
c0005d17:	83 c4 10             	add    esp,0x10
c0005d1a:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d1e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d22:	19 d1                	sbb    ecx,edx
c0005d24:	72 1e                	jb     c0005d44 <f_lseek+0x2ea>
c0005d26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005d2a:	89 e9                	mov    ecx,ebp
c0005d2c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005d2f:	f7 d9                	neg    ecx
c0005d31:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005d34:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005d38:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005d3b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d3e:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d42:	eb 28                	jmp    c0005d6c <f_lseek+0x312>
c0005d44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d47:	85 c0                	test   eax,eax
c0005d49:	75 1e                	jne    c0005d69 <f_lseek+0x30f>
c0005d4b:	31 d2                	xor    edx,edx
c0005d4d:	89 d8                	mov    eax,ebx
c0005d4f:	e8 a9 d4 ff ff       	call   c00031fd <create_chain>
c0005d54:	83 f8 01             	cmp    eax,0x1
c0005d57:	0f 84 b9 fd ff ff    	je     c0005b16 <f_lseek+0xbc>
c0005d5d:	83 f8 ff             	cmp    eax,0xffffffff
c0005d60:	0f 84 c6 fd ff ff    	je     c0005b2c <f_lseek+0xd2>
c0005d66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d69:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d6c:	85 c0                	test   eax,eax
c0005d6e:	0f 84 4b ff ff ff    	je     c0005cbf <f_lseek+0x265>
c0005d74:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d78:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d80:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d83:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d87:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d8a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d8d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d91:	0f 83 9d 00 00 00    	jae    c0005e34 <f_lseek+0x3da>
c0005d97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d9b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d9f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005da2:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005da6:	01 f2                	add    edx,esi
c0005da8:	11 f9                	adc    ecx,edi
c0005daa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005dae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005db2:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005db5:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005db8:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005dbb:	f6 c1 02             	test   cl,0x2
c0005dbe:	74 35                	je     c0005df5 <f_lseek+0x39b>
c0005dc0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005dc4:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005dc7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005dca:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005dce:	73 16                	jae    c0005de6 <f_lseek+0x38c>
c0005dd0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005dd4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005dd8:	88 ca                	mov    dl,cl
c0005dda:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ddd:	83 ca 40             	or     edx,0x40
c0005de0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005de3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005de6:	89 c2                	mov    edx,eax
c0005de8:	89 d8                	mov    eax,ebx
c0005dea:	e8 0e d4 ff ff       	call   c00031fd <create_chain>
c0005def:	85 c0                	test   eax,eax
c0005df1:	75 0b                	jne    c0005dfe <f_lseek+0x3a4>
c0005df3:	eb 30                	jmp    c0005e25 <f_lseek+0x3cb>
c0005df5:	89 c2                	mov    edx,eax
c0005df7:	89 d8                	mov    eax,ebx
c0005df9:	e8 11 d1 ff ff       	call   c0002f0f <get_fat>
c0005dfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005e01:	0f 84 25 fd ff ff    	je     c0005b2c <f_lseek+0xd2>
c0005e07:	83 f8 01             	cmp    eax,0x1
c0005e0a:	0f 86 06 fd ff ff    	jbe    c0005b16 <f_lseek+0xbc>
c0005e10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e14:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e17:	0f 86 f9 fc ff ff    	jbe    c0005b16 <f_lseek+0xbc>
c0005e1d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e20:	e9 5b ff ff ff       	jmp    c0005d80 <f_lseek+0x326>
c0005e25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005e34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005e37:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005e3b:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e3e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e41:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e44:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e4a:	0f 84 6f fe ff ff    	je     c0005cbf <f_lseek+0x265>
c0005e50:	89 c2                	mov    edx,eax
c0005e52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e56:	e8 e7 bf ff ff       	call   c0001e42 <clst2sect>
c0005e5b:	89 d7                	mov    edi,edx
c0005e5d:	09 c7                	or     edi,eax
c0005e5f:	0f 84 b1 fc ff ff    	je     c0005b16 <f_lseek+0xbc>
c0005e65:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e69:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e6c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e70:	c1 ef 09             	shr    edi,0x9
c0005e73:	01 c6                	add    esi,eax
c0005e75:	11 d7                	adc    edi,edx
c0005e77:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e7a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e7d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e80:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e83:	19 d1                	sbb    ecx,edx
c0005e85:	73 0a                	jae    c0005e91 <f_lseek+0x437>
c0005e87:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e8a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e8d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e91:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e96:	74 6d                	je     c0005f05 <f_lseek+0x4ab>
c0005e98:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e9e:	39 fa                	cmp    edx,edi
c0005ea0:	75 04                	jne    c0005ea6 <f_lseek+0x44c>
c0005ea2:	39 f0                	cmp    eax,esi
c0005ea4:	74 5f                	je     c0005f05 <f_lseek+0x4ab>
c0005ea6:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ea9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ead:	79 25                	jns    c0005ed4 <f_lseek+0x47a>
c0005eaf:	83 ec 0c             	sub    esp,0xc
c0005eb2:	6a 01                	push   0x1
c0005eb4:	52                   	push   edx
c0005eb5:	50                   	push   eax
c0005eb6:	55                   	push   ebp
c0005eb7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ebb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ebf:	50                   	push   eax
c0005ec0:	e8 af bc ff ff       	call   c0001b74 <disk_write>
c0005ec5:	83 c4 20             	add    esp,0x20
c0005ec8:	85 c0                	test   eax,eax
c0005eca:	0f 85 5c fc ff ff    	jne    c0005b2c <f_lseek+0xd2>
c0005ed0:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	6a 01                	push   0x1
c0005ed9:	57                   	push   edi
c0005eda:	56                   	push   esi
c0005edb:	55                   	push   ebp
c0005edc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ee0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ee4:	50                   	push   eax
c0005ee5:	e8 74 bc ff ff       	call   c0001b5e <disk_read>
c0005eea:	83 c4 20             	add    esp,0x20
c0005eed:	85 c0                	test   eax,eax
c0005eef:	0f 85 37 fc ff ff    	jne    c0005b2c <f_lseek+0xd2>
c0005ef5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ef8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005efb:	eb 08                	jmp    c0005f05 <f_lseek+0x4ab>
c0005efd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f09:	83 c4 3c             	add    esp,0x3c
c0005f0c:	5b                   	pop    ebx
c0005f0d:	5e                   	pop    esi
c0005f0e:	5f                   	pop    edi
c0005f0f:	5d                   	pop    ebp
c0005f10:	c3                   	ret    

c0005f11 <f_opendir>:
c0005f11:	56                   	push   esi
c0005f12:	b8 09 00 00 00       	mov    eax,0x9
c0005f17:	53                   	push   ebx
c0005f18:	83 ec 24             	sub    esp,0x24
c0005f1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f1f:	85 db                	test   ebx,ebx
c0005f21:	0f 84 e6 00 00 00    	je     c000600d <f_opendir+0xfc>
c0005f27:	31 c9                	xor    ecx,ecx
c0005f29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005f2d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005f31:	e8 03 c7 ff ff       	call   c0002639 <mount_volume>
c0005f36:	85 c0                	test   eax,eax
c0005f38:	0f 85 c9 00 00 00    	jne    c0006007 <f_opendir+0xf6>
c0005f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f42:	83 ec 0c             	sub    esp,0xc
c0005f45:	89 03                	mov    DWORD PTR [ebx],eax
c0005f47:	68 60 04 00 00       	push   0x460
c0005f4c:	e8 8b 24 00 00       	call   c00083dc <ff_memalloc>
c0005f51:	83 c4 10             	add    esp,0x10
c0005f54:	89 c6                	mov    esi,eax
c0005f56:	b8 11 00 00 00       	mov    eax,0x11
c0005f5b:	85 f6                	test   esi,esi
c0005f5d:	0f 84 aa 00 00 00    	je     c000600d <f_opendir+0xfc>
c0005f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f67:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f70:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f77:	89 d8                	mov    eax,ebx
c0005f79:	e8 31 ee ff ff       	call   c0004daf <follow_path>
c0005f7e:	85 c0                	test   eax,eax
c0005f80:	75 61                	jne    c0005fe3 <f_opendir+0xd2>
c0005f82:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f86:	78 46                	js     c0005fce <f_opendir+0xbd>
c0005f88:	b8 05 00 00 00       	mov    eax,0x5
c0005f8d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f91:	74 50                	je     c0005fe3 <f_opendir+0xd2>
c0005f93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f97:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f99:	3c 04                	cmp    al,0x4
c0005f9b:	75 26                	jne    c0005fc3 <f_opendir+0xb2>
c0005f9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005fa0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005fa3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005fa6:	30 d2                	xor    dl,dl
c0005fa8:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005fac:	09 c2                	or     edx,eax
c0005fae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005fb1:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005fb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005fb7:	89 da                	mov    edx,ebx
c0005fb9:	8d 41 10             	lea    eax,[ecx+0x10]
c0005fbc:	e8 b4 ed ff ff       	call   c0004d75 <init_alloc_info.isra.2>
c0005fc1:	eb 0b                	jmp    c0005fce <f_opendir+0xbd>
c0005fc3:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005fc6:	e8 59 ed ff ff       	call   c0004d24 <ld_clust.isra.0>
c0005fcb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fd2:	31 d2                	xor    edx,edx
c0005fd4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005fd8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005fdc:	89 d8                	mov    eax,ebx
c0005fde:	e8 22 d1 ff ff       	call   c0003105 <dir_sdi>
c0005fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe7:	83 ec 0c             	sub    esp,0xc
c0005fea:	56                   	push   esi
c0005feb:	e8 02 24 00 00       	call   c00083f2 <ff_memfree>
c0005ff0:	83 c4 10             	add    esp,0x10
c0005ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ff7:	83 f8 04             	cmp    eax,0x4
c0005ffa:	74 06                	je     c0006002 <f_opendir+0xf1>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	74 0d                	je     c000600d <f_opendir+0xfc>
c0006000:	eb 05                	jmp    c0006007 <f_opendir+0xf6>
c0006002:	b8 05 00 00 00       	mov    eax,0x5
c0006007:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000600d:	83 c4 24             	add    esp,0x24
c0006010:	5b                   	pop    ebx
c0006011:	5e                   	pop    esi
c0006012:	c3                   	ret    

c0006013 <f_closedir>:
c0006013:	53                   	push   ebx
c0006014:	83 ec 18             	sub    esp,0x18
c0006017:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000601b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000601f:	89 d8                	mov    eax,ebx
c0006021:	e8 86 c2 ff ff       	call   c00022ac <validate>
c0006026:	85 c0                	test   eax,eax
c0006028:	75 06                	jne    c0006030 <f_closedir+0x1d>
c000602a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006030:	83 c4 18             	add    esp,0x18
c0006033:	5b                   	pop    ebx
c0006034:	c3                   	ret    

c0006035 <f_readdir>:
c0006035:	57                   	push   edi
c0006036:	56                   	push   esi
c0006037:	53                   	push   ebx
c0006038:	83 ec 20             	sub    esp,0x20
c000603b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000603f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006043:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006047:	89 d8                	mov    eax,ebx
c0006049:	e8 5e c2 ff ff       	call   c00022ac <validate>
c000604e:	85 c0                	test   eax,eax
c0006050:	75 77                	jne    c00060c9 <f_readdir+0x94>
c0006052:	85 ff                	test   edi,edi
c0006054:	75 0b                	jne    c0006061 <f_readdir+0x2c>
c0006056:	31 d2                	xor    edx,edx
c0006058:	89 d8                	mov    eax,ebx
c000605a:	e8 a6 d0 ff ff       	call   c0003105 <dir_sdi>
c000605f:	eb 68                	jmp    c00060c9 <f_readdir+0x94>
c0006061:	83 ec 0c             	sub    esp,0xc
c0006064:	68 60 04 00 00       	push   0x460
c0006069:	e8 6e 23 00 00       	call   c00083dc <ff_memalloc>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	89 c6                	mov    esi,eax
c0006073:	b8 11 00 00 00       	mov    eax,0x11
c0006078:	85 f6                	test   esi,esi
c000607a:	74 4d                	je     c00060c9 <f_readdir+0x94>
c000607c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006080:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006086:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006089:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000608c:	31 d2                	xor    edx,edx
c000608e:	89 d8                	mov    eax,ebx
c0006090:	e8 80 d8 ff ff       	call   c0003915 <dir_read>
c0006095:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000609a:	75 19                	jne    c00060b5 <f_readdir+0x80>
c000609c:	89 fa                	mov    edx,edi
c000609e:	89 d8                	mov    eax,ebx
c00060a0:	e8 7e ea ff ff       	call   c0004b23 <get_fileinfo>
c00060a5:	31 d2                	xor    edx,edx
c00060a7:	89 d8                	mov    eax,ebx
c00060a9:	e8 af d5 ff ff       	call   c000365d <dir_next>
c00060ae:	83 f8 04             	cmp    eax,0x4
c00060b1:	75 02                	jne    c00060b5 <f_readdir+0x80>
c00060b3:	31 c0                	xor    eax,eax
c00060b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060b9:	83 ec 0c             	sub    esp,0xc
c00060bc:	56                   	push   esi
c00060bd:	e8 30 23 00 00       	call   c00083f2 <ff_memfree>
c00060c2:	83 c4 10             	add    esp,0x10
c00060c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060c9:	83 c4 20             	add    esp,0x20
c00060cc:	5b                   	pop    ebx
c00060cd:	5e                   	pop    esi
c00060ce:	5f                   	pop    edi
c00060cf:	c3                   	ret    

c00060d0 <f_stat>:
c00060d0:	57                   	push   edi
c00060d1:	31 c9                	xor    ecx,ecx
c00060d3:	56                   	push   esi
c00060d4:	53                   	push   ebx
c00060d5:	83 ec 50             	sub    esp,0x50
c00060d8:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00060dc:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060e0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060e4:	e8 50 c5 ff ff       	call   c0002639 <mount_volume>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 67                	jne    c0006156 <f_stat+0x86>
c00060ef:	83 ec 0c             	sub    esp,0xc
c00060f2:	bb 11 00 00 00       	mov    ebx,0x11
c00060f7:	68 60 04 00 00       	push   0x460
c00060fc:	e8 db 22 00 00       	call   c00083dc <ff_memalloc>
c0006101:	83 c4 10             	add    esp,0x10
c0006104:	89 c6                	mov    esi,eax
c0006106:	85 c0                	test   eax,eax
c0006108:	74 4c                	je     c0006156 <f_stat+0x86>
c000610a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000610e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006114:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006117:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000611a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000611e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006122:	e8 88 ec ff ff       	call   c0004daf <follow_path>
c0006127:	89 c3                	mov    ebx,eax
c0006129:	85 c0                	test   eax,eax
c000612b:	75 1d                	jne    c000614a <f_stat+0x7a>
c000612d:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006132:	78 11                	js     c0006145 <f_stat+0x75>
c0006134:	85 ff                	test   edi,edi
c0006136:	74 12                	je     c000614a <f_stat+0x7a>
c0006138:	89 fa                	mov    edx,edi
c000613a:	8d 44 24 04          	lea    eax,[esp+0x4]
c000613e:	e8 e0 e9 ff ff       	call   c0004b23 <get_fileinfo>
c0006143:	eb 05                	jmp    c000614a <f_stat+0x7a>
c0006145:	bb 06 00 00 00       	mov    ebx,0x6
c000614a:	83 ec 0c             	sub    esp,0xc
c000614d:	56                   	push   esi
c000614e:	e8 9f 22 00 00       	call   c00083f2 <ff_memfree>
c0006153:	83 c4 10             	add    esp,0x10
c0006156:	83 c4 50             	add    esp,0x50
c0006159:	89 d8                	mov    eax,ebx
c000615b:	5b                   	pop    ebx
c000615c:	5e                   	pop    esi
c000615d:	5f                   	pop    edi
c000615e:	c3                   	ret    

c000615f <f_getfree>:
c000615f:	55                   	push   ebp
c0006160:	31 c9                	xor    ecx,ecx
c0006162:	57                   	push   edi
c0006163:	56                   	push   esi
c0006164:	53                   	push   ebx
c0006165:	83 ec 5c             	sub    esp,0x5c
c0006168:	8d 54 24 24          	lea    edx,[esp+0x24]
c000616c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006170:	e8 c4 c4 ff ff       	call   c0002639 <mount_volume>
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	85 c0                	test   eax,eax
c000617b:	0f 85 9d 01 00 00    	jne    c000631e <f_getfree+0x1bf>
c0006181:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006185:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006189:	89 02                	mov    DWORD PTR [edx],eax
c000618b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000618e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006191:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006194:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006198:	39 f2                	cmp    edx,esi
c000619a:	77 0b                	ja     c00061a7 <f_getfree+0x48>
c000619c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061a0:	89 10                	mov    DWORD PTR [eax],edx
c00061a2:	e9 77 01 00 00       	jmp    c000631e <f_getfree+0x1bf>
c00061a7:	8a 10                	mov    dl,BYTE PTR [eax]
c00061a9:	80 fa 01             	cmp    dl,0x1
c00061ac:	75 3a                	jne    c00061e8 <f_getfree+0x89>
c00061ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00061b2:	be 02 00 00 00       	mov    esi,0x2
c00061b7:	31 db                	xor    ebx,ebx
c00061b9:	89 f2                	mov    edx,esi
c00061bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00061bf:	e8 4b cd ff ff       	call   c0002f0f <get_fat>
c00061c4:	83 f8 ff             	cmp    eax,0xffffffff
c00061c7:	0f 84 28 01 00 00    	je     c00062f5 <f_getfree+0x196>
c00061cd:	83 f8 01             	cmp    eax,0x1
c00061d0:	0f 84 29 01 00 00    	je     c00062ff <f_getfree+0x1a0>
c00061d6:	83 d3 00             	adc    ebx,0x0
c00061d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061dd:	46                   	inc    esi
c00061de:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061e1:	77 d6                	ja     c00061b9 <f_getfree+0x5a>
c00061e3:	e9 25 01 00 00       	jmp    c000630d <f_getfree+0x1ae>
c00061e8:	80 fa 04             	cmp    dl,0x4
c00061eb:	0f 85 88 00 00 00    	jne    c0006279 <f_getfree+0x11a>
c00061f1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061f4:	31 ed                	xor    ebp,ebp
c00061f6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006201:	31 db                	xor    ebx,ebx
c0006203:	85 ed                	test   ebp,ebp
c0006205:	75 3f                	jne    c0006246 <f_getfree+0xe7>
c0006207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000620b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000620f:	83 c0 01             	add    eax,0x1
c0006212:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006216:	83 d2 00             	adc    edx,0x0
c0006219:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000621d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006221:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006225:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006229:	e8 59 c1 ff ff       	call   c0002387 <move_window>
c000622e:	85 c0                	test   eax,eax
c0006230:	0f 85 d3 00 00 00    	jne    c0006309 <f_getfree+0x1aa>
c0006236:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000623a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000623e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006242:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006246:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000624a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000624d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006251:	89 cf                	mov    edi,ecx
c0006253:	85 f6                	test   esi,esi
c0006255:	74 12                	je     c0006269 <f_getfree+0x10a>
c0006257:	88 c1                	mov    cl,al
c0006259:	83 e1 01             	and    ecx,0x1
c000625c:	80 f9 01             	cmp    cl,0x1
c000625f:	83 d3 00             	adc    ebx,0x0
c0006262:	d0 e8                	shr    al,1
c0006264:	4e                   	dec    esi
c0006265:	39 fe                	cmp    esi,edi
c0006267:	75 ea                	jne    c0006253 <f_getfree+0xf4>
c0006269:	45                   	inc    ebp
c000626a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006270:	85 f6                	test   esi,esi
c0006272:	75 8f                	jne    c0006203 <f_getfree+0xa4>
c0006274:	e9 94 00 00 00       	jmp    c000630d <f_getfree+0x1ae>
c0006279:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000627c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000627f:	31 f6                	xor    esi,esi
c0006281:	31 db                	xor    ebx,ebx
c0006283:	85 f6                	test   esi,esi
c0006285:	75 1b                	jne    c00062a2 <f_getfree+0x143>
c0006287:	89 d7                	mov    edi,edx
c0006289:	89 cd                	mov    ebp,ecx
c000628b:	83 c7 01             	add    edi,0x1
c000628e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006292:	83 d5 00             	adc    ebp,0x0
c0006295:	e8 ed c0 ff ff       	call   c0002387 <move_window>
c000629a:	85 c0                	test   eax,eax
c000629c:	75 6b                	jne    c0006309 <f_getfree+0x1aa>
c000629e:	89 fa                	mov    edx,edi
c00062a0:	89 e9                	mov    ecx,ebp
c00062a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00062aa:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00062ae:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00062b1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00062b5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00062b9:	75 11                	jne    c00062cc <f_getfree+0x16d>
c00062bb:	e8 e9 b8 ff ff       	call   c0001ba9 <ld_word>
c00062c0:	66 83 f8 01          	cmp    ax,0x1
c00062c4:	83 d3 00             	adc    ebx,0x0
c00062c7:	83 c6 02             	add    esi,0x2
c00062ca:	eb 13                	jmp    c00062df <f_getfree+0x180>
c00062cc:	e8 e5 b8 ff ff       	call   c0001bb6 <ld_dword>
c00062d1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00062d6:	83 f8 01             	cmp    eax,0x1
c00062d9:	83 d3 00             	adc    ebx,0x0
c00062dc:	83 c6 04             	add    esi,0x4
c00062df:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062ed:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062f1:	75 90                	jne    c0006283 <f_getfree+0x124>
c00062f3:	eb 18                	jmp    c000630d <f_getfree+0x1ae>
c00062f5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062fd:	eb 0e                	jmp    c000630d <f_getfree+0x1ae>
c00062ff:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006307:	eb 04                	jmp    c000630d <f_getfree+0x1ae>
c0006309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000630d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006311:	89 18                	mov    DWORD PTR [eax],ebx
c0006313:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006317:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000631a:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000631e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006322:	83 c4 5c             	add    esp,0x5c
c0006325:	5b                   	pop    ebx
c0006326:	5e                   	pop    esi
c0006327:	5f                   	pop    edi
c0006328:	5d                   	pop    ebp
c0006329:	c3                   	ret    

c000632a <f_truncate>:
c000632a:	56                   	push   esi
c000632b:	53                   	push   ebx
c000632c:	83 ec 14             	sub    esp,0x14
c000632f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006333:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006337:	89 d8                	mov    eax,ebx
c0006339:	e8 6e bf ff ff       	call   c00022ac <validate>
c000633e:	89 c6                	mov    esi,eax
c0006340:	85 c0                	test   eax,eax
c0006342:	0f 85 d2 00 00 00    	jne    c000641a <f_truncate+0xf0>
c0006348:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000634c:	85 f6                	test   esi,esi
c000634e:	0f 85 c6 00 00 00    	jne    c000641a <f_truncate+0xf0>
c0006354:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006358:	0f 84 b7 00 00 00    	je     c0006415 <f_truncate+0xeb>
c000635e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006361:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006364:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006367:	89 d1                	mov    ecx,edx
c0006369:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000636c:	0f 83 a8 00 00 00    	jae    c000641a <f_truncate+0xf0>
c0006372:	09 c2                	or     edx,eax
c0006374:	75 15                	jne    c000638b <f_truncate+0x61>
c0006376:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006379:	31 c9                	xor    ecx,ecx
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 7a d0 ff ff       	call   c00033fc <remove_chain>
c0006382:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006389:	eb 35                	jmp    c00063c0 <f_truncate+0x96>
c000638b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000638e:	89 d8                	mov    eax,ebx
c0006390:	e8 7a cb ff ff       	call   c0002f0f <get_fat>
c0006395:	89 c2                	mov    edx,eax
c0006397:	b8 01 00 00 00       	mov    eax,0x1
c000639c:	83 fa ff             	cmp    edx,0xffffffff
c000639f:	74 1f                	je     c00063c0 <f_truncate+0x96>
c00063a1:	b8 02 00 00 00       	mov    eax,0x2
c00063a6:	83 fa 01             	cmp    edx,0x1
c00063a9:	74 15                	je     c00063c0 <f_truncate+0x96>
c00063ab:	31 c0                	xor    eax,eax
c00063ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063b1:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00063b4:	76 0a                	jbe    c00063c0 <f_truncate+0x96>
c00063b6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00063b9:	89 d8                	mov    eax,ebx
c00063bb:	e8 3c d0 ff ff       	call   c00033fc <remove_chain>
c00063c0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00063c3:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00063c6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00063c9:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00063cc:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00063cf:	83 ca 40             	or     edx,0x40
c00063d2:	85 c0                	test   eax,eax
c00063d4:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00063d7:	75 35                	jne    c000640e <f_truncate+0xe4>
c00063d9:	84 d2                	test   dl,dl
c00063db:	79 3d                	jns    c000641a <f_truncate+0xf0>
c00063dd:	83 ec 0c             	sub    esp,0xc
c00063e0:	8d 43 50             	lea    eax,[ebx+0x50]
c00063e3:	6a 01                	push   0x1
c00063e5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063eb:	50                   	push   eax
c00063ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063f4:	50                   	push   eax
c00063f5:	e8 7a b7 ff ff       	call   c0001b74 <disk_write>
c00063fa:	83 c4 20             	add    esp,0x20
c00063fd:	85 c0                	test   eax,eax
c00063ff:	75 08                	jne    c0006409 <f_truncate+0xdf>
c0006401:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006405:	31 f6                	xor    esi,esi
c0006407:	eb 11                	jmp    c000641a <f_truncate+0xf0>
c0006409:	b8 01 00 00 00       	mov    eax,0x1
c000640e:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006411:	89 c6                	mov    esi,eax
c0006413:	eb 05                	jmp    c000641a <f_truncate+0xf0>
c0006415:	be 07 00 00 00       	mov    esi,0x7
c000641a:	89 f0                	mov    eax,esi
c000641c:	83 c4 14             	add    esp,0x14
c000641f:	5b                   	pop    ebx
c0006420:	5e                   	pop    esi
c0006421:	c3                   	ret    

c0006422 <f_unlink>:
c0006422:	56                   	push   esi
c0006423:	b9 02 00 00 00       	mov    ecx,0x2
c0006428:	53                   	push   ebx
c0006429:	81 ec e4 00 00 00    	sub    esp,0xe4
c000642f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006433:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000643a:	e8 fa c1 ff ff       	call   c0002639 <mount_volume>
c000643f:	85 c0                	test   eax,eax
c0006441:	0f 85 55 01 00 00    	jne    c000659c <f_unlink+0x17a>
c0006447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000644b:	83 ec 0c             	sub    esp,0xc
c000644e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006452:	68 60 04 00 00       	push   0x460
c0006457:	e8 80 1f 00 00       	call   c00083dc <ff_memalloc>
c000645c:	83 c4 10             	add    esp,0x10
c000645f:	89 c3                	mov    ebx,eax
c0006461:	b8 11 00 00 00       	mov    eax,0x11
c0006466:	85 db                	test   ebx,ebx
c0006468:	0f 84 2e 01 00 00    	je     c000659c <f_unlink+0x17a>
c000646e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006472:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006478:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000647b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000647e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006485:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006489:	e8 21 e9 ff ff       	call   c0004daf <follow_path>
c000648e:	85 c0                	test   eax,eax
c0006490:	0f 85 f2 00 00 00    	jne    c0006588 <f_unlink+0x166>
c0006496:	b8 06 00 00 00       	mov    eax,0x6
c000649b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00064a3:	0f 88 df 00 00 00    	js     c0006588 <f_unlink+0x166>
c00064a9:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00064ae:	74 0a                	je     c00064ba <f_unlink+0x98>
c00064b0:	b8 07 00 00 00       	mov    eax,0x7
c00064b5:	e9 ce 00 00 00       	jmp    c0006588 <f_unlink+0x166>
c00064ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00064be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00064c2:	8a 02                	mov    al,BYTE PTR [edx]
c00064c4:	3c 04                	cmp    al,0x4
c00064c6:	75 12                	jne    c00064da <f_unlink+0xb8>
c00064c8:	8d 42 10             	lea    eax,[edx+0x10]
c00064cb:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064cf:	e8 a1 e8 ff ff       	call   c0004d75 <init_alloc_info.isra.2>
c00064d4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00064d8:	eb 0e                	jmp    c00064e8 <f_unlink+0xc6>
c00064da:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064e1:	e8 3e e8 ff ff       	call   c0004d24 <ld_clust.isra.0>
c00064e6:	89 c6                	mov    esi,eax
c00064e8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064ed:	75 12                	jne    c0006501 <f_unlink+0xdf>
c00064ef:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064f3:	e8 94 d6 ff ff       	call   c0003b8c <dir_remove>
c00064f8:	85 c0                	test   eax,eax
c00064fa:	74 6c                	je     c0006568 <f_unlink+0x146>
c00064fc:	e9 87 00 00 00       	jmp    c0006588 <f_unlink+0x166>
c0006501:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006505:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000650c:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006513:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006516:	75 21                	jne    c0006539 <f_unlink+0x117>
c0006518:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000651c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006520:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006527:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000652e:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006532:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006539:	31 d2                	xor    edx,edx
c000653b:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006542:	e8 be cb ff ff       	call   c0003105 <dir_sdi>
c0006547:	85 c0                	test   eax,eax
c0006549:	75 3d                	jne    c0006588 <f_unlink+0x166>
c000654b:	31 d2                	xor    edx,edx
c000654d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006554:	e8 bc d3 ff ff       	call   c0003915 <dir_read>
c0006559:	85 c0                	test   eax,eax
c000655b:	0f 84 4f ff ff ff    	je     c00064b0 <f_unlink+0x8e>
c0006561:	83 f8 04             	cmp    eax,0x4
c0006564:	75 22                	jne    c0006588 <f_unlink+0x166>
c0006566:	eb 87                	jmp    c00064ef <f_unlink+0xcd>
c0006568:	85 f6                	test   esi,esi
c000656a:	75 0b                	jne    c0006577 <f_unlink+0x155>
c000656c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006570:	e8 3d df ff ff       	call   c00044b2 <sync_fs>
c0006575:	eb 11                	jmp    c0006588 <f_unlink+0x166>
c0006577:	31 c9                	xor    ecx,ecx
c0006579:	89 f2                	mov    edx,esi
c000657b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000657f:	e8 78 ce ff ff       	call   c00033fc <remove_chain>
c0006584:	85 c0                	test   eax,eax
c0006586:	74 e4                	je     c000656c <f_unlink+0x14a>
c0006588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000658c:	83 ec 0c             	sub    esp,0xc
c000658f:	53                   	push   ebx
c0006590:	e8 5d 1e 00 00       	call   c00083f2 <ff_memfree>
c0006595:	83 c4 10             	add    esp,0x10
c0006598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000659c:	81 c4 e4 00 00 00    	add    esp,0xe4
c00065a2:	5b                   	pop    ebx
c00065a3:	5e                   	pop    esi
c00065a4:	c3                   	ret    

c00065a5 <f_mkdir>:
c00065a5:	57                   	push   edi
c00065a6:	b9 02 00 00 00       	mov    ecx,0x2
c00065ab:	56                   	push   esi
c00065ac:	53                   	push   ebx
c00065ad:	83 c4 80             	add    esp,0xffffff80
c00065b0:	8d 54 24 08          	lea    edx,[esp+0x8]
c00065b4:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00065bb:	e8 79 c0 ff ff       	call   c0002639 <mount_volume>
c00065c0:	89 c3                	mov    ebx,eax
c00065c2:	85 c0                	test   eax,eax
c00065c4:	0f 85 fe 01 00 00    	jne    c00067c8 <f_mkdir+0x223>
c00065ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ce:	bb 11 00 00 00       	mov    ebx,0x11
c00065d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00065d7:	83 ec 0c             	sub    esp,0xc
c00065da:	68 60 04 00 00       	push   0x460
c00065df:	e8 f8 1d 00 00       	call   c00083dc <ff_memalloc>
c00065e4:	83 c4 10             	add    esp,0x10
c00065e7:	89 c7                	mov    edi,eax
c00065e9:	85 c0                	test   eax,eax
c00065eb:	0f 84 d7 01 00 00    	je     c00067c8 <f_mkdir+0x223>
c00065f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065fb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065fe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006601:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006608:	8d 44 24 34          	lea    eax,[esp+0x34]
c000660c:	e8 9e e7 ff ff       	call   c0004daf <follow_path>
c0006611:	89 c3                	mov    ebx,eax
c0006613:	85 c0                	test   eax,eax
c0006615:	74 3e                	je     c0006655 <f_mkdir+0xb0>
c0006617:	83 f8 04             	cmp    eax,0x4
c000661a:	75 3e                	jne    c000665a <f_mkdir+0xb5>
c000661c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006620:	31 d2                	xor    edx,edx
c0006622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006626:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000662a:	e8 ce cb ff ff       	call   c00031fd <create_chain>
c000662f:	89 c6                	mov    esi,eax
c0006631:	85 c0                	test   eax,eax
c0006633:	74 0c                	je     c0006641 <f_mkdir+0x9c>
c0006635:	bb 02 00 00 00       	mov    ebx,0x2
c000663a:	83 f8 01             	cmp    eax,0x1
c000663d:	74 07                	je     c0006646 <f_mkdir+0xa1>
c000663f:	eb 2a                	jmp    c000666b <f_mkdir+0xc6>
c0006641:	bb 07 00 00 00       	mov    ebx,0x7
c0006646:	31 c9                	xor    ecx,ecx
c0006648:	89 f2                	mov    edx,esi
c000664a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000664e:	e8 a9 cd ff ff       	call   c00033fc <remove_chain>
c0006653:	eb 05                	jmp    c000665a <f_mkdir+0xb5>
c0006655:	bb 08 00 00 00       	mov    ebx,0x8
c000665a:	83 ec 0c             	sub    esp,0xc
c000665d:	57                   	push   edi
c000665e:	e8 8f 1d 00 00       	call   c00083f2 <ff_memfree>
c0006663:	83 c4 10             	add    esp,0x10
c0006666:	e9 5d 01 00 00       	jmp    c00067c8 <f_mkdir+0x223>
c000666b:	bb 01 00 00 00       	mov    ebx,0x1
c0006670:	83 f8 ff             	cmp    eax,0xffffffff
c0006673:	74 d1                	je     c0006646 <f_mkdir+0xa1>
c0006675:	89 f2                	mov    edx,esi
c0006677:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667b:	e8 c4 ce ff ff       	call   c0003544 <dir_clear>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	75 c0                	jne    c0006646 <f_mkdir+0xa1>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000668d:	74 69                	je     c00066f8 <f_mkdir+0x153>
c000668f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006694:	83 c0 54             	add    eax,0x54
c0006697:	ba 20 00 00 00       	mov    edx,0x20
c000669c:	e8 9c b5 ff ff       	call   c0001c3d <mem_set>
c00066a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00066aa:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00066ae:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00066b2:	83 c0 6a             	add    eax,0x6a
c00066b5:	e8 65 b5 ff ff       	call   c0001c1f <st_dword>
c00066ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066be:	89 f1                	mov    ecx,esi
c00066c0:	8d 50 54             	lea    edx,[eax+0x54]
c00066c3:	e8 85 e6 ff ff       	call   c0004d4d <st_clust.isra.1>
c00066c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066cc:	b9 20 00 00 00       	mov    ecx,0x20
c00066d1:	8d 50 54             	lea    edx,[eax+0x54]
c00066d4:	83 c0 74             	add    eax,0x74
c00066d7:	e8 4c b5 ff ff       	call   c0001c28 <mem_cpy>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066e4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066e8:	8d 50 74             	lea    edx,[eax+0x74]
c00066eb:	e8 5d e6 ff ff       	call   c0004d4d <st_clust.isra.1>
c00066f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066f8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066fc:	e8 2f db ff ff       	call   c0004230 <dir_register>
c0006701:	89 c3                	mov    ebx,eax
c0006703:	85 c0                	test   eax,eax
c0006705:	0f 85 3b ff ff ff    	jne    c0006646 <f_mkdir+0xa1>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006712:	75 74                	jne    c0006788 <f_mkdir+0x1e3>
c0006714:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006717:	ba 00 00 21 50       	mov    edx,0x50210000
c000671c:	83 c0 0c             	add    eax,0xc
c000671f:	e8 fb b4 ff ff       	call   c0001c1f <st_dword>
c0006724:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006728:	89 f2                	mov    edx,esi
c000672a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000672d:	83 c0 34             	add    eax,0x34
c0006730:	e8 ea b4 ff ff       	call   c0001c1f <st_dword>
c0006735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006739:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000673d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006740:	c1 e2 09             	shl    edx,0x9
c0006743:	83 c0 38             	add    eax,0x38
c0006746:	e8 d4 b4 ff ff       	call   c0001c1f <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006753:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006756:	c1 e2 09             	shl    edx,0x9
c0006759:	83 c0 28             	add    eax,0x28
c000675c:	e8 be b4 ff ff       	call   c0001c1f <st_dword>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006768:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000676c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000676f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006773:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006777:	e8 8b d3 ff ff       	call   c0003b07 <store_xdir>
c000677c:	89 c3                	mov    ebx,eax
c000677e:	85 c0                	test   eax,eax
c0006780:	0f 85 d4 fe ff ff    	jne    c000665a <f_mkdir+0xb5>
c0006786:	eb 30                	jmp    c00067b8 <f_mkdir+0x213>
c0006788:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000678c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006791:	83 c0 16             	add    eax,0x16
c0006794:	e8 86 b4 ff ff       	call   c0001c1f <st_dword>
c0006799:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000679d:	89 f1                	mov    ecx,esi
c000679f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00067a3:	e8 a5 e5 ff ff       	call   c0004d4d <st_clust.isra.1>
c00067a8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00067ac:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067bc:	e8 f1 dc ff ff       	call   c00044b2 <sync_fs>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	e9 92 fe ff ff       	jmp    c000665a <f_mkdir+0xb5>
c00067c8:	83 ec 80             	sub    esp,0xffffff80
c00067cb:	89 d8                	mov    eax,ebx
c00067cd:	5b                   	pop    ebx
c00067ce:	5e                   	pop    esi
c00067cf:	5f                   	pop    edi
c00067d0:	c3                   	ret    

c00067d1 <f_rename>:
c00067d1:	55                   	push   ebp
c00067d2:	57                   	push   edi
c00067d3:	56                   	push   esi
c00067d4:	53                   	push   ebx
c00067d5:	81 ec fc 00 00 00    	sub    esp,0xfc
c00067db:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067e2:	e8 a4 b9 ff ff       	call   c000218b <get_ldnumber>
c00067e7:	b9 02 00 00 00       	mov    ecx,0x2
c00067ec:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067f0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067f7:	e8 3d be ff ff       	call   c0002639 <mount_volume>
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 b5 02 00 00    	jne    c0006ab9 <f_rename+0x2e8>
c0006804:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006808:	83 ec 0c             	sub    esp,0xc
c000680b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000680f:	68 60 04 00 00       	push   0x460
c0006814:	e8 c3 1b 00 00       	call   c00083dc <ff_memalloc>
c0006819:	83 c4 10             	add    esp,0x10
c000681c:	89 c3                	mov    ebx,eax
c000681e:	b8 11 00 00 00       	mov    eax,0x11
c0006823:	85 db                	test   ebx,ebx
c0006825:	0f 84 8e 02 00 00    	je     c0006ab9 <f_rename+0x2e8>
c000682b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682f:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006835:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000683b:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006842:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006846:	e8 64 e5 ff ff       	call   c0004daf <follow_path>
c000684b:	85 c0                	test   eax,eax
c000684d:	0f 85 52 02 00 00    	jne    c0006aa5 <f_rename+0x2d4>
c0006853:	b8 06 00 00 00       	mov    eax,0x6
c0006858:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006860:	0f 85 3f 02 00 00    	jne    c0006aa5 <f_rename+0x2d4>
c0006866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000686a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000686d:	0f 85 05 01 00 00    	jne    c0006978 <f_rename+0x1a7>
c0006873:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006876:	b9 40 00 00 00       	mov    ecx,0x40
c000687b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000687f:	e8 a4 b3 ff ff       	call   c0001c28 <mem_cpy>
c0006884:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006889:	8d 54 24 58          	lea    edx,[esp+0x58]
c000688d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006894:	e8 8f b3 ff ff       	call   c0001c28 <mem_cpy>
c0006899:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00068a0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068a7:	e8 03 e5 ff ff       	call   c0004daf <follow_path>
c00068ac:	85 c0                	test   eax,eax
c00068ae:	75 29                	jne    c00068d9 <f_rename+0x108>
c00068b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00068b4:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00068bb:	74 0a                	je     c00068c7 <f_rename+0xf6>
c00068bd:	b8 08 00 00 00       	mov    eax,0x8
c00068c2:	e9 de 01 00 00       	jmp    c0006aa5 <f_rename+0x2d4>
c00068c7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00068ce:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00068d5:	75 e6                	jne    c00068bd <f_rename+0xec>
c00068d7:	eb 09                	jmp    c00068e2 <f_rename+0x111>
c00068d9:	83 f8 04             	cmp    eax,0x4
c00068dc:	0f 85 c3 01 00 00    	jne    c0006aa5 <f_rename+0x2d4>
c00068e2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068e9:	e8 42 d9 ff ff       	call   c0004230 <dir_register>
c00068ee:	85 c0                	test   eax,eax
c00068f0:	0f 85 af 01 00 00    	jne    c0006aa5 <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068fd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006900:	89 c5                	mov    ebp,eax
c0006902:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006905:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006909:	8d 46 24             	lea    eax,[esi+0x24]
c000690c:	e8 98 b2 ff ff       	call   c0001ba9 <ld_word>
c0006911:	b9 40 00 00 00       	mov    ecx,0x40
c0006916:	89 c7                	mov    edi,eax
c0006918:	8d 54 24 18          	lea    edx,[esp+0x18]
c000691c:	89 f0                	mov    eax,esi
c000691e:	e8 05 b3 ff ff       	call   c0001c28 <mem_cpy>
c0006923:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006927:	89 e9                	mov    ecx,ebp
c0006929:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000692c:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000692f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006937:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000693a:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000693d:	0f b7 d7             	movzx  edx,di
c0006940:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006943:	83 c0 24             	add    eax,0x24
c0006946:	e8 d0 b2 ff ff       	call   c0001c1b <st_word>
c000694b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000694f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006952:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006955:	a8 10                	test   al,0x10
c0006957:	75 06                	jne    c000695f <f_rename+0x18e>
c0006959:	83 c8 20             	or     eax,0x20
c000695c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000695f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006966:	e8 9c d1 ff ff       	call   c0003b07 <store_xdir>
c000696b:	85 c0                	test   eax,eax
c000696d:	0f 84 1c 01 00 00    	je     c0006a8f <f_rename+0x2be>
c0006973:	e9 2d 01 00 00       	jmp    c0006aa5 <f_rename+0x2d4>
c0006978:	b9 20 00 00 00       	mov    ecx,0x20
c000697d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006984:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006988:	e8 9b b2 ff ff       	call   c0001c28 <mem_cpy>
c000698d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006992:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006996:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699d:	e8 86 b2 ff ff       	call   c0001c28 <mem_cpy>
c00069a2:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00069a9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b0:	e8 fa e3 ff ff       	call   c0004daf <follow_path>
c00069b5:	85 c0                	test   eax,eax
c00069b7:	75 27                	jne    c00069e0 <f_rename+0x20f>
c00069b9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00069bd:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069c4:	0f 85 f3 fe ff ff    	jne    c00068bd <f_rename+0xec>
c00069ca:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069d1:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069d8:	0f 85 df fe ff ff    	jne    c00068bd <f_rename+0xec>
c00069de:	eb 09                	jmp    c00069e9 <f_rename+0x218>
c00069e0:	83 f8 04             	cmp    eax,0x4
c00069e3:	0f 85 bc 00 00 00    	jne    c0006aa5 <f_rename+0x2d4>
c00069e9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069f0:	e8 3b d8 ff ff       	call   c0004230 <dir_register>
c00069f5:	85 c0                	test   eax,eax
c00069f7:	0f 85 a8 00 00 00    	jne    c0006aa5 <f_rename+0x2d4>
c00069fd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a04:	b9 13 00 00 00       	mov    ecx,0x13
c0006a09:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a0c:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a10:	e8 13 b2 ff ff       	call   c0001c28 <mem_cpy>
c0006a15:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a19:	a8 10                	test   al,0x10
c0006a1b:	75 03                	jne    c0006a20 <f_rename+0x24f>
c0006a1d:	83 c8 20             	or     eax,0x20
c0006a20:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006a23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a27:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a2b:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006a2f:	74 5e                	je     c0006a8f <f_rename+0x2be>
c0006a31:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006a38:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006a3c:	74 51                	je     c0006a8f <f_rename+0x2be>
c0006a3e:	89 f2                	mov    edx,esi
c0006a40:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a44:	8a 07                	mov    al,BYTE PTR [edi]
c0006a46:	e8 d9 e2 ff ff       	call   c0004d24 <ld_clust.isra.0>
c0006a4b:	89 c2                	mov    edx,eax
c0006a4d:	89 f8                	mov    eax,edi
c0006a4f:	e8 ee b3 ff ff       	call   c0001e42 <clst2sect>
c0006a54:	89 c6                	mov    esi,eax
c0006a56:	89 d1                	mov    ecx,edx
c0006a58:	b8 02 00 00 00       	mov    eax,0x2
c0006a5d:	09 f2                	or     edx,esi
c0006a5f:	74 44                	je     c0006aa5 <f_rename+0x2d4>
c0006a61:	89 f2                	mov    edx,esi
c0006a63:	89 f8                	mov    eax,edi
c0006a65:	e8 1d b9 ff ff       	call   c0002387 <move_window>
c0006a6a:	85 c0                	test   eax,eax
c0006a6c:	75 37                	jne    c0006aa5 <f_rename+0x2d4>
c0006a6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a72:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a76:	75 17                	jne    c0006a8f <f_rename+0x2be>
c0006a78:	8d 50 74             	lea    edx,[eax+0x74]
c0006a7b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a82:	e8 c6 e2 ff ff       	call   c0004d4d <st_clust.isra.1>
c0006a87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a8f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a93:	e8 f4 d0 ff ff       	call   c0003b8c <dir_remove>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	75 09                	jne    c0006aa5 <f_rename+0x2d4>
c0006a9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa0:	e8 0d da ff ff       	call   c00044b2 <sync_fs>
c0006aa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006aa9:	83 ec 0c             	sub    esp,0xc
c0006aac:	53                   	push   ebx
c0006aad:	e8 40 19 00 00       	call   c00083f2 <ff_memfree>
c0006ab2:	83 c4 10             	add    esp,0x10
c0006ab5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ab9:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006abf:	5b                   	pop    ebx
c0006ac0:	5e                   	pop    esi
c0006ac1:	5f                   	pop    edi
c0006ac2:	5d                   	pop    ebp
c0006ac3:	c3                   	ret    

c0006ac4 <f_chmod>:
c0006ac4:	57                   	push   edi
c0006ac5:	b9 02 00 00 00       	mov    ecx,0x2
c0006aca:	56                   	push   esi
c0006acb:	53                   	push   ebx
c0006acc:	83 ec 60             	sub    esp,0x60
c0006acf:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006ad3:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006ad7:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006adb:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006adf:	e8 55 bb ff ff       	call   c0002639 <mount_volume>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	0f 85 af 00 00 00    	jne    c0006b9b <f_chmod+0xd7>
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 ec 0c             	sub    esp,0xc
c0006af3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006af7:	68 60 04 00 00       	push   0x460
c0006afc:	e8 db 18 00 00       	call   c00083dc <ff_memalloc>
c0006b01:	83 c4 10             	add    esp,0x10
c0006b04:	89 c6                	mov    esi,eax
c0006b06:	b8 11 00 00 00       	mov    eax,0x11
c0006b0b:	85 f6                	test   esi,esi
c0006b0d:	0f 84 88 00 00 00    	je     c0006b9b <f_chmod+0xd7>
c0006b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b17:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b1d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006b23:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006b27:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2b:	e8 7f e2 ff ff       	call   c0004daf <follow_path>
c0006b30:	85 c0                	test   eax,eax
c0006b32:	75 53                	jne    c0006b87 <f_chmod+0xc3>
c0006b34:	b8 06 00 00 00       	mov    eax,0x6
c0006b39:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b3e:	75 47                	jne    c0006b87 <f_chmod+0xc3>
c0006b40:	89 f9                	mov    ecx,edi
c0006b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b46:	83 e1 27             	and    ecx,0x27
c0006b49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4c:	75 1d                	jne    c0006b6b <f_chmod+0xa7>
c0006b4e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b51:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b54:	21 cb                	and    ebx,ecx
c0006b56:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b59:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b60:	e8 a2 cf ff ff       	call   c0003b07 <store_xdir>
c0006b65:	85 c0                	test   eax,eax
c0006b67:	75 1e                	jne    c0006b87 <f_chmod+0xc3>
c0006b69:	eb 13                	jmp    c0006b7e <f_chmod+0xba>
c0006b6b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b6f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b72:	21 cb                	and    ebx,ecx
c0006b74:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b77:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b7a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b82:	e8 2b d9 ff ff       	call   c00044b2 <sync_fs>
c0006b87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	56                   	push   esi
c0006b8f:	e8 5e 18 00 00       	call   c00083f2 <ff_memfree>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b9b:	83 c4 60             	add    esp,0x60
c0006b9e:	5b                   	pop    ebx
c0006b9f:	5e                   	pop    esi
c0006ba0:	5f                   	pop    edi
c0006ba1:	c3                   	ret    

c0006ba2 <f_utime>:
c0006ba2:	56                   	push   esi
c0006ba3:	b9 02 00 00 00       	mov    ecx,0x2
c0006ba8:	53                   	push   ebx
c0006ba9:	83 ec 64             	sub    esp,0x64
c0006bac:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006bb0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bb4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006bb8:	e8 7c ba ff ff       	call   c0002639 <mount_volume>
c0006bbd:	85 c0                	test   eax,eax
c0006bbf:	0f 85 b5 00 00 00    	jne    c0006c7a <f_utime+0xd8>
c0006bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc9:	83 ec 0c             	sub    esp,0xc
c0006bcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bd0:	68 60 04 00 00       	push   0x460
c0006bd5:	e8 02 18 00 00       	call   c00083dc <ff_memalloc>
c0006bda:	83 c4 10             	add    esp,0x10
c0006bdd:	89 c3                	mov    ebx,eax
c0006bdf:	b8 11 00 00 00       	mov    eax,0x11
c0006be4:	85 db                	test   ebx,ebx
c0006be6:	0f 84 8e 00 00 00    	je     c0006c7a <f_utime+0xd8>
c0006bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bf6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bf9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bfc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c00:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c04:	e8 a6 e1 ff ff       	call   c0004daf <follow_path>
c0006c09:	85 c0                	test   eax,eax
c0006c0b:	75 59                	jne    c0006c66 <f_utime+0xc4>
c0006c0d:	b8 06 00 00 00       	mov    eax,0x6
c0006c12:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c17:	75 4d                	jne    c0006c66 <f_utime+0xc4>
c0006c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1d:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c21:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006c25:	c1 e2 10             	shl    edx,0x10
c0006c28:	09 ca                	or     edx,ecx
c0006c2a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c2d:	75 1a                	jne    c0006c49 <f_utime+0xa7>
c0006c2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c32:	83 c0 0c             	add    eax,0xc
c0006c35:	e8 e5 af ff ff       	call   c0001c1f <st_dword>
c0006c3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c3e:	e8 c4 ce ff ff       	call   c0003b07 <store_xdir>
c0006c43:	85 c0                	test   eax,eax
c0006c45:	75 1f                	jne    c0006c66 <f_utime+0xc4>
c0006c47:	eb 14                	jmp    c0006c5d <f_utime+0xbb>
c0006c49:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c4d:	83 c0 16             	add    eax,0x16
c0006c50:	e8 ca af ff ff       	call   c0001c1f <st_dword>
c0006c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c59:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c61:	e8 4c d8 ff ff       	call   c00044b2 <sync_fs>
c0006c66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c6a:	83 ec 0c             	sub    esp,0xc
c0006c6d:	53                   	push   ebx
c0006c6e:	e8 7f 17 00 00       	call   c00083f2 <ff_memfree>
c0006c73:	83 c4 10             	add    esp,0x10
c0006c76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c7a:	83 c4 64             	add    esp,0x64
c0006c7d:	5b                   	pop    ebx
c0006c7e:	5e                   	pop    esi
c0006c7f:	c3                   	ret    

c0006c80 <f_getlabel>:
c0006c80:	55                   	push   ebp
c0006c81:	31 c9                	xor    ecx,ecx
c0006c83:	57                   	push   edi
c0006c84:	56                   	push   esi
c0006c85:	53                   	push   ebx
c0006c86:	83 ec 6c             	sub    esp,0x6c
c0006c89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c8d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c94:	e8 a0 b9 ff ff       	call   c0002639 <mount_volume>
c0006c99:	89 c6                	mov    esi,eax
c0006c9b:	85 c0                	test   eax,eax
c0006c9d:	0f 85 c1 01 00 00    	jne    c0006e64 <f_getlabel+0x1e4>
c0006ca3:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006cab:	0f 84 5f 01 00 00    	je     c0006e10 <f_getlabel+0x190>
c0006cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb5:	31 d2                	xor    edx,edx
c0006cb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006cbb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006cc3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc7:	e8 39 c4 ff ff       	call   c0003105 <dir_sdi>
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	0f 85 2d 01 00 00    	jne    c0006e01 <f_getlabel+0x181>
c0006cd4:	ba 01 00 00 00       	mov    edx,0x1
c0006cd9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cdd:	e8 33 cc ff ff       	call   c0003915 <dir_read>
c0006ce2:	85 c0                	test   eax,eax
c0006ce4:	0f 85 17 01 00 00    	jne    c0006e01 <f_getlabel+0x181>
c0006cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cee:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf1:	74 09                	je     c0006cfc <f_getlabel+0x7c>
c0006cf3:	31 db                	xor    ebx,ebx
c0006cf5:	31 c9                	xor    ecx,ecx
c0006cf7:	e9 c8 00 00 00       	jmp    c0006dc4 <f_getlabel+0x144>
c0006cfc:	31 ed                	xor    ebp,ebp
c0006cfe:	31 db                	xor    ebx,ebx
c0006d00:	31 ff                	xor    edi,edi
c0006d02:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d06:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d0a:	39 fa                	cmp    edx,edi
c0006d0c:	76 4b                	jbe    c0006d59 <f_getlabel+0xd9>
c0006d0e:	47                   	inc    edi
c0006d0f:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d12:	01 d0                	add    eax,edx
c0006d14:	e8 90 ae ff ff       	call   c0001ba9 <ld_word>
c0006d19:	66 85 ed             	test   bp,bp
c0006d1c:	75 0d                	jne    c0006d2b <f_getlabel+0xab>
c0006d1e:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006d24:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006d29:	76 28                	jbe    c0006d53 <f_getlabel+0xd3>
c0006d2b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d32:	89 e9                	mov    ecx,ebp
c0006d34:	01 da                	add    edx,ebx
c0006d36:	c1 e1 10             	shl    ecx,0x10
c0006d39:	0f b7 c0             	movzx  eax,ax
c0006d3c:	09 c8                	or     eax,ecx
c0006d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0006d43:	e8 01 b0 ff ff       	call   c0001d49 <put_utf>
c0006d48:	84 c0                	test   al,al
c0006d4a:	74 0b                	je     c0006d57 <f_getlabel+0xd7>
c0006d4c:	0f b6 c0             	movzx  eax,al
c0006d4f:	01 c3                	add    ebx,eax
c0006d51:	31 c0                	xor    eax,eax
c0006d53:	89 c5                	mov    ebp,eax
c0006d55:	eb ab                	jmp    c0006d02 <f_getlabel+0x82>
c0006d57:	31 db                	xor    ebx,ebx
c0006d59:	66 85 ed             	test   bp,bp
c0006d5c:	74 02                	je     c0006d60 <f_getlabel+0xe0>
c0006d5e:	31 db                	xor    ebx,ebx
c0006d60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d67:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d6b:	e9 a0 00 00 00       	jmp    c0006e10 <f_getlabel+0x190>
c0006d70:	83 ff 0b             	cmp    edi,0xb
c0006d73:	74 11                	je     c0006d86 <f_getlabel+0x106>
c0006d75:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d7e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d81:	c1 e0 08             	shl    eax,0x8
c0006d84:	09 c2                	or     edx,eax
c0006d86:	0f b7 d2             	movzx  edx,dx
c0006d89:	50                   	push   eax
c0006d8a:	50                   	push   eax
c0006d8b:	68 b5 01 00 00       	push   0x1b5
c0006d90:	52                   	push   edx
c0006d91:	e8 03 17 00 00       	call   c0008499 <ff_oem2uni>
c0006d96:	83 c4 10             	add    esp,0x10
c0006d99:	66 85 c0             	test   ax,ax
c0006d9c:	74 46                	je     c0006de4 <f_getlabel+0x164>
c0006d9e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006da5:	0f b7 c0             	movzx  eax,ax
c0006da8:	01 da                	add    edx,ebx
c0006daa:	b9 04 00 00 00       	mov    ecx,0x4
c0006daf:	e8 95 af ff ff       	call   c0001d49 <put_utf>
c0006db4:	84 c0                	test   al,al
c0006db6:	74 2c                	je     c0006de4 <f_getlabel+0x164>
c0006db8:	0f b6 c0             	movzx  eax,al
c0006dbb:	01 c3                	add    ebx,eax
c0006dbd:	83 ff 0b             	cmp    edi,0xb
c0006dc0:	74 24                	je     c0006de6 <f_getlabel+0x166>
c0006dc2:	89 f9                	mov    ecx,edi
c0006dc4:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006dc8:	8d 79 01             	lea    edi,[ecx+0x1]
c0006dcb:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006dd0:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006dd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006dd9:	e8 9f ae ff ff       	call   c0001c7d <dbc_1st>
c0006dde:	85 c0                	test   eax,eax
c0006de0:	74 a4                	je     c0006d86 <f_getlabel+0x106>
c0006de2:	eb 8c                	jmp    c0006d70 <f_getlabel+0xf0>
c0006de4:	31 db                	xor    ebx,ebx
c0006de6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ded:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006df0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006df7:	74 17                	je     c0006e10 <f_getlabel+0x190>
c0006df9:	4b                   	dec    ebx
c0006dfa:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dfd:	74 ee                	je     c0006ded <f_getlabel+0x16d>
c0006dff:	eb 0f                	jmp    c0006e10 <f_getlabel+0x190>
c0006e01:	83 f8 04             	cmp    eax,0x4
c0006e04:	75 5c                	jne    c0006e62 <f_getlabel+0x1e2>
c0006e06:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e0d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e10:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e18:	74 4a                	je     c0006e64 <f_getlabel+0x1e4>
c0006e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e21:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006e24:	e8 5e b5 ff ff       	call   c0002387 <move_window>
c0006e29:	89 c6                	mov    esi,eax
c0006e2b:	85 c0                	test   eax,eax
c0006e2d:	75 35                	jne    c0006e64 <f_getlabel+0x1e4>
c0006e2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e33:	b8 43 00 00 00       	mov    eax,0x43
c0006e38:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006e3a:	80 f9 03             	cmp    cl,0x3
c0006e3d:	74 0f                	je     c0006e4e <f_getlabel+0x1ce>
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	80 f9 04             	cmp    cl,0x4
c0006e44:	0f 94 c0             	sete   al
c0006e47:	48                   	dec    eax
c0006e48:	83 e0 c3             	and    eax,0xffffffc3
c0006e4b:	83 c0 64             	add    eax,0x64
c0006e4e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e52:	e8 5f ad ff ff       	call   c0001bb6 <ld_dword>
c0006e57:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e5e:	89 07                	mov    DWORD PTR [edi],eax
c0006e60:	eb 02                	jmp    c0006e64 <f_getlabel+0x1e4>
c0006e62:	89 c6                	mov    esi,eax
c0006e64:	83 c4 6c             	add    esp,0x6c
c0006e67:	89 f0                	mov    eax,esi
c0006e69:	5b                   	pop    ebx
c0006e6a:	5e                   	pop    esi
c0006e6b:	5f                   	pop    edi
c0006e6c:	5d                   	pop    ebp
c0006e6d:	c3                   	ret    

c0006e6e <f_setlabel>:
c0006e6e:	56                   	push   esi
c0006e6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006e74:	53                   	push   ebx
c0006e75:	83 ec 74             	sub    esp,0x74
c0006e78:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e7c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e83:	e8 b1 b7 ff ff       	call   c0002639 <mount_volume>
c0006e88:	89 c6                	mov    esi,eax
c0006e8a:	85 c0                	test   eax,eax
c0006e8c:	0f 85 41 02 00 00    	jne    c00070d3 <f_setlabel+0x265>
c0006e92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e96:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e99:	0f 85 8e 00 00 00    	jne    c0006f2d <f_setlabel+0xbf>
c0006e9f:	b9 16 00 00 00       	mov    ecx,0x16
c0006ea4:	31 d2                	xor    edx,edx
c0006ea6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eaa:	31 db                	xor    ebx,ebx
c0006eac:	e8 8c ad ff ff       	call   c0001c3d <mem_set>
c0006eb1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006eb8:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ebb:	0f 86 0a 01 00 00    	jbe    c0006fcb <f_setlabel+0x15d>
c0006ec1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ec8:	e8 b6 ad ff ff       	call   c0001c83 <tchar2uni>
c0006ecd:	89 c6                	mov    esi,eax
c0006ecf:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ed4:	76 2a                	jbe    c0006f00 <f_setlabel+0x92>
c0006ed6:	83 f8 ff             	cmp    eax,0xffffffff
c0006ed9:	74 05                	je     c0006ee0 <f_setlabel+0x72>
c0006edb:	83 fb 09             	cmp    ebx,0x9
c0006ede:	76 0a                	jbe    c0006eea <f_setlabel+0x7c>
c0006ee0:	be 06 00 00 00       	mov    esi,0x6
c0006ee5:	e9 e9 01 00 00       	jmp    c00070d3 <f_setlabel+0x265>
c0006eea:	89 c2                	mov    edx,eax
c0006eec:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ef0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ef3:	c1 ea 10             	shr    edx,0x10
c0006ef6:	01 c8                	add    eax,ecx
c0006ef8:	43                   	inc    ebx
c0006ef9:	e8 1d ad ff ff       	call   c0001c1b <st_word>
c0006efe:	eb 04                	jmp    c0006f04 <f_setlabel+0x96>
c0006f00:	85 c0                	test   eax,eax
c0006f02:	74 dc                	je     c0006ee0 <f_setlabel+0x72>
c0006f04:	89 f2                	mov    edx,esi
c0006f06:	b8 17 f6 01 c0       	mov    eax,0xc001f617
c0006f0b:	e8 5b ad ff ff       	call   c0001c6b <chk_chr>
c0006f10:	85 c0                	test   eax,eax
c0006f12:	75 cc                	jne    c0006ee0 <f_setlabel+0x72>
c0006f14:	83 fb 0a             	cmp    ebx,0xa
c0006f17:	77 c7                	ja     c0006ee0 <f_setlabel+0x72>
c0006f19:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f1c:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f20:	0f b7 d6             	movzx  edx,si
c0006f23:	01 c8                	add    eax,ecx
c0006f25:	43                   	inc    ebx
c0006f26:	e8 f0 ac ff ff       	call   c0001c1b <st_word>
c0006f2b:	eb 84                	jmp    c0006eb1 <f_setlabel+0x43>
c0006f2d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f32:	ba 20 00 00 00       	mov    edx,0x20
c0006f37:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f3b:	31 db                	xor    ebx,ebx
c0006f3d:	e8 fb ac ff ff       	call   c0001c3d <mem_set>
c0006f42:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f4c:	76 60                	jbe    c0006fae <f_setlabel+0x140>
c0006f4e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f55:	e8 29 ad ff ff       	call   c0001c83 <tchar2uni>
c0006f5a:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f5f:	0f 87 7b ff ff ff    	ja     c0006ee0 <f_setlabel+0x72>
c0006f65:	83 ec 0c             	sub    esp,0xc
c0006f68:	50                   	push   eax
c0006f69:	e8 97 15 00 00       	call   c0008505 <ff_wtoupper>
c0006f6e:	5a                   	pop    edx
c0006f6f:	59                   	pop    ecx
c0006f70:	68 b5 01 00 00       	push   0x1b5
c0006f75:	50                   	push   eax
c0006f76:	e8 8e 14 00 00       	call   c0008409 <ff_uni2oem>
c0006f7b:	83 c4 10             	add    esp,0x10
c0006f7e:	89 c6                	mov    esi,eax
c0006f80:	66 85 c0             	test   ax,ax
c0006f83:	0f 84 57 ff ff ff    	je     c0006ee0 <f_setlabel+0x72>
c0006f89:	0f b7 d0             	movzx  edx,ax
c0006f8c:	b8 10 f6 01 c0       	mov    eax,0xc001f610
c0006f91:	e8 d5 ac ff ff       	call   c0001c6b <chk_chr>
c0006f96:	85 c0                	test   eax,eax
c0006f98:	0f 85 42 ff ff ff    	jne    c0006ee0 <f_setlabel+0x72>
c0006f9e:	66 81 fe ff 00       	cmp    si,0xff
c0006fa3:	0f 87 14 01 00 00    	ja     c00070bd <f_setlabel+0x24f>
c0006fa9:	e9 fa 00 00 00       	jmp    c00070a8 <f_setlabel+0x23a>
c0006fae:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006fb3:	0f 84 27 ff ff ff    	je     c0006ee0 <f_setlabel+0x72>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0e                	je     c0006fcb <f_setlabel+0x15d>
c0006fbd:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006fc0:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006fc5:	75 04                	jne    c0006fcb <f_setlabel+0x15d>
c0006fc7:	89 c3                	mov    ebx,eax
c0006fc9:	eb ee                	jmp    c0006fb9 <f_setlabel+0x14b>
c0006fcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fcf:	31 d2                	xor    edx,edx
c0006fd1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006fd5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006fdd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe1:	e8 1f c1 ff ff       	call   c0003105 <dir_sdi>
c0006fe6:	89 c6                	mov    esi,eax
c0006fe8:	85 c0                	test   eax,eax
c0006fea:	0f 85 e3 00 00 00    	jne    c00070d3 <f_setlabel+0x265>
c0006ff0:	ba 01 00 00 00       	mov    edx,0x1
c0006ff5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ff9:	e8 17 c9 ff ff       	call   c0003915 <dir_read>
c0006ffe:	85 c0                	test   eax,eax
c0007000:	75 21                	jne    c0007023 <f_setlabel+0x1b5>
c0007002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007006:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700a:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000700d:	74 5d                	je     c000706c <f_setlabel+0x1fe>
c000700f:	85 db                	test   ebx,ebx
c0007011:	74 0b                	je     c000701e <f_setlabel+0x1b0>
c0007013:	b9 0b 00 00 00       	mov    ecx,0xb
c0007018:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000701c:	eb 70                	jmp    c000708e <f_setlabel+0x220>
c000701e:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0007021:	eb 70                	jmp    c0007093 <f_setlabel+0x225>
c0007023:	83 f8 04             	cmp    eax,0x4
c0007026:	75 7c                	jne    c00070a4 <f_setlabel+0x236>
c0007028:	85 db                	test   ebx,ebx
c000702a:	0f 84 a3 00 00 00    	je     c00070d3 <f_setlabel+0x265>
c0007030:	ba 01 00 00 00       	mov    edx,0x1
c0007035:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007039:	e8 51 ca ff ff       	call   c0003a8f <dir_alloc>
c000703e:	89 c6                	mov    esi,eax
c0007040:	85 c0                	test   eax,eax
c0007042:	0f 85 8b 00 00 00    	jne    c00070d3 <f_setlabel+0x265>
c0007048:	31 d2                	xor    edx,edx
c000704a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000704e:	b9 20 00 00 00       	mov    ecx,0x20
c0007053:	e8 e5 ab ff ff       	call   c0001c3d <mem_set>
c0007058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000705c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000705f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007063:	75 18                	jne    c000707d <f_setlabel+0x20f>
c0007065:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007068:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000706c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000706f:	b9 16 00 00 00       	mov    ecx,0x16
c0007074:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007078:	83 c0 02             	add    eax,0x2
c000707b:	eb 9b                	jmp    c0007018 <f_setlabel+0x1aa>
c000707d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007081:	b9 0b 00 00 00       	mov    ecx,0xb
c0007086:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000708a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000708e:	e8 95 ab ff ff       	call   c0001c28 <mem_cpy>
c0007093:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007097:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000709b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000709f:	e8 0e d4 ff ff       	call   c00044b2 <sync_fs>
c00070a4:	89 c6                	mov    esi,eax
c00070a6:	eb 2b                	jmp    c00070d3 <f_setlabel+0x265>
c00070a8:	83 fb 0a             	cmp    ebx,0xa
c00070ab:	0f 87 2f fe ff ff    	ja     c0006ee0 <f_setlabel+0x72>
c00070b1:	89 f0                	mov    eax,esi
c00070b3:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00070b7:	43                   	inc    ebx
c00070b8:	e9 85 fe ff ff       	jmp    c0006f42 <f_setlabel+0xd4>
c00070bd:	83 fb 09             	cmp    ebx,0x9
c00070c0:	0f 87 1a fe ff ff    	ja     c0006ee0 <f_setlabel+0x72>
c00070c6:	89 f0                	mov    eax,esi
c00070c8:	66 c1 e8 08          	shr    ax,0x8
c00070cc:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00070d0:	43                   	inc    ebx
c00070d1:	eb de                	jmp    c00070b1 <f_setlabel+0x243>
c00070d3:	89 f0                	mov    eax,esi
c00070d5:	83 c4 74             	add    esp,0x74
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	c3                   	ret    

c00070db <f_forward>:
c00070db:	55                   	push   ebp
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 2c             	sub    esp,0x2c
c00070e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00070e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070f0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00070f4:	89 d8                	mov    eax,ebx
c00070f6:	e8 b1 b1 ff ff       	call   c00022ac <validate>
c00070fb:	89 c5                	mov    ebp,eax
c00070fd:	85 c0                	test   eax,eax
c00070ff:	0f 85 aa 01 00 00    	jne    c00072af <f_forward+0x1d4>
c0007105:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007109:	85 ed                	test   ebp,ebp
c000710b:	0f 85 9e 01 00 00    	jne    c00072af <f_forward+0x1d4>
c0007111:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007115:	0f 84 8f 01 00 00    	je     c00072aa <f_forward+0x1cf>
c000711b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000711e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007121:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007124:	bf 00 00 00 00       	mov    edi,0x0
c0007129:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000712c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007130:	89 d1                	mov    ecx,edx
c0007132:	19 f9                	sbb    ecx,edi
c0007134:	0f 83 cf 00 00 00    	jae    c0007209 <f_forward+0x12e>
c000713a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000713e:	e9 c6 00 00 00       	jmp    c0007209 <f_forward+0x12e>
c0007143:	50                   	push   eax
c0007144:	50                   	push   eax
c0007145:	6a 00                	push   0x0
c0007147:	6a 00                	push   0x0
c0007149:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000714d:	83 c4 10             	add    esp,0x10
c0007150:	85 c0                	test   eax,eax
c0007152:	0f 84 57 01 00 00    	je     c00072af <f_forward+0x1d4>
c0007158:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000715b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000715f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007162:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007166:	89 d7                	mov    edi,edx
c0007168:	8d 4e ff             	lea    ecx,[esi-0x1]
c000716b:	89 c6                	mov    esi,eax
c000716d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007171:	21 ce                	and    esi,ecx
c0007173:	89 c1                	mov    ecx,eax
c0007175:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000717b:	0f 84 98 00 00 00    	je     c0007219 <f_forward+0x13e>
c0007181:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007185:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007188:	89 c8                	mov    eax,ecx
c000718a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000718e:	e8 af ac ff ff       	call   c0001e42 <clst2sect>
c0007193:	89 d7                	mov    edi,edx
c0007195:	09 c7                	or     edi,eax
c0007197:	0f 84 9e 00 00 00    	je     c000723b <f_forward+0x160>
c000719d:	31 ff                	xor    edi,edi
c000719f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00071a2:	01 c6                	add    esi,eax
c00071a4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071a8:	11 d7                	adc    edi,edx
c00071aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00071ad:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00071b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071b4:	39 fa                	cmp    edx,edi
c00071b6:	0f 85 a2 00 00 00    	jne    c000725e <f_forward+0x183>
c00071bc:	39 f0                	cmp    eax,esi
c00071be:	0f 85 9a 00 00 00    	jne    c000725e <f_forward+0x183>
c00071c4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071c7:	ba 00 02 00 00       	mov    edx,0x200
c00071cc:	25 ff 01 00 00       	and    eax,0x1ff
c00071d1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00071d5:	29 c2                	sub    edx,eax
c00071d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00071da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00071dd:	39 d1                	cmp    ecx,edx
c00071df:	76 02                	jbe    c00071e3 <f_forward+0x108>
c00071e1:	89 d1                	mov    ecx,edx
c00071e3:	8d 73 50             	lea    esi,[ebx+0x50]
c00071e6:	52                   	push   edx
c00071e7:	01 c6                	add    esi,eax
c00071e9:	52                   	push   edx
c00071ea:	51                   	push   ecx
c00071eb:	56                   	push   esi
c00071ec:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	85 c0                	test   eax,eax
c00071f5:	74 44                	je     c000723b <f_forward+0x160>
c00071f7:	31 ff                	xor    edi,edi
c00071f9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00071fc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00071ff:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007203:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007207:	01 07                	add    DWORD PTR [edi],eax
c0007209:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000720e:	0f 85 2f ff ff ff    	jne    c0007143 <f_forward+0x68>
c0007214:	e9 96 00 00 00       	jmp    c00072af <f_forward+0x1d4>
c0007219:	85 f6                	test   esi,esi
c000721b:	0f 85 60 ff ff ff    	jne    c0007181 <f_forward+0xa6>
c0007221:	89 d7                	mov    edi,edx
c0007223:	09 c7                	or     edi,eax
c0007225:	75 05                	jne    c000722c <f_forward+0x151>
c0007227:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000722a:	eb 0a                	jmp    c0007236 <f_forward+0x15b>
c000722c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000722f:	89 d8                	mov    eax,ebx
c0007231:	e8 d9 bc ff ff       	call   c0002f0f <get_fat>
c0007236:	83 f8 01             	cmp    eax,0x1
c0007239:	77 0b                	ja     c0007246 <f_forward+0x16b>
c000723b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000723f:	bd 02 00 00 00       	mov    ebp,0x2
c0007244:	eb 69                	jmp    c00072af <f_forward+0x1d4>
c0007246:	83 f8 ff             	cmp    eax,0xffffffff
c0007249:	75 0b                	jne    c0007256 <f_forward+0x17b>
c000724b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000724f:	bd 01 00 00 00       	mov    ebp,0x1
c0007254:	eb 59                	jmp    c00072af <f_forward+0x1d4>
c0007256:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007259:	e9 23 ff ff ff       	jmp    c0007181 <f_forward+0xa6>
c000725e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007262:	79 20                	jns    c0007284 <f_forward+0x1a9>
c0007264:	83 ec 0c             	sub    esp,0xc
c0007267:	6a 01                	push   0x1
c0007269:	52                   	push   edx
c000726a:	50                   	push   eax
c000726b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000726f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007273:	50                   	push   eax
c0007274:	e8 fb a8 ff ff       	call   c0001b74 <disk_write>
c0007279:	83 c4 20             	add    esp,0x20
c000727c:	85 c0                	test   eax,eax
c000727e:	75 cb                	jne    c000724b <f_forward+0x170>
c0007280:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007284:	83 ec 0c             	sub    esp,0xc
c0007287:	6a 01                	push   0x1
c0007289:	57                   	push   edi
c000728a:	56                   	push   esi
c000728b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000728f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007293:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007297:	50                   	push   eax
c0007298:	e8 c1 a8 ff ff       	call   c0001b5e <disk_read>
c000729d:	83 c4 20             	add    esp,0x20
c00072a0:	85 c0                	test   eax,eax
c00072a2:	0f 84 1c ff ff ff    	je     c00071c4 <f_forward+0xe9>
c00072a8:	eb a1                	jmp    c000724b <f_forward+0x170>
c00072aa:	bd 07 00 00 00       	mov    ebp,0x7
c00072af:	83 c4 2c             	add    esp,0x2c
c00072b2:	89 e8                	mov    eax,ebp
c00072b4:	5b                   	pop    ebx
c00072b5:	5e                   	pop    esi
c00072b6:	5f                   	pop    edi
c00072b7:	5d                   	pop    ebp
c00072b8:	c3                   	ret    

c00072b9 <f_mkfs>:
c00072b9:	55                   	push   ebp
c00072ba:	57                   	push   edi
c00072bb:	56                   	push   esi
c00072bc:	53                   	push   ebx
c00072bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00072c2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00072c8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00072cf:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00072d6:	e8 b0 ae ff ff       	call   c000218b <get_ldnumber>
c00072db:	85 c0                	test   eax,eax
c00072dd:	0f 88 ec 10 00 00    	js     c00083cf <f_mkfs+0x1116>
c00072e3:	8b 14 85 c0 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4740]
c00072ea:	85 d2                	test   edx,edx
c00072ec:	74 03                	je     c00072f1 <f_mkfs+0x38>
c00072ee:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00072f1:	85 f6                	test   esi,esi
c00072f3:	75 05                	jne    c00072fa <f_mkfs+0x41>
c00072f5:	be 00 f6 01 c0       	mov    esi,0xc001f600
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	0f b6 c0             	movzx  eax,al
c0007300:	bb 03 00 00 00       	mov    ebx,0x3
c0007305:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007309:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730d:	e8 49 a8 ff ff       	call   c0001b5b <disk_initialize>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	a8 01                	test   al,0x1
c0007317:	0f 85 b2 10 00 00    	jne    c00083cf <f_mkfs+0x1116>
c000731d:	bb 0a 00 00 00       	mov    ebx,0xa
c0007322:	a8 04                	test   al,0x4
c0007324:	0f 85 a5 10 00 00    	jne    c00083cf <f_mkfs+0x1116>
c000732a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000732d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007331:	85 c0                	test   eax,eax
c0007333:	75 20                	jne    c0007355 <f_mkfs+0x9c>
c0007335:	51                   	push   ecx
c0007336:	8d 44 24 78          	lea    eax,[esp+0x78]
c000733a:	50                   	push   eax
c000733b:	6a 03                	push   0x3
c000733d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007341:	e8 44 a8 ff ff       	call   c0001b8a <disk_ioctl>
c0007346:	83 c4 10             	add    esp,0x10
c0007349:	85 c0                	test   eax,eax
c000734b:	74 08                	je     c0007355 <f_mkfs+0x9c>
c000734d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007355:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007359:	8d 42 ff             	lea    eax,[edx-0x1]
c000735c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007361:	77 04                	ja     c0007367 <f_mkfs+0xae>
c0007363:	85 c2                	test   edx,eax
c0007365:	74 08                	je     c000736f <f_mkfs+0xb6>
c0007367:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000736f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007372:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007376:	48                   	dec    eax
c0007377:	3c 01                	cmp    al,0x1
c0007379:	76 05                	jbe    c0007380 <f_mkfs+0xc7>
c000737b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007380:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007387:	48                   	dec    eax
c0007388:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000738d:	77 07                	ja     c0007396 <f_mkfs+0xdd>
c000738f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007394:	74 08                	je     c000739e <f_mkfs+0xe5>
c0007396:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000739e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00073a1:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00073a7:	77 07                	ja     c00073b0 <f_mkfs+0xf7>
c00073a9:	8d 43 ff             	lea    eax,[ebx-0x1]
c00073ac:	85 d8                	test   eax,ebx
c00073ae:	74 02                	je     c00073b2 <f_mkfs+0xf9>
c00073b0:	31 db                	xor    ebx,ebx
c00073b2:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00073bd:	77 0a                	ja     c00073c9 <f_mkfs+0x110>
c00073bf:	bb 11 00 00 00       	mov    ebx,0x11
c00073c4:	e9 06 10 00 00       	jmp    c00083cf <f_mkfs+0x1116>
c00073c9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00073d0:	8b 36                	mov    esi,DWORD PTR [esi]
c00073d2:	85 ed                	test   ebp,ebp
c00073d4:	75 1e                	jne    c00073f4 <f_mkfs+0x13b>
c00073d6:	83 ec 0c             	sub    esp,0xc
c00073d9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00073e0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00073e5:	50                   	push   eax
c00073e6:	e8 f1 0f 00 00       	call   c00083dc <ff_memalloc>
c00073eb:	83 c4 10             	add    esp,0x10
c00073ee:	89 c5                	mov    ebp,eax
c00073f0:	85 c0                	test   eax,eax
c00073f2:	74 cb                	je     c00073bf <f_mkfs+0x106>
c00073f4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00073fc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007404:	52                   	push   edx
c0007405:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007409:	50                   	push   eax
c000740a:	6a 01                	push   0x1
c000740c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007410:	e8 75 a7 ff ff       	call   c0001b8a <disk_ioctl>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	85 c0                	test   eax,eax
c000741a:	0f 85 4a 0f 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007420:	89 f1                	mov    ecx,esi
c0007422:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000742a:	83 e1 0f             	and    ecx,0xf
c000742d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007435:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007439:	83 e6 08             	and    esi,0x8
c000743c:	75 56                	jne    c0007494 <f_mkfs+0x1db>
c000743e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007442:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007446:	83 ff 00             	cmp    edi,0x0
c0007449:	76 20                	jbe    c000746b <f_mkfs+0x1b2>
c000744b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007450:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007458:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000745e:	83 d7 ff             	adc    edi,0xffffffff
c0007461:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007465:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007469:	eb 21                	jmp    c000748c <f_mkfs+0x1d3>
c000746b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007470:	39 f2                	cmp    edx,esi
c0007472:	19 f8                	sbb    eax,edi
c0007474:	73 1e                	jae    c0007494 <f_mkfs+0x1db>
c0007476:	83 c6 c1             	add    esi,0xffffffc1
c0007479:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007481:	83 d7 ff             	adc    edi,0xffffffff
c0007484:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007488:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000748c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007494:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007498:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000749c:	89 04 24             	mov    DWORD PTR [esp],eax
c000749f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074a3:	31 c0                	xor    eax,eax
c00074a5:	ba 7f 00 00 00       	mov    edx,0x7f
c00074aa:	89 c7                	mov    edi,eax
c00074ac:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00074af:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00074b3:	0f 83 c5 0a 00 00    	jae    c0007f7e <f_mkfs+0xcc5>
c00074b9:	89 df                	mov    edi,ebx
c00074bb:	c1 ef 09             	shr    edi,0x9
c00074be:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00074c2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00074c9:	c1 ef 09             	shr    edi,0x9
c00074cc:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00074d1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00074d5:	74 29                	je     c0007500 <f_mkfs+0x247>
c00074d7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00074dd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00074e2:	0f 97 c2             	seta   dl
c00074e5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00074e8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00074ec:	0f 92 c0             	setb   al
c00074ef:	08 c2                	or     dl,al
c00074f1:	75 5b                	jne    c000754e <f_mkfs+0x295>
c00074f3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00074f7:	83 e0 07             	and    eax,0x7
c00074fa:	3c 04                	cmp    al,0x4
c00074fc:	74 50                	je     c000754e <f_mkfs+0x295>
c00074fe:	eb 1b                	jmp    c000751b <f_mkfs+0x262>
c0007500:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007505:	0f 87 73 0a 00 00    	ja     c0007f7e <f_mkfs+0xcc5>
c000750b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007511:	76 08                	jbe    c000751b <f_mkfs+0x262>
c0007513:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000751b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000751f:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007523:	83 e0 01             	and    eax,0x1
c0007526:	80 e1 02             	and    cl,0x2
c0007529:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000752d:	74 0d                	je     c000753c <f_mkfs+0x283>
c000752f:	84 c0                	test   al,al
c0007531:	0f 84 53 09 00 00    	je     c0007e8a <f_mkfs+0xbd1>
c0007537:	e9 12 08 00 00       	jmp    c0007d4e <f_mkfs+0xa95>
c000753c:	bb 13 00 00 00       	mov    ebx,0x13
c0007541:	84 c0                	test   al,al
c0007543:	0f 85 05 08 00 00    	jne    c0007d4e <f_mkfs+0xa95>
c0007549:	e9 39 0e 00 00       	jmp    c0008387 <f_mkfs+0x10ce>
c000754e:	31 c0                	xor    eax,eax
c0007550:	ba ff 0f 00 00       	mov    edx,0xfff
c0007555:	89 c7                	mov    edi,eax
c0007557:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000755a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000755e:	0f 83 1a 0a 00 00    	jae    c0007f7e <f_mkfs+0xcc5>
c0007564:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000756a:	77 39                	ja     c00075a5 <f_mkfs+0x2ec>
c000756c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007571:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007579:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000757c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007580:	73 08                	jae    c000758a <f_mkfs+0x2d1>
c0007582:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000758a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000758f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007592:	b8 00 00 00 00       	mov    eax,0x0
c0007597:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000759b:	73 08                	jae    c00075a5 <f_mkfs+0x2ec>
c000759d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00075a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075ad:	83 c0 20             	add    eax,0x20
c00075b0:	83 d2 00             	adc    edx,0x0
c00075b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075b7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00075bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bf:	31 d2                	xor    edx,edx
c00075c1:	31 ff                	xor    edi,edi
c00075c3:	52                   	push   edx
c00075c4:	89 fb                	mov    ebx,edi
c00075c6:	50                   	push   eax
c00075c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075cf:	e8 68 70 01 00       	call   c001e63c <__udivdi3>
c00075d4:	83 c4 10             	add    esp,0x10
c00075d7:	c1 e0 02             	shl    eax,0x2
c00075da:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00075de:	05 07 02 00 00       	add    eax,0x207
c00075e3:	89 f1                	mov    ecx,esi
c00075e5:	c1 e8 09             	shr    eax,0x9
c00075e8:	83 c1 ff             	add    ecx,0xffffffff
c00075eb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00075ef:	83 d3 ff             	adc    ebx,0xffffffff
c00075f2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00075f6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00075fa:	31 d2                	xor    edx,edx
c00075fc:	01 c8                	add    eax,ecx
c00075fe:	11 da                	adc    edx,ebx
c0007600:	89 c1                	mov    ecx,eax
c0007602:	f7 de                	neg    esi
c0007604:	89 d0                	mov    eax,edx
c0007606:	83 d7 00             	adc    edi,0x0
c0007609:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000760d:	f7 df                	neg    edi
c000760f:	21 f1                	and    ecx,esi
c0007611:	21 f8                	and    eax,edi
c0007613:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007617:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000761b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000761f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007623:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007627:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000762a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000762e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007632:	89 df                	mov    edi,ebx
c0007634:	d1 ea                	shr    edx,1
c0007636:	39 c1                	cmp    ecx,eax
c0007638:	19 d7                	sbb    edi,edx
c000763a:	0f 83 3e 09 00 00    	jae    c0007f7e <f_mkfs+0xcc5>
c0007640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007644:	31 d2                	xor    edx,edx
c0007646:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000764a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000764e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007652:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007655:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007659:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000765d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007661:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007665:	83 f8 0f             	cmp    eax,0xf
c0007668:	0f 86 10 09 00 00    	jbe    c0007f7e <f_mkfs+0xcc5>
c000766e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007676:	0f 87 02 09 00 00    	ja     c0007f7e <f_mkfs+0xcc5>
c000767c:	31 d2                	xor    edx,edx
c000767e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007682:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000768a:	83 c0 07             	add    eax,0x7
c000768d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007695:	c1 e8 03             	shr    eax,0x3
c0007698:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000769f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00076a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076a7:	c1 e0 09             	shl    eax,0x9
c00076aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ae:	48                   	dec    eax
c00076af:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076b3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00076b7:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00076bb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076bf:	31 d2                	xor    edx,edx
c00076c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00076c5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00076cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076d0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00076d5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00076d9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00076dd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076e1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00076e5:	31 ff                	xor    edi,edi
c00076e7:	31 f6                	xor    esi,esi
c00076e9:	31 db                	xor    ebx,ebx
c00076eb:	85 ff                	test   edi,edi
c00076ed:	74 05                	je     c00076f4 <f_mkfs+0x43b>
c00076ef:	4f                   	dec    edi
c00076f0:	74 44                	je     c0007736 <f_mkfs+0x47d>
c00076f2:	eb 4f                	jmp    c0007743 <f_mkfs+0x48a>
c00076f4:	83 ec 0c             	sub    esp,0xc
c00076f7:	0f b7 c3             	movzx  eax,bx
c00076fa:	50                   	push   eax
c00076fb:	e8 05 0e 00 00       	call   c0008505 <ff_wtoupper>
c0007700:	83 c4 10             	add    esp,0x10
c0007703:	89 c1                	mov    ecx,eax
c0007705:	8d 53 01             	lea    edx,[ebx+0x1]
c0007708:	66 39 c3             	cmp    bx,ax
c000770b:	75 3e                	jne    c000774b <f_mkfs+0x492>
c000770d:	be 01 00 00 00       	mov    esi,0x1
c0007712:	89 df                	mov    edi,ebx
c0007714:	66 01 f7             	add    di,si
c0007717:	75 07                	jne    c0007720 <f_mkfs+0x467>
c0007719:	83 fe 7f             	cmp    esi,0x7f
c000771c:	77 31                	ja     c000774f <f_mkfs+0x496>
c000771e:	eb 16                	jmp    c0007736 <f_mkfs+0x47d>
c0007720:	83 ec 0c             	sub    esp,0xc
c0007723:	0f b7 ff             	movzx  edi,di
c0007726:	57                   	push   edi
c0007727:	e8 d9 0d 00 00       	call   c0008505 <ff_wtoupper>
c000772c:	83 c4 10             	add    esp,0x10
c000772f:	39 c7                	cmp    edi,eax
c0007731:	75 e6                	jne    c0007719 <f_mkfs+0x460>
c0007733:	46                   	inc    esi
c0007734:	eb dc                	jmp    c0007712 <f_mkfs+0x459>
c0007736:	31 c0                	xor    eax,eax
c0007738:	89 d9                	mov    ecx,ebx
c000773a:	4e                   	dec    esi
c000773b:	0f 95 c0             	setne  al
c000773e:	43                   	inc    ebx
c000773f:	89 c7                	mov    edi,eax
c0007741:	eb 14                	jmp    c0007757 <f_mkfs+0x49e>
c0007743:	89 f1                	mov    ecx,esi
c0007745:	01 f3                	add    ebx,esi
c0007747:	31 ff                	xor    edi,edi
c0007749:	eb 0c                	jmp    c0007757 <f_mkfs+0x49e>
c000774b:	89 d3                	mov    ebx,edx
c000774d:	eb 08                	jmp    c0007757 <f_mkfs+0x49e>
c000774f:	bf 02 00 00 00       	mov    edi,0x2
c0007754:	83 c9 ff             	or     ecx,0xffffffff
c0007757:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000775b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000775e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007762:	0f b6 c1             	movzx  eax,cl
c0007765:	e8 3a a9 ff ff       	call   c00020a4 <xsum32>
c000776a:	66 c1 e9 08          	shr    cx,0x8
c000776e:	89 c2                	mov    edx,eax
c0007770:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007773:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007777:	0f b7 c1             	movzx  eax,cx
c000777a:	e8 25 a9 ff ff       	call   c00020a4 <xsum32>
c000777f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007784:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007788:	66 85 db             	test   bx,bx
c000778b:	74 1f                	je     c00077ac <f_mkfs+0x4f3>
c000778d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007790:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007797:	83 c0 02             	add    eax,0x2
c000779a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00077a0:	39 c2                	cmp    edx,eax
c00077a2:	74 08                	je     c00077ac <f_mkfs+0x4f3>
c00077a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00077a7:	e9 3f ff ff ff       	jmp    c00076eb <f_mkfs+0x432>
c00077ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	05 01 02 00 00       	add    eax,0x201
c00077b7:	c1 e8 09             	shr    eax,0x9
c00077ba:	50                   	push   eax
c00077bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077c7:	55                   	push   ebp
c00077c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077cc:	e8 a3 a3 ff ff       	call   c0001b74 <disk_write>
c00077d1:	83 c4 20             	add    esp,0x20
c00077d4:	85 c0                	test   eax,eax
c00077d6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00077d9:	0f 85 8b 0b 00 00    	jne    c000836a <f_mkfs+0x10b1>
c00077df:	89 d0                	mov    eax,edx
c00077e1:	31 d2                	xor    edx,edx
c00077e3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00077e7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077eb:	66 85 db             	test   bx,bx
c00077ee:	74 04                	je     c00077f4 <f_mkfs+0x53b>
c00077f0:	31 c0                	xor    eax,eax
c00077f2:	eb b0                	jmp    c00077a4 <f_mkfs+0x4eb>
c00077f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00077f8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00077fc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007800:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007806:	31 d2                	xor    edx,edx
c0007808:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007813:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007817:	c1 eb 09             	shr    ebx,0x9
c000781a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007821:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007825:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007829:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000782d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007831:	8d 70 01             	lea    esi,[eax+0x1]
c0007834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000783c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007843:	31 d2                	xor    edx,edx
c0007845:	25 00 fe ff ff       	and    eax,0xfffffe00
c000784a:	89 04 24             	mov    DWORD PTR [esp],eax
c000784d:	89 c1                	mov    ecx,eax
c000784f:	89 e8                	mov    eax,ebp
c0007851:	e8 e7 a3 ff ff       	call   c0001c3d <mem_set>
c0007856:	31 c0                	xor    eax,eax
c0007858:	39 04 24             	cmp    DWORD PTR [esp],eax
c000785b:	76 10                	jbe    c000786d <f_mkfs+0x5b4>
c000785d:	83 fe 07             	cmp    esi,0x7
c0007860:	76 0b                	jbe    c000786d <f_mkfs+0x5b4>
c0007862:	40                   	inc    eax
c0007863:	83 ee 08             	sub    esi,0x8
c0007866:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000786b:	eb eb                	jmp    c0007858 <f_mkfs+0x59f>
c000786d:	b2 01                	mov    dl,0x1
c000786f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007873:	85 f6                	test   esi,esi
c0007875:	74 0c                	je     c0007883 <f_mkfs+0x5ca>
c0007877:	39 04 24             	cmp    DWORD PTR [esp],eax
c000787a:	76 07                	jbe    c0007883 <f_mkfs+0x5ca>
c000787c:	08 11                	or     BYTE PTR [ecx],dl
c000787e:	4e                   	dec    esi
c000787f:	d1 e2                	shl    edx,1
c0007881:	eb f0                	jmp    c0007873 <f_mkfs+0x5ba>
c0007883:	89 df                	mov    edi,ebx
c0007885:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007889:	76 04                	jbe    c000788f <f_mkfs+0x5d6>
c000788b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000788f:	83 ec 0c             	sub    esp,0xc
c0007892:	57                   	push   edi
c0007893:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007897:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000789b:	55                   	push   ebp
c000789c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078a0:	e8 cf a2 ff ff       	call   c0001b74 <disk_write>
c00078a5:	83 c4 20             	add    esp,0x20
c00078a8:	85 c0                	test   eax,eax
c00078aa:	0f 85 ba 0a 00 00    	jne    c000836a <f_mkfs+0x10b1>
c00078b0:	31 d2                	xor    edx,edx
c00078b2:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00078b6:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00078ba:	29 fb                	sub    ebx,edi
c00078bc:	0f 85 7a ff ff ff    	jne    c000783c <f_mkfs+0x583>
c00078c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00078c6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00078ce:	31 f6                	xor    esi,esi
c00078d0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00078d7:	31 d2                	xor    edx,edx
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 5d a3 ff ff       	call   c0001c3d <mem_set>
c00078e0:	31 c9                	xor    ecx,ecx
c00078e2:	85 db                	test   ebx,ebx
c00078e4:	75 40                	jne    c0007926 <f_mkfs+0x66d>
c00078e6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00078eb:	89 e8                	mov    eax,ebp
c00078ed:	bb 02 00 00 00       	mov    ebx,0x2
c00078f2:	e8 28 a3 ff ff       	call   c0001c1f <st_dword>
c00078f7:	8d 45 04             	lea    eax,[ebp+0x4]
c00078fa:	83 ca ff             	or     edx,0xffffffff
c00078fd:	e8 1d a3 ff ff       	call   c0001c1f <st_dword>
c0007902:	b9 08 00 00 00       	mov    ecx,0x8
c0007907:	eb 1d                	jmp    c0007926 <f_mkfs+0x66d>
c0007909:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000790c:	76 3b                	jbe    c0007949 <f_mkfs+0x690>
c000790e:	43                   	inc    ebx
c000790f:	83 fe 01             	cmp    esi,0x1
c0007912:	89 da                	mov    edx,ebx
c0007914:	77 03                	ja     c0007919 <f_mkfs+0x660>
c0007916:	83 ca ff             	or     edx,0xffffffff
c0007919:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000791d:	4e                   	dec    esi
c000791e:	e8 fc a2 ff ff       	call   c0001c1f <st_dword>
c0007923:	83 c1 04             	add    ecx,0x4
c0007926:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000792a:	85 f6                	test   esi,esi
c000792c:	75 db                	jne    c0007909 <f_mkfs+0x650>
c000792e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007933:	77 14                	ja     c0007949 <f_mkfs+0x690>
c0007935:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007939:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007940:	85 f6                	test   esi,esi
c0007942:	74 05                	je     c0007949 <f_mkfs+0x690>
c0007944:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007947:	77 dd                	ja     c0007926 <f_mkfs+0x66d>
c0007949:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000794d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007951:	39 cf                	cmp    edi,ecx
c0007953:	76 02                	jbe    c0007957 <f_mkfs+0x69e>
c0007955:	89 cf                	mov    edi,ecx
c0007957:	83 ec 0c             	sub    esp,0xc
c000795a:	57                   	push   edi
c000795b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000795f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007963:	55                   	push   ebp
c0007964:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007968:	e8 07 a2 ff ff       	call   c0001b74 <disk_write>
c000796d:	83 c4 20             	add    esp,0x20
c0007970:	85 c0                	test   eax,eax
c0007972:	0f 85 f2 09 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007978:	31 d2                	xor    edx,edx
c000797a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000797e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007982:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007986:	0f 85 48 ff ff ff    	jne    c00078d4 <f_mkfs+0x61b>
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	31 ff                	xor    edi,edi
c0007995:	e8 a3 a2 ff ff       	call   c0001c3d <mem_set>
c000799a:	8d 45 34             	lea    eax,[ebp+0x34]
c000799d:	ba 02 00 00 00       	mov    edx,0x2
c00079a2:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00079a6:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00079aa:	e8 70 a2 ff ff       	call   c0001c1f <st_dword>
c00079af:	8d 45 38             	lea    eax,[ebp+0x38]
c00079b2:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00079b6:	e8 64 a2 ff ff       	call   c0001c1f <st_dword>
c00079bb:	8d 45 44             	lea    eax,[ebp+0x44]
c00079be:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00079c2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00079c6:	e8 54 a2 ff ff       	call   c0001c1f <st_dword>
c00079cb:	8d 45 54             	lea    eax,[ebp+0x54]
c00079ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00079d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079d6:	83 c2 02             	add    edx,0x2
c00079d9:	e8 41 a2 ff ff       	call   c0001c1f <st_dword>
c00079de:	8d 45 58             	lea    eax,[ebp+0x58]
c00079e1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00079e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00079e9:	e8 31 a2 ff ff       	call   c0001c1f <st_dword>
c00079ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079f2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00079f7:	89 c6                	mov    esi,eax
c00079f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a01:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a04:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a08:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a0b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a0f:	39 cb                	cmp    ebx,ecx
c0007a11:	76 02                	jbe    c0007a15 <f_mkfs+0x75c>
c0007a13:	89 cb                	mov    ebx,ecx
c0007a15:	83 ec 0c             	sub    esp,0xc
c0007a18:	53                   	push   ebx
c0007a19:	57                   	push   edi
c0007a1a:	56                   	push   esi
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 4f a1 ff ff       	call   c0001b74 <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 3a 09 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	b9 00 02 00 00       	mov    ecx,0x200
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 ff a1 ff ff       	call   c0001c3d <mem_set>
c0007a3e:	31 d2                	xor    edx,edx
c0007a40:	01 de                	add    esi,ebx
c0007a42:	11 d7                	adc    edi,edx
c0007a44:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007a47:	75 bf                	jne    c0007a08 <f_mkfs+0x74f>
c0007a49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007a4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007a51:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007a59:	b9 00 02 00 00       	mov    ecx,0x200
c0007a5e:	31 d2                	xor    edx,edx
c0007a60:	89 e8                	mov    eax,ebp
c0007a62:	e8 d6 a1 ff ff       	call   c0001c3d <mem_set>
c0007a67:	b9 0b 00 00 00       	mov    ecx,0xb
c0007a6c:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0007a71:	89 e8                	mov    eax,ebp
c0007a73:	e8 b0 a1 ff ff       	call   c0001c28 <mem_cpy>
c0007a78:	8d 45 40             	lea    eax,[ebp+0x40]
c0007a7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007a7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007a83:	e8 9a a1 ff ff       	call   c0001c22 <st_qword>
c0007a88:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007a8c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007a8f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007a93:	e8 8a a1 ff ff       	call   c0001c22 <st_qword>
c0007a98:	8d 45 50             	lea    eax,[ebp+0x50]
c0007a9b:	ba 20 00 00 00       	mov    edx,0x20
c0007aa0:	e8 7a a1 ff ff       	call   c0001c1f <st_dword>
c0007aa5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007aa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007aad:	e8 6d a1 ff ff       	call   c0001c1f <st_dword>
c0007ab2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007ab6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007aba:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007abe:	e8 5c a1 ff ff       	call   c0001c1f <st_dword>
c0007ac3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ac6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007aca:	e8 50 a1 ff ff       	call   c0001c1f <st_dword>
c0007acf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ad3:	8d 50 02             	lea    edx,[eax+0x2]
c0007ad6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ad9:	e8 41 a1 ff ff       	call   c0001c1f <st_dword>
c0007ade:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ae1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ae6:	e8 34 a1 ff ff       	call   c0001c1f <st_dword>
c0007aeb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007aee:	ba 00 01 00 00       	mov    edx,0x100
c0007af3:	e8 23 a1 ff ff       	call   c0001c1b <st_word>
c0007af8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007afc:	b8 0a 00 00 00       	mov    eax,0xa
c0007b01:	48                   	dec    eax
c0007b02:	74 05                	je     c0007b09 <f_mkfs+0x850>
c0007b04:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b07:	eb f8                	jmp    c0007b01 <f_mkfs+0x848>
c0007b09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b0d:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b15:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b19:	74 05                	je     c0007b20 <f_mkfs+0x867>
c0007b1b:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b1e:	eb f5                	jmp    c0007b15 <f_mkfs+0x85c>
c0007b20:	8d 45 78             	lea    eax,[ebp+0x78]
c0007b23:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007b28:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007b2e:	31 db                	xor    ebx,ebx
c0007b30:	e8 e6 a0 ff ff       	call   c0001c1b <st_word>
c0007b35:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007b3b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007b40:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b43:	e8 d3 a0 ff ff       	call   c0001c1b <st_word>
c0007b48:	31 c9                	xor    ecx,ecx
c0007b4a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007b4d:	83 f8 01             	cmp    eax,0x1
c0007b50:	76 13                	jbe    c0007b65 <f_mkfs+0x8ac>
c0007b52:	83 f9 70             	cmp    ecx,0x70
c0007b55:	74 0e                	je     c0007b65 <f_mkfs+0x8ac>
c0007b57:	89 da                	mov    edx,ebx
c0007b59:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007b5e:	e8 41 a5 ff ff       	call   c00020a4 <xsum32>
c0007b63:	89 c3                	mov    ebx,eax
c0007b65:	41                   	inc    ecx
c0007b66:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b6c:	75 dc                	jne    c0007b4a <f_mkfs+0x891>
c0007b6e:	89 f0                	mov    eax,esi
c0007b70:	89 fa                	mov    edx,edi
c0007b72:	83 c0 01             	add    eax,0x1
c0007b75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b79:	83 d2 00             	adc    edx,0x0
c0007b7c:	83 ec 0c             	sub    esp,0xc
c0007b7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007b83:	6a 01                	push   0x1
c0007b85:	57                   	push   edi
c0007b86:	56                   	push   esi
c0007b87:	55                   	push   ebp
c0007b88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b8c:	e8 e3 9f ff ff       	call   c0001b74 <disk_write>
c0007b91:	83 c4 20             	add    esp,0x20
c0007b94:	85 c0                	test   eax,eax
c0007b96:	0f 85 ce 07 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007b9c:	31 d2                	xor    edx,edx
c0007b9e:	b9 00 02 00 00       	mov    ecx,0x200
c0007ba3:	89 e8                	mov    eax,ebp
c0007ba5:	e8 93 a0 ff ff       	call   c0001c3d <mem_set>
c0007baa:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007baf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bb2:	e8 64 a0 ff ff       	call   c0001c1b <st_word>
c0007bb7:	89 f0                	mov    eax,esi
c0007bb9:	89 fa                	mov    edx,edi
c0007bbb:	83 c0 09             	add    eax,0x9
c0007bbe:	83 d2 00             	adc    edx,0x0
c0007bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bc8:	31 c9                	xor    ecx,ecx
c0007bca:	41                   	inc    ecx
c0007bcb:	89 da                	mov    edx,ebx
c0007bcd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007bd2:	e8 cd a4 ff ff       	call   c00020a4 <xsum32>
c0007bd7:	89 c3                	mov    ebx,eax
c0007bd9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bdf:	75 e9                	jne    c0007bca <f_mkfs+0x911>
c0007be1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007be5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007be9:	83 c0 01             	add    eax,0x1
c0007bec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007bf0:	83 d2 00             	adc    edx,0x0
c0007bf3:	83 ec 0c             	sub    esp,0xc
c0007bf6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007bfa:	6a 01                	push   0x1
c0007bfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c04:	55                   	push   ebp
c0007c05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c09:	e8 66 9f ff ff       	call   c0001b74 <disk_write>
c0007c0e:	83 c4 20             	add    esp,0x20
c0007c11:	85 c0                	test   eax,eax
c0007c13:	0f 85 51 07 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c1d:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c21:	75 09                	jne    c0007c2c <f_mkfs+0x973>
c0007c23:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c26:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007c2a:	74 12                	je     c0007c3e <f_mkfs+0x985>
c0007c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007c34:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007c3c:	eb 8a                	jmp    c0007bc8 <f_mkfs+0x90f>
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	b9 00 02 00 00       	mov    ecx,0x200
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	e8 f1 9f ff ff       	call   c0001c3d <mem_set>
c0007c4c:	83 c6 0b             	add    esi,0xb
c0007c4f:	83 d7 00             	adc    edi,0x0
c0007c52:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007c56:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007c5a:	31 c9                	xor    ecx,ecx
c0007c5c:	41                   	inc    ecx
c0007c5d:	89 da                	mov    edx,ebx
c0007c5f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c64:	e8 3b a4 ff ff       	call   c00020a4 <xsum32>
c0007c69:	89 c3                	mov    ebx,eax
c0007c6b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c71:	75 e9                	jne    c0007c5c <f_mkfs+0x9a3>
c0007c73:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007c76:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007c7a:	83 c6 01             	add    esi,0x1
c0007c7d:	83 d7 00             	adc    edi,0x0
c0007c80:	83 ec 0c             	sub    esp,0xc
c0007c83:	6a 01                	push   0x1
c0007c85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c8d:	55                   	push   ebp
c0007c8e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c92:	e8 dd 9e ff ff       	call   c0001b74 <disk_write>
c0007c97:	83 c4 20             	add    esp,0x20
c0007c9a:	85 c0                	test   eax,eax
c0007c9c:	0f 85 c8 06 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007ca2:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007ca6:	75 06                	jne    c0007cae <f_mkfs+0x9f5>
c0007ca8:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007cac:	74 09                	je     c0007cb7 <f_mkfs+0x9fe>
c0007cae:	89 34 24             	mov    DWORD PTR [esp],esi
c0007cb1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007cb5:	eb a3                	jmp    c0007c5a <f_mkfs+0x9a1>
c0007cb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cbb:	89 da                	mov    edx,ebx
c0007cbd:	01 e8                	add    eax,ebp
c0007cbf:	e8 5b 9f ff ff       	call   c0001c1f <st_dword>
c0007cc4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007cc9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007cd1:	75 e4                	jne    c0007cb7 <f_mkfs+0x9fe>
c0007cd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cd6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cda:	83 c6 02             	add    esi,0x2
c0007cdd:	83 d7 00             	adc    edi,0x0
c0007ce0:	83 ec 0c             	sub    esp,0xc
c0007ce3:	6a 01                	push   0x1
c0007ce5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ce9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ced:	55                   	push   ebp
c0007cee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cf2:	e8 7d 9e ff ff       	call   c0001b74 <disk_write>
c0007cf7:	83 c4 20             	add    esp,0x20
c0007cfa:	85 c0                	test   eax,eax
c0007cfc:	0f 85 68 06 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0007d02:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d07:	74 0d                	je     c0007d16 <f_mkfs+0xa5d>
c0007d09:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d11:	e9 43 fd ff ff       	jmp    c0007a59 <f_mkfs+0x7a0>
c0007d16:	b1 07                	mov    cl,0x7
c0007d18:	e9 e3 05 00 00       	jmp    c0008300 <f_mkfs+0x1047>
c0007d1d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007d22:	0f 85 4f 02 00 00    	jne    c0007f77 <f_mkfs+0xcbe>
c0007d28:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d2d:	0f 86 22 02 00 00    	jbe    c0007f55 <f_mkfs+0xc9c>
c0007d33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d38:	0f 85 81 06 00 00    	jne    c00083bf <f_mkfs+0x1106>
c0007d3e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d45:	83 f8 40             	cmp    eax,0x40
c0007d48:	0f 87 51 06 00 00    	ja     c000839f <f_mkfs+0x10e6>
c0007d4e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d52:	85 ff                	test   edi,edi
c0007d54:	75 1c                	jne    c0007d72 <f_mkfs+0xab9>
c0007d56:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d59:	ba e0 f5 01 c0       	mov    edx,0xc001f5e0
c0007d5e:	c1 e9 0c             	shr    ecx,0xc
c0007d61:	bf 01 00 00 00       	mov    edi,0x1
c0007d66:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d69:	66 85 c0             	test   ax,ax
c0007d6c:	0f 85 95 01 00 00    	jne    c0007f07 <f_mkfs+0xc4e>
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d77:	f7 f7                	div    edi
c0007d79:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d7e:	0f 86 95 01 00 00    	jbe    c0007f19 <f_mkfs+0xc60>
c0007d84:	83 c0 02             	add    eax,0x2
c0007d87:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007d8c:	01 c0                	add    eax,eax
c0007d8e:	05 ff 01 00 00       	add    eax,0x1ff
c0007d93:	be 01 00 00 00       	mov    esi,0x1
c0007d98:	c1 e8 09             	shr    eax,0x9
c0007d9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007d9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007da3:	c1 e0 05             	shl    eax,0x5
c0007da6:	c1 e8 09             	shr    eax,0x9
c0007da9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007dad:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007db2:	31 d2                	xor    edx,edx
c0007db4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007db8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007dbc:	89 f0                	mov    eax,esi
c0007dbe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007dc2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007dc6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007dca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007dce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007dd2:	31 d2                	xor    edx,edx
c0007dd4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007dd9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ddd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007de1:	31 db                	xor    ebx,ebx
c0007de3:	01 c8                	add    eax,ecx
c0007de5:	11 da                	adc    edx,ebx
c0007de7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007deb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007def:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007df3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007df7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007dfb:	f7 da                	neg    edx
c0007dfd:	21 d1                	and    ecx,edx
c0007dff:	29 d9                	sub    ecx,ebx
c0007e01:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e06:	0f 85 20 01 00 00    	jne    c0007f2c <f_mkfs+0xc73>
c0007e0c:	31 db                	xor    ebx,ebx
c0007e0e:	01 ce                	add    esi,ecx
c0007e10:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e14:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e18:	31 d2                	xor    edx,edx
c0007e1a:	89 f8                	mov    eax,edi
c0007e1c:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e20:	c1 e0 04             	shl    eax,0x4
c0007e23:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007e27:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007e2b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007e2f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007e33:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007e36:	19 d3                	sbb    ebx,edx
c0007e38:	0f 82 40 01 00 00    	jb     c0007f7e <f_mkfs+0xcc5>
c0007e3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e41:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e45:	89 c8                	mov    eax,ecx
c0007e47:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007e4c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007e50:	29 f0                	sub    eax,esi
c0007e52:	29 d0                	sub    eax,edx
c0007e54:	31 d2                	xor    edx,edx
c0007e56:	f7 f7                	div    edi
c0007e58:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e5d:	89 c3                	mov    ebx,eax
c0007e5f:	0f 85 b8 fe ff ff    	jne    c0007d1d <f_mkfs+0xa64>
c0007e65:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e6a:	0f 87 1d 01 00 00    	ja     c0007f8d <f_mkfs+0xcd4>
c0007e70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e75:	0f 85 03 01 00 00    	jne    c0007f7e <f_mkfs+0xcc5>
c0007e7b:	83 ff 01             	cmp    edi,0x1
c0007e7e:	0f 86 fa 00 00 00    	jbe    c0007f7e <f_mkfs+0xcc5>
c0007e84:	d1 ef                	shr    edi,1
c0007e86:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007e8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e8e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e91:	85 db                	test   ebx,ebx
c0007e93:	75 2d                	jne    c0007ec2 <f_mkfs+0xc09>
c0007e95:	89 cb                	mov    ebx,ecx
c0007e97:	ba f0 f5 01 c0       	mov    edx,0xc001f5f0
c0007e9c:	c1 eb 11             	shr    ebx,0x11
c0007e9f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007ea7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007eaa:	66 85 c0             	test   ax,ax
c0007ead:	74 11                	je     c0007ec0 <f_mkfs+0xc07>
c0007eaf:	83 c2 02             	add    edx,0x2
c0007eb2:	39 d8                	cmp    eax,ebx
c0007eb4:	77 0a                	ja     c0007ec0 <f_mkfs+0xc07>
c0007eb6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007eba:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ebe:	eb e7                	jmp    c0007ea7 <f_mkfs+0xbee>
c0007ec0:	31 db                	xor    ebx,ebx
c0007ec2:	31 d2                	xor    edx,edx
c0007ec4:	89 c8                	mov    eax,ecx
c0007ec6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007eca:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007ed1:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007ed6:	c1 ea 09             	shr    edx,0x9
c0007ed9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007ede:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007ee2:	0f 87 96 00 00 00    	ja     c0007f7e <f_mkfs+0xcc5>
c0007ee8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007eec:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ef4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ef8:	be 20 00 00 00       	mov    esi,0x20
c0007efd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f02:	e9 a6 fe ff ff       	jmp    c0007dad <f_mkfs+0xaf4>
c0007f07:	83 c2 02             	add    edx,0x2
c0007f0a:	39 c8                	cmp    eax,ecx
c0007f0c:	0f 87 60 fe ff ff    	ja     c0007d72 <f_mkfs+0xab9>
c0007f12:	01 ff                	add    edi,edi
c0007f14:	e9 4d fe ff ff       	jmp    c0007d66 <f_mkfs+0xaad>
c0007f19:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f1c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f21:	40                   	inc    eax
c0007f22:	d1 e8                	shr    eax,1
c0007f24:	83 c0 03             	add    eax,0x3
c0007f27:	e9 62 fe ff ff       	jmp    c0007d8e <f_mkfs+0xad5>
c0007f2c:	31 d2                	xor    edx,edx
c0007f2e:	89 c8                	mov    eax,ecx
c0007f30:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f34:	85 d2                	test   edx,edx
c0007f36:	74 0c                	je     c0007f44 <f_mkfs+0xc8b>
c0007f38:	49                   	dec    ecx
c0007f39:	46                   	inc    esi
c0007f3a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007f3f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007f44:	89 c8                	mov    eax,ecx
c0007f46:	31 d2                	xor    edx,edx
c0007f48:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f4c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007f50:	e9 c3 fe ff ff       	jmp    c0007e18 <f_mkfs+0xb5f>
c0007f55:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5a:	77 31                	ja     c0007f8d <f_mkfs+0xcd4>
c0007f5c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f61:	75 1b                	jne    c0007f7e <f_mkfs+0xcc5>
c0007f63:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f6a:	3d 80 00 00 00       	cmp    eax,0x80
c0007f6f:	0f 86 d9 fd ff ff    	jbe    c0007d4e <f_mkfs+0xa95>
c0007f75:	eb 07                	jmp    c0007f7e <f_mkfs+0xcc5>
c0007f77:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f7c:	76 0a                	jbe    c0007f88 <f_mkfs+0xccf>
c0007f7e:	bb 0e 00 00 00       	mov    ebx,0xe
c0007f83:	e9 ff 03 00 00       	jmp    c0008387 <f_mkfs+0x10ce>
c0007f88:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f8d:	31 d2                	xor    edx,edx
c0007f8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f94:	89 e8                	mov    eax,ebp
c0007f96:	e8 a2 9c ff ff       	call   c0001c3d <mem_set>
c0007f9b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007fa0:	ba 02 f7 01 c0       	mov    edx,0xc001f702
c0007fa5:	89 e8                	mov    eax,ebp
c0007fa7:	e8 7c 9c ff ff       	call   c0001c28 <mem_cpy>
c0007fac:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007faf:	ba 00 02 00 00       	mov    edx,0x200
c0007fb4:	e8 62 9c ff ff       	call   c0001c1b <st_word>
c0007fb9:	89 f8                	mov    eax,edi
c0007fbb:	0f b7 d6             	movzx  edx,si
c0007fbe:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007fc1:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007fc4:	e8 52 9c ff ff       	call   c0001c1b <st_word>
c0007fc9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007fcd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fd2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007fd5:	75 08                	jne    c0007fdf <f_mkfs+0xd26>
c0007fd7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007fdf:	8d 45 11             	lea    eax,[ebp+0x11]
c0007fe2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007fe6:	e8 30 9c ff ff       	call   c0001c1b <st_word>
c0007feb:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ff0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007ff4:	39 d0                	cmp    eax,edx
c0007ff6:	b8 00 00 00 00       	mov    eax,0x0
c0007ffb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007fff:	72 0a                	jb     c000800b <f_mkfs+0xd52>
c0008001:	8d 45 13             	lea    eax,[ebp+0x13]
c0008004:	e8 12 9c ff ff       	call   c0001c1b <st_word>
c0008009:	eb 08                	jmp    c0008013 <f_mkfs+0xd5a>
c000800b:	8d 45 20             	lea    eax,[ebp+0x20]
c000800e:	e8 0c 9c ff ff       	call   c0001c1f <st_dword>
c0008013:	8d 45 18             	lea    eax,[ebp+0x18]
c0008016:	ba 3f 00 00 00       	mov    edx,0x3f
c000801b:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000801f:	e8 f7 9b ff ff       	call   c0001c1b <st_word>
c0008024:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008027:	ba ff 00 00 00       	mov    edx,0xff
c000802c:	e8 ea 9b ff ff       	call   c0001c1b <st_word>
c0008031:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008034:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008038:	e8 e2 9b ff ff       	call   c0001c1f <st_dword>
c000803d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008042:	75 57                	jne    c000809b <f_mkfs+0xde2>
c0008044:	8d 45 43             	lea    eax,[ebp+0x43]
c0008047:	ba 00 00 21 50       	mov    edx,0x50210000
c000804c:	e8 ce 9b ff ff       	call   c0001c1f <st_dword>
c0008051:	8d 45 24             	lea    eax,[ebp+0x24]
c0008054:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008058:	e8 c2 9b ff ff       	call   c0001c1f <st_dword>
c000805d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008060:	ba 02 00 00 00       	mov    edx,0x2
c0008065:	e8 b5 9b ff ff       	call   c0001c1f <st_dword>
c000806a:	8d 45 30             	lea    eax,[ebp+0x30]
c000806d:	ba 01 00 00 00       	mov    edx,0x1
c0008072:	e8 a4 9b ff ff       	call   c0001c1b <st_word>
c0008077:	8d 45 32             	lea    eax,[ebp+0x32]
c000807a:	ba 06 00 00 00       	mov    edx,0x6
c000807f:	e8 97 9b ff ff       	call   c0001c1b <st_word>
c0008084:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008088:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000808c:	8d 45 47             	lea    eax,[ebp+0x47]
c000808f:	b9 13 00 00 00       	mov    ecx,0x13
c0008094:	ba 0e f7 01 c0       	mov    edx,0xc001f70e
c0008099:	eb 2f                	jmp    c00080ca <f_mkfs+0xe11>
c000809b:	8d 45 27             	lea    eax,[ebp+0x27]
c000809e:	ba 00 00 21 50       	mov    edx,0x50210000
c00080a3:	e8 77 9b ff ff       	call   c0001c1f <st_dword>
c00080a8:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00080ad:	8d 45 16             	lea    eax,[ebp+0x16]
c00080b0:	e8 66 9b ff ff       	call   c0001c1b <st_word>
c00080b5:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00080b9:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00080bd:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00080c0:	b9 13 00 00 00       	mov    ecx,0x13
c00080c5:	ba 22 f7 01 c0       	mov    edx,0xc001f722
c00080ca:	e8 59 9b ff ff       	call   c0001c28 <mem_cpy>
c00080cf:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00080d5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00080da:	89 f0                	mov    eax,esi
c00080dc:	e8 3a 9b ff ff       	call   c0001c1b <st_word>
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	6a 01                	push   0x1
c00080e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080ee:	55                   	push   ebp
c00080ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f3:	e8 7c 9a ff ff       	call   c0001b74 <disk_write>
c00080f8:	83 c4 20             	add    esp,0x20
c00080fb:	85 c0                	test   eax,eax
c00080fd:	0f 85 67 02 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0008103:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008108:	0f 85 b7 00 00 00    	jne    c00081c5 <f_mkfs+0xf0c>
c000810e:	83 ec 0c             	sub    esp,0xc
c0008111:	6a 01                	push   0x1
c0008113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008117:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000811b:	83 c0 06             	add    eax,0x6
c000811e:	83 d2 00             	adc    edx,0x0
c0008121:	52                   	push   edx
c0008122:	50                   	push   eax
c0008123:	55                   	push   ebp
c0008124:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008128:	e8 47 9a ff ff       	call   c0001b74 <disk_write>
c000812d:	83 c4 20             	add    esp,0x20
c0008130:	b9 00 02 00 00       	mov    ecx,0x200
c0008135:	31 d2                	xor    edx,edx
c0008137:	89 e8                	mov    eax,ebp
c0008139:	e8 ff 9a ff ff       	call   c0001c3d <mem_set>
c000813e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008143:	89 e8                	mov    eax,ebp
c0008145:	e8 d5 9a ff ff       	call   c0001c1f <st_dword>
c000814a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008150:	ba 72 72 41 61       	mov    edx,0x61417272
c0008155:	e8 c5 9a ff ff       	call   c0001c1f <st_dword>
c000815a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000815d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008163:	e8 b7 9a ff ff       	call   c0001c1f <st_dword>
c0008168:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000816e:	ba 02 00 00 00       	mov    edx,0x2
c0008173:	e8 a7 9a ff ff       	call   c0001c1f <st_dword>
c0008178:	ba 55 aa 00 00       	mov    edx,0xaa55
c000817d:	89 f0                	mov    eax,esi
c000817f:	e8 97 9a ff ff       	call   c0001c1b <st_word>
c0008184:	83 ec 0c             	sub    esp,0xc
c0008187:	6a 01                	push   0x1
c0008189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000818d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008191:	83 c0 07             	add    eax,0x7
c0008194:	83 d2 00             	adc    edx,0x0
c0008197:	52                   	push   edx
c0008198:	50                   	push   eax
c0008199:	55                   	push   ebp
c000819a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000819e:	e8 d1 99 ff ff       	call   c0001b74 <disk_write>
c00081a3:	83 c4 14             	add    esp,0x14
c00081a6:	6a 01                	push   0x1
c00081a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b0:	83 c0 01             	add    eax,0x1
c00081b3:	83 d2 00             	adc    edx,0x0
c00081b6:	52                   	push   edx
c00081b7:	50                   	push   eax
c00081b8:	55                   	push   ebp
c00081b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081bd:	e8 b2 99 ff ff       	call   c0001b74 <disk_write>
c00081c2:	83 c4 20             	add    esp,0x20
c00081c5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00081cc:	31 d2                	xor    edx,edx
c00081ce:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00081d4:	31 db                	xor    ebx,ebx
c00081d6:	89 e8                	mov    eax,ebp
c00081d8:	e8 60 9a ff ff       	call   c0001c3d <mem_set>
c00081dd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00081e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00081e9:	0f 94 c3             	sete   bl
c00081ec:	4b                   	dec    ebx
c00081ed:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00081f3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00081f9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081fe:	75 21                	jne    c0008221 <f_mkfs+0xf68>
c0008200:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008205:	89 e8                	mov    eax,ebp
c0008207:	e8 13 9a ff ff       	call   c0001c1f <st_dword>
c000820c:	8d 45 04             	lea    eax,[ebp+0x4]
c000820f:	83 ca ff             	or     edx,0xffffffff
c0008212:	e8 08 9a ff ff       	call   c0001c1f <st_dword>
c0008217:	8d 45 08             	lea    eax,[ebp+0x8]
c000821a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000821f:	eb 04                	jmp    c0008225 <f_mkfs+0xf6c>
c0008221:	89 da                	mov    edx,ebx
c0008223:	89 e8                	mov    eax,ebp
c0008225:	e8 f5 99 ff ff       	call   c0001c1f <st_dword>
c000822a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000822e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008232:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000823a:	39 ce                	cmp    esi,ecx
c000823c:	76 02                	jbe    c0008240 <f_mkfs+0xf87>
c000823e:	89 ce                	mov    esi,ecx
c0008240:	83 ec 0c             	sub    esp,0xc
c0008243:	56                   	push   esi
c0008244:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008248:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000824c:	55                   	push   ebp
c000824d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008251:	e8 1e 99 ff ff       	call   c0001b74 <disk_write>
c0008256:	83 c4 20             	add    esp,0x20
c0008259:	85 c0                	test   eax,eax
c000825b:	0f 85 09 01 00 00    	jne    c000836a <f_mkfs+0x10b1>
c0008261:	31 d2                	xor    edx,edx
c0008263:	b9 00 02 00 00       	mov    ecx,0x200
c0008268:	89 e8                	mov    eax,ebp
c000826a:	e8 ce 99 ff ff       	call   c0001c3d <mem_set>
c000826f:	31 d2                	xor    edx,edx
c0008271:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008275:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008279:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000827d:	75 b3                	jne    c0008232 <f_mkfs+0xf79>
c000827f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008282:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008289:	40                   	inc    eax
c000828a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000828e:	0f 87 65 ff ff ff    	ja     c00081f9 <f_mkfs+0xf40>
c0008294:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008299:	74 04                	je     c000829f <f_mkfs+0xfe6>
c000829b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000829f:	89 fb                	mov    ebx,edi
c00082a1:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00082a5:	76 04                	jbe    c00082ab <f_mkfs+0xff2>
c00082a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082ab:	83 ec 0c             	sub    esp,0xc
c00082ae:	53                   	push   ebx
c00082af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082b3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082b7:	55                   	push   ebp
c00082b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082bc:	e8 b3 98 ff ff       	call   c0001b74 <disk_write>
c00082c1:	83 c4 20             	add    esp,0x20
c00082c4:	85 c0                	test   eax,eax
c00082c6:	0f 85 9e 00 00 00    	jne    c000836a <f_mkfs+0x10b1>
c00082cc:	31 d2                	xor    edx,edx
c00082ce:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00082d2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082d6:	29 df                	sub    edi,ebx
c00082d8:	75 c5                	jne    c000829f <f_mkfs+0xfe6>
c00082da:	b1 0c                	mov    cl,0xc
c00082dc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e1:	74 1d                	je     c0008300 <f_mkfs+0x1047>
c00082e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00082e8:	b1 06                	mov    cl,0x6
c00082ea:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00082ee:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00082f2:	72 0c                	jb     c0008300 <f_mkfs+0x1047>
c00082f4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00082f9:	0f 94 c1             	sete   cl
c00082fc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008300:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008305:	75 4c                	jne    c0008353 <f_mkfs+0x109a>
c0008307:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000830b:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000830f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008316:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000831d:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008328:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008333:	0f b6 c9             	movzx  ecx,cl
c0008336:	83 ec 0c             	sub    esp,0xc
c0008339:	55                   	push   ebp
c000833a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008345:	e8 2f c2 ff ff       	call   c0004579 <create_partition>
c000834a:	83 c4 10             	add    esp,0x10
c000834d:	89 c3                	mov    ebx,eax
c000834f:	85 c0                	test   eax,eax
c0008351:	75 34                	jne    c0008387 <f_mkfs+0x10ce>
c0008353:	31 db                	xor    ebx,ebx
c0008355:	50                   	push   eax
c0008356:	6a 00                	push   0x0
c0008358:	6a 00                	push   0x0
c000835a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000835e:	e8 27 98 ff ff       	call   c0001b8a <disk_ioctl>
c0008363:	83 c4 10             	add    esp,0x10
c0008366:	85 c0                	test   eax,eax
c0008368:	74 1d                	je     c0008387 <f_mkfs+0x10ce>
c000836a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008372:	75 0c                	jne    c0008380 <f_mkfs+0x10c7>
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	55                   	push   ebp
c0008378:	e8 75 00 00 00       	call   c00083f2 <ff_memfree>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	bb 01 00 00 00       	mov    ebx,0x1
c0008385:	eb 48                	jmp    c00083cf <f_mkfs+0x1116>
c0008387:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000838f:	75 3e                	jne    c00083cf <f_mkfs+0x1116>
c0008391:	83 ec 0c             	sub    esp,0xc
c0008394:	55                   	push   ebp
c0008395:	e8 58 00 00 00       	call   c00083f2 <ff_memfree>
c000839a:	83 c4 10             	add    esp,0x10
c000839d:	eb 30                	jmp    c00083cf <f_mkfs+0x1116>
c000839f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083a4:	0f 85 eb fa ff ff    	jne    c0007e95 <f_mkfs+0xbdc>
c00083aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083ae:	81 ff 80 00 00 00    	cmp    edi,0x80
c00083b4:	0f 86 b8 f9 ff ff    	jbe    c0007d72 <f_mkfs+0xab9>
c00083ba:	e9 bf fb ff ff       	jmp    c0007f7e <f_mkfs+0xcc5>
c00083bf:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083c4:	0f 85 c0 fa ff ff    	jne    c0007e8a <f_mkfs+0xbd1>
c00083ca:	e9 af fb ff ff       	jmp    c0007f7e <f_mkfs+0xcc5>
c00083cf:	81 c4 9c 00 00 00    	add    esp,0x9c
c00083d5:	89 d8                	mov    eax,ebx
c00083d7:	5b                   	pop    ebx
c00083d8:	5e                   	pop    esi
c00083d9:	5f                   	pop    edi
c00083da:	5d                   	pop    ebp
c00083db:	c3                   	ret    

c00083dc <ff_memalloc>:
c00083dc:	83 ec 0c             	sub    esp,0xc
c00083df:	83 ec 0c             	sub    esp,0xc
c00083e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083e6:	e8 fa 4f 00 00       	call   c000d3e5 <malloc>
c00083eb:	83 c4 10             	add    esp,0x10
c00083ee:	83 c4 0c             	add    esp,0xc
c00083f1:	c3                   	ret    

c00083f2 <ff_memfree>:
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	83 ec 0c             	sub    esp,0xc
c00083f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083fc:	e8 f4 4f 00 00       	call   c000d3f5 <free>
c0008401:	83 c4 10             	add    esp,0x10
c0008404:	90                   	nop
c0008405:	83 c4 0c             	add    esp,0xc
c0008408:	c3                   	ret    

c0008409 <ff_uni2oem>:
c0008409:	83 ec 14             	sub    esp,0x14
c000840c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008410:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008414:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000841b:	c7 44 24 0c 40 fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fa40
c0008423:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008428:	77 0b                	ja     c0008435 <ff_uni2oem+0x2c>
c000842a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000842e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008433:	eb 5b                	jmp    c0008490 <ff_uni2oem+0x87>
c0008435:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000843d:	77 51                	ja     c0008490 <ff_uni2oem+0x87>
c000843f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008445:	75 49                	jne    c0008490 <ff_uni2oem+0x87>
c0008447:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000844e:	eb 0b                	jmp    c000845b <ff_uni2oem+0x52>
c0008450:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008455:	40                   	inc    eax
c0008456:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000845b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008461:	77 1b                	ja     c000847e <ff_uni2oem+0x75>
c0008463:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008468:	01 c0                	add    eax,eax
c000846a:	89 c2                	mov    edx,eax
c000846c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008470:	01 d0                	add    eax,edx
c0008472:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008475:	0f b7 c0             	movzx  eax,ax
c0008478:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000847c:	75 d2                	jne    c0008450 <ff_uni2oem+0x47>
c000847e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008483:	83 e8 80             	sub    eax,0xffffff80
c0008486:	25 ff 00 00 00       	and    eax,0xff
c000848b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008490:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008495:	83 c4 14             	add    esp,0x14
c0008498:	c3                   	ret    

c0008499 <ff_oem2uni>:
c0008499:	83 ec 18             	sub    esp,0x18
c000849c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00084a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a4:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00084a9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ad:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00084b4:	c7 44 24 10 40 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa40
c00084bc:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00084c2:	77 0b                	ja     c00084cf <ff_oem2uni+0x36>
c00084c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084c8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084cd:	eb 2d                	jmp    c00084fc <ff_oem2uni+0x63>
c00084cf:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084d5:	75 25                	jne    c00084fc <ff_oem2uni+0x63>
c00084d7:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00084de:	77 1c                	ja     c00084fc <ff_oem2uni+0x63>
c00084e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00084e5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00084ea:	01 c0                	add    eax,eax
c00084ec:	89 c2                	mov    edx,eax
c00084ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084f2:	01 d0                	add    eax,edx
c00084f4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084fc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008501:	83 c4 18             	add    esp,0x18
c0008504:	c3                   	ret    

c0008505 <ff_wtoupper>:
c0008505:	83 ec 10             	sub    esp,0x10
c0008508:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008510:	0f 87 3e 01 00 00    	ja     c0008654 <ff_wtoupper+0x14f>
c0008516:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000851a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000851f:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008526:	77 07                	ja     c000852f <ff_wtoupper+0x2a>
c0008528:	b8 40 f8 01 c0       	mov    eax,0xc001f840
c000852d:	eb 05                	jmp    c0008534 <ff_wtoupper+0x2f>
c000852f:	b8 80 f7 01 c0       	mov    eax,0xc001f780
c0008534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000853c:	8d 50 02             	lea    edx,[eax+0x2]
c000853f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008543:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008546:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000854b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008551:	0f 84 f4 00 00 00    	je     c000864b <ff_wtoupper+0x146>
c0008557:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000855c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008561:	0f 82 e4 00 00 00    	jb     c000864b <ff_wtoupper+0x146>
c0008567:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000856b:	8d 50 02             	lea    edx,[eax+0x2]
c000856e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000857a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000857f:	66 c1 e8 08          	shr    ax,0x8
c0008583:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008588:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000858f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008594:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008599:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000859e:	01 ca                	add    edx,ecx
c00085a0:	39 d0                	cmp    eax,edx
c00085a2:	0f 8d 86 00 00 00    	jge    c000862e <ff_wtoupper+0x129>
c00085a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085ad:	83 f8 08             	cmp    eax,0x8
c00085b0:	0f 87 94 00 00 00    	ja     c000864a <ff_wtoupper+0x145>
c00085b6:	8b 04 85 40 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe08c0]
c00085bd:	ff e0                	jmp    eax
c00085bf:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00085c4:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00085c9:	29 c2                	sub    edx,eax
c00085cb:	89 d0                	mov    eax,edx
c00085cd:	01 c0                	add    eax,eax
c00085cf:	89 c2                	mov    edx,eax
c00085d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d5:	01 d0                	add    eax,edx
c00085d7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	eb 4b                	jmp    c000862c <ff_wtoupper+0x127>
c00085e1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085e6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00085ea:	83 e0 01             	and    eax,0x1
c00085ed:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00085f2:	eb 38                	jmp    c000862c <ff_wtoupper+0x127>
c00085f4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00085fa:	eb 30                	jmp    c000862c <ff_wtoupper+0x127>
c00085fc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008602:	eb 28                	jmp    c000862c <ff_wtoupper+0x127>
c0008604:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000860a:	eb 20                	jmp    c000862c <ff_wtoupper+0x127>
c000860c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008612:	eb 18                	jmp    c000862c <ff_wtoupper+0x127>
c0008614:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000861a:	eb 10                	jmp    c000862c <ff_wtoupper+0x127>
c000861c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008622:	eb 08                	jmp    c000862c <ff_wtoupper+0x127>
c0008624:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000862b:	90                   	nop
c000862c:	eb 1c                	jmp    c000864a <ff_wtoupper+0x145>
c000862e:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008634:	0f 85 fe fe ff ff    	jne    c0008538 <ff_wtoupper+0x33>
c000863a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000863f:	01 c0                	add    eax,eax
c0008641:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008645:	e9 ee fe ff ff       	jmp    c0008538 <ff_wtoupper+0x33>
c000864a:	90                   	nop
c000864b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008650:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008654:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	c3                   	ret    

c000865c <is_bad_src_ratio>:
c000865c:	83 ec 0c             	sub    esp,0xc
c000865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008663:	89 04 24             	mov    DWORD PTR [esp],eax
c0008666:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000866a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000866e:	dd 04 24             	fld    QWORD PTR [esp]
c0008671:	dd 05 00 00 02 c0    	fld    QWORD PTR ds:0xc0020000
c0008677:	de d9                	fcompp 
c0008679:	df e0                	fnstsw ax
c000867b:	f6 c4 45             	test   ah,0x45
c000867e:	74 10                	je     c0008690 <is_bad_src_ratio+0x34>
c0008680:	dd 04 24             	fld    QWORD PTR [esp]
c0008683:	dc 1d 08 00 02 c0    	fcomp  QWORD PTR ds:0xc0020008
c0008689:	df e0                	fnstsw ax
c000868b:	f6 c4 45             	test   ah,0x45
c000868e:	75 07                	jne    c0008697 <is_bad_src_ratio+0x3b>
c0008690:	b8 01 00 00 00       	mov    eax,0x1
c0008695:	eb 05                	jmp    c000869c <is_bad_src_ratio+0x40>
c0008697:	b8 00 00 00 00       	mov    eax,0x0
c000869c:	83 c4 0c             	add    esp,0xc
c000869f:	c3                   	ret    

c00086a0 <psrc_set_converter>:
c00086a0:	56                   	push   esi
c00086a1:	89 d6                	mov    esi,edx
c00086a3:	53                   	push   ebx
c00086a4:	89 c3                	mov    ebx,eax
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	52                   	push   edx
c00086aa:	50                   	push   eax
c00086ab:	e8 33 24 00 00       	call   c000aae3 <sinc_set_converter>
c00086b0:	83 c4 10             	add    esp,0x10
c00086b3:	85 c0                	test   eax,eax
c00086b5:	74 25                	je     c00086dc <psrc_set_converter+0x3c>
c00086b7:	50                   	push   eax
c00086b8:	50                   	push   eax
c00086b9:	56                   	push   esi
c00086ba:	53                   	push   ebx
c00086bb:	e8 39 29 00 00       	call   c000aff9 <zoh_set_converter>
c00086c0:	83 c4 10             	add    esp,0x10
c00086c3:	85 c0                	test   eax,eax
c00086c5:	74 15                	je     c00086dc <psrc_set_converter+0x3c>
c00086c7:	51                   	push   ecx
c00086c8:	51                   	push   ecx
c00086c9:	56                   	push   esi
c00086ca:	53                   	push   ebx
c00086cb:	e8 10 0a 00 00       	call   c00090e0 <linear_set_converter>
c00086d0:	83 c4 10             	add    esp,0x10
c00086d3:	ba 0a 00 00 00       	mov    edx,0xa
c00086d8:	85 c0                	test   eax,eax
c00086da:	75 02                	jne    c00086de <psrc_set_converter+0x3e>
c00086dc:	31 d2                	xor    edx,edx
c00086de:	89 d0                	mov    eax,edx
c00086e0:	5a                   	pop    edx
c00086e1:	5b                   	pop    ebx
c00086e2:	5e                   	pop    esi
c00086e3:	c3                   	ret    

c00086e4 <src_delete>:
c00086e4:	53                   	push   ebx
c00086e5:	83 ec 08             	sub    esp,0x8
c00086e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086ec:	85 db                	test   ebx,ebx
c00086ee:	74 29                	je     c0008719 <src_delete+0x35>
c00086f0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086f3:	85 c0                	test   eax,eax
c00086f5:	74 0c                	je     c0008703 <src_delete+0x1f>
c00086f7:	83 ec 0c             	sub    esp,0xc
c00086fa:	50                   	push   eax
c00086fb:	e8 f5 4c 00 00       	call   c000d3f5 <free>
c0008700:	83 c4 10             	add    esp,0x10
c0008703:	50                   	push   eax
c0008704:	6a 3c                	push   0x3c
c0008706:	6a 00                	push   0x0
c0008708:	53                   	push   ebx
c0008709:	e8 b2 7f ff ff       	call   c00006c0 <memset>
c000870e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008711:	e8 df 4c 00 00       	call   c000d3f5 <free>
c0008716:	83 c4 10             	add    esp,0x10
c0008719:	31 c0                	xor    eax,eax
c000871b:	83 c4 08             	add    esp,0x8
c000871e:	5b                   	pop    ebx
c000871f:	c3                   	ret    

c0008720 <src_process>:
c0008720:	56                   	push   esi
c0008721:	53                   	push   ebx
c0008722:	53                   	push   ebx
c0008723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008727:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000872b:	85 f6                	test   esi,esi
c000872d:	0f 84 e2 00 00 00    	je     c0008815 <src_process+0xf5>
c0008733:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008737:	0f 84 df 00 00 00    	je     c000881c <src_process+0xfc>
c000873d:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008741:	0f 84 d5 00 00 00    	je     c000881c <src_process+0xfc>
c0008747:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c000874e:	0f 85 cf 00 00 00    	jne    c0008823 <src_process+0x103>
c0008754:	85 db                	test   ebx,ebx
c0008756:	0f 84 ce 00 00 00    	je     c000882a <src_process+0x10a>
c000875c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000875f:	0f 84 cc 00 00 00    	je     c0008831 <src_process+0x111>
c0008765:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008769:	0f 84 c2 00 00 00    	je     c0008831 <src_process+0x111>
c000876f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008772:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008775:	e8 e2 fe ff ff       	call   c000865c <is_bad_src_ratio>
c000877a:	5a                   	pop    edx
c000877b:	85 c0                	test   eax,eax
c000877d:	59                   	pop    ecx
c000877e:	0f 85 b4 00 00 00    	jne    c0008838 <src_process+0x118>
c0008784:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008788:	79 07                	jns    c0008791 <src_process+0x71>
c000878a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008791:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008795:	79 07                	jns    c000879e <src_process+0x7e>
c0008797:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000879e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00087a0:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00087a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00087a6:	39 ca                	cmp    edx,ecx
c00087a8:	73 0b                	jae    c00087b5 <src_process+0x95>
c00087aa:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00087ae:	8d 04 82             	lea    eax,[edx+eax*4]
c00087b1:	39 c1                	cmp    ecx,eax
c00087b3:	eb 09                	jmp    c00087be <src_process+0x9e>
c00087b5:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00087b9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00087bc:	39 c2                	cmp    edx,eax
c00087be:	72 7f                	jb     c000883f <src_process+0x11f>
c00087c0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00087c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087ce:	d9 05 20 00 02 c0    	fld    DWORD PTR ds:0xc0020020
c00087d4:	dc 1e                	fcomp  QWORD PTR [esi]
c00087d6:	df e0                	fnstsw ax
c00087d8:	9e                   	sahf   
c00087d9:	76 05                	jbe    c00087e0 <src_process+0xc0>
c00087db:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00087de:	dd 1e                	fstp   QWORD PTR [esi]
c00087e0:	83 ec 10             	sub    esp,0x10
c00087e3:	dd 06                	fld    QWORD PTR [esi]
c00087e5:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00087e8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00087eb:	e8 70 60 01 00       	call   c001e860 <fabs>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	dd 05 10 00 02 c0    	fld    QWORD PTR ds:0xc0020010
c00087f9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00087fd:	de d9                	fcompp 
c00087ff:	df e0                	fnstsw ax
c0008801:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008805:	9e                   	sahf   
c0008806:	76 05                	jbe    c000880d <src_process+0xed>
c0008808:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000880b:	eb 03                	jmp    c0008810 <src_process+0xf0>
c000880d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008810:	59                   	pop    ecx
c0008811:	5b                   	pop    ebx
c0008812:	5e                   	pop    esi
c0008813:	ff e0                	jmp    eax
c0008815:	b8 02 00 00 00       	mov    eax,0x2
c000881a:	eb 28                	jmp    c0008844 <src_process+0x124>
c000881c:	b8 07 00 00 00       	mov    eax,0x7
c0008821:	eb 21                	jmp    c0008844 <src_process+0x124>
c0008823:	b8 12 00 00 00       	mov    eax,0x12
c0008828:	eb 1a                	jmp    c0008844 <src_process+0x124>
c000882a:	b8 03 00 00 00       	mov    eax,0x3
c000882f:	eb 13                	jmp    c0008844 <src_process+0x124>
c0008831:	b8 04 00 00 00       	mov    eax,0x4
c0008836:	eb 0c                	jmp    c0008844 <src_process+0x124>
c0008838:	b8 06 00 00 00       	mov    eax,0x6
c000883d:	eb 05                	jmp    c0008844 <src_process+0x124>
c000883f:	b8 10 00 00 00       	mov    eax,0x10
c0008844:	5a                   	pop    edx
c0008845:	5b                   	pop    ebx
c0008846:	5e                   	pop    esi
c0008847:	c3                   	ret    

c0008848 <src_callback_read>:
c0008848:	55                   	push   ebp
c0008849:	57                   	push   edi
c000884a:	56                   	push   esi
c000884b:	53                   	push   ebx
c000884c:	83 ec 4c             	sub    esp,0x4c
c000884f:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008853:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008857:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000885b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000885f:	85 ff                	test   edi,edi
c0008861:	0f 8e 36 01 00 00    	jle    c000899d <src_callback_read+0x155>
c0008867:	85 db                	test   ebx,ebx
c0008869:	0f 84 2e 01 00 00    	je     c000899d <src_callback_read+0x155>
c000886f:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008876:	74 0c                	je     c0008884 <src_callback_read+0x3c>
c0008878:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000887f:	e9 19 01 00 00       	jmp    c000899d <src_callback_read+0x155>
c0008884:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008888:	75 0c                	jne    c0008896 <src_callback_read+0x4e>
c000888a:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008891:	e9 07 01 00 00       	jmp    c000899d <src_callback_read+0x155>
c0008896:	51                   	push   ecx
c0008897:	6a 24                	push   0x24
c0008899:	6a 00                	push   0x0
c000889b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000889f:	50                   	push   eax
c00088a0:	e8 1b 7e ff ff       	call   c00006c0 <memset>
c00088a5:	5e                   	pop    esi
c00088a6:	5d                   	pop    ebp
c00088a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088af:	e8 a8 fd ff ff       	call   c000865c <is_bad_src_ratio>
c00088b4:	83 c4 10             	add    esp,0x10
c00088b7:	85 c0                	test   eax,eax
c00088b9:	74 0c                	je     c00088c7 <src_callback_read+0x7f>
c00088bb:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00088c2:	e9 d6 00 00 00       	jmp    c000899d <src_callback_read+0x155>
c00088c7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00088cb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00088cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00088d3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00088d7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00088da:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00088de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00088e2:	31 f6                	xor    esi,esi
c00088e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00088e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00088eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00088f0:	75 30                	jne    c0008922 <src_callback_read+0xda>
c00088f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00088f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088fa:	52                   	push   edx
c00088fb:	52                   	push   edx
c00088fc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008900:	50                   	push   eax
c0008901:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008904:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008907:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000890b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000890f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	85 c0                	test   eax,eax
c0008918:	75 08                	jne    c0008922 <src_callback_read+0xda>
c000891a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008922:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008929:	50                   	push   eax
c000892a:	50                   	push   eax
c000892b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000892f:	50                   	push   eax
c0008930:	53                   	push   ebx
c0008931:	e8 ea fd ff ff       	call   c0008720 <src_process>
c0008936:	83 c4 10             	add    esp,0x10
c0008939:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008940:	85 c0                	test   eax,eax
c0008942:	75 42                	jne    c0008986 <src_callback_read+0x13e>
c0008944:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008948:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000894b:	89 e9                	mov    ecx,ebp
c000894d:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008951:	0f af ca             	imul   ecx,edx
c0008954:	c1 e1 02             	shl    ecx,0x2
c0008957:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c000895b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000895f:	0f af d1             	imul   edx,ecx
c0008962:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008966:	c1 e2 02             	shl    edx,0x2
c0008969:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c000896d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008970:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008975:	75 04                	jne    c000897b <src_callback_read+0x133>
c0008977:	85 c9                	test   ecx,ecx
c0008979:	74 0b                	je     c0008986 <src_callback_read+0x13e>
c000897b:	39 d7                	cmp    edi,edx
c000897d:	7e 09                	jle    c0008988 <src_callback_read+0x140>
c000897f:	89 d6                	mov    esi,edx
c0008981:	e9 65 ff ff ff       	jmp    c00088eb <src_callback_read+0xa3>
c0008986:	89 f2                	mov    edx,esi
c0008988:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000898c:	85 c0                	test   eax,eax
c000898e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008991:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008995:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008998:	74 05                	je     c000899f <src_callback_read+0x157>
c000899a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000899d:	31 d2                	xor    edx,edx
c000899f:	83 c4 4c             	add    esp,0x4c
c00089a2:	89 d0                	mov    eax,edx
c00089a4:	5b                   	pop    ebx
c00089a5:	5e                   	pop    esi
c00089a6:	5f                   	pop    edi
c00089a7:	5d                   	pop    ebp
c00089a8:	c3                   	ret    

c00089a9 <src_set_ratio>:
c00089a9:	53                   	push   ebx
c00089aa:	b8 02 00 00 00       	mov    eax,0x2
c00089af:	83 ec 08             	sub    esp,0x8
c00089b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00089b6:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c00089ba:	85 db                	test   ebx,ebx
c00089bc:	74 33                	je     c00089f1 <src_set_ratio+0x48>
c00089be:	b8 07 00 00 00       	mov    eax,0x7
c00089c3:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00089c7:	74 2c                	je     c00089f5 <src_set_ratio+0x4c>
c00089c9:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00089cd:	74 2a                	je     c00089f9 <src_set_ratio+0x50>
c00089cf:	50                   	push   eax
c00089d0:	50                   	push   eax
c00089d1:	dd 14 24             	fst    QWORD PTR [esp]
c00089d4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00089d8:	e8 7f fc ff ff       	call   c000865c <is_bad_src_ratio>
c00089dd:	5a                   	pop    edx
c00089de:	85 c0                	test   eax,eax
c00089e0:	59                   	pop    ecx
c00089e1:	75 07                	jne    c00089ea <src_set_ratio+0x41>
c00089e3:	dd 04 24             	fld    QWORD PTR [esp]
c00089e6:	dd 1b                	fstp   QWORD PTR [ebx]
c00089e8:	eb 11                	jmp    c00089fb <src_set_ratio+0x52>
c00089ea:	b8 06 00 00 00       	mov    eax,0x6
c00089ef:	eb 0a                	jmp    c00089fb <src_set_ratio+0x52>
c00089f1:	dd d8                	fstp   st(0)
c00089f3:	eb 06                	jmp    c00089fb <src_set_ratio+0x52>
c00089f5:	dd d8                	fstp   st(0)
c00089f7:	eb 02                	jmp    c00089fb <src_set_ratio+0x52>
c00089f9:	dd d8                	fstp   st(0)
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	c3                   	ret    

c0008a00 <src_get_channels>:
c0008a00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a04:	b8 02 00 00 00       	mov    eax,0x2
c0008a09:	85 d2                	test   edx,edx
c0008a0b:	74 14                	je     c0008a21 <src_get_channels+0x21>
c0008a0d:	b8 07 00 00 00       	mov    eax,0x7
c0008a12:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008a16:	74 09                	je     c0008a21 <src_get_channels+0x21>
c0008a18:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008a1c:	74 03                	je     c0008a21 <src_get_channels+0x21>
c0008a1e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008a21:	c3                   	ret    

c0008a22 <src_reset>:
c0008a22:	53                   	push   ebx
c0008a23:	b8 02 00 00 00       	mov    eax,0x2
c0008a28:	83 ec 08             	sub    esp,0x8
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	85 db                	test   ebx,ebx
c0008a31:	74 2e                	je     c0008a61 <src_reset+0x3f>
c0008a33:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008a36:	85 c0                	test   eax,eax
c0008a38:	74 09                	je     c0008a43 <src_reset+0x21>
c0008a3a:	83 ec 0c             	sub    esp,0xc
c0008a3d:	53                   	push   ebx
c0008a3e:	ff d0                	call   eax
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	d9 ee                	fldz   
c0008a45:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008a4c:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008a4f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008a56:	dd 1b                	fstp   QWORD PTR [ebx]
c0008a58:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a5f:	31 c0                	xor    eax,eax
c0008a61:	83 c4 08             	add    esp,0x8
c0008a64:	5b                   	pop    ebx
c0008a65:	c3                   	ret    

c0008a66 <src_new>:
c0008a66:	57                   	push   edi
c0008a67:	56                   	push   esi
c0008a68:	53                   	push   ebx
c0008a69:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008a6d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008a71:	85 f6                	test   esi,esi
c0008a73:	74 73                	je     c0008ae8 <src_new+0x82>
c0008a75:	85 ff                	test   edi,edi
c0008a77:	7f 08                	jg     c0008a81 <src_new+0x1b>
c0008a79:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008a7f:	eb 1e                	jmp    c0008a9f <src_new+0x39>
c0008a81:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008a87:	50                   	push   eax
c0008a88:	50                   	push   eax
c0008a89:	6a 3c                	push   0x3c
c0008a8b:	6a 01                	push   0x1
c0008a8d:	e8 83 49 00 00       	call   c000d415 <calloc>
c0008a92:	83 c4 10             	add    esp,0x10
c0008a95:	89 c3                	mov    ebx,eax
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 10                	jne    c0008aab <src_new+0x45>
c0008a9b:	85 f6                	test   esi,esi
c0008a9d:	75 04                	jne    c0008aa3 <src_new+0x3d>
c0008a9f:	31 db                	xor    ebx,ebx
c0008aa1:	eb 4b                	jmp    c0008aee <src_new+0x88>
c0008aa3:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008aa9:	eb 43                	jmp    c0008aee <src_new+0x88>
c0008aab:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008aae:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008ab5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ab9:	e8 e2 fb ff ff       	call   c00086a0 <psrc_set_converter>
c0008abe:	85 c0                	test   eax,eax
c0008ac0:	74 18                	je     c0008ada <src_new+0x74>
c0008ac2:	85 f6                	test   esi,esi
c0008ac4:	74 06                	je     c0008acc <src_new+0x66>
c0008ac6:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008acc:	83 ec 0c             	sub    esp,0xc
c0008acf:	53                   	push   ebx
c0008ad0:	31 db                	xor    ebx,ebx
c0008ad2:	e8 1e 49 00 00       	call   c000d3f5 <free>
c0008ad7:	83 c4 10             	add    esp,0x10
c0008ada:	83 ec 0c             	sub    esp,0xc
c0008add:	53                   	push   ebx
c0008ade:	e8 3f ff ff ff       	call   c0008a22 <src_reset>
c0008ae3:	83 c4 10             	add    esp,0x10
c0008ae6:	eb 06                	jmp    c0008aee <src_new+0x88>
c0008ae8:	85 ff                	test   edi,edi
c0008aea:	7f 9b                	jg     c0008a87 <src_new+0x21>
c0008aec:	eb b1                	jmp    c0008a9f <src_new+0x39>
c0008aee:	89 d8                	mov    eax,ebx
c0008af0:	5b                   	pop    ebx
c0008af1:	5e                   	pop    esi
c0008af2:	5f                   	pop    edi
c0008af3:	c3                   	ret    

c0008af4 <src_callback_new>:
c0008af4:	56                   	push   esi
c0008af5:	53                   	push   ebx
c0008af6:	53                   	push   ebx
c0008af7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aff:	85 f6                	test   esi,esi
c0008b01:	75 0e                	jne    c0008b11 <src_callback_new+0x1d>
c0008b03:	31 db                	xor    ebx,ebx
c0008b05:	85 c0                	test   eax,eax
c0008b07:	74 47                	je     c0008b50 <src_callback_new+0x5c>
c0008b09:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008b0f:	eb 3f                	jmp    c0008b50 <src_callback_new+0x5c>
c0008b11:	85 c0                	test   eax,eax
c0008b13:	74 06                	je     c0008b1b <src_callback_new+0x27>
c0008b15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008b1b:	51                   	push   ecx
c0008b1c:	50                   	push   eax
c0008b1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008b21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008b25:	e8 3c ff ff ff       	call   c0008a66 <src_new>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 c3                	mov    ebx,eax
c0008b2f:	85 c0                	test   eax,eax
c0008b31:	74 1d                	je     c0008b50 <src_callback_new+0x5c>
c0008b33:	83 ec 0c             	sub    esp,0xc
c0008b36:	50                   	push   eax
c0008b37:	e8 e6 fe ff ff       	call   c0008a22 <src_reset>
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008b47:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008b4a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008b4d:	83 c4 10             	add    esp,0x10
c0008b50:	89 d8                	mov    eax,ebx
c0008b52:	5a                   	pop    edx
c0008b53:	5b                   	pop    ebx
c0008b54:	5e                   	pop    esi
c0008b55:	c3                   	ret    

c0008b56 <src_get_name>:
c0008b56:	53                   	push   ebx
c0008b57:	83 ec 14             	sub    esp,0x14
c0008b5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008b5e:	53                   	push   ebx
c0008b5f:	e8 59 1f 00 00       	call   c000aabd <sinc_get_name>
c0008b64:	83 c4 10             	add    esp,0x10
c0008b67:	85 c0                	test   eax,eax
c0008b69:	75 1d                	jne    c0008b88 <src_get_name+0x32>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	e8 67 24 00 00       	call   c000afdb <zoh_get_name>
c0008b74:	83 c4 10             	add    esp,0x10
c0008b77:	85 c0                	test   eax,eax
c0008b79:	75 0d                	jne    c0008b88 <src_get_name+0x32>
c0008b7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008b7f:	83 c4 08             	add    esp,0x8
c0008b82:	5b                   	pop    ebx
c0008b83:	e9 3a 05 00 00       	jmp    c00090c2 <linear_get_name>
c0008b88:	83 c4 08             	add    esp,0x8
c0008b8b:	5b                   	pop    ebx
c0008b8c:	c3                   	ret    

c0008b8d <src_get_description>:
c0008b8d:	53                   	push   ebx
c0008b8e:	83 ec 14             	sub    esp,0x14
c0008b91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008b95:	53                   	push   ebx
c0008b96:	e8 35 1f 00 00       	call   c000aad0 <sinc_get_description>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	85 c0                	test   eax,eax
c0008ba0:	75 1d                	jne    c0008bbf <src_get_description+0x32>
c0008ba2:	83 ec 0c             	sub    esp,0xc
c0008ba5:	53                   	push   ebx
c0008ba6:	e8 3f 24 00 00       	call   c000afea <zoh_get_description>
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	85 c0                	test   eax,eax
c0008bb0:	75 0d                	jne    c0008bbf <src_get_description+0x32>
c0008bb2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008bb6:	83 c4 08             	add    esp,0x8
c0008bb9:	5b                   	pop    ebx
c0008bba:	e9 12 05 00 00       	jmp    c00090d1 <linear_get_description>
c0008bbf:	83 c4 08             	add    esp,0x8
c0008bc2:	5b                   	pop    ebx
c0008bc3:	c3                   	ret    

c0008bc4 <src_get_version>:
c0008bc4:	b8 40 fb 01 c0       	mov    eax,0xc001fb40
c0008bc9:	c3                   	ret    

c0008bca <src_is_valid_ratio>:
c0008bca:	50                   	push   eax
c0008bcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008bcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008bd3:	e8 84 fa ff ff       	call   c000865c <is_bad_src_ratio>
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	0f 94 c0             	sete   al
c0008bdd:	83 c4 0c             	add    esp,0xc
c0008be0:	0f b6 c0             	movzx  eax,al
c0008be3:	c3                   	ret    

c0008be4 <src_error>:
c0008be4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008be8:	31 c0                	xor    eax,eax
c0008bea:	85 d2                	test   edx,edx
c0008bec:	74 03                	je     c0008bf1 <src_error+0xd>
c0008bee:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008bf1:	c3                   	ret    

c0008bf2 <src_strerror>:
c0008bf2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008bf6:	31 c0                	xor    eax,eax
c0008bf8:	83 fa 17             	cmp    edx,0x17
c0008bfb:	77 07                	ja     c0008c04 <src_strerror+0x12>
c0008bfd:	8b 04 95 a0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0060]
c0008c04:	c3                   	ret    

c0008c05 <src_simple>:
c0008c05:	56                   	push   esi
c0008c06:	53                   	push   ebx
c0008c07:	83 ec 18             	sub    esp,0x18
c0008c0a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c12:	50                   	push   eax
c0008c13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008c17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008c1b:	e8 46 fe ff ff       	call   c0008a66 <src_new>
c0008c20:	83 c4 10             	add    esp,0x10
c0008c23:	85 c0                	test   eax,eax
c0008c25:	75 06                	jne    c0008c2d <src_simple+0x28>
c0008c27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c2b:	eb 25                	jmp    c0008c52 <src_simple+0x4d>
c0008c2d:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008c34:	89 c3                	mov    ebx,eax
c0008c36:	50                   	push   eax
c0008c37:	50                   	push   eax
c0008c38:	56                   	push   esi
c0008c39:	53                   	push   ebx
c0008c3a:	e8 e1 fa ff ff       	call   c0008720 <src_process>
c0008c3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008c42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c46:	e8 99 fa ff ff       	call   c00086e4 <src_delete>
c0008c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c4f:	83 c4 10             	add    esp,0x10
c0008c52:	83 c4 14             	add    esp,0x14
c0008c55:	5b                   	pop    ebx
c0008c56:	5e                   	pop    esi
c0008c57:	c3                   	ret    

c0008c58 <src_short_to_float_array>:
c0008c58:	83 ec 0c             	sub    esp,0xc
c0008c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008c63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008c67:	85 c0                	test   eax,eax
c0008c69:	74 0f                	je     c0008c7a <src_short_to_float_array+0x22>
c0008c6b:	48                   	dec    eax
c0008c6c:	d9 05 24 00 02 c0    	fld    DWORD PTR ds:0xc0020024
c0008c72:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008c75:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008c78:	eb ed                	jmp    c0008c67 <src_short_to_float_array+0xf>
c0008c7a:	83 c4 0c             	add    esp,0xc
c0008c7d:	c3                   	ret    

c0008c7e <src_float_to_short_array>:
c0008c7e:	56                   	push   esi
c0008c7f:	53                   	push   ebx
c0008c80:	52                   	push   edx
c0008c81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008c89:	85 db                	test   ebx,ebx
c0008c8b:	74 51                	je     c0008cde <src_float_to_short_array+0x60>
c0008c8d:	4b                   	dec    ebx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	d9 05 28 00 02 c0    	fld    DWORD PTR ds:0xc0020028
c0008c98:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008c9b:	dc 15 18 00 02 c0    	fcom   QWORD PTR ds:0xc0020018
c0008ca1:	df e0                	fnstsw ax
c0008ca3:	9e                   	sahf   
c0008ca4:	72 0a                	jb     c0008cb0 <src_float_to_short_array+0x32>
c0008ca6:	dd d8                	fstp   st(0)
c0008ca8:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008cae:	eb d9                	jmp    c0008c89 <src_float_to_short_array+0xb>
c0008cb0:	d9 05 2c 00 02 c0    	fld    DWORD PTR ds:0xc002002c
c0008cb6:	d8 d9                	fcomp  st(1)
c0008cb8:	df e0                	fnstsw ax
c0008cba:	9e                   	sahf   
c0008cbb:	72 0a                	jb     c0008cc7 <src_float_to_short_array+0x49>
c0008cbd:	dd d8                	fstp   st(0)
c0008cbf:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008cc5:	eb c2                	jmp    c0008c89 <src_float_to_short_array+0xb>
c0008cc7:	83 ec 10             	sub    esp,0x10
c0008cca:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ccd:	e8 ae 5b 01 00       	call   c001e880 <lrint>
c0008cd2:	83 c4 10             	add    esp,0x10
c0008cd5:	c1 f8 10             	sar    eax,0x10
c0008cd8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008cdc:	eb ab                	jmp    c0008c89 <src_float_to_short_array+0xb>
c0008cde:	58                   	pop    eax
c0008cdf:	5b                   	pop    ebx
c0008ce0:	5e                   	pop    esi
c0008ce1:	c3                   	ret    

c0008ce2 <src_int_to_float_array>:
c0008ce2:	83 ec 0c             	sub    esp,0xc
c0008ce5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ce9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ced:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008cf1:	85 c0                	test   eax,eax
c0008cf3:	74 0f                	je     c0008d04 <src_int_to_float_array+0x22>
c0008cf5:	48                   	dec    eax
c0008cf6:	d9 05 30 00 02 c0    	fld    DWORD PTR ds:0xc0020030
c0008cfc:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008cff:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d02:	eb ed                	jmp    c0008cf1 <src_int_to_float_array+0xf>
c0008d04:	83 c4 0c             	add    esp,0xc
c0008d07:	c3                   	ret    

c0008d08 <src_float_to_int_array>:
c0008d08:	56                   	push   esi
c0008d09:	53                   	push   ebx
c0008d0a:	52                   	push   edx
c0008d0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d13:	85 db                	test   ebx,ebx
c0008d15:	74 4f                	je     c0008d66 <src_float_to_int_array+0x5e>
c0008d17:	4b                   	dec    ebx
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	d9 05 28 00 02 c0    	fld    DWORD PTR ds:0xc0020028
c0008d22:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d25:	dc 15 18 00 02 c0    	fcom   QWORD PTR ds:0xc0020018
c0008d2b:	df e0                	fnstsw ax
c0008d2d:	9e                   	sahf   
c0008d2e:	72 0b                	jb     c0008d3b <src_float_to_int_array+0x33>
c0008d30:	dd d8                	fstp   st(0)
c0008d32:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d39:	eb d8                	jmp    c0008d13 <src_float_to_int_array+0xb>
c0008d3b:	d9 05 2c 00 02 c0    	fld    DWORD PTR ds:0xc002002c
c0008d41:	d8 d9                	fcomp  st(1)
c0008d43:	df e0                	fnstsw ax
c0008d45:	9e                   	sahf   
c0008d46:	72 0b                	jb     c0008d53 <src_float_to_int_array+0x4b>
c0008d48:	dd d8                	fstp   st(0)
c0008d4a:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d51:	eb c0                	jmp    c0008d13 <src_float_to_int_array+0xb>
c0008d53:	83 ec 10             	sub    esp,0x10
c0008d56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d59:	e8 22 5b 01 00       	call   c001e880 <lrint>
c0008d5e:	83 c4 10             	add    esp,0x10
c0008d61:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d64:	eb ad                	jmp    c0008d13 <src_float_to_int_array+0xb>
c0008d66:	58                   	pop    eax
c0008d67:	5b                   	pop    ebx
c0008d68:	5e                   	pop    esi
c0008d69:	c3                   	ret    

c0008d6a <is_bad_src_ratio>:
c0008d6a:	83 ec 0c             	sub    esp,0xc
c0008d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d71:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008d78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d7c:	dd 04 24             	fld    QWORD PTR [esp]
c0008d7f:	dd 05 00 00 02 c0    	fld    QWORD PTR ds:0xc0020000
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	f6 c4 45             	test   ah,0x45
c0008d8c:	74 10                	je     c0008d9e <is_bad_src_ratio+0x34>
c0008d8e:	dd 04 24             	fld    QWORD PTR [esp]
c0008d91:	dc 1d 08 00 02 c0    	fcomp  QWORD PTR ds:0xc0020008
c0008d97:	df e0                	fnstsw ax
c0008d99:	f6 c4 45             	test   ah,0x45
c0008d9c:	75 07                	jne    c0008da5 <is_bad_src_ratio+0x3b>
c0008d9e:	b8 01 00 00 00       	mov    eax,0x1
c0008da3:	eb 05                	jmp    c0008daa <is_bad_src_ratio+0x40>
c0008da5:	b8 00 00 00 00       	mov    eax,0x0
c0008daa:	83 c4 0c             	add    esp,0xc
c0008dad:	c3                   	ret    

c0008dae <fmod_one>:
c0008dae:	83 ec 2c             	sub    esp,0x2c
c0008db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008dbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dc1:	83 ec 08             	sub    esp,0x8
c0008dc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dcc:	e8 af 5a 01 00       	call   c001e880 <lrint>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008dd8:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ddc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008de0:	de e1                	fsubrp st(1),st
c0008de2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008de6:	d9 ee                	fldz   
c0008de8:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008dec:	df e0                	fnstsw ax
c0008dee:	f6 c4 45             	test   ah,0x45
c0008df1:	75 0a                	jne    c0008dfd <fmod_one+0x4f>
c0008df3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008df7:	d9 e8                	fld1   
c0008df9:	de c1                	faddp  st(1),st
c0008dfb:	eb 04                	jmp    c0008e01 <fmod_one+0x53>
c0008dfd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008e01:	83 c4 2c             	add    esp,0x2c
c0008e04:	c3                   	ret    

c0008e05 <linear_vari_process>:
c0008e05:	55                   	push   ebp
c0008e06:	57                   	push   edi
c0008e07:	56                   	push   esi
c0008e08:	53                   	push   ebx
c0008e09:	83 ec 2c             	sub    esp,0x2c
c0008e0c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008e10:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008e14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008e1c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e20:	0f 8e 5e 02 00 00    	jle    c0009084 <linear_vari_process+0x27f>
c0008e26:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008e29:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008e31:	85 db                	test   ebx,ebx
c0008e33:	0f 84 4b 02 00 00    	je     c0009084 <linear_vari_process+0x27f>
c0008e39:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e3c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e40:	74 19                	je     c0008e5b <linear_vari_process+0x56>
c0008e42:	31 d2                	xor    edx,edx
c0008e44:	39 c2                	cmp    edx,eax
c0008e46:	7d 0c                	jge    c0008e54 <linear_vari_process+0x4f>
c0008e48:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e4a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e4d:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e51:	42                   	inc    edx
c0008e52:	eb f0                	jmp    c0008e44 <linear_vari_process+0x3f>
c0008e54:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e5b:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e5e:	0f af d0             	imul   edx,eax
c0008e61:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e64:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e68:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e6f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e72:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e79:	dd 07                	fld    QWORD PTR [edi]
c0008e7b:	dd 14 24             	fst    QWORD PTR [esp]
c0008e7e:	50                   	push   eax
c0008e7f:	50                   	push   eax
c0008e80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e83:	e8 e2 fe ff ff       	call   c0008d6a <is_bad_src_ratio>
c0008e88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008e8c:	5a                   	pop    edx
c0008e8d:	59                   	pop    ecx
c0008e8e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008e93:	0f 85 e3 01 00 00    	jne    c000907c <linear_vari_process+0x277>
c0008e99:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008e9c:	d9 e8                	fld1   
c0008e9e:	d8 d1                	fcom   st(1)
c0008ea0:	df e0                	fnstsw ax
c0008ea2:	9e                   	sahf   
c0008ea3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008ea7:	0f 86 99 00 00 00    	jbe    c0008f46 <linear_vari_process+0x141>
c0008ead:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008eb0:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008eb3:	0f 8d 8d 00 00 00    	jge    c0008f46 <linear_vari_process+0x141>
c0008eb9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ebd:	d8 c1                	fadd   st,st(1)
c0008ebf:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ec2:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008ec5:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008ec8:	df e0                	fnstsw ax
c0008eca:	9e                   	sahf   
c0008ecb:	73 79                	jae    c0008f46 <linear_vari_process+0x141>
c0008ecd:	85 d2                	test   edx,edx
c0008ecf:	7e 38                	jle    c0008f09 <linear_vari_process+0x104>
c0008ed1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008ed5:	83 ec 10             	sub    esp,0x10
c0008ed8:	dd 07                	fld    QWORD PTR [edi]
c0008eda:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008edd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ee0:	e8 7b 59 01 00       	call   c001e860 <fabs>
c0008ee5:	83 c4 10             	add    esp,0x10
c0008ee8:	dc 1d 78 00 02 c0    	fcomp  QWORD PTR ds:0xc0020078
c0008eee:	df e0                	fnstsw ax
c0008ef0:	9e                   	sahf   
c0008ef1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ef5:	76 12                	jbe    c0008f09 <linear_vari_process+0x104>
c0008ef7:	dd 07                	fld    QWORD PTR [edi]
c0008ef9:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008efc:	d8 e1                	fsub   st,st(1)
c0008efe:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008f01:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008f04:	de c1                	faddp  st(1),st
c0008f06:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f09:	31 c0                	xor    eax,eax
c0008f0b:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008f0e:	7e 1f                	jle    c0008f2f <linear_vari_process+0x12a>
c0008f10:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008f14:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008f16:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008f19:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008f1d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008f20:	d8 e1                	fsub   st,st(1)
c0008f22:	40                   	inc    eax
c0008f23:	d8 ca                	fmul   st,st(2)
c0008f25:	de c1                	faddp  st(1),st
c0008f27:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008f2a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008f2d:	eb dc                	jmp    c0008f0b <linear_vari_process+0x106>
c0008f2f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008f33:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008f36:	de c1                	faddp  st(1),st
c0008f38:	e9 5f ff ff ff       	jmp    c0008e9c <linear_vari_process+0x97>
c0008f3d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008f41:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008f44:	de c1                	faddp  st(1),st
c0008f46:	83 ec 10             	sub    esp,0x10
c0008f49:	dd 14 24             	fst    QWORD PTR [esp]
c0008f4c:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008f50:	e8 59 fe ff ff       	call   c0008dae <fmod_one>
c0008f55:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008f58:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008f5c:	d8 e1                	fsub   st,st(1)
c0008f5e:	d9 c9                	fxch   st(1)
c0008f60:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008f64:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f67:	e8 14 59 01 00       	call   c001e880 <lrint>
c0008f6c:	83 c4 10             	add    esp,0x10
c0008f6f:	0f af e8             	imul   ebp,eax
c0008f72:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008f76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008f79:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008f7c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008f7f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008f82:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008f85:	0f 8d 97 00 00 00    	jge    c0009022 <linear_vari_process+0x21d>
c0008f8b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f8f:	d9 c0                	fld    st(0)
c0008f91:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008f94:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008f98:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008f9c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008fa0:	de d9                	fcompp 
c0008fa2:	df e0                	fnstsw ax
c0008fa4:	9e                   	sahf   
c0008fa5:	76 7b                	jbe    c0009022 <linear_vari_process+0x21d>
c0008fa7:	85 ed                	test   ebp,ebp
c0008fa9:	7e 38                	jle    c0008fe3 <linear_vari_process+0x1de>
c0008fab:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008faf:	83 ec 10             	sub    esp,0x10
c0008fb2:	dd 07                	fld    QWORD PTR [edi]
c0008fb4:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fb7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fba:	e8 a1 58 01 00       	call   c001e860 <fabs>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	dc 1d 78 00 02 c0    	fcomp  QWORD PTR ds:0xc0020078
c0008fc8:	df e0                	fnstsw ax
c0008fca:	9e                   	sahf   
c0008fcb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008fcf:	76 12                	jbe    c0008fe3 <linear_vari_process+0x1de>
c0008fd1:	dd 07                	fld    QWORD PTR [edi]
c0008fd3:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008fd6:	d8 e1                	fsub   st,st(1)
c0008fd8:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008fdb:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008fde:	de c1                	faddp  st(1),st
c0008fe0:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fe3:	31 c0                	xor    eax,eax
c0008fe5:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008fe8:	39 c2                	cmp    edx,eax
c0008fea:	0f 8e 4d ff ff ff    	jle    c0008f3d <linear_vari_process+0x138>
c0008ff0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ff2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008ff5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008ff9:	89 e9                	mov    ecx,ebp
c0008ffb:	01 c5                	add    ebp,eax
c0008ffd:	29 d1                	sub    ecx,edx
c0008fff:	89 ca                	mov    edx,ecx
c0009001:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009005:	01 c2                	add    edx,eax
c0009007:	40                   	inc    eax
c0009008:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000900b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000900e:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0009011:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009014:	d8 e1                	fsub   st,st(1)
c0009016:	d8 ca                	fmul   st,st(2)
c0009018:	de c1                	faddp  st(1),st
c000901a:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c000901d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009020:	eb c3                	jmp    c0008fe5 <linear_vari_process+0x1e0>
c0009022:	39 d1                	cmp    ecx,edx
c0009024:	7d 13                	jge    c0009039 <linear_vari_process+0x234>
c0009026:	89 d0                	mov    eax,edx
c0009028:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000902b:	29 c8                	sub    eax,ecx
c000902d:	99                   	cdq    
c000902e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009035:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0009039:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000903c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000903f:	85 c0                	test   eax,eax
c0009041:	7f 1b                	jg     c000905e <linear_vari_process+0x259>
c0009043:	dd 04 24             	fld    QWORD PTR [esp]
c0009046:	dd 1f                	fstp   QWORD PTR [edi]
c0009048:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000904b:	99                   	cdq    
c000904c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000904f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009052:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009055:	99                   	cdq    
c0009056:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009059:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000905c:	eb 26                	jmp    c0009084 <linear_vari_process+0x27f>
c000905e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009061:	31 d2                	xor    edx,edx
c0009063:	29 c8                	sub    eax,ecx
c0009065:	c1 e0 02             	shl    eax,0x2
c0009068:	39 d1                	cmp    ecx,edx
c000906a:	7e d7                	jle    c0009043 <linear_vari_process+0x23e>
c000906c:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000906e:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009072:	83 c0 04             	add    eax,0x4
c0009075:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0009079:	42                   	inc    edx
c000907a:	eb ec                	jmp    c0009068 <linear_vari_process+0x263>
c000907c:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009084:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009088:	83 c4 2c             	add    esp,0x2c
c000908b:	5b                   	pop    ebx
c000908c:	5e                   	pop    esi
c000908d:	5f                   	pop    edi
c000908e:	5d                   	pop    ebp
c000908f:	c3                   	ret    

c0009090 <linear_reset>:
c0009090:	83 ec 0c             	sub    esp,0xc
c0009093:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009097:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000909a:	85 c0                	test   eax,eax
c000909c:	74 20                	je     c00090be <linear_reset+0x2e>
c000909e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00090a1:	83 c0 1c             	add    eax,0x1c
c00090a4:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00090a7:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00090ae:	c1 e2 02             	shl    edx,0x2
c00090b1:	51                   	push   ecx
c00090b2:	52                   	push   edx
c00090b3:	6a 00                	push   0x0
c00090b5:	50                   	push   eax
c00090b6:	e8 05 76 ff ff       	call   c00006c0 <memset>
c00090bb:	83 c4 10             	add    esp,0x10
c00090be:	83 c4 0c             	add    esp,0xc
c00090c1:	c3                   	ret    

c00090c2 <linear_get_name>:
c00090c2:	31 c0                	xor    eax,eax
c00090c4:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00090c9:	75 05                	jne    c00090d0 <linear_get_name+0xe>
c00090cb:	b8 34 00 02 c0       	mov    eax,0xc0020034
c00090d0:	c3                   	ret    

c00090d1 <linear_get_description>:
c00090d1:	31 c0                	xor    eax,eax
c00090d3:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00090d8:	75 05                	jne    c00090df <linear_get_description+0xe>
c00090da:	b8 48 00 02 c0       	mov    eax,0xc0020048
c00090df:	c3                   	ret    

c00090e0 <linear_set_converter>:
c00090e0:	53                   	push   ebx
c00090e1:	b8 0a 00 00 00       	mov    eax,0xa
c00090e6:	83 ec 08             	sub    esp,0x8
c00090e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090ed:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00090f2:	75 6e                	jne    c0009162 <linear_set_converter+0x82>
c00090f4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00090f7:	85 c0                	test   eax,eax
c00090f9:	74 13                	je     c000910e <linear_set_converter+0x2e>
c00090fb:	83 ec 0c             	sub    esp,0xc
c00090fe:	50                   	push   eax
c00090ff:	e8 f1 42 00 00       	call   c000d3f5 <free>
c0009104:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000910b:	83 c4 10             	add    esp,0x10
c000910e:	50                   	push   eax
c000910f:	50                   	push   eax
c0009110:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009113:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000911a:	50                   	push   eax
c000911b:	6a 01                	push   0x1
c000911d:	e8 f3 42 00 00       	call   c000d415 <calloc>
c0009122:	83 c4 10             	add    esp,0x10
c0009125:	89 c2                	mov    edx,eax
c0009127:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000912a:	85 d2                	test   edx,edx
c000912c:	b8 01 00 00 00       	mov    eax,0x1
c0009131:	74 2f                	je     c0009162 <linear_set_converter+0x82>
c0009133:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009139:	83 ec 0c             	sub    esp,0xc
c000913c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000913f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009142:	c7 43 24 05 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e05
c0009149:	c7 43 20 05 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e05
c0009150:	c7 43 28 90 90 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009090
c0009157:	53                   	push   ebx
c0009158:	e8 33 ff ff ff       	call   c0009090 <linear_reset>
c000915d:	83 c4 10             	add    esp,0x10
c0009160:	31 c0                	xor    eax,eax
c0009162:	83 c4 08             	add    esp,0x8
c0009165:	5b                   	pop    ebx
c0009166:	c3                   	ret    

c0009167 <is_bad_src_ratio>:
c0009167:	83 ec 0c             	sub    esp,0xc
c000916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000916e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009171:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	dd 04 24             	fld    QWORD PTR [esp]
c000917c:	dd 05 00 00 02 c0    	fld    QWORD PTR ds:0xc0020000
c0009182:	de d9                	fcompp 
c0009184:	df e0                	fnstsw ax
c0009186:	f6 c4 45             	test   ah,0x45
c0009189:	74 10                	je     c000919b <is_bad_src_ratio+0x34>
c000918b:	dd 04 24             	fld    QWORD PTR [esp]
c000918e:	dc 1d 08 00 02 c0    	fcomp  QWORD PTR ds:0xc0020008
c0009194:	df e0                	fnstsw ax
c0009196:	f6 c4 45             	test   ah,0x45
c0009199:	75 07                	jne    c00091a2 <is_bad_src_ratio+0x3b>
c000919b:	b8 01 00 00 00       	mov    eax,0x1
c00091a0:	eb 05                	jmp    c00091a7 <is_bad_src_ratio+0x40>
c00091a2:	b8 00 00 00 00       	mov    eax,0x0
c00091a7:	83 c4 0c             	add    esp,0xc
c00091aa:	c3                   	ret    

c00091ab <int_to_fp>:
c00091ab:	c1 e0 0c             	shl    eax,0xc
c00091ae:	c3                   	ret    

c00091af <fp_to_int>:
c00091af:	c1 f8 0c             	sar    eax,0xc
c00091b2:	c3                   	ret    

c00091b3 <fp_fraction_part>:
c00091b3:	25 ff 0f 00 00       	and    eax,0xfff
c00091b8:	c3                   	ret    

c00091b9 <fp_to_double>:
c00091b9:	83 ec 0c             	sub    esp,0xc
c00091bc:	e8 f2 ff ff ff       	call   c00091b3 <fp_fraction_part>
c00091c1:	d9 05 40 87 03 c0    	fld    DWORD PTR ds:0xc0038740
c00091c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091cb:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00091cf:	83 c4 0c             	add    esp,0xc
c00091d2:	c3                   	ret    

c00091d3 <calc_output_single>:
c00091d3:	55                   	push   ebp
c00091d4:	57                   	push   edi
c00091d5:	89 c7                	mov    edi,eax
c00091d7:	56                   	push   esi
c00091d8:	53                   	push   ebx
c00091d9:	89 d3                	mov    ebx,edx
c00091db:	83 ec 24             	sub    esp,0x24
c00091de:	89 de                	mov    esi,ebx
c00091e0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091e3:	e8 c3 ff ff ff       	call   c00091ab <int_to_fp>
c00091e8:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00091eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00091f6:	29 c8                	sub    eax,ecx
c00091f8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009200:	99                   	cdq    
c0009201:	f7 fb                	idiv   ebx
c0009203:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009206:	0f af f0             	imul   esi,eax
c0009209:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000920d:	01 ce                	add    esi,ecx
c000920f:	29 c2                	sub    edx,eax
c0009211:	8d 14 97             	lea    edx,[edi+edx*4]
c0009214:	89 f0                	mov    eax,esi
c0009216:	e8 9e ff ff ff       	call   c00091b9 <fp_to_double>
c000921b:	89 f0                	mov    eax,esi
c000921d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009221:	e8 89 ff ff ff       	call   c00091af <fp_to_int>
c0009226:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000922a:	83 c2 04             	add    edx,0x4
c000922d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009231:	d8 e1                	fsub   st,st(1)
c0009233:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009237:	de c9                	fmulp  st(1),st
c0009239:	de c1                	faddp  st(1),st
c000923b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009241:	29 de                	sub    esi,ebx
c0009243:	dc 04 24             	fadd   QWORD PTR [esp]
c0009246:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009249:	79 c9                	jns    c0009214 <calc_output_single+0x41>
c000924b:	89 d8                	mov    eax,ebx
c000924d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009251:	29 c8                	sub    eax,ecx
c0009253:	d9 ee                	fldz   
c0009255:	89 c1                	mov    ecx,eax
c0009257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000925b:	29 c8                	sub    eax,ecx
c000925d:	99                   	cdq    
c000925e:	f7 fb                	idiv   ebx
c0009260:	89 da                	mov    edx,ebx
c0009262:	0f af d0             	imul   edx,eax
c0009265:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c0009269:	01 d1                	add    ecx,edx
c000926b:	8d 14 87             	lea    edx,[edi+eax*4]
c000926e:	89 c8                	mov    eax,ecx
c0009270:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009274:	e8 40 ff ff ff       	call   c00091b9 <fp_to_double>
c0009279:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000927d:	89 c8                	mov    eax,ecx
c000927f:	e8 2b ff ff ff       	call   c00091af <fp_to_int>
c0009284:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009288:	29 d9                	sub    ecx,ebx
c000928a:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000928e:	83 ea 04             	sub    edx,0x4
c0009291:	d8 e1                	fsub   st,st(1)
c0009293:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009297:	de c9                	fmulp  st(1),st
c0009299:	de c1                	faddp  st(1),st
c000929b:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c00092a1:	85 c9                	test   ecx,ecx
c00092a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	7f c3                	jg     c000926e <calc_output_single+0x9b>
c00092ab:	dd 04 24             	fld    QWORD PTR [esp]
c00092ae:	83 c4 24             	add    esp,0x24
c00092b1:	de c1                	faddp  st(1),st
c00092b3:	5b                   	pop    ebx
c00092b4:	5e                   	pop    esi
c00092b5:	5f                   	pop    edi
c00092b6:	5d                   	pop    ebp
c00092b7:	c3                   	ret    

c00092b8 <calc_output_stereo>:
c00092b8:	55                   	push   ebp
c00092b9:	57                   	push   edi
c00092ba:	89 c7                	mov    edi,eax
c00092bc:	56                   	push   esi
c00092bd:	53                   	push   ebx
c00092be:	89 d3                	mov    ebx,edx
c00092c0:	83 ec 44             	sub    esp,0x44
c00092c3:	89 de                	mov    esi,ebx
c00092c5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00092c9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092cc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00092d0:	e8 d6 fe ff ff       	call   c00091ab <int_to_fp>
c00092d5:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092dc:	d9 ee                	fldz   
c00092de:	29 c8                	sub    eax,ecx
c00092e0:	dd 14 24             	fst    QWORD PTR [esp]
c00092e3:	99                   	cdq    
c00092e4:	f7 fb                	idiv   ebx
c00092e6:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00092e9:	0f af f0             	imul   esi,eax
c00092ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00092f0:	01 ce                	add    esi,ecx
c00092f2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00092f5:	0f af c2             	imul   eax,edx
c00092f8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00092fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009300:	29 c2                	sub    edx,eax
c0009302:	8d 14 97             	lea    edx,[edi+edx*4]
c0009305:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009309:	89 f0                	mov    eax,esi
c000930b:	e8 a9 fe ff ff       	call   c00091b9 <fp_to_double>
c0009310:	89 f0                	mov    eax,esi
c0009312:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009316:	e8 94 fe ff ff       	call   c00091af <fp_to_int>
c000931b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000931f:	83 c2 08             	add    edx,0x8
c0009322:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009326:	d8 e1                	fsub   st,st(1)
c0009328:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000932c:	de c9                	fmulp  st(1),st
c000932e:	de c1                	faddp  st(1),st
c0009330:	d9 c0                	fld    st(0)
c0009332:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009338:	dc 04 24             	fadd   QWORD PTR [esp]
c000933b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000933e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009344:	29 de                	sub    esi,ebx
c0009346:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000934a:	de c1                	faddp  st(1),st
c000934c:	79 b7                	jns    c0009305 <calc_output_stereo+0x4d>
c000934e:	89 d8                	mov    eax,ebx
c0009350:	d9 ee                	fldz   
c0009352:	d9 ee                	fldz   
c0009354:	29 c8                	sub    eax,ecx
c0009356:	89 c1                	mov    ecx,eax
c0009358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000935c:	29 c8                	sub    eax,ecx
c000935e:	99                   	cdq    
c000935f:	f7 fb                	idiv   ebx
c0009361:	89 da                	mov    edx,ebx
c0009363:	0f af d0             	imul   edx,eax
c0009366:	40                   	inc    eax
c0009367:	01 d1                	add    ecx,edx
c0009369:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c000936e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009372:	8d 14 87             	lea    edx,[edi+eax*4]
c0009375:	eb 04                	jmp    c000937b <calc_output_stereo+0xc3>
c0009377:	d9 ca                	fxch   st(2)
c0009379:	d9 c9                	fxch   st(1)
c000937b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000937f:	d9 c9                	fxch   st(1)
c0009381:	89 c8                	mov    eax,ecx
c0009383:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009387:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000938b:	e8 29 fe ff ff       	call   c00091b9 <fp_to_double>
c0009390:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009394:	89 c8                	mov    eax,ecx
c0009396:	e8 14 fe ff ff       	call   c00091af <fp_to_int>
c000939b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000939f:	29 d9                	sub    ecx,ebx
c00093a1:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093a5:	83 ea 08             	sub    edx,0x8
c00093a8:	d8 e1                	fsub   st,st(1)
c00093aa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00093ae:	de c9                	fmulp  st(1),st
c00093b0:	de c1                	faddp  st(1),st
c00093b2:	d9 c0                	fld    st(0)
c00093b4:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00093ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00093be:	de c1                	faddp  st(1),st
c00093c0:	d9 c9                	fxch   st(1)
c00093c2:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00093c8:	85 c9                	test   ecx,ecx
c00093ca:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093ce:	de c1                	faddp  st(1),st
c00093d0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00093d4:	7f a1                	jg     c0009377 <calc_output_stereo+0xbf>
c00093d6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00093da:	dd 04 24             	fld    QWORD PTR [esp]
c00093dd:	de c3                	faddp  st(3),st
c00093df:	d9 ca                	fxch   st(2)
c00093e1:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00093e5:	d9 18                	fstp   DWORD PTR [eax]
c00093e7:	de c1                	faddp  st(1),st
c00093e9:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00093ed:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00093f0:	83 c4 44             	add    esp,0x44
c00093f3:	5b                   	pop    ebx
c00093f4:	5e                   	pop    esi
c00093f5:	5f                   	pop    edi
c00093f6:	5d                   	pop    ebp
c00093f7:	c3                   	ret    

c00093f8 <calc_output_quad>:
c00093f8:	55                   	push   ebp
c00093f9:	57                   	push   edi
c00093fa:	56                   	push   esi
c00093fb:	89 c6                	mov    esi,eax
c00093fd:	53                   	push   ebx
c00093fe:	89 d3                	mov    ebx,edx
c0009400:	83 ec 5c             	sub    esp,0x5c
c0009403:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009407:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000940a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000940d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009411:	e8 95 fd ff ff       	call   c00091ab <int_to_fp>
c0009416:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009419:	d9 ee                	fldz   
c000941b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000941f:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009423:	29 c8                	sub    eax,ecx
c0009425:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0009429:	99                   	cdq    
c000942a:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000942e:	f7 fb                	idiv   ebx
c0009430:	89 da                	mov    edx,ebx
c0009432:	0f af d0             	imul   edx,eax
c0009435:	01 ca                	add    edx,ecx
c0009437:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000943b:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c000943e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009442:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009445:	0f af c2             	imul   eax,edx
c0009448:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000944c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009450:	29 c2                	sub    edx,eax
c0009452:	8d 14 96             	lea    edx,[esi+edx*4]
c0009455:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000945d:	e8 57 fd ff ff       	call   c00091b9 <fp_to_double>
c0009462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009466:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000946a:	e8 40 fd ff ff       	call   c00091af <fp_to_int>
c000946f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009473:	83 c2 10             	add    edx,0x10
c0009476:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000947a:	d8 e1                	fsub   st,st(1)
c000947c:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009480:	de c9                	fmulp  st(1),st
c0009482:	de c1                	faddp  st(1),st
c0009484:	d9 c0                	fld    st(0)
c0009486:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000948c:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009490:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009494:	d9 c0                	fld    st(0)
c0009496:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000949c:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00094a0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00094a4:	d9 c0                	fld    st(0)
c00094a6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00094ac:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00094b0:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00094b4:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00094ba:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00094be:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00094c2:	de c1                	faddp  st(1),st
c00094c4:	79 8f                	jns    c0009455 <calc_output_quad+0x5d>
c00094c6:	89 d8                	mov    eax,ebx
c00094c8:	d9 ee                	fldz   
c00094ca:	29 c8                	sub    eax,ecx
c00094cc:	d9 ee                	fldz   
c00094ce:	89 c1                	mov    ecx,eax
c00094d0:	d9 ee                	fldz   
c00094d2:	d9 ee                	fldz   
c00094d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00094d8:	29 c8                	sub    eax,ecx
c00094da:	99                   	cdq    
c00094db:	f7 fb                	idiv   ebx
c00094dd:	89 da                	mov    edx,ebx
c00094df:	0f af d0             	imul   edx,eax
c00094e2:	40                   	inc    eax
c00094e3:	01 d1                	add    ecx,edx
c00094e5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00094ea:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00094ee:	8d 14 86             	lea    edx,[esi+eax*4]
c00094f1:	eb 0a                	jmp    c00094fd <calc_output_quad+0x105>
c00094f3:	d9 cc                	fxch   st(4)
c00094f5:	d9 ca                	fxch   st(2)
c00094f7:	d9 c9                	fxch   st(1)
c00094f9:	d9 cb                	fxch   st(3)
c00094fb:	d9 c9                	fxch   st(1)
c00094fd:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009501:	d9 c9                	fxch   st(1)
c0009503:	89 c8                	mov    eax,ecx
c0009505:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009509:	d9 c9                	fxch   st(1)
c000950b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000950f:	d9 c9                	fxch   st(1)
c0009511:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009515:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009519:	e8 9b fc ff ff       	call   c00091b9 <fp_to_double>
c000951e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009522:	89 c8                	mov    eax,ecx
c0009524:	e8 86 fc ff ff       	call   c00091af <fp_to_int>
c0009529:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000952d:	29 d9                	sub    ecx,ebx
c000952f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009533:	83 ea 10             	sub    edx,0x10
c0009536:	d8 e1                	fsub   st,st(1)
c0009538:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000953c:	de c9                	fmulp  st(1),st
c000953e:	de c1                	faddp  st(1),st
c0009540:	d9 c0                	fld    st(0)
c0009542:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c0009548:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000954c:	de c1                	faddp  st(1),st
c000954e:	d9 c1                	fld    st(1)
c0009550:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009556:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000955a:	de c1                	faddp  st(1),st
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009564:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000957e:	0f 8f 6f ff ff ff    	jg     c00094f3 <calc_output_quad+0xfb>
c0009584:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009588:	de c4                	faddp  st(4),st
c000958a:	d9 cb                	fxch   st(3)
c000958c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958f:	d9 1f                	fstp   DWORD PTR [edi]
c0009591:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009595:	de c2                	faddp  st(2),st
c0009597:	d9 c9                	fxch   st(1)
c0009599:	dc 0c 24             	fmul   QWORD PTR [esp]
c000959c:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c000959f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00095a3:	de c3                	faddp  st(3),st
c00095a5:	d9 ca                	fxch   st(2)
c00095a7:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095aa:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c00095ad:	de c1                	faddp  st(1),st
c00095af:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b2:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00095b5:	83 c4 5c             	add    esp,0x5c
c00095b8:	5b                   	pop    ebx
c00095b9:	5e                   	pop    esi
c00095ba:	5f                   	pop    edi
c00095bb:	5d                   	pop    ebp
c00095bc:	c3                   	ret    

c00095bd <calc_output_hex>:
c00095bd:	55                   	push   ebp
c00095be:	57                   	push   edi
c00095bf:	89 c7                	mov    edi,eax
c00095c1:	56                   	push   esi
c00095c2:	53                   	push   ebx
c00095c3:	89 d3                	mov    ebx,edx
c00095c5:	83 ec 7c             	sub    esp,0x7c
c00095c8:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00095cf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00095d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00095d5:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00095dc:	e8 ca fb ff ff       	call   c00091ab <int_to_fp>
c00095e1:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00095e4:	d9 ee                	fldz   
c00095e6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00095ea:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00095ee:	29 c8                	sub    eax,ecx
c00095f0:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00095f4:	99                   	cdq    
c00095f5:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00095f9:	f7 fb                	idiv   ebx
c00095fb:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00095ff:	89 da                	mov    edx,ebx
c0009601:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009605:	0f af d0             	imul   edx,eax
c0009608:	01 ca                	add    edx,ecx
c000960a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000960e:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009611:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009615:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009618:	0f af c2             	imul   eax,edx
c000961b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000961f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009623:	29 c2                	sub    edx,eax
c0009625:	8d 14 97             	lea    edx,[edi+edx*4]
c0009628:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000962c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009630:	e8 84 fb ff ff       	call   c00091b9 <fp_to_double>
c0009635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009639:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000963d:	e8 6d fb ff ff       	call   c00091af <fp_to_int>
c0009642:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009646:	83 c2 18             	add    edx,0x18
c0009649:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000964d:	d8 e1                	fsub   st,st(1)
c000964f:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009653:	de c9                	fmulp  st(1),st
c0009655:	de c1                	faddp  st(1),st
c0009657:	d9 c0                	fld    st(0)
c0009659:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c000965f:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009663:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009667:	d9 c0                	fld    st(0)
c0009669:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c000966f:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009673:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009677:	d9 c0                	fld    st(0)
c0009679:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000967f:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009683:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009687:	d9 c0                	fld    st(0)
c0009689:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000968f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009693:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009697:	d9 c0                	fld    st(0)
c0009699:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000969f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00096a3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096a7:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00096ad:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00096b1:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00096b5:	de c1                	faddp  st(1),st
c00096b7:	0f 89 6b ff ff ff    	jns    c0009628 <calc_output_hex+0x6b>
c00096bd:	d9 ee                	fldz   
c00096bf:	d9 ee                	fldz   
c00096c1:	89 d8                	mov    eax,ebx
c00096c3:	29 c8                	sub    eax,ecx
c00096c5:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00096c9:	89 c1                	mov    ecx,eax
c00096cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00096cf:	29 c8                	sub    eax,ecx
c00096d1:	99                   	cdq    
c00096d2:	f7 fb                	idiv   ebx
c00096d4:	89 da                	mov    edx,ebx
c00096d6:	0f af d0             	imul   edx,eax
c00096d9:	40                   	inc    eax
c00096da:	01 d1                	add    ecx,edx
c00096dc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00096e1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00096e5:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00096e9:	8d 14 87             	lea    edx,[edi+eax*4]
c00096ec:	d9 ee                	fldz   
c00096ee:	d9 ee                	fldz   
c00096f0:	d9 ca                	fxch   st(2)
c00096f2:	eb 08                	jmp    c00096fc <calc_output_hex+0x13f>
c00096f4:	d9 cc                	fxch   st(4)
c00096f6:	d9 cb                	fxch   st(3)
c00096f8:	d9 ca                	fxch   st(2)
c00096fa:	d9 c9                	fxch   st(1)
c00096fc:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009700:	89 c8                	mov    eax,ecx
c0009702:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009706:	d9 ca                	fxch   st(2)
c0009708:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000970c:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009710:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009714:	e8 a0 fa ff ff       	call   c00091b9 <fp_to_double>
c0009719:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000971d:	89 c8                	mov    eax,ecx
c000971f:	e8 8b fa ff ff       	call   c00091af <fp_to_int>
c0009724:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009728:	29 d9                	sub    ecx,ebx
c000972a:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000972e:	83 ea 18             	sub    edx,0x18
c0009731:	d8 e1                	fsub   st,st(1)
c0009733:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009737:	de c9                	fmulp  st(1),st
c0009739:	de c1                	faddp  st(1),st
c000973b:	d9 c0                	fld    st(0)
c000973d:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009743:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009747:	de c1                	faddp  st(1),st
c0009749:	d9 c1                	fld    st(1)
c000974b:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009751:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009755:	de c1                	faddp  st(1),st
c0009757:	d9 c2                	fld    st(2)
c0009759:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c000975f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009763:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009767:	d9 c2                	fld    st(2)
c0009769:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c000976f:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009777:	d9 c2                	fld    st(2)
c0009779:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c000977f:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009783:	de c1                	faddp  st(1),st
c0009785:	d9 cb                	fxch   st(3)
c0009787:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000978d:	85 c9                	test   ecx,ecx
c000978f:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009793:	de c1                	faddp  st(1),st
c0009795:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009799:	0f 8f 55 ff ff ff    	jg     c00096f4 <calc_output_hex+0x137>
c000979f:	d9 cb                	fxch   st(3)
c00097a1:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00097a5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00097a8:	d9 1e                	fstp   DWORD PTR [esi]
c00097aa:	d9 c9                	fxch   st(1)
c00097ac:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00097b0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00097b3:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00097b6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00097ba:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00097be:	dc 0c 24             	fmul   QWORD PTR [esp]
c00097c1:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00097c4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00097c8:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00097cc:	dc 0c 24             	fmul   QWORD PTR [esp]
c00097cf:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00097d2:	d9 ca                	fxch   st(2)
c00097d4:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00097d8:	dc 0c 24             	fmul   QWORD PTR [esp]
c00097db:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00097de:	de c1                	faddp  st(1),st
c00097e0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00097e3:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00097e6:	83 c4 7c             	add    esp,0x7c
c00097e9:	5b                   	pop    ebx
c00097ea:	5e                   	pop    esi
c00097eb:	5f                   	pop    edi
c00097ec:	5d                   	pop    ebp
c00097ed:	c3                   	ret    

c00097ee <calc_output_multi>:
c00097ee:	55                   	push   ebp
c00097ef:	57                   	push   edi
c00097f0:	8d 78 44             	lea    edi,[eax+0x44]
c00097f3:	56                   	push   esi
c00097f4:	89 c6                	mov    esi,eax
c00097f6:	53                   	push   ebx
c00097f7:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00097fd:	83 ec 4c             	sub    esp,0x4c
c0009800:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009804:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009808:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000980c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009810:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009814:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009818:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000981b:	e8 8b f9 ff ff       	call   c00091ab <int_to_fp>
c0009820:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009823:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009827:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000982b:	99                   	cdq    
c000982c:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009830:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009834:	0f af d0             	imul   edx,eax
c0009837:	0f af c3             	imul   eax,ebx
c000983a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000983e:	29 c5                	sub    ebp,eax
c0009840:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009844:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009848:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000984f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009853:	52                   	push   edx
c0009854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009858:	6a 00                	push   0x0
c000985a:	57                   	push   edi
c000985b:	e8 60 6e ff ff       	call   c00006c0 <memset>
c0009860:	83 c4 10             	add    esp,0x10
c0009863:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009867:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000986b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000986f:	e8 45 f9 ff ff       	call   c00091b9 <fp_to_double>
c0009874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009878:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000987c:	e8 2e f9 ff ff       	call   c00091af <fp_to_int>
c0009881:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009884:	89 d9                	mov    ecx,ebx
c0009886:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009889:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000988d:	d8 e1                	fsub   st,st(1)
c000988f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009893:	de c9                	fmulp  st(1),st
c0009895:	de c1                	faddp  st(1),st
c0009897:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000989b:	89 c8                	mov    eax,ecx
c000989d:	bd 08 00 00 00       	mov    ebp,0x8
c00098a2:	99                   	cdq    
c00098a3:	f7 fd                	idiv   ebp
c00098a5:	4a                   	dec    edx
c00098a6:	83 fa 06             	cmp    edx,0x6
c00098a9:	77 07                	ja     c00098b2 <calc_output_multi+0xc4>
c00098ab:	ff 24 95 80 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff80]
c00098b2:	49                   	dec    ecx
c00098b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00098ba:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098c1:	d9 c1                	fld    st(1)
c00098c3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c7:	dc 00                	fadd   QWORD PTR [eax]
c00098c9:	dd 18                	fstp   QWORD PTR [eax]
c00098cb:	49                   	dec    ecx
c00098cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098d0:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00098d3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098da:	d9 c1                	fld    st(1)
c00098dc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098e0:	dc 00                	fadd   QWORD PTR [eax]
c00098e2:	dd 18                	fstp   QWORD PTR [eax]
c00098e4:	49                   	dec    ecx
c00098e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098e9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00098ec:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f3:	d9 c1                	fld    st(1)
c00098f5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098f9:	dc 00                	fadd   QWORD PTR [eax]
c00098fb:	dd 18                	fstp   QWORD PTR [eax]
c00098fd:	49                   	dec    ecx
c00098fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009902:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009905:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000990c:	d9 c1                	fld    st(1)
c000990e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009912:	dc 00                	fadd   QWORD PTR [eax]
c0009914:	dd 18                	fstp   QWORD PTR [eax]
c0009916:	49                   	dec    ecx
c0009917:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000991b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000991e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009925:	d9 c1                	fld    st(1)
c0009927:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000992b:	dc 00                	fadd   QWORD PTR [eax]
c000992d:	dd 18                	fstp   QWORD PTR [eax]
c000992f:	49                   	dec    ecx
c0009930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009934:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009937:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000993e:	d9 c1                	fld    st(1)
c0009940:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009944:	dc 00                	fadd   QWORD PTR [eax]
c0009946:	dd 18                	fstp   QWORD PTR [eax]
c0009948:	49                   	dec    ecx
c0009949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000994d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009950:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009957:	d9 c1                	fld    st(1)
c0009959:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995d:	dc 00                	fadd   QWORD PTR [eax]
c000995f:	dd 18                	fstp   QWORD PTR [eax]
c0009961:	49                   	dec    ecx
c0009962:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009966:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009969:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009970:	d9 c1                	fld    st(1)
c0009972:	85 c9                	test   ecx,ecx
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	dc 00                	fadd   QWORD PTR [eax]
c000997a:	dd 18                	fstp   QWORD PTR [eax]
c000997c:	0f 8f 19 ff ff ff    	jg     c000989b <calc_output_multi+0xad>
c0009982:	dd d9                	fstp   st(1)
c0009984:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009988:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000998c:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009990:	0f 89 d1 fe ff ff    	jns    c0009867 <calc_output_multi+0x79>
c0009996:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000999a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000999e:	89 d1                	mov    ecx,edx
c00099a0:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00099a4:	29 c8                	sub    eax,ecx
c00099a6:	99                   	cdq    
c00099a7:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00099ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099af:	0f af d0             	imul   edx,eax
c00099b2:	40                   	inc    eax
c00099b3:	01 d1                	add    ecx,edx
c00099b5:	0f af c3             	imul   eax,ebx
c00099b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099bc:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00099bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099c3:	50                   	push   eax
c00099c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00099c8:	6a 00                	push   0x0
c00099ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099ce:	e8 ed 6c ff ff       	call   c00006c0 <memset>
c00099d3:	83 c4 10             	add    esp,0x10
c00099d6:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00099da:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00099de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099e2:	e8 d2 f7 ff ff       	call   c00091b9 <fp_to_double>
c00099e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099eb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00099ef:	e8 bb f7 ff ff       	call   c00091af <fp_to_int>
c00099f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00099f7:	89 d9                	mov    ecx,ebx
c00099f9:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00099fc:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009a00:	d8 e1                	fsub   st,st(1)
c0009a02:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a06:	de c9                	fmulp  st(1),st
c0009a08:	de c1                	faddp  st(1),st
c0009a0a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009a0e:	89 c8                	mov    eax,ecx
c0009a10:	bd 08 00 00 00       	mov    ebp,0x8
c0009a15:	99                   	cdq    
c0009a16:	f7 fd                	idiv   ebp
c0009a18:	4a                   	dec    edx
c0009a19:	83 fa 06             	cmp    edx,0x6
c0009a1c:	77 07                	ja     c0009a25 <calc_output_multi+0x237>
c0009a1e:	ff 24 95 9c 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff64]
c0009a25:	49                   	dec    ecx
c0009a26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a2e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a31:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a38:	d9 c1                	fld    st(1)
c0009a3a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a3e:	dc 00                	fadd   QWORD PTR [eax]
c0009a40:	dd 18                	fstp   QWORD PTR [eax]
c0009a42:	49                   	dec    ecx
c0009a43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a4b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a4e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a55:	d9 c1                	fld    st(1)
c0009a57:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a5b:	dc 00                	fadd   QWORD PTR [eax]
c0009a5d:	dd 18                	fstp   QWORD PTR [eax]
c0009a5f:	49                   	dec    ecx
c0009a60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a68:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a6b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a72:	d9 c1                	fld    st(1)
c0009a74:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a78:	dc 00                	fadd   QWORD PTR [eax]
c0009a7a:	dd 18                	fstp   QWORD PTR [eax]
c0009a7c:	49                   	dec    ecx
c0009a7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a85:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a88:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a8f:	d9 c1                	fld    st(1)
c0009a91:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a95:	dc 00                	fadd   QWORD PTR [eax]
c0009a97:	dd 18                	fstp   QWORD PTR [eax]
c0009a99:	49                   	dec    ecx
c0009a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009aa2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009aa5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009aac:	d9 c1                	fld    st(1)
c0009aae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009ab2:	dc 00                	fadd   QWORD PTR [eax]
c0009ab4:	dd 18                	fstp   QWORD PTR [eax]
c0009ab6:	49                   	dec    ecx
c0009ab7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009abb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009abf:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009ac2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009ac9:	d9 c1                	fld    st(1)
c0009acb:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009acf:	dc 00                	fadd   QWORD PTR [eax]
c0009ad1:	dd 18                	fstp   QWORD PTR [eax]
c0009ad3:	49                   	dec    ecx
c0009ad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009adc:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009adf:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009ae6:	d9 c1                	fld    st(1)
c0009ae8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009aec:	dc 00                	fadd   QWORD PTR [eax]
c0009aee:	dd 18                	fstp   QWORD PTR [eax]
c0009af0:	49                   	dec    ecx
c0009af1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009af5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009af9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009afc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b03:	d9 c1                	fld    st(1)
c0009b05:	85 c9                	test   ecx,ecx
c0009b07:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b0b:	dc 00                	fadd   QWORD PTR [eax]
c0009b0d:	dd 18                	fstp   QWORD PTR [eax]
c0009b0f:	0f 8f f9 fe ff ff    	jg     c0009a0e <calc_output_multi+0x220>
c0009b15:	dd d9                	fstp   st(1)
c0009b17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009b1b:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009b1f:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009b23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009b28:	0f 8f ac fe ff ff    	jg     c00099da <calc_output_multi+0x1ec>
c0009b2e:	b9 08 00 00 00       	mov    ecx,0x8
c0009b33:	89 d8                	mov    eax,ebx
c0009b35:	99                   	cdq    
c0009b36:	f7 f9                	idiv   ecx
c0009b38:	4a                   	dec    edx
c0009b39:	83 fa 06             	cmp    edx,0x6
c0009b3c:	77 07                	ja     c0009b45 <calc_output_multi+0x357>
c0009b3e:	ff 24 95 b8 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff48]
c0009b45:	4b                   	dec    ebx
c0009b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b4a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009b4d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009b50:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009b54:	d8 c9                	fmul   st,st(1)
c0009b56:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009b59:	4b                   	dec    ebx
c0009b5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b5e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009b61:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009b64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009b68:	d8 c9                	fmul   st,st(1)
c0009b6a:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009b6d:	4b                   	dec    ebx
c0009b6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b72:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009b75:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009b78:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009b7c:	d8 c9                	fmul   st,st(1)
c0009b7e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009b81:	4b                   	dec    ebx
c0009b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b86:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009b89:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009b8c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009b90:	d8 c9                	fmul   st,st(1)
c0009b92:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009b95:	4b                   	dec    ebx
c0009b96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b9a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009b9d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ba0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ba4:	d8 c9                	fmul   st,st(1)
c0009ba6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ba9:	4b                   	dec    ebx
c0009baa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bae:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009bb1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009bb4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009bb8:	d8 c9                	fmul   st,st(1)
c0009bba:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009bbd:	4b                   	dec    ebx
c0009bbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bc2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009bc5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009bc8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009bcc:	d8 c9                	fmul   st,st(1)
c0009bce:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009bd1:	4b                   	dec    ebx
c0009bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bd6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009bd9:	85 db                	test   ebx,ebx
c0009bdb:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009bde:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009be2:	d8 c9                	fmul   st,st(1)
c0009be4:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009be7:	0f 8f 46 ff ff ff    	jg     c0009b33 <calc_output_multi+0x345>
c0009bed:	dd d8                	fstp   st(0)
c0009bef:	83 c4 4c             	add    esp,0x4c
c0009bf2:	5b                   	pop    ebx
c0009bf3:	5e                   	pop    esi
c0009bf4:	5f                   	pop    edi
c0009bf5:	5d                   	pop    ebp
c0009bf6:	c3                   	ret    

c0009bf7 <sinc_reset>:
c0009bf7:	56                   	push   esi
c0009bf8:	53                   	push   ebx
c0009bf9:	51                   	push   ecx
c0009bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfe:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009c01:	85 db                	test   ebx,ebx
c0009c03:	74 51                	je     c0009c56 <sinc_reset+0x5f>
c0009c05:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009c0c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009c13:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009c1a:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009c20:	d9 ee                	fldz   
c0009c22:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009c25:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009c28:	52                   	push   edx
c0009c29:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009c2c:	c1 e0 02             	shl    eax,0x2
c0009c2f:	50                   	push   eax
c0009c30:	6a 00                	push   0x0
c0009c32:	56                   	push   esi
c0009c33:	e8 88 6a ff ff       	call   c00006c0 <memset>
c0009c38:	83 c4 0c             	add    esp,0xc
c0009c3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c3e:	c1 e0 02             	shl    eax,0x2
c0009c41:	50                   	push   eax
c0009c42:	68 aa 00 00 00       	push   0xaa
c0009c47:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009c4a:	8d 04 86             	lea    eax,[esi+eax*4]
c0009c4d:	50                   	push   eax
c0009c4e:	e8 6d 6a ff ff       	call   c00006c0 <memset>
c0009c53:	83 c4 10             	add    esp,0x10
c0009c56:	58                   	pop    eax
c0009c57:	5b                   	pop    ebx
c0009c58:	5e                   	pop    esi
c0009c59:	c3                   	ret    

c0009c5a <double_to_fp>:
c0009c5a:	d9 05 44 87 03 c0    	fld    DWORD PTR ds:0xc0038744
c0009c60:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009c64:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009c68:	e9 13 4c 01 00       	jmp    c001e880 <lrint>

c0009c6d <fmod_one>:
c0009c6d:	83 ec 2c             	sub    esp,0x2c
c0009c70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c80:	83 ec 08             	sub    esp,0x8
c0009c83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c8b:	e8 f0 4b 01 00       	call   c001e880 <lrint>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c97:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009c9b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009c9f:	de e1                	fsubrp st(1),st
c0009ca1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009ca5:	d9 ee                	fldz   
c0009ca7:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009cab:	df e0                	fnstsw ax
c0009cad:	f6 c4 45             	test   ah,0x45
c0009cb0:	75 0a                	jne    c0009cbc <fmod_one+0x4f>
c0009cb2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009cb6:	d9 e8                	fld1   
c0009cb8:	de c1                	faddp  st(1),st
c0009cba:	eb 04                	jmp    c0009cc0 <fmod_one+0x53>
c0009cbc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009cc0:	83 c4 2c             	add    esp,0x2c
c0009cc3:	c3                   	ret    

c0009cc4 <prepare_data>:
c0009cc4:	55                   	push   ebp
c0009cc5:	57                   	push   edi
c0009cc6:	56                   	push   esi
c0009cc7:	53                   	push   ebx
c0009cc8:	83 ec 1c             	sub    esp,0x1c
c0009ccb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ccf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009cd3:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009cd7:	0f 89 57 01 00 00    	jns    c0009e34 <prepare_data+0x170>
c0009cdd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ce0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ce3:	85 d2                	test   edx,edx
c0009ce5:	75 0d                	jne    c0009cf4 <prepare_data+0x30>
c0009ce7:	8d 14 36             	lea    edx,[esi+esi*1]
c0009cea:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ced:	29 d0                	sub    eax,edx
c0009cef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009cf2:	eb 44                	jmp    c0009d38 <prepare_data+0x74>
c0009cf4:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009cf7:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009cfa:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009cfd:	39 c1                	cmp    ecx,eax
c0009cff:	7d 04                	jge    c0009d05 <prepare_data+0x41>
c0009d01:	29 d0                	sub    eax,edx
c0009d03:	eb 2d                	jmp    c0009d32 <prepare_data+0x6e>
c0009d05:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009d0b:	29 d7                	sub    edi,edx
c0009d0d:	01 f7                	add    edi,esi
c0009d0f:	51                   	push   ecx
c0009d10:	29 f2                	sub    edx,esi
c0009d12:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009d19:	8d 14 90             	lea    edx,[eax+edx*4]
c0009d1c:	51                   	push   ecx
c0009d1d:	52                   	push   edx
c0009d1e:	50                   	push   eax
c0009d1f:	e8 88 68 ff ff       	call   c00005ac <memmove>
c0009d24:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d27:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009d2a:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009d2d:	29 f0                	sub    eax,esi
c0009d2f:	83 c4 10             	add    esp,0x10
c0009d32:	29 f0                	sub    eax,esi
c0009d34:	79 02                	jns    c0009d38 <prepare_data+0x74>
c0009d36:	31 c0                	xor    eax,eax
c0009d38:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009d3b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009d3e:	29 ef                	sub    edi,ebp
c0009d40:	39 c7                	cmp    edi,eax
c0009d42:	7e 02                	jle    c0009d46 <prepare_data+0x82>
c0009d44:	89 c7                	mov    edi,eax
c0009d46:	89 f8                	mov    eax,edi
c0009d48:	99                   	cdq    
c0009d49:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d4c:	b8 15 00 00 00       	mov    eax,0x15
c0009d51:	29 d7                	sub    edi,edx
c0009d53:	0f 88 dd 00 00 00    	js     c0009e36 <prepare_data+0x172>
c0009d59:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009d5c:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009d5f:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009d62:	0f 8f ce 00 00 00    	jg     c0009e36 <prepare_data+0x172>
c0009d68:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009d6e:	50                   	push   eax
c0009d6f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009d76:	50                   	push   eax
c0009d77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d7d:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009d80:	50                   	push   eax
c0009d81:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009d84:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009d88:	50                   	push   eax
c0009d89:	e8 e6 68 ff ff       	call   c0000674 <memcpy>
c0009d8e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009d91:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009d94:	01 fd                	add    ebp,edi
c0009d96:	01 f9                	add    ecx,edi
c0009d98:	83 c4 10             	add    esp,0x10
c0009d9b:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009d9e:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009da1:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009da8:	0f 85 86 00 00 00    	jne    c0009e34 <prepare_data+0x170>
c0009dae:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009db1:	89 e8                	mov    eax,ebp
c0009db3:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009db6:	29 c8                	sub    eax,ecx
c0009db8:	39 f8                	cmp    eax,edi
c0009dba:	7d 78                	jge    c0009e34 <prepare_data+0x170>
c0009dbc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009dc0:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009dc4:	74 6e                	je     c0009e34 <prepare_data+0x170>
c0009dc6:	8d 7e 04             	lea    edi,[esi+0x4]
c0009dc9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009dcd:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009dd0:	29 ef                	sub    edi,ebp
c0009dd2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009dd6:	7c 29                	jl     c0009e01 <prepare_data+0x13d>
c0009dd8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009ddb:	29 f1                	sub    ecx,esi
c0009ddd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009de4:	55                   	push   ebp
c0009de5:	50                   	push   eax
c0009de6:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009de9:	50                   	push   eax
c0009dea:	52                   	push   edx
c0009deb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009def:	e8 b8 67 ff ff       	call   c00005ac <memmove>
c0009df4:	83 c4 10             	add    esp,0x10
c0009df7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009dfa:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009dfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e01:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e04:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e07:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009e0a:	83 c6 05             	add    esi,0x5
c0009e0d:	78 07                	js     c0009e16 <prepare_data+0x152>
c0009e0f:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009e12:	39 cf                	cmp    edi,ecx
c0009e14:	7e 04                	jle    c0009e1a <prepare_data+0x156>
c0009e16:	89 ce                	mov    esi,ecx
c0009e18:	29 c6                	sub    esi,eax
c0009e1a:	8d 04 82             	lea    eax,[edx+eax*4]
c0009e1d:	51                   	push   ecx
c0009e1e:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009e25:	51                   	push   ecx
c0009e26:	6a 00                	push   0x0
c0009e28:	50                   	push   eax
c0009e29:	e8 92 68 ff ff       	call   c00006c0 <memset>
c0009e2e:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	31 c0                	xor    eax,eax
c0009e36:	83 c4 1c             	add    esp,0x1c
c0009e39:	5b                   	pop    ebx
c0009e3a:	5e                   	pop    esi
c0009e3b:	5f                   	pop    edi
c0009e3c:	5d                   	pop    ebp
c0009e3d:	c3                   	ret    

c0009e3e <sinc_multichan_vari_process>:
c0009e3e:	55                   	push   ebp
c0009e3f:	b8 05 00 00 00       	mov    eax,0x5
c0009e44:	57                   	push   edi
c0009e45:	56                   	push   esi
c0009e46:	53                   	push   ebx
c0009e47:	83 ec 3c             	sub    esp,0x3c
c0009e4a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009e4e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009e52:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009e55:	85 db                	test   ebx,ebx
c0009e57:	0f 84 5d 02 00 00    	je     c000a0ba <sinc_multichan_vari_process+0x27c>
c0009e5d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009e60:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009e63:	0f af d0             	imul   edx,eax
c0009e66:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009e69:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009e6d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009e74:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009e77:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009e7e:	dd 06                	fld    QWORD PTR [esi]
c0009e80:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009e84:	55                   	push   ebp
c0009e85:	55                   	push   ebp
c0009e86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e89:	e8 d9 f2 ff ff       	call   c0009167 <is_bad_src_ratio>
c0009e8e:	89 c2                	mov    edx,eax
c0009e90:	58                   	pop    eax
c0009e91:	85 d2                	test   edx,edx
c0009e93:	59                   	pop    ecx
c0009e94:	b8 16 00 00 00       	mov    eax,0x16
c0009e99:	0f 85 1b 02 00 00    	jne    c000a0ba <sinc_multichan_vari_process+0x27c>
c0009e9f:	d9 05 48 87 03 c0    	fld    DWORD PTR ds:0xc0038748
c0009ea5:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009ea8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009eab:	dd 06                	fld    QWORD PTR [esi]
c0009ead:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009eb0:	d8 d1                	fcom   st(1)
c0009eb2:	df e0                	fnstsw ax
c0009eb4:	9e                   	sahf   
c0009eb5:	76 0f                	jbe    c0009ec6 <sinc_multichan_vari_process+0x88>
c0009eb7:	dd d8                	fstp   st(0)
c0009eb9:	d9 e8                	fld1   
c0009ebb:	d8 d9                	fcomp  st(1)
c0009ebd:	df e0                	fnstsw ax
c0009ebf:	9e                   	sahf   
c0009ec0:	77 0f                	ja     c0009ed1 <sinc_multichan_vari_process+0x93>
c0009ec2:	dd d8                	fstp   st(0)
c0009ec4:	eb 11                	jmp    c0009ed7 <sinc_multichan_vari_process+0x99>
c0009ec6:	dd d9                	fstp   st(1)
c0009ec8:	d9 e8                	fld1   
c0009eca:	d8 d9                	fcomp  st(1)
c0009ecc:	df e0                	fnstsw ax
c0009ece:	9e                   	sahf   
c0009ecf:	76 04                	jbe    c0009ed5 <sinc_multichan_vari_process+0x97>
c0009ed1:	de f9                	fdivp  st(1),st
c0009ed3:	eb 02                	jmp    c0009ed7 <sinc_multichan_vari_process+0x99>
c0009ed5:	dd d8                	fstp   st(0)
c0009ed7:	83 ec 10             	sub    esp,0x10
c0009eda:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009edd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ee0:	e8 9b 49 01 00       	call   c001e880 <lrint>
c0009ee5:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ee8:	40                   	inc    eax
c0009ee9:	dd 14 24             	fst    QWORD PTR [esp]
c0009eec:	0f af c5             	imul   eax,ebp
c0009eef:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ef3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ef7:	e8 71 fd ff ff       	call   c0009c6d <fmod_one>
c0009efc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009eff:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f03:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f06:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f0a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f0e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f12:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f15:	e8 66 49 01 00       	call   c001e880 <lrint>
c0009f1a:	0f af e8             	imul   ebp,eax
c0009f1d:	d9 e8                	fld1   
c0009f1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f23:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f27:	01 e8                	add    eax,ebp
c0009f29:	dc 05 78 00 02 c0    	fadd   QWORD PTR ds:0xc0020078
c0009f2f:	99                   	cdq    
c0009f30:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f34:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f37:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f3a:	83 c4 10             	add    esp,0x10
c0009f3d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009f40:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009f43:	7d 4b                	jge    c0009f90 <sinc_multichan_vari_process+0x152>
c0009f45:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f48:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f4b:	01 c8                	add    eax,ecx
c0009f4d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009f50:	99                   	cdq    
c0009f51:	f7 f9                	idiv   ecx
c0009f53:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009f57:	7d 09                	jge    c0009f62 <sinc_multichan_vari_process+0x124>
c0009f59:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009f5c:	85 c0                	test   eax,eax
c0009f5e:	79 57                	jns    c0009fb7 <sinc_multichan_vari_process+0x179>
c0009f60:	eb 70                	jmp    c0009fd2 <sinc_multichan_vari_process+0x194>
c0009f62:	51                   	push   ecx
c0009f63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f67:	57                   	push   edi
c0009f68:	53                   	push   ebx
c0009f69:	e8 56 fd ff ff       	call   c0009cc4 <prepare_data>
c0009f6e:	83 c4 10             	add    esp,0x10
c0009f71:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009f74:	85 c0                	test   eax,eax
c0009f76:	0f 85 3e 01 00 00    	jne    c000a0ba <sinc_multichan_vari_process+0x27c>
c0009f7c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f7f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f82:	01 c8                	add    eax,ecx
c0009f84:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009f87:	99                   	cdq    
c0009f88:	f7 f9                	idiv   ecx
c0009f8a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009f8e:	7c c9                	jl     c0009f59 <sinc_multichan_vari_process+0x11b>
c0009f90:	dd 04 24             	fld    QWORD PTR [esp]
c0009f93:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009f96:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009f9a:	dd 1e                	fstp   QWORD PTR [esi]
c0009f9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009f9f:	99                   	cdq    
c0009fa0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009fa3:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009fa6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009fa9:	99                   	cdq    
c0009faa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009fad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009fb0:	31 c0                	xor    eax,eax
c0009fb2:	e9 03 01 00 00       	jmp    c000a0ba <sinc_multichan_vari_process+0x27c>
c0009fb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fbb:	dd 04 24             	fld    QWORD PTR [esp]
c0009fbe:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009fc1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009fc5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009fc9:	d9 c9                	fxch   st(1)
c0009fcb:	de d9                	fcompp 
c0009fcd:	df e0                	fnstsw ax
c0009fcf:	9e                   	sahf   
c0009fd0:	73 be                	jae    c0009f90 <sinc_multichan_vari_process+0x152>
c0009fd2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009fd6:	7e 31                	jle    c000a009 <sinc_multichan_vari_process+0x1cb>
c0009fd8:	83 ec 10             	sub    esp,0x10
c0009fdb:	dd 06                	fld    QWORD PTR [esi]
c0009fdd:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009fe0:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe3:	e8 78 48 01 00       	call   c001e860 <fabs>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	dc 1d 38 87 03 c0    	fcomp  QWORD PTR ds:0xc0038738
c0009ff1:	df e0                	fnstsw ax
c0009ff3:	9e                   	sahf   
c0009ff4:	76 13                	jbe    c000a009 <sinc_multichan_vari_process+0x1cb>
c0009ff6:	dd 06                	fld    QWORD PTR [esi]
c0009ff8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ffb:	d8 e1                	fsub   st,st(1)
c0009ffd:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a000:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a003:	de c1                	faddp  st(1),st
c000a005:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a009:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a00c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a010:	d9 e8                	fld1   
c000a012:	d8 d9                	fcomp  st(1)
c000a014:	df e0                	fnstsw ax
c000a016:	9e                   	sahf   
c000a017:	77 04                	ja     c000a01d <sinc_multichan_vari_process+0x1df>
c000a019:	dd d8                	fstp   st(0)
c000a01b:	d9 e8                	fld1   
c000a01d:	de c9                	fmulp  st(1),st
c000a01f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a023:	50                   	push   eax
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 28 fc ff ff       	call   c0009c5a <double_to_fp>
c000a032:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a036:	89 c5                	mov    ebp,eax
c000a038:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a03c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a03f:	e8 16 fc ff ff       	call   c0009c5a <double_to_fp>
c000a044:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a047:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a04a:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a04d:	89 c1                	mov    ecx,eax
c000a04f:	52                   	push   edx
c000a050:	89 d8                	mov    eax,ebx
c000a052:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a056:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a059:	52                   	push   edx
c000a05a:	52                   	push   edx
c000a05b:	89 ea                	mov    edx,ebp
c000a05d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a060:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a063:	e8 86 f7 ff ff       	call   c00097ee <calc_output_multi>
c000a068:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a06b:	d9 e8                	fld1   
c000a06d:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a070:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a074:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a078:	83 c4 10             	add    esp,0x10
c000a07b:	dd 14 24             	fst    QWORD PTR [esp]
c000a07e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a082:	e8 e6 fb ff ff       	call   c0009c6d <fmod_one>
c000a087:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a08a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a08e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a091:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a095:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a099:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a09d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a0:	e8 db 47 01 00       	call   c001e880 <lrint>
c000a0a5:	0f af e8             	imul   ebp,eax
c000a0a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0ac:	01 e8                	add    eax,ebp
c000a0ae:	99                   	cdq    
c000a0af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a0b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a0b5:	e9 80 fe ff ff       	jmp    c0009f3a <sinc_multichan_vari_process+0xfc>
c000a0ba:	83 c4 3c             	add    esp,0x3c
c000a0bd:	5b                   	pop    ebx
c000a0be:	5e                   	pop    esi
c000a0bf:	5f                   	pop    edi
c000a0c0:	5d                   	pop    ebp
c000a0c1:	c3                   	ret    

c000a0c2 <sinc_hex_vari_process>:
c000a0c2:	55                   	push   ebp
c000a0c3:	b8 05 00 00 00       	mov    eax,0x5
c000a0c8:	57                   	push   edi
c000a0c9:	56                   	push   esi
c000a0ca:	53                   	push   ebx
c000a0cb:	83 ec 3c             	sub    esp,0x3c
c000a0ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a0d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a0d6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a0d9:	85 db                	test   ebx,ebx
c000a0db:	0f 84 58 02 00 00    	je     c000a339 <sinc_hex_vari_process+0x277>
c000a0e1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a0e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a0e7:	0f af d0             	imul   edx,eax
c000a0ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a0ed:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a0f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a0f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a0fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a102:	dd 06                	fld    QWORD PTR [esi]
c000a104:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a108:	55                   	push   ebp
c000a109:	55                   	push   ebp
c000a10a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a10d:	e8 55 f0 ff ff       	call   c0009167 <is_bad_src_ratio>
c000a112:	89 c2                	mov    edx,eax
c000a114:	58                   	pop    eax
c000a115:	85 d2                	test   edx,edx
c000a117:	59                   	pop    ecx
c000a118:	b8 16 00 00 00       	mov    eax,0x16
c000a11d:	0f 85 16 02 00 00    	jne    c000a339 <sinc_hex_vari_process+0x277>
c000a123:	d9 05 48 87 03 c0    	fld    DWORD PTR ds:0xc0038748
c000a129:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a12c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a12f:	dd 06                	fld    QWORD PTR [esi]
c000a131:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a134:	d8 d1                	fcom   st(1)
c000a136:	df e0                	fnstsw ax
c000a138:	9e                   	sahf   
c000a139:	76 0f                	jbe    c000a14a <sinc_hex_vari_process+0x88>
c000a13b:	dd d8                	fstp   st(0)
c000a13d:	d9 e8                	fld1   
c000a13f:	d8 d9                	fcomp  st(1)
c000a141:	df e0                	fnstsw ax
c000a143:	9e                   	sahf   
c000a144:	77 0f                	ja     c000a155 <sinc_hex_vari_process+0x93>
c000a146:	dd d8                	fstp   st(0)
c000a148:	eb 11                	jmp    c000a15b <sinc_hex_vari_process+0x99>
c000a14a:	dd d9                	fstp   st(1)
c000a14c:	d9 e8                	fld1   
c000a14e:	d8 d9                	fcomp  st(1)
c000a150:	df e0                	fnstsw ax
c000a152:	9e                   	sahf   
c000a153:	76 04                	jbe    c000a159 <sinc_hex_vari_process+0x97>
c000a155:	de f9                	fdivp  st(1),st
c000a157:	eb 02                	jmp    c000a15b <sinc_hex_vari_process+0x99>
c000a159:	dd d8                	fstp   st(0)
c000a15b:	83 ec 10             	sub    esp,0x10
c000a15e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a161:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a164:	e8 17 47 01 00       	call   c001e880 <lrint>
c000a169:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a16c:	40                   	inc    eax
c000a16d:	dd 14 24             	fst    QWORD PTR [esp]
c000a170:	0f af c5             	imul   eax,ebp
c000a173:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a177:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a17b:	e8 ed fa ff ff       	call   c0009c6d <fmod_one>
c000a180:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a183:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a187:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a18a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a18e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a192:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a196:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a199:	e8 e2 46 01 00       	call   c001e880 <lrint>
c000a19e:	0f af e8             	imul   ebp,eax
c000a1a1:	d9 e8                	fld1   
c000a1a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a1ab:	01 e8                	add    eax,ebp
c000a1ad:	dc 05 78 00 02 c0    	fadd   QWORD PTR ds:0xc0020078
c000a1b3:	99                   	cdq    
c000a1b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1be:	83 c4 10             	add    esp,0x10
c000a1c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1c4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a1c7:	7d 4b                	jge    c000a214 <sinc_hex_vari_process+0x152>
c000a1c9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a1cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a1cf:	01 c8                	add    eax,ecx
c000a1d1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a1d4:	99                   	cdq    
c000a1d5:	f7 f9                	idiv   ecx
c000a1d7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a1db:	7d 09                	jge    c000a1e6 <sinc_hex_vari_process+0x124>
c000a1dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a1e0:	85 c0                	test   eax,eax
c000a1e2:	79 57                	jns    c000a23b <sinc_hex_vari_process+0x179>
c000a1e4:	eb 70                	jmp    c000a256 <sinc_hex_vari_process+0x194>
c000a1e6:	51                   	push   ecx
c000a1e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a1eb:	57                   	push   edi
c000a1ec:	53                   	push   ebx
c000a1ed:	e8 d2 fa ff ff       	call   c0009cc4 <prepare_data>
c000a1f2:	83 c4 10             	add    esp,0x10
c000a1f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a1f8:	85 c0                	test   eax,eax
c000a1fa:	0f 85 39 01 00 00    	jne    c000a339 <sinc_hex_vari_process+0x277>
c000a200:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a203:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a206:	01 c8                	add    eax,ecx
c000a208:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a20b:	99                   	cdq    
c000a20c:	f7 f9                	idiv   ecx
c000a20e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a212:	7c c9                	jl     c000a1dd <sinc_hex_vari_process+0x11b>
c000a214:	dd 04 24             	fld    QWORD PTR [esp]
c000a217:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a21a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a21e:	dd 1e                	fstp   QWORD PTR [esi]
c000a220:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a223:	99                   	cdq    
c000a224:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a227:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a22a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a22d:	99                   	cdq    
c000a22e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a231:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a234:	31 c0                	xor    eax,eax
c000a236:	e9 fe 00 00 00       	jmp    c000a339 <sinc_hex_vari_process+0x277>
c000a23b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a23f:	dd 04 24             	fld    QWORD PTR [esp]
c000a242:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a245:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a249:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a24d:	d9 c9                	fxch   st(1)
c000a24f:	de d9                	fcompp 
c000a251:	df e0                	fnstsw ax
c000a253:	9e                   	sahf   
c000a254:	73 be                	jae    c000a214 <sinc_hex_vari_process+0x152>
c000a256:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a25a:	7e 31                	jle    c000a28d <sinc_hex_vari_process+0x1cb>
c000a25c:	83 ec 10             	sub    esp,0x10
c000a25f:	dd 06                	fld    QWORD PTR [esi]
c000a261:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a264:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a267:	e8 f4 45 01 00       	call   c001e860 <fabs>
c000a26c:	83 c4 10             	add    esp,0x10
c000a26f:	dc 1d 38 87 03 c0    	fcomp  QWORD PTR ds:0xc0038738
c000a275:	df e0                	fnstsw ax
c000a277:	9e                   	sahf   
c000a278:	76 13                	jbe    c000a28d <sinc_hex_vari_process+0x1cb>
c000a27a:	dd 06                	fld    QWORD PTR [esi]
c000a27c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a27f:	d8 e1                	fsub   st,st(1)
c000a281:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a284:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a287:	de c1                	faddp  st(1),st
c000a289:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a28d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a290:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a294:	d9 e8                	fld1   
c000a296:	d8 d9                	fcomp  st(1)
c000a298:	df e0                	fnstsw ax
c000a29a:	9e                   	sahf   
c000a29b:	77 04                	ja     c000a2a1 <sinc_hex_vari_process+0x1df>
c000a29d:	dd d8                	fstp   st(0)
c000a29f:	d9 e8                	fld1   
c000a2a1:	de c9                	fmulp  st(1),st
c000a2a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a2a7:	50                   	push   eax
c000a2a8:	50                   	push   eax
c000a2a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2b1:	e8 a4 f9 ff ff       	call   c0009c5a <double_to_fp>
c000a2b6:	89 c5                	mov    ebp,eax
c000a2b8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a2bc:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a2c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2c3:	e8 92 f9 ff ff       	call   c0009c5a <double_to_fp>
c000a2c8:	83 c4 0c             	add    esp,0xc
c000a2cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a2ce:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a2d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a2d4:	89 c1                	mov    ecx,eax
c000a2d6:	52                   	push   edx
c000a2d7:	89 d8                	mov    eax,ebx
c000a2d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a2dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a2e0:	52                   	push   edx
c000a2e1:	52                   	push   edx
c000a2e2:	89 ea                	mov    edx,ebp
c000a2e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2e7:	e8 d1 f2 ff ff       	call   c00095bd <calc_output_hex>
c000a2ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a2f0:	d9 e8                	fld1   
c000a2f2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a2fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a2fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a301:	e8 67 f9 ff ff       	call   c0009c6d <fmod_one>
c000a306:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a309:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a30d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a310:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a314:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a318:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a31c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a31f:	e8 5c 45 01 00       	call   c001e880 <lrint>
c000a324:	0f af e8             	imul   ebp,eax
c000a327:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a32b:	01 e8                	add    eax,ebp
c000a32d:	99                   	cdq    
c000a32e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a331:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a334:	e9 85 fe ff ff       	jmp    c000a1be <sinc_hex_vari_process+0xfc>
c000a339:	83 c4 3c             	add    esp,0x3c
c000a33c:	5b                   	pop    ebx
c000a33d:	5e                   	pop    esi
c000a33e:	5f                   	pop    edi
c000a33f:	5d                   	pop    ebp
c000a340:	c3                   	ret    

c000a341 <sinc_quad_vari_process>:
c000a341:	55                   	push   ebp
c000a342:	b8 05 00 00 00       	mov    eax,0x5
c000a347:	57                   	push   edi
c000a348:	56                   	push   esi
c000a349:	53                   	push   ebx
c000a34a:	83 ec 3c             	sub    esp,0x3c
c000a34d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a351:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a355:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a358:	85 db                	test   ebx,ebx
c000a35a:	0f 84 58 02 00 00    	je     c000a5b8 <sinc_quad_vari_process+0x277>
c000a360:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a363:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a366:	0f af d0             	imul   edx,eax
c000a369:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a36c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a370:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a377:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a37a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a381:	dd 06                	fld    QWORD PTR [esi]
c000a383:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a387:	55                   	push   ebp
c000a388:	55                   	push   ebp
c000a389:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a38c:	e8 d6 ed ff ff       	call   c0009167 <is_bad_src_ratio>
c000a391:	89 c2                	mov    edx,eax
c000a393:	58                   	pop    eax
c000a394:	85 d2                	test   edx,edx
c000a396:	59                   	pop    ecx
c000a397:	b8 16 00 00 00       	mov    eax,0x16
c000a39c:	0f 85 16 02 00 00    	jne    c000a5b8 <sinc_quad_vari_process+0x277>
c000a3a2:	d9 05 48 87 03 c0    	fld    DWORD PTR ds:0xc0038748
c000a3a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a3ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3ae:	dd 06                	fld    QWORD PTR [esi]
c000a3b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a3b3:	d8 d1                	fcom   st(1)
c000a3b5:	df e0                	fnstsw ax
c000a3b7:	9e                   	sahf   
c000a3b8:	76 0f                	jbe    c000a3c9 <sinc_quad_vari_process+0x88>
c000a3ba:	dd d8                	fstp   st(0)
c000a3bc:	d9 e8                	fld1   
c000a3be:	d8 d9                	fcomp  st(1)
c000a3c0:	df e0                	fnstsw ax
c000a3c2:	9e                   	sahf   
c000a3c3:	77 0f                	ja     c000a3d4 <sinc_quad_vari_process+0x93>
c000a3c5:	dd d8                	fstp   st(0)
c000a3c7:	eb 11                	jmp    c000a3da <sinc_quad_vari_process+0x99>
c000a3c9:	dd d9                	fstp   st(1)
c000a3cb:	d9 e8                	fld1   
c000a3cd:	d8 d9                	fcomp  st(1)
c000a3cf:	df e0                	fnstsw ax
c000a3d1:	9e                   	sahf   
c000a3d2:	76 04                	jbe    c000a3d8 <sinc_quad_vari_process+0x97>
c000a3d4:	de f9                	fdivp  st(1),st
c000a3d6:	eb 02                	jmp    c000a3da <sinc_quad_vari_process+0x99>
c000a3d8:	dd d8                	fstp   st(0)
c000a3da:	83 ec 10             	sub    esp,0x10
c000a3dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e3:	e8 98 44 01 00       	call   c001e880 <lrint>
c000a3e8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a3eb:	40                   	inc    eax
c000a3ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ef:	0f af c5             	imul   eax,ebp
c000a3f2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a3f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a3fa:	e8 6e f8 ff ff       	call   c0009c6d <fmod_one>
c000a3ff:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a402:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a406:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a409:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a40d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a411:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a415:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a418:	e8 63 44 01 00       	call   c001e880 <lrint>
c000a41d:	0f af e8             	imul   ebp,eax
c000a420:	d9 e8                	fld1   
c000a422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a426:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a42a:	01 e8                	add    eax,ebp
c000a42c:	dc 05 78 00 02 c0    	fadd   QWORD PTR ds:0xc0020078
c000a432:	99                   	cdq    
c000a433:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a437:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a43a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a43d:	83 c4 10             	add    esp,0x10
c000a440:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a443:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a446:	7d 4b                	jge    c000a493 <sinc_quad_vari_process+0x152>
c000a448:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a44b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a44e:	01 c8                	add    eax,ecx
c000a450:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a453:	99                   	cdq    
c000a454:	f7 f9                	idiv   ecx
c000a456:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a45a:	7d 09                	jge    c000a465 <sinc_quad_vari_process+0x124>
c000a45c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a45f:	85 c0                	test   eax,eax
c000a461:	79 57                	jns    c000a4ba <sinc_quad_vari_process+0x179>
c000a463:	eb 70                	jmp    c000a4d5 <sinc_quad_vari_process+0x194>
c000a465:	51                   	push   ecx
c000a466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a46a:	57                   	push   edi
c000a46b:	53                   	push   ebx
c000a46c:	e8 53 f8 ff ff       	call   c0009cc4 <prepare_data>
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a477:	85 c0                	test   eax,eax
c000a479:	0f 85 39 01 00 00    	jne    c000a5b8 <sinc_quad_vari_process+0x277>
c000a47f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a482:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a485:	01 c8                	add    eax,ecx
c000a487:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a48a:	99                   	cdq    
c000a48b:	f7 f9                	idiv   ecx
c000a48d:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a491:	7c c9                	jl     c000a45c <sinc_quad_vari_process+0x11b>
c000a493:	dd 04 24             	fld    QWORD PTR [esp]
c000a496:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a499:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a49d:	dd 1e                	fstp   QWORD PTR [esi]
c000a49f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a4a2:	99                   	cdq    
c000a4a3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4a6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a4a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a4ac:	99                   	cdq    
c000a4ad:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4b0:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a4b3:	31 c0                	xor    eax,eax
c000a4b5:	e9 fe 00 00 00       	jmp    c000a5b8 <sinc_quad_vari_process+0x277>
c000a4ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4be:	dd 04 24             	fld    QWORD PTR [esp]
c000a4c1:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a4c4:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a4c8:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a4cc:	d9 c9                	fxch   st(1)
c000a4ce:	de d9                	fcompp 
c000a4d0:	df e0                	fnstsw ax
c000a4d2:	9e                   	sahf   
c000a4d3:	73 be                	jae    c000a493 <sinc_quad_vari_process+0x152>
c000a4d5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a4d9:	7e 31                	jle    c000a50c <sinc_quad_vari_process+0x1cb>
c000a4db:	83 ec 10             	sub    esp,0x10
c000a4de:	dd 06                	fld    QWORD PTR [esi]
c000a4e0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a4e3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e6:	e8 75 43 01 00       	call   c001e860 <fabs>
c000a4eb:	83 c4 10             	add    esp,0x10
c000a4ee:	dc 1d 38 87 03 c0    	fcomp  QWORD PTR ds:0xc0038738
c000a4f4:	df e0                	fnstsw ax
c000a4f6:	9e                   	sahf   
c000a4f7:	76 13                	jbe    c000a50c <sinc_quad_vari_process+0x1cb>
c000a4f9:	dd 06                	fld    QWORD PTR [esi]
c000a4fb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4fe:	d8 e1                	fsub   st,st(1)
c000a500:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a503:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a506:	de c1                	faddp  st(1),st
c000a508:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a50c:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a50f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a513:	d9 e8                	fld1   
c000a515:	d8 d9                	fcomp  st(1)
c000a517:	df e0                	fnstsw ax
c000a519:	9e                   	sahf   
c000a51a:	77 04                	ja     c000a520 <sinc_quad_vari_process+0x1df>
c000a51c:	dd d8                	fstp   st(0)
c000a51e:	d9 e8                	fld1   
c000a520:	de c9                	fmulp  st(1),st
c000a522:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a526:	50                   	push   eax
c000a527:	50                   	push   eax
c000a528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a52c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a530:	e8 25 f7 ff ff       	call   c0009c5a <double_to_fp>
c000a535:	89 c5                	mov    ebp,eax
c000a537:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a53b:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a53f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a542:	e8 13 f7 ff ff       	call   c0009c5a <double_to_fp>
c000a547:	83 c4 0c             	add    esp,0xc
c000a54a:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a54d:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a550:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a553:	89 c1                	mov    ecx,eax
c000a555:	52                   	push   edx
c000a556:	89 d8                	mov    eax,ebx
c000a558:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a55c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a55f:	52                   	push   edx
c000a560:	52                   	push   edx
c000a561:	89 ea                	mov    edx,ebp
c000a563:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a566:	e8 8d ee ff ff       	call   c00093f8 <calc_output_quad>
c000a56b:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a56f:	d9 e8                	fld1   
c000a571:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a575:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a579:	dd 14 24             	fst    QWORD PTR [esp]
c000a57c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a580:	e8 e8 f6 ff ff       	call   c0009c6d <fmod_one>
c000a585:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a588:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a58c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a58f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a597:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a59b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a59e:	e8 dd 42 01 00       	call   c001e880 <lrint>
c000a5a3:	0f af e8             	imul   ebp,eax
c000a5a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a5aa:	01 e8                	add    eax,ebp
c000a5ac:	99                   	cdq    
c000a5ad:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a5b0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a5b3:	e9 85 fe ff ff       	jmp    c000a43d <sinc_quad_vari_process+0xfc>
c000a5b8:	83 c4 3c             	add    esp,0x3c
c000a5bb:	5b                   	pop    ebx
c000a5bc:	5e                   	pop    esi
c000a5bd:	5f                   	pop    edi
c000a5be:	5d                   	pop    ebp
c000a5bf:	c3                   	ret    

c000a5c0 <sinc_stereo_vari_process>:
c000a5c0:	55                   	push   ebp
c000a5c1:	b8 05 00 00 00       	mov    eax,0x5
c000a5c6:	57                   	push   edi
c000a5c7:	56                   	push   esi
c000a5c8:	53                   	push   ebx
c000a5c9:	83 ec 3c             	sub    esp,0x3c
c000a5cc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a5d0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a5d4:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a5d7:	85 db                	test   ebx,ebx
c000a5d9:	0f 84 58 02 00 00    	je     c000a837 <sinc_stereo_vari_process+0x277>
c000a5df:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a5e2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a5e5:	0f af d0             	imul   edx,eax
c000a5e8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a5eb:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a5ef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a5f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a5f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a600:	dd 06                	fld    QWORD PTR [esi]
c000a602:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a606:	55                   	push   ebp
c000a607:	55                   	push   ebp
c000a608:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a60b:	e8 57 eb ff ff       	call   c0009167 <is_bad_src_ratio>
c000a610:	89 c2                	mov    edx,eax
c000a612:	58                   	pop    eax
c000a613:	85 d2                	test   edx,edx
c000a615:	59                   	pop    ecx
c000a616:	b8 16 00 00 00       	mov    eax,0x16
c000a61b:	0f 85 16 02 00 00    	jne    c000a837 <sinc_stereo_vari_process+0x277>
c000a621:	d9 05 48 87 03 c0    	fld    DWORD PTR ds:0xc0038748
c000a627:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a62a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a62d:	dd 06                	fld    QWORD PTR [esi]
c000a62f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a632:	d8 d1                	fcom   st(1)
c000a634:	df e0                	fnstsw ax
c000a636:	9e                   	sahf   
c000a637:	76 0f                	jbe    c000a648 <sinc_stereo_vari_process+0x88>
c000a639:	dd d8                	fstp   st(0)
c000a63b:	d9 e8                	fld1   
c000a63d:	d8 d9                	fcomp  st(1)
c000a63f:	df e0                	fnstsw ax
c000a641:	9e                   	sahf   
c000a642:	77 0f                	ja     c000a653 <sinc_stereo_vari_process+0x93>
c000a644:	dd d8                	fstp   st(0)
c000a646:	eb 11                	jmp    c000a659 <sinc_stereo_vari_process+0x99>
c000a648:	dd d9                	fstp   st(1)
c000a64a:	d9 e8                	fld1   
c000a64c:	d8 d9                	fcomp  st(1)
c000a64e:	df e0                	fnstsw ax
c000a650:	9e                   	sahf   
c000a651:	76 04                	jbe    c000a657 <sinc_stereo_vari_process+0x97>
c000a653:	de f9                	fdivp  st(1),st
c000a655:	eb 02                	jmp    c000a659 <sinc_stereo_vari_process+0x99>
c000a657:	dd d8                	fstp   st(0)
c000a659:	83 ec 10             	sub    esp,0x10
c000a65c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a65f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a662:	e8 19 42 01 00       	call   c001e880 <lrint>
c000a667:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a66a:	40                   	inc    eax
c000a66b:	dd 14 24             	fst    QWORD PTR [esp]
c000a66e:	0f af c5             	imul   eax,ebp
c000a671:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a675:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a679:	e8 ef f5 ff ff       	call   c0009c6d <fmod_one>
c000a67e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a681:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a685:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a688:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a68c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a690:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a694:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a697:	e8 e4 41 01 00       	call   c001e880 <lrint>
c000a69c:	0f af e8             	imul   ebp,eax
c000a69f:	d9 e8                	fld1   
c000a6a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6a5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a6a9:	01 e8                	add    eax,ebp
c000a6ab:	dc 05 78 00 02 c0    	fadd   QWORD PTR ds:0xc0020078
c000a6b1:	99                   	cdq    
c000a6b2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a6b6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6bc:	83 c4 10             	add    esp,0x10
c000a6bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a6c2:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a6c5:	7d 4b                	jge    c000a712 <sinc_stereo_vari_process+0x152>
c000a6c7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a6ca:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a6cd:	01 c8                	add    eax,ecx
c000a6cf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a6d2:	99                   	cdq    
c000a6d3:	f7 f9                	idiv   ecx
c000a6d5:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a6d9:	7d 09                	jge    c000a6e4 <sinc_stereo_vari_process+0x124>
c000a6db:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a6de:	85 c0                	test   eax,eax
c000a6e0:	79 57                	jns    c000a739 <sinc_stereo_vari_process+0x179>
c000a6e2:	eb 70                	jmp    c000a754 <sinc_stereo_vari_process+0x194>
c000a6e4:	51                   	push   ecx
c000a6e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a6e9:	57                   	push   edi
c000a6ea:	53                   	push   ebx
c000a6eb:	e8 d4 f5 ff ff       	call   c0009cc4 <prepare_data>
c000a6f0:	83 c4 10             	add    esp,0x10
c000a6f3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a6f6:	85 c0                	test   eax,eax
c000a6f8:	0f 85 39 01 00 00    	jne    c000a837 <sinc_stereo_vari_process+0x277>
c000a6fe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a701:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a704:	01 c8                	add    eax,ecx
c000a706:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a709:	99                   	cdq    
c000a70a:	f7 f9                	idiv   ecx
c000a70c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a710:	7c c9                	jl     c000a6db <sinc_stereo_vari_process+0x11b>
c000a712:	dd 04 24             	fld    QWORD PTR [esp]
c000a715:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a718:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a71c:	dd 1e                	fstp   QWORD PTR [esi]
c000a71e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a721:	99                   	cdq    
c000a722:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a725:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a728:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a72b:	99                   	cdq    
c000a72c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a72f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a732:	31 c0                	xor    eax,eax
c000a734:	e9 fe 00 00 00       	jmp    c000a837 <sinc_stereo_vari_process+0x277>
c000a739:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a73d:	dd 04 24             	fld    QWORD PTR [esp]
c000a740:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a743:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a747:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a74b:	d9 c9                	fxch   st(1)
c000a74d:	de d9                	fcompp 
c000a74f:	df e0                	fnstsw ax
c000a751:	9e                   	sahf   
c000a752:	73 be                	jae    c000a712 <sinc_stereo_vari_process+0x152>
c000a754:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a758:	7e 31                	jle    c000a78b <sinc_stereo_vari_process+0x1cb>
c000a75a:	83 ec 10             	sub    esp,0x10
c000a75d:	dd 06                	fld    QWORD PTR [esi]
c000a75f:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a762:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a765:	e8 f6 40 01 00       	call   c001e860 <fabs>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	dc 1d 38 87 03 c0    	fcomp  QWORD PTR ds:0xc0038738
c000a773:	df e0                	fnstsw ax
c000a775:	9e                   	sahf   
c000a776:	76 13                	jbe    c000a78b <sinc_stereo_vari_process+0x1cb>
c000a778:	dd 06                	fld    QWORD PTR [esi]
c000a77a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a77d:	d8 e1                	fsub   st,st(1)
c000a77f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a782:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a785:	de c1                	faddp  st(1),st
c000a787:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a78b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a78e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a792:	d9 e8                	fld1   
c000a794:	d8 d9                	fcomp  st(1)
c000a796:	df e0                	fnstsw ax
c000a798:	9e                   	sahf   
c000a799:	77 04                	ja     c000a79f <sinc_stereo_vari_process+0x1df>
c000a79b:	dd d8                	fstp   st(0)
c000a79d:	d9 e8                	fld1   
c000a79f:	de c9                	fmulp  st(1),st
c000a7a1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a7a5:	50                   	push   eax
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7af:	e8 a6 f4 ff ff       	call   c0009c5a <double_to_fp>
c000a7b4:	89 c5                	mov    ebp,eax
c000a7b6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a7ba:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a7be:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c1:	e8 94 f4 ff ff       	call   c0009c5a <double_to_fp>
c000a7c6:	83 c4 0c             	add    esp,0xc
c000a7c9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a7cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a7cf:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a7d2:	89 c1                	mov    ecx,eax
c000a7d4:	52                   	push   edx
c000a7d5:	89 d8                	mov    eax,ebx
c000a7d7:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a7db:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a7de:	52                   	push   edx
c000a7df:	52                   	push   edx
c000a7e0:	89 ea                	mov    edx,ebp
c000a7e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7e5:	e8 ce ea ff ff       	call   c00092b8 <calc_output_stereo>
c000a7ea:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a7ee:	d9 e8                	fld1   
c000a7f0:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7f4:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a7f8:	dd 14 24             	fst    QWORD PTR [esp]
c000a7fb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a7ff:	e8 69 f4 ff ff       	call   c0009c6d <fmod_one>
c000a804:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a807:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a80b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a80e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a812:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a816:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a81a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a81d:	e8 5e 40 01 00       	call   c001e880 <lrint>
c000a822:	0f af e8             	imul   ebp,eax
c000a825:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a829:	01 e8                	add    eax,ebp
c000a82b:	99                   	cdq    
c000a82c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a82f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a832:	e9 85 fe ff ff       	jmp    c000a6bc <sinc_stereo_vari_process+0xfc>
c000a837:	83 c4 3c             	add    esp,0x3c
c000a83a:	5b                   	pop    ebx
c000a83b:	5e                   	pop    esi
c000a83c:	5f                   	pop    edi
c000a83d:	5d                   	pop    ebp
c000a83e:	c3                   	ret    

c000a83f <sinc_mono_vari_process>:
c000a83f:	55                   	push   ebp
c000a840:	b8 05 00 00 00       	mov    eax,0x5
c000a845:	57                   	push   edi
c000a846:	56                   	push   esi
c000a847:	53                   	push   ebx
c000a848:	83 ec 3c             	sub    esp,0x3c
c000a84b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a84f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a853:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a856:	85 db                	test   ebx,ebx
c000a858:	0f 84 57 02 00 00    	je     c000aab5 <sinc_mono_vari_process+0x276>
c000a85e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a861:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a864:	0f af d0             	imul   edx,eax
c000a867:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a86a:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a86e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a875:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a878:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a87f:	dd 06                	fld    QWORD PTR [esi]
c000a881:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a885:	51                   	push   ecx
c000a886:	51                   	push   ecx
c000a887:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a88a:	e8 d8 e8 ff ff       	call   c0009167 <is_bad_src_ratio>
c000a88f:	5d                   	pop    ebp
c000a890:	89 c2                	mov    edx,eax
c000a892:	58                   	pop    eax
c000a893:	85 d2                	test   edx,edx
c000a895:	b8 16 00 00 00       	mov    eax,0x16
c000a89a:	0f 85 15 02 00 00    	jne    c000aab5 <sinc_mono_vari_process+0x276>
c000a8a0:	d9 05 48 87 03 c0    	fld    DWORD PTR ds:0xc0038748
c000a8a6:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a8a9:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8ac:	dd 06                	fld    QWORD PTR [esi]
c000a8ae:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a8b1:	d8 d1                	fcom   st(1)
c000a8b3:	df e0                	fnstsw ax
c000a8b5:	9e                   	sahf   
c000a8b6:	76 0f                	jbe    c000a8c7 <sinc_mono_vari_process+0x88>
c000a8b8:	dd d8                	fstp   st(0)
c000a8ba:	d9 e8                	fld1   
c000a8bc:	d8 d9                	fcomp  st(1)
c000a8be:	df e0                	fnstsw ax
c000a8c0:	9e                   	sahf   
c000a8c1:	77 0f                	ja     c000a8d2 <sinc_mono_vari_process+0x93>
c000a8c3:	dd d8                	fstp   st(0)
c000a8c5:	eb 11                	jmp    c000a8d8 <sinc_mono_vari_process+0x99>
c000a8c7:	dd d9                	fstp   st(1)
c000a8c9:	d9 e8                	fld1   
c000a8cb:	d8 d9                	fcomp  st(1)
c000a8cd:	df e0                	fnstsw ax
c000a8cf:	9e                   	sahf   
c000a8d0:	76 04                	jbe    c000a8d6 <sinc_mono_vari_process+0x97>
c000a8d2:	de f9                	fdivp  st(1),st
c000a8d4:	eb 02                	jmp    c000a8d8 <sinc_mono_vari_process+0x99>
c000a8d6:	dd d8                	fstp   st(0)
c000a8d8:	83 ec 10             	sub    esp,0x10
c000a8db:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a8de:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8e1:	e8 9a 3f 01 00       	call   c001e880 <lrint>
c000a8e6:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a8e9:	40                   	inc    eax
c000a8ea:	dd 14 24             	fst    QWORD PTR [esp]
c000a8ed:	0f af e8             	imul   ebp,eax
c000a8f0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a8f4:	e8 74 f3 ff ff       	call   c0009c6d <fmod_one>
c000a8f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8fc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a900:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a904:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a908:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a90b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a90f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a913:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a916:	e8 65 3f 01 00       	call   c001e880 <lrint>
c000a91b:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a920:	d9 e8                	fld1   
c000a922:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a926:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a92a:	99                   	cdq    
c000a92b:	dc 05 78 00 02 c0    	fadd   QWORD PTR ds:0xc0020078
c000a931:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a934:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a938:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a93b:	83 c4 10             	add    esp,0x10
c000a93e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a941:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a944:	7d 44                	jge    c000a98a <sinc_mono_vari_process+0x14b>
c000a946:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a949:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a94c:	01 c8                	add    eax,ecx
c000a94e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a951:	99                   	cdq    
c000a952:	f7 f9                	idiv   ecx
c000a954:	39 d5                	cmp    ebp,edx
c000a956:	7d 09                	jge    c000a961 <sinc_mono_vari_process+0x122>
c000a958:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a95b:	85 c0                	test   eax,eax
c000a95d:	79 52                	jns    c000a9b1 <sinc_mono_vari_process+0x172>
c000a95f:	eb 6b                	jmp    c000a9cc <sinc_mono_vari_process+0x18d>
c000a961:	52                   	push   edx
c000a962:	55                   	push   ebp
c000a963:	57                   	push   edi
c000a964:	53                   	push   ebx
c000a965:	e8 5a f3 ff ff       	call   c0009cc4 <prepare_data>
c000a96a:	83 c4 10             	add    esp,0x10
c000a96d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a970:	85 c0                	test   eax,eax
c000a972:	0f 85 3d 01 00 00    	jne    c000aab5 <sinc_mono_vari_process+0x276>
c000a978:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a97b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a97e:	01 c8                	add    eax,ecx
c000a980:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a983:	99                   	cdq    
c000a984:	f7 f9                	idiv   ecx
c000a986:	39 d5                	cmp    ebp,edx
c000a988:	7c ce                	jl     c000a958 <sinc_mono_vari_process+0x119>
c000a98a:	dd 04 24             	fld    QWORD PTR [esp]
c000a98d:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a990:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a994:	dd 1e                	fstp   QWORD PTR [esi]
c000a996:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a999:	99                   	cdq    
c000a99a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a99d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a9a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a9a3:	99                   	cdq    
c000a9a4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a9a7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a9aa:	31 c0                	xor    eax,eax
c000a9ac:	e9 04 01 00 00       	jmp    c000aab5 <sinc_mono_vari_process+0x276>
c000a9b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a9b5:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b8:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a9bb:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a9bf:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a9c3:	d9 c9                	fxch   st(1)
c000a9c5:	de d9                	fcompp 
c000a9c7:	df e0                	fnstsw ax
c000a9c9:	9e                   	sahf   
c000a9ca:	77 be                	ja     c000a98a <sinc_mono_vari_process+0x14b>
c000a9cc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a9d0:	7e 31                	jle    c000aa03 <sinc_mono_vari_process+0x1c4>
c000a9d2:	83 ec 10             	sub    esp,0x10
c000a9d5:	dd 06                	fld    QWORD PTR [esi]
c000a9d7:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a9da:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9dd:	e8 7e 3e 01 00       	call   c001e860 <fabs>
c000a9e2:	83 c4 10             	add    esp,0x10
c000a9e5:	dc 1d 38 87 03 c0    	fcomp  QWORD PTR ds:0xc0038738
c000a9eb:	df e0                	fnstsw ax
c000a9ed:	9e                   	sahf   
c000a9ee:	76 13                	jbe    c000aa03 <sinc_mono_vari_process+0x1c4>
c000a9f0:	dd 06                	fld    QWORD PTR [esi]
c000a9f2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a9f5:	d8 e1                	fsub   st,st(1)
c000a9f7:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a9fa:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a9fd:	de c1                	faddp  st(1),st
c000a9ff:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000aa03:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000aa06:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa0a:	d9 e8                	fld1   
c000aa0c:	d8 d9                	fcomp  st(1)
c000aa0e:	df e0                	fnstsw ax
c000aa10:	9e                   	sahf   
c000aa11:	77 04                	ja     c000aa17 <sinc_mono_vari_process+0x1d8>
c000aa13:	dd d8                	fstp   st(0)
c000aa15:	d9 e8                	fld1   
c000aa17:	de c9                	fmulp  st(1),st
c000aa19:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa1d:	50                   	push   eax
c000aa1e:	50                   	push   eax
c000aa1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa27:	e8 2e f2 ff ff       	call   c0009c5a <double_to_fp>
c000aa2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa30:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000aa34:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000aa38:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa3b:	e8 1a f2 ff ff       	call   c0009c5a <double_to_fp>
c000aa40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000aa44:	89 c1                	mov    ecx,eax
c000aa46:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000aa4a:	89 d8                	mov    eax,ebx
c000aa4c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000aa4f:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000aa53:	e8 7b e7 ff ff       	call   c00091d3 <calc_output_single>
c000aa58:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aa5b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000aa5e:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000aa62:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000aa65:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000aa68:	d9 e8                	fld1   
c000aa6a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000aa6e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000aa72:	dd 14 24             	fst    QWORD PTR [esp]
c000aa75:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000aa79:	e8 ef f1 ff ff       	call   c0009c6d <fmod_one>
c000aa7e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000aa81:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aa89:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000aa8d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa90:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000aa94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa98:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa9b:	e8 e0 3d 01 00       	call   c001e880 <lrint>
c000aaa0:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aaa5:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aaa9:	99                   	cdq    
c000aaaa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aaad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aab0:	e9 86 fe ff ff       	jmp    c000a93b <sinc_mono_vari_process+0xfc>
c000aab5:	83 c4 3c             	add    esp,0x3c
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	5d                   	pop    ebp
c000aabc:	c3                   	ret    

c000aabd <sinc_get_name>:
c000aabd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aac1:	31 c0                	xor    eax,eax
c000aac3:	83 fa 02             	cmp    edx,0x2
c000aac6:	77 07                	ja     c000aacf <sinc_get_name+0x12>
c000aac8:	8b 04 95 e0 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff20]
c000aacf:	c3                   	ret    

c000aad0 <sinc_get_description>:
c000aad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aad4:	31 c0                	xor    eax,eax
c000aad6:	83 fa 02             	cmp    edx,0x2
c000aad9:	77 07                	ja     c000aae2 <sinc_get_description+0x12>
c000aadb:	8b 04 95 d4 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff2c]
c000aae2:	c3                   	ret    

c000aae3 <sinc_set_converter>:
c000aae3:	55                   	push   ebp
c000aae4:	57                   	push   edi
c000aae5:	56                   	push   esi
c000aae6:	53                   	push   ebx
c000aae7:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000aaed:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000aaf4:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000aafb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000aafe:	85 c0                	test   eax,eax
c000ab00:	74 13                	je     c000ab15 <sinc_set_converter+0x32>
c000ab02:	83 ec 0c             	sub    esp,0xc
c000ab05:	50                   	push   eax
c000ab06:	e8 ea 28 00 00       	call   c000d3f5 <free>
c000ab0b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ab12:	83 c4 10             	add    esp,0x10
c000ab15:	56                   	push   esi
c000ab16:	68 44 08 00 00       	push   0x844
c000ab1b:	6a 00                	push   0x0
c000ab1d:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ab21:	56                   	push   esi
c000ab22:	e8 99 5b ff ff       	call   c00006c0 <memset>
c000ab27:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab2a:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ab32:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab36:	b8 0b 00 00 00       	mov    eax,0xb
c000ab3b:	83 c4 10             	add    esp,0x10
c000ab3e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ab44:	0f 8f 58 01 00 00    	jg     c000aca2 <sinc_set_converter+0x1bf>
c000ab4a:	83 fa 01             	cmp    edx,0x1
c000ab4d:	75 10                	jne    c000ab5f <sinc_set_converter+0x7c>
c000ab4f:	c7 43 24 3f a8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a83f
c000ab56:	c7 43 20 3f a8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a83f
c000ab5d:	eb 4d                	jmp    c000abac <sinc_set_converter+0xc9>
c000ab5f:	83 fa 02             	cmp    edx,0x2
c000ab62:	75 10                	jne    c000ab74 <sinc_set_converter+0x91>
c000ab64:	c7 43 24 c0 a5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a5c0
c000ab6b:	c7 43 20 c0 a5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a5c0
c000ab72:	eb 38                	jmp    c000abac <sinc_set_converter+0xc9>
c000ab74:	83 fa 04             	cmp    edx,0x4
c000ab77:	75 10                	jne    c000ab89 <sinc_set_converter+0xa6>
c000ab79:	c7 43 24 41 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a341
c000ab80:	c7 43 20 41 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a341
c000ab87:	eb 23                	jmp    c000abac <sinc_set_converter+0xc9>
c000ab89:	83 fa 06             	cmp    edx,0x6
c000ab8c:	75 10                	jne    c000ab9e <sinc_set_converter+0xbb>
c000ab8e:	c7 43 24 c2 a0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a0c2
c000ab95:	c7 43 20 c2 a0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a0c2
c000ab9c:	eb 0e                	jmp    c000abac <sinc_set_converter+0xc9>
c000ab9e:	c7 43 24 3e 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009e3e
c000aba5:	c7 43 20 3e 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009e3e
c000abac:	c7 43 28 f7 9b 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009bf7
c000abb3:	83 fd 01             	cmp    ebp,0x1
c000abb6:	74 28                	je     c000abe0 <sinc_set_converter+0xfd>
c000abb8:	b8 0a 00 00 00       	mov    eax,0xa
c000abbd:	83 fd 02             	cmp    ebp,0x2
c000abc0:	0f 85 dc 00 00 00    	jne    c000aca2 <sinc_set_converter+0x1bf>
c000abc6:	c7 44 24 3c a4 5f 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0035fa4
c000abce:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000abd6:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000abde:	eb 18                	jmp    c000abf8 <sinc_set_converter+0x115>
c000abe0:	c7 44 24 3c 04 01 02 c0 	mov    DWORD PTR [esp+0x3c],0xc0020104
c000abe8:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000abf0:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000abf8:	83 ec 10             	sub    esp,0x10
c000abfb:	d9 05 4c 87 03 c0    	fld    DWORD PTR ds:0xc003874c
c000ac01:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000ac05:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000ac09:	d8 0d 50 87 03 c0    	fmul   DWORD PTR ds:0xc0038750
c000ac0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac12:	e8 69 3c 01 00       	call   c001e880 <lrint>
c000ac17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ac1b:	83 c4 10             	add    esp,0x10
c000ac1e:	3d 00 10 00 00       	cmp    eax,0x1000
c000ac23:	7d 05                	jge    c000ac2a <sinc_set_converter+0x147>
c000ac25:	b8 00 10 00 00       	mov    eax,0x1000
c000ac2a:	0f af c2             	imul   eax,edx
c000ac2d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ac31:	51                   	push   ecx
c000ac32:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ac39:	51                   	push   ecx
c000ac3a:	c1 e0 02             	shl    eax,0x2
c000ac3d:	50                   	push   eax
c000ac3e:	6a 01                	push   0x1
c000ac40:	e8 d0 27 00 00       	call   c000d415 <calloc>
c000ac45:	83 c4 10             	add    esp,0x10
c000ac48:	89 c5                	mov    ebp,eax
c000ac4a:	b8 01 00 00 00       	mov    eax,0x1
c000ac4f:	85 ed                	test   ebp,ebp
c000ac51:	74 4f                	je     c000aca2 <sinc_set_converter+0x1bf>
c000ac53:	b9 11 02 00 00       	mov    ecx,0x211
c000ac58:	fc                   	cld    
c000ac59:	89 ef                	mov    edi,ebp
c000ac5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ac5d:	50                   	push   eax
c000ac5e:	68 44 08 00 00       	push   0x844
c000ac63:	68 ee 00 00 00       	push   0xee
c000ac68:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ac6c:	50                   	push   eax
c000ac6d:	e8 4e 5a ff ff       	call   c00006c0 <memset>
c000ac72:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ac75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac78:	e8 7a ef ff ff       	call   c0009bf7 <sinc_reset>
c000ac7d:	bb 01 00 00 00       	mov    ebx,0x1
c000ac82:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ac85:	83 c4 10             	add    esp,0x10
c000ac88:	31 c9                	xor    ecx,ecx
c000ac8a:	89 da                	mov    edx,ebx
c000ac8c:	d3 e2                	shl    edx,cl
c000ac8e:	39 c2                	cmp    edx,eax
c000ac90:	7d 05                	jge    c000ac97 <sinc_set_converter+0x1b4>
c000ac92:	09 d0                	or     eax,edx
c000ac94:	41                   	inc    ecx
c000ac95:	eb f3                	jmp    c000ac8a <sinc_set_converter+0x1a7>
c000ac97:	31 c0                	xor    eax,eax
c000ac99:	83 f9 15             	cmp    ecx,0x15
c000ac9c:	0f 9d c0             	setge  al
c000ac9f:	8d 04 c0             	lea    eax,[eax+eax*8]
c000aca2:	81 c4 5c 08 00 00    	add    esp,0x85c
c000aca8:	5b                   	pop    ebx
c000aca9:	5e                   	pop    esi
c000acaa:	5f                   	pop    edi
c000acab:	5d                   	pop    ebp
c000acac:	c3                   	ret    

c000acad <is_bad_src_ratio>:
c000acad:	83 ec 0c             	sub    esp,0xc
c000acb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acb4:	89 04 24             	mov    DWORD PTR [esp],eax
c000acb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000acbf:	dd 04 24             	fld    QWORD PTR [esp]
c000acc2:	dd 05 00 00 02 c0    	fld    QWORD PTR ds:0xc0020000
c000acc8:	de d9                	fcompp 
c000acca:	df e0                	fnstsw ax
c000accc:	f6 c4 45             	test   ah,0x45
c000accf:	74 10                	je     c000ace1 <is_bad_src_ratio+0x34>
c000acd1:	dd 04 24             	fld    QWORD PTR [esp]
c000acd4:	dc 1d 08 00 02 c0    	fcomp  QWORD PTR ds:0xc0020008
c000acda:	df e0                	fnstsw ax
c000acdc:	f6 c4 45             	test   ah,0x45
c000acdf:	75 07                	jne    c000ace8 <is_bad_src_ratio+0x3b>
c000ace1:	b8 01 00 00 00       	mov    eax,0x1
c000ace6:	eb 05                	jmp    c000aced <is_bad_src_ratio+0x40>
c000ace8:	b8 00 00 00 00       	mov    eax,0x0
c000aced:	83 c4 0c             	add    esp,0xc
c000acf0:	c3                   	ret    

c000acf1 <fmod_one>:
c000acf1:	83 ec 2c             	sub    esp,0x2c
c000acf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad04:	83 ec 08             	sub    esp,0x8
c000ad07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad0f:	e8 6c 3b 01 00       	call   c001e880 <lrint>
c000ad14:	83 c4 10             	add    esp,0x10
c000ad17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad1b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ad1f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ad23:	de e1                	fsubrp st(1),st
c000ad25:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ad29:	d9 ee                	fldz   
c000ad2b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ad2f:	df e0                	fnstsw ax
c000ad31:	f6 c4 45             	test   ah,0x45
c000ad34:	75 0a                	jne    c000ad40 <fmod_one+0x4f>
c000ad36:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ad3a:	d9 e8                	fld1   
c000ad3c:	de c1                	faddp  st(1),st
c000ad3e:	eb 04                	jmp    c000ad44 <fmod_one+0x53>
c000ad40:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ad44:	83 c4 2c             	add    esp,0x2c
c000ad47:	c3                   	ret    

c000ad48 <zoh_vari_process>:
c000ad48:	55                   	push   ebp
c000ad49:	57                   	push   edi
c000ad4a:	56                   	push   esi
c000ad4b:	53                   	push   ebx
c000ad4c:	83 ec 2c             	sub    esp,0x2c
c000ad4f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ad53:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad5f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ad63:	0f 8e 34 02 00 00    	jle    c000af9d <zoh_vari_process+0x255>
c000ad69:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ad6c:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ad74:	85 db                	test   ebx,ebx
c000ad76:	0f 84 21 02 00 00    	je     c000af9d <zoh_vari_process+0x255>
c000ad7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ad83:	74 19                	je     c000ad9e <zoh_vari_process+0x56>
c000ad85:	31 d2                	xor    edx,edx
c000ad87:	39 c2                	cmp    edx,eax
c000ad89:	7d 0c                	jge    c000ad97 <zoh_vari_process+0x4f>
c000ad8b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad8d:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ad90:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad94:	42                   	inc    edx
c000ad95:	eb f0                	jmp    c000ad87 <zoh_vari_process+0x3f>
c000ad97:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ad9e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ada1:	0f af d0             	imul   edx,eax
c000ada4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ada7:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000adab:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000adb2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000adb5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000adbc:	dd 07                	fld    QWORD PTR [edi]
c000adbe:	dd 14 24             	fst    QWORD PTR [esp]
c000adc1:	50                   	push   eax
c000adc2:	50                   	push   eax
c000adc3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000adc6:	e8 e2 fe ff ff       	call   c000acad <is_bad_src_ratio>
c000adcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000adcf:	5a                   	pop    edx
c000add0:	59                   	pop    ecx
c000add1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000add6:	0f 85 b9 01 00 00    	jne    c000af95 <zoh_vari_process+0x24d>
c000addc:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000addf:	d9 e8                	fld1   
c000ade1:	d8 d1                	fcom   st(1)
c000ade3:	df e0                	fnstsw ax
c000ade5:	9e                   	sahf   
c000ade6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000adea:	0f 86 85 00 00 00    	jbe    c000ae75 <zoh_vari_process+0x12d>
c000adf0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000adf3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000adf6:	7d 7d                	jge    c000ae75 <zoh_vari_process+0x12d>
c000adf8:	d9 c0                	fld    st(0)
c000adfa:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000adfd:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ae00:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ae03:	df e0                	fnstsw ax
c000ae05:	9e                   	sahf   
c000ae06:	73 6d                	jae    c000ae75 <zoh_vari_process+0x12d>
c000ae08:	85 d2                	test   edx,edx
c000ae0a:	7e 38                	jle    c000ae44 <zoh_vari_process+0xfc>
c000ae0c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ae10:	83 ec 10             	sub    esp,0x10
c000ae13:	dd 07                	fld    QWORD PTR [edi]
c000ae15:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ae18:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ae1b:	e8 40 3a 01 00       	call   c001e860 <fabs>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	dc 1d 78 00 02 c0    	fcomp  QWORD PTR ds:0xc0020078
c000ae29:	df e0                	fnstsw ax
c000ae2b:	9e                   	sahf   
c000ae2c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae30:	76 12                	jbe    c000ae44 <zoh_vari_process+0xfc>
c000ae32:	dd 07                	fld    QWORD PTR [edi]
c000ae34:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ae37:	d8 e1                	fsub   st,st(1)
c000ae39:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ae3c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ae3f:	de c1                	faddp  st(1),st
c000ae41:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ae44:	31 c0                	xor    eax,eax
c000ae46:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ae49:	7e 13                	jle    c000ae5e <zoh_vari_process+0x116>
c000ae4b:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ae4f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ae52:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ae55:	40                   	inc    eax
c000ae56:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ae59:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ae5c:	eb e8                	jmp    c000ae46 <zoh_vari_process+0xfe>
c000ae5e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ae62:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ae65:	de c1                	faddp  st(1),st
c000ae67:	e9 73 ff ff ff       	jmp    c000addf <zoh_vari_process+0x97>
c000ae6c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ae70:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ae73:	de c1                	faddp  st(1),st
c000ae75:	83 ec 10             	sub    esp,0x10
c000ae78:	dd 14 24             	fst    QWORD PTR [esp]
c000ae7b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ae7f:	e8 6d fe ff ff       	call   c000acf1 <fmod_one>
c000ae84:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ae87:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ae8b:	d8 e1                	fsub   st,st(1)
c000ae8d:	d9 c9                	fxch   st(1)
c000ae8f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ae93:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ae96:	e8 e5 39 01 00       	call   c001e880 <lrint>
c000ae9b:	83 c4 10             	add    esp,0x10
c000ae9e:	0f af e8             	imul   ebp,eax
c000aea1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aea4:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000aea7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aeab:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000aeae:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000aeb1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aeb4:	0f 8d 82 00 00 00    	jge    c000af3c <zoh_vari_process+0x1f4>
c000aeba:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000aebe:	d9 c0                	fld    st(0)
c000aec0:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aec3:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aecb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000aecf:	de d9                	fcompp 
c000aed1:	df e0                	fnstsw ax
c000aed3:	9e                   	sahf   
c000aed4:	72 66                	jb     c000af3c <zoh_vari_process+0x1f4>
c000aed6:	85 d2                	test   edx,edx
c000aed8:	7e 38                	jle    c000af12 <zoh_vari_process+0x1ca>
c000aeda:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aede:	83 ec 10             	sub    esp,0x10
c000aee1:	dd 07                	fld    QWORD PTR [edi]
c000aee3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aee6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aee9:	e8 72 39 01 00       	call   c001e860 <fabs>
c000aeee:	83 c4 10             	add    esp,0x10
c000aef1:	dc 1d 78 00 02 c0    	fcomp  QWORD PTR ds:0xc0020078
c000aef7:	df e0                	fnstsw ax
c000aef9:	9e                   	sahf   
c000aefa:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aefe:	76 12                	jbe    c000af12 <zoh_vari_process+0x1ca>
c000af00:	dd 07                	fld    QWORD PTR [edi]
c000af02:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af05:	d8 e1                	fsub   st,st(1)
c000af07:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af0a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af0d:	de c1                	faddp  st(1),st
c000af0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af12:	31 d2                	xor    edx,edx
c000af14:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af17:	39 d0                	cmp    eax,edx
c000af19:	0f 8e 4d ff ff ff    	jle    c000ae6c <zoh_vari_process+0x124>
c000af1f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000af22:	29 c1                	sub    ecx,eax
c000af24:	89 c8                	mov    eax,ecx
c000af26:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000af28:	01 d0                	add    eax,edx
c000af2a:	42                   	inc    edx
c000af2b:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000af2e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af31:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000af34:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000af37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af3a:	eb d8                	jmp    c000af14 <zoh_vari_process+0x1cc>
c000af3c:	39 e9                	cmp    ecx,ebp
c000af3e:	7d 13                	jge    c000af53 <zoh_vari_process+0x20b>
c000af40:	89 e8                	mov    eax,ebp
c000af42:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000af45:	29 c8                	sub    eax,ecx
c000af47:	99                   	cdq    
c000af48:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000af4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af4f:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000af53:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000af56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000af59:	85 c0                	test   eax,eax
c000af5b:	7f 1b                	jg     c000af78 <zoh_vari_process+0x230>
c000af5d:	dd 04 24             	fld    QWORD PTR [esp]
c000af60:	dd 1f                	fstp   QWORD PTR [edi]
c000af62:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000af65:	99                   	cdq    
c000af66:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000af69:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000af6c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af6f:	99                   	cdq    
c000af70:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000af73:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000af76:	eb 25                	jmp    c000af9d <zoh_vari_process+0x255>
c000af78:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af7b:	31 d2                	xor    edx,edx
c000af7d:	29 e8                	sub    eax,ebp
c000af7f:	c1 e0 02             	shl    eax,0x2
c000af82:	39 d5                	cmp    ebp,edx
c000af84:	7e d7                	jle    c000af5d <zoh_vari_process+0x215>
c000af86:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000af88:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000af8b:	83 c0 04             	add    eax,0x4
c000af8e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000af92:	42                   	inc    edx
c000af93:	eb ed                	jmp    c000af82 <zoh_vari_process+0x23a>
c000af95:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000af9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afa1:	83 c4 2c             	add    esp,0x2c
c000afa4:	5b                   	pop    ebx
c000afa5:	5e                   	pop    esi
c000afa6:	5f                   	pop    edi
c000afa7:	5d                   	pop    ebp
c000afa8:	c3                   	ret    

c000afa9 <zoh_reset>:
c000afa9:	83 ec 0c             	sub    esp,0xc
c000afac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000afb0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000afb3:	85 c0                	test   eax,eax
c000afb5:	74 20                	je     c000afd7 <zoh_reset+0x2e>
c000afb7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000afba:	83 c0 1c             	add    eax,0x1c
c000afbd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000afc0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000afc7:	c1 e2 02             	shl    edx,0x2
c000afca:	51                   	push   ecx
c000afcb:	52                   	push   edx
c000afcc:	6a 00                	push   0x0
c000afce:	50                   	push   eax
c000afcf:	e8 ec 56 ff ff       	call   c00006c0 <memset>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	83 c4 0c             	add    esp,0xc
c000afda:	c3                   	ret    

c000afdb <zoh_get_name>:
c000afdb:	31 c0                	xor    eax,eax
c000afdd:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000afe2:	75 05                	jne    c000afe9 <zoh_get_name+0xe>
c000afe4:	b8 54 87 03 c0       	mov    eax,0xc0038754
c000afe9:	c3                   	ret    

c000afea <zoh_get_description>:
c000afea:	31 c0                	xor    eax,eax
c000afec:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000aff1:	75 05                	jne    c000aff8 <zoh_get_description+0xe>
c000aff3:	b8 65 87 03 c0       	mov    eax,0xc0038765
c000aff8:	c3                   	ret    

c000aff9 <zoh_set_converter>:
c000aff9:	53                   	push   ebx
c000affa:	b8 0a 00 00 00       	mov    eax,0xa
c000afff:	83 ec 08             	sub    esp,0x8
c000b002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b006:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b00b:	75 6e                	jne    c000b07b <zoh_set_converter+0x82>
c000b00d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b010:	85 c0                	test   eax,eax
c000b012:	74 13                	je     c000b027 <zoh_set_converter+0x2e>
c000b014:	83 ec 0c             	sub    esp,0xc
c000b017:	50                   	push   eax
c000b018:	e8 d8 23 00 00       	call   c000d3f5 <free>
c000b01d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	50                   	push   eax
c000b028:	50                   	push   eax
c000b029:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b02c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b033:	50                   	push   eax
c000b034:	6a 01                	push   0x1
c000b036:	e8 da 23 00 00       	call   c000d415 <calloc>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	89 c2                	mov    edx,eax
c000b040:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b043:	85 d2                	test   edx,edx
c000b045:	b8 01 00 00 00       	mov    eax,0x1
c000b04a:	74 2f                	je     c000b07b <zoh_set_converter+0x82>
c000b04c:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b052:	83 ec 0c             	sub    esp,0xc
c000b055:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b058:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b05b:	c7 43 24 48 ad 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ad48
c000b062:	c7 43 20 48 ad 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ad48
c000b069:	c7 43 28 a9 af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000afa9
c000b070:	53                   	push   ebx
c000b071:	e8 33 ff ff ff       	call   c000afa9 <zoh_reset>
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	31 c0                	xor    eax,eax
c000b07b:	83 c4 08             	add    esp,0x8
c000b07e:	5b                   	pop    ebx
c000b07f:	c3                   	ret    

c000b080 <Computer::close(int, int, void*)>:
c000b080:	57                   	push   edi
c000b081:	56                   	push   esi
c000b082:	53                   	push   ebx
c000b083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b08b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b098:	e8 7d 87 00 00       	call   c001381a <Device::closeAll()>
c000b09d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0a8:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b0ac:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b0b4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b0b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0bc:	5b                   	pop    ebx
c000b0bd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b0c0:	5e                   	pop    esi
c000b0c1:	5f                   	pop    edi
c000b0c2:	ff e0                	jmp    eax

c000b0c4 <Computer::Computer()>:
c000b0c4:	83 ec 0c             	sub    esp,0xc
c000b0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cb:	83 ec 08             	sub    esp,0x8
c000b0ce:	68 9c 87 03 c0       	push   0xc003879c
c000b0d3:	50                   	push   eax
c000b0d4:	e8 bb 87 00 00       	call   c0013894 <Device::Device(char const*)>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	ba 18 88 03 c0       	mov    edx,0xc0038818
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	89 10                	mov    DWORD PTR [eax],edx
c000b0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0eb:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b107:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b10d:	83 ca 04             	or     edx,0x4
c000b110:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b120:	0f b6 d0             	movzx  edx,al
c000b123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b127:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b132:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b138:	0f b6 d0             	movzx  edx,al
c000b13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b148:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b14e:	8d 50 01             	lea    edx,[eax+0x1]
c000b151:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b155:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b15b:	0f b6 d0             	movzx  edx,al
c000b15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b162:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b166:	83 e1 3f             	and    ecx,0x3f
c000b169:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b171:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b177:	0f b6 d0             	movzx  edx,al
c000b17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b189:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b18f:	0f b6 d0             	movzx  edx,al
c000b192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b196:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b1a5:	8d 50 01             	lea    edx,[eax+0x1]
c000b1a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1ac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b1b2:	0f b6 d0             	movzx  edx,al
c000b1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b1bd:	83 e1 3f             	and    ecx,0x3f
c000b1c0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b1ce:	0f b6 d0             	movzx  edx,al
c000b1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b1e6:	0f b6 d0             	movzx  edx,al
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b1fc:	8d 50 01             	lea    edx,[eax+0x1]
c000b1ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b203:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b209:	0f b6 d0             	movzx  edx,al
c000b20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b210:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b214:	83 e1 3f             	and    ecx,0x3f
c000b217:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b21b:	90                   	nop
c000b21c:	83 c4 0c             	add    esp,0xc
c000b21f:	c3                   	ret    

c000b220 <Computer::setBootMessage(char const*)>:
c000b220:	c3                   	ret    
c000b221:	90                   	nop

c000b222 <Computer::start()>:
c000b222:	56                   	push   esi
c000b223:	53                   	push   ebx
c000b224:	50                   	push   eax
c000b225:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b229:	e8 5e 30 00 00       	call   c000e28c <lockScheduler()>
c000b22e:	e8 8d 33 00 00       	call   c000e5c0 <schedule()>
c000b233:	e8 56 30 00 00       	call   c000e28e <unlockScheduler()>
c000b238:	fb                   	sti    
c000b239:	83 ec 0c             	sub    esp,0xc
c000b23c:	68 3b 07 00 00       	push   0x73b
c000b241:	e8 54 71 00 00       	call   c001239a <operator new(unsigned long)>
c000b246:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b24d:	89 c6                	mov    esi,eax
c000b24f:	ff 35 7c bb 03 c0    	push   DWORD PTR ds:0xc003bb7c
c000b255:	68 a5 87 03 c0       	push   0xc00387a5
c000b25a:	6a 01                	push   0x1
c000b25c:	50                   	push   eax
c000b25d:	e8 8a 2e 00 00       	call   c000e0ec <Process::Process(bool, char const*, Process*, char**)>
c000b262:	83 c4 20             	add    esp,0x20
c000b265:	68 ff 00 00 00       	push   0xff
c000b26a:	6a 00                	push   0x0
c000b26c:	68 59 c8 00 c0       	push   0xc000c859
c000b271:	56                   	push   esi
c000b272:	e8 3f 31 00 00       	call   c000e3b6 <Process::createThread(void (*)(void*), void*, int)>
c000b277:	6a 7a                	push   0x7a
c000b279:	6a 00                	push   0x0
c000b27b:	68 fc ed 00 c0       	push   0xc000edfc
c000b280:	ff 35 7c bb 03 c0    	push   DWORD PTR ds:0xc003bb7c
c000b286:	e8 2b 31 00 00       	call   c000e3b6 <Process::createThread(void (*)(void*), void*, int)>
c000b28b:	83 c4 20             	add    esp,0x20
c000b28e:	a3 30 bb 03 c0       	mov    ds:0xc003bb30,eax
c000b293:	c6 05 2d b9 03 c0 01 	mov    BYTE PTR ds:0xc003b92d,0x1
c000b29a:	e8 55 73 00 00       	call   c00125f4 <initVFS()>
c000b29f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b2a5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2a7:	6a 00                	push   0x0
c000b2a9:	6a 00                	push   0x0
c000b2ab:	6a 00                	push   0x0
c000b2ad:	50                   	push   eax
c000b2ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2b1:	e8 e3 48 00 00       	call   c000fb99 <setupSystemCalls()>
c000b2b6:	e8 37 7e 00 00       	call   c00130f2 <loadClockSettings()>
c000b2bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2be:	e8 2b 85 00 00       	call   c00137ee <Device::loadDriversForAll()>
c000b2c3:	c7 04 24 b2 87 03 c0 	mov    DWORD PTR [esp],0xc00387b2
c000b2ca:	8b 1d 28 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b928
c000b2d0:	e8 f6 12 00 00       	call   c000c5cb <loadDLL(char const*)>
c000b2d5:	5a                   	pop    edx
c000b2d6:	59                   	pop    ecx
c000b2d7:	53                   	push   ebx
c000b2d8:	50                   	push   eax
c000b2d9:	e8 b6 13 00 00       	call   c000c694 <executeDLL(unsigned long, void*)>
c000b2de:	c7 04 24 14 9f 03 c0 	mov    DWORD PTR [esp],0xc0039f14
c000b2e5:	e8 00 1b 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000b2ea:	83 c4 10             	add    esp,0x10
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	6a 02                	push   0x2
c000b2f2:	e8 94 35 00 00       	call   c000e88b <blockTask(TaskState)>
c000b2f7:	83 c4 10             	add    esp,0x10
c000b2fa:	eb f1                	jmp    c000b2ed <Computer::start()+0xcb>

c000b2fc <firstTask()>:
c000b2fc:	83 ec 18             	sub    esp,0x18
c000b2ff:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c000b305:	e8 18 ff ff ff       	call   c000b222 <Computer::start()>

c000b30a <Computer::detectFeatures()>:
c000b30a:	55                   	push   ebp
c000b30b:	57                   	push   edi
c000b30c:	56                   	push   esi
c000b30d:	53                   	push   ebx
c000b30e:	83 ec 1c             	sub    esp,0x1c
c000b311:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b315:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b31f:	e8 9b 4f ff ff       	call   c00002bf <detectCPUID>
c000b324:	85 c0                	test   eax,eax
c000b326:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b32c:	0f 95 c2             	setne  dl
c000b32f:	83 e0 fd             	and    eax,0xfffffffd
c000b332:	d1 e2                	shl    edx,1
c000b334:	09 d0                	or     eax,edx
c000b336:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b33c:	a8 02                	test   al,0x2
c000b33e:	75 46                	jne    c000b386 <Computer::detectFeatures()+0x7c>
c000b340:	f6 05 d5 ba 03 c0 04 	test   BYTE PTR ds:0xc003bad5,0x4
c000b347:	74 07                	je     c000b350 <Computer::detectFeatures()+0x46>
c000b349:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b350:	e8 b1 2f 01 00       	call   c001e306 <x87Detect>
c000b355:	83 e0 01             	and    eax,0x1
c000b358:	c1 e0 04             	shl    eax,0x4
c000b35b:	88 c2                	mov    dl,al
c000b35d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b363:	83 e0 ef             	and    eax,0xffffffef
c000b366:	09 d0                	or     eax,edx
c000b368:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b36e:	a8 10                	test   al,0x10
c000b370:	0f 85 10 01 00 00    	jne    c000b486 <Computer::detectFeatures()+0x17c>
c000b376:	84 c0                	test   al,al
c000b378:	0f 88 2b 01 00 00    	js     c000b4a9 <Computer::detectFeatures()+0x19f>
c000b37e:	83 c4 1c             	add    esp,0x1c
c000b381:	5b                   	pop    ebx
c000b382:	5e                   	pop    esi
c000b383:	5f                   	pop    edi
c000b384:	5d                   	pop    ebp
c000b385:	c3                   	ret    
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	6a 20                	push   0x20
c000b38b:	e8 89 bc 00 00       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c000b390:	83 e0 01             	and    eax,0x1
c000b393:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b39a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b3a0:	83 e0 f7             	and    eax,0xfffffff7
c000b3a3:	09 d0                	or     eax,edx
c000b3a5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b3ab:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b3b2:	e8 62 bc 00 00       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c000b3b7:	83 e0 01             	and    eax,0x1
c000b3ba:	88 c2                	mov    dl,al
c000b3bc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b3c2:	83 e0 fe             	and    eax,0xfffffffe
c000b3c5:	09 d0                	or     eax,edx
c000b3c7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b3cd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b3d4:	e8 40 bc 00 00       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c000b3d9:	c1 e0 07             	shl    eax,0x7
c000b3dc:	88 c2                	mov    dl,al
c000b3de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b3e4:	83 e0 7f             	and    eax,0x7f
c000b3e7:	09 d0                	or     eax,edx
c000b3e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b3ef:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b3f6:	e8 1e bc 00 00       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c000b3fb:	83 c4 10             	add    esp,0x10
c000b3fe:	83 e0 01             	and    eax,0x1
c000b401:	c1 e0 05             	shl    eax,0x5
c000b404:	88 c2                	mov    dl,al
c000b406:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b40c:	83 e0 df             	and    eax,0xffffffdf
c000b40f:	09 d0                	or     eax,edx
c000b411:	f7 05 d4 ba 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bad4,0x401
c000b41b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b421:	0f 84 a8 00 00 00    	je     c000b4cf <Computer::detectFeatures()+0x1c5>
c000b427:	83 ec 0c             	sub    esp,0xc
c000b42a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b431:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b435:	50                   	push   eax
c000b436:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b43a:	55                   	push   ebp
c000b43b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b43f:	57                   	push   edi
c000b440:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b444:	56                   	push   esi
c000b445:	68 00 00 00 80       	push   0x80000000
c000b44a:	e8 47 bb 00 00       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b44f:	83 c4 20             	add    esp,0x20
c000b452:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b459:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b45d:	0f 86 dd fe ff ff    	jbe    c000b340 <Computer::detectFeatures()+0x36>
c000b463:	83 ec 0c             	sub    esp,0xc
c000b466:	50                   	push   eax
c000b467:	55                   	push   ebp
c000b468:	57                   	push   edi
c000b469:	56                   	push   esi
c000b46a:	68 01 00 00 80       	push   0x80000001
c000b46f:	e8 22 bb 00 00       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b474:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b47e:	83 c4 20             	add    esp,0x20
c000b481:	e9 ba fe ff ff       	jmp    c000b340 <Computer::detectFeatures()+0x36>
c000b486:	e8 35 2e 01 00       	call   c001e2c0 <sseDetect>
c000b48b:	88 c2                	mov    dl,al
c000b48d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b493:	c1 e2 07             	shl    edx,0x7
c000b496:	83 e0 7f             	and    eax,0x7f
c000b499:	09 d0                	or     eax,edx
c000b49b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4a1:	84 c0                	test   al,al
c000b4a3:	0f 89 d5 fe ff ff    	jns    c000b37e <Computer::detectFeatures()+0x74>
c000b4a9:	e8 02 2e 01 00       	call   c001e2b0 <avxDetect>
c000b4ae:	83 e0 01             	and    eax,0x1
c000b4b1:	c1 e0 05             	shl    eax,0x5
c000b4b4:	88 c2                	mov    dl,al
c000b4b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4bc:	83 e0 df             	and    eax,0xffffffdf
c000b4bf:	09 d0                	or     eax,edx
c000b4c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4c7:	83 c4 1c             	add    esp,0x1c
c000b4ca:	5b                   	pop    ebx
c000b4cb:	5e                   	pop    esi
c000b4cc:	5f                   	pop    edi
c000b4cd:	5d                   	pop    ebp
c000b4ce:	c3                   	ret    
c000b4cf:	83 ec 0c             	sub    esp,0xc
c000b4d2:	68 00 02 00 00       	push   0x200
c000b4d7:	e8 3d bb 00 00       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	e9 43 ff ff ff       	jmp    c000b427 <Computer::detectFeatures()+0x11d>

c000b4e4 <Computer::displayFeatures()>:
c000b4e4:	c3                   	ret    
c000b4e5:	90                   	nop

c000b4e6 <Computer::rdmsr(unsigned int)>:
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ed:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b4f4:	74 0a                	je     c000b500 <Computer::rdmsr(unsigned int)+0x1a>
c000b4f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4fa:	0f 32                	rdmsr  
c000b4fc:	83 c4 0c             	add    esp,0xc
c000b4ff:	c3                   	ret    
c000b500:	83 ec 0c             	sub    esp,0xc
c000b503:	68 ce 87 03 c0       	push   0xc00387ce
c000b508:	e8 fb 19 00 00       	call   c000cf08 <panic(char const*)>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	eb e4                	jmp    c000b4f6 <Computer::rdmsr(unsigned int)+0x10>

c000b512 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b512:	57                   	push   edi
c000b513:	56                   	push   esi
c000b514:	52                   	push   edx
c000b515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b519:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b51d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b521:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b528:	74 0e                	je     c000b538 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b52a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b52e:	89 f0                	mov    eax,esi
c000b530:	89 fa                	mov    edx,edi
c000b532:	0f 30                	wrmsr  
c000b534:	58                   	pop    eax
c000b535:	5e                   	pop    esi
c000b536:	5f                   	pop    edi
c000b537:	c3                   	ret    
c000b538:	83 ec 0c             	sub    esp,0xc
c000b53b:	68 d4 87 03 c0       	push   0xc00387d4
c000b540:	e8 c3 19 00 00       	call   c000cf08 <panic(char const*)>
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	eb e0                	jmp    c000b52a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b54a <Computer::nmiEnabled()>:
c000b54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b554:	c3                   	ret    
c000b555:	90                   	nop

c000b556 <Computer::readCMOS(unsigned char)>:
c000b556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b561:	19 c0                	sbb    eax,eax
c000b563:	83 e0 80             	and    eax,0xffffff80
c000b566:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b56a:	e6 70                	out    0x70,al
c000b56c:	e4 71                	in     al,0x71
c000b56e:	c3                   	ret    
c000b56f:	90                   	nop

c000b570 <Computer::enableNMI(bool)>:
c000b570:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b578:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b57e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b586:	eb ce                	jmp    c000b556 <Computer::readCMOS(unsigned char)>

c000b588 <Computer::open(int, int, void*)>:
c000b588:	56                   	push   esi
c000b589:	53                   	push   ebx
c000b58a:	83 ec 10             	sub    esp,0x10
c000b58d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b591:	f6 05 d4 ba 03 c0 04 	test   BYTE PTR ds:0xc003bad4,0x4
c000b598:	68 68 22 00 00       	push   0x2268
c000b59d:	0f 94 05 60 ad 03 c0 	sete   BYTE PTR ds:0xc003ad60
c000b5a4:	e8 f1 6d 00 00       	call   c001239a <operator new(unsigned long)>
c000b5a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5ac:	89 c6                	mov    esi,eax
c000b5ae:	e8 25 b1 00 00       	call   c00166d8 <ACPI::ACPI()>
c000b5b3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b5b9:	58                   	pop    eax
c000b5ba:	5a                   	pop    edx
c000b5bb:	56                   	push   esi
c000b5bc:	53                   	push   ebx
c000b5bd:	e8 e2 80 00 00       	call   c00136a4 <Device::addChild(Device*)>
c000b5c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5c5:	e8 40 fd ff ff       	call   c000b30a <Computer::detectFeatures()>
c000b5ca:	59                   	pop    ecx
c000b5cb:	5e                   	pop    esi
c000b5cc:	6a 01                	push   0x1
c000b5ce:	53                   	push   ebx
c000b5cf:	e8 9c ff ff ff       	call   c000b570 <Computer::enableNMI(bool)>
c000b5d4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b5db:	e8 ba 6d 00 00       	call   c001239a <operator new(unsigned long)>
c000b5e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e3:	89 c6                	mov    esi,eax
c000b5e5:	e8 fa ba 00 00       	call   c00170e4 <CPU::CPU()>
c000b5ea:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b5f0:	58                   	pop    eax
c000b5f1:	5a                   	pop    edx
c000b5f2:	56                   	push   esi
c000b5f3:	53                   	push   ebx
c000b5f4:	e8 ab 80 00 00       	call   c00136a4 <Device::addChild(Device*)>
c000b5f9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b5ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000b601:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b605:	6a 00                	push   0x0
c000b607:	6a 00                	push   0x0
c000b609:	50                   	push   eax
c000b60a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b60d:	83 c4 20             	add    esp,0x20
c000b610:	e8 f7 85 00 00       	call   c0013c0c <setupFPU()>
c000b615:	83 ec 08             	sub    esp,0x8
c000b618:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b61e:	50                   	push   eax
c000b61f:	53                   	push   ebx
c000b620:	e8 7f 80 00 00       	call   c00136a4 <Device::addChild(Device*)>
c000b625:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b62b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b62d:	6a 00                	push   0x0
c000b62f:	6a 00                	push   0x0
c000b631:	6a 00                	push   0x0
c000b633:	50                   	push   eax
c000b634:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b637:	83 c4 14             	add    esp,0x14
c000b63a:	68 fc b2 00 c0       	push   0xc000b2fc
c000b63f:	e8 72 2e 00 00       	call   c000e4b6 <setupMultitasking(void (*)())>
c000b644:	83 c4 14             	add    esp,0x14
c000b647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b64c:	5b                   	pop    ebx
c000b64d:	5e                   	pop    esi
c000b64e:	c3                   	ret    
c000b64f:	90                   	nop

c000b650 <Computer::disableNMI()>:
c000b650:	6a 00                	push   0x0
c000b652:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b656:	e8 15 ff ff ff       	call   c000b570 <Computer::enableNMI(bool)>
c000b65b:	58                   	pop    eax
c000b65c:	5a                   	pop    edx
c000b65d:	c3                   	ret    

c000b65e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b662:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b669:	19 c0                	sbb    eax,eax
c000b66b:	83 e0 80             	and    eax,0xffffff80
c000b66e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b672:	e6 70                	out    0x70,al
c000b674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b678:	e6 71                	out    0x71,al
c000b67a:	c3                   	ret    
c000b67b:	90                   	nop

c000b67c <Computer::handleNMI()>:
c000b67c:	56                   	push   esi
c000b67d:	53                   	push   ebx
c000b67e:	83 ec 10             	sub    esp,0x10
c000b681:	e4 92                	in     al,0x92
c000b683:	89 c6                	mov    esi,eax
c000b685:	e4 61                	in     al,0x61
c000b687:	68 da 87 03 c0       	push   0xc00387da
c000b68c:	88 c3                	mov    bl,al
c000b68e:	e8 57 17 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	83 e6 10             	and    esi,0x10
c000b699:	75 0d                	jne    c000b6a8 <Computer::handleNMI()+0x2c>
c000b69b:	f6 c3 40             	test   bl,0x40
c000b69e:	75 1d                	jne    c000b6bd <Computer::handleNMI()+0x41>
c000b6a0:	84 db                	test   bl,bl
c000b6a2:	78 2d                	js     c000b6d1 <Computer::handleNMI()+0x55>
c000b6a4:	58                   	pop    eax
c000b6a5:	5b                   	pop    ebx
c000b6a6:	5e                   	pop    esi
c000b6a7:	c3                   	ret    
c000b6a8:	83 ec 0c             	sub    esp,0xc
c000b6ab:	68 eb 87 03 c0       	push   0xc00387eb
c000b6b0:	e8 53 18 00 00       	call   c000cf08 <panic(char const*)>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	f6 c3 40             	test   bl,0x40
c000b6bb:	74 e3                	je     c000b6a0 <Computer::handleNMI()+0x24>
c000b6bd:	83 ec 0c             	sub    esp,0xc
c000b6c0:	68 f8 87 03 c0       	push   0xc00387f8
c000b6c5:	e8 3e 18 00 00       	call   c000cf08 <panic(char const*)>
c000b6ca:	83 c4 10             	add    esp,0x10
c000b6cd:	84 db                	test   bl,bl
c000b6cf:	79 d3                	jns    c000b6a4 <Computer::handleNMI()+0x28>
c000b6d1:	c7 44 24 10 02 88 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038802
c000b6d9:	5a                   	pop    edx
c000b6da:	5b                   	pop    ebx
c000b6db:	5e                   	pop    esi
c000b6dc:	e9 27 18 00 00       	jmp    c000cf08 <panic(char const*)>
c000b6e1:	90                   	nop

c000b6e2 <Computer::setDiskActivityLight(int, bool)>:
c000b6e2:	56                   	push   esi
c000b6e3:	53                   	push   ebx
c000b6e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b6e8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b6ed:	77 1b                	ja     c000b70a <Computer::setDiskActivityLight(int, bool)+0x28>
c000b6ef:	e4 92                	in     al,0x92
c000b6f1:	bb 40 00 00 00       	mov    ebx,0x40
c000b6f6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b6fa:	89 da                	mov    edx,ebx
c000b6fc:	d3 e2                	shl    edx,cl
c000b6fe:	89 f1                	mov    ecx,esi
c000b700:	f7 d2                	not    edx
c000b702:	d3 e3                	shl    ebx,cl
c000b704:	21 d0                	and    eax,edx
c000b706:	09 d8                	or     eax,ebx
c000b708:	e6 92                	out    0x92,al
c000b70a:	5b                   	pop    ebx
c000b70b:	5e                   	pop    esi
c000b70c:	c3                   	ret    

c000b70d <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b70d:	55                   	push   ebp
c000b70e:	89 e5                	mov    ebp,esp
c000b710:	57                   	push   edi
c000b711:	56                   	push   esi
c000b712:	53                   	push   ebx
c000b713:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b719:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b71c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b71f:	85 c0                	test   eax,eax
c000b721:	0f 95 c1             	setne  cl
c000b724:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b728:	0f 94 c2             	sete   dl
c000b72b:	84 d1                	test   cl,dl
c000b72d:	74 26                	je     c000b755 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b72f:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b736:	74 1d                	je     c000b755 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b738:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b73b:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b741:	89 d6                	mov    esi,edx
c000b743:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b749:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b74f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b752:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	05 ff 0f 00 00       	add    eax,0xfff
c000b75d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b760:	6a 01                	push   0x1
c000b762:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b768:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b76e:	e8 96 5a 00 00       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c000b773:	83 c4 10             	add    esp,0x10
c000b776:	89 c6                	mov    esi,eax
c000b778:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b77e:	0f 86 21 01 00 00    	jbe    c000b8a5 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b784:	c1 eb 0c             	shr    ebx,0xc
c000b787:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b791:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b797:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b79a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b79d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b7a3:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b7a6:	29 d8                	sub    eax,ebx
c000b7a8:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b7ae:	0f 83 f4 00 00 00    	jae    c000b8a8 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b7b4:	83 ec 0c             	sub    esp,0xc
c000b7b7:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b7bd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b7c0:	3d 00 10 00 00       	cmp    eax,0x1000
c000b7c5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b7c7:	52                   	push   edx
c000b7c8:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b7ce:	52                   	push   edx
c000b7cf:	76 05                	jbe    c000b7d6 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b7d1:	b8 00 10 00 00       	mov    eax,0x1000
c000b7d6:	31 d2                	xor    edx,edx
c000b7d8:	52                   	push   edx
c000b7d9:	50                   	push   eax
c000b7da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b7dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b7e0:	83 c4 20             	add    esp,0x20
c000b7e3:	85 c0                	test   eax,eax
c000b7e5:	74 1f                	je     c000b806 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b7e7:	51                   	push   ecx
c000b7e8:	51                   	push   ecx
c000b7e9:	50                   	push   eax
c000b7ea:	68 3c 88 03 c0       	push   0xc003883c
c000b7ef:	e8 f6 15 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000b7f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b7f7:	e8 43 5d 00 00       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c000b7fc:	83 c4 10             	add    esp,0x10
c000b7ff:	31 c0                	xor    eax,eax
c000b801:	e9 7c 01 00 00       	jmp    c000b982 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b806:	e8 81 2a 00 00       	call   c000e28c <lockScheduler()>
c000b80b:	e8 7f 21 00 00       	call   c000d98f <Phys::allocatePage()>
c000b810:	6a 07                	push   0x7
c000b812:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b818:	56                   	push   esi
c000b819:	50                   	push   eax
c000b81a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b820:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b823:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b829:	e8 12 60 00 00       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b82e:	83 c4 0c             	add    esp,0xc
c000b831:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b837:	6a 00                	push   0x0
c000b839:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b83f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b842:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b848:	e8 51 5e 00 00       	call   c001169e <VAS::mapOtherVASIn(bool, VAS*)>
c000b84d:	58                   	pop    eax
c000b84e:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b854:	5a                   	pop    edx
c000b855:	68 07 04 00 00       	push   0x407
c000b85a:	53                   	push   ebx
c000b85b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b861:	50                   	push   eax
c000b862:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b868:	6a 00                	push   0x0
c000b86a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b86f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b872:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b878:	e8 c3 66 00 00       	call   c0011f40 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b87d:	83 c4 1c             	add    esp,0x1c
c000b880:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b886:	68 00 10 00 00       	push   0x1000
c000b88b:	50                   	push   eax
c000b88c:	56                   	push   esi
c000b88d:	e8 e2 4d ff ff       	call   c0000674 <memcpy>
c000b892:	e8 f7 29 00 00       	call   c000e28e <unlockScheduler()>
c000b897:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b89d:	83 c4 10             	add    esp,0x10
c000b8a0:	e9 f5 fe ff ff       	jmp    c000b79a <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b8a5:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b8a8:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b8b2:	0f 86 bc 00 00 00    	jbe    c000b974 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b8b8:	e8 cf 29 00 00       	call   c000e28c <lockScheduler()>
c000b8bd:	51                   	push   ecx
c000b8be:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b8c4:	6a 00                	push   0x0
c000b8c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b8ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b8d4:	e8 c5 5d 00 00       	call   c001169e <VAS::mapOtherVASIn(bool, VAS*)>
c000b8d9:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b8df:	83 c4 10             	add    esp,0x10
c000b8e2:	c1 e8 0c             	shr    eax,0xc
c000b8e5:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b8ef:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b8f5:	e8 95 20 00 00       	call   c000d98f <Phys::allocatePage()>
c000b8fa:	6a 07                	push   0x7
c000b8fc:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000b902:	56                   	push   esi
c000b903:	50                   	push   eax
c000b904:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000b90a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000b90d:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000b913:	e8 28 5f 00 00       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b918:	58                   	pop    eax
c000b919:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000b91f:	5a                   	pop    edx
c000b920:	68 07 04 00 00       	push   0x407
c000b925:	53                   	push   ebx
c000b926:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b92c:	50                   	push   eax
c000b92d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b933:	6a 00                	push   0x0
c000b935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b93a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b93d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b943:	e8 f8 65 00 00       	call   c0011f40 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b948:	83 c4 1c             	add    esp,0x1c
c000b94b:	68 00 10 00 00       	push   0x1000
c000b950:	6a 00                	push   0x0
c000b952:	56                   	push   esi
c000b953:	e8 68 4d ff ff       	call   c00006c0 <memset>
c000b958:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000b95e:	83 c4 10             	add    esp,0x10
c000b961:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000b967:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000b96d:	77 86                	ja     c000b8f5 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000b96f:	e8 1a 29 00 00       	call   c000e28e <unlockScheduler()>
c000b974:	83 ec 0c             	sub    esp,0xc
c000b977:	56                   	push   esi
c000b978:	e8 c2 5b 00 00       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c000b97d:	83 c4 10             	add    esp,0x10
c000b980:	b0 01                	mov    al,0x1
c000b982:	8d 65 f4             	lea    esp,[ebp-0xc]
c000b985:	5b                   	pop    ebx
c000b986:	5e                   	pop    esi
c000b987:	5f                   	pop    edi
c000b988:	5d                   	pop    ebp
c000b989:	c3                   	ret    

c000b98a <loadProgramIntoMemory(Process*, char const*)>:
c000b98a:	55                   	push   ebp
c000b98b:	57                   	push   edi
c000b98c:	56                   	push   esi
c000b98d:	53                   	push   ebx
c000b98e:	83 ec 48             	sub    esp,0x48
c000b991:	68 14 01 00 00       	push   0x114
c000b996:	e8 ff 69 00 00       	call   c001239a <operator new(unsigned long)>
c000b99b:	83 c4 0c             	add    esp,0xc
c000b99e:	89 c6                	mov    esi,eax
c000b9a0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b9a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b9a8:	50                   	push   eax
c000b9a9:	e8 1a 6e 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000b9ae:	58                   	pop    eax
c000b9af:	5a                   	pop    edx
c000b9b0:	6a 01                	push   0x1
c000b9b2:	56                   	push   esi
c000b9b3:	e8 74 6e 00 00       	call   c001282c <File::open(FileOpenMode)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	85 c0                	test   eax,eax
c000b9bd:	0f 85 47 01 00 00    	jne    c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b9c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b9cb:	83 ec 0c             	sub    esp,0xc
c000b9ce:	6a 34                	push   0x34
c000b9d0:	e8 10 1a 00 00       	call   c000d3e5 <malloc>
c000b9d5:	89 c3                	mov    ebx,eax
c000b9d7:	58                   	pop    eax
c000b9d8:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9da:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000b9de:	57                   	push   edi
c000b9df:	53                   	push   ebx
c000b9e0:	6a 00                	push   0x0
c000b9e2:	6a 34                	push   0x34
c000b9e4:	56                   	push   esi
c000b9e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b9e8:	83 c4 20             	add    esp,0x20
c000b9eb:	85 c0                	test   eax,eax
c000b9ed:	0f 85 17 01 00 00    	jne    c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b9f3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000b9f9:	0f 85 0b 01 00 00    	jne    c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b9ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000ba02:	85 c0                	test   eax,eax
c000ba04:	0f 84 00 01 00 00    	je     c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000ba0a:	31 d2                	xor    edx,edx
c000ba0c:	55                   	push   ebp
c000ba0d:	52                   	push   edx
c000ba0e:	50                   	push   eax
c000ba0f:	56                   	push   esi
c000ba10:	e8 d5 6e 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000ba15:	83 c4 10             	add    esp,0x10
c000ba18:	85 c0                	test   eax,eax
c000ba1a:	0f 85 ea 00 00 00    	jne    c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000ba20:	83 ec 0c             	sub    esp,0xc
c000ba23:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ba26:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000ba2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba2e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000ba32:	0f af c2             	imul   eax,edx
c000ba35:	50                   	push   eax
c000ba36:	e8 aa 19 00 00       	call   c000d3e5 <malloc>
c000ba3b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ba3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba42:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ba44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba48:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000ba4c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000ba50:	0f af c2             	imul   eax,edx
c000ba53:	99                   	cdq    
c000ba54:	52                   	push   edx
c000ba55:	50                   	push   eax
c000ba56:	56                   	push   esi
c000ba57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000ba5a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ba5d:	83 c4 20             	add    esp,0x20
c000ba60:	85 c0                	test   eax,eax
c000ba62:	0f 84 a2 00 00 00    	je     c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000ba68:	31 d2                	xor    edx,edx
c000ba6a:	51                   	push   ecx
c000ba6b:	52                   	push   edx
c000ba6c:	50                   	push   eax
c000ba6d:	56                   	push   esi
c000ba6e:	e8 77 6e 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	85 c0                	test   eax,eax
c000ba78:	0f 85 8c 00 00 00    	jne    c000bb0a <loadProgramIntoMemory(Process*, char const*)+0x180>
c000ba7e:	83 ec 0c             	sub    esp,0xc
c000ba81:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000ba85:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000ba89:	31 ed                	xor    ebp,ebp
c000ba8b:	0f af c2             	imul   eax,edx
c000ba8e:	50                   	push   eax
c000ba8f:	e8 51 19 00 00       	call   c000d3e5 <malloc>
c000ba94:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ba97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ba9b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ba9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baa1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000baa5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000baa9:	0f af c2             	imul   eax,edx
c000baac:	99                   	cdq    
c000baad:	52                   	push   edx
c000baae:	50                   	push   eax
c000baaf:	56                   	push   esi
c000bab0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bab3:	83 c4 20             	add    esp,0x20
c000bab6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000babe:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bac2:	0f 86 80 00 00 00    	jbe    c000bb48 <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bac8:	0f b7 fd             	movzx  edi,bp
c000bacb:	c1 e7 05             	shl    edi,0x5
c000bace:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bad2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bad5:	75 6b                	jne    c000bb42 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bad7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bada:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bade:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bae1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bae5:	52                   	push   edx
c000bae6:	31 d2                	xor    edx,edx
c000bae8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000baeb:	52                   	push   edx
c000baec:	50                   	push   eax
c000baed:	56                   	push   esi
c000baee:	e8 f7 6d 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000baf3:	83 c4 10             	add    esp,0x10
c000baf6:	85 c0                	test   eax,eax
c000baf8:	74 17                	je     c000bb11 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bafa:	83 ec 0c             	sub    esp,0xc
c000bafd:	68 67 88 03 c0       	push   0xc0038867
c000bb02:	e8 e3 12 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000bb07:	83 c4 10             	add    esp,0x10
c000bb0a:	31 c0                	xor    eax,eax
c000bb0c:	e9 87 00 00 00       	jmp    c000bb98 <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bb11:	83 ec 0c             	sub    esp,0xc
c000bb14:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bb17:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bb1a:	50                   	push   eax
c000bb1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bb1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb23:	56                   	push   esi
c000bb24:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bb28:	e8 e0 fb ff ff       	call   c000b70d <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bb2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb31:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bb35:	83 c4 20             	add    esp,0x20
c000bb38:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bb3c:	73 04                	jae    c000bb42 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bb3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb42:	45                   	inc    ebp
c000bb43:	e9 76 ff ff ff       	jmp    c000babe <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bb48:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bb4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb54:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bb5a:	83 ec 0c             	sub    esp,0xc
c000bb5d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bb63:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb68:	05 00 10 00 00       	add    eax,0x1000
c000bb6d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb74:	e8 7c 18 00 00       	call   c000d3f5 <free>
c000bb79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb7c:	e8 74 18 00 00       	call   c000d3f5 <free>
c000bb81:	58                   	pop    eax
c000bb82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb86:	e8 6a 18 00 00       	call   c000d3f5 <free>
c000bb8b:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb8e:	e8 f7 6c 00 00       	call   c001288a <File::close()>
c000bb93:	83 c4 10             	add    esp,0x10
c000bb96:	b0 01                	mov    al,0x1
c000bb98:	83 c4 3c             	add    esp,0x3c
c000bb9b:	5b                   	pop    ebx
c000bb9c:	5e                   	pop    esi
c000bb9d:	5f                   	pop    edi
c000bb9e:	5d                   	pop    ebp
c000bb9f:	c3                   	ret    

c000bba0 <runtimeReferenceHelper()>:
c000bba0:	83 ec 18             	sub    esp,0x18
c000bba3:	68 6f 88 03 c0       	push   0xc003886f
c000bba8:	e8 3d 12 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000bbad:	fa                   	cli    
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	eb fe                	jmp    c000bbb1 <runtimeReferenceHelper()+0x11>

c000bbb3 <getAddressOfKernelSymbol(char const*)>:
c000bbb3:	57                   	push   edi
c000bbb4:	56                   	push   esi
c000bbb5:	53                   	push   ebx
c000bbb6:	31 db                	xor    ebx,ebx
c000bbb8:	39 1d c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,ebx
c000bbbe:	7e 3c                	jle    c000bbfc <getAddressOfKernelSymbol(char const*)+0x49>
c000bbc0:	8b 34 9d 40 ba 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc45c0]
c000bbc7:	31 ff                	xor    edi,edi
c000bbc9:	39 3c 9d 40 b9 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc46c0],edi
c000bbd0:	7e 27                	jle    c000bbf9 <getAddressOfKernelSymbol(char const*)+0x46>
c000bbd2:	50                   	push   eax
c000bbd3:	50                   	push   eax
c000bbd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbd8:	8b 06                	mov    eax,DWORD PTR [esi]
c000bbda:	03 04 9d c0 b9 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc4640]
c000bbe1:	50                   	push   eax
c000bbe2:	e8 21 4c ff ff       	call   c0000808 <strcmp>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	85 c0                	test   eax,eax
c000bbec:	75 05                	jne    c000bbf3 <getAddressOfKernelSymbol(char const*)+0x40>
c000bbee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bbf1:	eb 0b                	jmp    c000bbfe <getAddressOfKernelSymbol(char const*)+0x4b>
c000bbf3:	83 c6 10             	add    esi,0x10
c000bbf6:	47                   	inc    edi
c000bbf7:	eb d0                	jmp    c000bbc9 <getAddressOfKernelSymbol(char const*)+0x16>
c000bbf9:	43                   	inc    ebx
c000bbfa:	eb bc                	jmp    c000bbb8 <getAddressOfKernelSymbol(char const*)+0x5>
c000bbfc:	31 c0                	xor    eax,eax
c000bbfe:	5b                   	pop    ebx
c000bbff:	5e                   	pop    esi
c000bc00:	5f                   	pop    edi
c000bc01:	c3                   	ret    

c000bc02 <loadKernelSymbolTable(char const*)>:
c000bc02:	55                   	push   ebp
c000bc03:	57                   	push   edi
c000bc04:	56                   	push   esi
c000bc05:	53                   	push   ebx
c000bc06:	83 ec 68             	sub    esp,0x68
c000bc09:	8b 35 7c bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bb7c
c000bc0f:	68 14 01 00 00       	push   0x114
c000bc14:	e8 81 67 00 00       	call   c001239a <operator new(unsigned long)>
c000bc19:	83 c4 0c             	add    esp,0xc
c000bc1c:	89 c3                	mov    ebx,eax
c000bc1e:	56                   	push   esi
c000bc1f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bc23:	50                   	push   eax
c000bc24:	e8 9f 6b 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000bc29:	5e                   	pop    esi
c000bc2a:	5f                   	pop    edi
c000bc2b:	6a 01                	push   0x1
c000bc2d:	53                   	push   ebx
c000bc2e:	e8 f9 6b 00 00       	call   c001282c <File::open(FileOpenMode)>
c000bc33:	83 c4 10             	add    esp,0x10
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	85 c0                	test   eax,eax
c000bc3a:	0f 85 79 02 00 00    	jne    c000beb9 <loadKernelSymbolTable(char const*)+0x2b7>
c000bc40:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	6a 34                	push   0x34
c000bc4d:	e8 93 17 00 00       	call   c000d3e5 <malloc>
c000bc52:	59                   	pop    ecx
c000bc53:	89 c7                	mov    edi,eax
c000bc55:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bc59:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc5b:	56                   	push   esi
c000bc5c:	57                   	push   edi
c000bc5d:	6a 00                	push   0x0
c000bc5f:	6a 34                	push   0x34
c000bc61:	53                   	push   ebx
c000bc62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc65:	83 c4 20             	add    esp,0x20
c000bc68:	85 c0                	test   eax,eax
c000bc6a:	74 17                	je     c000bc83 <loadKernelSymbolTable(char const*)+0x81>
c000bc6c:	83 ec 0c             	sub    esp,0xc
c000bc6f:	68 91 88 03 c0       	push   0xc0038891
c000bc74:	e8 8f 12 00 00       	call   c000cf08 <panic(char const*)>
c000bc79:	83 c4 10             	add    esp,0x10
c000bc7c:	31 d2                	xor    edx,edx
c000bc7e:	e9 36 02 00 00       	jmp    c000beb9 <loadKernelSymbolTable(char const*)+0x2b7>
c000bc83:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bc89:	75 e1                	jne    c000bc6c <loadKernelSymbolTable(char const*)+0x6a>
c000bc8b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bc8e:	85 c0                	test   eax,eax
c000bc90:	74 da                	je     c000bc6c <loadKernelSymbolTable(char const*)+0x6a>
c000bc92:	52                   	push   edx
c000bc93:	31 d2                	xor    edx,edx
c000bc95:	52                   	push   edx
c000bc96:	50                   	push   eax
c000bc97:	53                   	push   ebx
c000bc98:	e8 4d 6c 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000bc9d:	83 c4 10             	add    esp,0x10
c000bca0:	85 c0                	test   eax,eax
c000bca2:	75 c8                	jne    c000bc6c <loadKernelSymbolTable(char const*)+0x6a>
c000bca4:	83 ec 0c             	sub    esp,0xc
c000bca7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bcab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bcaf:	31 ed                	xor    ebp,ebp
c000bcb1:	0f af c2             	imul   eax,edx
c000bcb4:	50                   	push   eax
c000bcb5:	e8 2b 17 00 00       	call   c000d3e5 <malloc>
c000bcba:	89 34 24             	mov    DWORD PTR [esp],esi
c000bcbd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bcc3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcc7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bccb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bccf:	0f af c2             	imul   eax,edx
c000bcd2:	99                   	cdq    
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	53                   	push   ebx
c000bcd6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bcd9:	83 c4 20             	add    esp,0x20
c000bcdc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bcec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bcf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bcfc:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000bd00:	0f 86 aa 00 00 00    	jbe    c000bdb0 <loadKernelSymbolTable(char const*)+0x1ae>
c000bd06:	0f b7 f5             	movzx  esi,bp
c000bd09:	6b f6 28             	imul   esi,esi,0x28
c000bd0c:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000bd10:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000bd13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd17:	50                   	push   eax
c000bd18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd1c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000bd20:	8b 16                	mov    edx,DWORD PTR [esi]
c000bd22:	6b c0 28             	imul   eax,eax,0x28
c000bd25:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000bd29:	89 d0                	mov    eax,edx
c000bd2b:	31 d2                	xor    edx,edx
c000bd2d:	52                   	push   edx
c000bd2e:	50                   	push   eax
c000bd2f:	53                   	push   ebx
c000bd30:	e8 b5 6b 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000bd35:	83 c4 0c             	add    esp,0xc
c000bd38:	6a 20                	push   0x20
c000bd3a:	6a 00                	push   0x0
c000bd3c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000bd40:	52                   	push   edx
c000bd41:	e8 7a 49 ff ff       	call   c00006c0 <memset>
c000bd46:	58                   	pop    eax
c000bd47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd49:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000bd4d:	51                   	push   ecx
c000bd4e:	8d 54 24 40          	lea    edx,[esp+0x40]
c000bd52:	52                   	push   edx
c000bd53:	6a 00                	push   0x0
c000bd55:	6a 1f                	push   0x1f
c000bd57:	53                   	push   ebx
c000bd58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd5b:	83 c4 18             	add    esp,0x18
c000bd5e:	68 a8 88 03 c0       	push   0xc00388a8
c000bd63:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000bd67:	52                   	push   edx
c000bd68:	e8 9b 4a ff ff       	call   c0000808 <strcmp>
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	85 c0                	test   eax,eax
c000bd72:	75 0f                	jne    c000bd83 <loadKernelSymbolTable(char const*)+0x181>
c000bd74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bd77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd83:	50                   	push   eax
c000bd84:	50                   	push   eax
c000bd85:	68 b0 88 03 c0       	push   0xc00388b0
c000bd8a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000bd8e:	50                   	push   eax
c000bd8f:	e8 74 4a ff ff       	call   c0000808 <strcmp>
c000bd94:	83 c4 10             	add    esp,0x10
c000bd97:	85 c0                	test   eax,eax
c000bd99:	75 0f                	jne    c000bdaa <loadKernelSymbolTable(char const*)+0x1a8>
c000bd9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bd9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bda2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bda6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bdaa:	45                   	inc    ebp
c000bdab:	e9 4c ff ff ff       	jmp    c000bcfc <loadKernelSymbolTable(char const*)+0xfa>
c000bdb0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bdb5:	75 10                	jne    c000bdc7 <loadKernelSymbolTable(char const*)+0x1c5>
c000bdb7:	83 ec 0c             	sub    esp,0xc
c000bdba:	68 b8 88 03 c0       	push   0xc00388b8
c000bdbf:	e8 44 11 00 00       	call   c000cf08 <panic(char const*)>
c000bdc4:	83 c4 10             	add    esp,0x10
c000bdc7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bdcc:	75 10                	jne    c000bdde <loadKernelSymbolTable(char const*)+0x1dc>
c000bdce:	83 ec 0c             	sub    esp,0xc
c000bdd1:	68 b8 88 03 c0       	push   0xc00388b8
c000bdd6:	e8 2d 11 00 00       	call   c000cf08 <panic(char const*)>
c000bddb:	83 c4 10             	add    esp,0x10
c000bdde:	31 d2                	xor    edx,edx
c000bde0:	50                   	push   eax
c000bde1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bde5:	52                   	push   edx
c000bde6:	50                   	push   eax
c000bde7:	53                   	push   ebx
c000bde8:	e8 fd 6a 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000bded:	5a                   	pop    edx
c000bdee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bdf2:	e8 ee 15 00 00       	call   c000d3e5 <malloc>
c000bdf7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bdff:	89 c1                	mov    ecx,eax
c000be01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be09:	5e                   	pop    esi
c000be0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be0c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000be10:	55                   	push   ebp
c000be11:	51                   	push   ecx
c000be12:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000be16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000be1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000be1e:	53                   	push   ebx
c000be1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be22:	83 c4 14             	add    esp,0x14
c000be25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be29:	e8 b7 15 00 00       	call   c000d3e5 <malloc>
c000be2e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be31:	89 c6                	mov    esi,eax
c000be33:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be35:	56                   	push   esi
c000be36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000be3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000be3e:	53                   	push   ebx
c000be3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000be46:	8b 15 c0 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003bac0
c000be4c:	83 c4 1c             	add    esp,0x1c
c000be4f:	c1 e8 04             	shr    eax,0x4
c000be52:	89 04 95 40 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc46c0],eax
c000be59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be5d:	31 d2                	xor    edx,edx
c000be5f:	52                   	push   edx
c000be60:	50                   	push   eax
c000be61:	53                   	push   ebx
c000be62:	e8 83 6a 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000be67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be6a:	31 d2                	xor    edx,edx
c000be6c:	56                   	push   esi
c000be6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be71:	52                   	push   edx
c000be72:	50                   	push   eax
c000be73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be75:	53                   	push   ebx
c000be76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be79:	83 c4 14             	add    esp,0x14
c000be7c:	53                   	push   ebx
c000be7d:	e8 08 6a 00 00       	call   c001288a <File::close()>
c000be82:	5d                   	pop    ebp
c000be83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be87:	e8 69 15 00 00       	call   c000d3f5 <free>
c000be8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000be8f:	e8 61 15 00 00       	call   c000d3f5 <free>
c000be94:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c000be99:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000be9d:	8d 50 01             	lea    edx,[eax+0x1]
c000bea0:	89 0c 85 40 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45c0],ecx
c000bea7:	89 15 c0 ba 03 c0    	mov    DWORD PTR ds:0xc003bac0,edx
c000bead:	89 34 85 c0 b9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4640],esi
c000beb4:	83 c4 10             	add    esp,0x10
c000beb7:	b2 01                	mov    dl,0x1
c000beb9:	83 c4 5c             	add    esp,0x5c
c000bebc:	88 d0                	mov    al,dl
c000bebe:	5b                   	pop    ebx
c000bebf:	5e                   	pop    esi
c000bec0:	5f                   	pop    edi
c000bec1:	5d                   	pop    ebp
c000bec2:	c3                   	ret    

c000bec3 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bec3:	55                   	push   ebp
c000bec4:	57                   	push   edi
c000bec5:	56                   	push   esi
c000bec6:	53                   	push   ebx
c000bec7:	81 ec 68 03 00 00    	sub    esp,0x368
c000becd:	8b 1d 7c bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb7c
c000bed3:	68 14 01 00 00       	push   0x114
c000bed8:	e8 bd 64 00 00       	call   c001239a <operator new(unsigned long)>
c000bedd:	83 c4 0c             	add    esp,0xc
c000bee0:	89 c5                	mov    ebp,eax
c000bee2:	53                   	push   ebx
c000bee3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c000beea:	50                   	push   eax
c000beeb:	e8 d8 68 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000bef0:	58                   	pop    eax
c000bef1:	5a                   	pop    edx
c000bef2:	6a 01                	push   0x1
c000bef4:	55                   	push   ebp
c000bef5:	e8 32 69 00 00       	call   c001282c <File::open(FileOpenMode)>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	85 c0                	test   eax,eax
c000beff:	0f 85 2e 01 00 00    	jne    c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bf05:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000bf0d:	83 ec 0c             	sub    esp,0xc
c000bf10:	6a 34                	push   0x34
c000bf12:	e8 ce 14 00 00       	call   c000d3e5 <malloc>
c000bf17:	89 c7                	mov    edi,eax
c000bf19:	58                   	pop    eax
c000bf1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bf21:	53                   	push   ebx
c000bf22:	57                   	push   edi
c000bf23:	6a 00                	push   0x0
c000bf25:	6a 34                	push   0x34
c000bf27:	55                   	push   ebp
c000bf28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf2b:	83 c4 20             	add    esp,0x20
c000bf2e:	85 c0                	test   eax,eax
c000bf30:	0f 85 fd 00 00 00    	jne    c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bf36:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bf3c:	0f 85 f1 00 00 00    	jne    c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bf42:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bf45:	85 c0                	test   eax,eax
c000bf47:	0f 84 e6 00 00 00    	je     c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bf4d:	31 d2                	xor    edx,edx
c000bf4f:	56                   	push   esi
c000bf50:	52                   	push   edx
c000bf51:	50                   	push   eax
c000bf52:	55                   	push   ebp
c000bf53:	e8 92 69 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000bf58:	83 c4 10             	add    esp,0x10
c000bf5b:	85 c0                	test   eax,eax
c000bf5d:	0f 85 d0 00 00 00    	jne    c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bf63:	83 ec 0c             	sub    esp,0xc
c000bf66:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c000bf69:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bf6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bf71:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bf75:	0f af c2             	imul   eax,edx
c000bf78:	50                   	push   eax
c000bf79:	e8 67 14 00 00       	call   c000d3e5 <malloc>
c000bf7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf81:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bf85:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bf90:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bf94:	0f af c2             	imul   eax,edx
c000bf97:	99                   	cdq    
c000bf98:	52                   	push   edx
c000bf99:	50                   	push   eax
c000bf9a:	55                   	push   ebp
c000bf9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bf9e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bfa1:	83 c4 20             	add    esp,0x20
c000bfa4:	85 c0                	test   eax,eax
c000bfa6:	0f 84 87 00 00 00    	je     c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bfac:	31 d2                	xor    edx,edx
c000bfae:	51                   	push   ecx
c000bfaf:	52                   	push   edx
c000bfb0:	50                   	push   eax
c000bfb1:	55                   	push   ebp
c000bfb2:	e8 33 69 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	85 c0                	test   eax,eax
c000bfbc:	75 75                	jne    c000c033 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bfbe:	83 ec 0c             	sub    esp,0xc
c000bfc1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bfc5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bfc9:	31 f6                	xor    esi,esi
c000bfcb:	0f af c2             	imul   eax,edx
c000bfce:	50                   	push   eax
c000bfcf:	e8 11 14 00 00       	call   c000d3e5 <malloc>
c000bfd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bfd7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfdb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bfde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bfe2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bfe6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bfea:	0f af c2             	imul   eax,edx
c000bfed:	99                   	cdq    
c000bfee:	52                   	push   edx
c000bfef:	50                   	push   eax
c000bff0:	55                   	push   ebp
c000bff1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bff4:	83 c4 20             	add    esp,0x20
c000bff7:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c000bffb:	0f 86 8d 00 00 00    	jbe    c000c08e <loadDriverIntoMemory(char const*, unsigned long)+0x1cb>
c000c001:	0f b7 de             	movzx  ebx,si
c000c004:	c1 e3 05             	shl    ebx,0x5
c000c007:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000c00b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c00e:	75 78                	jne    c000c088 <loadDriverIntoMemory(char const*, unsigned long)+0x1c5>
c000c010:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c017:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c01a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c01e:	52                   	push   edx
c000c01f:	31 d2                	xor    edx,edx
c000c021:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c024:	52                   	push   edx
c000c025:	50                   	push   eax
c000c026:	55                   	push   ebp
c000c027:	e8 be 68 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000c02c:	83 c4 10             	add    esp,0x10
c000c02f:	85 c0                	test   eax,eax
c000c031:	74 07                	je     c000c03a <loadDriverIntoMemory(char const*, unsigned long)+0x177>
c000c033:	31 c0                	xor    eax,eax
c000c035:	e9 86 05 00 00       	jmp    c000c5c0 <loadDriverIntoMemory(char const*, unsigned long)+0x6fd>
c000c03a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c000c041:	31 d2                	xor    edx,edx
c000c043:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000c047:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c04a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c04e:	83 ec 0c             	sub    esp,0xc
c000c051:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c055:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c05c:	50                   	push   eax
c000c05d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c065:	52                   	push   edx
c000c066:	50                   	push   eax
c000c067:	55                   	push   ebp
c000c068:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c06b:	83 c4 1c             	add    esp,0x1c
c000c06e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c071:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c074:	50                   	push   eax
c000c075:	6a 00                	push   0x0
c000c077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c07b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000c07f:	50                   	push   eax
c000c080:	e8 3b 46 ff ff       	call   c00006c0 <memset>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	46                   	inc    esi
c000c089:	e9 69 ff ff ff       	jmp    c000bff7 <loadDriverIntoMemory(char const*, unsigned long)+0x134>
c000c08e:	31 db                	xor    ebx,ebx
c000c090:	50                   	push   eax
c000c091:	68 00 01 00 00       	push   0x100
c000c096:	6a 00                	push   0x0
c000c098:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c09c:	50                   	push   eax
c000c09d:	e8 1e 46 ff ff       	call   c00006c0 <memset>
c000c0a2:	83 c4 0c             	add    esp,0xc
c000c0a5:	68 00 01 00 00       	push   0x100
c000c0aa:	6a 00                	push   0x0
c000c0ac:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c0b3:	50                   	push   eax
c000c0b4:	e8 07 46 ff ff       	call   c00006c0 <memset>
c000c0b9:	83 c4 10             	add    esp,0x10
c000c0bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c0cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c0d4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c0dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c0e4:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c000c0e8:	0f 86 30 01 00 00    	jbe    c000c21e <loadDriverIntoMemory(char const*, unsigned long)+0x35b>
c000c0ee:	0f b7 f3             	movzx  esi,bx
c000c0f1:	6b f6 28             	imul   esi,esi,0x28
c000c0f4:	03 74 24 24          	add    esi,DWORD PTR [esp+0x24]
c000c0f8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000c0fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0ff:	50                   	push   eax
c000c100:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c104:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c000c108:	8b 06                	mov    eax,DWORD PTR [esi]
c000c10a:	6b d2 28             	imul   edx,edx,0x28
c000c10d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000c111:	31 d2                	xor    edx,edx
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	55                   	push   ebp
c000c116:	e8 cf 67 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000c11b:	83 c4 0c             	add    esp,0xc
c000c11e:	6a 20                	push   0x20
c000c120:	6a 00                	push   0x0
c000c122:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000c129:	51                   	push   ecx
c000c12a:	e8 91 45 ff ff       	call   c00006c0 <memset>
c000c12f:	58                   	pop    eax
c000c130:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c133:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c137:	52                   	push   edx
c000c138:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c000c13f:	51                   	push   ecx
c000c140:	6a 00                	push   0x0
c000c142:	6a 1f                	push   0x1f
c000c144:	55                   	push   ebp
c000c145:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c148:	83 c4 1c             	add    esp,0x1c
c000c14b:	6a 09                	push   0x9
c000c14d:	68 d2 88 03 c0       	push   0xc00388d2
c000c152:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000c159:	51                   	push   ecx
c000c15a:	e8 11 44 ff ff       	call   c0000570 <memcmp>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	75 21                	jne    c000c187 <loadDriverIntoMemory(char const*, unsigned long)+0x2c4>
c000c166:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c16a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c16e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000c172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c176:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c179:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000c180:	89 d0                	mov    eax,edx
c000c182:	40                   	inc    eax
c000c183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c187:	50                   	push   eax
c000c188:	6a 09                	push   0x9
c000c18a:	68 dc 88 03 c0       	push   0xc00388dc
c000c18f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c196:	50                   	push   eax
c000c197:	e8 d4 43 ff ff       	call   c0000570 <memcmp>
c000c19c:	83 c4 10             	add    esp,0x10
c000c19f:	85 c0                	test   eax,eax
c000c1a1:	75 21                	jne    c000c1c4 <loadDriverIntoMemory(char const*, unsigned long)+0x301>
c000c1a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ab:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000c1af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c1b6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000c1bd:	89 d0                	mov    eax,edx
c000c1bf:	40                   	inc    eax
c000c1c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1c4:	50                   	push   eax
c000c1c5:	50                   	push   eax
c000c1c6:	68 a8 88 03 c0       	push   0xc00388a8
c000c1cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c1d2:	50                   	push   eax
c000c1d3:	e8 30 46 ff ff       	call   c0000808 <strcmp>
c000c1d8:	83 c4 10             	add    esp,0x10
c000c1db:	85 c0                	test   eax,eax
c000c1dd:	75 0f                	jne    c000c1ee <loadDriverIntoMemory(char const*, unsigned long)+0x32b>
c000c1df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c1e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	50                   	push   eax
c000c1ef:	50                   	push   eax
c000c1f0:	68 b0 88 03 c0       	push   0xc00388b0
c000c1f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c1fc:	50                   	push   eax
c000c1fd:	e8 06 46 ff ff       	call   c0000808 <strcmp>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	85 c0                	test   eax,eax
c000c207:	75 0f                	jne    c000c218 <loadDriverIntoMemory(char const*, unsigned long)+0x355>
c000c209:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c20c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c214:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c218:	43                   	inc    ebx
c000c219:	e9 c6 fe ff ff       	jmp    c000c0e4 <loadDriverIntoMemory(char const*, unsigned long)+0x221>
c000c21e:	31 d2                	xor    edx,edx
c000c220:	51                   	push   ecx
c000c221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c225:	52                   	push   edx
c000c226:	50                   	push   eax
c000c227:	55                   	push   ebp
c000c228:	e8 bd 66 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000c22d:	5b                   	pop    ebx
c000c22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c232:	e8 ae 11 00 00       	call   c000d3e5 <malloc>
c000c237:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c23a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c23e:	31 d2                	xor    edx,edx
c000c240:	5e                   	pop    esi
c000c241:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c245:	53                   	push   ebx
c000c246:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c24a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c24e:	52                   	push   edx
c000c24f:	50                   	push   eax
c000c250:	55                   	push   ebp
c000c251:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c254:	83 c4 14             	add    esp,0x14
c000c257:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c25b:	e8 85 11 00 00       	call   c000d3e5 <malloc>
c000c260:	31 d2                	xor    edx,edx
c000c262:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c266:	83 c4 0c             	add    esp,0xc
c000c269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26d:	52                   	push   edx
c000c26e:	50                   	push   eax
c000c26f:	55                   	push   ebp
c000c270:	e8 75 66 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000c275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c278:	31 d2                	xor    edx,edx
c000c27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c27e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c281:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c285:	52                   	push   edx
c000c286:	50                   	push   eax
c000c287:	55                   	push   ebp
c000c288:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c28b:	83 c4 20             	add    esp,0x20
c000c28e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c296:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c29a:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c29e:	0f 84 f2 02 00 00    	je     c000c596 <loadDriverIntoMemory(char const*, unsigned long)+0x6d3>
c000c2a4:	8b 84 8c 50 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x150]
c000c2ab:	31 d2                	xor    edx,edx
c000c2ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2b1:	c1 e8 03             	shr    eax,0x3
c000c2b4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c2b8:	50                   	push   eax
c000c2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2bd:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c000c2c1:	52                   	push   edx
c000c2c2:	50                   	push   eax
c000c2c3:	55                   	push   ebp
c000c2c4:	e8 21 66 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000c2c9:	58                   	pop    eax
c000c2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ce:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c000c2d5:	e8 0b 11 00 00       	call   c000d3e5 <malloc>
c000c2da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c2dd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e1:	5a                   	pop    edx
c000c2e2:	31 d2                	xor    edx,edx
c000c2e4:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c2e8:	50                   	push   eax
c000c2e9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c2ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c2f1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c000c2f8:	52                   	push   edx
c000c2f9:	50                   	push   eax
c000c2fa:	55                   	push   ebp
c000c2fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c2fe:	83 c4 20             	add    esp,0x20
c000c301:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c309:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c30d:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
c000c311:	0f 8d 67 02 00 00    	jge    c000c57e <loadDriverIntoMemory(char const*, unsigned long)+0x6bb>
c000c317:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c31b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c31f:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000c324:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000c327:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c32b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c32f:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c000c333:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c337:	c1 e8 08             	shr    eax,0x8
c000c33a:	89 c6                	mov    esi,eax
c000c33c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c340:	c1 e6 04             	shl    esi,0x4
c000c343:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c000c347:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c34a:	85 db                	test   ebx,ebx
c000c34c:	0f 85 15 01 00 00    	jne    c000c467 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c352:	83 ec 0c             	sub    esp,0xc
c000c355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c359:	03 06                	add    eax,DWORD PTR [esi]
c000c35b:	50                   	push   eax
c000c35c:	e8 52 f8 ff ff       	call   c000bbb3 <getAddressOfKernelSymbol(char const*)>
c000c361:	83 c4 10             	add    esp,0x10
c000c364:	89 c3                	mov    ebx,eax
c000c366:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c36b:	85 c0                	test   eax,eax
c000c36d:	0f 85 f4 00 00 00    	jne    c000c467 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c373:	50                   	push   eax
c000c374:	50                   	push   eax
c000c375:	68 e6 88 03 c0       	push   0xc00388e6
c000c37a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c37e:	03 06                	add    eax,DWORD PTR [esi]
c000c380:	50                   	push   eax
c000c381:	e8 82 44 ff ff       	call   c0000808 <strcmp>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	85 c0                	test   eax,eax
c000c38b:	75 0a                	jne    c000c397 <loadDriverIntoMemory(char const*, unsigned long)+0x4d4>
c000c38d:	bb 3c e6 01 c0       	mov    ebx,0xc001e63c
c000c392:	e9 cb 00 00 00       	jmp    c000c462 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c397:	50                   	push   eax
c000c398:	50                   	push   eax
c000c399:	68 f0 88 03 c0       	push   0xc00388f0
c000c39e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3a2:	03 06                	add    eax,DWORD PTR [esi]
c000c3a4:	50                   	push   eax
c000c3a5:	e8 5e 44 ff ff       	call   c0000808 <strcmp>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	85 c0                	test   eax,eax
c000c3af:	75 0a                	jne    c000c3bb <loadDriverIntoMemory(char const*, unsigned long)+0x4f8>
c000c3b1:	bb 70 e3 01 c0       	mov    ebx,0xc001e370
c000c3b6:	e9 a7 00 00 00       	jmp    c000c462 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c3bb:	50                   	push   eax
c000c3bc:	50                   	push   eax
c000c3bd:	68 f9 88 03 c0       	push   0xc00388f9
c000c3c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3c6:	03 06                	add    eax,DWORD PTR [esi]
c000c3c8:	50                   	push   eax
c000c3c9:	e8 3a 44 ff ff       	call   c0000808 <strcmp>
c000c3ce:	83 c4 10             	add    esp,0x10
c000c3d1:	85 c0                	test   eax,eax
c000c3d3:	75 0a                	jne    c000c3df <loadDriverIntoMemory(char const*, unsigned long)+0x51c>
c000c3d5:	bb 3c e7 01 c0       	mov    ebx,0xc001e73c
c000c3da:	e9 83 00 00 00       	jmp    c000c462 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c3df:	50                   	push   eax
c000c3e0:	50                   	push   eax
c000c3e1:	68 03 89 03 c0       	push   0xc0038903
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	03 06                	add    eax,DWORD PTR [esi]
c000c3ec:	50                   	push   eax
c000c3ed:	e8 16 44 ff ff       	call   c0000808 <strcmp>
c000c3f2:	83 c4 10             	add    esp,0x10
c000c3f5:	85 c0                	test   eax,eax
c000c3f7:	74 64                	je     c000c45d <loadDriverIntoMemory(char const*, unsigned long)+0x59a>
c000c3f9:	50                   	push   eax
c000c3fa:	50                   	push   eax
c000c3fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3ff:	03 06                	add    eax,DWORD PTR [esi]
c000c401:	50                   	push   eax
c000c402:	68 0c 89 03 c0       	push   0xc003890c
c000c407:	e8 de 09 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000c40c:	58                   	pop    eax
c000c40d:	5a                   	pop    edx
c000c40e:	68 26 89 03 c0       	push   0xc0038926
c000c413:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c41a:	50                   	push   eax
c000c41b:	e8 5c 43 ff ff       	call   c000077c <strcpy>
c000c420:	59                   	pop    ecx
c000c421:	58                   	pop    eax
c000c422:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c426:	03 06                	add    eax,DWORD PTR [esi]
c000c428:	50                   	push   eax
c000c429:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c430:	50                   	push   eax
c000c431:	e8 86 44 ff ff       	call   c00008bc <strcat>
c000c436:	58                   	pop    eax
c000c437:	5a                   	pop    edx
c000c438:	68 bc 89 03 c0       	push   0xc00389bc
c000c43d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c444:	50                   	push   eax
c000c445:	e8 72 44 ff ff       	call   c00008bc <strcat>
c000c44a:	59                   	pop    ecx
c000c44b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c452:	50                   	push   eax
c000c453:	e8 b0 0a 00 00       	call   c000cf08 <panic(char const*)>
c000c458:	83 c4 10             	add    esp,0x10
c000c45b:	eb 0a                	jmp    c000c467 <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c45d:	bb bc e4 01 c0       	mov    ebx,0xc001e4bc
c000c462:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c467:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c46c:	75 7a                	jne    c000c4e8 <loadDriverIntoMemory(char const*, unsigned long)+0x625>
c000c46e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c000c475:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c000c479:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000c47d:	01 ce                	add    esi,ecx
c000c47f:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c487:	8b 06                	mov    eax,DWORD PTR [esi]
c000c489:	0f 94 c2             	sete   dl
c000c48c:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c494:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c000c499:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c000c49d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c4a2:	74 2b                	je     c000c4cf <loadDriverIntoMemory(char const*, unsigned long)+0x60c>
c000c4a4:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c000c4a7:	84 d2                	test   dl,dl
c000c4a9:	75 0a                	jne    c000c4b5 <loadDriverIntoMemory(char const*, unsigned long)+0x5f2>
c000c4ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c4af:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c4b3:	76 2c                	jbe    c000c4e1 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c4b5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c4b9:	83 ec 0c             	sub    esp,0xc
c000c4bc:	68 3d 89 03 c0       	push   0xc003893d
c000c4c1:	e8 42 0a 00 00       	call   c000cf08 <panic(char const*)>
c000c4c6:	83 c4 10             	add    esp,0x10
c000c4c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4cd:	eb 12                	jmp    c000c4e1 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c4cf:	01 c1                	add    ecx,eax
c000c4d1:	84 d2                	test   dl,dl
c000c4d3:	75 0c                	jne    c000c4e1 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c4d5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c4d9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c4dd:	77 02                	ja     c000c4e1 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c4df:	01 d9                	add    ecx,ebx
c000c4e1:	89 0e                	mov    DWORD PTR [esi],ecx
c000c4e3:	e9 8d 00 00 00       	jmp    c000c575 <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c4e8:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c4ed:	75 65                	jne    c000c554 <loadDriverIntoMemory(char const*, unsigned long)+0x691>
c000c4ef:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c000c4f6:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c000c4fa:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c4fe:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c506:	74 14                	je     c000c51c <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c508:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c510:	74 0a                	je     c000c51c <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c512:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c516:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c51a:	76 10                	jbe    c000c52c <loadDriverIntoMemory(char const*, unsigned long)+0x669>
c000c51c:	83 ec 0c             	sub    esp,0xc
c000c51f:	68 59 89 03 c0       	push   0xc0038959
c000c524:	e8 df 09 00 00       	call   c000cf08 <panic(char const*)>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	8b 16                	mov    edx,DWORD PTR [esi]
c000c52e:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c533:	74 13                	je     c000c548 <loadDriverIntoMemory(char const*, unsigned long)+0x685>
c000c535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c539:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c000c540:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c544:	01 d0                	add    eax,edx
c000c546:	eb 06                	jmp    c000c54e <loadDriverIntoMemory(char const*, unsigned long)+0x68b>
c000c548:	89 d0                	mov    eax,edx
c000c54a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c54e:	01 c3                	add    ebx,eax
c000c550:	89 1e                	mov    DWORD PTR [esi],ebx
c000c552:	eb 21                	jmp    c000c575 <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c554:	51                   	push   ecx
c000c555:	51                   	push   ecx
c000c556:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c55b:	50                   	push   eax
c000c55c:	68 75 89 03 c0       	push   0xc0038975
c000c561:	e8 84 08 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000c566:	c7 04 24 80 89 03 c0 	mov    DWORD PTR [esp],0xc0038980
c000c56d:	e8 96 09 00 00       	call   c000cf08 <panic(char const*)>
c000c572:	83 c4 10             	add    esp,0x10
c000c575:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c579:	e9 8b fd ff ff       	jmp    c000c309 <loadDriverIntoMemory(char const*, unsigned long)+0x446>
c000c57e:	83 ec 0c             	sub    esp,0xc
c000c581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c585:	e8 6b 0e 00 00       	call   c000d3f5 <free>
c000c58a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	e9 00 fd ff ff       	jmp    c000c296 <loadDriverIntoMemory(char const*, unsigned long)+0x3d3>
c000c596:	83 ec 0c             	sub    esp,0xc
c000c599:	55                   	push   ebp
c000c59a:	e8 eb 62 00 00       	call   c001288a <File::close()>
c000c59f:	58                   	pop    eax
c000c5a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c5a4:	e8 4c 0e 00 00       	call   c000d3f5 <free>
c000c5a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c5ac:	e8 44 0e 00 00       	call   c000d3f5 <free>
c000c5b1:	5a                   	pop    edx
c000c5b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5b6:	e8 3a 0e 00 00       	call   c000d3f5 <free>
c000c5bb:	83 c4 10             	add    esp,0x10
c000c5be:	b0 01                	mov    al,0x1
c000c5c0:	81 c4 5c 03 00 00    	add    esp,0x35c
c000c5c6:	5b                   	pop    ebx
c000c5c7:	5e                   	pop    esi
c000c5c8:	5f                   	pop    edi
c000c5c9:	5d                   	pop    ebp
c000c5ca:	c3                   	ret    

c000c5cb <loadDLL(char const*)>:
c000c5cb:	57                   	push   edi
c000c5cc:	56                   	push   esi
c000c5cd:	53                   	push   ebx
c000c5ce:	81 ec 18 01 00 00    	sub    esp,0x118
c000c5d4:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c5db:	53                   	push   ebx
c000c5dc:	68 98 89 03 c0       	push   0xc0038998
c000c5e1:	e8 04 08 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000c5e6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c5ed:	e8 a8 5d 00 00       	call   c001239a <operator new(unsigned long)>
c000c5f2:	83 c4 0c             	add    esp,0xc
c000c5f5:	89 c6                	mov    esi,eax
c000c5f7:	ff 35 7c bb 03 c0    	push   DWORD PTR ds:0xc003bb7c
c000c5fd:	53                   	push   ebx
c000c5fe:	50                   	push   eax
c000c5ff:	e8 c4 61 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000c604:	83 c4 0c             	add    esp,0xc
c000c607:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c60b:	50                   	push   eax
c000c60c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c610:	50                   	push   eax
c000c611:	56                   	push   esi
c000c612:	e8 c1 64 00 00       	call   c0012ad8 <File::stat(unsigned long long*, bool*)>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c61f:	75 0a                	jne    c000c62b <loadDLL(char const*)+0x60>
c000c621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c625:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c629:	75 32                	jne    c000c65d <loadDLL(char const*)+0x92>
c000c62b:	50                   	push   eax
c000c62c:	50                   	push   eax
c000c62d:	68 a9 89 03 c0       	push   0xc00389a9
c000c632:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c636:	57                   	push   edi
c000c637:	e8 40 41 ff ff       	call   c000077c <strcpy>
c000c63c:	58                   	pop    eax
c000c63d:	5a                   	pop    edx
c000c63e:	53                   	push   ebx
c000c63f:	57                   	push   edi
c000c640:	e8 77 42 ff ff       	call   c00008bc <strcat>
c000c645:	59                   	pop    ecx
c000c646:	58                   	pop    eax
c000c647:	68 bc 89 03 c0       	push   0xc00389bc
c000c64c:	57                   	push   edi
c000c64d:	e8 6a 42 ff ff       	call   c00008bc <strcat>
c000c652:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c655:	e8 ae 08 00 00       	call   c000cf08 <panic(char const*)>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	83 ec 0c             	sub    esp,0xc
c000c660:	8b 06                	mov    eax,DWORD PTR [esi]
c000c662:	56                   	push   esi
c000c663:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c666:	58                   	pop    eax
c000c667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c66b:	e8 75 0d 00 00       	call   c000d3e5 <malloc>
c000c670:	5a                   	pop    edx
c000c671:	89 c6                	mov    esi,eax
c000c673:	59                   	pop    ecx
c000c674:	50                   	push   eax
c000c675:	68 be 89 03 c0       	push   0xc00389be
c000c67a:	e8 6b 07 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000c67f:	5f                   	pop    edi
c000c680:	58                   	pop    eax
c000c681:	56                   	push   esi
c000c682:	53                   	push   ebx
c000c683:	e8 3b f8 ff ff       	call   c000bec3 <loadDriverIntoMemory(char const*, unsigned long)>
c000c688:	81 c4 20 01 00 00    	add    esp,0x120
c000c68e:	89 f0                	mov    eax,esi
c000c690:	5b                   	pop    ebx
c000c691:	5e                   	pop    esi
c000c692:	5f                   	pop    edi
c000c693:	c3                   	ret    

c000c694 <executeDLL(unsigned long, void*)>:
c000c694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c69c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c6a0:	ff e0                	jmp    eax

c000c6a2 <GDTEntry::setBase(unsigned int)>:
c000c6a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c6aa:	89 c1                	mov    ecx,eax
c000c6ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c6b0:	c1 e9 10             	shr    ecx,0x10
c000c6b3:	c1 e8 18             	shr    eax,0x18
c000c6b6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c6b9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c6bc:	c3                   	ret    
c000c6bd:	90                   	nop

c000c6be <GDTEntry::setLimit(unsigned int)>:
c000c6be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c6c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6c6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c6c9:	66 89 01             	mov    WORD PTR [ecx],ax
c000c6cc:	83 e2 f0             	and    edx,0xfffffff0
c000c6cf:	c1 e8 10             	shr    eax,0x10
c000c6d2:	83 e0 0f             	and    eax,0xf
c000c6d5:	09 d0                	or     eax,edx
c000c6d7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c6da:	c3                   	ret    
c000c6db:	90                   	nop

c000c6dc <GDT::GDT()>:
c000c6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6f0:	90                   	nop
c000c6f1:	c3                   	ret    

c000c6f2 <GDT::addEntry(GDTEntry)>:
c000c6f2:	53                   	push   ebx
c000c6f3:	83 ec 0c             	sub    esp,0xc
c000c6f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c6fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c703:	52                   	push   edx
c000c704:	50                   	push   eax
c000c705:	68 dd 89 03 c0       	push   0xc00389dd
c000c70a:	e8 db 06 00 00       	call   c000cdea <kprintf(char const*, ...)>
c000c70f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c711:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c715:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c719:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c71d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c721:	8d 50 01             	lea    edx,[eax+0x1]
c000c724:	c1 e0 03             	shl    eax,0x3
c000c727:	89 13                	mov    DWORD PTR [ebx],edx
c000c729:	83 c4 18             	add    esp,0x18
c000c72c:	5b                   	pop    ebx
c000c72d:	c3                   	ret    

c000c72e <GDT::getNumberOfEntries()>:
c000c72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c732:	8b 00                	mov    eax,DWORD PTR [eax]
c000c734:	c3                   	ret    
c000c735:	90                   	nop

c000c736 <GDT::flush()>:
c000c736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c73a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c73c:	83 c0 04             	add    eax,0x4
c000c73f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c746:	a3 c6 ba 03 c0       	mov    ds:0xc003bac6,eax
c000c74b:	66 89 15 c4 ba 03 c0 	mov    WORD PTR ds:0xc003bac4,dx
c000c752:	e9 dc 3b ff ff       	jmp    c0000333 <loadGDT>
c000c757:	90                   	nop

c000c758 <GDT::setup()>:
c000c758:	55                   	push   ebp
c000c759:	57                   	push   edi
c000c75a:	56                   	push   esi
c000c75b:	53                   	push   ebx
c000c75c:	83 ec 3c             	sub    esp,0x3c
c000c75f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c763:	6a 00                	push   0x0
c000c765:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c769:	53                   	push   ebx
c000c76a:	e8 33 ff ff ff       	call   c000c6a2 <GDTEntry::setBase(unsigned int)>
c000c76f:	6a 00                	push   0x0
c000c771:	53                   	push   ebx
c000c772:	e8 47 ff ff ff       	call   c000c6be <GDTEntry::setLimit(unsigned int)>
c000c777:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c77f:	6a 00                	push   0x0
c000c781:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c785:	53                   	push   ebx
c000c786:	e8 17 ff ff ff       	call   c000c6a2 <GDTEntry::setBase(unsigned int)>
c000c78b:	68 ff ff ff 00       	push   0xffffff
c000c790:	53                   	push   ebx
c000c791:	e8 28 ff ff ff       	call   c000c6be <GDTEntry::setLimit(unsigned int)>
c000c796:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c79a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c79f:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c7a4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c7a8:	83 c4 20             	add    esp,0x20
c000c7ab:	6a 00                	push   0x0
c000c7ad:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c7b1:	53                   	push   ebx
c000c7b2:	e8 eb fe ff ff       	call   c000c6a2 <GDTEntry::setBase(unsigned int)>
c000c7b7:	68 ff ff ff 00       	push   0xffffff
c000c7bc:	53                   	push   ebx
c000c7bd:	e8 fc fe ff ff       	call   c000c6be <GDTEntry::setLimit(unsigned int)>
c000c7c2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c7c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c7ca:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c7ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c7d2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c7d6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c7db:	0d 00 92 c0 00       	or     eax,0xc09200
c000c7e0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c7e4:	89 d8                	mov    eax,ebx
c000c7e6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c7ea:	80 cc 60             	or     ah,0x60
c000c7ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c7f1:	83 c4 0c             	add    esp,0xc
c000c7f4:	89 f8                	mov    eax,edi
c000c7f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7fa:	80 cc 60             	or     ah,0x60
c000c7fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c801:	89 c7                	mov    edi,eax
c000c803:	55                   	push   ebp
c000c804:	e8 e9 fe ff ff       	call   c000c6f2 <GDT::addEntry(GDTEntry)>
c000c809:	83 c4 0c             	add    esp,0xc
c000c80c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c810:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c814:	55                   	push   ebp
c000c815:	e8 d8 fe ff ff       	call   c000c6f2 <GDT::addEntry(GDTEntry)>
c000c81a:	83 c4 0c             	add    esp,0xc
c000c81d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c821:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c825:	55                   	push   ebp
c000c826:	e8 c7 fe ff ff       	call   c000c6f2 <GDT::addEntry(GDTEntry)>
c000c82b:	83 c4 0c             	add    esp,0xc
c000c82e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c832:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c836:	53                   	push   ebx
c000c837:	51                   	push   ecx
c000c838:	55                   	push   ebp
c000c839:	e8 b4 fe ff ff       	call   c000c6f2 <GDT::addEntry(GDTEntry)>
c000c83e:	83 c4 0c             	add    esp,0xc
c000c841:	57                   	push   edi
c000c842:	56                   	push   esi
c000c843:	55                   	push   ebp
c000c844:	e8 a9 fe ff ff       	call   c000c6f2 <GDT::addEntry(GDTEntry)>
c000c849:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c84c:	e8 e5 fe ff ff       	call   c000c736 <GDT::flush()>
c000c851:	83 c4 4c             	add    esp,0x4c
c000c854:	5b                   	pop    ebx
c000c855:	5e                   	pop    esi
c000c856:	5f                   	pop    edi
c000c857:	5d                   	pop    ebp
c000c858:	c3                   	ret    

c000c859 <idleFunction(void*)>:
c000c859:	53                   	push   ebx
c000c85a:	83 ec 08             	sub    esp,0x8
c000c85d:	e8 2c 1a 00 00       	call   c000e28e <unlockScheduler()>
c000c862:	e8 69 a8 00 00       	call   c00170d0 <thisCPU()>
c000c867:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c86e:	74 41                	je     c000c8b1 <idleFunction(void*)+0x58>
c000c870:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c000c875:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c87c:	74 33                	je     c000c8b1 <idleFunction(void*)+0x58>
c000c87e:	31 db                	xor    ebx,ebx
c000c880:	52                   	push   edx
c000c881:	52                   	push   edx
c000c882:	68 e1 00 00 00       	push   0xe1
c000c887:	50                   	push   eax
c000c888:	e8 59 ec ff ff       	call   c000b4e6 <Computer::rdmsr(unsigned int)>
c000c88d:	53                   	push   ebx
c000c88e:	83 e0 02             	and    eax,0x2
c000c891:	50                   	push   eax
c000c892:	68 e1 00 00 00       	push   0xe1
c000c897:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c000c89d:	e8 70 ec ff ff       	call   c000b512 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c8a2:	83 c4 20             	add    esp,0x20
c000c8a5:	e8 a6 38 ff ff       	call   c0000150 <doTPAUSE>
c000c8aa:	e8 51 20 01 00       	call   c001e900 <idleCommon()>
c000c8af:	eb f4                	jmp    c000c8a5 <idleFunction(void*)+0x4c>
c000c8b1:	fb                   	sti    
c000c8b2:	f4                   	hlt    
c000c8b3:	e8 48 20 01 00       	call   c001e900 <idleCommon()>
c000c8b8:	eb f7                	jmp    c000c8b1 <idleFunction(void*)+0x58>

c000c8ba <IDTEntry::IDTEntry(bool)>:
c000c8ba:	83 ec 04             	sub    esp,0x4
c000c8bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8c1:	88 04 24             	mov    BYTE PTR [esp],al
c000c8c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8c8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8d2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c8d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8da:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c8dd:	83 e2 f0             	and    edx,0xfffffff0
c000c8e0:	83 ca 0e             	or     edx,0xe
c000c8e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c8e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c8ed:	83 e2 ef             	and    edx,0xffffffef
c000c8f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c8f3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c8f7:	74 04                	je     c000c8fd <IDTEntry::IDTEntry(bool)+0x43>
c000c8f9:	b2 03                	mov    dl,0x3
c000c8fb:	eb 02                	jmp    c000c8ff <IDTEntry::IDTEntry(bool)+0x45>
c000c8fd:	b2 00                	mov    dl,0x0
c000c8ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c903:	83 e2 03             	and    edx,0x3
c000c906:	88 d1                	mov    cl,dl
c000c908:	c1 e1 05             	shl    ecx,0x5
c000c90b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c90e:	83 e2 9f             	and    edx,0xffffff9f
c000c911:	09 ca                	or     edx,ecx
c000c913:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c91a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c91d:	83 ca 80             	or     edx,0xffffff80
c000c920:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c923:	90                   	nop
c000c924:	83 c4 04             	add    esp,0x4
c000c927:	c3                   	ret    

c000c928 <IDTEntry::setOffset(unsigned int)>:
c000c928:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c92c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c930:	66 89 02             	mov    WORD PTR [edx],ax
c000c933:	c1 e8 10             	shr    eax,0x10
c000c936:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c93a:	c3                   	ret    
c000c93b:	90                   	nop

c000c93c <IDT::IDT()>:
c000c93c:	90                   	nop
c000c93d:	c3                   	ret    

c000c93e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c942:	83 c0 30             	add    eax,0x30
c000c945:	c3                   	ret    

c000c946 <IDT::addEntry(IDTEntry, int)>:
c000c946:	53                   	push   ebx
c000c947:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c94b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c94f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c953:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c957:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000c95a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000c95e:	5b                   	pop    ebx
c000c95f:	c3                   	ret    

c000c960 <IDT::addEntry(int, void (*)(), bool)>:
c000c960:	53                   	push   ebx
c000c961:	83 ec 10             	sub    esp,0x10
c000c964:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c969:	50                   	push   eax
c000c96a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c96e:	53                   	push   ebx
c000c96f:	e8 46 ff ff ff       	call   c000c8ba <IDTEntry::IDTEntry(bool)>
c000c974:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c978:	53                   	push   ebx
c000c979:	e8 aa ff ff ff       	call   c000c928 <IDTEntry::setOffset(unsigned int)>
c000c97e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c982:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c986:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c98a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c98e:	e8 b3 ff ff ff       	call   c000c946 <IDT::addEntry(IDTEntry, int)>
c000c993:	83 c4 30             	add    esp,0x30
c000c996:	5b                   	pop    ebx
c000c997:	c3                   	ret    

c000c998 <IDT::flush()>:
c000c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c99c:	66 c7 05 cc ba 03 c0 ff 07 	mov    WORD PTR ds:0xc003bacc,0x7ff
c000c9a5:	a3 ce ba 03 c0       	mov    ds:0xc003bace,eax
c000c9aa:	0f 01 1d cc ba 03 c0 	lidtd  ds:0xc003bacc
c000c9b1:	c3                   	ret    

c000c9b2 <IDT::setup()>:
c000c9b2:	57                   	push   edi
c000c9b3:	56                   	push   esi
c000c9b4:	53                   	push   ebx
c000c9b5:	83 ec 10             	sub    esp,0x10
c000c9b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c9bc:	6a 00                	push   0x0
c000c9be:	68 53 03 00 c0       	push   0xc0000353
c000c9c3:	6a 00                	push   0x0
c000c9c5:	53                   	push   ebx
c000c9c6:	e8 95 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000c9cb:	6a 00                	push   0x0
c000c9cd:	68 63 03 00 c0       	push   0xc0000363
c000c9d2:	6a 01                	push   0x1
c000c9d4:	53                   	push   ebx
c000c9d5:	e8 86 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000c9da:	83 c4 20             	add    esp,0x20
c000c9dd:	6a 00                	push   0x0
c000c9df:	68 6d 03 00 c0       	push   0xc000036d
c000c9e4:	6a 02                	push   0x2
c000c9e6:	53                   	push   ebx
c000c9e7:	e8 74 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000c9ec:	6a 00                	push   0x0
c000c9ee:	68 77 03 00 c0       	push   0xc0000377
c000c9f3:	6a 03                	push   0x3
c000c9f5:	53                   	push   ebx
c000c9f6:	e8 65 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000c9fb:	83 c4 20             	add    esp,0x20
c000c9fe:	6a 00                	push   0x0
c000ca00:	68 81 03 00 c0       	push   0xc0000381
c000ca05:	6a 04                	push   0x4
c000ca07:	53                   	push   ebx
c000ca08:	e8 53 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca0d:	6a 00                	push   0x0
c000ca0f:	68 8b 03 00 c0       	push   0xc000038b
c000ca14:	6a 05                	push   0x5
c000ca16:	53                   	push   ebx
c000ca17:	e8 44 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca1c:	83 c4 20             	add    esp,0x20
c000ca1f:	6a 00                	push   0x0
c000ca21:	68 95 03 00 c0       	push   0xc0000395
c000ca26:	6a 06                	push   0x6
c000ca28:	53                   	push   ebx
c000ca29:	e8 32 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca2e:	6a 00                	push   0x0
c000ca30:	68 9f 03 00 c0       	push   0xc000039f
c000ca35:	6a 07                	push   0x7
c000ca37:	53                   	push   ebx
c000ca38:	e8 23 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca3d:	83 c4 20             	add    esp,0x20
c000ca40:	6a 00                	push   0x0
c000ca42:	68 a9 03 00 c0       	push   0xc00003a9
c000ca47:	6a 08                	push   0x8
c000ca49:	53                   	push   ebx
c000ca4a:	e8 11 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca4f:	6a 00                	push   0x0
c000ca51:	68 b1 03 00 c0       	push   0xc00003b1
c000ca56:	6a 09                	push   0x9
c000ca58:	53                   	push   ebx
c000ca59:	e8 02 ff ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca5e:	83 c4 20             	add    esp,0x20
c000ca61:	6a 00                	push   0x0
c000ca63:	68 bb 03 00 c0       	push   0xc00003bb
c000ca68:	6a 0a                	push   0xa
c000ca6a:	53                   	push   ebx
c000ca6b:	e8 f0 fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca70:	6a 00                	push   0x0
c000ca72:	68 c3 03 00 c0       	push   0xc00003c3
c000ca77:	6a 0b                	push   0xb
c000ca79:	53                   	push   ebx
c000ca7a:	e8 e1 fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca7f:	83 c4 20             	add    esp,0x20
c000ca82:	6a 00                	push   0x0
c000ca84:	68 cb 03 00 c0       	push   0xc00003cb
c000ca89:	6a 0c                	push   0xc
c000ca8b:	53                   	push   ebx
c000ca8c:	e8 cf fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000ca91:	6a 00                	push   0x0
c000ca93:	68 d3 03 00 c0       	push   0xc00003d3
c000ca98:	6a 0d                	push   0xd
c000ca9a:	53                   	push   ebx
c000ca9b:	e8 c0 fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000caa0:	83 c4 20             	add    esp,0x20
c000caa3:	6a 00                	push   0x0
c000caa5:	68 db 03 00 c0       	push   0xc00003db
c000caaa:	6a 0e                	push   0xe
c000caac:	53                   	push   ebx
c000caad:	e8 ae fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cab2:	6a 00                	push   0x0
c000cab4:	68 e3 03 00 c0       	push   0xc00003e3
c000cab9:	6a 0f                	push   0xf
c000cabb:	53                   	push   ebx
c000cabc:	e8 9f fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cac1:	83 c4 20             	add    esp,0x20
c000cac4:	6a 00                	push   0x0
c000cac6:	68 ed 03 00 c0       	push   0xc00003ed
c000cacb:	6a 10                	push   0x10
c000cacd:	53                   	push   ebx
c000cace:	e8 8d fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cad3:	6a 00                	push   0x0
c000cad5:	68 f7 03 00 c0       	push   0xc00003f7
c000cada:	6a 11                	push   0x11
c000cadc:	53                   	push   ebx
c000cadd:	e8 7e fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cae2:	83 c4 20             	add    esp,0x20
c000cae5:	6a 00                	push   0x0
c000cae7:	68 01 04 00 c0       	push   0xc0000401
c000caec:	6a 12                	push   0x12
c000caee:	53                   	push   ebx
c000caef:	e8 6c fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000caf4:	6a 01                	push   0x1
c000caf6:	68 0b 04 00 c0       	push   0xc000040b
c000cafb:	6a 60                	push   0x60
c000cafd:	53                   	push   ebx
c000cafe:	e8 5d fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb03:	83 c4 20             	add    esp,0x20
c000cb06:	6a 00                	push   0x0
c000cb08:	68 15 04 00 c0       	push   0xc0000415
c000cb0d:	6a 20                	push   0x20
c000cb0f:	53                   	push   ebx
c000cb10:	e8 4b fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb15:	6a 00                	push   0x0
c000cb17:	68 1f 04 00 c0       	push   0xc000041f
c000cb1c:	6a 21                	push   0x21
c000cb1e:	53                   	push   ebx
c000cb1f:	e8 3c fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb24:	83 c4 20             	add    esp,0x20
c000cb27:	6a 00                	push   0x0
c000cb29:	68 29 04 00 c0       	push   0xc0000429
c000cb2e:	6a 22                	push   0x22
c000cb30:	53                   	push   ebx
c000cb31:	e8 2a fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb36:	6a 00                	push   0x0
c000cb38:	68 33 04 00 c0       	push   0xc0000433
c000cb3d:	6a 23                	push   0x23
c000cb3f:	53                   	push   ebx
c000cb40:	e8 1b fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb45:	83 c4 20             	add    esp,0x20
c000cb48:	6a 00                	push   0x0
c000cb4a:	68 3d 04 00 c0       	push   0xc000043d
c000cb4f:	6a 24                	push   0x24
c000cb51:	53                   	push   ebx
c000cb52:	e8 09 fe ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb57:	6a 00                	push   0x0
c000cb59:	68 47 04 00 c0       	push   0xc0000447
c000cb5e:	6a 25                	push   0x25
c000cb60:	53                   	push   ebx
c000cb61:	e8 fa fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb66:	83 c4 20             	add    esp,0x20
c000cb69:	6a 00                	push   0x0
c000cb6b:	68 51 04 00 c0       	push   0xc0000451
c000cb70:	6a 26                	push   0x26
c000cb72:	53                   	push   ebx
c000cb73:	e8 e8 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb78:	6a 00                	push   0x0
c000cb7a:	68 5b 04 00 c0       	push   0xc000045b
c000cb7f:	6a 27                	push   0x27
c000cb81:	53                   	push   ebx
c000cb82:	e8 d9 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb87:	83 c4 20             	add    esp,0x20
c000cb8a:	6a 00                	push   0x0
c000cb8c:	68 65 04 00 c0       	push   0xc0000465
c000cb91:	6a 28                	push   0x28
c000cb93:	53                   	push   ebx
c000cb94:	e8 c7 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cb99:	6a 00                	push   0x0
c000cb9b:	68 6f 04 00 c0       	push   0xc000046f
c000cba0:	6a 29                	push   0x29
c000cba2:	53                   	push   ebx
c000cba3:	e8 b8 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cba8:	83 c4 20             	add    esp,0x20
c000cbab:	6a 00                	push   0x0
c000cbad:	68 79 04 00 c0       	push   0xc0000479
c000cbb2:	6a 2a                	push   0x2a
c000cbb4:	53                   	push   ebx
c000cbb5:	e8 a6 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cbba:	6a 00                	push   0x0
c000cbbc:	68 83 04 00 c0       	push   0xc0000483
c000cbc1:	6a 2b                	push   0x2b
c000cbc3:	53                   	push   ebx
c000cbc4:	e8 97 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cbc9:	83 c4 20             	add    esp,0x20
c000cbcc:	6a 00                	push   0x0
c000cbce:	68 8d 04 00 c0       	push   0xc000048d
c000cbd3:	6a 2c                	push   0x2c
c000cbd5:	53                   	push   ebx
c000cbd6:	e8 85 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cbdb:	6a 00                	push   0x0
c000cbdd:	68 97 04 00 c0       	push   0xc0000497
c000cbe2:	6a 2d                	push   0x2d
c000cbe4:	53                   	push   ebx
c000cbe5:	e8 76 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cbea:	83 c4 20             	add    esp,0x20
c000cbed:	6a 00                	push   0x0
c000cbef:	68 a1 04 00 c0       	push   0xc00004a1
c000cbf4:	6a 2e                	push   0x2e
c000cbf6:	53                   	push   ebx
c000cbf7:	e8 64 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cbfc:	6a 00                	push   0x0
c000cbfe:	68 ab 04 00 c0       	push   0xc00004ab
c000cc03:	6a 2f                	push   0x2f
c000cc05:	53                   	push   ebx
c000cc06:	e8 55 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc0b:	83 c4 20             	add    esp,0x20
c000cc0e:	6a 00                	push   0x0
c000cc10:	68 b5 04 00 c0       	push   0xc00004b5
c000cc15:	6a 30                	push   0x30
c000cc17:	53                   	push   ebx
c000cc18:	e8 43 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc1d:	6a 00                	push   0x0
c000cc1f:	68 bf 04 00 c0       	push   0xc00004bf
c000cc24:	6a 31                	push   0x31
c000cc26:	53                   	push   ebx
c000cc27:	e8 34 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc2c:	83 c4 20             	add    esp,0x20
c000cc2f:	6a 00                	push   0x0
c000cc31:	68 c9 04 00 c0       	push   0xc00004c9
c000cc36:	6a 32                	push   0x32
c000cc38:	53                   	push   ebx
c000cc39:	e8 22 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc3e:	6a 00                	push   0x0
c000cc40:	68 d3 04 00 c0       	push   0xc00004d3
c000cc45:	6a 33                	push   0x33
c000cc47:	53                   	push   ebx
c000cc48:	e8 13 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc4d:	83 c4 20             	add    esp,0x20
c000cc50:	6a 00                	push   0x0
c000cc52:	68 dd 04 00 c0       	push   0xc00004dd
c000cc57:	6a 34                	push   0x34
c000cc59:	53                   	push   ebx
c000cc5a:	e8 01 fd ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc5f:	6a 00                	push   0x0
c000cc61:	68 e7 04 00 c0       	push   0xc00004e7
c000cc66:	6a 35                	push   0x35
c000cc68:	53                   	push   ebx
c000cc69:	e8 f2 fc ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc6e:	83 c4 20             	add    esp,0x20
c000cc71:	6a 00                	push   0x0
c000cc73:	68 f1 04 00 c0       	push   0xc00004f1
c000cc78:	6a 36                	push   0x36
c000cc7a:	53                   	push   ebx
c000cc7b:	e8 e0 fc ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc80:	6a 00                	push   0x0
c000cc82:	68 fb 04 00 c0       	push   0xc00004fb
c000cc87:	6a 37                	push   0x37
c000cc89:	53                   	push   ebx
c000cc8a:	e8 d1 fc ff ff       	call   c000c960 <IDT::addEntry(int, void (*)(), bool)>
c000cc8f:	83 c4 20             	add    esp,0x20
c000cc92:	e8 02 47 00 00       	call   c0011399 <Virt::getAKernelVAS()>
c000cc97:	52                   	push   edx
c000cc98:	6a 03                	push   0x3
c000cc9a:	6a 02                	push   0x2
c000cc9c:	50                   	push   eax
c000cc9d:	e8 9e 4c 00 00       	call   c0011940 <VAS::allocatePages(int, int)>
c000cca2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cca9:	89 c6                	mov    esi,eax
c000ccab:	e8 ea 56 00 00       	call   c001239a <operator new(unsigned long)>
c000ccb0:	81 c6 00 20 00 00    	add    esi,0x2000
c000ccb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000ccb9:	89 c7                	mov    edi,eax
c000ccbb:	e8 30 40 00 00       	call   c0010cf0 <TSS::TSS()>
c000ccc0:	83 c4 0c             	add    esp,0xc
c000ccc3:	68 a9 03 00 c0       	push   0xc00003a9
c000ccc8:	56                   	push   esi
c000ccc9:	57                   	push   edi
c000ccca:	e8 61 40 00 00       	call   c0010d30 <TSS::setup(unsigned long, unsigned long)>
c000cccf:	59                   	pop    ecx
c000ccd0:	89 c6                	mov    esi,eax
c000ccd2:	5f                   	pop    edi
c000ccd3:	6a 00                	push   0x0
c000ccd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ccd9:	50                   	push   eax
c000ccda:	e8 db fb ff ff       	call   c000c8ba <IDTEntry::IDTEntry(bool)>
c000ccdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cce8:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ccef:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ccf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccf9:	80 ce 05             	or     dh,0x5
c000ccfc:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ccff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd07:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cd0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd0d:	e8 86 fc ff ff       	call   c000c998 <IDT::flush()>
c000cd12:	83 c4 20             	add    esp,0x20
c000cd15:	5b                   	pop    ebx
c000cd16:	5e                   	pop    esi
c000cd17:	5f                   	pop    edi
c000cd18:	c3                   	ret    

c000cd19 <stringifyxWithBase(unsigned int, char*, int)>:
c000cd19:	57                   	push   edi
c000cd1a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cd1f:	56                   	push   esi
c000cd20:	be fc 89 03 c0       	mov    esi,0xc00389fc
c000cd25:	53                   	push   ebx
c000cd26:	83 ec 40             	sub    esp,0x40
c000cd29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cd2d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cd31:	fc                   	cld    
c000cd32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cd34:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000cd38:	83 f9 3e             	cmp    ecx,0x3e
c000cd3b:	7e 05                	jle    c000cd42 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000cd3d:	b9 3e 00 00 00       	mov    ecx,0x3e
c000cd42:	89 df                	mov    edi,ebx
c000cd44:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cd48:	eb 02                	jmp    c000cd4c <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cd4a:	89 c7                	mov    edi,eax
c000cd4c:	31 d2                	xor    edx,edx
c000cd4e:	46                   	inc    esi
c000cd4f:	89 f8                	mov    eax,edi
c000cd51:	f7 f1                	div    ecx
c000cd53:	39 cf                	cmp    edi,ecx
c000cd55:	73 f3                	jae    c000cd4a <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000cd57:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd5a:	eb 02                	jmp    c000cd5e <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000cd5c:	89 c3                	mov    ebx,eax
c000cd5e:	31 d2                	xor    edx,edx
c000cd60:	4e                   	dec    esi
c000cd61:	89 d8                	mov    eax,ebx
c000cd63:	f7 f1                	div    ecx
c000cd65:	39 cb                	cmp    ebx,ecx
c000cd67:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000cd6b:	88 16                	mov    BYTE PTR [esi],dl
c000cd6d:	73 ed                	jae    c000cd5c <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000cd6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cd73:	83 c4 40             	add    esp,0x40
c000cd76:	5b                   	pop    ebx
c000cd77:	5e                   	pop    esi
c000cd78:	5f                   	pop    edi
c000cd79:	c3                   	ret    

c000cd7a <logc(char)>:
c000cd7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd7e:	ba fd 03 00 00       	mov    edx,0x3fd
c000cd83:	ec                   	in     al,dx
c000cd84:	a8 20                	test   al,0x20
c000cd86:	74 fb                	je     c000cd83 <logc(char)+0x9>
c000cd88:	ba f8 03 00 00       	mov    edx,0x3f8
c000cd8d:	88 c8                	mov    al,cl
c000cd8f:	ee                   	out    dx,al
c000cd90:	c3                   	ret    

c000cd91 <logs(char*)>:
c000cd91:	53                   	push   ebx
c000cd92:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cd96:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cd99:	84 c0                	test   al,al
c000cd9b:	74 0f                	je     c000cdac <logs(char*)+0x1b>
c000cd9d:	50                   	push   eax
c000cd9e:	43                   	inc    ebx
c000cd9f:	e8 d6 ff ff ff       	call   c000cd7a <logc(char)>
c000cda4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cda7:	5a                   	pop    edx
c000cda8:	84 c0                	test   al,al
c000cdaa:	75 f1                	jne    c000cd9d <logs(char*)+0xc>
c000cdac:	5b                   	pop    ebx
c000cdad:	c3                   	ret    

c000cdae <logWriteInt(unsigned int)>:
c000cdae:	83 ec 10             	sub    esp,0x10
c000cdb1:	6a 0a                	push   0xa
c000cdb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cdb7:	50                   	push   eax
c000cdb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbc:	e8 58 ff ff ff       	call   c000cd19 <stringifyxWithBase(unsigned int, char*, int)>
c000cdc1:	50                   	push   eax
c000cdc2:	e8 ca ff ff ff       	call   c000cd91 <logs(char*)>
c000cdc7:	83 c4 20             	add    esp,0x20
c000cdca:	c3                   	ret    

c000cdcb <logWriteIntBase(unsigned int, int)>:
c000cdcb:	83 ec 10             	sub    esp,0x10
c000cdce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cdd6:	50                   	push   eax
c000cdd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddb:	e8 39 ff ff ff       	call   c000cd19 <stringifyxWithBase(unsigned int, char*, int)>
c000cde0:	50                   	push   eax
c000cde1:	e8 ab ff ff ff       	call   c000cd91 <logs(char*)>
c000cde6:	83 c4 20             	add    esp,0x20
c000cde9:	c3                   	ret    

c000cdea <kprintf(char const*, ...)>:
c000cdea:	55                   	push   ebp
c000cdeb:	57                   	push   edi
c000cdec:	56                   	push   esi
c000cded:	53                   	push   ebx
c000cdee:	83 ec 0c             	sub    esp,0xc
c000cdf1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cdf5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cdf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cdfd:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ce00:	84 c0                	test   al,al
c000ce02:	74 4a                	je     c000ce4e <kprintf(char const*, ...)+0x64>
c000ce04:	31 db                	xor    ebx,ebx
c000ce06:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ce09:	3c 25                	cmp    al,0x25
c000ce0b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ce0e:	0f 85 e4 00 00 00    	jne    c000cef8 <kprintf(char const*, ...)+0x10e>
c000ce14:	83 c3 02             	add    ebx,0x2
c000ce17:	8a 07                	mov    al,BYTE PTR [edi]
c000ce19:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ce1c:	83 e8 25             	sub    eax,0x25
c000ce1f:	3c 53                	cmp    al,0x53
c000ce21:	0f 87 ba 00 00 00    	ja     c000cee1 <kprintf(char const*, ...)+0xf7>
c000ce27:	0f b6 c0             	movzx  eax,al
c000ce2a:	ff 24 85 50 8b 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc74b0]
c000ce31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce35:	89 c8                	mov    eax,ecx
c000ce37:	83 c1 04             	add    ecx,0x4
c000ce3a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ce3e:	ff 30                	push   DWORD PTR [eax]
c000ce40:	e8 4c ff ff ff       	call   c000cd91 <logs(char*)>
c000ce45:	58                   	pop    eax
c000ce46:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ce4a:	84 c0                	test   al,al
c000ce4c:	75 b8                	jne    c000ce06 <kprintf(char const*, ...)+0x1c>
c000ce4e:	83 c4 0c             	add    esp,0xc
c000ce51:	5b                   	pop    ebx
c000ce52:	5e                   	pop    esi
c000ce53:	5f                   	pop    edi
c000ce54:	5d                   	pop    ebp
c000ce55:	c3                   	ret    
c000ce56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ce5a:	89 d0                	mov    eax,edx
c000ce5c:	83 c2 04             	add    edx,0x4
c000ce5f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce63:	ff 30                	push   DWORD PTR [eax]
c000ce65:	e8 44 ff ff ff       	call   c000cdae <logWriteInt(unsigned int)>
c000ce6a:	58                   	pop    eax
c000ce6b:	eb d9                	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000ce6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ce71:	89 d0                	mov    eax,edx
c000ce73:	83 c2 04             	add    edx,0x4
c000ce76:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ce79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce7d:	50                   	push   eax
c000ce7e:	e8 f7 fe ff ff       	call   c000cd7a <logc(char)>
c000ce83:	58                   	pop    eax
c000ce84:	eb c0                	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000ce86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce8a:	89 c8                	mov    eax,ecx
c000ce8c:	83 c1 04             	add    ecx,0x4
c000ce8f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ce93:	ff 30                	push   DWORD PTR [eax]
c000ce95:	e8 14 ff ff ff       	call   c000cdae <logWriteInt(unsigned int)>
c000ce9a:	5f                   	pop    edi
c000ce9b:	eb a9                	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000ce9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cea1:	89 c8                	mov    eax,ecx
c000cea3:	83 c1 04             	add    ecx,0x4
c000cea6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ceaa:	6a 10                	push   0x10
c000ceac:	ff 30                	push   DWORD PTR [eax]
c000ceae:	e8 18 ff ff ff       	call   c000cdcb <logWriteIntBase(unsigned int, int)>
c000ceb3:	59                   	pop    ecx
c000ceb4:	5f                   	pop    edi
c000ceb5:	eb 8f                	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000ceb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cebb:	89 d0                	mov    eax,edx
c000cebd:	83 c2 08             	add    edx,0x8
c000cec0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cec4:	6a 10                	push   0x10
c000cec6:	ff 30                	push   DWORD PTR [eax]
c000cec8:	e8 fe fe ff ff       	call   c000cdcb <logWriteIntBase(unsigned int, int)>
c000cecd:	58                   	pop    eax
c000cece:	5a                   	pop    edx
c000cecf:	e9 72 ff ff ff       	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000ced4:	6a 25                	push   0x25
c000ced6:	e8 9f fe ff ff       	call   c000cd7a <logc(char)>
c000cedb:	58                   	pop    eax
c000cedc:	e9 65 ff ff ff       	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000cee1:	6a 25                	push   0x25
c000cee3:	e8 92 fe ff ff       	call   c000cd7a <logc(char)>
c000cee8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ceeb:	50                   	push   eax
c000ceec:	e8 89 fe ff ff       	call   c000cd7a <logc(char)>
c000cef1:	5a                   	pop    edx
c000cef2:	59                   	pop    ecx
c000cef3:	e9 4e ff ff ff       	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>
c000cef8:	50                   	push   eax
c000cef9:	89 eb                	mov    ebx,ebp
c000cefb:	e8 7a fe ff ff       	call   c000cd7a <logc(char)>
c000cf00:	89 fd                	mov    ebp,edi
c000cf02:	58                   	pop    eax
c000cf03:	e9 3e ff ff ff       	jmp    c000ce46 <kprintf(char const*, ...)+0x5c>

c000cf08 <panic(char const*)>:
c000cf08:	55                   	push   ebp
c000cf09:	89 e5                	mov    ebp,esp
c000cf0b:	53                   	push   ebx
c000cf0c:	50                   	push   eax
c000cf0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cf10:	fa                   	cli    
c000cf11:	c6 05 d2 ba 03 c0 01 	mov    BYTE PTR ds:0xc003bad2,0x1
c000cf18:	53                   	push   ebx
c000cf19:	c6 05 60 ad 03 c0 00 	mov    BYTE PTR ds:0xc003ad60,0x0
c000cf20:	68 a0 8c 03 c0       	push   0xc0038ca0
c000cf25:	e8 c0 fe ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000cf2a:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cf2f:	52                   	push   edx
c000cf30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf36:	e8 36 36 00 00       	call   c0010571 <setActiveTerminal(VgaText*)>
c000cf3b:	83 c4 0c             	add    esp,0xc
c000cf3e:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cf43:	6a 01                	push   0x1
c000cf45:	6a 0f                	push   0xf
c000cf47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf4d:	e8 5e 30 00 00       	call   c000ffb0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cf52:	59                   	pop    ecx
c000cf53:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cf58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf5e:	e8 af 38 00 00       	call   c0010812 <VgaText::clearScreen()>
c000cf63:	58                   	pop    eax
c000cf64:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cf69:	5a                   	pop    edx
c000cf6a:	68 b9 8c 03 c0       	push   0xc0038cb9
c000cf6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf75:	e8 16 3a 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000cf7a:	59                   	pop    ecx
c000cf7b:	58                   	pop    eax
c000cf7c:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cf81:	68 3c 8a 03 c0       	push   0xc0038a3c
c000cf86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf8c:	e8 ff 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000cf91:	58                   	pop    eax
c000cf92:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cf97:	5a                   	pop    edx
c000cf98:	68 d5 8c 03 c0       	push   0xc0038cd5
c000cf9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfa3:	e8 e8 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000cfa8:	59                   	pop    ecx
c000cfa9:	58                   	pop    eax
c000cfaa:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cfaf:	53                   	push   ebx
c000cfb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfb6:	e8 d5 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000cfbb:	58                   	pop    eax
c000cfbc:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cfc1:	5a                   	pop    edx
c000cfc2:	68 f5 8c 03 c0       	push   0xc0038cf5
c000cfc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfcd:	e8 be 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000cfd2:	59                   	pop    ecx
c000cfd3:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cfd8:	5b                   	pop    ebx
c000cfd9:	68 78 8a 03 c0       	push   0xc0038a78
c000cfde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfe4:	e8 a7 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000cfe9:	58                   	pop    eax
c000cfea:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000cfef:	5a                   	pop    edx
c000cff0:	68 d5 8c 03 c0       	push   0xc0038cd5
c000cff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cffb:	e8 90 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d000:	59                   	pop    ecx
c000d001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d006:	5b                   	pop    ebx
c000d007:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d00a:	83 c0 0c             	add    eax,0xc
c000d00d:	50                   	push   eax
c000d00e:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d013:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d019:	e8 72 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d01e:	58                   	pop    eax
c000d01f:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d024:	5a                   	pop    edx
c000d025:	68 f4 8c 03 c0       	push   0xc0038cf4
c000d02a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d030:	e8 5b 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d035:	59                   	pop    ecx
c000d036:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d03b:	5b                   	pop    ebx
c000d03c:	68 a4 8a 03 c0       	push   0xc0038aa4
c000d041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d047:	e8 44 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d04c:	58                   	pop    eax
c000d04d:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d052:	5a                   	pop    edx
c000d053:	68 e4 8a 03 c0       	push   0xc0038ae4
c000d058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d05e:	e8 2d 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d063:	59                   	pop    ecx
c000d064:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d069:	5b                   	pop    ebx
c000d06a:	68 e0 8c 03 c0       	push   0xc0038ce0
c000d06f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d075:	e8 16 39 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d07a:	58                   	pop    eax
c000d07b:	5a                   	pop    edx
c000d07c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d07f:	68 f8 8c 03 c0       	push   0xc0038cf8
c000d084:	e8 61 fd ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000d089:	59                   	pop    ecx
c000d08a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d08d:	5b                   	pop    ebx
c000d08e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d091:	68 01 8d 03 c0       	push   0xc0038d01
c000d096:	e8 4f fd ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000d09b:	5a                   	pop    edx
c000d09c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d09f:	59                   	pop    ecx
c000d0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0a2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d0a5:	68 99 9b 03 c0       	push   0xc0039b99
c000d0aa:	e8 3b fd ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000d0af:	5b                   	pop    ebx
c000d0b0:	58                   	pop    eax
c000d0b1:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d0b6:	68 28 8b 03 c0       	push   0xc0038b28
c000d0bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0c1:	e8 ca 38 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d0c6:	58                   	pop    eax
c000d0c7:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d0cc:	5a                   	pop    edx
c000d0cd:	68 0a 8d 03 c0       	push   0xc0038d0a
c000d0d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0d8:	e8 b3 38 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d0dd:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d0e2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d0e8:	e8 28 18 01 00       	call   c001e915 <CPU::readCR0()>
c000d0ed:	59                   	pop    ecx
c000d0ee:	5a                   	pop    edx
c000d0ef:	50                   	push   eax
c000d0f0:	53                   	push   ebx
c000d0f1:	e8 c0 38 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d0f6:	59                   	pop    ecx
c000d0f7:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d0fc:	5b                   	pop    ebx
c000d0fd:	68 14 8d 03 c0       	push   0xc0038d14
c000d102:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d108:	e8 83 38 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d10d:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d112:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d118:	e8 0a 18 01 00       	call   c001e927 <CPU::readCR2()>
c000d11d:	5a                   	pop    edx
c000d11e:	59                   	pop    ecx
c000d11f:	50                   	push   eax
c000d120:	53                   	push   ebx
c000d121:	e8 90 38 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d126:	5b                   	pop    ebx
c000d127:	58                   	pop    eax
c000d128:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d12d:	68 1e 8d 03 c0       	push   0xc0038d1e
c000d132:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d138:	e8 53 38 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d13d:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d142:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d148:	e8 ec 17 01 00       	call   c001e939 <CPU::readCR3()>
c000d14d:	5a                   	pop    edx
c000d14e:	59                   	pop    ecx
c000d14f:	50                   	push   eax
c000d150:	53                   	push   ebx
c000d151:	e8 60 38 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d156:	5b                   	pop    ebx
c000d157:	58                   	pop    eax
c000d158:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d15d:	68 31 8d 03 c0       	push   0xc0038d31
c000d162:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d168:	e8 23 38 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d16d:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d172:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d178:	e8 ce 17 01 00       	call   c001e94b <CPU::readCR4()>
c000d17d:	5a                   	pop    edx
c000d17e:	59                   	pop    ecx
c000d17f:	50                   	push   eax
c000d180:	53                   	push   ebx
c000d181:	e8 30 38 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d186:	5b                   	pop    ebx
c000d187:	58                   	pop    eax
c000d188:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d18d:	68 3b 8d 03 c0       	push   0xc0038d3b
c000d192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d198:	e8 f3 37 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d19d:	5a                   	pop    edx
c000d19e:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d1a3:	59                   	pop    ecx
c000d1a4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d1aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d1ad:	50                   	push   eax
c000d1ae:	e8 03 38 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d1b3:	5b                   	pop    ebx
c000d1b4:	58                   	pop    eax
c000d1b5:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d1ba:	68 52 8d 03 c0       	push   0xc0038d52
c000d1bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1c5:	e8 c6 37 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d1ca:	5a                   	pop    edx
c000d1cb:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d1d0:	59                   	pop    ecx
c000d1d1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d1d7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d1da:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d1dd:	50                   	push   eax
c000d1de:	e8 d3 37 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d1e3:	5b                   	pop    ebx
c000d1e4:	58                   	pop    eax
c000d1e5:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d1ea:	68 52 8d 03 c0       	push   0xc0038d52
c000d1ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1f5:	e8 96 37 00 00       	call   c0010990 <VgaText::puts(char const*)>
c000d1fa:	59                   	pop    ecx
c000d1fb:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c000d200:	5b                   	pop    ebx
c000d201:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d207:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d20a:	8b 12                	mov    edx,DWORD PTR [edx]
c000d20c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d20f:	50                   	push   eax
c000d210:	e8 a1 37 00 00       	call   c00109b6 <VgaText::putx(unsigned int)>
c000d215:	83 c4 10             	add    esp,0x10
c000d218:	b2 fe                	mov    dl,0xfe
c000d21a:	e4 60                	in     al,0x60
c000d21c:	3c 1c                	cmp    al,0x1c
c000d21e:	74 04                	je     c000d224 <panic(char const*)+0x31c>
c000d220:	3c 5a                	cmp    al,0x5a
c000d222:	75 f6                	jne    c000d21a <panic(char const*)+0x312>
c000d224:	e4 64                	in     al,0x64
c000d226:	a8 02                	test   al,0x2
c000d228:	75 fa                	jne    c000d224 <panic(char const*)+0x31c>
c000d22a:	88 d0                	mov    al,dl
c000d22c:	e6 64                	out    0x64,al
c000d22e:	fa                   	cli    
c000d22f:	f4                   	hlt    
c000d230:	eb e8                	jmp    c000d21a <panic(char const*)+0x312>

c000d232 <sbrk>:
c000d232:	55                   	push   ebp
c000d233:	57                   	push   edi
c000d234:	56                   	push   esi
c000d235:	53                   	push   ebx
c000d236:	83 ec 1c             	sub    esp,0x1c
c000d239:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d23d:	85 db                	test   ebx,ebx
c000d23f:	74 37                	je     c000d278 <sbrk+0x46>
c000d241:	78 3f                	js     c000d282 <sbrk+0x50>
c000d243:	e8 88 9e 00 00       	call   c00170d0 <thisCPU()>
c000d248:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d24e:	83 e0 01             	and    eax,0x1
c000d251:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d255:	a1 50 ad 03 c0       	mov    eax,ds:0xc003ad50
c000d25a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d25e:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d264:	89 d8                	mov    eax,ebx
c000d266:	78 35                	js     c000d29d <sbrk+0x6b>
c000d268:	c1 f8 0c             	sar    eax,0xc
c000d26b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d26f:	89 c7                	mov    edi,eax
c000d271:	be 00 00 00 00       	mov    esi,0x0
c000d276:	eb 3c                	jmp    c000d2b4 <sbrk+0x82>
c000d278:	a1 50 ad 03 c0       	mov    eax,ds:0xc003ad50
c000d27d:	e9 ad 00 00 00       	jmp    c000d32f <sbrk+0xfd>
c000d282:	83 ec 08             	sub    esp,0x8
c000d285:	53                   	push   ebx
c000d286:	68 58 8d 03 c0       	push   0xc0038d58
c000d28b:	e8 5a fb ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000d290:	83 c4 10             	add    esp,0x10
c000d293:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d298:	e9 92 00 00 00       	jmp    c000d32f <sbrk+0xfd>
c000d29d:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d2a3:	eb c3                	jmp    c000d268 <sbrk+0x36>
c000d2a5:	81 05 50 ad 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003ad50,0x1000
c000d2af:	46                   	inc    esi
c000d2b0:	39 f7                	cmp    edi,esi
c000d2b2:	74 34                	je     c000d2e8 <sbrk+0xb6>
c000d2b4:	e8 e0 40 00 00       	call   c0011399 <Virt::getAKernelVAS()>
c000d2b9:	89 c3                	mov    ebx,eax
c000d2bb:	8b 2d 50 ad 03 c0    	mov    ebp,DWORD PTR ds:0xc003ad50
c000d2c1:	e8 c9 06 00 00       	call   c000d98f <Phys::allocatePage()>
c000d2c6:	68 01 04 00 00       	push   0x401
c000d2cb:	55                   	push   ebp
c000d2cc:	50                   	push   eax
c000d2cd:	53                   	push   ebx
c000d2ce:	e8 6d 45 00 00       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d2db:	74 c8                	je     c000d2a5 <sbrk+0x73>
c000d2dd:	8b 1d 50 ad 03 c0    	mov    ebx,DWORD PTR ds:0xc003ad50
c000d2e3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d2e6:	eb bd                	jmp    c000d2a5 <sbrk+0x73>
c000d2e8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d2ed:	74 48                	je     c000d337 <sbrk+0x105>
c000d2ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d2f3:	89 d3                	mov    ebx,edx
c000d2f5:	c1 eb 0a             	shr    ebx,0xa
c000d2f8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d2fe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d304:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d308:	c1 e0 0c             	shl    eax,0xc
c000d30b:	01 d0                	add    eax,edx
c000d30d:	c1 e8 0a             	shr    eax,0xa
c000d310:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d315:	2d 00 00 40 00       	sub    eax,0x400000
c000d31a:	39 c3                	cmp    ebx,eax
c000d31c:	77 0d                	ja     c000d32b <sbrk+0xf9>
c000d31e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d321:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d327:	39 d8                	cmp    eax,ebx
c000d329:	73 f3                	jae    c000d31e <sbrk+0xec>
c000d32b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d32f:	83 c4 1c             	add    esp,0x1c
c000d332:	5b                   	pop    ebx
c000d333:	5e                   	pop    esi
c000d334:	5f                   	pop    edi
c000d335:	5d                   	pop    ebp
c000d336:	c3                   	ret    
c000d337:	e8 fd 15 01 00       	call   c001e939 <CPU::readCR3()>
c000d33c:	83 ec 0c             	sub    esp,0xc
c000d33f:	50                   	push   eax
c000d340:	e8 18 16 01 00       	call   c001e95d <CPU::writeCR3(unsigned long)>
c000d345:	83 c4 10             	add    esp,0x10
c000d348:	eb e1                	jmp    c000d32b <sbrk+0xf9>

c000d34a <mmap>:
c000d34a:	83 ec 18             	sub    esp,0x18
c000d34d:	68 88 8d 03 c0       	push   0xc0038d88
c000d352:	e8 b1 fb ff ff       	call   c000cf08 <panic(char const*)>
c000d357:	b8 00 00 00 00       	mov    eax,0x0
c000d35c:	83 c4 1c             	add    esp,0x1c
c000d35f:	c3                   	ret    

c000d360 <munmap>:
c000d360:	83 ec 18             	sub    esp,0x18
c000d363:	68 8d 8d 03 c0       	push   0xc0038d8d
c000d368:	e8 9b fb ff ff       	call   c000cf08 <panic(char const*)>
c000d36d:	b8 00 00 00 00       	mov    eax,0x0
c000d372:	83 c4 1c             	add    esp,0x1c
c000d375:	c3                   	ret    

c000d376 <liballoc_lock()>:
c000d376:	83 ec 0c             	sub    esp,0xc
c000d379:	e8 0e 0f 00 00       	call   c000e28c <lockScheduler()>
c000d37e:	b8 00 00 00 00       	mov    eax,0x0
c000d383:	83 c4 0c             	add    esp,0xc
c000d386:	c3                   	ret    

c000d387 <liballoc_unlock()>:
c000d387:	83 ec 0c             	sub    esp,0xc
c000d38a:	e8 ff 0e 00 00       	call   c000e28e <unlockScheduler()>
c000d38f:	b8 00 00 00 00       	mov    eax,0x0
c000d394:	83 c4 0c             	add    esp,0xc
c000d397:	c3                   	ret    

c000d398 <liballoc_alloc(int)>:
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	e8 f9 3f 00 00       	call   c0011399 <Virt::getAKernelVAS()>
c000d3a0:	83 ec 04             	sub    esp,0x4
c000d3a3:	6a 01                	push   0x1
c000d3a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3a9:	50                   	push   eax
c000d3aa:	e8 91 45 00 00       	call   c0011940 <VAS::allocatePages(int, int)>
c000d3af:	83 c4 1c             	add    esp,0x1c
c000d3b2:	c3                   	ret    

c000d3b3 <liballoc_free(void*, int)>:
c000d3b3:	83 ec 0c             	sub    esp,0xc
c000d3b6:	e8 de 3f 00 00       	call   c0011399 <Virt::getAKernelVAS()>
c000d3bb:	83 ec 08             	sub    esp,0x8
c000d3be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3c2:	50                   	push   eax
c000d3c3:	e8 9a 42 00 00       	call   c0011662 <VAS::freeAllocatedPages(unsigned long)>
c000d3c8:	b8 00 00 00 00       	mov    eax,0x0
c000d3cd:	83 c4 1c             	add    esp,0x1c
c000d3d0:	c3                   	ret    

c000d3d1 <realloc>:
c000d3d1:	83 ec 14             	sub    esp,0x14
c000d3d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3dc:	e8 bb 41 ff ff       	call   c000159c <dlrealloc>
c000d3e1:	83 c4 1c             	add    esp,0x1c
c000d3e4:	c3                   	ret    

c000d3e5 <malloc>:
c000d3e5:	83 ec 18             	sub    esp,0x18
c000d3e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ec:	e8 6e 3c ff ff       	call   c000105f <dlmalloc>
c000d3f1:	83 c4 1c             	add    esp,0x1c
c000d3f4:	c3                   	ret    

c000d3f5 <free>:
c000d3f5:	83 ec 18             	sub    esp,0x18
c000d3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3fc:	e8 03 39 ff ff       	call   c0000d04 <dlfree>
c000d401:	83 c4 1c             	add    esp,0x1c
c000d404:	c3                   	ret    

c000d405 <rfree>:
c000d405:	83 ec 18             	sub    esp,0x18
c000d408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d40c:	e8 e4 ff ff ff       	call   c000d3f5 <free>
c000d411:	83 c4 1c             	add    esp,0x1c
c000d414:	c3                   	ret    

c000d415 <calloc>:
c000d415:	56                   	push   esi
c000d416:	53                   	push   ebx
c000d417:	83 ec 10             	sub    esp,0x10
c000d41a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d41e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d423:	53                   	push   ebx
c000d424:	e8 bc ff ff ff       	call   c000d3e5 <malloc>
c000d429:	89 c6                	mov    esi,eax
c000d42b:	83 c4 0c             	add    esp,0xc
c000d42e:	53                   	push   ebx
c000d42f:	6a 00                	push   0x0
c000d431:	50                   	push   eax
c000d432:	e8 89 32 ff ff       	call   c00006c0 <memset>
c000d437:	89 f0                	mov    eax,esi
c000d439:	83 c4 14             	add    esp,0x14
c000d43c:	5b                   	pop    ebx
c000d43d:	5e                   	pop    esi
c000d43e:	c3                   	ret    

c000d43f <hwTextMode_loadInData(VgaText*)>:
c000d43f:	57                   	push   edi
c000d440:	56                   	push   esi
c000d441:	53                   	push   ebx
c000d442:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d446:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d44c:	85 c0                	test   eax,eax
c000d44e:	7e 30                	jle    c000d480 <hwTextMode_loadInData(VgaText*)+0x41>
c000d450:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d453:	31 f6                	xor    esi,esi
c000d455:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d458:	31 c0                	xor    eax,eax
c000d45a:	c1 e1 05             	shl    ecx,0x5
c000d45d:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d463:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d467:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d46b:	40                   	inc    eax
c000d46c:	83 f8 50             	cmp    eax,0x50
c000d46f:	75 f2                	jne    c000d463 <hwTextMode_loadInData(VgaText*)+0x24>
c000d471:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d477:	46                   	inc    esi
c000d478:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d47e:	7f d5                	jg     c000d455 <hwTextMode_loadInData(VgaText*)+0x16>
c000d480:	5b                   	pop    ebx
c000d481:	5e                   	pop    esi
c000d482:	5f                   	pop    edi
c000d483:	c3                   	ret    

c000d484 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d484:	56                   	push   esi
c000d485:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d48a:	53                   	push   ebx
c000d48b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d48f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d493:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d499:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d49f:	c1 e0 04             	shl    eax,0x4
c000d4a2:	83 e6 0f             	and    esi,0xf
c000d4a5:	0f b6 c0             	movzx  eax,al
c000d4a8:	41                   	inc    ecx
c000d4a9:	09 f0                	or     eax,esi
c000d4ab:	83 c2 02             	add    edx,0x2
c000d4ae:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d4b2:	c1 e0 08             	shl    eax,0x8
c000d4b5:	09 f0                	or     eax,esi
c000d4b7:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d4bb:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d4c1:	75 d0                	jne    c000d493 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d4c3:	5b                   	pop    ebx
c000d4c4:	5e                   	pop    esi
c000d4c5:	c3                   	ret    

c000d4c6 <hwTextMode_showCursor(VgaText*, bool)>:
c000d4c6:	56                   	push   esi
c000d4c7:	53                   	push   ebx
c000d4c8:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d4cd:	74 38                	je     c000d507 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d4cf:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d4d4:	b0 0a                	mov    al,0xa
c000d4d6:	89 da                	mov    edx,ebx
c000d4d8:	ee                   	out    dx,al
c000d4d9:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d4de:	89 ca                	mov    edx,ecx
c000d4e0:	ec                   	in     al,dx
c000d4e1:	b2 0f                	mov    dl,0xf
c000d4e3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d4e7:	83 e0 c0             	and    eax,0xffffffc0
c000d4ea:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d4f0:	09 d0                	or     eax,edx
c000d4f2:	89 ca                	mov    edx,ecx
c000d4f4:	ee                   	out    dx,al
c000d4f5:	b0 0b                	mov    al,0xb
c000d4f7:	89 da                	mov    edx,ebx
c000d4f9:	ee                   	out    dx,al
c000d4fa:	89 ca                	mov    edx,ecx
c000d4fc:	ec                   	in     al,dx
c000d4fd:	83 e0 e0             	and    eax,0xffffffe0
c000d500:	83 c8 0f             	or     eax,0xf
c000d503:	ee                   	out    dx,al
c000d504:	5b                   	pop    ebx
c000d505:	5e                   	pop    esi
c000d506:	c3                   	ret    
c000d507:	b0 0a                	mov    al,0xa
c000d509:	ba d4 03 00 00       	mov    edx,0x3d4
c000d50e:	ee                   	out    dx,al
c000d50f:	b0 20                	mov    al,0x20
c000d511:	ba d5 03 00 00       	mov    edx,0x3d5
c000d516:	ee                   	out    dx,al
c000d517:	5b                   	pop    ebx
c000d518:	5e                   	pop    esi
c000d519:	c3                   	ret    

c000d51a <hwTextMode_update(VgaText*)>:
c000d51a:	c3                   	ret    

c000d51b <hwTextMode_updateCursor(VgaText*)>:
c000d51b:	56                   	push   esi
c000d51c:	b9 19 00 00 00       	mov    ecx,0x19
c000d521:	53                   	push   ebx
c000d522:	be d4 03 00 00       	mov    esi,0x3d4
c000d527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d52b:	89 f2                	mov    edx,esi
c000d52d:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d533:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d539:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d53c:	c1 e1 04             	shl    ecx,0x4
c000d53f:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d545:	b0 0f                	mov    al,0xf
c000d547:	ee                   	out    dx,al
c000d548:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d54d:	88 c8                	mov    al,cl
c000d54f:	89 da                	mov    edx,ebx
c000d551:	ee                   	out    dx,al
c000d552:	b0 0e                	mov    al,0xe
c000d554:	89 f2                	mov    edx,esi
c000d556:	ee                   	out    dx,al
c000d557:	89 c8                	mov    eax,ecx
c000d559:	89 da                	mov    edx,ebx
c000d55b:	66 c1 e8 08          	shr    ax,0x8
c000d55f:	ee                   	out    dx,al
c000d560:	5b                   	pop    ebx
c000d561:	5e                   	pop    esi
c000d562:	c3                   	ret    

c000d563 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d563:	ba da 03 00 00       	mov    edx,0x3da
c000d568:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d56d:	75 18                	jne    c000d587 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d56f:	ec                   	in     al,dx
c000d570:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d575:	b0 30                	mov    al,0x30
c000d577:	89 ca                	mov    edx,ecx
c000d579:	ee                   	out    dx,al
c000d57a:	ba c1 03 00 00       	mov    edx,0x3c1
c000d57f:	ec                   	in     al,dx
c000d580:	83 c8 08             	or     eax,0x8
c000d583:	89 ca                	mov    edx,ecx
c000d585:	ee                   	out    dx,al
c000d586:	c3                   	ret    
c000d587:	ec                   	in     al,dx
c000d588:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d58d:	b0 30                	mov    al,0x30
c000d58f:	89 ca                	mov    edx,ecx
c000d591:	ee                   	out    dx,al
c000d592:	ba c1 03 00 00       	mov    edx,0x3c1
c000d597:	ec                   	in     al,dx
c000d598:	83 e0 f7             	and    eax,0xfffffff7
c000d59b:	89 ca                	mov    edx,ecx
c000d59d:	ee                   	out    dx,al
c000d59e:	c3                   	ret    

c000d59f <hwTextMode_scrollScreen(VgaText*)>:
c000d59f:	55                   	push   ebp
c000d5a0:	bd 02 00 00 00       	mov    ebp,0x2
c000d5a5:	57                   	push   edi
c000d5a6:	56                   	push   esi
c000d5a7:	53                   	push   ebx
c000d5a8:	83 ec 1c             	sub    esp,0x1c
c000d5ab:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d5b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d5b7:	31 c0                	xor    eax,eax
c000d5b9:	eb 0b                	jmp    c000d5c6 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d5bb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d5c1:	74 57                	je     c000d61a <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d5c3:	43                   	inc    ebx
c000d5c4:	89 f0                	mov    eax,esi
c000d5c6:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d5cc:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d5d2:	88 13                	mov    BYTE PTR [ebx],dl
c000d5d4:	8d 70 01             	lea    esi,[eax+0x1]
c000d5d7:	83 fd 18             	cmp    ebp,0x18
c000d5da:	75 df                	jne    c000d5bb <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d5dc:	a8 01                	test   al,0x1
c000d5de:	75 13                	jne    c000d5f3 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d5e0:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d5e3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d5e9:	75 d8                	jne    c000d5c3 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d5eb:	83 c4 1c             	add    esp,0x1c
c000d5ee:	5b                   	pop    ebx
c000d5ef:	5e                   	pop    esi
c000d5f0:	5f                   	pop    edi
c000d5f1:	5d                   	pop    ebp
c000d5f2:	c3                   	ret    
c000d5f3:	83 ec 08             	sub    esp,0x8
c000d5f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5fa:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d601:	50                   	push   eax
c000d602:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d606:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d60d:	50                   	push   eax
c000d60e:	e8 bd 29 00 00       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d613:	83 c4 10             	add    esp,0x10
c000d616:	88 07                	mov    BYTE PTR [edi],al
c000d618:	eb c9                	jmp    c000d5e3 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d61a:	45                   	inc    ebp
c000d61b:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d623:	eb 8e                	jmp    c000d5b3 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d625 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d625:	56                   	push   esi
c000d626:	53                   	push   ebx
c000d627:	83 ec 0c             	sub    esp,0xc
c000d62a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d62e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d632:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d637:	50                   	push   eax
c000d638:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d63d:	50                   	push   eax
c000d63e:	e8 8d 29 00 00       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d643:	5a                   	pop    edx
c000d644:	0f b6 c0             	movzx  eax,al
c000d647:	59                   	pop    ecx
c000d648:	50                   	push   eax
c000d649:	89 f0                	mov    eax,esi
c000d64b:	0f be f0             	movsx  esi,al
c000d64e:	56                   	push   esi
c000d64f:	e8 22 2a 00 00       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c000d654:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d658:	ba 19 00 00 00       	mov    edx,0x19
c000d65d:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d663:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d666:	8d 14 92             	lea    edx,[edx+edx*4]
c000d669:	c1 e1 04             	shl    ecx,0x4
c000d66c:	c1 e2 04             	shl    edx,0x4
c000d66f:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d673:	01 ca                	add    edx,ecx
c000d675:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d67d:	83 c4 14             	add    esp,0x14
c000d680:	5b                   	pop    ebx
c000d681:	5e                   	pop    esi
c000d682:	c3                   	ret    

c000d683 <setupTextMode()>:
c000d683:	c7 05 b8 bd 03 c0 63 d5 00 c0 	mov    DWORD PTR ds:0xc003bdb8,0xc000d563
c000d68d:	c7 05 a4 bd 03 c0 3f d4 00 c0 	mov    DWORD PTR ds:0xc003bda4,0xc000d43f
c000d697:	c7 05 a0 bd 03 c0 84 d4 00 c0 	mov    DWORD PTR ds:0xc003bda0,0xc000d484
c000d6a1:	c7 05 ac bd 03 c0 9f d5 00 c0 	mov    DWORD PTR ds:0xc003bdac,0xc000d59f
c000d6ab:	c7 05 b4 bd 03 c0 c6 d4 00 c0 	mov    DWORD PTR ds:0xc003bdb4,0xc000d4c6
c000d6b5:	c7 05 a8 bd 03 c0 1a d5 00 c0 	mov    DWORD PTR ds:0xc003bda8,0xc000d51a
c000d6bf:	c7 05 b0 bd 03 c0 1b d5 00 c0 	mov    DWORD PTR ds:0xc003bdb0,0xc000d51b
c000d6c9:	c7 05 bc bd 03 c0 25 d6 00 c0 	mov    DWORD PTR ds:0xc003bdbc,0xc000d625
c000d6d3:	c3                   	ret    

c000d6d4 <kernel_main>:
c000d6d4:	57                   	push   edi
c000d6d5:	bf f9 03 00 00       	mov    edi,0x3f9
c000d6da:	56                   	push   esi
c000d6db:	31 f6                	xor    esi,esi
c000d6dd:	53                   	push   ebx
c000d6de:	83 ec 10             	sub    esp,0x10
c000d6e1:	e8 44 27 00 00       	call   c000fe2a <installVgaTextImplementation()>
c000d6e6:	e8 98 ff ff ff       	call   c000d683 <setupTextMode()>
c000d6eb:	89 f0                	mov    eax,esi
c000d6ed:	89 fa                	mov    edx,edi
c000d6ef:	ee                   	out    dx,al
c000d6f0:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d6f5:	b0 80                	mov    al,0x80
c000d6f7:	89 da                	mov    edx,ebx
c000d6f9:	ee                   	out    dx,al
c000d6fa:	b1 03                	mov    cl,0x3
c000d6fc:	ba f8 03 00 00       	mov    edx,0x3f8
c000d701:	88 c8                	mov    al,cl
c000d703:	ee                   	out    dx,al
c000d704:	89 f0                	mov    eax,esi
c000d706:	89 fa                	mov    edx,edi
c000d708:	ee                   	out    dx,al
c000d709:	88 c8                	mov    al,cl
c000d70b:	89 da                	mov    edx,ebx
c000d70d:	ee                   	out    dx,al
c000d70e:	b0 c7                	mov    al,0xc7
c000d710:	ba fa 03 00 00       	mov    edx,0x3fa
c000d715:	ee                   	out    dx,al
c000d716:	b0 0b                	mov    al,0xb
c000d718:	ba fc 03 00 00       	mov    edx,0x3fc
c000d71d:	ee                   	out    dx,al
c000d71e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d723:	83 ec 0c             	sub    esp,0xc
c000d726:	05 ff 0f 00 00       	add    eax,0xfff
c000d72b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d730:	50                   	push   eax
c000d731:	e8 4d 03 00 00       	call   c000da83 <Phys::physicalMemorySetup(unsigned int)>
c000d736:	e8 df 3b 00 00       	call   c001131a <Virt::virtualMemorySetup()>
c000d73b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d74a:	75 0e                	jne    c000d75a <kernel_main+0x86>
c000d74c:	89 d8                	mov    eax,ebx
c000d74e:	25 48 03 00 00       	and    eax,0x348
c000d753:	3d 00 03 00 00       	cmp    eax,0x300
c000d758:	74 10                	je     c000d76a <kernel_main+0x96>
c000d75a:	83 ec 0c             	sub    esp,0xc
c000d75d:	68 f7 8c 03 c0       	push   0xc0038cf7
c000d762:	e8 a1 f7 ff ff       	call   c000cf08 <panic(char const*)>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 ec 0c             	sub    esp,0xc
c000d76d:	89 1d d4 ba 03 c0    	mov    DWORD PTR ds:0xc003bad4,ebx
c000d773:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d777:	53                   	push   ebx
c000d778:	e8 47 3d 00 00       	call   c00114c4 <VAS::VAS()>
c000d77d:	89 1d dc bd 03 c0    	mov    DWORD PTR ds:0xc003bddc,ebx
c000d783:	e8 98 28 ff ff       	call   c0000020 <callGlobalConstructors>
c000d788:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d78f:	e8 06 4c 00 00       	call   c001239a <operator new(unsigned long)>
c000d794:	89 04 24             	mov    DWORD PTR [esp],eax
c000d797:	89 c6                	mov    esi,eax
c000d799:	e8 26 d9 ff ff       	call   c000b0c4 <Computer::Computer()>
c000d79e:	6a 00                	push   0x0
c000d7a0:	89 35 28 b9 03 c0    	mov    DWORD PTR ds:0xc003b928,esi
c000d7a6:	6a 00                	push   0x0
c000d7a8:	6a 00                	push   0x0
c000d7aa:	56                   	push   esi
c000d7ab:	e8 d8 dd ff ff       	call   c000b588 <Computer::open(int, int, void*)>
c000d7b0:	83 c4 14             	add    esp,0x14
c000d7b3:	53                   	push   ebx
c000d7b4:	e8 1b 3f 00 00       	call   c00116d4 <VAS::~VAS()>
c000d7b9:	c7 04 24 94 8d 03 c0 	mov    DWORD PTR [esp],0xc0038d94
c000d7c0:	e8 43 f7 ff ff       	call   c000cf08 <panic(char const*)>
c000d7c5:	83 c4 20             	add    esp,0x20
c000d7c8:	5b                   	pop    ebx
c000d7c9:	5e                   	pop    esi
c000d7ca:	5f                   	pop    edi
c000d7cb:	c3                   	ret    

c000d7cc <Phys::allocateDMA(unsigned long)>:
c000d7cc:	55                   	push   ebp
c000d7cd:	31 d2                	xor    edx,edx
c000d7cf:	57                   	push   edi
c000d7d0:	31 ed                	xor    ebp,ebp
c000d7d2:	56                   	push   esi
c000d7d3:	31 c9                	xor    ecx,ecx
c000d7d5:	53                   	push   ebx
c000d7d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d7da:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d7e0:	31 c0                	xor    eax,eax
c000d7e2:	c1 ee 0c             	shr    esi,0xc
c000d7e5:	eb 17                	jmp    c000d7fe <Phys::allocateDMA(unsigned long)+0x32>
c000d7e7:	85 c9                	test   ecx,ecx
c000d7e9:	75 04                	jne    c000d7ef <Phys::allocateDMA(unsigned long)+0x23>
c000d7eb:	89 d5                	mov    ebp,edx
c000d7ed:	89 d0                	mov    eax,edx
c000d7ef:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d7f2:	39 de                	cmp    esi,ebx
c000d7f4:	74 20                	je     c000d816 <Phys::allocateDMA(unsigned long)+0x4a>
c000d7f6:	42                   	inc    edx
c000d7f7:	89 d9                	mov    ecx,ebx
c000d7f9:	83 fa 2f             	cmp    edx,0x2f
c000d7fc:	7f 11                	jg     c000d80f <Phys::allocateDMA(unsigned long)+0x43>
c000d7fe:	80 ba 00 bb 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4500],0x0
c000d805:	74 e0                	je     c000d7e7 <Phys::allocateDMA(unsigned long)+0x1b>
c000d807:	31 c9                	xor    ecx,ecx
c000d809:	42                   	inc    edx
c000d80a:	83 fa 2f             	cmp    edx,0x2f
c000d80d:	7e ef                	jle    c000d7fe <Phys::allocateDMA(unsigned long)+0x32>
c000d80f:	5b                   	pop    ebx
c000d810:	31 c0                	xor    eax,eax
c000d812:	5e                   	pop    esi
c000d813:	5f                   	pop    edi
c000d814:	5d                   	pop    ebp
c000d815:	c3                   	ret    
c000d816:	8d 14 30             	lea    edx,[eax+esi*1]
c000d819:	89 d7                	mov    edi,edx
c000d81b:	4f                   	dec    edi
c000d81c:	79 03                	jns    c000d821 <Phys::allocateDMA(unsigned long)+0x55>
c000d81e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d821:	c1 ff 04             	sar    edi,0x4
c000d824:	89 c2                	mov    edx,eax
c000d826:	c1 fa 04             	sar    edx,0x4
c000d829:	39 fa                	cmp    edx,edi
c000d82b:	75 2f                	jne    c000d85c <Phys::allocateDMA(unsigned long)+0x90>
c000d82d:	85 db                	test   ebx,ebx
c000d82f:	74 1a                	je     c000d84b <Phys::allocateDMA(unsigned long)+0x7f>
c000d831:	be 00 bb 03 c0       	mov    esi,0xc003bb00
c000d836:	8d 90 00 bb 03 c0    	lea    edx,[eax-0x3ffc4500]
c000d83c:	f7 d6                	not    esi
c000d83e:	29 c6                	sub    esi,eax
c000d840:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d843:	42                   	inc    edx
c000d844:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d847:	39 d9                	cmp    ecx,ebx
c000d849:	7f f5                	jg     c000d840 <Phys::allocateDMA(unsigned long)+0x74>
c000d84b:	85 ff                	test   edi,edi
c000d84d:	74 13                	je     c000d862 <Phys::allocateDMA(unsigned long)+0x96>
c000d84f:	5b                   	pop    ebx
c000d850:	05 50 20 0c 00       	add    eax,0xc2050
c000d855:	5e                   	pop    esi
c000d856:	c1 e0 0c             	shl    eax,0xc
c000d859:	5f                   	pop    edi
c000d85a:	5d                   	pop    ebp
c000d85b:	c3                   	ret    
c000d85c:	89 ea                	mov    edx,ebp
c000d85e:	31 c9                	xor    ecx,ecx
c000d860:	eb a7                	jmp    c000d809 <Phys::allocateDMA(unsigned long)+0x3d>
c000d862:	5b                   	pop    ebx
c000d863:	c1 e0 0c             	shl    eax,0xc
c000d866:	5e                   	pop    esi
c000d867:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d86c:	5f                   	pop    edi
c000d86d:	5d                   	pop    ebp
c000d86e:	c3                   	ret    

c000d86f <Phys::freeDMA(unsigned long, unsigned long)>:
c000d86f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d873:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d877:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d87d:	c1 e9 0c             	shr    ecx,0xc
c000d880:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d885:	76 25                	jbe    c000d8ac <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d887:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d88c:	c1 e8 0c             	shr    eax,0xc
c000d88f:	8d 50 10             	lea    edx,[eax+0x10]
c000d892:	85 c9                	test   ecx,ecx
c000d894:	74 15                	je     c000d8ab <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d896:	8d 82 00 bb 03 c0    	lea    eax,[edx-0x3ffc4500]
c000d89c:	8d 94 11 00 bb 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4500]
c000d8a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d8a6:	40                   	inc    eax
c000d8a7:	39 d0                	cmp    eax,edx
c000d8a9:	75 f8                	jne    c000d8a3 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d8ab:	c3                   	ret    
c000d8ac:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d8b2:	c1 ea 0c             	shr    edx,0xc
c000d8b5:	eb db                	jmp    c000d892 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d8b7 <Phys::setPageState(unsigned long, bool)>:
c000d8b7:	56                   	push   esi
c000d8b8:	ba 01 00 00 00       	mov    edx,0x1
c000d8bd:	53                   	push   ebx
c000d8be:	8b 35 54 ad 03 c0    	mov    esi,DWORD PTR ds:0xc003ad54
c000d8c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8cc:	89 c8                	mov    eax,ecx
c000d8ce:	83 e1 07             	and    ecx,0x7
c000d8d1:	c1 e8 03             	shr    eax,0x3
c000d8d4:	d3 e3                	shl    ebx,cl
c000d8d6:	01 c6                	add    esi,eax
c000d8d8:	d3 e2                	shl    edx,cl
c000d8da:	f7 d2                	not    edx
c000d8dc:	20 16                	and    BYTE PTR [esi],dl
c000d8de:	03 05 54 ad 03 c0    	add    eax,DWORD PTR ds:0xc003ad54
c000d8e4:	08 18                	or     BYTE PTR [eax],bl
c000d8e6:	5b                   	pop    ebx
c000d8e7:	5e                   	pop    esi
c000d8e8:	c3                   	ret    

c000d8e9 <Phys::getPageState(unsigned long)>:
c000d8e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d8ed:	8b 15 54 ad 03 c0    	mov    edx,DWORD PTR ds:0xc003ad54
c000d8f3:	89 c8                	mov    eax,ecx
c000d8f5:	83 e1 07             	and    ecx,0x7
c000d8f8:	c1 e8 03             	shr    eax,0x3
c000d8fb:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d8ff:	d3 f8                	sar    eax,cl
c000d901:	83 e0 01             	and    eax,0x1
c000d904:	c3                   	ret    

c000d905 <Phys::freePage(unsigned long)>:
c000d905:	53                   	push   ebx
c000d906:	83 ec 08             	sub    esp,0x8
c000d909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d90d:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d913:	76 57                	jbe    c000d96c <Phys::freePage(unsigned long)+0x67>
c000d915:	c1 eb 0c             	shr    ebx,0xc
c000d918:	53                   	push   ebx
c000d919:	e8 cb ff ff ff       	call   c000d8e9 <Phys::getPageState(unsigned long)>
c000d91e:	5a                   	pop    edx
c000d91f:	84 c0                	test   al,al
c000d921:	74 5b                	je     c000d97e <Phys::freePage(unsigned long)+0x79>
c000d923:	a1 ec ba 03 c0       	mov    eax,ds:0xc003baec
c000d928:	48                   	dec    eax
c000d929:	a3 ec ba 03 c0       	mov    ds:0xc003baec,eax
c000d92e:	8d 04 80             	lea    eax,[eax+eax*4]
c000d931:	8d 04 80             	lea    eax,[eax+eax*4]
c000d934:	c1 e0 02             	shl    eax,0x2
c000d937:	99                   	cdq    
c000d938:	f7 3d f0 ba 03 c0    	idiv   DWORD PTR ds:0xc003baf0
c000d93e:	39 05 e8 ba 03 c0    	cmp    DWORD PTR ds:0xc003bae8,eax
c000d944:	75 13                	jne    c000d959 <Phys::freePage(unsigned long)+0x54>
c000d946:	83 ec 08             	sub    esp,0x8
c000d949:	6a 00                	push   0x0
c000d94b:	53                   	push   ebx
c000d94c:	e8 66 ff ff ff       	call   c000d8b7 <Phys::setPageState(unsigned long, bool)>
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	83 c4 08             	add    esp,0x8
c000d957:	5b                   	pop    ebx
c000d958:	c3                   	ret    
c000d959:	83 ec 0c             	sub    esp,0xc
c000d95c:	a3 e8 ba 03 c0       	mov    ds:0xc003bae8,eax
c000d961:	50                   	push   eax
c000d962:	e8 57 28 00 00       	call   c00101be <VgaText::updateRAMUsageDisplay(int)>
c000d967:	83 c4 10             	add    esp,0x10
c000d96a:	eb da                	jmp    c000d946 <Phys::freePage(unsigned long)+0x41>
c000d96c:	68 00 10 00 00       	push   0x1000
c000d971:	53                   	push   ebx
c000d972:	e8 f8 fe ff ff       	call   c000d86f <Phys::freeDMA(unsigned long, unsigned long)>
c000d977:	59                   	pop    ecx
c000d978:	5b                   	pop    ebx
c000d979:	83 c4 08             	add    esp,0x8
c000d97c:	5b                   	pop    ebx
c000d97d:	c3                   	ret    
c000d97e:	c7 44 24 10 af 8d 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038daf
c000d986:	83 c4 08             	add    esp,0x8
c000d989:	5b                   	pop    ebx
c000d98a:	e9 79 f5 ff ff       	jmp    c000cf08 <panic(char const*)>

c000d98f <Phys::allocatePage()>:
c000d98f:	56                   	push   esi
c000d990:	53                   	push   ebx
c000d991:	51                   	push   ecx
c000d992:	8b 35 e0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bae0
c000d998:	89 f3                	mov    ebx,esi
c000d99a:	eb 0a                	jmp    c000d9a6 <Phys::allocatePage()+0x17>
c000d99c:	89 1d e0 ba 03 c0    	mov    DWORD PTR ds:0xc003bae0,ebx
c000d9a2:	39 de                	cmp    esi,ebx
c000d9a4:	74 24                	je     c000d9ca <Phys::allocatePage()+0x3b>
c000d9a6:	53                   	push   ebx
c000d9a7:	e8 3d ff ff ff       	call   c000d8e9 <Phys::getPageState(unsigned long)>
c000d9ac:	5a                   	pop    edx
c000d9ad:	84 c0                	test   al,al
c000d9af:	74 4e                	je     c000d9ff <Phys::allocatePage()+0x70>
c000d9b1:	43                   	inc    ebx
c000d9b2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d9b8:	75 e2                	jne    c000d99c <Phys::allocatePage()+0xd>
c000d9ba:	31 db                	xor    ebx,ebx
c000d9bc:	c7 05 e0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bae0,0x0
c000d9c6:	39 de                	cmp    esi,ebx
c000d9c8:	75 dc                	jne    c000d9a6 <Phys::allocatePage()+0x17>
c000d9ca:	83 ec 0c             	sub    esp,0xc
c000d9cd:	68 00 10 00 00       	push   0x1000
c000d9d2:	e8 f5 fd ff ff       	call   c000d7cc <Phys::allocateDMA(unsigned long)>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	85 c0                	test   eax,eax
c000d9dc:	75 56                	jne    c000da34 <Phys::allocatePage()+0xa5>
c000d9de:	83 ec 0c             	sub    esp,0xc
c000d9e1:	68 c5 8d 03 c0       	push   0xc0038dc5
c000d9e6:	e8 1d f5 ff ff       	call   c000cf08 <panic(char const*)>
c000d9eb:	83 c4 10             	add    esp,0x10
c000d9ee:	8b 1d e0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bae0
c000d9f4:	53                   	push   ebx
c000d9f5:	e8 ef fe ff ff       	call   c000d8e9 <Phys::getPageState(unsigned long)>
c000d9fa:	5a                   	pop    edx
c000d9fb:	84 c0                	test   al,al
c000d9fd:	75 b2                	jne    c000d9b1 <Phys::allocatePage()+0x22>
c000d9ff:	6a 01                	push   0x1
c000da01:	53                   	push   ebx
c000da02:	e8 b0 fe ff ff       	call   c000d8b7 <Phys::setPageState(unsigned long, bool)>
c000da07:	a1 ec ba 03 c0       	mov    eax,ds:0xc003baec
c000da0c:	59                   	pop    ecx
c000da0d:	40                   	inc    eax
c000da0e:	5b                   	pop    ebx
c000da0f:	a3 ec ba 03 c0       	mov    ds:0xc003baec,eax
c000da14:	8d 04 80             	lea    eax,[eax+eax*4]
c000da17:	8d 04 80             	lea    eax,[eax+eax*4]
c000da1a:	c1 e0 02             	shl    eax,0x2
c000da1d:	99                   	cdq    
c000da1e:	f7 3d f0 ba 03 c0    	idiv   DWORD PTR ds:0xc003baf0
c000da24:	39 05 e8 ba 03 c0    	cmp    DWORD PTR ds:0xc003bae8,eax
c000da2a:	75 0c                	jne    c000da38 <Phys::allocatePage()+0xa9>
c000da2c:	a1 e0 ba 03 c0       	mov    eax,ds:0xc003bae0
c000da31:	c1 e0 0c             	shl    eax,0xc
c000da34:	5a                   	pop    edx
c000da35:	5b                   	pop    ebx
c000da36:	5e                   	pop    esi
c000da37:	c3                   	ret    
c000da38:	83 ec 0c             	sub    esp,0xc
c000da3b:	a3 e8 ba 03 c0       	mov    ds:0xc003bae8,eax
c000da40:	50                   	push   eax
c000da41:	e8 78 27 00 00       	call   c00101be <VgaText::updateRAMUsageDisplay(int)>
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	eb e1                	jmp    c000da2c <Phys::allocatePage()+0x9d>

c000da4b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000da4b:	56                   	push   esi
c000da4c:	53                   	push   ebx
c000da4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da51:	39 1d e4 ba 03 c0    	cmp    DWORD PTR ds:0xc003bae4,ebx
c000da57:	73 06                	jae    c000da5f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000da59:	89 1d e4 ba 03 c0    	mov    DWORD PTR ds:0xc003bae4,ebx
c000da5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da63:	c1 eb 0c             	shr    ebx,0xc
c000da66:	c1 e8 0c             	shr    eax,0xc
c000da69:	39 d8                	cmp    eax,ebx
c000da6b:	73 13                	jae    c000da80 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000da6d:	6a 00                	push   0x0
c000da6f:	8d 70 01             	lea    esi,[eax+0x1]
c000da72:	50                   	push   eax
c000da73:	e8 3f fe ff ff       	call   c000d8b7 <Phys::setPageState(unsigned long, bool)>
c000da78:	5a                   	pop    edx
c000da79:	89 f0                	mov    eax,esi
c000da7b:	59                   	pop    ecx
c000da7c:	39 f3                	cmp    ebx,esi
c000da7e:	75 ed                	jne    c000da6d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000da80:	5b                   	pop    ebx
c000da81:	5e                   	pop    esi
c000da82:	c3                   	ret    

c000da83 <Phys::physicalMemorySetup(unsigned int)>:
c000da83:	55                   	push   ebp
c000da84:	57                   	push   edi
c000da85:	56                   	push   esi
c000da86:	53                   	push   ebx
c000da87:	31 db                	xor    ebx,ebx
c000da89:	83 ec 30             	sub    esp,0x30
c000da8c:	6a 30                	push   0x30
c000da8e:	6a 00                	push   0x0
c000da90:	68 00 bb 03 c0       	push   0xc003bb00
c000da95:	e8 26 2c ff ff       	call   c00006c0 <memset>
c000da9a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000daa3:	05 00 10 00 00       	add    eax,0x1000
c000daa8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000daac:	83 c4 10             	add    esp,0x10
c000daaf:	83 ec 08             	sub    esp,0x8
c000dab2:	6a 01                	push   0x1
c000dab4:	53                   	push   ebx
c000dab5:	43                   	inc    ebx
c000dab6:	e8 fc fd ff ff       	call   c000d8b7 <Phys::setPageState(unsigned long, bool)>
c000dabb:	83 c4 10             	add    esp,0x10
c000dabe:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000dac4:	75 e9                	jne    c000daaf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000dac6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000dacd:	66 85 c0             	test   ax,ax
c000dad0:	0f 84 28 01 00 00    	je     c000dbfe <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000dad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dada:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000dae0:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000dae5:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000daeb:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000daf1:	89 f1                	mov    ecx,esi
c000daf3:	89 fb                	mov    ebx,edi
c000daf5:	01 c1                	add    ecx,eax
c000daf7:	89 d5                	mov    ebp,edx
c000daf9:	11 d3                	adc    ebx,edx
c000dafb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dafe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000db02:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000db06:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000db0c:	09 dd                	or     ebp,ebx
c000db0e:	0f 85 fa 00 00 00    	jne    c000dc0e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000db14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db20:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000db28:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000db34:	eb 45                	jmp    c000db7b <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000db36:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000db3a:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000db3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db43:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000db47:	0f 84 c1 00 00 00    	je     c000dc0e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000db4d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000db51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000db54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000db57:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000db5a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000db5d:	89 c1                	mov    ecx,eax
c000db5f:	89 d3                	mov    ebx,edx
c000db61:	01 f1                	add    ecx,esi
c000db63:	11 fb                	adc    ebx,edi
c000db65:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000db68:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000db6c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000db6f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000db73:	09 d3                	or     ebx,edx
c000db75:	0f 85 93 00 00 00    	jne    c000dc0e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000db7b:	49                   	dec    ecx
c000db7c:	75 b8                	jne    c000db36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000db7e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000db81:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000db85:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000db89:	39 e9                	cmp    ecx,ebp
c000db8b:	89 d9                	mov    ecx,ebx
c000db8d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000db91:	72 a3                	jb     c000db36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000db93:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000db98:	39 f1                	cmp    ecx,esi
c000db9a:	b9 00 00 00 00       	mov    ecx,0x0
c000db9f:	19 f9                	sbb    ecx,edi
c000dba1:	73 93                	jae    c000db36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dba3:	39 e8                	cmp    eax,ebp
c000dba5:	89 d1                	mov    ecx,edx
c000dba7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dbab:	73 13                	jae    c000dbc0 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dbad:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dbb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dbb4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dbb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dbbc:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dbc0:	83 ec 08             	sub    esp,0x8
c000dbc3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dbc7:	50                   	push   eax
c000dbc8:	e8 7e fe ff ff       	call   c000da4b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dbcd:	83 c4 0c             	add    esp,0xc
c000dbd0:	89 fa                	mov    edx,edi
c000dbd2:	89 f0                	mov    eax,esi
c000dbd4:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dbd8:	03 05 f0 ba 03 c0    	add    eax,DWORD PTR ds:0xc003baf0
c000dbde:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dbe5:	a3 f0 ba 03 c0       	mov    ds:0xc003baf0,eax
c000dbea:	52                   	push   edx
c000dbeb:	50                   	push   eax
c000dbec:	68 e1 8d 03 c0       	push   0xc0038de1
c000dbf1:	e8 f4 f1 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000dbf6:	83 c4 10             	add    esp,0x10
c000dbf9:	e9 38 ff ff ff       	jmp    c000db36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dbfe:	83 ec 0c             	sub    esp,0xc
c000dc01:	68 d3 8d 03 c0       	push   0xc0038dd3
c000dc06:	e8 fd f2 ff ff       	call   c000cf08 <panic(char const*)>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	bb 40 01 00 00       	mov    ebx,0x140
c000dc13:	83 ec 08             	sub    esp,0x8
c000dc16:	6a 00                	push   0x0
c000dc18:	53                   	push   ebx
c000dc19:	43                   	inc    ebx
c000dc1a:	e8 98 fc ff ff       	call   c000d8b7 <Phys::setPageState(unsigned long, bool)>
c000dc1f:	ff 05 f0 ba 03 c0    	inc    DWORD PTR ds:0xc003baf0
c000dc25:	83 c4 10             	add    esp,0x10
c000dc28:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dc2e:	75 e3                	jne    c000dc13 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dc30:	83 c4 2c             	add    esp,0x2c
c000dc33:	5b                   	pop    ebx
c000dc34:	5e                   	pop    esi
c000dc35:	5f                   	pop    edi
c000dc36:	5d                   	pop    ebp
c000dc37:	c3                   	ret    

c000dc38 <Pipe::isAtty()>:
c000dc38:	31 c0                	xor    eax,eax
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <Pipe::~Pipe()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	ba 40 8e 03 c0       	mov    edx,0xc0038e40
c000dc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc48:	89 10                	mov    DWORD PTR [eax],edx
c000dc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4e:	83 ec 0c             	sub    esp,0xc
c000dc51:	50                   	push   eax
c000dc52:	e8 d3 33 00 00       	call   c001102a <UnixFile::~UnixFile()>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	90                   	nop
c000dc5b:	83 c4 0c             	add    esp,0xc
c000dc5e:	c3                   	ret    
c000dc5f:	90                   	nop

c000dc60 <Pipe::~Pipe()>:
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	83 ec 0c             	sub    esp,0xc
c000dc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6a:	e8 cd ff ff ff       	call   c000dc3c <Pipe::~Pipe()>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	83 ec 08             	sub    esp,0x8
c000dc75:	6a 20                	push   0x20
c000dc77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc7b:	e8 29 47 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c000dc80:	83 c4 10             	add    esp,0x10
c000dc83:	83 c4 0c             	add    esp,0xc
c000dc86:	c3                   	ret    
c000dc87:	90                   	nop

c000dc88 <Pipe::read(unsigned long long, void*, int*)>:
c000dc88:	55                   	push   ebp
c000dc89:	57                   	push   edi
c000dc8a:	56                   	push   esi
c000dc8b:	53                   	push   ebx
c000dc8c:	83 ec 1c             	sub    esp,0x1c
c000dc8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc93:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dc9b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dc9e:	89 c8                	mov    eax,ecx
c000dca0:	99                   	cdq    
c000dca1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000dca5:	74 19                	je     c000dcc0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dca7:	39 f9                	cmp    ecx,edi
c000dca9:	89 d1                	mov    ecx,edx
c000dcab:	19 f1                	sbb    ecx,esi
c000dcad:	73 11                	jae    c000dcc0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dcaf:	e8 d8 05 00 00       	call   c000e28c <lockScheduler()>
c000dcb4:	e8 07 09 00 00       	call   c000e5c0 <schedule()>
c000dcb9:	e8 d0 05 00 00       	call   c000e28e <unlockScheduler()>
c000dcbe:	eb db                	jmp    c000dc9b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000dcc0:	39 f8                	cmp    eax,edi
c000dcc2:	89 d1                	mov    ecx,edx
c000dcc4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcc8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dccc:	19 f1                	sbb    ecx,esi
c000dcce:	73 08                	jae    c000dcd8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dcd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcd8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dcdb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dcde:	29 c6                	sub    esi,eax
c000dce0:	89 f1                	mov    ecx,esi
c000dce2:	c1 f9 1f             	sar    ecx,0x1f
c000dce5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000dce9:	89 ca                	mov    edx,ecx
c000dceb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dcef:	19 d1                	sbb    ecx,edx
c000dcf1:	73 04                	jae    c000dcf7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000dcf3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcf7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000dcfb:	89 fd                	mov    ebp,edi
c000dcfd:	29 f5                	sub    ebp,esi
c000dcff:	85 f6                	test   esi,esi
c000dd01:	74 12                	je     c000dd15 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000dd03:	52                   	push   edx
c000dd04:	56                   	push   esi
c000dd05:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000dd08:	50                   	push   eax
c000dd09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000dd0d:	e8 62 29 ff ff       	call   c0000674 <memcpy>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 ed                	test   ebp,ebp
c000dd17:	74 12                	je     c000dd2b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000dd19:	50                   	push   eax
c000dd1a:	55                   	push   ebp
c000dd1b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dd1e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000dd22:	56                   	push   esi
c000dd23:	e8 4c 29 ff ff       	call   c0000674 <memcpy>
c000dd28:	83 c4 10             	add    esp,0x10
c000dd2b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000dd2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dd31:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dd34:	99                   	cdq    
c000dd35:	89 f7                	mov    edi,esi
c000dd37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dd3f:	c1 ff 1f             	sar    edi,0x1f
c000dd42:	57                   	push   edi
c000dd43:	56                   	push   esi
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	e8 f1 09 01 00       	call   c001e73c <__umoddi3>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000dd51:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dd56:	75 10                	jne    c000dd68 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000dd58:	83 ec 0c             	sub    esp,0xc
c000dd5b:	68 fd 8d 03 c0       	push   0xc0038dfd
c000dd60:	e8 a3 f1 ff ff       	call   c000cf08 <panic(char const*)>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd70:	89 10                	mov    DWORD PTR [eax],edx
c000dd72:	83 c4 1c             	add    esp,0x1c
c000dd75:	31 c0                	xor    eax,eax
c000dd77:	5b                   	pop    ebx
c000dd78:	5e                   	pop    esi
c000dd79:	5f                   	pop    edi
c000dd7a:	5d                   	pop    ebp
c000dd7b:	c3                   	ret    

c000dd7c <Pipe::write(unsigned long long, void*, int*)>:
c000dd7c:	55                   	push   ebp
c000dd7d:	57                   	push   edi
c000dd7e:	56                   	push   esi
c000dd7f:	53                   	push   ebx
c000dd80:	83 ec 1c             	sub    esp,0x1c
c000dd83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd87:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000dd8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dd8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd92:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000dd95:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000dd98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd9c:	89 de                	mov    esi,ebx
c000dd9e:	89 df                	mov    edi,ebx
c000dda0:	c1 ff 1f             	sar    edi,0x1f
c000dda3:	01 c6                	add    esi,eax
c000dda5:	89 c8                	mov    eax,ecx
c000dda7:	11 d7                	adc    edi,edx
c000dda9:	99                   	cdq    
c000ddaa:	39 f1                	cmp    ecx,esi
c000ddac:	89 d0                	mov    eax,edx
c000ddae:	19 f8                	sbb    eax,edi
c000ddb0:	b8 01 00 00 00       	mov    eax,0x1
c000ddb5:	0f 82 80 00 00 00    	jb     c000de3b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ddbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ddbe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ddc1:	01 d8                	add    eax,ebx
c000ddc3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ddc7:	99                   	cdq    
c000ddc8:	f7 f9                	idiv   ecx
c000ddca:	29 d1                	sub    ecx,edx
c000ddcc:	89 d7                	mov    edi,edx
c000ddce:	89 c8                	mov    eax,ecx
c000ddd0:	99                   	cdq    
c000ddd1:	39 ce                	cmp    esi,ecx
c000ddd3:	19 d3                	sbb    ebx,edx
c000ddd5:	bb 00 00 00 00       	mov    ebx,0x0
c000ddda:	72 04                	jb     c000dde0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000dddc:	89 f3                	mov    ebx,esi
c000ddde:	29 cb                	sub    ebx,ecx
c000dde0:	89 f1                	mov    ecx,esi
c000dde2:	29 d9                	sub    ecx,ebx
c000dde4:	74 1a                	je     c000de00 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000dde6:	52                   	push   edx
c000dde7:	51                   	push   ecx
c000dde8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddf0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ddf3:	57                   	push   edi
c000ddf4:	e8 7b 28 ff ff       	call   c0000674 <memcpy>
c000ddf9:	83 c4 10             	add    esp,0x10
c000ddfc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de00:	85 db                	test   ebx,ebx
c000de02:	74 12                	je     c000de16 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000de04:	50                   	push   eax
c000de05:	53                   	push   ebx
c000de06:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000de0a:	51                   	push   ecx
c000de0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000de0e:	e8 61 28 ff ff       	call   c0000674 <memcpy>
c000de13:	83 c4 10             	add    esp,0x10
c000de16:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000de19:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de1e:	75 10                	jne    c000de30 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000de20:	83 ec 0c             	sub    esp,0xc
c000de23:	68 19 8e 03 c0       	push   0xc0038e19
c000de28:	e8 db f0 ff ff       	call   c000cf08 <panic(char const*)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000de37:	89 38                	mov    DWORD PTR [eax],edi
c000de39:	31 c0                	xor    eax,eax
c000de3b:	83 c4 1c             	add    esp,0x1c
c000de3e:	5b                   	pop    ebx
c000de3f:	5e                   	pop    esi
c000de40:	5f                   	pop    edi
c000de41:	5d                   	pop    ebp
c000de42:	c3                   	ret    
c000de43:	90                   	nop

c000de44 <Pipe::Pipe(int)>:
c000de44:	83 ec 0c             	sub    esp,0xc
c000de47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4b:	83 ec 08             	sub    esp,0x8
c000de4e:	6a 00                	push   0x0
c000de50:	50                   	push   eax
c000de51:	e8 70 31 00 00       	call   c0010fc6 <UnixFile::UnixFile(int)>
c000de56:	83 c4 10             	add    esp,0x10
c000de59:	ba 40 8e 03 c0       	mov    edx,0xc0038e40
c000de5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de62:	89 10                	mov    DWORD PTR [eax],edx
c000de64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000de6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de73:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000de7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de7e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000de85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de89:	83 ec 0c             	sub    esp,0xc
c000de8c:	50                   	push   eax
c000de8d:	e8 53 f5 ff ff       	call   c000d3e5 <malloc>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 c2                	mov    edx,eax
c000de97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000dea6:	90                   	nop
c000dea7:	83 c4 0c             	add    esp,0xc
c000deaa:	c3                   	ret    
c000deab:	90                   	nop

c000deac <changeTSS>:
c000deac:	83 ec 0c             	sub    esp,0xc
c000deaf:	e8 1c 92 00 00       	call   c00170d0 <thisCPU()>
c000deb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000deba:	83 ec 08             	sub    esp,0x8
c000debd:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000dec0:	05 7c 11 00 00       	add    eax,0x117c
c000dec5:	c1 e1 15             	shl    ecx,0x15
c000dec8:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000decd:	29 ca                	sub    edx,ecx
c000decf:	52                   	push   edx
c000ded0:	50                   	push   eax
c000ded1:	e8 28 2e 00 00       	call   c0010cfe <TSS::setESP(unsigned long)>
c000ded6:	83 c4 1c             	add    esp,0x1c
c000ded9:	c3                   	ret    

c000deda <Process::addArgs(char**)>:
c000deda:	57                   	push   edi
c000dedb:	56                   	push   esi
c000dedc:	53                   	push   ebx
c000dedd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dee1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dee5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000deef:	85 ff                	test   edi,edi
c000def1:	74 3d                	je     c000df30 <Process::addArgs(char**)+0x56>
c000def3:	8b 07                	mov    eax,DWORD PTR [edi]
c000def5:	85 c0                	test   eax,eax
c000def7:	74 37                	je     c000df30 <Process::addArgs(char**)+0x56>
c000def9:	31 db                	xor    ebx,ebx
c000defb:	83 ec 0c             	sub    esp,0xc
c000defe:	50                   	push   eax
c000deff:	e8 d8 27 ff ff       	call   c00006dc <strlen>
c000df04:	40                   	inc    eax
c000df05:	89 04 24             	mov    DWORD PTR [esp],eax
c000df08:	e8 d8 f4 ff ff       	call   c000d3e5 <malloc>
c000df0d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000df14:	5a                   	pop    edx
c000df15:	59                   	pop    ecx
c000df16:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000df19:	43                   	inc    ebx
c000df1a:	50                   	push   eax
c000df1b:	e8 5c 28 ff ff       	call   c000077c <strcpy>
c000df20:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000df2c:	85 c0                	test   eax,eax
c000df2e:	75 cb                	jne    c000defb <Process::addArgs(char**)+0x21>
c000df30:	5b                   	pop    ebx
c000df31:	5e                   	pop    esi
c000df32:	5f                   	pop    edi
c000df33:	c3                   	ret    

c000df34 <Process::Process(char const*, Process*, char**)>:
c000df34:	56                   	push   esi
c000df35:	53                   	push   ebx
c000df36:	83 ec 14             	sub    esp,0x14
c000df39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df3d:	05 0c 02 00 00       	add    eax,0x20c
c000df42:	bb 07 00 00 00       	mov    ebx,0x7
c000df47:	89 c6                	mov    esi,eax
c000df49:	85 db                	test   ebx,ebx
c000df4b:	78 12                	js     c000df5f <Process::Process(char const*, Process*, char**)+0x2b>
c000df4d:	83 ec 0c             	sub    esp,0xc
c000df50:	56                   	push   esi
c000df51:	e8 12 0a 01 00       	call   c001e968 <ThreadControlBlock::ThreadControlBlock()>
c000df56:	83 c4 10             	add    esp,0x10
c000df59:	83 c6 63             	add    esi,0x63
c000df5c:	4b                   	dec    ebx
c000df5d:	eb ea                	jmp    c000df49 <Process::Process(char const*, Process*, char**)+0x15>
c000df5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df63:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000df6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df6e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000df77:	a1 58 ad 03 c0       	mov    eax,ds:0xc003ad58
c000df7c:	8d 50 01             	lea    edx,[eax+0x1]
c000df7f:	89 15 58 ad 03 c0    	mov    DWORD PTR ds:0xc003ad58,edx
c000df85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df89:	89 02                	mov    DWORD PTR [edx],eax
c000df8b:	83 ec 0c             	sub    esp,0xc
c000df8e:	6a 10                	push   0x10
c000df90:	e8 05 44 00 00       	call   c001239a <operator new(unsigned long)>
c000df95:	83 c4 10             	add    esp,0x10
c000df98:	89 c3                	mov    ebx,eax
c000df9a:	83 ec 08             	sub    esp,0x8
c000df9d:	6a 00                	push   0x0
c000df9f:	53                   	push   ebx
c000dfa0:	e8 89 40 00 00       	call   c001202e <VAS::VAS(bool)>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfac:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000dfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000dfc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfc4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dfc8:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000dfce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfd2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dfd8:	85 c0                	test   eax,eax
c000dfda:	74 42                	je     c000e01e <Process::Process(char const*, Process*, char**)+0xea>
c000dfdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfe0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dfe6:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000dfec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff0:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000dff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dffa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e000:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00a:	05 0c 01 00 00       	add    eax,0x10c
c000e00f:	83 ec 08             	sub    esp,0x8
c000e012:	52                   	push   edx
c000e013:	50                   	push   eax
c000e014:	e8 63 27 ff ff       	call   c000077c <strcpy>
c000e019:	83 c4 10             	add    esp,0x10
c000e01c:	eb 5c                	jmp    c000e07a <Process::Process(char const*, Process*, char**)+0x146>
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	68 60 12 00 00       	push   0x1260
c000e026:	e8 6f 43 00 00       	call   c001239a <operator new(unsigned long)>
c000e02b:	83 c4 10             	add    esp,0x10
c000e02e:	89 c3                	mov    ebx,eax
c000e030:	83 ec 08             	sub    esp,0x8
c000e033:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e037:	53                   	push   ebx
c000e038:	e8 bf 29 00 00       	call   c00109fc <VgaText::VgaText(char const*)>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e044:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e04e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e054:	83 ec 0c             	sub    esp,0xc
c000e057:	50                   	push   eax
c000e058:	e8 a0 1d 00 00       	call   c000fdfd <addToTerminalCycle(VgaText*)>
c000e05d:	83 c4 10             	add    esp,0x10
c000e060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e064:	05 0c 01 00 00       	add    eax,0x10c
c000e069:	83 ec 08             	sub    esp,0x8
c000e06c:	68 54 8e 03 c0       	push   0xc0038e54
c000e071:	50                   	push   eax
c000e072:	e8 05 27 ff ff       	call   c000077c <strcpy>
c000e077:	83 c4 10             	add    esp,0x10
c000e07a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07e:	83 c0 0c             	add    eax,0xc
c000e081:	83 ec 08             	sub    esp,0x8
c000e084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e088:	50                   	push   eax
c000e089:	e8 ee 26 ff ff       	call   c000077c <strcpy>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	83 ec 08             	sub    esp,0x8
c000e094:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e098:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e09c:	e8 39 fe ff ff       	call   c000deda <Process::addArgs(char**)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	83 ec 08             	sub    esp,0x8
c000e0a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0af:	e8 d6 d8 ff ff       	call   c000b98a <loadProgramIntoMemory(Process*, char const*)>
c000e0b4:	83 c4 10             	add    esp,0x10
c000e0b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e0bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e0bf:	83 f0 01             	xor    eax,0x1
c000e0c2:	88 c2                	mov    dl,al
c000e0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c8:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e0ce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e0d3:	83 ec 08             	sub    esp,0x8
c000e0d6:	50                   	push   eax
c000e0d7:	68 a8 8e 03 c0       	push   0xc0038ea8
c000e0dc:	e8 09 ed ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	90                   	nop
c000e0e5:	83 c4 14             	add    esp,0x14
c000e0e8:	5b                   	pop    ebx
c000e0e9:	5e                   	pop    esi
c000e0ea:	c3                   	ret    
c000e0eb:	90                   	nop

c000e0ec <Process::Process(bool, char const*, Process*, char**)>:
c000e0ec:	56                   	push   esi
c000e0ed:	53                   	push   ebx
c000e0ee:	83 ec 14             	sub    esp,0x14
c000e0f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e0f5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e0f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0fd:	05 0c 02 00 00       	add    eax,0x20c
c000e102:	bb 07 00 00 00       	mov    ebx,0x7
c000e107:	89 c6                	mov    esi,eax
c000e109:	85 db                	test   ebx,ebx
c000e10b:	78 12                	js     c000e11f <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e10d:	83 ec 0c             	sub    esp,0xc
c000e110:	56                   	push   esi
c000e111:	e8 52 08 01 00       	call   c001e968 <ThreadControlBlock::ThreadControlBlock()>
c000e116:	83 c4 10             	add    esp,0x10
c000e119:	83 c6 63             	add    esi,0x63
c000e11c:	4b                   	dec    ebx
c000e11d:	eb ea                	jmp    c000e109 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e11f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e123:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e12a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e12e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e137:	a1 58 ad 03 c0       	mov    eax,ds:0xc003ad58
c000e13c:	8d 50 01             	lea    edx,[eax+0x1]
c000e13f:	89 15 58 ad 03 c0    	mov    DWORD PTR ds:0xc003ad58,edx
c000e145:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e149:	89 02                	mov    DWORD PTR [edx],eax
c000e14b:	83 ec 0c             	sub    esp,0xc
c000e14e:	6a 10                	push   0x10
c000e150:	e8 45 42 00 00       	call   c001239a <operator new(unsigned long)>
c000e155:	83 c4 10             	add    esp,0x10
c000e158:	89 c3                	mov    ebx,eax
c000e15a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e15f:	83 ec 08             	sub    esp,0x8
c000e162:	50                   	push   eax
c000e163:	53                   	push   ebx
c000e164:	e8 c5 3e 00 00       	call   c001202e <VAS::VAS(bool)>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e170:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e17a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e188:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e18c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e196:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e19c:	85 c0                	test   eax,eax
c000e19e:	74 42                	je     c000e1e2 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e1a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e1aa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e1b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e1ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1be:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e1c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e1ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ce:	05 0c 01 00 00       	add    eax,0x10c
c000e1d3:	83 ec 08             	sub    esp,0x8
c000e1d6:	52                   	push   edx
c000e1d7:	50                   	push   eax
c000e1d8:	e8 9f 25 ff ff       	call   c000077c <strcpy>
c000e1dd:	83 c4 10             	add    esp,0x10
c000e1e0:	eb 5c                	jmp    c000e23e <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e1e2:	83 ec 0c             	sub    esp,0xc
c000e1e5:	68 60 12 00 00       	push   0x1260
c000e1ea:	e8 ab 41 00 00       	call   c001239a <operator new(unsigned long)>
c000e1ef:	83 c4 10             	add    esp,0x10
c000e1f2:	89 c3                	mov    ebx,eax
c000e1f4:	83 ec 08             	sub    esp,0x8
c000e1f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1fb:	53                   	push   ebx
c000e1fc:	e8 fb 27 00 00       	call   c00109fc <VgaText::VgaText(char const*)>
c000e201:	83 c4 10             	add    esp,0x10
c000e204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e208:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e20e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e212:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e218:	83 ec 0c             	sub    esp,0xc
c000e21b:	50                   	push   eax
c000e21c:	e8 dc 1b 00 00       	call   c000fdfd <addToTerminalCycle(VgaText*)>
c000e221:	83 c4 10             	add    esp,0x10
c000e224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e228:	05 0c 01 00 00       	add    eax,0x10c
c000e22d:	83 ec 08             	sub    esp,0x8
c000e230:	68 54 8e 03 c0       	push   0xc0038e54
c000e235:	50                   	push   eax
c000e236:	e8 41 25 ff ff       	call   c000077c <strcpy>
c000e23b:	83 c4 10             	add    esp,0x10
c000e23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e242:	83 c0 0c             	add    eax,0xc
c000e245:	83 ec 08             	sub    esp,0x8
c000e248:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e24c:	50                   	push   eax
c000e24d:	e8 2a 25 ff ff       	call   c000077c <strcpy>
c000e252:	83 c4 10             	add    esp,0x10
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e25c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e260:	e8 75 fc ff ff       	call   c000deda <Process::addArgs(char**)>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	90                   	nop
c000e269:	83 c4 14             	add    esp,0x14
c000e26c:	5b                   	pop    ebx
c000e26d:	5e                   	pop    esi
c000e26e:	c3                   	ret    

c000e26f <disableIRQs()>:
c000e26f:	fa                   	cli    
c000e270:	ff 05 54 bb 03 c0    	inc    DWORD PTR ds:0xc003bb54
c000e276:	c3                   	ret    

c000e277 <getIRQNestingLevel()>:
c000e277:	a1 54 bb 03 c0       	mov    eax,ds:0xc003bb54
c000e27c:	c3                   	ret    

c000e27d <enableIRQs()>:
c000e27d:	a1 54 bb 03 c0       	mov    eax,ds:0xc003bb54
c000e282:	48                   	dec    eax
c000e283:	a3 54 bb 03 c0       	mov    ds:0xc003bb54,eax
c000e288:	75 01                	jne    c000e28b <enableIRQs()+0xe>
c000e28a:	fb                   	sti    
c000e28b:	c3                   	ret    

c000e28c <lockScheduler()>:
c000e28c:	eb e1                	jmp    c000e26f <disableIRQs()>

c000e28e <unlockScheduler()>:
c000e28e:	eb ed                	jmp    c000e27d <enableIRQs()>

c000e290 <userModeEntryPoint(void*)>:
c000e290:	83 ec 0c             	sub    esp,0xc
c000e293:	e8 f6 ff ff ff       	call   c000e28e <unlockScheduler()>
c000e298:	fb                   	sti    
c000e299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e29e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e2a1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e2a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ab:	83 c4 0c             	add    esp,0xc
c000e2ae:	e9 33 1f ff ff       	jmp    c00001e6 <goToUsermode>

c000e2b3 <lockStuff()>:
c000e2b3:	e8 b7 ff ff ff       	call   c000e26f <disableIRQs()>
c000e2b8:	ff 05 50 bb 03 c0    	inc    DWORD PTR ds:0xc003bb50
c000e2be:	c3                   	ret    

c000e2bf <taskStartupFunction>:
c000e2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e2c4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e2c7:	c3                   	ret    

c000e2c8 <updateTimeUsed()>:
c000e2c8:	57                   	push   edi
c000e2c9:	56                   	push   esi
c000e2ca:	53                   	push   ebx
c000e2cb:	e8 00 8e 00 00       	call   c00170d0 <thisCPU()>
c000e2d0:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e2d7:	74 49                	je     c000e322 <updateTimeUsed()+0x5a>
c000e2d9:	0f 31                	rdtsc  
c000e2db:	89 c1                	mov    ecx,eax
c000e2dd:	a3 90 bb 03 c0       	mov    ds:0xc003bb90,eax
c000e2e2:	2b 0d 80 bb 03 c0    	sub    ecx,DWORD PTR ds:0xc003bb80
c000e2e8:	89 d3                	mov    ebx,edx
c000e2ea:	89 0d 88 bb 03 c0    	mov    DWORD PTR ds:0xc003bb88,ecx
c000e2f0:	1b 1d 84 bb 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bb84
c000e2f6:	a3 80 bb 03 c0       	mov    ds:0xc003bb80,eax
c000e2fb:	89 1d 8c bb 03 c0    	mov    DWORD PTR ds:0xc003bb8c,ebx
c000e301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e306:	89 15 94 bb 03 c0    	mov    DWORD PTR ds:0xc003bb94,edx
c000e30c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e30f:	89 15 84 bb 03 c0    	mov    DWORD PTR ds:0xc003bb84,edx
c000e315:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e318:	01 f1                	add    ecx,esi
c000e31a:	11 fb                	adc    ebx,edi
c000e31c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e31f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e322:	5b                   	pop    ebx
c000e323:	5e                   	pop    esi
c000e324:	5f                   	pop    edi
c000e325:	c3                   	ret    

c000e326 <switchToThread(ThreadControlBlock*)>:
c000e326:	53                   	push   ebx
c000e327:	83 ec 08             	sub    esp,0x8
c000e32a:	a1 50 bb 03 c0       	mov    eax,ds:0xc003bb50
c000e32f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e333:	85 c0                	test   eax,eax
c000e335:	75 30                	jne    c000e367 <switchToThread(ThreadControlBlock*)+0x41>
c000e337:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e33a:	3c ff                	cmp    al,0xff
c000e33c:	74 25                	je     c000e363 <switchToThread(ThreadControlBlock*)+0x3d>
c000e33e:	0f b6 d0             	movzx  edx,al
c000e341:	b8 84 03 00 00       	mov    eax,0x384
c000e346:	29 d0                	sub    eax,edx
c000e348:	c1 e0 10             	shl    eax,0x10
c000e34b:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e34e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e351:	e8 72 ff ff ff       	call   c000e2c8 <updateTimeUsed()>
c000e356:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e35a:	83 c4 08             	add    esp,0x8
c000e35d:	5b                   	pop    ebx
c000e35e:	e9 bc 1e ff ff       	jmp    c000021f <switchToThreadASM>
c000e363:	31 c0                	xor    eax,eax
c000e365:	eb e7                	jmp    c000e34e <switchToThread(ThreadControlBlock*)+0x28>
c000e367:	c7 05 4c bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bb4c,0x1
c000e371:	83 c4 08             	add    esp,0x8
c000e374:	5b                   	pop    ebx
c000e375:	c3                   	ret    

c000e376 <Semaphore::Semaphore(int)>:
c000e376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e37a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e37e:	89 10                	mov    DWORD PTR [eax],edx
c000e380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e384:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e38f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e39a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e3a1:	90                   	nop
c000e3a2:	c3                   	ret    
c000e3a3:	90                   	nop

c000e3a4 <Mutex::Mutex()>:
c000e3a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3a8:	6a 01                	push   0x1
c000e3aa:	50                   	push   eax
c000e3ab:	e8 c6 ff ff ff       	call   c000e376 <Semaphore::Semaphore(int)>
c000e3b0:	83 c4 08             	add    esp,0x8
c000e3b3:	90                   	nop
c000e3b4:	c3                   	ret    
c000e3b5:	90                   	nop

c000e3b6 <Process::createThread(void (*)(void*), void*, int)>:
c000e3b6:	55                   	push   ebp
c000e3b7:	31 c9                	xor    ecx,ecx
c000e3b9:	57                   	push   edi
c000e3ba:	56                   	push   esi
c000e3bb:	53                   	push   ebx
c000e3bc:	83 ec 1c             	sub    esp,0x1c
c000e3bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e3c3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e3ca:	89 f2                	mov    edx,esi
c000e3cc:	0f b7 c2             	movzx  eax,dx
c000e3cf:	83 e2 01             	and    edx,0x1
c000e3d2:	74 14                	je     c000e3e8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e3d4:	d1 f8                	sar    eax,1
c000e3d6:	41                   	inc    ecx
c000e3d7:	89 c2                	mov    edx,eax
c000e3d9:	83 f9 10             	cmp    ecx,0x10
c000e3dc:	75 ee                	jne    c000e3cc <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e3de:	83 c4 1c             	add    esp,0x1c
c000e3e1:	31 c0                	xor    eax,eax
c000e3e3:	5b                   	pop    ebx
c000e3e4:	5e                   	pop    esi
c000e3e5:	5f                   	pop    edi
c000e3e6:	5d                   	pop    ebp
c000e3e7:	c3                   	ret    
c000e3e8:	83 ec 08             	sub    esp,0x8
c000e3eb:	b8 01 00 00 00       	mov    eax,0x1
c000e3f0:	d3 e0                	shl    eax,cl
c000e3f2:	09 c6                	or     esi,eax
c000e3f4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e3fa:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e401:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e404:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e407:	01 ce                	add    esi,ecx
c000e409:	89 f0                	mov    eax,esi
c000e40b:	c1 e0 05             	shl    eax,0x5
c000e40e:	01 c6                	add    esi,eax
c000e410:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e413:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e419:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e41f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e423:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e429:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e42f:	89 ca                	mov    edx,ecx
c000e431:	f7 da                	neg    edx
c000e433:	c1 e2 15             	shl    edx,0x15
c000e436:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e43c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e442:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e446:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e450:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e456:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e45a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e460:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e46a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e474:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e47b:	50                   	push   eax
c000e47c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e480:	68 70 bb 03 c0       	push   0xc003bb70
c000e485:	e8 74 05 01 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e48a:	83 c4 10             	add    esp,0x10
c000e48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e491:	83 c4 1c             	add    esp,0x1c
c000e494:	5b                   	pop    ebx
c000e495:	5e                   	pop    esi
c000e496:	5f                   	pop    edi
c000e497:	5d                   	pop    ebp
c000e498:	c3                   	ret    
c000e499:	90                   	nop

c000e49a <Process::createUserThread()>:
c000e49a:	83 ec 0c             	sub    esp,0xc
c000e49d:	68 80 00 00 00       	push   0x80
c000e4a2:	6a 00                	push   0x0
c000e4a4:	68 90 e2 00 c0       	push   0xc000e290
c000e4a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ad:	e8 04 ff ff ff       	call   c000e3b6 <Process::createThread(void (*)(void*), void*, int)>
c000e4b2:	83 c4 1c             	add    esp,0x1c
c000e4b5:	c3                   	ret    

c000e4b6 <setupMultitasking(void (*)())>:
c000e4b6:	56                   	push   esi
c000e4b7:	53                   	push   ebx
c000e4b8:	53                   	push   ebx
c000e4b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e4bd:	eb 10                	jmp    c000e4cf <setupMultitasking(void (*)())+0x19>
c000e4bf:	83 ec 0c             	sub    esp,0xc
c000e4c2:	68 70 bb 03 c0       	push   0xc003bb70
c000e4c7:	e8 22 06 01 00       	call   c001eaee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4cc:	83 c4 10             	add    esp,0x10
c000e4cf:	83 ec 0c             	sub    esp,0xc
c000e4d2:	68 70 bb 03 c0       	push   0xc003bb70
c000e4d7:	e8 f6 05 01 00       	call   c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4dc:	83 c4 10             	add    esp,0x10
c000e4df:	84 c0                	test   al,al
c000e4e1:	74 dc                	je     c000e4bf <setupMultitasking(void (*)())+0x9>
c000e4e3:	83 ec 0c             	sub    esp,0xc
c000e4e6:	68 3b 07 00 00       	push   0x73b
c000e4eb:	e8 aa 3e 00 00       	call   c001239a <operator new(unsigned long)>
c000e4f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e4f7:	89 c3                	mov    ebx,eax
c000e4f9:	6a 00                	push   0x0
c000e4fb:	68 58 8e 03 c0       	push   0xc0038e58
c000e500:	6a 01                	push   0x1
c000e502:	50                   	push   eax
c000e503:	e8 e4 fb ff ff       	call   c000e0ec <Process::Process(bool, char const*, Process*, char**)>
c000e508:	83 c4 18             	add    esp,0x18
c000e50b:	89 1d 7c bb 03 c0    	mov    DWORD PTR ds:0xc003bb7c,ebx
c000e511:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e517:	68 d0 8e 03 c0       	push   0xc0038ed0
c000e51c:	e8 c9 e8 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000e521:	58                   	pop    eax
c000e522:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e528:	e8 44 20 00 00       	call   c0010571 <setActiveTerminal(VgaText*)>
c000e52d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e535:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e53b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e53e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e548:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e54e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e554:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e55e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e568:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e572:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e578:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e57e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e588:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e58e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e598:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e59e:	5a                   	pop    edx
c000e59f:	59                   	pop    ecx
c000e5a0:	68 54 8e 03 c0       	push   0xc0038e54
c000e5a5:	50                   	push   eax
c000e5a6:	e8 d1 21 ff ff       	call   c000077c <strcpy>
c000e5ab:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e5b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e5b6:	83 c4 14             	add    esp,0x14
c000e5b9:	5b                   	pop    ebx
c000e5ba:	5e                   	pop    esi
c000e5bb:	e9 51 1c ff ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c000e5c0 <schedule()>:
c000e5c0:	a1 50 bb 03 c0       	mov    eax,ds:0xc003bb50
c000e5c5:	85 c0                	test   eax,eax
c000e5c7:	74 0b                	je     c000e5d4 <schedule()+0x14>
c000e5c9:	c7 05 4c bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bb4c,0x1
c000e5d3:	c3                   	ret    
c000e5d4:	53                   	push   ebx
c000e5d5:	83 ec 14             	sub    esp,0x14
c000e5d8:	68 70 bb 03 c0       	push   0xc003bb70
c000e5dd:	e8 f0 04 01 00       	call   c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e5e2:	83 c4 10             	add    esp,0x10
c000e5e5:	84 c0                	test   al,al
c000e5e7:	75 38                	jne    c000e621 <schedule()+0x61>
c000e5e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e5f1:	4a                   	dec    edx
c000e5f2:	74 32                	je     c000e626 <schedule()+0x66>
c000e5f4:	83 ec 0c             	sub    esp,0xc
c000e5f7:	68 70 bb 03 c0       	push   0xc003bb70
c000e5fc:	e8 9b 05 01 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e601:	c7 04 24 70 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb70
c000e608:	89 c3                	mov    ebx,eax
c000e60a:	e8 df 04 01 00       	call   c001eaee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e60f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e616:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e619:	e8 08 fd ff ff       	call   c000e326 <switchToThread(ThreadControlBlock*)>
c000e61e:	83 c4 10             	add    esp,0x10
c000e621:	83 c4 08             	add    esp,0x8
c000e624:	5b                   	pop    ebx
c000e625:	c3                   	ret    
c000e626:	83 ec 08             	sub    esp,0x8
c000e629:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e630:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e636:	68 70 bb 03 c0       	push   0xc003bb70
c000e63b:	e8 be 03 01 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e640:	83 c4 10             	add    esp,0x10
c000e643:	eb af                	jmp    c000e5f4 <schedule()+0x34>

c000e645 <unlockStuff()>:
c000e645:	a1 50 bb 03 c0       	mov    eax,ds:0xc003bb50
c000e64a:	48                   	dec    eax
c000e64b:	a3 50 bb 03 c0       	mov    ds:0xc003bb50,eax
c000e650:	75 09                	jne    c000e65b <unlockStuff()+0x16>
c000e652:	a1 4c bb 03 c0       	mov    eax,ds:0xc003bb4c
c000e657:	85 c0                	test   eax,eax
c000e659:	75 05                	jne    c000e660 <unlockStuff()+0x1b>
c000e65b:	e9 1d fc ff ff       	jmp    c000e27d <enableIRQs()>
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	c7 05 4c bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bb4c,0x0
c000e66d:	e8 4e ff ff ff       	call   c000e5c0 <schedule()>
c000e672:	83 c4 0c             	add    esp,0xc
c000e675:	e9 03 fc ff ff       	jmp    c000e27d <enableIRQs()>

c000e67a <forkProcess(regs*)>:
c000e67a:	56                   	push   esi
c000e67b:	53                   	push   ebx
c000e67c:	50                   	push   eax
c000e67d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e682:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e685:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e68d:	0f 85 3e 01 00 00    	jne    c000e7d1 <forkProcess(regs*)+0x157>
c000e693:	e8 1b fc ff ff       	call   c000e2b3 <lockStuff()>
c000e698:	83 ec 0c             	sub    esp,0xc
c000e69b:	68 3b 07 00 00       	push   0x73b
c000e6a0:	e8 f5 3c 00 00       	call   c001239a <operator new(unsigned long)>
c000e6a5:	89 c3                	mov    ebx,eax
c000e6a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	50                   	push   eax
c000e6b7:	83 c0 0c             	add    eax,0xc
c000e6ba:	50                   	push   eax
c000e6bb:	6a 00                	push   0x0
c000e6bd:	53                   	push   ebx
c000e6be:	e8 29 fa ff ff       	call   c000e0ec <Process::Process(bool, char const*, Process*, char**)>
c000e6c3:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e6c9:	83 c4 20             	add    esp,0x20
c000e6cc:	85 f6                	test   esi,esi
c000e6ce:	74 16                	je     c000e6e6 <forkProcess(regs*)+0x6c>
c000e6d0:	83 ec 0c             	sub    esp,0xc
c000e6d3:	56                   	push   esi
c000e6d4:	e8 fb 2f 00 00       	call   c00116d4 <VAS::~VAS()>
c000e6d9:	59                   	pop    ecx
c000e6da:	58                   	pop    eax
c000e6db:	6a 10                	push   0x10
c000e6dd:	56                   	push   esi
c000e6de:	e8 c6 3c 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c000e6e3:	83 c4 10             	add    esp,0x10
c000e6e6:	83 ec 0c             	sub    esp,0xc
c000e6e9:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e6f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6fa:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e700:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e706:	6a 10                	push   0x10
c000e708:	e8 8d 3c 00 00       	call   c001239a <operator new(unsigned long)>
c000e70d:	59                   	pop    ecx
c000e70e:	89 c6                	mov    esi,eax
c000e710:	58                   	pop    eax
c000e711:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e716:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e719:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e71f:	56                   	push   esi
c000e720:	e8 d1 34 00 00       	call   c0011bf6 <VAS::VAS(VAS*)>
c000e725:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e72b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e72e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e730:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e736:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e73b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e73e:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e749:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e74c:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e757:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e75a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e764:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e76a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e770:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e776:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e77b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e77e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e785:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e788:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e78f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e796:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e79d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7a2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e7a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e7a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e7b0:	58                   	pop    eax
c000e7b1:	5a                   	pop    edx
c000e7b2:	53                   	push   ebx
c000e7b3:	68 70 bb 03 c0       	push   0xc003bb70
c000e7b8:	e8 41 02 01 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e7bd:	e8 83 fe ff ff       	call   c000e645 <unlockStuff()>
c000e7c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e7cd:	5a                   	pop    edx
c000e7ce:	5b                   	pop    ebx
c000e7cf:	5e                   	pop    esi
c000e7d0:	c3                   	ret    
c000e7d1:	83 ec 0c             	sub    esp,0xc
c000e7d4:	68 04 8f 03 c0       	push   0xc0038f04
c000e7d9:	e8 0c e6 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000e7de:	83 c4 10             	add    esp,0x10
c000e7e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7e6:	eb e5                	jmp    c000e7cd <forkProcess(regs*)+0x153>

c000e7e8 <Semaphore::tryAcquire()>:
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	e8 bf fa ff ff       	call   c000e2b3 <lockStuff()>
c000e7f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e7f7:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e7f9:	7c 0b                	jl     c000e806 <Semaphore::tryAcquire()+0x1e>
c000e7fb:	e8 45 fe ff ff       	call   c000e645 <unlockStuff()>
c000e800:	31 c0                	xor    eax,eax
c000e802:	83 c4 0c             	add    esp,0xc
c000e805:	c3                   	ret    
c000e806:	42                   	inc    edx
c000e807:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e80a:	e8 36 fe ff ff       	call   c000e645 <unlockStuff()>
c000e80f:	b0 01                	mov    al,0x1
c000e811:	83 c4 0c             	add    esp,0xc
c000e814:	c3                   	ret    
c000e815:	90                   	nop

c000e816 <Semaphore::assertLocked(char const*)>:
c000e816:	83 ec 0c             	sub    esp,0xc
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e821:	e8 8d fa ff ff       	call   c000e2b3 <lockStuff()>
c000e826:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e828:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e82b:	7c 08                	jl     c000e835 <Semaphore::assertLocked(char const*)+0x1f>
c000e82d:	83 c4 0c             	add    esp,0xc
c000e830:	e9 10 fe ff ff       	jmp    c000e645 <unlockStuff()>
c000e835:	83 ec 0c             	sub    esp,0xc
c000e838:	52                   	push   edx
c000e839:	e8 ca e6 ff ff       	call   c000cf08 <panic(char const*)>
c000e83e:	83 c4 10             	add    esp,0x10
c000e841:	83 c4 0c             	add    esp,0xc
c000e844:	e9 fc fd ff ff       	jmp    c000e645 <unlockStuff()>

c000e849 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e849:	83 ec 0c             	sub    esp,0xc
c000e84c:	e8 26 fa ff ff       	call   c000e277 <getIRQNestingLevel()>
c000e851:	83 ec 08             	sub    esp,0x8
c000e854:	50                   	push   eax
c000e855:	68 30 8f 03 c0       	push   0xc0038f30
c000e85a:	e8 8b e5 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000e85f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e863:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e868:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e86b:	e8 50 fd ff ff       	call   c000e5c0 <schedule()>
c000e870:	e8 19 fa ff ff       	call   c000e28e <unlockScheduler()>
c000e875:	e8 fd f9 ff ff       	call   c000e277 <getIRQNestingLevel()>
c000e87a:	5a                   	pop    edx
c000e87b:	59                   	pop    ecx
c000e87c:	50                   	push   eax
c000e87d:	68 64 8f 03 c0       	push   0xc0038f64
c000e882:	e8 63 e5 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000e887:	83 c4 1c             	add    esp,0x1c
c000e88a:	c3                   	ret    

c000e88b <blockTask(TaskState)>:
c000e88b:	83 ec 0c             	sub    esp,0xc
c000e88e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e892:	e8 f5 f9 ff ff       	call   c000e28c <lockScheduler()>
c000e897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e89c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e89f:	e8 1c fd ff ff       	call   c000e5c0 <schedule()>
c000e8a4:	83 c4 0c             	add    esp,0xc
c000e8a7:	e9 e2 f9 ff ff       	jmp    c000e28e <unlockScheduler()>

c000e8ac <waitTask(int, int*, int)>:
c000e8ac:	83 ec 18             	sub    esp,0x18
c000e8af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8b8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e8bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8c4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e8c7:	6a 07                	push   0x7
c000e8c9:	e8 bd ff ff ff       	call   c000e88b <blockTask(TaskState)>
c000e8ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e8d9:	85 d2                	test   edx,edx
c000e8db:	74 0a                	je     c000e8e7 <waitTask(int, int*, int)+0x3b>
c000e8dd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e8e0:	89 02                	mov    DWORD PTR [edx],eax
c000e8e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8e7:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e8ea:	83 c4 0c             	add    esp,0xc
c000e8ed:	c3                   	ret    

c000e8ee <nanoSleepUntil(unsigned long long)>:
c000e8ee:	83 ec 0c             	sub    esp,0xc
c000e8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e8f9:	3b 05 f0 c2 03 c0    	cmp    eax,DWORD PTR ds:0xc003c2f0
c000e8ff:	89 d1                	mov    ecx,edx
c000e901:	1b 0d f4 c2 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c2f4
c000e907:	73 04                	jae    c000e90d <nanoSleepUntil(unsigned long long)+0x1f>
c000e909:	83 c4 0c             	add    esp,0xc
c000e90c:	c3                   	ret    
c000e90d:	e8 a1 f9 ff ff       	call   c000e2b3 <lockStuff()>
c000e912:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e918:	83 ec 08             	sub    esp,0x8
c000e91b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e91e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e921:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e927:	68 64 bb 03 c0       	push   0xc003bb64
c000e92c:	e8 cd 00 01 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e931:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e938:	e8 4e ff ff ff       	call   c000e88b <blockTask(TaskState)>
c000e93d:	83 c4 1c             	add    esp,0x1c
c000e940:	e9 00 fd ff ff       	jmp    c000e645 <unlockStuff()>

c000e945 <nanoSleep(unsigned long long)>:
c000e945:	a1 f0 c2 03 c0       	mov    eax,ds:0xc003c2f0
c000e94a:	8b 15 f4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2f4
c000e950:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e954:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000e958:	eb 94                	jmp    c000e8ee <nanoSleepUntil(unsigned long long)>

c000e95a <sleep(unsigned long long)>:
c000e95a:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000e962:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000e967:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000e96b:	01 ca                	add    edx,ecx
c000e96d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e971:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e975:	eb ce                	jmp    c000e945 <nanoSleep(unsigned long long)>
c000e977:	90                   	nop

c000e978 <Semaphore::acquire()>:
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e97f:	e8 2f f9 ff ff       	call   c000e2b3 <lockStuff()>
c000e984:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e987:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e989:	7d 0c                	jge    c000e997 <Semaphore::acquire()+0x1f>
c000e98b:	42                   	inc    edx
c000e98c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e98f:	83 c4 0c             	add    esp,0xc
c000e992:	e9 ae fc ff ff       	jmp    c000e645 <unlockStuff()>
c000e997:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e99d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000e9a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e9a7:	85 d2                	test   edx,edx
c000e9a9:	74 2a                	je     c000e9d5 <Semaphore::acquire()+0x5d>
c000e9ab:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e9ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e9b4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000e9b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e9bd:	83 ec 0c             	sub    esp,0xc
c000e9c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e9c3:	6a 05                	push   0x5
c000e9c5:	e8 c1 fe ff ff       	call   c000e88b <blockTask(TaskState)>
c000e9ca:	83 c4 10             	add    esp,0x10
c000e9cd:	83 c4 0c             	add    esp,0xc
c000e9d0:	e9 70 fc ff ff       	jmp    c000e645 <unlockStuff()>
c000e9d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e9db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9de:	eb d7                	jmp    c000e9b7 <Semaphore::acquire()+0x3f>

c000e9e0 <execveProcess(char const*, char* const*, char* const*)>:
c000e9e0:	56                   	push   esi
c000e9e1:	53                   	push   ebx
c000e9e2:	50                   	push   eax
c000e9e3:	e8 cb f8 ff ff       	call   c000e2b3 <lockStuff()>
c000e9e8:	83 ec 0c             	sub    esp,0xc
c000e9eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e9f3:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000e9f9:	68 3b 07 00 00       	push   0x73b
c000e9fe:	e8 97 39 00 00       	call   c001239a <operator new(unsigned long)>
c000ea03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea07:	89 c3                	mov    ebx,eax
c000ea09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea11:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000ea17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea1b:	53                   	push   ebx
c000ea1c:	e8 13 f5 ff ff       	call   c000df34 <Process::Process(char const*, Process*, char**)>
c000ea21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea2c:	85 f6                	test   esi,esi
c000ea2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea30:	89 03                	mov    DWORD PTR [ebx],eax
c000ea32:	74 06                	je     c000ea3a <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000ea34:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000ea3a:	83 ec 0c             	sub    esp,0xc
c000ea3d:	53                   	push   ebx
c000ea3e:	e8 57 fa ff ff       	call   c000e49a <Process::createUserThread()>
c000ea43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ea4a:	e8 3c fe ff ff       	call   c000e88b <blockTask(TaskState)>
c000ea4f:	e8 f1 fb ff ff       	call   c000e645 <unlockStuff()>
c000ea54:	e8 33 f8 ff ff       	call   c000e28c <lockScheduler()>
c000ea59:	e8 62 fb ff ff       	call   c000e5c0 <schedule()>
c000ea5e:	e8 2b f8 ff ff       	call   c000e28e <unlockScheduler()>
c000ea63:	83 c4 14             	add    esp,0x14
c000ea66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ea6b:	5b                   	pop    ebx
c000ea6c:	5e                   	pop    esi
c000ea6d:	c3                   	ret    

c000ea6e <taskReturned>:
c000ea6e:	83 ec 0c             	sub    esp,0xc
c000ea71:	e8 18 f8 ff ff       	call   c000e28e <unlockScheduler()>
c000ea76:	83 ec 08             	sub    esp,0x8
c000ea79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea81:	83 c0 0c             	add    eax,0xc
c000ea84:	50                   	push   eax
c000ea85:	68 5f 8e 03 c0       	push   0xc0038e5f
c000ea8a:	e8 5b e3 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	83 ec 0c             	sub    esp,0xc
c000ea95:	6a 02                	push   0x2
c000ea97:	e8 ef fd ff ff       	call   c000e88b <blockTask(TaskState)>
c000ea9c:	e8 eb f7 ff ff       	call   c000e28c <lockScheduler()>
c000eaa1:	e8 1a fb ff ff       	call   c000e5c0 <schedule()>
c000eaa6:	e8 e3 f7 ff ff       	call   c000e28e <unlockScheduler()>
c000eaab:	83 c4 10             	add    esp,0x10
c000eaae:	eb e2                	jmp    c000ea92 <taskReturned+0x24>

c000eab0 <unblockTask(ThreadControlBlock*)>:
c000eab0:	53                   	push   ebx
c000eab1:	83 ec 08             	sub    esp,0x8
c000eab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eab8:	e8 cf f7 ff ff       	call   c000e28c <lockScheduler()>
c000eabd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eac0:	85 c0                	test   eax,eax
c000eac2:	74 5c                	je     c000eb20 <unblockTask(ThreadControlBlock*)+0x70>
c000eac4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eac7:	48                   	dec    eax
c000eac8:	74 31                	je     c000eafb <unblockTask(ThreadControlBlock*)+0x4b>
c000eaca:	83 ec 0c             	sub    esp,0xc
c000eacd:	68 70 bb 03 c0       	push   0xc003bb70
c000ead2:	e8 c5 00 01 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	85 c0                	test   eax,eax
c000eadc:	75 17                	jne    c000eaf5 <unblockTask(ThreadControlBlock*)+0x45>
c000eade:	eb 65                	jmp    c000eb45 <unblockTask(ThreadControlBlock*)+0x95>
c000eae0:	83 ec 08             	sub    esp,0x8
c000eae3:	50                   	push   eax
c000eae4:	68 70 bb 03 c0       	push   0xc003bb70
c000eae9:	e8 b6 00 01 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000eaee:	83 c4 10             	add    esp,0x10
c000eaf1:	85 c0                	test   eax,eax
c000eaf3:	74 50                	je     c000eb45 <unblockTask(ThreadControlBlock*)+0x95>
c000eaf5:	39 c3                	cmp    ebx,eax
c000eaf7:	75 e7                	jne    c000eae0 <unblockTask(ThreadControlBlock*)+0x30>
c000eaf9:	eb 1c                	jmp    c000eb17 <unblockTask(ThreadControlBlock*)+0x67>
c000eafb:	83 ec 0c             	sub    esp,0xc
c000eafe:	68 54 90 03 c0       	push   0xc0039054
c000eb03:	e8 e2 e2 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000eb08:	c7 04 24 e0 8f 03 c0 	mov    DWORD PTR [esp],0xc0038fe0
c000eb0f:	e8 d6 e2 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000eb14:	83 c4 10             	add    esp,0x10
c000eb17:	83 c4 08             	add    esp,0x8
c000eb1a:	5b                   	pop    ebx
c000eb1b:	e9 6e f7 ff ff       	jmp    c000e28e <unlockScheduler()>
c000eb20:	83 ec 0c             	sub    esp,0xc
c000eb23:	68 98 8f 03 c0       	push   0xc0038f98
c000eb28:	e8 bd e2 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000eb2d:	c7 04 24 e0 8f 03 c0 	mov    DWORD PTR [esp],0xc0038fe0
c000eb34:	e8 b1 e2 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000eb39:	83 c4 10             	add    esp,0x10
c000eb3c:	83 c4 08             	add    esp,0x8
c000eb3f:	5b                   	pop    ebx
c000eb40:	e9 49 f7 ff ff       	jmp    c000e28e <unlockScheduler()>
c000eb45:	83 ec 08             	sub    esp,0x8
c000eb48:	53                   	push   ebx
c000eb49:	68 70 bb 03 c0       	push   0xc003bb70
c000eb4e:	e8 ab fe 00 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000eb53:	83 c4 10             	add    esp,0x10
c000eb56:	83 c4 08             	add    esp,0x8
c000eb59:	5b                   	pop    ebx
c000eb5a:	e9 2f f7 ff ff       	jmp    c000e28e <unlockScheduler()>

c000eb5f <cleanupTerminatedTask(ThreadControlBlock*)>:
c000eb5f:	55                   	push   ebp
c000eb60:	57                   	push   edi
c000eb61:	56                   	push   esi
c000eb62:	53                   	push   ebx
c000eb63:	83 ec 1c             	sub    esp,0x1c
c000eb66:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb6a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eb6d:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000eb73:	85 c9                	test   ecx,ecx
c000eb75:	7e 20                	jle    c000eb97 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000eb77:	31 f6                	xor    esi,esi
c000eb79:	83 ec 0c             	sub    esp,0xc
c000eb7c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000eb83:	46                   	inc    esi
c000eb84:	e8 6c e8 ff ff       	call   c000d3f5 <free>
c000eb89:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000eb95:	7f e2                	jg     c000eb79 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000eb97:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000eba1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000eba6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000eba9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ebac:	d3 c0                	rol    eax,cl
c000ebae:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ebb5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ebb8:	89 f7                	mov    edi,esi
c000ebba:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ebc2:	0f 85 4f 01 00 00    	jne    c000ed17 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ebc8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ebce:	85 c0                	test   eax,eax
c000ebd0:	0f 84 aa 00 00 00    	je     c000ec80 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ebd6:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ebd9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ebdd:	31 c9                	xor    ecx,ecx
c000ebdf:	eb 10                	jmp    c000ebf1 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ebe1:	41                   	inc    ecx
c000ebe2:	83 f9 10             	cmp    ecx,0x10
c000ebe5:	0f 84 95 00 00 00    	je     c000ec80 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ebeb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ebf1:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ebf8:	d3 fa                	sar    edx,cl
c000ebfa:	83 e2 01             	and    edx,0x1
c000ebfd:	74 e2                	je     c000ebe1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ebff:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ec02:	01 ca                	add    edx,ecx
c000ec04:	89 d5                	mov    ebp,edx
c000ec06:	c1 e5 05             	shl    ebp,0x5
c000ec09:	01 ea                	add    edx,ebp
c000ec0b:	01 d0                	add    eax,edx
c000ec0d:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ec13:	83 fd 07             	cmp    ebp,0x7
c000ec16:	75 c9                	jne    c000ebe1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ec18:	05 40 02 00 00       	add    eax,0x240
c000ec1d:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ec20:	83 fd ff             	cmp    ebp,0xffffffff
c000ec23:	0f 8c 01 01 00 00    	jl     c000ed2a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ec29:	0f 84 b2 01 00 00    	je     c000ede1 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ec2f:	85 ed                	test   ebp,ebp
c000ec31:	0f 84 99 01 00 00    	je     c000edd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ec37:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ec39:	75 a6                	jne    c000ebe1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ec3b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ec41:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ec45:	01 d0                	add    eax,edx
c000ec47:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ec4b:	83 ec 0c             	sub    esp,0xc
c000ec4e:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ec54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec57:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ec5d:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ec64:	50                   	push   eax
c000ec65:	e8 46 fe ff ff       	call   c000eab0 <unblockTask(ThreadControlBlock*)>
c000ec6a:	83 c4 10             	add    esp,0x10
c000ec6d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ec70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec74:	89 f7                	mov    edi,esi
c000ec76:	41                   	inc    ecx
c000ec77:	83 f9 10             	cmp    ecx,0x10
c000ec7a:	0f 85 6b ff ff ff    	jne    c000ebeb <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ec80:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ec86:	85 c0                	test   eax,eax
c000ec88:	74 5d                	je     c000ece7 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ec8a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ec90:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ec96:	74 4f                	je     c000ece7 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ec98:	83 ec 0c             	sub    esp,0xc
c000ec9b:	68 70 bb 03 c0       	push   0xc003bb70
c000eca0:	e8 f7 fe 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eca5:	c7 04 24 70 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb70
c000ecac:	89 c7                	mov    edi,eax
c000ecae:	e8 1f fe 00 00       	call   c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	84 c0                	test   al,al
c000ecb8:	0f 84 dd 00 00 00    	je     c000ed9b <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000ecbe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ecc1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ecc7:	85 d2                	test   edx,edx
c000ecc9:	74 0f                	je     c000ecda <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000eccb:	83 ec 0c             	sub    esp,0xc
c000ecce:	8b 02                	mov    eax,DWORD PTR [edx]
c000ecd0:	52                   	push   edx
c000ecd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ecd4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000ece4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ece7:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000eced:	85 f6                	test   esi,esi
c000ecef:	74 16                	je     c000ed07 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000ecf1:	83 ec 0c             	sub    esp,0xc
c000ecf4:	56                   	push   esi
c000ecf5:	e8 da 29 00 00       	call   c00116d4 <VAS::~VAS()>
c000ecfa:	58                   	pop    eax
c000ecfb:	5a                   	pop    edx
c000ecfc:	6a 10                	push   0x10
c000ecfe:	56                   	push   esi
c000ecff:	e8 a5 36 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c000ed04:	83 c4 10             	add    esp,0x10
c000ed07:	83 ec 0c             	sub    esp,0xc
c000ed0a:	68 7b 8e 03 c0       	push   0xc0038e7b
c000ed0f:	e8 d6 e0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000ed14:	83 c4 10             	add    esp,0x10
c000ed17:	83 ec 08             	sub    esp,0x8
c000ed1a:	6a 63                	push   0x63
c000ed1c:	53                   	push   ebx
c000ed1d:	e8 87 36 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c000ed22:	83 c4 2c             	add    esp,0x2c
c000ed25:	5b                   	pop    ebx
c000ed26:	5e                   	pop    esi
c000ed27:	5f                   	pop    edi
c000ed28:	5d                   	pop    ebp
c000ed29:	c3                   	ret    
c000ed2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed2e:	83 ec 0c             	sub    esp,0xc
c000ed31:	68 98 90 03 c0       	push   0xc0039098
c000ed36:	e8 cd e1 ff ff       	call   c000cf08 <panic(char const*)>
c000ed3b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ed3e:	83 c4 10             	add    esp,0x10
c000ed41:	89 f7                	mov    edi,esi
c000ed43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed47:	e9 95 fe ff ff       	jmp    c000ebe1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed4c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ed52:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ed58:	75 1c                	jne    c000ed76 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ed5a:	83 ec 0c             	sub    esp,0xc
c000ed5d:	68 00 91 03 c0       	push   0xc0039100
c000ed62:	e8 83 e0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000ed67:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ed6e:	e8 18 fb ff ff       	call   c000e88b <blockTask(TaskState)>
c000ed73:	83 c4 10             	add    esp,0x10
c000ed76:	83 ec 08             	sub    esp,0x8
c000ed79:	56                   	push   esi
c000ed7a:	68 70 bb 03 c0       	push   0xc003bb70
c000ed7f:	e8 7a fc 00 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ed84:	c7 04 24 70 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb70
c000ed8b:	e8 0c fe 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ed90:	83 c4 10             	add    esp,0x10
c000ed93:	39 f8                	cmp    eax,edi
c000ed95:	0f 84 23 ff ff ff    	je     c000ecbe <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ed9b:	83 ec 0c             	sub    esp,0xc
c000ed9e:	68 70 bb 03 c0       	push   0xc003bb70
c000eda3:	e8 f4 fd 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eda8:	c7 04 24 70 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb70
c000edaf:	89 c6                	mov    esi,eax
c000edb1:	e8 38 fd 00 00       	call   c001eaee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000edb6:	83 c4 10             	add    esp,0x10
c000edb9:	39 f3                	cmp    ebx,esi
c000edbb:	74 b9                	je     c000ed76 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000edbd:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000edc0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000edc3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000edc9:	75 ab                	jne    c000ed76 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000edcb:	e9 7c ff ff ff       	jmp    c000ed4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000edd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 cc 90 03 c0       	push   0xc00390cc
c000eddc:	e9 55 ff ff ff       	jmp    c000ed36 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000ede1:	8b 36                	mov    esi,DWORD PTR [esi]
c000ede3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ede7:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000edea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eded:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000edf3:	01 d7                	add    edi,edx
c000edf5:	89 f8                	mov    eax,edi
c000edf7:	e9 4b fe ff ff       	jmp    c000ec47 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000edfc <cleanerTaskFunction(void*)>:
c000edfc:	53                   	push   ebx
c000edfd:	83 ec 08             	sub    esp,0x8
c000ee00:	e8 89 f4 ff ff       	call   c000e28e <unlockScheduler()>
c000ee05:	e8 82 f4 ff ff       	call   c000e28c <lockScheduler()>
c000ee0a:	80 3d 34 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb34,0x0
c000ee11:	75 72                	jne    c000ee85 <cleanerTaskFunction(void*)+0x89>
c000ee13:	83 ec 0c             	sub    esp,0xc
c000ee16:	6a 02                	push   0x2
c000ee18:	e8 2c fa ff ff       	call   c000e849 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ee1d:	83 c4 10             	add    esp,0x10
c000ee20:	c6 05 34 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bb34,0x0
c000ee27:	e8 87 f4 ff ff       	call   c000e2b3 <lockStuff()>
c000ee2c:	e8 5b f4 ff ff       	call   c000e28c <lockScheduler()>
c000ee31:	83 ec 0c             	sub    esp,0xc
c000ee34:	68 58 bb 03 c0       	push   0xc003bb58
c000ee39:	e8 94 fc 00 00       	call   c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ee3e:	83 c4 10             	add    esp,0x10
c000ee41:	84 c0                	test   al,al
c000ee43:	75 28                	jne    c000ee6d <cleanerTaskFunction(void*)+0x71>
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	68 58 bb 03 c0       	push   0xc003bb58
c000ee4d:	e8 4a fd 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee52:	c7 04 24 58 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb58
c000ee59:	89 c3                	mov    ebx,eax
c000ee5b:	e8 8e fc 00 00       	call   c001eaee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ee60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee63:	e8 f7 fc ff ff       	call   c000eb5f <cleanupTerminatedTask(ThreadControlBlock*)>
c000ee68:	83 c4 10             	add    esp,0x10
c000ee6b:	eb c4                	jmp    c000ee31 <cleanerTaskFunction(void*)+0x35>
c000ee6d:	e8 1c f4 ff ff       	call   c000e28e <unlockScheduler()>
c000ee72:	e8 ce f7 ff ff       	call   c000e645 <unlockStuff()>
c000ee77:	e8 10 f4 ff ff       	call   c000e28c <lockScheduler()>
c000ee7c:	80 3d 34 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb34,0x0
c000ee83:	74 8e                	je     c000ee13 <cleanerTaskFunction(void*)+0x17>
c000ee85:	e8 04 f4 ff ff       	call   c000e28e <unlockScheduler()>
c000ee8a:	eb 94                	jmp    c000ee20 <cleanerTaskFunction(void*)+0x24>

c000ee8c <terminateTask(int)>:
c000ee8c:	83 ec 0c             	sub    esp,0xc
c000ee8f:	e8 1f f4 ff ff       	call   c000e2b3 <lockStuff()>
c000ee94:	e8 f3 f3 ff ff       	call   c000e28c <lockScheduler()>
c000ee99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ee9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eea2:	83 ec 08             	sub    esp,0x8
c000eea5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000eea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eead:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000eeb0:	50                   	push   eax
c000eeb1:	68 58 bb 03 c0       	push   0xc003bb58
c000eeb6:	e8 43 fb 00 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000eebb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eec0:	83 c4 10             	add    esp,0x10
c000eec3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000eeca:	a1 30 bb 03 c0       	mov    eax,ds:0xc003bb30
c000eecf:	85 c0                	test   eax,eax
c000eed1:	74 2e                	je     c000ef01 <terminateTask(int)+0x75>
c000eed3:	83 ec 0c             	sub    esp,0xc
c000eed6:	c6 05 34 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bb34,0x1
c000eedd:	50                   	push   eax
c000eede:	e8 cd fb ff ff       	call   c000eab0 <unblockTask(ThreadControlBlock*)>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	e8 a3 f3 ff ff       	call   c000e28e <unlockScheduler()>
c000eeeb:	e8 55 f7 ff ff       	call   c000e645 <unlockStuff()>
c000eef0:	e8 97 f3 ff ff       	call   c000e28c <lockScheduler()>
c000eef5:	e8 c6 f6 ff ff       	call   c000e5c0 <schedule()>
c000eefa:	e8 8f f3 ff ff       	call   c000e28e <unlockScheduler()>
c000eeff:	eb ef                	jmp    c000eef0 <terminateTask(int)+0x64>
c000ef01:	83 ec 0c             	sub    esp,0xc
c000ef04:	68 89 8e 03 c0       	push   0xc0038e89
c000ef09:	e8 dc de ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000ef0e:	83 c4 10             	add    esp,0x10
c000ef11:	eb d3                	jmp    c000eee6 <terminateTask(int)+0x5a>
c000ef13:	90                   	nop

c000ef14 <Semaphore::release()>:
c000ef14:	83 ec 0c             	sub    esp,0xc
c000ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef1b:	e8 93 f3 ff ff       	call   c000e2b3 <lockStuff()>
c000ef20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ef23:	85 d2                	test   edx,edx
c000ef25:	74 1a                	je     c000ef41 <Semaphore::release()+0x2d>
c000ef27:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000ef2a:	83 ec 0c             	sub    esp,0xc
c000ef2d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ef30:	52                   	push   edx
c000ef31:	e8 7a fb ff ff       	call   c000eab0 <unblockTask(ThreadControlBlock*)>
c000ef36:	83 c4 10             	add    esp,0x10
c000ef39:	83 c4 0c             	add    esp,0xc
c000ef3c:	e9 04 f7 ff ff       	jmp    c000e645 <unlockStuff()>
c000ef41:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000ef44:	83 c4 0c             	add    esp,0xc
c000ef47:	e9 f9 f6 ff ff       	jmp    c000e645 <unlockStuff()>

c000ef4c <__static_initialization_and_destruction_0(int, int)>:
c000ef4c:	83 ec 0c             	sub    esp,0xc
c000ef4f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ef54:	0f 85 88 00 00 00    	jne    c000efe2 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ef5a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000ef62:	75 7e                	jne    c000efe2 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ef64:	83 ec 0c             	sub    esp,0xc
c000ef67:	68 70 bb 03 c0       	push   0xc003bb70
c000ef6c:	e8 35 fa 00 00       	call   c001e9a6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	83 ec 04             	sub    esp,0x4
c000ef77:	68 4c ad 03 c0       	push   0xc003ad4c
c000ef7c:	68 70 bb 03 c0       	push   0xc003bb70
c000ef81:	68 66 e9 01 c0       	push   0xc001e966
c000ef86:	e8 9a 33 00 00       	call   c0012325 <__cxa_atexit>
c000ef8b:	83 c4 10             	add    esp,0x10
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	68 64 bb 03 c0       	push   0xc003bb64
c000ef96:	e8 0b fa 00 00       	call   c001e9a6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ef9b:	83 c4 10             	add    esp,0x10
c000ef9e:	83 ec 04             	sub    esp,0x4
c000efa1:	68 4c ad 03 c0       	push   0xc003ad4c
c000efa6:	68 64 bb 03 c0       	push   0xc003bb64
c000efab:	68 66 e9 01 c0       	push   0xc001e966
c000efb0:	e8 70 33 00 00       	call   c0012325 <__cxa_atexit>
c000efb5:	83 c4 10             	add    esp,0x10
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 58 bb 03 c0       	push   0xc003bb58
c000efc0:	e8 e1 f9 00 00       	call   c001e9a6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	83 ec 04             	sub    esp,0x4
c000efcb:	68 4c ad 03 c0       	push   0xc003ad4c
c000efd0:	68 58 bb 03 c0       	push   0xc003bb58
c000efd5:	68 66 e9 01 c0       	push   0xc001e966
c000efda:	e8 46 33 00 00       	call   c0012325 <__cxa_atexit>
c000efdf:	83 c4 10             	add    esp,0x10
c000efe2:	90                   	nop
c000efe3:	83 c4 0c             	add    esp,0xc
c000efe6:	c3                   	ret    

c000efe7 <_GLOBAL__sub_I_kernelProcess>:
c000efe7:	83 ec 0c             	sub    esp,0xc
c000efea:	83 ec 08             	sub    esp,0x8
c000efed:	68 ff ff 00 00       	push   0xffff
c000eff2:	6a 01                	push   0x1
c000eff4:	e8 53 ff ff ff       	call   c000ef4c <__static_initialization_and_destruction_0(int, int)>
c000eff9:	83 c4 10             	add    esp,0x10
c000effc:	83 c4 0c             	add    esp,0xc
c000efff:	c3                   	ret    

c000f000 <sysCallGetPID(regs*)>:
c000f000:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f005:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f008:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00a:	99                   	cdq    
c000f00b:	c3                   	ret    

c000f00c <sysCallSeekDir(regs*)>:
c000f00c:	31 c0                	xor    eax,eax
c000f00e:	31 d2                	xor    edx,edx
c000f010:	c3                   	ret    

c000f011 <sysCallTellDir(regs*)>:
c000f011:	31 c0                	xor    eax,eax
c000f013:	31 d2                	xor    edx,edx
c000f015:	c3                   	ret    

c000f016 <sysCallVerify(regs*)>:
c000f016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f01a:	31 d2                	xor    edx,edx
c000f01c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f01f:	c3                   	ret    

c000f020 <sysCallGetArgc(regs*)>:
c000f020:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f025:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f028:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f02e:	99                   	cdq    
c000f02f:	c3                   	ret    

c000f030 <sysFormatDisk(regs*)>:
c000f030:	56                   	push   esi
c000f031:	53                   	push   ebx
c000f032:	53                   	push   ebx
c000f033:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f037:	8b 1d e0 bd 03 c0    	mov    ebx,DWORD PTR ds:0xc003bde0
c000f03d:	eb 25                	jmp    c000f064 <sysFormatDisk(regs*)+0x34>
c000f03f:	83 ec 0c             	sub    esp,0xc
c000f042:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f045:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f047:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f04a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f04d:	50                   	push   eax
c000f04e:	ff 34 85 80 c2 03 c0 	push   DWORD PTR [eax*4-0x3ffc3d80]
c000f055:	53                   	push   ebx
c000f056:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f059:	83 c4 20             	add    esp,0x20
c000f05c:	83 f8 08             	cmp    eax,0x8
c000f05f:	75 12                	jne    c000f073 <sysFormatDisk(regs*)+0x43>
c000f061:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f064:	85 db                	test   ebx,ebx
c000f066:	75 d7                	jne    c000f03f <sysFormatDisk(regs*)+0xf>
c000f068:	59                   	pop    ecx
c000f069:	b8 03 00 00 00       	mov    eax,0x3
c000f06e:	31 d2                	xor    edx,edx
c000f070:	5b                   	pop    ebx
c000f071:	5e                   	pop    esi
c000f072:	c3                   	ret    
c000f073:	85 c0                	test   eax,eax
c000f075:	74 1b                	je     c000f092 <sysFormatDisk(regs*)+0x62>
c000f077:	83 f8 09             	cmp    eax,0x9
c000f07a:	74 0b                	je     c000f087 <sysFormatDisk(regs*)+0x57>
c000f07c:	59                   	pop    ecx
c000f07d:	b8 02 00 00 00       	mov    eax,0x2
c000f082:	31 d2                	xor    edx,edx
c000f084:	5b                   	pop    ebx
c000f085:	5e                   	pop    esi
c000f086:	c3                   	ret    
c000f087:	59                   	pop    ecx
c000f088:	b8 01 00 00 00       	mov    eax,0x1
c000f08d:	31 d2                	xor    edx,edx
c000f08f:	5b                   	pop    ebx
c000f090:	5e                   	pop    esi
c000f091:	c3                   	ret    
c000f092:	59                   	pop    ecx
c000f093:	31 c0                	xor    eax,eax
c000f095:	31 d2                	xor    edx,edx
c000f097:	5b                   	pop    ebx
c000f098:	5e                   	pop    esi
c000f099:	c3                   	ret    

c000f09a <sysSetDiskVolumeLabel(regs*)>:
c000f09a:	56                   	push   esi
c000f09b:	53                   	push   ebx
c000f09c:	53                   	push   ebx
c000f09d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f0a4:	83 f8 19             	cmp    eax,0x19
c000f0a7:	77 29                	ja     c000f0d2 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f0a9:	8b 0c 85 80 c2 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3d80]
c000f0b0:	85 c9                	test   ecx,ecx
c000f0b2:	74 1e                	je     c000f0d2 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f0b4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f0b7:	85 d2                	test   edx,edx
c000f0b9:	74 17                	je     c000f0d2 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f0bb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f0c1:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f0c3:	52                   	push   edx
c000f0c4:	50                   	push   eax
c000f0c5:	51                   	push   ecx
c000f0c6:	53                   	push   ebx
c000f0c7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f0ca:	83 c4 10             	add    esp,0x10
c000f0cd:	99                   	cdq    
c000f0ce:	59                   	pop    ecx
c000f0cf:	5b                   	pop    ebx
c000f0d0:	5e                   	pop    esi
c000f0d1:	c3                   	ret    
c000f0d2:	59                   	pop    ecx
c000f0d3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f0d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f0dd:	5b                   	pop    ebx
c000f0de:	5e                   	pop    esi
c000f0df:	c3                   	ret    

c000f0e0 <sysGetDiskVolumeLabel(regs*)>:
c000f0e0:	57                   	push   edi
c000f0e1:	56                   	push   esi
c000f0e2:	53                   	push   ebx
c000f0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f0ea:	83 fa 19             	cmp    edx,0x19
c000f0ed:	77 34                	ja     c000f123 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f0ef:	8b 0c 95 80 c2 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3d80]
c000f0f6:	85 c9                	test   ecx,ecx
c000f0f8:	74 29                	je     c000f123 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f0fa:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f0fd:	85 db                	test   ebx,ebx
c000f0ff:	74 22                	je     c000f123 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f101:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f104:	85 c0                	test   eax,eax
c000f106:	74 1b                	je     c000f123 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f108:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f10e:	83 ec 0c             	sub    esp,0xc
c000f111:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f113:	50                   	push   eax
c000f114:	53                   	push   ebx
c000f115:	52                   	push   edx
c000f116:	51                   	push   ecx
c000f117:	56                   	push   esi
c000f118:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f11b:	83 c4 20             	add    esp,0x20
c000f11e:	99                   	cdq    
c000f11f:	5b                   	pop    ebx
c000f120:	5e                   	pop    esi
c000f121:	5f                   	pop    edi
c000f122:	c3                   	ret    
c000f123:	5b                   	pop    ebx
c000f124:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f129:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f12e:	5e                   	pop    esi
c000f12f:	5f                   	pop    edi
c000f130:	c3                   	ret    

c000f131 <sysShutdown(regs*)>:
c000f131:	83 ec 0c             	sub    esp,0xc
c000f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f138:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f13b:	85 c0                	test   eax,eax
c000f13d:	74 24                	je     c000f163 <sysShutdown(regs*)+0x32>
c000f13f:	48                   	dec    eax
c000f140:	74 0e                	je     c000f150 <sysShutdown(regs*)+0x1f>
c000f142:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f147:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f14c:	83 c4 0c             	add    esp,0xc
c000f14f:	c3                   	ret    
c000f150:	a1 00 c3 03 c0       	mov    eax,ds:0xc003c300
c000f155:	85 c0                	test   eax,eax
c000f157:	74 02                	je     c000f15b <sysShutdown(regs*)+0x2a>
c000f159:	ff d0                	call   eax
c000f15b:	31 c0                	xor    eax,eax
c000f15d:	31 d2                	xor    edx,edx
c000f15f:	83 c4 0c             	add    esp,0xc
c000f162:	c3                   	ret    
c000f163:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c000f168:	8b 10                	mov    edx,DWORD PTR [eax]
c000f16a:	6a 00                	push   0x0
c000f16c:	6a 00                	push   0x0
c000f16e:	6a 00                	push   0x0
c000f170:	50                   	push   eax
c000f171:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f174:	83 c4 10             	add    esp,0x10
c000f177:	eb c9                	jmp    c000f142 <sysShutdown(regs*)+0x11>

c000f179 <sysCallGetCwd(regs*)>:
c000f179:	83 ec 10             	sub    esp,0x10
c000f17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f180:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f183:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f18b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f18e:	e8 a6 39 00 00       	call   c0012b39 <getcwd(Process*, char*, int)>
c000f193:	83 c4 1c             	add    esp,0x1c
c000f196:	99                   	cdq    
c000f197:	c3                   	ret    

c000f198 <sysCallSetCwd(regs*)>:
c000f198:	83 ec 14             	sub    esp,0x14
c000f19b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f19f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f1a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f1a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f1aa:	e8 b4 39 00 00       	call   c0012b63 <setcwd(Process*, char*)>
c000f1af:	83 c4 1c             	add    esp,0x1c
c000f1b2:	99                   	cdq    
c000f1b3:	c3                   	ret    

c000f1b4 <sysCallRealpath(regs*)>:
c000f1b4:	83 ec 0c             	sub    esp,0xc
c000f1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1bb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f1be:	85 d2                	test   edx,edx
c000f1c0:	74 07                	je     c000f1c9 <sysCallRealpath(regs*)+0x15>
c000f1c2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f1c5:	85 c0                	test   eax,eax
c000f1c7:	75 0b                	jne    c000f1d4 <sysCallRealpath(regs*)+0x20>
c000f1c9:	b8 01 00 00 00       	mov    eax,0x1
c000f1ce:	31 d2                	xor    edx,edx
c000f1d0:	83 c4 0c             	add    esp,0xc
c000f1d3:	c3                   	ret    
c000f1d4:	51                   	push   ecx
c000f1d5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f1db:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f1de:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f1e4:	51                   	push   ecx
c000f1e5:	52                   	push   edx
c000f1e6:	50                   	push   eax
c000f1e7:	e8 32 34 00 00       	call   c001261e <standardiseFiles(char*, char const*, char const*)>
c000f1ec:	83 c4 10             	add    esp,0x10
c000f1ef:	31 c0                	xor    eax,eax
c000f1f1:	31 d2                	xor    edx,edx
c000f1f3:	83 c4 0c             	add    esp,0xc
c000f1f6:	c3                   	ret    

c000f1f7 <sysCallOpen(regs*)>:
c000f1f7:	56                   	push   esi
c000f1f8:	53                   	push   ebx
c000f1f9:	81 ec 04 01 00 00    	sub    esp,0x104
c000f1ff:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f206:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f209:	85 d2                	test   edx,edx
c000f20b:	0f 84 c3 00 00 00    	je     c000f2d4 <sysCallOpen(regs*)+0xdd>
c000f211:	50                   	push   eax
c000f212:	68 cf 91 03 c0       	push   0xc00391cf
c000f217:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f21a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f21e:	56                   	push   esi
c000f21f:	e8 fa 33 00 00       	call   c001261e <standardiseFiles(char*, char const*, char const*)>
c000f224:	89 34 24             	mov    DWORD PTR [esp],esi
c000f227:	e8 b0 14 ff ff       	call   c00006dc <strlen>
c000f22c:	83 c4 10             	add    esp,0x10
c000f22f:	48                   	dec    eax
c000f230:	74 1d                	je     c000f24f <sysCallOpen(regs*)+0x58>
c000f232:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f235:	eb 0f                	jmp    c000f246 <sysCallOpen(regs*)+0x4f>
c000f237:	80 fa 3a             	cmp    dl,0x3a
c000f23a:	74 0f                	je     c000f24b <sysCallOpen(regs*)+0x54>
c000f23c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f240:	48                   	dec    eax
c000f241:	74 0c                	je     c000f24f <sysCallOpen(regs*)+0x58>
c000f243:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f246:	80 fa 2e             	cmp    dl,0x2e
c000f249:	75 ec                	jne    c000f237 <sysCallOpen(regs*)+0x40>
c000f24b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f24f:	83 ec 0c             	sub    esp,0xc
c000f252:	68 14 01 00 00       	push   0x114
c000f257:	e8 3e 31 00 00       	call   c001239a <operator new(unsigned long)>
c000f25c:	83 c4 0c             	add    esp,0xc
c000f25f:	89 c6                	mov    esi,eax
c000f261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f266:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f269:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f26c:	56                   	push   esi
c000f26d:	e8 56 35 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000f272:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f275:	83 c4 10             	add    esp,0x10
c000f278:	0f b6 d0             	movzx  edx,al
c000f27b:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f27e:	89 c2                	mov    edx,eax
c000f280:	83 e2 01             	and    edx,0x1
c000f283:	a8 02                	test   al,0x2
c000f285:	74 03                	je     c000f28a <sysCallOpen(regs*)+0x93>
c000f287:	83 ca 02             	or     edx,0x2
c000f28a:	a8 04                	test   al,0x4
c000f28c:	74 03                	je     c000f291 <sysCallOpen(regs*)+0x9a>
c000f28e:	83 ca 04             	or     edx,0x4
c000f291:	a8 08                	test   al,0x8
c000f293:	74 03                	je     c000f298 <sysCallOpen(regs*)+0xa1>
c000f295:	83 ca 0a             	or     edx,0xa
c000f298:	a8 10                	test   al,0x10
c000f29a:	74 03                	je     c000f29f <sysCallOpen(regs*)+0xa8>
c000f29c:	83 ca 12             	or     edx,0x12
c000f29f:	83 ec 08             	sub    esp,0x8
c000f2a2:	52                   	push   edx
c000f2a3:	56                   	push   esi
c000f2a4:	e8 83 35 00 00       	call   c001282c <File::open(FileOpenMode)>
c000f2a9:	83 c4 10             	add    esp,0x10
c000f2ac:	85 c0                	test   eax,eax
c000f2ae:	75 24                	jne    c000f2d4 <sysCallOpen(regs*)+0xdd>
c000f2b0:	83 ec 0c             	sub    esp,0xc
c000f2b3:	56                   	push   esi
c000f2b4:	e8 05 1d 00 00       	call   c0010fbe <UnixFile::getFileDescriptor()>
c000f2b9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f2bc:	83 c4 10             	add    esp,0x10
c000f2bf:	89 02                	mov    DWORD PTR [edx],eax
c000f2c1:	c1 f8 1f             	sar    eax,0x1f
c000f2c4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f2c7:	81 c4 04 01 00 00    	add    esp,0x104
c000f2cd:	31 c0                	xor    eax,eax
c000f2cf:	31 d2                	xor    edx,edx
c000f2d1:	5b                   	pop    ebx
c000f2d2:	5e                   	pop    esi
c000f2d3:	c3                   	ret    
c000f2d4:	81 c4 04 01 00 00    	add    esp,0x104
c000f2da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f2df:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f2e4:	5b                   	pop    ebx
c000f2e5:	5e                   	pop    esi
c000f2e6:	c3                   	ret    

c000f2e7 <sysCallReadDir(regs*)>:
c000f2e7:	53                   	push   ebx
c000f2e8:	83 ec 18             	sub    esp,0x18
c000f2eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f2ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f2f2:	83 f8 02             	cmp    eax,0x2
c000f2f5:	77 0c                	ja     c000f303 <sysCallReadDir(regs*)+0x1c>
c000f2f7:	b8 01 00 00 00       	mov    eax,0x1
c000f2fc:	31 d2                	xor    edx,edx
c000f2fe:	83 c4 18             	add    esp,0x18
c000f301:	5b                   	pop    ebx
c000f302:	c3                   	ret    
c000f303:	83 ec 0c             	sub    esp,0xc
c000f306:	50                   	push   eax
c000f307:	e8 17 1e 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f30c:	83 c4 10             	add    esp,0x10
c000f30f:	85 c0                	test   eax,eax
c000f311:	74 37                	je     c000f34a <sysCallReadDir(regs*)+0x63>
c000f313:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f31b:	83 ec 0c             	sub    esp,0xc
c000f31e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f320:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f324:	51                   	push   ecx
c000f325:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f328:	6a 00                	push   0x0
c000f32a:	68 10 01 00 00       	push   0x110
c000f32f:	50                   	push   eax
c000f330:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f333:	83 c4 20             	add    esp,0x20
c000f336:	85 c0                	test   eax,eax
c000f338:	74 0c                	je     c000f346 <sysCallReadDir(regs*)+0x5f>
c000f33a:	83 f8 07             	cmp    eax,0x7
c000f33d:	74 b8                	je     c000f2f7 <sysCallReadDir(regs*)+0x10>
c000f33f:	b8 02 00 00 00       	mov    eax,0x2
c000f344:	eb b6                	jmp    c000f2fc <sysCallReadDir(regs*)+0x15>
c000f346:	31 c0                	xor    eax,eax
c000f348:	eb b2                	jmp    c000f2fc <sysCallReadDir(regs*)+0x15>
c000f34a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f34f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f354:	eb a8                	jmp    c000f2fe <sysCallReadDir(regs*)+0x17>

c000f356 <sysCallIsATTY(regs*)>:
c000f356:	83 ec 0c             	sub    esp,0xc
c000f359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f360:	83 f8 02             	cmp    eax,0x2
c000f363:	77 26                	ja     c000f38b <sysCallIsATTY(regs*)+0x35>
c000f365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f36a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f36d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f373:	85 c0                	test   eax,eax
c000f375:	74 24                	je     c000f39b <sysCallIsATTY(regs*)+0x45>
c000f377:	83 ec 0c             	sub    esp,0xc
c000f37a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f37c:	50                   	push   eax
c000f37d:	ff 12                	call   DWORD PTR [edx]
c000f37f:	31 d2                	xor    edx,edx
c000f381:	0f b6 c0             	movzx  eax,al
c000f384:	83 c4 10             	add    esp,0x10
c000f387:	83 c4 0c             	add    esp,0xc
c000f38a:	c3                   	ret    
c000f38b:	83 ec 0c             	sub    esp,0xc
c000f38e:	50                   	push   eax
c000f38f:	e8 8f 1d 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f394:	83 c4 10             	add    esp,0x10
c000f397:	85 c0                	test   eax,eax
c000f399:	75 dc                	jne    c000f377 <sysCallIsATTY(regs*)+0x21>
c000f39b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3a5:	83 c4 0c             	add    esp,0xc
c000f3a8:	c3                   	ret    

c000f3a9 <sysCallSeek(regs*)>:
c000f3a9:	53                   	push   ebx
c000f3aa:	83 ec 08             	sub    esp,0x8
c000f3ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f3b4:	83 f8 02             	cmp    eax,0x2
c000f3b7:	76 32                	jbe    c000f3eb <sysCallSeek(regs*)+0x42>
c000f3b9:	83 ec 0c             	sub    esp,0xc
c000f3bc:	50                   	push   eax
c000f3bd:	e8 61 1d 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f3c2:	83 c4 0c             	add    esp,0xc
c000f3c5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f3c8:	31 db                	xor    ebx,ebx
c000f3ca:	53                   	push   ebx
c000f3cb:	51                   	push   ecx
c000f3cc:	50                   	push   eax
c000f3cd:	e8 18 35 00 00       	call   c00128ea <File::seek(unsigned long long)>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	85 c0                	test   eax,eax
c000f3d7:	0f 95 c0             	setne  al
c000f3da:	31 d2                	xor    edx,edx
c000f3dc:	0f b6 c0             	movzx  eax,al
c000f3df:	f7 d8                	neg    eax
c000f3e1:	83 d2 00             	adc    edx,0x0
c000f3e4:	83 c4 08             	add    esp,0x8
c000f3e7:	f7 da                	neg    edx
c000f3e9:	5b                   	pop    ebx
c000f3ea:	c3                   	ret    
c000f3eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3f5:	83 c4 08             	add    esp,0x8
c000f3f8:	5b                   	pop    ebx
c000f3f9:	c3                   	ret    

c000f3fa <sysCallTell(regs*)>:
c000f3fa:	53                   	push   ebx
c000f3fb:	83 ec 08             	sub    esp,0x8
c000f3fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f402:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f405:	83 f8 02             	cmp    eax,0x2
c000f408:	76 2d                	jbe    c000f437 <sysCallTell(regs*)+0x3d>
c000f40a:	83 ec 0c             	sub    esp,0xc
c000f40d:	50                   	push   eax
c000f40e:	e8 10 1d 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f413:	5a                   	pop    edx
c000f414:	59                   	pop    ecx
c000f415:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f418:	50                   	push   eax
c000f419:	e8 22 35 00 00       	call   c0012940 <File::tell(unsigned long long*)>
c000f41e:	83 c4 10             	add    esp,0x10
c000f421:	85 c0                	test   eax,eax
c000f423:	0f 95 c0             	setne  al
c000f426:	31 d2                	xor    edx,edx
c000f428:	0f b6 c0             	movzx  eax,al
c000f42b:	f7 d8                	neg    eax
c000f42d:	83 d2 00             	adc    edx,0x0
c000f430:	83 c4 08             	add    esp,0x8
c000f433:	f7 da                	neg    edx
c000f435:	5b                   	pop    ebx
c000f436:	c3                   	ret    
c000f437:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f43c:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f441:	83 c4 08             	add    esp,0x8
c000f444:	5b                   	pop    ebx
c000f445:	c3                   	ret    

c000f446 <sysCallSizeFromFilename(regs*)>:
c000f446:	57                   	push   edi
c000f447:	56                   	push   esi
c000f448:	53                   	push   ebx
c000f449:	83 ec 10             	sub    esp,0x10
c000f44c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f450:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f453:	83 ff 02             	cmp    edi,0x2
c000f456:	76 56                	jbe    c000f4ae <sysCallSizeFromFilename(regs*)+0x68>
c000f458:	83 ec 0c             	sub    esp,0xc
c000f45b:	68 14 01 00 00       	push   0x114
c000f460:	e8 35 2f 00 00       	call   c001239a <operator new(unsigned long)>
c000f465:	83 c4 0c             	add    esp,0xc
c000f468:	89 c3                	mov    ebx,eax
c000f46a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f46f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f472:	57                   	push   edi
c000f473:	53                   	push   ebx
c000f474:	e8 4f 33 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000f479:	83 c4 0c             	add    esp,0xc
c000f47c:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f480:	50                   	push   eax
c000f481:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f484:	53                   	push   ebx
c000f485:	e8 4e 36 00 00       	call   c0012ad8 <File::stat(unsigned long long*, bool*)>
c000f48a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f48d:	89 c6                	mov    esi,eax
c000f48f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f491:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f494:	83 c4 10             	add    esp,0x10
c000f497:	31 c0                	xor    eax,eax
c000f499:	85 f6                	test   esi,esi
c000f49b:	0f 95 c0             	setne  al
c000f49e:	31 d2                	xor    edx,edx
c000f4a0:	f7 d8                	neg    eax
c000f4a2:	83 d2 00             	adc    edx,0x0
c000f4a5:	83 c4 10             	add    esp,0x10
c000f4a8:	f7 da                	neg    edx
c000f4aa:	5b                   	pop    ebx
c000f4ab:	5e                   	pop    esi
c000f4ac:	5f                   	pop    edi
c000f4ad:	c3                   	ret    
c000f4ae:	83 c4 10             	add    esp,0x10
c000f4b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4b6:	5b                   	pop    ebx
c000f4b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4bc:	5e                   	pop    esi
c000f4bd:	5f                   	pop    edi
c000f4be:	c3                   	ret    

c000f4bf <sysCallSize(regs*)>:
c000f4bf:	53                   	push   ebx
c000f4c0:	83 ec 18             	sub    esp,0x18
c000f4c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f4c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f4ca:	83 f8 02             	cmp    eax,0x2
c000f4cd:	76 33                	jbe    c000f502 <sysCallSize(regs*)+0x43>
c000f4cf:	83 ec 0c             	sub    esp,0xc
c000f4d2:	50                   	push   eax
c000f4d3:	e8 4b 1c 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f4d8:	83 c4 0c             	add    esp,0xc
c000f4db:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f4df:	52                   	push   edx
c000f4e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f4e3:	50                   	push   eax
c000f4e4:	e8 ef 35 00 00       	call   c0012ad8 <File::stat(unsigned long long*, bool*)>
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	85 c0                	test   eax,eax
c000f4ee:	0f 95 c0             	setne  al
c000f4f1:	31 d2                	xor    edx,edx
c000f4f3:	0f b6 c0             	movzx  eax,al
c000f4f6:	f7 d8                	neg    eax
c000f4f8:	83 d2 00             	adc    edx,0x0
c000f4fb:	83 c4 18             	add    esp,0x18
c000f4fe:	f7 da                	neg    edx
c000f500:	5b                   	pop    ebx
c000f501:	c3                   	ret    
c000f502:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f507:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f50c:	83 c4 18             	add    esp,0x18
c000f50f:	5b                   	pop    ebx
c000f510:	c3                   	ret    

c000f511 <sysCallClose(regs*)>:
c000f511:	53                   	push   ebx
c000f512:	83 ec 08             	sub    esp,0x8
c000f515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f519:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f51c:	83 f8 02             	cmp    eax,0x2
c000f51f:	76 2f                	jbe    c000f550 <sysCallClose(regs*)+0x3f>
c000f521:	83 ec 0c             	sub    esp,0xc
c000f524:	50                   	push   eax
c000f525:	e8 f9 1b 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f52a:	89 c3                	mov    ebx,eax
c000f52c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f52f:	e8 56 33 00 00       	call   c001288a <File::close()>
c000f534:	83 c4 10             	add    esp,0x10
c000f537:	85 db                	test   ebx,ebx
c000f539:	74 0c                	je     c000f547 <sysCallClose(regs*)+0x36>
c000f53b:	83 ec 0c             	sub    esp,0xc
c000f53e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f540:	53                   	push   ebx
c000f541:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f544:	83 c4 10             	add    esp,0x10
c000f547:	31 c0                	xor    eax,eax
c000f549:	31 d2                	xor    edx,edx
c000f54b:	83 c4 08             	add    esp,0x8
c000f54e:	5b                   	pop    ebx
c000f54f:	c3                   	ret    
c000f550:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f555:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f55a:	83 c4 08             	add    esp,0x8
c000f55d:	5b                   	pop    ebx
c000f55e:	c3                   	ret    

c000f55f <sysCallOpenDir(regs*)>:
c000f55f:	56                   	push   esi
c000f560:	53                   	push   ebx
c000f561:	53                   	push   ebx
c000f562:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f566:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f569:	85 f6                	test   esi,esi
c000f56b:	74 51                	je     c000f5be <sysCallOpenDir(regs*)+0x5f>
c000f56d:	83 ec 0c             	sub    esp,0xc
c000f570:	68 14 01 00 00       	push   0x114
c000f575:	e8 20 2e 00 00       	call   c001239a <operator new(unsigned long)>
c000f57a:	83 c4 0c             	add    esp,0xc
c000f57d:	89 c6                	mov    esi,eax
c000f57f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f584:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f587:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f58a:	56                   	push   esi
c000f58b:	e8 fa 36 00 00       	call   c0012c8a <Directory::Directory(char const*, Process*)>
c000f590:	89 34 24             	mov    DWORD PTR [esp],esi
c000f593:	e8 56 37 00 00       	call   c0012cee <Directory::open()>
c000f598:	83 c4 10             	add    esp,0x10
c000f59b:	85 c0                	test   eax,eax
c000f59d:	75 1f                	jne    c000f5be <sysCallOpenDir(regs*)+0x5f>
c000f59f:	83 ec 0c             	sub    esp,0xc
c000f5a2:	56                   	push   esi
c000f5a3:	e8 16 1a 00 00       	call   c0010fbe <UnixFile::getFileDescriptor()>
c000f5a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f5ab:	83 c4 10             	add    esp,0x10
c000f5ae:	89 02                	mov    DWORD PTR [edx],eax
c000f5b0:	c1 f8 1f             	sar    eax,0x1f
c000f5b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f5b6:	31 c0                	xor    eax,eax
c000f5b8:	59                   	pop    ecx
c000f5b9:	31 d2                	xor    edx,edx
c000f5bb:	5b                   	pop    ebx
c000f5bc:	5e                   	pop    esi
c000f5bd:	c3                   	ret    
c000f5be:	59                   	pop    ecx
c000f5bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5c9:	5b                   	pop    ebx
c000f5ca:	5e                   	pop    esi
c000f5cb:	c3                   	ret    

c000f5cc <sysCallMakeDir(regs*)>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	68 14 01 00 00       	push   0x114
c000f5d6:	e8 bf 2d 00 00       	call   c001239a <operator new(unsigned long)>
c000f5db:	83 c4 0c             	add    esp,0xc
c000f5de:	89 c3                	mov    ebx,eax
c000f5e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5e5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f5e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5ec:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f5ef:	53                   	push   ebx
c000f5f0:	e8 95 36 00 00       	call   c0012c8a <Directory::Directory(char const*, Process*)>
c000f5f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5f8:	e8 d1 38 00 00       	call   c0012ece <Directory::create()>
c000f5fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f600:	89 c6                	mov    esi,eax
c000f602:	e8 43 37 00 00       	call   c0012d4a <Directory::close()>
c000f607:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f609:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f60c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f60f:	31 c0                	xor    eax,eax
c000f611:	85 f6                	test   esi,esi
c000f613:	0f 95 c0             	setne  al
c000f616:	31 d2                	xor    edx,edx
c000f618:	f7 d8                	neg    eax
c000f61a:	83 d2 00             	adc    edx,0x0
c000f61d:	83 c4 14             	add    esp,0x14
c000f620:	f7 da                	neg    edx
c000f622:	5b                   	pop    ebx
c000f623:	5e                   	pop    esi
c000f624:	c3                   	ret    

c000f625 <sysCallCloseDir(regs*)>:
c000f625:	53                   	push   ebx
c000f626:	83 ec 08             	sub    esp,0x8
c000f629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f62d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f630:	83 f8 02             	cmp    eax,0x2
c000f633:	76 2f                	jbe    c000f664 <sysCallCloseDir(regs*)+0x3f>
c000f635:	83 ec 0c             	sub    esp,0xc
c000f638:	50                   	push   eax
c000f639:	e8 e5 1a 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f63e:	89 c3                	mov    ebx,eax
c000f640:	89 04 24             	mov    DWORD PTR [esp],eax
c000f643:	e8 02 37 00 00       	call   c0012d4a <Directory::close()>
c000f648:	83 c4 10             	add    esp,0x10
c000f64b:	85 db                	test   ebx,ebx
c000f64d:	74 0c                	je     c000f65b <sysCallCloseDir(regs*)+0x36>
c000f64f:	83 ec 0c             	sub    esp,0xc
c000f652:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f654:	53                   	push   ebx
c000f655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f658:	83 c4 10             	add    esp,0x10
c000f65b:	31 c0                	xor    eax,eax
c000f65d:	31 d2                	xor    edx,edx
c000f65f:	83 c4 08             	add    esp,0x8
c000f662:	5b                   	pop    ebx
c000f663:	c3                   	ret    
c000f664:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f669:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f66e:	83 c4 08             	add    esp,0x8
c000f671:	5b                   	pop    ebx
c000f672:	c3                   	ret    

c000f673 <sysCallWait(regs*)>:
c000f673:	83 ec 10             	sub    esp,0x10
c000f676:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f67a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f67d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f680:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f683:	e8 24 f2 ff ff       	call   c000e8ac <waitTask(int, int*, int)>
c000f688:	83 c4 1c             	add    esp,0x1c
c000f68b:	99                   	cdq    
c000f68c:	c3                   	ret    

c000f68d <sysCallFork(regs*)>:
c000f68d:	83 ec 18             	sub    esp,0x18
c000f690:	68 d3 91 03 c0       	push   0xc00391d3
c000f695:	e8 50 d7 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000f69a:	58                   	pop    eax
c000f69b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f69f:	e8 d6 ef ff ff       	call   c000e67a <forkProcess(regs*)>
c000f6a4:	83 c4 1c             	add    esp,0x1c
c000f6a7:	99                   	cdq    
c000f6a8:	c3                   	ret    

c000f6a9 <sysCallExecve(regs*)>:
c000f6a9:	53                   	push   ebx
c000f6aa:	81 ec 24 01 00 00    	sub    esp,0x124
c000f6b0:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f6b7:	68 e1 91 03 c0       	push   0xc00391e1
c000f6bc:	e8 29 d7 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000f6c1:	83 c4 0c             	add    esp,0xc
c000f6c4:	68 00 01 00 00       	push   0x100
c000f6c9:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f6cd:	50                   	push   eax
c000f6ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f6d6:	e8 5e 34 00 00       	call   c0012b39 <getcwd(Process*, char*, int)>
c000f6db:	83 c4 0c             	add    esp,0xc
c000f6de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f6e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f6e4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f6e7:	e8 f4 f2 ff ff       	call   c000e9e0 <execveProcess(char const*, char* const*, char* const*)>
c000f6ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f6f6:	81 c4 28 01 00 00    	add    esp,0x128
c000f6fc:	5b                   	pop    ebx
c000f6fd:	c3                   	ret    

c000f6fe <sysCallRmdir(regs*)>:
c000f6fe:	56                   	push   esi
c000f6ff:	53                   	push   ebx
c000f700:	83 ec 10             	sub    esp,0x10
c000f703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f707:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f70a:	68 14 01 00 00       	push   0x114
c000f70f:	e8 86 2c 00 00       	call   c001239a <operator new(unsigned long)>
c000f714:	83 c4 0c             	add    esp,0xc
c000f717:	89 c3                	mov    ebx,eax
c000f719:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f71e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f721:	56                   	push   esi
c000f722:	53                   	push   ebx
c000f723:	e8 a0 30 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000f728:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f72b:	e8 74 32 00 00       	call   c00129a4 <File::unlink()>
c000f730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f733:	89 c6                	mov    esi,eax
c000f735:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f737:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f73a:	31 c0                	xor    eax,eax
c000f73c:	85 f6                	test   esi,esi
c000f73e:	0f 95 c0             	setne  al
c000f741:	31 d2                	xor    edx,edx
c000f743:	f7 d8                	neg    eax
c000f745:	83 d2 00             	adc    edx,0x0
c000f748:	83 c4 14             	add    esp,0x14
c000f74b:	f7 da                	neg    edx
c000f74d:	5b                   	pop    ebx
c000f74e:	5e                   	pop    esi
c000f74f:	c3                   	ret    

c000f750 <sysCallUnlink(regs*)>:
c000f750:	56                   	push   esi
c000f751:	53                   	push   ebx
c000f752:	83 ec 10             	sub    esp,0x10
c000f755:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f759:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f75c:	68 14 01 00 00       	push   0x114
c000f761:	e8 34 2c 00 00       	call   c001239a <operator new(unsigned long)>
c000f766:	83 c4 0c             	add    esp,0xc
c000f769:	89 c3                	mov    ebx,eax
c000f76b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f770:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f773:	56                   	push   esi
c000f774:	53                   	push   ebx
c000f775:	e8 4e 30 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000f77a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f77d:	e8 22 32 00 00       	call   c00129a4 <File::unlink()>
c000f782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f785:	89 c6                	mov    esi,eax
c000f787:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f789:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f78c:	31 c0                	xor    eax,eax
c000f78e:	85 f6                	test   esi,esi
c000f790:	0f 95 c0             	setne  al
c000f793:	31 d2                	xor    edx,edx
c000f795:	f7 d8                	neg    eax
c000f797:	83 d2 00             	adc    edx,0x0
c000f79a:	83 c4 14             	add    esp,0x14
c000f79d:	f7 da                	neg    edx
c000f79f:	5b                   	pop    ebx
c000f7a0:	5e                   	pop    esi
c000f7a1:	c3                   	ret    

c000f7a2 <sysCallGetArgv(regs*)>:
c000f7a2:	83 ec 0c             	sub    esp,0xc
c000f7a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7a9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f7ac:	85 c0                	test   eax,eax
c000f7ae:	78 2b                	js     c000f7db <sysCallGetArgv(regs*)+0x39>
c000f7b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f7b6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f7b9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f7bf:	7d 1a                	jge    c000f7db <sysCallGetArgv(regs*)+0x39>
c000f7c1:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f7c8:	85 c0                	test   eax,eax
c000f7ca:	74 17                	je     c000f7e3 <sysCallGetArgv(regs*)+0x41>
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	50                   	push   eax
c000f7d0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f7d3:	e8 a4 0f ff ff       	call   c000077c <strcpy>
c000f7d8:	83 c4 10             	add    esp,0x10
c000f7db:	31 c0                	xor    eax,eax
c000f7dd:	31 d2                	xor    edx,edx
c000f7df:	83 c4 0c             	add    esp,0xc
c000f7e2:	c3                   	ret    
c000f7e3:	b8 01 00 00 00       	mov    eax,0x1
c000f7e8:	31 d2                	xor    edx,edx
c000f7ea:	83 c4 0c             	add    esp,0xc
c000f7ed:	c3                   	ret    

c000f7ee <sysCallTTYName(regs*)>:
c000f7ee:	56                   	push   esi
c000f7ef:	53                   	push   ebx
c000f7f0:	53                   	push   ebx
c000f7f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7f5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f7f8:	85 c0                	test   eax,eax
c000f7fa:	74 58                	je     c000f854 <sysCallTTYName(regs*)+0x66>
c000f7fc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f7ff:	83 f8 02             	cmp    eax,0x2
c000f802:	77 3e                	ja     c000f842 <sysCallTTYName(regs*)+0x54>
c000f804:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f809:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f80c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f812:	85 db                	test   ebx,ebx
c000f814:	74 3e                	je     c000f854 <sysCallTTYName(regs*)+0x66>
c000f816:	83 ec 0c             	sub    esp,0xc
c000f819:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f81b:	53                   	push   ebx
c000f81c:	ff 10                	call   DWORD PTR [eax]
c000f81e:	83 c4 10             	add    esp,0x10
c000f821:	84 c0                	test   al,al
c000f823:	74 3a                	je     c000f85f <sysCallTTYName(regs*)+0x71>
c000f825:	83 ec 08             	sub    esp,0x8
c000f828:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f82e:	53                   	push   ebx
c000f82f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f832:	e8 45 0f ff ff       	call   c000077c <strcpy>
c000f837:	83 c4 10             	add    esp,0x10
c000f83a:	31 c0                	xor    eax,eax
c000f83c:	59                   	pop    ecx
c000f83d:	31 d2                	xor    edx,edx
c000f83f:	5b                   	pop    ebx
c000f840:	5e                   	pop    esi
c000f841:	c3                   	ret    
c000f842:	83 ec 0c             	sub    esp,0xc
c000f845:	50                   	push   eax
c000f846:	e8 d8 18 00 00       	call   c0011123 <getFromFileDescriptor(int)>
c000f84b:	83 c4 10             	add    esp,0x10
c000f84e:	89 c3                	mov    ebx,eax
c000f850:	85 db                	test   ebx,ebx
c000f852:	75 c2                	jne    c000f816 <sysCallTTYName(regs*)+0x28>
c000f854:	59                   	pop    ecx
c000f855:	b8 01 00 00 00       	mov    eax,0x1
c000f85a:	31 d2                	xor    edx,edx
c000f85c:	5b                   	pop    ebx
c000f85d:	5e                   	pop    esi
c000f85e:	c3                   	ret    
c000f85f:	59                   	pop    ecx
c000f860:	b8 02 00 00 00       	mov    eax,0x2
c000f865:	31 d2                	xor    edx,edx
c000f867:	5b                   	pop    ebx
c000f868:	5e                   	pop    esi
c000f869:	c3                   	ret    

c000f86a <sysCallGetEnv(regs*)>:
c000f86a:	83 ec 0c             	sub    esp,0xc
c000f86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f871:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f874:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f877:	85 c9                	test   ecx,ecx
c000f879:	75 0c                	jne    c000f887 <sysCallGetEnv(regs*)+0x1d>
c000f87b:	85 d2                	test   edx,edx
c000f87d:	74 14                	je     c000f893 <sysCallGetEnv(regs*)+0x29>
c000f87f:	31 c0                	xor    eax,eax
c000f881:	31 d2                	xor    edx,edx
c000f883:	83 c4 0c             	add    esp,0xc
c000f886:	c3                   	ret    
c000f887:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f88a:	85 d2                	test   edx,edx
c000f88c:	74 1b                	je     c000f8a9 <sysCallGetEnv(regs*)+0x3f>
c000f88e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f891:	eb ec                	jmp    c000f87f <sysCallGetEnv(regs*)+0x15>
c000f893:	83 ec 0c             	sub    esp,0xc
c000f896:	68 2c 92 03 c0       	push   0xc003922c
c000f89b:	e8 3c 0e ff ff       	call   c00006dc <strlen>
c000f8a0:	83 c4 10             	add    esp,0x10
c000f8a3:	31 d2                	xor    edx,edx
c000f8a5:	83 c4 0c             	add    esp,0xc
c000f8a8:	c3                   	ret    
c000f8a9:	83 ec 08             	sub    esp,0x8
c000f8ac:	68 2c 92 03 c0       	push   0xc003922c
c000f8b1:	50                   	push   eax
c000f8b2:	e8 c5 0e ff ff       	call   c000077c <strcpy>
c000f8b7:	83 c4 10             	add    esp,0x10
c000f8ba:	eb c3                	jmp    c000f87f <sysCallGetEnv(regs*)+0x15>

c000f8bc <sysCallUSleep(regs*)>:
c000f8bc:	83 ec 14             	sub    esp,0x14
c000f8bf:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f8c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f8c8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f8cf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f8d2:	01 ca                	add    edx,ecx
c000f8d4:	52                   	push   edx
c000f8d5:	50                   	push   eax
c000f8d6:	e8 6a f0 ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c000f8db:	31 c0                	xor    eax,eax
c000f8dd:	31 d2                	xor    edx,edx
c000f8df:	83 c4 1c             	add    esp,0x1c
c000f8e2:	c3                   	ret    

c000f8e3 <sysCallSpawn(regs*)>:
c000f8e3:	56                   	push   esi
c000f8e4:	53                   	push   ebx
c000f8e5:	53                   	push   ebx
c000f8e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8ea:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f8ed:	85 f6                	test   esi,esi
c000f8ef:	75 08                	jne    c000f8f9 <sysCallSpawn(regs*)+0x16>
c000f8f1:	59                   	pop    ecx
c000f8f2:	31 c0                	xor    eax,eax
c000f8f4:	31 d2                	xor    edx,edx
c000f8f6:	5b                   	pop    ebx
c000f8f7:	5e                   	pop    esi
c000f8f8:	c3                   	ret    
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	68 f1 91 03 c0       	push   0xc00391f1
c000f901:	e8 e4 d4 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000f906:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f90d:	e8 88 2a 00 00       	call   c001239a <operator new(unsigned long)>
c000f912:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f915:	89 c6                	mov    esi,eax
c000f917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f91c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f91f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f922:	56                   	push   esi
c000f923:	e8 0c e6 ff ff       	call   c000df34 <Process::Process(char const*, Process*, char**)>
c000f928:	83 c4 20             	add    esp,0x20
c000f92b:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f932:	75 bd                	jne    c000f8f1 <sysCallSpawn(regs*)+0xe>
c000f934:	83 ec 0c             	sub    esp,0xc
c000f937:	68 fc 91 03 c0       	push   0xc00391fc
c000f93c:	e8 a9 d4 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000f941:	89 34 24             	mov    DWORD PTR [esp],esi
c000f944:	e8 51 eb ff ff       	call   c000e49a <Process::createUserThread()>
c000f949:	8b 06                	mov    eax,DWORD PTR [esi]
c000f94b:	83 c4 10             	add    esp,0x10
c000f94e:	99                   	cdq    
c000f94f:	59                   	pop    ecx
c000f950:	5b                   	pop    ebx
c000f951:	5e                   	pop    esi
c000f952:	c3                   	ret    

c000f953 <sysAppSettings(regs*)>:
c000f953:	53                   	push   ebx
c000f954:	83 ec 08             	sub    esp,0x8
c000f957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f95b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f95e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000f964:	25 e0 1f 00 00       	and    eax,0x1fe0
c000f969:	66 3d c0 09          	cmp    ax,0x9c0
c000f96d:	75 2f                	jne    c000f99e <sysAppSettings(regs*)+0x4b>
c000f96f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000f975:	83 e0 1f             	and    eax,0x1f
c000f978:	3c 01                	cmp    al,0x1
c000f97a:	74 2e                	je     c000f9aa <sysAppSettings(regs*)+0x57>
c000f97c:	3c 07                	cmp    al,0x7
c000f97e:	0f 84 bd 00 00 00    	je     c000fa41 <sysAppSettings(regs*)+0xee>
c000f984:	84 c0                	test   al,al
c000f986:	0f 84 dc 00 00 00    	je     c000fa68 <sysAppSettings(regs*)+0x115>
c000f98c:	3c 08                	cmp    al,0x8
c000f98e:	74 6d                	je     c000f9fd <sysAppSettings(regs*)+0xaa>
c000f990:	0f b6 c0             	movzx  eax,al
c000f993:	83 c4 08             	add    esp,0x8
c000f996:	05 e8 03 00 00       	add    eax,0x3e8
c000f99b:	5b                   	pop    ebx
c000f99c:	99                   	cdq    
c000f99d:	c3                   	ret    
c000f99e:	b8 01 00 00 00       	mov    eax,0x1
c000f9a3:	31 d2                	xor    edx,edx
c000f9a5:	83 c4 08             	add    esp,0x8
c000f9a8:	5b                   	pop    ebx
c000f9a9:	c3                   	ret    
c000f9aa:	51                   	push   ecx
c000f9ab:	68 00 01 00 00       	push   0x100
c000f9b0:	6a 00                	push   0x0
c000f9b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9ba:	83 c0 0c             	add    eax,0xc
c000f9bd:	50                   	push   eax
c000f9be:	e8 fd 0c ff ff       	call   c00006c0 <memset>
c000f9c3:	83 c4 0c             	add    esp,0xc
c000f9c6:	68 ff 00 00 00       	push   0xff
c000f9cb:	53                   	push   ebx
c000f9cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9d4:	83 c0 0c             	add    eax,0xc
c000f9d7:	50                   	push   eax
c000f9d8:	e8 97 0c ff ff       	call   c0000674 <memcpy>
c000f9dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e2:	5b                   	pop    ebx
c000f9e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e6:	5a                   	pop    edx
c000f9e7:	8d 50 0c             	lea    edx,[eax+0xc]
c000f9ea:	52                   	push   edx
c000f9eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f9f1:	e8 ee 09 00 00       	call   c00103e4 <VgaText::setTitle(char*)>
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	31 c0                	xor    eax,eax
c000f9fb:	eb a6                	jmp    c000f9a3 <sysAppSettings(regs*)+0x50>
c000f9fd:	83 ec 08             	sub    esp,0x8
c000fa00:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fa06:	83 e0 0f             	and    eax,0xf
c000fa09:	50                   	push   eax
c000fa0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fa18:	e8 b7 09 00 00       	call   c00103d4 <VgaText::setTitleColour(VgaColour)>
c000fa1d:	58                   	pop    eax
c000fa1e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fa24:	5a                   	pop    edx
c000fa25:	c1 e8 04             	shr    eax,0x4
c000fa28:	83 e0 0f             	and    eax,0xf
c000fa2b:	50                   	push   eax
c000fa2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fa3a:	e8 85 09 00 00       	call   c00103c4 <VgaText::setTitleTextColour(VgaColour)>
c000fa3f:	eb b5                	jmp    c000f9f6 <sysAppSettings(regs*)+0xa3>
c000fa41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa49:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000fa4f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000fa55:	c0 e8 06             	shr    al,0x6
c000fa58:	83 e0 01             	and    eax,0x1
c000fa5b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fa61:	31 c0                	xor    eax,eax
c000fa63:	e9 3b ff ff ff       	jmp    c000f9a3 <sysAppSettings(regs*)+0x50>
c000fa68:	b8 02 00 00 00       	mov    eax,0x2
c000fa6d:	e9 31 ff ff ff       	jmp    c000f9a3 <sysAppSettings(regs*)+0x50>

c000fa72 <sysSetFatAttrib(regs*)>:
c000fa72:	57                   	push   edi
c000fa73:	56                   	push   esi
c000fa74:	53                   	push   ebx
c000fa75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000fa7f:	68 14 01 00 00       	push   0x114
c000fa84:	e8 11 29 00 00       	call   c001239a <operator new(unsigned long)>
c000fa89:	83 c4 0c             	add    esp,0xc
c000fa8c:	89 c3                	mov    ebx,eax
c000fa8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fa96:	57                   	push   edi
c000fa97:	53                   	push   ebx
c000fa98:	e8 2b 2d 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c000fa9d:	83 c4 0c             	add    esp,0xc
c000faa0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000faa3:	0f b6 d4             	movzx  edx,ah
c000faa6:	0f b6 c0             	movzx  eax,al
c000faa9:	52                   	push   edx
c000faaa:	50                   	push   eax
c000faab:	53                   	push   ebx
c000faac:	e8 8d 2f 00 00       	call   c0012a3e <File::chfatattr(unsigned char, unsigned char)>
c000fab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fab4:	89 c6                	mov    esi,eax
c000fab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fab8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fabb:	83 c4 10             	add    esp,0x10
c000fabe:	31 c0                	xor    eax,eax
c000fac0:	5b                   	pop    ebx
c000fac1:	85 f6                	test   esi,esi
c000fac3:	5e                   	pop    esi
c000fac4:	0f 95 c0             	setne  al
c000fac7:	5f                   	pop    edi
c000fac8:	31 d2                	xor    edx,edx
c000faca:	f7 d8                	neg    eax
c000facc:	83 d2 00             	adc    edx,0x0
c000facf:	f7 da                	neg    edx
c000fad1:	c3                   	ret    

c000fad2 <sysPanic(regs*)>:
c000fad2:	83 ec 18             	sub    esp,0x18
c000fad5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fad9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fadc:	e8 27 d4 ff ff       	call   c000cf08 <panic(char const*)>
c000fae1:	c7 04 24 09 92 03 c0 	mov    DWORD PTR [esp],0xc0039209
c000fae8:	e8 1b d4 ff ff       	call   c000cf08 <panic(char const*)>
c000faed:	b8 01 00 00 00       	mov    eax,0x1
c000faf2:	31 d2                	xor    edx,edx
c000faf4:	83 c4 1c             	add    esp,0x1c
c000faf7:	c3                   	ret    

c000faf8 <sysPipe(regs*)>:
c000faf8:	57                   	push   edi
c000faf9:	56                   	push   esi
c000fafa:	53                   	push   ebx
c000fafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faff:	83 ec 0c             	sub    esp,0xc
c000fb02:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fb05:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fb08:	6a 20                	push   0x20
c000fb0a:	e8 8b 28 00 00       	call   c001239a <operator new(unsigned long)>
c000fb0f:	89 c3                	mov    ebx,eax
c000fb11:	58                   	pop    eax
c000fb12:	5a                   	pop    edx
c000fb13:	68 00 50 00 00       	push   0x5000
c000fb18:	53                   	push   ebx
c000fb19:	e8 26 e3 ff ff       	call   c000de44 <Pipe::Pipe(int)>
c000fb1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb21:	e8 98 14 00 00       	call   c0010fbe <UnixFile::getFileDescriptor()>
c000fb26:	89 07                	mov    DWORD PTR [edi],eax
c000fb28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb2b:	e8 8e 14 00 00       	call   c0010fbe <UnixFile::getFileDescriptor()>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	89 06                	mov    DWORD PTR [esi],eax
c000fb35:	31 d2                	xor    edx,edx
c000fb37:	5b                   	pop    ebx
c000fb38:	31 c0                	xor    eax,eax
c000fb3a:	5e                   	pop    esi
c000fb3b:	5f                   	pop    edi
c000fb3c:	c3                   	ret    

c000fb3d <sysGetUnixTime(regs*)>:
c000fb3d:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c000fb42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fb48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fb4c:	e9 3f 36 00 00       	jmp    c0013190 <Clock::timeInSecondsLocal()>

c000fb51 <string_ends_with(char const*, char const*)>:
c000fb51:	57                   	push   edi
c000fb52:	56                   	push   esi
c000fb53:	53                   	push   ebx
c000fb54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb58:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fb5c:	83 ec 0c             	sub    esp,0xc
c000fb5f:	53                   	push   ebx
c000fb60:	e8 77 0b ff ff       	call   c00006dc <strlen>
c000fb65:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb68:	89 c6                	mov    esi,eax
c000fb6a:	e8 6d 0b ff ff       	call   c00006dc <strlen>
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	39 c6                	cmp    esi,eax
c000fb74:	7d 06                	jge    c000fb7c <string_ends_with(char const*, char const*)+0x2b>
c000fb76:	5b                   	pop    ebx
c000fb77:	31 c0                	xor    eax,eax
c000fb79:	5e                   	pop    esi
c000fb7a:	5f                   	pop    edi
c000fb7b:	c3                   	ret    
c000fb7c:	83 ec 08             	sub    esp,0x8
c000fb7f:	29 c6                	sub    esi,eax
c000fb81:	57                   	push   edi
c000fb82:	01 f3                	add    ebx,esi
c000fb84:	53                   	push   ebx
c000fb85:	e8 7e 0c ff ff       	call   c0000808 <strcmp>
c000fb8a:	83 c4 10             	add    esp,0x10
c000fb8d:	85 c0                	test   eax,eax
c000fb8f:	5b                   	pop    ebx
c000fb90:	0f 94 c0             	sete   al
c000fb93:	5e                   	pop    esi
c000fb94:	0f b6 c0             	movzx  eax,al
c000fb97:	5f                   	pop    edi
c000fb98:	c3                   	ret    

c000fb99 <setupSystemCalls()>:
c000fb99:	c7 05 a0 bb 03 c0 16 84 01 c0 	mov    DWORD PTR ds:0xc003bba0,0xc0018416
c000fba3:	c7 05 a4 bb 03 c0 d9 82 01 c0 	mov    DWORD PTR ds:0xc003bba4,0xc00182d9
c000fbad:	c7 05 a8 bb 03 c0 59 83 01 c0 	mov    DWORD PTR ds:0xc003bba8,0xc0018359
c000fbb7:	c7 05 ac bb 03 c0 ae 83 01 c0 	mov    DWORD PTR ds:0xc003bbac,0xc00183ae
c000fbc1:	c7 05 b0 bb 03 c0 f1 82 01 c0 	mov    DWORD PTR ds:0xc003bbb0,0xc00182f1
c000fbcb:	c7 05 b4 bb 03 c0 00 f0 00 c0 	mov    DWORD PTR ds:0xc003bbb4,0xc000f000
c000fbd5:	c7 05 b8 bb 03 c0 79 f1 00 c0 	mov    DWORD PTR ds:0xc003bbb8,0xc000f179
c000fbdf:	c7 05 bc bb 03 c0 98 f1 00 c0 	mov    DWORD PTR ds:0xc003bbbc,0xc000f198
c000fbe9:	c7 05 c4 bb 03 c0 11 f5 00 c0 	mov    DWORD PTR ds:0xc003bbc4,0xc000f511
c000fbf3:	c7 05 c0 bb 03 c0 f7 f1 00 c0 	mov    DWORD PTR ds:0xc003bbc0,0xc000f1f7
c000fbfd:	c7 05 c8 bb 03 c0 5f f5 00 c0 	mov    DWORD PTR ds:0xc003bbc8,0xc000f55f
c000fc07:	c7 05 cc bb 03 c0 e7 f2 00 c0 	mov    DWORD PTR ds:0xc003bbcc,0xc000f2e7
c000fc11:	c7 05 d0 bb 03 c0 0c f0 00 c0 	mov    DWORD PTR ds:0xc003bbd0,0xc000f00c
c000fc1b:	c7 05 d4 bb 03 c0 11 f0 00 c0 	mov    DWORD PTR ds:0xc003bbd4,0xc000f011
c000fc25:	c7 05 d8 bb 03 c0 cc f5 00 c0 	mov    DWORD PTR ds:0xc003bbd8,0xc000f5cc
c000fc2f:	c7 05 dc bb 03 c0 25 f6 00 c0 	mov    DWORD PTR ds:0xc003bbdc,0xc000f625
c000fc39:	c7 05 e0 bb 03 c0 a9 f3 00 c0 	mov    DWORD PTR ds:0xc003bbe0,0xc000f3a9
c000fc43:	c7 05 e4 bb 03 c0 fa f3 00 c0 	mov    DWORD PTR ds:0xc003bbe4,0xc000f3fa
c000fc4d:	c7 05 e8 bb 03 c0 bf f4 00 c0 	mov    DWORD PTR ds:0xc003bbe8,0xc000f4bf
c000fc57:	c7 05 ec bb 03 c0 16 f0 00 c0 	mov    DWORD PTR ds:0xc003bbec,0xc000f016
c000fc61:	c7 05 f0 bb 03 c0 73 f6 00 c0 	mov    DWORD PTR ds:0xc003bbf0,0xc000f673
c000fc6b:	c7 05 f4 bb 03 c0 8d f6 00 c0 	mov    DWORD PTR ds:0xc003bbf4,0xc000f68d
c000fc75:	c7 05 f8 bb 03 c0 a9 f6 00 c0 	mov    DWORD PTR ds:0xc003bbf8,0xc000f6a9
c000fc7f:	c7 05 fc bb 03 c0 fe f6 00 c0 	mov    DWORD PTR ds:0xc003bbfc,0xc000f6fe
c000fc89:	c7 05 00 bc 03 c0 50 f7 00 c0 	mov    DWORD PTR ds:0xc003bc00,0xc000f750
c000fc93:	c7 05 04 bc 03 c0 20 f0 00 c0 	mov    DWORD PTR ds:0xc003bc04,0xc000f020
c000fc9d:	c7 05 08 bc 03 c0 a2 f7 00 c0 	mov    DWORD PTR ds:0xc003bc08,0xc000f7a2
c000fca7:	c7 05 0c bc 03 c0 b4 f1 00 c0 	mov    DWORD PTR ds:0xc003bc0c,0xc000f1b4
c000fcb1:	c7 05 10 bc 03 c0 ee f7 00 c0 	mov    DWORD PTR ds:0xc003bc10,0xc000f7ee
c000fcbb:	c7 05 14 bc 03 c0 56 f3 00 c0 	mov    DWORD PTR ds:0xc003bc14,0xc000f356
c000fcc5:	c7 05 18 bc 03 c0 bc f8 00 c0 	mov    DWORD PTR ds:0xc003bc18,0xc000f8bc
c000fccf:	c7 05 1c bc 03 c0 46 f4 00 c0 	mov    DWORD PTR ds:0xc003bc1c,0xc000f446
c000fcd9:	c7 05 20 bc 03 c0 e3 f8 00 c0 	mov    DWORD PTR ds:0xc003bc20,0xc000f8e3
c000fce3:	c7 05 24 bc 03 c0 6a f8 00 c0 	mov    DWORD PTR ds:0xc003bc24,0xc000f86a
c000fced:	c7 05 28 bc 03 c0 53 f9 00 c0 	mov    DWORD PTR ds:0xc003bc28,0xc000f953
c000fcf7:	c7 05 2c bc 03 c0 30 f0 00 c0 	mov    DWORD PTR ds:0xc003bc2c,0xc000f030
c000fd01:	c7 05 30 bc 03 c0 9a f0 00 c0 	mov    DWORD PTR ds:0xc003bc30,0xc000f09a
c000fd0b:	c7 05 34 bc 03 c0 e0 f0 00 c0 	mov    DWORD PTR ds:0xc003bc34,0xc000f0e0
c000fd15:	c7 05 38 bc 03 c0 72 fa 00 c0 	mov    DWORD PTR ds:0xc003bc38,0xc000fa72
c000fd1f:	c7 05 3c bc 03 c0 d2 fa 00 c0 	mov    DWORD PTR ds:0xc003bc3c,0xc000fad2
c000fd29:	c7 05 40 bc 03 c0 31 f1 00 c0 	mov    DWORD PTR ds:0xc003bc40,0xc000f131
c000fd33:	c7 05 44 bc 03 c0 f8 fa 00 c0 	mov    DWORD PTR ds:0xc003bc44,0xc000faf8
c000fd3d:	c7 05 48 bc 03 c0 3d fb 00 c0 	mov    DWORD PTR ds:0xc003bc48,0xc000fb3d
c000fd47:	c3                   	ret    

c000fd48 <systemCall(regs*, void*)>:
c000fd48:	53                   	push   ebx
c000fd49:	83 ec 08             	sub    esp,0x8
c000fd4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd50:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fd53:	83 f8 7f             	cmp    eax,0x7f
c000fd56:	77 16                	ja     c000fd6e <systemCall(regs*, void*)+0x26>
c000fd58:	8b 14 85 a0 bb 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4460]
c000fd5f:	85 d2                	test   edx,edx
c000fd61:	74 0b                	je     c000fd6e <systemCall(regs*, void*)+0x26>
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	53                   	push   ebx
c000fd67:	ff d2                	call   edx
c000fd69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fd6c:	eb 0d                	jmp    c000fd7b <systemCall(regs*, void*)+0x33>
c000fd6e:	52                   	push   edx
c000fd6f:	52                   	push   edx
c000fd70:	50                   	push   eax
c000fd71:	68 18 92 03 c0       	push   0xc0039218
c000fd76:	e8 6f d0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fd83:	31 d2                	xor    edx,edx
c000fd85:	83 c4 08             	add    esp,0x8
c000fd88:	5b                   	pop    ebx
c000fd89:	c3                   	ret    

c000fd8a <VgaText::isAtty()>:
c000fd8a:	b0 01                	mov    al,0x1
c000fd8c:	c3                   	ret    
c000fd8d:	90                   	nop

c000fd8e <VgaText::~VgaText()>:
c000fd8e:	83 ec 0c             	sub    esp,0xc
c000fd91:	ba 20 93 03 c0       	mov    edx,0xc0039320
c000fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd9a:	89 10                	mov    DWORD PTR [eax],edx
c000fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fda0:	83 ec 0c             	sub    esp,0xc
c000fda3:	50                   	push   eax
c000fda4:	e8 81 12 00 00       	call   c001102a <UnixFile::~UnixFile()>
c000fda9:	83 c4 10             	add    esp,0x10
c000fdac:	90                   	nop
c000fdad:	83 c4 0c             	add    esp,0xc
c000fdb0:	c3                   	ret    
c000fdb1:	90                   	nop

c000fdb2 <VgaText::~VgaText()>:
c000fdb2:	83 ec 0c             	sub    esp,0xc
c000fdb5:	83 ec 0c             	sub    esp,0xc
c000fdb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdbc:	e8 cd ff ff ff       	call   c000fd8e <VgaText::~VgaText()>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	83 ec 08             	sub    esp,0x8
c000fdc7:	68 60 12 00 00       	push   0x1260
c000fdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdd0:	e8 d4 25 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c000fdd5:	83 c4 10             	add    esp,0x10
c000fdd8:	83 c4 0c             	add    esp,0xc
c000fddb:	c3                   	ret    

c000fddc <VgaText::read(unsigned long long, void*, int*)>:
c000fddc:	83 ec 10             	sub    esp,0x10
c000fddf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fde3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fde7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdeb:	e8 34 4f 00 00       	call   c0014d24 <readKeyboard(VgaText*, char*, unsigned long)>
c000fdf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fdf4:	89 02                	mov    DWORD PTR [edx],eax
c000fdf6:	31 c0                	xor    eax,eax
c000fdf8:	83 c4 1c             	add    esp,0x1c
c000fdfb:	c3                   	ret    

c000fdfc <setTerminalScrollLock(bool)>:
c000fdfc:	c3                   	ret    

c000fdfd <addToTerminalCycle(VgaText*)>:
c000fdfd:	8b 15 c0 bd 03 c0    	mov    edx,DWORD PTR ds:0xc003bdc0
c000fe03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe07:	85 d2                	test   edx,edx
c000fe09:	75 0c                	jne    c000fe17 <addToTerminalCycle(VgaText*)+0x1a>
c000fe0b:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fe11:	a3 c0 bd 03 c0       	mov    ds:0xc003bdc0,eax
c000fe16:	c3                   	ret    
c000fe17:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fe1d:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fe23:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fe29:	c3                   	ret    

c000fe2a <installVgaTextImplementation()>:
c000fe2a:	83 ec 10             	sub    esp,0x10
c000fe2d:	6a 20                	push   0x20
c000fe2f:	6a 00                	push   0x0
c000fe31:	68 a0 bd 03 c0       	push   0xc003bda0
c000fe36:	e8 85 08 ff ff       	call   c00006c0 <memset>
c000fe3b:	83 c4 1c             	add    esp,0x1c
c000fe3e:	c3                   	ret    

c000fe3f <scrollTerminalScrollLock(int)>:
c000fe3f:	c3                   	ret    

c000fe40 <VgaText::load()>:
c000fe40:	53                   	push   ebx
c000fe41:	31 c0                	xor    eax,eax
c000fe43:	83 ec 58             	sub    esp,0x58
c000fe46:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fe4a:	89 e2                	mov    edx,esp
c000fe4c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fe50:	40                   	inc    eax
c000fe51:	83 f8 50             	cmp    eax,0x50
c000fe54:	75 f6                	jne    c000fe4c <VgaText::load()+0xc>
c000fe56:	31 c0                	xor    eax,eax
c000fe58:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fe5f:	84 c9                	test   cl,cl
c000fe61:	74 06                	je     c000fe69 <VgaText::load()+0x29>
c000fe63:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fe66:	40                   	inc    eax
c000fe67:	eb ef                	jmp    c000fe58 <VgaText::load()+0x18>
c000fe69:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fe6f:	85 c0                	test   eax,eax
c000fe71:	74 09                	je     c000fe7c <VgaText::load()+0x3c>
c000fe73:	51                   	push   ecx
c000fe74:	51                   	push   ecx
c000fe75:	52                   	push   edx
c000fe76:	53                   	push   ebx
c000fe77:	ff d0                	call   eax
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fe82:	85 c0                	test   eax,eax
c000fe84:	74 09                	je     c000fe8f <VgaText::load()+0x4f>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	53                   	push   ebx
c000fe8a:	ff d0                	call   eax
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	83 c4 58             	add    esp,0x58
c000fe92:	5b                   	pop    ebx
c000fe93:	c3                   	ret    

c000fe94 <VgaText::updateCursor()>:
c000fe94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe98:	39 05 c4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bdc4,eax
c000fe9e:	75 0c                	jne    c000feac <VgaText::updateCursor()+0x18>
c000fea0:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fea6:	85 c0                	test   eax,eax
c000fea8:	74 02                	je     c000feac <VgaText::updateCursor()+0x18>
c000feaa:	ff e0                	jmp    eax
c000feac:	c3                   	ret    
c000fead:	90                   	nop

c000feae <VgaText::showCursor(bool)>:
c000feae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb6:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000febc:	c3                   	ret    
c000febd:	90                   	nop

c000febe <VgaText::disableBlink(bool)>:
c000febe:	56                   	push   esi
c000febf:	53                   	push   ebx
c000fec0:	51                   	push   ecx
c000fec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fec5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fec9:	39 1d c4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bdc4,ebx
c000fecf:	75 18                	jne    c000fee9 <VgaText::disableBlink(bool)+0x2b>
c000fed1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fed7:	85 c0                	test   eax,eax
c000fed9:	74 0e                	je     c000fee9 <VgaText::disableBlink(bool)+0x2b>
c000fedb:	89 f1                	mov    ecx,esi
c000fedd:	52                   	push   edx
c000fede:	52                   	push   edx
c000fedf:	0f b6 d1             	movzx  edx,cl
c000fee2:	52                   	push   edx
c000fee3:	53                   	push   ebx
c000fee4:	ff d0                	call   eax
c000fee6:	83 c4 10             	add    esp,0x10
c000fee9:	89 f0                	mov    eax,esi
c000feeb:	83 f0 01             	xor    eax,0x1
c000feee:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fef4:	58                   	pop    eax
c000fef5:	5b                   	pop    ebx
c000fef6:	5e                   	pop    esi
c000fef7:	c3                   	ret    

c000fef8 <VgaText::doANSI_SGR(int)>:
c000fef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	85 d2                	test   edx,edx
c000ff02:	75 14                	jne    c000ff18 <VgaText::doANSI_SGR(int)+0x20>
c000ff04:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ff0a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ff10:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ff16:	eb 65                	jmp    c000ff7d <VgaText::doANSI_SGR(int)+0x85>
c000ff18:	83 fa 07             	cmp    edx,0x7
c000ff1b:	75 14                	jne    c000ff31 <VgaText::doANSI_SGR(int)+0x39>
c000ff1d:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ff23:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ff29:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ff2f:	eb 4c                	jmp    c000ff7d <VgaText::doANSI_SGR(int)+0x85>
c000ff31:	83 fa 1b             	cmp    edx,0x1b
c000ff34:	74 ce                	je     c000ff04 <VgaText::doANSI_SGR(int)+0xc>
c000ff36:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ff39:	83 f9 07             	cmp    ecx,0x7
c000ff3c:	77 09                	ja     c000ff47 <VgaText::doANSI_SGR(int)+0x4f>
c000ff3e:	8b 14 8d 80 ad 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc5280]
c000ff45:	eb 20                	jmp    c000ff67 <VgaText::doANSI_SGR(int)+0x6f>
c000ff47:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ff4a:	83 f9 07             	cmp    ecx,0x7
c000ff4d:	77 09                	ja     c000ff58 <VgaText::doANSI_SGR(int)+0x60>
c000ff4f:	8b 14 8d 80 ad 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc5280]
c000ff56:	eb 25                	jmp    c000ff7d <VgaText::doANSI_SGR(int)+0x85>
c000ff58:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ff5b:	83 f9 07             	cmp    ecx,0x7
c000ff5e:	77 0e                	ja     c000ff6e <VgaText::doANSI_SGR(int)+0x76>
c000ff60:	8b 14 95 38 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc53c8]
c000ff67:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ff6d:	c3                   	ret    
c000ff6e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ff71:	83 f9 07             	cmp    ecx,0x7
c000ff74:	77 0d                	ja     c000ff83 <VgaText::doANSI_SGR(int)+0x8b>
c000ff76:	8b 14 95 10 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc53f0]
c000ff7d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ff83:	c3                   	ret    

c000ff84 <VgaText::setDefaultBgColour(VgaColour)>:
c000ff84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff8c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000ff92:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ff98:	c3                   	ret    
c000ff99:	90                   	nop

c000ff9a <VgaText::setDefaultFgColour(VgaColour)>:
c000ff9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffa2:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000ffa8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ffae:	c3                   	ret    
c000ffaf:	90                   	nop

c000ffb0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ffb0:	53                   	push   ebx
c000ffb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ffb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ffb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ffbd:	51                   	push   ecx
c000ffbe:	e8 c1 ff ff ff       	call   c000ff84 <VgaText::setDefaultBgColour(VgaColour)>
c000ffc3:	58                   	pop    eax
c000ffc4:	5a                   	pop    edx
c000ffc5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ffc9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ffcd:	5b                   	pop    ebx
c000ffce:	eb ca                	jmp    c000ff9a <VgaText::setDefaultFgColour(VgaColour)>

c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ffd0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ffd4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ffd9:	83 e0 0f             	and    eax,0xf
c000ffdc:	c1 e2 04             	shl    edx,0x4
c000ffdf:	09 d0                	or     eax,edx
c000ffe1:	c3                   	ret    

c000ffe2 <VgaText::scrollScreen()>:
c000ffe2:	57                   	push   edi
c000ffe3:	56                   	push   esi
c000ffe4:	be 01 00 00 00       	mov    esi,0x1
c000ffe9:	53                   	push   ebx
c000ffea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffee:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fff4:	31 ff                	xor    edi,edi
c000fff6:	01 d9                	add    ecx,ebx
c000fff8:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fffb:	83 fe 17             	cmp    esi,0x17
c000fffe:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010004:	75 28                	jne    c001002e <VgaText::scrollScreen()+0x4c>
c0010006:	f7 c7 01 00 00 00    	test   edi,0x1
c001000c:	74 1c                	je     c001002a <VgaText::scrollScreen()+0x48>
c001000e:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010015:	50                   	push   eax
c0010016:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001001d:	50                   	push   eax
c001001e:	e8 ad ff ff ff       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010023:	5a                   	pop    edx
c0010024:	5a                   	pop    edx
c0010025:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010028:	eb 04                	jmp    c001002e <VgaText::scrollScreen()+0x4c>
c001002a:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001002e:	47                   	inc    edi
c001002f:	41                   	inc    ecx
c0010030:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010036:	75 c0                	jne    c000fff8 <VgaText::scrollScreen()+0x16>
c0010038:	46                   	inc    esi
c0010039:	83 fe 18             	cmp    esi,0x18
c001003c:	75 b0                	jne    c000ffee <VgaText::scrollScreen()+0xc>
c001003e:	39 1d c4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bdc4,ebx
c0010044:	75 24                	jne    c001006a <VgaText::scrollScreen()+0x88>
c0010046:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001004d:	74 08                	je     c0010057 <VgaText::scrollScreen()+0x75>
c001004f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010055:	eb 13                	jmp    c001006a <VgaText::scrollScreen()+0x88>
c0010057:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001005d:	85 c0                	test   eax,eax
c001005f:	74 09                	je     c001006a <VgaText::scrollScreen()+0x88>
c0010061:	83 ec 0c             	sub    esp,0xc
c0010064:	53                   	push   ebx
c0010065:	ff d0                	call   eax
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001006e:	5b                   	pop    ebx
c001006f:	5e                   	pop    esi
c0010070:	5f                   	pop    edi
c0010071:	e9 1e fe ff ff       	jmp    c000fe94 <VgaText::updateCursor()>

c0010076 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010076:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001007b:	c1 e0 08             	shl    eax,0x8
c001007e:	89 c2                	mov    edx,eax
c0010080:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010085:	09 d0                	or     eax,edx
c0010087:	c3                   	ret    

c0010088 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010088:	53                   	push   ebx
c0010089:	83 ec 08             	sub    esp,0x8
c001008c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010090:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010095:	50                   	push   eax
c0010096:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001009b:	50                   	push   eax
c001009c:	e8 2f ff ff ff       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c00100a1:	5a                   	pop    edx
c00100a2:	0f b6 c0             	movzx  eax,al
c00100a5:	5b                   	pop    ebx
c00100a6:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00100ab:	50                   	push   eax
c00100ac:	53                   	push   ebx
c00100ad:	e8 c4 ff ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c00100b2:	5a                   	pop    edx
c00100b3:	5a                   	pop    edx
c00100b4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00100ba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00100be:	0f b7 d2             	movzx  edx,dx
c00100c1:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00100c6:	39 0d c4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bdc4,ecx
c00100cc:	75 14                	jne    c00100e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00100ce:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00100d4:	85 c0                	test   eax,eax
c00100d6:	74 0a                	je     c00100e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00100d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00100dc:	83 c4 08             	add    esp,0x8
c00100df:	5b                   	pop    ebx
c00100e0:	ff e0                	jmp    eax
c00100e2:	83 c4 08             	add    esp,0x8
c00100e5:	5b                   	pop    ebx
c00100e6:	c3                   	ret    
c00100e7:	90                   	nop

c00100e8 <VgaText::getCursorX()>:
c00100e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ec:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00100f2:	c3                   	ret    
c00100f3:	90                   	nop

c00100f4 <VgaText::getCursorY()>:
c00100f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f8:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00100fe:	c3                   	ret    
c00100ff:	90                   	nop

c0010100 <VgaText::setCursor(int, int)>:
c0010100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010108:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001010e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010112:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010118:	e9 77 fd ff ff       	jmp    c000fe94 <VgaText::updateCursor()>
c001011d:	90                   	nop

c001011e <VgaText::setCursorX(int)>:
c001011e:	83 ec 10             	sub    esp,0x10
c0010121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010125:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001012b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001012f:	50                   	push   eax
c0010130:	e8 cb ff ff ff       	call   c0010100 <VgaText::setCursor(int, int)>
c0010135:	83 c4 1c             	add    esp,0x1c
c0010138:	c3                   	ret    
c0010139:	90                   	nop

c001013a <VgaText::setCursorY(int)>:
c001013a:	83 ec 10             	sub    esp,0x10
c001013d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010141:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010145:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001014b:	50                   	push   eax
c001014c:	e8 af ff ff ff       	call   c0010100 <VgaText::setCursor(int, int)>
c0010151:	83 c4 1c             	add    esp,0x1c
c0010154:	c3                   	ret    
c0010155:	90                   	nop

c0010156 <VgaText::incrementCursor(bool)>:
c0010156:	56                   	push   esi
c0010157:	53                   	push   ebx
c0010158:	51                   	push   ecx
c0010159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001015d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010161:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010167:	40                   	inc    eax
c0010168:	83 f8 50             	cmp    eax,0x50
c001016b:	74 08                	je     c0010175 <VgaText::incrementCursor(bool)+0x1f>
c001016d:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010173:	eb 33                	jmp    c00101a8 <VgaText::incrementCursor(bool)+0x52>
c0010175:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001017b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010185:	8d 50 01             	lea    edx,[eax+0x1]
c0010188:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001018e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010194:	75 12                	jne    c00101a8 <VgaText::incrementCursor(bool)+0x52>
c0010196:	83 ec 0c             	sub    esp,0xc
c0010199:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001019f:	53                   	push   ebx
c00101a0:	e8 3d fe ff ff       	call   c000ffe2 <VgaText::scrollScreen()>
c00101a5:	83 c4 10             	add    esp,0x10
c00101a8:	89 f0                	mov    eax,esi
c00101aa:	84 c0                	test   al,al
c00101ac:	74 0c                	je     c00101ba <VgaText::incrementCursor(bool)+0x64>
c00101ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00101b2:	5a                   	pop    edx
c00101b3:	5b                   	pop    ebx
c00101b4:	5e                   	pop    esi
c00101b5:	e9 da fc ff ff       	jmp    c000fe94 <VgaText::updateCursor()>
c00101ba:	58                   	pop    eax
c00101bb:	5b                   	pop    ebx
c00101bc:	5e                   	pop    esi
c00101bd:	c3                   	ret    

c00101be <VgaText::updateRAMUsageDisplay(int)>:
c00101be:	53                   	push   ebx
c00101bf:	bb 0a 00 00 00       	mov    ebx,0xa
c00101c4:	6a 0f                	push   0xf
c00101c6:	6a 00                	push   0x0
c00101c8:	e8 03 fe ff ff       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c00101cd:	5a                   	pop    edx
c00101ce:	59                   	pop    ecx
c00101cf:	0f b6 c8             	movzx  ecx,al
c00101d2:	51                   	push   ecx
c00101d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101d7:	99                   	cdq    
c00101d8:	f7 fb                	idiv   ebx
c00101da:	89 d3                	mov    ebx,edx
c00101dc:	83 c0 30             	add    eax,0x30
c00101df:	83 c3 30             	add    ebx,0x30
c00101e2:	0f be c0             	movsx  eax,al
c00101e5:	0f b6 db             	movzx  ebx,bl
c00101e8:	50                   	push   eax
c00101e9:	e8 88 fe ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c00101ee:	5a                   	pop    edx
c00101ef:	5a                   	pop    edx
c00101f0:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00101f6:	51                   	push   ecx
c00101f7:	53                   	push   ebx
c00101f8:	e8 79 fe ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c00101fd:	5b                   	pop    ebx
c00101fe:	5a                   	pop    edx
c00101ff:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010205:	51                   	push   ecx
c0010206:	6a 25                	push   0x25
c0010208:	e8 69 fe ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c001020d:	59                   	pop    ecx
c001020e:	5b                   	pop    ebx
c001020f:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010215:	5b                   	pop    ebx
c0010216:	c3                   	ret    
c0010217:	90                   	nop

c0010218 <VgaText::updateDiskUsage()>:
c0010218:	55                   	push   ebp
c0010219:	bd 10 27 00 00       	mov    ebp,0x2710
c001021e:	57                   	push   edi
c001021f:	56                   	push   esi
c0010220:	53                   	push   ebx
c0010221:	6a 0f                	push   0xf
c0010223:	6a 00                	push   0x0
c0010225:	e8 a6 fd ff ff       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c001022a:	5a                   	pop    edx
c001022b:	0f b6 d8             	movzx  ebx,al
c001022e:	59                   	pop    ecx
c001022f:	a1 08 d0 03 c0       	mov    eax,ds:0xc003d008
c0010234:	53                   	push   ebx
c0010235:	b9 0a 00 00 00       	mov    ecx,0xa
c001023a:	99                   	cdq    
c001023b:	f7 fd                	idiv   ebp
c001023d:	99                   	cdq    
c001023e:	f7 f9                	idiv   ecx
c0010240:	8d 42 30             	lea    eax,[edx+0x30]
c0010243:	0f b6 c0             	movzx  eax,al
c0010246:	50                   	push   eax
c0010247:	e8 2a fe ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c001024c:	5e                   	pop    esi
c001024d:	5f                   	pop    edi
c001024e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010254:	bf e8 03 00 00       	mov    edi,0x3e8
c0010259:	53                   	push   ebx
c001025a:	a1 08 d0 03 c0       	mov    eax,ds:0xc003d008
c001025f:	99                   	cdq    
c0010260:	f7 ff                	idiv   edi
c0010262:	99                   	cdq    
c0010263:	f7 f9                	idiv   ecx
c0010265:	8d 42 30             	lea    eax,[edx+0x30]
c0010268:	0f b6 c0             	movzx  eax,al
c001026b:	50                   	push   eax
c001026c:	e8 05 fe ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010271:	5a                   	pop    edx
c0010272:	5e                   	pop    esi
c0010273:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010279:	be 64 00 00 00       	mov    esi,0x64
c001027e:	53                   	push   ebx
c001027f:	a1 08 d0 03 c0       	mov    eax,ds:0xc003d008
c0010284:	99                   	cdq    
c0010285:	f7 fe                	idiv   esi
c0010287:	99                   	cdq    
c0010288:	f7 f9                	idiv   ecx
c001028a:	8d 42 30             	lea    eax,[edx+0x30]
c001028d:	0f b6 c0             	movzx  eax,al
c0010290:	50                   	push   eax
c0010291:	e8 e0 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010296:	5a                   	pop    edx
c0010297:	5a                   	pop    edx
c0010298:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001029e:	53                   	push   ebx
c001029f:	a1 08 d0 03 c0       	mov    eax,ds:0xc003d008
c00102a4:	99                   	cdq    
c00102a5:	f7 f9                	idiv   ecx
c00102a7:	99                   	cdq    
c00102a8:	f7 f9                	idiv   ecx
c00102aa:	8d 42 30             	lea    eax,[edx+0x30]
c00102ad:	0f b6 c0             	movzx  eax,al
c00102b0:	50                   	push   eax
c00102b1:	e8 c0 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c00102b6:	5a                   	pop    edx
c00102b7:	5a                   	pop    edx
c00102b8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00102be:	53                   	push   ebx
c00102bf:	a1 08 d0 03 c0       	mov    eax,ds:0xc003d008
c00102c4:	99                   	cdq    
c00102c5:	f7 f9                	idiv   ecx
c00102c7:	8d 42 30             	lea    eax,[edx+0x30]
c00102ca:	0f b6 c0             	movzx  eax,al
c00102cd:	50                   	push   eax
c00102ce:	e8 a3 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c00102d3:	5a                   	pop    edx
c00102d4:	5a                   	pop    edx
c00102d5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00102db:	53                   	push   ebx
c00102dc:	a1 04 d0 03 c0       	mov    eax,ds:0xc003d004
c00102e1:	99                   	cdq    
c00102e2:	f7 fd                	idiv   ebp
c00102e4:	99                   	cdq    
c00102e5:	f7 f9                	idiv   ecx
c00102e7:	8d 42 30             	lea    eax,[edx+0x30]
c00102ea:	0f b6 c0             	movzx  eax,al
c00102ed:	50                   	push   eax
c00102ee:	e8 83 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c00102f3:	5d                   	pop    ebp
c00102f4:	5a                   	pop    edx
c00102f5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00102fb:	53                   	push   ebx
c00102fc:	a1 04 d0 03 c0       	mov    eax,ds:0xc003d004
c0010301:	99                   	cdq    
c0010302:	f7 ff                	idiv   edi
c0010304:	99                   	cdq    
c0010305:	f7 f9                	idiv   ecx
c0010307:	8d 42 30             	lea    eax,[edx+0x30]
c001030a:	0f b6 c0             	movzx  eax,al
c001030d:	50                   	push   eax
c001030e:	e8 63 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010313:	5f                   	pop    edi
c0010314:	5d                   	pop    ebp
c0010315:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001031b:	53                   	push   ebx
c001031c:	a1 04 d0 03 c0       	mov    eax,ds:0xc003d004
c0010321:	99                   	cdq    
c0010322:	f7 fe                	idiv   esi
c0010324:	99                   	cdq    
c0010325:	f7 f9                	idiv   ecx
c0010327:	8d 42 30             	lea    eax,[edx+0x30]
c001032a:	0f b6 c0             	movzx  eax,al
c001032d:	50                   	push   eax
c001032e:	e8 43 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010333:	5a                   	pop    edx
c0010334:	5e                   	pop    esi
c0010335:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001033b:	53                   	push   ebx
c001033c:	a1 04 d0 03 c0       	mov    eax,ds:0xc003d004
c0010341:	99                   	cdq    
c0010342:	f7 f9                	idiv   ecx
c0010344:	99                   	cdq    
c0010345:	f7 f9                	idiv   ecx
c0010347:	8d 42 30             	lea    eax,[edx+0x30]
c001034a:	0f b6 c0             	movzx  eax,al
c001034d:	50                   	push   eax
c001034e:	e8 23 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010353:	5f                   	pop    edi
c0010354:	5d                   	pop    ebp
c0010355:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001035b:	53                   	push   ebx
c001035c:	a1 04 d0 03 c0       	mov    eax,ds:0xc003d004
c0010361:	99                   	cdq    
c0010362:	f7 f9                	idiv   ecx
c0010364:	83 c2 30             	add    edx,0x30
c0010367:	0f b6 d2             	movzx  edx,dl
c001036a:	52                   	push   edx
c001036b:	e8 06 fd ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010370:	5a                   	pop    edx
c0010371:	59                   	pop    ecx
c0010372:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010378:	5b                   	pop    ebx
c0010379:	5e                   	pop    esi
c001037a:	5f                   	pop    edi
c001037b:	5d                   	pop    ebp
c001037c:	c3                   	ret    
c001037d:	90                   	nop

c001037e <VgaText::updateTitle()>:
c001037e:	53                   	push   ebx
c001037f:	31 c0                	xor    eax,eax
c0010381:	83 ec 58             	sub    esp,0x58
c0010384:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010388:	89 e1                	mov    ecx,esp
c001038a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001038e:	40                   	inc    eax
c001038f:	83 f8 50             	cmp    eax,0x50
c0010392:	75 f6                	jne    c001038a <VgaText::updateTitle()+0xc>
c0010394:	31 c0                	xor    eax,eax
c0010396:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001039d:	84 db                	test   bl,bl
c001039f:	74 06                	je     c00103a7 <VgaText::updateTitle()+0x29>
c00103a1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00103a4:	40                   	inc    eax
c00103a5:	eb ef                	jmp    c0010396 <VgaText::updateTitle()+0x18>
c00103a7:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00103ad:	85 c0                	test   eax,eax
c00103af:	74 09                	je     c00103ba <VgaText::updateTitle()+0x3c>
c00103b1:	53                   	push   ebx
c00103b2:	53                   	push   ebx
c00103b3:	51                   	push   ecx
c00103b4:	52                   	push   edx
c00103b5:	ff d0                	call   eax
c00103b7:	83 c4 10             	add    esp,0x10
c00103ba:	e8 59 fe ff ff       	call   c0010218 <VgaText::updateDiskUsage()>
c00103bf:	83 c4 58             	add    esp,0x58
c00103c2:	5b                   	pop    ebx
c00103c3:	c3                   	ret    

c00103c4 <VgaText::setTitleTextColour(VgaColour)>:
c00103c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103cc:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00103d2:	eb aa                	jmp    c001037e <VgaText::updateTitle()>

c00103d4 <VgaText::setTitleColour(VgaColour)>:
c00103d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103dc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00103e2:	eb 9a                	jmp    c001037e <VgaText::updateTitle()>

c00103e4 <VgaText::setTitle(char*)>:
c00103e4:	53                   	push   ebx
c00103e5:	83 ec 10             	sub    esp,0x10
c00103e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00103f6:	50                   	push   eax
c00103f7:	e8 80 03 ff ff       	call   c000077c <strcpy>
c00103fc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010400:	83 c4 18             	add    esp,0x18
c0010403:	5b                   	pop    ebx
c0010404:	e9 75 ff ff ff       	jmp    c001037e <VgaText::updateTitle()>
c0010409:	90                   	nop

c001040a <VgaText::decrementCursor(bool)>:
c001040a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001040e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010412:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010418:	85 c0                	test   eax,eax
c001041a:	74 07                	je     c0010423 <VgaText::decrementCursor(bool)+0x19>
c001041c:	48                   	dec    eax
c001041d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010423:	84 c9                	test   cl,cl
c0010425:	74 09                	je     c0010430 <VgaText::decrementCursor(bool)+0x26>
c0010427:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001042b:	e9 64 fa ff ff       	jmp    c000fe94 <VgaText::updateCursor()>
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010432:	53                   	push   ebx
c0010433:	83 ec 08             	sub    esp,0x8
c0010436:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001043a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001043e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010442:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010446:	3c 07                	cmp    al,0x7
c0010448:	75 2a                	jne    c0010474 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001044a:	a1 e4 bd 03 c0       	mov    eax,ds:0xc003bde4
c001044f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010457:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001045f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010467:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001046b:	83 c4 08             	add    esp,0x8
c001046e:	5b                   	pop    ebx
c001046f:	e9 10 2c 00 00       	jmp    c0013084 <Buzzer::beep(int, int, bool)>
c0010474:	3c 0d                	cmp    al,0xd
c0010476:	75 0c                	jne    c0010484 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010478:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010482:	eb 3b                	jmp    c00104bf <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010484:	3c 0a                	cmp    al,0xa
c0010486:	75 40                	jne    c00104c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010488:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001048e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010498:	8d 50 01             	lea    edx,[eax+0x1]
c001049b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00104a1:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00104a7:	75 12                	jne    c00104bb <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00104a9:	83 ec 0c             	sub    esp,0xc
c00104ac:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00104b2:	53                   	push   ebx
c00104b3:	e8 2a fb ff ff       	call   c000ffe2 <VgaText::scrollScreen()>
c00104b8:	83 c4 10             	add    esp,0x10
c00104bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104bf:	83 c4 08             	add    esp,0x8
c00104c2:	5b                   	pop    ebx
c00104c3:	e9 cc f9 ff ff       	jmp    c000fe94 <VgaText::updateCursor()>
c00104c8:	3c 08                	cmp    al,0x8
c00104ca:	75 31                	jne    c00104fd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00104cc:	50                   	push   eax
c00104cd:	50                   	push   eax
c00104ce:	6a 01                	push   0x1
c00104d0:	53                   	push   ebx
c00104d1:	e8 34 ff ff ff       	call   c001040a <VgaText::decrementCursor(bool)>
c00104d6:	5a                   	pop    edx
c00104d7:	59                   	pop    ecx
c00104d8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104de:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104e4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00104ea:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00104f0:	6a 20                	push   0x20
c00104f2:	53                   	push   ebx
c00104f3:	e8 90 fb ff ff       	call   c0010088 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104f8:	83 c4 28             	add    esp,0x28
c00104fb:	5b                   	pop    ebx
c00104fc:	c3                   	ret    
c00104fd:	83 ec 08             	sub    esp,0x8
c0010500:	0f be c0             	movsx  eax,al
c0010503:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010509:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001050f:	51                   	push   ecx
c0010510:	52                   	push   edx
c0010511:	50                   	push   eax
c0010512:	53                   	push   ebx
c0010513:	e8 70 fb ff ff       	call   c0010088 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010518:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001051c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010524:	83 c4 28             	add    esp,0x28
c0010527:	5b                   	pop    ebx
c0010528:	e9 29 fc ff ff       	jmp    c0010156 <VgaText::incrementCursor(bool)>
c001052d:	90                   	nop

c001052e <VgaText::isShowingCursor()>:
c001052e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010532:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010538:	c3                   	ret    
c0010539:	90                   	nop

c001053a <VgaText::isBlinkDisabled()>:
c001053a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001053e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010544:	83 f0 01             	xor    eax,0x1
c0010547:	c3                   	ret    

c0010548 <VgaText::setCursorHeight(int)>:
c0010548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010550:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010556:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001055d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010561:	e9 48 f9 ff ff       	jmp    c000feae <VgaText::showCursor(bool)>

c0010566 <VgaText::getCursorHeight()>:
c0010566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001056a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010570:	c3                   	ret    

c0010571 <setActiveTerminal(VgaText*)>:
c0010571:	53                   	push   ebx
c0010572:	83 ec 08             	sub    esp,0x8
c0010575:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010579:	85 db                	test   ebx,ebx
c001057b:	75 11                	jne    c001058e <setActiveTerminal(VgaText*)+0x1d>
c001057d:	c7 44 24 10 78 92 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039278
c0010585:	83 c4 08             	add    esp,0x8
c0010588:	5b                   	pop    ebx
c0010589:	e9 7a c9 ff ff       	jmp    c000cf08 <panic(char const*)>
c001058e:	50                   	push   eax
c001058f:	50                   	push   eax
c0010590:	53                   	push   ebx
c0010591:	68 86 92 03 c0       	push   0xc0039286
c0010596:	e8 4f c8 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001059b:	a1 c4 bd 03 c0       	mov    eax,ds:0xc003bdc4
c00105a0:	83 c4 10             	add    esp,0x10
c00105a3:	85 c0                	test   eax,eax
c00105a5:	74 0c                	je     c00105b3 <setActiveTerminal(VgaText*)+0x42>
c00105a7:	83 ec 0c             	sub    esp,0xc
c00105aa:	50                   	push   eax
c00105ab:	e8 e4 f8 ff ff       	call   c000fe94 <VgaText::updateCursor()>
c00105b0:	83 c4 10             	add    esp,0x10
c00105b3:	89 1d c4 bd 03 c0    	mov    DWORD PTR ds:0xc003bdc4,ebx
c00105b9:	51                   	push   ecx
c00105ba:	51                   	push   ecx
c00105bb:	53                   	push   ebx
c00105bc:	68 9e 92 03 c0       	push   0xc003929e
c00105c1:	e8 24 c8 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00105c6:	83 c4 0c             	add    esp,0xc
c00105c9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105cf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105d5:	53                   	push   ebx
c00105d6:	e8 25 fb ff ff       	call   c0010100 <VgaText::setCursor(int, int)>
c00105db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105de:	e8 57 ff ff ff       	call   c001053a <VgaText::isBlinkDisabled()>
c00105e3:	5a                   	pop    edx
c00105e4:	0f b6 c0             	movzx  eax,al
c00105e7:	59                   	pop    ecx
c00105e8:	50                   	push   eax
c00105e9:	53                   	push   ebx
c00105ea:	e8 cf f8 ff ff       	call   c000febe <VgaText::disableBlink(bool)>
c00105ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105f2:	e8 6f ff ff ff       	call   c0010566 <VgaText::getCursorHeight()>
c00105f7:	5a                   	pop    edx
c00105f8:	59                   	pop    ecx
c00105f9:	50                   	push   eax
c00105fa:	53                   	push   ebx
c00105fb:	e8 48 ff ff ff       	call   c0010548 <VgaText::setCursorHeight(int)>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001060a:	75 0a                	jne    c0010616 <setActiveTerminal(VgaText*)+0xa5>
c001060c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010616:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001061a:	83 c4 08             	add    esp,0x8
c001061d:	5b                   	pop    ebx
c001061e:	e9 1d f8 ff ff       	jmp    c000fe40 <VgaText::load()>

c0010623 <doTerminalCycle()>:
c0010623:	83 ec 18             	sub    esp,0x18
c0010626:	a1 c0 bd 03 c0       	mov    eax,ds:0xc003bdc0
c001062b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010631:	50                   	push   eax
c0010632:	a3 c0 bd 03 c0       	mov    ds:0xc003bdc0,eax
c0010637:	e8 35 ff ff ff       	call   c0010571 <setActiveTerminal(VgaText*)>
c001063c:	83 c4 1c             	add    esp,0x1c
c001063f:	c3                   	ret    

c0010640 <VgaText::doUpdate()>:
c0010640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010644:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001064a:	85 c0                	test   eax,eax
c001064c:	74 02                	je     c0010650 <VgaText::doUpdate()+0x10>
c001064e:	ff e0                	jmp    eax
c0010650:	c3                   	ret    
c0010651:	90                   	nop

c0010652 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010652:	55                   	push   ebp
c0010653:	57                   	push   edi
c0010654:	56                   	push   esi
c0010655:	53                   	push   ebx
c0010656:	83 ec 1c             	sub    esp,0x1c
c0010659:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001065d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010662:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010669:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001066c:	50                   	push   eax
c001066d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010672:	50                   	push   eax
c0010673:	e8 58 f9 ff ff       	call   c000ffd0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010678:	59                   	pop    ecx
c0010679:	0f b6 c0             	movzx  eax,al
c001067c:	5b                   	pop    ebx
c001067d:	31 c9                	xor    ecx,ecx
c001067f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010687:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001068b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010695:	0f b7 db             	movzx  ebx,bx
c0010698:	01 db                	add    ebx,ebx
c001069a:	01 fb                	add    ebx,edi
c001069c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001069f:	84 c0                	test   al,al
c00106a1:	0f 84 38 01 00 00    	je     c00107df <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00106a7:	3c 0d                	cmp    al,0xd
c00106a9:	75 0f                	jne    c00106ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00106ab:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00106b5:	e9 1f 01 00 00       	jmp    c00107d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00106ba:	3c 0a                	cmp    al,0xa
c00106bc:	75 5b                	jne    c0010719 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00106be:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00106c4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00106ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00106d1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00106d7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00106dd:	75 12                	jne    c00106f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00106df:	83 ec 0c             	sub    esp,0xc
c00106e2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00106e8:	55                   	push   ebp
c00106e9:	e8 f4 f8 ff ff       	call   c000ffe2 <VgaText::scrollScreen()>
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	83 ec 0c             	sub    esp,0xc
c00106f4:	55                   	push   ebp
c00106f5:	e8 9a f7 ff ff       	call   c000fe94 <VgaText::updateCursor()>
c00106fa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001070b:	31 c9                	xor    ecx,ecx
c001070d:	0f b7 db             	movzx  ebx,bx
c0010710:	01 db                	add    ebx,ebx
c0010712:	01 fb                	add    ebx,edi
c0010714:	e9 c0 00 00 00       	jmp    c00107d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010719:	3c 08                	cmp    al,0x8
c001071b:	75 4e                	jne    c001076b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c001071d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010721:	53                   	push   ebx
c0010722:	53                   	push   ebx
c0010723:	6a 01                	push   0x1
c0010725:	55                   	push   ebp
c0010726:	e8 df fc ff ff       	call   c001040a <VgaText::decrementCursor(bool)>
c001072b:	58                   	pop    eax
c001072c:	5a                   	pop    edx
c001072d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010733:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010739:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c001073f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010745:	6a 20                	push   0x20
c0010747:	55                   	push   ebp
c0010748:	e8 3b f9 ff ff       	call   c0010088 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001074d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010755:	83 c4 20             	add    esp,0x20
c0010758:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001075e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010762:	0f b7 db             	movzx  ebx,bx
c0010765:	01 db                	add    ebx,ebx
c0010767:	01 fb                	add    ebx,edi
c0010769:	eb 6e                	jmp    c00107d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001076b:	51                   	push   ecx
c001076c:	51                   	push   ecx
c001076d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010771:	50                   	push   eax
c0010772:	e8 ff f8 ff ff       	call   c0010076 <VgaText::combineCharAndColour(char, unsigned char)>
c0010777:	83 c4 10             	add    esp,0x10
c001077a:	66 89 03             	mov    WORD PTR [ebx],ax
c001077d:	39 2d c4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bdc4,ebp
c0010783:	75 2a                	jne    c00107af <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010785:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001078b:	85 c0                	test   eax,eax
c001078d:	74 20                	je     c00107af <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001078f:	52                   	push   edx
c0010790:	52                   	push   edx
c0010791:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010797:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001079d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00107a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00107a5:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00107a8:	51                   	push   ecx
c00107a9:	55                   	push   ebp
c00107aa:	ff d0                	call   eax
c00107ac:	83 c4 20             	add    esp,0x20
c00107af:	83 c3 02             	add    ebx,0x2
c00107b2:	50                   	push   eax
c00107b3:	50                   	push   eax
c00107b4:	6a 00                	push   0x0
c00107b6:	55                   	push   ebp
c00107b7:	e8 9a f9 ff ff       	call   c0010156 <VgaText::incrementCursor(bool)>
c00107bc:	83 c4 10             	add    esp,0x10
c00107bf:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00107c6:	75 0f                	jne    c00107d7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00107c8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00107d0:	0f b7 db             	movzx  ebx,bx
c00107d3:	01 db                	add    ebx,ebx
c00107d5:	01 fb                	add    ebx,edi
c00107d7:	b1 01                	mov    cl,0x1
c00107d9:	46                   	inc    esi
c00107da:	e9 bd fe ff ff       	jmp    c001069c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00107df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00107e3:	83 ec 0c             	sub    esp,0xc
c00107e6:	55                   	push   ebp
c00107e7:	e8 a8 f6 ff ff       	call   c000fe94 <VgaText::updateCursor()>
c00107ec:	83 c4 10             	add    esp,0x10
c00107ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00107f3:	84 c9                	test   cl,cl
c00107f5:	74 0c                	je     c0010803 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00107f7:	83 ec 0c             	sub    esp,0xc
c00107fa:	55                   	push   ebp
c00107fb:	e8 40 fe ff ff       	call   c0010640 <VgaText::doUpdate()>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001080a:	83 c4 1c             	add    esp,0x1c
c001080d:	5b                   	pop    ebx
c001080e:	5e                   	pop    esi
c001080f:	5f                   	pop    edi
c0010810:	5d                   	pop    ebp
c0010811:	c3                   	ret    

c0010812 <VgaText::clearScreen()>:
c0010812:	57                   	push   edi
c0010813:	56                   	push   esi
c0010814:	31 f6                	xor    esi,esi
c0010816:	53                   	push   ebx
c0010817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001081b:	52                   	push   edx
c001081c:	6a 00                	push   0x0
c001081e:	6a 00                	push   0x0
c0010820:	53                   	push   ebx
c0010821:	e8 da f8 ff ff       	call   c0010100 <VgaText::setCursor(int, int)>
c0010826:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001082d:	83 c4 10             	add    esp,0x10
c0010830:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010836:	7e 26                	jle    c001085e <VgaText::clearScreen()+0x4c>
c0010838:	31 ff                	xor    edi,edi
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	56                   	push   esi
c001083d:	57                   	push   edi
c001083e:	47                   	inc    edi
c001083f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010845:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001084b:	6a 20                	push   0x20
c001084d:	53                   	push   ebx
c001084e:	e8 35 f8 ff ff       	call   c0010088 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010853:	83 c4 20             	add    esp,0x20
c0010856:	83 ff 50             	cmp    edi,0x50
c0010859:	75 df                	jne    c001083a <VgaText::clearScreen()+0x28>
c001085b:	46                   	inc    esi
c001085c:	eb d2                	jmp    c0010830 <VgaText::clearScreen()+0x1e>
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	53                   	push   ebx
c0010862:	e8 d9 fd ff ff       	call   c0010640 <VgaText::doUpdate()>
c0010867:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	5b                   	pop    ebx
c0010872:	5e                   	pop    esi
c0010873:	5f                   	pop    edi
c0010874:	c3                   	ret    
c0010875:	90                   	nop

c0010876 <VgaText::putchar(char)>:
c0010876:	56                   	push   esi
c0010877:	53                   	push   ebx
c0010878:	83 ec 14             	sub    esp,0x14
c001087b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001087f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010883:	3c 5b                	cmp    al,0x5b
c0010885:	75 21                	jne    c00108a8 <VgaText::putchar(char)+0x32>
c0010887:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001088e:	74 28                	je     c00108b8 <VgaText::putchar(char)+0x42>
c0010890:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010899:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00108a3:	e9 e2 00 00 00       	jmp    c001098a <VgaText::putchar(char)+0x114>
c00108a8:	3c 1b                	cmp    al,0x1b
c00108aa:	75 0c                	jne    c00108b8 <VgaText::putchar(char)+0x42>
c00108ac:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00108b3:	e9 d2 00 00 00       	jmp    c001098a <VgaText::putchar(char)+0x114>
c00108b8:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00108be:	84 c9                	test   cl,cl
c00108c0:	0f 84 ab 00 00 00    	je     c0010971 <VgaText::putchar(char)+0xfb>
c00108c6:	8d 50 c0             	lea    edx,[eax-0x40]
c00108c9:	80 fa 3e             	cmp    dl,0x3e
c00108cc:	0f 87 82 00 00 00    	ja     c0010954 <VgaText::putchar(char)+0xde>
c00108d2:	3c 6d                	cmp    al,0x6d
c00108d4:	75 4d                	jne    c0010923 <VgaText::putchar(char)+0xad>
c00108d6:	31 f6                	xor    esi,esi
c00108d8:	31 d2                	xor    edx,edx
c00108da:	31 c0                	xor    eax,eax
c00108dc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00108e2:	7e 30                	jle    c0010914 <VgaText::putchar(char)+0x9e>
c00108e4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00108ec:	80 fa 3b             	cmp    dl,0x3b
c00108ef:	75 17                	jne    c0010908 <VgaText::putchar(char)+0x92>
c00108f1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00108f5:	50                   	push   eax
c00108f6:	53                   	push   ebx
c00108f7:	e8 fc f5 ff ff       	call   c000fef8 <VgaText::doANSI_SGR(int)>
c00108fc:	59                   	pop    ecx
c00108fd:	31 d2                	xor    edx,edx
c00108ff:	58                   	pop    eax
c0010900:	31 c0                	xor    eax,eax
c0010902:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010906:	eb 09                	jmp    c0010911 <VgaText::putchar(char)+0x9b>
c0010908:	6b c0 0a             	imul   eax,eax,0xa
c001090b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001090f:	88 ca                	mov    dl,cl
c0010911:	46                   	inc    esi
c0010912:	eb c8                	jmp    c00108dc <VgaText::putchar(char)+0x66>
c0010914:	84 d2                	test   dl,dl
c0010916:	74 31                	je     c0010949 <VgaText::putchar(char)+0xd3>
c0010918:	50                   	push   eax
c0010919:	53                   	push   ebx
c001091a:	e8 d9 f5 ff ff       	call   c000fef8 <VgaText::doANSI_SGR(int)>
c001091f:	58                   	pop    eax
c0010920:	5a                   	pop    edx
c0010921:	eb 26                	jmp    c0010949 <VgaText::putchar(char)+0xd3>
c0010923:	3c 4a                	cmp    al,0x4a
c0010925:	75 22                	jne    c0010949 <VgaText::putchar(char)+0xd3>
c0010927:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001092e:	75 19                	jne    c0010949 <VgaText::putchar(char)+0xd3>
c0010930:	83 ec 0c             	sub    esp,0xc
c0010933:	53                   	push   ebx
c0010934:	e8 d9 fe ff ff       	call   c0010812 <VgaText::clearScreen()>
c0010939:	83 c4 0c             	add    esp,0xc
c001093c:	6a 00                	push   0x0
c001093e:	6a 00                	push   0x0
c0010940:	53                   	push   ebx
c0010941:	e8 ba f7 ff ff       	call   c0010100 <VgaText::setCursor(int, int)>
c0010946:	83 c4 10             	add    esp,0x10
c0010949:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010952:	eb 36                	jmp    c001098a <VgaText::putchar(char)+0x114>
c0010954:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001095a:	83 fa 0e             	cmp    edx,0xe
c001095d:	7f 2b                	jg     c001098a <VgaText::putchar(char)+0x114>
c001095f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010962:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010968:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001096f:	eb 19                	jmp    c001098a <VgaText::putchar(char)+0x114>
c0010971:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010977:	0f be c0             	movsx  eax,al
c001097a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010980:	50                   	push   eax
c0010981:	53                   	push   ebx
c0010982:	e8 ab fa ff ff       	call   c0010432 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 c4 14             	add    esp,0x14
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::puts(char const*)>:
c0010990:	53                   	push   ebx
c0010991:	83 ec 08             	sub    esp,0x8
c0010994:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010998:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001099b:	84 c0                	test   al,al
c001099d:	74 12                	je     c00109b1 <VgaText::puts(char const*)+0x21>
c001099f:	43                   	inc    ebx
c00109a0:	51                   	push   ecx
c00109a1:	51                   	push   ecx
c00109a2:	50                   	push   eax
c00109a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a7:	e8 ca fe ff ff       	call   c0010876 <VgaText::putchar(char)>
c00109ac:	83 c4 10             	add    esp,0x10
c00109af:	eb e7                	jmp    c0010998 <VgaText::puts(char const*)+0x8>
c00109b1:	83 c4 08             	add    esp,0x8
c00109b4:	5b                   	pop    ebx
c00109b5:	c3                   	ret    

c00109b6 <VgaText::putx(unsigned int)>:
c00109b6:	57                   	push   edi
c00109b7:	b9 11 00 00 00       	mov    ecx,0x11
c00109bc:	56                   	push   esi
c00109bd:	be ba 92 03 c0       	mov    esi,0xc00392ba
c00109c2:	53                   	push   ebx
c00109c3:	83 ec 20             	sub    esp,0x20
c00109c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109ca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00109ce:	fc                   	cld    
c00109cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109d1:	be 08 00 00 00       	mov    esi,0x8
c00109d6:	50                   	push   eax
c00109d7:	50                   	push   eax
c00109d8:	89 d8                	mov    eax,ebx
c00109da:	c1 e3 04             	shl    ebx,0x4
c00109dd:	c1 e8 1c             	shr    eax,0x1c
c00109e0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00109e5:	50                   	push   eax
c00109e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00109ea:	e8 87 fe ff ff       	call   c0010876 <VgaText::putchar(char)>
c00109ef:	83 c4 10             	add    esp,0x10
c00109f2:	4e                   	dec    esi
c00109f3:	75 e1                	jne    c00109d6 <VgaText::putx(unsigned int)+0x20>
c00109f5:	83 c4 20             	add    esp,0x20
c00109f8:	5b                   	pop    ebx
c00109f9:	5e                   	pop    esi
c00109fa:	5f                   	pop    edi
c00109fb:	c3                   	ret    

c00109fc <VgaText::VgaText(char const*)>:
c00109fc:	57                   	push   edi
c00109fd:	56                   	push   esi
c00109fe:	53                   	push   ebx
c00109ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a03:	83 ec 08             	sub    esp,0x8
c0010a06:	6a 00                	push   0x0
c0010a08:	50                   	push   eax
c0010a09:	e8 b8 05 00 00       	call   c0010fc6 <UnixFile::UnixFile(int)>
c0010a0e:	83 c4 10             	add    esp,0x10
c0010a11:	ba 20 93 03 c0       	mov    edx,0xc0039320
c0010a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a1a:	89 10                	mov    DWORD PTR [eax],edx
c0010a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a20:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a47:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a52:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a60:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a79:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a84:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010a8a:	bb a0 bd 03 c0       	mov    ebx,0xc003bda0
c0010a8f:	b8 08 00 00 00       	mov    eax,0x8
c0010a94:	fc                   	cld    
c0010a95:	89 d7                	mov    edi,edx
c0010a97:	89 de                	mov    esi,ebx
c0010a99:	89 c1                	mov    ecx,eax
c0010a9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa1:	05 1e 10 00 00       	add    eax,0x101e
c0010aa6:	83 ec 08             	sub    esp,0x8
c0010aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aad:	50                   	push   eax
c0010aae:	e8 c9 fc fe ff       	call   c000077c <strcpy>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aba:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac8:	83 c0 0c             	add    eax,0xc
c0010acb:	83 ec 04             	sub    esp,0x4
c0010ace:	68 00 0f 00 00       	push   0xf00
c0010ad3:	6a 00                	push   0x0
c0010ad5:	50                   	push   eax
c0010ad6:	e8 e5 fb fe ff       	call   c00006c0 <memset>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	83 ec 04             	sub    esp,0x4
c0010ae1:	6a 00                	push   0x0
c0010ae3:	6a 07                	push   0x7
c0010ae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae9:	e8 c2 f4 ff ff       	call   c000ffb0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010aee:	83 c4 10             	add    esp,0x10
c0010af1:	83 ec 08             	sub    esp,0x8
c0010af4:	6a 02                	push   0x2
c0010af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010afa:	e8 49 fa ff ff       	call   c0010548 <VgaText::setCursorHeight(int)>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	83 ec 04             	sub    esp,0x4
c0010b05:	6a 00                	push   0x0
c0010b07:	6a 00                	push   0x0
c0010b09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0d:	e8 ee f5 ff ff       	call   c0010100 <VgaText::setCursor(int, int)>
c0010b12:	83 c4 10             	add    esp,0x10
c0010b15:	83 ec 08             	sub    esp,0x8
c0010b18:	6a 01                	push   0x1
c0010b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1e:	e8 8b f3 ff ff       	call   c000feae <VgaText::showCursor(bool)>
c0010b23:	83 c4 10             	add    esp,0x10
c0010b26:	83 ec 08             	sub    esp,0x8
c0010b29:	6a 01                	push   0x1
c0010b2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b2f:	e8 8a f3 ff ff       	call   c000febe <VgaText::disableBlink(bool)>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	83 ec 0c             	sub    esp,0xc
c0010b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3e:	e8 cf fc ff ff       	call   c0010812 <VgaText::clearScreen()>
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b55:	05 9e 10 00 00       	add    eax,0x109e
c0010b5a:	83 ec 04             	sub    esp,0x4
c0010b5d:	68 96 00 00 00       	push   0x96
c0010b62:	6a 00                	push   0x0
c0010b64:	50                   	push   eax
c0010b65:	e8 56 fb fe ff       	call   c00006c0 <memset>
c0010b6a:	83 c4 10             	add    esp,0x10
c0010b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b71:	05 34 11 00 00       	add    eax,0x1134
c0010b76:	83 ec 04             	sub    esp,0x4
c0010b79:	68 2c 01 00 00       	push   0x12c
c0010b7e:	6a 00                	push   0x0
c0010b80:	50                   	push   eax
c0010b81:	e8 3a fb fe ff       	call   c00006c0 <memset>
c0010b86:	83 c4 10             	add    esp,0x10
c0010b89:	90                   	nop
c0010b8a:	5b                   	pop    ebx
c0010b8b:	5e                   	pop    esi
c0010b8c:	5f                   	pop    edi
c0010b8d:	c3                   	ret    

c0010b8e <VgaText::receiveKey(unsigned char)>:
c0010b8e:	55                   	push   ebp
c0010b8f:	57                   	push   edi
c0010b90:	56                   	push   esi
c0010b91:	53                   	push   ebx
c0010b92:	83 ec 1c             	sub    esp,0x1c
c0010b95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010b99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b9d:	84 db                	test   bl,bl
c0010b9f:	0f 84 c9 00 00 00    	je     c0010c6e <VgaText::receiveKey(unsigned char)+0xe0>
c0010ba5:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010bab:	80 fb 08             	cmp    bl,0x8
c0010bae:	75 2c                	jne    c0010bdc <VgaText::receiveKey(unsigned char)+0x4e>
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	57                   	push   edi
c0010bb4:	e8 23 fb fe ff       	call   c00006dc <strlen>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	74 41                	je     c0010c01 <VgaText::receiveKey(unsigned char)+0x73>
c0010bc0:	50                   	push   eax
c0010bc1:	50                   	push   eax
c0010bc2:	6a 08                	push   0x8
c0010bc4:	56                   	push   esi
c0010bc5:	e8 ac fc ff ff       	call   c0010876 <VgaText::putchar(char)>
c0010bca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010bcd:	e8 0a fb fe ff       	call   c00006dc <strlen>
c0010bd2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010bda:	eb 22                	jmp    c0010bfe <VgaText::receiveKey(unsigned char)+0x70>
c0010bdc:	0f be c3             	movsx  eax,bl
c0010bdf:	52                   	push   edx
c0010be0:	52                   	push   edx
c0010be1:	50                   	push   eax
c0010be2:	56                   	push   esi
c0010be3:	e8 8e fc ff ff       	call   c0010876 <VgaText::putchar(char)>
c0010be8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010bec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010bf1:	59                   	pop    ecx
c0010bf2:	5d                   	pop    ebp
c0010bf3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010bf7:	50                   	push   eax
c0010bf8:	57                   	push   edi
c0010bf9:	e8 be fc fe ff       	call   c00008bc <strcat>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010c08:	75 05                	jne    c0010c0f <VgaText::receiveKey(unsigned char)+0x81>
c0010c0a:	80 fb 0a             	cmp    bl,0xa
c0010c0d:	75 53                	jne    c0010c62 <VgaText::receiveKey(unsigned char)+0xd4>
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010c18:	53                   	push   ebx
c0010c19:	e8 be fa fe ff       	call   c00006dc <strlen>
c0010c1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c21:	89 c5                	mov    ebp,eax
c0010c23:	e8 b4 fa fe ff       	call   c00006dc <strlen>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010c2f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010c34:	76 10                	jbe    c0010c46 <VgaText::receiveKey(unsigned char)+0xb8>
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	68 cb 92 03 c0       	push   0xc00392cb
c0010c3e:	e8 c5 c2 ff ff       	call   c000cf08 <panic(char const*)>
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	50                   	push   eax
c0010c47:	50                   	push   eax
c0010c48:	57                   	push   edi
c0010c49:	53                   	push   ebx
c0010c4a:	e8 6d fc fe ff       	call   c00008bc <strcat>
c0010c4f:	83 c4 0c             	add    esp,0xc
c0010c52:	68 96 00 00 00       	push   0x96
c0010c57:	6a 00                	push   0x0
c0010c59:	57                   	push   edi
c0010c5a:	e8 61 fa fe ff       	call   c00006c0 <memset>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	83 ec 0c             	sub    esp,0xc
c0010c65:	56                   	push   esi
c0010c66:	e8 d5 f9 ff ff       	call   c0010640 <VgaText::doUpdate()>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	83 c4 1c             	add    esp,0x1c
c0010c71:	5b                   	pop    ebx
c0010c72:	5e                   	pop    esi
c0010c73:	5f                   	pop    edi
c0010c74:	5d                   	pop    ebp
c0010c75:	c3                   	ret    

c0010c76 <VgaText::write(unsigned long long, void*, int*)>:
c0010c76:	55                   	push   ebp
c0010c77:	57                   	push   edi
c0010c78:	56                   	push   esi
c0010c79:	53                   	push   ebx
c0010c7a:	83 ec 0c             	sub    esp,0xc
c0010c7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010c81:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010c85:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c89:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010c90:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010c93:	39 eb                	cmp    ebx,ebp
c0010c95:	74 13                	je     c0010caa <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010c97:	43                   	inc    ebx
c0010c98:	50                   	push   eax
c0010c99:	50                   	push   eax
c0010c9a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010c9e:	50                   	push   eax
c0010c9f:	56                   	push   esi
c0010ca0:	e8 d1 fb ff ff       	call   c0010876 <VgaText::putchar(char)>
c0010ca5:	83 c4 10             	add    esp,0x10
c0010ca8:	eb e9                	jmp    c0010c93 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010caa:	83 ec 0c             	sub    esp,0xc
c0010cad:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010cb4:	56                   	push   esi
c0010cb5:	e8 86 f9 ff ff       	call   c0010640 <VgaText::doUpdate()>
c0010cba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010cbe:	89 38                	mov    DWORD PTR [eax],edi
c0010cc0:	83 c4 1c             	add    esp,0x1c
c0010cc3:	31 c0                	xor    eax,eax
c0010cc5:	5b                   	pop    ebx
c0010cc6:	5e                   	pop    esi
c0010cc7:	5f                   	pop    edi
c0010cc8:	5d                   	pop    ebp
c0010cc9:	c3                   	ret    

c0010cca <newTerminal(char*)>:
c0010cca:	83 ec 28             	sub    esp,0x28
c0010ccd:	68 60 12 00 00       	push   0x1260
c0010cd2:	e8 c3 16 00 00       	call   c001239a <operator new(unsigned long)>
c0010cd7:	5a                   	pop    edx
c0010cd8:	59                   	pop    ecx
c0010cd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010cdd:	50                   	push   eax
c0010cde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ce2:	e8 15 fd ff ff       	call   c00109fc <VgaText::VgaText(char const*)>
c0010ce7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ceb:	83 c4 2c             	add    esp,0x2c
c0010cee:	c3                   	ret    
c0010cef:	90                   	nop

c0010cf0 <TSS::TSS()>:
c0010cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cfb:	90                   	nop
c0010cfc:	c3                   	ret    
c0010cfd:	90                   	nop

c0010cfe <TSS::setESP(unsigned long)>:
c0010cfe:	55                   	push   ebp
c0010cff:	89 e5                	mov    ebp,esp
c0010d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010d0a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d0d:	90                   	nop
c0010d0e:	5d                   	pop    ebp
c0010d0f:	c3                   	ret    

c0010d10 <TSS::flush()>:
c0010d10:	55                   	push   ebp
c0010d11:	89 e5                	mov    ebp,esp
c0010d13:	83 ec 10             	sub    esp,0x10
c0010d16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d1b:	83 c8 03             	or     eax,0x3
c0010d1e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010d22:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010d26:	66 89 d0             	mov    ax,dx
c0010d29:	0f 00 d8             	ltr    ax
c0010d2c:	90                   	nop
c0010d2d:	c9                   	leave  
c0010d2e:	c3                   	ret    
c0010d2f:	90                   	nop

c0010d30 <TSS::setup(unsigned long, unsigned long)>:
c0010d30:	55                   	push   ebp
c0010d31:	89 e5                	mov    ebp,esp
c0010d33:	53                   	push   ebx
c0010d34:	83 ec 14             	sub    esp,0x14
c0010d37:	83 ec 0c             	sub    esp,0xc
c0010d3a:	6a 68                	push   0x68
c0010d3c:	e8 a4 c6 ff ff       	call   c000d3e5 <malloc>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	89 c2                	mov    edx,eax
c0010d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d52:	83 ec 04             	sub    esp,0x4
c0010d55:	6a 68                	push   0x68
c0010d57:	6a 00                	push   0x0
c0010d59:	50                   	push   eax
c0010d5a:	e8 61 f9 fe ff       	call   c00006c0 <memset>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d68:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d74:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010d83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d8c:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d98:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010da1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010da4:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db0:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010db9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dbc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010dbf:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010dcb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd4:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dde:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010de1:	e8 53 db 00 00       	call   c001e939 <CPU::readCR3()>
c0010de6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010def:	83 ec 08             	sub    esp,0x8
c0010df2:	50                   	push   eax
c0010df3:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010df6:	50                   	push   eax
c0010df7:	e8 a6 b8 ff ff       	call   c000c6a2 <GDTEntry::setBase(unsigned int)>
c0010dfc:	83 c4 10             	add    esp,0x10
c0010dff:	83 ec 08             	sub    esp,0x8
c0010e02:	6a 68                	push   0x68
c0010e04:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010e07:	50                   	push   eax
c0010e08:	e8 b1 b8 ff ff       	call   c000c6be <GDTEntry::setLimit(unsigned int)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010e14:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010e17:	83 e0 0f             	and    eax,0xf
c0010e1a:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010e1d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010e20:	83 c8 40             	or     eax,0x40
c0010e23:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010e26:	e8 a5 62 00 00       	call   c00170d0 <thisCPU()>
c0010e2b:	05 78 01 00 00       	add    eax,0x178
c0010e30:	83 ec 04             	sub    esp,0x4
c0010e33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010e36:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010e39:	50                   	push   eax
c0010e3a:	e8 b3 b8 ff ff       	call   c000c6f2 <GDT::addEntry(GDTEntry)>
c0010e3f:	83 c4 10             	add    esp,0x10
c0010e42:	89 c2                	mov    edx,eax
c0010e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e47:	89 10                	mov    DWORD PTR [eax],edx
c0010e49:	e8 82 62 00 00       	call   c00170d0 <thisCPU()>
c0010e4e:	05 78 01 00 00       	add    eax,0x178
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	50                   	push   eax
c0010e57:	e8 da b8 ff ff       	call   c000c736 <GDT::flush()>
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e62:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e64:	83 ec 08             	sub    esp,0x8
c0010e67:	50                   	push   eax
c0010e68:	68 34 93 03 c0       	push   0xc0039334
c0010e6d:	e8 78 bf ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010e7d:	c9                   	leave  
c0010e7e:	c3                   	ret    
c0010e7f:	90                   	nop

c0010e80 <ReservedFilename::isAtty()>:
c0010e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e87:	31 c0                	xor    eax,eax
c0010e89:	83 fa 08             	cmp    edx,0x8
c0010e8c:	74 06                	je     c0010e94 <ReservedFilename::isAtty()+0x14>
c0010e8e:	83 fa 06             	cmp    edx,0x6
c0010e91:	0f 94 c0             	sete   al
c0010e94:	c3                   	ret    
c0010e95:	90                   	nop

c0010e96 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010e96:	55                   	push   ebp
c0010e97:	57                   	push   edi
c0010e98:	56                   	push   esi
c0010e99:	53                   	push   ebx
c0010e9a:	83 ec 0c             	sub    esp,0xc
c0010e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010ea5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010eac:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010eb0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010eb4:	83 f8 08             	cmp    eax,0x8
c0010eb7:	75 08                	jne    c0010ec1 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010eb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ebf:	eb 5c                	jmp    c0010f1d <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010ec1:	83 f8 06             	cmp    eax,0x6
c0010ec4:	75 3d                	jne    c0010f03 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	68 52 93 03 c0       	push   0xc0039352
c0010ece:	e8 17 bf ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0010ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010edb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010ee1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ee3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010ee7:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010eeb:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010eef:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010ef3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ef7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010efa:	83 c4 1c             	add    esp,0x1c
c0010efd:	5b                   	pop    ebx
c0010efe:	5e                   	pop    esi
c0010eff:	5f                   	pop    edi
c0010f00:	5d                   	pop    ebp
c0010f01:	ff e0                	jmp    eax
c0010f03:	89 c2                	mov    edx,eax
c0010f05:	83 e2 fd             	and    edx,0xfffffffd
c0010f08:	83 fa 05             	cmp    edx,0x5
c0010f0b:	74 ac                	je     c0010eb9 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010f0d:	8d 50 f5             	lea    edx,[eax-0xb]
c0010f10:	83 fa 08             	cmp    edx,0x8
c0010f13:	76 a4                	jbe    c0010eb9 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010f15:	83 e8 15             	sub    eax,0x15
c0010f18:	83 f8 08             	cmp    eax,0x8
c0010f1b:	76 9c                	jbe    c0010eb9 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010f1d:	83 c4 0c             	add    esp,0xc
c0010f20:	31 c0                	xor    eax,eax
c0010f22:	5b                   	pop    ebx
c0010f23:	5e                   	pop    esi
c0010f24:	5f                   	pop    edi
c0010f25:	5d                   	pop    ebp
c0010f26:	c3                   	ret    
c0010f27:	90                   	nop

c0010f28 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010f28:	55                   	push   ebp
c0010f29:	57                   	push   edi
c0010f2a:	56                   	push   esi
c0010f2b:	53                   	push   ebx
c0010f2c:	83 ec 0c             	sub    esp,0xc
c0010f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f33:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f3a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f3e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010f42:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f46:	83 f8 08             	cmp    eax,0x8
c0010f49:	75 08                	jne    c0010f53 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010f4b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f51:	eb 60                	jmp    c0010fb3 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010f53:	83 f8 06             	cmp    eax,0x6
c0010f56:	75 3d                	jne    c0010f95 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	68 5f 93 03 c0       	push   0xc003935f
c0010f60:	e8 85 be ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0010f65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f6d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010f73:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f75:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010f79:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010f7d:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010f81:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010f85:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010f89:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0010f8c:	83 c4 1c             	add    esp,0x1c
c0010f8f:	5b                   	pop    ebx
c0010f90:	5e                   	pop    esi
c0010f91:	5f                   	pop    edi
c0010f92:	5d                   	pop    ebp
c0010f93:	ff e0                	jmp    eax
c0010f95:	83 f8 05             	cmp    eax,0x5
c0010f98:	75 04                	jne    c0010f9e <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0010f9a:	89 33                	mov    DWORD PTR [ebx],esi
c0010f9c:	eb 15                	jmp    c0010fb3 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010f9e:	83 f8 07             	cmp    eax,0x7
c0010fa1:	74 a8                	je     c0010f4b <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010fa3:	8d 50 f5             	lea    edx,[eax-0xb]
c0010fa6:	83 fa 08             	cmp    edx,0x8
c0010fa9:	76 a0                	jbe    c0010f4b <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010fab:	83 e8 15             	sub    eax,0x15
c0010fae:	83 f8 08             	cmp    eax,0x8
c0010fb1:	76 98                	jbe    c0010f4b <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010fb3:	83 c4 0c             	add    esp,0xc
c0010fb6:	31 c0                	xor    eax,eax
c0010fb8:	5b                   	pop    ebx
c0010fb9:	5e                   	pop    esi
c0010fba:	5f                   	pop    edi
c0010fbb:	5d                   	pop    ebp
c0010fbc:	c3                   	ret    
c0010fbd:	90                   	nop

c0010fbe <UnixFile::getFileDescriptor()>:
c0010fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc5:	c3                   	ret    

c0010fc6 <UnixFile::UnixFile(int)>:
c0010fc6:	83 ec 0c             	sub    esp,0xc
c0010fc9:	ba c4 93 03 c0       	mov    edx,0xc00393c4
c0010fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd2:	89 10                	mov    DWORD PTR [eax],edx
c0010fd4:	a1 c0 ad 03 c0       	mov    eax,ds:0xc003adc0
c0010fd9:	8d 50 01             	lea    edx,[eax+0x1]
c0010fdc:	89 15 c0 ad 03 c0    	mov    DWORD PTR ds:0xc003adc0,edx
c0010fe2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fe6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010fe9:	83 ec 08             	sub    esp,0x8
c0010fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ff0:	68 d0 bd 03 c0       	push   0xc003bdd0
c0010ff5:	e8 be dc 00 00       	call   c001ecb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	90                   	nop
c0010ffe:	83 c4 0c             	add    esp,0xc
c0011001:	c3                   	ret    

c0011002 <ReservedFilename::ReservedFilename(int)>:
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011009:	83 ec 08             	sub    esp,0x8
c001100c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011010:	50                   	push   eax
c0011011:	e8 b0 ff ff ff       	call   c0010fc6 <UnixFile::UnixFile(int)>
c0011016:	83 c4 10             	add    esp,0x10
c0011019:	ba e0 93 03 c0       	mov    edx,0xc00393e0
c001101e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011022:	89 10                	mov    DWORD PTR [eax],edx
c0011024:	90                   	nop
c0011025:	83 c4 0c             	add    esp,0xc
c0011028:	c3                   	ret    
c0011029:	90                   	nop

c001102a <UnixFile::~UnixFile()>:
c001102a:	83 ec 1c             	sub    esp,0x1c
c001102d:	ba c4 93 03 c0       	mov    edx,0xc00393c4
c0011032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011036:	89 10                	mov    DWORD PTR [eax],edx
c0011038:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	68 d0 bd 03 c0       	push   0xc003bdd0
c0011048:	e8 b9 db 00 00       	call   c001ec06 <LinkedList<UnixFile>::getFirstElement()>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	68 d0 bd 03 c0       	push   0xc003bdd0
c001105c:	e8 ad db 00 00       	call   c001ec0e <LinkedList<UnixFile>::removeFirst()>
c0011061:	83 c4 10             	add    esp,0x10
c0011064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011068:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001106c:	74 3d                	je     c00110ab <UnixFile::~UnixFile()+0x81>
c001106e:	83 ec 08             	sub    esp,0x8
c0011071:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011075:	68 d0 bd 03 c0       	push   0xc003bdd0
c001107a:	e8 39 dc 00 00       	call   c001ecb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001107f:	83 c4 10             	add    esp,0x10
c0011082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011086:	8d 50 01             	lea    edx,[eax+0x1]
c0011089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001108d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011092:	0f 94 c0             	sete   al
c0011095:	84 c0                	test   al,al
c0011097:	74 a7                	je     c0011040 <UnixFile::~UnixFile()+0x16>
c0011099:	83 ec 0c             	sub    esp,0xc
c001109c:	68 9c 93 03 c0       	push   0xc003939c
c00110a1:	e8 62 be ff ff       	call   c000cf08 <panic(char const*)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	eb 95                	jmp    c0011040 <UnixFile::~UnixFile()+0x16>
c00110ab:	90                   	nop
c00110ac:	83 c4 1c             	add    esp,0x1c
c00110af:	c3                   	ret    

c00110b0 <UnixFile::~UnixFile()>:
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	83 ec 0c             	sub    esp,0xc
c00110b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ba:	e8 6b ff ff ff       	call   c001102a <UnixFile::~UnixFile()>
c00110bf:	83 c4 10             	add    esp,0x10
c00110c2:	83 ec 08             	sub    esp,0x8
c00110c5:	6a 0c                	push   0xc
c00110c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110cb:	e8 d9 12 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c00110d0:	83 c4 10             	add    esp,0x10
c00110d3:	83 c4 0c             	add    esp,0xc
c00110d6:	c3                   	ret    
c00110d7:	90                   	nop

c00110d8 <ReservedFilename::~ReservedFilename()>:
c00110d8:	83 ec 0c             	sub    esp,0xc
c00110db:	ba e0 93 03 c0       	mov    edx,0xc00393e0
c00110e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e4:	89 10                	mov    DWORD PTR [eax],edx
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	83 ec 0c             	sub    esp,0xc
c00110ed:	50                   	push   eax
c00110ee:	e8 37 ff ff ff       	call   c001102a <UnixFile::~UnixFile()>
c00110f3:	83 c4 10             	add    esp,0x10
c00110f6:	90                   	nop
c00110f7:	83 c4 0c             	add    esp,0xc
c00110fa:	c3                   	ret    
c00110fb:	90                   	nop

c00110fc <ReservedFilename::~ReservedFilename()>:
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	83 ec 0c             	sub    esp,0xc
c0011102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011106:	e8 cd ff ff ff       	call   c00110d8 <ReservedFilename::~ReservedFilename()>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	83 ec 08             	sub    esp,0x8
c0011111:	6a 0c                	push   0xc
c0011113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011117:	e8 8d 12 00 00       	call   c00123a9 <operator delete(void*, unsigned long)>
c001111c:	83 c4 10             	add    esp,0x10
c001111f:	83 c4 0c             	add    esp,0xc
c0011122:	c3                   	ret    

c0011123 <getFromFileDescriptor(int)>:
c0011123:	83 ec 18             	sub    esp,0x18
c0011126:	68 d0 bd 03 c0       	push   0xc003bdd0
c001112b:	e8 d6 da 00 00       	call   c001ec06 <LinkedList<UnixFile>::getFirstElement()>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	85 c0                	test   eax,eax
c0011135:	74 18                	je     c001114f <getFromFileDescriptor(int)+0x2c>
c0011137:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001113b:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c001113e:	74 0f                	je     c001114f <getFromFileDescriptor(int)+0x2c>
c0011140:	52                   	push   edx
c0011141:	52                   	push   edx
c0011142:	50                   	push   eax
c0011143:	68 d0 bd 03 c0       	push   0xc003bdd0
c0011148:	e8 63 db 00 00       	call   c001ecb0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001114d:	eb e1                	jmp    c0011130 <getFromFileDescriptor(int)+0xd>
c001114f:	83 c4 0c             	add    esp,0xc
c0011152:	c3                   	ret    

c0011153 <__static_initialization_and_destruction_0(int, int)>:
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001115b:	75 34                	jne    c0011191 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001115d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011165:	75 2a                	jne    c0011191 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011167:	83 ec 0c             	sub    esp,0xc
c001116a:	68 d0 bd 03 c0       	push   0xc003bdd0
c001116f:	e8 3a da 00 00       	call   c001ebae <LinkedList<UnixFile>::LinkedList()>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	83 ec 04             	sub    esp,0x4
c001117a:	68 4c ad 03 c0       	push   0xc003ad4c
c001117f:	68 d0 bd 03 c0       	push   0xc003bdd0
c0011184:	68 ac eb 01 c0       	push   0xc001ebac
c0011189:	e8 97 11 00 00       	call   c0012325 <__cxa_atexit>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	90                   	nop
c0011192:	83 c4 0c             	add    esp,0xc
c0011195:	c3                   	ret    

c0011196 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011196:	83 ec 0c             	sub    esp,0xc
c0011199:	83 ec 08             	sub    esp,0x8
c001119c:	68 ff ff 00 00       	push   0xffff
c00111a1:	6a 01                	push   0x1
c00111a3:	e8 ab ff ff ff       	call   c0011153 <__static_initialization_and_destruction_0(int, int)>
c00111a8:	83 c4 10             	add    esp,0x10
c00111ab:	83 c4 0c             	add    esp,0xc
c00111ae:	c3                   	ret    
c00111af:	90                   	nop

c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111b0:	53                   	push   ebx
c00111b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111b9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111bf:	89 c8                	mov    eax,ecx
c00111c1:	d1 e8                	shr    eax,1
c00111c3:	03 05 c8 ad 03 c0    	add    eax,DWORD PTR ds:0xc003adc8
c00111c9:	83 e1 01             	and    ecx,0x1
c00111cc:	8a 10                	mov    dl,BYTE PTR [eax]
c00111ce:	75 09                	jne    c00111d9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111d0:	83 e2 f0             	and    edx,0xfffffff0
c00111d3:	09 da                	or     edx,ebx
c00111d5:	88 10                	mov    BYTE PTR [eax],dl
c00111d7:	5b                   	pop    ebx
c00111d8:	c3                   	ret    
c00111d9:	c1 e3 04             	shl    ebx,0x4
c00111dc:	83 e2 0f             	and    edx,0xf
c00111df:	09 da                	or     edx,ebx
c00111e1:	88 10                	mov    BYTE PTR [eax],dl
c00111e3:	5b                   	pop    ebx
c00111e4:	c3                   	ret    

c00111e5 <Virt::getPageState(unsigned long)>:
c00111e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111e9:	8b 0d c8 ad 03 c0    	mov    ecx,DWORD PTR ds:0xc003adc8
c00111ef:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111f5:	89 d0                	mov    eax,edx
c00111f7:	d1 e8                	shr    eax,1
c00111f9:	83 e2 01             	and    edx,0x1
c00111fc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111ff:	75 04                	jne    c0011205 <Virt::getPageState(unsigned long)+0x20>
c0011201:	83 e0 0f             	and    eax,0xf
c0011204:	c3                   	ret    
c0011205:	c0 e8 04             	shr    al,0x4
c0011208:	c3                   	ret    

c0011209 <Virt::allocateKernelVirtualPages(int)>:
c0011209:	55                   	push   ebp
c001120a:	31 ed                	xor    ebp,ebp
c001120c:	57                   	push   edi
c001120d:	56                   	push   esi
c001120e:	53                   	push   ebx
c001120f:	31 db                	xor    ebx,ebx
c0011211:	83 ec 1c             	sub    esp,0x1c
c0011214:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011218:	8b 3d c4 ad 03 c0    	mov    edi,DWORD PTR ds:0xc003adc4
c001121e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011223:	57                   	push   edi
c0011224:	e8 bc ff ff ff       	call   c00111e5 <Virt::getPageState(unsigned long)>
c0011229:	5a                   	pop    edx
c001122a:	84 c0                	test   al,al
c001122c:	75 3a                	jne    c0011268 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001122e:	85 db                	test   ebx,ebx
c0011230:	75 02                	jne    c0011234 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011232:	89 fd                	mov    ebp,edi
c0011234:	43                   	inc    ebx
c0011235:	39 f3                	cmp    ebx,esi
c0011237:	74 5a                	je     c0011293 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011239:	47                   	inc    edi
c001123a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011240:	76 31                	jbe    c0011273 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011242:	c7 05 c4 ad 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003adc4,0xc8000
c001124c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011251:	75 28                	jne    c001127b <Virt::allocateKernelVirtualPages(int)+0x72>
c0011253:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011258:	bf 00 80 0c 00       	mov    edi,0xc8000
c001125d:	57                   	push   edi
c001125e:	e8 82 ff ff ff       	call   c00111e5 <Virt::getPageState(unsigned long)>
c0011263:	5a                   	pop    edx
c0011264:	84 c0                	test   al,al
c0011266:	74 c6                	je     c001122e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011268:	31 db                	xor    ebx,ebx
c001126a:	47                   	inc    edi
c001126b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011271:	77 cf                	ja     c0011242 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011273:	89 3d c4 ad 03 c0    	mov    DWORD PTR ds:0xc003adc4,edi
c0011279:	eb a8                	jmp    c0011223 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001127b:	83 ec 0c             	sub    esp,0xc
c001127e:	68 f4 93 03 c0       	push   0xc00393f4
c0011283:	e8 80 bc ff ff       	call   c000cf08 <panic(char const*)>
c0011288:	8b 3d c4 ad 03 c0    	mov    edi,DWORD PTR ds:0xc003adc4
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	eb 90                	jmp    c0011223 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011293:	89 2d c4 ad 03 c0    	mov    DWORD PTR ds:0xc003adc4,ebp
c0011299:	4b                   	dec    ebx
c001129a:	74 5f                	je     c00112fb <Virt::allocateKernelVirtualPages(int)+0xf2>
c001129c:	85 f6                	test   esi,esi
c001129e:	74 3d                	je     c00112dd <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112a0:	89 e8                	mov    eax,ebp
c00112a2:	31 db                	xor    ebx,ebx
c00112a4:	8d 7e ff             	lea    edi,[esi-0x1]
c00112a7:	eb 14                	jmp    c00112bd <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112a9:	6a 01                	push   0x1
c00112ab:	43                   	inc    ebx
c00112ac:	50                   	push   eax
c00112ad:	e8 fe fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112b2:	58                   	pop    eax
c00112b3:	39 f3                	cmp    ebx,esi
c00112b5:	5a                   	pop    edx
c00112b6:	74 25                	je     c00112dd <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b8:	a1 c4 ad 03 c0       	mov    eax,ds:0xc003adc4
c00112bd:	8d 50 01             	lea    edx,[eax+0x1]
c00112c0:	85 db                	test   ebx,ebx
c00112c2:	89 15 c4 ad 03 c0    	mov    DWORD PTR ds:0xc003adc4,edx
c00112c8:	74 20                	je     c00112ea <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112ca:	39 df                	cmp    edi,ebx
c00112cc:	75 db                	jne    c00112a9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112ce:	6a 03                	push   0x3
c00112d0:	43                   	inc    ebx
c00112d1:	50                   	push   eax
c00112d2:	e8 d9 fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112d7:	59                   	pop    ecx
c00112d8:	39 f3                	cmp    ebx,esi
c00112da:	58                   	pop    eax
c00112db:	75 db                	jne    c00112b8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112dd:	83 c4 1c             	add    esp,0x1c
c00112e0:	89 e8                	mov    eax,ebp
c00112e2:	5b                   	pop    ebx
c00112e3:	c1 e0 0c             	shl    eax,0xc
c00112e6:	5e                   	pop    esi
c00112e7:	5f                   	pop    edi
c00112e8:	5d                   	pop    ebp
c00112e9:	c3                   	ret    
c00112ea:	6a 02                	push   0x2
c00112ec:	bb 01 00 00 00       	mov    ebx,0x1
c00112f1:	50                   	push   eax
c00112f2:	e8 b9 fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112f7:	58                   	pop    eax
c00112f8:	5a                   	pop    edx
c00112f9:	eb bd                	jmp    c00112b8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112fb:	6a 04                	push   0x4
c00112fd:	8d 45 01             	lea    eax,[ebp+0x1]
c0011300:	55                   	push   ebp
c0011301:	a3 c4 ad 03 c0       	mov    ds:0xc003adc4,eax
c0011306:	e8 a5 fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130b:	59                   	pop    ecx
c001130c:	89 e8                	mov    eax,ebp
c001130e:	5b                   	pop    ebx
c001130f:	c1 e0 0c             	shl    eax,0xc
c0011312:	83 c4 1c             	add    esp,0x1c
c0011315:	5b                   	pop    ebx
c0011316:	5e                   	pop    esi
c0011317:	5f                   	pop    edi
c0011318:	5d                   	pop    ebp
c0011319:	c3                   	ret    

c001131a <Virt::virtualMemorySetup()>:
c001131a:	53                   	push   ebx
c001131b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011320:	83 ec 08             	sub    esp,0x8
c0011323:	6a 0f                	push   0xf
c0011325:	53                   	push   ebx
c0011326:	43                   	inc    ebx
c0011327:	e8 84 fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001132c:	59                   	pop    ecx
c001132d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011333:	58                   	pop    eax
c0011334:	75 ed                	jne    c0011323 <Virt::virtualMemorySetup()+0x9>
c0011336:	83 ec 08             	sub    esp,0x8
c0011339:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001133e:	68 00 00 00 c8       	push   0xc8000000
c0011343:	68 9f 95 03 c0       	push   0xc003959f
c0011348:	e8 9d ba ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001134d:	58                   	pop    eax
c001134e:	5a                   	pop    edx
c001134f:	68 00 f0 ff ef       	push   0xeffff000
c0011354:	68 b3 95 03 c0       	push   0xc00395b3
c0011359:	e8 8c ba ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	83 ec 08             	sub    esp,0x8
c0011364:	6a 00                	push   0x0
c0011366:	53                   	push   ebx
c0011367:	43                   	inc    ebx
c0011368:	e8 43 fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136d:	83 c4 10             	add    esp,0x10
c0011370:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011376:	75 e9                	jne    c0011361 <Virt::virtualMemorySetup()+0x47>
c0011378:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001137d:	83 ec 08             	sub    esp,0x8
c0011380:	6a 0f                	push   0xf
c0011382:	53                   	push   ebx
c0011383:	43                   	inc    ebx
c0011384:	e8 27 fe ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011389:	83 c4 10             	add    esp,0x10
c001138c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011392:	75 e9                	jne    c001137d <Virt::virtualMemorySetup()+0x63>
c0011394:	83 c4 08             	add    esp,0x8
c0011397:	5b                   	pop    ebx
c0011398:	c3                   	ret    

c0011399 <Virt::getAKernelVAS()>:
c0011399:	a1 dc bd 03 c0       	mov    eax,ds:0xc003bddc
c001139e:	c3                   	ret    

c001139f <Virt::setupPageSwapping(int)>:
c001139f:	57                   	push   edi
c00113a0:	56                   	push   esi
c00113a1:	53                   	push   ebx
c00113a2:	83 ec 1c             	sub    esp,0x1c
c00113a5:	68 14 01 00 00       	push   0x114
c00113aa:	e8 eb 0f 00 00       	call   c001239a <operator new(unsigned long)>
c00113af:	83 c4 0c             	add    esp,0xc
c00113b2:	89 c6                	mov    esi,eax
c00113b4:	ff 35 7c bb 03 c0    	push   DWORD PTR ds:0xc003bb7c
c00113ba:	68 c7 95 03 c0       	push   0xc00395c7
c00113bf:	50                   	push   eax
c00113c0:	e8 03 14 00 00       	call   c00127c8 <File::File(char const*, Process*)>
c00113c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00113c8:	e8 d7 15 00 00       	call   c00129a4 <File::unlink()>
c00113cd:	58                   	pop    eax
c00113ce:	5a                   	pop    edx
c00113cf:	6a 12                	push   0x12
c00113d1:	56                   	push   esi
c00113d2:	e8 55 14 00 00       	call   c001282c <File::open(FileOpenMode)>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	85 c0                	test   eax,eax
c00113dc:	0f 85 bf 00 00 00    	jne    c00114a1 <Virt::setupPageSwapping(int)+0x102>
c00113e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113ee:	c1 e3 08             	shl    ebx,0x8
c00113f1:	83 ec 0c             	sub    esp,0xc
c00113f4:	68 00 00 01 00       	push   0x10000
c00113f9:	e8 e7 bf ff ff       	call   c000d3e5 <malloc>
c00113fe:	83 c4 0c             	add    esp,0xc
c0011401:	89 c7                	mov    edi,eax
c0011403:	68 00 00 01 00       	push   0x10000
c0011408:	6a 00                	push   0x0
c001140a:	50                   	push   eax
c001140b:	e8 b0 f2 fe ff       	call   c00006c0 <memset>
c0011410:	83 c4 10             	add    esp,0x10
c0011413:	85 db                	test   ebx,ebx
c0011415:	79 03                	jns    c001141a <Virt::setupPageSwapping(int)+0x7b>
c0011417:	83 c3 0f             	add    ebx,0xf
c001141a:	c1 fb 04             	sar    ebx,0x4
c001141d:	4b                   	dec    ebx
c001141e:	83 fb ff             	cmp    ebx,0xffffffff
c0011421:	74 4b                	je     c001146e <Virt::setupPageSwapping(int)+0xcf>
c0011423:	83 ec 0c             	sub    esp,0xc
c0011426:	8b 06                	mov    eax,DWORD PTR [esi]
c0011428:	8d 54 24 18          	lea    edx,[esp+0x18]
c001142c:	52                   	push   edx
c001142d:	57                   	push   edi
c001142e:	6a 00                	push   0x0
c0011430:	68 00 00 01 00       	push   0x10000
c0011435:	56                   	push   esi
c0011436:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011439:	83 c4 20             	add    esp,0x20
c001143c:	85 c0                	test   eax,eax
c001143e:	75 4e                	jne    c001148e <Virt::setupPageSwapping(int)+0xef>
c0011440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011444:	3d 00 00 01 00       	cmp    eax,0x10000
c0011449:	74 d2                	je     c001141d <Virt::setupPageSwapping(int)+0x7e>
c001144b:	83 ec 08             	sub    esp,0x8
c001144e:	4b                   	dec    ebx
c001144f:	50                   	push   eax
c0011450:	68 1a 96 03 c0       	push   0xc003961a
c0011455:	e8 90 b9 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001145a:	c7 04 24 23 96 03 c0 	mov    DWORD PTR [esp],0xc0039623
c0011461:	e8 a2 ba ff ff       	call   c000cf08 <panic(char const*)>
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	83 fb ff             	cmp    ebx,0xffffffff
c001146c:	75 b5                	jne    c0011423 <Virt::setupPageSwapping(int)+0x84>
c001146e:	83 ec 0c             	sub    esp,0xc
c0011471:	56                   	push   esi
c0011472:	e8 13 14 00 00       	call   c001288a <File::close()>
c0011477:	89 3c 24             	mov    DWORD PTR [esp],edi
c001147a:	e8 86 bf ff ff       	call   c000d405 <rfree>
c001147f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011482:	8b 06                	mov    eax,DWORD PTR [esi]
c0011484:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011487:	83 c4 20             	add    esp,0x20
c001148a:	5b                   	pop    ebx
c001148b:	5e                   	pop    esi
c001148c:	5f                   	pop    edi
c001148d:	c3                   	ret    
c001148e:	83 ec 08             	sub    esp,0x8
c0011491:	50                   	push   eax
c0011492:	68 02 96 03 c0       	push   0xc0039602
c0011497:	e8 4e b9 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001149c:	83 c4 10             	add    esp,0x10
c001149f:	eb 9f                	jmp    c0011440 <Virt::setupPageSwapping(int)+0xa1>
c00114a1:	83 ec 08             	sub    esp,0x8
c00114a4:	50                   	push   eax
c00114a5:	68 de 95 03 c0       	push   0xc00395de
c00114aa:	e8 3b b9 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00114af:	c7 04 24 e7 95 03 c0 	mov    DWORD PTR [esp],0xc00395e7
c00114b6:	e8 4d ba ff ff       	call   c000cf08 <panic(char const*)>
c00114bb:	83 c4 10             	add    esp,0x10
c00114be:	e9 1f ff ff ff       	jmp    c00113e2 <Virt::setupPageSwapping(int)+0x43>
c00114c3:	90                   	nop

c00114c4 <VAS::VAS()>:
c00114c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d3:	a3 dc bd 03 c0       	mov    ds:0xc003bddc,eax
c00114d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114dc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00114e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114e4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00114e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114eb:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00114f2:	90                   	nop
c00114f3:	c3                   	ret    

c00114f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00114f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114f8:	89 c2                	mov    edx,eax
c00114fa:	c1 e8 0a             	shr    eax,0xa
c00114fd:	c1 ea 16             	shr    edx,0x16
c0011500:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011505:	19 c9                	sbb    ecx,ecx
c0011507:	c1 e2 0c             	shl    edx,0xc
c001150a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011510:	25 fc 0f 00 00       	and    eax,0xffc
c0011515:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001151c:	01 d0                	add    eax,edx
c001151e:	c3                   	ret    
c001151f:	90                   	nop

c0011520 <VAS::getPageTableEntry(unsigned long)>:
c0011520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011524:	89 ca                	mov    edx,ecx
c0011526:	c1 e9 0a             	shr    ecx,0xa
c0011529:	c1 ea 16             	shr    edx,0x16
c001152c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011532:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011538:	c1 e0 0c             	shl    eax,0xc
c001153b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001153e:	c3                   	ret    

c001153f <Virt::freeKernelVirtualPages(unsigned long)>:
c001153f:	57                   	push   edi
c0011540:	56                   	push   esi
c0011541:	be 01 00 00 00       	mov    esi,0x1
c0011546:	53                   	push   ebx
c0011547:	83 ec 10             	sub    esp,0x10
c001154a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001154e:	c1 eb 0c             	shr    ebx,0xc
c0011551:	eb 3f                	jmp    c0011592 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011553:	e8 41 fe ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0011558:	83 ec 08             	sub    esp,0x8
c001155b:	57                   	push   edi
c001155c:	50                   	push   eax
c001155d:	e8 be ff ff ff       	call   c0011520 <VAS::getPageTableEntry(unsigned long)>
c0011562:	83 c4 10             	add    esp,0x10
c0011565:	8b 00                	mov    eax,DWORD PTR [eax]
c0011567:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001156b:	f6 c4 04             	test   ah,0x4
c001156e:	75 5f                	jne    c00115cf <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011570:	80 fa 04             	cmp    dl,0x4
c0011573:	74 78                	je     c00115ed <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011575:	80 fa 02             	cmp    dl,0x2
c0011578:	0f 84 88 00 00 00    	je     c0011606 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001157e:	80 fa 03             	cmp    dl,0x3
c0011581:	0f 84 ad 00 00 00    	je     c0011634 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011587:	fe ca                	dec    dl
c0011589:	0f 84 92 00 00 00    	je     c0011621 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001158f:	43                   	inc    ebx
c0011590:	31 f6                	xor    esi,esi
c0011592:	53                   	push   ebx
c0011593:	e8 4d fc ff ff       	call   c00111e5 <Virt::getPageState(unsigned long)>
c0011598:	5f                   	pop    edi
c0011599:	89 df                	mov    edi,ebx
c001159b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001159f:	c1 e7 0c             	shl    edi,0xc
c00115a2:	84 c0                	test   al,al
c00115a4:	75 ad                	jne    c0011553 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00115a6:	83 ec 0c             	sub    esp,0xc
c00115a9:	68 29 96 03 c0       	push   0xc0039629
c00115ae:	e8 55 b9 ff ff       	call   c000cf08 <panic(char const*)>
c00115b3:	e8 e1 fd ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c00115b8:	5a                   	pop    edx
c00115b9:	59                   	pop    ecx
c00115ba:	57                   	push   edi
c00115bb:	50                   	push   eax
c00115bc:	e8 5f ff ff ff       	call   c0011520 <VAS::getPageTableEntry(unsigned long)>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00115c6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115ca:	f6 c4 04             	test   ah,0x4
c00115cd:	74 c0                	je     c001158f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00115cf:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00115d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00115d8:	83 ec 0c             	sub    esp,0xc
c00115db:	50                   	push   eax
c00115dc:	e8 24 c3 ff ff       	call   c000d905 <Phys::freePage(unsigned long)>
c00115e1:	83 c4 10             	add    esp,0x10
c00115e4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115e8:	80 fa 04             	cmp    dl,0x4
c00115eb:	75 88                	jne    c0011575 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00115ed:	89 f0                	mov    eax,esi
c00115ef:	84 c0                	test   al,al
c00115f1:	75 47                	jne    c001163a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00115f3:	c7 44 24 20 14 94 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039414
c00115fb:	83 c4 10             	add    esp,0x10
c00115fe:	5b                   	pop    ebx
c00115ff:	5e                   	pop    esi
c0011600:	5f                   	pop    edi
c0011601:	e9 02 b9 ff ff       	jmp    c000cf08 <panic(char const*)>
c0011606:	89 f0                	mov    eax,esi
c0011608:	84 c0                	test   al,al
c001160a:	75 15                	jne    c0011621 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001160c:	83 ec 0c             	sub    esp,0xc
c001160f:	68 45 96 03 c0       	push   0xc0039645
c0011614:	e8 ef b8 ff ff       	call   c000cf08 <panic(char const*)>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	e9 6e ff ff ff       	jmp    c001158f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011621:	83 ec 08             	sub    esp,0x8
c0011624:	6a 00                	push   0x0
c0011626:	53                   	push   ebx
c0011627:	e8 84 fb ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	e9 5b ff ff ff       	jmp    c001158f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011634:	89 f0                	mov    eax,esi
c0011636:	84 c0                	test   al,al
c0011638:	75 15                	jne    c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001163a:	83 ec 08             	sub    esp,0x8
c001163d:	6a 00                	push   0x0
c001163f:	53                   	push   ebx
c0011640:	e8 6b fb ff ff       	call   c00111b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	83 c4 10             	add    esp,0x10
c001164b:	5b                   	pop    ebx
c001164c:	5e                   	pop    esi
c001164d:	5f                   	pop    edi
c001164e:	c3                   	ret    
c001164f:	c7 44 24 20 61 96 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039661
c0011657:	83 c4 10             	add    esp,0x10
c001165a:	5b                   	pop    ebx
c001165b:	5e                   	pop    esi
c001165c:	5f                   	pop    edi
c001165d:	e9 a6 b8 ff ff       	jmp    c000cf08 <panic(char const*)>

c0011662 <VAS::freeAllocatedPages(unsigned long)>:
c0011662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001166a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001166e:	74 09                	je     c0011679 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011670:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011674:	e9 c6 fe ff ff       	jmp    c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c0011679:	c7 44 24 04 38 94 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039438
c0011681:	e9 64 b7 ff ff       	jmp    c000cdea <kprintf(char const*, ...)>

c0011686 <VAS::virtualToPhysical(unsigned long)>:
c0011686:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001168a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001168e:	e8 8d fe ff ff       	call   c0011520 <VAS::getPageTableEntry(unsigned long)>
c0011693:	5a                   	pop    edx
c0011694:	8b 00                	mov    eax,DWORD PTR [eax]
c0011696:	59                   	pop    ecx
c0011697:	25 00 f0 ff ff       	and    eax,0xfffff000
c001169c:	c3                   	ret    
c001169d:	90                   	nop

c001169e <VAS::mapOtherVASIn(bool, VAS*)>:
c001169e:	83 ec 0c             	sub    esp,0xc
c00116a1:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00116a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116aa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00116ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b1:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00116b4:	19 c0                	sbb    eax,eax
c00116b6:	83 ca 03             	or     edx,0x3
c00116b9:	83 e0 fc             	and    eax,0xfffffffc
c00116bc:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00116c3:	e8 71 d2 00 00       	call   c001e939 <CPU::readCR3()>
c00116c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00116cc:	83 c4 0c             	add    esp,0xc
c00116cf:	e9 89 d2 00 00       	jmp    c001e95d <CPU::writeCR3(unsigned long)>

c00116d4 <VAS::~VAS()>:
c00116d4:	83 ec 2c             	sub    esp,0x2c
c00116d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00116df:	e8 a8 cb ff ff       	call   c000e28c <lockScheduler()>
c00116e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00116e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00116eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ee:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00116f4:	83 ec 04             	sub    esp,0x4
c00116f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00116fb:	6a 01                	push   0x1
c00116fd:	50                   	push   eax
c00116fe:	e8 9b ff ff ff       	call   c001169e <VAS::mapOtherVASIn(bool, VAS*)>
c0011703:	83 c4 10             	add    esp,0x10
c0011706:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001170e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011716:	0f 8f d7 00 00 00    	jg     c00117f3 <VAS::~VAS()+0x11f>
c001171c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011720:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011723:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011727:	c1 e2 02             	shl    edx,0x2
c001172a:	01 d0                	add    eax,edx
c001172c:	8b 00                	mov    eax,DWORD PTR [eax]
c001172e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011736:	83 e0 01             	and    eax,0x1
c0011739:	0f 84 ab 00 00 00    	je     c00117ea <VAS::~VAS()+0x116>
c001173f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011747:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001174f:	7f 75                	jg     c00117c6 <VAS::~VAS()+0xf2>
c0011751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011755:	c1 e0 0a             	shl    eax,0xa
c0011758:	89 c2                	mov    edx,eax
c001175a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001175e:	01 d0                	add    eax,edx
c0011760:	c1 e0 0c             	shl    eax,0xc
c0011763:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011767:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001176c:	8b 00                	mov    eax,DWORD PTR [eax]
c001176e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011771:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011777:	83 ec 04             	sub    esp,0x4
c001177a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001177e:	6a 01                	push   0x1
c0011780:	50                   	push   eax
c0011781:	e8 6e fd ff ff       	call   c00114f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001178d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011791:	8b 00                	mov    eax,DWORD PTR [eax]
c0011793:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011797:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179b:	25 01 04 00 00       	and    eax,0x401
c00117a0:	3d 01 04 00 00       	cmp    eax,0x401
c00117a5:	75 19                	jne    c00117c0 <VAS::~VAS()+0xec>
c00117a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	50                   	push   eax
c00117b4:	e8 4c c1 ff ff       	call   c000d905 <Phys::freePage(unsigned long)>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117c0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00117c4:	eb 81                	jmp    c0011747 <VAS::~VAS()+0x73>
c00117c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ca:	25 00 04 00 00       	and    eax,0x400
c00117cf:	74 19                	je     c00117ea <VAS::~VAS()+0x116>
c00117d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117da:	83 ec 0c             	sub    esp,0xc
c00117dd:	50                   	push   eax
c00117de:	e8 22 c1 ff ff       	call   c000d905 <Phys::freePage(unsigned long)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117ea:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00117ee:	e9 1b ff ff ff       	jmp    c001170e <VAS::~VAS()+0x3a>
c00117f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117fa:	83 ec 0c             	sub    esp,0xc
c00117fd:	50                   	push   eax
c00117fe:	e8 3c fd ff ff       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001180a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	50                   	push   eax
c0011811:	e8 ef c0 ff ff       	call   c000d905 <Phys::freePage(unsigned long)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001181d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011821:	c1 e0 02             	shl    eax,0x2
c0011824:	83 ec 08             	sub    esp,0x8
c0011827:	50                   	push   eax
c0011828:	68 5c 94 03 c0       	push   0xc003945c
c001182d:	e8 b8 b5 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011832:	83 c4 10             	add    esp,0x10
c0011835:	e8 54 ca ff ff       	call   c000e28e <unlockScheduler()>
c001183a:	90                   	nop
c001183b:	83 c4 2c             	add    esp,0x2c
c001183e:	c3                   	ret    
c001183f:	90                   	nop

c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011840:	55                   	push   ebp
c0011841:	57                   	push   edi
c0011842:	56                   	push   esi
c0011843:	53                   	push   ebx
c0011844:	83 ec 1c             	sub    esp,0x1c
c0011847:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001184b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001184f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011855:	77 08                	ja     c001185f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011857:	0f 20 d8             	mov    eax,cr3
c001185a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001185d:	75 47                	jne    c00118a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001185f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011863:	09 d8                	or     eax,ebx
c0011865:	a9 ff 0f 00 00       	test   eax,0xfff
c001186a:	75 57                	jne    c00118c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001186c:	89 de                	mov    esi,ebx
c001186e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011871:	c1 ee 16             	shr    esi,0x16
c0011874:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001187b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001187f:	74 54                	je     c00118d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011881:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011885:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001188b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001188f:	c1 e6 0c             	shl    esi,0xc
c0011892:	c1 eb 0a             	shr    ebx,0xa
c0011895:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001189b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001189e:	83 c4 1c             	add    esp,0x1c
c00118a1:	5b                   	pop    ebx
c00118a2:	5e                   	pop    esi
c00118a3:	5f                   	pop    edi
c00118a4:	5d                   	pop    ebp
c00118a5:	c3                   	ret    
c00118a6:	83 ec 0c             	sub    esp,0xc
c00118a9:	68 7c 94 03 c0       	push   0xc003947c
c00118ae:	e8 37 b5 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00118b3:	83 c4 10             	add    esp,0x10
c00118b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118ba:	09 d8                	or     eax,ebx
c00118bc:	a9 ff 0f 00 00       	test   eax,0xfff
c00118c1:	74 a9                	je     c001186c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00118c3:	83 ec 0c             	sub    esp,0xc
c00118c6:	68 e4 94 03 c0       	push   0xc00394e4
c00118cb:	e8 38 b6 ff ff       	call   c000cf08 <panic(char const*)>
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	eb 97                	jmp    c001186c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00118d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118d9:	e8 b1 c0 ff ff       	call   c000d98f <Phys::allocatePage()>
c00118de:	89 c5                	mov    ebp,eax
c00118e0:	e8 b4 fa ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c00118e5:	83 ec 0c             	sub    esp,0xc
c00118e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00118ec:	6a 01                	push   0x1
c00118ee:	e8 16 f9 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c00118f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00118fa:	6a 01                	push   0x1
c00118fc:	50                   	push   eax
c00118fd:	55                   	push   ebp
c00118fe:	81 cd 07 04 00 00    	or     ebp,0x407
c0011904:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011908:	51                   	push   ecx
c0011909:	e8 1e 02 00 00       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001190e:	83 c4 1c             	add    esp,0x1c
c0011911:	68 00 10 00 00       	push   0x1000
c0011916:	6a 00                	push   0x0
c0011918:	50                   	push   eax
c0011919:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001191d:	e8 9e ed fe ff       	call   c00006c0 <memset>
c0011922:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011926:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011929:	e8 11 fc ff ff       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c001192e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011932:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001193b:	e9 41 ff ff ff       	jmp    c0011881 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011940 <VAS::allocatePages(int, int)>:
c0011940:	55                   	push   ebp
c0011941:	57                   	push   edi
c0011942:	56                   	push   esi
c0011943:	53                   	push   ebx
c0011944:	83 ec 1c             	sub    esp,0x1c
c0011947:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001194b:	e8 80 57 00 00       	call   c00170d0 <thisCPU()>
c0011950:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011956:	83 e0 01             	and    eax,0x1
c0011959:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001195d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011961:	0f 85 d7 00 00 00    	jne    c0011a3e <VAS::allocatePages(int, int)+0xfe>
c0011967:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001196a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001196e:	85 c0                	test   eax,eax
c0011970:	0f 84 ac 00 00 00    	je     c0011a22 <VAS::allocatePages(int, int)+0xe2>
c0011976:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001197a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001197e:	c1 e6 0c             	shl    esi,0xc
c0011981:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011985:	85 c0                	test   eax,eax
c0011987:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001198a:	7e 33                	jle    c00119bf <VAS::allocatePages(int, int)+0x7f>
c001198c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011990:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011994:	81 cd 00 04 00 00    	or     ebp,0x400
c001199a:	e8 f0 bf ff ff       	call   c000d98f <Phys::allocatePage()>
c001199f:	55                   	push   ebp
c00119a0:	53                   	push   ebx
c00119a1:	50                   	push   eax
c00119a2:	57                   	push   edi
c00119a3:	e8 98 fe ff ff       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00119b0:	74 03                	je     c00119b5 <VAS::allocatePages(int, int)+0x75>
c00119b2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00119b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00119bb:	39 de                	cmp    esi,ebx
c00119bd:	75 db                	jne    c001199a <VAS::allocatePages(int, int)+0x5a>
c00119bf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00119c4:	74 3f                	je     c0011a05 <VAS::allocatePages(int, int)+0xc5>
c00119c6:	c1 ee 0a             	shr    esi,0xa
c00119c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119cd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00119d3:	c1 eb 0a             	shr    ebx,0xa
c00119d6:	81 ee 00 00 40 00    	sub    esi,0x400000
c00119dc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00119e2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00119e8:	39 f3                	cmp    ebx,esi
c00119ea:	77 0d                	ja     c00119f9 <VAS::allocatePages(int, int)+0xb9>
c00119ec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00119ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c00119f5:	39 de                	cmp    esi,ebx
c00119f7:	73 f3                	jae    c00119ec <VAS::allocatePages(int, int)+0xac>
c00119f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119fd:	83 c4 1c             	add    esp,0x1c
c0011a00:	5b                   	pop    ebx
c0011a01:	5e                   	pop    esi
c0011a02:	5f                   	pop    edi
c0011a03:	5d                   	pop    ebp
c0011a04:	c3                   	ret    
c0011a05:	e8 2f cf 00 00       	call   c001e939 <CPU::readCR3()>
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	50                   	push   eax
c0011a0e:	e8 4a cf 00 00       	call   c001e95d <CPU::writeCR3(unsigned long)>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a1a:	83 c4 1c             	add    esp,0x1c
c0011a1d:	5b                   	pop    ebx
c0011a1e:	5e                   	pop    esi
c0011a1f:	5f                   	pop    edi
c0011a20:	5d                   	pop    ebp
c0011a21:	c3                   	ret    
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	68 08 95 03 c0       	push   0xc0039508
c0011a2a:	e8 d9 b4 ff ff       	call   c000cf08 <panic(char const*)>
c0011a2f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a36:	83 c4 10             	add    esp,0x10
c0011a39:	e9 38 ff ff ff       	jmp    c0011976 <VAS::allocatePages(int, int)+0x36>
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011a45:	e8 bf f7 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0011a4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011a56:	0f 87 94 00 00 00    	ja     c0011af0 <VAS::allocatePages(int, int)+0x1b0>
c0011a5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011a60:	85 d2                	test   edx,edx
c0011a62:	7e 3c                	jle    c0011aa0 <VAS::allocatePages(int, int)+0x160>
c0011a64:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011a68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011a6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a70:	c1 e5 0c             	shl    ebp,0xc
c0011a73:	81 ce 00 04 00 00    	or     esi,0x400
c0011a79:	01 dd                	add    ebp,ebx
c0011a7b:	e8 0f bf ff ff       	call   c000d98f <Phys::allocatePage()>
c0011a80:	56                   	push   esi
c0011a81:	53                   	push   ebx
c0011a82:	50                   	push   eax
c0011a83:	57                   	push   edi
c0011a84:	e8 b7 fd ff ff       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a89:	83 c4 10             	add    esp,0x10
c0011a8c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a91:	74 03                	je     c0011a96 <VAS::allocatePages(int, int)+0x156>
c0011a93:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a96:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a9c:	39 dd                	cmp    ebp,ebx
c0011a9e:	75 db                	jne    c0011a7b <VAS::allocatePages(int, int)+0x13b>
c0011aa0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aa5:	0f 84 5a ff ff ff    	je     c0011a05 <VAS::allocatePages(int, int)+0xc5>
c0011aab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011aaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ab3:	89 d3                	mov    ebx,edx
c0011ab5:	c1 e0 0c             	shl    eax,0xc
c0011ab8:	c1 eb 0a             	shr    ebx,0xa
c0011abb:	01 d0                	add    eax,edx
c0011abd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ac3:	c1 e8 0a             	shr    eax,0xa
c0011ac6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011acc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ad1:	2d 00 00 40 00       	sub    eax,0x400000
c0011ad6:	39 c3                	cmp    ebx,eax
c0011ad8:	0f 87 1b ff ff ff    	ja     c00119f9 <VAS::allocatePages(int, int)+0xb9>
c0011ade:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ae1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ae7:	39 d8                	cmp    eax,ebx
c0011ae9:	73 f3                	jae    c0011ade <VAS::allocatePages(int, int)+0x19e>
c0011aeb:	e9 09 ff ff ff       	jmp    c00119f9 <VAS::allocatePages(int, int)+0xb9>
c0011af0:	e8 db 55 00 00       	call   c00170d0 <thisCPU()>
c0011af5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011afc:	0f 84 5a ff ff ff    	je     c0011a5c <VAS::allocatePages(int, int)+0x11c>
c0011b02:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011b0a:	e9 4d ff ff ff       	jmp    c0011a5c <VAS::allocatePages(int, int)+0x11c>
c0011b0f:	90                   	nop

c0011b10 <VAS::setCPUSpecific(unsigned long)>:
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	6a 05                	push   0x5
c0011b15:	68 00 00 40 c2       	push   0xc2400000
c0011b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b22:	e8 19 fd ff ff       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b27:	83 c4 1c             	add    esp,0x1c
c0011b2a:	c3                   	ret    
c0011b2b:	90                   	nop

c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011b2c:	55                   	push   ebp
c0011b2d:	57                   	push   edi
c0011b2e:	56                   	push   esi
c0011b2f:	53                   	push   ebx
c0011b30:	83 ec 1c             	sub    esp,0x1c
c0011b33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b37:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b3b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011b3f:	e8 8c 55 00 00       	call   c00170d0 <thisCPU()>
c0011b44:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b4a:	83 e0 01             	and    eax,0x1
c0011b4d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b55:	85 c0                	test   eax,eax
c0011b57:	7e 39                	jle    c0011b92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011b59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b5d:	89 f3                	mov    ebx,esi
c0011b5f:	c1 e0 0c             	shl    eax,0xc
c0011b62:	01 f0                	add    eax,esi
c0011b64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b68:	55                   	push   ebp
c0011b69:	53                   	push   ebx
c0011b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b6e:	29 f0                	sub    eax,esi
c0011b70:	01 d8                	add    eax,ebx
c0011b72:	50                   	push   eax
c0011b73:	57                   	push   edi
c0011b74:	e8 c7 fc ff ff       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b81:	74 03                	je     c0011b86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011b83:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b86:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b8c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011b90:	75 d6                	jne    c0011b68 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011b92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b97:	74 42                	je     c0011bdb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011b99:	89 f3                	mov    ebx,esi
c0011b9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b9f:	c1 eb 0a             	shr    ebx,0xa
c0011ba2:	c1 e0 0c             	shl    eax,0xc
c0011ba5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bab:	01 f0                	add    eax,esi
c0011bad:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bb3:	c1 e8 0a             	shr    eax,0xa
c0011bb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bbb:	2d 00 00 40 00       	sub    eax,0x400000
c0011bc0:	39 c3                	cmp    ebx,eax
c0011bc2:	77 0d                	ja     c0011bd1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011bc4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bc7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bcd:	39 d8                	cmp    eax,ebx
c0011bcf:	73 f3                	jae    c0011bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011bd1:	83 c4 1c             	add    esp,0x1c
c0011bd4:	89 f0                	mov    eax,esi
c0011bd6:	5b                   	pop    ebx
c0011bd7:	5e                   	pop    esi
c0011bd8:	5f                   	pop    edi
c0011bd9:	5d                   	pop    ebp
c0011bda:	c3                   	ret    
c0011bdb:	e8 59 cd 00 00       	call   c001e939 <CPU::readCR3()>
c0011be0:	83 ec 0c             	sub    esp,0xc
c0011be3:	50                   	push   eax
c0011be4:	e8 74 cd 00 00       	call   c001e95d <CPU::writeCR3(unsigned long)>
c0011be9:	89 f0                	mov    eax,esi
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	83 c4 1c             	add    esp,0x1c
c0011bf1:	5b                   	pop    ebx
c0011bf2:	5e                   	pop    esi
c0011bf3:	5f                   	pop    edi
c0011bf4:	5d                   	pop    ebp
c0011bf5:	c3                   	ret    

c0011bf6 <VAS::VAS(VAS*)>:
c0011bf6:	53                   	push   ebx
c0011bf7:	83 ec 38             	sub    esp,0x38
c0011bfa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c05:	e8 a9 c6 ff ff       	call   c000e2b3 <lockStuff()>
c0011c0a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011c11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011c18:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c1c:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011c1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c23:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011c26:	e8 64 bd ff ff       	call   c000d98f <Phys::allocatePage()>
c0011c2b:	89 c2                	mov    edx,eax
c0011c2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c31:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011c34:	e8 60 f7 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0011c39:	89 c3                	mov    ebx,eax
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	6a 01                	push   0x1
c0011c40:	e8 c4 f5 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0011c45:	83 c4 10             	add    esp,0x10
c0011c48:	89 c2                	mov    edx,eax
c0011c4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	6a 03                	push   0x3
c0011c56:	6a 01                	push   0x1
c0011c58:	52                   	push   edx
c0011c59:	50                   	push   eax
c0011c5a:	53                   	push   ebx
c0011c5b:	e8 cc fe ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c60:	83 c4 20             	add    esp,0x20
c0011c63:	89 c2                	mov    edx,eax
c0011c65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011c6c:	83 ec 04             	sub    esp,0x4
c0011c6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011c73:	6a 01                	push   0x1
c0011c75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011c79:	e8 20 fa ff ff       	call   c001169e <VAS::mapOtherVASIn(bool, VAS*)>
c0011c7e:	83 c4 10             	add    esp,0x10
c0011c81:	83 ec 0c             	sub    esp,0xc
c0011c84:	6a 01                	push   0x1
c0011c86:	e8 7e f5 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	6a 01                	push   0x1
c0011c97:	e8 6d f5 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0011c9c:	83 c4 10             	add    esp,0x10
c0011c9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011ca3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011cab:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011cb3:	0f 8f 5e 02 00 00    	jg     c0011f17 <VAS::VAS(VAS*)+0x321>
c0011cb9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cc3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011cc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ccc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011cd0:	c1 e2 02             	shl    edx,0x2
c0011cd3:	01 d0                	add    eax,edx
c0011cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cdb:	83 ec 08             	sub    esp,0x8
c0011cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011ce2:	68 7b 96 03 c0       	push   0xc003967b
c0011ce7:	e8 fe b0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011cec:	83 c4 10             	add    esp,0x10
c0011cef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cf3:	25 01 04 00 00       	and    eax,0x401
c0011cf8:	3d 01 04 00 00       	cmp    eax,0x401
c0011cfd:	0f 85 e5 01 00 00    	jne    c0011ee8 <VAS::VAS(VAS*)+0x2f2>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	68 8c 96 03 c0       	push   0xc003968c
c0011d0b:	e8 da b0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	e8 77 bc ff ff       	call   c000d98f <Phys::allocatePage()>
c0011d18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d1c:	83 ec 08             	sub    esp,0x8
c0011d1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d23:	68 a2 96 03 c0       	push   0xc00396a2
c0011d28:	e8 bd b0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d34:	25 ff 0f 00 00       	and    eax,0xfff
c0011d39:	89 c1                	mov    ecx,eax
c0011d3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d46:	c1 e2 02             	shl    edx,0x2
c0011d49:	01 c2                	add    edx,eax
c0011d4b:	89 c8                	mov    eax,ecx
c0011d4d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011d51:	89 02                	mov    DWORD PTR [edx],eax
c0011d53:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011d5b:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011d63:	0f 8f a5 01 00 00    	jg     c0011f0e <VAS::VAS(VAS*)+0x318>
c0011d69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d6d:	c1 e0 0a             	shl    eax,0xa
c0011d70:	89 c2                	mov    edx,eax
c0011d72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d76:	01 d0                	add    eax,edx
c0011d78:	c1 e0 0c             	shl    eax,0xc
c0011d7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d7f:	83 ec 08             	sub    esp,0x8
c0011d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d8a:	e8 91 f7 ff ff       	call   c0011520 <VAS::getPageTableEntry(unsigned long)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d98:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011da2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011da8:	83 ec 04             	sub    esp,0x4
c0011dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011daf:	6a 01                	push   0x1
c0011db1:	50                   	push   eax
c0011db2:	e8 3d f7 ff ff       	call   c00114f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dbe:	83 ec 04             	sub    esp,0x4
c0011dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dc9:	68 34 95 03 c0       	push   0xc0039534
c0011dce:	e8 17 b0 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dda:	25 01 04 00 00       	and    eax,0x401
c0011ddf:	3d 01 04 00 00       	cmp    eax,0x401
c0011de4:	0f 85 db 00 00 00    	jne    c0011ec5 <VAS::VAS(VAS*)+0x2cf>
c0011dea:	83 ec 0c             	sub    esp,0xc
c0011ded:	68 b1 96 03 c0       	push   0xc00396b1
c0011df2:	e8 f3 af ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	e8 90 bb ff ff       	call   c000d98f <Phys::allocatePage()>
c0011dff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e03:	83 ec 08             	sub    esp,0x8
c0011e06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e0a:	68 c0 96 03 c0       	push   0xc00396c0
c0011e0f:	e8 d6 af ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011e14:	83 c4 10             	add    esp,0x10
c0011e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e20:	83 ec 08             	sub    esp,0x8
c0011e23:	50                   	push   eax
c0011e24:	68 d4 96 03 c0       	push   0xc00396d4
c0011e29:	e8 bc af ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011e2e:	83 c4 10             	add    esp,0x10
c0011e31:	e8 63 f5 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0011e36:	83 ec 0c             	sub    esp,0xc
c0011e39:	6a 03                	push   0x3
c0011e3b:	6a 01                	push   0x1
c0011e3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e45:	50                   	push   eax
c0011e46:	e8 e1 fc ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e4b:	83 c4 20             	add    esp,0x20
c0011e4e:	e8 46 f5 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0011e53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e57:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e5d:	83 ec 0c             	sub    esp,0xc
c0011e60:	6a 03                	push   0x3
c0011e62:	6a 01                	push   0x1
c0011e64:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e68:	52                   	push   edx
c0011e69:	50                   	push   eax
c0011e6a:	e8 bd fc ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6f:	83 c4 20             	add    esp,0x20
c0011e72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e7a:	83 ec 04             	sub    esp,0x4
c0011e7d:	68 00 10 00 00       	push   0x1000
c0011e82:	52                   	push   edx
c0011e83:	50                   	push   eax
c0011e84:	e8 eb e7 fe ff       	call   c0000674 <memcpy>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e90:	25 ff 0f 00 00       	and    eax,0xfff
c0011e95:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011e99:	89 c2                	mov    edx,eax
c0011e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e9f:	89 10                	mov    DWORD PTR [eax],edx
c0011ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea5:	25 ff 0f 00 00       	and    eax,0xfff
c0011eaa:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011eae:	83 ec 04             	sub    esp,0x4
c0011eb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011eb5:	50                   	push   eax
c0011eb6:	68 58 95 03 c0       	push   0xc0039558
c0011ebb:	e8 2a af ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011ec0:	83 c4 10             	add    esp,0x10
c0011ec3:	eb 1a                	jmp    c0011edf <VAS::VAS(VAS*)+0x2e9>
c0011ec5:	83 ec 0c             	sub    esp,0xc
c0011ec8:	68 e8 96 03 c0       	push   0xc00396e8
c0011ecd:	e8 18 af ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011ed2:	83 c4 10             	add    esp,0x10
c0011ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011edd:	89 10                	mov    DWORD PTR [eax],edx
c0011edf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011ee3:	e9 73 fe ff ff       	jmp    c0011d5b <VAS::VAS(VAS*)+0x165>
c0011ee8:	83 ec 0c             	sub    esp,0xc
c0011eeb:	68 ec 96 03 c0       	push   0xc00396ec
c0011ef0:	e8 f5 ae ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0011ef5:	83 c4 10             	add    esp,0x10
c0011ef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011efc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f03:	c1 e2 02             	shl    edx,0x2
c0011f06:	01 c2                	add    edx,eax
c0011f08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f0c:	89 02                	mov    DWORD PTR [edx],eax
c0011f0e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011f12:	e9 94 fd ff ff       	jmp    c0011cab <VAS::VAS(VAS*)+0xb5>
c0011f17:	83 ec 0c             	sub    esp,0xc
c0011f1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011f1e:	e8 1c f6 ff ff       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	83 ec 0c             	sub    esp,0xc
c0011f29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f2d:	e8 0d f6 ff ff       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c0011f32:	83 c4 10             	add    esp,0x10
c0011f35:	e8 0b c7 ff ff       	call   c000e645 <unlockStuff()>
c0011f3a:	90                   	nop
c0011f3b:	83 c4 38             	add    esp,0x38
c0011f3e:	5b                   	pop    ebx
c0011f3f:	c3                   	ret    

c0011f40 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011f40:	55                   	push   ebp
c0011f41:	57                   	push   edi
c0011f42:	56                   	push   esi
c0011f43:	53                   	push   ebx
c0011f44:	83 ec 1c             	sub    esp,0x1c
c0011f47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f4b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f4f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011f53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011f57:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f5c:	75 4a                	jne    c0011fa8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011f5e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011f62:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f65:	c1 eb 16             	shr    ebx,0x16
c0011f68:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011f6f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011f73:	74 4d                	je     c0011fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011f75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f79:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011f7d:	c1 e8 0a             	shr    eax,0xa
c0011f80:	80 fa 01             	cmp    dl,0x1
c0011f83:	19 d2                	sbb    edx,edx
c0011f85:	c1 e3 0c             	shl    ebx,0xc
c0011f88:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011f8c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011f92:	25 fc 0f 00 00       	and    eax,0xffc
c0011f97:	01 d8                	add    eax,ebx
c0011f99:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011fa0:	83 c4 1c             	add    esp,0x1c
c0011fa3:	5b                   	pop    ebx
c0011fa4:	5e                   	pop    esi
c0011fa5:	5f                   	pop    edi
c0011fa6:	5d                   	pop    ebp
c0011fa7:	c3                   	ret    
c0011fa8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011fac:	83 ec 0c             	sub    esp,0xc
c0011faf:	68 7c 95 03 c0       	push   0xc003957c
c0011fb4:	e8 4f af ff ff       	call   c000cf08 <panic(char const*)>
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fc0:	eb 9c                	jmp    c0011f5e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011fc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fc6:	e8 c4 b9 ff ff       	call   c000d98f <Phys::allocatePage()>
c0011fcb:	89 c5                	mov    ebp,eax
c0011fcd:	e8 c7 f3 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0011fd2:	83 ec 0c             	sub    esp,0xc
c0011fd5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fd9:	6a 01                	push   0x1
c0011fdb:	e8 29 f2 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0011fe0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011fe7:	6a 01                	push   0x1
c0011fe9:	50                   	push   eax
c0011fea:	55                   	push   ebp
c0011feb:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ff1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ff5:	51                   	push   ecx
c0011ff6:	e8 31 fb ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ffb:	83 c4 1c             	add    esp,0x1c
c0011ffe:	68 00 10 00 00       	push   0x1000
c0012003:	6a 00                	push   0x0
c0012005:	50                   	push   eax
c0012006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001200a:	e8 b1 e6 fe ff       	call   c00006c0 <memset>
c001200f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012013:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012016:	e8 24 f5 ff ff       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c001201b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012028:	e9 48 ff ff ff       	jmp    c0011f75 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001202d:	90                   	nop

c001202e <VAS::VAS(bool)>:
c001202e:	53                   	push   ebx
c001202f:	83 ec 28             	sub    esp,0x28
c0012032:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012036:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001203a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001203e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012049:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001204d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012050:	e8 3a b9 ff ff       	call   c000d98f <Phys::allocatePage()>
c0012055:	89 c2                	mov    edx,eax
c0012057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001205b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001205e:	e8 36 f3 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0012063:	89 c3                	mov    ebx,eax
c0012065:	83 ec 0c             	sub    esp,0xc
c0012068:	6a 01                	push   0x1
c001206a:	e8 9a f1 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c001206f:	83 c4 10             	add    esp,0x10
c0012072:	89 c2                	mov    edx,eax
c0012074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012078:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	6a 03                	push   0x3
c0012080:	6a 01                	push   0x1
c0012082:	52                   	push   edx
c0012083:	50                   	push   eax
c0012084:	53                   	push   ebx
c0012085:	e8 a2 fa ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001208a:	83 c4 20             	add    esp,0x20
c001208d:	89 c2                	mov    edx,eax
c001208f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012093:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012096:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001209e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00120a6:	7f 1c                	jg     c00120c4 <VAS::VAS(bool)+0x96>
c00120a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120b3:	c1 e2 02             	shl    edx,0x2
c00120b6:	01 d0                	add    eax,edx
c00120b8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00120be:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00120c2:	eb da                	jmp    c001209e <VAS::VAS(bool)+0x70>
c00120c4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00120cc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00120d4:	7f 71                	jg     c0012147 <VAS::VAS(bool)+0x119>
c00120d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120da:	2d 00 02 00 00       	sub    eax,0x200
c00120df:	c1 e0 0c             	shl    eax,0xc
c00120e2:	83 c8 03             	or     eax,0x3
c00120e5:	89 c3                	mov    ebx,eax
c00120e7:	e8 e4 4f 00 00       	call   c00170d0 <thisCPU()>
c00120ec:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120f2:	83 e0 10             	and    eax,0x10
c00120f5:	84 c0                	test   al,al
c00120f7:	74 07                	je     c0012100 <VAS::VAS(bool)+0xd2>
c00120f9:	b8 00 01 00 00       	mov    eax,0x100
c00120fe:	eb 05                	jmp    c0012105 <VAS::VAS(bool)+0xd7>
c0012100:	b8 00 00 00 00       	mov    eax,0x0
c0012105:	09 d8                	or     eax,ebx
c0012107:	89 c1                	mov    ecx,eax
c0012109:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001210d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012110:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012114:	c1 e2 02             	shl    edx,0x2
c0012117:	01 d0                	add    eax,edx
c0012119:	89 ca                	mov    edx,ecx
c001211b:	89 10                	mov    DWORD PTR [eax],edx
c001211d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012121:	2d 40 03 00 00       	sub    eax,0x340
c0012126:	83 f8 7f             	cmp    eax,0x7f
c0012129:	77 16                	ja     c0012141 <VAS::VAS(bool)+0x113>
c001212b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001212f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012132:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012136:	c1 e2 02             	shl    edx,0x2
c0012139:	01 d0                	add    eax,edx
c001213b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012141:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012145:	eb 85                	jmp    c00120cc <VAS::VAS(bool)+0x9e>
c0012147:	e8 84 4f 00 00       	call   c00170d0 <thisCPU()>
c001214c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012152:	83 e0 10             	and    eax,0x10
c0012155:	84 c0                	test   al,al
c0012157:	74 07                	je     c0012160 <VAS::VAS(bool)+0x132>
c0012159:	b8 03 41 00 00       	mov    eax,0x4103
c001215e:	eb 05                	jmp    c0012165 <VAS::VAS(bool)+0x137>
c0012160:	b8 03 40 00 00       	mov    eax,0x4003
c0012165:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012169:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001216c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012172:	89 02                	mov    DWORD PTR [edx],eax
c0012174:	e8 57 4f 00 00       	call   c00170d0 <thisCPU()>
c0012179:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001217f:	83 ec 08             	sub    esp,0x8
c0012182:	50                   	push   eax
c0012183:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012187:	e8 84 f9 ff ff       	call   c0011b10 <VAS::setCPUSpecific(unsigned long)>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012193:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0012196:	e8 35 4f 00 00       	call   c00170d0 <thisCPU()>
c001219b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121a1:	83 e0 10             	and    eax,0x10
c00121a4:	84 c0                	test   al,al
c00121a6:	74 07                	je     c00121af <VAS::VAS(bool)+0x181>
c00121a8:	b8 00 01 00 00       	mov    eax,0x100
c00121ad:	eb 05                	jmp    c00121b4 <VAS::VAS(bool)+0x186>
c00121af:	b8 00 00 00 00       	mov    eax,0x0
c00121b4:	09 d8                	or     eax,ebx
c00121b6:	89 c2                	mov    edx,eax
c00121b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121bf:	05 fc 0f 00 00       	add    eax,0xffc
c00121c4:	83 ca 03             	or     edx,0x3
c00121c7:	89 10                	mov    DWORD PTR [eax],edx
c00121c9:	e8 02 4f 00 00       	call   c00170d0 <thisCPU()>
c00121ce:	83 ec 0c             	sub    esp,0xc
c00121d1:	50                   	push   eax
c00121d2:	e8 af 17 00 00       	call   c0013986 <Device::getName()>
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	83 ec 08             	sub    esp,0x8
c00121dd:	68 fc 96 03 c0       	push   0xc00396fc
c00121e2:	50                   	push   eax
c00121e3:	e8 20 e6 fe ff       	call   c0000808 <strcmp>
c00121e8:	83 c4 10             	add    esp,0x10
c00121eb:	85 c0                	test   eax,eax
c00121ed:	0f 94 c0             	sete   al
c00121f0:	84 c0                	test   al,al
c00121f2:	74 64                	je     c0012258 <VAS::VAS(bool)+0x22a>
c00121f4:	e8 76 c0 ff ff       	call   c000e26f <disableIRQs()>
c00121f9:	e8 d2 4e 00 00       	call   c00170d0 <thisCPU()>
c00121fe:	05 7c 09 00 00       	add    eax,0x97c
c0012203:	83 ec 0c             	sub    esp,0xc
c0012206:	50                   	push   eax
c0012207:	e8 32 a7 ff ff       	call   c000c93e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012214:	89 c3                	mov    ebx,eax
c0012216:	e8 b5 4e 00 00       	call   c00170d0 <thisCPU()>
c001221b:	05 7c 09 00 00       	add    eax,0x97c
c0012220:	83 ec 0c             	sub    esp,0xc
c0012223:	50                   	push   eax
c0012224:	e8 15 a7 ff ff       	call   c000c93e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012229:	83 c4 10             	add    esp,0x10
c001222c:	83 ec 08             	sub    esp,0x8
c001222f:	50                   	push   eax
c0012230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012234:	e8 e7 f2 ff ff       	call   c0011520 <VAS::getPageTableEntry(unsigned long)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	8b 00                	mov    eax,DWORD PTR [eax]
c001223e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012243:	6a 11                	push   0x11
c0012245:	53                   	push   ebx
c0012246:	50                   	push   eax
c0012247:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001224b:	e8 f0 f5 ff ff       	call   c0011840 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	e8 25 c0 ff ff       	call   c000e27d <enableIRQs()>
c0012258:	90                   	nop
c0012259:	83 c4 28             	add    esp,0x28
c001225c:	5b                   	pop    ebx
c001225d:	c3                   	ret    

c001225e <mapVASFirstTime>:
c001225e:	55                   	push   ebp
c001225f:	57                   	push   edi
c0012260:	56                   	push   esi
c0012261:	53                   	push   ebx
c0012262:	83 ec 0c             	sub    esp,0xc
c0012265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001226a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001226d:	4a                   	dec    edx
c001226e:	0f 84 99 00 00 00    	je     c001230d <mapVASFirstTime+0xaf>
c0012274:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012277:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001227a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001227f:	c1 e5 15             	shl    ebp,0x15
c0012282:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012287:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001228d:	29 eb                	sub    ebx,ebp
c001228f:	29 ee                	sub    esi,ebp
c0012291:	e8 f9 b6 ff ff       	call   c000d98f <Phys::allocatePage()>
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	68 03 04 00 00       	push   0x403
c001229e:	6a 01                	push   0x1
c00122a0:	53                   	push   ebx
c00122a1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00122a7:	50                   	push   eax
c00122a8:	57                   	push   edi
c00122a9:	e8 7e f8 ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ae:	83 c4 20             	add    esp,0x20
c00122b1:	39 f3                	cmp    ebx,esi
c00122b3:	75 dc                	jne    c0012291 <mapVASFirstTime+0x33>
c00122b5:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00122ba:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00122bf:	29 ee                	sub    esi,ebp
c00122c1:	29 e8                	sub    eax,ebp
c00122c3:	89 c5                	mov    ebp,eax
c00122c5:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00122c9:	19 db                	sbb    ebx,ebx
c00122cb:	e8 bf b6 ff ff       	call   c000d98f <Phys::allocatePage()>
c00122d0:	83 e3 04             	and    ebx,0x4
c00122d3:	83 ec 0c             	sub    esp,0xc
c00122d6:	81 c3 03 04 00 00    	add    ebx,0x403
c00122dc:	53                   	push   ebx
c00122dd:	6a 01                	push   0x1
c00122df:	56                   	push   esi
c00122e0:	81 ee 00 10 00 00    	sub    esi,0x1000
c00122e6:	50                   	push   eax
c00122e7:	57                   	push   edi
c00122e8:	e8 3f f8 ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ed:	83 c4 20             	add    esp,0x20
c00122f0:	39 f5                	cmp    ebp,esi
c00122f2:	75 d1                	jne    c00122c5 <mapVASFirstTime+0x67>
c00122f4:	e8 40 c6 00 00       	call   c001e939 <CPU::readCR3()>
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	50                   	push   eax
c00122fd:	e8 5b c6 00 00       	call   c001e95d <CPU::writeCR3(unsigned long)>
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	83 c4 0c             	add    esp,0xc
c0012308:	5b                   	pop    ebx
c0012309:	5e                   	pop    esi
c001230a:	5f                   	pop    edi
c001230b:	5d                   	pop    ebp
c001230c:	c3                   	ret    
c001230d:	83 ec 0c             	sub    esp,0xc
c0012310:	68 0a 97 03 c0       	push   0xc003970a
c0012315:	e8 d0 aa ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001231a:	83 c4 10             	add    esp,0x10
c001231d:	83 c4 0c             	add    esp,0xc
c0012320:	5b                   	pop    ebx
c0012321:	5e                   	pop    esi
c0012322:	5f                   	pop    edi
c0012323:	5d                   	pop    ebp
c0012324:	c3                   	ret    

c0012325 <__cxa_atexit>:
c0012325:	31 c0                	xor    eax,eax
c0012327:	c3                   	ret    

c0012328 <__cxa_finalize>:
c0012328:	c3                   	ret    

c0012329 <__stack_chk_fail>:
c0012329:	55                   	push   ebp
c001232a:	89 e5                	mov    ebp,esp
c001232c:	83 ec 10             	sub    esp,0x10
c001232f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012332:	68 23 97 03 c0       	push   0xc0039723
c0012337:	e8 ae aa ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001233c:	58                   	pop    eax
c001233d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012340:	5a                   	pop    edx
c0012341:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012344:	68 23 97 03 c0       	push   0xc0039723
c0012349:	e8 9c aa ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001234e:	59                   	pop    ecx
c001234f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012352:	5a                   	pop    edx
c0012353:	8b 00                	mov    eax,DWORD PTR [eax]
c0012355:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012358:	68 23 97 03 c0       	push   0xc0039723
c001235d:	e8 88 aa ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0012362:	59                   	pop    ecx
c0012363:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012366:	5a                   	pop    edx
c0012367:	8b 00                	mov    eax,DWORD PTR [eax]
c0012369:	8b 00                	mov    eax,DWORD PTR [eax]
c001236b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001236e:	68 23 97 03 c0       	push   0xc0039723
c0012373:	e8 72 aa ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0012378:	c7 04 24 2b 97 03 c0 	mov    DWORD PTR [esp],0xc003972b
c001237f:	e8 84 ab ff ff       	call   c000cf08 <panic(char const*)>
c0012384:	83 c4 10             	add    esp,0x10
c0012387:	c9                   	leave  
c0012388:	c3                   	ret    

c0012389 <__cxa_pure_virtual>:
c0012389:	83 ec 18             	sub    esp,0x18
c001238c:	68 43 97 03 c0       	push   0xc0039743
c0012391:	e8 72 ab ff ff       	call   c000cf08 <panic(char const*)>
c0012396:	83 c4 1c             	add    esp,0x1c
c0012399:	c3                   	ret    

c001239a <operator new(unsigned long)>:
c001239a:	e9 46 b0 ff ff       	jmp    c000d3e5 <malloc>

c001239f <operator new[](unsigned long)>:
c001239f:	e9 41 b0 ff ff       	jmp    c000d3e5 <malloc>

c00123a4 <operator delete(void*)>:
c00123a4:	e9 5c b0 ff ff       	jmp    c000d405 <rfree>

c00123a9 <operator delete(void*, unsigned long)>:
c00123a9:	e9 57 b0 ff ff       	jmp    c000d405 <rfree>

c00123ae <operator delete[](void*)>:
c00123ae:	e9 52 b0 ff ff       	jmp    c000d405 <rfree>

c00123b3 <operator delete[](void*, unsigned long)>:
c00123b3:	e9 4d b0 ff ff       	jmp    c000d405 <rfree>

c00123b8 <File::read(unsigned long long, void*, int*)>:
c00123b8:	53                   	push   ebx
c00123b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123c8:	3c 19                	cmp    al,0x19
c00123ca:	77 35                	ja     c0012401 <File::read(unsigned long long, void*, int*)+0x49>
c00123cc:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c00123d3:	85 c0                	test   eax,eax
c00123d5:	74 2a                	je     c0012401 <File::read(unsigned long long, void*, int*)+0x49>
c00123d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123dd:	85 c0                	test   eax,eax
c00123df:	74 20                	je     c0012401 <File::read(unsigned long long, void*, int*)+0x49>
c00123e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123e5:	74 21                	je     c0012408 <File::read(unsigned long long, void*, int*)+0x50>
c00123e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123ed:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	5b                   	pop    ebx
c00123fc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123ff:	ff e0                	jmp    eax
c0012401:	b8 0b 00 00 00       	mov    eax,0xb
c0012406:	eb 05                	jmp    c001240d <File::read(unsigned long long, void*, int*)+0x55>
c0012408:	b8 05 00 00 00       	mov    eax,0x5
c001240d:	5b                   	pop    ebx
c001240e:	c3                   	ret    
c001240f:	90                   	nop

c0012410 <File::write(unsigned long long, void*, int*)>:
c0012410:	53                   	push   ebx
c0012411:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012415:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012419:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012420:	3c 19                	cmp    al,0x19
c0012422:	77 35                	ja     c0012459 <File::write(unsigned long long, void*, int*)+0x49>
c0012424:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c001242b:	85 c0                	test   eax,eax
c001242d:	74 2a                	je     c0012459 <File::write(unsigned long long, void*, int*)+0x49>
c001242f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012435:	85 c0                	test   eax,eax
c0012437:	74 20                	je     c0012459 <File::write(unsigned long long, void*, int*)+0x49>
c0012439:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001243d:	74 21                	je     c0012460 <File::write(unsigned long long, void*, int*)+0x50>
c001243f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012441:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012445:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001244b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001244f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012453:	5b                   	pop    ebx
c0012454:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012457:	ff e0                	jmp    eax
c0012459:	b8 0b 00 00 00       	mov    eax,0xb
c001245e:	eb 05                	jmp    c0012465 <File::write(unsigned long long, void*, int*)+0x55>
c0012460:	b8 05 00 00 00       	mov    eax,0x5
c0012465:	5b                   	pop    ebx
c0012466:	c3                   	ret    
c0012467:	90                   	nop

c0012468 <Directory::read(unsigned long long, void*, int*)>:
c0012468:	53                   	push   ebx
c0012469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001246d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012471:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012478:	3c 19                	cmp    al,0x19
c001247a:	77 35                	ja     c00124b1 <Directory::read(unsigned long long, void*, int*)+0x49>
c001247c:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c0012483:	85 c0                	test   eax,eax
c0012485:	74 2a                	je     c00124b1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012487:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001248d:	85 c0                	test   eax,eax
c001248f:	74 20                	je     c00124b1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012491:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012495:	74 21                	je     c00124b8 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012497:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012499:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001249d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124ab:	5b                   	pop    ebx
c00124ac:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00124af:	ff e0                	jmp    eax
c00124b1:	b8 0b 00 00 00       	mov    eax,0xb
c00124b6:	eb 05                	jmp    c00124bd <Directory::read(unsigned long long, void*, int*)+0x55>
c00124b8:	b8 05 00 00 00       	mov    eax,0x5
c00124bd:	5b                   	pop    ebx
c00124be:	c3                   	ret    
c00124bf:	90                   	nop

c00124c0 <Directory::write(unsigned long long, void*, int*)>:
c00124c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124c4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00124cb:	b8 0b 00 00 00       	mov    eax,0xb
c00124d0:	80 fa 19             	cmp    dl,0x19
c00124d3:	77 18                	ja     c00124ed <Directory::write(unsigned long long, void*, int*)+0x2d>
c00124d5:	8b 14 95 80 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d80]
c00124dc:	85 d2                	test   edx,edx
c00124de:	74 0d                	je     c00124ed <Directory::write(unsigned long long, void*, int*)+0x2d>
c00124e0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00124e7:	19 c0                	sbb    eax,eax
c00124e9:	83 e0 0a             	and    eax,0xa
c00124ec:	40                   	inc    eax
c00124ed:	c3                   	ret    

c00124ee <File::isAtty()>:
c00124ee:	31 c0                	xor    eax,eax
c00124f0:	c3                   	ret    
c00124f1:	90                   	nop

c00124f2 <Directory::isAtty()>:
c00124f2:	31 c0                	xor    eax,eax
c00124f4:	c3                   	ret    
c00124f5:	90                   	nop

c00124f6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124f6:	b8 0a 00 00 00       	mov    eax,0xa
c00124fb:	c3                   	ret    

c00124fc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124fc:	b8 0a 00 00 00       	mov    eax,0xa
c0012501:	c3                   	ret    

c0012502 <File::~File()>:
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	ba c4 97 03 c0       	mov    edx,0xc00397c4
c001250a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250e:	89 10                	mov    DWORD PTR [eax],edx
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	50                   	push   eax
c0012518:	e8 0d eb ff ff       	call   c001102a <UnixFile::~UnixFile()>
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	90                   	nop
c0012521:	83 c4 0c             	add    esp,0xc
c0012524:	c3                   	ret    
c0012525:	90                   	nop

c0012526 <File::~File()>:
c0012526:	83 ec 0c             	sub    esp,0xc
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012530:	e8 cd ff ff ff       	call   c0012502 <File::~File()>
c0012535:	83 c4 10             	add    esp,0x10
c0012538:	83 ec 08             	sub    esp,0x8
c001253b:	68 14 01 00 00       	push   0x114
c0012540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012544:	e8 60 fe ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	83 c4 0c             	add    esp,0xc
c001254f:	c3                   	ret    

c0012550 <Directory::~Directory()>:
c0012550:	83 ec 0c             	sub    esp,0xc
c0012553:	ba e0 97 03 c0       	mov    edx,0xc00397e0
c0012558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255c:	89 10                	mov    DWORD PTR [eax],edx
c001255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012562:	83 ec 0c             	sub    esp,0xc
c0012565:	50                   	push   eax
c0012566:	e8 bf ea ff ff       	call   c001102a <UnixFile::~UnixFile()>
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	90                   	nop
c001256f:	83 c4 0c             	add    esp,0xc
c0012572:	c3                   	ret    
c0012573:	90                   	nop

c0012574 <Directory::~Directory()>:
c0012574:	83 ec 0c             	sub    esp,0xc
c0012577:	83 ec 0c             	sub    esp,0xc
c001257a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001257e:	e8 cd ff ff ff       	call   c0012550 <Directory::~Directory()>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	83 ec 08             	sub    esp,0x8
c0012589:	68 14 01 00 00       	push   0x114
c001258e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012592:	e8 12 fe ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0012597:	83 c4 10             	add    esp,0x10
c001259a:	83 c4 0c             	add    esp,0xc
c001259d:	c3                   	ret    

c001259e <Filesystem::Filesystem()>:
c001259e:	ba 60 97 03 c0       	mov    edx,0xc0039760
c00125a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a7:	89 10                	mov    DWORD PTR [eax],edx
c00125a9:	8b 15 e0 bd 03 c0    	mov    edx,DWORD PTR ds:0xc003bde0
c00125af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00125b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125ba:	a3 e0 bd 03 c0       	mov    ds:0xc003bde0,eax
c00125bf:	90                   	nop
c00125c0:	c3                   	ret    
c00125c1:	90                   	nop

c00125c2 <Filesystem::~Filesystem()>:
c00125c2:	ba 60 97 03 c0       	mov    edx,0xc0039760
c00125c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125cb:	89 10                	mov    DWORD PTR [eax],edx
c00125cd:	90                   	nop
c00125ce:	c3                   	ret    
c00125cf:	90                   	nop

c00125d0 <Filesystem::~Filesystem()>:
c00125d0:	83 ec 0c             	sub    esp,0xc
c00125d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125d7:	e8 e6 ff ff ff       	call   c00125c2 <Filesystem::~Filesystem()>
c00125dc:	83 c4 04             	add    esp,0x4
c00125df:	83 ec 08             	sub    esp,0x8
c00125e2:	6a 08                	push   0x8
c00125e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e8:	e8 bc fd ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c00125ed:	83 c4 10             	add    esp,0x10
c00125f0:	83 c4 0c             	add    esp,0xc
c00125f3:	c3                   	ret    

c00125f4 <initVFS()>:
c00125f4:	83 ec 18             	sub    esp,0x18
c00125f7:	6a 08                	push   0x8
c00125f9:	e8 9c fd ff ff       	call   c001239a <operator new(unsigned long)>
c00125fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012601:	e8 24 71 00 00       	call   c001972a <FAT::FAT()>
c0012606:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001260d:	e8 88 fd ff ff       	call   c001239a <operator new(unsigned long)>
c0012612:	89 04 24             	mov    DWORD PTR [esp],eax
c0012615:	e8 1a 83 00 00       	call   c001a934 <ISO9660::ISO9660()>
c001261a:	83 c4 1c             	add    esp,0x1c
c001261d:	c3                   	ret    

c001261e <standardiseFiles(char*, char const*, char const*)>:
c001261e:	55                   	push   ebp
c001261f:	57                   	push   edi
c0012620:	56                   	push   esi
c0012621:	53                   	push   ebx
c0012622:	81 ec 10 04 00 00    	sub    esp,0x410
c0012628:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001262f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012636:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001263d:	68 00 04 00 00       	push   0x400
c0012642:	6a 00                	push   0x0
c0012644:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012648:	56                   	push   esi
c0012649:	e8 72 e0 fe ff       	call   c00006c0 <memset>
c001264e:	83 c4 10             	add    esp,0x10
c0012651:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012655:	75 0b                	jne    c0012662 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012657:	50                   	push   eax
c0012658:	50                   	push   eax
c0012659:	57                   	push   edi
c001265a:	56                   	push   esi
c001265b:	e8 1c e1 fe ff       	call   c000077c <strcpy>
c0012660:	eb 41                	jmp    c00126a3 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012662:	8a 07                	mov    al,BYTE PTR [edi]
c0012664:	3c 5c                	cmp    al,0x5c
c0012666:	74 04                	je     c001266c <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012668:	3c 2f                	cmp    al,0x2f
c001266a:	75 18                	jne    c0012684 <standardiseFiles(char*, char const*, char const*)+0x66>
c001266c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001266f:	3c 60                	cmp    al,0x60
c0012671:	7e 03                	jle    c0012676 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012673:	83 e8 20             	sub    eax,0x20
c0012676:	88 04 24             	mov    BYTE PTR [esp],al
c0012679:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012680:	50                   	push   eax
c0012681:	50                   	push   eax
c0012682:	eb 18                	jmp    c001269c <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012684:	50                   	push   eax
c0012685:	50                   	push   eax
c0012686:	55                   	push   ebp
c0012687:	56                   	push   esi
c0012688:	e8 ef e0 fe ff       	call   c000077c <strcpy>
c001268d:	5a                   	pop    edx
c001268e:	59                   	pop    ecx
c001268f:	68 56 8e 03 c0       	push   0xc0038e56
c0012694:	56                   	push   esi
c0012695:	e8 22 e2 fe ff       	call   c00008bc <strcat>
c001269a:	5d                   	pop    ebp
c001269b:	58                   	pop    eax
c001269c:	57                   	push   edi
c001269d:	56                   	push   esi
c001269e:	e8 19 e2 fe ff       	call   c00008bc <strcat>
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00126a9:	3c 60                	cmp    al,0x60
c00126ab:	7e 03                	jle    c00126b0 <standardiseFiles(char*, char const*, char const*)+0x92>
c00126ad:	83 e8 20             	sub    eax,0x20
c00126b0:	88 04 24             	mov    BYTE PTR [esp],al
c00126b3:	88 03                	mov    BYTE PTR [ebx],al
c00126b5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00126bc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00126c2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00126c6:	bf 03 00 00 00       	mov    edi,0x3
c00126cb:	b8 03 00 00 00       	mov    eax,0x3
c00126d0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00126d3:	84 d2                	test   dl,dl
c00126d5:	0f 84 91 00 00 00    	je     c001276c <standardiseFiles(char*, char const*, char const*)+0x14e>
c00126db:	8d 4f 01             	lea    ecx,[edi+0x1]
c00126de:	80 fa 5c             	cmp    dl,0x5c
c00126e1:	74 05                	je     c00126e8 <standardiseFiles(char*, char const*, char const*)+0xca>
c00126e3:	80 fa 2f             	cmp    dl,0x2f
c00126e6:	75 12                	jne    c00126fa <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126e8:	89 c5                	mov    ebp,eax
c00126ea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126ef:	74 09                	je     c00126fa <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126f1:	40                   	inc    eax
c00126f2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126f6:	89 cf                	mov    edi,ecx
c00126f8:	eb d6                	jmp    c00126d0 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126fa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126ff:	75 5b                	jne    c001275c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012701:	80 fa 2e             	cmp    dl,0x2e
c0012704:	75 56                	jne    c001275c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012706:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001270a:	74 19                	je     c0012725 <standardiseFiles(char*, char const*, char const*)+0x107>
c001270c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012711:	74 53                	je     c0012766 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012713:	89 f9                	mov    ecx,edi
c0012715:	41                   	inc    ecx
c0012716:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012719:	80 fa 2f             	cmp    dl,0x2f
c001271c:	74 f7                	je     c0012715 <standardiseFiles(char*, char const*, char const*)+0xf7>
c001271e:	80 fa 5c             	cmp    dl,0x5c
c0012721:	74 f2                	je     c0012715 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012723:	eb d1                	jmp    c00126f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012725:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001272a:	74 3a                	je     c0012766 <standardiseFiles(char*, char const*, char const*)+0x148>
c001272c:	83 f8 03             	cmp    eax,0x3
c001272f:	74 c5                	je     c00126f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012731:	41                   	inc    ecx
c0012732:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012735:	80 fa 2f             	cmp    dl,0x2f
c0012738:	74 f7                	je     c0012731 <standardiseFiles(char*, char const*, char const*)+0x113>
c001273a:	80 fa 5c             	cmp    dl,0x5c
c001273d:	74 f2                	je     c0012731 <standardiseFiles(char*, char const*, char const*)+0x113>
c001273f:	48                   	dec    eax
c0012740:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012744:	75 06                	jne    c001274c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012746:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001274a:	eb f3                	jmp    c001273f <standardiseFiles(char*, char const*, char const*)+0x121>
c001274c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012750:	74 07                	je     c0012759 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012752:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012756:	48                   	dec    eax
c0012757:	eb f3                	jmp    c001274c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012759:	40                   	inc    eax
c001275a:	eb 9a                	jmp    c00126f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001275c:	80 fa 2f             	cmp    dl,0x2f
c001275f:	74 95                	je     c00126f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012761:	80 fa 5c             	cmp    dl,0x5c
c0012764:	74 90                	je     c00126f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012766:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012769:	40                   	inc    eax
c001276a:	eb 8a                	jmp    c00126f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001276c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012770:	83 ec 0c             	sub    esp,0xc
c0012773:	53                   	push   ebx
c0012774:	e8 63 df fe ff       	call   c00006dc <strlen>
c0012779:	83 c4 10             	add    esp,0x10
c001277c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012781:	75 26                	jne    c00127a9 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012783:	83 ec 0c             	sub    esp,0xc
c0012786:	53                   	push   ebx
c0012787:	e8 50 df fe ff       	call   c00006dc <strlen>
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012794:	74 26                	je     c00127bc <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012796:	83 ec 0c             	sub    esp,0xc
c0012799:	53                   	push   ebx
c001279a:	e8 3d df fe ff       	call   c00006dc <strlen>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00127a7:	eb c7                	jmp    c0012770 <standardiseFiles(char*, char const*, char const*)+0x152>
c00127a9:	83 ec 0c             	sub    esp,0xc
c00127ac:	53                   	push   ebx
c00127ad:	e8 2a df fe ff       	call   c00006dc <strlen>
c00127b2:	83 c4 10             	add    esp,0x10
c00127b5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00127ba:	74 c7                	je     c0012783 <standardiseFiles(char*, char const*, char const*)+0x165>
c00127bc:	81 c4 0c 04 00 00    	add    esp,0x40c
c00127c2:	5b                   	pop    ebx
c00127c3:	5e                   	pop    esi
c00127c4:	5f                   	pop    edi
c00127c5:	5d                   	pop    ebp
c00127c6:	c3                   	ret    
c00127c7:	90                   	nop

c00127c8 <File::File(char const*, Process*)>:
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127cf:	83 ec 08             	sub    esp,0x8
c00127d2:	6a 00                	push   0x0
c00127d4:	50                   	push   eax
c00127d5:	e8 ec e7 ff ff       	call   c0010fc6 <UnixFile::UnixFile(int)>
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	ba c4 97 03 c0       	mov    edx,0xc00397c4
c00127e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e6:	89 10                	mov    DWORD PTR [eax],edx
c00127e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f6:	83 c0 0d             	add    eax,0xd
c00127f9:	83 ec 04             	sub    esp,0x4
c00127fc:	52                   	push   edx
c00127fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012801:	50                   	push   eax
c0012802:	e8 17 fe ff ff       	call   c001261e <standardiseFiles(char*, char const*, char const*)>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001280e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012811:	8d 50 bf             	lea    edx,[eax-0x41]
c0012814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012818:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001281e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012822:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012826:	90                   	nop
c0012827:	83 c4 0c             	add    esp,0xc
c001282a:	c3                   	ret    
c001282b:	90                   	nop

c001282c <File::open(FileOpenMode)>:
c001282c:	53                   	push   ebx
c001282d:	b8 0b 00 00 00       	mov    eax,0xb
c0012832:	83 ec 08             	sub    esp,0x8
c0012835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012839:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012840:	80 fa 19             	cmp    dl,0x19
c0012843:	77 40                	ja     c0012885 <File::open(FileOpenMode)+0x59>
c0012845:	8b 14 95 80 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d80]
c001284c:	85 d2                	test   edx,edx
c001284e:	74 35                	je     c0012885 <File::open(FileOpenMode)+0x59>
c0012850:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012856:	85 d2                	test   edx,edx
c0012858:	74 2b                	je     c0012885 <File::open(FileOpenMode)+0x59>
c001285a:	b8 06 00 00 00       	mov    eax,0x6
c001285f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012863:	75 20                	jne    c0012885 <File::open(FileOpenMode)+0x59>
c0012865:	8b 02                	mov    eax,DWORD PTR [edx]
c0012867:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001286d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012871:	51                   	push   ecx
c0012872:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012875:	51                   	push   ecx
c0012876:	52                   	push   edx
c0012877:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001287a:	83 c4 10             	add    esp,0x10
c001287d:	85 c0                	test   eax,eax
c001287f:	75 04                	jne    c0012885 <File::open(FileOpenMode)+0x59>
c0012881:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012885:	83 c4 08             	add    esp,0x8
c0012888:	5b                   	pop    ebx
c0012889:	c3                   	ret    

c001288a <File::close()>:
c001288a:	53                   	push   ebx
c001288b:	b8 0b 00 00 00       	mov    eax,0xb
c0012890:	83 ec 08             	sub    esp,0x8
c0012893:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012897:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001289e:	80 fa 19             	cmp    dl,0x19
c00128a1:	77 41                	ja     c00128e4 <File::close()+0x5a>
c00128a3:	8b 1c 95 80 c2 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3d80]
c00128aa:	85 db                	test   ebx,ebx
c00128ac:	74 36                	je     c00128e4 <File::close()+0x5a>
c00128ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00128b5:	74 2d                	je     c00128e4 <File::close()+0x5a>
c00128b7:	b8 05 00 00 00       	mov    eax,0x5
c00128bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00128c0:	74 22                	je     c00128e4 <File::close()+0x5a>
c00128c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00128c6:	8b 04 95 80 c2 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3d80]
c00128cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128d3:	53                   	push   ebx
c00128d4:	53                   	push   ebx
c00128d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00128dd:	50                   	push   eax
c00128de:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	83 c4 08             	add    esp,0x8
c00128e7:	5b                   	pop    ebx
c00128e8:	c3                   	ret    
c00128e9:	90                   	nop

c00128ea <File::seek(unsigned long long)>:
c00128ea:	56                   	push   esi
c00128eb:	53                   	push   ebx
c00128ec:	b8 0b 00 00 00       	mov    eax,0xb
c00128f1:	51                   	push   ecx
c00128f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128fa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012901:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012905:	80 fa 19             	cmp    dl,0x19
c0012908:	77 31                	ja     c001293b <File::seek(unsigned long long)+0x51>
c001290a:	8b 14 95 80 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d80]
c0012911:	85 d2                	test   edx,edx
c0012913:	74 26                	je     c001293b <File::seek(unsigned long long)+0x51>
c0012915:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001291b:	85 d2                	test   edx,edx
c001291d:	74 1c                	je     c001293b <File::seek(unsigned long long)+0x51>
c001291f:	b8 05 00 00 00       	mov    eax,0x5
c0012924:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012928:	74 11                	je     c001293b <File::seek(unsigned long long)+0x51>
c001292a:	8b 02                	mov    eax,DWORD PTR [edx]
c001292c:	53                   	push   ebx
c001292d:	51                   	push   ecx
c001292e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012934:	52                   	push   edx
c0012935:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012938:	83 c4 10             	add    esp,0x10
c001293b:	5a                   	pop    edx
c001293c:	5b                   	pop    ebx
c001293d:	5e                   	pop    esi
c001293e:	c3                   	ret    
c001293f:	90                   	nop

c0012940 <File::tell(unsigned long long*)>:
c0012940:	83 ec 0c             	sub    esp,0xc
c0012943:	b8 0b 00 00 00       	mov    eax,0xb
c0012948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001294c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012953:	80 fa 19             	cmp    dl,0x19
c0012956:	77 34                	ja     c001298c <File::tell(unsigned long long*)+0x4c>
c0012958:	8b 14 95 80 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d80]
c001295f:	85 d2                	test   edx,edx
c0012961:	74 29                	je     c001298c <File::tell(unsigned long long*)+0x4c>
c0012963:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012969:	85 d2                	test   edx,edx
c001296b:	74 1f                	je     c001298c <File::tell(unsigned long long*)+0x4c>
c001296d:	b8 05 00 00 00       	mov    eax,0x5
c0012972:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012976:	74 14                	je     c001298c <File::tell(unsigned long long*)+0x4c>
c0012978:	50                   	push   eax
c0012979:	8b 02                	mov    eax,DWORD PTR [edx]
c001297b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001297f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012985:	52                   	push   edx
c0012986:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	83 c4 0c             	add    esp,0xc
c001298f:	c3                   	ret    

c0012990 <File::rewind()>:
c0012990:	83 ec 10             	sub    esp,0x10
c0012993:	6a 00                	push   0x0
c0012995:	6a 00                	push   0x0
c0012997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001299b:	e8 4a ff ff ff       	call   c00128ea <File::seek(unsigned long long)>
c00129a0:	83 c4 1c             	add    esp,0x1c
c00129a3:	c3                   	ret    

c00129a4 <File::unlink()>:
c00129a4:	83 ec 0c             	sub    esp,0xc
c00129a7:	b8 0b 00 00 00       	mov    eax,0xb
c00129ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129b7:	80 f9 19             	cmp    cl,0x19
c00129ba:	77 2f                	ja     c00129eb <File::unlink()+0x47>
c00129bc:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c00129c3:	85 c9                	test   ecx,ecx
c00129c5:	74 24                	je     c00129eb <File::unlink()+0x47>
c00129c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129cd:	85 c9                	test   ecx,ecx
c00129cf:	74 1a                	je     c00129eb <File::unlink()+0x47>
c00129d1:	b8 06 00 00 00       	mov    eax,0x6
c00129d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129da:	75 0f                	jne    c00129eb <File::unlink()+0x47>
c00129dc:	83 c2 0d             	add    edx,0xd
c00129df:	50                   	push   eax
c00129e0:	50                   	push   eax
c00129e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e3:	52                   	push   edx
c00129e4:	51                   	push   ecx
c00129e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	83 c4 0c             	add    esp,0xc
c00129ee:	c3                   	ret    
c00129ef:	90                   	nop

c00129f0 <File::rename(char const*)>:
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	b8 0b 00 00 00       	mov    eax,0xb
c00129f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a03:	80 f9 19             	cmp    cl,0x19
c0012a06:	77 32                	ja     c0012a3a <File::rename(char const*)+0x4a>
c0012a08:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012a0f:	85 c9                	test   ecx,ecx
c0012a11:	74 27                	je     c0012a3a <File::rename(char const*)+0x4a>
c0012a13:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a19:	85 c9                	test   ecx,ecx
c0012a1b:	74 1d                	je     c0012a3a <File::rename(char const*)+0x4a>
c0012a1d:	b8 06 00 00 00       	mov    eax,0x6
c0012a22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a26:	75 12                	jne    c0012a3a <File::rename(char const*)+0x4a>
c0012a28:	83 c2 0d             	add    edx,0xd
c0012a2b:	50                   	push   eax
c0012a2c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a32:	52                   	push   edx
c0012a33:	51                   	push   ecx
c0012a34:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	83 c4 0c             	add    esp,0xc
c0012a3d:	c3                   	ret    

c0012a3e <File::chfatattr(unsigned char, unsigned char)>:
c0012a3e:	57                   	push   edi
c0012a3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a44:	56                   	push   esi
c0012a45:	53                   	push   ebx
c0012a46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a55:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a59:	80 f9 19             	cmp    cl,0x19
c0012a5c:	77 37                	ja     c0012a95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a5e:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012a65:	85 c9                	test   ecx,ecx
c0012a67:	74 2c                	je     c0012a95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a69:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a6f:	85 c9                	test   ecx,ecx
c0012a71:	74 22                	je     c0012a95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a73:	b8 06 00 00 00       	mov    eax,0x6
c0012a78:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a7c:	75 17                	jne    c0012a95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a7e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a80:	89 f0                	mov    eax,esi
c0012a82:	83 c2 0d             	add    edx,0xd
c0012a85:	0f b6 f0             	movzx  esi,al
c0012a88:	0f b6 db             	movzx  ebx,bl
c0012a8b:	56                   	push   esi
c0012a8c:	53                   	push   ebx
c0012a8d:	52                   	push   edx
c0012a8e:	51                   	push   ecx
c0012a8f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	5b                   	pop    ebx
c0012a96:	5e                   	pop    esi
c0012a97:	5f                   	pop    edi
c0012a98:	c3                   	ret    
c0012a99:	90                   	nop

c0012a9a <File::exists()>:
c0012a9a:	83 ec 0c             	sub    esp,0xc
c0012a9d:	31 c0                	xor    eax,eax
c0012a9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012aa3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aaa:	80 f9 19             	cmp    cl,0x19
c0012aad:	77 24                	ja     c0012ad3 <File::exists()+0x39>
c0012aaf:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012ab6:	85 c9                	test   ecx,ecx
c0012ab8:	74 19                	je     c0012ad3 <File::exists()+0x39>
c0012aba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac0:	85 c9                	test   ecx,ecx
c0012ac2:	74 0f                	je     c0012ad3 <File::exists()+0x39>
c0012ac4:	83 c2 0d             	add    edx,0xd
c0012ac7:	50                   	push   eax
c0012ac8:	50                   	push   eax
c0012ac9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012acb:	52                   	push   edx
c0012acc:	51                   	push   ecx
c0012acd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	83 c4 0c             	add    esp,0xc
c0012ad6:	c3                   	ret    
c0012ad7:	90                   	nop

c0012ad8 <File::stat(unsigned long long*, bool*)>:
c0012ad8:	56                   	push   esi
c0012ad9:	53                   	push   ebx
c0012ada:	50                   	push   eax
c0012adb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ae0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ae4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ae8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012af3:	80 f9 19             	cmp    cl,0x19
c0012af6:	77 3d                	ja     c0012b35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012af8:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012aff:	85 c9                	test   ecx,ecx
c0012b01:	74 32                	je     c0012b35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012b03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b09:	85 c9                	test   ecx,ecx
c0012b0b:	74 28                	je     c0012b35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012b0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b0f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b13:	74 13                	je     c0012b28 <File::stat(unsigned long long*, bool*)+0x50>
c0012b15:	83 ec 04             	sub    esp,0x4
c0012b18:	56                   	push   esi
c0012b19:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012b1f:	51                   	push   ecx
c0012b20:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012b23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b26:	eb 0a                	jmp    c0012b32 <File::stat(unsigned long long*, bool*)+0x5a>
c0012b28:	53                   	push   ebx
c0012b29:	83 c2 0d             	add    edx,0xd
c0012b2c:	56                   	push   esi
c0012b2d:	52                   	push   edx
c0012b2e:	51                   	push   ecx
c0012b2f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012b32:	83 c4 10             	add    esp,0x10
c0012b35:	5a                   	pop    edx
c0012b36:	5b                   	pop    ebx
c0012b37:	5e                   	pop    esi
c0012b38:	c3                   	ret    

c0012b39 <getcwd(Process*, char*, int)>:
c0012b39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b3d:	31 c0                	xor    eax,eax
c0012b3f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b42:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b46:	7d 15                	jge    c0012b5d <getcwd(Process*, char*, int)+0x24>
c0012b48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b4c:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b53:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b56:	84 c9                	test   cl,cl
c0012b58:	74 06                	je     c0012b60 <getcwd(Process*, char*, int)+0x27>
c0012b5a:	40                   	inc    eax
c0012b5b:	eb e2                	jmp    c0012b3f <getcwd(Process*, char*, int)+0x6>
c0012b5d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b60:	31 c0                	xor    eax,eax
c0012b62:	c3                   	ret    

c0012b63 <setcwd(Process*, char*)>:
c0012b63:	55                   	push   ebp
c0012b64:	57                   	push   edi
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b6d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b74:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b7a:	57                   	push   edi
c0012b7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b82:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b86:	56                   	push   esi
c0012b87:	e8 92 fa ff ff       	call   c001261e <standardiseFiles(char*, char const*, char const*)>
c0012b8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b8f:	e8 48 db fe ff       	call   c00006dc <strlen>
c0012b94:	83 c4 10             	add    esp,0x10
c0012b97:	83 f8 02             	cmp    eax,0x2
c0012b9a:	77 17                	ja     c0012bb3 <setcwd(Process*, char*)+0x50>
c0012b9c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ba1:	83 e8 41             	sub    eax,0x41
c0012ba4:	83 f8 19             	cmp    eax,0x19
c0012ba7:	76 24                	jbe    c0012bcd <setcwd(Process*, char*)+0x6a>
c0012ba9:	b8 03 00 00 00       	mov    eax,0x3
c0012bae:	e9 cb 00 00 00       	jmp    c0012c7e <setcwd(Process*, char*)+0x11b>
c0012bb3:	83 ec 0c             	sub    esp,0xc
c0012bb6:	56                   	push   esi
c0012bb7:	e8 20 db fe ff       	call   c00006dc <strlen>
c0012bbc:	83 c4 10             	add    esp,0x10
c0012bbf:	83 f8 03             	cmp    eax,0x3
c0012bc2:	75 33                	jne    c0012bf7 <setcwd(Process*, char*)+0x94>
c0012bc4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012bc9:	75 2c                	jne    c0012bf7 <setcwd(Process*, char*)+0x94>
c0012bcb:	eb cf                	jmp    c0012b9c <setcwd(Process*, char*)+0x39>
c0012bcd:	8b 14 85 80 c2 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3d80]
c0012bd4:	b8 05 00 00 00       	mov    eax,0x5
c0012bd9:	85 d2                	test   edx,edx
c0012bdb:	0f 84 9d 00 00 00    	je     c0012c7e <setcwd(Process*, char*)+0x11b>
c0012be1:	b8 06 00 00 00       	mov    eax,0x6
c0012be6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012bed:	0f 84 8b 00 00 00    	je     c0012c7e <setcwd(Process*, char*)+0x11b>
c0012bf3:	51                   	push   ecx
c0012bf4:	51                   	push   ecx
c0012bf5:	eb 7b                	jmp    c0012c72 <setcwd(Process*, char*)+0x10f>
c0012bf7:	83 ec 0c             	sub    esp,0xc
c0012bfa:	68 14 01 00 00       	push   0x114
c0012bff:	e8 96 f7 ff ff       	call   c001239a <operator new(unsigned long)>
c0012c04:	83 c4 0c             	add    esp,0xc
c0012c07:	89 c3                	mov    ebx,eax
c0012c09:	55                   	push   ebp
c0012c0a:	56                   	push   esi
c0012c0b:	50                   	push   eax
c0012c0c:	e8 b7 fb ff ff       	call   c00127c8 <File::File(char const*, Process*)>
c0012c11:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012c16:	83 c4 0c             	add    esp,0xc
c0012c19:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012c1d:	50                   	push   eax
c0012c1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c22:	50                   	push   eax
c0012c23:	53                   	push   ebx
c0012c24:	e8 af fe ff ff       	call   c0012ad8 <File::stat(unsigned long long*, bool*)>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c2e:	83 f8 02             	cmp    eax,0x2
c0012c31:	75 09                	jne    c0012c3c <setcwd(Process*, char*)+0xd9>
c0012c33:	83 ec 0c             	sub    esp,0xc
c0012c36:	53                   	push   ebx
c0012c37:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012c3a:	eb 0d                	jmp    c0012c49 <setcwd(Process*, char*)+0xe6>
c0012c3c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012c3f:	85 c0                	test   eax,eax
c0012c41:	74 10                	je     c0012c53 <setcwd(Process*, char*)+0xf0>
c0012c43:	83 ec 0c             	sub    esp,0xc
c0012c46:	53                   	push   ebx
c0012c47:	ff d2                	call   edx
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	b8 01 00 00 00       	mov    eax,0x1
c0012c51:	eb 2b                	jmp    c0012c7e <setcwd(Process*, char*)+0x11b>
c0012c53:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c58:	75 10                	jne    c0012c6a <setcwd(Process*, char*)+0x107>
c0012c5a:	83 ec 0c             	sub    esp,0xc
c0012c5d:	53                   	push   ebx
c0012c5e:	ff d2                	call   edx
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	b8 02 00 00 00       	mov    eax,0x2
c0012c68:	eb 14                	jmp    c0012c7e <setcwd(Process*, char*)+0x11b>
c0012c6a:	83 ec 0c             	sub    esp,0xc
c0012c6d:	53                   	push   ebx
c0012c6e:	ff d2                	call   edx
c0012c70:	58                   	pop    eax
c0012c71:	5a                   	pop    edx
c0012c72:	56                   	push   esi
c0012c73:	57                   	push   edi
c0012c74:	e8 03 db fe ff       	call   c000077c <strcpy>
c0012c79:	83 c4 10             	add    esp,0x10
c0012c7c:	31 c0                	xor    eax,eax
c0012c7e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c84:	5b                   	pop    ebx
c0012c85:	5e                   	pop    esi
c0012c86:	5f                   	pop    edi
c0012c87:	5d                   	pop    ebp
c0012c88:	c3                   	ret    
c0012c89:	90                   	nop

c0012c8a <Directory::Directory(char const*, Process*)>:
c0012c8a:	83 ec 0c             	sub    esp,0xc
c0012c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c91:	83 ec 08             	sub    esp,0x8
c0012c94:	6a 00                	push   0x0
c0012c96:	50                   	push   eax
c0012c97:	e8 2a e3 ff ff       	call   c0010fc6 <UnixFile::UnixFile(int)>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	ba e0 97 03 c0       	mov    edx,0xc00397e0
c0012ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca8:	89 10                	mov    DWORD PTR [eax],edx
c0012caa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb8:	83 c0 0d             	add    eax,0xd
c0012cbb:	83 ec 04             	sub    esp,0x4
c0012cbe:	52                   	push   edx
c0012cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc3:	50                   	push   eax
c0012cc4:	e8 55 f9 ff ff       	call   c001261e <standardiseFiles(char*, char const*, char const*)>
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cd3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cda:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ce8:	90                   	nop
c0012ce9:	83 c4 0c             	add    esp,0xc
c0012cec:	c3                   	ret    
c0012ced:	90                   	nop

c0012cee <Directory::open()>:
c0012cee:	53                   	push   ebx
c0012cef:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf4:	83 ec 08             	sub    esp,0x8
c0012cf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cfb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d02:	80 fa 19             	cmp    dl,0x19
c0012d05:	77 3d                	ja     c0012d44 <Directory::open()+0x56>
c0012d07:	8b 14 95 80 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d80]
c0012d0e:	85 d2                	test   edx,edx
c0012d10:	74 32                	je     c0012d44 <Directory::open()+0x56>
c0012d12:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d18:	85 d2                	test   edx,edx
c0012d1a:	74 28                	je     c0012d44 <Directory::open()+0x56>
c0012d1c:	b8 06 00 00 00       	mov    eax,0x6
c0012d21:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d25:	75 1d                	jne    c0012d44 <Directory::open()+0x56>
c0012d27:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d2d:	50                   	push   eax
c0012d2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d30:	51                   	push   ecx
c0012d31:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d34:	51                   	push   ecx
c0012d35:	52                   	push   edx
c0012d36:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012d39:	83 c4 10             	add    esp,0x10
c0012d3c:	85 c0                	test   eax,eax
c0012d3e:	75 04                	jne    c0012d44 <Directory::open()+0x56>
c0012d40:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d44:	83 c4 08             	add    esp,0x8
c0012d47:	5b                   	pop    ebx
c0012d48:	c3                   	ret    
c0012d49:	90                   	nop

c0012d4a <Directory::close()>:
c0012d4a:	53                   	push   ebx
c0012d4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d50:	83 ec 08             	sub    esp,0x8
c0012d53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d57:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d5e:	80 fa 19             	cmp    dl,0x19
c0012d61:	77 41                	ja     c0012da4 <Directory::close()+0x5a>
c0012d63:	8b 1c 95 80 c2 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3d80]
c0012d6a:	85 db                	test   ebx,ebx
c0012d6c:	74 36                	je     c0012da4 <Directory::close()+0x5a>
c0012d6e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d75:	74 2d                	je     c0012da4 <Directory::close()+0x5a>
c0012d77:	b8 05 00 00 00       	mov    eax,0x5
c0012d7c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d80:	74 22                	je     c0012da4 <Directory::close()+0x5a>
c0012d82:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d86:	8b 04 95 80 c2 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3d80]
c0012d8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d93:	53                   	push   ebx
c0012d94:	53                   	push   ebx
c0012d95:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d9d:	50                   	push   eax
c0012d9e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012da1:	83 c4 10             	add    esp,0x10
c0012da4:	83 c4 08             	add    esp,0x8
c0012da7:	5b                   	pop    ebx
c0012da8:	c3                   	ret    
c0012da9:	90                   	nop

c0012daa <Directory::unlink()>:
c0012daa:	83 ec 0c             	sub    esp,0xc
c0012dad:	b8 0b 00 00 00       	mov    eax,0xb
c0012db2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dbd:	80 f9 19             	cmp    cl,0x19
c0012dc0:	77 2f                	ja     c0012df1 <Directory::unlink()+0x47>
c0012dc2:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012dc9:	85 c9                	test   ecx,ecx
c0012dcb:	74 24                	je     c0012df1 <Directory::unlink()+0x47>
c0012dcd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd3:	85 c9                	test   ecx,ecx
c0012dd5:	74 1a                	je     c0012df1 <Directory::unlink()+0x47>
c0012dd7:	b8 06 00 00 00       	mov    eax,0x6
c0012ddc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de0:	75 0f                	jne    c0012df1 <Directory::unlink()+0x47>
c0012de2:	83 c2 0d             	add    edx,0xd
c0012de5:	50                   	push   eax
c0012de6:	50                   	push   eax
c0012de7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012de9:	52                   	push   edx
c0012dea:	51                   	push   ecx
c0012deb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	83 c4 0c             	add    esp,0xc
c0012df4:	c3                   	ret    
c0012df5:	90                   	nop

c0012df6 <Directory::rename(char const*)>:
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	b8 0b 00 00 00       	mov    eax,0xb
c0012dfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e09:	80 f9 19             	cmp    cl,0x19
c0012e0c:	77 32                	ja     c0012e40 <Directory::rename(char const*)+0x4a>
c0012e0e:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012e15:	85 c9                	test   ecx,ecx
c0012e17:	74 27                	je     c0012e40 <Directory::rename(char const*)+0x4a>
c0012e19:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e1f:	85 c9                	test   ecx,ecx
c0012e21:	74 1d                	je     c0012e40 <Directory::rename(char const*)+0x4a>
c0012e23:	b8 06 00 00 00       	mov    eax,0x6
c0012e28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e2c:	75 12                	jne    c0012e40 <Directory::rename(char const*)+0x4a>
c0012e2e:	83 c2 0d             	add    edx,0xd
c0012e31:	50                   	push   eax
c0012e32:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e38:	52                   	push   edx
c0012e39:	51                   	push   ecx
c0012e3a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	83 c4 0c             	add    esp,0xc
c0012e43:	c3                   	ret    

c0012e44 <Directory::exists()>:
c0012e44:	83 ec 0c             	sub    esp,0xc
c0012e47:	31 c0                	xor    eax,eax
c0012e49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e54:	80 f9 19             	cmp    cl,0x19
c0012e57:	77 24                	ja     c0012e7d <Directory::exists()+0x39>
c0012e59:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012e60:	85 c9                	test   ecx,ecx
c0012e62:	74 19                	je     c0012e7d <Directory::exists()+0x39>
c0012e64:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e6a:	85 c9                	test   ecx,ecx
c0012e6c:	74 0f                	je     c0012e7d <Directory::exists()+0x39>
c0012e6e:	83 c2 0d             	add    edx,0xd
c0012e71:	50                   	push   eax
c0012e72:	50                   	push   eax
c0012e73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e75:	52                   	push   edx
c0012e76:	51                   	push   ecx
c0012e77:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e7a:	83 c4 10             	add    esp,0x10
c0012e7d:	83 c4 0c             	add    esp,0xc
c0012e80:	c3                   	ret    
c0012e81:	90                   	nop

c0012e82 <Directory::read(dirent*)>:
c0012e82:	83 ec 1c             	sub    esp,0x1c
c0012e85:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e8e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e95:	80 fa 19             	cmp    dl,0x19
c0012e98:	77 30                	ja     c0012eca <Directory::read(dirent*)+0x48>
c0012e9a:	8b 14 95 80 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d80]
c0012ea1:	85 d2                	test   edx,edx
c0012ea3:	74 25                	je     c0012eca <Directory::read(dirent*)+0x48>
c0012ea5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012eac:	74 1c                	je     c0012eca <Directory::read(dirent*)+0x48>
c0012eae:	83 ec 0c             	sub    esp,0xc
c0012eb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eb3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012eb7:	52                   	push   edx
c0012eb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012ebc:	6a 00                	push   0x0
c0012ebe:	68 10 01 00 00       	push   0x110
c0012ec3:	51                   	push   ecx
c0012ec4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ec7:	83 c4 20             	add    esp,0x20
c0012eca:	83 c4 1c             	add    esp,0x1c
c0012ecd:	c3                   	ret    

c0012ece <Directory::create()>:
c0012ece:	83 ec 0c             	sub    esp,0xc
c0012ed1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee1:	80 f9 19             	cmp    cl,0x19
c0012ee4:	77 2f                	ja     c0012f15 <Directory::create()+0x47>
c0012ee6:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c0012eed:	85 c9                	test   ecx,ecx
c0012eef:	74 24                	je     c0012f15 <Directory::create()+0x47>
c0012ef1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef7:	85 c9                	test   ecx,ecx
c0012ef9:	74 1a                	je     c0012f15 <Directory::create()+0x47>
c0012efb:	b8 06 00 00 00       	mov    eax,0x6
c0012f00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f04:	75 0f                	jne    c0012f15 <Directory::create()+0x47>
c0012f06:	83 c2 0d             	add    edx,0xd
c0012f09:	50                   	push   eax
c0012f0a:	50                   	push   eax
c0012f0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0d:	52                   	push   edx
c0012f0e:	51                   	push   ecx
c0012f0f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	83 c4 0c             	add    esp,0xc
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop

c0012f1a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012f1a:	b8 0a 00 00 00       	mov    eax,0xa
c0012f1f:	c3                   	ret    

c0012f20 <Bus::Bus(char const*)>:
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f27:	83 ec 08             	sub    esp,0x8
c0012f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f2e:	50                   	push   eax
c0012f2f:	e8 60 09 00 00       	call   c0013894 <Device::Device(char const*)>
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	ba fc 97 03 c0       	mov    edx,0xc00397fc
c0012f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f40:	89 10                	mov    DWORD PTR [eax],edx
c0012f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f46:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f50:	90                   	nop
c0012f51:	83 c4 0c             	add    esp,0xc
c0012f54:	c3                   	ret    
c0012f55:	90                   	nop

c0012f56 <Bus::~Bus()>:
c0012f56:	83 ec 0c             	sub    esp,0xc
c0012f59:	ba fc 97 03 c0       	mov    edx,0xc00397fc
c0012f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f62:	89 10                	mov    DWORD PTR [eax],edx
c0012f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f68:	83 ec 0c             	sub    esp,0xc
c0012f6b:	50                   	push   eax
c0012f6c:	e8 d5 05 00 00       	call   c0013546 <Device::~Device()>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	90                   	nop
c0012f75:	83 c4 0c             	add    esp,0xc
c0012f78:	c3                   	ret    
c0012f79:	90                   	nop

c0012f7a <Bus::~Bus()>:
c0012f7a:	83 ec 0c             	sub    esp,0xc
c0012f7d:	83 ec 0c             	sub    esp,0xc
c0012f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f84:	e8 cd ff ff ff       	call   c0012f56 <Bus::~Bus()>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	83 ec 08             	sub    esp,0x8
c0012f8f:	68 58 01 00 00       	push   0x158
c0012f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f98:	e8 0c f4 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	83 c4 0c             	add    esp,0xc
c0012fa3:	c3                   	ret    

c0012fa4 <Buzzer::Buzzer(char const*)>:
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fab:	83 ec 08             	sub    esp,0x8
c0012fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb2:	50                   	push   eax
c0012fb3:	e8 dc 08 00 00       	call   c0013894 <Device::Device(char const*)>
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	ba 28 98 03 c0       	mov    edx,0xc0039828
c0012fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc4:	89 10                	mov    DWORD PTR [eax],edx
c0012fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012fe2:	90                   	nop
c0012fe3:	83 c4 0c             	add    esp,0xc
c0012fe6:	c3                   	ret    
c0012fe7:	90                   	nop

c0012fe8 <Buzzer::~Buzzer()>:
c0012fe8:	83 ec 0c             	sub    esp,0xc
c0012feb:	ba 28 98 03 c0       	mov    edx,0xc0039828
c0012ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff4:	89 10                	mov    DWORD PTR [eax],edx
c0012ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffa:	83 ec 0c             	sub    esp,0xc
c0012ffd:	50                   	push   eax
c0012ffe:	e8 43 05 00 00       	call   c0013546 <Device::~Device()>
c0013003:	83 c4 10             	add    esp,0x10
c0013006:	90                   	nop
c0013007:	83 c4 0c             	add    esp,0xc
c001300a:	c3                   	ret    
c001300b:	90                   	nop

c001300c <Buzzer::~Buzzer()>:
c001300c:	83 ec 0c             	sub    esp,0xc
c001300f:	83 ec 0c             	sub    esp,0xc
c0013012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013016:	e8 cd ff ff ff       	call   c0012fe8 <Buzzer::~Buzzer()>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	83 ec 08             	sub    esp,0x8
c0013021:	68 5c 01 00 00       	push   0x15c
c0013026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302a:	e8 7a f3 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001302f:	83 c4 10             	add    esp,0x10
c0013032:	83 c4 0c             	add    esp,0xc
c0013035:	c3                   	ret    

c0013036 <Buzzer::stop()>:
c0013036:	83 ec 14             	sub    esp,0x14
c0013039:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001303d:	8b 10                	mov    edx,DWORD PTR [eax]
c001303f:	6a 00                	push   0x0
c0013041:	50                   	push   eax
c0013042:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013045:	83 c4 1c             	add    esp,0x1c
c0013048:	c3                   	ret    

c0013049 <beepThread(void*)>:
c0013049:	53                   	push   ebx
c001304a:	83 ec 08             	sub    esp,0x8
c001304d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013051:	e8 38 b2 ff ff       	call   c000e28e <unlockScheduler()>
c0013056:	b8 40 42 0f 00       	mov    eax,0xf4240
c001305b:	52                   	push   edx
c001305c:	52                   	push   edx
c001305d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013063:	52                   	push   edx
c0013064:	50                   	push   eax
c0013065:	e8 db b8 ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c001306a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001306d:	e8 c4 ff ff ff       	call   c0013036 <Buzzer::stop()>
c0013072:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001307a:	83 c4 18             	add    esp,0x18
c001307d:	5b                   	pop    ebx
c001307e:	e9 08 b8 ff ff       	jmp    c000e88b <blockTask(TaskState)>
c0013083:	90                   	nop

c0013084 <Buzzer::beep(int, int, bool)>:
c0013084:	57                   	push   edi
c0013085:	56                   	push   esi
c0013086:	53                   	push   ebx
c0013087:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001308b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001308f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013093:	52                   	push   edx
c0013094:	52                   	push   edx
c0013095:	8b 06                	mov    eax,DWORD PTR [esi]
c0013097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001309b:	56                   	push   esi
c001309c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001309f:	83 c4 10             	add    esp,0x10
c00130a2:	89 f8                	mov    eax,edi
c00130a4:	84 c0                	test   al,al
c00130a6:	74 1f                	je     c00130c7 <Buzzer::beep(int, int, bool)+0x43>
c00130a8:	50                   	push   eax
c00130a9:	50                   	push   eax
c00130aa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00130b0:	99                   	cdq    
c00130b1:	52                   	push   edx
c00130b2:	50                   	push   eax
c00130b3:	e8 8d b8 ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00130bf:	5b                   	pop    ebx
c00130c0:	5e                   	pop    esi
c00130c1:	5f                   	pop    edi
c00130c2:	e9 6f ff ff ff       	jmp    c0013036 <Buzzer::stop()>
c00130c7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00130cd:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00130d2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00130da:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00130de:	c7 44 24 14 49 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013049
c00130e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130ea:	5b                   	pop    ebx
c00130eb:	5e                   	pop    esi
c00130ec:	5f                   	pop    edi
c00130ed:	e9 c4 b2 ff ff       	jmp    c000e3b6 <Process::createThread(void (*)(void*), void*, int)>

c00130f2 <loadClockSettings()>:
c00130f2:	c7 05 ec bd 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003bdec,0xa
c00130fc:	c6 05 e9 bd 03 c0 00 	mov    BYTE PTR ds:0xc003bde9,0x0
c0013103:	c6 05 e8 bd 03 c0 01 	mov    BYTE PTR ds:0xc003bde8,0x1
c001310a:	c3                   	ret    
c001310b:	90                   	nop

c001310c <Clock::Clock(char const*)>:
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013113:	83 ec 08             	sub    esp,0x8
c0013116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001311a:	50                   	push   eax
c001311b:	e8 74 07 00 00       	call   c0013894 <Device::Device(char const*)>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	ba 58 98 03 c0       	mov    edx,0xc0039858
c0013128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312c:	89 10                	mov    DWORD PTR [eax],edx
c001312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013132:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001313c:	90                   	nop
c001313d:	83 c4 0c             	add    esp,0xc
c0013140:	c3                   	ret    
c0013141:	90                   	nop

c0013142 <Clock::~Clock()>:
c0013142:	83 ec 0c             	sub    esp,0xc
c0013145:	ba 58 98 03 c0       	mov    edx,0xc0039858
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	89 10                	mov    DWORD PTR [eax],edx
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	50                   	push   eax
c0013158:	e8 e9 03 00 00       	call   c0013546 <Device::~Device()>
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	90                   	nop
c0013161:	83 c4 0c             	add    esp,0xc
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Clock::~Clock()>:
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013170:	e8 cd ff ff ff       	call   c0013142 <Clock::~Clock()>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	83 ec 08             	sub    esp,0x8
c001317b:	68 58 01 00 00       	push   0x158
c0013180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013184:	e8 20 f2 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0013189:	83 c4 10             	add    esp,0x10
c001318c:	83 c4 0c             	add    esp,0xc
c001318f:	c3                   	ret    

c0013190 <Clock::timeInSecondsLocal()>:
c0013190:	53                   	push   ebx
c0013191:	83 ec 14             	sub    esp,0x14
c0013194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013198:	8b 10                	mov    edx,DWORD PTR [eax]
c001319a:	50                   	push   eax
c001319b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001319e:	0f b6 0d e8 bd 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bde8
c00131a5:	03 0d ec bd 03 c0    	add    ecx,DWORD PTR ds:0xc003bdec
c00131ab:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00131b1:	89 cb                	mov    ebx,ecx
c00131b3:	c1 fb 1f             	sar    ebx,0x1f
c00131b6:	01 c8                	add    eax,ecx
c00131b8:	11 da                	adc    edx,ebx
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	31 c9                	xor    ecx,ecx
c00131bf:	80 3d e9 bd 03 c0 00 	cmp    BYTE PTR ds:0xc003bde9,0x0
c00131c6:	74 05                	je     c00131cd <Clock::timeInSecondsLocal()+0x3d>
c00131c8:	b9 08 07 00 00       	mov    ecx,0x708
c00131cd:	31 db                	xor    ebx,ebx
c00131cf:	01 c8                	add    eax,ecx
c00131d1:	11 da                	adc    edx,ebx
c00131d3:	83 c4 08             	add    esp,0x8
c00131d6:	5b                   	pop    ebx
c00131d7:	c3                   	ret    

c00131d8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00131d8:	57                   	push   edi
c00131d9:	56                   	push   esi
c00131da:	53                   	push   ebx
c00131db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131e5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131e9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131ec:	0f b6 05 e8 bd 03 c0 	movzx  eax,BYTE PTR ds:0xc003bde8
c00131f3:	03 05 ec bd 03 c0    	add    eax,DWORD PTR ds:0xc003bdec
c00131f9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131ff:	99                   	cdq    
c0013200:	29 c6                	sub    esi,eax
c0013202:	19 d7                	sbb    edi,edx
c0013204:	89 f0                	mov    eax,esi
c0013206:	89 fa                	mov    edx,edi
c0013208:	31 f6                	xor    esi,esi
c001320a:	80 3d e9 bd 03 c0 00 	cmp    BYTE PTR ds:0xc003bde9,0x0
c0013211:	74 05                	je     c0013218 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013213:	be 08 07 00 00       	mov    esi,0x708
c0013218:	31 ff                	xor    edi,edi
c001321a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001321e:	29 f0                	sub    eax,esi
c0013220:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013224:	19 fa                	sbb    edx,edi
c0013226:	89 d8                	mov    eax,ebx
c0013228:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001322c:	5b                   	pop    ebx
c001322d:	5e                   	pop    esi
c001322e:	5f                   	pop    edi
c001322f:	ff e0                	jmp    eax

c0013231 <datetimeToSeconds(datetime_t)>:
c0013231:	55                   	push   ebp
c0013232:	57                   	push   edi
c0013233:	56                   	push   esi
c0013234:	53                   	push   ebx
c0013235:	83 ec 14             	sub    esp,0x14
c0013238:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001323c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013240:	89 d3                	mov    ebx,edx
c0013242:	0f b6 c6             	movzx  eax,dh
c0013245:	c1 eb 10             	shr    ebx,0x10
c0013248:	48                   	dec    eax
c0013249:	66 81 eb 6c 07       	sub    bx,0x76c
c001324e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013252:	0f b6 f5             	movzx  esi,ch
c0013255:	89 cf                	mov    edi,ecx
c0013257:	6b f6 3c             	imul   esi,esi,0x3c
c001325a:	c1 ef 10             	shr    edi,0x10
c001325d:	0f b6 c9             	movzx  ecx,cl
c0013260:	89 f8                	mov    eax,edi
c0013262:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013268:	0f b6 f8             	movzx  edi,al
c001326b:	0f b6 d2             	movzx  edx,dl
c001326e:	01 fe                	add    esi,edi
c0013270:	01 f1                	add    ecx,esi
c0013272:	0f b7 f3             	movzx  esi,bx
c0013275:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013279:	c1 f9 1f             	sar    ecx,0x1f
c001327c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013285:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001328a:	8b 0c 8d a0 98 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc6760]
c0013291:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013295:	76 29                	jbe    c00132c0 <datetimeToSeconds(datetime_t)+0x8f>
c0013297:	f6 c3 03             	test   bl,0x3
c001329a:	75 24                	jne    c00132c0 <datetimeToSeconds(datetime_t)+0x8f>
c001329c:	31 d2                	xor    edx,edx
c001329e:	bf 64 00 00 00       	mov    edi,0x64
c00132a3:	89 d8                	mov    eax,ebx
c00132a5:	66 f7 f7             	div    di
c00132a8:	66 85 d2             	test   dx,dx
c00132ab:	75 12                	jne    c00132bf <datetimeToSeconds(datetime_t)+0x8e>
c00132ad:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00132b3:	bf 90 01 00 00       	mov    edi,0x190
c00132b8:	99                   	cdq    
c00132b9:	f7 ff                	idiv   edi
c00132bb:	85 d2                	test   edx,edx
c00132bd:	75 01                	jne    c00132c0 <datetimeToSeconds(datetime_t)+0x8f>
c00132bf:	41                   	inc    ecx
c00132c0:	66 83 fb 46          	cmp    bx,0x46
c00132c4:	76 45                	jbe    c001330b <datetimeToSeconds(datetime_t)+0xda>
c00132c6:	bb 46 00 00 00       	mov    ebx,0x46
c00132cb:	bf 64 00 00 00       	mov    edi,0x64
c00132d0:	bd 90 01 00 00       	mov    ebp,0x190
c00132d5:	b8 6d 01 00 00       	mov    eax,0x16d
c00132da:	f6 c3 03             	test   bl,0x3
c00132dd:	75 23                	jne    c0013302 <datetimeToSeconds(datetime_t)+0xd1>
c00132df:	89 d8                	mov    eax,ebx
c00132e1:	99                   	cdq    
c00132e2:	f7 ff                	idiv   edi
c00132e4:	b8 6e 01 00 00       	mov    eax,0x16e
c00132e9:	85 d2                	test   edx,edx
c00132eb:	75 15                	jne    c0013302 <datetimeToSeconds(datetime_t)+0xd1>
c00132ed:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132f3:	99                   	cdq    
c00132f4:	f7 fd                	idiv   ebp
c00132f6:	83 fa 01             	cmp    edx,0x1
c00132f9:	19 c0                	sbb    eax,eax
c00132fb:	f7 d0                	not    eax
c00132fd:	05 6e 01 00 00       	add    eax,0x16e
c0013302:	01 c1                	add    ecx,eax
c0013304:	43                   	inc    ebx
c0013305:	39 f3                	cmp    ebx,esi
c0013307:	7c cc                	jl     c00132d5 <datetimeToSeconds(datetime_t)+0xa4>
c0013309:	eb 35                	jmp    c0013340 <datetimeToSeconds(datetime_t)+0x10f>
c001330b:	74 33                	je     c0013340 <datetimeToSeconds(datetime_t)+0x10f>
c001330d:	b8 45 00 00 00       	mov    eax,0x45
c0013312:	89 c2                	mov    edx,eax
c0013314:	83 e2 03             	and    edx,0x3
c0013317:	39 f0                	cmp    eax,esi
c0013319:	7e 0f                	jle    c001332a <datetimeToSeconds(datetime_t)+0xf9>
c001331b:	83 fa 01             	cmp    edx,0x1
c001331e:	19 d2                	sbb    edx,edx
c0013320:	48                   	dec    eax
c0013321:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013328:	eb e8                	jmp    c0013312 <datetimeToSeconds(datetime_t)+0xe1>
c001332a:	b8 6d 01 00 00       	mov    eax,0x16d
c001332f:	85 d2                	test   edx,edx
c0013331:	75 0b                	jne    c001333e <datetimeToSeconds(datetime_t)+0x10d>
c0013333:	66 83 fb 01          	cmp    bx,0x1
c0013337:	19 c0                	sbb    eax,eax
c0013339:	05 6e 01 00 00       	add    eax,0x16e
c001333e:	29 c1                	sub    ecx,eax
c0013340:	b8 80 51 01 00       	mov    eax,0x15180
c0013345:	f7 e9                	imul   ecx
c0013347:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001334b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001334f:	83 c4 14             	add    esp,0x14
c0013352:	5b                   	pop    ebx
c0013353:	5e                   	pop    esi
c0013354:	5f                   	pop    edi
c0013355:	5d                   	pop    ebp
c0013356:	c3                   	ret    
c0013357:	90                   	nop

c0013358 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013358:	57                   	push   edi
c0013359:	56                   	push   esi
c001335a:	53                   	push   ebx
c001335b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001335f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013361:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013364:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013368:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001336c:	e8 c0 fe ff ff       	call   c0013231 <datetimeToSeconds(datetime_t)>
c0013371:	59                   	pop    ecx
c0013372:	0f b6 0d e8 bd 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bde8
c0013379:	5b                   	pop    ebx
c001337a:	03 0d ec bd 03 c0    	add    ecx,DWORD PTR ds:0xc003bdec
c0013380:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013386:	89 cb                	mov    ebx,ecx
c0013388:	c1 fb 1f             	sar    ebx,0x1f
c001338b:	29 c8                	sub    eax,ecx
c001338d:	19 da                	sbb    edx,ebx
c001338f:	31 c9                	xor    ecx,ecx
c0013391:	80 3d e9 bd 03 c0 00 	cmp    BYTE PTR ds:0xc003bde9,0x0
c0013398:	74 05                	je     c001339f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001339a:	b9 08 07 00 00       	mov    ecx,0x708
c001339f:	31 db                	xor    ebx,ebx
c00133a1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00133a5:	29 c8                	sub    eax,ecx
c00133a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133ab:	19 da                	sbb    edx,ebx
c00133ad:	89 f8                	mov    eax,edi
c00133af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00133b3:	5b                   	pop    ebx
c00133b4:	5e                   	pop    esi
c00133b5:	5f                   	pop    edi
c00133b6:	ff e0                	jmp    eax

c00133b8 <secondsToDatetime(unsigned long long)>:
c00133b8:	55                   	push   ebp
c00133b9:	57                   	push   edi
c00133ba:	56                   	push   esi
c00133bb:	53                   	push   ebx
c00133bc:	83 ec 1c             	sub    esp,0x1c
c00133bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00133c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00133c7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00133cb:	6a 00                	push   0x0
c00133cd:	68 80 51 01 00       	push   0x15180
c00133d2:	55                   	push   ebp
c00133d3:	57                   	push   edi
c00133d4:	e8 63 b2 00 00       	call   c001e63c <__udivdi3>
c00133d9:	83 c4 10             	add    esp,0x10
c00133dc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00133e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133e6:	6a 00                	push   0x0
c00133e8:	68 80 51 01 00       	push   0x15180
c00133ed:	55                   	push   ebp
c00133ee:	57                   	push   edi
c00133ef:	bf 10 0e 00 00       	mov    edi,0xe10
c00133f4:	e8 43 b3 00 00       	call   c001e73c <__umoddi3>
c00133f9:	83 c4 10             	add    esp,0x10
c00133fc:	99                   	cdq    
c00133fd:	f7 ff                	idiv   edi
c00133ff:	bf 3c 00 00 00       	mov    edi,0x3c
c0013404:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013407:	89 d0                	mov    eax,edx
c0013409:	99                   	cdq    
c001340a:	f7 ff                	idiv   edi
c001340c:	85 db                	test   ebx,ebx
c001340e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013411:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013414:	79 11                	jns    c0013427 <secondsToDatetime(unsigned long long)+0x6f>
c0013416:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001341a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013420:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013425:	eb 07                	jmp    c001342e <secondsToDatetime(unsigned long long)+0x76>
c0013427:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001342c:	89 d8                	mov    eax,ebx
c001342e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013433:	99                   	cdq    
c0013434:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013439:	f7 f9                	idiv   ecx
c001343b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013440:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013444:	31 d2                	xor    edx,edx
c0013446:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001344e:	01 c3                	add    ebx,eax
c0013450:	89 d8                	mov    eax,ebx
c0013452:	f7 f1                	div    ecx
c0013454:	31 d2                	xor    edx,edx
c0013456:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013459:	89 d8                	mov    eax,ebx
c001345b:	f7 f7                	div    edi
c001345d:	31 d2                	xor    edx,edx
c001345f:	29 c1                	sub    ecx,eax
c0013461:	89 d8                	mov    eax,ebx
c0013463:	f7 f5                	div    ebp
c0013465:	bd 6d 01 00 00       	mov    ebp,0x16d
c001346a:	29 c1                	sub    ecx,eax
c001346c:	31 d2                	xor    edx,edx
c001346e:	89 c8                	mov    eax,ecx
c0013470:	f7 f5                	div    ebp
c0013472:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001347b:	31 d2                	xor    edx,edx
c001347d:	89 c8                	mov    eax,ecx
c001347f:	f7 f5                	div    ebp
c0013481:	31 d2                	xor    edx,edx
c0013483:	01 c3                	add    ebx,eax
c0013485:	89 c8                	mov    eax,ecx
c0013487:	f7 f7                	div    edi
c0013489:	bf 99 00 00 00       	mov    edi,0x99
c001348e:	29 c3                	sub    ebx,eax
c0013490:	31 d2                	xor    edx,edx
c0013492:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001349a:	29 c3                	sub    ebx,eax
c001349c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001349f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00134a2:	bb 05 00 00 00       	mov    ebx,0x5
c00134a7:	83 c1 02             	add    ecx,0x2
c00134aa:	89 c8                	mov    eax,ecx
c00134ac:	f7 f7                	div    edi
c00134ae:	31 d2                	xor    edx,edx
c00134b0:	89 c7                	mov    edi,eax
c00134b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00134b8:	83 c0 02             	add    eax,0x2
c00134bb:	f7 f3                	div    ebx
c00134bd:	89 eb                	mov    ebx,ebp
c00134bf:	29 c3                	sub    ebx,eax
c00134c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00134c7:	88 1e                	mov    BYTE PTR [esi],bl
c00134c9:	19 c0                	sbb    eax,eax
c00134cb:	31 d2                	xor    edx,edx
c00134cd:	83 e0 0c             	and    eax,0xc
c00134d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00134d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00134dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00134e0:	83 f9 01             	cmp    ecx,0x1
c00134e3:	0f 96 c2             	setbe  dl
c00134e6:	41                   	inc    ecx
c00134e7:	01 d0                	add    eax,edx
c00134e9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134f0:	83 c4 1c             	add    esp,0x1c
c00134f3:	89 f0                	mov    eax,esi
c00134f5:	5b                   	pop    ebx
c00134f6:	5e                   	pop    esi
c00134f7:	5f                   	pop    edi
c00134f8:	5d                   	pop    ebp
c00134f9:	c2 04 00             	ret    0x4

c00134fc <Clock::timeInDatetimeLocal()>:
c00134fc:	53                   	push   ebx
c00134fd:	83 ec 14             	sub    esp,0x14
c0013500:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013504:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013508:	e8 83 fc ff ff       	call   c0013190 <Clock::timeInSecondsLocal()>
c001350d:	83 c4 0c             	add    esp,0xc
c0013510:	52                   	push   edx
c0013511:	50                   	push   eax
c0013512:	53                   	push   ebx
c0013513:	e8 a0 fe ff ff       	call   c00133b8 <secondsToDatetime(unsigned long long)>
c0013518:	89 d8                	mov    eax,ebx
c001351a:	83 c4 14             	add    esp,0x14
c001351d:	5b                   	pop    ebx
c001351e:	c2 04 00             	ret    0x4
c0013521:	90                   	nop

c0013522 <Device::hibernate()>:
c0013522:	c3                   	ret    
c0013523:	90                   	nop

c0013524 <Device::wake()>:
c0013524:	c3                   	ret    
c0013525:	90                   	nop

c0013526 <Device::detect()>:
c0013526:	c3                   	ret    
c0013527:	90                   	nop

c0013528 <Device::disableLegacy()>:
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <Device::powerSaving(PowerSavingLevel)>:
c001352a:	c3                   	ret    
c001352b:	90                   	nop

c001352c <DriverlessDevice::close(int, int, void*)>:
c001352c:	31 c0                	xor    eax,eax
c001352e:	c3                   	ret    
c001352f:	90                   	nop

c0013530 <DriverlessDevice::detect()>:
c0013530:	c3                   	ret    
c0013531:	90                   	nop

c0013532 <DriverlessDevice::open(int, int, void*)>:
c0013532:	83 ec 18             	sub    esp,0x18
c0013535:	68 d0 98 03 c0       	push   0xc00398d0
c001353a:	e8 c9 99 ff ff       	call   c000cf08 <panic(char const*)>
c001353f:	83 c8 ff             	or     eax,0xffffffff
c0013542:	83 c4 1c             	add    esp,0x1c
c0013545:	c3                   	ret    

c0013546 <Device::~Device()>:
c0013546:	ba f8 98 03 c0       	mov    edx,0xc00398f8
c001354b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001354f:	89 10                	mov    DWORD PTR [eax],edx
c0013551:	90                   	nop
c0013552:	c3                   	ret    
c0013553:	90                   	nop

c0013554 <Device::~Device()>:
c0013554:	83 ec 0c             	sub    esp,0xc
c0013557:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001355b:	e8 e6 ff ff ff       	call   c0013546 <Device::~Device()>
c0013560:	83 c4 04             	add    esp,0x4
c0013563:	83 ec 08             	sub    esp,0x8
c0013566:	68 58 01 00 00       	push   0x158
c001356b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001356f:	e8 35 ee ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0013574:	83 c4 10             	add    esp,0x10
c0013577:	83 c4 0c             	add    esp,0xc
c001357a:	c3                   	ret    
c001357b:	90                   	nop

c001357c <Device::findAndLoadDriver()>:
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <Device::preOpenPCI(PCIDeviceInfo)>:
c001357e:	57                   	push   edi
c001357f:	b9 09 00 00 00       	mov    ecx,0x9
c0013584:	56                   	push   esi
c0013585:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013589:	8d 74 24 10          	lea    esi,[esp+0x10]
c001358d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013597:	81 c7 18 01 00 00    	add    edi,0x118
c001359d:	fc                   	cld    
c001359e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135a0:	5e                   	pop    esi
c00135a1:	5f                   	pop    edi
c00135a2:	c3                   	ret    
c00135a3:	90                   	nop

c00135a4 <Device::preOpenACPI(void*, char*, char*)>:
c00135a4:	56                   	push   esi
c00135a5:	53                   	push   ebx
c00135a6:	83 ec 08             	sub    esp,0x8
c00135a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00135b1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00135bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135bf:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00135c5:	6a 1e                	push   0x1e
c00135c7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00135cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00135d1:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00135d7:	50                   	push   eax
c00135d8:	e8 97 d0 fe ff       	call   c0000674 <memcpy>
c00135dd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135e1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00135e5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135ed:	83 c4 14             	add    esp,0x14
c00135f0:	5b                   	pop    ebx
c00135f1:	5e                   	pop    esi
c00135f2:	e9 7d d0 fe ff       	jmp    c0000674 <memcpy>
c00135f7:	90                   	nop

c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135f8:	55                   	push   ebp
c00135f9:	57                   	push   edi
c00135fa:	56                   	push   esi
c00135fb:	53                   	push   ebx
c00135fc:	83 ec 0c             	sub    esp,0xc
c00135ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013603:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013607:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001360b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001360f:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0013614:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001361b:	75 0b                	jne    c0013628 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001361d:	8b 00                	mov    eax,DWORD PTR [eax]
c001361f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013623:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013626:	eb 24                	jmp    c001364c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0013628:	e8 a3 3a 00 00       	call   c00170d0 <thisCPU()>
c001362d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013633:	8b 10                	mov    edx,DWORD PTR [eax]
c0013635:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0013639:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001363d:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0013641:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013645:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013649:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001364c:	83 c4 0c             	add    esp,0xc
c001364f:	5b                   	pop    ebx
c0013650:	5e                   	pop    esi
c0013651:	5f                   	pop    edi
c0013652:	5d                   	pop    ebp
c0013653:	ff e0                	jmp    eax
c0013655:	90                   	nop

c0013656 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013656:	57                   	push   edi
c0013657:	56                   	push   esi
c0013658:	53                   	push   ebx
c0013659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013661:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013665:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001366a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013671:	75 0b                	jne    c001367e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013673:	8b 00                	mov    eax,DWORD PTR [eax]
c0013675:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013679:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001367c:	eb 20                	jmp    c001369e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001367e:	e8 4d 3a 00 00       	call   c00170d0 <thisCPU()>
c0013683:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013689:	8b 10                	mov    edx,DWORD PTR [eax]
c001368b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001368f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013693:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013697:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001369b:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001369e:	5b                   	pop    ebx
c001369f:	5e                   	pop    esi
c00136a0:	5f                   	pop    edi
c00136a1:	ff e0                	jmp    eax
c00136a3:	90                   	nop

c00136a4 <Device::addChild(Device*)>:
c00136a4:	53                   	push   ebx
c00136a5:	83 ec 08             	sub    esp,0x8
c00136a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136b0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00136b6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00136bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00136be:	85 d2                	test   edx,edx
c00136c0:	74 04                	je     c00136c6 <Device::addChild(Device*)+0x22>
c00136c2:	89 d3                	mov    ebx,edx
c00136c4:	eb f6                	jmp    c00136bc <Device::addChild(Device*)+0x18>
c00136c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00136c9:	83 ec 0c             	sub    esp,0xc
c00136cc:	6a 08                	push   0x8
c00136ce:	e8 c7 ec ff ff       	call   c001239a <operator new(unsigned long)>
c00136d3:	89 03                	mov    DWORD PTR [ebx],eax
c00136d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e2:	83 c4 18             	add    esp,0x18
c00136e5:	5b                   	pop    ebx
c00136e6:	c3                   	ret    
c00136e7:	90                   	nop

c00136e8 <Device::removeAllChildren()>:
c00136e8:	56                   	push   esi
c00136e9:	53                   	push   ebx
c00136ea:	52                   	push   edx
c00136eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136ef:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136f8:	74 17                	je     c0013711 <Device::removeAllChildren()+0x29>
c00136fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136fd:	85 c0                	test   eax,eax
c00136ff:	74 0c                	je     c001370d <Device::removeAllChildren()+0x25>
c0013701:	83 ec 0c             	sub    esp,0xc
c0013704:	8b 10                	mov    edx,DWORD PTR [eax]
c0013706:	50                   	push   eax
c0013707:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001370f:	eb e4                	jmp    c00136f5 <Device::removeAllChildren()+0xd>
c0013711:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013717:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001371d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013723:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001372a:	58                   	pop    eax
c001372b:	5b                   	pop    ebx
c001372c:	5e                   	pop    esi
c001372d:	c3                   	ret    

c001372e <Device::hibernateAll()>:
c001372e:	53                   	push   ebx
c001372f:	83 ec 14             	sub    esp,0x14
c0013732:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013736:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013738:	53                   	push   ebx
c0013739:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001373c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013742:	83 c4 10             	add    esp,0x10
c0013745:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013748:	74 0f                	je     c0013759 <Device::hibernateAll()+0x2b>
c001374a:	83 ec 0c             	sub    esp,0xc
c001374d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013750:	e8 d9 ff ff ff       	call   c001372e <Device::hibernateAll()>
c0013755:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013757:	eb e9                	jmp    c0013742 <Device::hibernateAll()+0x14>
c0013759:	83 c4 08             	add    esp,0x8
c001375c:	5b                   	pop    ebx
c001375d:	c3                   	ret    

c001375e <Device::wakeAll()>:
c001375e:	53                   	push   ebx
c001375f:	83 ec 14             	sub    esp,0x14
c0013762:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013768:	53                   	push   ebx
c0013769:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001376c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013772:	83 c4 10             	add    esp,0x10
c0013775:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013778:	74 0f                	je     c0013789 <Device::wakeAll()+0x2b>
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013780:	e8 d9 ff ff ff       	call   c001375e <Device::wakeAll()>
c0013785:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013787:	eb e9                	jmp    c0013772 <Device::wakeAll()+0x14>
c0013789:	83 c4 08             	add    esp,0x8
c001378c:	5b                   	pop    ebx
c001378d:	c3                   	ret    

c001378e <Device::detectAll()>:
c001378e:	53                   	push   ebx
c001378f:	83 ec 14             	sub    esp,0x14
c0013792:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013798:	53                   	push   ebx
c0013799:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001379c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137a8:	74 0f                	je     c00137b9 <Device::detectAll()+0x2b>
c00137aa:	83 ec 0c             	sub    esp,0xc
c00137ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137b0:	e8 d9 ff ff ff       	call   c001378e <Device::detectAll()>
c00137b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137b7:	eb e9                	jmp    c00137a2 <Device::detectAll()+0x14>
c00137b9:	83 c4 08             	add    esp,0x8
c00137bc:	5b                   	pop    ebx
c00137bd:	c3                   	ret    

c00137be <Device::disableLegacyAll()>:
c00137be:	53                   	push   ebx
c00137bf:	83 ec 14             	sub    esp,0x14
c00137c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137c8:	53                   	push   ebx
c00137c9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00137cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137d2:	83 c4 10             	add    esp,0x10
c00137d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137d8:	74 0f                	je     c00137e9 <Device::disableLegacyAll()+0x2b>
c00137da:	83 ec 0c             	sub    esp,0xc
c00137dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137e0:	e8 d9 ff ff ff       	call   c00137be <Device::disableLegacyAll()>
c00137e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137e7:	eb e9                	jmp    c00137d2 <Device::disableLegacyAll()+0x14>
c00137e9:	83 c4 08             	add    esp,0x8
c00137ec:	5b                   	pop    ebx
c00137ed:	c3                   	ret    

c00137ee <Device::loadDriversForAll()>:
c00137ee:	53                   	push   ebx
c00137ef:	83 ec 08             	sub    esp,0x8
c00137f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137fc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137fe:	85 db                	test   ebx,ebx
c0013800:	74 12                	je     c0013814 <Device::loadDriversForAll()+0x26>
c0013802:	83 ec 0c             	sub    esp,0xc
c0013805:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013808:	e8 e1 ff ff ff       	call   c00137ee <Device::loadDriversForAll()>
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	89 d8                	mov    eax,ebx
c0013812:	eb e8                	jmp    c00137fc <Device::loadDriversForAll()+0xe>
c0013814:	83 c4 08             	add    esp,0x8
c0013817:	5b                   	pop    ebx
c0013818:	c3                   	ret    
c0013819:	90                   	nop

c001381a <Device::closeAll()>:
c001381a:	53                   	push   ebx
c001381b:	83 ec 08             	sub    esp,0x8
c001381e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013824:	6a 00                	push   0x0
c0013826:	6a 00                	push   0x0
c0013828:	6a 00                	push   0x0
c001382a:	53                   	push   ebx
c001382b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001382e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001383a:	74 0f                	je     c001384b <Device::closeAll()+0x31>
c001383c:	83 ec 0c             	sub    esp,0xc
c001383f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013842:	e8 d3 ff ff ff       	call   c001381a <Device::closeAll()>
c0013847:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013849:	eb e9                	jmp    c0013834 <Device::closeAll()+0x1a>
c001384b:	83 c4 08             	add    esp,0x8
c001384e:	5b                   	pop    ebx
c001384f:	c3                   	ret    

c0013850 <Device::powerSavingAll(PowerSavingLevel)>:
c0013850:	56                   	push   esi
c0013851:	53                   	push   ebx
c0013852:	83 ec 0c             	sub    esp,0xc
c0013855:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013859:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001385d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001385f:	56                   	push   esi
c0013860:	53                   	push   ebx
c0013861:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013864:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013870:	74 0f                	je     c0013881 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013872:	52                   	push   edx
c0013873:	52                   	push   edx
c0013874:	56                   	push   esi
c0013875:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013878:	e8 d3 ff ff ff       	call   c0013850 <Device::powerSavingAll(PowerSavingLevel)>
c001387d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001387f:	eb e9                	jmp    c001386a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013881:	58                   	pop    eax
c0013882:	5b                   	pop    ebx
c0013883:	5e                   	pop    esi
c0013884:	c3                   	ret    
c0013885:	90                   	nop

c0013886 <Device::setName(char const*)>:
c0013886:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001388e:	e9 e9 ce fe ff       	jmp    c000077c <strcpy>
c0013893:	90                   	nop

c0013894 <Device::Device(char const*)>:
c0013894:	83 ec 0c             	sub    esp,0xc
c0013897:	ba f8 98 03 c0       	mov    edx,0xc00398f8
c001389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a0:	89 10                	mov    DWORD PTR [eax],edx
c00138a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00138b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00138be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00138da:	83 ec 08             	sub    esp,0x8
c00138dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e5:	e8 9c ff ff ff       	call   c0013886 <Device::setName(char const*)>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	83 ec 0c             	sub    esp,0xc
c00138f0:	6a 08                	push   0x8
c00138f2:	e8 a3 ea ff ff       	call   c001239a <operator new(unsigned long)>
c00138f7:	83 c4 10             	add    esp,0x10
c00138fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013900:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013907:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001390b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013915:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001391b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013925:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001392b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013936:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001393d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013941:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013968:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013976:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013980:	90                   	nop
c0013981:	83 c4 0c             	add    esp,0xc
c0013984:	c3                   	ret    
c0013985:	90                   	nop

c0013986 <Device::getName()>:
c0013986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001398a:	05 d0 00 00 00       	add    eax,0xd0
c001398f:	c3                   	ret    

c0013990 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013990:	83 ec 0c             	sub    esp,0xc
c0013993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013997:	83 ec 08             	sub    esp,0x8
c001399a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001399e:	50                   	push   eax
c001399f:	e8 f0 fe ff ff       	call   c0013894 <Device::Device(char const*)>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	ba 24 99 03 c0       	mov    edx,0xc0039924
c00139ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b0:	89 10                	mov    DWORD PTR [eax],edx
c00139b2:	90                   	nop
c00139b3:	83 c4 0c             	add    esp,0xc
c00139b6:	c3                   	ret    
c00139b7:	90                   	nop

c00139b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00139b8:	57                   	push   edi
c00139b9:	56                   	push   esi
c00139ba:	53                   	push   ebx
c00139bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00139c7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00139cd:	75 0c                	jne    c00139db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00139cf:	52                   	push   edx
c00139d0:	52                   	push   edx
c00139d1:	53                   	push   ebx
c00139d2:	56                   	push   esi
c00139d3:	e8 54 b4 00 00       	call   c001ee2c <LinkedList<Device>::addElement(Device*)>
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00139e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139e4:	74 12                	je     c00139f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00139e6:	50                   	push   eax
c00139e7:	57                   	push   edi
c00139e8:	56                   	push   esi
c00139e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139ec:	e8 c7 ff ff ff       	call   c00139b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	eb e9                	jmp    c00139e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	5f                   	pop    edi
c00139fb:	c3                   	ret    

c00139fc <getDevicesOfType(DeviceType)>:
c00139fc:	53                   	push   ebx
c00139fd:	83 ec 14             	sub    esp,0x14
c0013a00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a04:	53                   	push   ebx
c0013a05:	e8 fe b4 00 00       	call   c001ef08 <LinkedList<Device>::LinkedList()>
c0013a0a:	83 c4 0c             	add    esp,0xc
c0013a0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a11:	53                   	push   ebx
c0013a12:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c0013a18:	e8 9b ff ff ff       	call   c00139b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013a1d:	89 d8                	mov    eax,ebx
c0013a1f:	83 c4 18             	add    esp,0x18
c0013a22:	5b                   	pop    ebx
c0013a23:	c2 04 00             	ret    0x4

c0013a26 <HardDiskController::HardDiskController(char const*)>:
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2d:	83 ec 08             	sub    esp,0x8
c0013a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a34:	50                   	push   eax
c0013a35:	e8 5a fe ff ff       	call   c0013894 <Device::Device(char const*)>
c0013a3a:	83 c4 10             	add    esp,0x10
c0013a3d:	ba 50 99 03 c0       	mov    edx,0xc0039950
c0013a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a46:	89 10                	mov    DWORD PTR [eax],edx
c0013a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a56:	90                   	nop
c0013a57:	83 c4 0c             	add    esp,0xc
c0013a5a:	c3                   	ret    
c0013a5b:	90                   	nop

c0013a5c <HardDiskController::~HardDiskController()>:
c0013a5c:	83 ec 0c             	sub    esp,0xc
c0013a5f:	ba 50 99 03 c0       	mov    edx,0xc0039950
c0013a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a68:	89 10                	mov    DWORD PTR [eax],edx
c0013a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6e:	83 ec 0c             	sub    esp,0xc
c0013a71:	50                   	push   eax
c0013a72:	e8 cf fa ff ff       	call   c0013546 <Device::~Device()>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	90                   	nop
c0013a7b:	83 c4 0c             	add    esp,0xc
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop

c0013a80 <HardDiskController::~HardDiskController()>:
c0013a80:	83 ec 0c             	sub    esp,0xc
c0013a83:	83 ec 0c             	sub    esp,0xc
c0013a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a8a:	e8 cd ff ff ff       	call   c0013a5c <HardDiskController::~HardDiskController()>
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	83 ec 08             	sub    esp,0x8
c0013a95:	68 58 01 00 00       	push   0x158
c0013a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a9e:	e8 06 e9 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0013aa3:	83 c4 10             	add    esp,0x10
c0013aa6:	83 c4 0c             	add    esp,0xc
c0013aa9:	c3                   	ret    

c0013aaa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013aaa:	83 ec 0c             	sub    esp,0xc
c0013aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab1:	83 ec 08             	sub    esp,0x8
c0013ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ab8:	50                   	push   eax
c0013ab9:	e8 d6 fd ff ff       	call   c0013894 <Device::Device(char const*)>
c0013abe:	83 c4 10             	add    esp,0x10
c0013ac1:	ba 7c 99 03 c0       	mov    edx,0xc003997c
c0013ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aca:	89 10                	mov    DWORD PTR [eax],edx
c0013acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013adb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013af8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b02:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b0c:	90                   	nop
c0013b0d:	83 c4 0c             	add    esp,0xc
c0013b10:	c3                   	ret    
c0013b11:	90                   	nop

c0013b12 <PhysicalDisk::startCache()>:
c0013b12:	56                   	push   esi
c0013b13:	53                   	push   ebx
c0013b14:	83 ec 10             	sub    esp,0x10
c0013b17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b1b:	6a 30                	push   0x30
c0013b1d:	e8 78 e8 ff ff       	call   c001239a <operator new(unsigned long)>
c0013b22:	89 c6                	mov    esi,eax
c0013b24:	58                   	pop    eax
c0013b25:	5a                   	pop    edx
c0013b26:	53                   	push   ebx
c0013b27:	56                   	push   esi
c0013b28:	e8 b7 1d 00 00       	call   c00158e4 <VCache::VCache(PhysicalDisk*)>
c0013b2d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013b33:	83 c4 14             	add    esp,0x14
c0013b36:	5b                   	pop    ebx
c0013b37:	5e                   	pop    esi
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <PhysicalDisk::~PhysicalDisk()>:
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	ba 7c 99 03 c0       	mov    edx,0xc003997c
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	89 10                	mov    DWORD PTR [eax],edx
c0013b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	50                   	push   eax
c0013b50:	e8 f1 f9 ff ff       	call   c0013546 <Device::~Device()>
c0013b55:	83 c4 10             	add    esp,0x10
c0013b58:	90                   	nop
c0013b59:	83 c4 0c             	add    esp,0xc
c0013b5c:	c3                   	ret    
c0013b5d:	90                   	nop

c0013b5e <PhysicalDisk::~PhysicalDisk()>:
c0013b5e:	83 ec 0c             	sub    esp,0xc
c0013b61:	83 ec 0c             	sub    esp,0xc
c0013b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b68:	e8 cd ff ff ff       	call   c0013b3a <PhysicalDisk::~PhysicalDisk()>
c0013b6d:	83 c4 10             	add    esp,0x10
c0013b70:	83 ec 08             	sub    esp,0x8
c0013b73:	68 6c 01 00 00       	push   0x16c
c0013b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7c:	e8 28 e8 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	83 c4 0c             	add    esp,0xc
c0013b87:	c3                   	ret    

c0013b88 <FPU::FPU(char const*)>:
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8f:	83 ec 08             	sub    esp,0x8
c0013b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b96:	50                   	push   eax
c0013b97:	e8 f8 fc ff ff       	call   c0013894 <Device::Device(char const*)>
c0013b9c:	83 c4 10             	add    esp,0x10
c0013b9f:	ba b8 99 03 c0       	mov    edx,0xc00399b8
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	89 10                	mov    DWORD PTR [eax],edx
c0013baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bae:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013bb8:	90                   	nop
c0013bb9:	83 c4 0c             	add    esp,0xc
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <FPU::~FPU()>:
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	ba b8 99 03 c0       	mov    edx,0xc00399b8
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	89 10                	mov    DWORD PTR [eax],edx
c0013bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd0:	83 ec 0c             	sub    esp,0xc
c0013bd3:	50                   	push   eax
c0013bd4:	e8 6d f9 ff ff       	call   c0013546 <Device::~Device()>
c0013bd9:	83 c4 10             	add    esp,0x10
c0013bdc:	90                   	nop
c0013bdd:	83 c4 0c             	add    esp,0xc
c0013be0:	c3                   	ret    
c0013be1:	90                   	nop

c0013be2 <FPU::~FPU()>:
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	83 ec 0c             	sub    esp,0xc
c0013be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bec:	e8 cd ff ff ff       	call   c0013bbe <FPU::~FPU()>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	83 ec 08             	sub    esp,0x8
c0013bf7:	68 58 01 00 00       	push   0x158
c0013bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c00:	e8 a4 e7 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0013c05:	83 c4 10             	add    esp,0x10
c0013c08:	83 c4 0c             	add    esp,0xc
c0013c0b:	c3                   	ret    

c0013c0c <setupFPU()>:
c0013c0c:	53                   	push   ebx
c0013c0d:	83 ec 08             	sub    esp,0x8
c0013c10:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0013c15:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013c1c:	74 19                	je     c0013c37 <setupFPU()+0x2b>
c0013c1e:	83 ec 0c             	sub    esp,0xc
c0013c21:	68 58 01 00 00       	push   0x158
c0013c26:	e8 6f e7 ff ff       	call   c001239a <operator new(unsigned long)>
c0013c2b:	89 c3                	mov    ebx,eax
c0013c2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c30:	e8 d5 96 00 00       	call   c001d30a <AVX::AVX()>
c0013c35:	eb 5b                	jmp    c0013c92 <setupFPU()+0x86>
c0013c37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013c3d:	84 c0                	test   al,al
c0013c3f:	79 19                	jns    c0013c5a <setupFPU()+0x4e>
c0013c41:	83 ec 0c             	sub    esp,0xc
c0013c44:	68 58 01 00 00       	push   0x158
c0013c49:	e8 4c e7 ff ff       	call   c001239a <operator new(unsigned long)>
c0013c4e:	89 c3                	mov    ebx,eax
c0013c50:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c53:	e8 d8 97 00 00       	call   c001d430 <SSE::SSE()>
c0013c58:	eb 38                	jmp    c0013c92 <setupFPU()+0x86>
c0013c5a:	a8 20                	test   al,0x20
c0013c5c:	74 19                	je     c0013c77 <setupFPU()+0x6b>
c0013c5e:	83 ec 0c             	sub    esp,0xc
c0013c61:	68 58 01 00 00       	push   0x158
c0013c66:	e8 2f e7 ff ff       	call   c001239a <operator new(unsigned long)>
c0013c6b:	89 c3                	mov    ebx,eax
c0013c6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c70:	e8 25 97 00 00       	call   c001d39a <MMX::MMX()>
c0013c75:	eb 1b                	jmp    c0013c92 <setupFPU()+0x86>
c0013c77:	a8 10                	test   al,0x10
c0013c79:	74 1c                	je     c0013c97 <setupFPU()+0x8b>
c0013c7b:	83 ec 0c             	sub    esp,0xc
c0013c7e:	68 58 01 00 00       	push   0x158
c0013c83:	e8 12 e7 ff ff       	call   c001239a <operator new(unsigned long)>
c0013c88:	89 c3                	mov    ebx,eax
c0013c8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c8d:	e8 2c 98 00 00       	call   c001d4be <x87::x87()>
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	eb 12                	jmp    c0013ca9 <setupFPU()+0x9d>
c0013c97:	83 ec 0c             	sub    esp,0xc
c0013c9a:	31 db                	xor    ebx,ebx
c0013c9c:	68 a8 99 03 c0       	push   0xc00399a8
c0013ca1:	e8 62 92 ff ff       	call   c000cf08 <panic(char const*)>
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	89 d8                	mov    eax,ebx
c0013cab:	83 c4 08             	add    esp,0x8
c0013cae:	5b                   	pop    ebx
c0013caf:	c3                   	ret    

c0013cb0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013cb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013cb8:	c1 e0 04             	shl    eax,0x4
c0013cbb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013cbf:	8d 50 10             	lea    edx,[eax+0x10]
c0013cc2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013cc8:	74 08                	je     c0013cd2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013cca:	83 c0 04             	add    eax,0x4
c0013ccd:	39 d0                	cmp    eax,edx
c0013ccf:	75 f1                	jne    c0013cc2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cd1:	c3                   	ret    
c0013cd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cdc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ce6:	eb e2                	jmp    c0013cca <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013ce8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013ce8:	57                   	push   edi
c0013ce9:	31 c0                	xor    eax,eax
c0013ceb:	56                   	push   esi
c0013cec:	53                   	push   ebx
c0013ced:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cf1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cf5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cf9:	89 da                	mov    edx,ebx
c0013cfb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cff:	c1 e2 04             	shl    edx,0x4
c0013d02:	01 ca                	add    edx,ecx
c0013d04:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013d0c:	74 16                	je     c0013d24 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013d0e:	40                   	inc    eax
c0013d0f:	83 f8 04             	cmp    eax,0x4
c0013d12:	75 f0                	jne    c0013d04 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013d14:	c7 44 24 10 e8 99 03 c0 	mov    DWORD PTR [esp+0x10],0xc00399e8
c0013d1c:	5b                   	pop    ebx
c0013d1d:	5e                   	pop    esi
c0013d1e:	5f                   	pop    edi
c0013d1f:	e9 e4 91 ff ff       	jmp    c000cf08 <panic(char const*)>
c0013d24:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d27:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d2a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d30:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d36:	5b                   	pop    ebx
c0013d37:	5e                   	pop    esi
c0013d38:	5f                   	pop    edi
c0013d39:	c3                   	ret    

c0013d3a <doubleFault(regs*, void*)>:
c0013d3a:	c7 44 24 04 18 9b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039b18
c0013d42:	e9 c1 91 ff ff       	jmp    c000cf08 <panic(char const*)>
c0013d47:	90                   	nop

c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d48:	56                   	push   esi
c0013d49:	53                   	push   ebx
c0013d4a:	50                   	push   eax
c0013d4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d53:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d58:	75 35                	jne    c0013d8f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d5a:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d5d:	31 d2                	xor    edx,edx
c0013d5f:	89 c1                	mov    ecx,eax
c0013d61:	c1 e1 04             	shl    ecx,0x4
c0013d64:	01 f1                	add    ecx,esi
c0013d66:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d6e:	74 3e                	je     c0013dae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d70:	42                   	inc    edx
c0013d71:	83 fa 04             	cmp    edx,0x4
c0013d74:	75 f0                	jne    c0013d66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d76:	83 ec 0c             	sub    esp,0xc
c0013d79:	68 5c 9a 03 c0       	push   0xc0039a5c
c0013d7e:	e8 85 91 ff ff       	call   c000cf08 <panic(char const*)>
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d8b:	5a                   	pop    edx
c0013d8c:	5b                   	pop    ebx
c0013d8d:	5e                   	pop    esi
c0013d8e:	c3                   	ret    
c0013d8f:	83 ec 0c             	sub    esp,0xc
c0013d92:	56                   	push   esi
c0013d93:	e8 ee fb ff ff       	call   c0013986 <Device::getName()>
c0013d98:	83 c4 10             	add    esp,0x10
c0013d9b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d9e:	75 ba                	jne    c0013d5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013da0:	83 fb 0f             	cmp    ebx,0xf
c0013da3:	7f 29                	jg     c0013dce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013da5:	0f b6 9b 80 b0 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4f80]
c0013dac:	eb ac                	jmp    c0013d5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dae:	8d 04 82             	lea    eax,[edx+eax*4]
c0013db1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013db5:	8d 04 86             	lea    eax,[esi+eax*4]
c0013db8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013dbe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dc2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013dc8:	89 d8                	mov    eax,ebx
c0013dca:	5a                   	pop    edx
c0013dcb:	5b                   	pop    ebx
c0013dcc:	5e                   	pop    esi
c0013dcd:	c3                   	ret    
c0013dce:	83 ec 0c             	sub    esp,0xc
c0013dd1:	68 24 9a 03 c0       	push   0xc0039a24
c0013dd6:	e8 2d 91 ff ff       	call   c000cf08 <panic(char const*)>
c0013ddb:	83 c4 10             	add    esp,0x10
c0013dde:	e9 77 ff ff ff       	jmp    c0013d5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013de3:	90                   	nop

c0013de4 <InterruptController::clearAllHandlers(int, bool)>:
c0013de4:	56                   	push   esi
c0013de5:	53                   	push   ebx
c0013de6:	52                   	push   edx
c0013de7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013deb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013def:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013df4:	75 61                	jne    c0013e57 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013df6:	8d 46 20             	lea    eax,[esi+0x20]
c0013df9:	c1 e6 04             	shl    esi,0x4
c0013dfc:	c1 e0 04             	shl    eax,0x4
c0013dff:	01 de                	add    esi,ebx
c0013e01:	01 d8                	add    eax,ebx
c0013e03:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013e0d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013e17:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e21:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e2b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e35:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e3f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e49:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e53:	58                   	pop    eax
c0013e54:	5b                   	pop    ebx
c0013e55:	5e                   	pop    esi
c0013e56:	c3                   	ret    
c0013e57:	83 ec 0c             	sub    esp,0xc
c0013e5a:	53                   	push   ebx
c0013e5b:	e8 26 fb ff ff       	call   c0013986 <Device::getName()>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e66:	75 8e                	jne    c0013df6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e68:	83 fe 0f             	cmp    esi,0xf
c0013e6b:	7f 09                	jg     c0013e76 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e6d:	0f b6 b6 80 b0 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4f80]
c0013e74:	eb 80                	jmp    c0013df6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	68 98 9a 03 c0       	push   0xc0039a98
c0013e7e:	e8 85 90 ff ff       	call   c000cf08 <panic(char const*)>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	e9 6b ff ff ff       	jmp    c0013df6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e8b:	90                   	nop

c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e8c:	56                   	push   esi
c0013e8d:	53                   	push   ebx
c0013e8e:	52                   	push   edx
c0013e8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e97:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e9c:	75 3a                	jne    c0013ed8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea2:	8d 50 20             	lea    edx,[eax+0x20]
c0013ea5:	c1 e2 04             	shl    edx,0x4
c0013ea8:	8d 04 16             	lea    eax,[esi+edx*1]
c0013eab:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013eaf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013eb5:	74 0b                	je     c0013ec2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013eb7:	83 c0 04             	add    eax,0x4
c0013eba:	39 d0                	cmp    eax,edx
c0013ebc:	75 f1                	jne    c0013eaf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013ebe:	58                   	pop    eax
c0013ebf:	5b                   	pop    ebx
c0013ec0:	5e                   	pop    esi
c0013ec1:	c3                   	ret    
c0013ec2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ecc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ed6:	eb df                	jmp    c0013eb7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ed8:	83 ec 0c             	sub    esp,0xc
c0013edb:	56                   	push   esi
c0013edc:	e8 a5 fa ff ff       	call   c0013986 <Device::getName()>
c0013ee1:	83 c4 10             	add    esp,0x10
c0013ee4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ee7:	75 b5                	jne    c0013e9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ee9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013eee:	7f 11                	jg     c0013f01 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ef0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ef4:	0f b6 80 80 b0 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4f80]
c0013efb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eff:	eb 9d                	jmp    c0013e9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f01:	83 ec 0c             	sub    esp,0xc
c0013f04:	68 98 9a 03 c0       	push   0xc0039a98
c0013f09:	e8 fa 8f ff ff       	call   c000cf08 <panic(char const*)>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	eb 8b                	jmp    c0013e9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013f13 <nmiHandler(regs*, void*)>:
c0013f13:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0013f18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f1c:	e9 5b 77 ff ff       	jmp    c000b67c <Computer::handleNMI()>

c0013f21 <int_handler>:
c0013f21:	55                   	push   ebp
c0013f22:	57                   	push   edi
c0013f23:	56                   	push   esi
c0013f24:	53                   	push   ebx
c0013f25:	83 ec 0c             	sub    esp,0xc
c0013f28:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f2c:	80 3d d2 ba 03 c0 00 	cmp    BYTE PTR ds:0xc003bad2,0x0
c0013f33:	74 0b                	je     c0013f40 <int_handler+0x1f>
c0013f35:	fa                   	cli    
c0013f36:	f4                   	hlt    
c0013f37:	80 3d d2 ba 03 c0 00 	cmp    BYTE PTR ds:0xc003bad2,0x0
c0013f3e:	75 f5                	jne    c0013f35 <int_handler+0x14>
c0013f40:	e8 8b 31 00 00       	call   c00170d0 <thisCPU()>
c0013f45:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f48:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f4e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f51:	83 f8 17             	cmp    eax,0x17
c0013f54:	77 13                	ja     c0013f69 <int_handler+0x48>
c0013f56:	83 ec 08             	sub    esp,0x8
c0013f59:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f5b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f5e:	0f b6 c0             	movzx  eax,al
c0013f61:	50                   	push   eax
c0013f62:	57                   	push   edi
c0013f63:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	83 c3 15             	add    ebx,0x15
c0013f6c:	c1 e3 04             	shl    ebx,0x4
c0013f6f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f73:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f7a:	31 db                	xor    ebx,ebx
c0013f7c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f80:	85 c0                	test   eax,eax
c0013f82:	74 13                	je     c0013f97 <int_handler+0x76>
c0013f84:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f87:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f8b:	74 1c                	je     c0013fa9 <int_handler+0x88>
c0013f8d:	83 ec 08             	sub    esp,0x8
c0013f90:	52                   	push   edx
c0013f91:	56                   	push   esi
c0013f92:	ff d0                	call   eax
c0013f94:	83 c4 10             	add    esp,0x10
c0013f97:	43                   	inc    ebx
c0013f98:	83 fb 04             	cmp    ebx,0x4
c0013f9b:	75 df                	jne    c0013f7c <int_handler+0x5b>
c0013f9d:	83 c4 0c             	add    esp,0xc
c0013fa0:	31 c0                	xor    eax,eax
c0013fa2:	5b                   	pop    ebx
c0013fa3:	31 d2                	xor    edx,edx
c0013fa5:	5e                   	pop    esi
c0013fa6:	5f                   	pop    edi
c0013fa7:	5d                   	pop    ebp
c0013fa8:	c3                   	ret    
c0013fa9:	83 ec 08             	sub    esp,0x8
c0013fac:	52                   	push   edx
c0013fad:	56                   	push   esi
c0013fae:	ff d0                	call   eax
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	83 c4 0c             	add    esp,0xc
c0013fb6:	5b                   	pop    ebx
c0013fb7:	5e                   	pop    esi
c0013fb8:	5f                   	pop    edi
c0013fb9:	5d                   	pop    ebp
c0013fba:	c3                   	ret    
c0013fbb:	90                   	nop

c0013fbc <InterruptController::InterruptController(char const*)>:
c0013fbc:	83 ec 1c             	sub    esp,0x1c
c0013fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc3:	83 ec 08             	sub    esp,0x8
c0013fc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fca:	50                   	push   eax
c0013fcb:	e8 c4 f8 ff ff       	call   c0013894 <Device::Device(char const*)>
c0013fd0:	83 c4 10             	add    esp,0x10
c0013fd3:	ba 90 9c 03 c0       	mov    edx,0xc0039c90
c0013fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdc:	89 10                	mov    DWORD PTR [eax],edx
c0013fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013ff4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013ffc:	7f 5e                	jg     c001405c <InterruptController::InterruptController(char const*)+0xa0>
c0013ffe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014006:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001400b:	7f 49                	jg     c0014056 <InterruptController::InterruptController(char const*)+0x9a>
c001400d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014011:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014015:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001401c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014020:	01 ca                	add    edx,ecx
c0014022:	83 c2 54             	add    edx,0x54
c0014025:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001402d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014031:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014035:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001403c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014040:	01 ca                	add    edx,ecx
c0014042:	81 c2 54 04 00 00    	add    edx,0x454
c0014048:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014050:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014054:	eb b0                	jmp    c0014006 <InterruptController::InterruptController(char const*)+0x4a>
c0014056:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001405a:	eb 98                	jmp    c0013ff4 <InterruptController::InterruptController(char const*)+0x38>
c001405c:	90                   	nop
c001405d:	83 c4 1c             	add    esp,0x1c
c0014060:	c3                   	ret    
c0014061:	90                   	nop

c0014062 <InterruptController::~InterruptController()>:
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	ba 90 9c 03 c0       	mov    edx,0xc0039c90
c001406a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406e:	89 10                	mov    DWORD PTR [eax],edx
c0014070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	50                   	push   eax
c0014078:	e8 c9 f4 ff ff       	call   c0013546 <Device::~Device()>
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	90                   	nop
c0014081:	83 c4 0c             	add    esp,0xc
c0014084:	c3                   	ret    
c0014085:	90                   	nop

c0014086 <InterruptController::~InterruptController()>:
c0014086:	83 ec 0c             	sub    esp,0xc
c0014089:	83 ec 0c             	sub    esp,0xc
c001408c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014090:	e8 cd ff ff ff       	call   c0014062 <InterruptController::~InterruptController()>
c0014095:	83 c4 10             	add    esp,0x10
c0014098:	83 ec 08             	sub    esp,0x8
c001409b:	68 58 21 00 00       	push   0x2158
c00140a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a4:	e8 00 e3 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	83 c4 0c             	add    esp,0xc
c00140af:	c3                   	ret    

c00140b0 <displayDebugInfo(regs*)>:
c00140b0:	55                   	push   ebp
c00140b1:	57                   	push   edi
c00140b2:	56                   	push   esi
c00140b3:	53                   	push   ebx
c00140b4:	83 ec 24             	sub    esp,0x24
c00140b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140bb:	0f 20 c2             	mov    edx,cr0
c00140be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140c2:	0f 20 d7             	mov    edi,cr2
c00140c5:	0f 20 de             	mov    esi,cr3
c00140c8:	0f 20 e5             	mov    ebp,cr4
c00140cb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140ce:	68 25 9b 03 c0       	push   0xc0039b25
c00140d3:	e8 12 8d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00140d8:	58                   	pop    eax
c00140d9:	5a                   	pop    edx
c00140da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140dd:	68 30 9b 03 c0       	push   0xc0039b30
c00140e2:	e8 03 8d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00140e7:	59                   	pop    ecx
c00140e8:	58                   	pop    eax
c00140e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140ec:	68 3b 9b 03 c0       	push   0xc0039b3b
c00140f1:	e8 f4 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00140f6:	58                   	pop    eax
c00140f7:	5a                   	pop    edx
c00140f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140fb:	68 46 9b 03 c0       	push   0xc0039b46
c0014100:	e8 e5 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014105:	59                   	pop    ecx
c0014106:	58                   	pop    eax
c0014107:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001410a:	68 51 9b 03 c0       	push   0xc0039b51
c001410f:	e8 d6 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014114:	58                   	pop    eax
c0014115:	5a                   	pop    edx
c0014116:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014119:	68 5c 9b 03 c0       	push   0xc0039b5c
c001411e:	e8 c7 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014123:	59                   	pop    ecx
c0014124:	58                   	pop    eax
c0014125:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014128:	68 76 9b 03 c0       	push   0xc0039b76
c001412d:	e8 b8 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014132:	58                   	pop    eax
c0014133:	5a                   	pop    edx
c0014134:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014137:	68 67 9b 03 c0       	push   0xc0039b67
c001413c:	e8 a9 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014141:	59                   	pop    ecx
c0014142:	58                   	pop    eax
c0014143:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014146:	68 72 9b 03 c0       	push   0xc0039b72
c001414b:	e8 9a 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014150:	58                   	pop    eax
c0014151:	5a                   	pop    edx
c0014152:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014155:	68 81 9b 03 c0       	push   0xc0039b81
c001415a:	e8 8b 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001415f:	59                   	pop    ecx
c0014160:	58                   	pop    eax
c0014161:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014164:	68 8c 9b 03 c0       	push   0xc0039b8c
c0014169:	e8 7c 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001416e:	58                   	pop    eax
c001416f:	5a                   	pop    edx
c0014170:	57                   	push   edi
c0014171:	68 97 9b 03 c0       	push   0xc0039b97
c0014176:	e8 6f 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001417b:	59                   	pop    ecx
c001417c:	58                   	pop    eax
c001417d:	56                   	push   esi
c001417e:	68 a2 9b 03 c0       	push   0xc0039ba2
c0014183:	e8 62 8c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014188:	58                   	pop    eax
c0014189:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001418e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014194:	e8 d8 c3 ff ff       	call   c0010571 <setActiveTerminal(VgaText*)>
c0014199:	58                   	pop    eax
c001419a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001419d:	5a                   	pop    edx
c001419e:	c1 e0 05             	shl    eax,0x5
c00141a1:	05 e0 ad 03 c0       	add    eax,0xc003ade0
c00141a6:	50                   	push   eax
c00141a7:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00141ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b2:	e8 d9 c7 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00141b7:	59                   	pop    ecx
c00141b8:	58                   	pop    eax
c00141b9:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00141be:	68 ad 9b 03 c0       	push   0xc0039bad
c00141c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c9:	e8 c2 c7 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00141ce:	58                   	pop    eax
c00141cf:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00141d4:	5a                   	pop    edx
c00141d5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141de:	e8 d3 c7 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c00141e3:	59                   	pop    ecx
c00141e4:	58                   	pop    eax
c00141e5:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00141ea:	68 b5 9b 03 c0       	push   0xc0039bb5
c00141ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f5:	e8 96 c7 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00141fa:	58                   	pop    eax
c00141fb:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014200:	5a                   	pop    edx
c0014201:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001420a:	e8 a7 c7 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001420f:	59                   	pop    ecx
c0014210:	58                   	pop    eax
c0014211:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014216:	68 bd 9b 03 c0       	push   0xc0039bbd
c001421b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014221:	e8 6a c7 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014226:	58                   	pop    eax
c0014227:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001422c:	5a                   	pop    edx
c001422d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014230:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014236:	e8 7b c7 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001423b:	59                   	pop    ecx
c001423c:	58                   	pop    eax
c001423d:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014242:	68 c5 9b 03 c0       	push   0xc0039bc5
c0014247:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001424d:	e8 3e c7 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014252:	58                   	pop    eax
c0014253:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014258:	5a                   	pop    edx
c0014259:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001425c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014262:	e8 4f c7 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c0014267:	59                   	pop    ecx
c0014268:	58                   	pop    eax
c0014269:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001426e:	68 cd 9b 03 c0       	push   0xc0039bcd
c0014273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014279:	e8 12 c7 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c001427e:	58                   	pop    eax
c001427f:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014284:	5a                   	pop    edx
c0014285:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014288:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001428e:	e8 23 c7 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c0014293:	59                   	pop    ecx
c0014294:	58                   	pop    eax
c0014295:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001429a:	68 d5 9b 03 c0       	push   0xc0039bd5
c001429f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a5:	e8 e6 c6 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00142aa:	58                   	pop    eax
c00142ab:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00142b0:	5a                   	pop    edx
c00142b1:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ba:	e8 f7 c6 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c00142bf:	59                   	pop    ecx
c00142c0:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00142c5:	5b                   	pop    ebx
c00142c6:	68 dd 9b 03 c0       	push   0xc0039bdd
c00142cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d1:	e8 ba c6 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00142d6:	58                   	pop    eax
c00142d7:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00142dc:	5a                   	pop    edx
c00142dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142e1:	52                   	push   edx
c00142e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e8:	e8 c9 c6 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c00142ed:	59                   	pop    ecx
c00142ee:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00142f3:	5b                   	pop    ebx
c00142f4:	68 e6 9b 03 c0       	push   0xc0039be6
c00142f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ff:	e8 8c c6 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014304:	58                   	pop    eax
c0014305:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001430a:	5a                   	pop    edx
c001430b:	57                   	push   edi
c001430c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014312:	e8 9f c6 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c0014317:	59                   	pop    ecx
c0014318:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001431d:	5b                   	pop    ebx
c001431e:	68 ee 9b 03 c0       	push   0xc0039bee
c0014323:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014329:	e8 62 c6 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c001432e:	5f                   	pop    edi
c001432f:	58                   	pop    eax
c0014330:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014335:	56                   	push   esi
c0014336:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001433c:	e8 75 c6 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c0014341:	58                   	pop    eax
c0014342:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014347:	5a                   	pop    edx
c0014348:	68 f6 9b 03 c0       	push   0xc0039bf6
c001434d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014353:	e8 38 c6 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014358:	59                   	pop    ecx
c0014359:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c001435e:	5b                   	pop    ebx
c001435f:	55                   	push   ebp
c0014360:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014366:	e8 4b c6 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001436b:	5e                   	pop    esi
c001436c:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014371:	5f                   	pop    edi
c0014372:	68 fe 9b 03 c0       	push   0xc0039bfe
c0014377:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001437d:	e8 0e c6 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014382:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014387:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001438d:	e8 ce ab 00 00       	call   c001ef60 <CPU::readDR0()>
c0014392:	5d                   	pop    ebp
c0014393:	5a                   	pop    edx
c0014394:	50                   	push   eax
c0014395:	53                   	push   ebx
c0014396:	e8 1b c6 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001439b:	59                   	pop    ecx
c001439c:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00143a1:	5b                   	pop    ebx
c00143a2:	68 07 9c 03 c0       	push   0xc0039c07
c00143a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ad:	e8 de c5 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00143b2:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00143b7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143bd:	e8 b0 ab 00 00       	call   c001ef72 <CPU::readDR1()>
c00143c2:	5e                   	pop    esi
c00143c3:	5f                   	pop    edi
c00143c4:	50                   	push   eax
c00143c5:	53                   	push   ebx
c00143c6:	e8 eb c5 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c00143cb:	5d                   	pop    ebp
c00143cc:	58                   	pop    eax
c00143cd:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00143d2:	68 0f 9c 03 c0       	push   0xc0039c0f
c00143d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143dd:	e8 ae c5 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c00143e2:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c00143e7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143ed:	e8 92 ab 00 00       	call   c001ef84 <CPU::readDR2()>
c00143f2:	5a                   	pop    edx
c00143f3:	59                   	pop    ecx
c00143f4:	50                   	push   eax
c00143f5:	53                   	push   ebx
c00143f6:	e8 bb c5 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c00143fb:	5b                   	pop    ebx
c00143fc:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014401:	5e                   	pop    esi
c0014402:	68 17 9c 03 c0       	push   0xc0039c17
c0014407:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001440d:	e8 7e c5 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014412:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014417:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001441d:	e8 74 ab 00 00       	call   c001ef96 <CPU::readDR3()>
c0014422:	5f                   	pop    edi
c0014423:	5d                   	pop    ebp
c0014424:	50                   	push   eax
c0014425:	53                   	push   ebx
c0014426:	e8 8b c5 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001442b:	58                   	pop    eax
c001442c:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014431:	5a                   	pop    edx
c0014432:	68 1f 9c 03 c0       	push   0xc0039c1f
c0014437:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001443d:	e8 4e c5 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014442:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014447:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001444d:	e8 56 ab 00 00       	call   c001efa8 <CPU::readDR6()>
c0014452:	59                   	pop    ecx
c0014453:	5e                   	pop    esi
c0014454:	50                   	push   eax
c0014455:	53                   	push   ebx
c0014456:	e8 5b c5 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001445b:	5f                   	pop    edi
c001445c:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014461:	5d                   	pop    ebp
c0014462:	68 27 9c 03 c0       	push   0xc0039c27
c0014467:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001446d:	e8 1e c5 ff ff       	call   c0010990 <VgaText::puts(char const*)>
c0014472:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014477:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001447d:	e8 38 ab 00 00       	call   c001efba <CPU::readDR7()>
c0014482:	5a                   	pop    edx
c0014483:	59                   	pop    ecx
c0014484:	50                   	push   eax
c0014485:	53                   	push   ebx
c0014486:	e8 2b c5 ff ff       	call   c00109b6 <VgaText::putx(unsigned int)>
c001448b:	fa                   	cli    
c001448c:	f4                   	hlt    
c001448d:	83 c4 10             	add    esp,0x10
c0014490:	eb fe                	jmp    c0014490 <displayDebugInfo(regs*)+0x3e0>

c0014492 <gpFault(regs*, void*)>:
c0014492:	53                   	push   ebx
c0014493:	83 ec 14             	sub    esp,0x14
c0014496:	c7 05 08 be 03 c0 b5 86 01 c0 	mov    DWORD PTR ds:0xc003be08,0xc00186b5
c00144a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a4:	53                   	push   ebx
c00144a5:	e8 0b 42 00 00       	call   c00186b5 <vm8086FaultHandler(regs*)>
c00144aa:	83 c4 10             	add    esp,0x10
c00144ad:	84 c0                	test   al,al
c00144af:	74 05                	je     c00144b6 <gpFault(regs*, void*)+0x24>
c00144b1:	83 c4 08             	add    esp,0x8
c00144b4:	5b                   	pop    ebx
c00144b5:	c3                   	ret    
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	68 2f 9c 03 c0       	push   0xc0039c2f
c00144be:	e8 27 89 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00144c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144c6:	e8 e5 fb ff ff       	call   c00140b0 <displayDebugInfo(regs*)>

c00144cb <pgFault(regs*, void*)>:
c00144cb:	83 ec 18             	sub    esp,0x18
c00144ce:	68 4a 9c 03 c0       	push   0xc0039c4a
c00144d3:	e8 12 89 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00144d8:	58                   	pop    eax
c00144d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144dd:	e8 ce fb ff ff       	call   c00140b0 <displayDebugInfo(regs*)>

c00144e2 <otherISRHandler(regs*, void*)>:
c00144e2:	53                   	push   ebx
c00144e3:	83 ec 0c             	sub    esp,0xc
c00144e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144ea:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00144ed:	50                   	push   eax
c00144ee:	50                   	push   eax
c00144ef:	68 57 9c 03 c0       	push   0xc0039c57
c00144f4:	e8 f1 88 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00144f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144fc:	e8 af fb ff ff       	call   c00140b0 <displayDebugInfo(regs*)>

c0014501 <opcodeFault(regs*, void*)>:
c0014501:	53                   	push   ebx
c0014502:	83 ec 08             	sub    esp,0x8
c0014505:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014509:	e8 c2 2b 00 00       	call   c00170d0 <thisCPU()>
c001450e:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0014515:	74 16                	je     c001452d <opcodeFault(regs*, void*)+0x2c>
c0014517:	83 ec 0c             	sub    esp,0xc
c001451a:	68 d4 9a 03 c0       	push   0xc0039ad4
c001451f:	e8 c6 88 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014524:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0014528:	83 c4 18             	add    esp,0x18
c001452b:	5b                   	pop    ebx
c001452c:	c3                   	ret    
c001452d:	83 ec 0c             	sub    esp,0xc
c0014530:	68 74 9c 03 c0       	push   0xc0039c74
c0014535:	e8 b0 88 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001453a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001453d:	c1 e0 04             	shl    eax,0x4
c0014540:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0014543:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0014547:	89 14 24             	mov    DWORD PTR [esp],edx
c001454a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001454e:	52                   	push   edx
c001454f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014553:	52                   	push   edx
c0014554:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0014557:	50                   	push   eax
c0014558:	68 f8 9a 03 c0       	push   0xc0039af8
c001455d:	e8 88 88 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014562:	83 c4 14             	add    esp,0x14
c0014565:	53                   	push   ebx
c0014566:	e8 45 fb ff ff       	call   c00140b0 <displayDebugInfo(regs*)>

c001456b <displayProgramFault(char const*)>:
c001456b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014570:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014573:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014579:	85 c0                	test   eax,eax
c001457b:	74 15                	je     c0014592 <displayProgramFault(char const*)+0x27>
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	6a 04                	push   0x4
c0014582:	6a 0f                	push   0xf
c0014584:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014588:	50                   	push   eax
c0014589:	e8 c4 c0 ff ff       	call   c0010652 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001458e:	83 c4 1c             	add    esp,0x1c
c0014591:	c3                   	ret    
c0014592:	c3                   	ret    
c0014593:	90                   	nop

c0014594 <InterruptController::convertLegacyIRQNumber(int)>:
c0014594:	53                   	push   ebx
c0014595:	83 ec 14             	sub    esp,0x14
c0014598:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001459c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a0:	e8 e1 f3 ff ff       	call   c0013986 <Device::getName()>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145ab:	74 07                	je     c00145b4 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00145ad:	89 d8                	mov    eax,ebx
c00145af:	83 c4 08             	add    esp,0x8
c00145b2:	5b                   	pop    ebx
c00145b3:	c3                   	ret    
c00145b4:	83 fb 0f             	cmp    ebx,0xf
c00145b7:	7f 0e                	jg     c00145c7 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00145b9:	0f b6 9b 80 b0 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4f80]
c00145c0:	83 c4 08             	add    esp,0x8
c00145c3:	89 d8                	mov    eax,ebx
c00145c5:	5b                   	pop    ebx
c00145c6:	c3                   	ret    
c00145c7:	83 ec 0c             	sub    esp,0xc
c00145ca:	68 24 9a 03 c0       	push   0xc0039a24
c00145cf:	e8 34 89 ff ff       	call   c000cf08 <panic(char const*)>
c00145d4:	89 d8                	mov    eax,ebx
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	83 c4 08             	add    esp,0x8
c00145dc:	5b                   	pop    ebx
c00145dd:	c3                   	ret    

c00145de <setupInterruptController()>:
c00145de:	56                   	push   esi
c00145df:	53                   	push   ebx
c00145e0:	51                   	push   ecx
c00145e1:	e8 e7 2a 00 00       	call   c00170cd <getCPUNumber()>
c00145e6:	85 c0                	test   eax,eax
c00145e8:	0f 85 10 02 00 00    	jne    c00147fe <setupInterruptController()+0x220>
c00145ee:	83 ec 0c             	sub    esp,0xc
c00145f1:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c00145f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00145fc:	68 58 21 00 00       	push   0x2158
c0014601:	83 e0 01             	and    eax,0x1
c0014604:	89 c6                	mov    esi,eax
c0014606:	e8 8f dd ff ff       	call   c001239a <operator new(unsigned long)>
c001460b:	89 04 24             	mov    DWORD PTR [esp],eax
c001460e:	89 c3                	mov    ebx,eax
c0014610:	e8 15 95 00 00       	call   c001db2a <PIC::PIC()>
c0014615:	6a 00                	push   0x0
c0014617:	6a 00                	push   0x0
c0014619:	6a 00                	push   0x0
c001461b:	53                   	push   ebx
c001461c:	e8 4d 98 00 00       	call   c001de6e <PIC::open(int, int, void*)>
c0014621:	83 c4 20             	add    esp,0x20
c0014624:	89 f0                	mov    eax,esi
c0014626:	84 c0                	test   al,al
c0014628:	0f 85 92 01 00 00    	jne    c00147c0 <setupInterruptController()+0x1e2>
c001462e:	83 ec 08             	sub    esp,0x8
c0014631:	53                   	push   ebx
c0014632:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c0014638:	e8 67 f0 ff ff       	call   c00136a4 <Device::addChild(Device*)>
c001463d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001463f:	6a 00                	push   0x0
c0014641:	68 e2 44 01 c0       	push   0xc00144e2
c0014646:	6a 00                	push   0x0
c0014648:	53                   	push   ebx
c0014649:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001464c:	83 c4 20             	add    esp,0x20
c001464f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014651:	6a 00                	push   0x0
c0014653:	68 e2 44 01 c0       	push   0xc00144e2
c0014658:	6a 01                	push   0x1
c001465a:	53                   	push   ebx
c001465b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001465e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014660:	6a 00                	push   0x0
c0014662:	68 13 3f 01 c0       	push   0xc0013f13
c0014667:	6a 02                	push   0x2
c0014669:	53                   	push   ebx
c001466a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001466d:	83 c4 20             	add    esp,0x20
c0014670:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014672:	6a 00                	push   0x0
c0014674:	68 e2 44 01 c0       	push   0xc00144e2
c0014679:	6a 03                	push   0x3
c001467b:	53                   	push   ebx
c001467c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001467f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014681:	6a 00                	push   0x0
c0014683:	68 e2 44 01 c0       	push   0xc00144e2
c0014688:	6a 04                	push   0x4
c001468a:	53                   	push   ebx
c001468b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001468e:	83 c4 20             	add    esp,0x20
c0014691:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014693:	6a 00                	push   0x0
c0014695:	68 e2 44 01 c0       	push   0xc00144e2
c001469a:	6a 05                	push   0x5
c001469c:	53                   	push   ebx
c001469d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146a2:	6a 00                	push   0x0
c00146a4:	68 01 45 01 c0       	push   0xc0014501
c00146a9:	6a 06                	push   0x6
c00146ab:	53                   	push   ebx
c00146ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146af:	83 c4 20             	add    esp,0x20
c00146b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146b4:	6a 00                	push   0x0
c00146b6:	68 e2 44 01 c0       	push   0xc00144e2
c00146bb:	6a 07                	push   0x7
c00146bd:	53                   	push   ebx
c00146be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146c3:	6a 00                	push   0x0
c00146c5:	68 3a 3d 01 c0       	push   0xc0013d3a
c00146ca:	6a 08                	push   0x8
c00146cc:	53                   	push   ebx
c00146cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146d0:	83 c4 20             	add    esp,0x20
c00146d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146d5:	6a 00                	push   0x0
c00146d7:	68 e2 44 01 c0       	push   0xc00144e2
c00146dc:	6a 09                	push   0x9
c00146de:	53                   	push   ebx
c00146df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146e4:	6a 00                	push   0x0
c00146e6:	68 e2 44 01 c0       	push   0xc00144e2
c00146eb:	6a 0a                	push   0xa
c00146ed:	53                   	push   ebx
c00146ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146f1:	83 c4 20             	add    esp,0x20
c00146f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146f6:	6a 00                	push   0x0
c00146f8:	68 e2 44 01 c0       	push   0xc00144e2
c00146fd:	6a 0b                	push   0xb
c00146ff:	53                   	push   ebx
c0014700:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014703:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014705:	6a 00                	push   0x0
c0014707:	68 e2 44 01 c0       	push   0xc00144e2
c001470c:	6a 0c                	push   0xc
c001470e:	53                   	push   ebx
c001470f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014712:	83 c4 20             	add    esp,0x20
c0014715:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014717:	6a 00                	push   0x0
c0014719:	68 92 44 01 c0       	push   0xc0014492
c001471e:	6a 0d                	push   0xd
c0014720:	53                   	push   ebx
c0014721:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014726:	6a 00                	push   0x0
c0014728:	68 cb 44 01 c0       	push   0xc00144cb
c001472d:	6a 0e                	push   0xe
c001472f:	53                   	push   ebx
c0014730:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014733:	83 c4 20             	add    esp,0x20
c0014736:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014738:	6a 00                	push   0x0
c001473a:	68 e2 44 01 c0       	push   0xc00144e2
c001473f:	6a 0f                	push   0xf
c0014741:	53                   	push   ebx
c0014742:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014745:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014747:	6a 00                	push   0x0
c0014749:	68 e2 44 01 c0       	push   0xc00144e2
c001474e:	6a 10                	push   0x10
c0014750:	53                   	push   ebx
c0014751:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014754:	83 c4 20             	add    esp,0x20
c0014757:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014759:	6a 00                	push   0x0
c001475b:	68 e2 44 01 c0       	push   0xc00144e2
c0014760:	6a 11                	push   0x11
c0014762:	53                   	push   ebx
c0014763:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014768:	6a 00                	push   0x0
c001476a:	68 e2 44 01 c0       	push   0xc00144e2
c001476f:	6a 12                	push   0x12
c0014771:	53                   	push   ebx
c0014772:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014775:	83 c4 20             	add    esp,0x20
c0014778:	8b 03                	mov    eax,DWORD PTR [ebx]
c001477a:	6a 00                	push   0x0
c001477c:	68 e2 44 01 c0       	push   0xc00144e2
c0014781:	6a 13                	push   0x13
c0014783:	53                   	push   ebx
c0014784:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014787:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014789:	6a 00                	push   0x0
c001478b:	68 e2 44 01 c0       	push   0xc00144e2
c0014790:	6a 14                	push   0x14
c0014792:	53                   	push   ebx
c0014793:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014796:	83 c4 20             	add    esp,0x20
c0014799:	8b 03                	mov    eax,DWORD PTR [ebx]
c001479b:	6a 00                	push   0x0
c001479d:	68 e2 44 01 c0       	push   0xc00144e2
c00147a2:	6a 1e                	push   0x1e
c00147a4:	53                   	push   ebx
c00147a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147aa:	6a 00                	push   0x0
c00147ac:	68 48 fd 00 c0       	push   0xc000fd48
c00147b1:	6a 60                	push   0x60
c00147b3:	53                   	push   ebx
c00147b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147b7:	83 c4 20             	add    esp,0x20
c00147ba:	89 d8                	mov    eax,ebx
c00147bc:	5a                   	pop    edx
c00147bd:	5b                   	pop    ebx
c00147be:	5e                   	pop    esi
c00147bf:	c3                   	ret    
c00147c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147c2:	6a 00                	push   0x0
c00147c4:	6a 00                	push   0x0
c00147c6:	6a 00                	push   0x0
c00147c8:	53                   	push   ebx
c00147c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147d1:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00147d4:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00147db:	e8 ba db ff ff       	call   c001239a <operator new(unsigned long)>
c00147e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00147e3:	89 c3                	mov    ebx,eax
c00147e5:	e8 7e 8e 00 00       	call   c001d668 <APIC::APIC()>
c00147ea:	6a 00                	push   0x0
c00147ec:	6a 00                	push   0x0
c00147ee:	6a 00                	push   0x0
c00147f0:	53                   	push   ebx
c00147f1:	e8 90 8d 00 00       	call   c001d586 <APIC::open(int, int, void*)>
c00147f6:	83 c4 20             	add    esp,0x20
c00147f9:	e9 30 fe ff ff       	jmp    c001462e <setupInterruptController()+0x50>
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	68 58 21 00 00       	push   0x2158
c0014806:	e8 8f db ff ff       	call   c001239a <operator new(unsigned long)>
c001480b:	89 04 24             	mov    DWORD PTR [esp],eax
c001480e:	89 c3                	mov    ebx,eax
c0014810:	e8 53 8e 00 00       	call   c001d668 <APIC::APIC()>
c0014815:	6a 00                	push   0x0
c0014817:	6a 00                	push   0x0
c0014819:	6a 00                	push   0x0
c001481b:	53                   	push   ebx
c001481c:	e8 65 8d 00 00       	call   c001d586 <APIC::open(int, int, void*)>
c0014821:	83 c4 18             	add    esp,0x18
c0014824:	53                   	push   ebx
c0014825:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001482b:	e8 74 ee ff ff       	call   c00136a4 <Device::addChild(Device*)>
c0014830:	83 c4 10             	add    esp,0x10
c0014833:	89 d8                	mov    eax,ebx
c0014835:	5a                   	pop    edx
c0014836:	5b                   	pop    ebx
c0014837:	5e                   	pop    esi
c0014838:	c3                   	ret    
c0014839:	90                   	nop

c001483a <startGUI(void*)>:
c001483a:	55                   	push   ebp
c001483b:	89 e5                	mov    ebp,esp
c001483d:	53                   	push   ebx
c001483e:	83 ec 04             	sub    esp,0x4
c0014841:	e8 48 9a ff ff       	call   c000e28e <unlockScheduler()>
c0014846:	e8 2c 9a ff ff       	call   c000e277 <getIRQNestingLevel()>
c001484b:	83 ec 08             	sub    esp,0x8
c001484e:	50                   	push   eax
c001484f:	68 d0 9c 03 c0       	push   0xc0039cd0
c0014854:	e8 91 85 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0014859:	83 c4 10             	add    esp,0x10
c001485c:	8b 1d 28 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b928
c0014862:	83 ec 0c             	sub    esp,0xc
c0014865:	68 ea 9c 03 c0       	push   0xc0039cea
c001486a:	e8 5c 7d ff ff       	call   c000c5cb <loadDLL(char const*)>
c001486f:	83 c4 10             	add    esp,0x10
c0014872:	83 ec 08             	sub    esp,0x8
c0014875:	53                   	push   ebx
c0014876:	50                   	push   eax
c0014877:	e8 18 7e ff ff       	call   c000c694 <executeDLL(unsigned long, void*)>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	8b 1d 28 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b928
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	68 04 9d 03 c0       	push   0xc0039d04
c001488d:	e8 39 7d ff ff       	call   c000c5cb <loadDLL(char const*)>
c0014892:	83 c4 10             	add    esp,0x10
c0014895:	83 ec 08             	sub    esp,0x8
c0014898:	53                   	push   ebx
c0014899:	50                   	push   eax
c001489a:	e8 f5 7d ff ff       	call   c000c694 <executeDLL(unsigned long, void*)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	90                   	nop
c00148a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00148a6:	c9                   	leave  
c00148a7:	c3                   	ret    

c00148a8 <sendKeyToTerminal(unsigned char)>:
c00148a8:	55                   	push   ebp
c00148a9:	89 e5                	mov    ebp,esp
c00148ab:	83 ec 28             	sub    esp,0x28
c00148ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00148b4:	a1 c4 bd 03 c0       	mov    eax,ds:0xc003bdc4
c00148b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00148bd:	83 ec 08             	sub    esp,0x8
c00148c0:	52                   	push   edx
c00148c1:	50                   	push   eax
c00148c2:	e8 c7 c2 ff ff       	call   c0010b8e <VgaText::receiveKey(unsigned char)>
c00148c7:	83 c4 10             	add    esp,0x10
c00148ca:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00148ce:	75 41                	jne    c0014911 <sendKeyToTerminal(unsigned char)+0x69>
c00148d0:	e8 de 99 ff ff       	call   c000e2b3 <lockStuff()>
c00148d5:	a1 20 be 03 c0       	mov    eax,ds:0xc003be20
c00148da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00148dd:	c7 05 20 be 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003be20,0x0
c00148e7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00148eb:	74 1f                	je     c001490c <sendKeyToTerminal(unsigned char)+0x64>
c00148ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00148f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00148f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00148f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00148fc:	83 ec 0c             	sub    esp,0xc
c00148ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014902:	e8 a9 a1 ff ff       	call   c000eab0 <unblockTask(ThreadControlBlock*)>
c0014907:	83 c4 10             	add    esp,0x10
c001490a:	eb db                	jmp    c00148e7 <sendKeyToTerminal(unsigned char)+0x3f>
c001490c:	e8 34 9d ff ff       	call   c000e645 <unlockStuff()>
c0014911:	90                   	nop
c0014912:	c9                   	leave  
c0014913:	c3                   	ret    

c0014914 <sendKeyboardToken(KeyboardToken)>:
c0014914:	55                   	push   ebp
c0014915:	89 e5                	mov    ebp,esp
c0014917:	83 ec 18             	sub    esp,0x18
c001491a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001491d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014920:	0f b7 c0             	movzx  eax,ax
c0014923:	83 f2 01             	xor    edx,0x1
c0014926:	88 90 40 be 03 c0    	mov    BYTE PTR [eax-0x3ffc41c0],dl
c001492c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001492f:	66 3d 03 02          	cmp    ax,0x203
c0014933:	75 07                	jne    c001493c <sendKeyboardToken(KeyboardToken)+0x28>
c0014935:	a0 40 bf 03 c0       	mov    al,ds:0xc003bf40
c001493a:	84 c0                	test   al,al
c001493c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014940:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014943:	a0 48 c2 03 c0       	mov    al,ds:0xc003c248
c0014948:	38 c2                	cmp    dl,al
c001494a:	74 1c                	je     c0014968 <sendKeyboardToken(KeyboardToken)+0x54>
c001494c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001494f:	a2 48 c2 03 c0       	mov    ds:0xc003c248,al
c0014954:	a0 48 c2 03 c0       	mov    al,ds:0xc003c248
c0014959:	0f b6 c0             	movzx  eax,al
c001495c:	83 ec 0c             	sub    esp,0xc
c001495f:	50                   	push   eax
c0014960:	e8 97 b4 ff ff       	call   c000fdfc <setTerminalScrollLock(bool)>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001496b:	84 c0                	test   al,al
c001496d:	0f 84 ae 00 00 00    	je     c0014a21 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014976:	66 3d 10 03          	cmp    ax,0x310
c001497a:	75 06                	jne    c0014982 <sendKeyboardToken(KeyboardToken)+0x6e>
c001497c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014985:	66 3d 11 03          	cmp    ax,0x311
c0014989:	75 06                	jne    c0014991 <sendKeyboardToken(KeyboardToken)+0x7d>
c001498b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014994:	66 3d 12 03          	cmp    ax,0x312
c0014998:	75 06                	jne    c00149a0 <sendKeyboardToken(KeyboardToken)+0x8c>
c001499a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00149a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a3:	66 3d 13 03          	cmp    ax,0x313
c00149a7:	75 06                	jne    c00149af <sendKeyboardToken(KeyboardToken)+0x9b>
c00149a9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00149af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b2:	66 3d 14 03          	cmp    ax,0x314
c00149b6:	75 06                	jne    c00149be <sendKeyboardToken(KeyboardToken)+0xaa>
c00149b8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00149be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c1:	66 3d 15 03          	cmp    ax,0x315
c00149c5:	75 06                	jne    c00149cd <sendKeyboardToken(KeyboardToken)+0xb9>
c00149c7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00149cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d0:	66 3d 16 03          	cmp    ax,0x316
c00149d4:	75 06                	jne    c00149dc <sendKeyboardToken(KeyboardToken)+0xc8>
c00149d6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00149dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149df:	66 3d 17 03          	cmp    ax,0x317
c00149e3:	75 06                	jne    c00149eb <sendKeyboardToken(KeyboardToken)+0xd7>
c00149e5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00149eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ee:	66 3d 18 03          	cmp    ax,0x318
c00149f2:	75 06                	jne    c00149fa <sendKeyboardToken(KeyboardToken)+0xe6>
c00149f4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00149fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fd:	66 3d 19 03          	cmp    ax,0x319
c0014a01:	75 06                	jne    c0014a09 <sendKeyboardToken(KeyboardToken)+0xf5>
c0014a03:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0c:	66 3d 1a 03          	cmp    ax,0x31a
c0014a10:	0f 85 c9 00 00 00    	jne    c0014adf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014a16:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014a1c:	e9 be 00 00 00       	jmp    c0014adf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a24:	66 3d 10 03          	cmp    ax,0x310
c0014a28:	75 0a                	jne    c0014a34 <sendKeyboardToken(KeyboardToken)+0x120>
c0014a2a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014a30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a37:	66 3d 11 03          	cmp    ax,0x311
c0014a3b:	75 0a                	jne    c0014a47 <sendKeyboardToken(KeyboardToken)+0x133>
c0014a3d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014a43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4a:	66 3d 12 03          	cmp    ax,0x312
c0014a4e:	75 0a                	jne    c0014a5a <sendKeyboardToken(KeyboardToken)+0x146>
c0014a50:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014a56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5d:	66 3d 13 03          	cmp    ax,0x313
c0014a61:	75 0a                	jne    c0014a6d <sendKeyboardToken(KeyboardToken)+0x159>
c0014a63:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014a69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a70:	66 3d 14 03          	cmp    ax,0x314
c0014a74:	75 0a                	jne    c0014a80 <sendKeyboardToken(KeyboardToken)+0x16c>
c0014a76:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014a7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a83:	66 3d 15 03          	cmp    ax,0x315
c0014a87:	75 0a                	jne    c0014a93 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014a89:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014a8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a96:	66 3d 16 03          	cmp    ax,0x316
c0014a9a:	75 0a                	jne    c0014aa6 <sendKeyboardToken(KeyboardToken)+0x192>
c0014a9c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014aa2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa9:	66 3d 17 03          	cmp    ax,0x317
c0014aad:	75 0a                	jne    c0014ab9 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014aaf:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014ab5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abc:	66 3d 18 03          	cmp    ax,0x318
c0014ac0:	75 0a                	jne    c0014acc <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014ac2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014ac8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014acf:	66 3d 19 03          	cmp    ax,0x319
c0014ad3:	75 0a                	jne    c0014adf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014ad5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014adb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae2:	66 3d 00 02          	cmp    ax,0x200
c0014ae6:	75 2a                	jne    c0014b12 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014ae8:	a0 40 c2 03 c0       	mov    al,ds:0xc003c240
c0014aed:	83 f0 01             	xor    eax,0x1
c0014af0:	84 c0                	test   al,al
c0014af2:	74 1e                	je     c0014b12 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014af4:	a1 7c bb 03 c0       	mov    eax,ds:0xc003bb7c
c0014af9:	6a 01                	push   0x1
c0014afb:	6a 00                	push   0x0
c0014afd:	68 3a 48 01 c0       	push   0xc001483a
c0014b02:	50                   	push   eax
c0014b03:	e8 ae 98 ff ff       	call   c000e3b6 <Process::createThread(void (*)(void*), void*, int)>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	c6 05 40 c2 03 c0 01 	mov    BYTE PTR ds:0xc003c240,0x1
c0014b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b15:	66 3d 1d 03          	cmp    ax,0x31d
c0014b19:	75 06                	jne    c0014b21 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014b1b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b24:	66 3d 1c 03          	cmp    ax,0x31c
c0014b28:	75 06                	jne    c0014b30 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014b2a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b33:	66 3d 1b 03          	cmp    ax,0x31b
c0014b37:	75 06                	jne    c0014b3f <sendKeyboardToken(KeyboardToken)+0x22b>
c0014b39:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b42:	66 3d 1e 03          	cmp    ax,0x31e
c0014b46:	75 06                	jne    c0014b4e <sendKeyboardToken(KeyboardToken)+0x23a>
c0014b48:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b51:	66 3d 1f 03          	cmp    ax,0x31f
c0014b55:	75 06                	jne    c0014b5d <sendKeyboardToken(KeyboardToken)+0x249>
c0014b57:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b60:	66 3d 1a 03          	cmp    ax,0x31a
c0014b64:	75 06                	jne    c0014b6c <sendKeyboardToken(KeyboardToken)+0x258>
c0014b66:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014b6c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014b70:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014b73:	83 f0 01             	xor    eax,0x1
c0014b76:	84 c0                	test   al,al
c0014b78:	74 77                	je     c0014bf1 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014b7a:	a0 41 bf 03 c0       	mov    al,ds:0xc003bf41
c0014b7f:	84 c0                	test   al,al
c0014b81:	74 41                	je     c0014bc4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014b83:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014b87:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014b8b:	74 2b                	je     c0014bb8 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014b8d:	8b 15 44 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c244
c0014b93:	89 d0                	mov    eax,edx
c0014b95:	c1 e0 02             	shl    eax,0x2
c0014b98:	01 d0                	add    eax,edx
c0014b9a:	01 c0                	add    eax,eax
c0014b9c:	a3 44 c2 03 c0       	mov    ds:0xc003c244,eax
c0014ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba4:	0f b7 c0             	movzx  eax,ax
c0014ba7:	8d 50 d0             	lea    edx,[eax-0x30]
c0014baa:	a1 44 c2 03 c0       	mov    eax,ds:0xc003c244
c0014baf:	01 d0                	add    eax,edx
c0014bb1:	a3 44 c2 03 c0       	mov    ds:0xc003c244,eax
c0014bb6:	eb 6d                	jmp    c0014c25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014bb8:	c7 05 44 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c244,0x0
c0014bc2:	eb 61                	jmp    c0014c25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014bc4:	a1 44 c2 03 c0       	mov    eax,ds:0xc003c244
c0014bc9:	85 c0                	test   eax,eax
c0014bcb:	74 18                	je     c0014be5 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014bcd:	a1 44 c2 03 c0       	mov    eax,ds:0xc003c244
c0014bd2:	0f b6 c0             	movzx  eax,al
c0014bd5:	83 ec 0c             	sub    esp,0xc
c0014bd8:	50                   	push   eax
c0014bd9:	e8 ca fc ff ff       	call   c00148a8 <sendKeyToTerminal(unsigned char)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014be5:	c7 05 44 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c244,0x0
c0014bef:	eb 34                	jmp    c0014c25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf4:	66 3d 01 01          	cmp    ax,0x101
c0014bf8:	75 2b                	jne    c0014c25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014bfa:	a1 44 c2 03 c0       	mov    eax,ds:0xc003c244
c0014bff:	85 c0                	test   eax,eax
c0014c01:	74 18                	je     c0014c1b <sendKeyboardToken(KeyboardToken)+0x307>
c0014c03:	a1 44 c2 03 c0       	mov    eax,ds:0xc003c244
c0014c08:	0f b6 c0             	movzx  eax,al
c0014c0b:	83 ec 0c             	sub    esp,0xc
c0014c0e:	50                   	push   eax
c0014c0f:	e8 94 fc ff ff       	call   c00148a8 <sendKeyToTerminal(unsigned char)>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c1b:	c7 05 44 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c244,0x0
c0014c25:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014c28:	83 f0 01             	xor    eax,0x1
c0014c2b:	84 c0                	test   al,al
c0014c2d:	74 4c                	je     c0014c7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014c2f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c32:	83 f0 01             	xor    eax,0x1
c0014c35:	84 c0                	test   al,al
c0014c37:	74 42                	je     c0014c7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014c39:	a0 40 bf 03 c0       	mov    al,ds:0xc003bf40
c0014c3e:	83 f0 01             	xor    eax,0x1
c0014c41:	84 c0                	test   al,al
c0014c43:	74 36                	je     c0014c7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c48:	66 83 f8 1f          	cmp    ax,0x1f
c0014c4c:	76 09                	jbe    c0014c57 <sendKeyboardToken(KeyboardToken)+0x343>
c0014c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c51:	66 83 f8 7e          	cmp    ax,0x7e
c0014c55:	76 12                	jbe    c0014c69 <sendKeyboardToken(KeyboardToken)+0x355>
c0014c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5a:	66 83 f8 0a          	cmp    ax,0xa
c0014c5e:	74 09                	je     c0014c69 <sendKeyboardToken(KeyboardToken)+0x355>
c0014c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c63:	66 83 f8 08          	cmp    ax,0x8
c0014c67:	75 12                	jne    c0014c7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6c:	0f b6 c0             	movzx  eax,al
c0014c6f:	83 ec 0c             	sub    esp,0xc
c0014c72:	50                   	push   eax
c0014c73:	e8 30 fc ff ff       	call   c00148a8 <sendKeyToTerminal(unsigned char)>
c0014c78:	83 c4 10             	add    esp,0x10
c0014c7b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014c7e:	83 f0 01             	xor    eax,0x1
c0014c81:	84 c0                	test   al,al
c0014c83:	74 4f                	je     c0014cd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014c85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c88:	83 f0 01             	xor    eax,0x1
c0014c8b:	84 c0                	test   al,al
c0014c8d:	74 45                	je     c0014cd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014c8f:	a0 40 bf 03 c0       	mov    al,ds:0xc003bf40
c0014c94:	84 c0                	test   al,al
c0014c96:	74 3c                	je     c0014cd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9b:	66 83 f8 3f          	cmp    ax,0x3f
c0014c9f:	76 33                	jbe    c0014cd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	66 83 f8 7f          	cmp    ax,0x7f
c0014ca8:	77 2a                	ja     c0014cd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	88 c2                	mov    dl,al
c0014caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb2:	66 83 f8 5f          	cmp    ax,0x5f
c0014cb6:	76 04                	jbe    c0014cbc <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014cb8:	b0 20                	mov    al,0x20
c0014cba:	eb 02                	jmp    c0014cbe <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014cbc:	b0 00                	mov    al,0x0
c0014cbe:	29 c2                	sub    edx,eax
c0014cc0:	88 d0                	mov    al,dl
c0014cc2:	83 e8 40             	sub    eax,0x40
c0014cc5:	0f b6 c0             	movzx  eax,al
c0014cc8:	83 ec 0c             	sub    esp,0xc
c0014ccb:	50                   	push   eax
c0014ccc:	e8 d7 fb ff ff       	call   c00148a8 <sendKeyToTerminal(unsigned char)>
c0014cd1:	83 c4 10             	add    esp,0x10
c0014cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd7:	66 3d 00 03          	cmp    ax,0x300
c0014cdb:	75 0f                	jne    c0014cec <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014cdd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014ce0:	83 f0 01             	xor    eax,0x1
c0014ce3:	84 c0                	test   al,al
c0014ce5:	74 05                	je     c0014cec <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014ce7:	e8 37 b9 ff ff       	call   c0010623 <doTerminalCycle()>
c0014cec:	90                   	nop
c0014ced:	c9                   	leave  
c0014cee:	c3                   	ret    

c0014cef <clearInternalKeybuffer(VgaText*)>:
c0014cef:	55                   	push   ebp
c0014cf0:	89 e5                	mov    ebp,esp
c0014cf2:	83 ec 08             	sub    esp,0x8
c0014cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf8:	05 34 11 00 00       	add    eax,0x1134
c0014cfd:	83 ec 0c             	sub    esp,0xc
c0014d00:	50                   	push   eax
c0014d01:	e8 d6 b9 fe ff       	call   c00006dc <strlen>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014d0c:	81 c2 34 11 00 00    	add    edx,0x1134
c0014d12:	83 ec 04             	sub    esp,0x4
c0014d15:	50                   	push   eax
c0014d16:	6a 00                	push   0x0
c0014d18:	52                   	push   edx
c0014d19:	e8 a2 b9 fe ff       	call   c00006c0 <memset>
c0014d1e:	83 c4 10             	add    esp,0x10
c0014d21:	90                   	nop
c0014d22:	c9                   	leave  
c0014d23:	c3                   	ret    

c0014d24 <readKeyboard(VgaText*, char*, unsigned long)>:
c0014d24:	55                   	push   ebp
c0014d25:	89 e5                	mov    ebp,esp
c0014d27:	83 ec 18             	sub    esp,0x18
c0014d2a:	fb                   	sti    
c0014d2b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014d32:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014d36:	74 77                	je     c0014daf <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014d38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014d41:	84 c0                	test   al,al
c0014d43:	75 02                	jne    c0014d47 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014d45:	eb f1                	jmp    c0014d38 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014d47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014d4a:	8d 50 01             	lea    edx,[eax+0x1]
c0014d4d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014d50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014d53:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014d59:	88 10                	mov    BYTE PTR [eax],dl
c0014d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014d64:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6a:	05 34 11 00 00       	add    eax,0x1134
c0014d6f:	83 ec 0c             	sub    esp,0xc
c0014d72:	50                   	push   eax
c0014d73:	e8 64 b9 fe ff       	call   c00006dc <strlen>
c0014d78:	83 c4 10             	add    esp,0x10
c0014d7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014d7e:	81 c2 34 11 00 00    	add    edx,0x1134
c0014d84:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014d87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014d8a:	81 c2 34 11 00 00    	add    edx,0x1134
c0014d90:	83 ec 04             	sub    esp,0x4
c0014d93:	50                   	push   eax
c0014d94:	51                   	push   ecx
c0014d95:	52                   	push   edx
c0014d96:	e8 11 b8 fe ff       	call   c00005ac <memmove>
c0014d9b:	83 c4 10             	add    esp,0x10
c0014d9e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014da1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014da8:	75 88                	jne    c0014d32 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014daa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dad:	eb 03                	jmp    c0014db2 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014daf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db2:	c9                   	leave  
c0014db3:	c3                   	ret    

c0014db4 <Keyboard::Keyboard(char const*)>:
c0014db4:	83 ec 0c             	sub    esp,0xc
c0014db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dbb:	83 ec 08             	sub    esp,0x8
c0014dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc2:	50                   	push   eax
c0014dc3:	e8 cc ea ff ff       	call   c0013894 <Device::Device(char const*)>
c0014dc8:	83 c4 10             	add    esp,0x10
c0014dcb:	ba 28 9d 03 c0       	mov    edx,0xc0039d28
c0014dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dd4:	89 10                	mov    DWORD PTR [eax],edx
c0014dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dda:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014de4:	c6 05 24 be 03 c0 01 	mov    BYTE PTR ds:0xc003be24,0x1
c0014deb:	90                   	nop
c0014dec:	83 c4 0c             	add    esp,0xc
c0014def:	c3                   	ret    

c0014df0 <Keyboard::~Keyboard()>:
c0014df0:	83 ec 0c             	sub    esp,0xc
c0014df3:	ba 28 9d 03 c0       	mov    edx,0xc0039d28
c0014df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dfc:	89 10                	mov    DWORD PTR [eax],edx
c0014dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e02:	83 ec 0c             	sub    esp,0xc
c0014e05:	50                   	push   eax
c0014e06:	e8 3b e7 ff ff       	call   c0013546 <Device::~Device()>
c0014e0b:	83 c4 10             	add    esp,0x10
c0014e0e:	90                   	nop
c0014e0f:	83 c4 0c             	add    esp,0xc
c0014e12:	c3                   	ret    
c0014e13:	90                   	nop

c0014e14 <Keyboard::~Keyboard()>:
c0014e14:	83 ec 0c             	sub    esp,0xc
c0014e17:	83 ec 0c             	sub    esp,0xc
c0014e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e1e:	e8 cd ff ff ff       	call   c0014df0 <Keyboard::~Keyboard()>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	83 ec 08             	sub    esp,0x8
c0014e29:	68 5c 01 00 00       	push   0x15c
c0014e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e32:	e8 72 d5 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	83 c4 0c             	add    esp,0xc
c0014e3d:	c3                   	ret    

c0014e3e <LogicalDisk::close(int, int, void*)>:
c0014e3e:	83 c8 ff             	or     eax,0xffffffff
c0014e41:	c3                   	ret    

c0014e42 <LogicalDisk::~LogicalDisk()>:
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	ba d8 9d 03 c0       	mov    edx,0xc0039dd8
c0014e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e4e:	89 10                	mov    DWORD PTR [eax],edx
c0014e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e54:	83 ec 0c             	sub    esp,0xc
c0014e57:	50                   	push   eax
c0014e58:	e8 e9 e6 ff ff       	call   c0013546 <Device::~Device()>
c0014e5d:	83 c4 10             	add    esp,0x10
c0014e60:	90                   	nop
c0014e61:	83 c4 0c             	add    esp,0xc
c0014e64:	c3                   	ret    
c0014e65:	90                   	nop

c0014e66 <LogicalDisk::~LogicalDisk()>:
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e70:	e8 cd ff ff ff       	call   c0014e42 <LogicalDisk::~LogicalDisk()>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	83 ec 08             	sub    esp,0x8
c0014e7b:	68 74 01 00 00       	push   0x174
c0014e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e84:	e8 20 d5 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0014e89:	83 c4 10             	add    esp,0x10
c0014e8c:	83 c4 0c             	add    esp,0xc
c0014e8f:	c3                   	ret    

c0014e90 <LogicalDisk::open(int, int, void*)>:
c0014e90:	83 ec 18             	sub    esp,0x18
c0014e93:	68 54 9d 03 c0       	push   0xc0039d54
c0014e98:	e8 6b 80 ff ff       	call   c000cf08 <panic(char const*)>
c0014e9d:	83 c8 ff             	or     eax,0xffffffff
c0014ea0:	83 c4 1c             	add    esp,0x1c
c0014ea3:	c3                   	ret    

c0014ea4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014ea4:	53                   	push   ebx
c0014ea5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014ea9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014eb1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014eb7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014ebd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014ec3:	77 10                	ja     c0014ed5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014ec5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014ecb:	89 d3                	mov    ebx,edx
c0014ecd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014ed3:	72 05                	jb     c0014eda <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014ed5:	83 c8 ff             	or     eax,0xffffffff
c0014ed8:	89 c2                	mov    edx,eax
c0014eda:	5b                   	pop    ebx
c0014edb:	c3                   	ret    

c0014edc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014edc:	56                   	push   esi
c0014edd:	83 c8 ff             	or     eax,0xffffffff
c0014ee0:	53                   	push   ebx
c0014ee1:	89 c2                	mov    edx,eax
c0014ee3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ee7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014eeb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014eef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014ef5:	77 27                	ja     c0014f1e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014ef7:	89 d8                	mov    eax,ebx
c0014ef9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014eff:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014f05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014f0a:	89 c2                	mov    edx,eax
c0014f0c:	73 10                	jae    c0014f1e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014f0e:	89 c8                	mov    eax,ecx
c0014f10:	89 da                	mov    edx,ebx
c0014f12:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014f18:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014f1e:	5b                   	pop    ebx
c0014f1f:	5e                   	pop    esi
c0014f20:	c3                   	ret    
c0014f21:	90                   	nop

c0014f22 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014f22:	83 ec 1c             	sub    esp,0x1c
c0014f25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f39:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014f40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f48:	83 ec 08             	sub    esp,0x8
c0014f4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f4f:	50                   	push   eax
c0014f50:	e8 3f e9 ff ff       	call   c0013894 <Device::Device(char const*)>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	ba d8 9d 03 c0       	mov    edx,0xc0039dd8
c0014f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f61:	89 10                	mov    DWORD PTR [eax],edx
c0014f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f67:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f72:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f7d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0014f87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014f8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014f8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014f93:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0014f99:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0014f9f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014fa3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014fa6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014faa:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0014fb0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0014fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014fbe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0014fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014fd2:	90                   	nop
c0014fd3:	83 c4 1c             	add    esp,0x1c
c0014fd6:	c3                   	ret    
c0014fd7:	90                   	nop

c0014fd8 <LogicalDisk::assignDriveLetter()>:
c0014fd8:	55                   	push   ebp
c0014fd9:	57                   	push   edi
c0014fda:	56                   	push   esi
c0014fdb:	53                   	push   ebx
c0014fdc:	83 ec 14             	sub    esp,0x14
c0014fdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014fe3:	8b 3d 60 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c260
c0014fe9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0014fef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0014ff3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0014ff9:	8b 3d 64 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c264
c0014fff:	3c 01                	cmp    al,0x1
c0015001:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015005:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015009:	19 c0                	sbb    eax,eax
c001500b:	83 e0 02             	and    eax,0x2
c001500e:	83 c0 41             	add    eax,0x41
c0015011:	0f be e8             	movsx  ebp,al
c0015014:	3c 43                	cmp    al,0x43
c0015016:	75 10                	jne    c0015028 <LogicalDisk::assignDriveLetter()+0x50>
c0015018:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001501f:	75 5d                	jne    c001507e <LogicalDisk::assignDriveLetter()+0xa6>
c0015021:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015026:	75 56                	jne    c001507e <LogicalDisk::assignDriveLetter()+0xa6>
c0015028:	8d 75 bf             	lea    esi,[ebp-0x41]
c001502b:	ba 01 00 00 00       	mov    edx,0x1
c0015030:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015034:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015038:	d3 e2                	shl    edx,cl
c001503a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001503e:	89 d7                	mov    edi,edx
c0015040:	89 d6                	mov    esi,edx
c0015042:	c1 ff 1f             	sar    edi,0x1f
c0015045:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015049:	21 f9                	and    ecx,edi
c001504b:	09 d1                	or     ecx,edx
c001504d:	75 2f                	jne    c001507e <LogicalDisk::assignDriveLetter()+0xa6>
c001504f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015053:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015057:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001505d:	09 f2                	or     edx,esi
c001505f:	89 15 60 c2 03 c0    	mov    DWORD PTR ds:0xc003c260,edx
c0015065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015069:	09 fa                	or     edx,edi
c001506b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001506f:	89 15 64 c2 03 c0    	mov    DWORD PTR ds:0xc003c264,edx
c0015075:	89 1c bd 80 c2 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3d80],ebx
c001507c:	eb 08                	jmp    c0015086 <LogicalDisk::assignDriveLetter()+0xae>
c001507e:	45                   	inc    ebp
c001507f:	40                   	inc    eax
c0015080:	3c 5b                	cmp    al,0x5b
c0015082:	75 90                	jne    c0015014 <LogicalDisk::assignDriveLetter()+0x3c>
c0015084:	31 c0                	xor    eax,eax
c0015086:	83 c4 14             	add    esp,0x14
c0015089:	5b                   	pop    ebx
c001508a:	5e                   	pop    esi
c001508b:	5f                   	pop    edi
c001508c:	5d                   	pop    ebp
c001508d:	c3                   	ret    

c001508e <LogicalDisk::mount()>:
c001508e:	56                   	push   esi
c001508f:	53                   	push   ebx
c0015090:	51                   	push   ecx
c0015091:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015095:	8b 1d e0 bd 03 c0    	mov    ebx,DWORD PTR ds:0xc003bde0
c001509b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00150a5:	85 db                	test   ebx,ebx
c00150a7:	74 50                	je     c00150f9 <LogicalDisk::mount()+0x6b>
c00150a9:	e8 c9 91 ff ff       	call   c000e277 <getIRQNestingLevel()>
c00150ae:	52                   	push   edx
c00150af:	52                   	push   edx
c00150b0:	50                   	push   eax
c00150b1:	68 78 9d 03 c0       	push   0xc0039d78
c00150b6:	e8 2f 7d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00150bb:	83 c4 0c             	add    esp,0xc
c00150be:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00150c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00150c7:	83 e8 41             	sub    eax,0x41
c00150ca:	50                   	push   eax
c00150cb:	56                   	push   esi
c00150cc:	53                   	push   ebx
c00150cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00150d0:	83 c4 10             	add    esp,0x10
c00150d3:	84 c0                	test   al,al
c00150d5:	74 08                	je     c00150df <LogicalDisk::mount()+0x51>
c00150d7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00150dd:	eb 1c                	jmp    c00150fb <LogicalDisk::mount()+0x6d>
c00150df:	e8 93 91 ff ff       	call   c000e277 <getIRQNestingLevel()>
c00150e4:	51                   	push   ecx
c00150e5:	51                   	push   ecx
c00150e6:	50                   	push   eax
c00150e7:	68 93 9d 03 c0       	push   0xc0039d93
c00150ec:	e8 f9 7c ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00150f1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	eb ac                	jmp    c00150a5 <LogicalDisk::mount()+0x17>
c00150f9:	31 c0                	xor    eax,eax
c00150fb:	5a                   	pop    edx
c00150fc:	5b                   	pop    ebx
c00150fd:	5e                   	pop    esi
c00150fe:	c3                   	ret    
c00150ff:	90                   	nop

c0015100 <LogicalDisk::unmount()>:
c0015100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015104:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001510e:	c3                   	ret    
c001510f:	90                   	nop

c0015110 <LogicalDisk::unassignDriveLetter()>:
c0015110:	57                   	push   edi
c0015111:	56                   	push   esi
c0015112:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015116:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001511d:	84 c9                	test   cl,cl
c001511f:	75 0f                	jne    c0015130 <LogicalDisk::unassignDriveLetter()+0x20>
c0015121:	c7 44 24 0c ae 9d 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039dae
c0015129:	5e                   	pop    esi
c001512a:	5f                   	pop    edi
c001512b:	e9 d8 7d ff ff       	jmp    c000cf08 <panic(char const*)>
c0015130:	83 e9 41             	sub    ecx,0x41
c0015133:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001513a:	b8 01 00 00 00       	mov    eax,0x1
c001513f:	c7 04 8d 80 c2 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3d80],0x0
c001514a:	d3 e0                	shl    eax,cl
c001514c:	89 c7                	mov    edi,eax
c001514e:	f7 d0                	not    eax
c0015150:	c1 ff 1f             	sar    edi,0x1f
c0015153:	21 05 60 c2 03 c0    	and    DWORD PTR ds:0xc003c260,eax
c0015159:	89 fe                	mov    esi,edi
c001515b:	f7 d6                	not    esi
c001515d:	21 35 64 c2 03 c0    	and    DWORD PTR ds:0xc003c264,esi
c0015163:	5e                   	pop    esi
c0015164:	5f                   	pop    edi
c0015165:	c3                   	ret    

c0015166 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015166:	57                   	push   edi
c0015167:	56                   	push   esi
c0015168:	53                   	push   ebx
c0015169:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001516d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015171:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015179:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001517f:	77 41                	ja     c00151c2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015181:	99                   	cdq    
c0015182:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015188:	01 c8                	add    eax,ecx
c001518a:	11 da                	adc    edx,ebx
c001518c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015192:	19 d7                	sbb    edi,edx
c0015194:	72 33                	jb     c00151c9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015196:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001519c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00151a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00151a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00151aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00151b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00151b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00151ba:	5b                   	pop    ebx
c00151bb:	5e                   	pop    esi
c00151bc:	5f                   	pop    edi
c00151bd:	e9 9a 09 00 00       	jmp    c0015b5c <VCache::read(unsigned long long, int, void*)>
c00151c2:	b8 05 00 00 00       	mov    eax,0x5
c00151c7:	eb 05                	jmp    c00151ce <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00151c9:	b8 07 00 00 00       	mov    eax,0x7
c00151ce:	5b                   	pop    ebx
c00151cf:	5e                   	pop    esi
c00151d0:	5f                   	pop    edi
c00151d1:	c3                   	ret    

c00151d2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00151d2:	57                   	push   edi
c00151d3:	56                   	push   esi
c00151d4:	53                   	push   ebx
c00151d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00151d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00151dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00151e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00151eb:	77 41                	ja     c001522e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00151ed:	99                   	cdq    
c00151ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00151f4:	01 c8                	add    eax,ecx
c00151f6:	11 da                	adc    edx,ebx
c00151f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00151fe:	19 d7                	sbb    edi,edx
c0015200:	72 33                	jb     c0015235 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015202:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015208:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001520e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015212:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015216:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001521c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015226:	5b                   	pop    ebx
c0015227:	5e                   	pop    esi
c0015228:	5f                   	pop    edi
c0015229:	e9 4a 08 00 00       	jmp    c0015a78 <VCache::write(unsigned long long, int, void*)>
c001522e:	b8 05 00 00 00       	mov    eax,0x5
c0015233:	eb 05                	jmp    c001523a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015235:	b8 07 00 00 00       	mov    eax,0x7
c001523a:	5b                   	pop    ebx
c001523b:	5e                   	pop    esi
c001523c:	5f                   	pop    edi
c001523d:	c3                   	ret    

c001523e <Mouse::Mouse(char const*)>:
c001523e:	83 ec 0c             	sub    esp,0xc
c0015241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015245:	83 ec 08             	sub    esp,0x8
c0015248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001524c:	50                   	push   eax
c001524d:	e8 42 e6 ff ff       	call   c0013894 <Device::Device(char const*)>
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	ba 04 9e 03 c0       	mov    edx,0xc0039e04
c001525a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001525e:	89 10                	mov    DWORD PTR [eax],edx
c0015260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015264:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001526e:	90                   	nop
c001526f:	83 c4 0c             	add    esp,0xc
c0015272:	c3                   	ret    
c0015273:	90                   	nop

c0015274 <Mouse::~Mouse()>:
c0015274:	83 ec 0c             	sub    esp,0xc
c0015277:	ba 04 9e 03 c0       	mov    edx,0xc0039e04
c001527c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015280:	89 10                	mov    DWORD PTR [eax],edx
c0015282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015286:	83 ec 0c             	sub    esp,0xc
c0015289:	50                   	push   eax
c001528a:	e8 b7 e2 ff ff       	call   c0013546 <Device::~Device()>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	90                   	nop
c0015293:	83 c4 0c             	add    esp,0xc
c0015296:	c3                   	ret    
c0015297:	90                   	nop

c0015298 <Mouse::~Mouse()>:
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	83 ec 0c             	sub    esp,0xc
c001529e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152a2:	e8 cd ff ff ff       	call   c0015274 <Mouse::~Mouse()>
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	83 ec 08             	sub    esp,0x8
c00152ad:	68 58 01 00 00       	push   0x158
c00152b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152b6:	e8 ee d0 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	83 c4 0c             	add    esp,0xc
c00152c1:	c3                   	ret    

c00152c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00152c2:	55                   	push   ebp
c00152c3:	57                   	push   edi
c00152c4:	56                   	push   esi
c00152c5:	53                   	push   ebx
c00152c6:	81 ec 28 01 00 00    	sub    esp,0x128
c00152cc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00152d3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00152da:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00152e1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00152e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00152ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00152f0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00152f7:	e8 8a e6 ff ff       	call   c0013986 <Device::getName()>
c00152fc:	5a                   	pop    edx
c00152fd:	59                   	pop    ecx
c00152fe:	50                   	push   eax
c00152ff:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015303:	55                   	push   ebp
c0015304:	e8 73 b4 fe ff       	call   c000077c <strcpy>
c0015309:	5b                   	pop    ebx
c001530a:	58                   	pop    eax
c001530b:	68 28 9e 03 c0       	push   0xc0039e28
c0015310:	55                   	push   ebp
c0015311:	e8 a6 b5 fe ff       	call   c00008bc <strcat>
c0015316:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001531d:	e8 78 d0 ff ff       	call   c001239a <operator new(unsigned long)>
c0015322:	83 c4 0c             	add    esp,0xc
c0015325:	89 c3                	mov    ebx,eax
c0015327:	57                   	push   edi
c0015328:	56                   	push   esi
c0015329:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001532d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015331:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015338:	55                   	push   ebp
c0015339:	50                   	push   eax
c001533a:	e8 e3 fb ff ff       	call   c0014f22 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001533f:	83 c4 14             	add    esp,0x14
c0015342:	53                   	push   ebx
c0015343:	e8 90 fc ff ff       	call   c0014fd8 <LogicalDisk::assignDriveLetter()>
c0015348:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001534b:	e8 3e fd ff ff       	call   c001508e <LogicalDisk::mount()>
c0015350:	58                   	pop    eax
c0015351:	5a                   	pop    edx
c0015352:	53                   	push   ebx
c0015353:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001535a:	e8 45 e3 ff ff       	call   c00136a4 <Device::addChild(Device*)>
c001535f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015365:	5b                   	pop    ebx
c0015366:	5e                   	pop    esi
c0015367:	5f                   	pop    edi
c0015368:	5d                   	pop    ebp
c0015369:	c3                   	ret    

c001536a <createPartitionsForDisk(PhysicalDisk*)>:
c001536a:	55                   	push   ebp
c001536b:	57                   	push   edi
c001536c:	56                   	push   esi
c001536d:	53                   	push   ebx
c001536e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015374:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001537b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015381:	3d 00 02 00 00       	cmp    eax,0x200
c0015386:	74 27                	je     c00153af <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015388:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001538e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015394:	83 ec 10             	sub    esp,0x10
c0015397:	0f a4 f7 0a          	shld   edi,esi,0xa
c001539b:	99                   	cdq    
c001539c:	c1 e6 0a             	shl    esi,0xa
c001539f:	52                   	push   edx
c00153a0:	89 fd                	mov    ebp,edi
c00153a2:	50                   	push   eax
c00153a3:	55                   	push   ebp
c00153a4:	56                   	push   esi
c00153a5:	e8 92 92 00 00       	call   c001e63c <__udivdi3>
c00153aa:	e9 b1 00 00 00       	jmp    c0015460 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153b4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00153b8:	56                   	push   esi
c00153b9:	6a 01                	push   0x1
c00153bb:	6a 00                	push   0x0
c00153bd:	6a 00                	push   0x0
c00153bf:	53                   	push   ebx
c00153c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00153c3:	83 c4 20             	add    esp,0x20
c00153c6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00153ce:	75 0a                	jne    c00153da <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00153d0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00153d8:	74 2c                	je     c0015406 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00153da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00153e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00153e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00153ec:	83 ec 10             	sub    esp,0x10
c00153ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00153f3:	89 f7                	mov    edi,esi
c00153f5:	c1 e0 0a             	shl    eax,0xa
c00153f8:	c1 ff 1f             	sar    edi,0x1f
c00153fb:	57                   	push   edi
c00153fc:	56                   	push   esi
c00153fd:	52                   	push   edx
c00153fe:	50                   	push   eax
c00153ff:	e8 38 92 00 00       	call   c001e63c <__udivdi3>
c0015404:	eb 5a                	jmp    c0015460 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015406:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001540d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015414:	83 e1 7f             	and    ecx,0x7f
c0015417:	83 e0 7f             	and    eax,0x7f
c001541a:	01 c1                	add    ecx,eax
c001541c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015423:	83 e0 7f             	and    eax,0x7f
c0015426:	01 c1                	add    ecx,eax
c0015428:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001542f:	83 e0 7f             	and    eax,0x7f
c0015432:	00 c1                	add    cl,al
c0015434:	74 41                	je     c0015477 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015436:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001543c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015442:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015448:	83 ec 10             	sub    esp,0x10
c001544b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001544f:	89 f7                	mov    edi,esi
c0015451:	c1 e0 0a             	shl    eax,0xa
c0015454:	c1 ff 1f             	sar    edi,0x1f
c0015457:	57                   	push   edi
c0015458:	56                   	push   esi
c0015459:	52                   	push   edx
c001545a:	50                   	push   eax
c001545b:	e8 dc 91 00 00       	call   c001e63c <__udivdi3>
c0015460:	83 c4 14             	add    esp,0x14
c0015463:	52                   	push   edx
c0015464:	50                   	push   eax
c0015465:	6a 00                	push   0x0
c0015467:	6a 00                	push   0x0
c0015469:	53                   	push   ebx
c001546a:	e8 53 fe ff ff       	call   c00152c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001546f:	83 c4 20             	add    esp,0x20
c0015472:	e9 79 01 00 00       	jmp    c00155f0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015477:	89 f0                	mov    eax,esi
c0015479:	31 f6                	xor    esi,esi
c001547b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015482:	75 02                	jne    c0015486 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015484:	89 f1                	mov    ecx,esi
c0015486:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001548d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015494:	c1 e2 08             	shl    edx,0x8
c0015497:	c1 e7 10             	shl    edi,0x10
c001549a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00154a2:	09 fa                	or     edx,edi
c00154a4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00154ac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00154b3:	83 c0 10             	add    eax,0x10
c00154b6:	09 fa                	or     edx,edi
c00154b8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00154bf:	c1 e7 18             	shl    edi,0x18
c00154c2:	09 fa                	or     edx,edi
c00154c4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00154cb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00154cf:	c1 e7 10             	shl    edi,0x10
c00154d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00154d9:	c1 e2 08             	shl    edx,0x8
c00154dc:	09 fa                	or     edx,edi
c00154de:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00154e5:	09 fa                	or     edx,edi
c00154e7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00154ee:	c1 e7 18             	shl    edi,0x18
c00154f1:	09 fa                	or     edx,edi
c00154f3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00154f7:	46                   	inc    esi
c00154f8:	83 fe 04             	cmp    esi,0x4
c00154fb:	0f 85 7a ff ff ff    	jne    c001547b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015505:	83 f0 01             	xor    eax,0x1
c0015508:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001550c:	75 57                	jne    c0015565 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001550e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015512:	83 f0 01             	xor    eax,0x1
c0015515:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015519:	75 4a                	jne    c0015565 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001551b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001551f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015527:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001552f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015535:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001553b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015541:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015545:	89 f7                	mov    edi,esi
c0015547:	c1 e0 0a             	shl    eax,0xa
c001554a:	c1 ff 1f             	sar    edi,0x1f
c001554d:	57                   	push   edi
c001554e:	56                   	push   esi
c001554f:	52                   	push   edx
c0015550:	50                   	push   eax
c0015551:	e8 e6 90 00 00       	call   c001e63c <__udivdi3>
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001555d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015561:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015565:	84 c9                	test   cl,cl
c0015567:	74 53                	je     c00155bc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015569:	0f b6 c9             	movzx  ecx,cl
c001556c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015570:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015574:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015578:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001557c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015580:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015584:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015588:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001558c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015590:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015598:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001559c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00155a0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00155a4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00155a8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00155ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00155b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00155b4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00155b8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00155bc:	31 ed                	xor    ebp,ebp
c00155be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00155c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00155c6:	89 f8                	mov    eax,edi
c00155c8:	09 f0                	or     eax,esi
c00155ca:	74 1e                	je     c00155ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00155cc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00155d0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00155d4:	89 d1                	mov    ecx,edx
c00155d6:	09 c1                	or     ecx,eax
c00155d8:	74 10                	je     c00155ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00155da:	83 ec 0c             	sub    esp,0xc
c00155dd:	57                   	push   edi
c00155de:	56                   	push   esi
c00155df:	52                   	push   edx
c00155e0:	50                   	push   eax
c00155e1:	53                   	push   ebx
c00155e2:	e8 db fc ff ff       	call   c00152c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00155e7:	83 c4 20             	add    esp,0x20
c00155ea:	45                   	inc    ebp
c00155eb:	83 fd 04             	cmp    ebp,0x4
c00155ee:	75 ce                	jne    c00155be <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00155f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00155f6:	5b                   	pop    ebx
c00155f7:	5e                   	pop    esi
c00155f8:	5f                   	pop    edi
c00155f9:	5d                   	pop    ebp
c00155fa:	c3                   	ret    
c00155fb:	90                   	nop

c00155fc <Timer::Timer(char const*)>:
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015603:	83 ec 08             	sub    esp,0x8
c0015606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001560a:	50                   	push   eax
c001560b:	e8 84 e2 ff ff       	call   c0013894 <Device::Device(char const*)>
c0015610:	83 c4 10             	add    esp,0x10
c0015613:	ba 3c 9e 03 c0       	mov    edx,0xc0039e3c
c0015618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001561c:	89 10                	mov    DWORD PTR [eax],edx
c001561e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015622:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001562c:	90                   	nop
c001562d:	83 c4 0c             	add    esp,0xc
c0015630:	c3                   	ret    
c0015631:	90                   	nop

c0015632 <Timer::~Timer()>:
c0015632:	83 ec 0c             	sub    esp,0xc
c0015635:	ba 3c 9e 03 c0       	mov    edx,0xc0039e3c
c001563a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001563e:	89 10                	mov    DWORD PTR [eax],edx
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	83 ec 0c             	sub    esp,0xc
c0015647:	50                   	push   eax
c0015648:	e8 f9 de ff ff       	call   c0013546 <Device::~Device()>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	90                   	nop
c0015651:	83 c4 0c             	add    esp,0xc
c0015654:	c3                   	ret    
c0015655:	90                   	nop

c0015656 <Timer::~Timer()>:
c0015656:	83 ec 0c             	sub    esp,0xc
c0015659:	83 ec 0c             	sub    esp,0xc
c001565c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015660:	e8 cd ff ff ff       	call   c0015632 <Timer::~Timer()>
c0015665:	83 c4 10             	add    esp,0x10
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	68 5c 01 00 00       	push   0x15c
c0015670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015674:	e8 30 cd ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	83 c4 0c             	add    esp,0xc
c001567f:	c3                   	ret    

c0015680 <Timer::read()>:
c0015680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015684:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001568a:	c3                   	ret    

c001568b <timerHandler(unsigned long long)>:
c001568b:	55                   	push   ebp
c001568c:	57                   	push   edi
c001568d:	56                   	push   esi
c001568e:	53                   	push   ebx
c001568f:	83 ec 0c             	sub    esp,0xc
c0015692:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015696:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001569a:	01 35 f0 c2 03 c0    	add    DWORD PTR ds:0xc003c2f0,esi
c00156a0:	11 3d f4 c2 03 c0    	adc    DWORD PTR ds:0xc003c2f4,edi
c00156a6:	80 3d 2d b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b92d,0x0
c00156ad:	0f 84 07 01 00 00    	je     c00157ba <timerHandler(unsigned long long)+0x12f>
c00156b3:	e8 fb 8b ff ff       	call   c000e2b3 <lockStuff()>
c00156b8:	83 ec 0c             	sub    esp,0xc
c00156bb:	68 64 bb 03 c0       	push   0xc003bb64
c00156c0:	e8 d7 94 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156c5:	c7 04 24 64 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb64
c00156cc:	89 c3                	mov    ebx,eax
c00156ce:	e8 ff 93 00 00       	call   c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	84 c0                	test   al,al
c00156d8:	74 60                	je     c001573a <timerHandler(unsigned long long)+0xaf>
c00156da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00156e0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00156e3:	85 c0                	test   eax,eax
c00156e5:	0f 85 91 00 00 00    	jne    c001577c <timerHandler(unsigned long long)+0xf1>
c00156eb:	e9 be 00 00 00       	jmp    c00157ae <timerHandler(unsigned long long)+0x123>
c00156f0:	83 ec 0c             	sub    esp,0xc
c00156f3:	55                   	push   ebp
c00156f4:	e8 b7 93 ff ff       	call   c000eab0 <unblockTask(ThreadControlBlock*)>
c00156f9:	83 c4 10             	add    esp,0x10
c00156fc:	39 eb                	cmp    ebx,ebp
c00156fe:	75 12                	jne    c0015712 <timerHandler(unsigned long long)+0x87>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	68 64 bb 03 c0       	push   0xc003bb64
c0015708:	e8 8f 94 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001570d:	89 c3                	mov    ebx,eax
c001570f:	83 c4 10             	add    esp,0x10
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	68 64 bb 03 c0       	push   0xc003bb64
c001571a:	e8 b3 93 00 00       	call   c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	84 c0                	test   al,al
c0015724:	75 b4                	jne    c00156da <timerHandler(unsigned long long)+0x4f>
c0015726:	83 ec 0c             	sub    esp,0xc
c0015729:	68 64 bb 03 c0       	push   0xc003bb64
c001572e:	e8 69 94 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	39 d8                	cmp    eax,ebx
c0015738:	74 a0                	je     c00156da <timerHandler(unsigned long long)+0x4f>
c001573a:	83 ec 0c             	sub    esp,0xc
c001573d:	68 64 bb 03 c0       	push   0xc003bb64
c0015742:	e8 55 94 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015747:	c7 04 24 64 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb64
c001574e:	89 c5                	mov    ebp,eax
c0015750:	e8 99 93 00 00       	call   c001eaee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015755:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001575e:	39 15 f0 c2 03 c0    	cmp    DWORD PTR ds:0xc003c2f0,edx
c0015764:	a1 f4 c2 03 c0       	mov    eax,ds:0xc003c2f4
c0015769:	19 c8                	sbb    eax,ecx
c001576b:	73 83                	jae    c00156f0 <timerHandler(unsigned long long)+0x65>
c001576d:	50                   	push   eax
c001576e:	50                   	push   eax
c001576f:	55                   	push   ebp
c0015770:	68 64 bb 03 c0       	push   0xc003bb64
c0015775:	e8 84 92 00 00       	call   c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001577a:	eb 93                	jmp    c001570f <timerHandler(unsigned long long)+0x84>
c001577c:	80 3d 2c b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b92c,0x0
c0015783:	74 29                	je     c00157ae <timerHandler(unsigned long long)+0x123>
c0015785:	39 c6                	cmp    esi,eax
c0015787:	bb 00 00 00 00       	mov    ebx,0x0
c001578c:	19 df                	sbb    edi,ebx
c001578e:	72 19                	jb     c00157a9 <timerHandler(unsigned long long)+0x11e>
c0015790:	e8 f7 8a ff ff       	call   c000e28c <lockScheduler()>
c0015795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001579a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001579d:	e8 1e 8e ff ff       	call   c000e5c0 <schedule()>
c00157a2:	e8 e7 8a ff ff       	call   c000e28e <unlockScheduler()>
c00157a7:	eb 05                	jmp    c00157ae <timerHandler(unsigned long long)+0x123>
c00157a9:	29 f0                	sub    eax,esi
c00157ab:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00157ae:	83 c4 0c             	add    esp,0xc
c00157b1:	5b                   	pop    ebx
c00157b2:	5e                   	pop    esi
c00157b3:	5f                   	pop    edi
c00157b4:	5d                   	pop    ebp
c00157b5:	e9 8b 8e ff ff       	jmp    c000e645 <unlockStuff()>
c00157ba:	83 c4 0c             	add    esp,0xc
c00157bd:	5b                   	pop    ebx
c00157be:	5e                   	pop    esi
c00157bf:	5f                   	pop    edi
c00157c0:	5d                   	pop    ebp
c00157c1:	c3                   	ret    

c00157c2 <setupTimer(int)>:
c00157c2:	57                   	push   edi
c00157c3:	56                   	push   esi
c00157c4:	53                   	push   ebx
c00157c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157c9:	e8 ff 18 00 00       	call   c00170cd <getCPUNumber()>
c00157ce:	85 c0                	test   eax,eax
c00157d0:	74 32                	je     c0015804 <setupTimer(int)+0x42>
c00157d2:	83 ec 0c             	sub    esp,0xc
c00157d5:	68 60 01 00 00       	push   0x160
c00157da:	e8 bb cb ff ff       	call   c001239a <operator new(unsigned long)>
c00157df:	89 04 24             	mov    DWORD PTR [esp],eax
c00157e2:	89 c3                	mov    ebx,eax
c00157e4:	e8 ef 88 00 00       	call   c001e0d8 <APICTimer::APICTimer()>
c00157e9:	6a 00                	push   0x0
c00157eb:	6a 00                	push   0x0
c00157ed:	56                   	push   esi
c00157ee:	53                   	push   ebx
c00157ef:	e8 ec 87 00 00       	call   c001dfe0 <APICTimer::open(int, int, void*)>
c00157f4:	83 c4 20             	add    esp,0x20
c00157f7:	e8 d4 18 00 00       	call   c00170d0 <thisCPU()>
c00157fc:	56                   	push   esi
c00157fd:	56                   	push   esi
c00157fe:	53                   	push   ebx
c00157ff:	e9 96 00 00 00       	jmp    c001589a <setupTimer(int)+0xd8>
c0015804:	e8 c7 18 00 00       	call   c00170d0 <thisCPU()>
c0015809:	83 ec 0c             	sub    esp,0xc
c001580c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015812:	e8 6f e1 ff ff       	call   c0013986 <Device::getName()>
c0015817:	83 c4 10             	add    esp,0x10
c001581a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001581d:	0f 85 87 00 00 00    	jne    c00158aa <setupTimer(int)+0xe8>
c0015823:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0015828:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001582f:	74 79                	je     c00158aa <setupTimer(int)+0xe8>
c0015831:	83 ec 0c             	sub    esp,0xc
c0015834:	68 5c 01 00 00       	push   0x15c
c0015839:	e8 5c cb ff ff       	call   c001239a <operator new(unsigned long)>
c001583e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015841:	89 c3                	mov    ebx,eax
c0015843:	e8 e0 89 00 00       	call   c001e228 <PIT::PIT()>
c0015848:	59                   	pop    ecx
c0015849:	5f                   	pop    edi
c001584a:	53                   	push   ebx
c001584b:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c0015851:	e8 4e de ff ff       	call   c00136a4 <Device::addChild(Device*)>
c0015856:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015858:	6a 00                	push   0x0
c001585a:	6a 00                	push   0x0
c001585c:	56                   	push   esi
c001585d:	53                   	push   ebx
c001585e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015861:	83 c4 14             	add    esp,0x14
c0015864:	68 60 01 00 00       	push   0x160
c0015869:	e8 2c cb ff ff       	call   c001239a <operator new(unsigned long)>
c001586e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015871:	89 c7                	mov    edi,eax
c0015873:	e8 60 88 00 00       	call   c001e0d8 <APICTimer::APICTimer()>
c0015878:	6a 00                	push   0x0
c001587a:	6a 00                	push   0x0
c001587c:	56                   	push   esi
c001587d:	57                   	push   edi
c001587e:	e8 5d 87 00 00       	call   c001dfe0 <APICTimer::open(int, int, void*)>
c0015883:	83 c4 20             	add    esp,0x20
c0015886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015888:	6a 00                	push   0x0
c001588a:	6a 00                	push   0x0
c001588c:	6a 00                	push   0x0
c001588e:	53                   	push   ebx
c001588f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015892:	e8 39 18 00 00       	call   c00170d0 <thisCPU()>
c0015897:	5a                   	pop    edx
c0015898:	59                   	pop    ecx
c0015899:	57                   	push   edi
c001589a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00158a0:	e8 ff dd ff ff       	call   c00136a4 <Device::addChild(Device*)>
c00158a5:	83 c4 10             	add    esp,0x10
c00158a8:	eb 33                	jmp    c00158dd <setupTimer(int)+0x11b>
c00158aa:	83 ec 0c             	sub    esp,0xc
c00158ad:	68 5c 01 00 00       	push   0x15c
c00158b2:	e8 e3 ca ff ff       	call   c001239a <operator new(unsigned long)>
c00158b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00158ba:	89 c3                	mov    ebx,eax
c00158bc:	e8 67 89 00 00       	call   c001e228 <PIT::PIT()>
c00158c1:	58                   	pop    eax
c00158c2:	5a                   	pop    edx
c00158c3:	53                   	push   ebx
c00158c4:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c00158ca:	e8 d5 dd ff ff       	call   c00136a4 <Device::addChild(Device*)>
c00158cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158d1:	6a 00                	push   0x0
c00158d3:	6a 00                	push   0x0
c00158d5:	56                   	push   esi
c00158d6:	53                   	push   ebx
c00158d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158da:	83 c4 20             	add    esp,0x20
c00158dd:	89 d8                	mov    eax,ebx
c00158df:	5b                   	pop    ebx
c00158e0:	5e                   	pop    esi
c00158e1:	5f                   	pop    edi
c00158e2:	c3                   	ret    
c00158e3:	90                   	nop

c00158e4 <VCache::VCache(PhysicalDisk*)>:
c00158e4:	53                   	push   ebx
c00158e5:	83 ec 08             	sub    esp,0x8
c00158e8:	ba 6c 9e 03 c0       	mov    edx,0xc0039e6c
c00158ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f1:	89 10                	mov    DWORD PTR [eax],edx
c00158f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00158fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015902:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0015914:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001591b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001591f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0015926:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001592d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015931:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001593c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	6a 10                	push   0x10
c0015945:	e8 50 ca ff ff       	call   c001239a <operator new(unsigned long)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	89 c3                	mov    ebx,eax
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	53                   	push   ebx
c0015953:	e8 4c 8a ff ff       	call   c000e3a4 <Mutex::Mutex()>
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001595f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015966:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001596a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001596d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015971:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001597c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015986:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015989:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001598d:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015993:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015999:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001599d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00159a0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00159a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00159ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00159b5:	c1 e0 06             	shl    eax,0x6
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	50                   	push   eax
c00159bc:	e8 24 7a ff ff       	call   c000d3e5 <malloc>
c00159c1:	83 c4 10             	add    esp,0x10
c00159c4:	89 c2                	mov    edx,eax
c00159c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00159cd:	90                   	nop
c00159ce:	83 c4 08             	add    esp,0x8
c00159d1:	5b                   	pop    ebx
c00159d2:	c3                   	ret    
c00159d3:	90                   	nop

c00159d4 <VCache::writeWriteBuffer()>:
c00159d4:	53                   	push   ebx
c00159d5:	83 ec 14             	sub    esp,0x14
c00159d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00159dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00159df:	8b 10                	mov    edx,DWORD PTR [eax]
c00159e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00159e7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00159ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00159ed:	50                   	push   eax
c00159ee:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00159f1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00159f8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00159ff:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015a03:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015a0a:	83 c4 28             	add    esp,0x28
c0015a0d:	5b                   	pop    ebx
c0015a0e:	c3                   	ret    
c0015a0f:	90                   	nop

c0015a10 <VCache::~VCache()>:
c0015a10:	83 ec 0c             	sub    esp,0xc
c0015a13:	ba 6c 9e 03 c0       	mov    edx,0xc0039e6c
c0015a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1c:	89 10                	mov    DWORD PTR [eax],edx
c0015a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a22:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015a25:	84 c0                	test   al,al
c0015a27:	74 0f                	je     c0015a38 <VCache::~VCache()+0x28>
c0015a29:	83 ec 0c             	sub    esp,0xc
c0015a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a30:	e8 9f ff ff ff       	call   c00159d4 <VCache::writeWriteBuffer()>
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a3c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015a3f:	83 ec 0c             	sub    esp,0xc
c0015a42:	50                   	push   eax
c0015a43:	e8 ad 79 ff ff       	call   c000d3f5 <free>
c0015a48:	83 c4 10             	add    esp,0x10
c0015a4b:	90                   	nop
c0015a4c:	83 c4 0c             	add    esp,0xc
c0015a4f:	c3                   	ret    

c0015a50 <VCache::~VCache()>:
c0015a50:	83 ec 0c             	sub    esp,0xc
c0015a53:	83 ec 0c             	sub    esp,0xc
c0015a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a5a:	e8 b1 ff ff ff       	call   c0015a10 <VCache::~VCache()>
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	83 ec 08             	sub    esp,0x8
c0015a65:	6a 30                	push   0x30
c0015a67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a6b:	e8 39 c9 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	83 c4 0c             	add    esp,0xc
c0015a76:	c3                   	ret    
c0015a77:	90                   	nop

c0015a78 <VCache::write(unsigned long long, int, void*)>:
c0015a78:	55                   	push   ebp
c0015a79:	57                   	push   edi
c0015a7a:	56                   	push   esi
c0015a7b:	53                   	push   ebx
c0015a7c:	83 ec 28             	sub    esp,0x28
c0015a7f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015a83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015a87:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015a8b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015a8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015a92:	e8 e1 8e ff ff       	call   c000e978 <Semaphore::acquire()>
c0015a97:	83 c4 10             	add    esp,0x10
c0015a9a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015a9e:	74 66                	je     c0015b06 <VCache::write(unsigned long long, int, void*)+0x8e>
c0015aa0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015aa3:	99                   	cdq    
c0015aa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015aa8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015aab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015aae:	89 c1                	mov    ecx,eax
c0015ab0:	89 d0                	mov    eax,edx
c0015ab2:	31 f1                	xor    ecx,esi
c0015ab4:	31 f8                	xor    eax,edi
c0015ab6:	89 ca                	mov    edx,ecx
c0015ab8:	09 c2                	or     edx,eax
c0015aba:	75 3e                	jne    c0015afa <VCache::write(unsigned long long, int, void*)+0x82>
c0015abc:	83 fd 01             	cmp    ebp,0x1
c0015abf:	75 39                	jne    c0015afa <VCache::write(unsigned long long, int, void*)+0x82>
c0015ac1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015ac4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015aca:	51                   	push   ecx
c0015acb:	50                   	push   eax
c0015acc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ad0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015ad4:	0f af c8             	imul   ecx,eax
c0015ad7:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015ada:	51                   	push   ecx
c0015adb:	e8 94 ab fe ff       	call   c0000674 <memcpy>
c0015ae0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015ae3:	83 c4 10             	add    esp,0x10
c0015ae6:	40                   	inc    eax
c0015ae7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015aea:	83 f8 40             	cmp    eax,0x40
c0015aed:	75 57                	jne    c0015b46 <VCache::write(unsigned long long, int, void*)+0xce>
c0015aef:	83 ec 0c             	sub    esp,0xc
c0015af2:	53                   	push   ebx
c0015af3:	e8 dc fe ff ff       	call   c00159d4 <VCache::writeWriteBuffer()>
c0015af8:	eb 34                	jmp    c0015b2e <VCache::write(unsigned long long, int, void*)+0xb6>
c0015afa:	83 ec 0c             	sub    esp,0xc
c0015afd:	53                   	push   ebx
c0015afe:	e8 d1 fe ff ff       	call   c00159d4 <VCache::writeWriteBuffer()>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b09:	83 fd 3f             	cmp    ebp,0x3f
c0015b0c:	7f 25                	jg     c0015b33 <VCache::write(unsigned long long, int, void*)+0xbb>
c0015b0e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015b11:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015b14:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015b17:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015b1b:	52                   	push   edx
c0015b1c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015b22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015b26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b29:	e8 46 ab fe ff       	call   c0000674 <memcpy>
c0015b2e:	83 c4 10             	add    esp,0x10
c0015b31:	eb 13                	jmp    c0015b46 <VCache::write(unsigned long long, int, void*)+0xce>
c0015b33:	83 ec 0c             	sub    esp,0xc
c0015b36:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015b3c:	55                   	push   ebp
c0015b3d:	57                   	push   edi
c0015b3e:	56                   	push   esi
c0015b3f:	50                   	push   eax
c0015b40:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015b43:	83 c4 20             	add    esp,0x20
c0015b46:	83 ec 0c             	sub    esp,0xc
c0015b49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b4c:	e8 c3 93 ff ff       	call   c000ef14 <Semaphore::release()>
c0015b51:	83 c4 2c             	add    esp,0x2c
c0015b54:	31 c0                	xor    eax,eax
c0015b56:	5b                   	pop    ebx
c0015b57:	5e                   	pop    esi
c0015b58:	5f                   	pop    edi
c0015b59:	5d                   	pop    ebp
c0015b5a:	c3                   	ret    
c0015b5b:	90                   	nop

c0015b5c <VCache::read(unsigned long long, int, void*)>:
c0015b5c:	57                   	push   edi
c0015b5d:	56                   	push   esi
c0015b5e:	53                   	push   ebx
c0015b5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015b67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015b6b:	83 ec 0c             	sub    esp,0xc
c0015b6e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b71:	e8 02 8e ff ff       	call   c000e978 <Semaphore::acquire()>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015b7d:	74 0c                	je     c0015b8b <VCache::read(unsigned long long, int, void*)+0x2f>
c0015b7f:	83 ec 0c             	sub    esp,0xc
c0015b82:	53                   	push   ebx
c0015b83:	e8 4c fe ff ff       	call   c00159d4 <VCache::writeWriteBuffer()>
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b8e:	83 ec 0c             	sub    esp,0xc
c0015b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b9b:	57                   	push   edi
c0015b9c:	56                   	push   esi
c0015b9d:	50                   	push   eax
c0015b9e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015ba1:	83 c4 14             	add    esp,0x14
c0015ba4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015ba7:	e8 68 93 ff ff       	call   c000ef14 <Semaphore::release()>
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	31 c0                	xor    eax,eax
c0015bb1:	5b                   	pop    ebx
c0015bb2:	5e                   	pop    esi
c0015bb3:	5f                   	pop    edi
c0015bb4:	c3                   	ret    
c0015bb5:	90                   	nop

c0015bb6 <Video::putrect(int, int, int, int, unsigned int)>:
c0015bb6:	55                   	push   ebp
c0015bb7:	57                   	push   edi
c0015bb8:	56                   	push   esi
c0015bb9:	53                   	push   ebx
c0015bba:	83 ec 1c             	sub    esp,0x1c
c0015bbd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015bc1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015bc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015bc9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015bcd:	01 e8                	add    eax,ebp
c0015bcf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015bd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bd7:	01 df                	add    edi,ebx
c0015bd9:	39 fb                	cmp    ebx,edi
c0015bdb:	7d 1b                	jge    c0015bf8 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015bdd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015be1:	7d 12                	jge    c0015bf5 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015be3:	8b 16                	mov    edx,DWORD PTR [esi]
c0015be5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015be9:	53                   	push   ebx
c0015bea:	55                   	push   ebp
c0015beb:	45                   	inc    ebp
c0015bec:	56                   	push   esi
c0015bed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	eb e8                	jmp    c0015bdd <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015bf5:	43                   	inc    ebx
c0015bf6:	eb e1                	jmp    c0015bd9 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015bf8:	83 c4 1c             	add    esp,0x1c
c0015bfb:	5b                   	pop    ebx
c0015bfc:	5e                   	pop    esi
c0015bfd:	5f                   	pop    edi
c0015bfe:	5d                   	pop    ebp
c0015bff:	c3                   	ret    

c0015c00 <Video::blit(unsigned int*, int, int, int, int)>:
c0015c00:	55                   	push   ebp
c0015c01:	57                   	push   edi
c0015c02:	56                   	push   esi
c0015c03:	53                   	push   ebx
c0015c04:	83 ec 1c             	sub    esp,0x1c
c0015c07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015c0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c0f:	85 c0                	test   eax,eax
c0015c11:	79 02                	jns    c0015c15 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015c13:	31 c0                	xor    eax,eax
c0015c15:	c1 e0 02             	shl    eax,0x2
c0015c18:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c24:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015c28:	39 d8                	cmp    eax,ebx
c0015c2a:	7e 49                	jle    c0015c75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015c2c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015c32:	7c 41                	jl     c0015c75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015c34:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015c38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015c3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015c40:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015c44:	39 f9                	cmp    ecx,edi
c0015c46:	7e 22                	jle    c0015c6a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015c48:	83 c5 04             	add    ebp,0x4
c0015c4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015c51:	7c 14                	jl     c0015c67 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015c53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015c55:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015c58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015c5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015c60:	56                   	push   esi
c0015c61:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	47                   	inc    edi
c0015c68:	eb d2                	jmp    c0015c3c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c6e:	43                   	inc    ebx
c0015c6f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015c73:	eb ab                	jmp    c0015c20 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015c75:	83 c4 1c             	add    esp,0x1c
c0015c78:	5b                   	pop    ebx
c0015c79:	5e                   	pop    esi
c0015c7a:	5f                   	pop    edi
c0015c7b:	5d                   	pop    ebp
c0015c7c:	c3                   	ret    
c0015c7d:	90                   	nop

c0015c7e <Video::clearScreen(unsigned int)>:
c0015c7e:	57                   	push   edi
c0015c7f:	56                   	push   esi
c0015c80:	53                   	push   ebx
c0015c81:	31 db                	xor    ebx,ebx
c0015c83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c87:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015c8d:	7e 1f                	jle    c0015cae <Video::clearScreen(unsigned int)+0x30>
c0015c8f:	31 ff                	xor    edi,edi
c0015c91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015c97:	7e 12                	jle    c0015cab <Video::clearScreen(unsigned int)+0x2d>
c0015c99:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015c9f:	53                   	push   ebx
c0015ca0:	57                   	push   edi
c0015ca1:	47                   	inc    edi
c0015ca2:	56                   	push   esi
c0015ca3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	eb e6                	jmp    c0015c91 <Video::clearScreen(unsigned int)+0x13>
c0015cab:	43                   	inc    ebx
c0015cac:	eb d9                	jmp    c0015c87 <Video::clearScreen(unsigned int)+0x9>
c0015cae:	5b                   	pop    ebx
c0015caf:	5e                   	pop    esi
c0015cb0:	5f                   	pop    edi
c0015cb1:	c3                   	ret    

c0015cb2 <Video::putpixel(int, int, unsigned int)>:
c0015cb2:	c7 44 24 04 74 9e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039e74
c0015cba:	e9 2b 71 ff ff       	jmp    c000cdea <kprintf(char const*, ...)>
c0015cbf:	90                   	nop

c0015cc0 <Video::Video(char const*)>:
c0015cc0:	83 ec 0c             	sub    esp,0xc
c0015cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc7:	83 ec 08             	sub    esp,0x8
c0015cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cce:	50                   	push   eax
c0015ccf:	e8 c0 db ff ff       	call   c0013894 <Device::Device(char const*)>
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	ba 8c 9e 03 c0       	mov    edx,0xc0039e8c
c0015cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce0:	89 10                	mov    DWORD PTR [eax],edx
c0015ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015cf0:	90                   	nop
c0015cf1:	83 c4 0c             	add    esp,0xc
c0015cf4:	c3                   	ret    
c0015cf5:	90                   	nop

c0015cf6 <Video::~Video()>:
c0015cf6:	83 ec 0c             	sub    esp,0xc
c0015cf9:	ba 8c 9e 03 c0       	mov    edx,0xc0039e8c
c0015cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d02:	89 10                	mov    DWORD PTR [eax],edx
c0015d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	50                   	push   eax
c0015d0c:	e8 35 d8 ff ff       	call   c0013546 <Device::~Device()>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	90                   	nop
c0015d15:	83 c4 0c             	add    esp,0xc
c0015d18:	c3                   	ret    
c0015d19:	90                   	nop

c0015d1a <Video::~Video()>:
c0015d1a:	83 ec 0c             	sub    esp,0xc
c0015d1d:	83 ec 0c             	sub    esp,0xc
c0015d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d24:	e8 cd ff ff ff       	call   c0015cf6 <Video::~Video()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	83 ec 08             	sub    esp,0x8
c0015d2f:	68 64 01 00 00       	push   0x164
c0015d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d38:	e8 6c c6 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	83 c4 0c             	add    esp,0xc
c0015d43:	c3                   	ret    

c0015d44 <Video::isMonochrome()>:
c0015d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d48:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015d4e:	c3                   	ret    
c0015d4f:	90                   	nop

c0015d50 <Video::getWidth()>:
c0015d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <Video::getHeight()>:
c0015d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015d66:	c3                   	ret    
c0015d67:	90                   	nop

c0015d68 <Video::drawCursor(int, int, unsigned char*, int)>:
c0015d68:	55                   	push   ebp
c0015d69:	57                   	push   edi
c0015d6a:	56                   	push   esi
c0015d6b:	53                   	push   ebx
c0015d6c:	83 ec 2c             	sub    esp,0x2c
c0015d6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015d73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015d77:	83 f8 01             	cmp    eax,0x1
c0015d7a:	19 c9                	sbb    ecx,ecx
c0015d7c:	31 db                	xor    ebx,ebx
c0015d7e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015d82:	89 cd                	mov    ebp,ecx
c0015d84:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015d8c:	f7 d5                	not    ebp
c0015d8e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015d94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015d98:	01 d8                	add    eax,ebx
c0015d9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d9e:	56                   	push   esi
c0015d9f:	e8 b8 ff ff ff       	call   c0015d5c <Video::getHeight()>
c0015da4:	59                   	pop    ecx
c0015da5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015da9:	7e 70                	jle    c0015e1b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015dab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015daf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015db3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015db6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015dbe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015dc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dc9:	89 f8                	mov    eax,edi
c0015dcb:	83 c0 20             	add    eax,0x20
c0015dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015dd2:	56                   	push   esi
c0015dd3:	e8 78 ff ff ff       	call   c0015d50 <Video::getWidth()>
c0015dd8:	5a                   	pop    edx
c0015dd9:	39 c7                	cmp    edi,eax
c0015ddb:	7d 34                	jge    c0015e11 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015ddd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015de2:	74 05                	je     c0015de9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015de4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015de6:	55                   	push   ebp
c0015de7:	eb 0d                	jmp    c0015df6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015de9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015dee:	74 12                	je     c0015e02 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015df0:	8b 06                	mov    eax,DWORD PTR [esi]
c0015df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015df6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dfa:	57                   	push   edi
c0015dfb:	56                   	push   esi
c0015dfc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015e06:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015e0a:	47                   	inc    edi
c0015e0b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015e0f:	75 c1                	jne    c0015dd2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015e11:	43                   	inc    ebx
c0015e12:	83 fb 20             	cmp    ebx,0x20
c0015e15:	0f 85 79 ff ff ff    	jne    c0015d94 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015e1b:	83 c4 2c             	add    esp,0x2c
c0015e1e:	5b                   	pop    ebx
c0015e1f:	5e                   	pop    esi
c0015e20:	5f                   	pop    edi
c0015e21:	5d                   	pop    ebp
c0015e22:	c3                   	ret    
c0015e23:	90                   	nop

c0015e24 <ACPI::close(int, int, void*)>:
c0015e24:	83 ec 1c             	sub    esp,0x1c
c0015e27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015e2f:	74 0a                	je     c0015e3b <ACPI::close(int, int, void*)+0x17>
c0015e31:	b8 00 00 00 00       	mov    eax,0x0
c0015e36:	e9 9a 00 00 00       	jmp    c0015ed5 <ACPI::close(int, int, void*)+0xb1>
c0015e3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e40:	75 37                	jne    c0015e79 <ACPI::close(int, int, void*)+0x55>
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	68 c4 9e 03 c0       	push   0xc0039ec4
c0015e4a:	e8 9b 6f ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0015e4f:	83 c4 10             	add    esp,0x10
c0015e52:	a1 08 c3 03 c0       	mov    eax,ds:0xc003c308
c0015e57:	85 c0                	test   eax,eax
c0015e59:	74 07                	je     c0015e62 <ACPI::close(int, int, void*)+0x3e>
c0015e5b:	a1 08 c3 03 c0       	mov    eax,ds:0xc003c308
c0015e60:	ff d0                	call   eax
c0015e62:	83 ec 0c             	sub    esp,0xc
c0015e65:	68 78 9f 03 c0       	push   0xc0039f78
c0015e6a:	e8 99 70 ff ff       	call   c000cf08 <panic(char const*)>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e77:	eb 5c                	jmp    c0015ed5 <ACPI::close(int, int, void*)+0xb1>
c0015e79:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015e7e:	75 50                	jne    c0015ed0 <ACPI::close(int, int, void*)+0xac>
c0015e80:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0015e85:	85 c0                	test   eax,eax
c0015e87:	74 07                	je     c0015e90 <ACPI::close(int, int, void*)+0x6c>
c0015e89:	a1 04 c3 03 c0       	mov    eax,ds:0xc003c304
c0015e8e:	ff d0                	call   eax
c0015e90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015e95:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015e9a:	83 e0 02             	and    eax,0x2
c0015e9d:	74 1c                	je     c0015ebb <ACPI::close(int, int, void*)+0x97>
c0015e9f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015eaa:	89 c2                	mov    edx,eax
c0015eac:	ec                   	in     al,dx
c0015ead:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015eb1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015eb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015eb9:	eb da                	jmp    c0015e95 <ACPI::close(int, int, void*)+0x71>
c0015ebb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015ec2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015ec7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015ecb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ecf:	ee                   	out    dx,al
c0015ed0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ed5:	83 c4 1c             	add    esp,0x1c
c0015ed8:	c3                   	ret    

c0015ed9 <findRSDP()>:
c0015ed9:	83 ec 1c             	sub    esp,0x1c
c0015edc:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0015ee1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015ee7:	83 e0 04             	and    eax,0x4
c0015eea:	84 c0                	test   al,al
c0015eec:	75 07                	jne    c0015ef5 <findRSDP()+0x1c>
c0015eee:	b8 00 00 00 00       	mov    eax,0x0
c0015ef3:	eb 6a                	jmp    c0015f5f <findRSDP()+0x86>
c0015ef5:	a1 f0 ba 03 c0       	mov    eax,ds:0xc003baf0
c0015efa:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015eff:	7f 1b                	jg     c0015f1c <findRSDP()+0x43>
c0015f01:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0015f06:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015f0c:	83 e2 fb             	and    edx,0xfffffffb
c0015f0f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015f15:	b8 00 00 00 00       	mov    eax,0x0
c0015f1a:	eb 43                	jmp    c0015f5f <findRSDP()+0x86>
c0015f1c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015f24:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015f2c:	77 2c                	ja     c0015f5a <findRSDP()+0x81>
c0015f2e:	83 ec 04             	sub    esp,0x4
c0015f31:	6a 08                	push   0x8
c0015f33:	68 d1 9e 03 c0       	push   0xc0039ed1
c0015f38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f3c:	e8 2f a6 fe ff       	call   c0000570 <memcmp>
c0015f41:	83 c4 10             	add    esp,0x10
c0015f44:	85 c0                	test   eax,eax
c0015f46:	0f 94 c0             	sete   al
c0015f49:	84 c0                	test   al,al
c0015f4b:	74 06                	je     c0015f53 <findRSDP()+0x7a>
c0015f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f51:	eb 0c                	jmp    c0015f5f <findRSDP()+0x86>
c0015f53:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0015f58:	eb ca                	jmp    c0015f24 <findRSDP()+0x4b>
c0015f5a:	b8 00 00 00 00       	mov    eax,0x0
c0015f5f:	83 c4 1c             	add    esp,0x1c
c0015f62:	c3                   	ret    

c0015f63 <loadACPITables(unsigned char*)>:
c0015f63:	56                   	push   esi
c0015f64:	53                   	push   ebx
c0015f65:	83 ec 44             	sub    esp,0x44
c0015f68:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0015f6d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f73:	83 e0 04             	and    eax,0x4
c0015f76:	84 c0                	test   al,al
c0015f78:	0f 84 05 02 00 00    	je     c0016183 <loadACPITables(unsigned char*)+0x220>
c0015f7e:	a0 20 c5 03 c0       	mov    al,ds:0xc003c520
c0015f83:	84 c0                	test   al,al
c0015f85:	74 75                	je     c0015ffc <loadACPITables(unsigned char*)+0x99>
c0015f87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015f8b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015f96:	83 e8 24             	sub    eax,0x24
c0015f99:	c1 e8 03             	shr    eax,0x3
c0015f9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015fa0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015fa8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015fac:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015fb0:	0f 8d b2 00 00 00    	jge    c0016068 <loadACPITables(unsigned char*)+0x105>
c0015fb6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015fba:	83 c0 24             	add    eax,0x24
c0015fbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015fc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015fc5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015fc9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015fcd:	c1 e0 03             	shl    eax,0x3
c0015fd0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0015fd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fd8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015fdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fdd:	89 c1                	mov    ecx,eax
c0015fdf:	a1 0c c3 03 c0       	mov    eax,ds:0xc003c30c
c0015fe4:	8d 50 01             	lea    edx,[eax+0x1]
c0015fe7:	89 15 0c c3 03 c0    	mov    DWORD PTR ds:0xc003c30c,edx
c0015fed:	89 ca                	mov    edx,ecx
c0015fef:	89 14 c5 24 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3cdc],edx
c0015ff6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0015ffa:	eb ac                	jmp    c0015fa8 <loadACPITables(unsigned char*)+0x45>
c0015ffc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001600b:	83 e8 24             	sub    eax,0x24
c001600e:	c1 e8 02             	shr    eax,0x2
c0016011:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016015:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001601d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016021:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016025:	7d 41                	jge    c0016068 <loadACPITables(unsigned char*)+0x105>
c0016027:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001602b:	83 c0 24             	add    eax,0x24
c001602e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016032:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016036:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001603a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001603e:	c1 e0 02             	shl    eax,0x2
c0016041:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016049:	8b 08                	mov    ecx,DWORD PTR [eax]
c001604b:	a1 0c c3 03 c0       	mov    eax,ds:0xc003c30c
c0016050:	8d 50 01             	lea    edx,[eax+0x1]
c0016053:	89 15 0c c3 03 c0    	mov    DWORD PTR ds:0xc003c30c,edx
c0016059:	89 ca                	mov    edx,ecx
c001605b:	89 14 c5 24 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3cdc],edx
c0016062:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016066:	eb b5                	jmp    c001601d <loadACPITables(unsigned char*)+0xba>
c0016068:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016070:	a1 0c c3 03 c0       	mov    eax,ds:0xc003c30c
c0016075:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016079:	0f 8d 05 01 00 00    	jge    c0016184 <loadACPITables(unsigned char*)+0x221>
c001607f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016083:	8b 04 c5 24 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3cdc]
c001608a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609a:	25 ff 0f 00 00       	and    eax,0xfff
c001609f:	89 c6                	mov    esi,eax
c00160a1:	e8 f3 b2 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c00160a6:	89 c3                	mov    ebx,eax
c00160a8:	83 ec 0c             	sub    esp,0xc
c00160ab:	6a 01                	push   0x1
c00160ad:	e8 57 b1 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00160bf:	83 ec 0c             	sub    esp,0xc
c00160c2:	6a 01                	push   0x1
c00160c4:	6a 01                	push   0x1
c00160c6:	50                   	push   eax
c00160c7:	52                   	push   edx
c00160c8:	53                   	push   ebx
c00160c9:	e8 5e ba ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00160ce:	83 c4 20             	add    esp,0x20
c00160d1:	09 f0                	or     eax,esi
c00160d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160db:	c1 e0 03             	shl    eax,0x3
c00160de:	05 20 c3 03 c0       	add    eax,0xc003c320
c00160e3:	83 ec 04             	sub    esp,0x4
c00160e6:	6a 04                	push   0x4
c00160e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160ec:	50                   	push   eax
c00160ed:	e8 82 a5 fe ff       	call   c0000674 <memcpy>
c00160f2:	83 c4 10             	add    esp,0x10
c00160f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016100:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016104:	05 00 10 00 00       	add    eax,0x1000
c0016109:	c1 e8 0c             	shr    eax,0xc
c001610c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016114:	89 04 24             	mov    DWORD PTR [esp],eax
c0016117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611b:	25 ff 0f 00 00       	and    eax,0xfff
c0016120:	89 c6                	mov    esi,eax
c0016122:	e8 72 b2 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0016127:	89 c3                	mov    ebx,eax
c0016129:	83 ec 0c             	sub    esp,0xc
c001612c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016130:	e8 d4 b0 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0016135:	83 c4 10             	add    esp,0x10
c0016138:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001613c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016142:	83 ec 0c             	sub    esp,0xc
c0016145:	6a 01                	push   0x1
c0016147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001614b:	50                   	push   eax
c001614c:	52                   	push   edx
c001614d:	53                   	push   ebx
c001614e:	e8 d9 b9 ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016153:	83 c4 20             	add    esp,0x20
c0016156:	09 f0                	or     eax,esi
c0016158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001615c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001615f:	83 ec 0c             	sub    esp,0xc
c0016162:	50                   	push   eax
c0016163:	e8 d7 b3 ff ff       	call   c001153f <Virt::freeKernelVirtualPages(unsigned long)>
c0016168:	83 c4 10             	add    esp,0x10
c001616b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001616f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016173:	89 14 c5 24 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3cdc],edx
c001617a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001617e:	e9 ed fe ff ff       	jmp    c0016070 <loadACPITables(unsigned char*)+0x10d>
c0016183:	90                   	nop
c0016184:	83 c4 44             	add    esp,0x44
c0016187:	5b                   	pop    ebx
c0016188:	5e                   	pop    esi
c0016189:	c3                   	ret    

c001618a <findRSDT(unsigned char*)>:
c001618a:	56                   	push   esi
c001618b:	53                   	push   ebx
c001618c:	83 ec 44             	sub    esp,0x44
c001618f:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0016194:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001619a:	83 e0 04             	and    eax,0x4
c001619d:	84 c0                	test   al,al
c001619f:	75 0a                	jne    c00161ab <findRSDT(unsigned char*)+0x21>
c00161a1:	b8 00 00 00 00       	mov    eax,0x0
c00161a6:	e9 f7 00 00 00       	jmp    c00162a2 <findRSDT(unsigned char*)+0x118>
c00161ab:	83 ec 04             	sub    esp,0x4
c00161ae:	6a 24                	push   0x24
c00161b0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00161b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161b8:	50                   	push   eax
c00161b9:	e8 b6 a4 fe ff       	call   c0000674 <memcpy>
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00161c5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00161c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00161d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00161d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00161dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00161e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00161e9:	25 ff 0f 00 00       	and    eax,0xfff
c00161ee:	89 c6                	mov    esi,eax
c00161f0:	e8 a4 b1 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c00161f5:	89 c3                	mov    ebx,eax
c00161f7:	83 ec 0c             	sub    esp,0xc
c00161fa:	6a 02                	push   0x2
c00161fc:	e8 08 b0 ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016208:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001620e:	83 ec 0c             	sub    esp,0xc
c0016211:	6a 01                	push   0x1
c0016213:	6a 02                	push   0x2
c0016215:	50                   	push   eax
c0016216:	52                   	push   edx
c0016217:	53                   	push   ebx
c0016218:	e8 0f b9 ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001621d:	83 c4 20             	add    esp,0x20
c0016220:	09 f0                	or     eax,esi
c0016222:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001622a:	25 ff 0f 00 00       	and    eax,0xfff
c001622f:	89 c6                	mov    esi,eax
c0016231:	e8 63 b1 ff ff       	call   c0011399 <Virt::getAKernelVAS()>
c0016236:	89 c3                	mov    ebx,eax
c0016238:	83 ec 0c             	sub    esp,0xc
c001623b:	6a 02                	push   0x2
c001623d:	e8 c7 af ff ff       	call   c0011209 <Virt::allocateKernelVirtualPages(int)>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016249:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001624f:	83 ec 0c             	sub    esp,0xc
c0016252:	6a 01                	push   0x1
c0016254:	6a 02                	push   0x2
c0016256:	50                   	push   eax
c0016257:	52                   	push   edx
c0016258:	53                   	push   ebx
c0016259:	e8 ce b8 ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001625e:	83 c4 20             	add    esp,0x20
c0016261:	09 f0                	or     eax,esi
c0016263:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016267:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001626c:	75 11                	jne    c001627f <findRSDT(unsigned char*)+0xf5>
c001626e:	c6 05 20 c5 03 c0 00 	mov    BYTE PTR ds:0xc003c520,0x0
c0016275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016279:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001627d:	eb 1f                	jmp    c001629e <findRSDT(unsigned char*)+0x114>
c001627f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016284:	75 11                	jne    c0016297 <findRSDT(unsigned char*)+0x10d>
c0016286:	c6 05 20 c5 03 c0 01 	mov    BYTE PTR ds:0xc003c520,0x1
c001628d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016291:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016295:	eb 07                	jmp    c001629e <findRSDT(unsigned char*)+0x114>
c0016297:	b8 00 00 00 00       	mov    eax,0x0
c001629c:	eb 04                	jmp    c00162a2 <findRSDT(unsigned char*)+0x118>
c001629e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162a2:	83 c4 44             	add    esp,0x44
c00162a5:	5b                   	pop    ebx
c00162a6:	5e                   	pop    esi
c00162a7:	c3                   	ret    

c00162a8 <findDataTable(unsigned char*, char*)>:
c00162a8:	83 ec 1c             	sub    esp,0x1c
c00162ab:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c00162b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00162b6:	83 e0 04             	and    eax,0x4
c00162b9:	84 c0                	test   al,al
c00162bb:	75 07                	jne    c00162c4 <findDataTable(unsigned char*, char*)+0x1c>
c00162bd:	b8 00 00 00 00       	mov    eax,0x0
c00162c2:	eb 7c                	jmp    c0016340 <findDataTable(unsigned char*, char*)+0x98>
c00162c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00162cc:	a1 0c c3 03 c0       	mov    eax,ds:0xc003c30c
c00162d1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00162d5:	7d 3a                	jge    c0016311 <findDataTable(unsigned char*, char*)+0x69>
c00162d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162db:	c1 e0 03             	shl    eax,0x3
c00162de:	05 20 c3 03 c0       	add    eax,0xc003c320
c00162e3:	83 ec 04             	sub    esp,0x4
c00162e6:	6a 04                	push   0x4
c00162e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ec:	50                   	push   eax
c00162ed:	e8 7e a2 fe ff       	call   c0000570 <memcmp>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	85 c0                	test   eax,eax
c00162f7:	0f 94 c0             	sete   al
c00162fa:	84 c0                	test   al,al
c00162fc:	74 0d                	je     c001630b <findDataTable(unsigned char*, char*)+0x63>
c00162fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016302:	8b 04 c5 24 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3cdc]
c0016309:	eb 35                	jmp    c0016340 <findDataTable(unsigned char*, char*)+0x98>
c001630b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001630f:	eb bb                	jmp    c00162cc <findDataTable(unsigned char*, char*)+0x24>
c0016311:	a0 20 c5 03 c0       	mov    al,ds:0xc003c520
c0016316:	84 c0                	test   al,al
c0016318:	74 07                	je     c0016321 <findDataTable(unsigned char*, char*)+0x79>
c001631a:	b8 58 00 00 00       	mov    eax,0x58
c001631f:	eb 05                	jmp    c0016326 <findDataTable(unsigned char*, char*)+0x7e>
c0016321:	b8 52 00 00 00       	mov    eax,0x52
c0016326:	83 ec 04             	sub    esp,0x4
c0016329:	50                   	push   eax
c001632a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001632e:	68 9c 9f 03 c0       	push   0xc0039f9c
c0016333:	e8 b2 6a ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	b8 00 00 00 00       	mov    eax,0x0
c0016340:	83 c4 1c             	add    esp,0x1c
c0016343:	c3                   	ret    

c0016344 <scanMADT()>:
c0016344:	83 ec 2c             	sub    esp,0x2c
c0016347:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001634c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016352:	83 e0 04             	and    eax,0x4
c0016355:	84 c0                	test   al,al
c0016357:	0f 84 73 03 00 00    	je     c00166d0 <scanMADT()+0x38c>
c001635d:	e8 77 fb ff ff       	call   c0015ed9 <findRSDP()>
c0016362:	a3 2c c5 03 c0       	mov    ds:0xc003c52c,eax
c0016367:	a1 2c c5 03 c0       	mov    eax,ds:0xc003c52c
c001636c:	85 c0                	test   eax,eax
c001636e:	75 19                	jne    c0016389 <scanMADT()+0x45>
c0016370:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0016375:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001637b:	83 e2 fb             	and    edx,0xfffffffb
c001637e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016384:	e9 4b 03 00 00       	jmp    c00166d4 <scanMADT()+0x390>
c0016389:	a1 2c c5 03 c0       	mov    eax,ds:0xc003c52c
c001638e:	83 ec 0c             	sub    esp,0xc
c0016391:	50                   	push   eax
c0016392:	e8 f3 fd ff ff       	call   c001618a <findRSDT(unsigned char*)>
c0016397:	83 c4 10             	add    esp,0x10
c001639a:	a3 28 c5 03 c0       	mov    ds:0xc003c528,eax
c001639f:	a1 28 c5 03 c0       	mov    eax,ds:0xc003c528
c00163a4:	85 c0                	test   eax,eax
c00163a6:	75 19                	jne    c00163c1 <scanMADT()+0x7d>
c00163a8:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c00163ad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00163b3:	83 e2 fb             	and    edx,0xfffffffb
c00163b6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00163bc:	e9 13 03 00 00       	jmp    c00166d4 <scanMADT()+0x390>
c00163c1:	a1 28 c5 03 c0       	mov    eax,ds:0xc003c528
c00163c6:	83 ec 0c             	sub    esp,0xc
c00163c9:	50                   	push   eax
c00163ca:	e8 94 fb ff ff       	call   c0015f63 <loadACPITables(unsigned char*)>
c00163cf:	83 c4 10             	add    esp,0x10
c00163d2:	a1 28 c5 03 c0       	mov    eax,ds:0xc003c528
c00163d7:	83 ec 08             	sub    esp,0x8
c00163da:	68 da 9e 03 c0       	push   0xc0039eda
c00163df:	50                   	push   eax
c00163e0:	e8 c3 fe ff ff       	call   c00162a8 <findDataTable(unsigned char*, char*)>
c00163e5:	83 c4 10             	add    esp,0x10
c00163e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00163f1:	75 19                	jne    c001640c <scanMADT()+0xc8>
c00163f3:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c00163f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00163fe:	83 e2 fe             	and    edx,0xfffffffe
c0016401:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016407:	e9 c8 02 00 00       	jmp    c00166d4 <scanMADT()+0x390>
c001640c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016414:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001641b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001641f:	0f 87 af 02 00 00    	ja     c00166d4 <scanMADT()+0x390>
c0016425:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001642d:	0f 87 a1 02 00 00    	ja     c00166d4 <scanMADT()+0x390>
c0016433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016437:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001643b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001643f:	8d 50 01             	lea    edx,[eax+0x1]
c0016442:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016446:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001644a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001644e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016456:	8d 50 01             	lea    edx,[eax+0x1]
c0016459:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001645d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016461:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016465:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016469:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001646e:	0f 86 5f 02 00 00    	jbe    c00166d3 <scanMADT()+0x38f>
c0016474:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016479:	75 57                	jne    c00164d2 <scanMADT()+0x18e>
c001647b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001647f:	8d 50 01             	lea    edx,[eax+0x1]
c0016482:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016486:	8a 15 60 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c660
c001648c:	0f b6 d2             	movzx  edx,dl
c001648f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016493:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016497:	88 82 a0 c6 03 c0    	mov    BYTE PTR [edx-0x3ffc3960],al
c001649d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164a1:	8d 50 01             	lea    edx,[eax+0x1]
c00164a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164a8:	8a 15 60 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c660
c00164ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c00164b1:	88 0d 60 c6 03 c0    	mov    BYTE PTR ds:0xc003c660,cl
c00164b7:	0f b6 d2             	movzx  edx,dl
c00164ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00164be:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00164c2:	88 82 80 c6 03 c0    	mov    BYTE PTR [edx-0x3ffc3980],al
c00164c8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00164cd:	e9 ea 01 00 00       	jmp    c00166bc <scanMADT()+0x378>
c00164d2:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00164d7:	0f 85 14 01 00 00    	jne    c00165f1 <scanMADT()+0x2ad>
c00164dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e1:	8d 50 01             	lea    edx,[eax+0x1]
c00164e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164e8:	8a 15 30 c5 03 c0    	mov    dl,BYTE PTR ds:0xc003c530
c00164ee:	0f b6 d2             	movzx  edx,dl
c00164f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00164f5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00164f9:	88 82 40 c5 03 c0    	mov    BYTE PTR [edx-0x3ffc3ac0],al
c00164ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016503:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001650b:	01 d0                	add    eax,edx
c001650d:	83 c0 2c             	add    eax,0x2c
c0016510:	8a 00                	mov    al,BYTE PTR [eax]
c0016512:	0f b6 d0             	movzx  edx,al
c0016515:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016519:	8d 48 01             	lea    ecx,[eax+0x1]
c001651c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016520:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016524:	0f b6 c0             	movzx  eax,al
c0016527:	c1 e0 08             	shl    eax,0x8
c001652a:	89 d1                	mov    ecx,edx
c001652c:	09 c1                	or     ecx,eax
c001652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016532:	8d 50 02             	lea    edx,[eax+0x2]
c0016535:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016539:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001653d:	0f b6 c0             	movzx  eax,al
c0016540:	c1 e0 10             	shl    eax,0x10
c0016543:	09 c1                	or     ecx,eax
c0016545:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016549:	8d 50 03             	lea    edx,[eax+0x3]
c001654c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016550:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016554:	0f b6 c0             	movzx  eax,al
c0016557:	c1 e0 18             	shl    eax,0x18
c001655a:	09 c1                	or     ecx,eax
c001655c:	89 ca                	mov    edx,ecx
c001655e:	a0 30 c5 03 c0       	mov    al,ds:0xc003c530
c0016563:	0f b6 c0             	movzx  eax,al
c0016566:	89 14 85 60 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3aa0],edx
c001656d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016572:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001657a:	01 d0                	add    eax,edx
c001657c:	83 c0 2c             	add    eax,0x2c
c001657f:	8a 00                	mov    al,BYTE PTR [eax]
c0016581:	0f b6 d0             	movzx  edx,al
c0016584:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016588:	8d 48 01             	lea    ecx,[eax+0x1]
c001658b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001658f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016593:	0f b6 c0             	movzx  eax,al
c0016596:	c1 e0 08             	shl    eax,0x8
c0016599:	89 d1                	mov    ecx,edx
c001659b:	09 c1                	or     ecx,eax
c001659d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165a1:	8d 50 02             	lea    edx,[eax+0x2]
c00165a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165ac:	0f b6 c0             	movzx  eax,al
c00165af:	c1 e0 10             	shl    eax,0x10
c00165b2:	09 c1                	or     ecx,eax
c00165b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165b8:	8d 50 03             	lea    edx,[eax+0x3]
c00165bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165c3:	0f b6 c0             	movzx  eax,al
c00165c6:	c1 e0 18             	shl    eax,0x18
c00165c9:	09 c1                	or     ecx,eax
c00165cb:	89 ca                	mov    edx,ecx
c00165cd:	a0 30 c5 03 c0       	mov    al,ds:0xc003c530
c00165d2:	0f b6 c0             	movzx  eax,al
c00165d5:	89 14 85 e0 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3a20],edx
c00165dc:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00165e1:	a0 30 c5 03 c0       	mov    al,ds:0xc003c530
c00165e6:	40                   	inc    eax
c00165e7:	a2 30 c5 03 c0       	mov    ds:0xc003c530,al
c00165ec:	e9 cb 00 00 00       	jmp    c00166bc <scanMADT()+0x378>
c00165f1:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00165f6:	0f 85 a6 00 00 00    	jne    c00166a2 <scanMADT()+0x35e>
c00165fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016600:	8d 50 01             	lea    edx,[eax+0x1]
c0016603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016607:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001660b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001660f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016617:	8d 50 01             	lea    edx,[eax+0x1]
c001661a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001661e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016622:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016626:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001662a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001662e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016632:	01 d0                	add    eax,edx
c0016634:	83 c0 2c             	add    eax,0x2c
c0016637:	8a 00                	mov    al,BYTE PTR [eax]
c0016639:	0f b6 d0             	movzx  edx,al
c001663c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016640:	8d 48 01             	lea    ecx,[eax+0x1]
c0016643:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016647:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001664b:	0f b6 c0             	movzx  eax,al
c001664e:	c1 e0 08             	shl    eax,0x8
c0016651:	89 d1                	mov    ecx,edx
c0016653:	09 c1                	or     ecx,eax
c0016655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016659:	8d 50 02             	lea    edx,[eax+0x2]
c001665c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016660:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016664:	0f b6 c0             	movzx  eax,al
c0016667:	c1 e0 10             	shl    eax,0x10
c001666a:	09 c1                	or     ecx,eax
c001666c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016670:	8d 50 03             	lea    edx,[eax+0x3]
c0016673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016677:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001667b:	0f b6 c0             	movzx  eax,al
c001667e:	c1 e0 18             	shl    eax,0x18
c0016681:	09 c8                	or     eax,ecx
c0016683:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016687:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001668c:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016691:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001669a:	88 90 80 b0 03 c0    	mov    BYTE PTR [eax-0x3ffc4f80],dl
c00166a0:	eb 1a                	jmp    c00166bc <scanMADT()+0x378>
c00166a2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00166a7:	75 07                	jne    c00166b0 <scanMADT()+0x36c>
c00166a9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00166ae:	eb 0c                	jmp    c00166bc <scanMADT()+0x378>
c00166b0:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00166b5:	75 05                	jne    c00166bc <scanMADT()+0x378>
c00166b7:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00166bc:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00166c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166c5:	01 d0                	add    eax,edx
c00166c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166cb:	e9 44 fd ff ff       	jmp    c0016414 <scanMADT()+0xd0>
c00166d0:	90                   	nop
c00166d1:	eb 01                	jmp    c00166d4 <scanMADT()+0x390>
c00166d3:	90                   	nop
c00166d4:	83 c4 2c             	add    esp,0x2c
c00166d7:	c3                   	ret    

c00166d8 <ACPI::ACPI()>:
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166df:	83 ec 08             	sub    esp,0x8
c00166e2:	68 df 9e 03 c0       	push   0xc0039edf
c00166e7:	50                   	push   eax
c00166e8:	e8 a7 d1 ff ff       	call   c0013894 <Device::Device(char const*)>
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	ba 68 a0 03 c0       	mov    edx,0xc003a068
c00166f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f9:	89 10                	mov    DWORD PTR [eax],edx
c00166fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001670a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016718:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016726:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001672d:	e8 12 fc ff ff       	call   c0016344 <scanMADT()>
c0016732:	90                   	nop
c0016733:	83 c4 0c             	add    esp,0xc
c0016736:	c3                   	ret    
c0016737:	90                   	nop

c0016738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016738:	83 ec 2c             	sub    esp,0x2c
c001673b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001673f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016743:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016747:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001674b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016750:	88 d0                	mov    al,dl
c0016752:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016756:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001675b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016763:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016767:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001676d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016771:	0f 8d 97 00 00 00    	jge    c001680e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016777:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001677b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001677f:	83 c2 2a             	add    edx,0x2a
c0016782:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016786:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001678b:	75 78                	jne    c0016805 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001678d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016791:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016795:	83 c2 2a             	add    edx,0x2a
c0016798:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001679c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00167a0:	75 63                	jne    c0016805 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00167a2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00167a7:	74 3a                	je     c00167e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00167a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00167b1:	83 c2 2a             	add    edx,0x2a
c00167b4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00167b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00167bf:	39 c2                	cmp    edx,eax
c00167c1:	74 10                	je     c00167d3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00167c3:	83 ec 0c             	sub    esp,0xc
c00167c6:	68 cc 9f 03 c0       	push   0xc0039fcc
c00167cb:	e8 38 67 ff ff       	call   c000cf08 <panic(char const*)>
c00167d0:	83 c4 10             	add    esp,0x10
c00167d3:	83 ec 0c             	sub    esp,0xc
c00167d6:	68 e4 9e 03 c0       	push   0xc0039ee4
c00167db:	e8 28 67 ff ff       	call   c000cf08 <panic(char const*)>
c00167e0:	83 c4 10             	add    esp,0x10
c00167e3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00167e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00167ef:	83 c2 2a             	add    edx,0x2a
c00167f2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00167f6:	8b 02                	mov    eax,DWORD PTR [edx]
c00167f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00167fb:	89 01                	mov    DWORD PTR [ecx],eax
c00167fd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016800:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016805:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016809:	e9 55 ff ff ff       	jmp    c0016763 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001680e:	90                   	nop
c001680f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016813:	83 c4 2c             	add    esp,0x2c
c0016816:	c2 04 00             	ret    0x4
c0016819:	90                   	nop

c001681a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001681a:	56                   	push   esi
c001681b:	53                   	push   ebx
c001681c:	83 ec 14             	sub    esp,0x14
c001681f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016823:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016827:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001682b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016830:	88 c8                	mov    al,cl
c0016832:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016836:	88 d0                	mov    al,dl
c0016838:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001683c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016840:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016850:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016855:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001685a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001685f:	83 ec 04             	sub    esp,0x4
c0016862:	56                   	push   esi
c0016863:	53                   	push   ebx
c0016864:	51                   	push   ecx
c0016865:	52                   	push   edx
c0016866:	50                   	push   eax
c0016867:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001686b:	68 fc 9f 03 c0       	push   0xc0039ffc
c0016870:	e8 75 65 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0016875:	83 c4 20             	add    esp,0x20
c0016878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687c:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016886:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016889:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001688d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016891:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016895:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001689b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001689f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00168a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168a6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00168ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168af:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00168b5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00168b9:	8d 48 01             	lea    ecx,[eax+0x1]
c00168bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c0:	83 c2 2a             	add    edx,0x2a
c00168c3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00168c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00168d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00168d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168dc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00168e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e4:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00168ea:	8d 50 01             	lea    edx,[eax+0x1]
c00168ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f1:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00168f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016901:	3d 00 08 00 00       	cmp    eax,0x800
c0016906:	75 10                	jne    c0016918 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	68 f3 9e 03 c0       	push   0xc0039ef3
c0016910:	e8 f3 65 ff ff       	call   c000cf08 <panic(char const*)>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	90                   	nop
c0016919:	83 c4 14             	add    esp,0x14
c001691c:	5b                   	pop    ebx
c001691d:	5e                   	pop    esi
c001691e:	c3                   	ret    
c001691f:	90                   	nop

c0016920 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0016920:	b8 00 00 00 00       	mov    eax,0x0
c0016925:	c3                   	ret    

c0016926 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0016926:	83 ec 1c             	sub    esp,0x1c
c0016929:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001692d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0016930:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016934:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0016939:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001693e:	83 ec 08             	sub    esp,0x8
c0016941:	52                   	push   edx
c0016942:	50                   	push   eax
c0016943:	e8 0e 4c ff ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c0016948:	83 c4 10             	add    esp,0x10
c001694b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001694f:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0016954:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016959:	83 ec 04             	sub    esp,0x4
c001695c:	6a 01                	push   0x1
c001695e:	52                   	push   edx
c001695f:	50                   	push   eax
c0016960:	e8 f9 4c ff ff       	call   c000b65e <Computer::writeCMOS(unsigned char, unsigned char)>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	90                   	nop
c0016969:	83 c4 1c             	add    esp,0x1c
c001696c:	c3                   	ret    
c001696d:	90                   	nop

c001696e <ACPI::open(int, int, void*)>:
c001696e:	53                   	push   ebx
c001696f:	83 ec 18             	sub    esp,0x18
c0016972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016976:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001697d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016981:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016987:	84 c0                	test   al,al
c0016989:	74 60                	je     c00169eb <ACPI::open(int, int, void*)+0x7d>
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	68 58 01 00 00       	push   0x158
c0016993:	e8 02 ba ff ff       	call   c001239a <operator new(unsigned long)>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	89 c3                	mov    ebx,eax
c001699d:	83 ec 0c             	sub    esp,0xc
c00169a0:	53                   	push   ebx
c00169a1:	e8 26 45 00 00       	call   c001aecc <PCI::PCI()>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00169ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b1:	83 ec 08             	sub    esp,0x8
c00169b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00169b8:	50                   	push   eax
c00169b9:	e8 e6 cc ff ff       	call   c00136a4 <Device::addChild(Device*)>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00169c7:	83 c0 08             	add    eax,0x8
c00169ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00169cc:	6a 00                	push   0x0
c00169ce:	6a 00                	push   0x0
c00169d0:	6a 00                	push   0x0
c00169d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169d6:	ff d0                	call   eax
c00169d8:	83 c4 10             	add    esp,0x10
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	68 10 9f 03 c0       	push   0xc0039f10
c00169e3:	e8 02 64 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00169e8:	83 c4 10             	add    esp,0x10
c00169eb:	83 ec 0c             	sub    esp,0xc
c00169ee:	68 1b 9f 03 c0       	push   0xc0039f1b
c00169f3:	e8 0a 52 ff ff       	call   c000bc02 <loadKernelSymbolTable(char const*)>
c00169f8:	83 c4 10             	add    esp,0x10
c00169fb:	8b 1d 28 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b928
c0016a01:	83 ec 0c             	sub    esp,0xc
c0016a04:	68 39 9f 03 c0       	push   0xc0039f39
c0016a09:	e8 bd 5b ff ff       	call   c000c5cb <loadDLL(char const*)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	83 ec 08             	sub    esp,0x8
c0016a14:	53                   	push   ebx
c0016a15:	50                   	push   eax
c0016a16:	e8 79 5c ff ff       	call   c000c694 <executeDLL(unsigned long, void*)>
c0016a1b:	83 c4 10             	add    esp,0x10
c0016a1e:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0016a23:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a29:	83 e0 04             	and    eax,0x4
c0016a2c:	84 c0                	test   al,al
c0016a2e:	74 57                	je     c0016a87 <ACPI::open(int, int, void*)+0x119>
c0016a30:	8b 1d 28 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b928
c0016a36:	83 ec 0c             	sub    esp,0xc
c0016a39:	68 56 9f 03 c0       	push   0xc0039f56
c0016a3e:	e8 88 5b ff ff       	call   c000c5cb <loadDLL(char const*)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	83 ec 08             	sub    esp,0x8
c0016a49:	53                   	push   ebx
c0016a4a:	50                   	push   eax
c0016a4b:	e8 44 5c ff ff       	call   c000c694 <executeDLL(unsigned long, void*)>
c0016a50:	83 c4 10             	add    esp,0x10
c0016a53:	a1 28 c5 03 c0       	mov    eax,ds:0xc003c528
c0016a58:	83 ec 08             	sub    esp,0x8
c0016a5b:	68 73 9f 03 c0       	push   0xc0039f73
c0016a60:	50                   	push   eax
c0016a61:	e8 42 f8 ff ff       	call   c00162a8 <findDataTable(unsigned char*, char*)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a6d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016a72:	74 13                	je     c0016a87 <ACPI::open(int, int, void*)+0x119>
c0016a74:	83 ec 08             	sub    esp,0x8
c0016a77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a7f:	e8 a2 fe ff ff       	call   c0016926 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	b8 00 00 00 00       	mov    eax,0x0
c0016a8c:	83 c4 18             	add    esp,0x18
c0016a8f:	5b                   	pop    ebx
c0016a90:	c3                   	ret    
c0016a91:	90                   	nop

c0016a92 <ACPI::sleep()>:
c0016a92:	83 ec 0c             	sub    esp,0xc
c0016a95:	a1 00 c3 03 c0       	mov    eax,ds:0xc003c300
c0016a9a:	85 c0                	test   eax,eax
c0016a9c:	74 07                	je     c0016aa5 <ACPI::sleep()+0x13>
c0016a9e:	a1 00 c3 03 c0       	mov    eax,ds:0xc003c300
c0016aa3:	ff d0                	call   eax
c0016aa5:	90                   	nop
c0016aa6:	83 c4 0c             	add    esp,0xc
c0016aa9:	c3                   	ret    

c0016aaa <CPU::close(int, int, void*)>:
c0016aaa:	31 c0                	xor    eax,eax
c0016aac:	c3                   	ret    

c0016aad <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016aad:	55                   	push   ebp
c0016aae:	57                   	push   edi
c0016aaf:	56                   	push   esi
c0016ab0:	53                   	push   ebx
c0016ab1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016ab5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ab9:	89 ce                	mov    esi,ecx
c0016abb:	89 d5                	mov    ebp,edx
c0016abd:	80 f9 04             	cmp    cl,0x4
c0016ac0:	75 28                	jne    c0016aea <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016ac2:	8d 42 f9             	lea    eax,[edx-0x7]
c0016ac5:	3c 03                	cmp    al,0x3
c0016ac7:	0f 86 63 01 00 00    	jbe    c0016c30 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016acd:	80 fa 03             	cmp    dl,0x3
c0016ad0:	0f 84 5a 01 00 00    	je     c0016c30 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016ad6:	8d 7a f2             	lea    edi,[edx-0xe]
c0016ad9:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016ade:	89 fb                	mov    ebx,edi
c0016ae0:	80 fb 01             	cmp    bl,0x1
c0016ae3:	77 4e                	ja     c0016b33 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016ae5:	e9 52 01 00 00       	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016aea:	80 f9 05             	cmp    cl,0x5
c0016aed:	75 4d                	jne    c0016b3c <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016aef:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016af4:	80 fa 03             	cmp    dl,0x3
c0016af7:	0f 86 3f 01 00 00    	jbe    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016afd:	8d 7a fa             	lea    edi,[edx-0x6]
c0016b00:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016b05:	89 fb                	mov    ebx,edi
c0016b07:	80 fb 01             	cmp    bl,0x1
c0016b0a:	0f 86 2c 01 00 00    	jbe    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b10:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016b15:	80 fa 08             	cmp    dl,0x8
c0016b18:	0f 84 1e 01 00 00    	je     c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b1e:	89 d7                	mov    edi,edx
c0016b20:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016b25:	83 e7 fb             	and    edi,0xfffffffb
c0016b28:	89 fb                	mov    ebx,edi
c0016b2a:	80 fb 09             	cmp    bl,0x9
c0016b2d:	0f 84 09 01 00 00    	je     c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b33:	31 c0                	xor    eax,eax
c0016b35:	89 eb                	mov    ebx,ebp
c0016b37:	0f b6 fb             	movzx  edi,bl
c0016b3a:	eb 30                	jmp    c0016b6c <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016b3c:	31 c0                	xor    eax,eax
c0016b3e:	80 f9 06             	cmp    cl,0x6
c0016b41:	75 f2                	jne    c0016b35 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016b43:	80 fa 0a             	cmp    dl,0xa
c0016b46:	77 ed                	ja     c0016b35 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016b48:	bf de 05 00 00       	mov    edi,0x5de
c0016b4d:	0f a3 d7             	bt     edi,edx
c0016b50:	73 e3                	jae    c0016b35 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016b52:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016b57:	e9 e0 00 00 00       	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b5c:	39 c7                	cmp    edi,eax
c0016b5e:	0f 84 d3 00 00 00    	je     c0016c37 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016b64:	40                   	inc    eax
c0016b65:	3d d0 00 00 00       	cmp    eax,0xd0
c0016b6a:	74 09                	je     c0016b75 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016b6c:	89 f3                	mov    ebx,esi
c0016b6e:	80 fb 0f             	cmp    bl,0xf
c0016b71:	75 f1                	jne    c0016b64 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016b73:	eb e7                	jmp    c0016b5c <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016b75:	80 f9 10             	cmp    cl,0x10
c0016b78:	75 14                	jne    c0016b8e <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016b7a:	8d 42 fc             	lea    eax,[edx-0x4]
c0016b7d:	83 e0 fb             	and    eax,0xfffffffb
c0016b80:	3c 02                	cmp    al,0x2
c0016b82:	76 34                	jbe    c0016bb8 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016b84:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016b89:	80 fa 02             	cmp    dl,0x2
c0016b8c:	eb 24                	jmp    c0016bb2 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016b8e:	80 f9 11             	cmp    cl,0x11
c0016b91:	75 13                	jne    c0016ba6 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016b93:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016b98:	80 fa 03             	cmp    dl,0x3
c0016b9b:	0f 85 9b 00 00 00    	jne    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ba1:	e9 91 00 00 00       	jmp    c0016c37 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016ba6:	80 f9 12             	cmp    cl,0x12
c0016ba9:	75 14                	jne    c0016bbf <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016bab:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016bb0:	fe ca                	dec    dl
c0016bb2:	0f 85 84 00 00 00    	jne    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bb8:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016bbd:	eb 7d                	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bbf:	80 f9 14             	cmp    cl,0x14
c0016bc2:	75 12                	jne    c0016bd6 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016bc4:	4a                   	dec    edx
c0016bc5:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016bca:	80 fa 01             	cmp    dl,0x1
c0016bcd:	77 6d                	ja     c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bcf:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016bd4:	eb 66                	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bd6:	80 f9 15             	cmp    cl,0x15
c0016bd9:	75 31                	jne    c0016c0c <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016bdb:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016be0:	80 fa 01             	cmp    dl,0x1
c0016be3:	74 57                	je     c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016be5:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016bea:	80 fa 13             	cmp    dl,0x13
c0016bed:	76 0c                	jbe    c0016bfb <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016bef:	80 fa 30             	cmp    dl,0x30
c0016bf2:	75 48                	jne    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bf4:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016bf9:	eb 41                	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bfb:	b9 04 00 09 00       	mov    ecx,0x90004
c0016c00:	0f a3 d1             	bt     ecx,edx
c0016c03:	73 37                	jae    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c05:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016c0a:	eb 30                	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c0c:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016c11:	80 f9 16             	cmp    cl,0x16
c0016c14:	75 26                	jne    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c16:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016c1b:	84 d2                	test   dl,dl
c0016c1d:	74 1d                	je     c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c1f:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016c24:	80 fa 30             	cmp    dl,0x30
c0016c27:	75 13                	jne    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c29:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016c2e:	eb 0c                	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c30:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016c35:	eb 05                	jmp    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c37:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016c3c:	5b                   	pop    ebx
c0016c3d:	5e                   	pop    esi
c0016c3e:	5f                   	pop    edi
c0016c3f:	5d                   	pop    ebp
c0016c40:	c3                   	ret    

c0016c41 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016c41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c49:	80 f9 04             	cmp    cl,0x4
c0016c4c:	75 6b                	jne    c0016cb9 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016c4e:	b8 a0 b0 03 c0       	mov    eax,0xc003b0a0
c0016c53:	80 fa 01             	cmp    dl,0x1
c0016c56:	0f 86 92 02 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c5c:	b8 b0 b0 03 c0       	mov    eax,0xc003b0b0
c0016c61:	80 fa 02             	cmp    dl,0x2
c0016c64:	0f 84 84 02 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c6a:	b8 c0 b0 03 c0       	mov    eax,0xc003b0c0
c0016c6f:	80 fa 03             	cmp    dl,0x3
c0016c72:	0f 84 76 02 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c78:	b8 d0 b0 03 c0       	mov    eax,0xc003b0d0
c0016c7d:	80 fa 04             	cmp    dl,0x4
c0016c80:	0f 84 68 02 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c86:	b8 e0 b0 03 c0       	mov    eax,0xc003b0e0
c0016c8b:	80 fa 05             	cmp    dl,0x5
c0016c8e:	0f 84 5a 02 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c94:	b8 c0 b0 03 c0       	mov    eax,0xc003b0c0
c0016c99:	80 fa 07             	cmp    dl,0x7
c0016c9c:	0f 84 4c 02 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ca2:	83 ea 08             	sub    edx,0x8
c0016ca5:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016caa:	80 fa 01             	cmp    dl,0x1
c0016cad:	0f 87 3b 02 00 00    	ja     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cb3:	b8 f0 b0 03 c0       	mov    eax,0xc003b0f0
c0016cb8:	c3                   	ret    
c0016cb9:	80 f9 05             	cmp    cl,0x5
c0016cbc:	75 45                	jne    c0016d03 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016cbe:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016cc1:	b8 00 b1 03 c0       	mov    eax,0xc003b100
c0016cc6:	80 f9 02             	cmp    cl,0x2
c0016cc9:	0f 86 1f 02 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ccf:	80 fa 04             	cmp    dl,0x4
c0016cd2:	0f 84 f3 01 00 00    	je     c0016ecb <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016cd8:	80 fa 07             	cmp    dl,0x7
c0016cdb:	0f 84 0d 02 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ce1:	b8 10 b1 03 c0       	mov    eax,0xc003b110
c0016ce6:	80 fa 08             	cmp    dl,0x8
c0016ce9:	0f 84 ff 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cef:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016cf4:	80 fa 09             	cmp    dl,0x9
c0016cf7:	0f 85 f1 01 00 00    	jne    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cfd:	b8 20 b1 03 c0       	mov    eax,0xc003b120
c0016d02:	c3                   	ret    
c0016d03:	80 f9 06             	cmp    cl,0x6
c0016d06:	0f 85 85 01 00 00    	jne    c0016e91 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016d0c:	b8 30 b1 03 c0       	mov    eax,0xc003b130
c0016d11:	80 fa 01             	cmp    dl,0x1
c0016d14:	0f 84 d4 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d1a:	8d 42 fb             	lea    eax,[edx-0x5]
c0016d1d:	3c 01                	cmp    al,0x1
c0016d1f:	0f 86 ac 01 00 00    	jbe    c0016ed1 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016d25:	80 fa 03             	cmp    dl,0x3
c0016d28:	0f 84 a3 01 00 00    	je     c0016ed1 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016d2e:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016d31:	b8 50 b1 03 c0       	mov    eax,0xc003b150
c0016d36:	80 f9 01             	cmp    cl,0x1
c0016d39:	0f 86 af 01 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d3f:	80 fa 09             	cmp    dl,0x9
c0016d42:	0f 84 8f 01 00 00    	je     c0016ed7 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016d48:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016d4b:	80 f9 01             	cmp    cl,0x1
c0016d4e:	0f 86 9a 01 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d54:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016d59:	80 fa 0d             	cmp    dl,0xd
c0016d5c:	0f 84 8c 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d62:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016d67:	80 fa 0e             	cmp    dl,0xe
c0016d6a:	0f 84 7e 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d70:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016d75:	80 fa 0f             	cmp    dl,0xf
c0016d78:	0f 84 70 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d7e:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016d83:	80 fa 15             	cmp    dl,0x15
c0016d86:	0f 84 62 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d8c:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016d8f:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016d94:	80 f9 01             	cmp    cl,0x1
c0016d97:	0f 86 51 01 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d9d:	80 fa 1a             	cmp    dl,0x1a
c0016da0:	0f 84 37 01 00 00    	je     c0016edd <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016da6:	80 fa 1c             	cmp    dl,0x1c
c0016da9:	0f 84 34 01 00 00    	je     c0016ee3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016daf:	80 fa 1d             	cmp    dl,0x1d
c0016db2:	0f 84 36 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016db8:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016dbd:	80 fa 25             	cmp    dl,0x25
c0016dc0:	0f 84 28 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dc6:	8d 4a da             	lea    ecx,[edx-0x26]
c0016dc9:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016dce:	80 f9 01             	cmp    cl,0x1
c0016dd1:	0f 86 17 01 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dd7:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016ddc:	80 fa 2a             	cmp    dl,0x2a
c0016ddf:	0f 84 09 01 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016de5:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016dea:	80 fa 2c             	cmp    dl,0x2c
c0016ded:	0f 84 fb 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016df3:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016df8:	80 fa 2d             	cmp    dl,0x2d
c0016dfb:	0f 84 ed 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e01:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016e06:	80 fa 2e             	cmp    dl,0x2e
c0016e09:	0f 84 df 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e0f:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016e14:	80 fa 2f             	cmp    dl,0x2f
c0016e17:	0f 84 d1 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e1d:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016e20:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016e25:	80 f9 01             	cmp    cl,0x1
c0016e28:	0f 86 c0 00 00 00    	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e2e:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016e33:	80 fa 37             	cmp    dl,0x37
c0016e36:	0f 84 b2 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e3c:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016e41:	80 fa 3a             	cmp    dl,0x3a
c0016e44:	0f 84 a4 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e4a:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016e4f:	80 fa 3c             	cmp    dl,0x3c
c0016e52:	0f 84 96 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e58:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016e5d:	80 fa 3d             	cmp    dl,0x3d
c0016e60:	0f 84 88 00 00 00    	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e66:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016e6b:	80 fa 3e             	cmp    dl,0x3e
c0016e6e:	74 7e                	je     c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e70:	8d 42 bb             	lea    eax,[edx-0x45]
c0016e73:	3c 01                	cmp    al,0x1
c0016e75:	76 72                	jbe    c0016ee9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016e77:	80 fa 3f             	cmp    dl,0x3f
c0016e7a:	74 6d                	je     c0016ee9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016e7c:	80 fa 4a             	cmp    dl,0x4a
c0016e7f:	74 0a                	je     c0016e8b <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016e81:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016e86:	80 fa 4d             	cmp    dl,0x4d
c0016e89:	75 63                	jne    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e8b:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016e90:	c3                   	ret    
c0016e91:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016e96:	80 f9 0b             	cmp    cl,0xb
c0016e99:	75 0a                	jne    c0016ea5 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016e9b:	fe ca                	dec    dl
c0016e9d:	75 4f                	jne    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e9f:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016ea4:	c3                   	ret    
c0016ea5:	80 f9 0f             	cmp    cl,0xf
c0016ea8:	75 44                	jne    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eaa:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016eaf:	80 fa 02             	cmp    dl,0x2
c0016eb2:	76 3a                	jbe    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eb4:	8d 42 fd             	lea    eax,[edx-0x3]
c0016eb7:	3c 01                	cmp    al,0x1
c0016eb9:	76 0a                	jbe    c0016ec5 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016ebb:	b8 e1 a1 03 c0       	mov    eax,0xc003a1e1
c0016ec0:	80 fa 06             	cmp    dl,0x6
c0016ec3:	75 29                	jne    c0016eee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ec5:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016eca:	c3                   	ret    
c0016ecb:	b8 10 b1 03 c0       	mov    eax,0xc003b110
c0016ed0:	c3                   	ret    
c0016ed1:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016ed6:	c3                   	ret    
c0016ed7:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016edc:	c3                   	ret    
c0016edd:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016ee2:	c3                   	ret    
c0016ee3:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016ee8:	c3                   	ret    
c0016ee9:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016eee:	c3                   	ret    

c0016eef <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016eef:	60                   	pusha  
c0016ef0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016efc:	9c                   	pushf  
c0016efd:	fa                   	cli    
c0016efe:	0f 09                	wbinvd 
c0016f00:	0f 30                	wrmsr  
c0016f02:	9d                   	popf   
c0016f03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f07:	89 02                	mov    DWORD PTR [edx],eax
c0016f09:	61                   	popa   
c0016f0a:	c3                   	ret    

c0016f0b <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016f0b:	60                   	pusha  
c0016f0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f10:	9c                   	pushf  
c0016f11:	fa                   	cli    
c0016f12:	0f 09                	wbinvd 
c0016f14:	31 c0                	xor    eax,eax
c0016f16:	31 d2                	xor    edx,edx
c0016f18:	0f 32                	rdmsr  
c0016f1a:	9d                   	popf   
c0016f1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f1f:	89 02                	mov    DWORD PTR [edx],eax
c0016f21:	61                   	popa   
c0016f22:	c3                   	ret    

c0016f23 <AMD_K6_writeback(int, int, int)>:
c0016f23:	56                   	push   esi
c0016f24:	53                   	push   ebx
c0016f25:	83 ec 10             	sub    esp,0x10
c0016f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2c:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016f31:	75 5d                	jne    c0016f90 <AMD_K6_writeback(int, int, int)+0x6d>
c0016f33:	83 f8 08             	cmp    eax,0x8
c0016f36:	75 09                	jne    c0016f41 <AMD_K6_writeback(int, int, int)+0x1e>
c0016f38:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016f3d:	7e 13                	jle    c0016f52 <AMD_K6_writeback(int, int, int)+0x2f>
c0016f3f:	eb 30                	jmp    c0016f71 <AMD_K6_writeback(int, int, int)+0x4e>
c0016f41:	83 f8 06             	cmp    eax,0x6
c0016f44:	7c 4a                	jl     c0016f90 <AMD_K6_writeback(int, int, int)+0x6d>
c0016f46:	83 f8 07             	cmp    eax,0x7
c0016f49:	7e 07                	jle    c0016f52 <AMD_K6_writeback(int, int, int)+0x2f>
c0016f4b:	83 f8 09             	cmp    eax,0x9
c0016f4e:	74 21                	je     c0016f71 <AMD_K6_writeback(int, int, int)+0x4e>
c0016f50:	eb 3e                	jmp    c0016f90 <AMD_K6_writeback(int, int, int)+0x6d>
c0016f52:	89 e6                	mov    esi,esp
c0016f54:	8b 1d e4 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bae4
c0016f5a:	56                   	push   esi
c0016f5b:	c1 eb 15             	shr    ebx,0x15
c0016f5e:	68 82 00 00 c0       	push   0xc0000082
c0016f63:	83 e3 7e             	and    ebx,0x7e
c0016f66:	e8 a0 ff ff ff       	call   c0016f0b <AMD_K6_read_msr(unsigned int, REGS*)>
c0016f6b:	56                   	push   esi
c0016f6c:	6a 00                	push   0x0
c0016f6e:	53                   	push   ebx
c0016f6f:	eb 12                	jmp    c0016f83 <AMD_K6_writeback(int, int, int)+0x60>
c0016f71:	89 e3                	mov    ebx,esp
c0016f73:	53                   	push   ebx
c0016f74:	68 82 00 00 c0       	push   0xc0000082
c0016f79:	e8 8d ff ff ff       	call   c0016f0b <AMD_K6_read_msr(unsigned int, REGS*)>
c0016f7e:	53                   	push   ebx
c0016f7f:	6a 00                	push   0x0
c0016f81:	6a 00                	push   0x0
c0016f83:	68 82 00 00 c0       	push   0xc0000082
c0016f88:	e8 62 ff ff ff       	call   c0016eef <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016f8d:	83 c4 18             	add    esp,0x18
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	5b                   	pop    ebx
c0016f94:	5e                   	pop    esi
c0016f95:	c3                   	ret    

c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016f96:	55                   	push   ebp
c0016f97:	57                   	push   edi
c0016f98:	56                   	push   esi
c0016f99:	53                   	push   ebx
c0016f9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016fa2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016fa6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0016faa:	39 05 40 b3 03 c0    	cmp    DWORD PTR ds:0xc003b340,eax
c0016fb0:	75 23                	jne    c0016fd5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016fb2:	a1 cc c6 03 c0       	mov    eax,ds:0xc003c6cc
c0016fb7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fbb:	89 06                	mov    DWORD PTR [esi],eax
c0016fbd:	a1 c8 c6 03 c0       	mov    eax,ds:0xc003c6c8
c0016fc2:	89 07                	mov    DWORD PTR [edi],eax
c0016fc4:	a1 c4 c6 03 c0       	mov    eax,ds:0xc003c6c4
c0016fc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0016fcc:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c0016fd1:	89 02                	mov    DWORD PTR [edx],eax
c0016fd3:	eb 3f                	jmp    c0017014 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0016fd5:	31 c9                	xor    ecx,ecx
c0016fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fdb:	0f a2                	cpuid  
c0016fdd:	89 06                	mov    DWORD PTR [esi],eax
c0016fdf:	89 1f                	mov    DWORD PTR [edi],ebx
c0016fe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fe5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0016fe8:	89 10                	mov    DWORD PTR [eax],edx
c0016fea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fee:	a3 40 b3 03 c0       	mov    ds:0xc003b340,eax
c0016ff3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ff5:	a3 cc c6 03 c0       	mov    ds:0xc003c6cc,eax
c0016ffa:	8b 07                	mov    eax,DWORD PTR [edi]
c0016ffc:	a3 c8 c6 03 c0       	mov    ds:0xc003c6c8,eax
c0017001:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017004:	a3 c4 c6 03 c0       	mov    ds:0xc003c6c4,eax
c0017009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700d:	8b 00                	mov    eax,DWORD PTR [eax]
c001700f:	a3 c0 c6 03 c0       	mov    ds:0xc003c6c0,eax
c0017014:	5b                   	pop    ebx
c0017015:	5e                   	pop    esi
c0017016:	5f                   	pop    edi
c0017017:	5d                   	pop    ebp
c0017018:	c3                   	ret    

c0017019 <cpuidCheckEDX(unsigned int)>:
c0017019:	83 ec 10             	sub    esp,0x10
c001701c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017020:	50                   	push   eax
c0017021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017025:	50                   	push   eax
c0017026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001702a:	50                   	push   eax
c001702b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001702f:	50                   	push   eax
c0017030:	6a 01                	push   0x1
c0017032:	e8 5f ff ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001703b:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001703f:	0f 95 c0             	setne  al
c0017042:	83 c4 24             	add    esp,0x24
c0017045:	c3                   	ret    

c0017046 <cpuidCheckECX(unsigned int)>:
c0017046:	83 ec 10             	sub    esp,0x10
c0017049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001704d:	50                   	push   eax
c001704e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017052:	50                   	push   eax
c0017053:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017057:	50                   	push   eax
c0017058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001705c:	50                   	push   eax
c001705d:	6a 01                	push   0x1
c001705f:	e8 32 ff ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017068:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001706c:	0f 95 c0             	setne  al
c001706f:	83 c4 24             	add    esp,0x24
c0017072:	c3                   	ret    

c0017073 <cpuidCheckExtendedEBX(unsigned int)>:
c0017073:	83 ec 10             	sub    esp,0x10
c0017076:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001707a:	50                   	push   eax
c001707b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001707f:	50                   	push   eax
c0017080:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017084:	50                   	push   eax
c0017085:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017089:	50                   	push   eax
c001708a:	6a 07                	push   0x7
c001708c:	e8 05 ff ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017095:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017099:	0f 95 c0             	setne  al
c001709c:	83 c4 24             	add    esp,0x24
c001709f:	c3                   	ret    

c00170a0 <cpuidCheckExtendedECX(unsigned int)>:
c00170a0:	83 ec 10             	sub    esp,0x10
c00170a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a7:	50                   	push   eax
c00170a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170ac:	50                   	push   eax
c00170ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170b1:	50                   	push   eax
c00170b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170b6:	50                   	push   eax
c00170b7:	6a 07                	push   0x7
c00170b9:	e8 d8 fe ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00170c6:	0f 95 c0             	setne  al
c00170c9:	83 c4 24             	add    esp,0x24
c00170cc:	c3                   	ret    

c00170cd <getCPUNumber()>:
c00170cd:	31 c0                	xor    eax,eax
c00170cf:	c3                   	ret    

c00170d0 <thisCPU()>:
c00170d0:	e8 f8 ff ff ff       	call   c00170cd <getCPUNumber()>
c00170d5:	8b 15 28 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b928
c00170db:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00170e2:	c3                   	ret    
c00170e3:	90                   	nop

c00170e4 <CPU::CPU()>:
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170eb:	83 ec 08             	sub    esp,0x8
c00170ee:	68 e1 a1 03 c0       	push   0xc003a1e1
c00170f3:	50                   	push   eax
c00170f4:	e8 9b c7 ff ff       	call   c0013894 <Device::Device(char const*)>
c00170f9:	83 c4 10             	add    esp,0x10
c00170fc:	ba b8 a2 03 c0       	mov    edx,0xc003a2b8
c0017101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017105:	89 10                	mov    DWORD PTR [eax],edx
c0017107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001710b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017119:	05 78 01 00 00       	add    eax,0x178
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	50                   	push   eax
c0017122:	e8 b5 55 ff ff       	call   c000c6dc <GDT::GDT()>
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001712e:	05 7c 09 00 00       	add    eax,0x97c
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	50                   	push   eax
c0017137:	e8 00 58 ff ff       	call   c000c93c <IDT::IDT()>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017143:	05 7c 11 00 00       	add    eax,0x117c
c0017148:	83 ec 0c             	sub    esp,0xc
c001714b:	50                   	push   eax
c001714c:	e8 9f 9b ff ff       	call   c0010cf0 <TSS::TSS()>
c0017151:	83 c4 10             	add    esp,0x10
c0017154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017158:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001715f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017163:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001716d:	90                   	nop
c001716e:	83 c4 0c             	add    esp,0xc
c0017171:	c3                   	ret    

c0017172 <CPU::displayFeatures()>:
c0017172:	c3                   	ret    
c0017173:	90                   	nop

c0017174 <CPU::detectFeatures()>:
c0017174:	55                   	push   ebp
c0017175:	57                   	push   edi
c0017176:	56                   	push   esi
c0017177:	53                   	push   ebx
c0017178:	83 ec 50             	sub    esp,0x50
c001717b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001717f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017189:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017190:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017196:	6a 0d                	push   0xd
c0017198:	6a 00                	push   0x0
c001719a:	57                   	push   edi
c001719b:	e8 20 95 fe ff       	call   c00006c0 <memset>
c00171a0:	83 c4 10             	add    esp,0x10
c00171a3:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c00171a8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00171af:	0f 84 20 09 00 00    	je     c0017ad5 <CPU::detectFeatures()+0x961>
c00171b5:	83 ec 0c             	sub    esp,0xc
c00171b8:	6a 10                	push   0x10
c00171ba:	e8 5a fe ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c00171bf:	83 e0 01             	and    eax,0x1
c00171c2:	8d 14 00             	lea    edx,[eax+eax*1]
c00171c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00171cb:	83 e0 fd             	and    eax,0xfffffffd
c00171ce:	09 d0                	or     eax,edx
c00171d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00171d6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00171dd:	e8 37 fe ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c00171e2:	83 e0 01             	and    eax,0x1
c00171e5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00171ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00171f2:	83 e0 fb             	and    eax,0xfffffffb
c00171f5:	09 d0                	or     eax,edx
c00171f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00171fd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017204:	e8 10 fe ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c0017209:	83 e0 01             	and    eax,0x1
c001720c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017213:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017219:	83 e0 f7             	and    eax,0xfffffff7
c001721c:	09 d0                	or     eax,edx
c001721e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017224:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001722b:	e8 e9 fd ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c0017230:	83 e0 01             	and    eax,0x1
c0017233:	c1 e0 04             	shl    eax,0x4
c0017236:	88 c2                	mov    dl,al
c0017238:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001723e:	83 e0 ef             	and    eax,0xffffffef
c0017241:	09 d0                	or     eax,edx
c0017243:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017249:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017250:	e8 c4 fd ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c0017255:	83 e0 01             	and    eax,0x1
c0017258:	c1 e0 05             	shl    eax,0x5
c001725b:	88 c2                	mov    dl,al
c001725d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017263:	83 e0 df             	and    eax,0xffffffdf
c0017266:	09 d0                	or     eax,edx
c0017268:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001726e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017275:	e8 9f fd ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c001727a:	83 e0 01             	and    eax,0x1
c001727d:	8d 14 00             	lea    edx,[eax+eax*1]
c0017280:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017286:	83 e0 fd             	and    eax,0xfffffffd
c0017289:	09 d0                	or     eax,edx
c001728b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017291:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017298:	e8 7c fd ff ff       	call   c0017019 <cpuidCheckEDX(unsigned int)>
c001729d:	83 e0 01             	and    eax,0x1
c00172a0:	c1 e0 06             	shl    eax,0x6
c00172a3:	88 c2                	mov    dl,al
c00172a5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00172ab:	83 e0 bf             	and    eax,0xffffffbf
c00172ae:	09 d0                	or     eax,edx
c00172b0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00172b6:	58                   	pop    eax
c00172b7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00172bb:	56                   	push   esi
c00172bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00172c0:	55                   	push   ebp
c00172c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00172c5:	50                   	push   eax
c00172c6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00172ca:	52                   	push   edx
c00172cb:	6a 00                	push   0x0
c00172cd:	e8 c4 fc ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00172d2:	83 c4 1c             	add    esp,0x1c
c00172d5:	6a 04                	push   0x4
c00172d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172db:	50                   	push   eax
c00172dc:	57                   	push   edi
c00172dd:	e8 92 93 fe ff       	call   c0000674 <memcpy>
c00172e2:	83 c4 0c             	add    esp,0xc
c00172e5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00172eb:	6a 04                	push   0x4
c00172ed:	56                   	push   esi
c00172ee:	50                   	push   eax
c00172ef:	e8 80 93 fe ff       	call   c0000674 <memcpy>
c00172f4:	83 c4 0c             	add    esp,0xc
c00172f7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00172fd:	6a 04                	push   0x4
c00172ff:	55                   	push   ebp
c0017300:	50                   	push   eax
c0017301:	e8 6e 93 fe ff       	call   c0000674 <memcpy>
c0017306:	58                   	pop    eax
c0017307:	5a                   	pop    edx
c0017308:	68 8c a0 03 c0       	push   0xc003a08c
c001730d:	57                   	push   edi
c001730e:	e8 f5 94 fe ff       	call   c0000808 <strcmp>
c0017313:	83 c4 10             	add    esp,0x10
c0017316:	85 c0                	test   eax,eax
c0017318:	75 0f                	jne    c0017329 <CPU::detectFeatures()+0x1b5>
c001731a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017324:	e9 22 02 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c0017329:	50                   	push   eax
c001732a:	50                   	push   eax
c001732b:	68 99 a0 03 c0       	push   0xc003a099
c0017330:	57                   	push   edi
c0017331:	e8 d2 94 fe ff       	call   c0000808 <strcmp>
c0017336:	83 c4 10             	add    esp,0x10
c0017339:	85 c0                	test   eax,eax
c001733b:	74 dd                	je     c001731a <CPU::detectFeatures()+0x1a6>
c001733d:	51                   	push   ecx
c001733e:	51                   	push   ecx
c001733f:	68 a6 a0 03 c0       	push   0xc003a0a6
c0017344:	57                   	push   edi
c0017345:	e8 be 94 fe ff       	call   c0000808 <strcmp>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	85 c0                	test   eax,eax
c001734f:	74 2a                	je     c001737b <CPU::detectFeatures()+0x207>
c0017351:	52                   	push   edx
c0017352:	52                   	push   edx
c0017353:	68 b3 a0 03 c0       	push   0xc003a0b3
c0017358:	57                   	push   edi
c0017359:	e8 aa 94 fe ff       	call   c0000808 <strcmp>
c001735e:	83 c4 10             	add    esp,0x10
c0017361:	85 c0                	test   eax,eax
c0017363:	74 16                	je     c001737b <CPU::detectFeatures()+0x207>
c0017365:	50                   	push   eax
c0017366:	50                   	push   eax
c0017367:	68 c0 a0 03 c0       	push   0xc003a0c0
c001736c:	57                   	push   edi
c001736d:	e8 96 94 fe ff       	call   c0000808 <strcmp>
c0017372:	83 c4 10             	add    esp,0x10
c0017375:	85 c0                	test   eax,eax
c0017377:	74 48                	je     c00173c1 <CPU::detectFeatures()+0x24d>
c0017379:	eb 0f                	jmp    c001738a <CPU::detectFeatures()+0x216>
c001737b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017385:	e9 c1 01 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c001738a:	50                   	push   eax
c001738b:	50                   	push   eax
c001738c:	68 cd a0 03 c0       	push   0xc003a0cd
c0017391:	57                   	push   edi
c0017392:	e8 71 94 fe ff       	call   c0000808 <strcmp>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	85 c0                	test   eax,eax
c001739c:	74 23                	je     c00173c1 <CPU::detectFeatures()+0x24d>
c001739e:	50                   	push   eax
c001739f:	50                   	push   eax
c00173a0:	68 da a0 03 c0       	push   0xc003a0da
c00173a5:	57                   	push   edi
c00173a6:	e8 5d 94 fe ff       	call   c0000808 <strcmp>
c00173ab:	83 c4 10             	add    esp,0x10
c00173ae:	85 c0                	test   eax,eax
c00173b0:	75 1e                	jne    c00173d0 <CPU::detectFeatures()+0x25c>
c00173b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00173bc:	e9 8a 01 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c00173c1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00173cb:	e9 7b 01 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c00173d0:	50                   	push   eax
c00173d1:	50                   	push   eax
c00173d2:	68 e7 a0 03 c0       	push   0xc003a0e7
c00173d7:	57                   	push   edi
c00173d8:	e8 2b 94 fe ff       	call   c0000808 <strcmp>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	85 c0                	test   eax,eax
c00173e2:	75 0f                	jne    c00173f3 <CPU::detectFeatures()+0x27f>
c00173e4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00173ee:	e9 58 01 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c00173f3:	50                   	push   eax
c00173f4:	50                   	push   eax
c00173f5:	68 a6 a0 03 c0       	push   0xc003a0a6
c00173fa:	57                   	push   edi
c00173fb:	e8 08 94 fe ff       	call   c0000808 <strcmp>
c0017400:	83 c4 10             	add    esp,0x10
c0017403:	85 c0                	test   eax,eax
c0017405:	75 0f                	jne    c0017416 <CPU::detectFeatures()+0x2a2>
c0017407:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017411:	e9 35 01 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c0017416:	50                   	push   eax
c0017417:	50                   	push   eax
c0017418:	68 f4 a0 03 c0       	push   0xc003a0f4
c001741d:	57                   	push   edi
c001741e:	e8 e5 93 fe ff       	call   c0000808 <strcmp>
c0017423:	83 c4 10             	add    esp,0x10
c0017426:	85 c0                	test   eax,eax
c0017428:	75 0f                	jne    c0017439 <CPU::detectFeatures()+0x2c5>
c001742a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017434:	e9 12 01 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c0017439:	51                   	push   ecx
c001743a:	51                   	push   ecx
c001743b:	68 01 a1 03 c0       	push   0xc003a101
c0017440:	57                   	push   edi
c0017441:	e8 c2 93 fe ff       	call   c0000808 <strcmp>
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	85 c0                	test   eax,eax
c001744b:	75 0f                	jne    c001745c <CPU::detectFeatures()+0x2e8>
c001744d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017457:	e9 ef 00 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c001745c:	52                   	push   edx
c001745d:	52                   	push   edx
c001745e:	68 0e a1 03 c0       	push   0xc003a10e
c0017463:	57                   	push   edi
c0017464:	e8 9f 93 fe ff       	call   c0000808 <strcmp>
c0017469:	83 c4 10             	add    esp,0x10
c001746c:	85 c0                	test   eax,eax
c001746e:	75 0f                	jne    c001747f <CPU::detectFeatures()+0x30b>
c0017470:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001747a:	e9 cc 00 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c001747f:	50                   	push   eax
c0017480:	50                   	push   eax
c0017481:	68 1b a1 03 c0       	push   0xc003a11b
c0017486:	57                   	push   edi
c0017487:	e8 7c 93 fe ff       	call   c0000808 <strcmp>
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	85 c0                	test   eax,eax
c0017491:	75 0f                	jne    c00174a2 <CPU::detectFeatures()+0x32e>
c0017493:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001749d:	e9 a9 00 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c00174a2:	50                   	push   eax
c00174a3:	50                   	push   eax
c00174a4:	68 28 a1 03 c0       	push   0xc003a128
c00174a9:	57                   	push   edi
c00174aa:	e8 59 93 fe ff       	call   c0000808 <strcmp>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	85 c0                	test   eax,eax
c00174b4:	75 0f                	jne    c00174c5 <CPU::detectFeatures()+0x351>
c00174b6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00174c0:	e9 86 00 00 00       	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c00174c5:	50                   	push   eax
c00174c6:	50                   	push   eax
c00174c7:	68 35 a1 03 c0       	push   0xc003a135
c00174cc:	57                   	push   edi
c00174cd:	e8 36 93 fe ff       	call   c0000808 <strcmp>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	85 c0                	test   eax,eax
c00174d7:	75 0c                	jne    c00174e5 <CPU::detectFeatures()+0x371>
c00174d9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00174e3:	eb 66                	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c00174e5:	50                   	push   eax
c00174e6:	50                   	push   eax
c00174e7:	68 42 a1 03 c0       	push   0xc003a142
c00174ec:	57                   	push   edi
c00174ed:	e8 16 93 fe ff       	call   c0000808 <strcmp>
c00174f2:	83 c4 10             	add    esp,0x10
c00174f5:	85 c0                	test   eax,eax
c00174f7:	75 0c                	jne    c0017505 <CPU::detectFeatures()+0x391>
c00174f9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017503:	eb 46                	jmp    c001754b <CPU::detectFeatures()+0x3d7>
c0017505:	50                   	push   eax
c0017506:	50                   	push   eax
c0017507:	68 4f a1 03 c0       	push   0xc003a14f
c001750c:	57                   	push   edi
c001750d:	e8 f6 92 fe ff       	call   c0000808 <strcmp>
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	85 c0                	test   eax,eax
c0017517:	74 e0                	je     c00174f9 <CPU::detectFeatures()+0x385>
c0017519:	50                   	push   eax
c001751a:	50                   	push   eax
c001751b:	68 5c a1 03 c0       	push   0xc003a15c
c0017520:	57                   	push   edi
c0017521:	e8 e2 92 fe ff       	call   c0000808 <strcmp>
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	85 c0                	test   eax,eax
c001752b:	74 cc                	je     c00174f9 <CPU::detectFeatures()+0x385>
c001752d:	51                   	push   ecx
c001752e:	51                   	push   ecx
c001752f:	68 69 a1 03 c0       	push   0xc003a169
c0017534:	57                   	push   edi
c0017535:	e8 ce 92 fe ff       	call   c0000808 <strcmp>
c001753a:	83 c4 10             	add    esp,0x10
c001753d:	85 c0                	test   eax,eax
c001753f:	74 b8                	je     c00174f9 <CPU::detectFeatures()+0x385>
c0017541:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001754b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017550:	0f 86 be 00 00 00    	jbe    c0017614 <CPU::detectFeatures()+0x4a0>
c0017556:	83 ec 0c             	sub    esp,0xc
c0017559:	68 80 00 00 00       	push   0x80
c001755e:	e8 10 fb ff ff       	call   c0017073 <cpuidCheckExtendedEBX(unsigned int)>
c0017563:	83 e0 01             	and    eax,0x1
c0017566:	c1 e0 06             	shl    eax,0x6
c0017569:	88 c2                	mov    dl,al
c001756b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017571:	83 e0 bf             	and    eax,0xffffffbf
c0017574:	09 d0                	or     eax,edx
c0017576:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001757c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017583:	e8 eb fa ff ff       	call   c0017073 <cpuidCheckExtendedEBX(unsigned int)>
c0017588:	83 e0 01             	and    eax,0x1
c001758b:	c1 e0 04             	shl    eax,0x4
c001758e:	88 c2                	mov    dl,al
c0017590:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017596:	83 e0 ef             	and    eax,0xffffffef
c0017599:	09 d0                	or     eax,edx
c001759b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00175a1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00175a8:	e8 c6 fa ff ff       	call   c0017073 <cpuidCheckExtendedEBX(unsigned int)>
c00175ad:	c1 e0 07             	shl    eax,0x7
c00175b0:	88 c2                	mov    dl,al
c00175b2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00175b8:	83 e0 7f             	and    eax,0x7f
c00175bb:	09 d0                	or     eax,edx
c00175bd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00175c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00175ca:	e8 d1 fa ff ff       	call   c00170a0 <cpuidCheckExtendedECX(unsigned int)>
c00175cf:	83 e0 01             	and    eax,0x1
c00175d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00175d9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00175df:	83 e0 f7             	and    eax,0xfffffff7
c00175e2:	09 d0                	or     eax,edx
c00175e4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00175ea:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00175f1:	e8 aa fa ff ff       	call   c00170a0 <cpuidCheckExtendedECX(unsigned int)>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	83 e0 01             	and    eax,0x1
c00175fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017603:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017609:	83 e0 fb             	and    eax,0xfffffffb
c001760c:	09 d0                	or     eax,edx
c001760e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017614:	83 ec 0c             	sub    esp,0xc
c0017617:	56                   	push   esi
c0017618:	55                   	push   ebp
c0017619:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001761d:	57                   	push   edi
c001761e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017622:	50                   	push   eax
c0017623:	6a 01                	push   0x1
c0017625:	e8 6c f9 ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001762a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001762e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017634:	88 ca                	mov    dl,cl
c0017636:	83 e0 f0             	and    eax,0xfffffff0
c0017639:	83 e2 0f             	and    edx,0xf
c001763c:	09 d0                	or     eax,edx
c001763e:	88 ca                	mov    dl,cl
c0017640:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0017646:	c0 ea 04             	shr    dl,0x4
c0017649:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001764d:	0f b6 c2             	movzx  eax,dl
c0017650:	83 c4 20             	add    esp,0x20
c0017653:	c1 e0 06             	shl    eax,0x6
c0017656:	89 c5                	mov    ebp,eax
c0017658:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001765e:	66 25 3f c0          	and    ax,0xc03f
c0017662:	09 e8                	or     eax,ebp
c0017664:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001766b:	89 c8                	mov    eax,ecx
c001766d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017673:	c1 e8 08             	shr    eax,0x8
c0017676:	83 e2 3f             	and    edx,0x3f
c0017679:	83 e0 0f             	and    eax,0xf
c001767c:	89 c5                	mov    ebp,eax
c001767e:	c1 e5 06             	shl    ebp,0x6
c0017681:	09 d5                	or     ebp,edx
c0017683:	89 ea                	mov    edx,ebp
c0017685:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001768b:	88 c2                	mov    dl,al
c001768d:	c0 ea 02             	shr    dl,0x2
c0017690:	89 d5                	mov    ebp,edx
c0017692:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0017698:	83 e2 c0             	and    edx,0xffffffc0
c001769b:	09 d5                	or     ebp,edx
c001769d:	89 ea                	mov    edx,ebp
c001769f:	89 cd                	mov    ebp,ecx
c00176a1:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00176a7:	c1 ed 0c             	shr    ebp,0xc
c00176aa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00176b0:	83 e5 03             	and    ebp,0x3
c00176b3:	83 e2 cf             	and    edx,0xffffffcf
c00176b6:	c1 e5 04             	shl    ebp,0x4
c00176b9:	09 d5                	or     ebp,edx
c00176bb:	3c 06                	cmp    al,0x6
c00176bd:	89 ea                	mov    edx,ebp
c00176bf:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00176c5:	74 04                	je     c00176cb <CPU::detectFeatures()+0x557>
c00176c7:	3c 0f                	cmp    al,0xf
c00176c9:	75 5c                	jne    c0017727 <CPU::detectFeatures()+0x5b3>
c00176cb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00176cf:	89 cd                	mov    ebp,ecx
c00176d1:	c1 ed 10             	shr    ebp,0x10
c00176d4:	c1 e5 04             	shl    ebp,0x4
c00176d7:	09 ea                	or     edx,ebp
c00176d9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00176df:	0f b6 d2             	movzx  edx,dl
c00176e2:	66 81 e5 3f c0       	and    bp,0xc03f
c00176e7:	c1 e2 06             	shl    edx,0x6
c00176ea:	09 ea                	or     edx,ebp
c00176ec:	3c 0f                	cmp    al,0xf
c00176ee:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00176f5:	75 30                	jne    c0017727 <CPU::detectFeatures()+0x5b3>
c00176f7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00176fd:	c1 e9 14             	shr    ecx,0x14
c0017700:	83 e0 3f             	and    eax,0x3f
c0017703:	83 c1 0f             	add    ecx,0xf
c0017706:	88 ca                	mov    dl,cl
c0017708:	c0 e9 02             	shr    cl,0x2
c001770b:	c1 e2 06             	shl    edx,0x6
c001770e:	09 d0                	or     eax,edx
c0017710:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0017716:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001771c:	83 e0 c0             	and    eax,0xffffffc0
c001771f:	09 c1                	or     ecx,eax
c0017721:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0017727:	83 ec 0c             	sub    esp,0xc
c001772a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017731:	56                   	push   esi
c0017732:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017736:	50                   	push   eax
c0017737:	57                   	push   edi
c0017738:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001773c:	55                   	push   ebp
c001773d:	68 00 00 00 80       	push   0x80000000
c0017742:	e8 4f f8 ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017747:	83 c4 20             	add    esp,0x20
c001774a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017752:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017756:	76 1e                	jbe    c0017776 <CPU::detectFeatures()+0x602>
c0017758:	83 ec 0c             	sub    esp,0xc
c001775b:	56                   	push   esi
c001775c:	50                   	push   eax
c001775d:	57                   	push   edi
c001775e:	55                   	push   ebp
c001775f:	68 01 00 00 80       	push   0x80000001
c0017764:	e8 2d f8 ff ff       	call   c0016f96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017769:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017773:	83 c4 20             	add    esp,0x20
c0017776:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001777c:	83 f8 01             	cmp    eax,0x1
c001777f:	75 6f                	jne    c00177f0 <CPU::detectFeatures()+0x67c>
c0017781:	51                   	push   ecx
c0017782:	51                   	push   ecx
c0017783:	68 75 a1 03 c0       	push   0xc003a175
c0017788:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001778c:	56                   	push   esi
c001778d:	e8 ea 8f fe ff       	call   c000077c <strcpy>
c0017792:	5f                   	pop    edi
c0017793:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017799:	5d                   	pop    ebp
c001779a:	66 c1 e8 06          	shr    ax,0x6
c001779e:	0f b6 c0             	movzx  eax,al
c00177a1:	50                   	push   eax
c00177a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00177a8:	c1 e8 0e             	shr    eax,0xe
c00177ab:	0f b6 c0             	movzx  eax,al
c00177ae:	50                   	push   eax
c00177af:	e8 8d f4 ff ff       	call   c0016c41 <lookupIntelCPUName(unsigned char, unsigned char)>
c00177b4:	5a                   	pop    edx
c00177b5:	59                   	pop    ecx
c00177b6:	50                   	push   eax
c00177b7:	56                   	push   esi
c00177b8:	e8 ff 90 fe ff       	call   c00008bc <strcat>
c00177bd:	5f                   	pop    edi
c00177be:	5d                   	pop    ebp
c00177bf:	56                   	push   esi
c00177c0:	53                   	push   ebx
c00177c1:	e8 c0 c0 ff ff       	call   c0013886 <Device::setName(char const*)>
c00177c6:	58                   	pop    eax
c00177c7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00177cd:	5a                   	pop    edx
c00177ce:	68 7c a1 03 c0       	push   0xc003a17c
c00177d3:	50                   	push   eax
c00177d4:	e8 2f 90 fe ff       	call   c0000808 <strcmp>
c00177d9:	83 c4 10             	add    esp,0x10
c00177dc:	85 c0                	test   eax,eax
c00177de:	0f 85 73 03 00 00    	jne    c0017b57 <CPU::detectFeatures()+0x9e3>
c00177e4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00177eb:	e9 67 03 00 00       	jmp    c0017b57 <CPU::detectFeatures()+0x9e3>
c00177f0:	83 f8 02             	cmp    eax,0x2
c00177f3:	0f 85 b5 00 00 00    	jne    c00178ae <CPU::detectFeatures()+0x73a>
c00177f9:	57                   	push   edi
c00177fa:	57                   	push   edi
c00177fb:	68 8e a1 03 c0       	push   0xc003a18e
c0017800:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017804:	56                   	push   esi
c0017805:	e8 72 8f fe ff       	call   c000077c <strcpy>
c001780a:	5d                   	pop    ebp
c001780b:	58                   	pop    eax
c001780c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017812:	66 c1 e8 06          	shr    ax,0x6
c0017816:	0f b6 c0             	movzx  eax,al
c0017819:	50                   	push   eax
c001781a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017820:	c1 e8 0e             	shr    eax,0xe
c0017823:	0f b6 c0             	movzx  eax,al
c0017826:	50                   	push   eax
c0017827:	e8 81 f2 ff ff       	call   c0016aad <lookupAMDCPUName(unsigned char, unsigned char)>
c001782c:	5a                   	pop    edx
c001782d:	59                   	pop    ecx
c001782e:	50                   	push   eax
c001782f:	56                   	push   esi
c0017830:	e8 87 90 fe ff       	call   c00008bc <strcat>
c0017835:	5f                   	pop    edi
c0017836:	5d                   	pop    ebp
c0017837:	56                   	push   esi
c0017838:	53                   	push   ebx
c0017839:	e8 48 c0 ff ff       	call   c0013886 <Device::setName(char const*)>
c001783e:	58                   	pop    eax
c001783f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017845:	5a                   	pop    edx
c0017846:	68 93 a1 03 c0       	push   0xc003a193
c001784b:	50                   	push   eax
c001784c:	e8 b7 8f fe ff       	call   c0000808 <strcmp>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	85 c0                	test   eax,eax
c0017856:	75 20                	jne    c0017878 <CPU::detectFeatures()+0x704>
c0017858:	8b 15 28 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b928
c001785e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0017864:	a8 01                	test   al,0x1
c0017866:	74 10                	je     c0017878 <CPU::detectFeatures()+0x704>
c0017868:	83 e0 fe             	and    eax,0xfffffffe
c001786b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017871:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0017878:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001787e:	c1 e8 0e             	shr    eax,0xe
c0017881:	3c 05                	cmp    al,0x5
c0017883:	0f 85 ce 02 00 00    	jne    c0017b57 <CPU::detectFeatures()+0x9e3>
c0017889:	56                   	push   esi
c001788a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017890:	83 e0 0f             	and    eax,0xf
c0017893:	50                   	push   eax
c0017894:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001789a:	66 c1 e8 06          	shr    ax,0x6
c001789e:	0f b6 c0             	movzx  eax,al
c00178a1:	50                   	push   eax
c00178a2:	6a 05                	push   0x5
c00178a4:	e8 7a f6 ff ff       	call   c0016f23 <AMD_K6_writeback(int, int, int)>
c00178a9:	e9 1f 02 00 00       	jmp    c0017acd <CPU::detectFeatures()+0x959>
c00178ae:	8d 50 fd             	lea    edx,[eax-0x3]
c00178b1:	83 fa 01             	cmp    edx,0x1
c00178b4:	76 09                	jbe    c00178bf <CPU::detectFeatures()+0x74b>
c00178b6:	83 f8 06             	cmp    eax,0x6
c00178b9:	0f 85 91 01 00 00    	jne    c0017a50 <CPU::detectFeatures()+0x8dc>
c00178bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00178c5:	c1 ea 0e             	shr    edx,0xe
c00178c8:	80 fa 05             	cmp    dl,0x5
c00178cb:	75 7b                	jne    c0017948 <CPU::detectFeatures()+0x7d4>
c00178cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00178d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00178d8:	66 81 fa 00 01       	cmp    dx,0x100
c00178dd:	75 0c                	jne    c00178eb <CPU::detectFeatures()+0x777>
c00178df:	51                   	push   ecx
c00178e0:	51                   	push   ecx
c00178e1:	68 9a a1 03 c0       	push   0xc003a19a
c00178e6:	e9 dc 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c00178eb:	66 81 fa 00 02       	cmp    dx,0x200
c00178f0:	75 0c                	jne    c00178fe <CPU::detectFeatures()+0x78a>
c00178f2:	52                   	push   edx
c00178f3:	52                   	push   edx
c00178f4:	68 ad a1 03 c0       	push   0xc003a1ad
c00178f9:	e9 c9 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c00178fe:	66 81 fa 40 02       	cmp    dx,0x240
c0017903:	75 0c                	jne    c0017911 <CPU::detectFeatures()+0x79d>
c0017905:	50                   	push   eax
c0017906:	50                   	push   eax
c0017907:	68 bf a1 03 c0       	push   0xc003a1bf
c001790c:	e9 b6 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017911:	83 f8 06             	cmp    eax,0x6
c0017914:	75 0c                	jne    c0017922 <CPU::detectFeatures()+0x7ae>
c0017916:	50                   	push   eax
c0017917:	50                   	push   eax
c0017918:	68 d1 a1 03 c0       	push   0xc003a1d1
c001791d:	e9 a5 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017922:	83 f8 04             	cmp    eax,0x4
c0017925:	75 0c                	jne    c0017933 <CPU::detectFeatures()+0x7bf>
c0017927:	50                   	push   eax
c0017928:	50                   	push   eax
c0017929:	68 dd a1 03 c0       	push   0xc003a1dd
c001792e:	e9 94 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017933:	83 f8 03             	cmp    eax,0x3
c0017936:	0f 85 1b 02 00 00    	jne    c0017b57 <CPU::detectFeatures()+0x9e3>
c001793c:	50                   	push   eax
c001793d:	50                   	push   eax
c001793e:	68 e5 a1 03 c0       	push   0xc003a1e5
c0017943:	e9 7f 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017948:	80 fa 06             	cmp    dl,0x6
c001794b:	0f 85 db 00 00 00    	jne    c0017a2c <CPU::detectFeatures()+0x8b8>
c0017951:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017957:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001795c:	66 81 fa 80 01       	cmp    dx,0x180
c0017961:	75 0c                	jne    c001796f <CPU::detectFeatures()+0x7fb>
c0017963:	50                   	push   eax
c0017964:	50                   	push   eax
c0017965:	68 f0 a1 03 c0       	push   0xc003a1f0
c001796a:	e9 58 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c001796f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0017975:	66 f7 c1 80 ff       	test   cx,0xff80
c001797a:	75 0c                	jne    c0017988 <CPU::detectFeatures()+0x814>
c001797c:	50                   	push   eax
c001797d:	50                   	push   eax
c001797e:	68 00 a2 03 c0       	push   0xc003a200
c0017983:	e9 3f 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017988:	66 81 fa 40 02       	cmp    dx,0x240
c001798d:	75 0c                	jne    c001799b <CPU::detectFeatures()+0x827>
c001798f:	55                   	push   ebp
c0017990:	55                   	push   ebp
c0017991:	68 07 a2 03 c0       	push   0xc003a207
c0017996:	e9 2c 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c001799b:	66 81 fa 80 02       	cmp    dx,0x280
c00179a0:	75 0c                	jne    c00179ae <CPU::detectFeatures()+0x83a>
c00179a2:	57                   	push   edi
c00179a3:	57                   	push   edi
c00179a4:	68 10 a2 03 c0       	push   0xc003a210
c00179a9:	e9 19 01 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c00179ae:	66 81 fa 40 03       	cmp    dx,0x340
c00179b3:	74 ed                	je     c00179a2 <CPU::detectFeatures()+0x82e>
c00179b5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00179ba:	75 0c                	jne    c00179c8 <CPU::detectFeatures()+0x854>
c00179bc:	56                   	push   esi
c00179bd:	56                   	push   esi
c00179be:	68 17 a2 03 c0       	push   0xc003a217
c00179c3:	e9 ff 00 00 00       	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c00179c8:	83 f8 06             	cmp    eax,0x6
c00179cb:	0f 84 45 ff ff ff    	je     c0017916 <CPU::detectFeatures()+0x7a2>
c00179d1:	83 f8 04             	cmp    eax,0x4
c00179d4:	0f 84 4d ff ff ff    	je     c0017927 <CPU::detectFeatures()+0x7b3>
c00179da:	83 f8 03             	cmp    eax,0x3
c00179dd:	0f 85 74 01 00 00    	jne    c0017b57 <CPU::detectFeatures()+0x9e3>
c00179e3:	51                   	push   ecx
c00179e4:	51                   	push   ecx
c00179e5:	68 20 a2 03 c0       	push   0xc003a220
c00179ea:	53                   	push   ebx
c00179eb:	e8 96 be ff ff       	call   c0013886 <Device::setName(char const*)>
c00179f0:	b1 c1                	mov    cl,0xc1
c00179f2:	88 c8                	mov    al,cl
c00179f4:	e6 22                	out    0x22,al
c00179f6:	e4 23                	in     al,0x23
c00179f8:	88 c2                	mov    dl,al
c00179fa:	88 c8                	mov    al,cl
c00179fc:	e6 22                	out    0x22,al
c00179fe:	88 d0                	mov    al,dl
c0017a00:	83 c8 10             	or     eax,0x10
c0017a03:	e6 23                	out    0x23,al
c0017a05:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017a0c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017a0f:	89 d0                	mov    eax,edx
c0017a11:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017a17:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017a1b:	40                   	inc    eax
c0017a1c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017a22:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017a27:	e9 a1 00 00 00       	jmp    c0017acd <CPU::detectFeatures()+0x959>
c0017a2c:	83 f8 06             	cmp    eax,0x6
c0017a2f:	0f 84 e1 fe ff ff    	je     c0017916 <CPU::detectFeatures()+0x7a2>
c0017a35:	83 f8 04             	cmp    eax,0x4
c0017a38:	0f 84 e9 fe ff ff    	je     c0017927 <CPU::detectFeatures()+0x7b3>
c0017a3e:	83 f8 03             	cmp    eax,0x3
c0017a41:	0f 85 10 01 00 00    	jne    c0017b57 <CPU::detectFeatures()+0x9e3>
c0017a47:	52                   	push   edx
c0017a48:	52                   	push   edx
c0017a49:	68 2b a2 03 c0       	push   0xc003a22b
c0017a4e:	eb 77                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017a50:	83 f8 07             	cmp    eax,0x7
c0017a53:	75 09                	jne    c0017a5e <CPU::detectFeatures()+0x8ea>
c0017a55:	50                   	push   eax
c0017a56:	50                   	push   eax
c0017a57:	68 35 a2 03 c0       	push   0xc003a235
c0017a5c:	eb 69                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017a5e:	83 f8 0a             	cmp    eax,0xa
c0017a61:	75 09                	jne    c0017a6c <CPU::detectFeatures()+0x8f8>
c0017a63:	50                   	push   eax
c0017a64:	50                   	push   eax
c0017a65:	68 40 a2 03 c0       	push   0xc003a240
c0017a6a:	eb 5b                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017a6c:	83 f8 0b             	cmp    eax,0xb
c0017a6f:	75 09                	jne    c0017a7a <CPU::detectFeatures()+0x906>
c0017a71:	50                   	push   eax
c0017a72:	50                   	push   eax
c0017a73:	68 48 a2 03 c0       	push   0xc003a248
c0017a78:	eb 4d                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017a7a:	83 f8 08             	cmp    eax,0x8
c0017a7d:	75 09                	jne    c0017a88 <CPU::detectFeatures()+0x914>
c0017a7f:	50                   	push   eax
c0017a80:	50                   	push   eax
c0017a81:	68 51 a2 03 c0       	push   0xc003a251
c0017a86:	eb 3f                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017a88:	83 f8 09             	cmp    eax,0x9
c0017a8b:	75 09                	jne    c0017a96 <CPU::detectFeatures()+0x922>
c0017a8d:	50                   	push   eax
c0017a8e:	50                   	push   eax
c0017a8f:	68 59 a2 03 c0       	push   0xc003a259
c0017a94:	eb 31                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017a96:	83 f8 05             	cmp    eax,0x5
c0017a99:	75 09                	jne    c0017aa4 <CPU::detectFeatures()+0x930>
c0017a9b:	50                   	push   eax
c0017a9c:	50                   	push   eax
c0017a9d:	68 61 a2 03 c0       	push   0xc003a261
c0017aa2:	eb 23                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017aa4:	83 f8 0c             	cmp    eax,0xc
c0017aa7:	75 09                	jne    c0017ab2 <CPU::detectFeatures()+0x93e>
c0017aa9:	55                   	push   ebp
c0017aaa:	55                   	push   ebp
c0017aab:	68 6f a2 03 c0       	push   0xc003a26f
c0017ab0:	eb 15                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017ab2:	83 f8 0d             	cmp    eax,0xd
c0017ab5:	75 09                	jne    c0017ac0 <CPU::detectFeatures()+0x94c>
c0017ab7:	57                   	push   edi
c0017ab8:	57                   	push   edi
c0017ab9:	68 7a a2 03 c0       	push   0xc003a27a
c0017abe:	eb 07                	jmp    c0017ac7 <CPU::detectFeatures()+0x953>
c0017ac0:	56                   	push   esi
c0017ac1:	56                   	push   esi
c0017ac2:	68 8e a2 03 c0       	push   0xc003a28e
c0017ac7:	53                   	push   ebx
c0017ac8:	e8 b9 bd ff ff       	call   c0013886 <Device::setName(char const*)>
c0017acd:	83 c4 10             	add    esp,0x10
c0017ad0:	e9 82 00 00 00       	jmp    c0017b57 <CPU::detectFeatures()+0x9e3>
c0017ad5:	51                   	push   ecx
c0017ad6:	51                   	push   ecx
c0017ad7:	68 da a0 03 c0       	push   0xc003a0da
c0017adc:	57                   	push   edi
c0017add:	e8 9a 8c fe ff       	call   c000077c <strcpy>
c0017ae2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017aec:	e8 8e 86 fe ff       	call   c000017f <is486>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	85 c0                	test   eax,eax
c0017af6:	74 2d                	je     c0017b25 <CPU::detectFeatures()+0x9b1>
c0017af8:	52                   	push   edx
c0017af9:	52                   	push   edx
c0017afa:	68 9a a2 03 c0       	push   0xc003a29a
c0017aff:	53                   	push   ebx
c0017b00:	e8 81 bd ff ff       	call   c0013886 <Device::setName(char const*)>
c0017b05:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017b0c:	e8 04 6e 00 00       	call   c001e915 <CPU::readCR0()>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	83 e0 14             	and    eax,0x14
c0017b17:	83 f8 04             	cmp    eax,0x4
c0017b1a:	75 1f                	jne    c0017b3b <CPU::detectFeatures()+0x9c7>
c0017b1c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017b23:	eb 32                	jmp    c0017b57 <CPU::detectFeatures()+0x9e3>
c0017b25:	50                   	push   eax
c0017b26:	50                   	push   eax
c0017b27:	68 a5 a2 03 c0       	push   0xc003a2a5
c0017b2c:	53                   	push   ebx
c0017b2d:	e8 54 bd ff ff       	call   c0013886 <Device::setName(char const*)>
c0017b32:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017b39:	eb d1                	jmp    c0017b0c <CPU::detectFeatures()+0x998>
c0017b3b:	e8 1a 86 fe ff       	call   c000015a <hasLegacyFPU>
c0017b40:	83 e0 01             	and    eax,0x1
c0017b43:	8d 14 00             	lea    edx,[eax+eax*1]
c0017b46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017b4c:	83 e0 fd             	and    eax,0xfffffffd
c0017b4f:	09 d0                	or     eax,edx
c0017b51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017b57:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017b5e:	83 c4 4c             	add    esp,0x4c
c0017b61:	5b                   	pop    ebx
c0017b62:	5e                   	pop    esi
c0017b63:	5f                   	pop    edi
c0017b64:	5d                   	pop    ebp
c0017b65:	c3                   	ret    

c0017b66 <CPU::setupSMEP()>:
c0017b66:	83 ec 0c             	sub    esp,0xc
c0017b69:	e8 dd 6d 00 00       	call   c001e94b <CPU::readCR4()>
c0017b6e:	0d 00 00 10 00       	or     eax,0x100000
c0017b73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b77:	83 c4 0c             	add    esp,0xc
c0017b7a:	e9 f2 74 00 00       	jmp    c001f071 <CPU::writeCR4(unsigned long)>
c0017b7f:	90                   	nop

c0017b80 <CPU::setupUMIP()>:
c0017b80:	83 ec 0c             	sub    esp,0xc
c0017b83:	e8 c3 6d 00 00       	call   c001e94b <CPU::readCR4()>
c0017b88:	80 cc 08             	or     ah,0x8
c0017b8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b8f:	83 c4 0c             	add    esp,0xc
c0017b92:	e9 da 74 00 00       	jmp    c001f071 <CPU::writeCR4(unsigned long)>
c0017b97:	90                   	nop

c0017b98 <CPU::setupTSC()>:
c0017b98:	83 ec 0c             	sub    esp,0xc
c0017b9b:	e8 ab 6d 00 00       	call   c001e94b <CPU::readCR4()>
c0017ba0:	83 c8 04             	or     eax,0x4
c0017ba3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ba7:	83 c4 0c             	add    esp,0xc
c0017baa:	e9 c2 74 00 00       	jmp    c001f071 <CPU::writeCR4(unsigned long)>
c0017baf:	90                   	nop

c0017bb0 <CPU::setupLargePages()>:
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	e8 93 6d 00 00       	call   c001e94b <CPU::readCR4()>
c0017bb8:	83 c8 10             	or     eax,0x10
c0017bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bbf:	83 c4 0c             	add    esp,0xc
c0017bc2:	e9 aa 74 00 00       	jmp    c001f071 <CPU::writeCR4(unsigned long)>
c0017bc7:	90                   	nop

c0017bc8 <CPU::setupPAT()>:
c0017bc8:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c0017bcd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017bd4:	74 2c                	je     c0017c02 <CPU::setupPAT()+0x3a>
c0017bd6:	53                   	push   ebx
c0017bd7:	83 ec 10             	sub    esp,0x10
c0017bda:	68 77 02 00 00       	push   0x277
c0017bdf:	50                   	push   eax
c0017be0:	e8 01 39 ff ff       	call   c000b4e6 <Computer::rdmsr(unsigned int)>
c0017be5:	83 e2 f8             	and    edx,0xfffffff8
c0017be8:	83 ca 01             	or     edx,0x1
c0017beb:	52                   	push   edx
c0017bec:	50                   	push   eax
c0017bed:	68 77 02 00 00       	push   0x277
c0017bf2:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c0017bf8:	e8 15 39 ff ff       	call   c000b512 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017bfd:	83 c4 28             	add    esp,0x28
c0017c00:	5b                   	pop    ebx
c0017c01:	c3                   	ret    
c0017c02:	c3                   	ret    
c0017c03:	90                   	nop

c0017c04 <CPU::setupMTRR()>:
c0017c04:	c3                   	ret    
c0017c05:	90                   	nop

c0017c06 <CPU::setupGlobalPages()>:
c0017c06:	83 ec 0c             	sub    esp,0xc
c0017c09:	e8 3d 6d 00 00       	call   c001e94b <CPU::readCR4()>
c0017c0e:	0c 80                	or     al,0x80
c0017c10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c14:	83 c4 0c             	add    esp,0xc
c0017c17:	e9 55 74 00 00       	jmp    c001f071 <CPU::writeCR4(unsigned long)>

c0017c1c <CPU::allowUsermodeDataAccess()>:
c0017c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c20:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017c27:	74 03                	je     c0017c2c <CPU::allowUsermodeDataAccess()+0x10>
c0017c29:	0f 01 cb             	stac   
c0017c2c:	c3                   	ret    
c0017c2d:	90                   	nop

c0017c2e <CPU::prohibitUsermodeDataAccess()>:
c0017c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c32:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017c39:	74 03                	je     c0017c3e <CPU::prohibitUsermodeDataAccess()+0x10>
c0017c3b:	0f 01 ca             	clac   
c0017c3e:	c3                   	ret    
c0017c3f:	90                   	nop

c0017c40 <CPU::setupSMAP()>:
c0017c40:	53                   	push   ebx
c0017c41:	83 ec 08             	sub    esp,0x8
c0017c44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c48:	e8 fe 6c 00 00       	call   c001e94b <CPU::readCR4()>
c0017c4d:	83 ec 0c             	sub    esp,0xc
c0017c50:	0d 00 00 20 00       	or     eax,0x200000
c0017c55:	50                   	push   eax
c0017c56:	e8 16 74 00 00       	call   c001f071 <CPU::writeCR4(unsigned long)>
c0017c5b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017c5f:	83 c4 18             	add    esp,0x18
c0017c62:	5b                   	pop    ebx
c0017c63:	eb c9                	jmp    c0017c2e <CPU::prohibitUsermodeDataAccess()>
c0017c65:	90                   	nop

c0017c66 <CPU::setupFeatures()>:
c0017c66:	53                   	push   ebx
c0017c67:	83 ec 08             	sub    esp,0x8
c0017c6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c6e:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017c75:	74 0c                	je     c0017c83 <CPU::setupFeatures()+0x1d>
c0017c77:	83 ec 0c             	sub    esp,0xc
c0017c7a:	53                   	push   ebx
c0017c7b:	e8 e6 fe ff ff       	call   c0017b66 <CPU::setupSMEP()>
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017c8a:	74 0c                	je     c0017c98 <CPU::setupFeatures()+0x32>
c0017c8c:	83 ec 0c             	sub    esp,0xc
c0017c8f:	53                   	push   ebx
c0017c90:	e8 ab ff ff ff       	call   c0017c40 <CPU::setupSMAP()>
c0017c95:	83 c4 10             	add    esp,0x10
c0017c98:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017c9f:	74 0c                	je     c0017cad <CPU::setupFeatures()+0x47>
c0017ca1:	83 ec 0c             	sub    esp,0xc
c0017ca4:	53                   	push   ebx
c0017ca5:	e8 d6 fe ff ff       	call   c0017b80 <CPU::setupUMIP()>
c0017caa:	83 c4 10             	add    esp,0x10
c0017cad:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017cb4:	74 0c                	je     c0017cc2 <CPU::setupFeatures()+0x5c>
c0017cb6:	83 ec 0c             	sub    esp,0xc
c0017cb9:	53                   	push   ebx
c0017cba:	e8 d9 fe ff ff       	call   c0017b98 <CPU::setupTSC()>
c0017cbf:	83 c4 10             	add    esp,0x10
c0017cc2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017cc9:	74 0c                	je     c0017cd7 <CPU::setupFeatures()+0x71>
c0017ccb:	83 ec 0c             	sub    esp,0xc
c0017cce:	53                   	push   ebx
c0017ccf:	e8 dc fe ff ff       	call   c0017bb0 <CPU::setupLargePages()>
c0017cd4:	83 c4 10             	add    esp,0x10
c0017cd7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017cde:	74 0c                	je     c0017cec <CPU::setupFeatures()+0x86>
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	53                   	push   ebx
c0017ce4:	e8 1d ff ff ff       	call   c0017c06 <CPU::setupGlobalPages()>
c0017ce9:	83 c4 10             	add    esp,0x10
c0017cec:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017cf3:	74 0d                	je     c0017d02 <CPU::setupFeatures()+0x9c>
c0017cf5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017cf9:	83 c4 08             	add    esp,0x8
c0017cfc:	5b                   	pop    ebx
c0017cfd:	e9 c6 fe ff ff       	jmp    c0017bc8 <CPU::setupPAT()>
c0017d02:	83 c4 08             	add    esp,0x8
c0017d05:	5b                   	pop    ebx
c0017d06:	c3                   	ret    
c0017d07:	90                   	nop

c0017d08 <CPU::open(int, int, void*)>:
c0017d08:	57                   	push   edi
c0017d09:	56                   	push   esi
c0017d0a:	53                   	push   ebx
c0017d0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017d13:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017d19:	83 ec 0c             	sub    esp,0xc
c0017d1c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017d22:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017d28:	50                   	push   eax
c0017d29:	e8 2a 4a ff ff       	call   c000c758 <GDT::setup()>
c0017d2e:	83 c4 0c             	add    esp,0xc
c0017d31:	6a 00                	push   0x0
c0017d33:	68 ef be ad de       	push   0xdeadbeef
c0017d38:	57                   	push   edi
c0017d39:	e8 f2 8f ff ff       	call   c0010d30 <TSS::setup(unsigned long, unsigned long)>
c0017d3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d41:	e8 ca 8f ff ff       	call   c0010d10 <TSS::flush()>
c0017d46:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017d4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d4f:	e8 5e 4c ff ff       	call   c000c9b2 <IDT::setup()>
c0017d54:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017d5b:	e8 08 73 00 00       	call   c001f068 <CPU::writeDR7(unsigned long)>
c0017d60:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017d6a:	e8 20 5c ff ff       	call   c000d98f <Phys::allocatePage()>
c0017d6f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017d75:	89 30                	mov    DWORD PTR [eax],esi
c0017d77:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017d7d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017d80:	58                   	pop    eax
c0017d81:	5a                   	pop    edx
c0017d82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017d8c:	e8 7f 9d ff ff       	call   c0011b10 <VAS::setCPUSpecific(unsigned long)>
c0017d91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d94:	e8 db f3 ff ff       	call   c0017174 <CPU::detectFeatures()>
c0017d99:	e8 40 c8 ff ff       	call   c00145de <setupInterruptController()>
c0017d9e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017da4:	a1 d4 ba 03 c0       	mov    eax,ds:0xc003bad4
c0017da9:	83 e0 10             	and    eax,0x10
c0017dac:	83 f8 01             	cmp    eax,0x1
c0017daf:	19 c0                	sbb    eax,eax
c0017db1:	83 e0 46             	and    eax,0x46
c0017db4:	83 c0 1e             	add    eax,0x1e
c0017db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dba:	e8 03 da ff ff       	call   c00157c2 <setupTimer(int)>
c0017dbf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017dc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017dc8:	e8 99 fe ff ff       	call   c0017c66 <CPU::setupFeatures()>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	31 c0                	xor    eax,eax
c0017dd2:	5b                   	pop    ebx
c0017dd3:	5e                   	pop    esi
c0017dd4:	5f                   	pop    edi
c0017dd5:	c3                   	ret    

c0017dd6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017dd6:	55                   	push   ebp
c0017dd7:	57                   	push   edi
c0017dd8:	56                   	push   esi
c0017dd9:	53                   	push   ebx
c0017dda:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017de0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017de7:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017de9:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017dec:	80 fb 40             	cmp    bl,0x40
c0017def:	75 1b                	jne    c0017e0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017df1:	8a 16                	mov    dl,BYTE PTR [esi]
c0017df3:	84 d2                	test   dl,dl
c0017df5:	0f 84 f1 00 00 00    	je     c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017dfb:	8d 46 01             	lea    eax,[esi+0x1]
c0017dfe:	80 fa 3a             	cmp    dl,0x3a
c0017e01:	74 04                	je     c0017e07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017e03:	89 c6                	mov    esi,eax
c0017e05:	eb ea                	jmp    c0017df1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017e07:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017e0a:	89 c6                	mov    esi,eax
c0017e0c:	50                   	push   eax
c0017e0d:	6a 40                	push   0x40
c0017e0f:	6a 00                	push   0x0
c0017e11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e15:	50                   	push   eax
c0017e16:	e8 a5 88 fe ff       	call   c00006c0 <memset>
c0017e1b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017e22:	31 c0                	xor    eax,eax
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017e29:	84 c9                	test   cl,cl
c0017e2b:	0f 84 bb 00 00 00    	je     c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e31:	3d c7 00 00 00       	cmp    eax,0xc7
c0017e36:	0f 8f b0 00 00 00    	jg     c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e3c:	80 f9 0a             	cmp    cl,0xa
c0017e3f:	0f 85 98 00 00 00    	jne    c0017edd <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017e45:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017e4a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017e4e:	a8 df                	test   al,0xdf
c0017e50:	0f 94 c1             	sete   cl
c0017e53:	3c 23                	cmp    al,0x23
c0017e55:	0f 94 c2             	sete   dl
c0017e58:	08 d1                	or     cl,dl
c0017e5a:	75 4a                	jne    c0017ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017e5c:	8d 50 f7             	lea    edx,[eax-0x9]
c0017e5f:	80 fa 01             	cmp    dl,0x1
c0017e62:	76 42                	jbe    c0017ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017e64:	3c 5b                	cmp    al,0x5b
c0017e66:	75 42                	jne    c0017eaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017e68:	80 fb 40             	cmp    bl,0x40
c0017e6b:	75 39                	jne    c0017ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017e6d:	83 ec 0c             	sub    esp,0xc
c0017e70:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017e74:	52                   	push   edx
c0017e75:	e8 62 88 fe ff       	call   c00006dc <strlen>
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	83 f8 3f             	cmp    eax,0x3f
c0017e80:	77 6a                	ja     c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e82:	50                   	push   eax
c0017e83:	50                   	push   eax
c0017e84:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017e88:	52                   	push   edx
c0017e89:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017e8d:	52                   	push   edx
c0017e8e:	e8 e9 88 fe ff       	call   c000077c <strcpy>
c0017e93:	58                   	pop    eax
c0017e94:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017e98:	52                   	push   edx
c0017e99:	e8 3e 88 fe ff       	call   c00006dc <strlen>
c0017e9e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017ea3:	83 c4 10             	add    esp,0x10
c0017ea6:	31 d2                	xor    edx,edx
c0017ea8:	eb 3a                	jmp    c0017ee4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017eaa:	80 fb 40             	cmp    bl,0x40
c0017ead:	74 06                	je     c0017eb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017eaf:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017eb3:	eb 20                	jmp    c0017ed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017eb5:	50                   	push   eax
c0017eb6:	50                   	push   eax
c0017eb7:	55                   	push   ebp
c0017eb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ebc:	50                   	push   eax
c0017ebd:	e8 46 89 fe ff       	call   c0000808 <strcmp>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	85 c0                	test   eax,eax
c0017ec7:	75 dd                	jne    c0017ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ec9:	eb e4                	jmp    c0017eaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017ecb:	8d 50 01             	lea    edx,[eax+0x1]
c0017ece:	80 f9 3d             	cmp    cl,0x3d
c0017ed1:	74 1d                	je     c0017ef0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017ed3:	89 d0                	mov    eax,edx
c0017ed5:	8a 08                	mov    cl,BYTE PTR [eax]
c0017ed7:	84 c9                	test   cl,cl
c0017ed9:	75 f0                	jne    c0017ecb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017edb:	eb 0f                	jmp    c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017edd:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017ee4:	47                   	inc    edi
c0017ee5:	89 d0                	mov    eax,edx
c0017ee7:	e9 3b ff ff ff       	jmp    c0017e27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017eec:	31 c0                	xor    eax,eax
c0017eee:	eb 33                	jmp    c0017f23 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017ef0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ef4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017ef7:	50                   	push   eax
c0017ef8:	50                   	push   eax
c0017ef9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017efd:	50                   	push   eax
c0017efe:	56                   	push   esi
c0017eff:	e8 04 89 fe ff       	call   c0000808 <strcmp>
c0017f04:	83 c4 10             	add    esp,0x10
c0017f07:	85 c0                	test   eax,eax
c0017f09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f0d:	75 97                	jne    c0017ea6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f0f:	51                   	push   ecx
c0017f10:	51                   	push   ecx
c0017f11:	52                   	push   edx
c0017f12:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017f19:	e8 5e 88 fe ff       	call   c000077c <strcpy>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	b0 01                	mov    al,0x1
c0017f23:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f29:	5b                   	pop    ebx
c0017f2a:	5e                   	pop    esi
c0017f2b:	5f                   	pop    edi
c0017f2c:	5d                   	pop    ebp
c0017f2d:	c3                   	ret    

c0017f2e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017f2e:	57                   	push   edi
c0017f2f:	56                   	push   esi
c0017f30:	53                   	push   ebx
c0017f31:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017f37:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017f3e:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017f45:	53                   	push   ebx
c0017f46:	e8 91 87 fe ff       	call   c00006dc <strlen>
c0017f4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0017f4e:	89 c7                	mov    edi,eax
c0017f50:	e8 87 87 fe ff       	call   c00006dc <strlen>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017f5c:	31 ff                	xor    edi,edi
c0017f5e:	3d ff 00 00 00       	cmp    eax,0xff
c0017f63:	0f 87 18 01 00 00    	ja     c0018081 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017f69:	51                   	push   ecx
c0017f6a:	51                   	push   ecx
c0017f6b:	56                   	push   esi
c0017f6c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017f70:	56                   	push   esi
c0017f71:	e8 06 88 fe ff       	call   c000077c <strcpy>
c0017f76:	58                   	pop    eax
c0017f77:	5a                   	pop    edx
c0017f78:	68 56 8e 03 c0       	push   0xc0038e56
c0017f7d:	56                   	push   esi
c0017f7e:	e8 39 89 fe ff       	call   c00008bc <strcat>
c0017f83:	59                   	pop    ecx
c0017f84:	58                   	pop    eax
c0017f85:	53                   	push   ebx
c0017f86:	56                   	push   esi
c0017f87:	e8 30 89 fe ff       	call   c00008bc <strcat>
c0017f8c:	58                   	pop    eax
c0017f8d:	5a                   	pop    edx
c0017f8e:	68 dc a2 03 c0       	push   0xc003a2dc
c0017f93:	56                   	push   esi
c0017f94:	e8 23 89 fe ff       	call   c00008bc <strcat>
c0017f99:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017fa0:	e8 f5 a3 ff ff       	call   c001239a <operator new(unsigned long)>
c0017fa5:	83 c4 0c             	add    esp,0xc
c0017fa8:	89 c3                	mov    ebx,eax
c0017faa:	ff 35 7c bb 03 c0    	push   DWORD PTR ds:0xc003bb7c
c0017fb0:	56                   	push   esi
c0017fb1:	50                   	push   eax
c0017fb2:	e8 11 a8 ff ff       	call   c00127c8 <File::File(char const*, Process*)>
c0017fb7:	59                   	pop    ecx
c0017fb8:	5e                   	pop    esi
c0017fb9:	6a 01                	push   0x1
c0017fbb:	53                   	push   ebx
c0017fbc:	e8 6b a8 ff ff       	call   c001282c <File::open(FileOpenMode)>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	85 c0                	test   eax,eax
c0017fc6:	74 08                	je     c0017fd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0017fc8:	83 ec 0c             	sub    esp,0xc
c0017fcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fcd:	53                   	push   ebx
c0017fce:	eb 2e                	jmp    c0017ffe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0017fd0:	52                   	push   edx
c0017fd1:	8d 44 24 07          	lea    eax,[esp+0x7]
c0017fd5:	50                   	push   eax
c0017fd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017fda:	50                   	push   eax
c0017fdb:	53                   	push   ebx
c0017fdc:	e8 f7 aa ff ff       	call   c0012ad8 <File::stat(unsigned long long*, bool*)>
c0017fe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	89 c1                	mov    ecx,eax
c0017fea:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0017fee:	75 13                	jne    c0018003 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0017ff0:	83 ec 0c             	sub    esp,0xc
c0017ff3:	53                   	push   ebx
c0017ff4:	e8 91 a8 ff ff       	call   c001288a <File::close()>
c0017ff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ffb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ffe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018001:	eb 7b                	jmp    c001807e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018003:	83 ec 0c             	sub    esp,0xc
c0018006:	50                   	push   eax
c0018007:	e8 d9 53 ff ff       	call   c000d3e5 <malloc>
c001800c:	89 c6                	mov    esi,eax
c001800e:	58                   	pop    eax
c001800f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018011:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018015:	52                   	push   edx
c0018016:	56                   	push   esi
c0018017:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001801b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001801f:	53                   	push   ebx
c0018020:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018023:	83 c4 20             	add    esp,0x20
c0018026:	85 c0                	test   eax,eax
c0018028:	75 0a                	jne    c0018034 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001802a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001802e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018032:	74 18                	je     c001804c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	31 ff                	xor    edi,edi
c0018039:	53                   	push   ebx
c001803a:	e8 4b a8 ff ff       	call   c001288a <File::close()>
c001803f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018044:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018047:	83 c4 10             	add    esp,0x10
c001804a:	eb 35                	jmp    c0018081 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001804c:	83 ec 0c             	sub    esp,0xc
c001804f:	53                   	push   ebx
c0018050:	e8 35 a8 ff ff       	call   c001288a <File::close()>
c0018055:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018057:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001805a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001805d:	83 c4 0c             	add    esp,0xc
c0018060:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018067:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001806e:	56                   	push   esi
c001806f:	e8 62 fd ff ff       	call   c0017dd6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018074:	89 34 24             	mov    DWORD PTR [esp],esi
c0018077:	89 c7                	mov    edi,eax
c0018079:	e8 77 53 ff ff       	call   c000d3f5 <free>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	81 c4 10 01 00 00    	add    esp,0x110
c0018087:	89 f8                	mov    eax,edi
c0018089:	5b                   	pop    ebx
c001808a:	5e                   	pop    esi
c001808b:	5f                   	pop    edi
c001808c:	c3                   	ret    

c001808d <Reg::getLine(char*, char*, char*)>:
c001808d:	57                   	push   edi
c001808e:	56                   	push   esi
c001808f:	53                   	push   ebx
c0018090:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018094:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018098:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001809c:	57                   	push   edi
c001809d:	56                   	push   esi
c001809e:	53                   	push   ebx
c001809f:	68 e1 a2 03 c0       	push   0xc003a2e1
c00180a4:	e8 85 fe ff ff       	call   c0017f2e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	84 c0                	test   al,al
c00180ae:	75 10                	jne    c00180c0 <Reg::getLine(char*, char*, char*)+0x33>
c00180b0:	57                   	push   edi
c00180b1:	56                   	push   esi
c00180b2:	53                   	push   ebx
c00180b3:	68 06 a3 03 c0       	push   0xc003a306
c00180b8:	e8 71 fe ff ff       	call   c0017f2e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	5b                   	pop    ebx
c00180c1:	5e                   	pop    esi
c00180c2:	5f                   	pop    edi
c00180c3:	c3                   	ret    

c00180c4 <Reg::readInt(char*, char*, int*)>:
c00180c4:	55                   	push   ebp
c00180c5:	57                   	push   edi
c00180c6:	56                   	push   esi
c00180c7:	53                   	push   ebx
c00180c8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00180ce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00180d2:	57                   	push   edi
c00180d3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00180da:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00180e1:	e8 a7 ff ff ff       	call   c001808d <Reg::getLine(char*, char*, char*)>
c00180e6:	83 c4 10             	add    esp,0x10
c00180e9:	84 c0                	test   al,al
c00180eb:	0f 84 b3 00 00 00    	je     c00181a4 <Reg::readInt(char*, char*, int*)+0xe0>
c00180f1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00180f5:	80 fa 2b             	cmp    dl,0x2b
c00180f8:	74 0c                	je     c0018106 <Reg::readInt(char*, char*, int*)+0x42>
c00180fa:	80 fa 2d             	cmp    dl,0x2d
c00180fd:	75 0e                	jne    c001810d <Reg::readInt(char*, char*, int*)+0x49>
c00180ff:	ba 01 00 00 00       	mov    edx,0x1
c0018104:	eb 0b                	jmp    c0018111 <Reg::readInt(char*, char*, int*)+0x4d>
c0018106:	ba 01 00 00 00       	mov    edx,0x1
c001810b:	eb 02                	jmp    c001810f <Reg::readInt(char*, char*, int*)+0x4b>
c001810d:	31 d2                	xor    edx,edx
c001810f:	31 c0                	xor    eax,eax
c0018111:	be 0a 00 00 00       	mov    esi,0xa
c0018116:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001811b:	75 20                	jne    c001813d <Reg::readInt(char*, char*, int*)+0x79>
c001811d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0018121:	80 f9 78             	cmp    cl,0x78
c0018124:	75 0a                	jne    c0018130 <Reg::readInt(char*, char*, int*)+0x6c>
c0018126:	83 c2 02             	add    edx,0x2
c0018129:	be 10 00 00 00       	mov    esi,0x10
c001812e:	eb 0d                	jmp    c001813d <Reg::readInt(char*, char*, int*)+0x79>
c0018130:	80 f9 62             	cmp    cl,0x62
c0018133:	75 08                	jne    c001813d <Reg::readInt(char*, char*, int*)+0x79>
c0018135:	83 c2 02             	add    edx,0x2
c0018138:	be 02 00 00 00       	mov    esi,0x2
c001813d:	01 d7                	add    edi,edx
c001813f:	31 d2                	xor    edx,edx
c0018141:	8a 1f                	mov    bl,BYTE PTR [edi]
c0018143:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0018147:	80 fb 0d             	cmp    bl,0xd
c001814a:	0f 94 c3             	sete   bl
c001814d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018152:	0f 94 c1             	sete   cl
c0018155:	08 cb                	or     bl,cl
c0018157:	75 3a                	jne    c0018193 <Reg::readInt(char*, char*, int*)+0xcf>
c0018159:	0f af d6             	imul   edx,esi
c001815c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0018161:	83 fe 10             	cmp    esi,0x10
c0018164:	75 26                	jne    c001818c <Reg::readInt(char*, char*, int*)+0xc8>
c0018166:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001816a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001816d:	89 e9                	mov    ecx,ebp
c001816f:	80 f9 05             	cmp    cl,0x5
c0018172:	77 06                	ja     c001817a <Reg::readInt(char*, char*, int*)+0xb6>
c0018174:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0018178:	eb 16                	jmp    c0018190 <Reg::readInt(char*, char*, int*)+0xcc>
c001817a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001817e:	83 e9 61             	sub    ecx,0x61
c0018181:	80 f9 05             	cmp    cl,0x5
c0018184:	77 06                	ja     c001818c <Reg::readInt(char*, char*, int*)+0xc8>
c0018186:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001818a:	eb 04                	jmp    c0018190 <Reg::readInt(char*, char*, int*)+0xcc>
c001818c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0018190:	47                   	inc    edi
c0018191:	eb ae                	jmp    c0018141 <Reg::readInt(char*, char*, int*)+0x7d>
c0018193:	84 c0                	test   al,al
c0018195:	74 02                	je     c0018199 <Reg::readInt(char*, char*, int*)+0xd5>
c0018197:	f7 da                	neg    edx
c0018199:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00181a0:	89 10                	mov    DWORD PTR [eax],edx
c00181a2:	88 d8                	mov    al,bl
c00181a4:	81 c4 ec 00 00 00    	add    esp,0xec
c00181aa:	5b                   	pop    ebx
c00181ab:	5e                   	pop    esi
c00181ac:	5f                   	pop    edi
c00181ad:	5d                   	pop    ebp
c00181ae:	c3                   	ret    

c00181af <Reg::readString(char*, char*, char*, int)>:
c00181af:	57                   	push   edi
c00181b0:	56                   	push   esi
c00181b1:	53                   	push   ebx
c00181b2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00181b8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00181bf:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00181c3:	57                   	push   edi
c00181c4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00181cb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00181d2:	e8 b6 fe ff ff       	call   c001808d <Reg::getLine(char*, char*, char*)>
c00181d7:	83 c4 10             	add    esp,0x10
c00181da:	89 c6                	mov    esi,eax
c00181dc:	84 c0                	test   al,al
c00181de:	74 44                	je     c0018224 <Reg::readString(char*, char*, char*, int)+0x75>
c00181e0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00181e7:	31 c0                	xor    eax,eax
c00181e9:	4a                   	dec    edx
c00181ea:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00181ed:	84 c9                	test   cl,cl
c00181ef:	74 0f                	je     c0018200 <Reg::readString(char*, char*, char*, int)+0x51>
c00181f1:	39 c2                	cmp    edx,eax
c00181f3:	7e 0b                	jle    c0018200 <Reg::readString(char*, char*, char*, int)+0x51>
c00181f5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00181f8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00181fd:	40                   	inc    eax
c00181fe:	eb ea                	jmp    c00181ea <Reg::readString(char*, char*, char*, int)+0x3b>
c0018200:	83 ec 0c             	sub    esp,0xc
c0018203:	53                   	push   ebx
c0018204:	e8 d3 84 fe ff       	call   c00006dc <strlen>
c0018209:	83 c4 10             	add    esp,0x10
c001820c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0018211:	75 11                	jne    c0018224 <Reg::readString(char*, char*, char*, int)+0x75>
c0018213:	83 ec 0c             	sub    esp,0xc
c0018216:	53                   	push   ebx
c0018217:	e8 c0 84 fe ff       	call   c00006dc <strlen>
c001821c:	83 c4 10             	add    esp,0x10
c001821f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0018224:	81 c4 d0 00 00 00    	add    esp,0xd0
c001822a:	89 f0                	mov    eax,esi
c001822c:	5b                   	pop    ebx
c001822d:	5e                   	pop    esi
c001822e:	5f                   	pop    edi
c001822f:	c3                   	ret    

c0018230 <Reg::readBool(char*, char*, bool*)>:
c0018230:	83 ec 20             	sub    esp,0x20
c0018233:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018237:	50                   	push   eax
c0018238:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001823c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018240:	e8 7f fe ff ff       	call   c00180c4 <Reg::readInt(char*, char*, int*)>
c0018245:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001824a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001824e:	0f 95 02             	setne  BYTE PTR [edx]
c0018251:	83 c4 2c             	add    esp,0x2c
c0018254:	c3                   	ret    

c0018255 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0018255:	53                   	push   ebx
c0018256:	83 ec 1c             	sub    esp,0x1c
c0018259:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001825d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018261:	50                   	push   eax
c0018262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018266:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001826a:	e8 c1 ff ff ff       	call   c0018230 <Reg::readBool(char*, char*, bool*)>
c001826f:	83 c4 10             	add    esp,0x10
c0018272:	84 c0                	test   al,al
c0018274:	74 04                	je     c001827a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0018276:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001827a:	88 d8                	mov    al,bl
c001827c:	83 c4 18             	add    esp,0x18
c001827f:	5b                   	pop    ebx
c0018280:	c3                   	ret    

c0018281 <Reg::readIntWithDefault(char*, char*, int)>:
c0018281:	53                   	push   ebx
c0018282:	83 ec 1c             	sub    esp,0x1c
c0018285:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018289:	8d 44 24 10          	lea    eax,[esp+0x10]
c001828d:	50                   	push   eax
c001828e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018292:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018296:	e8 29 fe ff ff       	call   c00180c4 <Reg::readInt(char*, char*, int*)>
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	84 c0                	test   al,al
c00182a0:	74 04                	je     c00182a6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00182a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00182a6:	89 d8                	mov    eax,ebx
c00182a8:	83 c4 18             	add    esp,0x18
c00182ab:	5b                   	pop    ebx
c00182ac:	c3                   	ret    

c00182ad <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00182ad:	56                   	push   esi
c00182ae:	53                   	push   ebx
c00182af:	51                   	push   ecx
c00182b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00182b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00182b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182bc:	56                   	push   esi
c00182bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182c5:	e8 e5 fe ff ff       	call   c00181af <Reg::readString(char*, char*, char*, int)>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	84 c0                	test   al,al
c00182cf:	74 02                	je     c00182d3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00182d1:	89 f3                	mov    ebx,esi
c00182d3:	89 d8                	mov    eax,ebx
c00182d5:	5a                   	pop    edx
c00182d6:	5b                   	pop    ebx
c00182d7:	5e                   	pop    esi
c00182d8:	c3                   	ret    

c00182d9 <Sys::exit(regs*)>:
c00182d9:	83 ec 18             	sub    esp,0x18
c00182dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182e0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00182e3:	e8 a4 6b ff ff       	call   c000ee8c <terminateTask(int)>
c00182e8:	83 c8 ff             	or     eax,0xffffffff
c00182eb:	83 c4 1c             	add    esp,0x1c
c00182ee:	89 c2                	mov    edx,eax
c00182f0:	c3                   	ret    

c00182f1 <Sys::read(regs*)>:
c00182f1:	57                   	push   edi
c00182f2:	56                   	push   esi
c00182f3:	53                   	push   ebx
c00182f4:	83 ec 10             	sub    esp,0x10
c00182f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00182fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00182fe:	83 f8 02             	cmp    eax,0x2
c0018301:	77 10                	ja     c0018313 <Sys::read(regs*)+0x22>
c0018303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018308:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001830b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018311:	eb 0e                	jmp    c0018321 <Sys::read(regs*)+0x30>
c0018313:	83 ec 0c             	sub    esp,0xc
c0018316:	50                   	push   eax
c0018317:	e8 07 8e ff ff       	call   c0011123 <getFromFileDescriptor(int)>
c001831c:	83 c4 10             	add    esp,0x10
c001831f:	89 c1                	mov    ecx,eax
c0018321:	83 c8 ff             	or     eax,0xffffffff
c0018324:	85 c9                	test   ecx,ecx
c0018326:	89 c2                	mov    edx,eax
c0018328:	74 28                	je     c0018352 <Sys::read(regs*)+0x61>
c001832a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018332:	31 ff                	xor    edi,edi
c0018334:	83 ec 0c             	sub    esp,0xc
c0018337:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018339:	8d 54 24 18          	lea    edx,[esp+0x18]
c001833d:	52                   	push   edx
c001833e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018341:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018344:	57                   	push   edi
c0018345:	56                   	push   esi
c0018346:	51                   	push   ecx
c0018347:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001834a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001834e:	83 c4 20             	add    esp,0x20
c0018351:	99                   	cdq    
c0018352:	83 c4 10             	add    esp,0x10
c0018355:	5b                   	pop    ebx
c0018356:	5e                   	pop    esi
c0018357:	5f                   	pop    edi
c0018358:	c3                   	ret    

c0018359 <Sys::sbrk(regs*)>:
c0018359:	56                   	push   esi
c001835a:	53                   	push   ebx
c001835b:	50                   	push   eax
c001835c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018361:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018365:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018368:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001836b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0018371:	85 db                	test   ebx,ebx
c0018373:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0018376:	74 02                	je     c001837a <Sys::sbrk(regs*)+0x21>
c0018378:	79 06                	jns    c0018380 <Sys::sbrk(regs*)+0x27>
c001837a:	89 f0                	mov    eax,esi
c001837c:	31 d2                	xor    edx,edx
c001837e:	eb 2a                	jmp    c00183aa <Sys::sbrk(regs*)+0x51>
c0018380:	83 c8 ff             	or     eax,0xffffffff
c0018383:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0018389:	89 c2                	mov    edx,eax
c001838b:	77 1d                	ja     c00183aa <Sys::sbrk(regs*)+0x51>
c001838d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018393:	50                   	push   eax
c0018394:	c1 ea 0c             	shr    edx,0xc
c0018397:	68 07 04 00 00       	push   0x407
c001839c:	52                   	push   edx
c001839d:	51                   	push   ecx
c001839e:	e8 9d 95 ff ff       	call   c0011940 <VAS::allocatePages(int, int)>
c00183a3:	89 f0                	mov    eax,esi
c00183a5:	31 d2                	xor    edx,edx
c00183a7:	83 c4 10             	add    esp,0x10
c00183aa:	59                   	pop    ecx
c00183ab:	5b                   	pop    ebx
c00183ac:	5e                   	pop    esi
c00183ad:	c3                   	ret    

c00183ae <Sys::write(regs*)>:
c00183ae:	57                   	push   edi
c00183af:	56                   	push   esi
c00183b0:	53                   	push   ebx
c00183b1:	83 ec 10             	sub    esp,0x10
c00183b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00183bb:	83 f8 02             	cmp    eax,0x2
c00183be:	77 10                	ja     c00183d0 <Sys::write(regs*)+0x22>
c00183c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183c8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00183ce:	eb 0e                	jmp    c00183de <Sys::write(regs*)+0x30>
c00183d0:	83 ec 0c             	sub    esp,0xc
c00183d3:	50                   	push   eax
c00183d4:	e8 4a 8d ff ff       	call   c0011123 <getFromFileDescriptor(int)>
c00183d9:	83 c4 10             	add    esp,0x10
c00183dc:	89 c1                	mov    ecx,eax
c00183de:	83 c8 ff             	or     eax,0xffffffff
c00183e1:	85 c9                	test   ecx,ecx
c00183e3:	89 c2                	mov    edx,eax
c00183e5:	74 28                	je     c001840f <Sys::write(regs*)+0x61>
c00183e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00183ef:	31 ff                	xor    edi,edi
c00183f1:	83 ec 0c             	sub    esp,0xc
c00183f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00183f6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00183fa:	52                   	push   edx
c00183fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00183fe:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018401:	57                   	push   edi
c0018402:	56                   	push   esi
c0018403:	51                   	push   ecx
c0018404:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0018407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001840b:	83 c4 20             	add    esp,0x20
c001840e:	99                   	cdq    
c001840f:	83 c4 10             	add    esp,0x10
c0018412:	5b                   	pop    ebx
c0018413:	5e                   	pop    esi
c0018414:	5f                   	pop    edi
c0018415:	c3                   	ret    

c0018416 <Sys::yield(regs*)>:
c0018416:	83 ec 0c             	sub    esp,0xc
c0018419:	e8 6e 5e ff ff       	call   c000e28c <lockScheduler()>
c001841e:	e8 9d 61 ff ff       	call   c000e5c0 <schedule()>
c0018423:	e8 66 5e ff ff       	call   c000e28e <unlockScheduler()>
c0018428:	31 c0                	xor    eax,eax
c001842a:	31 d2                	xor    edx,edx
c001842c:	83 c4 0c             	add    esp,0xc
c001842f:	c3                   	ret    

c0018430 <vm8086EntryPoint(void*)>:
c0018430:	83 ec 0c             	sub    esp,0xc
c0018433:	e8 56 5e ff ff       	call   c000e28e <unlockScheduler()>
c0018438:	fb                   	sti    
c0018439:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001843e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018442:	52                   	push   edx
c0018443:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018447:	52                   	push   edx
c0018448:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001844c:	52                   	push   edx
c001844d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018451:	50                   	push   eax
c0018452:	e8 5e 7d fe ff       	call   c00001b5 <goToVM86>
c0018457:	83 c4 1c             	add    esp,0x1c
c001845a:	c3                   	ret    

c001845b <inbv(unsigned short)>:
c001845b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001845f:	ec                   	in     al,dx
c0018460:	c3                   	ret    

c0018461 <outbv(unsigned short, unsigned char)>:
c0018461:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018465:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018469:	ee                   	out    dx,al
c001846a:	c3                   	ret    

c001846b <realToLinear(unsigned short, unsigned short)>:
c001846b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018470:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018475:	c1 e0 04             	shl    eax,0x4
c0018478:	01 d0                	add    eax,edx
c001847a:	c3                   	ret    

c001847b <getSegment(unsigned int)>:
c001847b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001847f:	c1 e8 10             	shr    eax,0x10
c0018482:	c3                   	ret    

c0018483 <getOffset(unsigned int)>:
c0018483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018487:	c3                   	ret    

c0018488 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018488:	55                   	push   ebp
c0018489:	57                   	push   edi
c001848a:	56                   	push   esi
c001848b:	53                   	push   ebx
c001848c:	83 ec 2c             	sub    esp,0x2c
c001848f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018493:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018497:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001849b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001849f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00184a3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00184a7:	e8 e0 5d ff ff       	call   c000e28c <lockScheduler()>
c00184ac:	68 80 00 00 00       	push   0x80
c00184b1:	6a 00                	push   0x0
c00184b3:	68 30 84 01 c0       	push   0xc0018430
c00184b8:	55                   	push   ebp
c00184b9:	e8 f8 5e ff ff       	call   c000e3b6 <Process::createThread(void (*)(void*), void*, int)>
c00184be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184c2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00184c6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00184ca:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00184ce:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00184d2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00184d6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00184dd:	e8 b8 9e ff ff       	call   c001239a <operator new(unsigned long)>
c00184e2:	83 c4 0c             	add    esp,0xc
c00184e5:	89 c3                	mov    ebx,eax
c00184e7:	55                   	push   ebp
c00184e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00184ec:	50                   	push   eax
c00184ed:	e8 d6 a2 ff ff       	call   c00127c8 <File::File(char const*, Process*)>
c00184f2:	83 c4 0c             	add    esp,0xc
c00184f5:	8d 44 24 17          	lea    eax,[esp+0x17]
c00184f9:	50                   	push   eax
c00184fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184fe:	50                   	push   eax
c00184ff:	53                   	push   ebx
c0018500:	e8 d3 a5 ff ff       	call   c0012ad8 <File::stat(unsigned long long*, bool*)>
c0018505:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018509:	83 c4 10             	add    esp,0x10
c001850c:	84 d2                	test   dl,dl
c001850e:	74 1c                	je     c001852c <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	68 21 a3 03 c0       	push   0xc003a321
c0018518:	e8 eb 49 ff ff       	call   c000cf08 <panic(char const*)>
c001851d:	e8 6c 5d ff ff       	call   c000e28e <unlockScheduler()>
c0018522:	83 c4 10             	add    esp,0x10
c0018525:	31 d2                	xor    edx,edx
c0018527:	e9 81 00 00 00       	jmp    c00185ad <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001852c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018530:	51                   	push   ecx
c0018531:	51                   	push   ecx
c0018532:	6a 01                	push   0x1
c0018534:	53                   	push   ebx
c0018535:	e8 f2 a2 ff ff       	call   c001282c <File::open(FileOpenMode)>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	85 c0                	test   eax,eax
c001853f:	74 1b                	je     c001855c <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018541:	83 ec 0c             	sub    esp,0xc
c0018544:	68 3a a3 03 c0       	push   0xc003a33a
c0018549:	e8 ba 49 ff ff       	call   c000cf08 <panic(char const*)>
c001854e:	e8 3b 5d ff ff       	call   c000e28e <unlockScheduler()>
c0018553:	83 c4 10             	add    esp,0x10
c0018556:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001855a:	eb 51                	jmp    c00185ad <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001855c:	83 ec 0c             	sub    esp,0xc
c001855f:	0f b7 ff             	movzx  edi,di
c0018562:	6a 07                	push   0x7
c0018564:	0f b7 f6             	movzx  esi,si
c0018567:	68 00 01 00 00       	push   0x100
c001856c:	6a 00                	push   0x0
c001856e:	6a 00                	push   0x0
c0018570:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018576:	e8 b1 95 ff ff       	call   c0011b2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001857b:	83 c4 18             	add    esp,0x18
c001857e:	57                   	push   edi
c001857f:	56                   	push   esi
c0018580:	e8 e6 fe ff ff       	call   c001846b <realToLinear(unsigned short, unsigned short)>
c0018585:	5a                   	pop    edx
c0018586:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001858c:	51                   	push   ecx
c001858d:	50                   	push   eax
c001858e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018592:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018596:	53                   	push   ebx
c0018597:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001859a:	83 c4 14             	add    esp,0x14
c001859d:	53                   	push   ebx
c001859e:	e8 e7 a2 ff ff       	call   c001288a <File::close()>
c00185a3:	e8 e6 5c ff ff       	call   c000e28e <unlockScheduler()>
c00185a8:	83 c4 10             	add    esp,0x10
c00185ab:	b2 01                	mov    dl,0x1
c00185ad:	83 c4 2c             	add    esp,0x2c
c00185b0:	88 d0                	mov    al,dl
c00185b2:	5b                   	pop    ebx
c00185b3:	5e                   	pop    esi
c00185b4:	5f                   	pop    edi
c00185b5:	5d                   	pop    ebp
c00185b6:	c3                   	ret    

c00185b7 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00185b7:	57                   	push   edi
c00185b8:	56                   	push   esi
c00185b9:	53                   	push   ebx
c00185ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00185c6:	83 e8 06             	sub    eax,0x6
c00185c9:	0f b7 c0             	movzx  eax,ax
c00185cc:	50                   	push   eax
c00185cd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00185d2:	50                   	push   eax
c00185d3:	e8 93 fe ff ff       	call   c001846b <realToLinear(unsigned short, unsigned short)>
c00185d8:	5a                   	pop    edx
c00185d9:	5e                   	pop    esi
c00185da:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00185dd:	8d 56 fa             	lea    edx,[esi-0x6]
c00185e0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00185e6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00185e9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00185ec:	83 c2 02             	add    edx,0x2
c00185ef:	66 89 10             	mov    WORD PTR [eax],dx
c00185f2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00185f5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00185f9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00185fc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018600:	89 d6                	mov    esi,edx
c0018602:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018608:	66 81 e6 ff fd       	and    si,0xfdff
c001860d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018611:	74 07                	je     c001861a <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018613:	89 d6                	mov    esi,edx
c0018615:	66 81 ce 00 02       	or     si,0x200
c001861a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001861e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018623:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018627:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001862f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018632:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001863a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001863d:	5b                   	pop    ebx
c001863e:	5e                   	pop    esi
c001863f:	5f                   	pop    edi
c0018640:	c3                   	ret    

c0018641 <readByteFromReal(unsigned short, unsigned short)>:
c0018641:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018646:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001864b:	c1 e0 04             	shl    eax,0x4
c001864e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018651:	c3                   	ret    

c0018652 <readWordFromReal(unsigned short, unsigned short)>:
c0018652:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018657:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001865c:	c1 e0 04             	shl    eax,0x4
c001865f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018663:	c3                   	ret    

c0018664 <readDwordFromReal(unsigned short, unsigned short)>:
c0018664:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018669:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001866e:	c1 e0 04             	shl    eax,0x4
c0018671:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018674:	c3                   	ret    

c0018675 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018675:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001867a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001867f:	c1 e0 04             	shl    eax,0x4
c0018682:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018686:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018689:	c3                   	ret    

c001868a <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001868a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001868f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018694:	c1 e0 04             	shl    eax,0x4
c0018697:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001869b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001869f:	c3                   	ret    

c00186a0 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00186a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186aa:	c1 e0 04             	shl    eax,0x4
c00186ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186b1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00186b4:	c3                   	ret    

c00186b5 <vm8086FaultHandler(regs*)>:
c00186b5:	55                   	push   ebp
c00186b6:	57                   	push   edi
c00186b7:	56                   	push   esi
c00186b8:	53                   	push   ebx
c00186b9:	83 ec 1c             	sub    esp,0x1c
c00186bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00186c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186c3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00186c7:	0f b7 f0             	movzx  esi,ax
c00186ca:	52                   	push   edx
c00186cb:	0f b7 c0             	movzx  eax,ax
c00186ce:	50                   	push   eax
c00186cf:	e8 97 fd ff ff       	call   c001846b <realToLinear(unsigned short, unsigned short)>
c00186d4:	5a                   	pop    edx
c00186d5:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00186d8:	59                   	pop    ecx
c00186d9:	89 c7                	mov    edi,eax
c00186db:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00186de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186eb:	0f b7 c5             	movzx  eax,bp
c00186ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00186f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186fa:	e8 6c fd ff ff       	call   c001846b <realToLinear(unsigned short, unsigned short)>
c00186ff:	5a                   	pop    edx
c0018700:	59                   	pop    ecx
c0018701:	b1 06                	mov    cl,0x6
c0018703:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018708:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001870d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018710:	80 fa 9d             	cmp    dl,0x9d
c0018713:	0f 84 1d 02 00 00    	je     c0018936 <vm8086FaultHandler(regs*)+0x281>
c0018719:	0f 87 8e 00 00 00    	ja     c00187ad <vm8086FaultHandler(regs*)+0xf8>
c001871f:	80 fa 66             	cmp    dl,0x66
c0018722:	0f 84 89 01 00 00    	je     c00188b1 <vm8086FaultHandler(regs*)+0x1fc>
c0018728:	77 44                	ja     c001876e <vm8086FaultHandler(regs*)+0xb9>
c001872a:	80 fa 36             	cmp    dl,0x36
c001872d:	0f 84 74 01 00 00    	je     c00188a7 <vm8086FaultHandler(regs*)+0x1f2>
c0018733:	77 1a                	ja     c001874f <vm8086FaultHandler(regs*)+0x9a>
c0018735:	80 fa 26             	cmp    dl,0x26
c0018738:	0f 84 4b 01 00 00    	je     c0018889 <vm8086FaultHandler(regs*)+0x1d4>
c001873e:	80 fa 2e             	cmp    dl,0x2e
c0018741:	0f 85 4a 05 00 00    	jne    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c0018747:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001874a:	31 c9                	xor    ecx,ecx
c001874c:	47                   	inc    edi
c001874d:	eb be                	jmp    c001870d <vm8086FaultHandler(regs*)+0x58>
c001874f:	80 fa 64             	cmp    dl,0x64
c0018752:	0f 84 3b 01 00 00    	je     c0018893 <vm8086FaultHandler(regs*)+0x1de>
c0018758:	0f 87 3f 01 00 00    	ja     c001889d <vm8086FaultHandler(regs*)+0x1e8>
c001875e:	80 fa 3e             	cmp    dl,0x3e
c0018761:	0f 85 2a 05 00 00    	jne    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c0018767:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001876a:	b1 01                	mov    cl,0x1
c001876c:	eb de                	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c001876e:	80 fa 6d             	cmp    dl,0x6d
c0018771:	0f 84 bf 02 00 00    	je     c0018a36 <vm8086FaultHandler(regs*)+0x381>
c0018777:	77 17                	ja     c0018790 <vm8086FaultHandler(regs*)+0xdb>
c0018779:	80 fa 67             	cmp    dl,0x67
c001877c:	0f 84 3c 01 00 00    	je     c00188be <vm8086FaultHandler(regs*)+0x209>
c0018782:	80 fa 6c             	cmp    dl,0x6c
c0018785:	0f 84 5d 02 00 00    	je     c00189e8 <vm8086FaultHandler(regs*)+0x333>
c001878b:	e9 01 05 00 00       	jmp    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c0018790:	80 fa 6f             	cmp    dl,0x6f
c0018793:	0f 84 8b 03 00 00    	je     c0018b24 <vm8086FaultHandler(regs*)+0x46f>
c0018799:	0f 82 0f 03 00 00    	jb     c0018aae <vm8086FaultHandler(regs*)+0x3f9>
c001879f:	80 fa 9c             	cmp    dl,0x9c
c00187a2:	0f 84 23 01 00 00    	je     c00188cb <vm8086FaultHandler(regs*)+0x216>
c00187a8:	e9 e4 04 00 00       	jmp    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c00187ad:	80 fa ec             	cmp    dl,0xec
c00187b0:	0f 84 7f 04 00 00    	je     c0018c35 <vm8086FaultHandler(regs*)+0x580>
c00187b6:	77 7b                	ja     c0018833 <vm8086FaultHandler(regs*)+0x17e>
c00187b8:	80 fa e4             	cmp    dl,0xe4
c00187bb:	0f 84 fe 03 00 00    	je     c0018bbf <vm8086FaultHandler(regs*)+0x50a>
c00187c1:	77 53                	ja     c0018816 <vm8086FaultHandler(regs*)+0x161>
c00187c3:	80 fa cd             	cmp    dl,0xcd
c00187c6:	0f 84 cd 01 00 00    	je     c0018999 <vm8086FaultHandler(regs*)+0x2e4>
c00187cc:	80 fa cf             	cmp    dl,0xcf
c00187cf:	0f 85 bc 04 00 00    	jne    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c00187d5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00187d8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00187db:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00187df:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00187e2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00187e6:	81 ca 00 02 02 00    	or     edx,0x20200
c00187ec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00187ef:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00187f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00187f9:	66 c1 e8 09          	shr    ax,0x9
c00187fd:	83 e0 01             	and    eax,0x1
c0018800:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018803:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018806:	83 c0 06             	add    eax,0x6
c0018809:	25 ff ff 00 00       	and    eax,0xffff
c001880e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018811:	e9 77 04 00 00       	jmp    c0018c8d <vm8086FaultHandler(regs*)+0x5d8>
c0018816:	80 fa e6             	cmp    dl,0xe6
c0018819:	0f 84 ea 03 00 00    	je     c0018c09 <vm8086FaultHandler(regs*)+0x554>
c001881f:	0f 82 b6 03 00 00    	jb     c0018bdb <vm8086FaultHandler(regs*)+0x526>
c0018825:	80 fa e7             	cmp    dl,0xe7
c0018828:	0f 84 f2 03 00 00    	je     c0018c20 <vm8086FaultHandler(regs*)+0x56b>
c001882e:	e9 5e 04 00 00       	jmp    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c0018833:	80 fa ef             	cmp    dl,0xef
c0018836:	0f 84 3c 04 00 00    	je     c0018c78 <vm8086FaultHandler(regs*)+0x5c3>
c001883c:	77 28                	ja     c0018866 <vm8086FaultHandler(regs*)+0x1b1>
c001883e:	80 fa ed             	cmp    dl,0xed
c0018841:	0f 84 0a 04 00 00    	je     c0018c51 <vm8086FaultHandler(regs*)+0x59c>
c0018847:	80 fa ee             	cmp    dl,0xee
c001884a:	0f 85 41 04 00 00    	jne    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c0018850:	50                   	push   eax
c0018851:	50                   	push   eax
c0018852:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018856:	50                   	push   eax
c0018857:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001885b:	50                   	push   eax
c001885c:	e8 00 fc ff ff       	call   c0018461 <outbv(unsigned short, unsigned char)>
c0018861:	e9 0a 04 00 00       	jmp    c0018c70 <vm8086FaultHandler(regs*)+0x5bb>
c0018866:	80 fa fa             	cmp    dl,0xfa
c0018869:	0f 84 5d 01 00 00    	je     c00189cc <vm8086FaultHandler(regs*)+0x317>
c001886f:	80 fa fb             	cmp    dl,0xfb
c0018872:	0f 84 62 01 00 00    	je     c00189da <vm8086FaultHandler(regs*)+0x325>
c0018878:	80 fa f3             	cmp    dl,0xf3
c001887b:	0f 85 10 04 00 00    	jne    c0018c91 <vm8086FaultHandler(regs*)+0x5dc>
c0018881:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018884:	e9 c3 fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c0018889:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001888c:	b1 02                	mov    cl,0x2
c001888e:	e9 b9 fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c0018893:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018896:	b1 03                	mov    cl,0x3
c0018898:	e9 af fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c001889d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188a0:	b1 04                	mov    cl,0x4
c00188a2:	e9 a5 fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c00188a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188aa:	b1 05                	mov    cl,0x5
c00188ac:	e9 9b fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c00188b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188b4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00188b9:	e9 8e fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c00188be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188c1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00188c6:	e9 81 fe ff ff       	jmp    c001874c <vm8086FaultHandler(regs*)+0x97>
c00188cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00188ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00188d7:	74 30                	je     c0018909 <vm8086FaultHandler(regs*)+0x254>
c00188d9:	83 e9 04             	sub    ecx,0x4
c00188dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00188e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00188e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00188eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00188ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00188f4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00188f8:	0f 84 8c 03 00 00    	je     c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c00188fe:	80 ce 02             	or     dh,0x2
c0018901:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018904:	e9 81 03 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018909:	83 e9 02             	sub    ecx,0x2
c001890c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018912:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018915:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018919:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001891f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018923:	74 05                	je     c001892a <vm8086FaultHandler(regs*)+0x275>
c0018925:	80 ce 02             	or     dh,0x2
c0018928:	eb 03                	jmp    c001892d <vm8086FaultHandler(regs*)+0x278>
c001892a:	80 e6 fd             	and    dh,0xfd
c001892d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018931:	e9 54 03 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018936:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001893b:	74 2a                	je     c0018967 <vm8086FaultHandler(regs*)+0x2b2>
c001893d:	8b 10                	mov    edx,DWORD PTR [eax]
c001893f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018945:	81 ca 00 02 02 00    	or     edx,0x20200
c001894b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001894e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018950:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018956:	c1 e8 09             	shr    eax,0x9
c0018959:	83 e0 01             	and    eax,0x1
c001895c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001895f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018962:	83 c0 04             	add    eax,0x4
c0018965:	eb 25                	jmp    c001898c <vm8086FaultHandler(regs*)+0x2d7>
c0018967:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001896a:	81 ca 00 02 02 00    	or     edx,0x20200
c0018970:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018973:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018976:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001897c:	66 c1 e8 09          	shr    ax,0x9
c0018980:	83 e0 01             	and    eax,0x1
c0018983:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018986:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018989:	83 c0 02             	add    eax,0x2
c001898c:	25 ff ff 00 00       	and    eax,0xffff
c0018991:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018994:	e9 f1 02 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018999:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001899d:	3c ff                	cmp    al,0xff
c001899f:	75 10                	jne    c00189b1 <vm8086FaultHandler(regs*)+0x2fc>
c00189a1:	83 ec 0c             	sub    esp,0xc
c00189a4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00189a7:	e8 e0 64 ff ff       	call   c000ee8c <terminateTask(int)>
c00189ac:	e9 c2 02 00 00       	jmp    c0018c73 <vm8086FaultHandler(regs*)+0x5be>
c00189b1:	83 ec 0c             	sub    esp,0xc
c00189b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189bc:	57                   	push   edi
c00189bd:	50                   	push   eax
c00189be:	53                   	push   ebx
c00189bf:	e8 f3 fb ff ff       	call   c00185b7 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00189c4:	83 c4 20             	add    esp,0x20
c00189c7:	e9 c1 02 00 00       	jmp    c0018c8d <vm8086FaultHandler(regs*)+0x5d8>
c00189cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189d1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00189d5:	e9 b0 02 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c00189da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189df:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00189e3:	e9 a2 02 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c00189e8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00189ed:	74 0d                	je     c00189fc <vm8086FaultHandler(regs*)+0x347>
c00189ef:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00189f6:	0f 87 e9 02 00 00    	ja     c0018ce5 <vm8086FaultHandler(regs*)+0x630>
c00189fc:	83 ec 0c             	sub    esp,0xc
c00189ff:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018a02:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a06:	50                   	push   eax
c0018a07:	e8 4f fa ff ff       	call   c001845b <inbv(unsigned short)>
c0018a0c:	83 c4 0c             	add    esp,0xc
c0018a0f:	0f b6 c0             	movzx  eax,al
c0018a12:	0f b7 c9             	movzx  ecx,cx
c0018a15:	50                   	push   eax
c0018a16:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018a1a:	50                   	push   eax
c0018a1b:	51                   	push   ecx
c0018a1c:	e8 54 fc ff ff       	call   c0018675 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a2b:	74 03                	je     c0018a30 <vm8086FaultHandler(regs*)+0x37b>
c0018a2d:	48                   	dec    eax
c0018a2e:	eb 01                	jmp    c0018a31 <vm8086FaultHandler(regs*)+0x37c>
c0018a30:	40                   	inc    eax
c0018a31:	0f b7 c0             	movzx  eax,ax
c0018a34:	eb 70                	jmp    c0018aa6 <vm8086FaultHandler(regs*)+0x3f1>
c0018a36:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018a39:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018a3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a41:	74 0c                	je     c0018a4f <vm8086FaultHandler(regs*)+0x39a>
c0018a43:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018a49:	0f 87 96 02 00 00    	ja     c0018ce5 <vm8086FaultHandler(regs*)+0x630>
c0018a4f:	0f b7 c9             	movzx  ecx,cx
c0018a52:	0f b7 f6             	movzx  esi,si
c0018a55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a5d:	74 20                	je     c0018a7f <vm8086FaultHandler(regs*)+0x3ca>
c0018a5f:	ed                   	in     eax,dx
c0018a60:	55                   	push   ebp
c0018a61:	50                   	push   eax
c0018a62:	51                   	push   ecx
c0018a63:	56                   	push   esi
c0018a64:	e8 37 fc ff ff       	call   c00186a0 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018a69:	83 c4 10             	add    esp,0x10
c0018a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a6f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a73:	74 05                	je     c0018a7a <vm8086FaultHandler(regs*)+0x3c5>
c0018a75:	83 e8 04             	sub    eax,0x4
c0018a78:	eb 27                	jmp    c0018aa1 <vm8086FaultHandler(regs*)+0x3ec>
c0018a7a:	83 c0 04             	add    eax,0x4
c0018a7d:	eb 22                	jmp    c0018aa1 <vm8086FaultHandler(regs*)+0x3ec>
c0018a7f:	66 ed                	in     ax,dx
c0018a81:	0f b7 c0             	movzx  eax,ax
c0018a84:	57                   	push   edi
c0018a85:	50                   	push   eax
c0018a86:	51                   	push   ecx
c0018a87:	56                   	push   esi
c0018a88:	e8 fd fb ff ff       	call   c001868a <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a93:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a97:	74 05                	je     c0018a9e <vm8086FaultHandler(regs*)+0x3e9>
c0018a99:	83 e8 02             	sub    eax,0x2
c0018a9c:	eb 03                	jmp    c0018aa1 <vm8086FaultHandler(regs*)+0x3ec>
c0018a9e:	83 c0 02             	add    eax,0x2
c0018aa1:	25 ff ff 00 00       	and    eax,0xffff
c0018aa6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018aa9:	e9 dc 01 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018aae:	49                   	dec    ecx
c0018aaf:	80 f9 05             	cmp    cl,0x5
c0018ab2:	77 24                	ja     c0018ad8 <vm8086FaultHandler(regs*)+0x423>
c0018ab4:	0f b6 c9             	movzx  ecx,cl
c0018ab7:	ff 24 8d 80 a3 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5c80]
c0018abe:	0f b7 f5             	movzx  esi,bp
c0018ac1:	eb 15                	jmp    c0018ad8 <vm8086FaultHandler(regs*)+0x423>
c0018ac3:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018ac7:	eb 0f                	jmp    c0018ad8 <vm8086FaultHandler(regs*)+0x423>
c0018ac9:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018acd:	eb 09                	jmp    c0018ad8 <vm8086FaultHandler(regs*)+0x423>
c0018acf:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018ad3:	eb 03                	jmp    c0018ad8 <vm8086FaultHandler(regs*)+0x423>
c0018ad5:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018ad8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018adb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ae0:	74 0b                	je     c0018aed <vm8086FaultHandler(regs*)+0x438>
c0018ae2:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ae7:	0f 87 f8 01 00 00    	ja     c0018ce5 <vm8086FaultHandler(regs*)+0x630>
c0018aed:	0f b7 c0             	movzx  eax,ax
c0018af0:	52                   	push   edx
c0018af1:	52                   	push   edx
c0018af2:	50                   	push   eax
c0018af3:	56                   	push   esi
c0018af4:	e8 48 fb ff ff       	call   c0018641 <readByteFromReal(unsigned short, unsigned short)>
c0018af9:	59                   	pop    ecx
c0018afa:	0f b6 c0             	movzx  eax,al
c0018afd:	5e                   	pop    esi
c0018afe:	50                   	push   eax
c0018aff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b03:	50                   	push   eax
c0018b04:	e8 58 f9 ff ff       	call   c0018461 <outbv(unsigned short, unsigned char)>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b0f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b13:	74 03                	je     c0018b18 <vm8086FaultHandler(regs*)+0x463>
c0018b15:	48                   	dec    eax
c0018b16:	eb 01                	jmp    c0018b19 <vm8086FaultHandler(regs*)+0x464>
c0018b18:	40                   	inc    eax
c0018b19:	0f b7 c0             	movzx  eax,ax
c0018b1c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018b1f:	e9 66 01 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018b24:	49                   	dec    ecx
c0018b25:	80 f9 05             	cmp    cl,0x5
c0018b28:	77 1f                	ja     c0018b49 <vm8086FaultHandler(regs*)+0x494>
c0018b2a:	0f b6 c9             	movzx  ecx,cl
c0018b2d:	ff 24 8d 98 a3 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5c68]
c0018b34:	89 ee                	mov    esi,ebp
c0018b36:	eb 11                	jmp    c0018b49 <vm8086FaultHandler(regs*)+0x494>
c0018b38:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018b3b:	eb 0c                	jmp    c0018b49 <vm8086FaultHandler(regs*)+0x494>
c0018b3d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b40:	eb 07                	jmp    c0018b49 <vm8086FaultHandler(regs*)+0x494>
c0018b42:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018b45:	eb 02                	jmp    c0018b49 <vm8086FaultHandler(regs*)+0x494>
c0018b47:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018b49:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018b4c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b51:	74 0c                	je     c0018b5f <vm8086FaultHandler(regs*)+0x4aa>
c0018b53:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b59:	0f 87 86 01 00 00    	ja     c0018ce5 <vm8086FaultHandler(regs*)+0x630>
c0018b5f:	0f b7 d6             	movzx  edx,si
c0018b62:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018b65:	0f b7 c1             	movzx  eax,cx
c0018b68:	81 e7 00 04 00 00    	and    edi,0x400
c0018b6e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018b71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b76:	74 1d                	je     c0018b95 <vm8086FaultHandler(regs*)+0x4e0>
c0018b78:	55                   	push   ebp
c0018b79:	55                   	push   ebp
c0018b7a:	50                   	push   eax
c0018b7b:	52                   	push   edx
c0018b7c:	e8 e3 fa ff ff       	call   c0018664 <readDwordFromReal(unsigned short, unsigned short)>
c0018b81:	83 c4 10             	add    esp,0x10
c0018b84:	89 f2                	mov    edx,esi
c0018b86:	ef                   	out    dx,eax
c0018b87:	85 ff                	test   edi,edi
c0018b89:	74 05                	je     c0018b90 <vm8086FaultHandler(regs*)+0x4db>
c0018b8b:	83 e9 04             	sub    ecx,0x4
c0018b8e:	eb 21                	jmp    c0018bb1 <vm8086FaultHandler(regs*)+0x4fc>
c0018b90:	83 c1 04             	add    ecx,0x4
c0018b93:	eb 1c                	jmp    c0018bb1 <vm8086FaultHandler(regs*)+0x4fc>
c0018b95:	55                   	push   ebp
c0018b96:	55                   	push   ebp
c0018b97:	50                   	push   eax
c0018b98:	52                   	push   edx
c0018b99:	e8 b4 fa ff ff       	call   c0018652 <readWordFromReal(unsigned short, unsigned short)>
c0018b9e:	83 c4 10             	add    esp,0x10
c0018ba1:	89 f2                	mov    edx,esi
c0018ba3:	66 ef                	out    dx,ax
c0018ba5:	85 ff                	test   edi,edi
c0018ba7:	74 05                	je     c0018bae <vm8086FaultHandler(regs*)+0x4f9>
c0018ba9:	83 e9 02             	sub    ecx,0x2
c0018bac:	eb 03                	jmp    c0018bb1 <vm8086FaultHandler(regs*)+0x4fc>
c0018bae:	83 c1 02             	add    ecx,0x2
c0018bb1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018bb7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018bba:	e9 cb 00 00 00       	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018bbf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018bc6:	83 ec 0c             	sub    esp,0xc
c0018bc9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018bcd:	50                   	push   eax
c0018bce:	e8 88 f8 ff ff       	call   c001845b <inbv(unsigned short)>
c0018bd3:	0f b6 c0             	movzx  eax,al
c0018bd6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018bd9:	eb 3f                	jmp    c0018c1a <vm8086FaultHandler(regs*)+0x565>
c0018bdb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018be0:	74 07                	je     c0018be9 <vm8086FaultHandler(regs*)+0x534>
c0018be2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018be6:	ed                   	in     eax,dx
c0018be7:	eb 14                	jmp    c0018bfd <vm8086FaultHandler(regs*)+0x548>
c0018be9:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018bec:	66 31 c9             	xor    cx,cx
c0018bef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018bf2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018bf6:	66 ed                	in     ax,dx
c0018bf8:	0f b7 c0             	movzx  eax,ax
c0018bfb:	09 c8                	or     eax,ecx
c0018bfd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c04:	e9 84 00 00 00       	jmp    c0018c8d <vm8086FaultHandler(regs*)+0x5d8>
c0018c09:	52                   	push   edx
c0018c0a:	52                   	push   edx
c0018c0b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c0f:	50                   	push   eax
c0018c10:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c14:	50                   	push   eax
c0018c15:	e8 47 f8 ff ff       	call   c0018461 <outbv(unsigned short, unsigned char)>
c0018c1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c1e:	eb 53                	jmp    c0018c73 <vm8086FaultHandler(regs*)+0x5be>
c0018c20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c23:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c2c:	74 03                	je     c0018c31 <vm8086FaultHandler(regs*)+0x57c>
c0018c2e:	ef                   	out    dx,eax
c0018c2f:	eb cf                	jmp    c0018c00 <vm8086FaultHandler(regs*)+0x54b>
c0018c31:	66 ef                	out    dx,ax
c0018c33:	eb cb                	jmp    c0018c00 <vm8086FaultHandler(regs*)+0x54b>
c0018c35:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c3c:	83 ec 0c             	sub    esp,0xc
c0018c3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c43:	50                   	push   eax
c0018c44:	e8 12 f8 ff ff       	call   c001845b <inbv(unsigned short)>
c0018c49:	0f b6 c0             	movzx  eax,al
c0018c4c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c4f:	eb 1f                	jmp    c0018c70 <vm8086FaultHandler(regs*)+0x5bb>
c0018c51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c59:	74 03                	je     c0018c5e <vm8086FaultHandler(regs*)+0x5a9>
c0018c5b:	ed                   	in     eax,dx
c0018c5c:	eb 0d                	jmp    c0018c6b <vm8086FaultHandler(regs*)+0x5b6>
c0018c5e:	66 ed                	in     ax,dx
c0018c60:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018c63:	0f b7 c0             	movzx  eax,ax
c0018c66:	66 31 d2             	xor    dx,dx
c0018c69:	09 d0                	or     eax,edx
c0018c6b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c6e:	eb 1a                	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018c70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c73:	83 c4 10             	add    esp,0x10
c0018c76:	eb 15                	jmp    c0018c8d <vm8086FaultHandler(regs*)+0x5d8>
c0018c78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c83:	74 03                	je     c0018c88 <vm8086FaultHandler(regs*)+0x5d3>
c0018c85:	ef                   	out    dx,eax
c0018c86:	eb 02                	jmp    c0018c8a <vm8086FaultHandler(regs*)+0x5d5>
c0018c88:	66 ef                	out    dx,ax
c0018c8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c8d:	b0 01                	mov    al,0x1
c0018c8f:	eb 56                	jmp    c0018ce7 <vm8086FaultHandler(regs*)+0x632>
c0018c91:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018c95:	50                   	push   eax
c0018c96:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018c9a:	50                   	push   eax
c0018c9b:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018c9f:	50                   	push   eax
c0018ca0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018ca4:	50                   	push   eax
c0018ca5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018ca9:	50                   	push   eax
c0018caa:	52                   	push   edx
c0018cab:	52                   	push   edx
c0018cac:	68 53 a3 03 c0       	push   0xc003a353
c0018cb1:	e8 34 41 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0018cb6:	83 c4 20             	add    esp,0x20
c0018cb9:	83 ec 0c             	sub    esp,0xc
c0018cbc:	6a 60                	push   0x60
c0018cbe:	e8 98 f7 ff ff       	call   c001845b <inbv(unsigned short)>
c0018cc3:	83 c4 10             	add    esp,0x10
c0018cc6:	3c 1c                	cmp    al,0x1c
c0018cc8:	74 04                	je     c0018cce <vm8086FaultHandler(regs*)+0x619>
c0018cca:	3c 5a                	cmp    al,0x5a
c0018ccc:	75 eb                	jne    c0018cb9 <vm8086FaultHandler(regs*)+0x604>
c0018cce:	3c 5a                	cmp    al,0x5a
c0018cd0:	74 04                	je     c0018cd6 <vm8086FaultHandler(regs*)+0x621>
c0018cd2:	3c 1c                	cmp    al,0x1c
c0018cd4:	75 0f                	jne    c0018ce5 <vm8086FaultHandler(regs*)+0x630>
c0018cd6:	83 ec 0c             	sub    esp,0xc
c0018cd9:	6a 60                	push   0x60
c0018cdb:	e8 7b f7 ff ff       	call   c001845b <inbv(unsigned short)>
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	eb e9                	jmp    c0018cce <vm8086FaultHandler(regs*)+0x619>
c0018ce5:	31 c0                	xor    eax,eax
c0018ce7:	83 c4 1c             	add    esp,0x1c
c0018cea:	5b                   	pop    ebx
c0018ceb:	5e                   	pop    esi
c0018cec:	5f                   	pop    edi
c0018ced:	5d                   	pop    ebp
c0018cee:	c3                   	ret    
c0018cef:	90                   	nop

c0018cf0 <FAT::getName()>:
c0018cf0:	b8 b0 a3 03 c0       	mov    eax,0xc003a3b0
c0018cf5:	c3                   	ret    

c0018cf6 <FAT::tell(void*, unsigned long long*)>:
c0018cf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018cfb:	75 06                	jne    c0018d03 <FAT::tell(void*, unsigned long long*)+0xd>
c0018cfd:	b8 04 00 00 00       	mov    eax,0x4
c0018d02:	c3                   	ret    
c0018d03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d08:	75 06                	jne    c0018d10 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018d0a:	b8 04 00 00 00       	mov    eax,0x4
c0018d0f:	c3                   	ret    
c0018d10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d14:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018d17:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d1e:	89 01                	mov    DWORD PTR [ecx],eax
c0018d20:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d23:	b8 00 00 00 00       	mov    eax,0x0
c0018d28:	c3                   	ret    
c0018d29:	90                   	nop

c0018d2a <FAT::stat(void*, unsigned long long*)>:
c0018d2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d2f:	75 06                	jne    c0018d37 <FAT::stat(void*, unsigned long long*)+0xd>
c0018d31:	b8 04 00 00 00       	mov    eax,0x4
c0018d36:	c3                   	ret    
c0018d37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d3c:	75 06                	jne    c0018d44 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018d3e:	b8 04 00 00 00       	mov    eax,0x4
c0018d43:	c3                   	ret    
c0018d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d52:	89 01                	mov    DWORD PTR [ecx],eax
c0018d54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d57:	b8 00 00 00 00       	mov    eax,0x0
c0018d5c:	c3                   	ret    
c0018d5d:	90                   	nop

c0018d5e <FAT::exists(char const*)>:
c0018d5e:	b0 00                	mov    al,0x0
c0018d60:	c3                   	ret    
c0018d61:	90                   	nop

c0018d62 <FAT::~FAT()>:
c0018d62:	83 ec 0c             	sub    esp,0xc
c0018d65:	ba 34 a4 03 c0       	mov    edx,0xc003a434
c0018d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d6e:	89 10                	mov    DWORD PTR [eax],edx
c0018d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d74:	83 ec 0c             	sub    esp,0xc
c0018d77:	50                   	push   eax
c0018d78:	e8 45 98 ff ff       	call   c00125c2 <Filesystem::~Filesystem()>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	90                   	nop
c0018d81:	83 c4 0c             	add    esp,0xc
c0018d84:	c3                   	ret    
c0018d85:	90                   	nop

c0018d86 <FAT::~FAT()>:
c0018d86:	83 ec 0c             	sub    esp,0xc
c0018d89:	83 ec 0c             	sub    esp,0xc
c0018d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d90:	e8 cd ff ff ff       	call   c0018d62 <FAT::~FAT()>
c0018d95:	83 c4 10             	add    esp,0x10
c0018d98:	83 ec 08             	sub    esp,0x8
c0018d9b:	6a 08                	push   0x8
c0018d9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018da1:	e8 03 96 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0018da6:	83 c4 10             	add    esp,0x10
c0018da9:	83 c4 0c             	add    esp,0xc
c0018dac:	c3                   	ret    
c0018dad:	90                   	nop

c0018dae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018dae:	83 ec 1c             	sub    esp,0x1c
c0018db1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018db8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018dbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc1:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0018dc8:	83 f8 ff             	cmp    eax,0xffffffff
c0018dcb:	75 34                	jne    c0018e01 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018dcd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018dd1:	88 c2                	mov    dl,al
c0018dd3:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0018dd8:	01 d0                	add    eax,edx
c0018dda:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018dde:	8b 15 e0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6e0
c0018de4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018de8:	89 14 85 00 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3900],edx
c0018def:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0018df4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018df8:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c0018dff:	eb 17                	jmp    c0018e18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018e01:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e05:	88 c2                	mov    dl,al
c0018e07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0b:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0018e12:	01 d0                	add    eax,edx
c0018e14:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e18:	83 ec 04             	sub    esp,0x4
c0018e1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e23:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018e27:	50                   	push   eax
c0018e28:	e8 53 de fe ff       	call   c0006c80 <f_getlabel>
c0018e2d:	83 c4 10             	add    esp,0x10
c0018e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e39:	75 07                	jne    c0018e42 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018e3b:	b8 00 00 00 00       	mov    eax,0x0
c0018e40:	eb 05                	jmp    c0018e47 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018e42:	b8 01 00 00 00       	mov    eax,0x1
c0018e47:	83 c4 1c             	add    esp,0x1c
c0018e4a:	c3                   	ret    
c0018e4b:	90                   	nop

c0018e4c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018e4c:	57                   	push   edi
c0018e4d:	83 ec 58             	sub    esp,0x58
c0018e50:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018e58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018e5c:	b9 0f 00 00 00       	mov    ecx,0xf
c0018e61:	b8 00 00 00 00       	mov    eax,0x0
c0018e66:	fc                   	cld    
c0018e67:	89 d7                	mov    edi,edx
c0018e69:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018e6b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018e6f:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0018e76:	83 f8 ff             	cmp    eax,0xffffffff
c0018e79:	75 34                	jne    c0018eaf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018e7b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e7f:	88 c2                	mov    dl,al
c0018e81:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0018e86:	01 d0                	add    eax,edx
c0018e88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e8c:	8b 15 e0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6e0
c0018e92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018e96:	89 14 85 00 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3900],edx
c0018e9d:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0018ea2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ea6:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c0018ead:	eb 17                	jmp    c0018ec6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018eaf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018eb3:	88 c2                	mov    dl,al
c0018eb5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018eb9:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0018ec0:	01 d0                	add    eax,edx
c0018ec2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ec6:	83 ec 08             	sub    esp,0x8
c0018ec9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018ecd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ed1:	50                   	push   eax
c0018ed2:	e8 e5 79 fe ff       	call   c00008bc <strcat>
c0018ed7:	83 c4 10             	add    esp,0x10
c0018eda:	83 ec 0c             	sub    esp,0xc
c0018edd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ee1:	50                   	push   eax
c0018ee2:	e8 87 df fe ff       	call   c0006e6e <f_setlabel>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018eee:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018ef3:	75 07                	jne    c0018efc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018ef5:	b8 00 00 00 00       	mov    eax,0x0
c0018efa:	eb 05                	jmp    c0018f01 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018efc:	b8 01 00 00 00       	mov    eax,0x1
c0018f01:	83 c4 58             	add    esp,0x58
c0018f04:	5f                   	pop    edi
c0018f05:	c3                   	ret    

c0018f06 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018f06:	83 ec 2c             	sub    esp,0x2c
c0018f09:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018f11:	83 ec 08             	sub    esp,0x8
c0018f14:	68 d4 a3 03 c0       	push   0xc003a3d4
c0018f19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f1d:	e8 e6 78 fe ff       	call   c0000808 <strcmp>
c0018f22:	83 c4 10             	add    esp,0x10
c0018f25:	85 c0                	test   eax,eax
c0018f27:	0f 94 c0             	sete   al
c0018f2a:	84 c0                	test   al,al
c0018f2c:	74 0d                	je     c0018f3b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018f2e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f36:	e9 a6 00 00 00       	jmp    c0018fe1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f3b:	83 ec 08             	sub    esp,0x8
c0018f3e:	68 c6 a3 03 c0       	push   0xc003a3c6
c0018f43:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f47:	e8 bc 78 fe ff       	call   c0000808 <strcmp>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	85 c0                	test   eax,eax
c0018f51:	0f 94 c0             	sete   al
c0018f54:	84 c0                	test   al,al
c0018f56:	74 0a                	je     c0018f62 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018f58:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f60:	eb 7f                	jmp    c0018fe1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f62:	83 ec 08             	sub    esp,0x8
c0018f65:	68 cc a3 03 c0       	push   0xc003a3cc
c0018f6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f6e:	e8 95 78 fe ff       	call   c0000808 <strcmp>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	85 c0                	test   eax,eax
c0018f78:	0f 94 c0             	sete   al
c0018f7b:	84 c0                	test   al,al
c0018f7d:	74 0a                	je     c0018f89 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018f7f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f87:	eb 58                	jmp    c0018fe1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f89:	83 ec 08             	sub    esp,0x8
c0018f8c:	68 ec f6 01 c0       	push   0xc001f6ec
c0018f91:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f95:	e8 6e 78 fe ff       	call   c0000808 <strcmp>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	85 c0                	test   eax,eax
c0018f9f:	0f 94 c0             	sete   al
c0018fa2:	84 c0                	test   al,al
c0018fa4:	74 0a                	je     c0018fb0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018fa6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018fae:	eb 31                	jmp    c0018fe1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fb0:	83 ec 08             	sub    esp,0x8
c0018fb3:	68 d2 a3 03 c0       	push   0xc003a3d2
c0018fb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fbc:	e8 47 78 fe ff       	call   c0000808 <strcmp>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	85 c0                	test   eax,eax
c0018fc6:	0f 94 c0             	sete   al
c0018fc9:	84 c0                	test   al,al
c0018fcb:	74 0a                	je     c0018fd7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018fcd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018fd5:	eb 0a                	jmp    c0018fe1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fd7:	b8 08 00 00 00       	mov    eax,0x8
c0018fdc:	e9 04 01 00 00       	jmp    c00190e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018fe1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018fe8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018fed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ff1:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0018ff8:	83 f8 ff             	cmp    eax,0xffffffff
c0018ffb:	75 34                	jne    c0019031 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018ffd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019001:	88 c2                	mov    dl,al
c0019003:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0019008:	01 d0                	add    eax,edx
c001900a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001900e:	8b 15 e0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6e0
c0019014:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019018:	89 14 85 00 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3900],edx
c001901f:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0019024:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019028:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c001902f:	eb 17                	jmp    c0019048 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019031:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019035:	88 c2                	mov    dl,al
c0019037:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001903b:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0019042:	01 d0                	add    eax,edx
c0019044:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019048:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001904c:	88 04 24             	mov    BYTE PTR [esp],al
c001904f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019053:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019057:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001905f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019064:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001906c:	83 ec 0c             	sub    esp,0xc
c001906f:	68 00 20 00 00       	push   0x2000
c0019074:	e8 6c 43 ff ff       	call   c000d3e5 <malloc>
c0019079:	83 c4 10             	add    esp,0x10
c001907c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019080:	68 00 20 00 00       	push   0x2000
c0019085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019089:	8d 44 24 08          	lea    eax,[esp+0x8]
c001908d:	50                   	push   eax
c001908e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019092:	50                   	push   eax
c0019093:	e8 21 e2 fe ff       	call   c00072b9 <f_mkfs>
c0019098:	83 c4 10             	add    esp,0x10
c001909b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001909f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00190a4:	75 07                	jne    c00190ad <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00190a6:	b8 00 00 00 00       	mov    eax,0x0
c00190ab:	eb 38                	jmp    c00190e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190ad:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00190b2:	75 17                	jne    c00190cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	68 04 a4 03 c0       	push   0xc003a404
c00190bc:	e8 29 3d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	b8 09 00 00 00       	mov    eax,0x9
c00190c9:	eb 1a                	jmp    c00190e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190cf:	83 ec 08             	sub    esp,0x8
c00190d2:	50                   	push   eax
c00190d3:	68 d8 a3 03 c0       	push   0xc003a3d8
c00190d8:	e8 0d 3d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	b8 01 00 00 00       	mov    eax,0x1
c00190e5:	83 c4 2c             	add    esp,0x2c
c00190e8:	c3                   	ret    
c00190e9:	90                   	nop

c00190ea <FAT::tryMount(LogicalDisk*, int)>:
c00190ea:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00190f0:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c00190f5:	83 f8 14             	cmp    eax,0x14
c00190f8:	75 17                	jne    c0019111 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	68 ea a3 03 c0       	push   0xc003a3ea
c0019102:	e8 01 3e ff ff       	call   c000cf08 <panic(char const*)>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	b0 00                	mov    al,0x0
c001910c:	e9 d7 01 00 00       	jmp    c00192e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019111:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019118:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001911e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019124:	3d 00 02 00 00       	cmp    eax,0x200
c0019129:	74 07                	je     c0019132 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001912b:	b0 00                	mov    al,0x0
c001912d:	e9 b6 01 00 00       	jmp    c00192e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019132:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001913a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019141:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c0019148:	83 f8 ff             	cmp    eax,0xffffffff
c001914b:	74 07                	je     c0019154 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001914d:	b0 01                	mov    al,0x1
c001914f:	e9 94 01 00 00       	jmp    c00192e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019154:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001915e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019166:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001916d:	88 c2                	mov    dl,al
c001916f:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0019174:	01 d0                	add    eax,edx
c0019176:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001917d:	8b 15 e0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6e0
c0019183:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001918a:	89 14 85 00 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3900],edx
c0019191:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c0019196:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001919d:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c00191a4:	83 ec 0c             	sub    esp,0xc
c00191a7:	68 54 02 00 00       	push   0x254
c00191ac:	e8 34 42 ff ff       	call   c000d3e5 <malloc>
c00191b1:	83 c4 10             	add    esp,0x10
c00191b4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00191bb:	83 ec 04             	sub    esp,0x4
c00191be:	6a 00                	push   0x0
c00191c0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00191c7:	50                   	push   eax
c00191c8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00191cf:	e8 a3 bc fe ff       	call   c0004e77 <f_mount>
c00191d4:	83 c4 10             	add    esp,0x10
c00191d7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00191de:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00191e6:	74 19                	je     c0019201 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00191e8:	83 ec 0c             	sub    esp,0xc
c00191eb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00191f2:	e8 0e 42 ff ff       	call   c000d405 <rfree>
c00191f7:	83 c4 10             	add    esp,0x10
c00191fa:	b0 00                	mov    al,0x0
c00191fc:	e9 e7 00 00 00       	jmp    c00192e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019201:	83 ec 04             	sub    esp,0x4
c0019204:	68 00 01 00 00       	push   0x100
c0019209:	6a 00                	push   0x0
c001920b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019212:	50                   	push   eax
c0019213:	e8 a8 74 fe ff       	call   c00006c0 <memset>
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	83 ec 08             	sub    esp,0x8
c001921e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019225:	50                   	push   eax
c0019226:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001922d:	50                   	push   eax
c001922e:	e8 89 76 fe ff       	call   c00008bc <strcat>
c0019233:	83 c4 10             	add    esp,0x10
c0019236:	83 ec 08             	sub    esp,0x8
c0019239:	68 f8 a3 03 c0       	push   0xc003a3f8
c001923e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019245:	50                   	push   eax
c0019246:	e8 71 76 fe ff       	call   c00008bc <strcat>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	83 ec 04             	sub    esp,0x4
c0019251:	6a 01                	push   0x1
c0019253:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001925a:	50                   	push   eax
c001925b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001925f:	50                   	push   eax
c0019260:	e8 74 bc fe ff       	call   c0004ed9 <f_open>
c0019265:	83 c4 10             	add    esp,0x10
c0019268:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001926f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019276:	85 c0                	test   eax,eax
c0019278:	74 0a                	je     c0019284 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001927a:	78 2d                	js     c00192a9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001927c:	83 e8 04             	sub    eax,0x4
c001927f:	83 f8 01             	cmp    eax,0x1
c0019282:	77 25                	ja     c00192a9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019284:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019293:	50                   	push   eax
c0019294:	e8 92 c7 fe ff       	call   c0005a2b <f_close>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	90                   	nop
c001929d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00192a5:	74 3a                	je     c00192e1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00192a7:	eb 2d                	jmp    c00192d6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00192a9:	83 ec 0c             	sub    esp,0xc
c00192ac:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192b3:	e8 4d 41 ff ff       	call   c000d405 <rfree>
c00192b8:	83 c4 10             	add    esp,0x10
c00192bb:	83 ec 04             	sub    esp,0x4
c00192be:	6a 00                	push   0x0
c00192c0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192c7:	50                   	push   eax
c00192c8:	6a 00                	push   0x0
c00192ca:	e8 a8 bb fe ff       	call   c0004e77 <f_mount>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	b0 00                	mov    al,0x0
c00192d4:	eb 12                	jmp    c00192e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192d6:	a1 e0 c6 03 c0       	mov    eax,ds:0xc003c6e0
c00192db:	40                   	inc    eax
c00192dc:	a3 e0 c6 03 c0       	mov    ds:0xc003c6e0,eax
c00192e1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00192e8:	81 c4 6c 03 00 00    	add    esp,0x36c
c00192ee:	c3                   	ret    
c00192ef:	90                   	nop

c00192f0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00192f0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00192f6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00192fe:	74 0a                	je     c001930a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019300:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019308:	75 0a                	jne    c0019314 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001930a:	b8 04 00 00 00       	mov    eax,0x4
c001930f:	e9 dc 00 00 00       	jmp    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019314:	83 ec 08             	sub    esp,0x8
c0019317:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001931e:	50                   	push   eax
c001931f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019326:	e8 0a cd fe ff       	call   c0006035 <f_readdir>
c001932b:	83 c4 10             	add    esp,0x10
c001932e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019335:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019346:	83 c0 1a             	add    eax,0x1a
c0019349:	50                   	push   eax
c001934a:	e8 8d 73 fe ff       	call   c00006dc <strlen>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	ba 00 00 00 00       	mov    edx,0x0
c0019357:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001935b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001935f:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019366:	0f b6 c0             	movzx  eax,al
c0019369:	83 e0 10             	and    eax,0x10
c001936c:	74 07                	je     c0019375 <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c001936e:	b8 02 00 00 00       	mov    eax,0x2
c0019373:	eb 05                	jmp    c001937a <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c0019375:	b8 01 00 00 00       	mov    eax,0x1
c001937a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001937e:	83 ec 08             	sub    esp,0x8
c0019381:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019388:	83 c0 1a             	add    eax,0x1a
c001938b:	50                   	push   eax
c001938c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019390:	83 c0 10             	add    eax,0x10
c0019393:	50                   	push   eax
c0019394:	e8 e3 73 fe ff       	call   c000077c <strcpy>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	83 ec 04             	sub    esp,0x4
c001939f:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00193a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193aa:	50                   	push   eax
c00193ab:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00193b2:	e8 bd 72 fe ff       	call   c0000674 <memcpy>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00193c1:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00193c7:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00193ce:	84 c0                	test   al,al
c00193d0:	75 07                	jne    c00193d9 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00193d2:	b8 07 00 00 00       	mov    eax,0x7
c00193d7:	eb 17                	jmp    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00193d9:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00193e0:	85 c0                	test   eax,eax
c00193e2:	75 07                	jne    c00193eb <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00193e4:	b8 00 00 00 00       	mov    eax,0x0
c00193e9:	eb 05                	jmp    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00193eb:	b8 01 00 00 00       	mov    eax,0x1
c00193f0:	81 c4 3c 02 00 00    	add    esp,0x23c
c00193f6:	c3                   	ret    
c00193f7:	90                   	nop

c00193f8 <FAT::read(void*, unsigned long, void*, int*)>:
c00193f8:	83 ec 1c             	sub    esp,0x1c
c00193fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019400:	74 07                	je     c0019409 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019402:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019407:	75 07                	jne    c0019410 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019409:	b8 04 00 00 00       	mov    eax,0x4
c001940e:	eb 3d                	jmp    c001944d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019410:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019414:	50                   	push   eax
c0019415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001941d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019421:	e8 ef be fe ff       	call   c0005315 <f_read>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001942d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019431:	89 c2                	mov    edx,eax
c0019433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019437:	89 10                	mov    DWORD PTR [eax],edx
c0019439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001943d:	85 c0                	test   eax,eax
c001943f:	75 07                	jne    c0019448 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019441:	b8 00 00 00 00       	mov    eax,0x0
c0019446:	eb 05                	jmp    c001944d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019448:	b8 01 00 00 00       	mov    eax,0x1
c001944d:	83 c4 1c             	add    esp,0x1c
c0019450:	c3                   	ret    
c0019451:	90                   	nop

c0019452 <FAT::write(void*, unsigned long, void*, int*)>:
c0019452:	83 ec 1c             	sub    esp,0x1c
c0019455:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001945a:	74 07                	je     c0019463 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001945c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019461:	75 07                	jne    c001946a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019463:	b8 04 00 00 00       	mov    eax,0x4
c0019468:	eb 3d                	jmp    c00194a7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001946a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001946e:	50                   	push   eax
c001946f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019473:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019477:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001947b:	e8 15 c1 fe ff       	call   c0005595 <f_write>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001948b:	89 c2                	mov    edx,eax
c001948d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019491:	89 10                	mov    DWORD PTR [eax],edx
c0019493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019497:	85 c0                	test   eax,eax
c0019499:	75 07                	jne    c00194a2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001949b:	b8 00 00 00 00       	mov    eax,0x0
c00194a0:	eb 05                	jmp    c00194a7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00194a2:	b8 01 00 00 00       	mov    eax,0x1
c00194a7:	83 c4 1c             	add    esp,0x1c
c00194aa:	c3                   	ret    
c00194ab:	90                   	nop

c00194ac <FAT::close(void*)>:
c00194ac:	83 ec 1c             	sub    esp,0x1c
c00194af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194b4:	75 07                	jne    c00194bd <FAT::close(void*)+0x11>
c00194b6:	b8 04 00 00 00       	mov    eax,0x4
c00194bb:	eb 36                	jmp    c00194f3 <FAT::close(void*)+0x47>
c00194bd:	83 ec 0c             	sub    esp,0xc
c00194c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194c4:	e8 62 c5 fe ff       	call   c0005a2b <f_close>
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194d7:	e8 19 3f ff ff       	call   c000d3f5 <free>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194e3:	85 c0                	test   eax,eax
c00194e5:	75 07                	jne    c00194ee <FAT::close(void*)+0x42>
c00194e7:	b8 00 00 00 00       	mov    eax,0x0
c00194ec:	eb 05                	jmp    c00194f3 <FAT::close(void*)+0x47>
c00194ee:	b8 01 00 00 00       	mov    eax,0x1
c00194f3:	83 c4 1c             	add    esp,0x1c
c00194f6:	c3                   	ret    
c00194f7:	90                   	nop

c00194f8 <FAT::closeDir(void*)>:
c00194f8:	83 ec 1c             	sub    esp,0x1c
c00194fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019500:	75 07                	jne    c0019509 <FAT::closeDir(void*)+0x11>
c0019502:	b8 04 00 00 00       	mov    eax,0x4
c0019507:	eb 36                	jmp    c001953f <FAT::closeDir(void*)+0x47>
c0019509:	83 ec 0c             	sub    esp,0xc
c001950c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019510:	e8 fe ca fe ff       	call   c0006013 <f_closedir>
c0019515:	83 c4 10             	add    esp,0x10
c0019518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019523:	e8 cd 3e ff ff       	call   c000d3f5 <free>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001952f:	85 c0                	test   eax,eax
c0019531:	75 07                	jne    c001953a <FAT::closeDir(void*)+0x42>
c0019533:	b8 00 00 00 00       	mov    eax,0x0
c0019538:	eb 05                	jmp    c001953f <FAT::closeDir(void*)+0x47>
c001953a:	b8 01 00 00 00       	mov    eax,0x1
c001953f:	83 c4 1c             	add    esp,0x1c
c0019542:	c3                   	ret    
c0019543:	90                   	nop

c0019544 <FAT::seek(void*, unsigned long long)>:
c0019544:	83 ec 2c             	sub    esp,0x2c
c0019547:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001954b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001954f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019557:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001955c:	75 07                	jne    c0019565 <FAT::seek(void*, unsigned long long)+0x21>
c001955e:	b8 04 00 00 00       	mov    eax,0x4
c0019563:	eb 2f                	jmp    c0019594 <FAT::seek(void*, unsigned long long)+0x50>
c0019565:	83 ec 04             	sub    esp,0x4
c0019568:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001956c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019570:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019574:	e8 e1 c4 fe ff       	call   c0005a5a <f_lseek>
c0019579:	83 c4 10             	add    esp,0x10
c001957c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019584:	85 c0                	test   eax,eax
c0019586:	75 07                	jne    c001958f <FAT::seek(void*, unsigned long long)+0x4b>
c0019588:	b8 00 00 00 00       	mov    eax,0x0
c001958d:	eb 05                	jmp    c0019594 <FAT::seek(void*, unsigned long long)+0x50>
c001958f:	b8 01 00 00 00       	mov    eax,0x1
c0019594:	83 c4 2c             	add    esp,0x2c
c0019597:	c3                   	ret    

c0019598 <fatWrapperReadDisk>:
c0019598:	83 ec 1c             	sub    esp,0x1c
c001959b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001959f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00195aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00195ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195b7:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c00195be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00195c2:	83 ec 0c             	sub    esp,0xc
c00195c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195c9:	52                   	push   edx
c00195ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195d2:	50                   	push   eax
c00195d3:	e8 8e bb ff ff       	call   c0015166 <LogicalDisk::read(unsigned long long, int, void*)>
c00195d8:	83 c4 20             	add    esp,0x20
c00195db:	83 c4 1c             	add    esp,0x1c
c00195de:	c3                   	ret    

c00195df <fatWrapperWriteDisk>:
c00195df:	83 ec 1c             	sub    esp,0x1c
c00195e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00195f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00195f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195f9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195fe:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c0019605:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019609:	83 ec 0c             	sub    esp,0xc
c001960c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019610:	52                   	push   edx
c0019611:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019619:	50                   	push   eax
c001961a:	e8 b3 bb ff ff       	call   c00151d2 <LogicalDisk::write(unsigned long long, int, void*)>
c001961f:	83 c4 20             	add    esp,0x20
c0019622:	83 c4 1c             	add    esp,0x1c
c0019625:	c3                   	ret    

c0019626 <fatWrapperIoctl>:
c0019626:	53                   	push   ebx
c0019627:	83 ec 28             	sub    esp,0x28
c001962a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001962e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019632:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019636:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001963a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001963f:	75 31                	jne    c0019672 <fatWrapperIoctl+0x4c>
c0019641:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019645:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019649:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001964e:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c0019655:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001965b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019661:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019665:	66 89 02             	mov    WORD PTR [edx],ax
c0019668:	b8 00 00 00 00       	mov    eax,0x0
c001966d:	e9 b2 00 00 00       	jmp    c0019724 <fatWrapperIoctl+0xfe>
c0019672:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019677:	75 6a                	jne    c00196e3 <fatWrapperIoctl+0xbd>
c0019679:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001967d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019681:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019686:	8b 04 85 80 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d80]
c001968d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019693:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019699:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001969f:	89 c8                	mov    eax,ecx
c00196a1:	89 da                	mov    edx,ebx
c00196a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196a7:	c1 e0 0a             	shl    eax,0xa
c00196aa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196af:	8b 0c 8d 80 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d80]
c00196b6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00196bc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00196c2:	89 cb                	mov    ebx,ecx
c00196c4:	c1 fb 1f             	sar    ebx,0x1f
c00196c7:	53                   	push   ebx
c00196c8:	51                   	push   ecx
c00196c9:	52                   	push   edx
c00196ca:	50                   	push   eax
c00196cb:	e8 6c 4f 00 00       	call   c001e63c <__udivdi3>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00196d7:	89 01                	mov    DWORD PTR [ecx],eax
c00196d9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00196dc:	b8 00 00 00 00       	mov    eax,0x0
c00196e1:	eb 41                	jmp    c0019724 <fatWrapperIoctl+0xfe>
c00196e3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00196e8:	75 07                	jne    c00196f1 <fatWrapperIoctl+0xcb>
c00196ea:	b8 00 00 00 00       	mov    eax,0x0
c00196ef:	eb 33                	jmp    c0019724 <fatWrapperIoctl+0xfe>
c00196f1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00196f6:	75 19                	jne    c0019711 <fatWrapperIoctl+0xeb>
c00196f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019700:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019704:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001970a:	b8 00 00 00 00       	mov    eax,0x0
c001970f:	eb 13                	jmp    c0019724 <fatWrapperIoctl+0xfe>
c0019711:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019716:	75 07                	jne    c001971f <fatWrapperIoctl+0xf9>
c0019718:	b8 00 00 00 00       	mov    eax,0x0
c001971d:	eb 05                	jmp    c0019724 <fatWrapperIoctl+0xfe>
c001971f:	b8 04 00 00 00       	mov    eax,0x4
c0019724:	83 c4 28             	add    esp,0x28
c0019727:	5b                   	pop    ebx
c0019728:	c3                   	ret    
c0019729:	90                   	nop

c001972a <FAT::FAT()>:
c001972a:	83 ec 1c             	sub    esp,0x1c
c001972d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	50                   	push   eax
c0019735:	e8 64 8e ff ff       	call   c001259e <Filesystem::Filesystem()>
c001973a:	83 c4 10             	add    esp,0x10
c001973d:	ba 34 a4 03 c0       	mov    edx,0xc003a434
c0019742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019746:	89 10                	mov    DWORD PTR [eax],edx
c0019748:	c7 05 e0 c6 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c6e0,0x0
c0019752:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001975a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001975f:	7f 15                	jg     c0019776 <FAT::FAT()+0x4c>
c0019761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019765:	c7 04 85 00 c7 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3900],0xffffffff
c0019770:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019774:	eb e4                	jmp    c001975a <FAT::FAT()+0x30>
c0019776:	90                   	nop
c0019777:	83 c4 1c             	add    esp,0x1c
c001977a:	c3                   	ret    
c001977b:	90                   	nop

c001977c <FAT::fixFilepath(char*)>:
c001977c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019780:	8a 00                	mov    al,BYTE PTR [eax]
c0019782:	3c 40                	cmp    al,0x40
c0019784:	7e 2c                	jle    c00197b2 <FAT::fixFilepath(char*)+0x36>
c0019786:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001978a:	8a 00                	mov    al,BYTE PTR [eax]
c001978c:	83 e8 41             	sub    eax,0x41
c001978f:	88 c2                	mov    dl,al
c0019791:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019795:	88 10                	mov    BYTE PTR [eax],dl
c0019797:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001979b:	8a 00                	mov    al,BYTE PTR [eax]
c001979d:	0f be c0             	movsx  eax,al
c00197a0:	8b 04 85 00 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3900]
c00197a7:	83 c0 30             	add    eax,0x30
c00197aa:	88 c2                	mov    dl,al
c00197ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b0:	88 10                	mov    BYTE PTR [eax],dl
c00197b2:	90                   	nop
c00197b3:	c3                   	ret    

c00197b4 <FAT::open(char const*, void**, FileOpenMode)>:
c00197b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197c2:	74 0a                	je     c00197ce <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00197c4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00197cc:	75 0a                	jne    c00197d8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00197ce:	b8 04 00 00 00       	mov    eax,0x4
c00197d3:	e9 fd 00 00 00       	jmp    c00198d5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00197d8:	83 ec 08             	sub    esp,0x8
c00197db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00197e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197e6:	50                   	push   eax
c00197e7:	e8 90 6f fe ff       	call   c000077c <strcpy>
c00197ec:	83 c4 10             	add    esp,0x10
c00197ef:	83 ec 08             	sub    esp,0x8
c00197f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00197f6:	50                   	push   eax
c00197f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00197fe:	e8 79 ff ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019803:	83 c4 10             	add    esp,0x10
c0019806:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001980e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019815:	83 e0 01             	and    eax,0x1
c0019818:	74 08                	je     c0019822 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001981a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019822:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019829:	83 e0 04             	and    eax,0x4
c001982c:	74 10                	je     c001983e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001982e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019836:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001983e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019845:	83 e0 02             	and    eax,0x2
c0019848:	74 08                	je     c0019852 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001984a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019852:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019859:	83 e0 08             	and    eax,0x8
c001985c:	74 08                	je     c0019866 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001985e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019866:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001986d:	83 e0 10             	and    eax,0x10
c0019870:	74 08                	je     c001987a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019872:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001987a:	83 ec 0c             	sub    esp,0xc
c001987d:	68 50 02 00 00       	push   0x250
c0019882:	e8 5e 3b ff ff       	call   c000d3e5 <malloc>
c0019887:	83 c4 10             	add    esp,0x10
c001988a:	89 c2                	mov    edx,eax
c001988c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019893:	89 10                	mov    DWORD PTR [eax],edx
c0019895:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001989d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00198a6:	83 ec 04             	sub    esp,0x4
c00198a9:	52                   	push   edx
c00198aa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00198ae:	52                   	push   edx
c00198af:	50                   	push   eax
c00198b0:	e8 24 b6 fe ff       	call   c0004ed9 <f_open>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00198bf:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00198c7:	74 07                	je     c00198d0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00198c9:	b8 01 00 00 00       	mov    eax,0x1
c00198ce:	eb 05                	jmp    c00198d5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00198d0:	b8 00 00 00 00       	mov    eax,0x0
c00198d5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198db:	c3                   	ret    

c00198dc <FAT::openDir(char const*, void**)>:
c00198dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198ea:	74 0a                	je     c00198f6 <FAT::openDir(char const*, void**)+0x1a>
c00198ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198f4:	75 07                	jne    c00198fd <FAT::openDir(char const*, void**)+0x21>
c00198f6:	b8 04 00 00 00       	mov    eax,0x4
c00198fb:	eb 7d                	jmp    c001997a <FAT::openDir(char const*, void**)+0x9e>
c00198fd:	83 ec 08             	sub    esp,0x8
c0019900:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019907:	8d 44 24 18          	lea    eax,[esp+0x18]
c001990b:	50                   	push   eax
c001990c:	e8 6b 6e fe ff       	call   c000077c <strcpy>
c0019911:	83 c4 10             	add    esp,0x10
c0019914:	83 ec 08             	sub    esp,0x8
c0019917:	8d 44 24 14          	lea    eax,[esp+0x14]
c001991b:	50                   	push   eax
c001991c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019923:	e8 54 fe ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	83 ec 0c             	sub    esp,0xc
c001992e:	6a 4c                	push   0x4c
c0019930:	e8 b0 3a ff ff       	call   c000d3e5 <malloc>
c0019935:	83 c4 10             	add    esp,0x10
c0019938:	89 c2                	mov    edx,eax
c001993a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019941:	89 10                	mov    DWORD PTR [eax],edx
c0019943:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001994a:	8b 00                	mov    eax,DWORD PTR [eax]
c001994c:	83 ec 08             	sub    esp,0x8
c001994f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019953:	52                   	push   edx
c0019954:	50                   	push   eax
c0019955:	e8 b7 c5 fe ff       	call   c0005f11 <f_opendir>
c001995a:	83 c4 10             	add    esp,0x10
c001995d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019964:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001996c:	74 07                	je     c0019975 <FAT::openDir(char const*, void**)+0x99>
c001996e:	b8 01 00 00 00       	mov    eax,0x1
c0019973:	eb 05                	jmp    c001997a <FAT::openDir(char const*, void**)+0x9e>
c0019975:	b8 00 00 00 00       	mov    eax,0x0
c001997a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019980:	c3                   	ret    
c0019981:	90                   	nop

c0019982 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019982:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019988:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019990:	75 0a                	jne    c001999c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019992:	b8 04 00 00 00       	mov    eax,0x4
c0019997:	e9 c9 00 00 00       	jmp    c0019a65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001999c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00199a4:	75 0a                	jne    c00199b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00199a6:	b8 04 00 00 00       	mov    eax,0x4
c00199ab:	e9 b5 00 00 00       	jmp    c0019a65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199b0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00199b8:	75 0a                	jne    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00199ba:	b8 04 00 00 00       	mov    eax,0x4
c00199bf:	e9 a1 00 00 00       	jmp    c0019a65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199c4:	83 ec 08             	sub    esp,0x8
c00199c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199d5:	50                   	push   eax
c00199d6:	e8 a1 6d fe ff       	call   c000077c <strcpy>
c00199db:	83 c4 10             	add    esp,0x10
c00199de:	83 ec 08             	sub    esp,0x8
c00199e1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00199e8:	50                   	push   eax
c00199e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199f0:	e8 87 fd ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c00199f5:	83 c4 10             	add    esp,0x10
c00199f8:	83 ec 08             	sub    esp,0x8
c00199fb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199ff:	50                   	push   eax
c0019a00:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a07:	50                   	push   eax
c0019a08:	e8 c3 c6 fe ff       	call   c00060d0 <f_stat>
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a17:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	74 07                	je     c0019a29 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019a22:	83 f8 04             	cmp    eax,0x4
c0019a25:	74 32                	je     c0019a59 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019a27:	eb 37                	jmp    c0019a60 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019a29:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a2d:	0f b6 c0             	movzx  eax,al
c0019a30:	83 e0 10             	and    eax,0x10
c0019a33:	0f 95 c2             	setne  dl
c0019a36:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a3d:	88 10                	mov    BYTE PTR [eax],dl
c0019a3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019a42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a46:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a4d:	89 01                	mov    DWORD PTR [ecx],eax
c0019a4f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a52:	b8 00 00 00 00       	mov    eax,0x0
c0019a57:	eb 0c                	jmp    c0019a65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a59:	b8 02 00 00 00       	mov    eax,0x2
c0019a5e:	eb 05                	jmp    c0019a65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a60:	b8 01 00 00 00       	mov    eax,0x1
c0019a65:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a6b:	c3                   	ret    

c0019a6c <FAT::unlink(char const*)>:
c0019a6c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a72:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a7a:	75 07                	jne    c0019a83 <FAT::unlink(char const*)+0x17>
c0019a7c:	b8 04 00 00 00       	mov    eax,0x4
c0019a81:	eb 5c                	jmp    c0019adf <FAT::unlink(char const*)+0x73>
c0019a83:	83 ec 08             	sub    esp,0x8
c0019a86:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a91:	50                   	push   eax
c0019a92:	e8 e5 6c fe ff       	call   c000077c <strcpy>
c0019a97:	83 c4 10             	add    esp,0x10
c0019a9a:	83 ec 08             	sub    esp,0x8
c0019a9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019aa1:	50                   	push   eax
c0019aa2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019aa9:	e8 ce fc ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019aae:	83 c4 10             	add    esp,0x10
c0019ab1:	83 ec 0c             	sub    esp,0xc
c0019ab4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ab8:	50                   	push   eax
c0019ab9:	e8 64 c9 fe ff       	call   c0006422 <f_unlink>
c0019abe:	83 c4 10             	add    esp,0x10
c0019ac1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ac8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019acf:	85 c0                	test   eax,eax
c0019ad1:	75 07                	jne    c0019ada <FAT::unlink(char const*)+0x6e>
c0019ad3:	b8 00 00 00 00       	mov    eax,0x0
c0019ad8:	eb 05                	jmp    c0019adf <FAT::unlink(char const*)+0x73>
c0019ada:	b8 01 00 00 00       	mov    eax,0x1
c0019adf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ae5:	c3                   	ret    

c0019ae6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ae6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019aec:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019af3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019afa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019afe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b02:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b0a:	75 0a                	jne    c0019b16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019b0c:	b8 04 00 00 00       	mov    eax,0x4
c0019b11:	e9 1c 01 00 00       	jmp    c0019c32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b16:	83 ec 08             	sub    esp,0x8
c0019b19:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b20:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b24:	50                   	push   eax
c0019b25:	e8 52 6c fe ff       	call   c000077c <strcpy>
c0019b2a:	83 c4 10             	add    esp,0x10
c0019b2d:	83 ec 08             	sub    esp,0x8
c0019b30:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b34:	50                   	push   eax
c0019b35:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b3c:	e8 3b fc ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b4c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b59:	83 e0 01             	and    eax,0x1
c0019b5c:	74 08                	je     c0019b66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019b5e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019b66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b6b:	83 e0 02             	and    eax,0x2
c0019b6e:	74 08                	je     c0019b78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019b70:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b7d:	83 e0 04             	and    eax,0x4
c0019b80:	74 08                	je     c0019b8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019b82:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019b8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b8f:	83 e0 08             	and    eax,0x8
c0019b92:	74 08                	je     c0019b9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019b94:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019b9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ba1:	83 e0 01             	and    eax,0x1
c0019ba4:	74 08                	je     c0019bae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019ba6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019bae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bb3:	83 e0 02             	and    eax,0x2
c0019bb6:	74 08                	je     c0019bc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019bb8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019bc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bc5:	83 e0 04             	and    eax,0x4
c0019bc8:	74 08                	je     c0019bd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019bca:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019bd2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bd7:	83 e0 08             	and    eax,0x8
c0019bda:	74 08                	je     c0019be4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019bdc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019be4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019beb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019bf2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019bfa:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c02:	83 ec 04             	sub    esp,0x4
c0019c05:	52                   	push   edx
c0019c06:	50                   	push   eax
c0019c07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c0b:	50                   	push   eax
c0019c0c:	e8 b3 ce fe ff       	call   c0006ac4 <f_chmod>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c1b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c22:	85 c0                	test   eax,eax
c0019c24:	75 07                	jne    c0019c2d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019c26:	b8 00 00 00 00       	mov    eax,0x0
c0019c2b:	eb 05                	jmp    c0019c32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019c2d:	b8 01 00 00 00       	mov    eax,0x1
c0019c32:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c38:	c3                   	ret    
c0019c39:	90                   	nop

c0019c3a <FAT::rename(char const*, char const*)>:
c0019c3a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c40:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c48:	74 0a                	je     c0019c54 <FAT::rename(char const*, char const*)+0x1a>
c0019c4a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c52:	75 0a                	jne    c0019c5e <FAT::rename(char const*, char const*)+0x24>
c0019c54:	b8 04 00 00 00       	mov    eax,0x4
c0019c59:	e9 98 00 00 00       	jmp    c0019cf6 <FAT::rename(char const*, char const*)+0xbc>
c0019c5e:	83 ec 08             	sub    esp,0x8
c0019c61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c68:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c6f:	50                   	push   eax
c0019c70:	e8 07 6b fe ff       	call   c000077c <strcpy>
c0019c75:	83 c4 10             	add    esp,0x10
c0019c78:	83 ec 08             	sub    esp,0x8
c0019c7b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c82:	50                   	push   eax
c0019c83:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c8a:	e8 ed fa ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019c8f:	83 c4 10             	add    esp,0x10
c0019c92:	83 ec 08             	sub    esp,0x8
c0019c95:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ca0:	50                   	push   eax
c0019ca1:	e8 d6 6a fe ff       	call   c000077c <strcpy>
c0019ca6:	83 c4 10             	add    esp,0x10
c0019ca9:	83 ec 08             	sub    esp,0x8
c0019cac:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cb0:	50                   	push   eax
c0019cb1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cb8:	e8 bf fa ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	83 ec 08             	sub    esp,0x8
c0019cc3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cc7:	50                   	push   eax
c0019cc8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ccf:	50                   	push   eax
c0019cd0:	e8 fc ca fe ff       	call   c00067d1 <f_rename>
c0019cd5:	83 c4 10             	add    esp,0x10
c0019cd8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019cdf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019ce6:	85 c0                	test   eax,eax
c0019ce8:	75 07                	jne    c0019cf1 <FAT::rename(char const*, char const*)+0xb7>
c0019cea:	b8 00 00 00 00       	mov    eax,0x0
c0019cef:	eb 05                	jmp    c0019cf6 <FAT::rename(char const*, char const*)+0xbc>
c0019cf1:	b8 01 00 00 00       	mov    eax,0x1
c0019cf6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cfc:	c3                   	ret    
c0019cfd:	90                   	nop

c0019cfe <FAT::mkdir(char const*)>:
c0019cfe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d04:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d0c:	75 07                	jne    c0019d15 <FAT::mkdir(char const*)+0x17>
c0019d0e:	b8 04 00 00 00       	mov    eax,0x4
c0019d13:	eb 5c                	jmp    c0019d71 <FAT::mkdir(char const*)+0x73>
c0019d15:	83 ec 08             	sub    esp,0x8
c0019d18:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d23:	50                   	push   eax
c0019d24:	e8 53 6a fe ff       	call   c000077c <strcpy>
c0019d29:	83 c4 10             	add    esp,0x10
c0019d2c:	83 ec 08             	sub    esp,0x8
c0019d2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d33:	50                   	push   eax
c0019d34:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d3b:	e8 3c fa ff ff       	call   c001977c <FAT::fixFilepath(char*)>
c0019d40:	83 c4 10             	add    esp,0x10
c0019d43:	83 ec 0c             	sub    esp,0xc
c0019d46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d4a:	50                   	push   eax
c0019d4b:	e8 55 c8 fe ff       	call   c00065a5 <f_mkdir>
c0019d50:	83 c4 10             	add    esp,0x10
c0019d53:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d5a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d61:	85 c0                	test   eax,eax
c0019d63:	75 07                	jne    c0019d6c <FAT::mkdir(char const*)+0x6e>
c0019d65:	b8 00 00 00 00       	mov    eax,0x0
c0019d6a:	eb 05                	jmp    c0019d71 <FAT::mkdir(char const*)+0x73>
c0019d6c:	b8 01 00 00 00       	mov    eax,0x1
c0019d71:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d77:	c3                   	ret    

c0019d78 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019d78:	b8 08 00 00 00       	mov    eax,0x8
c0019d7d:	c3                   	ret    

c0019d7e <ISO9660::seek(void*, unsigned long long)>:
c0019d7e:	53                   	push   ebx
c0019d7f:	b8 04 00 00 00       	mov    eax,0x4
c0019d84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019d90:	85 d2                	test   edx,edx
c0019d92:	74 17                	je     c0019dab <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019d94:	89 c8                	mov    eax,ecx
c0019d96:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019d99:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019d9c:	b8 01 00 00 00       	mov    eax,0x1
c0019da1:	73 08                	jae    c0019dab <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019da3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019da6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019da9:	31 c0                	xor    eax,eax
c0019dab:	5b                   	pop    ebx
c0019dac:	c3                   	ret    
c0019dad:	90                   	nop

c0019dae <ISO9660::tell(void*, unsigned long long*)>:
c0019dae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019db6:	85 d2                	test   edx,edx
c0019db8:	74 12                	je     c0019dcc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019dba:	85 c0                	test   eax,eax
c0019dbc:	74 0e                	je     c0019dcc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019dbe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dc1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019dc4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019dc7:	89 10                	mov    DWORD PTR [eax],edx
c0019dc9:	31 c0                	xor    eax,eax
c0019dcb:	c3                   	ret    
c0019dcc:	b8 04 00 00 00       	mov    eax,0x4
c0019dd1:	c3                   	ret    

c0019dd2 <ISO9660::getName()>:
c0019dd2:	b8 90 a4 03 c0       	mov    eax,0xc003a490
c0019dd7:	c3                   	ret    

c0019dd8 <ISO9660::stat(void*, unsigned long long*)>:
c0019dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019de0:	85 d2                	test   edx,edx
c0019de2:	74 12                	je     c0019df6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019de4:	85 c0                	test   eax,eax
c0019de6:	74 0e                	je     c0019df6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019de8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019deb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019dee:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019df1:	89 10                	mov    DWORD PTR [eax],edx
c0019df3:	31 c0                	xor    eax,eax
c0019df5:	c3                   	ret    
c0019df6:	b8 04 00 00 00       	mov    eax,0x4
c0019dfb:	c3                   	ret    

c0019dfc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019dfc:	b8 01 00 00 00       	mov    eax,0x1
c0019e01:	c3                   	ret    

c0019e02 <ISO9660::unlink(char const*)>:
c0019e02:	b8 01 00 00 00       	mov    eax,0x1
c0019e07:	c3                   	ret    

c0019e08 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e08:	b8 01 00 00 00       	mov    eax,0x1
c0019e0d:	c3                   	ret    

c0019e0e <ISO9660::rename(char const*, char const*)>:
c0019e0e:	b8 01 00 00 00       	mov    eax,0x1
c0019e13:	c3                   	ret    

c0019e14 <ISO9660::mkdir(char const*)>:
c0019e14:	b8 01 00 00 00       	mov    eax,0x1
c0019e19:	c3                   	ret    

c0019e1a <ISO9660::close(void*)>:
c0019e1a:	83 ec 0c             	sub    esp,0xc
c0019e1d:	b8 04 00 00 00       	mov    eax,0x4
c0019e22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e26:	85 d2                	test   edx,edx
c0019e28:	74 0e                	je     c0019e38 <ISO9660::close(void*)+0x1e>
c0019e2a:	83 ec 0c             	sub    esp,0xc
c0019e2d:	52                   	push   edx
c0019e2e:	e8 c2 35 ff ff       	call   c000d3f5 <free>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	31 c0                	xor    eax,eax
c0019e38:	83 c4 0c             	add    esp,0xc
c0019e3b:	c3                   	ret    

c0019e3c <ISO9660::closeDir(void*)>:
c0019e3c:	83 ec 0c             	sub    esp,0xc
c0019e3f:	b8 04 00 00 00       	mov    eax,0x4
c0019e44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e48:	85 d2                	test   edx,edx
c0019e4a:	74 0e                	je     c0019e5a <ISO9660::closeDir(void*)+0x1e>
c0019e4c:	83 ec 0c             	sub    esp,0xc
c0019e4f:	52                   	push   edx
c0019e50:	e8 a0 35 ff ff       	call   c000d3f5 <free>
c0019e55:	83 c4 10             	add    esp,0x10
c0019e58:	31 c0                	xor    eax,eax
c0019e5a:	83 c4 0c             	add    esp,0xc
c0019e5d:	c3                   	ret    

c0019e5e <ISO9660::~ISO9660()>:
c0019e5e:	83 ec 0c             	sub    esp,0xc
c0019e61:	ba e4 a4 03 c0       	mov    edx,0xc003a4e4
c0019e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e6a:	89 10                	mov    DWORD PTR [eax],edx
c0019e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	50                   	push   eax
c0019e74:	e8 49 87 ff ff       	call   c00125c2 <Filesystem::~Filesystem()>
c0019e79:	83 c4 10             	add    esp,0x10
c0019e7c:	90                   	nop
c0019e7d:	83 c4 0c             	add    esp,0xc
c0019e80:	c3                   	ret    
c0019e81:	90                   	nop

c0019e82 <ISO9660::~ISO9660()>:
c0019e82:	83 ec 0c             	sub    esp,0xc
c0019e85:	83 ec 0c             	sub    esp,0xc
c0019e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e8c:	e8 cd ff ff ff       	call   c0019e5e <ISO9660::~ISO9660()>
c0019e91:	83 c4 10             	add    esp,0x10
c0019e94:	83 ec 08             	sub    esp,0x8
c0019e97:	6a 08                	push   0x8
c0019e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e9d:	e8 07 85 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c0019ea2:	83 c4 10             	add    esp,0x10
c0019ea5:	83 c4 0c             	add    esp,0xc
c0019ea8:	c3                   	ret    

c0019ea9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019ea9:	55                   	push   ebp
c0019eaa:	31 c9                	xor    ecx,ecx
c0019eac:	57                   	push   edi
c0019ead:	56                   	push   esi
c0019eae:	53                   	push   ebx
c0019eaf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019eb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019eb7:	89 eb                	mov    ebx,ebp
c0019eb9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019ebd:	39 ce                	cmp    esi,ecx
c0019ebf:	7e 17                	jle    c0019ed8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019ec1:	31 d2                	xor    edx,edx
c0019ec3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019ec7:	7d 13                	jge    c0019edc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019ec9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ecd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019ed0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019ed3:	75 0d                	jne    c0019ee2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019ed5:	42                   	inc    edx
c0019ed6:	eb eb                	jmp    c0019ec3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019ed8:	31 c0                	xor    eax,eax
c0019eda:	eb 0a                	jmp    c0019ee6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019edc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019ee0:	eb 04                	jmp    c0019ee6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019ee2:	41                   	inc    ecx
c0019ee3:	43                   	inc    ebx
c0019ee4:	eb d7                	jmp    c0019ebd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019ee6:	5b                   	pop    ebx
c0019ee7:	5e                   	pop    esi
c0019ee8:	5f                   	pop    edi
c0019ee9:	5d                   	pop    ebp
c0019eea:	c3                   	ret    

c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019eeb:	56                   	push   esi
c0019eec:	53                   	push   ebx
c0019eed:	52                   	push   edx
c0019eee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ef2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ef6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019efa:	39 0d e0 c7 03 c0    	cmp    DWORD PTR ds:0xc003c7e0,ecx
c0019f00:	75 08                	jne    c0019f0a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019f02:	38 05 44 b3 03 c0    	cmp    BYTE PTR ds:0xc003b344,al
c0019f08:	74 2b                	je     c0019f35 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019f0a:	83 ec 0c             	sub    esp,0xc
c0019f0d:	a2 44 b3 03 c0       	mov    ds:0xc003b344,al
c0019f12:	68 00 c8 03 c0       	push   0xc003c800
c0019f17:	0f be c0             	movsx  eax,al
c0019f1a:	6a 01                	push   0x1
c0019f1c:	89 0d e0 c7 03 c0    	mov    DWORD PTR ds:0xc003c7e0,ecx
c0019f22:	31 db                	xor    ebx,ebx
c0019f24:	53                   	push   ebx
c0019f25:	51                   	push   ecx
c0019f26:	ff 34 85 7c c1 03 c0 	push   DWORD PTR [eax*4-0x3ffc3e84]
c0019f2d:	e8 34 b2 ff ff       	call   c0015166 <LogicalDisk::read(unsigned long long, int, void*)>
c0019f32:	83 c4 20             	add    esp,0x20
c0019f35:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019f3d:	c7 44 24 14 00 c8 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c800
c0019f45:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019f49:	58                   	pop    eax
c0019f4a:	5b                   	pop    ebx
c0019f4b:	5e                   	pop    esi
c0019f4c:	e9 23 67 fe ff       	jmp    c0000674 <memcpy>
c0019f51:	90                   	nop

c0019f52 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019f52:	81 ec 10 08 00 00    	sub    esp,0x810
c0019f58:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019f5f:	83 c0 41             	add    eax,0x41
c0019f62:	0f be c0             	movsx  eax,al
c0019f65:	50                   	push   eax
c0019f66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f6a:	50                   	push   eax
c0019f6b:	6a 10                	push   0x10
c0019f6d:	e8 79 ff ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f72:	83 c4 10             	add    esp,0x10
c0019f75:	31 c0                	xor    eax,eax
c0019f77:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019f7c:	75 1d                	jne    c0019f9b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019f7e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019f83:	75 16                	jne    c0019f9b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019f85:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019f8a:	75 0f                	jne    c0019f9b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019f8c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019f91:	75 08                	jne    c0019f9b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019f93:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019f98:	0f 94 c0             	sete   al
c0019f9b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019fa1:	c3                   	ret    

c0019fa2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019fa2:	55                   	push   ebp
c0019fa3:	57                   	push   edi
c0019fa4:	56                   	push   esi
c0019fa5:	53                   	push   ebx
c0019fa6:	81 ec 34 08 00 00    	sub    esp,0x834
c0019fac:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019fb3:	55                   	push   ebp
c0019fb4:	68 ab a4 03 c0       	push   0xc003a4ab
c0019fb9:	e8 2c 2e ff ff       	call   c000cdea <kprintf(char const*, ...)>
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019fc9:	0f 84 06 02 00 00    	je     c001a1d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019fcf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019fd7:	0f 84 f8 01 00 00    	je     c001a1d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019fdd:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019fe4:	b8 01 00 00 00       	mov    eax,0x1
c0019fe9:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019fed:	0f 85 e7 01 00 00    	jne    c001a1da <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019ff3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019ff6:	31 d2                	xor    edx,edx
c0019ff8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019ffb:	89 e9                	mov    ecx,ebp
c0019ffd:	89 d3                	mov    ebx,edx
c0019fff:	01 f1                	add    ecx,esi
c001a001:	11 fb                	adc    ebx,edi
c001a003:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a007:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a00b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a012:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a015:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a018:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a01c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a020:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a024:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a028:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a02c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a030:	72 19                	jb     c001a04b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a032:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a049:	eb 13                	jmp    c001a05e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a04b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a04f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a053:	29 f0                	sub    eax,esi
c001a055:	19 fa                	sbb    edx,edi
c001a057:	89 04 24             	mov    DWORD PTR [esp],eax
c001a05a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a05e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a065:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a068:	8b 00                	mov    eax,DWORD PTR [eax]
c001a06a:	53                   	push   ebx
c001a06b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a06f:	c1 e0 0b             	shl    eax,0xb
c001a072:	01 c6                	add    esi,eax
c001a074:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a07b:	11 d7                	adc    edi,edx
c001a07d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a081:	89 fa                	mov    edx,edi
c001a083:	50                   	push   eax
c001a084:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a088:	50                   	push   eax
c001a089:	89 f0                	mov    eax,esi
c001a08b:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a08f:	50                   	push   eax
c001a090:	e8 56 fe ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a095:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a09c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a0a3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a0a7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	b8 00 08 00 00       	mov    eax,0x800
c001a0b5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a0b9:	29 d0                	sub    eax,edx
c001a0bb:	39 c1                	cmp    ecx,eax
c001a0bd:	83 db 00             	sbb    ebx,0x0
c001a0c0:	7d 19                	jge    c001a0db <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a0c2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a0c7:	75 16                	jne    c001a0df <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a0c9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a0d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a0d6:	e9 f6 00 00 00       	jmp    c001a1d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a0db:	89 c5                	mov    ebp,eax
c001a0dd:	eb 03                	jmp    c001a0e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a0df:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a0e2:	51                   	push   ecx
c001a0e3:	55                   	push   ebp
c001a0e4:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a0e8:	50                   	push   eax
c001a0e9:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a0f0:	e8 7f 65 fe ff       	call   c0000674 <memcpy>
c001a0f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0fd:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a104:	01 e8                	add    eax,ebp
c001a106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a10a:	89 e8                	mov    eax,ebp
c001a10c:	99                   	cdq    
c001a10d:	01 ee                	add    esi,ebp
c001a10f:	11 d7                	adc    edi,edx
c001a111:	29 e9                	sub    ecx,ebp
c001a113:	19 d3                	sbb    ebx,edx
c001a115:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a119:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a125:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a128:	b8 00 00 00 00       	mov    eax,0x0
c001a12d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a131:	7d 3f                	jge    c001a172 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a133:	52                   	push   edx
c001a134:	89 fa                	mov    edx,edi
c001a136:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a13d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a141:	50                   	push   eax
c001a142:	89 f0                	mov    eax,esi
c001a144:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a148:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a14c:	50                   	push   eax
c001a14d:	e8 99 fd ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a152:	81 c6 00 08 00 00    	add    esi,0x800
c001a158:	83 d7 00             	adc    edi,0x0
c001a15b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a163:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a16b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a170:	eb ab                	jmp    c001a11d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a176:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a179:	74 34                	je     c001a1af <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a17b:	89 fa                	mov    edx,edi
c001a17d:	50                   	push   eax
c001a17e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a185:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a189:	50                   	push   eax
c001a18a:	89 f0                	mov    eax,esi
c001a18c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a190:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a194:	55                   	push   ebp
c001a195:	50                   	push   eax
c001a196:	e8 50 fd ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a19b:	83 c4 0c             	add    esp,0xc
c001a19e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a1a2:	55                   	push   ebp
c001a1a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1a7:	e8 c8 64 fe ff       	call   c0000674 <memcpy>
c001a1ac:	83 c4 10             	add    esp,0x10
c001a1af:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a1b6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a1ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1be:	89 38                	mov    DWORD PTR [eax],edi
c001a1c0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a1c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1cb:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a1ce:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a1d1:	31 c0                	xor    eax,eax
c001a1d3:	eb 05                	jmp    c001a1da <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a1d5:	b8 04 00 00 00       	mov    eax,0x4
c001a1da:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a1e0:	5b                   	pop    ebx
c001a1e1:	5e                   	pop    esi
c001a1e2:	5f                   	pop    edi
c001a1e3:	5d                   	pop    ebp
c001a1e4:	c3                   	ret    
c001a1e5:	90                   	nop

c001a1e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a1e6:	55                   	push   ebp
c001a1e7:	57                   	push   edi
c001a1e8:	56                   	push   esi
c001a1e9:	53                   	push   ebx
c001a1ea:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a1f0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a1f7:	85 f6                	test   esi,esi
c001a1f9:	0f 84 65 02 00 00    	je     c001a464 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a1ff:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a207:	0f 84 57 02 00 00    	je     c001a464 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a20d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a210:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a213:	75 0a                	jne    c001a21f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a215:	b8 07 00 00 00       	mov    eax,0x7
c001a21a:	e9 4a 02 00 00       	jmp    c001a469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a21f:	50                   	push   eax
c001a220:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a224:	50                   	push   eax
c001a225:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a22c:	53                   	push   ebx
c001a22d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a22f:	c1 e0 0b             	shl    eax,0xb
c001a232:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a235:	c1 e8 0b             	shr    eax,0xb
c001a238:	50                   	push   eax
c001a239:	e8 ad fc ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a23e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	89 c1                	mov    ecx,eax
c001a246:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a249:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a24f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a252:	84 db                	test   bl,bl
c001a254:	0f 85 90 00 00 00    	jne    c001a2ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a25a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a260:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a266:	29 c7                	sub    edi,eax
c001a268:	89 fb                	mov    ebx,edi
c001a26a:	c1 fb 1f             	sar    ebx,0x1f
c001a26d:	01 f8                	add    eax,edi
c001a26f:	11 da                	adc    edx,ebx
c001a271:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a275:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a279:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a27c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a27f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a282:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a285:	89 04 24             	mov    DWORD PTR [esp],eax
c001a288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a28c:	89 d8                	mov    eax,ebx
c001a28e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a291:	ba 00 00 00 00       	mov    edx,0x0
c001a296:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a29a:	b8 00 00 00 00       	mov    eax,0x0
c001a29f:	73 0b                	jae    c001a2ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a2a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a2a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2a8:	29 f8                	sub    eax,edi
c001a2aa:	19 da                	sbb    edx,ebx
c001a2ac:	89 d3                	mov    ebx,edx
c001a2ae:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a2b1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a2b4:	09 c3                	or     ebx,eax
c001a2b6:	0f 84 59 ff ff ff    	je     c001a215 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a2bc:	55                   	push   ebp
c001a2bd:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a2c1:	50                   	push   eax
c001a2c2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a2c9:	53                   	push   ebx
c001a2ca:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2cc:	c1 e0 0b             	shl    eax,0xb
c001a2cf:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a2d3:	c1 e8 0b             	shr    eax,0xb
c001a2d6:	50                   	push   eax
c001a2d7:	e8 0f fc ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	25 ff 07 00 00       	and    eax,0x7ff
c001a2e7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a2ea:	57                   	push   edi
c001a2eb:	6a 28                	push   0x28
c001a2ed:	6a 00                	push   0x0
c001a2ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2f3:	50                   	push   eax
c001a2f4:	e8 c7 63 fe ff       	call   c00006c0 <memset>
c001a2f9:	31 d2                	xor    edx,edx
c001a2fb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a2fe:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a304:	89 f8                	mov    eax,edi
c001a306:	83 c0 21             	add    eax,0x21
c001a309:	83 d2 00             	adc    edx,0x0
c001a30c:	89 c7                	mov    edi,eax
c001a30e:	89 d5                	mov    ebp,edx
c001a310:	83 c4 10             	add    esp,0x10
c001a313:	31 c9                	xor    ecx,ecx
c001a315:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a31c:	83 f9 28             	cmp    ecx,0x28
c001a31f:	88 04 24             	mov    BYTE PTR [esp],al
c001a322:	0f 94 c2             	sete   dl
c001a325:	88 d0                	mov    al,dl
c001a327:	ba ff 07 00 00       	mov    edx,0x7ff
c001a32c:	39 fa                	cmp    edx,edi
c001a32e:	ba 00 00 00 00       	mov    edx,0x0
c001a333:	19 ea                	sbb    edx,ebp
c001a335:	0f 92 c2             	setb   dl
c001a338:	09 c2                	or     edx,eax
c001a33a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a33e:	0f 94 c0             	sete   al
c001a341:	08 d0                	or     al,dl
c001a343:	75 16                	jne    c001a35b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a345:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a349:	74 10                	je     c001a35b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a34b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a34e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a352:	41                   	inc    ecx
c001a353:	83 c7 01             	add    edi,0x1
c001a356:	83 d5 00             	adc    ebp,0x0
c001a359:	eb ba                	jmp    c001a315 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a35b:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a363:	83 ec 0c             	sub    esp,0xc
c001a366:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a36a:	57                   	push   edi
c001a36b:	e8 6c 63 fe ff       	call   c00006dc <strlen>
c001a370:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a378:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a37c:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a383:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a386:	5a                   	pop    edx
c001a387:	25 ff 07 00 00       	and    eax,0x7ff
c001a38c:	01 c8                	add    eax,ecx
c001a38e:	59                   	pop    ecx
c001a38f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a395:	83 e0 02             	and    eax,0x2
c001a398:	3c 01                	cmp    al,0x1
c001a39a:	19 c0                	sbb    eax,eax
c001a39c:	83 c0 02             	add    eax,0x2
c001a39f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a3a3:	57                   	push   edi
c001a3a4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a3a8:	50                   	push   eax
c001a3a9:	e8 ce 63 fe ff       	call   c000077c <strcpy>
c001a3ae:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	84 c0                	test   al,al
c001a3b7:	75 21                	jne    c001a3da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a3b9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a3c1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a3c9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a3d1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a3d8:	eb 28                	jmp    c001a402 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a3da:	fe c8                	dec    al
c001a3dc:	75 24                	jne    c001a402 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a3de:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a3e6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a3ee:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a3f6:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a3fd:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a402:	0f b6 fb             	movzx  edi,bl
c001a405:	31 db                	xor    ebx,ebx
c001a407:	50                   	push   eax
c001a408:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a40f:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a413:	50                   	push   eax
c001a414:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a41b:	e8 54 62 fe ff       	call   c0000674 <memcpy>
c001a420:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a427:	89 f9                	mov    ecx,edi
c001a429:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a42f:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a432:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a435:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a438:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a43b:	83 c4 10             	add    esp,0x10
c001a43e:	39 c7                	cmp    edi,eax
c001a440:	89 df                	mov    edi,ebx
c001a442:	19 d7                	sbb    edi,edx
c001a444:	72 10                	jb     c001a456 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a446:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a44d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a454:	eb 0a                	jmp    c001a460 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a456:	29 c8                	sub    eax,ecx
c001a458:	19 da                	sbb    edx,ebx
c001a45a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a45d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a460:	31 c0                	xor    eax,eax
c001a462:	eb 05                	jmp    c001a469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a464:	b8 04 00 00 00       	mov    eax,0x4
c001a469:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a46f:	5b                   	pop    ebx
c001a470:	5e                   	pop    esi
c001a471:	5f                   	pop    edi
c001a472:	5d                   	pop    ebp
c001a473:	c3                   	ret    

c001a474 <readRoot(unsigned int*, unsigned int*, char)>:
c001a474:	81 ec 40 08 00 00    	sub    esp,0x840
c001a47a:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a482:	50                   	push   eax
c001a483:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a487:	50                   	push   eax
c001a488:	6a 10                	push   0x10
c001a48a:	e8 5c fa ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a48f:	83 c4 0c             	add    esp,0xc
c001a492:	6a 22                	push   0x22
c001a494:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a49b:	50                   	push   eax
c001a49c:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a4a0:	50                   	push   eax
c001a4a1:	e8 ce 61 fe ff       	call   c0000674 <memcpy>
c001a4a6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a4ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a4b1:	89 10                	mov    DWORD PTR [eax],edx
c001a4b3:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a4ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4be:	89 10                	mov    DWORD PTR [eax],edx
c001a4c0:	b0 01                	mov    al,0x1
c001a4c2:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a4c8:	c3                   	ret    

c001a4c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a4c9:	55                   	push   ebp
c001a4ca:	57                   	push   edi
c001a4cb:	56                   	push   esi
c001a4cc:	53                   	push   ebx
c001a4cd:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4d3:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a4da:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a4e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4e5:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a4e9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a4ed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4f1:	75 03                	jne    c001a4f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a4f3:	83 c3 02             	add    ebx,0x2
c001a4f6:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a4f9:	75 03                	jne    c001a4fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a4fb:	43                   	inc    ebx
c001a4fc:	eb f8                	jmp    c001a4f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a4fe:	51                   	push   ecx
c001a4ff:	68 00 01 00 00       	push   0x100
c001a504:	6a 00                	push   0x0
c001a506:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a50a:	50                   	push   eax
c001a50b:	e8 b0 61 fe ff       	call   c00006c0 <memset>
c001a510:	83 c4 10             	add    esp,0x10
c001a513:	31 d2                	xor    edx,edx
c001a515:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a518:	84 c0                	test   al,al
c001a51a:	74 21                	je     c001a53d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a51c:	3c 2f                	cmp    al,0x2f
c001a51e:	75 0b                	jne    c001a52b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a520:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a524:	bd 01 00 00 00       	mov    ebp,0x1
c001a529:	eb 14                	jmp    c001a53f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a52b:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a52e:	80 f9 19             	cmp    cl,0x19
c001a531:	77 03                	ja     c001a536 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a533:	83 e8 20             	sub    eax,0x20
c001a536:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a53a:	42                   	inc    edx
c001a53b:	eb d8                	jmp    c001a515 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a53d:	31 ed                	xor    ebp,ebp
c001a53f:	83 ec 0c             	sub    esp,0xc
c001a542:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a549:	e8 97 2e ff ff       	call   c000d3e5 <malloc>
c001a54e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a555:	89 c6                	mov    esi,eax
c001a557:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a55d:	c1 ef 0b             	shr    edi,0xb
c001a560:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a567:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a56b:	83 c4 10             	add    esp,0x10
c001a56e:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a573:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a577:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a57e:	74 28                	je     c001a5a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a580:	52                   	push   edx
c001a581:	57                   	push   edi
c001a582:	50                   	push   eax
c001a583:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a587:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a58e:	e8 58 f9 ff ff       	call   c0019eeb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a593:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a597:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a59e:	05 00 08 00 00       	add    eax,0x800
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	eb cb                	jmp    c001a573 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a5af:	57                   	push   edi
c001a5b0:	e8 27 61 fe ff       	call   c00006dc <strlen>
c001a5b5:	50                   	push   eax
c001a5b6:	57                   	push   edi
c001a5b7:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a5be:	56                   	push   esi
c001a5bf:	e8 e5 f8 ff ff       	call   c0019ea9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a5c4:	83 c4 20             	add    esp,0x20
c001a5c7:	85 c0                	test   eax,eax
c001a5c9:	75 13                	jne    c001a5de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a5cb:	83 ec 0c             	sub    esp,0xc
c001a5ce:	56                   	push   esi
c001a5cf:	e8 21 2e ff ff       	call   c000d3f5 <free>
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	31 c0                	xor    eax,eax
c001a5d9:	e9 b3 00 00 00       	jmp    c001a691 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a5de:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a5e2:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a5e6:	c1 e7 08             	shl    edi,0x8
c001a5e9:	c1 e2 10             	shl    edx,0x10
c001a5ec:	09 d7                	or     edi,edx
c001a5ee:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a5f2:	09 d7                	or     edi,edx
c001a5f4:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a5f8:	c1 e2 18             	shl    edx,0x18
c001a5fb:	09 d7                	or     edi,edx
c001a5fd:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a601:	89 d1                	mov    ecx,edx
c001a603:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a607:	c1 e1 08             	shl    ecx,0x8
c001a60a:	c1 e2 10             	shl    edx,0x10
c001a60d:	09 ca                	or     edx,ecx
c001a60f:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a613:	09 ca                	or     edx,ecx
c001a615:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a619:	c1 e1 18             	shl    ecx,0x18
c001a61c:	09 ca                	or     edx,ecx
c001a61e:	89 e9                	mov    ecx,ebp
c001a620:	84 c9                	test   cl,cl
c001a622:	74 3c                	je     c001a660 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a624:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a628:	83 ec 0c             	sub    esp,0xc
c001a62b:	56                   	push   esi
c001a62c:	e8 c4 2d ff ff       	call   c000d3f5 <free>
c001a631:	83 c4 0c             	add    esp,0xc
c001a634:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a63b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a640:	50                   	push   eax
c001a641:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a648:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a64f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a653:	52                   	push   edx
c001a654:	57                   	push   edi
c001a655:	53                   	push   ebx
c001a656:	e8 6e fe ff ff       	call   c001a4c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a65b:	83 c4 20             	add    esp,0x20
c001a65e:	eb 31                	jmp    c001a691 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a660:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a663:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a66a:	d0 e8                	shr    al,1
c001a66c:	89 3b                	mov    DWORD PTR [ebx],edi
c001a66e:	83 e0 01             	and    eax,0x1
c001a671:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a678:	83 ec 0c             	sub    esp,0xc
c001a67b:	89 13                	mov    DWORD PTR [ebx],edx
c001a67d:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a684:	89 03                	mov    DWORD PTR [ebx],eax
c001a686:	56                   	push   esi
c001a687:	e8 69 2d ff ff       	call   c000d3f5 <free>
c001a68c:	83 c4 10             	add    esp,0x10
c001a68f:	b0 01                	mov    al,0x1
c001a691:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a697:	5b                   	pop    ebx
c001a698:	5e                   	pop    esi
c001a699:	5f                   	pop    edi
c001a69a:	5d                   	pop    ebp
c001a69b:	c3                   	ret    

c001a69c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a69c:	55                   	push   ebp
c001a69d:	57                   	push   edi
c001a69e:	56                   	push   esi
c001a69f:	53                   	push   ebx
c001a6a0:	83 ec 20             	sub    esp,0x20
c001a6a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a6a7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a6ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a6af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a6bf:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a6c4:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a6ca:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a6d0:	57                   	push   edi
c001a6d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a6d5:	50                   	push   eax
c001a6d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a6da:	50                   	push   eax
c001a6db:	e8 94 fd ff ff       	call   c001a474 <readRoot(unsigned int*, unsigned int*, char)>
c001a6e0:	5a                   	pop    edx
c001a6e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6e5:	e8 f2 5f fe ff       	call   c00006dc <strlen>
c001a6ea:	83 c4 10             	add    esp,0x10
c001a6ed:	83 f8 03             	cmp    eax,0x3
c001a6f0:	77 17                	ja     c001a709 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a6f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6f6:	89 03                	mov    DWORD PTR [ebx],eax
c001a6f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6fc:	89 06                	mov    DWORD PTR [esi],eax
c001a6fe:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a705:	b0 01                	mov    al,0x1
c001a707:	eb 19                	jmp    c001a722 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a709:	50                   	push   eax
c001a70a:	55                   	push   ebp
c001a70b:	57                   	push   edi
c001a70c:	56                   	push   esi
c001a70d:	53                   	push   ebx
c001a70e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a712:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a716:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a71a:	e8 aa fd ff ff       	call   c001a4c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a71f:	83 c4 20             	add    esp,0x20
c001a722:	83 c4 1c             	add    esp,0x1c
c001a725:	5b                   	pop    ebx
c001a726:	5e                   	pop    esi
c001a727:	5f                   	pop    edi
c001a728:	5d                   	pop    ebp
c001a729:	c3                   	ret    

c001a72a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a72a:	57                   	push   edi
c001a72b:	56                   	push   esi
c001a72c:	53                   	push   ebx
c001a72d:	83 ec 10             	sub    esp,0x10
c001a730:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a734:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a738:	85 ff                	test   edi,edi
c001a73a:	74 7b                	je     c001a7b7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a73c:	85 f6                	test   esi,esi
c001a73e:	74 77                	je     c001a7b7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a740:	83 ec 0c             	sub    esp,0xc
c001a743:	6a 1c                	push   0x1c
c001a745:	e8 9b 2c ff ff       	call   c000d3e5 <malloc>
c001a74a:	89 07                	mov    DWORD PTR [edi],eax
c001a74c:	89 c3                	mov    ebx,eax
c001a74e:	58                   	pop    eax
c001a74f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a753:	50                   	push   eax
c001a754:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a757:	50                   	push   eax
c001a758:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a75c:	50                   	push   eax
c001a75d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a761:	50                   	push   eax
c001a762:	56                   	push   esi
c001a763:	e8 34 ff ff ff       	call   c001a69c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a768:	83 c4 20             	add    esp,0x20
c001a76b:	84 c0                	test   al,al
c001a76d:	74 07                	je     c001a776 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a76f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a774:	74 0b                	je     c001a781 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a776:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a77a:	b8 01 00 00 00       	mov    eax,0x1
c001a77f:	eb 3b                	jmp    c001a7bc <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a785:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a789:	89 03                	mov    DWORD PTR [ebx],eax
c001a78b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a796:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a79d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a7a7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a7ae:	8a 06                	mov    al,BYTE PTR [esi]
c001a7b0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a7b3:	31 c0                	xor    eax,eax
c001a7b5:	eb 05                	jmp    c001a7bc <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a7b7:	b8 04 00 00 00       	mov    eax,0x4
c001a7bc:	83 c4 10             	add    esp,0x10
c001a7bf:	5b                   	pop    ebx
c001a7c0:	5e                   	pop    esi
c001a7c1:	5f                   	pop    edi
c001a7c2:	c3                   	ret    
c001a7c3:	90                   	nop

c001a7c4 <ISO9660::exists(char const*)>:
c001a7c4:	83 ec 28             	sub    esp,0x28
c001a7c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a7cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a7cf:	52                   	push   edx
c001a7d0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a7d3:	52                   	push   edx
c001a7d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a7d8:	52                   	push   edx
c001a7d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a7dd:	52                   	push   edx
c001a7de:	50                   	push   eax
c001a7df:	e8 b8 fe ff ff       	call   c001a69c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a7e4:	83 c4 3c             	add    esp,0x3c
c001a7e7:	c3                   	ret    

c001a7e8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	83 ec 14             	sub    esp,0x14
c001a7ed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a7f1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a7f5:	85 db                	test   ebx,ebx
c001a7f7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a7fb:	0f 94 c2             	sete   dl
c001a7fe:	85 f6                	test   esi,esi
c001a800:	0f 94 c0             	sete   al
c001a803:	08 c2                	or     dl,al
c001a805:	75 68                	jne    c001a86f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a807:	85 c9                	test   ecx,ecx
c001a809:	74 64                	je     c001a86f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a80b:	83 ec 0c             	sub    esp,0xc
c001a80e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a811:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a815:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a81b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a822:	50                   	push   eax
c001a823:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a826:	50                   	push   eax
c001a827:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a82b:	50                   	push   eax
c001a82c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a830:	50                   	push   eax
c001a831:	51                   	push   ecx
c001a832:	e8 65 fe ff ff       	call   c001a69c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a837:	83 c4 20             	add    esp,0x20
c001a83a:	ba 01 00 00 00       	mov    edx,0x1
c001a83f:	84 c0                	test   al,al
c001a841:	74 31                	je     c001a874 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a847:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a84e:	89 03                	mov    DWORD PTR [ebx],eax
c001a850:	ba 00 00 00 00       	mov    edx,0x0
c001a855:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a859:	85 c0                	test   eax,eax
c001a85b:	0f 95 06             	setne  BYTE PTR [esi]
c001a85e:	74 14                	je     c001a874 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a860:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a866:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a86d:	eb 05                	jmp    c001a874 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a86f:	ba 04 00 00 00       	mov    edx,0x4
c001a874:	83 c4 14             	add    esp,0x14
c001a877:	89 d0                	mov    eax,edx
c001a879:	5b                   	pop    ebx
c001a87a:	5e                   	pop    esi
c001a87b:	c3                   	ret    

c001a87c <ISO9660::openDir(char const*, void**)>:
c001a87c:	57                   	push   edi
c001a87d:	56                   	push   esi
c001a87e:	53                   	push   ebx
c001a87f:	83 ec 10             	sub    esp,0x10
c001a882:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a886:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a88a:	85 ff                	test   edi,edi
c001a88c:	0f 84 95 00 00 00    	je     c001a927 <ISO9660::openDir(char const*, void**)+0xab>
c001a892:	85 f6                	test   esi,esi
c001a894:	0f 84 8d 00 00 00    	je     c001a927 <ISO9660::openDir(char const*, void**)+0xab>
c001a89a:	83 ec 0c             	sub    esp,0xc
c001a89d:	6a 1c                	push   0x1c
c001a89f:	e8 41 2b ff ff       	call   c000d3e5 <malloc>
c001a8a4:	89 07                	mov    DWORD PTR [edi],eax
c001a8a6:	89 c3                	mov    ebx,eax
c001a8a8:	59                   	pop    ecx
c001a8a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8ad:	50                   	push   eax
c001a8ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a8b1:	50                   	push   eax
c001a8b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8b6:	50                   	push   eax
c001a8b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8bb:	50                   	push   eax
c001a8bc:	56                   	push   esi
c001a8bd:	e8 da fd ff ff       	call   c001a69c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8c2:	83 c4 20             	add    esp,0x20
c001a8c5:	84 c0                	test   al,al
c001a8c7:	74 07                	je     c001a8d0 <ISO9660::openDir(char const*, void**)+0x54>
c001a8c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a8ce:	75 21                	jne    c001a8f1 <ISO9660::openDir(char const*, void**)+0x75>
c001a8d0:	0f b6 c0             	movzx  eax,al
c001a8d3:	52                   	push   edx
c001a8d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a8d8:	50                   	push   eax
c001a8d9:	68 be a4 03 c0       	push   0xc003a4be
c001a8de:	e8 07 25 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001a8e3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a8e7:	83 c4 10             	add    esp,0x10
c001a8ea:	b8 01 00 00 00       	mov    eax,0x1
c001a8ef:	eb 3b                	jmp    c001a92c <ISO9660::openDir(char const*, void**)+0xb0>
c001a8f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a8f9:	89 03                	mov    DWORD PTR [ebx],eax
c001a8fb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a906:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a90d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a914:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a917:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a91e:	8a 06                	mov    al,BYTE PTR [esi]
c001a920:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a923:	31 c0                	xor    eax,eax
c001a925:	eb 05                	jmp    c001a92c <ISO9660::openDir(char const*, void**)+0xb0>
c001a927:	b8 04 00 00 00       	mov    eax,0x4
c001a92c:	83 c4 10             	add    esp,0x10
c001a92f:	5b                   	pop    ebx
c001a930:	5e                   	pop    esi
c001a931:	5f                   	pop    edi
c001a932:	c3                   	ret    
c001a933:	90                   	nop

c001a934 <ISO9660::ISO9660()>:
c001a934:	83 ec 0c             	sub    esp,0xc
c001a937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93b:	83 ec 0c             	sub    esp,0xc
c001a93e:	50                   	push   eax
c001a93f:	e8 5a 7c ff ff       	call   c001259e <Filesystem::Filesystem()>
c001a944:	83 c4 10             	add    esp,0x10
c001a947:	ba e4 a4 03 c0       	mov    edx,0xc003a4e4
c001a94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a950:	89 10                	mov    DWORD PTR [eax],edx
c001a952:	90                   	nop
c001a953:	83 c4 0c             	add    esp,0xc
c001a956:	c3                   	ret    
c001a957:	90                   	nop

c001a958 <SoundChannel::~SoundChannel()>:
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a962:	83 ec 0c             	sub    esp,0xc
c001a965:	50                   	push   eax
c001a966:	e8 8a 2a ff ff       	call   c000d3f5 <free>
c001a96b:	83 c4 10             	add    esp,0x10
c001a96e:	90                   	nop
c001a96f:	83 c4 0c             	add    esp,0xc
c001a972:	c3                   	ret    
c001a973:	90                   	nop

c001a974 <SoundChannel::setSpeed(float)>:
c001a974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a978:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a97c:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a97f:	c3                   	ret    

c001a980 <SoundChannel::getSpeed()>:
c001a980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a984:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a987:	c3                   	ret    

c001a988 <SoundChannel::setVolume(int)>:
c001a988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a98c:	83 f8 64             	cmp    eax,0x64
c001a98f:	7e 05                	jle    c001a996 <SoundChannel::setVolume(int)+0xe>
c001a991:	b8 64 00 00 00       	mov    eax,0x64
c001a996:	85 c0                	test   eax,eax
c001a998:	79 02                	jns    c001a99c <SoundChannel::setVolume(int)+0x14>
c001a99a:	31 c0                	xor    eax,eax
c001a99c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9a0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a9a3:	c3                   	ret    

c001a9a4 <SoundChannel::getVolume()>:
c001a9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a9ab:	c3                   	ret    

c001a9ac <SoundChannel::pause()>:
c001a9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a9b4:	c3                   	ret    
c001a9b5:	90                   	nop

c001a9b6 <SoundChannel::SoundChannel(int, int, int, int)>:
c001a9b6:	83 ec 1c             	sub    esp,0x1c
c001a9b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a9bd:	e8 ea ff ff ff       	call   c001a9ac <SoundChannel::pause()>
c001a9c2:	83 c4 04             	add    esp,0x4
c001a9c5:	6a 50                	push   0x50
c001a9c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a9cb:	e8 b8 ff ff ff       	call   c001a988 <SoundChannel::setVolume(int)>
c001a9d0:	83 c4 08             	add    esp,0x8
c001a9d3:	d9 e8                	fld1   
c001a9d5:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a9d9:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a9dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a9e0:	e8 8f ff ff ff       	call   c001a974 <SoundChannel::setSpeed(float)>
c001a9e5:	83 c4 08             	add    esp,0x8
c001a9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9ec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a9f0:	89 10                	mov    DWORD PTR [eax],edx
c001a9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a9fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa01:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa05:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa08:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aa0d:	75 23                	jne    c001aa32 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aa0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa13:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aa1c:	0f af c2             	imul   eax,edx
c001aa1f:	85 c0                	test   eax,eax
c001aa21:	79 03                	jns    c001aa26 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001aa23:	83 c0 03             	add    eax,0x3
c001aa26:	c1 f8 02             	sar    eax,0x2
c001aa29:	05 a0 0f 00 00       	add    eax,0xfa0
c001aa2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aa3a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001aa3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa41:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001aa48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa4c:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001aa53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa57:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa5a:	c1 e0 02             	shl    eax,0x2
c001aa5d:	83 ec 0c             	sub    esp,0xc
c001aa60:	50                   	push   eax
c001aa61:	e8 7f 29 ff ff       	call   c000d3e5 <malloc>
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	89 c2                	mov    edx,eax
c001aa6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa6f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aa72:	83 ec 04             	sub    esp,0x4
c001aa75:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa79:	50                   	push   eax
c001aa7a:	6a 01                	push   0x1
c001aa7c:	6a 04                	push   0x4
c001aa7e:	e8 e3 df fe ff       	call   c0008a66 <src_new>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	89 c2                	mov    edx,eax
c001aa88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa8c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa93:	85 c0                	test   eax,eax
c001aa95:	74 10                	je     c001aaa7 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001aa97:	83 ec 0c             	sub    esp,0xc
c001aa9a:	68 40 a5 03 c0       	push   0xc003a540
c001aa9f:	e8 64 24 ff ff       	call   c000cf08 <panic(char const*)>
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	90                   	nop
c001aaa8:	83 c4 1c             	add    esp,0x1c
c001aaab:	c3                   	ret    

c001aaac <SoundChannel::play()>:
c001aaac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001aab4:	c3                   	ret    
c001aab5:	90                   	nop

c001aab6 <SoundChannel::paused()>:
c001aab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaba:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001aabd:	c3                   	ret    

c001aabe <SoundChannel::getSampleRate()>:
c001aabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac2:	8b 00                	mov    eax,DWORD PTR [eax]
c001aac4:	c3                   	ret    
c001aac5:	90                   	nop

c001aac6 <SoundChannel::getBits()>:
c001aac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aacd:	c3                   	ret    

c001aace <SoundChannel::getBufferUsed()>:
c001aace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001aad5:	c3                   	ret    

c001aad6 <SoundChannel::getBufferSize()>:
c001aad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aada:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aadd:	c3                   	ret    

c001aade <SoundChannel::unbuffer(float*, int, int)>:
c001aade:	53                   	push   ebx
c001aadf:	83 ec 40             	sub    esp,0x40
c001aae2:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001aae6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aaee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aaf1:	db 03                	fild   DWORD PTR [ebx]
c001aaf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaf7:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001aafb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001aafe:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ab01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab05:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ab09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab19:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab1d:	50                   	push   eax
c001ab1e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ab21:	e8 fa db fe ff       	call   c0008720 <src_process>
c001ab26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab2a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ab2d:	83 c4 0c             	add    esp,0xc
c001ab30:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab33:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ab36:	29 d0                	sub    eax,edx
c001ab38:	c1 e0 02             	shl    eax,0x2
c001ab3b:	50                   	push   eax
c001ab3c:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ab3f:	50                   	push   eax
c001ab40:	51                   	push   ecx
c001ab41:	e8 66 5a fe ff       	call   c00005ac <memmove>
c001ab46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab4a:	83 c4 48             	add    esp,0x48
c001ab4d:	5b                   	pop    ebx
c001ab4e:	c3                   	ret    
c001ab4f:	90                   	nop

c001ab50 <SoundChannel::buffer8(unsigned char*, int)>:
c001ab50:	53                   	push   ebx
c001ab51:	31 c0                	xor    eax,eax
c001ab53:	83 ec 08             	sub    esp,0x8
c001ab56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab5a:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001ab5d:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001ab60:	74 35                	je     c001ab97 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ab62:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ab66:	7d 2f                	jge    c001ab97 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ab68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ab6c:	d9 05 5c a5 03 c0    	fld    DWORD PTR ds:0xc003a55c
c001ab72:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001ab76:	40                   	inc    eax
c001ab77:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ab7c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ab7f:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ab83:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ab86:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ab89:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ab8c:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ab8f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab92:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ab95:	eb c9                	jmp    c001ab60 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ab97:	83 c4 08             	add    esp,0x8
c001ab9a:	5b                   	pop    ebx
c001ab9b:	c3                   	ret    

c001ab9c <SoundDevice::SoundDevice(char const*)>:
c001ab9c:	83 ec 1c             	sub    esp,0x1c
c001ab9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aba3:	83 ec 08             	sub    esp,0x8
c001aba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abaa:	50                   	push   eax
c001abab:	e8 e4 8c ff ff       	call   c0013894 <Device::Device(char const*)>
c001abb0:	83 c4 10             	add    esp,0x10
c001abb3:	ba 68 a5 03 c0       	mov    edx,0xc003a568
c001abb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abbc:	89 10                	mov    DWORD PTR [eax],edx
c001abbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc2:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001abda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abe2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001abe7:	7f 19                	jg     c001ac02 <SoundDevice::SoundDevice(char const*)+0x66>
c001abe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abf1:	83 c2 54             	add    edx,0x54
c001abf4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001abfc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac00:	eb e0                	jmp    c001abe2 <SoundDevice::SoundDevice(char const*)+0x46>
c001ac02:	90                   	nop
c001ac03:	83 c4 1c             	add    esp,0x1c
c001ac06:	c3                   	ret    
c001ac07:	90                   	nop

c001ac08 <SoundDevice::~SoundDevice()>:
c001ac08:	53                   	push   ebx
c001ac09:	83 ec 18             	sub    esp,0x18
c001ac0c:	ba 68 a5 03 c0       	mov    edx,0xc003a568
c001ac11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac15:	89 10                	mov    DWORD PTR [eax],edx
c001ac17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac1f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac24:	7f 46                	jg     c001ac6c <SoundDevice::~SoundDevice()+0x64>
c001ac26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac2e:	83 c2 54             	add    edx,0x54
c001ac31:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ac35:	85 c0                	test   eax,eax
c001ac37:	74 2d                	je     c001ac66 <SoundDevice::~SoundDevice()+0x5e>
c001ac39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac41:	83 c2 54             	add    edx,0x54
c001ac44:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ac48:	85 db                	test   ebx,ebx
c001ac4a:	74 1a                	je     c001ac66 <SoundDevice::~SoundDevice()+0x5e>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	53                   	push   ebx
c001ac50:	e8 03 fd ff ff       	call   c001a958 <SoundChannel::~SoundChannel()>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	83 ec 08             	sub    esp,0x8
c001ac5b:	6a 2c                	push   0x2c
c001ac5d:	53                   	push   ebx
c001ac5e:	e8 46 77 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac6a:	eb b3                	jmp    c001ac1f <SoundDevice::~SoundDevice()+0x17>
c001ac6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac70:	83 ec 0c             	sub    esp,0xc
c001ac73:	50                   	push   eax
c001ac74:	e8 cd 88 ff ff       	call   c0013546 <Device::~Device()>
c001ac79:	83 c4 10             	add    esp,0x10
c001ac7c:	90                   	nop
c001ac7d:	83 c4 18             	add    esp,0x18
c001ac80:	5b                   	pop    ebx
c001ac81:	c3                   	ret    

c001ac82 <SoundDevice::~SoundDevice()>:
c001ac82:	83 ec 0c             	sub    esp,0xc
c001ac85:	83 ec 0c             	sub    esp,0xc
c001ac88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac8c:	e8 77 ff ff ff       	call   c001ac08 <SoundDevice::~SoundDevice()>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	83 ec 08             	sub    esp,0x8
c001ac97:	68 e4 01 00 00       	push   0x1e4
c001ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca0:	e8 04 77 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	83 c4 0c             	add    esp,0xc
c001acab:	c3                   	ret    

c001acac <SoundDevice::getFreeChannelNum()>:
c001acac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001acb0:	31 c0                	xor    eax,eax
c001acb2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001acba:	74 09                	je     c001acc5 <SoundDevice::getFreeChannelNum()+0x19>
c001acbc:	40                   	inc    eax
c001acbd:	83 f8 20             	cmp    eax,0x20
c001acc0:	75 f0                	jne    c001acb2 <SoundDevice::getFreeChannelNum()+0x6>
c001acc2:	83 c8 ff             	or     eax,0xffffffff
c001acc5:	c3                   	ret    

c001acc6 <SoundDevice::addChannel(SoundChannel*)>:
c001acc6:	56                   	push   esi
c001acc7:	53                   	push   ebx
c001acc8:	51                   	push   ecx
c001acc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001accd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001acd1:	53                   	push   ebx
c001acd2:	e8 d5 ff ff ff       	call   c001acac <SoundDevice::getFreeChannelNum()>
c001acd7:	5a                   	pop    edx
c001acd8:	83 f8 ff             	cmp    eax,0xffffffff
c001acdb:	74 51                	je     c001ad2e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001acdd:	85 f6                	test   esi,esi
c001acdf:	74 4d                	je     c001ad2e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ace1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ace8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001acef:	75 30                	jne    c001ad21 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001acf1:	83 ec 0c             	sub    esp,0xc
c001acf4:	56                   	push   esi
c001acf5:	e8 c4 fd ff ff       	call   c001aabe <SoundChannel::getSampleRate()>
c001acfa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ad00:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad03:	e8 be fd ff ff       	call   c001aac6 <SoundChannel::getBits()>
c001ad08:	83 c4 0c             	add    esp,0xc
c001ad0b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ad11:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad13:	50                   	push   eax
c001ad14:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ad1a:	53                   	push   ebx
c001ad1b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ad27:	b8 01 00 00 00       	mov    eax,0x1
c001ad2c:	eb 03                	jmp    c001ad31 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ad2e:	83 c8 ff             	or     eax,0xffffffff
c001ad31:	5a                   	pop    edx
c001ad32:	5b                   	pop    ebx
c001ad33:	5e                   	pop    esi
c001ad34:	c3                   	ret    
c001ad35:	90                   	nop

c001ad36 <SoundDevice::removeChannel(int)>:
c001ad36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad3e:	83 fa 1f             	cmp    edx,0x1f
c001ad41:	77 23                	ja     c001ad66 <SoundDevice::removeChannel(int)+0x30>
c001ad43:	8d 14 90             	lea    edx,[eax+edx*4]
c001ad46:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ad4d:	74 17                	je     c001ad66 <SoundDevice::removeChannel(int)+0x30>
c001ad4f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ad59:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ad5f:	75 05                	jne    c001ad66 <SoundDevice::removeChannel(int)+0x30>
c001ad61:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad63:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ad66:	c3                   	ret    
c001ad67:	90                   	nop

c001ad68 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ad68:	56                   	push   esi
c001ad69:	53                   	push   ebx
c001ad6a:	31 db                	xor    ebx,ebx
c001ad6c:	83 ec 14             	sub    esp,0x14
c001ad6f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad73:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ad77:	7d 55                	jge    c001adce <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ad79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad7d:	d9 e8                	fld1   
c001ad7f:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ad82:	d8 0d 98 a5 03 c0    	fmul   DWORD PTR ds:0xc003a598
c001ad88:	d8 0d 9c a5 03 c0    	fmul   DWORD PTR ds:0xc003a59c
c001ad8e:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ad92:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ad96:	d8 15 a0 a5 03 c0    	fcom   DWORD PTR ds:0xc003a5a0
c001ad9c:	df e0                	fnstsw ax
c001ad9e:	9e                   	sahf   
c001ad9f:	72 08                	jb     c001ada9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ada1:	dd d8                	fstp   st(0)
c001ada3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ada7:	eb 22                	jmp    c001adcb <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ada9:	d9 ee                	fldz   
c001adab:	d8 d9                	fcomp  st(1)
c001adad:	df e0                	fnstsw ax
c001adaf:	9e                   	sahf   
c001adb0:	72 08                	jb     c001adba <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001adb2:	dd d8                	fstp   st(0)
c001adb4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001adb8:	eb 11                	jmp    c001adcb <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001adba:	83 ec 10             	sub    esp,0x10
c001adbd:	d9 1c 24             	fstp   DWORD PTR [esp]
c001adc0:	e8 c7 3a 00 00       	call   c001e88c <lrintf>
c001adc5:	83 c4 10             	add    esp,0x10
c001adc8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001adcb:	43                   	inc    ebx
c001adcc:	eb a5                	jmp    c001ad73 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001adce:	83 c4 14             	add    esp,0x14
c001add1:	5b                   	pop    ebx
c001add2:	5e                   	pop    esi
c001add3:	c3                   	ret    

c001add4 <SoundDevice::getAudio(int, float*, float*)>:
c001add4:	55                   	push   ebp
c001add5:	57                   	push   edi
c001add6:	56                   	push   esi
c001add7:	53                   	push   ebx
c001add8:	31 db                	xor    ebx,ebx
c001adda:	83 ec 20             	sub    esp,0x20
c001addd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ade1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ade5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ade9:	c1 e0 02             	shl    eax,0x2
c001adec:	50                   	push   eax
c001aded:	6a 00                	push   0x0
c001adef:	55                   	push   ebp
c001adf0:	e8 cb 58 fe ff       	call   c00006c0 <memset>
c001adf5:	83 c4 10             	add    esp,0x10
c001adf8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001adfc:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ae03:	85 c0                	test   eax,eax
c001ae05:	0f 84 94 00 00 00    	je     c001ae9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	50                   	push   eax
c001ae0f:	e8 a2 fc ff ff       	call   c001aab6 <SoundChannel::paused()>
c001ae14:	83 c4 10             	add    esp,0x10
c001ae17:	84 c0                	test   al,al
c001ae19:	0f 85 80 00 00 00    	jne    c001ae9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae1f:	83 ec 0c             	sub    esp,0xc
c001ae22:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ae29:	e8 76 fb ff ff       	call   c001a9a4 <SoundChannel::getVolume()>
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	85 c0                	test   eax,eax
c001ae33:	74 6a                	je     c001ae9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae35:	83 ec 0c             	sub    esp,0xc
c001ae38:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ae3f:	e8 60 fb ff ff       	call   c001a9a4 <SoundChannel::getVolume()>
c001ae44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae48:	d9 05 a4 a5 03 c0    	fld    DWORD PTR ds:0xc003a5a4
c001ae4e:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ae52:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ae56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ae5a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001ae60:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001ae64:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ae6b:	e8 6e fc ff ff       	call   c001aade <SoundChannel::unbuffer(float*, int, int)>
c001ae70:	83 c4 20             	add    esp,0x20
c001ae73:	31 d2                	xor    edx,edx
c001ae75:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae79:	39 c2                	cmp    edx,eax
c001ae7b:	7d 1a                	jge    c001ae97 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ae7d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ae81:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001ae84:	d8 c9                	fmul   st,st(1)
c001ae86:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001ae8c:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001ae90:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ae94:	42                   	inc    edx
c001ae95:	eb e2                	jmp    c001ae79 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ae97:	dd d8                	fstp   st(0)
c001ae99:	39 c7                	cmp    edi,eax
c001ae9b:	7e 02                	jle    c001ae9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae9d:	89 c7                	mov    edi,eax
c001ae9f:	43                   	inc    ebx
c001aea0:	83 fb 20             	cmp    ebx,0x20
c001aea3:	0f 85 53 ff ff ff    	jne    c001adfc <SoundDevice::getAudio(int, float*, float*)+0x28>
c001aea9:	83 c4 1c             	add    esp,0x1c
c001aeac:	89 f8                	mov    eax,edi
c001aeae:	5b                   	pop    ebx
c001aeaf:	5e                   	pop    esi
c001aeb0:	5f                   	pop    edi
c001aeb1:	5d                   	pop    ebp
c001aeb2:	c3                   	ret    
c001aeb3:	90                   	nop

c001aeb4 <PCI::open(int, int, void*)>:
c001aeb4:	83 ec 18             	sub    esp,0x18
c001aeb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aebb:	8b 10                	mov    edx,DWORD PTR [eax]
c001aebd:	50                   	push   eax
c001aebe:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001aec1:	31 c0                	xor    eax,eax
c001aec3:	83 c4 1c             	add    esp,0x1c
c001aec6:	c3                   	ret    
c001aec7:	90                   	nop

c001aec8 <PCI::close(int, int, void*)>:
c001aec8:	31 c0                	xor    eax,eax
c001aeca:	c3                   	ret    
c001aecb:	90                   	nop

c001aecc <PCI::PCI()>:
c001aecc:	83 ec 0c             	sub    esp,0xc
c001aecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed3:	83 ec 08             	sub    esp,0x8
c001aed6:	68 a8 a5 03 c0       	push   0xc003a5a8
c001aedb:	50                   	push   eax
c001aedc:	e8 3f 80 ff ff       	call   c0012f20 <Bus::Bus(char const*)>
c001aee1:	83 c4 10             	add    esp,0x10
c001aee4:	ba 54 a6 03 c0       	mov    edx,0xc003a654
c001aee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeed:	89 10                	mov    DWORD PTR [eax],edx
c001aeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aef9:	0f b6 d0             	movzx  edx,al
c001aefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af00:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001af07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af11:	0f b6 d0             	movzx  edx,al
c001af14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af18:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001af1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af27:	8d 50 01             	lea    edx,[eax+0x1]
c001af2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af2e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001af34:	0f b6 d0             	movzx  edx,al
c001af37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001af3f:	83 c9 c0             	or     ecx,0xffffffc0
c001af42:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001af46:	90                   	nop
c001af47:	83 c4 0c             	add    esp,0xc
c001af4a:	c3                   	ret    
c001af4b:	90                   	nop

c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af4c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af55:	89 ca                	mov    edx,ecx
c001af57:	c1 e0 10             	shl    eax,0x10
c001af5a:	81 e2 fc 00 00 00    	and    edx,0xfc
c001af60:	09 d0                	or     eax,edx
c001af62:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001af67:	c1 e2 08             	shl    edx,0x8
c001af6a:	09 d0                	or     eax,edx
c001af6c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001af71:	c1 e2 0b             	shl    edx,0xb
c001af74:	09 d0                	or     eax,edx
c001af76:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af7b:	0d 00 00 00 80       	or     eax,0x80000000
c001af80:	ef                   	out    dx,eax
c001af81:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af86:	ed                   	in     eax,dx
c001af87:	83 e1 02             	and    ecx,0x2
c001af8a:	0f b6 c9             	movzx  ecx,cl
c001af8d:	c1 e1 03             	shl    ecx,0x3
c001af90:	d3 e8                	shr    eax,cl
c001af92:	c3                   	ret    
c001af93:	90                   	nop

c001af94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001af94:	6a 00                	push   0x0
c001af96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af9b:	50                   	push   eax
c001af9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afa1:	50                   	push   eax
c001afa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afa7:	50                   	push   eax
c001afa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afac:	e8 9b ff ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afb1:	83 c4 14             	add    esp,0x14
c001afb4:	c3                   	ret    
c001afb5:	90                   	nop

c001afb6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001afb6:	6a 0e                	push   0xe
c001afb8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afbd:	50                   	push   eax
c001afbe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afc3:	50                   	push   eax
c001afc4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afc9:	50                   	push   eax
c001afca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afce:	e8 79 ff ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd3:	83 c4 14             	add    esp,0x14
c001afd6:	0f b6 c0             	movzx  eax,al
c001afd9:	c3                   	ret    

c001afda <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001afda:	55                   	push   ebp
c001afdb:	57                   	push   edi
c001afdc:	56                   	push   esi
c001afdd:	53                   	push   ebx
c001afde:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001afe3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001afe8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001afed:	6a 0a                	push   0xa
c001afef:	56                   	push   esi
c001aff0:	55                   	push   ebp
c001aff1:	57                   	push   edi
c001aff2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aff6:	e8 51 ff ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001affb:	6a 0a                	push   0xa
c001affd:	89 c3                	mov    ebx,eax
c001afff:	56                   	push   esi
c001b000:	0f b6 db             	movzx  ebx,bl
c001b003:	55                   	push   ebp
c001b004:	57                   	push   edi
c001b005:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b009:	e8 3e ff ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b00e:	83 c4 28             	add    esp,0x28
c001b011:	25 00 ff 00 00       	and    eax,0xff00
c001b016:	09 d8                	or     eax,ebx
c001b018:	5b                   	pop    ebx
c001b019:	5e                   	pop    esi
c001b01a:	5f                   	pop    edi
c001b01b:	5d                   	pop    ebp
c001b01c:	c3                   	ret    
c001b01d:	90                   	nop

c001b01e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b01e:	6a 08                	push   0x8
c001b020:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b025:	50                   	push   eax
c001b026:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b02b:	50                   	push   eax
c001b02c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b031:	50                   	push   eax
c001b032:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b036:	e8 11 ff ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b03b:	83 c4 14             	add    esp,0x14
c001b03e:	0f b6 c4             	movzx  eax,ah
c001b041:	c3                   	ret    

c001b042 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b042:	6a 08                	push   0x8
c001b044:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b049:	50                   	push   eax
c001b04a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b04f:	50                   	push   eax
c001b050:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b055:	50                   	push   eax
c001b056:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b05a:	e8 ed fe ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b05f:	83 c4 14             	add    esp,0x14
c001b062:	c3                   	ret    
c001b063:	90                   	nop

c001b064 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b064:	6a 3c                	push   0x3c
c001b066:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b06b:	50                   	push   eax
c001b06c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b071:	50                   	push   eax
c001b072:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b077:	50                   	push   eax
c001b078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b07c:	e8 cb fe ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b081:	83 c4 14             	add    esp,0x14
c001b084:	c3                   	ret    
c001b085:	90                   	nop

c001b086 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b086:	6a 18                	push   0x18
c001b088:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b08d:	50                   	push   eax
c001b08e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b093:	50                   	push   eax
c001b094:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b099:	50                   	push   eax
c001b09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b09e:	e8 a9 fe ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a3:	83 c4 14             	add    esp,0x14
c001b0a6:	0f b6 c4             	movzx  eax,ah
c001b0a9:	c3                   	ret    

c001b0aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0aa:	55                   	push   ebp
c001b0ab:	57                   	push   edi
c001b0ac:	56                   	push   esi
c001b0ad:	53                   	push   ebx
c001b0ae:	50                   	push   eax
c001b0af:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b0b3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b0b8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b0bd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b0c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b0c9:	8d 43 12             	lea    eax,[ebx+0x12]
c001b0cc:	83 c3 10             	add    ebx,0x10
c001b0cf:	0f b6 c0             	movzx  eax,al
c001b0d2:	0f b6 db             	movzx  ebx,bl
c001b0d5:	50                   	push   eax
c001b0d6:	51                   	push   ecx
c001b0d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b0db:	57                   	push   edi
c001b0dc:	55                   	push   ebp
c001b0dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b0e1:	e8 66 fe ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0e6:	53                   	push   ebx
c001b0e7:	89 c6                	mov    esi,eax
c001b0e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b0ed:	c1 e6 10             	shl    esi,0x10
c001b0f0:	51                   	push   ecx
c001b0f1:	57                   	push   edi
c001b0f2:	55                   	push   ebp
c001b0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b0f7:	e8 50 fe ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0fc:	83 c4 2c             	add    esp,0x2c
c001b0ff:	0f b7 c0             	movzx  eax,ax
c001b102:	5b                   	pop    ebx
c001b103:	09 f0                	or     eax,esi
c001b105:	5e                   	pop    esi
c001b106:	5f                   	pop    edi
c001b107:	5d                   	pop    ebp
c001b108:	c3                   	ret    
c001b109:	90                   	nop

c001b10a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b10a:	53                   	push   ebx
c001b10b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b110:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b119:	c1 e1 10             	shl    ecx,0x10
c001b11c:	25 fc 00 00 00       	and    eax,0xfc
c001b121:	09 c1                	or     ecx,eax
c001b123:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b128:	c1 e0 08             	shl    eax,0x8
c001b12b:	09 c1                	or     ecx,eax
c001b12d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b132:	c1 e0 0b             	shl    eax,0xb
c001b135:	09 c1                	or     ecx,eax
c001b137:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b13d:	89 c8                	mov    eax,ecx
c001b13f:	ef                   	out    dx,eax
c001b140:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b145:	ed                   	in     eax,dx
c001b146:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b14b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b150:	74 0a                	je     c001b15c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b152:	0f b7 d8             	movzx  ebx,ax
c001b155:	89 d0                	mov    eax,edx
c001b157:	c1 e0 10             	shl    eax,0x10
c001b15a:	eb 05                	jmp    c001b161 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b15c:	66 31 c0             	xor    ax,ax
c001b15f:	89 d3                	mov    ebx,edx
c001b161:	09 c3                	or     ebx,eax
c001b163:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b168:	89 c8                	mov    eax,ecx
c001b16a:	ef                   	out    dx,eax
c001b16b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b170:	89 d8                	mov    eax,ebx
c001b172:	ef                   	out    dx,eax
c001b173:	5b                   	pop    ebx
c001b174:	c3                   	ret    
c001b175:	90                   	nop

c001b176 <PCI::checkBus(unsigned char)>:
c001b176:	56                   	push   esi
c001b177:	53                   	push   ebx
c001b178:	31 db                	xor    ebx,ebx
c001b17a:	51                   	push   ecx
c001b17b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b180:	52                   	push   edx
c001b181:	53                   	push   ebx
c001b182:	43                   	inc    ebx
c001b183:	56                   	push   esi
c001b184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b188:	e8 4d 03 00 00       	call   c001b4da <PCI::checkDevice(unsigned char, unsigned char)>
c001b18d:	83 c4 10             	add    esp,0x10
c001b190:	83 fb 20             	cmp    ebx,0x20
c001b193:	75 eb                	jne    c001b180 <PCI::checkBus(unsigned char)+0xa>
c001b195:	58                   	pop    eax
c001b196:	5b                   	pop    ebx
c001b197:	5e                   	pop    esi
c001b198:	c3                   	ret    
c001b199:	90                   	nop

c001b19a <PCI::foundDevice(PCIDeviceInfo)>:
c001b19a:	55                   	push   ebp
c001b19b:	57                   	push   edi
c001b19c:	56                   	push   esi
c001b19d:	53                   	push   ebx
c001b19e:	83 ec 1c             	sub    esp,0x1c
c001b1a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1a5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b1ab:	0f 84 51 01 00 00    	je     c001b302 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b1b1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b1b5:	66 81 f9 06 04       	cmp    cx,0x406
c001b1ba:	75 2c                	jne    c001b1e8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b1bc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b1c1:	50                   	push   eax
c001b1c2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b1c7:	50                   	push   eax
c001b1c8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b1cd:	50                   	push   eax
c001b1ce:	56                   	push   esi
c001b1cf:	e8 b2 fe ff ff       	call   c001b086 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b1d4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b1d8:	0f b6 c0             	movzx  eax,al
c001b1db:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b1df:	83 c4 2c             	add    esp,0x2c
c001b1e2:	5b                   	pop    ebx
c001b1e3:	5e                   	pop    esi
c001b1e4:	5f                   	pop    edi
c001b1e5:	5d                   	pop    ebp
c001b1e6:	eb 8e                	jmp    c001b176 <PCI::checkBus(unsigned char)>
c001b1e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b1ec:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b1f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b1f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b1fa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b1fe:	88 d3                	mov    bl,dl
c001b200:	85 c0                	test   eax,eax
c001b202:	74 33                	je     c001b237 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b204:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b207:	85 d2                	test   edx,edx
c001b209:	74 28                	je     c001b233 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b20b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b211:	31 ef                	xor    edi,ebp
c001b213:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b219:	75 18                	jne    c001b233 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b21b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b21f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b225:	75 0c                	jne    c001b233 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b227:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b22d:	0f 84 cf 00 00 00    	je     c001b302 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b233:	8b 00                	mov    eax,DWORD PTR [eax]
c001b235:	eb c9                	jmp    c001b200 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b237:	66 81 f9 01 06       	cmp    cx,0x601
c001b23c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b240:	75 18                	jne    c001b25a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	68 58 01 00 00       	push   0x158
c001b24a:	e8 4b 71 ff ff       	call   c001239a <operator new(unsigned long)>
c001b24f:	59                   	pop    ecx
c001b250:	89 c5                	mov    ebp,eax
c001b252:	5f                   	pop    edi
c001b253:	68 b0 a5 03 c0       	push   0xc003a5b0
c001b258:	eb 7d                	jmp    c001b2d7 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b25a:	66 81 f9 01 01       	cmp    cx,0x101
c001b25f:	75 60                	jne    c001b2c1 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b261:	83 ec 0c             	sub    esp,0xc
c001b264:	68 70 02 00 00       	push   0x270
c001b269:	e8 2c 71 ff ff       	call   c001239a <operator new(unsigned long)>
c001b26e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b271:	89 c5                	mov    ebp,eax
c001b273:	e8 e0 07 00 00       	call   c001ba58 <IDE::IDE()>
c001b278:	58                   	pop    eax
c001b279:	5a                   	pop    edx
c001b27a:	55                   	push   ebp
c001b27b:	56                   	push   esi
c001b27c:	e8 23 84 ff ff       	call   c00136a4 <Device::addChild(Device*)>
c001b281:	83 ec 1c             	sub    esp,0x1c
c001b284:	b9 09 00 00 00       	mov    ecx,0x9
c001b289:	fc                   	cld    
c001b28a:	89 e7                	mov    edi,esp
c001b28c:	89 de                	mov    esi,ebx
c001b28e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b290:	55                   	push   ebp
c001b291:	e8 e8 82 ff ff       	call   c001357e <Device::preOpenPCI(PCIDeviceInfo)>
c001b296:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b299:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b29d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b2a5:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b2ad:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b2b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b2b8:	83 c4 4c             	add    esp,0x4c
c001b2bb:	5b                   	pop    ebx
c001b2bc:	5e                   	pop    esi
c001b2bd:	5f                   	pop    edi
c001b2be:	5d                   	pop    ebp
c001b2bf:	ff e0                	jmp    eax
c001b2c1:	83 ec 0c             	sub    esp,0xc
c001b2c4:	68 58 01 00 00       	push   0x158
c001b2c9:	e8 cc 70 ff ff       	call   c001239a <operator new(unsigned long)>
c001b2ce:	59                   	pop    ecx
c001b2cf:	89 c5                	mov    ebp,eax
c001b2d1:	5f                   	pop    edi
c001b2d2:	68 cf a5 03 c0       	push   0xc003a5cf
c001b2d7:	55                   	push   ebp
c001b2d8:	e8 b3 86 ff ff       	call   c0013990 <DriverlessDevice::DriverlessDevice(char const*)>
c001b2dd:	58                   	pop    eax
c001b2de:	5a                   	pop    edx
c001b2df:	55                   	push   ebp
c001b2e0:	56                   	push   esi
c001b2e1:	e8 be 83 ff ff       	call   c00136a4 <Device::addChild(Device*)>
c001b2e6:	b9 09 00 00 00       	mov    ecx,0x9
c001b2eb:	fc                   	cld    
c001b2ec:	89 df                	mov    edi,ebx
c001b2ee:	89 de                	mov    esi,ebx
c001b2f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2f2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b2f6:	83 c4 2c             	add    esp,0x2c
c001b2f9:	5b                   	pop    ebx
c001b2fa:	5e                   	pop    esi
c001b2fb:	5f                   	pop    edi
c001b2fc:	5d                   	pop    ebp
c001b2fd:	e9 7c 82 ff ff       	jmp    c001357e <Device::preOpenPCI(PCIDeviceInfo)>
c001b302:	83 c4 1c             	add    esp,0x1c
c001b305:	5b                   	pop    ebx
c001b306:	5e                   	pop    esi
c001b307:	5f                   	pop    edi
c001b308:	5d                   	pop    ebp
c001b309:	c3                   	ret    

c001b30a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b30a:	55                   	push   ebp
c001b30b:	57                   	push   edi
c001b30c:	56                   	push   esi
c001b30d:	53                   	push   ebx
c001b30e:	83 ec 5c             	sub    esp,0x5c
c001b311:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b315:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b319:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b31d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b322:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b326:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b32a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b32f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b333:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b338:	6a 0c                	push   0xc
c001b33a:	55                   	push   ebp
c001b33b:	53                   	push   ebx
c001b33c:	57                   	push   edi
c001b33d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b344:	e8 03 fc ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b349:	83 c4 0c             	add    esp,0xc
c001b34c:	6a 00                	push   0x0
c001b34e:	68 e9 a5 03 c0       	push   0xc003a5e9
c001b353:	e8 92 1a ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001b358:	55                   	push   ebp
c001b359:	53                   	push   ebx
c001b35a:	57                   	push   edi
c001b35b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b362:	e8 73 fc ff ff       	call   c001afda <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b367:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b36c:	83 c4 20             	add    esp,0x20
c001b36f:	55                   	push   ebp
c001b370:	53                   	push   ebx
c001b371:	57                   	push   edi
c001b372:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b376:	e8 e9 fc ff ff       	call   c001b064 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b37b:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b382:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b386:	55                   	push   ebp
c001b387:	53                   	push   ebx
c001b388:	57                   	push   edi
c001b389:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b390:	e8 b7 fb ff ff       	call   c001af4c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b395:	0f b6 c4             	movzx  eax,ah
c001b398:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b39c:	83 c4 18             	add    esp,0x18
c001b39f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b3a3:	68 fd a5 03 c0       	push   0xc003a5fd
c001b3a8:	e8 3d 1a ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001b3ad:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b3b1:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b3b5:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b3c3:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b3ca:	74 6c                	je     c001b438 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b3cc:	31 f6                	xor    esi,esi
c001b3ce:	8b 15 28 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b928
c001b3d4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b3da:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b3e0:	7e 56                	jle    c001b438 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b3e2:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b3e5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b3ec:	39 cb                	cmp    ebx,ecx
c001b3ee:	75 45                	jne    c001b435 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b3f0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b3f7:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b3fb:	75 38                	jne    c001b435 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b3fd:	83 ec 0c             	sub    esp,0xc
c001b400:	68 0c a6 03 c0       	push   0xc003a60c
c001b405:	e8 e0 19 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001b40a:	8b 15 28 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b928
c001b410:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b416:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b41e:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b422:	52                   	push   edx
c001b423:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b427:	53                   	push   ebx
c001b428:	68 31 a6 03 c0       	push   0xc003a631
c001b42d:	e8 b8 19 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001b432:	83 c4 20             	add    esp,0x20
c001b435:	46                   	inc    esi
c001b436:	eb 96                	jmp    c001b3ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b438:	31 d2                	xor    edx,edx
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	55                   	push   ebp
c001b43e:	53                   	push   ebx
c001b43f:	57                   	push   edi
c001b440:	52                   	push   edx
c001b441:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b445:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b44c:	e8 59 fc ff ff       	call   c001b0aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b451:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b455:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b459:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b45d:	42                   	inc    edx
c001b45e:	83 c4 20             	add    esp,0x20
c001b461:	83 fa 06             	cmp    edx,0x6
c001b464:	75 d4                	jne    c001b43a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b466:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b46a:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b46e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b472:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b476:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b47a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b47e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b483:	86 e0                	xchg   al,ah
c001b485:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b48a:	55                   	push   ebp
c001b48b:	53                   	push   ebx
c001b48c:	57                   	push   edi
c001b48d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b491:	e8 88 fb ff ff       	call   c001b01e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b496:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b49a:	55                   	push   ebp
c001b49b:	53                   	push   ebx
c001b49c:	57                   	push   edi
c001b49d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4a4:	e8 eb fa ff ff       	call   c001af94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b4a9:	83 ec 0c             	sub    esp,0xc
c001b4ac:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b4b1:	b9 09 00 00 00       	mov    ecx,0x9
c001b4b6:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b4ba:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b4be:	fc                   	cld    
c001b4bf:	89 e7                	mov    edi,esp
c001b4c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4c3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b4ca:	e8 cb fc ff ff       	call   c001b19a <PCI::foundDevice(PCIDeviceInfo)>
c001b4cf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b4d5:	5b                   	pop    ebx
c001b4d6:	5e                   	pop    esi
c001b4d7:	5f                   	pop    edi
c001b4d8:	5d                   	pop    ebp
c001b4d9:	c3                   	ret    

c001b4da <PCI::checkDevice(unsigned char, unsigned char)>:
c001b4da:	55                   	push   ebp
c001b4db:	57                   	push   edi
c001b4dc:	56                   	push   esi
c001b4dd:	53                   	push   ebx
c001b4de:	83 ec 0c             	sub    esp,0xc
c001b4e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b4e5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b4ea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b4ef:	6a 00                	push   0x0
c001b4f1:	56                   	push   esi
c001b4f2:	57                   	push   edi
c001b4f3:	55                   	push   ebp
c001b4f4:	e8 9b fa ff ff       	call   c001af94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b4f9:	6a 00                	push   0x0
c001b4fb:	56                   	push   esi
c001b4fc:	57                   	push   edi
c001b4fd:	55                   	push   ebp
c001b4fe:	e8 07 fe ff ff       	call   c001b30a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b503:	83 c4 20             	add    esp,0x20
c001b506:	6a 00                	push   0x0
c001b508:	56                   	push   esi
c001b509:	57                   	push   edi
c001b50a:	55                   	push   ebp
c001b50b:	e8 a6 fa ff ff       	call   c001afb6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	84 c0                	test   al,al
c001b515:	79 27                	jns    c001b53e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b517:	bb 01 00 00 00       	mov    ebx,0x1
c001b51c:	53                   	push   ebx
c001b51d:	56                   	push   esi
c001b51e:	57                   	push   edi
c001b51f:	55                   	push   ebp
c001b520:	e8 6f fa ff ff       	call   c001af94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	66 40                	inc    ax
c001b52a:	74 0c                	je     c001b538 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b52c:	53                   	push   ebx
c001b52d:	56                   	push   esi
c001b52e:	57                   	push   edi
c001b52f:	55                   	push   ebp
c001b530:	e8 d5 fd ff ff       	call   c001b30a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b535:	83 c4 10             	add    esp,0x10
c001b538:	43                   	inc    ebx
c001b539:	83 fb 08             	cmp    ebx,0x8
c001b53c:	75 de                	jne    c001b51c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b53e:	83 c4 0c             	add    esp,0xc
c001b541:	5b                   	pop    ebx
c001b542:	5e                   	pop    esi
c001b543:	5f                   	pop    edi
c001b544:	5d                   	pop    ebp
c001b545:	c3                   	ret    

c001b546 <PCI::detect()>:
c001b546:	56                   	push   esi
c001b547:	53                   	push   ebx
c001b548:	53                   	push   ebx
c001b549:	31 db                	xor    ebx,ebx
c001b54b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b54f:	6a 00                	push   0x0
c001b551:	6a 00                	push   0x0
c001b553:	6a 00                	push   0x0
c001b555:	56                   	push   esi
c001b556:	e8 5b fa ff ff       	call   c001afb6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b55b:	83 c4 10             	add    esp,0x10
c001b55e:	a8 80                	test   al,0x80
c001b560:	75 21                	jne    c001b583 <PCI::detect()+0x3d>
c001b562:	51                   	push   ecx
c001b563:	51                   	push   ecx
c001b564:	6a 00                	push   0x0
c001b566:	56                   	push   esi
c001b567:	e8 0a fc ff ff       	call   c001b176 <PCI::checkBus(unsigned char)>
c001b56c:	83 c4 10             	add    esp,0x10
c001b56f:	eb 24                	jmp    c001b595 <PCI::detect()+0x4f>
c001b571:	52                   	push   edx
c001b572:	52                   	push   edx
c001b573:	53                   	push   ebx
c001b574:	43                   	inc    ebx
c001b575:	56                   	push   esi
c001b576:	e8 fb fb ff ff       	call   c001b176 <PCI::checkBus(unsigned char)>
c001b57b:	83 c4 10             	add    esp,0x10
c001b57e:	83 fb 08             	cmp    ebx,0x8
c001b581:	74 12                	je     c001b595 <PCI::detect()+0x4f>
c001b583:	53                   	push   ebx
c001b584:	6a 00                	push   0x0
c001b586:	6a 00                	push   0x0
c001b588:	56                   	push   esi
c001b589:	e8 06 fa ff ff       	call   c001af94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b58e:	83 c4 10             	add    esp,0x10
c001b591:	66 40                	inc    ax
c001b593:	74 dc                	je     c001b571 <PCI::detect()+0x2b>
c001b595:	58                   	pop    eax
c001b596:	5b                   	pop    ebx
c001b597:	5e                   	pop    esi
c001b598:	c3                   	ret    
c001b599:	90                   	nop

c001b59a <RTC::open(int, int, void*)>:
c001b59a:	31 c0                	xor    eax,eax
c001b59c:	c3                   	ret    
c001b59d:	90                   	nop

c001b59e <RTC::close(int, int, void*)>:
c001b59e:	31 c0                	xor    eax,eax
c001b5a0:	c3                   	ret    
c001b5a1:	90                   	nop

c001b5a2 <RTC::timeInSecondsUTC()>:
c001b5a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b5ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5b2:	c3                   	ret    
c001b5b3:	90                   	nop

c001b5b4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b5b4:	31 c0                	xor    eax,eax
c001b5b6:	c3                   	ret    
c001b5b7:	90                   	nop

c001b5b8 <RTC::timeInDatetimeUTC()>:
c001b5b8:	53                   	push   ebx
c001b5b9:	83 ec 14             	sub    esp,0x14
c001b5bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5c6:	50                   	push   eax
c001b5c7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b5ca:	83 c4 0c             	add    esp,0xc
c001b5cd:	52                   	push   edx
c001b5ce:	50                   	push   eax
c001b5cf:	53                   	push   ebx
c001b5d0:	e8 e3 7d ff ff       	call   c00133b8 <secondsToDatetime(unsigned long long)>
c001b5d5:	89 d8                	mov    eax,ebx
c001b5d7:	83 c4 14             	add    esp,0x14
c001b5da:	5b                   	pop    ebx
c001b5db:	c2 04 00             	ret    0x4

c001b5de <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b5de:	56                   	push   esi
c001b5df:	53                   	push   ebx
c001b5e0:	83 ec 14             	sub    esp,0x14
c001b5e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5e9:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b5ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5f0:	52                   	push   edx
c001b5f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5f9:	50                   	push   eax
c001b5fa:	e8 b9 7d ff ff       	call   c00133b8 <secondsToDatetime(unsigned long long)>
c001b5ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b603:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b607:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b60b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b60f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b613:	89 f0                	mov    eax,esi
c001b615:	83 c4 20             	add    esp,0x20
c001b618:	5b                   	pop    ebx
c001b619:	5e                   	pop    esi
c001b61a:	ff e0                	jmp    eax

c001b61c <RTC::~RTC()>:
c001b61c:	83 ec 0c             	sub    esp,0xc
c001b61f:	ba ac a6 03 c0       	mov    edx,0xc003a6ac
c001b624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b628:	89 10                	mov    DWORD PTR [eax],edx
c001b62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62e:	83 ec 0c             	sub    esp,0xc
c001b631:	50                   	push   eax
c001b632:	e8 0b 7b ff ff       	call   c0013142 <Clock::~Clock()>
c001b637:	83 c4 10             	add    esp,0x10
c001b63a:	90                   	nop
c001b63b:	83 c4 0c             	add    esp,0xc
c001b63e:	c3                   	ret    
c001b63f:	90                   	nop

c001b640 <RTC::~RTC()>:
c001b640:	83 ec 0c             	sub    esp,0xc
c001b643:	83 ec 0c             	sub    esp,0xc
c001b646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b64a:	e8 cd ff ff ff       	call   c001b61c <RTC::~RTC()>
c001b64f:	83 c4 10             	add    esp,0x10
c001b652:	83 ec 08             	sub    esp,0x8
c001b655:	68 60 01 00 00       	push   0x160
c001b65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b65e:	e8 46 6d ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	83 c4 0c             	add    esp,0xc
c001b669:	c3                   	ret    

c001b66a <RTC::get_update_in_progress_flag()>:
c001b66a:	83 ec 14             	sub    esp,0x14
c001b66d:	6a 0a                	push   0xa
c001b66f:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b675:	e8 dc fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b67a:	83 c4 1c             	add    esp,0x1c
c001b67d:	c0 e8 07             	shr    al,0x7
c001b680:	c3                   	ret    
c001b681:	90                   	nop

c001b682 <RTC::completeRTCRefresh()>:
c001b682:	55                   	push   ebp
c001b683:	57                   	push   edi
c001b684:	56                   	push   esi
c001b685:	53                   	push   ebx
c001b686:	83 ec 2c             	sub    esp,0x2c
c001b689:	8b 35 f0 c2 03 c0    	mov    esi,DWORD PTR ds:0xc003c2f0
c001b68f:	8b 3d f4 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c2f4
c001b695:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b69b:	83 d7 00             	adc    edi,0x0
c001b69e:	83 ec 0c             	sub    esp,0xc
c001b6a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b6a5:	e8 c0 ff ff ff       	call   c001b66a <RTC::get_update_in_progress_flag()>
c001b6aa:	83 c4 10             	add    esp,0x10
c001b6ad:	84 c0                	test   al,al
c001b6af:	74 10                	je     c001b6c1 <RTC::completeRTCRefresh()+0x3f>
c001b6b1:	3b 35 f0 c2 03 c0    	cmp    esi,DWORD PTR ds:0xc003c2f0
c001b6b7:	89 f8                	mov    eax,edi
c001b6b9:	1b 05 f4 c2 03 c0    	sbb    eax,DWORD PTR ds:0xc003c2f4
c001b6bf:	73 dd                	jae    c001b69e <RTC::completeRTCRefresh()+0x1c>
c001b6c1:	55                   	push   ebp
c001b6c2:	55                   	push   ebp
c001b6c3:	6a 00                	push   0x0
c001b6c5:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b6cb:	e8 86 fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b6d0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b6d4:	58                   	pop    eax
c001b6d5:	5a                   	pop    edx
c001b6d6:	6a 02                	push   0x2
c001b6d8:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b6de:	e8 73 fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b6e3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b6e7:	59                   	pop    ecx
c001b6e8:	5b                   	pop    ebx
c001b6e9:	6a 04                	push   0x4
c001b6eb:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b6f1:	e8 60 fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b6f6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b6fa:	5e                   	pop    esi
c001b6fb:	5f                   	pop    edi
c001b6fc:	6a 07                	push   0x7
c001b6fe:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b704:	e8 4d fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b709:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b70d:	5d                   	pop    ebp
c001b70e:	58                   	pop    eax
c001b70f:	6a 08                	push   0x8
c001b711:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b717:	e8 3a fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b71c:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b720:	58                   	pop    eax
c001b721:	5a                   	pop    edx
c001b722:	6a 09                	push   0x9
c001b724:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b72a:	e8 27 fe fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	0f b6 e8             	movzx  ebp,al
c001b735:	8b 35 f0 c2 03 c0    	mov    esi,DWORD PTR ds:0xc003c2f0
c001b73b:	8b 3d f4 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c2f4
c001b741:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b747:	83 d7 00             	adc    edi,0x0
c001b74a:	83 ec 0c             	sub    esp,0xc
c001b74d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b751:	e8 14 ff ff ff       	call   c001b66a <RTC::get_update_in_progress_flag()>
c001b756:	83 c4 10             	add    esp,0x10
c001b759:	84 c0                	test   al,al
c001b75b:	74 10                	je     c001b76d <RTC::completeRTCRefresh()+0xeb>
c001b75d:	3b 35 f0 c2 03 c0    	cmp    esi,DWORD PTR ds:0xc003c2f0
c001b763:	89 f8                	mov    eax,edi
c001b765:	1b 05 f4 c2 03 c0    	sbb    eax,DWORD PTR ds:0xc003c2f4
c001b76b:	73 dd                	jae    c001b74a <RTC::completeRTCRefresh()+0xc8>
c001b76d:	50                   	push   eax
c001b76e:	50                   	push   eax
c001b76f:	6a 00                	push   0x0
c001b771:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b777:	e8 da fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b77c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b780:	58                   	pop    eax
c001b781:	5a                   	pop    edx
c001b782:	6a 02                	push   0x2
c001b784:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b78a:	e8 c7 fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b78f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b793:	59                   	pop    ecx
c001b794:	5b                   	pop    ebx
c001b795:	6a 04                	push   0x4
c001b797:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b79d:	e8 b4 fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b7a2:	5e                   	pop    esi
c001b7a3:	88 c3                	mov    bl,al
c001b7a5:	5f                   	pop    edi
c001b7a6:	6a 07                	push   0x7
c001b7a8:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b7ae:	e8 a3 fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b7b3:	89 c6                	mov    esi,eax
c001b7b5:	58                   	pop    eax
c001b7b6:	5a                   	pop    edx
c001b7b7:	6a 08                	push   0x8
c001b7b9:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b7bf:	e8 92 fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b7c4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7c8:	59                   	pop    ecx
c001b7c9:	5f                   	pop    edi
c001b7ca:	6a 09                	push   0x9
c001b7cc:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b7d2:	e8 7f fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b7d7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7db:	0f b6 f8             	movzx  edi,al
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b7e4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b7e8:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b7ec:	89 f1                	mov    ecx,esi
c001b7ee:	0f 94 c0             	sete   al
c001b7f1:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b7f5:	0f 94 c2             	sete   dl
c001b7f8:	21 d0                	and    eax,edx
c001b7fa:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b7fe:	0f 94 c2             	sete   dl
c001b801:	21 c2                	and    edx,eax
c001b803:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b807:	0f 94 c0             	sete   al
c001b80a:	21 d0                	and    eax,edx
c001b80c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b810:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b814:	0f 94 c1             	sete   cl
c001b817:	84 c8                	test   al,cl
c001b819:	75 28                	jne    c001b843 <RTC::completeRTCRefresh()+0x1c1>
c001b81b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b81f:	89 fd                	mov    ebp,edi
c001b821:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b825:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b829:	89 f0                	mov    eax,esi
c001b82b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b82f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b833:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b837:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b83a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b83e:	e9 f2 fe ff ff       	jmp    c001b735 <RTC::completeRTCRefresh()+0xb3>
c001b843:	39 fd                	cmp    ebp,edi
c001b845:	75 d4                	jne    c001b81b <RTC::completeRTCRefresh()+0x199>
c001b847:	55                   	push   ebp
c001b848:	55                   	push   ebp
c001b849:	6a 0b                	push   0xb
c001b84b:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b851:	e8 00 fd fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	89 c5                	mov    ebp,eax
c001b85b:	a8 04                	test   al,0x4
c001b85d:	75 75                	jne    c001b8d4 <RTC::completeRTCRefresh()+0x252>
c001b85f:	b1 0a                	mov    cl,0xa
c001b861:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b864:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b867:	83 e2 0f             	and    edx,0xf
c001b86a:	c0 e8 04             	shr    al,0x4
c001b86d:	c1 ef 04             	shr    edi,0x4
c001b870:	f6 e1                	mul    cl
c001b872:	6b ff 0a             	imul   edi,edi,0xa
c001b875:	01 d0                	add    eax,edx
c001b877:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b87b:	88 04 24             	mov    BYTE PTR [esp],al
c001b87e:	83 e2 0f             	and    edx,0xf
c001b881:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b885:	c0 e8 04             	shr    al,0x4
c001b888:	f6 e1                	mul    cl
c001b88a:	01 d0                	add    eax,edx
c001b88c:	88 da                	mov    dl,bl
c001b88e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b892:	83 e2 0f             	and    edx,0xf
c001b895:	88 d8                	mov    al,bl
c001b897:	83 e3 80             	and    ebx,0xffffff80
c001b89a:	c0 e8 04             	shr    al,0x4
c001b89d:	83 e0 07             	and    eax,0x7
c001b8a0:	f6 e1                	mul    cl
c001b8a2:	01 d0                	add    eax,edx
c001b8a4:	89 f2                	mov    edx,esi
c001b8a6:	09 c3                	or     ebx,eax
c001b8a8:	83 e2 0f             	and    edx,0xf
c001b8ab:	89 f0                	mov    eax,esi
c001b8ad:	c0 e8 04             	shr    al,0x4
c001b8b0:	f6 e1                	mul    cl
c001b8b2:	8d 34 02             	lea    esi,[edx+eax*1]
c001b8b5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b8b9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b8bd:	83 e2 0f             	and    edx,0xf
c001b8c0:	c0 e8 04             	shr    al,0x4
c001b8c3:	f6 e1                	mul    cl
c001b8c5:	01 d0                	add    eax,edx
c001b8c7:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b8cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8cf:	83 e0 0f             	and    eax,0xf
c001b8d2:	01 c7                	add    edi,eax
c001b8d4:	83 e5 02             	and    ebp,0x2
c001b8d7:	75 14                	jne    c001b8ed <RTC::completeRTCRefresh()+0x26b>
c001b8d9:	84 db                	test   bl,bl
c001b8db:	79 10                	jns    c001b8ed <RTC::completeRTCRefresh()+0x26b>
c001b8dd:	83 e3 7f             	and    ebx,0x7f
c001b8e0:	b9 18 00 00 00       	mov    ecx,0x18
c001b8e5:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b8e8:	99                   	cdq    
c001b8e9:	f7 f9                	idiv   ecx
c001b8eb:	88 d3                	mov    bl,dl
c001b8ed:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b8f3:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b8f9:	77 06                	ja     c001b901 <RTC::completeRTCRefresh()+0x27f>
c001b8fb:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b901:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b905:	31 d2                	xor    edx,edx
c001b907:	c1 e1 10             	shl    ecx,0x10
c001b90a:	89 d7                	mov    edi,edx
c001b90c:	c1 e5 10             	shl    ebp,0x10
c001b90f:	31 c0                	xor    eax,eax
c001b911:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b917:	09 cf                	or     edi,ecx
c001b919:	89 f1                	mov    ecx,esi
c001b91b:	89 fa                	mov    edx,edi
c001b91d:	88 c8                	mov    al,cl
c001b91f:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b923:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b927:	88 da                	mov    dl,bl
c001b929:	0f b7 c8             	movzx  ecx,ax
c001b92c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b930:	09 e9                	or     ecx,ebp
c001b932:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b935:	0f b6 db             	movzx  ebx,bl
c001b938:	50                   	push   eax
c001b939:	50                   	push   eax
c001b93a:	53                   	push   ebx
c001b93b:	68 78 a6 03 c0       	push   0xc003a678
c001b940:	e8 a5 14 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001b945:	5a                   	pop    edx
c001b946:	59                   	pop    ecx
c001b947:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b94b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b94f:	52                   	push   edx
c001b950:	50                   	push   eax
c001b951:	e8 db 78 ff ff       	call   c0013231 <datetimeToSeconds(datetime_t)>
c001b956:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001b95a:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b960:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001b966:	83 c4 3c             	add    esp,0x3c
c001b969:	5b                   	pop    ebx
c001b96a:	5e                   	pop    esi
c001b96b:	5f                   	pop    edi
c001b96c:	5d                   	pop    ebp
c001b96d:	c3                   	ret    

c001b96e <rtcIRQHandler(regs*, void*)>:
c001b96e:	53                   	push   ebx
c001b96f:	83 ec 10             	sub    esp,0x10
c001b972:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b976:	6a 0c                	push   0xc
c001b978:	ff 35 28 b9 03 c0    	push   DWORD PTR ds:0xc003b928
c001b97e:	e8 d3 fb fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001b983:	83 c4 10             	add    esp,0x10
c001b986:	84 c0                	test   al,al
c001b988:	79 24                	jns    c001b9ae <rtcIRQHandler(regs*, void*)+0x40>
c001b98a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b991:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b998:	66 ff 05 00 d0 03 c0 	inc    WORD PTR ds:0xc003d000
c001b99f:	75 0d                	jne    c001b9ae <rtcIRQHandler(regs*, void*)+0x40>
c001b9a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b9a5:	83 c4 08             	add    esp,0x8
c001b9a8:	5b                   	pop    ebx
c001b9a9:	e9 d4 fc ff ff       	jmp    c001b682 <RTC::completeRTCRefresh()>
c001b9ae:	83 c4 08             	add    esp,0x8
c001b9b1:	5b                   	pop    ebx
c001b9b2:	c3                   	ret    
c001b9b3:	90                   	nop

c001b9b4 <RTC::RTC()>:
c001b9b4:	83 ec 1c             	sub    esp,0x1c
c001b9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9bb:	83 ec 08             	sub    esp,0x8
c001b9be:	68 8e a6 03 c0       	push   0xc003a68e
c001b9c3:	50                   	push   eax
c001b9c4:	e8 43 77 ff ff       	call   c001310c <Clock::Clock(char const*)>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	ba ac a6 03 c0       	mov    edx,0xc003a6ac
c001b9d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9d5:	89 10                	mov    DWORD PTR [eax],edx
c001b9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9db:	83 ec 0c             	sub    esp,0xc
c001b9de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9e2:	6a 01                	push   0x1
c001b9e4:	68 6e b9 01 c0       	push   0xc001b96e
c001b9e9:	6a 08                	push   0x8
c001b9eb:	50                   	push   eax
c001b9ec:	e8 07 7c ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9f1:	83 c4 20             	add    esp,0x20
c001b9f4:	89 c2                	mov    edx,eax
c001b9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9fa:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba00:	e8 6a 28 ff ff       	call   c000e26f <disableIRQs()>
c001ba05:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001ba0a:	83 ec 08             	sub    esp,0x8
c001ba0d:	6a 0b                	push   0xb
c001ba0f:	50                   	push   eax
c001ba10:	e8 41 fb fe ff       	call   c000b556 <Computer::readCMOS(unsigned char)>
c001ba15:	83 c4 10             	add    esp,0x10
c001ba18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ba1c:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001ba21:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ba25:	83 ca 10             	or     edx,0x10
c001ba28:	0f b6 d2             	movzx  edx,dl
c001ba2b:	83 ec 04             	sub    esp,0x4
c001ba2e:	52                   	push   edx
c001ba2f:	6a 0b                	push   0xb
c001ba31:	50                   	push   eax
c001ba32:	e8 27 fc fe ff       	call   c000b65e <Computer::writeCMOS(unsigned char, unsigned char)>
c001ba37:	83 c4 10             	add    esp,0x10
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba41:	e8 3c fc ff ff       	call   c001b682 <RTC::completeRTCRefresh()>
c001ba46:	83 c4 10             	add    esp,0x10
c001ba49:	e8 2f 28 ff ff       	call   c000e27d <enableIRQs()>
c001ba4e:	90                   	nop
c001ba4f:	83 c4 1c             	add    esp,0x1c
c001ba52:	c3                   	ret    
c001ba53:	90                   	nop

c001ba54 <IDE::close(int, int, void*)>:
c001ba54:	83 c8 ff             	or     eax,0xffffffff
c001ba57:	c3                   	ret    

c001ba58 <IDE::IDE()>:
c001ba58:	83 ec 0c             	sub    esp,0xc
c001ba5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5f:	83 ec 08             	sub    esp,0x8
c001ba62:	68 e0 a6 03 c0       	push   0xc003a6e0
c001ba67:	50                   	push   eax
c001ba68:	e8 b9 7f ff ff       	call   c0013a26 <HardDiskController::HardDiskController(char const*)>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	ba 20 a9 03 c0       	mov    edx,0xc003a920
c001ba75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba79:	89 10                	mov    DWORD PTR [eax],edx
c001ba7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ba86:	90                   	nop
c001ba87:	83 c4 0c             	add    esp,0xc
c001ba8a:	c3                   	ret    
c001ba8b:	90                   	nop

c001ba8c <IDE::prepareInterrupt(unsigned char)>:
c001ba8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba95:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ba9d:	c3                   	ret    

c001ba9e <selectDrive(unsigned char, unsigned char)>:
c001ba9e:	c3                   	ret    
c001ba9f:	90                   	nop

c001baa0 <IDE::getBase(unsigned char)>:
c001baa0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001baa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baa9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bab1:	c3                   	ret    

c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bab2:	55                   	push   ebp
c001bab3:	57                   	push   edi
c001bab4:	56                   	push   esi
c001bab5:	53                   	push   ebx
c001bab6:	83 ec 1c             	sub    esp,0x1c
c001bab9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001babd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bac1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bac4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bac8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bacc:	80 f9 03             	cmp    cl,0x3
c001bacf:	77 51                	ja     c001bb22 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bad5:	0f b6 f2             	movzx  esi,dl
c001bad8:	0f b6 db             	movzx  ebx,bl
c001badb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bade:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bae2:	83 ca 80             	or     edx,0xffffff80
c001bae5:	0f b6 d2             	movzx  edx,dl
c001bae8:	52                   	push   edx
c001bae9:	6a 0c                	push   0xc
c001baeb:	56                   	push   esi
c001baec:	57                   	push   edi
c001baed:	e8 c0 ff ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baf2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001baf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bafb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001baff:	ee                   	out    dx,al
c001bb00:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bb05:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bb09:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bb0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bb11:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bb19:	83 c4 2c             	add    esp,0x2c
c001bb1c:	5b                   	pop    ebx
c001bb1d:	5e                   	pop    esi
c001bb1e:	5f                   	pop    edi
c001bb1f:	5d                   	pop    ebp
c001bb20:	eb 90                	jmp    c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb22:	80 fb 07             	cmp    bl,0x7
c001bb25:	77 12                	ja     c001bb39 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bb27:	0f b6 d2             	movzx  edx,dl
c001bb2a:	0f b6 db             	movzx  ebx,bl
c001bb2d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bb35:	89 da                	mov    edx,ebx
c001bb37:	eb 2f                	jmp    c001bb68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bb39:	80 fb 0d             	cmp    bl,0xd
c001bb3c:	77 13                	ja     c001bb51 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bb3e:	0f b6 d2             	movzx  edx,dl
c001bb41:	0f b6 db             	movzx  ebx,bl
c001bb44:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bb4b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bb4f:	eb 17                	jmp    c001bb68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bb51:	80 fb 15             	cmp    bl,0x15
c001bb54:	77 13                	ja     c001bb69 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bb56:	0f b6 d2             	movzx  edx,dl
c001bb59:	0f b6 db             	movzx  ebx,bl
c001bb5c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bb64:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bb68:	ee                   	out    dx,al
c001bb69:	83 c4 1c             	add    esp,0x1c
c001bb6c:	5b                   	pop    ebx
c001bb6d:	5e                   	pop    esi
c001bb6e:	5f                   	pop    edi
c001bb6f:	5d                   	pop    ebp
c001bb70:	c3                   	ret    
c001bb71:	90                   	nop

c001bb72 <IDE::read(unsigned char, unsigned char)>:
c001bb72:	55                   	push   ebp
c001bb73:	57                   	push   edi
c001bb74:	56                   	push   esi
c001bb75:	53                   	push   ebx
c001bb76:	83 ec 1c             	sub    esp,0x1c
c001bb79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb81:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bb84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb88:	3c 03                	cmp    al,0x3
c001bb8a:	77 43                	ja     c001bbcf <IDE::read(unsigned char, unsigned char)+0x5d>
c001bb8c:	0f b6 f2             	movzx  esi,dl
c001bb8f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bb92:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bb96:	83 c8 80             	or     eax,0xffffff80
c001bb99:	0f b6 c0             	movzx  eax,al
c001bb9c:	50                   	push   eax
c001bb9d:	6a 0c                	push   0xc
c001bb9f:	56                   	push   esi
c001bba0:	57                   	push   edi
c001bba1:	e8 0c ff ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bba6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bbab:	0f b6 c3             	movzx  eax,bl
c001bbae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bbb2:	ec                   	in     al,dx
c001bbb3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bbb7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bbbc:	52                   	push   edx
c001bbbd:	6a 0c                	push   0xc
c001bbbf:	56                   	push   esi
c001bbc0:	57                   	push   edi
c001bbc1:	e8 ec fe ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbc6:	83 c4 20             	add    esp,0x20
c001bbc9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bbcd:	eb 49                	jmp    c001bc18 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bbcf:	80 fb 07             	cmp    bl,0x7
c001bbd2:	77 12                	ja     c001bbe6 <IDE::read(unsigned char, unsigned char)+0x74>
c001bbd4:	0f b6 d2             	movzx  edx,dl
c001bbd7:	0f b6 c3             	movzx  eax,bl
c001bbda:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bbe2:	89 c2                	mov    edx,eax
c001bbe4:	eb 31                	jmp    c001bc17 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bbe6:	80 fb 0d             	cmp    bl,0xd
c001bbe9:	77 13                	ja     c001bbfe <IDE::read(unsigned char, unsigned char)+0x8c>
c001bbeb:	0f b6 d2             	movzx  edx,dl
c001bbee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bbf5:	0f b6 d3             	movzx  edx,bl
c001bbf8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bbfc:	eb 19                	jmp    c001bc17 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bbfe:	31 c0                	xor    eax,eax
c001bc00:	80 fb 15             	cmp    bl,0x15
c001bc03:	77 13                	ja     c001bc18 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc05:	0f b6 d2             	movzx  edx,dl
c001bc08:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bc10:	0f b6 d3             	movzx  edx,bl
c001bc13:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bc17:	ec                   	in     al,dx
c001bc18:	83 c4 1c             	add    esp,0x1c
c001bc1b:	5b                   	pop    ebx
c001bc1c:	5e                   	pop    esi
c001bc1d:	5f                   	pop    edi
c001bc1e:	5d                   	pop    ebp
c001bc1f:	c3                   	ret    

c001bc20 <IDE::waitInterrupt(unsigned char)>:
c001bc20:	55                   	push   ebp
c001bc21:	57                   	push   edi
c001bc22:	56                   	push   esi
c001bc23:	53                   	push   ebx
c001bc24:	31 db                	xor    ebx,ebx
c001bc26:	83 ec 0c             	sub    esp,0xc
c001bc29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bc2d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bc32:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bc3a:	89 e8                	mov    eax,ebp
c001bc3c:	84 c0                	test   al,al
c001bc3e:	75 34                	jne    c001bc74 <IDE::waitInterrupt(unsigned char)+0x54>
c001bc40:	52                   	push   edx
c001bc41:	6a 0c                	push   0xc
c001bc43:	56                   	push   esi
c001bc44:	57                   	push   edi
c001bc45:	e8 28 ff ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	a8 01                	test   al,0x1
c001bc4f:	75 2b                	jne    c001bc7c <IDE::waitInterrupt(unsigned char)+0x5c>
c001bc51:	f6 c3 04             	test   bl,0x4
c001bc54:	75 16                	jne    c001bc6c <IDE::waitInterrupt(unsigned char)+0x4c>
c001bc56:	83 fb 32             	cmp    ebx,0x32
c001bc59:	7e 11                	jle    c001bc6c <IDE::waitInterrupt(unsigned char)+0x4c>
c001bc5b:	50                   	push   eax
c001bc5c:	50                   	push   eax
c001bc5d:	6a 00                	push   0x0
c001bc5f:	68 80 96 98 00       	push   0x989680
c001bc64:	e8 dc 2c ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c001bc69:	83 c4 10             	add    esp,0x10
c001bc6c:	83 fb 3c             	cmp    ebx,0x3c
c001bc6f:	74 0b                	je     c001bc7c <IDE::waitInterrupt(unsigned char)+0x5c>
c001bc71:	43                   	inc    ebx
c001bc72:	eb be                	jmp    c001bc32 <IDE::waitInterrupt(unsigned char)+0x12>
c001bc74:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bc7c:	83 c4 0c             	add    esp,0xc
c001bc7f:	89 e8                	mov    eax,ebp
c001bc81:	5b                   	pop    ebx
c001bc82:	5e                   	pop    esi
c001bc83:	5f                   	pop    edi
c001bc84:	5d                   	pop    ebp
c001bc85:	c3                   	ret    

c001bc86 <ideChannel0IRQHandler(regs*, void*)>:
c001bc86:	83 ec 10             	sub    esp,0x10
c001bc89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc8d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bc94:	6a 07                	push   0x7
c001bc96:	6a 00                	push   0x0
c001bc98:	50                   	push   eax
c001bc99:	e8 d4 fe ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001bc9e:	83 c4 1c             	add    esp,0x1c
c001bca1:	c3                   	ret    

c001bca2 <ideChannel1IRQHandler(regs*, void*)>:
c001bca2:	83 ec 10             	sub    esp,0x10
c001bca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bca9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bcb0:	6a 07                	push   0x7
c001bcb2:	6a 01                	push   0x1
c001bcb4:	50                   	push   eax
c001bcb5:	e8 b8 fe ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001bcba:	83 c4 1c             	add    esp,0x1c
c001bcbd:	c3                   	ret    

c001bcbe <IDE::enableIRQs(unsigned char, bool)>:
c001bcbe:	57                   	push   edi
c001bcbf:	56                   	push   esi
c001bcc0:	be 04 00 00 00       	mov    esi,0x4
c001bcc5:	53                   	push   ebx
c001bcc6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bccf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bcd4:	0f 94 c0             	sete   al
c001bcd7:	d1 e0                	shl    eax,1
c001bcd9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bce0:	0f b6 c0             	movzx  eax,al
c001bce3:	50                   	push   eax
c001bce4:	6a 0c                	push   0xc
c001bce6:	57                   	push   edi
c001bce7:	53                   	push   ebx
c001bce8:	e8 c5 fd ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	50                   	push   eax
c001bcf1:	6a 0c                	push   0xc
c001bcf3:	57                   	push   edi
c001bcf4:	53                   	push   ebx
c001bcf5:	e8 78 fe ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	4e                   	dec    esi
c001bcfe:	75 f0                	jne    c001bcf0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bd00:	5b                   	pop    ebx
c001bd01:	5e                   	pop    esi
c001bd02:	5f                   	pop    edi
c001bd03:	c3                   	ret    

c001bd04 <IDE::open(int, int, void*)>:
c001bd04:	55                   	push   ebp
c001bd05:	57                   	push   edi
c001bd06:	56                   	push   esi
c001bd07:	53                   	push   ebx
c001bd08:	83 ec 1c             	sub    esp,0x1c
c001bd0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bd0f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bd18:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bd21:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bd28:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bd2f:	0f 85 b0 02 00 00    	jne    c001bfe5 <IDE::open(int, int, void*)+0x2e1>
c001bd35:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bd3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bd3f:	83 e0 7f             	and    eax,0x7f
c001bd42:	3c 05                	cmp    al,0x5
c001bd44:	74 04                	je     c001bd4a <IDE::open(int, int, void*)+0x46>
c001bd46:	3c 0f                	cmp    al,0xf
c001bd48:	75 32                	jne    c001bd7c <IDE::open(int, int, void*)+0x78>
c001bd4a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bd50:	83 e0 fc             	and    eax,0xfffffffc
c001bd53:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd5a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bd60:	83 e0 fc             	and    eax,0xfffffffc
c001bd63:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd6a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bd70:	83 e0 fc             	and    eax,0xfffffffc
c001bd73:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd7a:	eb 14                	jmp    c001bd90 <IDE::open(int, int, void*)+0x8c>
c001bd7c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bd86:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bd90:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bd97:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bd9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bda2:	89 c6                	mov    esi,eax
c001bda4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bda9:	c1 e6 10             	shl    esi,0x10
c001bdac:	89 e8                	mov    eax,ebp
c001bdae:	89 fa                	mov    edx,edi
c001bdb0:	c1 e0 0b             	shl    eax,0xb
c001bdb3:	09 f0                	or     eax,esi
c001bdb5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bdbc:	c1 e6 08             	shl    esi,0x8
c001bdbf:	09 c6                	or     esi,eax
c001bdc1:	89 f0                	mov    eax,esi
c001bdc3:	0d 08 00 00 80       	or     eax,0x80000008
c001bdc8:	ef                   	out    dx,eax
c001bdc9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bdce:	89 ca                	mov    edx,ecx
c001bdd0:	ed                   	in     eax,dx
c001bdd1:	c1 e8 10             	shr    eax,0x10
c001bdd4:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdd9:	0f 84 f5 00 00 00    	je     c001bed4 <IDE::open(int, int, void*)+0x1d0>
c001bddf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bde5:	89 fa                	mov    edx,edi
c001bde7:	89 f0                	mov    eax,esi
c001bde9:	ef                   	out    dx,eax
c001bdea:	b0 fe                	mov    al,0xfe
c001bdec:	89 ca                	mov    edx,ecx
c001bdee:	ee                   	out    dx,al
c001bdef:	89 f0                	mov    eax,esi
c001bdf1:	89 fa                	mov    edx,edi
c001bdf3:	ef                   	out    dx,eax
c001bdf4:	89 ca                	mov    edx,ecx
c001bdf6:	ed                   	in     eax,dx
c001bdf7:	3c fe                	cmp    al,0xfe
c001bdf9:	0f 85 a9 00 00 00    	jne    c001bea8 <IDE::open(int, int, void*)+0x1a4>
c001bdff:	8b 15 28 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b928
c001be05:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001be0c:	74 33                	je     c001be41 <IDE::open(int, int, void*)+0x13d>
c001be0e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001be14:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001be18:	40                   	inc    eax
c001be19:	83 ec 0c             	sub    esp,0xc
c001be1c:	0f b6 c0             	movzx  eax,al
c001be1f:	50                   	push   eax
c001be20:	55                   	push   ebp
c001be21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be25:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001be2b:	51                   	push   ecx
c001be2c:	e8 07 a9 ff ff       	call   c0016738 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001be31:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001be36:	83 c4 1c             	add    esp,0x1c
c001be39:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be3f:	eb 0a                	jmp    c001be4b <IDE::open(int, int, void*)+0x147>
c001be41:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001be4b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001be52:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001be59:	c1 e1 10             	shl    ecx,0x10
c001be5c:	c1 e0 08             	shl    eax,0x8
c001be5f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be64:	09 c1                	or     ecx,eax
c001be66:	89 fa                	mov    edx,edi
c001be68:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001be6f:	c1 e0 0b             	shl    eax,0xb
c001be72:	09 c1                	or     ecx,eax
c001be74:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001be7a:	89 c8                	mov    eax,ecx
c001be7c:	ef                   	out    dx,eax
c001be7d:	be fc 0c 00 00       	mov    esi,0xcfc
c001be82:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001be88:	89 f2                	mov    edx,esi
c001be8a:	ee                   	out    dx,al
c001be8b:	89 c8                	mov    eax,ecx
c001be8d:	89 fa                	mov    edx,edi
c001be8f:	ef                   	out    dx,eax
c001be90:	89 f2                	mov    edx,esi
c001be92:	ed                   	in     eax,dx
c001be93:	0f b6 c0             	movzx  eax,al
c001be96:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001be9c:	74 46                	je     c001bee4 <IDE::open(int, int, void*)+0x1e0>
c001be9e:	83 ec 0c             	sub    esp,0xc
c001bea1:	68 f8 a6 03 c0       	push   0xc003a6f8
c001bea6:	eb 34                	jmp    c001bedc <IDE::open(int, int, void*)+0x1d8>
c001bea8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001beb1:	75 17                	jne    c001beca <IDE::open(int, int, void*)+0x1c6>
c001beb3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001beb8:	74 07                	je     c001bec1 <IDE::open(int, int, void*)+0x1bd>
c001beba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bebf:	75 09                	jne    c001beca <IDE::open(int, int, void*)+0x1c6>
c001bec1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bec8:	eb 1a                	jmp    c001bee4 <IDE::open(int, int, void*)+0x1e0>
c001beca:	83 ec 0c             	sub    esp,0xc
c001becd:	68 00 a7 03 c0       	push   0xc003a700
c001bed2:	eb 08                	jmp    c001bedc <IDE::open(int, int, void*)+0x1d8>
c001bed4:	83 ec 0c             	sub    esp,0xc
c001bed7:	68 31 a7 03 c0       	push   0xc003a731
c001bedc:	e8 27 10 ff ff       	call   c000cf08 <panic(char const*)>
c001bee1:	83 c4 10             	add    esp,0x10
c001bee4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001beeb:	79 1a                	jns    c001bf07 <IDE::open(int, int, void*)+0x203>
c001beed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bef3:	83 e0 fc             	and    eax,0xfffffffc
c001bef6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001befd:	83 c0 08             	add    eax,0x8
c001bf00:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bf07:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bf0d:	89 c2                	mov    edx,eax
c001bf0f:	83 e2 0f             	and    edx,0xf
c001bf12:	66 83 fa 08          	cmp    dx,0x8
c001bf16:	75 0a                	jne    c001bf22 <IDE::open(int, int, void*)+0x21e>
c001bf18:	83 e8 02             	sub    eax,0x2
c001bf1b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf22:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bf28:	89 c2                	mov    edx,eax
c001bf2a:	83 e2 0f             	and    edx,0xf
c001bf2d:	66 83 fa 08          	cmp    dx,0x8
c001bf31:	75 0a                	jne    c001bf3d <IDE::open(int, int, void*)+0x239>
c001bf33:	83 e8 02             	sub    eax,0x2
c001bf36:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bf3d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bf44:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bf4b:	89 d0                	mov    eax,edx
c001bf4d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf50:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf54:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bf58:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bf5b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bf60:	0f b6 c9             	movzx  ecx,cl
c001bf63:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bf6a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bf6d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf71:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bf75:	8d 50 02             	lea    edx,[eax+0x2]
c001bf78:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bf7d:	0f b6 d2             	movzx  edx,dl
c001bf80:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bf86:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf89:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf8d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bf91:	8d 48 03             	lea    ecx,[eax+0x3]
c001bf94:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bf99:	0f b6 c9             	movzx  ecx,cl
c001bf9c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bfa2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bfa5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bfa9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bfad:	8d 50 04             	lea    edx,[eax+0x4]
c001bfb0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bfb6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bfbb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bfc2:	66 85 f6             	test   si,si
c001bfc5:	74 3e                	je     c001c005 <IDE::open(int, int, void*)+0x301>
c001bfc7:	0f b6 d2             	movzx  edx,dl
c001bfca:	83 c0 05             	add    eax,0x5
c001bfcd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bfd0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bfd4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bfd8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bfde:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bfe3:	eb 20                	jmp    c001c005 <IDE::open(int, int, void*)+0x301>
c001bfe5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bfef:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bff9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c000:	e9 02 ff ff ff       	jmp    c001bf07 <IDE::open(int, int, void*)+0x203>
c001c005:	52                   	push   edx
c001c006:	52                   	push   edx
c001c007:	6a 00                	push   0x0
c001c009:	53                   	push   ebx
c001c00a:	e8 7d fa ff ff       	call   c001ba8c <IDE::prepareInterrupt(unsigned char)>
c001c00f:	59                   	pop    ecx
c001c010:	5e                   	pop    esi
c001c011:	6a 01                	push   0x1
c001c013:	53                   	push   ebx
c001c014:	e8 73 fa ff ff       	call   c001ba8c <IDE::prepareInterrupt(unsigned char)>
c001c019:	83 c4 0c             	add    esp,0xc
c001c01c:	6a 00                	push   0x0
c001c01e:	6a 00                	push   0x0
c001c020:	53                   	push   ebx
c001c021:	e8 98 fc ff ff       	call   c001bcbe <IDE::enableIRQs(unsigned char, bool)>
c001c026:	83 c4 0c             	add    esp,0xc
c001c029:	6a 00                	push   0x0
c001c02b:	6a 01                	push   0x1
c001c02d:	53                   	push   ebx
c001c02e:	e8 8b fc ff ff       	call   c001bcbe <IDE::enableIRQs(unsigned char, bool)>
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c03d:	74 40                	je     c001c07f <IDE::open(int, int, void*)+0x37b>
c001c03f:	83 ec 0c             	sub    esp,0xc
c001c042:	68 5b a7 03 c0       	push   0xc003a75b
c001c047:	e8 9e 0d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c04c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c04f:	6a 01                	push   0x1
c001c051:	68 86 bc 01 c0       	push   0xc001bc86
c001c056:	6a 0e                	push   0xe
c001c058:	53                   	push   ebx
c001c059:	e8 9a 75 ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c05e:	83 c4 14             	add    esp,0x14
c001c061:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c067:	53                   	push   ebx
c001c068:	6a 01                	push   0x1
c001c06a:	68 a2 bc 01 c0       	push   0xc001bca2
c001c06f:	6a 0f                	push   0xf
c001c071:	53                   	push   ebx
c001c072:	e8 81 75 ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c077:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c07d:	eb 4a                	jmp    c001c0c9 <IDE::open(int, int, void*)+0x3c5>
c001c07f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c089:	50                   	push   eax
c001c08a:	6a 0f                	push   0xf
c001c08c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c092:	68 77 a7 03 c0       	push   0xc003a777
c001c097:	e8 4e 0d ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c09c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c09f:	6a 00                	push   0x0
c001c0a1:	68 86 bc 01 c0       	push   0xc001bc86
c001c0a6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c0ac:	53                   	push   ebx
c001c0ad:	e8 46 75 ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0b2:	83 c4 14             	add    esp,0x14
c001c0b5:	53                   	push   ebx
c001c0b6:	6a 00                	push   0x0
c001c0b8:	68 a2 bc 01 c0       	push   0xc001bca2
c001c0bd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c0c3:	53                   	push   ebx
c001c0c4:	e8 2f 75 ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0cb:	83 c4 20             	add    esp,0x20
c001c0ce:	83 ec 0c             	sub    esp,0xc
c001c0d1:	53                   	push   ebx
c001c0d2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c0d5:	83 c4 0c             	add    esp,0xc
c001c0d8:	6a 07                	push   0x7
c001c0da:	6a 00                	push   0x0
c001c0dc:	53                   	push   ebx
c001c0dd:	e8 90 fa ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c0e2:	83 c4 0c             	add    esp,0xc
c001c0e5:	6a 07                	push   0x7
c001c0e7:	6a 01                	push   0x1
c001c0e9:	53                   	push   ebx
c001c0ea:	e8 83 fa ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c0ef:	83 c4 0c             	add    esp,0xc
c001c0f2:	6a 01                	push   0x1
c001c0f4:	6a 00                	push   0x0
c001c0f6:	53                   	push   ebx
c001c0f7:	e8 c2 fb ff ff       	call   c001bcbe <IDE::enableIRQs(unsigned char, bool)>
c001c0fc:	83 c4 0c             	add    esp,0xc
c001c0ff:	6a 01                	push   0x1
c001c101:	6a 01                	push   0x1
c001c103:	53                   	push   ebx
c001c104:	e8 b5 fb ff ff       	call   c001bcbe <IDE::enableIRQs(unsigned char, bool)>
c001c109:	83 c4 2c             	add    esp,0x2c
c001c10c:	31 c0                	xor    eax,eax
c001c10e:	5b                   	pop    ebx
c001c10f:	5e                   	pop    esi
c001c110:	5f                   	pop    edi
c001c111:	5d                   	pop    ebp
c001c112:	c3                   	ret    
c001c113:	90                   	nop

c001c114 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c114:	55                   	push   ebp
c001c115:	57                   	push   edi
c001c116:	56                   	push   esi
c001c117:	53                   	push   ebx
c001c118:	83 ec 1c             	sub    esp,0x1c
c001c11b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c11f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c123:	8d 50 f8             	lea    edx,[eax-0x8]
c001c126:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c12a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c12e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c132:	80 fa 03             	cmp    dl,0x3
c001c135:	77 5d                	ja     c001c194 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c13b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c13f:	0f b6 db             	movzx  ebx,bl
c001c142:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c145:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c149:	83 ca 80             	or     edx,0xffffff80
c001c14c:	0f b6 d2             	movzx  edx,dl
c001c14f:	52                   	push   edx
c001c150:	6a 0c                	push   0xc
c001c152:	53                   	push   ebx
c001c153:	56                   	push   esi
c001c154:	e8 59 f9 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c159:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c15e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c162:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c166:	0f b6 c0             	movzx  eax,al
c001c169:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c16d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c16f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c174:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c178:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c17c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c180:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c188:	83 c4 2c             	add    esp,0x2c
c001c18b:	5b                   	pop    ebx
c001c18c:	5e                   	pop    esi
c001c18d:	5f                   	pop    edi
c001c18e:	5d                   	pop    ebp
c001c18f:	e9 1e f9 ff ff       	jmp    c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c194:	3c 07                	cmp    al,0x7
c001c196:	77 10                	ja     c001c1a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c198:	0f b6 db             	movzx  ebx,bl
c001c19b:	0f b6 d0             	movzx  edx,al
c001c19e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c1a6:	eb 2d                	jmp    c001c1d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c1a8:	3c 0d                	cmp    al,0xd
c001c1aa:	77 13                	ja     c001c1bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c1ac:	0f b6 db             	movzx  ebx,bl
c001c1af:	0f b6 c0             	movzx  eax,al
c001c1b2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c1b9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c1bd:	eb 16                	jmp    c001c1d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c1bf:	3c 15                	cmp    al,0x15
c001c1c1:	77 14                	ja     c001c1d7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c1c3:	0f b6 db             	movzx  ebx,bl
c001c1c6:	0f b6 c0             	movzx  eax,al
c001c1c9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c1d1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c1d5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c1d7:	83 c4 1c             	add    esp,0x1c
c001c1da:	5b                   	pop    ebx
c001c1db:	5e                   	pop    esi
c001c1dc:	5f                   	pop    edi
c001c1dd:	5d                   	pop    ebp
c001c1de:	c3                   	ret    
c001c1df:	90                   	nop

c001c1e0 <IDE::detect()>:
c001c1e0:	55                   	push   ebp
c001c1e1:	57                   	push   edi
c001c1e2:	56                   	push   esi
c001c1e3:	53                   	push   ebx
c001c1e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c1ea:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c1f1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c1f8:	0f 85 be 02 00 00    	jne    c001c4bc <IDE::detect()+0x2dc>
c001c1fe:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c205:	31 f6                	xor    esi,esi
c001c207:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c20f:	31 ed                	xor    ebp,ebp
c001c211:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c215:	c1 e0 06             	shl    eax,0x6
c001c218:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c220:	89 e8                	mov    eax,ebp
c001c222:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c226:	c1 e0 04             	shl    eax,0x4
c001c229:	83 c8 a0             	or     eax,0xffffffa0
c001c22c:	0f b6 c0             	movzx  eax,al
c001c22f:	50                   	push   eax
c001c230:	6a 06                	push   0x6
c001c232:	56                   	push   esi
c001c233:	53                   	push   ebx
c001c234:	e8 79 f8 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	6a 0c                	push   0xc
c001c23e:	56                   	push   esi
c001c23f:	53                   	push   ebx
c001c240:	e8 2d f9 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c245:	83 c4 0c             	add    esp,0xc
c001c248:	6a 0c                	push   0xc
c001c24a:	56                   	push   esi
c001c24b:	53                   	push   ebx
c001c24c:	e8 21 f9 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c251:	83 c4 0c             	add    esp,0xc
c001c254:	6a 0c                	push   0xc
c001c256:	56                   	push   esi
c001c257:	53                   	push   ebx
c001c258:	e8 15 f9 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c25d:	83 c4 0c             	add    esp,0xc
c001c260:	6a 0c                	push   0xc
c001c262:	56                   	push   esi
c001c263:	53                   	push   ebx
c001c264:	e8 09 f9 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c269:	68 ec 00 00 00       	push   0xec
c001c26e:	6a 07                	push   0x7
c001c270:	56                   	push   esi
c001c271:	53                   	push   ebx
c001c272:	e8 3b f8 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c277:	83 c4 1c             	add    esp,0x1c
c001c27a:	6a 0c                	push   0xc
c001c27c:	56                   	push   esi
c001c27d:	53                   	push   ebx
c001c27e:	e8 ef f8 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c283:	83 c4 0c             	add    esp,0xc
c001c286:	6a 0c                	push   0xc
c001c288:	56                   	push   esi
c001c289:	53                   	push   ebx
c001c28a:	e8 e3 f8 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c28f:	83 c4 0c             	add    esp,0xc
c001c292:	6a 0c                	push   0xc
c001c294:	56                   	push   esi
c001c295:	53                   	push   ebx
c001c296:	e8 d7 f8 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c29b:	83 c4 0c             	add    esp,0xc
c001c29e:	6a 0c                	push   0xc
c001c2a0:	56                   	push   esi
c001c2a1:	53                   	push   ebx
c001c2a2:	e8 cb f8 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c2a7:	83 c4 0c             	add    esp,0xc
c001c2aa:	6a 0c                	push   0xc
c001c2ac:	56                   	push   esi
c001c2ad:	53                   	push   ebx
c001c2ae:	e8 bf f8 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	84 c0                	test   al,al
c001c2b8:	0f 84 8b 01 00 00    	je     c001c449 <IDE::detect()+0x269>
c001c2be:	31 ff                	xor    edi,edi
c001c2c0:	50                   	push   eax
c001c2c1:	6a 0c                	push   0xc
c001c2c3:	56                   	push   esi
c001c2c4:	53                   	push   ebx
c001c2c5:	e8 a8 f8 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c2ca:	83 c4 10             	add    esp,0x10
c001c2cd:	a8 01                	test   al,0x1
c001c2cf:	0f 85 8e 01 00 00    	jne    c001c463 <IDE::detect()+0x283>
c001c2d5:	84 c0                	test   al,al
c001c2d7:	78 04                	js     c001c2dd <IDE::detect()+0xfd>
c001c2d9:	a8 08                	test   al,0x8
c001c2db:	75 27                	jne    c001c304 <IDE::detect()+0x124>
c001c2dd:	47                   	inc    edi
c001c2de:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c2e4:	7e da                	jle    c001c2c0 <IDE::detect()+0xe0>
c001c2e6:	50                   	push   eax
c001c2e7:	50                   	push   eax
c001c2e8:	6a 00                	push   0x0
c001c2ea:	68 40 4b 4c 00       	push   0x4c4b40
c001c2ef:	e8 51 26 ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c001c2f4:	83 c4 10             	add    esp,0x10
c001c2f7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c2fd:	75 c1                	jne    c001c2c0 <IDE::detect()+0xe0>
c001c2ff:	e9 5f 01 00 00       	jmp    c001c463 <IDE::detect()+0x283>
c001c304:	31 c9                	xor    ecx,ecx
c001c306:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c30a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c30e:	83 ec 0c             	sub    esp,0xc
c001c311:	68 80 00 00 00       	push   0x80
c001c316:	57                   	push   edi
c001c317:	6a 00                	push   0x0
c001c319:	56                   	push   esi
c001c31a:	53                   	push   ebx
c001c31b:	e8 f4 fd ff ff       	call   c001c114 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c320:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c325:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c329:	89 d1                	mov    ecx,edx
c001c32b:	c1 e0 06             	shl    eax,0x6
c001c32e:	01 d8                	add    eax,ebx
c001c330:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c337:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c33e:	89 f2                	mov    edx,esi
c001c340:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c346:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c34a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c350:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c354:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c35b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c363:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c36a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c372:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c378:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c37f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c385:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c389:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c38d:	83 c4 20             	add    esp,0x20
c001c390:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c393:	83 c0 02             	add    eax,0x2
c001c396:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c39c:	83 c7 02             	add    edi,0x2
c001c39f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c3a2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c3a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c3ac:	75 e2                	jne    c001c390 <IDE::detect()+0x1b0>
c001c3ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3b2:	c1 e0 06             	shl    eax,0x6
c001c3b5:	01 d8                	add    eax,ebx
c001c3b7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c3bd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c3c4:	66 c1 ea 09          	shr    dx,0x9
c001c3c8:	83 e2 01             	and    edx,0x1
c001c3cb:	84 c9                	test   cl,cl
c001c3cd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c3d3:	75 2f                	jne    c001c404 <IDE::detect()+0x224>
c001c3d5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c3db:	85 c0                	test   eax,eax
c001c3dd:	74 66                	je     c001c445 <IDE::detect()+0x265>
c001c3df:	50                   	push   eax
c001c3e0:	55                   	push   ebp
c001c3e1:	56                   	push   esi
c001c3e2:	68 93 a7 03 c0       	push   0xc003a793
c001c3e7:	e8 fe 09 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c3ec:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c3f3:	e8 a2 5f ff ff       	call   c001239a <operator new(unsigned long)>
c001c3f8:	89 c7                	mov    edi,eax
c001c3fa:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3fd:	e8 e8 02 00 00       	call   c001c6ea <ATA::ATA()>
c001c402:	eb 28                	jmp    c001c42c <IDE::detect()+0x24c>
c001c404:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c40a:	55                   	push   ebp
c001c40b:	56                   	push   esi
c001c40c:	68 c2 a7 03 c0       	push   0xc003a7c2
c001c411:	e8 d4 09 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c416:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c41d:	e8 78 5f ff ff       	call   c001239a <operator new(unsigned long)>
c001c422:	89 c7                	mov    edi,eax
c001c424:	89 04 24             	mov    DWORD PTR [esp],eax
c001c427:	e8 ee 08 00 00       	call   c001cd1a <ATAPI::ATAPI()>
c001c42c:	5a                   	pop    edx
c001c42d:	59                   	pop    ecx
c001c42e:	57                   	push   edi
c001c42f:	53                   	push   ebx
c001c430:	e8 6f 72 ff ff       	call   c00136a4 <Device::addChild(Device*)>
c001c435:	8b 07                	mov    eax,DWORD PTR [edi]
c001c437:	53                   	push   ebx
c001c438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c43c:	6a 00                	push   0x0
c001c43e:	57                   	push   edi
c001c43f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c442:	83 c4 20             	add    esp,0x20
c001c445:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c449:	4d                   	dec    ebp
c001c44a:	74 0a                	je     c001c456 <IDE::detect()+0x276>
c001c44c:	bd 01 00 00 00       	mov    ebp,0x1
c001c451:	e9 bb fd ff ff       	jmp    c001c211 <IDE::detect()+0x31>
c001c456:	4e                   	dec    esi
c001c457:	74 63                	je     c001c4bc <IDE::detect()+0x2dc>
c001c459:	be 01 00 00 00       	mov    esi,0x1
c001c45e:	e9 ac fd ff ff       	jmp    c001c20f <IDE::detect()+0x2f>
c001c463:	50                   	push   eax
c001c464:	6a 04                	push   0x4
c001c466:	56                   	push   esi
c001c467:	53                   	push   ebx
c001c468:	e8 05 f7 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c46d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c471:	83 c4 0c             	add    esp,0xc
c001c474:	6a 05                	push   0x5
c001c476:	56                   	push   esi
c001c477:	53                   	push   ebx
c001c478:	e8 f5 f6 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c484:	80 fa 14             	cmp    dl,0x14
c001c487:	75 04                	jne    c001c48d <IDE::detect()+0x2ad>
c001c489:	3c eb                	cmp    al,0xeb
c001c48b:	eb 07                	jmp    c001c494 <IDE::detect()+0x2b4>
c001c48d:	3c 96                	cmp    al,0x96
c001c48f:	75 b8                	jne    c001c449 <IDE::detect()+0x269>
c001c491:	80 fa 69             	cmp    dl,0x69
c001c494:	75 b3                	jne    c001c449 <IDE::detect()+0x269>
c001c496:	68 a1 00 00 00       	push   0xa1
c001c49b:	6a 07                	push   0x7
c001c49d:	56                   	push   esi
c001c49e:	53                   	push   ebx
c001c49f:	e8 0e f6 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a4:	5f                   	pop    edi
c001c4a5:	58                   	pop    eax
c001c4a6:	6a 00                	push   0x0
c001c4a8:	68 40 42 0f 00       	push   0xf4240
c001c4ad:	e8 93 24 ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c001c4b2:	83 c4 10             	add    esp,0x10
c001c4b5:	b1 01                	mov    cl,0x1
c001c4b7:	e9 4a fe ff ff       	jmp    c001c306 <IDE::detect()+0x126>
c001c4bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c4c2:	5b                   	pop    ebx
c001c4c3:	5e                   	pop    esi
c001c4c4:	5f                   	pop    edi
c001c4c5:	5d                   	pop    ebp
c001c4c6:	c3                   	ret    
c001c4c7:	90                   	nop

c001c4c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c4c8:	55                   	push   ebp
c001c4c9:	57                   	push   edi
c001c4ca:	56                   	push   esi
c001c4cb:	53                   	push   ebx
c001c4cc:	83 ec 1c             	sub    esp,0x1c
c001c4cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c4d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c4d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c4db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c4df:	88 c3                	mov    bl,al
c001c4e1:	84 c0                	test   al,al
c001c4e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4e7:	0f 84 67 01 00 00    	je     c001c654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	68 f3 a7 03 c0       	push   0xc003a7f3
c001c4f5:	e8 f0 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c4fa:	83 c4 10             	add    esp,0x10
c001c4fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c501:	3c 01                	cmp    al,0x1
c001c503:	75 17                	jne    c001c51c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c505:	83 ec 0c             	sub    esp,0xc
c001c508:	b3 13                	mov    bl,0x13
c001c50a:	68 ff a7 03 c0       	push   0xc003a7ff
c001c50f:	e8 d6 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	e9 25 01 00 00       	jmp    c001c641 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c51c:	3c 02                	cmp    al,0x2
c001c51e:	0f 85 ef 00 00 00    	jne    c001c613 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c524:	d1 e6                	shl    esi,1
c001c526:	09 ee                	or     esi,ebp
c001c528:	52                   	push   edx
c001c529:	89 f0                	mov    eax,esi
c001c52b:	6a 01                	push   0x1
c001c52d:	0f b6 f0             	movzx  esi,al
c001c530:	c1 e6 06             	shl    esi,0x6
c001c533:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c53b:	50                   	push   eax
c001c53c:	57                   	push   edi
c001c53d:	e8 30 f6 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c542:	83 c4 10             	add    esp,0x10
c001c545:	89 c6                	mov    esi,eax
c001c547:	a8 01                	test   al,0x1
c001c549:	74 12                	je     c001c55d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c54b:	83 ec 0c             	sub    esp,0xc
c001c54e:	b3 07                	mov    bl,0x7
c001c550:	68 14 a8 03 c0       	push   0xc003a814
c001c555:	e8 90 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c55a:	83 c4 10             	add    esp,0x10
c001c55d:	f7 c6 02 00 00 00    	test   esi,0x2
c001c563:	74 12                	je     c001c577 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c565:	83 ec 0c             	sub    esp,0xc
c001c568:	b3 03                	mov    bl,0x3
c001c56a:	68 32 a8 03 c0       	push   0xc003a832
c001c56f:	e8 76 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	f7 c6 04 00 00 00    	test   esi,0x4
c001c57d:	74 12                	je     c001c591 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c57f:	83 ec 0c             	sub    esp,0xc
c001c582:	b3 14                	mov    bl,0x14
c001c584:	68 52 a8 03 c0       	push   0xc003a852
c001c589:	e8 5c 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	f7 c6 08 00 00 00    	test   esi,0x8
c001c597:	74 12                	je     c001c5ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c599:	83 ec 0c             	sub    esp,0xc
c001c59c:	b3 03                	mov    bl,0x3
c001c59e:	68 32 a8 03 c0       	push   0xc003a832
c001c5a3:	e8 42 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c5a8:	83 c4 10             	add    esp,0x10
c001c5ab:	f7 c6 10 00 00 00    	test   esi,0x10
c001c5b1:	74 12                	je     c001c5c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c5b3:	83 ec 0c             	sub    esp,0xc
c001c5b6:	b3 15                	mov    bl,0x15
c001c5b8:	68 6a a8 03 c0       	push   0xc003a86a
c001c5bd:	e8 28 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c5c2:	83 c4 10             	add    esp,0x10
c001c5c5:	f7 c6 20 00 00 00    	test   esi,0x20
c001c5cb:	74 12                	je     c001c5df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c5cd:	83 ec 0c             	sub    esp,0xc
c001c5d0:	b3 03                	mov    bl,0x3
c001c5d2:	68 32 a8 03 c0       	push   0xc003a832
c001c5d7:	e8 0e 08 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c5dc:	83 c4 10             	add    esp,0x10
c001c5df:	f7 c6 40 00 00 00    	test   esi,0x40
c001c5e5:	74 12                	je     c001c5f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c5e7:	83 ec 0c             	sub    esp,0xc
c001c5ea:	b3 16                	mov    bl,0x16
c001c5ec:	68 84 a8 03 c0       	push   0xc003a884
c001c5f1:	e8 f4 07 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c5f6:	83 c4 10             	add    esp,0x10
c001c5f9:	89 f0                	mov    eax,esi
c001c5fb:	84 c0                	test   al,al
c001c5fd:	79 42                	jns    c001c641 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5ff:	83 ec 0c             	sub    esp,0xc
c001c602:	b3 0d                	mov    bl,0xd
c001c604:	68 a5 a8 03 c0       	push   0xc003a8a5
c001c609:	e8 dc 07 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	eb 2e                	jmp    c001c641 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c613:	3c 03                	cmp    al,0x3
c001c615:	75 14                	jne    c001c62b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c617:	83 ec 0c             	sub    esp,0xc
c001c61a:	b3 17                	mov    bl,0x17
c001c61c:	68 b9 a8 03 c0       	push   0xc003a8b9
c001c621:	e8 c4 07 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c626:	83 c4 10             	add    esp,0x10
c001c629:	eb 16                	jmp    c001c641 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c62b:	3c 04                	cmp    al,0x4
c001c62d:	75 12                	jne    c001c641 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c62f:	83 ec 0c             	sub    esp,0xc
c001c632:	b3 08                	mov    bl,0x8
c001c634:	68 cf a8 03 c0       	push   0xc003a8cf
c001c639:	e8 ac 07 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	50                   	push   eax
c001c642:	50                   	push   eax
c001c643:	0f b6 c3             	movzx  eax,bl
c001c646:	50                   	push   eax
c001c647:	68 e7 a8 03 c0       	push   0xc003a8e7
c001c64c:	e8 99 07 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c651:	83 c4 10             	add    esp,0x10
c001c654:	83 c4 1c             	add    esp,0x1c
c001c657:	88 d8                	mov    al,bl
c001c659:	5b                   	pop    ebx
c001c65a:	5e                   	pop    esi
c001c65b:	5f                   	pop    edi
c001c65c:	5d                   	pop    ebp
c001c65d:	c3                   	ret    

c001c65e <IDE::polling(unsigned char, unsigned int)>:
c001c65e:	57                   	push   edi
c001c65f:	56                   	push   esi
c001c660:	53                   	push   ebx
c001c661:	bb 04 00 00 00       	mov    ebx,0x4
c001c666:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c66a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c66f:	52                   	push   edx
c001c670:	6a 0c                	push   0xc
c001c672:	56                   	push   esi
c001c673:	57                   	push   edi
c001c674:	e8 f9 f4 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	4b                   	dec    ebx
c001c67d:	75 f0                	jne    c001c66f <IDE::polling(unsigned char, unsigned int)+0x11>
c001c67f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c684:	50                   	push   eax
c001c685:	6a 0c                	push   0xc
c001c687:	56                   	push   esi
c001c688:	57                   	push   edi
c001c689:	e8 e4 f4 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c68e:	83 c4 10             	add    esp,0x10
c001c691:	a8 01                	test   al,0x1
c001c693:	74 12                	je     c001c6a7 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c695:	83 ec 0c             	sub    esp,0xc
c001c698:	68 01 a9 03 c0       	push   0xc003a901
c001c69d:	e8 48 07 ff ff       	call   c000cdea <kprintf(char const*, ...)>
c001c6a2:	83 c4 10             	add    esp,0x10
c001c6a5:	eb 17                	jmp    c001c6be <IDE::polling(unsigned char, unsigned int)+0x60>
c001c6a7:	a8 20                	test   al,0x20
c001c6a9:	75 0f                	jne    c001c6ba <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c6ab:	4b                   	dec    ebx
c001c6ac:	74 10                	je     c001c6be <IDE::polling(unsigned char, unsigned int)+0x60>
c001c6ae:	84 c0                	test   al,al
c001c6b0:	78 d2                	js     c001c684 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c6b2:	a8 08                	test   al,0x8
c001c6b4:	74 ce                	je     c001c684 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c6b6:	31 c0                	xor    eax,eax
c001c6b8:	eb 06                	jmp    c001c6c0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c6ba:	b0 01                	mov    al,0x1
c001c6bc:	eb 02                	jmp    c001c6c0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c6be:	b0 02                	mov    al,0x2
c001c6c0:	5b                   	pop    ebx
c001c6c1:	5e                   	pop    esi
c001c6c2:	5f                   	pop    edi
c001c6c3:	c3                   	ret    

c001c6c4 <ATA::close(int, int, void*)>:
c001c6c4:	83 ec 0c             	sub    esp,0xc
c001c6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6d1:	85 c0                	test   eax,eax
c001c6d3:	74 0c                	je     c001c6e1 <ATA::close(int, int, void*)+0x1d>
c001c6d5:	83 ec 0c             	sub    esp,0xc
c001c6d8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6da:	50                   	push   eax
c001c6db:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c6de:	83 c4 10             	add    esp,0x10
c001c6e1:	31 c0                	xor    eax,eax
c001c6e3:	83 c4 0c             	add    esp,0xc
c001c6e6:	c3                   	ret    
c001c6e7:	90                   	nop

c001c6e8 <ATA::powerSaving(PowerSavingLevel)>:
c001c6e8:	c3                   	ret    
c001c6e9:	90                   	nop

c001c6ea <ATA::ATA()>:
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f1:	83 ec 04             	sub    esp,0x4
c001c6f4:	68 00 02 00 00       	push   0x200
c001c6f9:	68 44 a9 03 c0       	push   0xc003a944
c001c6fe:	50                   	push   eax
c001c6ff:	e8 a6 73 ff ff       	call   c0013aaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	ba 70 a9 03 c0       	mov    edx,0xc003a970
c001c70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c710:	89 10                	mov    DWORD PTR [eax],edx
c001c712:	90                   	nop
c001c713:	83 c4 0c             	add    esp,0xc
c001c716:	c3                   	ret    
c001c717:	90                   	nop

c001c718 <ATA::flush(bool)>:
c001c718:	53                   	push   ebx
c001c719:	83 ec 08             	sub    esp,0x8
c001c71c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c725:	19 c0                	sbb    eax,eax
c001c727:	83 e0 fd             	and    eax,0xfffffffd
c001c72a:	05 ea 00 00 00       	add    eax,0xea
c001c72f:	50                   	push   eax
c001c730:	6a 07                	push   0x7
c001c732:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c739:	50                   	push   eax
c001c73a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c740:	e8 6d f3 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c745:	83 c4 0c             	add    esp,0xc
c001c748:	6a 00                	push   0x0
c001c74a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c751:	50                   	push   eax
c001c752:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c758:	e8 01 ff ff ff       	call   c001c65e <IDE::polling(unsigned char, unsigned int)>
c001c75d:	83 c4 18             	add    esp,0x18
c001c760:	5b                   	pop    ebx
c001c761:	c3                   	ret    

c001c762 <ATA::readyForCommand()>:
c001c762:	56                   	push   esi
c001c763:	53                   	push   ebx
c001c764:	31 db                	xor    ebx,ebx
c001c766:	50                   	push   eax
c001c767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c76b:	50                   	push   eax
c001c76c:	6a 0c                	push   0xc
c001c76e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c775:	50                   	push   eax
c001c776:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c77c:	e8 f1 f3 ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001c781:	83 c4 10             	add    esp,0x10
c001c784:	a8 88                	test   al,0x88
c001c786:	74 23                	je     c001c7ab <ATA::readyForCommand()+0x49>
c001c788:	43                   	inc    ebx
c001c789:	83 fb 63             	cmp    ebx,0x63
c001c78c:	7e dd                	jle    c001c76b <ATA::readyForCommand()+0x9>
c001c78e:	51                   	push   ecx
c001c78f:	51                   	push   ecx
c001c790:	6a 00                	push   0x0
c001c792:	68 40 42 0f 00       	push   0xf4240
c001c797:	e8 a9 21 ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c7a5:	75 c4                	jne    c001c76b <ATA::readyForCommand()+0x9>
c001c7a7:	31 c0                	xor    eax,eax
c001c7a9:	eb 02                	jmp    c001c7ad <ATA::readyForCommand()+0x4b>
c001c7ab:	b0 01                	mov    al,0x1
c001c7ad:	5a                   	pop    edx
c001c7ae:	5b                   	pop    ebx
c001c7af:	5e                   	pop    esi
c001c7b0:	c3                   	ret    
c001c7b1:	90                   	nop

c001c7b2 <ATA::access(unsigned long long, int, void*, bool)>:
c001c7b2:	55                   	push   ebp
c001c7b3:	57                   	push   edi
c001c7b4:	56                   	push   esi
c001c7b5:	53                   	push   ebx
c001c7b6:	83 ec 2c             	sub    esp,0x2c
c001c7b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c7bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c7c1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c7c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c7cd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c7d5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c7db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7df:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c7e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c7e9:	c1 e0 06             	shl    eax,0x6
c001c7ec:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c7f4:	74 5d                	je     c001c853 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c7f6:	89 fa                	mov    edx,edi
c001c7f8:	89 f0                	mov    eax,esi
c001c7fa:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c7fe:	c1 ea 1c             	shr    edx,0x1c
c001c801:	89 d1                	mov    ecx,edx
c001c803:	09 c1                	or     ecx,eax
c001c805:	74 25                	je     c001c82c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c807:	31 ed                	xor    ebp,ebp
c001c809:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c810:	89 fa                	mov    edx,edi
c001c812:	89 f0                	mov    eax,esi
c001c814:	0f ad d0             	shrd   eax,edx,cl
c001c817:	d3 ea                	shr    edx,cl
c001c819:	f6 c1 20             	test   cl,0x20
c001c81c:	74 02                	je     c001c820 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c81e:	89 d0                	mov    eax,edx
c001c820:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c824:	45                   	inc    ebp
c001c825:	83 fd 06             	cmp    ebp,0x6
c001c828:	75 df                	jne    c001c809 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c82a:	eb 76                	jmp    c001c8a2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c82c:	89 f0                	mov    eax,esi
c001c82e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c833:	89 fa                	mov    edx,edi
c001c835:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c83c:	0f ac d0 10          	shrd   eax,edx,0x10
c001c840:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c845:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c849:	c1 ee 18             	shr    esi,0x18
c001c84c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c851:	eb 56                	jmp    c001c8a9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c853:	6a 00                	push   0x0
c001c855:	6a 3f                	push   0x3f
c001c857:	57                   	push   edi
c001c858:	56                   	push   esi
c001c859:	e8 de 1e 00 00       	call   c001e73c <__umoddi3>
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	40                   	inc    eax
c001c862:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c866:	6a 00                	push   0x0
c001c868:	68 f0 03 00 00       	push   0x3f0
c001c86d:	57                   	push   edi
c001c86e:	56                   	push   esi
c001c86f:	e8 c8 1d 00 00       	call   c001e63c <__udivdi3>
c001c874:	83 c4 10             	add    esp,0x10
c001c877:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c87c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c883:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c888:	6a 00                	push   0x0
c001c88a:	6a 3f                	push   0x3f
c001c88c:	57                   	push   edi
c001c88d:	56                   	push   esi
c001c88e:	e8 a9 1d 00 00       	call   c001e63c <__udivdi3>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	89 c6                	mov    esi,eax
c001c898:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c89d:	83 e6 0f             	and    esi,0xf
c001c8a0:	eb 07                	jmp    c001c8a9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c8a2:	31 f6                	xor    esi,esi
c001c8a4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c8a9:	bf 01 00 00 00       	mov    edi,0x1
c001c8ae:	50                   	push   eax
c001c8af:	6a 00                	push   0x0
c001c8b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b8:	50                   	push   eax
c001c8b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8bd:	e8 fc f3 ff ff       	call   c001bcbe <IDE::enableIRQs(unsigned char, bool)>
c001c8c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8c5:	e8 98 fe ff ff       	call   c001c762 <ATA::readyForCommand()>
c001c8ca:	83 c4 10             	add    esp,0x10
c001c8cd:	84 c0                	test   al,al
c001c8cf:	0f 84 50 02 00 00    	je     c001cb25 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c8d5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c8db:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c8e1:	c1 e0 04             	shl    eax,0x4
c001c8e4:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c8eb:	09 c6                	or     esi,eax
c001c8ed:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c8f2:	75 05                	jne    c001c8f9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c8f4:	83 ce a0             	or     esi,0xffffffa0
c001c8f7:	eb 03                	jmp    c001c8fc <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c8f9:	83 ce e0             	or     esi,0xffffffe0
c001c8fc:	89 f0                	mov    eax,esi
c001c8fe:	0f b6 f0             	movzx  esi,al
c001c901:	56                   	push   esi
c001c902:	6a 06                	push   0x6
c001c904:	51                   	push   ecx
c001c905:	52                   	push   edx
c001c906:	e8 a7 f1 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	6a 00                	push   0x0
c001c910:	6a 01                	push   0x1
c001c912:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c919:	50                   	push   eax
c001c91a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c920:	e8 8d f1 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c925:	83 c4 10             	add    esp,0x10
c001c928:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c92d:	75 6e                	jne    c001c99d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c92f:	6a 00                	push   0x0
c001c931:	6a 08                	push   0x8
c001c933:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c93a:	50                   	push   eax
c001c93b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c941:	e8 6c f1 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c946:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c94b:	50                   	push   eax
c001c94c:	6a 09                	push   0x9
c001c94e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c955:	50                   	push   eax
c001c956:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c95c:	e8 51 f1 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c961:	83 c4 20             	add    esp,0x20
c001c964:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c969:	50                   	push   eax
c001c96a:	6a 0a                	push   0xa
c001c96c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c973:	50                   	push   eax
c001c974:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c97a:	e8 33 f1 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c984:	50                   	push   eax
c001c985:	6a 0b                	push   0xb
c001c987:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98e:	50                   	push   eax
c001c98f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c995:	e8 18 f1 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99a:	83 c4 20             	add    esp,0x20
c001c99d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c9a2:	50                   	push   eax
c001c9a3:	6a 02                	push   0x2
c001c9a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ac:	50                   	push   eax
c001c9ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b3:	e8 fa f0 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c9bd:	50                   	push   eax
c001c9be:	6a 03                	push   0x3
c001c9c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9c7:	50                   	push   eax
c001c9c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ce:	e8 df f0 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d3:	83 c4 20             	add    esp,0x20
c001c9d6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c9db:	50                   	push   eax
c001c9dc:	6a 04                	push   0x4
c001c9de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e5:	50                   	push   eax
c001c9e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ec:	e8 c1 f0 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c9f6:	50                   	push   eax
c001c9f7:	6a 05                	push   0x5
c001c9f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca00:	50                   	push   eax
c001ca01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca07:	e8 a6 f0 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca0c:	83 c4 20             	add    esp,0x20
c001ca0f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca14:	0f 94 c0             	sete   al
c001ca17:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca1c:	74 09                	je     c001ca27 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca1e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001ca25:	eb 07                	jmp    c001ca2e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001ca27:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001ca2e:	0f b6 c0             	movzx  eax,al
c001ca31:	50                   	push   eax
c001ca32:	6a 07                	push   0x7
c001ca34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3b:	50                   	push   eax
c001ca3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca42:	e8 6b f0 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca47:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ca4b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca4f:	83 c4 10             	add    esp,0x10
c001ca52:	85 f6                	test   esi,esi
c001ca54:	0f 84 ac 00 00 00    	je     c001cb06 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001ca5a:	50                   	push   eax
c001ca5b:	6a 01                	push   0x1
c001ca5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca64:	50                   	push   eax
c001ca65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6b:	e8 ee fb ff ff       	call   c001c65e <IDE::polling(unsigned char, unsigned int)>
c001ca70:	83 c4 10             	add    esp,0x10
c001ca73:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca79:	84 c0                	test   al,al
c001ca7b:	74 20                	je     c001ca9d <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001ca7d:	0f b6 f8             	movzx  edi,al
c001ca80:	0f b6 d2             	movzx  edx,dl
c001ca83:	57                   	push   edi
c001ca84:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca8b:	50                   	push   eax
c001ca8c:	52                   	push   edx
c001ca8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca93:	e8 30 fa ff ff       	call   c001c4c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca98:	e9 85 00 00 00       	jmp    c001cb22 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001ca9d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001caa2:	74 41                	je     c001cae5 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001caa4:	31 c9                	xor    ecx,ecx
c001caa6:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001caaa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001caae:	50                   	push   eax
c001caaf:	50                   	push   eax
c001cab0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab7:	50                   	push   eax
c001cab8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabe:	e8 dd ef ff ff       	call   c001baa0 <IDE::getBase(unsigned char)>
c001cac3:	89 c2                	mov    edx,eax
c001cac5:	89 e8                	mov    eax,ebp
c001cac7:	66 ef                	out    dx,ax
c001cac9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cacd:	83 c4 10             	add    esp,0x10
c001cad0:	41                   	inc    ecx
c001cad1:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cad7:	75 cd                	jne    c001caa6 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cad9:	4e                   	dec    esi
c001cada:	81 c7 00 02 00 00    	add    edi,0x200
c001cae0:	e9 6d ff ff ff       	jmp    c001ca52 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cae5:	0f b6 d2             	movzx  edx,dl
c001cae8:	51                   	push   ecx
c001cae9:	51                   	push   ecx
c001caea:	52                   	push   edx
c001caeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf1:	e8 aa ef ff ff       	call   c001baa0 <IDE::getBase(unsigned char)>
c001caf6:	b9 00 01 00 00       	mov    ecx,0x100
c001cafb:	89 c2                	mov    edx,eax
c001cafd:	fc                   	cld    
c001cafe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	eb d3                	jmp    c001cad9 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cb06:	31 ff                	xor    edi,edi
c001cb08:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb0d:	74 16                	je     c001cb25 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cb0f:	50                   	push   eax
c001cb10:	50                   	push   eax
c001cb11:	31 c0                	xor    eax,eax
c001cb13:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cb18:	0f 94 c0             	sete   al
c001cb1b:	50                   	push   eax
c001cb1c:	53                   	push   ebx
c001cb1d:	e8 f6 fb ff ff       	call   c001c718 <ATA::flush(bool)>
c001cb22:	83 c4 10             	add    esp,0x10
c001cb25:	83 c4 2c             	add    esp,0x2c
c001cb28:	89 f8                	mov    eax,edi
c001cb2a:	5b                   	pop    ebx
c001cb2b:	5e                   	pop    esi
c001cb2c:	5f                   	pop    edi
c001cb2d:	5d                   	pop    ebp
c001cb2e:	c3                   	ret    
c001cb2f:	90                   	nop

c001cb30 <ATA::read(unsigned long long, int, void*)>:
c001cb30:	57                   	push   edi
c001cb31:	b8 04 00 00 00       	mov    eax,0x4
c001cb36:	56                   	push   esi
c001cb37:	53                   	push   ebx
c001cb38:	83 ec 10             	sub    esp,0x10
c001cb3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb3f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb43:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cb46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb4e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cb54:	77 3b                	ja     c001cb91 <ATA::read(unsigned long long, int, void*)+0x61>
c001cb56:	b8 06 00 00 00       	mov    eax,0x6
c001cb5b:	85 d2                	test   edx,edx
c001cb5d:	74 32                	je     c001cb91 <ATA::read(unsigned long long, int, void*)+0x61>
c001cb5f:	50                   	push   eax
c001cb60:	50                   	push   eax
c001cb61:	6a 00                	push   0x0
c001cb63:	52                   	push   edx
c001cb64:	53                   	push   ebx
c001cb65:	57                   	push   edi
c001cb66:	56                   	push   esi
c001cb67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb6b:	e8 42 fc ff ff       	call   c001c7b2 <ATA::access(unsigned long long, int, void*, bool)>
c001cb70:	83 c4 20             	add    esp,0x20
c001cb73:	85 c0                	test   eax,eax
c001cb75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb79:	75 11                	jne    c001cb8c <ATA::read(unsigned long long, int, void*)+0x5c>
c001cb7b:	01 1d 08 d0 03 c0    	add    DWORD PTR ds:0xc003d008,ebx
c001cb81:	e8 92 36 ff ff       	call   c0010218 <VgaText::updateDiskUsage()>
c001cb86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb8a:	eb 05                	jmp    c001cb91 <ATA::read(unsigned long long, int, void*)+0x61>
c001cb8c:	b8 01 00 00 00       	mov    eax,0x1
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	5b                   	pop    ebx
c001cb95:	5e                   	pop    esi
c001cb96:	5f                   	pop    edi
c001cb97:	c3                   	ret    

c001cb98 <ATA::write(unsigned long long, int, void*)>:
c001cb98:	57                   	push   edi
c001cb99:	b8 04 00 00 00       	mov    eax,0x4
c001cb9e:	56                   	push   esi
c001cb9f:	53                   	push   ebx
c001cba0:	83 ec 10             	sub    esp,0x10
c001cba3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cba7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbab:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cbae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbb6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cbbc:	77 3b                	ja     c001cbf9 <ATA::write(unsigned long long, int, void*)+0x61>
c001cbbe:	b8 06 00 00 00       	mov    eax,0x6
c001cbc3:	85 d2                	test   edx,edx
c001cbc5:	74 32                	je     c001cbf9 <ATA::write(unsigned long long, int, void*)+0x61>
c001cbc7:	50                   	push   eax
c001cbc8:	50                   	push   eax
c001cbc9:	6a 01                	push   0x1
c001cbcb:	52                   	push   edx
c001cbcc:	53                   	push   ebx
c001cbcd:	57                   	push   edi
c001cbce:	56                   	push   esi
c001cbcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbd3:	e8 da fb ff ff       	call   c001c7b2 <ATA::access(unsigned long long, int, void*, bool)>
c001cbd8:	83 c4 20             	add    esp,0x20
c001cbdb:	85 c0                	test   eax,eax
c001cbdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbe1:	75 11                	jne    c001cbf4 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cbe3:	01 1d 04 d0 03 c0    	add    DWORD PTR ds:0xc003d004,ebx
c001cbe9:	e8 2a 36 ff ff       	call   c0010218 <VgaText::updateDiskUsage()>
c001cbee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbf2:	eb 05                	jmp    c001cbf9 <ATA::write(unsigned long long, int, void*)+0x61>
c001cbf4:	b8 01 00 00 00       	mov    eax,0x1
c001cbf9:	83 c4 10             	add    esp,0x10
c001cbfc:	5b                   	pop    ebx
c001cbfd:	5e                   	pop    esi
c001cbfe:	5f                   	pop    edi
c001cbff:	c3                   	ret    

c001cc00 <ATA::detectCHS()>:
c001cc00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc04:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc0a:	c1 e0 06             	shl    eax,0x6
c001cc0d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc13:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc1d:	c7 44 24 04 53 a9 03 c0 	mov    DWORD PTR [esp+0x4],0xc003a953
c001cc25:	e9 de 02 ff ff       	jmp    c000cf08 <panic(char const*)>

c001cc2a <ATA::open(int, int, void*)>:
c001cc2a:	53                   	push   ebx
c001cc2b:	83 ec 08             	sub    esp,0x8
c001cc2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc3a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc40:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc46:	c1 e0 06             	shl    eax,0x6
c001cc49:	01 d0                	add    eax,edx
c001cc4b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc52:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc58:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc5f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc69:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc6f:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc76:	75 0c                	jne    c001cc84 <ATA::open(int, int, void*)+0x5a>
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	53                   	push   ebx
c001cc7c:	e8 7f ff ff ff       	call   c001cc00 <ATA::detectCHS()>
c001cc81:	83 c4 10             	add    esp,0x10
c001cc84:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc8a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc90:	c1 e0 06             	shl    eax,0x6
c001cc93:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc9a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cca4:	d1 e8                	shr    eax,1
c001cca6:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ccac:	6a 04                	push   0x4
c001ccae:	6a 0c                	push   0xc
c001ccb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccb7:	50                   	push   eax
c001ccb8:	52                   	push   edx
c001ccb9:	e8 f4 ed ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccbe:	90                   	nop
c001ccbf:	90                   	nop
c001ccc0:	6a 00                	push   0x0
c001ccc2:	6a 0c                	push   0xc
c001ccc4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cccb:	50                   	push   eax
c001cccc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccd2:	e8 db ed ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccd7:	83 c4 14             	add    esp,0x14
c001ccda:	53                   	push   ebx
c001ccdb:	e8 32 6e ff ff       	call   c0013b12 <PhysicalDisk::startCache()>
c001cce0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cce3:	e8 82 86 ff ff       	call   c001536a <createPartitionsForDisk(PhysicalDisk*)>
c001cce8:	31 c0                	xor    eax,eax
c001ccea:	83 c4 18             	add    esp,0x18
c001cced:	5b                   	pop    ebx
c001ccee:	c3                   	ret    
c001ccef:	90                   	nop

c001ccf0 <ATAPI::write(unsigned long long, int, void*)>:
c001ccf0:	b8 03 00 00 00       	mov    eax,0x3
c001ccf5:	c3                   	ret    

c001ccf6 <ATAPI::close(int, int, void*)>:
c001ccf6:	83 ec 0c             	sub    esp,0xc
c001ccf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd03:	85 c0                	test   eax,eax
c001cd05:	74 0c                	je     c001cd13 <ATAPI::close(int, int, void*)+0x1d>
c001cd07:	83 ec 0c             	sub    esp,0xc
c001cd0a:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd0c:	50                   	push   eax
c001cd0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd10:	83 c4 10             	add    esp,0x10
c001cd13:	31 c0                	xor    eax,eax
c001cd15:	83 c4 0c             	add    esp,0xc
c001cd18:	c3                   	ret    
c001cd19:	90                   	nop

c001cd1a <ATAPI::ATAPI()>:
c001cd1a:	83 ec 0c             	sub    esp,0xc
c001cd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd21:	83 ec 04             	sub    esp,0x4
c001cd24:	68 00 08 00 00       	push   0x800
c001cd29:	68 9c a9 03 c0       	push   0xc003a99c
c001cd2e:	50                   	push   eax
c001cd2f:	e8 76 6d ff ff       	call   c0013aaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd34:	83 c4 10             	add    esp,0x10
c001cd37:	ba dc a9 03 c0       	mov    edx,0xc003a9dc
c001cd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd40:	89 10                	mov    DWORD PTR [eax],edx
c001cd42:	90                   	nop
c001cd43:	83 c4 0c             	add    esp,0xc
c001cd46:	c3                   	ret    
c001cd47:	90                   	nop

c001cd48 <ATAPI::readyForCommand()>:
c001cd48:	56                   	push   esi
c001cd49:	53                   	push   ebx
c001cd4a:	31 db                	xor    ebx,ebx
c001cd4c:	50                   	push   eax
c001cd4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd51:	50                   	push   eax
c001cd52:	6a 0c                	push   0xc
c001cd54:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd5b:	50                   	push   eax
c001cd5c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd62:	e8 0b ee ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	a8 88                	test   al,0x88
c001cd6c:	74 23                	je     c001cd91 <ATAPI::readyForCommand()+0x49>
c001cd6e:	43                   	inc    ebx
c001cd6f:	83 fb 63             	cmp    ebx,0x63
c001cd72:	7e dd                	jle    c001cd51 <ATAPI::readyForCommand()+0x9>
c001cd74:	51                   	push   ecx
c001cd75:	51                   	push   ecx
c001cd76:	6a 00                	push   0x0
c001cd78:	68 40 42 0f 00       	push   0xf4240
c001cd7d:	e8 c3 1b ff ff       	call   c000e945 <nanoSleep(unsigned long long)>
c001cd82:	83 c4 10             	add    esp,0x10
c001cd85:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd8b:	75 c4                	jne    c001cd51 <ATAPI::readyForCommand()+0x9>
c001cd8d:	31 c0                	xor    eax,eax
c001cd8f:	eb 02                	jmp    c001cd93 <ATAPI::readyForCommand()+0x4b>
c001cd91:	b0 01                	mov    al,0x1
c001cd93:	5a                   	pop    edx
c001cd94:	5b                   	pop    ebx
c001cd95:	5e                   	pop    esi
c001cd96:	c3                   	ret    
c001cd97:	90                   	nop

c001cd98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cd98:	55                   	push   ebp
c001cd99:	57                   	push   edi
c001cd9a:	56                   	push   esi
c001cd9b:	53                   	push   ebx
c001cd9c:	83 ec 20             	sub    esp,0x20
c001cd9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cda3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cda7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cdab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cdaf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cdb3:	6a 01                	push   0x1
c001cdb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdbc:	50                   	push   eax
c001cdbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cdc3:	e8 f6 ee ff ff       	call   c001bcbe <IDE::enableIRQs(unsigned char, bool)>
c001cdc8:	5e                   	pop    esi
c001cdc9:	58                   	pop    eax
c001cdca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdd1:	50                   	push   eax
c001cdd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cdd8:	e8 af ec ff ff       	call   c001ba8c <IDE::prepareInterrupt(unsigned char)>
c001cddd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cde0:	e8 63 ff ff ff       	call   c001cd48 <ATAPI::readyForCommand()>
c001cde5:	83 c4 10             	add    esp,0x10
c001cde8:	84 c0                	test   al,al
c001cdea:	75 0a                	jne    c001cdf6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cdec:	bb 01 00 00 00       	mov    ebx,0x1
c001cdf1:	e9 57 02 00 00       	jmp    c001d04d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cdf6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cdfc:	c1 e0 04             	shl    eax,0x4
c001cdff:	0f b6 c0             	movzx  eax,al
c001ce02:	50                   	push   eax
c001ce03:	6a 06                	push   0x6
c001ce05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce0c:	50                   	push   eax
c001ce0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce13:	e8 9a ec ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce18:	6a 00                	push   0x0
c001ce1a:	6a 01                	push   0x1
c001ce1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce23:	50                   	push   eax
c001ce24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce2a:	e8 83 ec ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce2f:	83 c4 20             	add    esp,0x20
c001ce32:	0f b6 c3             	movzx  eax,bl
c001ce35:	0f b6 df             	movzx  ebx,bh
c001ce38:	50                   	push   eax
c001ce39:	6a 04                	push   0x4
c001ce3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce42:	50                   	push   eax
c001ce43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce49:	e8 64 ec ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4e:	53                   	push   ebx
c001ce4f:	6a 05                	push   0x5
c001ce51:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce58:	50                   	push   eax
c001ce59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce5f:	e8 4e ec ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce64:	83 c4 20             	add    esp,0x20
c001ce67:	68 a0 00 00 00       	push   0xa0
c001ce6c:	6a 07                	push   0x7
c001ce6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce75:	50                   	push   eax
c001ce76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce7c:	e8 31 ec ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce81:	83 c4 0c             	add    esp,0xc
c001ce84:	6a 01                	push   0x1
c001ce86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce8d:	50                   	push   eax
c001ce8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce94:	e8 c5 f7 ff ff       	call   c001c65e <IDE::polling(unsigned char, unsigned int)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cea2:	84 c0                	test   al,al
c001cea4:	74 23                	je     c001cec9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cea6:	0f b6 d8             	movzx  ebx,al
c001cea9:	0f b6 d2             	movzx  edx,dl
c001ceac:	53                   	push   ebx
c001cead:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ceb4:	50                   	push   eax
c001ceb5:	52                   	push   edx
c001ceb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cebc:	e8 07 f6 ff ff       	call   c001c4c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cec1:	83 c4 10             	add    esp,0x10
c001cec4:	e9 84 01 00 00       	jmp    c001d04d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cec9:	0f b6 d2             	movzx  edx,dl
c001cecc:	53                   	push   ebx
c001cecd:	53                   	push   ebx
c001cece:	52                   	push   edx
c001cecf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ced5:	e8 c6 eb ff ff       	call   c001baa0 <IDE::getBase(unsigned char)>
c001ceda:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cede:	b9 06 00 00 00       	mov    ecx,0x6
c001cee3:	89 c2                	mov    edx,eax
c001cee5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cee8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cef5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cefc:	85 db                	test   ebx,ebx
c001cefe:	0f 84 ec 00 00 00    	je     c001cff0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cf04:	51                   	push   ecx
c001cf05:	51                   	push   ecx
c001cf06:	52                   	push   edx
c001cf07:	50                   	push   eax
c001cf08:	e8 13 ed ff ff       	call   c001bc20 <IDE::waitInterrupt(unsigned char)>
c001cf0d:	83 c4 10             	add    esp,0x10
c001cf10:	84 c0                	test   al,al
c001cf12:	0f 84 d4 fe ff ff    	je     c001cdec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cf18:	56                   	push   esi
c001cf19:	56                   	push   esi
c001cf1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf21:	50                   	push   eax
c001cf22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf28:	e8 5f eb ff ff       	call   c001ba8c <IDE::prepareInterrupt(unsigned char)>
c001cf2d:	83 c4 0c             	add    esp,0xc
c001cf30:	6a 04                	push   0x4
c001cf32:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf39:	50                   	push   eax
c001cf3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf40:	e8 2d ec ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001cf45:	83 c4 0c             	add    esp,0xc
c001cf48:	89 c6                	mov    esi,eax
c001cf4a:	6a 05                	push   0x5
c001cf4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf53:	50                   	push   eax
c001cf54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf5a:	e8 13 ec ff ff       	call   c001bb72 <IDE::read(unsigned char, unsigned char)>
c001cf5f:	89 f1                	mov    ecx,esi
c001cf61:	0f b6 c0             	movzx  eax,al
c001cf64:	0f b6 f1             	movzx  esi,cl
c001cf67:	c1 e0 08             	shl    eax,0x8
c001cf6a:	09 c6                	or     esi,eax
c001cf6c:	d1 fe                	sar    esi,1
c001cf6e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cf72:	83 c4 10             	add    esp,0x10
c001cf75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cf7a:	74 41                	je     c001cfbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cf7c:	31 c9                	xor    ecx,ecx
c001cf7e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cf84:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cf8b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cf8f:	75 0a                	jne    c001cf9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cf91:	01 c9                	add    ecx,ecx
c001cf93:	01 cd                	add    ebp,ecx
c001cf95:	4b                   	dec    ebx
c001cf96:	e9 54 ff ff ff       	jmp    c001ceef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cf9b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cfa0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cfa4:	51                   	push   ecx
c001cfa5:	51                   	push   ecx
c001cfa6:	52                   	push   edx
c001cfa7:	50                   	push   eax
c001cfa8:	e8 f3 ea ff ff       	call   c001baa0 <IDE::getBase(unsigned char)>
c001cfad:	89 c2                	mov    edx,eax
c001cfaf:	89 f0                	mov    eax,esi
c001cfb1:	66 ef                	out    dx,ax
c001cfb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfb7:	83 c4 10             	add    esp,0x10
c001cfba:	41                   	inc    ecx
c001cfbb:	eb c1                	jmp    c001cf7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cfbd:	31 f6                	xor    esi,esi
c001cfbf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cfc5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cfcc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cfd0:	75 06                	jne    c001cfd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cfd2:	01 f6                	add    esi,esi
c001cfd4:	01 f5                	add    ebp,esi
c001cfd6:	eb bd                	jmp    c001cf95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cfd8:	51                   	push   ecx
c001cfd9:	51                   	push   ecx
c001cfda:	52                   	push   edx
c001cfdb:	50                   	push   eax
c001cfdc:	e8 bf ea ff ff       	call   c001baa0 <IDE::getBase(unsigned char)>
c001cfe1:	89 c2                	mov    edx,eax
c001cfe3:	66 ed                	in     ax,dx
c001cfe5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cfea:	83 c4 10             	add    esp,0x10
c001cfed:	46                   	inc    esi
c001cfee:	eb cf                	jmp    c001cfbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cff0:	51                   	push   ecx
c001cff1:	51                   	push   ecx
c001cff2:	52                   	push   edx
c001cff3:	50                   	push   eax
c001cff4:	e8 27 ec ff ff       	call   c001bc20 <IDE::waitInterrupt(unsigned char)>
c001cff9:	83 c4 10             	add    esp,0x10
c001cffc:	84 c0                	test   al,al
c001cffe:	0f 84 e8 fd ff ff    	je     c001cdec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d004:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d009:	52                   	push   edx
c001d00a:	52                   	push   edx
c001d00b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d012:	50                   	push   eax
c001d013:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d019:	e8 6e ea ff ff       	call   c001ba8c <IDE::prepareInterrupt(unsigned char)>
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	50                   	push   eax
c001d022:	50                   	push   eax
c001d023:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d02a:	50                   	push   eax
c001d02b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d031:	e8 6a ea ff ff       	call   c001baa0 <IDE::getBase(unsigned char)>
c001d036:	8d 50 07             	lea    edx,[eax+0x7]
c001d039:	ec                   	in     al,dx
c001d03a:	83 c4 10             	add    esp,0x10
c001d03d:	a8 88                	test   al,0x88
c001d03f:	74 0a                	je     c001d04b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d041:	4b                   	dec    ebx
c001d042:	75 dd                	jne    c001d021 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d044:	bb 02 00 00 00       	mov    ebx,0x2
c001d049:	eb 02                	jmp    c001d04d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d04b:	31 db                	xor    ebx,ebx
c001d04d:	83 c4 1c             	add    esp,0x1c
c001d050:	89 d8                	mov    eax,ebx
c001d052:	5b                   	pop    ebx
c001d053:	5e                   	pop    esi
c001d054:	5f                   	pop    edi
c001d055:	5d                   	pop    ebp
c001d056:	c3                   	ret    
c001d057:	90                   	nop

c001d058 <ATAPI::diskRemoved()>:
c001d058:	83 ec 18             	sub    esp,0x18
c001d05b:	68 a7 a9 03 c0       	push   0xc003a9a7
c001d060:	e8 85 fd fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001d065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d069:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d070:	83 c4 1c             	add    esp,0x1c
c001d073:	c3                   	ret    

c001d074 <ATAPI::eject()>:
c001d074:	57                   	push   edi
c001d075:	b9 03 00 00 00       	mov    ecx,0x3
c001d07a:	53                   	push   ebx
c001d07b:	83 ec 14             	sub    esp,0x14
c001d07e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d082:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d086:	fc                   	cld    
c001d087:	31 c0                	xor    eax,eax
c001d089:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d08b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d090:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d095:	50                   	push   eax
c001d096:	50                   	push   eax
c001d097:	6a 00                	push   0x0
c001d099:	6a 00                	push   0x0
c001d09b:	6a 00                	push   0x0
c001d09d:	6a 02                	push   0x2
c001d09f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0a3:	50                   	push   eax
c001d0a4:	53                   	push   ebx
c001d0a5:	e8 ee fc ff ff       	call   c001cd98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d0aa:	83 c4 14             	add    esp,0x14
c001d0ad:	53                   	push   ebx
c001d0ae:	e8 a5 ff ff ff       	call   c001d058 <ATAPI::diskRemoved()>
c001d0b3:	83 c4 24             	add    esp,0x24
c001d0b6:	5b                   	pop    ebx
c001d0b7:	5f                   	pop    edi
c001d0b8:	c3                   	ret    
c001d0b9:	90                   	nop

c001d0ba <ATAPI::diskInserted()>:
c001d0ba:	53                   	push   ebx
c001d0bb:	83 ec 14             	sub    esp,0x14
c001d0be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d0c2:	68 bd a9 03 c0       	push   0xc003a9bd
c001d0c7:	e8 1e fd fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001d0cc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d0d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0d6:	e8 37 6a ff ff       	call   c0013b12 <PhysicalDisk::startCache()>
c001d0db:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d0df:	83 c4 18             	add    esp,0x18
c001d0e2:	5b                   	pop    ebx
c001d0e3:	e9 82 82 ff ff       	jmp    c001536a <createPartitionsForDisk(PhysicalDisk*)>

c001d0e8 <ATAPI::detectMedia()>:
c001d0e8:	56                   	push   esi
c001d0e9:	53                   	push   ebx
c001d0ea:	83 ec 28             	sub    esp,0x28
c001d0ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d0f1:	6a 0c                	push   0xc
c001d0f3:	6a 00                	push   0x0
c001d0f5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d0f9:	56                   	push   esi
c001d0fa:	e8 c1 35 fe ff       	call   c00006c0 <memset>
c001d0ff:	58                   	pop    eax
c001d100:	5a                   	pop    edx
c001d101:	6a 00                	push   0x0
c001d103:	6a 00                	push   0x0
c001d105:	6a 00                	push   0x0
c001d107:	6a 00                	push   0x0
c001d109:	56                   	push   esi
c001d10a:	53                   	push   ebx
c001d10b:	e8 88 fc ff ff       	call   c001cd98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d110:	83 c4 1c             	add    esp,0x1c
c001d113:	6a 0c                	push   0xc
c001d115:	6a 00                	push   0x0
c001d117:	56                   	push   esi
c001d118:	e8 a3 35 fe ff       	call   c00006c0 <memset>
c001d11d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d122:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d127:	59                   	pop    ecx
c001d128:	58                   	pop    eax
c001d129:	6a 01                	push   0x1
c001d12b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d12f:	50                   	push   eax
c001d130:	6a 00                	push   0x0
c001d132:	6a 12                	push   0x12
c001d134:	56                   	push   esi
c001d135:	53                   	push   ebx
c001d136:	e8 5d fc ff ff       	call   c001cd98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d13b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d13f:	83 c4 20             	add    esp,0x20
c001d142:	83 e0 7f             	and    eax,0x7f
c001d145:	3c 70                	cmp    al,0x70
c001d147:	74 15                	je     c001d15e <ATAPI::detectMedia()+0x76>
c001d149:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d150:	75 0c                	jne    c001d15e <ATAPI::detectMedia()+0x76>
c001d152:	83 ec 0c             	sub    esp,0xc
c001d155:	53                   	push   ebx
c001d156:	e8 5f ff ff ff       	call   c001d0ba <ATAPI::diskInserted()>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d162:	83 e0 0f             	and    eax,0xf
c001d165:	3c 02                	cmp    al,0x2
c001d167:	75 1b                	jne    c001d184 <ATAPI::detectMedia()+0x9c>
c001d169:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d16e:	75 2d                	jne    c001d19d <ATAPI::detectMedia()+0xb5>
c001d170:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d177:	74 24                	je     c001d19d <ATAPI::detectMedia()+0xb5>
c001d179:	83 ec 0c             	sub    esp,0xc
c001d17c:	53                   	push   ebx
c001d17d:	e8 d6 fe ff ff       	call   c001d058 <ATAPI::diskRemoved()>
c001d182:	eb 16                	jmp    c001d19a <ATAPI::detectMedia()+0xb2>
c001d184:	84 c0                	test   al,al
c001d186:	75 15                	jne    c001d19d <ATAPI::detectMedia()+0xb5>
c001d188:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d18f:	75 0c                	jne    c001d19d <ATAPI::detectMedia()+0xb5>
c001d191:	83 ec 0c             	sub    esp,0xc
c001d194:	53                   	push   ebx
c001d195:	e8 20 ff ff ff       	call   c001d0ba <ATAPI::diskInserted()>
c001d19a:	83 c4 10             	add    esp,0x10
c001d19d:	83 c4 24             	add    esp,0x24
c001d1a0:	5b                   	pop    ebx
c001d1a1:	5e                   	pop    esi
c001d1a2:	c3                   	ret    
c001d1a3:	90                   	nop

c001d1a4 <ATAPI::open(int, int, void*)>:
c001d1a4:	53                   	push   ebx
c001d1a5:	83 ec 08             	sub    esp,0x8
c001d1a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1ba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d1c0:	c1 e0 06             	shl    eax,0x6
c001d1c3:	01 d0                	add    eax,edx
c001d1c5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d1cc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d1d2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d1d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d1e3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d1e9:	6a 04                	push   0x4
c001d1eb:	6a 0c                	push   0xc
c001d1ed:	51                   	push   ecx
c001d1ee:	52                   	push   edx
c001d1ef:	e8 be e8 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1f4:	90                   	nop
c001d1f5:	90                   	nop
c001d1f6:	6a 00                	push   0x0
c001d1f8:	6a 0c                	push   0xc
c001d1fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d201:	50                   	push   eax
c001d202:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d208:	e8 a5 e8 ff ff       	call   c001bab2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d20d:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d214:	83 c4 14             	add    esp,0x14
c001d217:	53                   	push   ebx
c001d218:	e8 cb fe ff ff       	call   c001d0e8 <ATAPI::detectMedia()>
c001d21d:	31 c0                	xor    eax,eax
c001d21f:	83 c4 18             	add    esp,0x18
c001d222:	5b                   	pop    ebx
c001d223:	c3                   	ret    

c001d224 <ATAPI::read(unsigned long long, int, void*)>:
c001d224:	55                   	push   ebp
c001d225:	57                   	push   edi
c001d226:	56                   	push   esi
c001d227:	53                   	push   ebx
c001d228:	83 ec 1c             	sub    esp,0x1c
c001d22b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d22f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d233:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d237:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d23e:	74 41                	je     c001d281 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d240:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d244:	b9 03 00 00 00       	mov    ecx,0x3
c001d249:	fc                   	cld    
c001d24a:	31 c0                	xor    eax,eax
c001d24c:	86 fb                	xchg   bl,bh
c001d24e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d250:	c1 c3 10             	rol    ebx,0x10
c001d253:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d258:	89 e8                	mov    eax,ebp
c001d25a:	86 fb                	xchg   bl,bh
c001d25c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d260:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d264:	50                   	push   eax
c001d265:	50                   	push   eax
c001d266:	55                   	push   ebp
c001d267:	c1 e5 0b             	shl    ebp,0xb
c001d26a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d26e:	6a 00                	push   0x0
c001d270:	55                   	push   ebp
c001d271:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d275:	50                   	push   eax
c001d276:	56                   	push   esi
c001d277:	e8 1c fb ff ff       	call   c001cd98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d27c:	83 c4 20             	add    esp,0x20
c001d27f:	eb 1a                	jmp    c001d29b <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d281:	83 ec 0c             	sub    esp,0xc
c001d284:	56                   	push   esi
c001d285:	e8 5e fe ff ff       	call   c001d0e8 <ATAPI::detectMedia()>
c001d28a:	83 c4 10             	add    esp,0x10
c001d28d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d294:	75 aa                	jne    c001d240 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d296:	b8 02 00 00 00       	mov    eax,0x2
c001d29b:	83 c4 1c             	add    esp,0x1c
c001d29e:	5b                   	pop    ebx
c001d29f:	5e                   	pop    esi
c001d2a0:	5f                   	pop    edi
c001d2a1:	5d                   	pop    ebp
c001d2a2:	c3                   	ret    
c001d2a3:	90                   	nop

c001d2a4 <AVX::open(int, int, void*)>:
c001d2a4:	83 ec 0c             	sub    esp,0xc
c001d2a7:	e8 0c 10 00 00       	call   c001e2b8 <avxInit>
c001d2ac:	b8 00 00 00 00       	mov    eax,0x0
c001d2b1:	83 c4 0c             	add    esp,0xc
c001d2b4:	c3                   	ret    
c001d2b5:	90                   	nop

c001d2b6 <AVX::close(int, int, void*)>:
c001d2b6:	83 ec 0c             	sub    esp,0xc
c001d2b9:	e8 fb 0f 00 00       	call   c001e2b9 <avxClose>
c001d2be:	b8 00 00 00 00       	mov    eax,0x0
c001d2c3:	83 c4 0c             	add    esp,0xc
c001d2c6:	c3                   	ret    
c001d2c7:	90                   	nop

c001d2c8 <AVX::available()>:
c001d2c8:	83 ec 0c             	sub    esp,0xc
c001d2cb:	e8 e0 0f 00 00       	call   c001e2b0 <avxDetect>
c001d2d0:	85 c0                	test   eax,eax
c001d2d2:	0f 95 c0             	setne  al
c001d2d5:	83 c4 0c             	add    esp,0xc
c001d2d8:	c3                   	ret    
c001d2d9:	90                   	nop

c001d2da <AVX::save(void*)>:
c001d2da:	83 ec 0c             	sub    esp,0xc
c001d2dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2e1:	83 ec 0c             	sub    esp,0xc
c001d2e4:	50                   	push   eax
c001d2e5:	e8 cc 0f 00 00       	call   c001e2b6 <avxSave>
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	90                   	nop
c001d2ee:	83 c4 0c             	add    esp,0xc
c001d2f1:	c3                   	ret    

c001d2f2 <AVX::load(void*)>:
c001d2f2:	83 ec 0c             	sub    esp,0xc
c001d2f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2f9:	83 ec 0c             	sub    esp,0xc
c001d2fc:	50                   	push   eax
c001d2fd:	e8 b5 0f 00 00       	call   c001e2b7 <avxLoad>
c001d302:	83 c4 10             	add    esp,0x10
c001d305:	90                   	nop
c001d306:	83 c4 0c             	add    esp,0xc
c001d309:	c3                   	ret    

c001d30a <AVX::AVX()>:
c001d30a:	83 ec 0c             	sub    esp,0xc
c001d30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d311:	83 ec 08             	sub    esp,0x8
c001d314:	68 08 aa 03 c0       	push   0xc003aa08
c001d319:	50                   	push   eax
c001d31a:	e8 69 68 ff ff       	call   c0013b88 <FPU::FPU(char const*)>
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	ba 18 aa 03 c0       	mov    edx,0xc003aa18
c001d327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d32b:	89 10                	mov    DWORD PTR [eax],edx
c001d32d:	90                   	nop
c001d32e:	83 c4 0c             	add    esp,0xc
c001d331:	c3                   	ret    

c001d332 <MMX::available()>:
c001d332:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001d337:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d33d:	83 e0 20             	and    eax,0x20
c001d340:	84 c0                	test   al,al
c001d342:	0f 95 c0             	setne  al
c001d345:	c3                   	ret    

c001d346 <MMX::open(int, int, void*)>:
c001d346:	83 ec 0c             	sub    esp,0xc
c001d349:	e8 de 0f 00 00       	call   c001e32c <x87Init>
c001d34e:	b8 00 00 00 00       	mov    eax,0x0
c001d353:	83 c4 0c             	add    esp,0xc
c001d356:	c3                   	ret    
c001d357:	90                   	nop

c001d358 <MMX::close(int, int, void*)>:
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	e8 e6 0f 00 00       	call   c001e346 <x87Close>
c001d360:	b8 00 00 00 00       	mov    eax,0x0
c001d365:	83 c4 0c             	add    esp,0xc
c001d368:	c3                   	ret    
c001d369:	90                   	nop

c001d36a <MMX::save(void*)>:
c001d36a:	83 ec 0c             	sub    esp,0xc
c001d36d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d371:	83 ec 0c             	sub    esp,0xc
c001d374:	50                   	push   eax
c001d375:	e8 a7 0f 00 00       	call   c001e321 <x87Save>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	90                   	nop
c001d37e:	83 c4 0c             	add    esp,0xc
c001d381:	c3                   	ret    

c001d382 <MMX::load(void*)>:
c001d382:	83 ec 0c             	sub    esp,0xc
c001d385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d389:	83 ec 0c             	sub    esp,0xc
c001d38c:	50                   	push   eax
c001d38d:	e8 95 0f 00 00       	call   c001e327 <x87Load>
c001d392:	83 c4 10             	add    esp,0x10
c001d395:	90                   	nop
c001d396:	83 c4 0c             	add    esp,0xc
c001d399:	c3                   	ret    

c001d39a <MMX::MMX()>:
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3a1:	83 ec 08             	sub    esp,0x8
c001d3a4:	68 48 aa 03 c0       	push   0xc003aa48
c001d3a9:	50                   	push   eax
c001d3aa:	e8 d9 67 ff ff       	call   c0013b88 <FPU::FPU(char const*)>
c001d3af:	83 c4 10             	add    esp,0x10
c001d3b2:	ba 58 aa 03 c0       	mov    edx,0xc003aa58
c001d3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3bb:	89 10                	mov    DWORD PTR [eax],edx
c001d3bd:	90                   	nop
c001d3be:	83 c4 0c             	add    esp,0xc
c001d3c1:	c3                   	ret    

c001d3c2 <SSE::open(int, int, void*)>:
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	e8 1d 0f 00 00       	call   c001e2e7 <sseInit>
c001d3ca:	b8 00 00 00 00       	mov    eax,0x0
c001d3cf:	83 c4 0c             	add    esp,0xc
c001d3d2:	c3                   	ret    
c001d3d3:	90                   	nop

c001d3d4 <SSE::close(int, int, void*)>:
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	e8 1b 0f 00 00       	call   c001e2f7 <sseClose>
c001d3dc:	b8 00 00 00 00       	mov    eax,0x0
c001d3e1:	83 c4 0c             	add    esp,0xc
c001d3e4:	c3                   	ret    
c001d3e5:	90                   	nop

c001d3e6 <SSE::available()>:
c001d3e6:	83 ec 1c             	sub    esp,0x1c
c001d3e9:	e8 d2 0e 00 00       	call   c001e2c0 <sseDetect>
c001d3ee:	85 c0                	test   eax,eax
c001d3f0:	0f 95 c0             	setne  al
c001d3f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d3f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d3fb:	83 c4 1c             	add    esp,0x1c
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <SSE::save(void*)>:
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d407:	83 ec 0c             	sub    esp,0xc
c001d40a:	50                   	push   eax
c001d40b:	e8 cb 0e 00 00       	call   c001e2db <sseSave>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	90                   	nop
c001d414:	83 c4 0c             	add    esp,0xc
c001d417:	c3                   	ret    

c001d418 <SSE::load(void*)>:
c001d418:	83 ec 0c             	sub    esp,0xc
c001d41b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d41f:	83 ec 0c             	sub    esp,0xc
c001d422:	50                   	push   eax
c001d423:	e8 b9 0e 00 00       	call   c001e2e1 <sseLoad>
c001d428:	83 c4 10             	add    esp,0x10
c001d42b:	90                   	nop
c001d42c:	83 c4 0c             	add    esp,0xc
c001d42f:	c3                   	ret    

c001d430 <SSE::SSE()>:
c001d430:	83 ec 0c             	sub    esp,0xc
c001d433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d437:	83 ec 08             	sub    esp,0x8
c001d43a:	68 88 aa 03 c0       	push   0xc003aa88
c001d43f:	50                   	push   eax
c001d440:	e8 43 67 ff ff       	call   c0013b88 <FPU::FPU(char const*)>
c001d445:	83 c4 10             	add    esp,0x10
c001d448:	ba 98 aa 03 c0       	mov    edx,0xc003aa98
c001d44d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d451:	89 10                	mov    DWORD PTR [eax],edx
c001d453:	90                   	nop
c001d454:	83 c4 0c             	add    esp,0xc
c001d457:	c3                   	ret    

c001d458 <x87::open(int, int, void*)>:
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	e8 cc 0e 00 00       	call   c001e32c <x87Init>
c001d460:	b8 00 00 00 00       	mov    eax,0x0
c001d465:	83 c4 0c             	add    esp,0xc
c001d468:	c3                   	ret    
c001d469:	90                   	nop

c001d46a <x87::close(int, int, void*)>:
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	e8 d4 0e 00 00       	call   c001e346 <x87Close>
c001d472:	b8 00 00 00 00       	mov    eax,0x0
c001d477:	83 c4 0c             	add    esp,0xc
c001d47a:	c3                   	ret    
c001d47b:	90                   	nop

c001d47c <x87::available()>:
c001d47c:	83 ec 0c             	sub    esp,0xc
c001d47f:	e8 82 0e 00 00       	call   c001e306 <x87Detect>
c001d484:	85 c0                	test   eax,eax
c001d486:	0f 95 c0             	setne  al
c001d489:	83 c4 0c             	add    esp,0xc
c001d48c:	c3                   	ret    
c001d48d:	90                   	nop

c001d48e <x87::save(void*)>:
c001d48e:	83 ec 0c             	sub    esp,0xc
c001d491:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d495:	83 ec 0c             	sub    esp,0xc
c001d498:	50                   	push   eax
c001d499:	e8 83 0e 00 00       	call   c001e321 <x87Save>
c001d49e:	83 c4 10             	add    esp,0x10
c001d4a1:	90                   	nop
c001d4a2:	83 c4 0c             	add    esp,0xc
c001d4a5:	c3                   	ret    

c001d4a6 <x87::load(void*)>:
c001d4a6:	83 ec 0c             	sub    esp,0xc
c001d4a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4ad:	83 ec 0c             	sub    esp,0xc
c001d4b0:	50                   	push   eax
c001d4b1:	e8 71 0e 00 00       	call   c001e327 <x87Load>
c001d4b6:	83 c4 10             	add    esp,0x10
c001d4b9:	90                   	nop
c001d4ba:	83 c4 0c             	add    esp,0xc
c001d4bd:	c3                   	ret    

c001d4be <x87::x87()>:
c001d4be:	83 ec 0c             	sub    esp,0xc
c001d4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4c5:	83 ec 08             	sub    esp,0x8
c001d4c8:	68 c8 aa 03 c0       	push   0xc003aac8
c001d4cd:	50                   	push   eax
c001d4ce:	e8 b5 66 ff ff       	call   c0013b88 <FPU::FPU(char const*)>
c001d4d3:	83 c4 10             	add    esp,0x10
c001d4d6:	ba d8 aa 03 c0       	mov    edx,0xc003aad8
c001d4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4df:	89 10                	mov    DWORD PTR [eax],edx
c001d4e1:	90                   	nop
c001d4e2:	83 c4 0c             	add    esp,0xc
c001d4e5:	c3                   	ret    

c001d4e6 <APIC::disable()>:
c001d4e6:	90                   	nop
c001d4e7:	c3                   	ret    

c001d4e8 <APIC::close(int, int, void*)>:
c001d4e8:	55                   	push   ebp
c001d4e9:	89 e5                	mov    ebp,esp
c001d4eb:	83 ec 08             	sub    esp,0x8
c001d4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4f3:	83 c0 3c             	add    eax,0x3c
c001d4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4fe:	ff d0                	call   eax
c001d500:	83 c4 10             	add    esp,0x10
c001d503:	b8 00 00 00 00       	mov    eax,0x0
c001d508:	c9                   	leave  
c001d509:	c3                   	ret    

c001d50a <IOAPIC::close(int, int, void*)>:
c001d50a:	b8 00 00 00 00       	mov    eax,0x0
c001d50f:	c3                   	ret    

c001d510 <APIC::io_wait()>:
c001d510:	eb 00                	jmp    c001d512 <APIC::io_wait()+0x2>
c001d512:	eb 00                	jmp    c001d514 <APIC::io_wait()+0x4>
c001d514:	90                   	nop
c001d515:	c3                   	ret    

c001d516 <APIC::getBase()>:
c001d516:	55                   	push   ebp
c001d517:	89 e5                	mov    ebp,esp
c001d519:	83 ec 18             	sub    esp,0x18
c001d51c:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001d521:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d527:	83 e0 08             	and    eax,0x8
c001d52a:	84 c0                	test   al,al
c001d52c:	75 07                	jne    c001d535 <APIC::getBase()+0x1f>
c001d52e:	b8 00 00 00 00       	mov    eax,0x0
c001d533:	eb 21                	jmp    c001d556 <APIC::getBase()+0x40>
c001d535:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001d53a:	83 ec 08             	sub    esp,0x8
c001d53d:	6a 1b                	push   0x1b
c001d53f:	50                   	push   eax
c001d540:	e8 a1 df fe ff       	call   c000b4e6 <Computer::rdmsr(unsigned int)>
c001d545:	83 c4 10             	add    esp,0x10
c001d548:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d54b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d54e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d551:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d556:	c9                   	leave  
c001d557:	c3                   	ret    

c001d558 <APIC::eoi(unsigned char)>:
c001d558:	55                   	push   ebp
c001d559:	89 e5                	mov    ebp,esp
c001d55b:	83 ec 28             	sub    esp,0x28
c001d55e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d561:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d564:	83 ec 0c             	sub    esp,0xc
c001d567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d56a:	e8 a7 ff ff ff       	call   c001d516 <APIC::getBase()>
c001d56f:	83 c4 10             	add    esp,0x10
c001d572:	05 b0 00 00 00       	add    eax,0xb0
c001d577:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d57a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d57d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d583:	90                   	nop
c001d584:	c9                   	leave  
c001d585:	c3                   	ret    

c001d586 <APIC::open(int, int, void*)>:
c001d586:	55                   	push   ebp
c001d587:	89 e5                	mov    ebp,esp
c001d589:	57                   	push   edi
c001d58a:	56                   	push   esi
c001d58b:	53                   	push   ebx
c001d58c:	83 ec 1c             	sub    esp,0x1c
c001d58f:	83 ec 0c             	sub    esp,0xc
c001d592:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d595:	e8 7c ff ff ff       	call   c001d516 <APIC::getBase()>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	05 f0 00 00 00       	add    eax,0xf0
c001d5a2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d5a5:	83 ec 0c             	sub    esp,0xc
c001d5a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5ab:	e8 66 ff ff ff       	call   c001d516 <APIC::getBase()>
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	89 c2                	mov    edx,eax
c001d5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5b8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d5be:	0f b6 f8             	movzx  edi,al
c001d5c1:	89 d0                	mov    eax,edx
c001d5c3:	ba 00 00 00 00       	mov    edx,0x0
c001d5c8:	89 c1                	mov    ecx,eax
c001d5ca:	80 e5 ff             	and    ch,0xff
c001d5cd:	89 cb                	mov    ebx,ecx
c001d5cf:	0f b6 f2             	movzx  esi,dl
c001d5d2:	89 d8                	mov    eax,ebx
c001d5d4:	89 f2                	mov    edx,esi
c001d5d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d5d9:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d5dc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d5e0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d5e4:	83 e0 00             	and    eax,0x0
c001d5e7:	09 d0                	or     eax,edx
c001d5e9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d5f6:	8d 50 01             	lea    edx,[eax+0x1]
c001d5f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d5fc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d602:	0f b6 d0             	movzx  edx,al
c001d605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d608:	83 c2 08             	add    edx,0x8
c001d60b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d60f:	0f b6 c9             	movzx  ecx,cl
c001d612:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d618:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d61c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d61f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d621:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d624:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d62b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d62e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d631:	89 10                	mov    DWORD PTR [eax],edx
c001d633:	b8 00 00 00 00       	mov    eax,0x0
c001d638:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d63b:	5b                   	pop    ebx
c001d63c:	5e                   	pop    esi
c001d63d:	5f                   	pop    edi
c001d63e:	5d                   	pop    ebp
c001d63f:	c3                   	ret    

c001d640 <IOAPIC::IOAPIC()>:
c001d640:	83 ec 0c             	sub    esp,0xc
c001d643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d647:	83 ec 08             	sub    esp,0x8
c001d64a:	68 08 ab 03 c0       	push   0xc003ab08
c001d64f:	50                   	push   eax
c001d650:	e8 3f 62 ff ff       	call   c0013894 <Device::Device(char const*)>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	ba 30 ac 03 c0       	mov    edx,0xc003ac30
c001d65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d661:	89 10                	mov    DWORD PTR [eax],edx
c001d663:	90                   	nop
c001d664:	83 c4 0c             	add    esp,0xc
c001d667:	c3                   	ret    

c001d668 <APIC::APIC()>:
c001d668:	53                   	push   ebx
c001d669:	83 ec 18             	sub    esp,0x18
c001d66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d670:	83 ec 08             	sub    esp,0x8
c001d673:	68 10 ab 03 c0       	push   0xc003ab10
c001d678:	50                   	push   eax
c001d679:	e8 3e 69 ff ff       	call   c0013fbc <InterruptController::InterruptController(char const*)>
c001d67e:	83 c4 10             	add    esp,0x10
c001d681:	ba e8 ab 03 c0       	mov    edx,0xc003abe8
c001d686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d68a:	89 10                	mov    DWORD PTR [eax],edx
c001d68c:	a0 60 d0 03 c0       	mov    al,ds:0xc003d060
c001d691:	83 f0 01             	xor    eax,0x1
c001d694:	84 c0                	test   al,al
c001d696:	0f 84 96 00 00 00    	je     c001d732 <APIC::APIC()+0xca>
c001d69c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d6a1:	a0 30 c5 03 c0       	mov    al,ds:0xc003c530
c001d6a6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d6aa:	73 7f                	jae    c001d72b <APIC::APIC()+0xc3>
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	68 68 01 00 00       	push   0x168
c001d6b4:	e8 e1 4c ff ff       	call   c001239a <operator new(unsigned long)>
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	89 c3                	mov    ebx,eax
c001d6be:	83 ec 0c             	sub    esp,0xc
c001d6c1:	53                   	push   ebx
c001d6c2:	e8 79 ff ff ff       	call   c001d640 <IOAPIC::IOAPIC()>
c001d6c7:	83 c4 10             	add    esp,0x10
c001d6ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d6ce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d6d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6d7:	89 14 85 40 d0 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2fc0],edx
c001d6de:	a1 20 d0 03 c0       	mov    eax,ds:0xc003d020
c001d6e3:	40                   	inc    eax
c001d6e4:	a3 20 d0 03 c0       	mov    ds:0xc003d020,eax
c001d6e9:	a1 28 b9 03 c0       	mov    eax,ds:0xc003b928
c001d6ee:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d6f4:	83 ec 08             	sub    esp,0x8
c001d6f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6fb:	50                   	push   eax
c001d6fc:	e8 a3 5f ff ff       	call   c00136a4 <Device::addChild(Device*)>
c001d701:	83 c4 10             	add    esp,0x10
c001d704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d708:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70a:	83 c0 08             	add    eax,0x8
c001d70d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d714:	6a 00                	push   0x0
c001d716:	6a 00                	push   0x0
c001d718:	52                   	push   edx
c001d719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d71d:	ff d0                	call   eax
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d726:	e9 76 ff ff ff       	jmp    c001d6a1 <APIC::APIC()+0x39>
c001d72b:	c6 05 60 d0 03 c0 01 	mov    BYTE PTR ds:0xc003d060,0x1
c001d732:	90                   	nop
c001d733:	83 c4 18             	add    esp,0x18
c001d736:	5b                   	pop    ebx
c001d737:	c3                   	ret    

c001d738 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d738:	55                   	push   ebp
c001d739:	89 e5                	mov    ebp,esp
c001d73b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d73e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d744:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d747:	72 1d                	jb     c001d766 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d74c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d755:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d75b:	01 d0                	add    eax,edx
c001d75d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d760:	73 04                	jae    c001d766 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d762:	b0 01                	mov    al,0x1
c001d764:	eb 02                	jmp    c001d768 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d766:	b0 00                	mov    al,0x0
c001d768:	5d                   	pop    ebp
c001d769:	c3                   	ret    

c001d76a <IOAPIC::read(int)>:
c001d76a:	55                   	push   ebp
c001d76b:	89 e5                	mov    ebp,esp
c001d76d:	83 ec 10             	sub    esp,0x10
c001d770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d773:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d779:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d77c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d77f:	0f b6 d0             	movzx  edx,al
c001d782:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d785:	89 10                	mov    DWORD PTR [eax],edx
c001d787:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d78a:	83 c0 10             	add    eax,0x10
c001d78d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d78f:	c9                   	leave  
c001d790:	c3                   	ret    
c001d791:	90                   	nop

c001d792 <IOAPIC::open(int, int, void*)>:
c001d792:	55                   	push   ebp
c001d793:	89 e5                	mov    ebp,esp
c001d795:	57                   	push   edi
c001d796:	56                   	push   esi
c001d797:	53                   	push   ebx
c001d798:	83 ec 0c             	sub    esp,0xc
c001d79b:	83 ec 0c             	sub    esp,0xc
c001d79e:	68 3b ab 03 c0       	push   0xc003ab3b
c001d7a3:	e8 42 f6 fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001d7a8:	83 c4 10             	add    esp,0x10
c001d7ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d7b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7c0:	8b 14 85 60 c5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3aa0]
c001d7c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d7d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7d9:	8b 14 85 e0 c5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3a20]
c001d7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d7f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d7fb:	0f b6 f8             	movzx  edi,al
c001d7fe:	89 d0                	mov    eax,edx
c001d800:	ba 00 00 00 00       	mov    edx,0x0
c001d805:	89 c1                	mov    ecx,eax
c001d807:	80 e5 ff             	and    ch,0xff
c001d80a:	89 cb                	mov    ebx,ecx
c001d80c:	0f b6 f2             	movzx  esi,dl
c001d80f:	89 d8                	mov    eax,ebx
c001d811:	89 f2                	mov    edx,esi
c001d813:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d816:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d819:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d81d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d821:	83 e0 00             	and    eax,0x0
c001d824:	09 d0                	or     eax,edx
c001d826:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d82a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d82d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d833:	8d 50 01             	lea    edx,[eax+0x1]
c001d836:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d839:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d83f:	0f b6 d0             	movzx  edx,al
c001d842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d845:	83 c2 08             	add    edx,0x8
c001d848:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d84c:	0f b6 c9             	movzx  ecx,cl
c001d84f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d855:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d859:	83 ec 08             	sub    esp,0x8
c001d85c:	6a 01                	push   0x1
c001d85e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d861:	e8 04 ff ff ff       	call   c001d76a <IOAPIC::read(int)>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	c1 f8 10             	sar    eax,0x10
c001d86c:	0f b6 c0             	movzx  eax,al
c001d86f:	8d 50 01             	lea    edx,[eax+0x1]
c001d872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d875:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d87b:	b8 00 00 00 00       	mov    eax,0x0
c001d880:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d883:	5b                   	pop    ebx
c001d884:	5e                   	pop    esi
c001d885:	5f                   	pop    edi
c001d886:	5d                   	pop    ebp
c001d887:	c3                   	ret    

c001d888 <IOAPIC::write(int, int)>:
c001d888:	55                   	push   ebp
c001d889:	89 e5                	mov    ebp,esp
c001d88b:	83 ec 10             	sub    esp,0x10
c001d88e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d891:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d897:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d89a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d89d:	0f b6 d0             	movzx  edx,al
c001d8a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8a3:	89 10                	mov    DWORD PTR [eax],edx
c001d8a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8a8:	8d 50 10             	lea    edx,[eax+0x10]
c001d8ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d8ae:	89 02                	mov    DWORD PTR [edx],eax
c001d8b0:	90                   	nop
c001d8b1:	c9                   	leave  
c001d8b2:	c3                   	ret    
c001d8b3:	90                   	nop

c001d8b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d8b4:	55                   	push   ebp
c001d8b5:	89 e5                	mov    ebp,esp
c001d8b7:	83 ec 20             	sub    esp,0x20
c001d8ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d8c0:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d8c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d8c6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d8c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d8cc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d8cf:	88 d0                	mov    al,dl
c001d8d1:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d8d4:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d8d8:	83 c0 08             	add    eax,0x8
c001d8db:	01 c0                	add    eax,eax
c001d8dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d8e0:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d8e4:	83 c0 08             	add    eax,0x8
c001d8e7:	01 c0                	add    eax,eax
c001d8e9:	40                   	inc    eax
c001d8ea:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d8ed:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d8f0:	50                   	push   eax
c001d8f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8f4:	e8 71 fe ff ff       	call   c001d76a <IOAPIC::read(int)>
c001d8f9:	83 c4 08             	add    esp,0x8
c001d8fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d8ff:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d906:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d909:	c1 e0 18             	shl    eax,0x18
c001d90c:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d90f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d912:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d915:	52                   	push   edx
c001d916:	50                   	push   eax
c001d917:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d91a:	e8 69 ff ff ff       	call   c001d888 <IOAPIC::write(int, int)>
c001d91f:	83 c4 0c             	add    esp,0xc
c001d922:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d925:	50                   	push   eax
c001d926:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d929:	e8 3c fe ff ff       	call   c001d76a <IOAPIC::read(int)>
c001d92e:	83 c4 08             	add    esp,0x8
c001d931:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d934:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d93b:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d942:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d949:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d950:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d954:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d957:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d95a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d95d:	52                   	push   edx
c001d95e:	50                   	push   eax
c001d95f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d962:	e8 21 ff ff ff       	call   c001d888 <IOAPIC::write(int, int)>
c001d967:	83 c4 0c             	add    esp,0xc
c001d96a:	90                   	nop
c001d96b:	c9                   	leave  
c001d96c:	c3                   	ret    
c001d96d:	90                   	nop

c001d96e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d96e:	55                   	push   ebp
c001d96f:	89 e5                	mov    ebp,esp
c001d971:	56                   	push   esi
c001d972:	53                   	push   ebx
c001d973:	83 ec 20             	sub    esp,0x20
c001d976:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d979:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d97c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d980:	74 28                	je     c001d9aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d982:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d986:	7f 12                	jg     c001d99a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d988:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d98b:	05 80 b0 03 c0       	add    eax,0xc003b080
c001d990:	8a 00                	mov    al,BYTE PTR [eax]
c001d992:	0f b6 c0             	movzx  eax,al
c001d995:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d998:	eb 10                	jmp    c001d9aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d99a:	83 ec 0c             	sub    esp,0xc
c001d99d:	68 4c ab 03 c0       	push   0xc003ab4c
c001d9a2:	e8 61 f5 fe ff       	call   c000cf08 <panic(char const*)>
c001d9a7:	83 c4 10             	add    esp,0x10
c001d9aa:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d9ae:	a1 20 d0 03 c0       	mov    eax,ds:0xc003d020
c001d9b3:	83 ec 08             	sub    esp,0x8
c001d9b6:	50                   	push   eax
c001d9b7:	68 84 ab 03 c0       	push   0xc003ab84
c001d9bc:	e8 29 f4 fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001d9c1:	83 c4 10             	add    esp,0x10
c001d9c4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d9cb:	a1 20 d0 03 c0       	mov    eax,ds:0xc003d020
c001d9d0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d9d3:	7d 58                	jge    c001da2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d9d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9d8:	8b 04 85 40 d0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2fc0]
c001d9df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9e2:	83 ec 08             	sub    esp,0x8
c001d9e5:	52                   	push   edx
c001d9e6:	50                   	push   eax
c001d9e7:	e8 4c fd ff ff       	call   c001d738 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d9ec:	83 c4 10             	add    esp,0x10
c001d9ef:	84 c0                	test   al,al
c001d9f1:	74 35                	je     c001da28 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d9f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9f6:	8b 1c 85 40 d0 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2fc0]
c001d9fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da00:	83 c0 20             	add    eax,0x20
c001da03:	0f b6 f0             	movzx  esi,al
c001da06:	e8 c2 96 ff ff       	call   c00170cd <getCPUNumber()>
c001da0b:	99                   	cdq    
c001da0c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001da0f:	0f b6 c9             	movzx  ecx,cl
c001da12:	83 ec 0c             	sub    esp,0xc
c001da15:	56                   	push   esi
c001da16:	52                   	push   edx
c001da17:	50                   	push   eax
c001da18:	51                   	push   ecx
c001da19:	53                   	push   ebx
c001da1a:	e8 95 fe ff ff       	call   c001d8b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001da1f:	83 c4 20             	add    esp,0x20
c001da22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001da26:	eb 05                	jmp    c001da2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001da28:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001da2b:	eb 9e                	jmp    c001d9cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001da2d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001da30:	83 f0 01             	xor    eax,0x1
c001da33:	84 c0                	test   al,al
c001da35:	74 10                	je     c001da47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001da37:	83 ec 0c             	sub    esp,0xc
c001da3a:	68 9b ab 03 c0       	push   0xc003ab9b
c001da3f:	e8 c4 f4 fe ff       	call   c000cf08 <panic(char const*)>
c001da44:	83 c4 10             	add    esp,0x10
c001da47:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001da4b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001da52:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001da56:	7f 65                	jg     c001dabd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001da58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da5e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001da65:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001da68:	01 ca                	add    edx,ecx
c001da6a:	83 c2 54             	add    edx,0x54
c001da6d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001da71:	85 c0                	test   eax,eax
c001da73:	75 43                	jne    c001dab8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001da75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001da82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001da85:	01 ca                	add    edx,ecx
c001da87:	8d 4a 54             	lea    ecx,[edx+0x54]
c001da8a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001da8d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001da91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001da9e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001daa1:	01 ca                	add    edx,ecx
c001daa3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001daa9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001daac:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dab0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dab3:	83 e8 20             	sub    eax,0x20
c001dab6:	eb 1a                	jmp    c001dad2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dab8:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dabb:	eb 95                	jmp    c001da52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dabd:	83 ec 0c             	sub    esp,0xc
c001dac0:	68 a8 ab 03 c0       	push   0xc003aba8
c001dac5:	e8 3e f4 fe ff       	call   c000cf08 <panic(char const*)>
c001daca:	83 c4 10             	add    esp,0x10
c001dacd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dad2:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dad5:	5b                   	pop    ebx
c001dad6:	5e                   	pop    esi
c001dad7:	5d                   	pop    ebp
c001dad8:	c3                   	ret    
c001dad9:	90                   	nop

c001dada <PIC::disable()>:
c001dada:	55                   	push   ebp
c001dadb:	89 e5                	mov    ebp,esp
c001dadd:	83 ec 10             	sub    esp,0x10
c001dae0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dae6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001daea:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001daed:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001daf1:	ee                   	out    dx,al
c001daf2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001daf8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dafc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001daff:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001db03:	ee                   	out    dx,al
c001db04:	90                   	nop
c001db05:	c9                   	leave  
c001db06:	c3                   	ret    
c001db07:	90                   	nop

c001db08 <PIC::close(int, int, void*)>:
c001db08:	55                   	push   ebp
c001db09:	89 e5                	mov    ebp,esp
c001db0b:	83 ec 08             	sub    esp,0x8
c001db0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db11:	8b 00                	mov    eax,DWORD PTR [eax]
c001db13:	83 c0 3c             	add    eax,0x3c
c001db16:	8b 00                	mov    eax,DWORD PTR [eax]
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db1e:	ff d0                	call   eax
c001db20:	83 c4 10             	add    esp,0x10
c001db23:	b8 00 00 00 00       	mov    eax,0x0
c001db28:	c9                   	leave  
c001db29:	c3                   	ret    

c001db2a <PIC::PIC()>:
c001db2a:	83 ec 0c             	sub    esp,0xc
c001db2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db31:	83 ec 08             	sub    esp,0x8
c001db34:	68 54 ac 03 c0       	push   0xc003ac54
c001db39:	50                   	push   eax
c001db3a:	e8 7d 64 ff ff       	call   c0013fbc <InterruptController::InterruptController(char const*)>
c001db3f:	83 c4 10             	add    esp,0x10
c001db42:	ba 80 ac 03 c0       	mov    edx,0xc003ac80
c001db47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4b:	89 10                	mov    DWORD PTR [eax],edx
c001db4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db57:	0f b6 d0             	movzx  edx,al
c001db5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001db65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db6f:	0f b6 d0             	movzx  edx,al
c001db72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db76:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001db7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db85:	8d 50 01             	lea    edx,[eax+0x1]
c001db88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db8c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001db92:	0f b6 d0             	movzx  edx,al
c001db95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db99:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001db9d:	83 e1 3f             	and    ecx,0x3f
c001dba0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbae:	0f b6 d0             	movzx  edx,al
c001dbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbc6:	0f b6 d0             	movzx  edx,al
c001dbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbdc:	8d 50 01             	lea    edx,[eax+0x1]
c001dbdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dbe3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dbe9:	0f b6 d0             	movzx  edx,al
c001dbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dbf4:	83 e1 3f             	and    ecx,0x3f
c001dbf7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dbfb:	90                   	nop
c001dbfc:	83 c4 0c             	add    esp,0xc
c001dbff:	c3                   	ret    

c001dc00 <PIC::ioWait()>:
c001dc00:	eb 00                	jmp    c001dc02 <PIC::ioWait()+0x2>
c001dc02:	eb 00                	jmp    c001dc04 <PIC::ioWait()+0x4>
c001dc04:	90                   	nop
c001dc05:	c3                   	ret    

c001dc06 <PIC::getIRQReg(int)>:
c001dc06:	55                   	push   ebp
c001dc07:	89 e5                	mov    ebp,esp
c001dc09:	83 ec 10             	sub    esp,0x10
c001dc0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc0f:	0f b6 c0             	movzx  eax,al
c001dc12:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dc18:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dc1b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dc1e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dc22:	ee                   	out    dx,al
c001dc23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc26:	0f b6 c0             	movzx  eax,al
c001dc29:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dc2f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dc32:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dc35:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dc39:	ee                   	out    dx,al
c001dc3a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dc40:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dc44:	89 c2                	mov    edx,eax
c001dc46:	ec                   	in     al,dx
c001dc47:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dc4a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc4d:	0f b6 c0             	movzx  eax,al
c001dc50:	c1 e0 08             	shl    eax,0x8
c001dc53:	89 c1                	mov    ecx,eax
c001dc55:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dc5b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dc5f:	89 c2                	mov    edx,eax
c001dc61:	ec                   	in     al,dx
c001dc62:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dc65:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dc68:	0f b6 c0             	movzx  eax,al
c001dc6b:	09 c8                	or     eax,ecx
c001dc6d:	c9                   	leave  
c001dc6e:	c3                   	ret    
c001dc6f:	90                   	nop

c001dc70 <PIC::eoi(unsigned char)>:
c001dc70:	55                   	push   ebp
c001dc71:	89 e5                	mov    ebp,esp
c001dc73:	83 ec 14             	sub    esp,0x14
c001dc76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc79:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dc7c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dc80:	75 1e                	jne    c001dca0 <PIC::eoi(unsigned char)+0x30>
c001dc82:	6a 0b                	push   0xb
c001dc84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc87:	e8 7a ff ff ff       	call   c001dc06 <PIC::getIRQReg(int)>
c001dc8c:	83 c4 08             	add    esp,0x8
c001dc8f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dc93:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dc97:	25 80 00 00 00       	and    eax,0x80
c001dc9c:	85 c0                	test   eax,eax
c001dc9e:	74 5f                	je     c001dcff <PIC::eoi(unsigned char)+0x8f>
c001dca0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dca4:	75 2d                	jne    c001dcd3 <PIC::eoi(unsigned char)+0x63>
c001dca6:	6a 0b                	push   0xb
c001dca8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dcab:	e8 56 ff ff ff       	call   c001dc06 <PIC::getIRQReg(int)>
c001dcb0:	83 c4 08             	add    esp,0x8
c001dcb3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dcb7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dcba:	66 85 c0             	test   ax,ax
c001dcbd:	78 14                	js     c001dcd3 <PIC::eoi(unsigned char)+0x63>
c001dcbf:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dcc5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dcc9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dccc:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dcd0:	ee                   	out    dx,al
c001dcd1:	eb 2d                	jmp    c001dd00 <PIC::eoi(unsigned char)+0x90>
c001dcd3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dcd7:	76 12                	jbe    c001dceb <PIC::eoi(unsigned char)+0x7b>
c001dcd9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dcdf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dce3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dce6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dcea:	ee                   	out    dx,al
c001dceb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dcf1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dcf5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dcf8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dcfc:	ee                   	out    dx,al
c001dcfd:	eb 01                	jmp    c001dd00 <PIC::eoi(unsigned char)+0x90>
c001dcff:	90                   	nop
c001dd00:	c9                   	leave  
c001dd01:	c3                   	ret    

c001dd02 <PIC::remap()>:
c001dd02:	55                   	push   ebp
c001dd03:	89 e5                	mov    ebp,esp
c001dd05:	83 ec 48             	sub    esp,0x48
c001dd08:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001dd0f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001dd16:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001dd1c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001dd1f:	89 c2                	mov    edx,eax
c001dd21:	ec                   	in     al,dx
c001dd22:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001dd25:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001dd28:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001dd2b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001dd31:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001dd34:	89 c2                	mov    edx,eax
c001dd36:	ec                   	in     al,dx
c001dd37:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001dd3a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001dd3d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001dd40:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001dd46:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001dd4a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001dd4d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001dd50:	ee                   	out    dx,al
c001dd51:	83 ec 0c             	sub    esp,0xc
c001dd54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd57:	e8 a4 fe ff ff       	call   c001dc00 <PIC::ioWait()>
c001dd5c:	83 c4 10             	add    esp,0x10
c001dd5f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001dd65:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001dd69:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001dd6c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001dd6f:	ee                   	out    dx,al
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd76:	e8 85 fe ff ff       	call   c001dc00 <PIC::ioWait()>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001dd81:	0f b6 c0             	movzx  eax,al
c001dd84:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001dd8a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001dd8d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001dd90:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001dd93:	ee                   	out    dx,al
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd9a:	e8 61 fe ff ff       	call   c001dc00 <PIC::ioWait()>
c001dd9f:	83 c4 10             	add    esp,0x10
c001dda2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dda5:	0f b6 c0             	movzx  eax,al
c001dda8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ddae:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ddb1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ddb4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ddb7:	ee                   	out    dx,al
c001ddb8:	83 ec 0c             	sub    esp,0xc
c001ddbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddbe:	e8 3d fe ff ff       	call   c001dc00 <PIC::ioWait()>
c001ddc3:	83 c4 10             	add    esp,0x10
c001ddc6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ddcc:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ddd0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ddd3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ddd6:	ee                   	out    dx,al
c001ddd7:	83 ec 0c             	sub    esp,0xc
c001ddda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dddd:	e8 1e fe ff ff       	call   c001dc00 <PIC::ioWait()>
c001dde2:	83 c4 10             	add    esp,0x10
c001dde5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ddeb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ddef:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ddf2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ddf5:	ee                   	out    dx,al
c001ddf6:	83 ec 0c             	sub    esp,0xc
c001ddf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddfc:	e8 ff fd ff ff       	call   c001dc00 <PIC::ioWait()>
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001de0a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001de0e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001de11:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001de14:	ee                   	out    dx,al
c001de15:	83 ec 0c             	sub    esp,0xc
c001de18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de1b:	e8 e0 fd ff ff       	call   c001dc00 <PIC::ioWait()>
c001de20:	83 c4 10             	add    esp,0x10
c001de23:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001de29:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001de2d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001de30:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001de33:	ee                   	out    dx,al
c001de34:	83 ec 0c             	sub    esp,0xc
c001de37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de3a:	e8 c1 fd ff ff       	call   c001dc00 <PIC::ioWait()>
c001de3f:	83 c4 10             	add    esp,0x10
c001de42:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001de46:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001de4c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001de4f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001de52:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001de55:	ee                   	out    dx,al
c001de56:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001de5a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001de60:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001de63:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001de66:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001de69:	ee                   	out    dx,al
c001de6a:	90                   	nop
c001de6b:	c9                   	leave  
c001de6c:	c3                   	ret    
c001de6d:	90                   	nop

c001de6e <PIC::open(int, int, void*)>:
c001de6e:	55                   	push   ebp
c001de6f:	89 e5                	mov    ebp,esp
c001de71:	83 ec 18             	sub    esp,0x18
c001de74:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001de7a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001de7e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de81:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de85:	ee                   	out    dx,al
c001de86:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001de8c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001de90:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001de93:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001de97:	ee                   	out    dx,al
c001de98:	83 ec 0c             	sub    esp,0xc
c001de9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de9e:	e8 5f fe ff ff       	call   c001dd02 <PIC::remap()>
c001dea3:	83 c4 10             	add    esp,0x10
c001dea6:	b8 00 00 00 00       	mov    eax,0x0
c001deab:	c9                   	leave  
c001deac:	c3                   	ret    
c001dead:	90                   	nop

c001deae <APICTimer::close(int, int, void*)>:
c001deae:	b8 00 00 00 00       	mov    eax,0x0
c001deb3:	c3                   	ret    

c001deb4 <apicTimerHandler(regs*, void*)>:
c001deb4:	83 ec 0c             	sub    esp,0xc
c001deb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001debb:	8b 00                	mov    eax,DWORD PTR [eax]
c001debd:	99                   	cdq    
c001debe:	52                   	push   edx
c001debf:	50                   	push   eax
c001dec0:	6a 00                	push   0x0
c001dec2:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dec7:	e8 70 07 00 00       	call   c001e63c <__udivdi3>
c001decc:	83 c4 10             	add    esp,0x10
c001decf:	83 ec 08             	sub    esp,0x8
c001ded2:	52                   	push   edx
c001ded3:	50                   	push   eax
c001ded4:	e8 b2 77 ff ff       	call   c001568b <timerHandler(unsigned long long)>
c001ded9:	83 c4 10             	add    esp,0x10
c001dedc:	90                   	nop
c001dedd:	83 c4 0c             	add    esp,0xc
c001dee0:	c3                   	ret    
c001dee1:	90                   	nop

c001dee2 <APICTimer::write(int)>:
c001dee2:	53                   	push   ebx
c001dee3:	83 ec 28             	sub    esp,0x28
c001dee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001deea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001deee:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001def4:	e8 d7 91 ff ff       	call   c00170d0 <thisCPU()>
c001def9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001deff:	83 ec 0c             	sub    esp,0xc
c001df02:	50                   	push   eax
c001df03:	e8 0e f6 ff ff       	call   c001d516 <APIC::getBase()>
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df0f:	a1 f0 c2 03 c0       	mov    eax,ds:0xc003c2f0
c001df14:	8b 15 f4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2f4
c001df1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001df22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df26:	05 e0 03 00 00       	add    eax,0x3e0
c001df2b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001df31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df35:	05 80 03 00 00       	add    eax,0x380
c001df3a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001df40:	fb                   	sti    
c001df41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df49:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001df4e:	83 d2 00             	adc    edx,0x0
c001df51:	89 c1                	mov    ecx,eax
c001df53:	89 d3                	mov    ebx,edx
c001df55:	a1 f0 c2 03 c0       	mov    eax,ds:0xc003c2f0
c001df5a:	8b 15 f4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2f4
c001df60:	39 c8                	cmp    eax,ecx
c001df62:	89 d0                	mov    eax,edx
c001df64:	19 d8                	sbb    eax,ebx
c001df66:	73 02                	jae    c001df6a <APICTimer::write(int)+0x88>
c001df68:	eb d7                	jmp    c001df41 <APICTimer::write(int)+0x5f>
c001df6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df6e:	05 20 03 00 00       	add    eax,0x320
c001df73:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001df79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df7d:	05 90 03 00 00       	add    eax,0x390
c001df82:	8b 00                	mov    eax,DWORD PTR [eax]
c001df84:	f7 d0                	not    eax
c001df86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df8a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df92:	ba 00 00 00 00       	mov    edx,0x0
c001df97:	f7 f3                	div    ebx
c001df99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfa1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dfa7:	0d 00 00 02 00       	or     eax,0x20000
c001dfac:	89 c2                	mov    edx,eax
c001dfae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfb2:	05 20 03 00 00       	add    eax,0x320
c001dfb7:	89 10                	mov    DWORD PTR [eax],edx
c001dfb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfbd:	05 e0 03 00 00       	add    eax,0x3e0
c001dfc2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dfc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfcc:	05 80 03 00 00       	add    eax,0x380
c001dfd1:	89 c2                	mov    edx,eax
c001dfd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dfd7:	89 02                	mov    DWORD PTR [edx],eax
c001dfd9:	90                   	nop
c001dfda:	83 c4 28             	add    esp,0x28
c001dfdd:	5b                   	pop    ebx
c001dfde:	c3                   	ret    
c001dfdf:	90                   	nop

c001dfe0 <APICTimer::open(int, int, void*)>:
c001dfe0:	57                   	push   edi
c001dfe1:	56                   	push   esi
c001dfe2:	53                   	push   ebx
c001dfe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfe9:	83 c0 24             	add    eax,0x24
c001dfec:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfee:	83 ec 08             	sub    esp,0x8
c001dff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dff5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dff9:	ff d0                	call   eax
c001dffb:	83 c4 10             	add    esp,0x10
c001dffe:	e8 cd 90 ff ff       	call   c00170d0 <thisCPU()>
c001e003:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e009:	83 ec 0c             	sub    esp,0xc
c001e00c:	50                   	push   eax
c001e00d:	e8 04 f5 ff ff       	call   c001d516 <APIC::getBase()>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e025:	0f b6 f8             	movzx  edi,al
c001e028:	89 d0                	mov    eax,edx
c001e02a:	ba 00 00 00 00       	mov    edx,0x0
c001e02f:	89 c1                	mov    ecx,eax
c001e031:	80 e5 ff             	and    ch,0xff
c001e034:	89 cb                	mov    ebx,ecx
c001e036:	0f b6 f2             	movzx  esi,dl
c001e039:	89 d8                	mov    eax,ebx
c001e03b:	89 f2                	mov    edx,esi
c001e03d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e041:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e044:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e048:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e04c:	83 e0 00             	and    eax,0x0
c001e04f:	09 d0                	or     eax,edx
c001e051:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e059:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e05f:	8d 50 01             	lea    edx,[eax+0x1]
c001e062:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e066:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e06c:	0f b6 d0             	movzx  edx,al
c001e06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e073:	83 c2 08             	add    edx,0x8
c001e076:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e07a:	0f b6 c9             	movzx  ecx,cl
c001e07d:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e083:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e08f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e099:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e09d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e0a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0a7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e0ad:	83 ec 0c             	sub    esp,0xc
c001e0b0:	51                   	push   ecx
c001e0b1:	6a 01                	push   0x1
c001e0b3:	68 b4 de 01 c0       	push   0xc001deb4
c001e0b8:	52                   	push   edx
c001e0b9:	50                   	push   eax
c001e0ba:	e8 39 55 ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0bf:	83 c4 20             	add    esp,0x20
c001e0c2:	89 c2                	mov    edx,eax
c001e0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e0ce:	b8 00 00 00 00       	mov    eax,0x0
c001e0d3:	5b                   	pop    ebx
c001e0d4:	5e                   	pop    esi
c001e0d5:	5f                   	pop    edi
c001e0d6:	c3                   	ret    
c001e0d7:	90                   	nop

c001e0d8 <APICTimer::APICTimer()>:
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0df:	83 ec 08             	sub    esp,0x8
c001e0e2:	68 c0 ac 03 c0       	push   0xc003acc0
c001e0e7:	50                   	push   eax
c001e0e8:	e8 0f 75 ff ff       	call   c00155fc <Timer::Timer(char const*)>
c001e0ed:	83 c4 10             	add    esp,0x10
c001e0f0:	ba d4 ac 03 c0       	mov    edx,0xc003acd4
c001e0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f9:	89 10                	mov    DWORD PTR [eax],edx
c001e0fb:	90                   	nop
c001e0fc:	83 c4 0c             	add    esp,0xc
c001e0ff:	c3                   	ret    

c001e100 <PIT::write(int)>:
c001e100:	83 ec 10             	sub    esp,0x10
c001e103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e107:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e10b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e111:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e115:	a3 64 d0 03 c0       	mov    ds:0xc003d064,eax
c001e11a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e11f:	99                   	cdq    
c001e120:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e124:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e128:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e12f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e134:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e138:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e13d:	ee                   	out    dx,al
c001e13e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e142:	0f b6 c0             	movzx  eax,al
c001e145:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e14c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e150:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e154:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e159:	ee                   	out    dx,al
c001e15a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e15e:	c1 f8 08             	sar    eax,0x8
c001e161:	0f b6 c0             	movzx  eax,al
c001e164:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e16b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e16f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e173:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e178:	ee                   	out    dx,al
c001e179:	90                   	nop
c001e17a:	83 c4 10             	add    esp,0x10
c001e17d:	c3                   	ret    

c001e17e <pitHandler(regs*, void*)>:
c001e17e:	83 ec 0c             	sub    esp,0xc
c001e181:	a1 64 d0 03 c0       	mov    eax,ds:0xc003d064
c001e186:	99                   	cdq    
c001e187:	52                   	push   edx
c001e188:	50                   	push   eax
c001e189:	6a 00                	push   0x0
c001e18b:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e190:	e8 a7 04 00 00       	call   c001e63c <__udivdi3>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	83 ec 08             	sub    esp,0x8
c001e19b:	52                   	push   edx
c001e19c:	50                   	push   eax
c001e19d:	e8 e9 74 ff ff       	call   c001568b <timerHandler(unsigned long long)>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	90                   	nop
c001e1a6:	83 c4 0c             	add    esp,0xc
c001e1a9:	c3                   	ret    

c001e1aa <PIT::open(int, int, void*)>:
c001e1aa:	83 ec 0c             	sub    esp,0xc
c001e1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1b3:	83 c0 24             	add    eax,0x24
c001e1b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1b8:	83 ec 08             	sub    esp,0x8
c001e1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1c3:	ff d0                	call   eax
c001e1c5:	83 c4 10             	add    esp,0x10
c001e1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cc:	83 ec 0c             	sub    esp,0xc
c001e1cf:	6a 00                	push   0x0
c001e1d1:	6a 01                	push   0x1
c001e1d3:	68 7e e1 01 c0       	push   0xc001e17e
c001e1d8:	6a 00                	push   0x0
c001e1da:	50                   	push   eax
c001e1db:	e8 18 54 ff ff       	call   c00135f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1e0:	83 c4 20             	add    esp,0x20
c001e1e3:	89 c2                	mov    edx,eax
c001e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1ef:	b8 00 00 00 00       	mov    eax,0x0
c001e1f4:	83 c4 0c             	add    esp,0xc
c001e1f7:	c3                   	ret    

c001e1f8 <PIT::close(int, int, void*)>:
c001e1f8:	83 ec 0c             	sub    esp,0xc
c001e1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ff:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20d:	6a 01                	push   0x1
c001e20f:	68 7e e1 01 c0       	push   0xc001e17e
c001e214:	6a 00                	push   0x0
c001e216:	50                   	push   eax
c001e217:	e8 3a 54 ff ff       	call   c0013656 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e21c:	83 c4 10             	add    esp,0x10
c001e21f:	b8 00 00 00 00       	mov    eax,0x0
c001e224:	83 c4 0c             	add    esp,0xc
c001e227:	c3                   	ret    

c001e228 <PIT::PIT()>:
c001e228:	83 ec 0c             	sub    esp,0xc
c001e22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22f:	83 ec 08             	sub    esp,0x8
c001e232:	68 fc ac 03 c0       	push   0xc003acfc
c001e237:	50                   	push   eax
c001e238:	e8 bf 73 ff ff       	call   c00155fc <Timer::Timer(char const*)>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	ba 24 ad 03 c0       	mov    edx,0xc003ad24
c001e245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e249:	89 10                	mov    DWORD PTR [eax],edx
c001e24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e255:	0f b6 d0             	movzx  edx,al
c001e258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e267:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e26d:	0f b6 d0             	movzx  edx,al
c001e270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e274:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e283:	8d 50 01             	lea    edx,[eax+0x1]
c001e286:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e28a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e290:	0f b6 d0             	movzx  edx,al
c001e293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e297:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e29b:	83 e1 3f             	and    ecx,0x3f
c001e29e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e2a2:	90                   	nop
c001e2a3:	83 c4 0c             	add    esp,0xc
c001e2a6:	c3                   	ret    
c001e2a7:	66 90                	xchg   ax,ax
c001e2a9:	66 90                	xchg   ax,ax
c001e2ab:	66 90                	xchg   ax,ax
c001e2ad:	66 90                	xchg   ax,ax
c001e2af:	90                   	nop

c001e2b0 <avxDetect>:
c001e2b0:	b8 00 00 00 00       	mov    eax,0x0
c001e2b5:	c3                   	ret    

c001e2b6 <avxSave>:
c001e2b6:	c3                   	ret    

c001e2b7 <avxLoad>:
c001e2b7:	c3                   	ret    

c001e2b8 <avxInit>:
c001e2b8:	c3                   	ret    

c001e2b9 <avxClose>:
c001e2b9:	c3                   	ret    
c001e2ba:	66 90                	xchg   ax,ax
c001e2bc:	66 90                	xchg   ax,ax
c001e2be:	66 90                	xchg   ax,ax

c001e2c0 <sseDetect>:
c001e2c0:	b8 01 00 00 00       	mov    eax,0x1
c001e2c5:	0f a2                	cpuid  
c001e2c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2cd:	74 06                	je     c001e2d5 <sseDetect.noSSE>
c001e2cf:	b8 01 00 00 00       	mov    eax,0x1
c001e2d4:	c3                   	ret    

c001e2d5 <sseDetect.noSSE>:
c001e2d5:	b8 00 00 00 00       	mov    eax,0x0
c001e2da:	c3                   	ret    

c001e2db <sseSave>:
c001e2db:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e2e0:	c3                   	ret    

c001e2e1 <sseLoad>:
c001e2e1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e2e6:	c3                   	ret    

c001e2e7 <sseInit>:
c001e2e7:	e8 40 00 00 00       	call   c001e32c <x87Init>
c001e2ec:	0f 20 e0             	mov    eax,cr4
c001e2ef:	66 0d 00 06          	or     ax,0x600
c001e2f3:	0f 22 e0             	mov    cr4,eax
c001e2f6:	c3                   	ret    

c001e2f7 <sseClose>:
c001e2f7:	c3                   	ret    
c001e2f8:	66 90                	xchg   ax,ax
c001e2fa:	66 90                	xchg   ax,ax
c001e2fc:	66 90                	xchg   ax,ax
c001e2fe:	66 90                	xchg   ax,ax

c001e300 <value_37F>:
c001e300:	7f 03                	jg     c001e305 <value_37A+0x1>

c001e302 <value_37E>:
c001e302:	7e 03                	jle    c001e307 <x87Detect+0x1>

c001e304 <value_37A>:
c001e304:	7a 03                	jp     c001e309 <x87Detect+0x3>

c001e306 <x87Detect>:
c001e306:	b8 01 00 00 00       	mov    eax,0x1
c001e30b:	0f a2                	cpuid  
c001e30d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e313:	74 06                	je     c001e31b <x87Detect.nox87>
c001e315:	b8 01 00 00 00       	mov    eax,0x1
c001e31a:	c3                   	ret    

c001e31b <x87Detect.nox87>:
c001e31b:	b8 00 00 00 00       	mov    eax,0x0
c001e320:	c3                   	ret    

c001e321 <x87Save>:
c001e321:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e326:	c3                   	ret    

c001e327 <x87Load>:
c001e327:	dd 64 24 08          	frstor [esp+0x8]
c001e32b:	c3                   	ret    

c001e32c <x87Init>:
c001e32c:	9b db e3             	finit  
c001e32f:	0f 20 c0             	mov    eax,cr0
c001e332:	66 25 fb ff          	and    ax,0xfffb
c001e336:	66 0d 22 00          	or     ax,0x22
c001e33a:	0f 22 c0             	mov    cr0,eax
c001e33d:	0f 06                	clts   
c001e33f:	d9 2d 04 e3 01 c0    	fldcw  WORD PTR ds:0xc001e304
c001e345:	c3                   	ret    

c001e346 <x87Close>:
c001e346:	c3                   	ret    
c001e347:	90                   	nop

c001e348 <__do_global_ctors_aux>:
c001e348:	a1 78 f4 01 c0       	mov    eax,ds:0xc001f478
c001e34d:	83 f8 ff             	cmp    eax,0xffffffff
c001e350:	74 1a                	je     c001e36c <__do_global_ctors_aux+0x24>
c001e352:	55                   	push   ebp
c001e353:	89 e5                	mov    ebp,esp
c001e355:	53                   	push   ebx
c001e356:	52                   	push   edx
c001e357:	bb 78 f4 01 c0       	mov    ebx,0xc001f478
c001e35c:	ff d0                	call   eax
c001e35e:	83 eb 04             	sub    ebx,0x4
c001e361:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e363:	83 f8 ff             	cmp    eax,0xffffffff
c001e366:	75 f4                	jne    c001e35c <__do_global_ctors_aux+0x14>
c001e368:	58                   	pop    eax
c001e369:	5b                   	pop    ebx
c001e36a:	5d                   	pop    ebp
c001e36b:	c3                   	ret    
c001e36c:	c3                   	ret    
c001e36d:	66 90                	xchg   ax,ax
c001e36f:	90                   	nop

c001e370 <__divdi3>:
c001e370:	55                   	push   ebp
c001e371:	57                   	push   edi
c001e372:	56                   	push   esi
c001e373:	53                   	push   ebx
c001e374:	83 ec 1c             	sub    esp,0x1c
c001e377:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e37b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e37f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e382:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e386:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e38a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e38e:	85 db                	test   ebx,ebx
c001e390:	0f 88 8e 00 00 00    	js     c001e424 <__divdi3+0xb4>
c001e396:	89 dd                	mov    ebp,ebx
c001e398:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3a0:	89 d3                	mov    ebx,edx
c001e3a2:	85 d2                	test   edx,edx
c001e3a4:	79 0d                	jns    c001e3b3 <__divdi3+0x43>
c001e3a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3aa:	f7 d8                	neg    eax
c001e3ac:	83 d2 00             	adc    edx,0x0
c001e3af:	f7 da                	neg    edx
c001e3b1:	89 d3                	mov    ebx,edx
c001e3b3:	89 c7                	mov    edi,eax
c001e3b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3b8:	85 db                	test   ebx,ebx
c001e3ba:	75 48                	jne    c001e404 <__divdi3+0x94>
c001e3bc:	39 ef                	cmp    edi,ebp
c001e3be:	76 24                	jbe    c001e3e4 <__divdi3+0x74>
c001e3c0:	89 ea                	mov    edx,ebp
c001e3c2:	f7 f7                	div    edi
c001e3c4:	89 c1                	mov    ecx,eax
c001e3c6:	31 f6                	xor    esi,esi
c001e3c8:	89 c8                	mov    eax,ecx
c001e3ca:	89 f2                	mov    edx,esi
c001e3cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3d0:	85 c9                	test   ecx,ecx
c001e3d2:	74 07                	je     c001e3db <__divdi3+0x6b>
c001e3d4:	f7 d8                	neg    eax
c001e3d6:	83 d2 00             	adc    edx,0x0
c001e3d9:	f7 da                	neg    edx
c001e3db:	83 c4 1c             	add    esp,0x1c
c001e3de:	5b                   	pop    ebx
c001e3df:	5e                   	pop    esi
c001e3e0:	5f                   	pop    edi
c001e3e1:	5d                   	pop    ebp
c001e3e2:	c3                   	ret    
c001e3e3:	90                   	nop
c001e3e4:	85 ff                	test   edi,edi
c001e3e6:	75 0b                	jne    c001e3f3 <__divdi3+0x83>
c001e3e8:	b8 01 00 00 00       	mov    eax,0x1
c001e3ed:	31 d2                	xor    edx,edx
c001e3ef:	f7 f3                	div    ebx
c001e3f1:	89 c7                	mov    edi,eax
c001e3f3:	31 d2                	xor    edx,edx
c001e3f5:	89 e8                	mov    eax,ebp
c001e3f7:	f7 f7                	div    edi
c001e3f9:	89 c6                	mov    esi,eax
c001e3fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3fe:	f7 f7                	div    edi
c001e400:	89 c1                	mov    ecx,eax
c001e402:	eb c4                	jmp    c001e3c8 <__divdi3+0x58>
c001e404:	39 eb                	cmp    ebx,ebp
c001e406:	77 3c                	ja     c001e444 <__divdi3+0xd4>
c001e408:	0f bd f3             	bsr    esi,ebx
c001e40b:	83 f6 1f             	xor    esi,0x1f
c001e40e:	75 40                	jne    c001e450 <__divdi3+0xe0>
c001e410:	39 eb                	cmp    ebx,ebp
c001e412:	72 09                	jb     c001e41d <__divdi3+0xad>
c001e414:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e417:	0f 87 97 00 00 00    	ja     c001e4b4 <__divdi3+0x144>
c001e41d:	b9 01 00 00 00       	mov    ecx,0x1
c001e422:	eb a4                	jmp    c001e3c8 <__divdi3+0x58>
c001e424:	f7 d9                	neg    ecx
c001e426:	83 d3 00             	adc    ebx,0x0
c001e429:	f7 db                	neg    ebx
c001e42b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e42e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e432:	89 dd                	mov    ebp,ebx
c001e434:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e43c:	e9 5f ff ff ff       	jmp    c001e3a0 <__divdi3+0x30>
c001e441:	8d 76 00             	lea    esi,[esi+0x0]
c001e444:	31 f6                	xor    esi,esi
c001e446:	31 c9                	xor    ecx,ecx
c001e448:	e9 7b ff ff ff       	jmp    c001e3c8 <__divdi3+0x58>
c001e44d:	8d 76 00             	lea    esi,[esi+0x0]
c001e450:	b8 20 00 00 00       	mov    eax,0x20
c001e455:	29 f0                	sub    eax,esi
c001e457:	89 f1                	mov    ecx,esi
c001e459:	d3 e3                	shl    ebx,cl
c001e45b:	89 fa                	mov    edx,edi
c001e45d:	88 c1                	mov    cl,al
c001e45f:	d3 ea                	shr    edx,cl
c001e461:	09 da                	or     edx,ebx
c001e463:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e467:	89 f1                	mov    ecx,esi
c001e469:	d3 e7                	shl    edi,cl
c001e46b:	89 eb                	mov    ebx,ebp
c001e46d:	88 c1                	mov    cl,al
c001e46f:	d3 eb                	shr    ebx,cl
c001e471:	89 f1                	mov    ecx,esi
c001e473:	d3 e5                	shl    ebp,cl
c001e475:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e478:	88 c1                	mov    cl,al
c001e47a:	d3 ea                	shr    edx,cl
c001e47c:	09 d5                	or     ebp,edx
c001e47e:	89 e8                	mov    eax,ebp
c001e480:	89 da                	mov    edx,ebx
c001e482:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e486:	89 d3                	mov    ebx,edx
c001e488:	89 c5                	mov    ebp,eax
c001e48a:	f7 e7                	mul    edi
c001e48c:	39 d3                	cmp    ebx,edx
c001e48e:	72 18                	jb     c001e4a8 <__divdi3+0x138>
c001e490:	74 0a                	je     c001e49c <__divdi3+0x12c>
c001e492:	89 e9                	mov    ecx,ebp
c001e494:	31 f6                	xor    esi,esi
c001e496:	e9 2d ff ff ff       	jmp    c001e3c8 <__divdi3+0x58>
c001e49b:	90                   	nop
c001e49c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e49f:	89 f1                	mov    ecx,esi
c001e4a1:	d3 e7                	shl    edi,cl
c001e4a3:	39 c7                	cmp    edi,eax
c001e4a5:	73 eb                	jae    c001e492 <__divdi3+0x122>
c001e4a7:	90                   	nop
c001e4a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4ab:	31 f6                	xor    esi,esi
c001e4ad:	e9 16 ff ff ff       	jmp    c001e3c8 <__divdi3+0x58>
c001e4b2:	66 90                	xchg   ax,ax
c001e4b4:	31 c9                	xor    ecx,ecx
c001e4b6:	e9 0d ff ff ff       	jmp    c001e3c8 <__divdi3+0x58>
c001e4bb:	90                   	nop

c001e4bc <__moddi3>:
c001e4bc:	55                   	push   ebp
c001e4bd:	57                   	push   edi
c001e4be:	56                   	push   esi
c001e4bf:	53                   	push   ebx
c001e4c0:	83 ec 2c             	sub    esp,0x2c
c001e4c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e4cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e4d3:	85 db                	test   ebx,ebx
c001e4d5:	0f 88 85 00 00 00    	js     c001e560 <__moddi3+0xa4>
c001e4db:	89 de                	mov    esi,ebx
c001e4dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e4e5:	89 d7                	mov    edi,edx
c001e4e7:	85 d2                	test   edx,edx
c001e4e9:	79 09                	jns    c001e4f4 <__moddi3+0x38>
c001e4eb:	f7 d8                	neg    eax
c001e4ed:	83 d2 00             	adc    edx,0x0
c001e4f0:	f7 da                	neg    edx
c001e4f2:	89 d7                	mov    edi,edx
c001e4f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f8:	89 cd                	mov    ebp,ecx
c001e4fa:	85 ff                	test   edi,edi
c001e4fc:	75 52                	jne    c001e550 <__moddi3+0x94>
c001e4fe:	89 c3                	mov    ebx,eax
c001e500:	39 f0                	cmp    eax,esi
c001e502:	76 24                	jbe    c001e528 <__moddi3+0x6c>
c001e504:	89 c8                	mov    eax,ecx
c001e506:	89 f2                	mov    edx,esi
c001e508:	f7 f3                	div    ebx
c001e50a:	89 d6                	mov    esi,edx
c001e50c:	89 f0                	mov    eax,esi
c001e50e:	31 d2                	xor    edx,edx
c001e510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e514:	85 c9                	test   ecx,ecx
c001e516:	74 07                	je     c001e51f <__moddi3+0x63>
c001e518:	f7 d8                	neg    eax
c001e51a:	83 d2 00             	adc    edx,0x0
c001e51d:	f7 da                	neg    edx
c001e51f:	83 c4 2c             	add    esp,0x2c
c001e522:	5b                   	pop    ebx
c001e523:	5e                   	pop    esi
c001e524:	5f                   	pop    edi
c001e525:	5d                   	pop    ebp
c001e526:	c3                   	ret    
c001e527:	90                   	nop
c001e528:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e52c:	85 db                	test   ebx,ebx
c001e52e:	75 0d                	jne    c001e53d <__moddi3+0x81>
c001e530:	b8 01 00 00 00       	mov    eax,0x1
c001e535:	31 d2                	xor    edx,edx
c001e537:	f7 f7                	div    edi
c001e539:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e53d:	89 f0                	mov    eax,esi
c001e53f:	31 d2                	xor    edx,edx
c001e541:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e545:	f7 f7                	div    edi
c001e547:	89 e8                	mov    eax,ebp
c001e549:	f7 f7                	div    edi
c001e54b:	89 d6                	mov    esi,edx
c001e54d:	eb bd                	jmp    c001e50c <__moddi3+0x50>
c001e54f:	90                   	nop
c001e550:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e554:	39 f7                	cmp    edi,esi
c001e556:	76 20                	jbe    c001e578 <__moddi3+0xbc>
c001e558:	89 c8                	mov    eax,ecx
c001e55a:	89 f2                	mov    edx,esi
c001e55c:	eb b2                	jmp    c001e510 <__moddi3+0x54>
c001e55e:	66 90                	xchg   ax,ax
c001e560:	f7 d9                	neg    ecx
c001e562:	83 d3 00             	adc    ebx,0x0
c001e565:	f7 db                	neg    ebx
c001e567:	89 de                	mov    esi,ebx
c001e569:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e571:	e9 6f ff ff ff       	jmp    c001e4e5 <__moddi3+0x29>
c001e576:	66 90                	xchg   ax,ax
c001e578:	0f bd c7             	bsr    eax,edi
c001e57b:	83 f0 1f             	xor    eax,0x1f
c001e57e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e582:	75 24                	jne    c001e5a8 <__moddi3+0xec>
c001e584:	39 f7                	cmp    edi,esi
c001e586:	72 06                	jb     c001e58e <__moddi3+0xd2>
c001e588:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e58c:	77 0c                	ja     c001e59a <__moddi3+0xde>
c001e58e:	89 e9                	mov    ecx,ebp
c001e590:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e594:	19 fe                	sbb    esi,edi
c001e596:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e59a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e59e:	89 f2                	mov    edx,esi
c001e5a0:	e9 6b ff ff ff       	jmp    c001e510 <__moddi3+0x54>
c001e5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e5a8:	b8 20 00 00 00       	mov    eax,0x20
c001e5ad:	89 c2                	mov    edx,eax
c001e5af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5b3:	29 da                	sub    edx,ebx
c001e5b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5b9:	88 d9                	mov    cl,bl
c001e5bb:	d3 e7                	shl    edi,cl
c001e5bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5c1:	88 d1                	mov    cl,dl
c001e5c3:	d3 e8                	shr    eax,cl
c001e5c5:	09 c7                	or     edi,eax
c001e5c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5cf:	89 d8                	mov    eax,ebx
c001e5d1:	88 d9                	mov    cl,bl
c001e5d3:	d3 e7                	shl    edi,cl
c001e5d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5d9:	89 f3                	mov    ebx,esi
c001e5db:	88 d1                	mov    cl,dl
c001e5dd:	d3 eb                	shr    ebx,cl
c001e5df:	89 c7                	mov    edi,eax
c001e5e1:	88 c1                	mov    cl,al
c001e5e3:	d3 e6                	shl    esi,cl
c001e5e5:	89 e8                	mov    eax,ebp
c001e5e7:	88 d1                	mov    cl,dl
c001e5e9:	d3 e8                	shr    eax,cl
c001e5eb:	09 f0                	or     eax,esi
c001e5ed:	89 f9                	mov    ecx,edi
c001e5ef:	d3 e5                	shl    ebp,cl
c001e5f1:	89 da                	mov    edx,ebx
c001e5f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e5f7:	89 d3                	mov    ebx,edx
c001e5f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e5fd:	89 c6                	mov    esi,eax
c001e5ff:	89 d1                	mov    ecx,edx
c001e601:	39 d3                	cmp    ebx,edx
c001e603:	72 27                	jb     c001e62c <__moddi3+0x170>
c001e605:	74 21                	je     c001e628 <__moddi3+0x16c>
c001e607:	29 f5                	sub    ebp,esi
c001e609:	19 cb                	sbb    ebx,ecx
c001e60b:	89 de                	mov    esi,ebx
c001e60d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e611:	d3 e6                	shl    esi,cl
c001e613:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e617:	89 f9                	mov    ecx,edi
c001e619:	d3 ed                	shr    ebp,cl
c001e61b:	09 ee                	or     esi,ebp
c001e61d:	89 f0                	mov    eax,esi
c001e61f:	d3 eb                	shr    ebx,cl
c001e621:	89 da                	mov    edx,ebx
c001e623:	e9 e8 fe ff ff       	jmp    c001e510 <__moddi3+0x54>
c001e628:	39 c5                	cmp    ebp,eax
c001e62a:	73 db                	jae    c001e607 <__moddi3+0x14b>
c001e62c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e630:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e634:	89 d1                	mov    ecx,edx
c001e636:	89 c6                	mov    esi,eax
c001e638:	eb cd                	jmp    c001e607 <__moddi3+0x14b>
c001e63a:	66 90                	xchg   ax,ax

c001e63c <__udivdi3>:
c001e63c:	55                   	push   ebp
c001e63d:	57                   	push   edi
c001e63e:	56                   	push   esi
c001e63f:	53                   	push   ebx
c001e640:	83 ec 1c             	sub    esp,0x1c
c001e643:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e647:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e64b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e64f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e653:	85 d2                	test   edx,edx
c001e655:	75 41                	jne    c001e698 <__udivdi3+0x5c>
c001e657:	39 f7                	cmp    edi,esi
c001e659:	76 15                	jbe    c001e670 <__udivdi3+0x34>
c001e65b:	89 e8                	mov    eax,ebp
c001e65d:	89 f2                	mov    edx,esi
c001e65f:	f7 f7                	div    edi
c001e661:	31 db                	xor    ebx,ebx
c001e663:	89 da                	mov    edx,ebx
c001e665:	83 c4 1c             	add    esp,0x1c
c001e668:	5b                   	pop    ebx
c001e669:	5e                   	pop    esi
c001e66a:	5f                   	pop    edi
c001e66b:	5d                   	pop    ebp
c001e66c:	c3                   	ret    
c001e66d:	8d 76 00             	lea    esi,[esi+0x0]
c001e670:	89 f9                	mov    ecx,edi
c001e672:	85 ff                	test   edi,edi
c001e674:	75 0b                	jne    c001e681 <__udivdi3+0x45>
c001e676:	b8 01 00 00 00       	mov    eax,0x1
c001e67b:	31 d2                	xor    edx,edx
c001e67d:	f7 f7                	div    edi
c001e67f:	89 c1                	mov    ecx,eax
c001e681:	31 d2                	xor    edx,edx
c001e683:	89 f0                	mov    eax,esi
c001e685:	f7 f1                	div    ecx
c001e687:	89 c3                	mov    ebx,eax
c001e689:	89 e8                	mov    eax,ebp
c001e68b:	f7 f1                	div    ecx
c001e68d:	89 da                	mov    edx,ebx
c001e68f:	83 c4 1c             	add    esp,0x1c
c001e692:	5b                   	pop    ebx
c001e693:	5e                   	pop    esi
c001e694:	5f                   	pop    edi
c001e695:	5d                   	pop    ebp
c001e696:	c3                   	ret    
c001e697:	90                   	nop
c001e698:	39 f2                	cmp    edx,esi
c001e69a:	77 1c                	ja     c001e6b8 <__udivdi3+0x7c>
c001e69c:	0f bd da             	bsr    ebx,edx
c001e69f:	83 f3 1f             	xor    ebx,0x1f
c001e6a2:	75 24                	jne    c001e6c8 <__udivdi3+0x8c>
c001e6a4:	39 f2                	cmp    edx,esi
c001e6a6:	72 08                	jb     c001e6b0 <__udivdi3+0x74>
c001e6a8:	39 ef                	cmp    edi,ebp
c001e6aa:	0f 87 84 00 00 00    	ja     c001e734 <__udivdi3+0xf8>
c001e6b0:	b8 01 00 00 00       	mov    eax,0x1
c001e6b5:	eb ac                	jmp    c001e663 <__udivdi3+0x27>
c001e6b7:	90                   	nop
c001e6b8:	31 db                	xor    ebx,ebx
c001e6ba:	31 c0                	xor    eax,eax
c001e6bc:	89 da                	mov    edx,ebx
c001e6be:	83 c4 1c             	add    esp,0x1c
c001e6c1:	5b                   	pop    ebx
c001e6c2:	5e                   	pop    esi
c001e6c3:	5f                   	pop    edi
c001e6c4:	5d                   	pop    ebp
c001e6c5:	c3                   	ret    
c001e6c6:	66 90                	xchg   ax,ax
c001e6c8:	b8 20 00 00 00       	mov    eax,0x20
c001e6cd:	29 d8                	sub    eax,ebx
c001e6cf:	88 d9                	mov    cl,bl
c001e6d1:	d3 e2                	shl    edx,cl
c001e6d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e6d7:	89 fa                	mov    edx,edi
c001e6d9:	88 c1                	mov    cl,al
c001e6db:	d3 ea                	shr    edx,cl
c001e6dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6e1:	09 d1                	or     ecx,edx
c001e6e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6e7:	88 d9                	mov    cl,bl
c001e6e9:	d3 e7                	shl    edi,cl
c001e6eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6ef:	89 f7                	mov    edi,esi
c001e6f1:	88 c1                	mov    cl,al
c001e6f3:	d3 ef                	shr    edi,cl
c001e6f5:	88 d9                	mov    cl,bl
c001e6f7:	d3 e6                	shl    esi,cl
c001e6f9:	89 ea                	mov    edx,ebp
c001e6fb:	88 c1                	mov    cl,al
c001e6fd:	d3 ea                	shr    edx,cl
c001e6ff:	09 d6                	or     esi,edx
c001e701:	89 f0                	mov    eax,esi
c001e703:	89 fa                	mov    edx,edi
c001e705:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e709:	89 d7                	mov    edi,edx
c001e70b:	89 c6                	mov    esi,eax
c001e70d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e711:	39 d7                	cmp    edi,edx
c001e713:	72 13                	jb     c001e728 <__udivdi3+0xec>
c001e715:	74 09                	je     c001e720 <__udivdi3+0xe4>
c001e717:	89 f0                	mov    eax,esi
c001e719:	31 db                	xor    ebx,ebx
c001e71b:	e9 43 ff ff ff       	jmp    c001e663 <__udivdi3+0x27>
c001e720:	88 d9                	mov    cl,bl
c001e722:	d3 e5                	shl    ebp,cl
c001e724:	39 c5                	cmp    ebp,eax
c001e726:	73 ef                	jae    c001e717 <__udivdi3+0xdb>
c001e728:	8d 46 ff             	lea    eax,[esi-0x1]
c001e72b:	31 db                	xor    ebx,ebx
c001e72d:	e9 31 ff ff ff       	jmp    c001e663 <__udivdi3+0x27>
c001e732:	66 90                	xchg   ax,ax
c001e734:	31 c0                	xor    eax,eax
c001e736:	e9 28 ff ff ff       	jmp    c001e663 <__udivdi3+0x27>
c001e73b:	90                   	nop

c001e73c <__umoddi3>:
c001e73c:	55                   	push   ebp
c001e73d:	57                   	push   edi
c001e73e:	56                   	push   esi
c001e73f:	53                   	push   ebx
c001e740:	83 ec 1c             	sub    esp,0x1c
c001e743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e747:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e74b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e74f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e753:	89 da                	mov    edx,ebx
c001e755:	85 c0                	test   eax,eax
c001e757:	75 37                	jne    c001e790 <__umoddi3+0x54>
c001e759:	39 df                	cmp    edi,ebx
c001e75b:	76 13                	jbe    c001e770 <__umoddi3+0x34>
c001e75d:	89 f0                	mov    eax,esi
c001e75f:	f7 f7                	div    edi
c001e761:	89 d0                	mov    eax,edx
c001e763:	31 d2                	xor    edx,edx
c001e765:	83 c4 1c             	add    esp,0x1c
c001e768:	5b                   	pop    ebx
c001e769:	5e                   	pop    esi
c001e76a:	5f                   	pop    edi
c001e76b:	5d                   	pop    ebp
c001e76c:	c3                   	ret    
c001e76d:	8d 76 00             	lea    esi,[esi+0x0]
c001e770:	89 fd                	mov    ebp,edi
c001e772:	85 ff                	test   edi,edi
c001e774:	75 0b                	jne    c001e781 <__umoddi3+0x45>
c001e776:	b8 01 00 00 00       	mov    eax,0x1
c001e77b:	31 d2                	xor    edx,edx
c001e77d:	f7 f7                	div    edi
c001e77f:	89 c5                	mov    ebp,eax
c001e781:	89 d8                	mov    eax,ebx
c001e783:	31 d2                	xor    edx,edx
c001e785:	f7 f5                	div    ebp
c001e787:	89 f0                	mov    eax,esi
c001e789:	f7 f5                	div    ebp
c001e78b:	89 d0                	mov    eax,edx
c001e78d:	eb d4                	jmp    c001e763 <__umoddi3+0x27>
c001e78f:	90                   	nop
c001e790:	89 f1                	mov    ecx,esi
c001e792:	39 d8                	cmp    eax,ebx
c001e794:	76 0a                	jbe    c001e7a0 <__umoddi3+0x64>
c001e796:	89 f0                	mov    eax,esi
c001e798:	83 c4 1c             	add    esp,0x1c
c001e79b:	5b                   	pop    ebx
c001e79c:	5e                   	pop    esi
c001e79d:	5f                   	pop    edi
c001e79e:	5d                   	pop    ebp
c001e79f:	c3                   	ret    
c001e7a0:	0f bd e8             	bsr    ebp,eax
c001e7a3:	83 f5 1f             	xor    ebp,0x1f
c001e7a6:	75 1c                	jne    c001e7c4 <__umoddi3+0x88>
c001e7a8:	39 d8                	cmp    eax,ebx
c001e7aa:	72 04                	jb     c001e7b0 <__umoddi3+0x74>
c001e7ac:	39 f7                	cmp    edi,esi
c001e7ae:	77 08                	ja     c001e7b8 <__umoddi3+0x7c>
c001e7b0:	89 da                	mov    edx,ebx
c001e7b2:	29 fe                	sub    esi,edi
c001e7b4:	19 c2                	sbb    edx,eax
c001e7b6:	89 f1                	mov    ecx,esi
c001e7b8:	89 c8                	mov    eax,ecx
c001e7ba:	83 c4 1c             	add    esp,0x1c
c001e7bd:	5b                   	pop    ebx
c001e7be:	5e                   	pop    esi
c001e7bf:	5f                   	pop    edi
c001e7c0:	5d                   	pop    ebp
c001e7c1:	c3                   	ret    
c001e7c2:	66 90                	xchg   ax,ax
c001e7c4:	ba 20 00 00 00       	mov    edx,0x20
c001e7c9:	29 ea                	sub    edx,ebp
c001e7cb:	89 e9                	mov    ecx,ebp
c001e7cd:	d3 e0                	shl    eax,cl
c001e7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7d3:	89 f8                	mov    eax,edi
c001e7d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e7d9:	88 d1                	mov    cl,dl
c001e7db:	d3 e8                	shr    eax,cl
c001e7dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7e1:	09 c1                	or     ecx,eax
c001e7e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7e7:	89 e9                	mov    ecx,ebp
c001e7e9:	d3 e7                	shl    edi,cl
c001e7eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7ef:	89 d8                	mov    eax,ebx
c001e7f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7f5:	88 d1                	mov    cl,dl
c001e7f7:	d3 e8                	shr    eax,cl
c001e7f9:	89 c7                	mov    edi,eax
c001e7fb:	89 e9                	mov    ecx,ebp
c001e7fd:	d3 e3                	shl    ebx,cl
c001e7ff:	89 f0                	mov    eax,esi
c001e801:	88 d1                	mov    cl,dl
c001e803:	d3 e8                	shr    eax,cl
c001e805:	09 d8                	or     eax,ebx
c001e807:	89 e9                	mov    ecx,ebp
c001e809:	d3 e6                	shl    esi,cl
c001e80b:	89 f3                	mov    ebx,esi
c001e80d:	89 fa                	mov    edx,edi
c001e80f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e813:	89 d1                	mov    ecx,edx
c001e815:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e819:	89 c6                	mov    esi,eax
c001e81b:	89 d7                	mov    edi,edx
c001e81d:	39 d1                	cmp    ecx,edx
c001e81f:	72 27                	jb     c001e848 <__umoddi3+0x10c>
c001e821:	74 21                	je     c001e844 <__umoddi3+0x108>
c001e823:	89 ca                	mov    edx,ecx
c001e825:	29 f3                	sub    ebx,esi
c001e827:	19 fa                	sbb    edx,edi
c001e829:	89 d0                	mov    eax,edx
c001e82b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e82f:	d3 e0                	shl    eax,cl
c001e831:	89 e9                	mov    ecx,ebp
c001e833:	d3 eb                	shr    ebx,cl
c001e835:	09 d8                	or     eax,ebx
c001e837:	d3 ea                	shr    edx,cl
c001e839:	83 c4 1c             	add    esp,0x1c
c001e83c:	5b                   	pop    ebx
c001e83d:	5e                   	pop    esi
c001e83e:	5f                   	pop    edi
c001e83f:	5d                   	pop    ebp
c001e840:	c3                   	ret    
c001e841:	8d 76 00             	lea    esi,[esi+0x0]
c001e844:	39 c3                	cmp    ebx,eax
c001e846:	73 db                	jae    c001e823 <__umoddi3+0xe7>
c001e848:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e84c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e850:	89 d7                	mov    edi,edx
c001e852:	89 c6                	mov    esi,eax
c001e854:	eb cd                	jmp    c001e823 <__umoddi3+0xe7>
c001e856:	66 90                	xchg   ax,ax
c001e858:	66 90                	xchg   ax,ax
c001e85a:	66 90                	xchg   ax,ax
c001e85c:	66 90                	xchg   ax,ax
c001e85e:	66 90                	xchg   ax,ax

c001e860 <fabs>:
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e867:	89 04 24             	mov    DWORD PTR [esp],eax
c001e86a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e86e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e877:	dd 04 24             	fld    QWORD PTR [esp]
c001e87a:	83 c4 0c             	add    esp,0xc
c001e87d:	c3                   	ret    
c001e87e:	66 90                	xchg   ax,ax

c001e880 <lrint>:
c001e880:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e884:	83 ec 04             	sub    esp,0x4
c001e887:	db 1c 24             	fistp  DWORD PTR [esp]
c001e88a:	58                   	pop    eax
c001e88b:	c3                   	ret    

c001e88c <lrintf>:
c001e88c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e890:	83 ec 04             	sub    esp,0x4
c001e893:	db 1c 24             	fistp  DWORD PTR [esp]
c001e896:	58                   	pop    eax
c001e897:	c3                   	ret    

Disassembly of section .init:

c001e898 <_init>:
c001e898:	55                   	push   ebp
c001e899:	89 e5                	mov    ebp,esp
c001e89b:	e8 78 18 fe ff       	call   c0000118 <frame_dummy>
c001e8a0:	e8 a3 fa ff ff       	call   c001e348 <__do_global_ctors_aux>
c001e8a5:	5d                   	pop    ebp
c001e8a6:	c3                   	ret    

Disassembly of section .fini:

c001e8a7 <_fini>:
c001e8a7:	55                   	push   ebp
c001e8a8:	89 e5                	mov    ebp,esp
c001e8aa:	e8 f9 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e8af:	5d                   	pop    ebp
c001e8b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e8b2 <Computer::~Computer()>:
c001e8b2:	83 ec 0c             	sub    esp,0xc
c001e8b5:	ba 18 88 03 c0       	mov    edx,0xc0038818
c001e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8be:	89 10                	mov    DWORD PTR [eax],edx
c001e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	50                   	push   eax
c001e8c8:	e8 79 4c ff ff       	call   c0013546 <Device::~Device()>
c001e8cd:	83 c4 10             	add    esp,0x10
c001e8d0:	90                   	nop
c001e8d1:	83 c4 0c             	add    esp,0xc
c001e8d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e8d6 <Computer::~Computer()>:
c001e8d6:	83 ec 0c             	sub    esp,0xc
c001e8d9:	83 ec 0c             	sub    esp,0xc
c001e8dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e0:	e8 cd ff ff ff       	call   c001e8b2 <Computer::~Computer()>
c001e8e5:	83 c4 10             	add    esp,0x10
c001e8e8:	83 ec 08             	sub    esp,0x8
c001e8eb:	68 ec 01 00 00       	push   0x1ec
c001e8f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8f4:	e8 b0 3a ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001e8f9:	83 c4 10             	add    esp,0x10
c001e8fc:	83 c4 0c             	add    esp,0xc
c001e8ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e900 <idleCommon()>:
c001e900:	83 ec 0c             	sub    esp,0xc
c001e903:	e8 84 f9 fe ff       	call   c000e28c <lockScheduler()>
c001e908:	e8 b3 fc fe ff       	call   c000e5c0 <schedule()>
c001e90d:	83 c4 0c             	add    esp,0xc
c001e910:	e9 79 f9 fe ff       	jmp    c000e28e <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e915 <CPU::readCR0()>:
c001e915:	83 ec 10             	sub    esp,0x10
c001e918:	0f 20 c0             	mov    eax,cr0
c001e91b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e91f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e923:	83 c4 10             	add    esp,0x10
c001e926:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e927 <CPU::readCR2()>:
c001e927:	83 ec 10             	sub    esp,0x10
c001e92a:	0f 20 d0             	mov    eax,cr2
c001e92d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e939 <CPU::readCR3()>:
c001e939:	83 ec 10             	sub    esp,0x10
c001e93c:	0f 20 d8             	mov    eax,cr3
c001e93f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e94b <CPU::readCR4()>:
c001e94b:	83 ec 10             	sub    esp,0x10
c001e94e:	0f 20 e0             	mov    eax,cr4
c001e951:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e955:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e95d <CPU::writeCR3(unsigned long)>:
c001e95d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e961:	0f 22 d8             	mov    cr3,eax
c001e964:	90                   	nop
c001e965:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e966 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e966:	90                   	nop
c001e967:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e968 <ThreadControlBlock::ThreadControlBlock()>:
c001e968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e96c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e977:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e982:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e989:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e98d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001e994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e998:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9a0:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001e9a4:	90                   	nop
c001e9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e9a6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9e9:	83 ec 0c             	sub    esp,0xc
c001e9ec:	68 28 91 03 c0       	push   0xc0039128
c001e9f1:	e8 f4 e3 fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001e9f6:	83 c4 10             	add    esp,0x10
c001e9f9:	90                   	nop
c001e9fa:	83 c4 0c             	add    esp,0xc
c001e9fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e9fe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e9fe:	83 ec 0c             	sub    esp,0xc
c001ea01:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea06:	75 10                	jne    c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	68 44 91 03 c0       	push   0xc0039144
c001ea10:	e8 f3 e4 fe ff       	call   c000cf08 <panic(char const*)>
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea1e:	85 c0                	test   eax,eax
c001ea20:	74 34                	je     c001ea56 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ea22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea29:	85 c0                	test   eax,eax
c001ea2b:	74 29                	je     c001ea56 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ea2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea38:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea54:	eb 65                	jmp    c001eabb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ea56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5c:	85 c0                	test   eax,eax
c001ea5e:	75 4b                	jne    c001eaab <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ea60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea67:	85 c0                	test   eax,eax
c001ea69:	75 40                	jne    c001eaab <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea73:	89 10                	mov    DWORD PTR [eax],edx
c001ea75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea87:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea95:	85 c0                	test   eax,eax
c001ea97:	74 22                	je     c001eabb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ea99:	83 ec 0c             	sub    esp,0xc
c001ea9c:	68 66 91 03 c0       	push   0xc0039166
c001eaa1:	e8 62 e4 fe ff       	call   c000cf08 <panic(char const*)>
c001eaa6:	83 c4 10             	add    esp,0x10
c001eaa9:	eb 10                	jmp    c001eabb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eaab:	83 ec 0c             	sub    esp,0xc
c001eaae:	68 70 91 03 c0       	push   0xc0039170
c001eab3:	e8 50 e4 fe ff       	call   c000cf08 <panic(char const*)>
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eac2:	8d 50 01             	lea    edx,[eax+0x1]
c001eac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eacc:	90                   	nop
c001eacd:	83 c4 0c             	add    esp,0xc
c001ead0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ead2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ead2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ead8:	85 c0                	test   eax,eax
c001eada:	75 0e                	jne    c001eaea <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eae3:	85 c0                	test   eax,eax
c001eae5:	75 03                	jne    c001eaea <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eae7:	b0 01                	mov    al,0x1
c001eae9:	c3                   	ret    
c001eaea:	b0 00                	mov    al,0x0
c001eaec:	90                   	nop
c001eaed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eaee <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eaee:	83 ec 0c             	sub    esp,0xc
c001eaf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaf7:	85 c0                	test   eax,eax
c001eaf9:	75 15                	jne    c001eb10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	68 7c 91 03 c0       	push   0xc003917c
c001eb03:	e8 00 e4 fe ff       	call   c000cf08 <panic(char const*)>
c001eb08:	83 c4 10             	add    esp,0x10
c001eb0b:	e9 88 00 00 00       	jmp    c001eb98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb1a:	85 c0                	test   eax,eax
c001eb1c:	0f 95 c0             	setne  al
c001eb1f:	84 c0                	test   al,al
c001eb21:	74 10                	je     c001eb33 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eb23:	83 ec 0c             	sub    esp,0xc
c001eb26:	68 c7 91 03 c0       	push   0xc00391c7
c001eb2b:	e8 d8 e3 fe ff       	call   c000cf08 <panic(char const*)>
c001eb30:	83 c4 10             	add    esp,0x10
c001eb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb37:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb3c:	85 c0                	test   eax,eax
c001eb3e:	0f 94 c0             	sete   al
c001eb41:	84 c0                	test   al,al
c001eb43:	74 33                	je     c001eb78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb61:	83 f8 01             	cmp    eax,0x1
c001eb64:	74 21                	je     c001eb87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eb66:	83 ec 0c             	sub    esp,0xc
c001eb69:	68 a0 91 03 c0       	push   0xc00391a0
c001eb6e:	e8 95 e3 fe ff       	call   c000cf08 <panic(char const*)>
c001eb73:	83 c4 10             	add    esp,0x10
c001eb76:	eb 0f                	jmp    c001eb87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb85:	89 10                	mov    DWORD PTR [eax],edx
c001eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb8e:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb95:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb98:	83 c4 0c             	add    esp,0xc
c001eb9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eba4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eba8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ebac <LinkedList<UnixFile>::~LinkedList()>:
c001ebac:	90                   	nop
c001ebad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ebae <LinkedList<UnixFile>::LinkedList()>:
c001ebae:	83 ec 0c             	sub    esp,0xc
c001ebb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ebf1:	83 ec 0c             	sub    esp,0xc
c001ebf4:	68 28 91 03 c0       	push   0xc0039128
c001ebf9:	e8 ec e1 fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001ebfe:	83 c4 10             	add    esp,0x10
c001ec01:	90                   	nop
c001ec02:	83 c4 0c             	add    esp,0xc
c001ec05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ec06 <LinkedList<UnixFile>::getFirstElement()>:
c001ec06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec0a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec0c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ec0e <LinkedList<UnixFile>::removeFirst()>:
c001ec0e:	83 ec 0c             	sub    esp,0xc
c001ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec15:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec17:	85 c0                	test   eax,eax
c001ec19:	75 12                	jne    c001ec2d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ec1b:	83 ec 0c             	sub    esp,0xc
c001ec1e:	68 7c 91 03 c0       	push   0xc003917c
c001ec23:	e8 e0 e2 fe ff       	call   c000cf08 <panic(char const*)>
c001ec28:	83 c4 10             	add    esp,0x10
c001ec2b:	eb 7e                	jmp    c001ecab <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ec2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec37:	85 c0                	test   eax,eax
c001ec39:	74 10                	je     c001ec4b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ec3b:	83 ec 0c             	sub    esp,0xc
c001ec3e:	68 c7 91 03 c0       	push   0xc00391c7
c001ec43:	e8 c0 e2 fe ff       	call   c000cf08 <panic(char const*)>
c001ec48:	83 c4 10             	add    esp,0x10
c001ec4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec54:	85 c0                	test   eax,eax
c001ec56:	75 33                	jne    c001ec8b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec74:	83 f8 01             	cmp    eax,0x1
c001ec77:	74 21                	je     c001ec9a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec79:	83 ec 0c             	sub    esp,0xc
c001ec7c:	68 a0 91 03 c0       	push   0xc00391a0
c001ec81:	e8 82 e2 fe ff       	call   c000cf08 <panic(char const*)>
c001ec86:	83 c4 10             	add    esp,0x10
c001ec89:	eb 0f                	jmp    c001ec9a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec91:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ec94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec98:	89 10                	mov    DWORD PTR [eax],edx
c001ec9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eca1:	8d 50 ff             	lea    edx,[eax-0x1]
c001eca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecab:	83 c4 0c             	add    esp,0xc
c001ecae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ecb0 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ecb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ecb8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ecb8:	83 ec 1c             	sub    esp,0x1c
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ecc2:	e8 3f ff ff ff       	call   c001ec06 <LinkedList<UnixFile>::getFirstElement()>
c001ecc7:	83 c4 10             	add    esp,0x10
c001ecca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ecd3:	74 43                	je     c001ed18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001ecd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecd9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001ecdd:	75 20                	jne    c001ecff <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	68 6c 93 03 c0       	push   0xc003936c
c001ece7:	e8 fe e0 fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001ecec:	83 c4 10             	add    esp,0x10
c001ecef:	83 ec 0c             	sub    esp,0xc
c001ecf2:	68 83 93 03 c0       	push   0xc0039383
c001ecf7:	e8 0c e2 fe ff       	call   c000cf08 <panic(char const*)>
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	83 ec 08             	sub    esp,0x8
c001ed02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed0a:	e8 a1 ff ff ff       	call   c001ecb0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001ed0f:	83 c4 10             	add    esp,0x10
c001ed12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed16:	eb b6                	jmp    c001ecce <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ed18:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed1d:	75 10                	jne    c001ed2f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 44 91 03 c0       	push   0xc0039144
c001ed27:	e8 dc e1 fe ff       	call   c000cf08 <panic(char const*)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed35:	85 c0                	test   eax,eax
c001ed37:	74 34                	je     c001ed6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ed39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed40:	85 c0                	test   eax,eax
c001ed42:	74 29                	je     c001ed6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ed44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed4f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed6b:	eb 65                	jmp    c001edd2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ed6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed71:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed73:	85 c0                	test   eax,eax
c001ed75:	75 4b                	jne    c001edc2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ed77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed7e:	85 c0                	test   eax,eax
c001ed80:	75 40                	jne    c001edc2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ed82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed8a:	89 10                	mov    DWORD PTR [eax],edx
c001ed8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed90:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed9e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eda9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edac:	85 c0                	test   eax,eax
c001edae:	74 22                	je     c001edd2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	68 66 91 03 c0       	push   0xc0039166
c001edb8:	e8 4b e1 fe ff       	call   c000cf08 <panic(char const*)>
c001edbd:	83 c4 10             	add    esp,0x10
c001edc0:	eb 10                	jmp    c001edd2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001edc2:	83 ec 0c             	sub    esp,0xc
c001edc5:	68 70 91 03 c0       	push   0xc0039170
c001edca:	e8 39 e1 fe ff       	call   c000cf08 <panic(char const*)>
c001edcf:	83 c4 10             	add    esp,0x10
c001edd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edd9:	8d 50 01             	lea    edx,[eax+0x1]
c001eddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ede3:	90                   	nop
c001ede4:	83 c4 1c             	add    esp,0x1c
c001ede7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ede8 <DriverlessDevice::~DriverlessDevice()>:
c001ede8:	ba 24 99 03 c0       	mov    edx,0xc0039924
c001eded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edf1:	89 10                	mov    DWORD PTR [eax],edx
c001edf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edf7:	50                   	push   eax
c001edf8:	e8 49 47 ff ff       	call   c0013546 <Device::~Device()>
c001edfd:	83 c4 04             	add    esp,0x4
c001ee00:	90                   	nop
c001ee01:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee02 <DriverlessDevice::~DriverlessDevice()>:
c001ee02:	83 ec 0c             	sub    esp,0xc
c001ee05:	83 ec 0c             	sub    esp,0xc
c001ee08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee0c:	e8 d7 ff ff ff       	call   c001ede8 <DriverlessDevice::~DriverlessDevice()>
c001ee11:	83 c4 10             	add    esp,0x10
c001ee14:	83 ec 08             	sub    esp,0x8
c001ee17:	68 58 01 00 00       	push   0x158
c001ee1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee20:	e8 84 35 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001ee25:	83 c4 10             	add    esp,0x10
c001ee28:	83 c4 0c             	add    esp,0xc
c001ee2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ee2c <LinkedList<Device>::addElement(Device*)>:
c001ee2c:	83 ec 0c             	sub    esp,0xc
c001ee2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee34:	75 10                	jne    c001ee46 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ee36:	83 ec 0c             	sub    esp,0xc
c001ee39:	68 44 91 03 c0       	push   0xc0039144
c001ee3e:	e8 c5 e0 fe ff       	call   c000cf08 <panic(char const*)>
c001ee43:	83 c4 10             	add    esp,0x10
c001ee46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee4c:	85 c0                	test   eax,eax
c001ee4e:	74 3a                	je     c001ee8a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee57:	85 c0                	test   eax,eax
c001ee59:	74 2f                	je     c001ee8a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee66:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ee6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee7e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ee88:	eb 68                	jmp    c001eef2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ee8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee90:	85 c0                	test   eax,eax
c001ee92:	75 4e                	jne    c001eee2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee9b:	85 c0                	test   eax,eax
c001ee9d:	75 43                	jne    c001eee2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea7:	89 10                	mov    DWORD PTR [eax],edx
c001eea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eead:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eebb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eecc:	85 c0                	test   eax,eax
c001eece:	74 22                	je     c001eef2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eed0:	83 ec 0c             	sub    esp,0xc
c001eed3:	68 66 91 03 c0       	push   0xc0039166
c001eed8:	e8 2b e0 fe ff       	call   c000cf08 <panic(char const*)>
c001eedd:	83 c4 10             	add    esp,0x10
c001eee0:	eb 10                	jmp    c001eef2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	68 70 91 03 c0       	push   0xc0039170
c001eeea:	e8 19 e0 fe ff       	call   c000cf08 <panic(char const*)>
c001eeef:	83 c4 10             	add    esp,0x10
c001eef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eef9:	8d 50 01             	lea    edx,[eax+0x1]
c001eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef03:	90                   	nop
c001ef04:	83 c4 0c             	add    esp,0xc
c001ef07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef08 <LinkedList<Device>::LinkedList()>:
c001ef08:	83 ec 0c             	sub    esp,0xc
c001ef0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef4b:	83 ec 0c             	sub    esp,0xc
c001ef4e:	68 28 91 03 c0       	push   0xc0039128
c001ef53:	e8 92 de fe ff       	call   c000cdea <kprintf(char const*, ...)>
c001ef58:	83 c4 10             	add    esp,0x10
c001ef5b:	90                   	nop
c001ef5c:	83 c4 0c             	add    esp,0xc
c001ef5f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ef60 <CPU::readDR0()>:
c001ef60:	83 ec 10             	sub    esp,0x10
c001ef63:	0f 21 c0             	mov    eax,db0
c001ef66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef6e:	83 c4 10             	add    esp,0x10
c001ef71:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ef72 <CPU::readDR1()>:
c001ef72:	83 ec 10             	sub    esp,0x10
c001ef75:	0f 21 c8             	mov    eax,db1
c001ef78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef80:	83 c4 10             	add    esp,0x10
c001ef83:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ef84 <CPU::readDR2()>:
c001ef84:	83 ec 10             	sub    esp,0x10
c001ef87:	0f 21 d0             	mov    eax,db2
c001ef8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef92:	83 c4 10             	add    esp,0x10
c001ef95:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ef96 <CPU::readDR3()>:
c001ef96:	83 ec 10             	sub    esp,0x10
c001ef99:	0f 21 d8             	mov    eax,db3
c001ef9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efa4:	83 c4 10             	add    esp,0x10
c001efa7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001efa8 <CPU::readDR6()>:
c001efa8:	83 ec 10             	sub    esp,0x10
c001efab:	0f 21 f0             	mov    eax,db6
c001efae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efb6:	83 c4 10             	add    esp,0x10
c001efb9:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001efba <CPU::readDR7()>:
c001efba:	83 ec 10             	sub    esp,0x10
c001efbd:	0f 21 f8             	mov    eax,db7
c001efc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efc8:	83 c4 10             	add    esp,0x10
c001efcb:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001efcc <ACPI::~ACPI()>:
c001efcc:	83 ec 0c             	sub    esp,0xc
c001efcf:	ba 68 a0 03 c0       	mov    edx,0xc003a068
c001efd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd8:	89 10                	mov    DWORD PTR [eax],edx
c001efda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efde:	83 ec 0c             	sub    esp,0xc
c001efe1:	50                   	push   eax
c001efe2:	e8 5f 45 ff ff       	call   c0013546 <Device::~Device()>
c001efe7:	83 c4 10             	add    esp,0x10
c001efea:	90                   	nop
c001efeb:	83 c4 0c             	add    esp,0xc
c001efee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eff0 <ACPI::~ACPI()>:
c001eff0:	83 ec 0c             	sub    esp,0xc
c001eff3:	83 ec 0c             	sub    esp,0xc
c001eff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001effa:	e8 cd ff ff ff       	call   c001efcc <ACPI::~ACPI()>
c001efff:	83 c4 10             	add    esp,0x10
c001f002:	83 ec 08             	sub    esp,0x8
c001f005:	68 68 22 00 00       	push   0x2268
c001f00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f00e:	e8 96 33 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f013:	83 c4 10             	add    esp,0x10
c001f016:	83 c4 0c             	add    esp,0xc
c001f019:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f01a <CPU::~CPU()>:
c001f01a:	83 ec 0c             	sub    esp,0xc
c001f01d:	ba b8 a2 03 c0       	mov    edx,0xc003a2b8
c001f022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f026:	89 10                	mov    DWORD PTR [eax],edx
c001f028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	50                   	push   eax
c001f030:	e8 11 45 ff ff       	call   c0013546 <Device::~Device()>
c001f035:	83 c4 10             	add    esp,0x10
c001f038:	90                   	nop
c001f039:	83 c4 0c             	add    esp,0xc
c001f03c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f03e <CPU::~CPU()>:
c001f03e:	83 ec 0c             	sub    esp,0xc
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f048:	e8 cd ff ff ff       	call   c001f01a <CPU::~CPU()>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	83 ec 08             	sub    esp,0x8
c001f053:	68 98 11 00 00       	push   0x1198
c001f058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f05c:	e8 48 33 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f061:	83 c4 10             	add    esp,0x10
c001f064:	83 c4 0c             	add    esp,0xc
c001f067:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f068 <CPU::writeDR7(unsigned long)>:
c001f068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f06c:	0f 23 f8             	mov    db7,eax
c001f06f:	90                   	nop
c001f070:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f071 <CPU::writeCR4(unsigned long)>:
c001f071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f075:	0f 22 e0             	mov    cr4,eax
c001f078:	90                   	nop
c001f079:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f07a <PCI::~PCI()>:
c001f07a:	83 ec 0c             	sub    esp,0xc
c001f07d:	ba 54 a6 03 c0       	mov    edx,0xc003a654
c001f082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f086:	89 10                	mov    DWORD PTR [eax],edx
c001f088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08c:	83 ec 0c             	sub    esp,0xc
c001f08f:	50                   	push   eax
c001f090:	e8 c1 3e ff ff       	call   c0012f56 <Bus::~Bus()>
c001f095:	83 c4 10             	add    esp,0x10
c001f098:	90                   	nop
c001f099:	83 c4 0c             	add    esp,0xc
c001f09c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f09e <PCI::~PCI()>:
c001f09e:	83 ec 0c             	sub    esp,0xc
c001f0a1:	83 ec 0c             	sub    esp,0xc
c001f0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a8:	e8 cd ff ff ff       	call   c001f07a <PCI::~PCI()>
c001f0ad:	83 c4 10             	add    esp,0x10
c001f0b0:	83 ec 08             	sub    esp,0x8
c001f0b3:	68 58 01 00 00       	push   0x158
c001f0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0bc:	e8 e8 32 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f0c1:	83 c4 10             	add    esp,0x10
c001f0c4:	83 c4 0c             	add    esp,0xc
c001f0c7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f0c8 <IDE::~IDE()>:
c001f0c8:	83 ec 0c             	sub    esp,0xc
c001f0cb:	ba 20 a9 03 c0       	mov    edx,0xc003a920
c001f0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d4:	89 10                	mov    DWORD PTR [eax],edx
c001f0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0da:	83 ec 0c             	sub    esp,0xc
c001f0dd:	50                   	push   eax
c001f0de:	e8 79 49 ff ff       	call   c0013a5c <HardDiskController::~HardDiskController()>
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	90                   	nop
c001f0e7:	83 c4 0c             	add    esp,0xc
c001f0ea:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f0ec <IDE::~IDE()>:
c001f0ec:	83 ec 0c             	sub    esp,0xc
c001f0ef:	83 ec 0c             	sub    esp,0xc
c001f0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f6:	e8 cd ff ff ff       	call   c001f0c8 <IDE::~IDE()>
c001f0fb:	83 c4 10             	add    esp,0x10
c001f0fe:	83 ec 08             	sub    esp,0x8
c001f101:	68 70 02 00 00       	push   0x270
c001f106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f10a:	e8 9a 32 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f10f:	83 c4 10             	add    esp,0x10
c001f112:	83 c4 0c             	add    esp,0xc
c001f115:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f116 <ATA::~ATA()>:
c001f116:	83 ec 0c             	sub    esp,0xc
c001f119:	ba 70 a9 03 c0       	mov    edx,0xc003a970
c001f11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f122:	89 10                	mov    DWORD PTR [eax],edx
c001f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f128:	83 ec 0c             	sub    esp,0xc
c001f12b:	50                   	push   eax
c001f12c:	e8 09 4a ff ff       	call   c0013b3a <PhysicalDisk::~PhysicalDisk()>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	90                   	nop
c001f135:	83 c4 0c             	add    esp,0xc
c001f138:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f13a <ATA::~ATA()>:
c001f13a:	83 ec 0c             	sub    esp,0xc
c001f13d:	83 ec 0c             	sub    esp,0xc
c001f140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f144:	e8 cd ff ff ff       	call   c001f116 <ATA::~ATA()>
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	83 ec 08             	sub    esp,0x8
c001f14f:	68 7c 01 00 00       	push   0x17c
c001f154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f158:	e8 4c 32 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f15d:	83 c4 10             	add    esp,0x10
c001f160:	83 c4 0c             	add    esp,0xc
c001f163:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f164 <ATAPI::~ATAPI()>:
c001f164:	83 ec 0c             	sub    esp,0xc
c001f167:	ba dc a9 03 c0       	mov    edx,0xc003a9dc
c001f16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f170:	89 10                	mov    DWORD PTR [eax],edx
c001f172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f176:	83 ec 0c             	sub    esp,0xc
c001f179:	50                   	push   eax
c001f17a:	e8 bb 49 ff ff       	call   c0013b3a <PhysicalDisk::~PhysicalDisk()>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	90                   	nop
c001f183:	83 c4 0c             	add    esp,0xc
c001f186:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f188 <ATAPI::~ATAPI()>:
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	83 ec 0c             	sub    esp,0xc
c001f18e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f192:	e8 cd ff ff ff       	call   c001f164 <ATAPI::~ATAPI()>
c001f197:	83 c4 10             	add    esp,0x10
c001f19a:	83 ec 08             	sub    esp,0x8
c001f19d:	68 80 01 00 00       	push   0x180
c001f1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a6:	e8 fe 31 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f1ab:	83 c4 10             	add    esp,0x10
c001f1ae:	83 c4 0c             	add    esp,0xc
c001f1b1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f1b2 <AVX::~AVX()>:
c001f1b2:	83 ec 0c             	sub    esp,0xc
c001f1b5:	ba 18 aa 03 c0       	mov    edx,0xc003aa18
c001f1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1be:	89 10                	mov    DWORD PTR [eax],edx
c001f1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c4:	83 ec 0c             	sub    esp,0xc
c001f1c7:	50                   	push   eax
c001f1c8:	e8 f1 49 ff ff       	call   c0013bbe <FPU::~FPU()>
c001f1cd:	83 c4 10             	add    esp,0x10
c001f1d0:	90                   	nop
c001f1d1:	83 c4 0c             	add    esp,0xc
c001f1d4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f1d6 <AVX::~AVX()>:
c001f1d6:	83 ec 0c             	sub    esp,0xc
c001f1d9:	83 ec 0c             	sub    esp,0xc
c001f1dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e0:	e8 cd ff ff ff       	call   c001f1b2 <AVX::~AVX()>
c001f1e5:	83 c4 10             	add    esp,0x10
c001f1e8:	83 ec 08             	sub    esp,0x8
c001f1eb:	68 58 01 00 00       	push   0x158
c001f1f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f4:	e8 b0 31 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f1f9:	83 c4 10             	add    esp,0x10
c001f1fc:	83 c4 0c             	add    esp,0xc
c001f1ff:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f200 <MMX::~MMX()>:
c001f200:	83 ec 0c             	sub    esp,0xc
c001f203:	ba 58 aa 03 c0       	mov    edx,0xc003aa58
c001f208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20c:	89 10                	mov    DWORD PTR [eax],edx
c001f20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f212:	83 ec 0c             	sub    esp,0xc
c001f215:	50                   	push   eax
c001f216:	e8 a3 49 ff ff       	call   c0013bbe <FPU::~FPU()>
c001f21b:	83 c4 10             	add    esp,0x10
c001f21e:	90                   	nop
c001f21f:	83 c4 0c             	add    esp,0xc
c001f222:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f224 <MMX::~MMX()>:
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	83 ec 0c             	sub    esp,0xc
c001f22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22e:	e8 cd ff ff ff       	call   c001f200 <MMX::~MMX()>
c001f233:	83 c4 10             	add    esp,0x10
c001f236:	83 ec 08             	sub    esp,0x8
c001f239:	68 58 01 00 00       	push   0x158
c001f23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f242:	e8 62 31 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f247:	83 c4 10             	add    esp,0x10
c001f24a:	83 c4 0c             	add    esp,0xc
c001f24d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f24e <SSE::~SSE()>:
c001f24e:	83 ec 0c             	sub    esp,0xc
c001f251:	ba 98 aa 03 c0       	mov    edx,0xc003aa98
c001f256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25a:	89 10                	mov    DWORD PTR [eax],edx
c001f25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f260:	83 ec 0c             	sub    esp,0xc
c001f263:	50                   	push   eax
c001f264:	e8 55 49 ff ff       	call   c0013bbe <FPU::~FPU()>
c001f269:	83 c4 10             	add    esp,0x10
c001f26c:	90                   	nop
c001f26d:	83 c4 0c             	add    esp,0xc
c001f270:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f272 <SSE::~SSE()>:
c001f272:	83 ec 0c             	sub    esp,0xc
c001f275:	83 ec 0c             	sub    esp,0xc
c001f278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27c:	e8 cd ff ff ff       	call   c001f24e <SSE::~SSE()>
c001f281:	83 c4 10             	add    esp,0x10
c001f284:	83 ec 08             	sub    esp,0x8
c001f287:	68 58 01 00 00       	push   0x158
c001f28c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f290:	e8 14 31 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f295:	83 c4 10             	add    esp,0x10
c001f298:	83 c4 0c             	add    esp,0xc
c001f29b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f29c <x87::~x87()>:
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	ba d8 aa 03 c0       	mov    edx,0xc003aad8
c001f2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a8:	89 10                	mov    DWORD PTR [eax],edx
c001f2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ae:	83 ec 0c             	sub    esp,0xc
c001f2b1:	50                   	push   eax
c001f2b2:	e8 07 49 ff ff       	call   c0013bbe <FPU::~FPU()>
c001f2b7:	83 c4 10             	add    esp,0x10
c001f2ba:	90                   	nop
c001f2bb:	83 c4 0c             	add    esp,0xc
c001f2be:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f2c0 <x87::~x87()>:
c001f2c0:	83 ec 0c             	sub    esp,0xc
c001f2c3:	83 ec 0c             	sub    esp,0xc
c001f2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ca:	e8 cd ff ff ff       	call   c001f29c <x87::~x87()>
c001f2cf:	83 c4 10             	add    esp,0x10
c001f2d2:	83 ec 08             	sub    esp,0x8
c001f2d5:	68 58 01 00 00       	push   0x158
c001f2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2de:	e8 c6 30 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f2e3:	83 c4 10             	add    esp,0x10
c001f2e6:	83 c4 0c             	add    esp,0xc
c001f2e9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f2ea <IOAPIC::~IOAPIC()>:
c001f2ea:	83 ec 0c             	sub    esp,0xc
c001f2ed:	ba 30 ac 03 c0       	mov    edx,0xc003ac30
c001f2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f6:	89 10                	mov    DWORD PTR [eax],edx
c001f2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2fc:	83 ec 0c             	sub    esp,0xc
c001f2ff:	50                   	push   eax
c001f300:	e8 41 42 ff ff       	call   c0013546 <Device::~Device()>
c001f305:	83 c4 10             	add    esp,0x10
c001f308:	90                   	nop
c001f309:	83 c4 0c             	add    esp,0xc
c001f30c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f30e <IOAPIC::~IOAPIC()>:
c001f30e:	83 ec 0c             	sub    esp,0xc
c001f311:	83 ec 0c             	sub    esp,0xc
c001f314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f318:	e8 cd ff ff ff       	call   c001f2ea <IOAPIC::~IOAPIC()>
c001f31d:	83 c4 10             	add    esp,0x10
c001f320:	83 ec 08             	sub    esp,0x8
c001f323:	68 68 01 00 00       	push   0x168
c001f328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f32c:	e8 78 30 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f331:	83 c4 10             	add    esp,0x10
c001f334:	83 c4 0c             	add    esp,0xc
c001f337:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f338 <APIC::~APIC()>:
c001f338:	83 ec 0c             	sub    esp,0xc
c001f33b:	ba e8 ab 03 c0       	mov    edx,0xc003abe8
c001f340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f344:	89 10                	mov    DWORD PTR [eax],edx
c001f346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34a:	83 ec 0c             	sub    esp,0xc
c001f34d:	50                   	push   eax
c001f34e:	e8 0f 4d ff ff       	call   c0014062 <InterruptController::~InterruptController()>
c001f353:	83 c4 10             	add    esp,0x10
c001f356:	90                   	nop
c001f357:	83 c4 0c             	add    esp,0xc
c001f35a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f35c <APIC::~APIC()>:
c001f35c:	83 ec 0c             	sub    esp,0xc
c001f35f:	83 ec 0c             	sub    esp,0xc
c001f362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f366:	e8 cd ff ff ff       	call   c001f338 <APIC::~APIC()>
c001f36b:	83 c4 10             	add    esp,0x10
c001f36e:	83 ec 08             	sub    esp,0x8
c001f371:	68 58 21 00 00       	push   0x2158
c001f376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f37a:	e8 2a 30 ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f37f:	83 c4 10             	add    esp,0x10
c001f382:	83 c4 0c             	add    esp,0xc
c001f385:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f386 <PIC::~PIC()>:
c001f386:	83 ec 0c             	sub    esp,0xc
c001f389:	ba 80 ac 03 c0       	mov    edx,0xc003ac80
c001f38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f392:	89 10                	mov    DWORD PTR [eax],edx
c001f394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f398:	83 ec 0c             	sub    esp,0xc
c001f39b:	50                   	push   eax
c001f39c:	e8 c1 4c ff ff       	call   c0014062 <InterruptController::~InterruptController()>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	90                   	nop
c001f3a5:	83 c4 0c             	add    esp,0xc
c001f3a8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f3aa <PIC::~PIC()>:
c001f3aa:	83 ec 0c             	sub    esp,0xc
c001f3ad:	83 ec 0c             	sub    esp,0xc
c001f3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b4:	e8 cd ff ff ff       	call   c001f386 <PIC::~PIC()>
c001f3b9:	83 c4 10             	add    esp,0x10
c001f3bc:	83 ec 08             	sub    esp,0x8
c001f3bf:	68 58 21 00 00       	push   0x2158
c001f3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3c8:	e8 dc 2f ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f3cd:	83 c4 10             	add    esp,0x10
c001f3d0:	83 c4 0c             	add    esp,0xc
c001f3d3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f3d4 <APICTimer::~APICTimer()>:
c001f3d4:	83 ec 0c             	sub    esp,0xc
c001f3d7:	ba d4 ac 03 c0       	mov    edx,0xc003acd4
c001f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e0:	89 10                	mov    DWORD PTR [eax],edx
c001f3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e6:	83 ec 0c             	sub    esp,0xc
c001f3e9:	50                   	push   eax
c001f3ea:	e8 43 62 ff ff       	call   c0015632 <Timer::~Timer()>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	90                   	nop
c001f3f3:	83 c4 0c             	add    esp,0xc
c001f3f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f3f8 <APICTimer::~APICTimer()>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	83 ec 0c             	sub    esp,0xc
c001f3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f402:	e8 cd ff ff ff       	call   c001f3d4 <APICTimer::~APICTimer()>
c001f407:	83 c4 10             	add    esp,0x10
c001f40a:	83 ec 08             	sub    esp,0x8
c001f40d:	68 60 01 00 00       	push   0x160
c001f412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f416:	e8 8e 2f ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	83 c4 0c             	add    esp,0xc
c001f421:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f422 <PIT::~PIT()>:
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	ba 24 ad 03 c0       	mov    edx,0xc003ad24
c001f42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42e:	89 10                	mov    DWORD PTR [eax],edx
c001f430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f434:	83 ec 0c             	sub    esp,0xc
c001f437:	50                   	push   eax
c001f438:	e8 f5 61 ff ff       	call   c0015632 <Timer::~Timer()>
c001f43d:	83 c4 10             	add    esp,0x10
c001f440:	90                   	nop
c001f441:	83 c4 0c             	add    esp,0xc
c001f444:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f446 <PIT::~PIT()>:
c001f446:	83 ec 0c             	sub    esp,0xc
c001f449:	83 ec 0c             	sub    esp,0xc
c001f44c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f450:	e8 cd ff ff ff       	call   c001f422 <PIT::~PIT()>
c001f455:	83 c4 10             	add    esp,0x10
c001f458:	83 ec 08             	sub    esp,0x8
c001f45b:	68 5c 01 00 00       	push   0x15c
c001f460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f464:	e8 40 2f ff ff       	call   c00123a9 <operator delete(void*, unsigned long)>
c001f469:	83 c4 10             	add    esp,0x10
c001f46c:	83 c4 0c             	add    esp,0xc
c001f46f:	c3                   	ret    
