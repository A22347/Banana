
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 12 c2 00 00       	call   c000c232 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 f2 01 00       	call   c001f278 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 fe 01 c0       	mov    ebx,0xc001fe02
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c fe 01 c0    	cmp    ebx,0xc001fe0c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 3c 02 c0       	mov    eax,0xc0023cac
c0000049:	3d ac 3c 02 c0       	cmp    eax,0xc0023cac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 3c 02 c0       	push   0xc0023cac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 3c 02 c0       	mov    eax,0xc0023cac
c0000075:	2d ac 3c 02 c0       	sub    eax,0xc0023cac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 3c 02 c0       	push   0xc0023cac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e4c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 fe 01 c0       	mov    ebx,0xc001fe14
c00000bb:	81 eb 10 fe 01 c0    	sub    ebx,0xc001fe10
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 fe 01 c0       	mov    esi,0xc001fe10
c00000ca:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 3e 02 c0       	mov    ds:0xc0023e50,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 3c 02 c0       	push   0xc0023cac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e4c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 3e 02 c0       	push   0xc0023e54
c000012c:	68 ac 3c 02 c0       	push   0xc0023cac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 89 ec 00 00       	call   c000eee8 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 f9 7e 01 00       	call   c0018162 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 ff 82 01 00       	call   c001858f <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 b4 88 01 00       	call   c0018b4d <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 ba 7e 01 00       	call   c0018162 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 90 42 02 c0 	lgdtd  ds:0xc0024290
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 10 0e 01 c0       	mov    ecx,0xc0010e10
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 10 0e 01 c0       	mov    ecx,0xc0010e10
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	01 c1                	add    ecx,eax
c0000613:	89 c2                	mov    edx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 6c 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e6c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	a3 6c 3e 02 c0       	mov    ds:0xc0023e6c,eax
c0000680:	5a                   	pop    edx
c0000681:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c0000686:	59                   	pop    ecx
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 20 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe01e0],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 20 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01e0],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 20 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe01e0],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 ab 00 00 00    	ja     c0000942 <simple_strtoul+0x11e>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 20 fe 01 c0 04 	test   BYTE PTR [edi-0x3ffe01e0],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	0f b6 d0             	movzx  edx,al
c00008fb:	5f                   	pop    edi
c00008fc:	f6 82 20 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe01e0],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 59                	jmp    c0000967 <simple_strtoul+0x143>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	89 f8                	mov    eax,edi
c0000917:	31 d2                	xor    edx,edx
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 21                	jne    c0000961 <simple_strtoul+0x13d>
c0000940:	eb 11                	jmp    c0000953 <simple_strtoul+0x12f>
c0000942:	31 db                	xor    ebx,ebx
c0000944:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000949:	74 22                	je     c000096d <simple_strtoul+0x149>
c000094b:	31 ed                	xor    ebp,ebp
c000094d:	31 db                	xor    ebx,ebx
c000094f:	85 c9                	test   ecx,ecx
c0000951:	74 0e                	je     c0000961 <simple_strtoul+0x13d>
c0000953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000957:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000095b:	31 db                	xor    ebx,ebx
c000095d:	89 38                	mov    DWORD PTR [eax],edi
c000095f:	eb 06                	jmp    c0000967 <simple_strtoul+0x143>
c0000961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000965:	89 08                	mov    DWORD PTR [eax],ecx
c0000967:	4d                   	dec    ebp
c0000968:	75 03                	jne    c000096d <simple_strtoul+0x149>
c000096a:	83 cb ff             	or     ebx,0xffffffff
c000096d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000972:	75 02                	jne    c0000976 <simple_strtoul+0x152>
c0000974:	f7 db                	neg    ebx
c0000976:	83 c4 08             	add    esp,0x8
c0000979:	89 d8                	mov    eax,ebx
c000097b:	5b                   	pop    ebx
c000097c:	5e                   	pop    esi
c000097d:	5f                   	pop    edi
c000097e:	5d                   	pop    ebp
c000097f:	c3                   	ret    

c0000980 <largebin_index>:
c0000980:	89 c2                	mov    edx,eax
c0000982:	c1 ea 08             	shr    edx,0x8
c0000985:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098b:	77 10                	ja     c000099d <largebin_index+0x1d>
c000098d:	0f bd d2             	bsr    edx,edx
c0000990:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000993:	d3 e8                	shr    eax,cl
c0000995:	83 e0 03             	and    eax,0x3
c0000998:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099c:	c3                   	ret    
c000099d:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a2:	c3                   	ret    

c00009a3 <malloc_init_state>:
c00009a3:	8d 50 34             	lea    edx,[eax+0x34]
c00009a6:	53                   	push   ebx
c00009a7:	89 d1                	mov    ecx,edx
c00009a9:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009af:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b2:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b5:	83 c2 08             	add    edx,0x8
c00009b8:	39 da                	cmp    edx,ebx
c00009ba:	75 f3                	jne    c00009af <malloc_init_state+0xc>
c00009bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00009be:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c8:	83 e2 03             	and    edx,0x3
c00009cb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d5:	83 ca 48             	or     edx,0x48
c00009d8:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e2:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ec:	89 10                	mov    DWORD PTR [eax],edx
c00009ee:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f8:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a02:	5b                   	pop    ebx
c0000a03:	c3                   	ret    

c0000a04 <malloc_consolidate>:
c0000a04:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a06:	85 d2                	test   edx,edx
c0000a08:	0f 84 d8 00 00 00    	je     c0000ae6 <malloc_consolidate+0xe2>
c0000a0e:	55                   	push   ebp
c0000a0f:	83 e2 fd             	and    edx,0xfffffffd
c0000a12:	57                   	push   edi
c0000a13:	8d 78 34             	lea    edi,[eax+0x34]
c0000a16:	56                   	push   esi
c0000a17:	89 c5                	mov    ebp,eax
c0000a19:	53                   	push   ebx
c0000a1a:	83 ec 10             	sub    esp,0x10
c0000a1d:	89 10                	mov    DWORD PTR [eax],edx
c0000a1f:	c1 ea 03             	shr    edx,0x3
c0000a22:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a26:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a31:	85 d2                	test   edx,edx
c0000a33:	0f 84 98 00 00 00    	je     c0000ad1 <malloc_consolidate+0xcd>
c0000a39:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a40:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a43:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4a:	89 f9                	mov    ecx,edi
c0000a4c:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a52:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a55:	83 e3 fc             	and    ebx,0xfffffffc
c0000a58:	83 e7 01             	and    edi,0x1
c0000a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5e:	75 14                	jne    c0000a74 <malloc_consolidate+0x70>
c0000a60:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a62:	29 fa                	sub    edx,edi
c0000a64:	01 f9                	add    ecx,edi
c0000a66:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a69:	89 fb                	mov    ebx,edi
c0000a6b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a71:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a74:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a77:	74 40                	je     c0000ab9 <malloc_consolidate+0xb5>
c0000a79:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a83:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a86:	83 e7 01             	and    edi,0x1
c0000a89:	75 0e                	jne    c0000a99 <malloc_consolidate+0x95>
c0000a8b:	01 d9                	add    ecx,ebx
c0000a8d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a90:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a93:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a96:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a99:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9c:	89 ce                	mov    esi,ecx
c0000a9e:	83 ce 01             	or     esi,0x1
c0000aa1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa7:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aaa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aae:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ab1:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab4:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab7:	eb 0c                	jmp    c0000ac5 <malloc_consolidate+0xc1>
c0000ab9:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abc:	83 c9 01             	or     ecx,0x1
c0000abf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac9:	85 d2                	test   edx,edx
c0000acb:	0f 85 6f ff ff ff    	jne    c0000a40 <malloc_consolidate+0x3c>
c0000ad1:	83 c5 04             	add    ebp,0x4
c0000ad4:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad8:	0f 85 50 ff ff ff    	jne    c0000a2e <malloc_consolidate+0x2a>
c0000ade:	83 c4 10             	add    esp,0x10
c0000ae1:	5b                   	pop    ebx
c0000ae2:	5e                   	pop    esi
c0000ae3:	5f                   	pop    edi
c0000ae4:	5d                   	pop    ebp
c0000ae5:	c3                   	ret    
c0000ae6:	e9 b8 fe ff ff       	jmp    c00009a3 <malloc_init_state>

c0000aeb <dlfree>:
c0000aeb:	57                   	push   edi
c0000aec:	56                   	push   esi
c0000aed:	53                   	push   ebx
c0000aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af2:	85 db                	test   ebx,ebx
c0000af4:	0f 84 e2 00 00 00    	je     c0000bdc <dlfree+0xf1>
c0000afa:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afd:	8b 0d 80 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e80
c0000b03:	89 f0                	mov    eax,esi
c0000b05:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b08:	83 e0 fc             	and    eax,0xfffffffc
c0000b0b:	39 c1                	cmp    ecx,eax
c0000b0d:	72 24                	jb     c0000b33 <dlfree+0x48>
c0000b0f:	c1 e8 03             	shr    eax,0x3
c0000b12:	83 c9 03             	or     ecx,0x3
c0000b15:	83 e8 02             	sub    eax,0x2
c0000b18:	89 0d 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,ecx
c0000b1e:	8b 0c 85 84 3e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc17c]
c0000b25:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b27:	89 14 85 84 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc17c],edx
c0000b2e:	e9 a9 00 00 00       	jmp    c0000bdc <dlfree+0xf1>
c0000b33:	83 e6 02             	and    esi,0x2
c0000b36:	0f 85 a0 00 00 00    	jne    c0000bdc <dlfree+0xf1>
c0000b3c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b3f:	83 c9 01             	or     ecx,0x1
c0000b42:	89 0d 80 3e 02 c0    	mov    DWORD PTR ds:0xc0023e80,ecx
c0000b48:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4b:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4e:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b52:	75 13                	jne    c0000b67 <dlfree+0x7c>
c0000b54:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b57:	29 da                	sub    edx,ebx
c0000b59:	01 d8                	add    eax,ebx
c0000b5b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b61:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b64:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b67:	39 35 ac 3e 02 c0    	cmp    DWORD PTR ds:0xc0023eac,esi
c0000b6d:	74 40                	je     c0000baf <dlfree+0xc4>
c0000b6f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b73:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b76:	80 e3 01             	and    bl,0x1
c0000b79:	75 0e                	jne    c0000b89 <dlfree+0x9e>
c0000b7b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b81:	01 c8                	add    eax,ecx
c0000b83:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b86:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b89:	8b 0d bc 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ebc
c0000b8f:	c7 42 0c b4 3e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023eb4
c0000b96:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b99:	89 15 bc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ebc,edx
c0000b9f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba2:	89 c1                	mov    ecx,eax
c0000ba4:	83 c9 01             	or     ecx,0x1
c0000ba7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000baa:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bad:	eb 10                	jmp    c0000bbf <dlfree+0xd4>
c0000baf:	01 c8                	add    eax,ecx
c0000bb1:	89 c1                	mov    ecx,eax
c0000bb3:	83 c9 01             	or     ecx,0x1
c0000bb6:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb9:	89 15 ac 3e 02 c0    	mov    DWORD PTR ds:0xc0023eac,edx
c0000bbf:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc4:	76 16                	jbe    c0000bdc <dlfree+0xf1>
c0000bc6:	f6 05 80 3e 02 c0 02 	test   BYTE PTR ds:0xc0023e80,0x2
c0000bcd:	74 0d                	je     c0000bdc <dlfree+0xf1>
c0000bcf:	5b                   	pop    ebx
c0000bd0:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0000bd5:	5e                   	pop    esi
c0000bd6:	5f                   	pop    edi
c0000bd7:	e9 28 fe ff ff       	jmp    c0000a04 <malloc_consolidate>
c0000bdc:	5b                   	pop    ebx
c0000bdd:	5e                   	pop    esi
c0000bde:	5f                   	pop    edi
c0000bdf:	c3                   	ret    

c0000be0 <sYSMALLOc>:
c0000be0:	55                   	push   ebp
c0000be1:	57                   	push   edi
c0000be2:	56                   	push   esi
c0000be3:	53                   	push   ebx
c0000be4:	89 d3                	mov    ebx,edx
c0000be6:	83 ec 2c             	sub    esp,0x2c
c0000be9:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000bef:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000bf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bf6:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000bf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000bfd:	74 1f                	je     c0000c1e <sYSMALLOc+0x3e>
c0000bff:	89 d0                	mov    eax,edx
c0000c01:	e8 fe fd ff ff       	call   c0000a04 <malloc_consolidate>
c0000c06:	83 ec 0c             	sub    esp,0xc
c0000c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000c0d:	83 e8 07             	sub    eax,0x7
c0000c10:	50                   	push   eax
c0000c11:	e8 33 02 00 00       	call   c0000e49 <dlmalloc>
c0000c16:	83 c4 10             	add    esp,0x10
c0000c19:	e9 23 02 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000c1e:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000c25:	83 c0 10             	add    eax,0x10
c0000c28:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000c2e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000c31:	01 c2                	add    edx,eax
c0000c33:	83 e5 fc             	and    ebp,0xfffffffc
c0000c36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000c3a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c41:	74 02                	je     c0000c45 <sYSMALLOc+0x65>
c0000c43:	29 ea                	sub    edx,ebp
c0000c45:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000c49:	f7 d9                	neg    ecx
c0000c4b:	21 ca                	and    edx,ecx
c0000c4d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000c51:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000c55:	7f 07                	jg     c0000c5e <sYSMALLOc+0x7e>
c0000c57:	31 c0                	xor    eax,eax
c0000c59:	e9 e3 01 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000c5e:	83 ec 0c             	sub    esp,0xc
c0000c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c65:	e8 0b b1 00 00       	call   c000bd75 <sbrk>
c0000c6a:	83 c4 10             	add    esp,0x10
c0000c6d:	89 c6                	mov    esi,eax
c0000c6f:	83 f8 ff             	cmp    eax,0xffffffff
c0000c72:	74 e3                	je     c0000c57 <sYSMALLOc+0x77>
c0000c74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000c78:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000c7b:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000c81:	39 c2                	cmp    edx,eax
c0000c83:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000c89:	75 11                	jne    c0000c9c <sYSMALLOc+0xbc>
c0000c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c8f:	01 e8                	add    eax,ebp
c0000c91:	83 c8 01             	or     eax,0x1
c0000c94:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000c97:	e9 93 00 00 00       	jmp    c0000d2f <sYSMALLOc+0x14f>
c0000c9c:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000ca2:	a8 01                	test   al,0x1
c0000ca4:	0f 84 73 01 00 00    	je     c0000e1d <sYSMALLOc+0x23d>
c0000caa:	85 ed                	test   ebp,ebp
c0000cac:	74 12                	je     c0000cc0 <sYSMALLOc+0xe0>
c0000cae:	39 f2                	cmp    edx,esi
c0000cb0:	76 0e                	jbe    c0000cc0 <sYSMALLOc+0xe0>
c0000cb2:	83 e0 fe             	and    eax,0xfffffffe
c0000cb5:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000cbb:	e9 5d 01 00 00       	jmp    c0000e1d <sYSMALLOc+0x23d>
c0000cc0:	85 ed                	test   ebp,ebp
c0000cc2:	74 0c                	je     c0000cd0 <sYSMALLOc+0xf0>
c0000cc4:	89 f0                	mov    eax,esi
c0000cc6:	29 d0                	sub    eax,edx
c0000cc8:	01 c1                	add    ecx,eax
c0000cca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000cd0:	89 f2                	mov    edx,esi
c0000cd2:	83 e2 07             	and    edx,0x7
c0000cd5:	0f 84 b1 00 00 00    	je     c0000d8c <sYSMALLOc+0x1ac>
c0000cdb:	b8 08 00 00 00       	mov    eax,0x8
c0000ce0:	29 d0                	sub    eax,edx
c0000ce2:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000ce5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ced:	01 e8                	add    eax,ebp
c0000cef:	83 ec 0c             	sub    esp,0xc
c0000cf2:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000cf5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000cf9:	01 f2                	add    edx,esi
c0000cfb:	01 d1                	add    ecx,edx
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000d03:	01 c1                	add    ecx,eax
c0000d05:	51                   	push   ecx
c0000d06:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000d0a:	e8 66 b0 00 00       	call   c000bd75 <sbrk>
c0000d0f:	83 c4 10             	add    esp,0x10
c0000d12:	83 f8 ff             	cmp    eax,0xffffffff
c0000d15:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000d19:	75 7c                	jne    c0000d97 <sYSMALLOc+0x1b7>
c0000d1b:	83 ec 0c             	sub    esp,0xc
c0000d1e:	6a 00                	push   0x0
c0000d20:	e8 50 b0 00 00       	call   c000bd75 <sbrk>
c0000d25:	83 c4 10             	add    esp,0x10
c0000d28:	31 c9                	xor    ecx,ecx
c0000d2a:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2d:	75 7e                	jne    c0000dad <sYSMALLOc+0x1cd>
c0000d2f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000d35:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000d3b:	73 06                	jae    c0000d43 <sYSMALLOc+0x163>
c0000d3d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000d43:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000d49:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000d4f:	73 06                	jae    c0000d57 <sYSMALLOc+0x177>
c0000d51:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000d57:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000d5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000d5d:	83 e2 fc             	and    edx,0xfffffffc
c0000d60:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000d64:	0f 87 ed fe ff ff    	ja     c0000c57 <sYSMALLOc+0x77>
c0000d6a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000d6e:	29 fa                	sub    edx,edi
c0000d70:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000d73:	83 ca 01             	or     edx,0x1
c0000d76:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000d79:	89 fb                	mov    ebx,edi
c0000d7b:	83 cb 01             	or     ebx,0x1
c0000d7e:	83 c0 08             	add    eax,0x8
c0000d81:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000d84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000d87:	e9 b5 00 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000d8c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000d90:	31 c0                	xor    eax,eax
c0000d92:	e9 52 ff ff ff       	jmp    c0000ce9 <sYSMALLOc+0x109>
c0000d97:	39 c6                	cmp    esi,eax
c0000d99:	76 12                	jbe    c0000dad <sYSMALLOc+0x1cd>
c0000d9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d9f:	01 f0                	add    eax,esi
c0000da1:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000da8:	e9 7b ff ff ff       	jmp    c0000d28 <sYSMALLOc+0x148>
c0000dad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000db1:	29 f0                	sub    eax,esi
c0000db3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000db6:	01 c8                	add    eax,ecx
c0000db8:	83 c8 01             	or     eax,0x1
c0000dbb:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000dbe:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000dc4:	85 ed                	test   ebp,ebp
c0000dc6:	0f 84 63 ff ff ff    	je     c0000d2f <sYSMALLOc+0x14f>
c0000dcc:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000dcf:	83 e0 f8             	and    eax,0xfffffff8
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	83 ca 01             	or     edx,0x1
c0000dd7:	83 f8 0f             	cmp    eax,0xf
c0000dda:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000ddd:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000de5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ded:	0f 86 3c ff ff ff    	jbe    c0000d2f <sYSMALLOc+0x14f>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	83 c7 08             	add    edi,0x8
c0000df9:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dff:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e09:	57                   	push   edi
c0000e0a:	e8 dc fc ff ff       	call   c0000aeb <dlfree>
c0000e0f:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e15:	83 c4 10             	add    esp,0x10
c0000e18:	e9 12 ff ff ff       	jmp    c0000d2f <sYSMALLOc+0x14f>
c0000e1d:	83 ec 0c             	sub    esp,0xc
c0000e20:	6a 00                	push   0x0
c0000e22:	e8 4e af 00 00       	call   c000bd75 <sbrk>
c0000e27:	89 c2                	mov    edx,eax
c0000e29:	29 f2                	sub    edx,esi
c0000e2b:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2f:	83 c4 10             	add    esp,0x10
c0000e32:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e38:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e3c:	e9 e7 fe ff ff       	jmp    c0000d28 <sYSMALLOc+0x148>
c0000e41:	83 c4 2c             	add    esp,0x2c
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	5d                   	pop    ebp
c0000e48:	c3                   	ret    

c0000e49 <dlmalloc>:
c0000e49:	55                   	push   ebp
c0000e4a:	57                   	push   edi
c0000e4b:	56                   	push   esi
c0000e4c:	53                   	push   ebx
c0000e4d:	83 ec 1c             	sub    esp,0x1c
c0000e50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e54:	83 f8 df             	cmp    eax,0xffffffdf
c0000e57:	0f 87 70 03 00 00    	ja     c00011cd <dlmalloc+0x384>
c0000e5d:	83 c0 0b             	add    eax,0xb
c0000e60:	be 10 00 00 00       	mov    esi,0x10
c0000e65:	83 f8 0f             	cmp    eax,0xf
c0000e68:	76 05                	jbe    c0000e6f <dlmalloc+0x26>
c0000e6a:	83 e0 f8             	and    eax,0xfffffff8
c0000e6d:	89 c6                	mov    esi,eax
c0000e6f:	8b 3d 80 3e 02 c0    	mov    edi,DWORD PTR ds:0xc0023e80
c0000e75:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e7b:	75 17                	jne    c0000e94 <dlmalloc+0x4b>
c0000e7d:	85 ff                	test   edi,edi
c0000e7f:	0f 85 05 03 00 00    	jne    c000118a <dlmalloc+0x341>
c0000e85:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0000e8a:	e8 75 fb ff ff       	call   c0000a04 <malloc_consolidate>
c0000e8f:	e9 f6 02 00 00       	jmp    c000118a <dlmalloc+0x341>
c0000e94:	39 f7                	cmp    edi,esi
c0000e96:	72 1f                	jb     c0000eb7 <dlmalloc+0x6e>
c0000e98:	89 f2                	mov    edx,esi
c0000e9a:	c1 ea 03             	shr    edx,0x3
c0000e9d:	83 ea 02             	sub    edx,0x2
c0000ea0:	8b 04 95 84 3e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc17c]
c0000ea7:	85 c0                	test   eax,eax
c0000ea9:	74 0c                	je     c0000eb7 <dlmalloc+0x6e>
c0000eab:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eae:	89 0c 95 84 3e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc17c],ecx
c0000eb5:	eb 30                	jmp    c0000ee7 <dlmalloc+0x9e>
c0000eb7:	89 f0                	mov    eax,esi
c0000eb9:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebf:	77 2e                	ja     c0000eef <dlmalloc+0xa6>
c0000ec1:	c1 e8 03             	shr    eax,0x3
c0000ec4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ec8:	8d 14 c5 b4 3e 02 c0 	lea    edx,[eax*8-0x3ffdc14c]
c0000ecf:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed5:	39 c3                	cmp    ebx,eax
c0000ed7:	74 2e                	je     c0000f07 <dlmalloc+0xbe>
c0000ed9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000edc:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000ee1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee4:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee7:	83 c0 08             	add    eax,0x8
c0000eea:	e9 e0 02 00 00       	jmp    c00011cf <dlmalloc+0x386>
c0000eef:	e8 8c fa ff ff       	call   c0000980 <largebin_index>
c0000ef4:	83 e7 02             	and    edi,0x2
c0000ef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000efb:	74 0a                	je     c0000f07 <dlmalloc+0xbe>
c0000efd:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0000f02:	e8 fd fa ff ff       	call   c0000a04 <malloc_consolidate>
c0000f07:	8d 46 10             	lea    eax,[esi+0x10]
c0000f0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0e:	8b 1d c0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ec0
c0000f14:	81 fb b4 3e 02 c0    	cmp    ebx,0xc0023eb4
c0000f1a:	0f 84 13 01 00 00    	je     c0001033 <dlmalloc+0x1ea>
c0000f20:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f26:	83 e7 fc             	and    edi,0xfffffffc
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 4c                	ja     c0000f7d <dlmalloc+0x134>
c0000f31:	3d b4 3e 02 c0       	cmp    eax,0xc0023eb4
c0000f36:	75 45                	jne    c0000f7d <dlmalloc+0x134>
c0000f38:	39 1d b0 3e 02 c0    	cmp    DWORD PTR ds:0xc0023eb0,ebx
c0000f3e:	75 3d                	jne    c0000f7d <dlmalloc+0x134>
c0000f40:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f44:	73 37                	jae    c0000f7d <dlmalloc+0x134>
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f4b:	29 f2                	sub    edx,esi
c0000f4d:	83 ce 01             	or     esi,0x1
c0000f50:	89 d1                	mov    ecx,edx
c0000f52:	a3 bc 3e 02 c0       	mov    ds:0xc0023ebc,eax
c0000f57:	83 c9 01             	or     ecx,0x1
c0000f5a:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0000f5f:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c0000f64:	c7 40 08 b4 3e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023eb4
c0000f6b:	c7 40 0c b4 3e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023eb4
c0000f72:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f75:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f78:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f7b:	eb 15                	jmp    c0000f92 <dlmalloc+0x149>
c0000f7d:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0000f82:	39 fe                	cmp    esi,edi
c0000f84:	c7 40 08 b4 3e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023eb4
c0000f8b:	75 0d                	jne    c0000f9a <dlmalloc+0x151>
c0000f8d:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f92:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f95:	e9 35 02 00 00       	jmp    c00011cf <dlmalloc+0x386>
c0000f9a:	89 f8                	mov    eax,edi
c0000f9c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa2:	77 19                	ja     c0000fbd <dlmalloc+0x174>
c0000fa4:	c1 e8 03             	shr    eax,0x3
c0000fa7:	8d 14 00             	lea    edx,[eax+eax*1]
c0000faa:	83 c2 0d             	add    edx,0xd
c0000fad:	8d 2c 95 78 3e 02 c0 	lea    ebp,[edx*4-0x3ffdc188]
c0000fb4:	8b 14 95 80 3e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc180]
c0000fbb:	eb 46                	jmp    c0001003 <dlmalloc+0x1ba>
c0000fbd:	e8 be f9 ff ff       	call   c0000980 <largebin_index>
c0000fc2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc5:	83 c2 0d             	add    edx,0xd
c0000fc8:	8d 0c 95 80 3e 02 c0 	lea    ecx,[edx*4-0x3ffdc180]
c0000fcf:	8b 14 95 80 3e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc180]
c0000fd6:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd9:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdd:	89 d5                	mov    ebp,edx
c0000fdf:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe3:	74 1e                	je     c0001003 <dlmalloc+0x1ba>
c0000fe5:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe8:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000feb:	77 12                	ja     c0000fff <dlmalloc+0x1b6>
c0000fed:	83 cf 01             	or     edi,0x1
c0000ff0:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff3:	76 05                	jbe    c0000ffa <dlmalloc+0x1b1>
c0000ff5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff8:	eb f6                	jmp    c0000ff0 <dlmalloc+0x1a7>
c0000ffa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffd:	eb 04                	jmp    c0001003 <dlmalloc+0x1ba>
c0000fff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001003:	89 c7                	mov    edi,eax
c0001005:	88 c1                	mov    cl,al
c0001007:	c1 ff 05             	sar    edi,0x5
c000100a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100e:	bf 01 00 00 00       	mov    edi,0x1
c0001013:	d3 e7                	shl    edi,cl
c0001015:	89 f8                	mov    eax,edi
c0001017:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000101b:	09 04 bd b4 41 02 c0 	or     DWORD PTR [edi*4-0x3ffdbe4c],eax
c0001022:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001025:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001028:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000102b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102e:	e9 db fe ff ff       	jmp    c0000f0e <dlmalloc+0xc5>
c0001033:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001039:	76 78                	jbe    c00010b3 <dlmalloc+0x26a>
c000103b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103f:	8d 04 c5 b4 3e 02 c0 	lea    eax,[eax*8-0x3ffdc14c]
c0001046:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001049:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104c:	39 ca                	cmp    edx,ecx
c000104e:	74 63                	je     c00010b3 <dlmalloc+0x26a>
c0001050:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001053:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001056:	83 e3 fc             	and    ebx,0xfffffffc
c0001059:	39 de                	cmp    esi,ebx
c000105b:	77 52                	ja     c00010af <dlmalloc+0x266>
c000105d:	89 df                	mov    edi,ebx
c000105f:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001062:	29 f7                	sub    edi,esi
c0001064:	01 d3                	add    ebx,edx
c0001066:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001069:	83 ff 0f             	cmp    edi,0xf
c000106c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106f:	8d 42 08             	lea    eax,[edx+0x8]
c0001072:	77 09                	ja     c000107d <dlmalloc+0x234>
c0001074:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001078:	e9 52 01 00 00       	jmp    c00011cf <dlmalloc+0x386>
c000107d:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001080:	83 ce 01             	or     esi,0x1
c0001083:	89 0d bc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ebc,ecx
c0001089:	89 0d c0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec0,ecx
c000108f:	c7 41 08 b4 3e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023eb4
c0001096:	c7 41 0c b4 3e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023eb4
c000109d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00010a0:	89 fa                	mov    edx,edi
c00010a2:	83 ca 01             	or     edx,0x1
c00010a5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a8:	89 3b                	mov    DWORD PTR [ebx],edi
c00010aa:	e9 20 01 00 00       	jmp    c00011cf <dlmalloc+0x386>
c00010af:	89 c2                	mov    edx,eax
c00010b1:	eb 99                	jmp    c000104c <dlmalloc+0x203>
c00010b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b7:	b8 01 00 00 00       	mov    eax,0x1
c00010bc:	41                   	inc    ecx
c00010bd:	89 cb                	mov    ebx,ecx
c00010bf:	c1 eb 05             	shr    ebx,0x5
c00010c2:	8d 14 cd ac 3e 02 c0 	lea    edx,[ecx*8-0x3ffdc154]
c00010c9:	d3 e0                	shl    eax,cl
c00010cb:	8b 3c 9d b4 41 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbe4c]
c00010d2:	39 f8                	cmp    eax,edi
c00010d4:	77 04                	ja     c00010da <dlmalloc+0x291>
c00010d6:	85 c0                	test   eax,eax
c00010d8:	75 26                	jne    c0001100 <dlmalloc+0x2b7>
c00010da:	43                   	inc    ebx
c00010db:	83 fb 02             	cmp    ebx,0x2
c00010de:	0f 87 a6 00 00 00    	ja     c000118a <dlmalloc+0x341>
c00010e4:	8b 3c 9d b4 41 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbe4c]
c00010eb:	85 ff                	test   edi,edi
c00010ed:	74 eb                	je     c00010da <dlmalloc+0x291>
c00010ef:	89 d8                	mov    eax,ebx
c00010f1:	c1 e0 06             	shl    eax,0x6
c00010f4:	8d 14 85 ac 3e 02 c0 	lea    edx,[eax*4-0x3ffdc154]
c00010fb:	b8 01 00 00 00       	mov    eax,0x1
c0001100:	85 f8                	test   eax,edi
c0001102:	75 07                	jne    c000110b <dlmalloc+0x2c2>
c0001104:	83 c2 08             	add    edx,0x8
c0001107:	01 c0                	add    eax,eax
c0001109:	eb f5                	jmp    c0001100 <dlmalloc+0x2b7>
c000110b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110e:	39 ca                	cmp    edx,ecx
c0001110:	75 14                	jne    c0001126 <dlmalloc+0x2dd>
c0001112:	89 c1                	mov    ecx,eax
c0001114:	83 c2 08             	add    edx,0x8
c0001117:	f7 d1                	not    ecx
c0001119:	21 cf                	and    edi,ecx
c000111b:	01 c0                	add    eax,eax
c000111d:	89 3c 9d b4 41 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbe4c],edi
c0001124:	eb ac                	jmp    c00010d2 <dlmalloc+0x289>
c0001126:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001129:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112c:	83 e0 fc             	and    eax,0xfffffffc
c000112f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001132:	89 c3                	mov    ebx,eax
c0001134:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001137:	29 f3                	sub    ebx,esi
c0001139:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113c:	83 fb 0f             	cmp    ebx,0xf
c000113f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001142:	77 09                	ja     c000114d <dlmalloc+0x304>
c0001144:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001148:	e9 82 00 00 00       	jmp    c00011cf <dlmalloc+0x386>
c000114d:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001150:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001156:	89 3d bc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ebc,edi
c000115c:	89 3d c0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec0,edi
c0001162:	c7 47 08 b4 3e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023eb4
c0001169:	c7 47 0c b4 3e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023eb4
c0001170:	77 06                	ja     c0001178 <dlmalloc+0x32f>
c0001172:	89 3d b0 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb0,edi
c0001178:	83 ce 01             	or     esi,0x1
c000117b:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117e:	89 d9                	mov    ecx,ebx
c0001180:	83 c9 01             	or     ecx,0x1
c0001183:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001186:	89 1a                	mov    DWORD PTR [edx],ebx
c0001188:	eb 45                	jmp    c00011cf <dlmalloc+0x386>
c000118a:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c000118f:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001192:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001195:	83 e2 fc             	and    edx,0xfffffffc
c0001198:	39 d1                	cmp    ecx,edx
c000119a:	77 1e                	ja     c00011ba <dlmalloc+0x371>
c000119c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119f:	89 f3                	mov    ebx,esi
c00011a1:	29 f2                	sub    edx,esi
c00011a3:	83 cb 01             	or     ebx,0x1
c00011a6:	83 ca 01             	or     edx,0x1
c00011a9:	89 0d ac 3e 02 c0    	mov    DWORD PTR ds:0xc0023eac,ecx
c00011af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b5:	e9 2d fd ff ff       	jmp    c0000ee7 <dlmalloc+0x9e>
c00011ba:	83 c4 1c             	add    esp,0x1c
c00011bd:	89 f0                	mov    eax,esi
c00011bf:	ba 80 3e 02 c0       	mov    edx,0xc0023e80
c00011c4:	5b                   	pop    ebx
c00011c5:	5e                   	pop    esi
c00011c6:	5f                   	pop    edi
c00011c7:	5d                   	pop    ebp
c00011c8:	e9 13 fa ff ff       	jmp    c0000be0 <sYSMALLOc>
c00011cd:	31 c0                	xor    eax,eax
c00011cf:	83 c4 1c             	add    esp,0x1c
c00011d2:	5b                   	pop    ebx
c00011d3:	5e                   	pop    esi
c00011d4:	5f                   	pop    edi
c00011d5:	5d                   	pop    ebp
c00011d6:	c3                   	ret    

c00011d7 <iALLOc>:
c00011d7:	55                   	push   ebp
c00011d8:	89 c5                	mov    ebp,eax
c00011da:	57                   	push   edi
c00011db:	56                   	push   esi
c00011dc:	53                   	push   ebx
c00011dd:	83 ec 2c             	sub    esp,0x2c
c00011e0:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c00011e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011eb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011f3:	75 12                	jne    c0001207 <iALLOc+0x30>
c00011f5:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c00011fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011fe:	e8 01 f8 ff ff       	call   c0000a04 <malloc_consolidate>
c0001203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001207:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120c:	74 12                	je     c0001220 <iALLOc+0x49>
c000120e:	85 ed                	test   ebp,ebp
c0001210:	0f 84 64 01 00 00    	je     c000137a <iALLOc+0x1a3>
c0001216:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121e:	eb 33                	jmp    c0001253 <iALLOc+0x7c>
c0001220:	85 ed                	test   ebp,ebp
c0001222:	75 14                	jne    c0001238 <iALLOc+0x61>
c0001224:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122c:	83 c4 2c             	add    esp,0x2c
c000122f:	5b                   	pop    ebx
c0001230:	5e                   	pop    esi
c0001231:	5f                   	pop    edi
c0001232:	5d                   	pop    ebp
c0001233:	e9 11 fc ff ff       	jmp    c0000e49 <dlmalloc>
c0001238:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123f:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001247:	83 f8 0f             	cmp    eax,0xf
c000124a:	76 07                	jbe    c0001253 <iALLOc+0x7c>
c000124c:	83 e0 f8             	and    eax,0xfffffff8
c000124f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001253:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001258:	75 09                	jne    c0001263 <iALLOc+0x8c>
c000125a:	89 d0                	mov    eax,edx
c000125c:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125f:	31 f6                	xor    esi,esi
c0001261:	eb 3b                	jmp    c000129e <iALLOc+0xc7>
c0001263:	8b 02                	mov    eax,DWORD PTR [edx]
c0001265:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126d:	83 c0 0b             	add    eax,0xb
c0001270:	83 f8 0f             	cmp    eax,0xf
c0001273:	76 07                	jbe    c000127c <iALLOc+0xa5>
c0001275:	83 e0 f8             	and    eax,0xfffffff8
c0001278:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001280:	0f af f5             	imul   esi,ebp
c0001283:	eb 25                	jmp    c00012aa <iALLOc+0xd3>
c0001285:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001287:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000128a:	bb 10 00 00 00       	mov    ebx,0x10
c000128f:	83 f9 0f             	cmp    ecx,0xf
c0001292:	76 05                	jbe    c0001299 <iALLOc+0xc2>
c0001294:	83 e1 f8             	and    ecx,0xfffffff8
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	01 de                	add    esi,ebx
c000129b:	83 c0 04             	add    eax,0x4
c000129e:	39 c7                	cmp    edi,eax
c00012a0:	75 e3                	jne    c0001285 <iALLOc+0xae>
c00012a2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ae:	83 ec 0c             	sub    esp,0xc
c00012b1:	8b 1d d4 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241d4
c00012b7:	c7 05 d4 41 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00241d4,0x0
c00012c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c5:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c9:	50                   	push   eax
c00012ca:	e8 7a fb ff ff       	call   c0000e49 <dlmalloc>
c00012cf:	83 c4 10             	add    esp,0x10
c00012d2:	89 1d d4 41 02 c0    	mov    DWORD PTR ds:0xc00241d4,ebx
c00012d8:	85 c0                	test   eax,eax
c00012da:	0f 84 92 00 00 00    	je     c0001372 <iALLOc+0x19b>
c00012e0:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e3:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e6:	83 e3 fc             	and    ebx,0xfffffffc
c00012e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012ed:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f2:	74 1e                	je     c0001312 <iALLOc+0x13b>
c00012f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f8:	89 d9                	mov    ecx,ebx
c00012fa:	52                   	push   edx
c00012fb:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012ff:	83 e9 04             	sub    ecx,0x4
c0001302:	51                   	push   ecx
c0001303:	6a 00                	push   0x0
c0001305:	50                   	push   eax
c0001306:	e8 fd f2 ff ff       	call   c0000608 <memset>
c000130b:	83 c4 10             	add    esp,0x10
c000130e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001312:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001317:	75 14                	jne    c000132d <iALLOc+0x156>
c0001319:	8d 04 37             	lea    eax,[edi+esi*1]
c000131c:	29 f3                	sub    ebx,esi
c000131e:	83 cb 01             	or     ebx,0x1
c0001321:	8d 48 08             	lea    ecx,[eax+0x8]
c0001324:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001327:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000132b:	89 f3                	mov    ebx,esi
c000132d:	31 c0                	xor    eax,eax
c000132f:	4d                   	dec    ebp
c0001330:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001334:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001337:	39 c5                	cmp    ebp,eax
c0001339:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133c:	74 2c                	je     c000136a <iALLOc+0x193>
c000133e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001342:	85 c9                	test   ecx,ecx
c0001344:	75 15                	jne    c000135b <iALLOc+0x184>
c0001346:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001349:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134c:	b9 10 00 00 00       	mov    ecx,0x10
c0001351:	83 fe 0f             	cmp    esi,0xf
c0001354:	76 05                	jbe    c000135b <iALLOc+0x184>
c0001356:	83 e6 f8             	and    esi,0xfffffff8
c0001359:	89 f1                	mov    ecx,esi
c000135b:	89 ce                	mov    esi,ecx
c000135d:	29 cb                	sub    ebx,ecx
c000135f:	83 ce 01             	or     esi,0x1
c0001362:	40                   	inc    eax
c0001363:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001366:	01 cf                	add    edi,ecx
c0001368:	eb c6                	jmp    c0001330 <iALLOc+0x159>
c000136a:	83 cb 01             	or     ebx,0x1
c000136d:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001370:	eb 08                	jmp    c000137a <iALLOc+0x1a3>
c0001372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000137a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137e:	83 c4 2c             	add    esp,0x2c
c0001381:	5b                   	pop    ebx
c0001382:	5e                   	pop    esi
c0001383:	5f                   	pop    edi
c0001384:	5d                   	pop    ebp
c0001385:	c3                   	ret    

c0001386 <dlrealloc>:
c0001386:	55                   	push   ebp
c0001387:	57                   	push   edi
c0001388:	56                   	push   esi
c0001389:	53                   	push   ebx
c000138a:	83 ec 1c             	sub    esp,0x1c
c000138d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001391:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001395:	85 db                	test   ebx,ebx
c0001397:	75 10                	jne    c00013a9 <dlrealloc+0x23>
c0001399:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139d:	83 c4 1c             	add    esp,0x1c
c00013a0:	5b                   	pop    ebx
c00013a1:	5e                   	pop    esi
c00013a2:	5f                   	pop    edi
c00013a3:	5d                   	pop    ebp
c00013a4:	e9 a0 fa ff ff       	jmp    c0000e49 <dlmalloc>
c00013a9:	83 f8 df             	cmp    eax,0xffffffdf
c00013ac:	76 07                	jbe    c00013b5 <dlrealloc+0x2f>
c00013ae:	31 db                	xor    ebx,ebx
c00013b0:	e9 7c 01 00 00       	jmp    c0001531 <dlrealloc+0x1ab>
c00013b5:	83 c0 0b             	add    eax,0xb
c00013b8:	bf 10 00 00 00       	mov    edi,0x10
c00013bd:	83 f8 0f             	cmp    eax,0xf
c00013c0:	76 05                	jbe    c00013c7 <dlrealloc+0x41>
c00013c2:	83 e0 f8             	and    eax,0xfffffff8
c00013c5:	89 c7                	mov    edi,eax
c00013c7:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013ca:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013cd:	89 c6                	mov    esi,eax
c00013cf:	83 e6 fc             	and    esi,0xfffffffc
c00013d2:	a8 02                	test   al,0x2
c00013d4:	75 d8                	jne    c00013ae <dlrealloc+0x28>
c00013d6:	39 f7                	cmp    edi,esi
c00013d8:	0f 86 15 01 00 00    	jbe    c00014f3 <dlrealloc+0x16d>
c00013de:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013e2:	39 15 ac 3e 02 c0    	cmp    DWORD PTR ds:0xc0023eac,edx
c00013e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013eb:	75 33                	jne    c0001420 <dlrealloc+0x9a>
c00013ed:	83 e1 fc             	and    ecx,0xfffffffc
c00013f0:	01 f1                	add    ecx,esi
c00013f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f6:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f9:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fd:	77 49                	ja     c0001448 <dlrealloc+0xc2>
c00013ff:	83 e0 01             	and    eax,0x1
c0001402:	01 fd                	add    ebp,edi
c0001404:	09 f8                	or     eax,edi
c0001406:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140d:	29 f8                	sub    eax,edi
c000140f:	89 2d ac 3e 02 c0    	mov    DWORD PTR ds:0xc0023eac,ebp
c0001415:	83 c8 01             	or     eax,0x1
c0001418:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000141b:	e9 11 01 00 00       	jmp    c0001531 <dlrealloc+0x1ab>
c0001420:	89 c8                	mov    eax,ecx
c0001422:	83 e0 fe             	and    eax,0xfffffffe
c0001425:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000142a:	75 1c                	jne    c0001448 <dlrealloc+0xc2>
c000142c:	83 e1 fc             	and    ecx,0xfffffffc
c000142f:	01 f1                	add    ecx,esi
c0001431:	39 cf                	cmp    edi,ecx
c0001433:	77 13                	ja     c0001448 <dlrealloc+0xc2>
c0001435:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001438:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000143b:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143e:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001441:	89 ce                	mov    esi,ecx
c0001443:	e9 ab 00 00 00       	jmp    c00014f3 <dlrealloc+0x16d>
c0001448:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	8d 47 f9             	lea    eax,[edi-0x7]
c0001452:	50                   	push   eax
c0001453:	e8 f1 f9 ff ff       	call   c0000e49 <dlmalloc>
c0001458:	83 c4 10             	add    esp,0x10
c000145b:	89 c1                	mov    ecx,eax
c000145d:	85 c0                	test   eax,eax
c000145f:	0f 84 49 ff ff ff    	je     c00013ae <dlrealloc+0x28>
c0001465:	8d 40 f8             	lea    eax,[eax-0x8]
c0001468:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000146c:	39 c2                	cmp    edx,eax
c000146e:	75 0a                	jne    c000147a <dlrealloc+0xf4>
c0001470:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001473:	83 e0 fc             	and    eax,0xfffffffc
c0001476:	01 c6                	add    esi,eax
c0001478:	eb 79                	jmp    c00014f3 <dlrealloc+0x16d>
c000147a:	83 ee 04             	sub    esi,0x4
c000147d:	83 fe 27             	cmp    esi,0x27
c0001480:	76 16                	jbe    c0001498 <dlrealloc+0x112>
c0001482:	50                   	push   eax
c0001483:	56                   	push   esi
c0001484:	53                   	push   ebx
c0001485:	51                   	push   ecx
c0001486:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000148a:	e8 43 f1 ff ff       	call   c00005d2 <memcpy>
c000148f:	83 c4 10             	add    esp,0x10
c0001492:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001496:	eb 43                	jmp    c00014db <dlrealloc+0x155>
c0001498:	8b 03                	mov    eax,DWORD PTR [ebx]
c000149a:	83 fe 13             	cmp    esi,0x13
c000149d:	89 01                	mov    DWORD PTR [ecx],eax
c000149f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00014a2:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a8:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014ab:	76 2e                	jbe    c00014db <dlrealloc+0x155>
c00014ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014b0:	83 fe 1b             	cmp    esi,0x1b
c00014b3:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b9:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014bc:	76 1d                	jbe    c00014db <dlrealloc+0x155>
c00014be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014c1:	83 fe 23             	cmp    esi,0x23
c00014c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014ca:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014cd:	76 0c                	jbe    c00014db <dlrealloc+0x155>
c00014cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014d2:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d8:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014df:	83 ec 0c             	sub    esp,0xc
c00014e2:	53                   	push   ebx
c00014e3:	e8 03 f6 ff ff       	call   c0000aeb <dlfree>
c00014e8:	83 c4 10             	add    esp,0x10
c00014eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ef:	89 cb                	mov    ebx,ecx
c00014f1:	eb 3e                	jmp    c0001531 <dlrealloc+0x1ab>
c00014f3:	89 f2                	mov    edx,esi
c00014f5:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f8:	29 fa                	sub    edx,edi
c00014fa:	83 e1 01             	and    ecx,0x1
c00014fd:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001501:	83 fa 0f             	cmp    edx,0xf
c0001504:	77 0b                	ja     c0001511 <dlrealloc+0x18b>
c0001506:	09 ce                	or     esi,ecx
c0001508:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000150b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150f:	eb 20                	jmp    c0001531 <dlrealloc+0x1ab>
c0001511:	01 fd                	add    ebp,edi
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	09 cf                	or     edi,ecx
c0001518:	83 ec 0c             	sub    esp,0xc
c000151b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000151e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0001521:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001525:	83 c5 08             	add    ebp,0x8
c0001528:	55                   	push   ebp
c0001529:	e8 bd f5 ff ff       	call   c0000aeb <dlfree>
c000152e:	83 c4 10             	add    esp,0x10
c0001531:	83 c4 1c             	add    esp,0x1c
c0001534:	89 d8                	mov    eax,ebx
c0001536:	5b                   	pop    ebx
c0001537:	5e                   	pop    esi
c0001538:	5f                   	pop    edi
c0001539:	5d                   	pop    ebp
c000153a:	c3                   	ret    

c000153b <dlmemalign>:
c000153b:	55                   	push   ebp
c000153c:	57                   	push   edi
c000153d:	56                   	push   esi
c000153e:	53                   	push   ebx
c000153f:	83 ec 0c             	sub    esp,0xc
c0001542:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001546:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000154a:	83 fa 08             	cmp    edx,0x8
c000154d:	77 10                	ja     c000155f <dlmemalign+0x24>
c000154f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001553:	83 c4 0c             	add    esp,0xc
c0001556:	5b                   	pop    ebx
c0001557:	5e                   	pop    esi
c0001558:	5f                   	pop    edi
c0001559:	5d                   	pop    ebp
c000155a:	e9 ea f8 ff ff       	jmp    c0000e49 <dlmalloc>
c000155f:	bf 10 00 00 00       	mov    edi,0x10
c0001564:	83 fa 0f             	cmp    edx,0xf
c0001567:	76 13                	jbe    c000157c <dlmemalign+0x41>
c0001569:	8d 4a ff             	lea    ecx,[edx-0x1]
c000156c:	85 d1                	test   ecx,edx
c000156e:	75 04                	jne    c0001574 <dlmemalign+0x39>
c0001570:	89 d7                	mov    edi,edx
c0001572:	eb 08                	jmp    c000157c <dlmemalign+0x41>
c0001574:	39 d7                	cmp    edi,edx
c0001576:	73 04                	jae    c000157c <dlmemalign+0x41>
c0001578:	01 ff                	add    edi,edi
c000157a:	eb f8                	jmp    c0001574 <dlmemalign+0x39>
c000157c:	83 f8 df             	cmp    eax,0xffffffdf
c000157f:	76 07                	jbe    c0001588 <dlmemalign+0x4d>
c0001581:	31 c0                	xor    eax,eax
c0001583:	e9 ce 00 00 00       	jmp    c0001656 <dlmemalign+0x11b>
c0001588:	83 c0 0b             	add    eax,0xb
c000158b:	bd 10 00 00 00       	mov    ebp,0x10
c0001590:	83 f8 0f             	cmp    eax,0xf
c0001593:	76 05                	jbe    c000159a <dlmemalign+0x5f>
c0001595:	83 e0 f8             	and    eax,0xfffffff8
c0001598:	89 c5                	mov    ebp,eax
c000159a:	83 ec 0c             	sub    esp,0xc
c000159d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00015a1:	50                   	push   eax
c00015a2:	e8 a2 f8 ff ff       	call   c0000e49 <dlmalloc>
c00015a7:	83 c4 10             	add    esp,0x10
c00015aa:	89 c1                	mov    ecx,eax
c00015ac:	85 c0                	test   eax,eax
c00015ae:	74 d1                	je     c0001581 <dlmemalign+0x46>
c00015b0:	31 d2                	xor    edx,edx
c00015b2:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b5:	f7 f7                	div    edi
c00015b7:	85 d2                	test   edx,edx
c00015b9:	74 62                	je     c000161d <dlmemalign+0xe2>
c00015bb:	89 f8                	mov    eax,edi
c00015bd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015c1:	f7 d8                	neg    eax
c00015c3:	21 c3                	and    ebx,eax
c00015c5:	83 eb 08             	sub    ebx,0x8
c00015c8:	89 d8                	mov    eax,ebx
c00015ca:	29 f0                	sub    eax,esi
c00015cc:	83 f8 0f             	cmp    eax,0xf
c00015cf:	77 02                	ja     c00015d3 <dlmemalign+0x98>
c00015d1:	01 fb                	add    ebx,edi
c00015d3:	89 d8                	mov    eax,ebx
c00015d5:	29 f0                	sub    eax,esi
c00015d7:	89 c6                	mov    esi,eax
c00015d9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015dc:	89 c2                	mov    edx,eax
c00015de:	83 e2 fc             	and    edx,0xfffffffc
c00015e1:	29 f2                	sub    edx,esi
c00015e3:	a8 02                	test   al,0x2
c00015e5:	74 10                	je     c00015f7 <dlmemalign+0xbc>
c00015e7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015ea:	83 ca 02             	or     edx,0x2
c00015ed:	8d 43 08             	lea    eax,[ebx+0x8]
c00015f0:	89 33                	mov    DWORD PTR [ebx],esi
c00015f2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f5:	eb 5f                	jmp    c0001656 <dlmemalign+0x11b>
c00015f7:	89 d0                	mov    eax,edx
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	83 c8 01             	or     eax,0x1
c00015ff:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001602:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001607:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000160a:	83 e0 01             	and    eax,0x1
c000160d:	09 f0                	or     eax,esi
c000160f:	89 de                	mov    esi,ebx
c0001611:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001614:	51                   	push   ecx
c0001615:	e8 d1 f4 ff ff       	call   c0000aeb <dlfree>
c000161a:	83 c4 10             	add    esp,0x10
c000161d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001620:	a8 02                	test   al,0x2
c0001622:	75 2f                	jne    c0001653 <dlmemalign+0x118>
c0001624:	83 e0 fc             	and    eax,0xfffffffc
c0001627:	8d 55 10             	lea    edx,[ebp+0x10]
c000162a:	39 c2                	cmp    edx,eax
c000162c:	73 25                	jae    c0001653 <dlmemalign+0x118>
c000162e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001631:	29 e8                	sub    eax,ebp
c0001633:	83 c8 01             	or     eax,0x1
c0001636:	83 ec 0c             	sub    esp,0xc
c0001639:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000163c:	83 c2 08             	add    edx,0x8
c000163f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001642:	83 e0 01             	and    eax,0x1
c0001645:	09 c5                	or     ebp,eax
c0001647:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000164a:	52                   	push   edx
c000164b:	e8 9b f4 ff ff       	call   c0000aeb <dlfree>
c0001650:	83 c4 10             	add    esp,0x10
c0001653:	8d 46 08             	lea    eax,[esi+0x8]
c0001656:	83 c4 0c             	add    esp,0xc
c0001659:	5b                   	pop    ebx
c000165a:	5e                   	pop    esi
c000165b:	5f                   	pop    edi
c000165c:	5d                   	pop    ebp
c000165d:	c3                   	ret    

c000165e <dlcalloc>:
c000165e:	53                   	push   ebx
c000165f:	83 ec 14             	sub    esp,0x14
c0001662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001666:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000166b:	50                   	push   eax
c000166c:	e8 d8 f7 ff ff       	call   c0000e49 <dlmalloc>
c0001671:	83 c4 10             	add    esp,0x10
c0001674:	89 c3                	mov    ebx,eax
c0001676:	85 c0                	test   eax,eax
c0001678:	74 77                	je     c00016f1 <dlcalloc+0x93>
c000167a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000167d:	89 d0                	mov    eax,edx
c000167f:	83 e0 fc             	and    eax,0xfffffffc
c0001682:	80 e2 02             	and    dl,0x2
c0001685:	75 5a                	jne    c00016e1 <dlcalloc+0x83>
c0001687:	83 e8 04             	sub    eax,0x4
c000168a:	83 f8 27             	cmp    eax,0x27
c000168d:	76 03                	jbe    c0001692 <dlcalloc+0x34>
c000168f:	51                   	push   ecx
c0001690:	eb 53                	jmp    c00016e5 <dlcalloc+0x87>
c0001692:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001698:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a6:	83 f8 13             	cmp    eax,0x13
c00016a9:	76 46                	jbe    c00016f1 <dlcalloc+0x93>
c00016ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016b2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b9:	83 f8 1b             	cmp    eax,0x1b
c00016bc:	76 33                	jbe    c00016f1 <dlcalloc+0x93>
c00016be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016cc:	83 f8 23             	cmp    eax,0x23
c00016cf:	76 20                	jbe    c00016f1 <dlcalloc+0x93>
c00016d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016df:	eb 10                	jmp    c00016f1 <dlcalloc+0x93>
c00016e1:	83 e8 08             	sub    eax,0x8
c00016e4:	52                   	push   edx
c00016e5:	50                   	push   eax
c00016e6:	6a 00                	push   0x0
c00016e8:	53                   	push   ebx
c00016e9:	e8 1a ef ff ff       	call   c0000608 <memset>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 08             	add    esp,0x8
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	c3                   	ret    

c00016f8 <dlcfree>:
c00016f8:	e9 ee f3 ff ff       	jmp    c0000aeb <dlfree>

c00016fd <dlindependent_calloc>:
c00016fd:	83 ec 28             	sub    esp,0x28
c0001700:	b9 03 00 00 00       	mov    ecx,0x3
c0001705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001709:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000170d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001715:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001719:	e8 b9 fa ff ff       	call   c00011d7 <iALLOc>
c000171e:	83 c4 2c             	add    esp,0x2c
c0001721:	c3                   	ret    

c0001722 <dlindependent_comalloc>:
c0001722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000172a:	31 c9                	xor    ecx,ecx
c000172c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001734:	e9 9e fa ff ff       	jmp    c00011d7 <iALLOc>

c0001739 <dlvalloc>:
c0001739:	83 ec 0c             	sub    esp,0xc
c000173c:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c0001743:	75 0a                	jne    c000174f <dlvalloc+0x16>
c0001745:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c000174a:	e8 b5 f2 ff ff       	call   c0000a04 <malloc_consolidate>
c000174f:	50                   	push   eax
c0001750:	50                   	push   eax
c0001751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001755:	ff 35 dc 41 02 c0    	push   DWORD PTR ds:0xc00241dc
c000175b:	e8 db fd ff ff       	call   c000153b <dlmemalign>
c0001760:	83 c4 1c             	add    esp,0x1c
c0001763:	c3                   	ret    

c0001764 <dlpvalloc>:
c0001764:	83 ec 0c             	sub    esp,0xc
c0001767:	83 3d 80 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e80,0x0
c000176e:	75 0a                	jne    c000177a <dlpvalloc+0x16>
c0001770:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c0001775:	e8 8a f2 ff ff       	call   c0000a04 <malloc_consolidate>
c000177a:	52                   	push   edx
c000177b:	a1 dc 41 02 c0       	mov    eax,ds:0xc00241dc
c0001780:	52                   	push   edx
c0001781:	89 c1                	mov    ecx,eax
c0001783:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001787:	f7 d9                	neg    ecx
c0001789:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000178d:	21 ca                	and    edx,ecx
c000178f:	52                   	push   edx
c0001790:	50                   	push   eax
c0001791:	e8 a5 fd ff ff       	call   c000153b <dlmemalign>
c0001796:	83 c4 1c             	add    esp,0x1c
c0001799:	c3                   	ret    

c000179a <dlmalloc_trim>:
c000179a:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c000179f:	e8 60 f2 ff ff       	call   c0000a04 <malloc_consolidate>
c00017a4:	31 c0                	xor    eax,eax
c00017a6:	c3                   	ret    

c00017a7 <dlmalloc_usable_size>:
c00017a7:	53                   	push   ebx
c00017a8:	31 c0                	xor    eax,eax
c00017aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017ae:	85 c9                	test   ecx,ecx
c00017b0:	74 24                	je     c00017d6 <dlmalloc_usable_size+0x2f>
c00017b2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b5:	f6 c2 02             	test   dl,0x2
c00017b8:	74 08                	je     c00017c2 <dlmalloc_usable_size+0x1b>
c00017ba:	83 e2 fc             	and    edx,0xfffffffc
c00017bd:	8d 42 f8             	lea    eax,[edx-0x8]
c00017c0:	eb 14                	jmp    c00017d6 <dlmalloc_usable_size+0x2f>
c00017c2:	89 d3                	mov    ebx,edx
c00017c4:	31 c0                	xor    eax,eax
c00017c6:	83 e3 fe             	and    ebx,0xfffffffe
c00017c9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ce:	74 06                	je     c00017d6 <dlmalloc_usable_size+0x2f>
c00017d0:	83 e2 fc             	and    edx,0xfffffffc
c00017d3:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d6:	5b                   	pop    ebx
c00017d7:	c3                   	ret    

c00017d8 <dlmallinfo>:
c00017d8:	55                   	push   ebp
c00017d9:	57                   	push   edi
c00017da:	56                   	push   esi
c00017db:	53                   	push   ebx
c00017dc:	83 ec 08             	sub    esp,0x8
c00017df:	83 3d ac 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eac,0x0
c00017e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017ea:	75 0a                	jne    c00017f6 <dlmallinfo+0x1e>
c00017ec:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c00017f1:	e8 0e f2 ff ff       	call   c0000a04 <malloc_consolidate>
c00017f6:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00017fb:	31 ed                	xor    ebp,ebp
c00017fd:	31 c9                	xor    ecx,ecx
c00017ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001802:	83 e0 fc             	and    eax,0xfffffffc
c0001805:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001809:	31 c0                	xor    eax,eax
c000180b:	8b 14 85 84 3e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc17c]
c0001812:	85 d2                	test   edx,edx
c0001814:	74 0e                	je     c0001824 <dlmallinfo+0x4c>
c0001816:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001819:	45                   	inc    ebp
c000181a:	83 e6 fc             	and    esi,0xfffffffc
c000181d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001820:	01 f1                	add    ecx,esi
c0001822:	eb ee                	jmp    c0001812 <dlmallinfo+0x3a>
c0001824:	40                   	inc    eax
c0001825:	83 f8 0a             	cmp    eax,0xa
c0001828:	75 e1                	jne    c000180b <dlmallinfo+0x33>
c000182a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000182e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001835:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001838:	b8 b4 3e 02 c0       	mov    eax,0xc0023eb4
c000183d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001840:	39 f0                	cmp    eax,esi
c0001842:	74 10                	je     c0001854 <dlmallinfo+0x7c>
c0001844:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001847:	ff 04 24             	inc    DWORD PTR [esp]
c000184a:	83 e7 fc             	and    edi,0xfffffffc
c000184d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001850:	01 fa                	add    edx,edi
c0001852:	eb ec                	jmp    c0001840 <dlmallinfo+0x68>
c0001854:	83 c0 08             	add    eax,0x8
c0001857:	3d ac 41 02 c0       	cmp    eax,0xc00241ac
c000185c:	75 df                	jne    c000183d <dlmallinfo+0x65>
c000185e:	a1 e8 41 02 c0       	mov    eax,ds:0xc00241e8
c0001863:	8b 35 d0 41 02 c0    	mov    esi,DWORD PTR ds:0xc00241d0
c0001869:	89 03                	mov    DWORD PTR [ebx],eax
c000186b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186e:	29 d0                	sub    eax,edx
c0001870:	8b 35 e4 41 02 c0    	mov    esi,DWORD PTR ds:0xc00241e4
c0001876:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001879:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000187f:	8b 35 f4 41 02 c0    	mov    esi,DWORD PTR ds:0xc00241f4
c0001885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001889:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000188c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188f:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001892:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001895:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001898:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000189b:	83 c4 08             	add    esp,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	5b                   	pop    ebx
c00018a1:	5e                   	pop    esi
c00018a2:	5f                   	pop    edi
c00018a3:	5d                   	pop    ebp
c00018a4:	c2 04 00             	ret    0x4

c00018a7 <dlmalloc_stats>:
c00018a7:	83 ec 30             	sub    esp,0x30
c00018aa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018ae:	50                   	push   eax
c00018af:	e8 24 ff ff ff       	call   c00017d8 <dlmallinfo>
c00018b4:	83 c4 30             	add    esp,0x30
c00018b7:	c3                   	ret    

c00018b8 <dlmallopt>:
c00018b8:	56                   	push   esi
c00018b9:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c00018be:	53                   	push   ebx
c00018bf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c7:	e8 38 f1 ff ff       	call   c0000a04 <malloc_consolidate>
c00018cc:	8d 46 04             	lea    eax,[esi+0x4]
c00018cf:	83 f8 05             	cmp    eax,0x5
c00018d2:	77 67                	ja     c000193b <dlmallopt+0x83>
c00018d4:	ff 24 85 24 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00dc]
c00018db:	83 fb 50             	cmp    ebx,0x50
c00018de:	77 5b                	ja     c000193b <dlmallopt+0x83>
c00018e0:	ba 08 00 00 00       	mov    edx,0x8
c00018e5:	85 db                	test   ebx,ebx
c00018e7:	74 12                	je     c00018fb <dlmallopt+0x43>
c00018e9:	83 c3 0b             	add    ebx,0xb
c00018ec:	ba 10 00 00 00       	mov    edx,0x10
c00018f1:	83 fb 0f             	cmp    ebx,0xf
c00018f4:	76 05                	jbe    c00018fb <dlmallopt+0x43>
c00018f6:	89 da                	mov    edx,ebx
c00018f8:	83 e2 f8             	and    edx,0xfffffff8
c00018fb:	a1 80 3e 02 c0       	mov    eax,ds:0xc0023e80
c0001900:	83 e0 03             	and    eax,0x3
c0001903:	09 d0                	or     eax,edx
c0001905:	a3 80 3e 02 c0       	mov    ds:0xc0023e80,eax
c000190a:	eb 31                	jmp    c000193d <dlmallopt+0x85>
c000190c:	89 1d c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,ebx
c0001912:	eb 06                	jmp    c000191a <dlmallopt+0x62>
c0001914:	89 1d c8 41 02 c0    	mov    DWORD PTR ds:0xc00241c8,ebx
c000191a:	be 01 00 00 00       	mov    esi,0x1
c000191f:	eb 1c                	jmp    c000193d <dlmallopt+0x85>
c0001921:	89 1d cc 41 02 c0    	mov    DWORD PTR ds:0xc00241cc,ebx
c0001927:	eb f1                	jmp    c000191a <dlmallopt+0x62>
c0001929:	31 f6                	xor    esi,esi
c000192b:	85 db                	test   ebx,ebx
c000192d:	75 0e                	jne    c000193d <dlmallopt+0x85>
c000192f:	c7 05 d4 41 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00241d4,0x0
c0001939:	eb df                	jmp    c000191a <dlmallopt+0x62>
c000193b:	31 f6                	xor    esi,esi
c000193d:	5b                   	pop    ebx
c000193e:	89 f0                	mov    eax,esi
c0001940:	5e                   	pop    esi
c0001941:	c3                   	ret    

c0001942 <disk_status>:
c0001942:	31 c0                	xor    eax,eax
c0001944:	c3                   	ret    

c0001945 <disk_initialize>:
c0001945:	31 c0                	xor    eax,eax
c0001947:	c3                   	ret    

c0001948 <disk_read>:
c0001948:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194d:	0f b6 04 85 a0 57 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda860]
c0001955:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001959:	e9 6a 89 01 00       	jmp    c001a2c8 <fatWrapperReadDisk>

c000195e <disk_write>:
c000195e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001963:	0f b6 04 85 a0 57 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda860]
c000196b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196f:	e9 9f 89 01 00       	jmp    c001a313 <fatWrapperWriteDisk>

c0001974 <disk_ioctl>:
c0001974:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000197d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001982:	0f b6 04 85 a0 57 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda860]
c000198a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000198e:	e9 cb 89 01 00       	jmp    c001a35e <fatWrapperIoctl>

c0001993 <ld_word>:
c0001993:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001997:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199a:	c1 e2 08             	shl    edx,0x8
c000199d:	09 d0                	or     eax,edx
c000199f:	c3                   	ret    

c00019a0 <ld_dword>:
c00019a0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00019a4:	89 d1                	mov    ecx,edx
c00019a6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019aa:	c1 e1 08             	shl    ecx,0x8
c00019ad:	09 ca                	or     edx,ecx
c00019af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019b2:	c1 e2 08             	shl    edx,0x8
c00019b5:	09 d0                	or     eax,edx
c00019b7:	c3                   	ret    

c00019b8 <ld_qword>:
c00019b8:	57                   	push   edi
c00019b9:	56                   	push   esi
c00019ba:	53                   	push   ebx
c00019bb:	31 db                	xor    ebx,ebx
c00019bd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019c0:	89 df                	mov    edi,ebx
c00019c2:	89 ce                	mov    esi,ecx
c00019c4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c8:	0f a4 f7 08          	shld   edi,esi,0x8
c00019cc:	c1 e6 08             	shl    esi,0x8
c00019cf:	09 f2                	or     edx,esi
c00019d1:	89 d6                	mov    esi,edx
c00019d3:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d7:	0f a4 f7 08          	shld   edi,esi,0x8
c00019db:	c1 e6 08             	shl    esi,0x8
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d6                	mov    esi,edx
c00019e2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e6:	0f a4 f7 08          	shld   edi,esi,0x8
c00019ea:	c1 e6 08             	shl    esi,0x8
c00019ed:	89 fb                	mov    ebx,edi
c00019ef:	09 f2                	or     edx,esi
c00019f1:	89 d1                	mov    ecx,edx
c00019f3:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f7:	89 da                	mov    edx,ebx
c00019f9:	5b                   	pop    ebx
c00019fa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019fd:	c1 e1 08             	shl    ecx,0x8
c0001a00:	5e                   	pop    esi
c0001a01:	09 c8                	or     eax,ecx
c0001a03:	5f                   	pop    edi
c0001a04:	c3                   	ret    

c0001a05 <st_word>:
c0001a05:	66 89 10             	mov    WORD PTR [eax],dx
c0001a08:	c3                   	ret    

c0001a09 <st_dword>:
c0001a09:	89 10                	mov    DWORD PTR [eax],edx
c0001a0b:	c3                   	ret    

c0001a0c <st_qword>:
c0001a0c:	89 10                	mov    DWORD PTR [eax],edx
c0001a0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a11:	c3                   	ret    

c0001a12 <mem_cpy>:
c0001a12:	85 c9                	test   ecx,ecx
c0001a14:	74 10                	je     c0001a26 <mem_cpy+0x14>
c0001a16:	57                   	push   edi
c0001a17:	01 c1                	add    ecx,eax
c0001a19:	56                   	push   esi
c0001a1a:	89 c7                	mov    edi,eax
c0001a1c:	89 d6                	mov    esi,edx
c0001a1e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1f:	39 f9                	cmp    ecx,edi
c0001a21:	75 fb                	jne    c0001a1e <mem_cpy+0xc>
c0001a23:	5e                   	pop    esi
c0001a24:	5f                   	pop    edi
c0001a25:	c3                   	ret    
c0001a26:	c3                   	ret    

c0001a27 <mem_set>:
c0001a27:	01 c1                	add    ecx,eax
c0001a29:	40                   	inc    eax
c0001a2a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a2d:	39 c8                	cmp    eax,ecx
c0001a2f:	75 f8                	jne    c0001a29 <mem_set+0x2>
c0001a31:	c3                   	ret    

c0001a32 <mem_cmp>:
c0001a32:	57                   	push   edi
c0001a33:	56                   	push   esi
c0001a34:	89 c6                	mov    esi,eax
c0001a36:	53                   	push   ebx
c0001a37:	46                   	inc    esi
c0001a38:	42                   	inc    edx
c0001a39:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a3d:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a41:	29 fb                	sub    ebx,edi
c0001a43:	89 cf                	mov    edi,ecx
c0001a45:	29 f7                	sub    edi,esi
c0001a47:	01 c7                	add    edi,eax
c0001a49:	74 04                	je     c0001a4f <mem_cmp+0x1d>
c0001a4b:	85 db                	test   ebx,ebx
c0001a4d:	74 e8                	je     c0001a37 <mem_cmp+0x5>
c0001a4f:	89 d8                	mov    eax,ebx
c0001a51:	5b                   	pop    ebx
c0001a52:	5e                   	pop    esi
c0001a53:	5f                   	pop    edi
c0001a54:	c3                   	ret    

c0001a55 <chk_chr>:
c0001a55:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a58:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a5b:	74 07                	je     c0001a64 <chk_chr+0xf>
c0001a5d:	39 d1                	cmp    ecx,edx
c0001a5f:	74 03                	je     c0001a64 <chk_chr+0xf>
c0001a61:	40                   	inc    eax
c0001a62:	eb f1                	jmp    c0001a55 <chk_chr>
c0001a64:	89 c8                	mov    eax,ecx
c0001a66:	c3                   	ret    

c0001a67 <dbc_1st>:
c0001a67:	31 c0                	xor    eax,eax
c0001a69:	c3                   	ret    

c0001a6a <dbc_2nd>:
c0001a6a:	31 c0                	xor    eax,eax
c0001a6c:	c3                   	ret    

c0001a6d <tchar2uni>:
c0001a6d:	57                   	push   edi
c0001a6e:	89 c7                	mov    edi,eax
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a74:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a76:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a79:	84 c9                	test   cl,cl
c0001a7b:	78 0a                	js     c0001a87 <tchar2uni+0x1a>
c0001a7d:	0f b6 d1             	movzx  edx,cl
c0001a80:	89 f3                	mov    ebx,esi
c0001a82:	e9 9f 00 00 00       	jmp    c0001b26 <tchar2uni+0xb9>
c0001a87:	88 ca                	mov    dl,cl
c0001a89:	83 e2 e0             	and    edx,0xffffffe0
c0001a8c:	80 fa c0             	cmp    dl,0xc0
c0001a8f:	75 0c                	jne    c0001a9d <tchar2uni+0x30>
c0001a91:	89 ca                	mov    edx,ecx
c0001a93:	b9 01 00 00 00       	mov    ecx,0x1
c0001a98:	83 e2 1f             	and    edx,0x1f
c0001a9b:	eb 2e                	jmp    c0001acb <tchar2uni+0x5e>
c0001a9d:	88 ca                	mov    dl,cl
c0001a9f:	83 e2 f0             	and    edx,0xfffffff0
c0001aa2:	80 fa e0             	cmp    dl,0xe0
c0001aa5:	75 0c                	jne    c0001ab3 <tchar2uni+0x46>
c0001aa7:	89 ca                	mov    edx,ecx
c0001aa9:	b9 02 00 00 00       	mov    ecx,0x2
c0001aae:	83 e2 0f             	and    edx,0xf
c0001ab1:	eb 18                	jmp    c0001acb <tchar2uni+0x5e>
c0001ab3:	88 ca                	mov    dl,cl
c0001ab5:	83 e2 f8             	and    edx,0xfffffff8
c0001ab8:	88 d0                	mov    al,dl
c0001aba:	83 ca ff             	or     edx,0xffffffff
c0001abd:	3c f0                	cmp    al,0xf0
c0001abf:	75 6c                	jne    c0001b2d <tchar2uni+0xc0>
c0001ac1:	89 ca                	mov    edx,ecx
c0001ac3:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac8:	83 e2 07             	and    edx,0x7
c0001acb:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001acf:	46                   	inc    esi
c0001ad0:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ad3:	88 c8                	mov    al,cl
c0001ad5:	83 e0 c0             	and    eax,0xffffffc0
c0001ad8:	3c 80                	cmp    al,0x80
c0001ada:	75 4e                	jne    c0001b2a <tchar2uni+0xbd>
c0001adc:	c1 e2 06             	shl    edx,0x6
c0001adf:	83 e1 3f             	and    ecx,0x3f
c0001ae2:	09 ca                	or     edx,ecx
c0001ae4:	39 de                	cmp    esi,ebx
c0001ae6:	75 e7                	jne    c0001acf <tchar2uni+0x62>
c0001ae8:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001aee:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001af4:	76 34                	jbe    c0001b2a <tchar2uni+0xbd>
c0001af6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001af9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aff:	77 29                	ja     c0001b2a <tchar2uni+0xbd>
c0001b01:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b07:	76 1d                	jbe    c0001b26 <tchar2uni+0xb9>
c0001b09:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b15:	c1 e1 06             	shl    ecx,0x6
c0001b18:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b1e:	09 ca                	or     edx,ecx
c0001b20:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b26:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b28:	eb 03                	jmp    c0001b2d <tchar2uni+0xc0>
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	5b                   	pop    ebx
c0001b2e:	89 d0                	mov    eax,edx
c0001b30:	5e                   	pop    esi
c0001b31:	5f                   	pop    edi
c0001b32:	c3                   	ret    

c0001b33 <put_utf>:
c0001b33:	53                   	push   ebx
c0001b34:	83 f8 7f             	cmp    eax,0x7f
c0001b37:	89 c3                	mov    ebx,eax
c0001b39:	b0 00                	mov    al,0x0
c0001b3b:	77 11                	ja     c0001b4e <put_utf+0x1b>
c0001b3d:	85 c9                	test   ecx,ecx
c0001b3f:	0f 84 e5 00 00 00    	je     c0001c2a <put_utf+0xf7>
c0001b45:	88 1a                	mov    BYTE PTR [edx],bl
c0001b47:	b0 01                	mov    al,0x1
c0001b49:	e9 dc 00 00 00       	jmp    c0001c2a <put_utf+0xf7>
c0001b4e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b54:	77 23                	ja     c0001b79 <put_utf+0x46>
c0001b56:	83 f9 01             	cmp    ecx,0x1
c0001b59:	0f 86 cb 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b5f:	89 d8                	mov    eax,ebx
c0001b61:	83 e3 3f             	and    ebx,0x3f
c0001b64:	c1 e8 06             	shr    eax,0x6
c0001b67:	83 cb 80             	or     ebx,0xffffff80
c0001b6a:	83 c8 c0             	or     eax,0xffffffc0
c0001b6d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b70:	88 02                	mov    BYTE PTR [edx],al
c0001b72:	b0 02                	mov    al,0x2
c0001b74:	e9 b1 00 00 00       	jmp    c0001c2a <put_utf+0xf7>
c0001b79:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7f:	77 40                	ja     c0001bc1 <put_utf+0x8e>
c0001b81:	83 f9 02             	cmp    ecx,0x2
c0001b84:	0f 86 a0 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b8a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b90:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b96:	0f 86 8e 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b9c:	89 d8                	mov    eax,ebx
c0001b9e:	c1 e8 0c             	shr    eax,0xc
c0001ba1:	83 c8 e0             	or     eax,0xffffffe0
c0001ba4:	88 02                	mov    BYTE PTR [edx],al
c0001ba6:	89 d8                	mov    eax,ebx
c0001ba8:	c1 e8 06             	shr    eax,0x6
c0001bab:	83 e3 3f             	and    ebx,0x3f
c0001bae:	83 e0 3f             	and    eax,0x3f
c0001bb1:	83 cb 80             	or     ebx,0xffffff80
c0001bb4:	83 c8 80             	or     eax,0xffffff80
c0001bb7:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bbd:	b0 03                	mov    al,0x3
c0001bbf:	eb 69                	jmp    c0001c2a <put_utf+0xf7>
c0001bc1:	83 f9 03             	cmp    ecx,0x3
c0001bc4:	76 64                	jbe    c0001c2a <put_utf+0xf7>
c0001bc6:	89 d9                	mov    ecx,ebx
c0001bc8:	66 31 c9             	xor    cx,cx
c0001bcb:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd1:	0f b7 c3             	movzx  eax,bx
c0001bd4:	c1 e9 06             	shr    ecx,0x6
c0001bd7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bdd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be3:	77 43                	ja     c0001c28 <put_utf+0xf5>
c0001be5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001beb:	77 3b                	ja     c0001c28 <put_utf+0xf5>
c0001bed:	09 cb                	or     ebx,ecx
c0001bef:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf5:	89 d8                	mov    eax,ebx
c0001bf7:	c1 e8 12             	shr    eax,0x12
c0001bfa:	83 c8 f0             	or     eax,0xfffffff0
c0001bfd:	88 02                	mov    BYTE PTR [edx],al
c0001bff:	89 d8                	mov    eax,ebx
c0001c01:	c1 e8 0c             	shr    eax,0xc
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	83 c8 80             	or     eax,0xffffff80
c0001c0a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c0d:	89 d8                	mov    eax,ebx
c0001c0f:	c1 e8 06             	shr    eax,0x6
c0001c12:	83 e3 3f             	and    ebx,0x3f
c0001c15:	83 e0 3f             	and    eax,0x3f
c0001c18:	83 cb 80             	or     ebx,0xffffff80
c0001c1b:	83 c8 80             	or     eax,0xffffff80
c0001c1e:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c21:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c24:	b0 04                	mov    al,0x4
c0001c26:	eb 02                	jmp    c0001c2a <put_utf+0xf7>
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	5b                   	pop    ebx
c0001c2b:	c3                   	ret    

c0001c2c <clst2sect>:
c0001c2c:	89 c1                	mov    ecx,eax
c0001c2e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c31:	83 ea 02             	sub    edx,0x2
c0001c34:	83 e8 02             	sub    eax,0x2
c0001c37:	39 d0                	cmp    eax,edx
c0001c39:	76 0d                	jbe    c0001c48 <clst2sect+0x1c>
c0001c3b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3f:	f7 e2                	mul    edx
c0001c41:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c44:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c47:	c3                   	ret    
c0001c48:	31 c0                	xor    eax,eax
c0001c4a:	31 d2                	xor    edx,edx
c0001c4c:	c3                   	ret    

c0001c4d <clmt_clust>:
c0001c4d:	57                   	push   edi
c0001c4e:	89 cf                	mov    edi,ecx
c0001c50:	56                   	push   esi
c0001c51:	89 d6                	mov    esi,edx
c0001c53:	53                   	push   ebx
c0001c54:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c59:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c5d:	c1 ef 09             	shr    edi,0x9
c0001c60:	89 f2                	mov    edx,esi
c0001c62:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c65:	89 f9                	mov    ecx,edi
c0001c67:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c6b:	31 ff                	xor    edi,edi
c0001c6d:	57                   	push   edi
c0001c6e:	56                   	push   esi
c0001c6f:	51                   	push   ecx
c0001c70:	52                   	push   edx
c0001c71:	e8 a6 d3 01 00       	call   c001f01c <__udivdi3>
c0001c76:	83 c4 10             	add    esp,0x10
c0001c79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c7b:	85 d2                	test   edx,edx
c0001c7d:	74 10                	je     c0001c8f <clmt_clust+0x42>
c0001c7f:	39 d0                	cmp    eax,edx
c0001c81:	72 07                	jb     c0001c8a <clmt_clust+0x3d>
c0001c83:	29 d0                	sub    eax,edx
c0001c85:	83 c3 08             	add    ebx,0x8
c0001c88:	eb ef                	jmp    c0001c79 <clmt_clust+0x2c>
c0001c8a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c8d:	89 c2                	mov    edx,eax
c0001c8f:	5b                   	pop    ebx
c0001c90:	89 d0                	mov    eax,edx
c0001c92:	5e                   	pop    esi
c0001c93:	5f                   	pop    edi
c0001c94:	c3                   	ret    

c0001c95 <pick_lfn>:
c0001c95:	55                   	push   ebp
c0001c96:	57                   	push   edi
c0001c97:	56                   	push   esi
c0001c98:	89 d6                	mov    esi,edx
c0001c9a:	53                   	push   ebx
c0001c9b:	89 c3                	mov    ebx,eax
c0001c9d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ca0:	e8 ee fc ff ff       	call   c0001993 <ld_word>
c0001ca5:	66 85 c0             	test   ax,ax
c0001ca8:	74 04                	je     c0001cae <pick_lfn+0x19>
c0001caa:	31 c0                	xor    eax,eax
c0001cac:	eb 5c                	jmp    c0001d0a <pick_lfn+0x75>
c0001cae:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb9:	49                   	dec    ecx
c0001cba:	31 ff                	xor    edi,edi
c0001cbc:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cbf:	0f b6 87 40 00 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdffc0]
c0001cc6:	01 f0                	add    eax,esi
c0001cc8:	e8 c6 fc ff ff       	call   c0001993 <ld_word>
c0001ccd:	66 85 ed             	test   bp,bp
c0001cd0:	74 11                	je     c0001ce3 <pick_lfn+0x4e>
c0001cd2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd8:	77 d0                	ja     c0001caa <pick_lfn+0x15>
c0001cda:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cde:	89 c5                	mov    ebp,eax
c0001ce0:	41                   	inc    ecx
c0001ce1:	eb 04                	jmp    c0001ce7 <pick_lfn+0x52>
c0001ce3:	66 40                	inc    ax
c0001ce5:	75 c3                	jne    c0001caa <pick_lfn+0x15>
c0001ce7:	47                   	inc    edi
c0001ce8:	83 ff 0d             	cmp    edi,0xd
c0001ceb:	75 d2                	jne    c0001cbf <pick_lfn+0x2a>
c0001ced:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cf0:	74 13                	je     c0001d05 <pick_lfn+0x70>
c0001cf2:	66 85 ed             	test   bp,bp
c0001cf5:	74 0e                	je     c0001d05 <pick_lfn+0x70>
c0001cf7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cfd:	77 ab                	ja     c0001caa <pick_lfn+0x15>
c0001cff:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d05:	b8 01 00 00 00       	mov    eax,0x1
c0001d0a:	5b                   	pop    ebx
c0001d0b:	5e                   	pop    esi
c0001d0c:	5f                   	pop    edi
c0001d0d:	5d                   	pop    ebp
c0001d0e:	c3                   	ret    

c0001d0f <put_lfn>:
c0001d0f:	55                   	push   ebp
c0001d10:	31 ed                	xor    ebp,ebp
c0001d12:	57                   	push   edi
c0001d13:	89 d7                	mov    edi,edx
c0001d15:	56                   	push   esi
c0001d16:	31 f6                	xor    esi,esi
c0001d18:	53                   	push   ebx
c0001d19:	83 ec 08             	sub    esp,0x8
c0001d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d23:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d26:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d2c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2f:	31 d2                	xor    edx,edx
c0001d31:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d35:	e8 cb fc ff ff       	call   c0001a05 <st_word>
c0001d3a:	0f b6 d9             	movzx  ebx,cl
c0001d3d:	4b                   	dec    ebx
c0001d3e:	6b db 0d             	imul   ebx,ebx,0xd
c0001d41:	66 83 fe ff          	cmp    si,0xffff
c0001d45:	74 08                	je     c0001d4f <put_lfn+0x40>
c0001d47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d4a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d4e:	43                   	inc    ebx
c0001d4f:	0f b6 85 40 00 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdffc0]
c0001d56:	0f b7 d6             	movzx  edx,si
c0001d59:	01 f8                	add    eax,edi
c0001d5b:	e8 a5 fc ff ff       	call   c0001a05 <st_word>
c0001d60:	66 85 f6             	test   si,si
c0001d63:	75 03                	jne    c0001d68 <put_lfn+0x59>
c0001d65:	83 ce ff             	or     esi,0xffffffff
c0001d68:	45                   	inc    ebp
c0001d69:	83 fd 0d             	cmp    ebp,0xd
c0001d6c:	75 d3                	jne    c0001d41 <put_lfn+0x32>
c0001d6e:	66 46                	inc    si
c0001d70:	74 0a                	je     c0001d7c <put_lfn+0x6d>
c0001d72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d75:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d7a:	75 09                	jne    c0001d85 <put_lfn+0x76>
c0001d7c:	88 c8                	mov    al,cl
c0001d7e:	83 c8 40             	or     eax,0x40
c0001d81:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d89:	88 07                	mov    BYTE PTR [edi],al
c0001d8b:	83 c4 08             	add    esp,0x8
c0001d8e:	5b                   	pop    ebx
c0001d8f:	5e                   	pop    esi
c0001d90:	5f                   	pop    edi
c0001d91:	5d                   	pop    ebp
c0001d92:	c3                   	ret    

c0001d93 <gen_numname>:
c0001d93:	57                   	push   edi
c0001d94:	89 cf                	mov    edi,ecx
c0001d96:	56                   	push   esi
c0001d97:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d9c:	53                   	push   ebx
c0001d9d:	89 c6                	mov    esi,eax
c0001d9f:	83 ec 10             	sub    esp,0x10
c0001da2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da6:	e8 67 fc ff ff       	call   c0001a12 <mem_cpy>
c0001dab:	83 fb 05             	cmp    ebx,0x5
c0001dae:	76 2d                	jbe    c0001ddd <gen_numname+0x4a>
c0001db0:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001db3:	66 85 c0             	test   ax,ax
c0001db6:	74 25                	je     c0001ddd <gen_numname+0x4a>
c0001db8:	83 c7 02             	add    edi,0x2
c0001dbb:	ba 10 00 00 00       	mov    edx,0x10
c0001dc0:	89 c1                	mov    ecx,eax
c0001dc2:	01 db                	add    ebx,ebx
c0001dc4:	66 d1 e8             	shr    ax,1
c0001dc7:	83 e1 01             	and    ecx,0x1
c0001dca:	01 cb                	add    ebx,ecx
c0001dcc:	0f ba e3 10          	bt     ebx,0x10
c0001dd0:	73 06                	jae    c0001dd8 <gen_numname+0x45>
c0001dd2:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd8:	4a                   	dec    edx
c0001dd9:	75 e5                	jne    c0001dc0 <gen_numname+0x2d>
c0001ddb:	eb d3                	jmp    c0001db0 <gen_numname+0x1d>
c0001ddd:	b8 07 00 00 00       	mov    eax,0x7
c0001de2:	88 d9                	mov    cl,bl
c0001de4:	83 e1 0f             	and    ecx,0xf
c0001de7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dea:	80 fa 39             	cmp    dl,0x39
c0001ded:	76 03                	jbe    c0001df2 <gen_numname+0x5f>
c0001def:	8d 51 37             	lea    edx,[ecx+0x37]
c0001df2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df9:	89 da                	mov    edx,ebx
c0001dfb:	c1 ea 04             	shr    edx,0x4
c0001dfe:	83 fb 0f             	cmp    ebx,0xf
c0001e01:	76 06                	jbe    c0001e09 <gen_numname+0x76>
c0001e03:	89 c8                	mov    eax,ecx
c0001e05:	89 d3                	mov    ebx,edx
c0001e07:	eb d9                	jmp    c0001de2 <gen_numname+0x4f>
c0001e09:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e0e:	31 d2                	xor    edx,edx
c0001e10:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e13:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e16:	39 ca                	cmp    edx,ecx
c0001e18:	73 18                	jae    c0001e32 <gen_numname+0x9f>
c0001e1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e1d:	3c 20                	cmp    al,0x20
c0001e1f:	74 11                	je     c0001e32 <gen_numname+0x9f>
c0001e21:	e8 41 fc ff ff       	call   c0001a67 <dbc_1st>
c0001e26:	85 c0                	test   eax,eax
c0001e28:	74 05                	je     c0001e2f <gen_numname+0x9c>
c0001e2a:	39 d3                	cmp    ebx,edx
c0001e2c:	74 04                	je     c0001e32 <gen_numname+0x9f>
c0001e2e:	42                   	inc    edx
c0001e2f:	42                   	inc    edx
c0001e30:	eb e1                	jmp    c0001e13 <gen_numname+0x80>
c0001e32:	b0 20                	mov    al,0x20
c0001e34:	83 f9 07             	cmp    ecx,0x7
c0001e37:	77 05                	ja     c0001e3e <gen_numname+0xab>
c0001e39:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e3d:	41                   	inc    ecx
c0001e3e:	42                   	inc    edx
c0001e3f:	83 fa 07             	cmp    edx,0x7
c0001e42:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e46:	76 ea                	jbe    c0001e32 <gen_numname+0x9f>
c0001e48:	83 c4 10             	add    esp,0x10
c0001e4b:	5b                   	pop    ebx
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    

c0001e4f <sum_sfn>:
c0001e4f:	31 c9                	xor    ecx,ecx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	d0 ca                	ror    dl,1
c0001e55:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e58:	41                   	inc    ecx
c0001e59:	83 f9 0b             	cmp    ecx,0xb
c0001e5c:	75 f5                	jne    c0001e53 <sum_sfn+0x4>
c0001e5e:	88 d0                	mov    al,dl
c0001e60:	c3                   	ret    

c0001e61 <xdir_sum>:
c0001e61:	56                   	push   esi
c0001e62:	31 c9                	xor    ecx,ecx
c0001e64:	53                   	push   ebx
c0001e65:	31 d2                	xor    edx,edx
c0001e67:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e6b:	43                   	inc    ebx
c0001e6c:	c1 e3 05             	shl    ebx,0x5
c0001e6f:	83 fa 02             	cmp    edx,0x2
c0001e72:	74 0b                	je     c0001e7f <xdir_sum+0x1e>
c0001e74:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e78:	66 d1 c9             	ror    cx,1
c0001e7b:	01 f1                	add    ecx,esi
c0001e7d:	eb 05                	jmp    c0001e84 <xdir_sum+0x23>
c0001e7f:	ba 03 00 00 00       	mov    edx,0x3
c0001e84:	42                   	inc    edx
c0001e85:	39 d3                	cmp    ebx,edx
c0001e87:	77 e6                	ja     c0001e6f <xdir_sum+0xe>
c0001e89:	5b                   	pop    ebx
c0001e8a:	89 c8                	mov    eax,ecx
c0001e8c:	5e                   	pop    esi
c0001e8d:	c3                   	ret    

c0001e8e <xsum32>:
c0001e8e:	d1 ca                	ror    edx,1
c0001e90:	0f b6 c0             	movzx  eax,al
c0001e93:	01 d0                	add    eax,edx
c0001e95:	c3                   	ret    

c0001e96 <get_xfileinfo>:
c0001e96:	55                   	push   ebp
c0001e97:	31 c9                	xor    ecx,ecx
c0001e99:	57                   	push   edi
c0001e9a:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9f:	56                   	push   esi
c0001ea0:	31 ff                	xor    edi,edi
c0001ea2:	53                   	push   ebx
c0001ea3:	89 c6                	mov    esi,eax
c0001ea5:	83 ec 0c             	sub    esp,0xc
c0001ea8:	89 d3                	mov    ebx,edx
c0001eaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eb1:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb8:	76 6d                	jbe    c0001f27 <get_xfileinfo+0x91>
c0001eba:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ec0:	76 0b                	jbe    c0001ecd <get_xfileinfo+0x37>
c0001ec2:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec6:	bf 01 00 00 00       	mov    edi,0x1
c0001ecb:	eb 63                	jmp    c0001f30 <get_xfileinfo+0x9a>
c0001ecd:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ed3:	75 03                	jne    c0001ed8 <get_xfileinfo+0x42>
c0001ed5:	83 c5 02             	add    ebp,0x2
c0001ed8:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001edb:	83 c5 02             	add    ebp,0x2
c0001ede:	e8 b0 fa ff ff       	call   c0001993 <ld_word>
c0001ee3:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee6:	66 85 c9             	test   cx,cx
c0001ee9:	75 0d                	jne    c0001ef8 <get_xfileinfo+0x62>
c0001eeb:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001ef1:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef6:	76 2b                	jbe    c0001f23 <get_xfileinfo+0x8d>
c0001ef8:	c1 e1 10             	shl    ecx,0x10
c0001efb:	ba ff 00 00 00       	mov    edx,0xff
c0001f00:	29 fa                	sub    edx,edi
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	0f b7 c0             	movzx  eax,ax
c0001f0d:	09 c8                	or     eax,ecx
c0001f0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f13:	e8 1b fc ff ff       	call   c0001b33 <put_utf>
c0001f18:	84 c0                	test   al,al
c0001f1a:	74 a6                	je     c0001ec2 <get_xfileinfo+0x2c>
c0001f1c:	0f b6 c0             	movzx  eax,al
c0001f1f:	01 c7                	add    edi,eax
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	89 c1                	mov    ecx,eax
c0001f25:	eb 8a                	jmp    c0001eb1 <get_xfileinfo+0x1b>
c0001f27:	85 ff                	test   edi,edi
c0001f29:	74 97                	je     c0001ec2 <get_xfileinfo+0x2c>
c0001f2b:	66 85 c9             	test   cx,cx
c0001f2e:	75 92                	jne    c0001ec2 <get_xfileinfo+0x2c>
c0001f30:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f35:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f39:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3c:	31 c0                	xor    eax,eax
c0001f3e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f41:	31 d2                	xor    edx,edx
c0001f43:	80 e1 10             	and    cl,0x10
c0001f46:	75 08                	jne    c0001f50 <get_xfileinfo+0xba>
c0001f48:	8d 46 38             	lea    eax,[esi+0x38]
c0001f4b:	e8 68 fa ff ff       	call   c00019b8 <ld_qword>
c0001f50:	89 03                	mov    DWORD PTR [ebx],eax
c0001f52:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f55:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f58:	e8 36 fa ff ff       	call   c0001993 <ld_word>
c0001f5d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f61:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f64:	e8 2a fa ff ff       	call   c0001993 <ld_word>
c0001f69:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f6d:	83 c4 0c             	add    esp,0xc
c0001f70:	5b                   	pop    ebx
c0001f71:	5e                   	pop    esi
c0001f72:	5f                   	pop    edi
c0001f73:	5d                   	pop    ebp
c0001f74:	c3                   	ret    

c0001f75 <get_ldnumber>:
c0001f75:	57                   	push   edi
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	83 cb ff             	or     ebx,0xffffffff
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 34                	je     c0001fb5 <get_ldnumber+0x40>
c0001f81:	89 c7                	mov    edi,eax
c0001f83:	89 d1                	mov    ecx,edx
c0001f85:	41                   	inc    ecx
c0001f86:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0001f89:	3c 1f                	cmp    al,0x1f
c0001f8b:	76 04                	jbe    c0001f91 <get_ldnumber+0x1c>
c0001f8d:	3c 3a                	cmp    al,0x3a
c0001f8f:	75 f4                	jne    c0001f85 <get_ldnumber+0x10>
c0001f91:	31 db                	xor    ebx,ebx
c0001f93:	3c 3a                	cmp    al,0x3a
c0001f95:	75 1e                	jne    c0001fb5 <get_ldnumber+0x40>
c0001f97:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f9a:	83 cb ff             	or     ebx,0xffffffff
c0001f9d:	8d 46 d0             	lea    eax,[esi-0x30]
c0001fa0:	3c 09                	cmp    al,0x9
c0001fa2:	77 11                	ja     c0001fb5 <get_ldnumber+0x40>
c0001fa4:	83 c2 02             	add    edx,0x2
c0001fa7:	39 d1                	cmp    ecx,edx
c0001fa9:	75 0a                	jne    c0001fb5 <get_ldnumber+0x40>
c0001fab:	89 f0                	mov    eax,esi
c0001fad:	89 0f                	mov    DWORD PTR [edi],ecx
c0001faf:	0f be d8             	movsx  ebx,al
c0001fb2:	83 eb 30             	sub    ebx,0x30
c0001fb5:	89 d8                	mov    eax,ebx
c0001fb7:	5b                   	pop    ebx
c0001fb8:	5e                   	pop    esi
c0001fb9:	5f                   	pop    edi
c0001fba:	c3                   	ret    

c0001fbb <crc32>:
c0001fbb:	56                   	push   esi
c0001fbc:	89 d6                	mov    esi,edx
c0001fbe:	53                   	push   ebx
c0001fbf:	b2 01                	mov    dl,0x1
c0001fc1:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc6:	89 f1                	mov    ecx,esi
c0001fc8:	84 d1                	test   cl,dl
c0001fca:	0f 95 c1             	setne  cl
c0001fcd:	0f b6 c9             	movzx  ecx,cl
c0001fd0:	31 c1                	xor    ecx,eax
c0001fd2:	89 c8                	mov    eax,ecx
c0001fd4:	d1 e8                	shr    eax,1
c0001fd6:	80 e1 01             	and    cl,0x1
c0001fd9:	74 05                	je     c0001fe0 <crc32+0x25>
c0001fdb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe0:	01 d2                	add    edx,edx
c0001fe2:	4b                   	dec    ebx
c0001fe3:	75 e1                	jne    c0001fc6 <crc32+0xb>
c0001fe5:	5b                   	pop    ebx
c0001fe6:	5e                   	pop    esi
c0001fe7:	c3                   	ret    

c0001fe8 <test_gpt_header>:
c0001fe8:	55                   	push   ebp
c0001fe9:	b9 10 00 00 00       	mov    ecx,0x10
c0001fee:	57                   	push   edi
c0001fef:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c0001ff4:	56                   	push   esi
c0001ff5:	31 ff                	xor    edi,edi
c0001ff7:	53                   	push   ebx
c0001ff8:	89 c3                	mov    ebx,eax
c0001ffa:	e8 33 fa ff ff       	call   c0001a32 <mem_cmp>
c0001fff:	85 c0                	test   eax,eax
c0002001:	75 55                	jne    c0002058 <test_gpt_header+0x70>
c0002003:	89 c7                	mov    edi,eax
c0002005:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200a:	83 ce ff             	or     esi,0xffffffff
c000200d:	31 d2                	xor    edx,edx
c000200f:	83 fd 03             	cmp    ebp,0x3
c0002012:	76 05                	jbe    c0002019 <test_gpt_header+0x31>
c0002014:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002019:	89 f0                	mov    eax,esi
c000201b:	45                   	inc    ebp
c000201c:	e8 9a ff ff ff       	call   c0001fbb <crc32>
c0002021:	83 fd 4c             	cmp    ebp,0x4c
c0002024:	89 c6                	mov    esi,eax
c0002026:	75 e5                	jne    c000200d <test_gpt_header+0x25>
c0002028:	8d 43 10             	lea    eax,[ebx+0x10]
c000202b:	e8 70 f9 ff ff       	call   c00019a0 <ld_dword>
c0002030:	f7 d6                	not    esi
c0002032:	39 c6                	cmp    esi,eax
c0002034:	75 22                	jne    c0002058 <test_gpt_header+0x70>
c0002036:	8d 43 54             	lea    eax,[ebx+0x54]
c0002039:	e8 62 f9 ff ff       	call   c00019a0 <ld_dword>
c000203e:	83 c0 80             	add    eax,0xffffff80
c0002041:	75 15                	jne    c0002058 <test_gpt_header+0x70>
c0002043:	8d 43 50             	lea    eax,[ebx+0x50]
c0002046:	e8 55 f9 ff ff       	call   c00019a0 <ld_dword>
c000204b:	3d 80 00 00 00       	cmp    eax,0x80
c0002050:	0f 96 c0             	setbe  al
c0002053:	0f b6 c0             	movzx  eax,al
c0002056:	89 c7                	mov    edi,eax
c0002058:	5b                   	pop    ebx
c0002059:	89 f8                	mov    eax,edi
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	5d                   	pop    ebp
c000205e:	c3                   	ret    

c000205f <make_rand>:
c000205f:	56                   	push   esi
c0002060:	85 c0                	test   eax,eax
c0002062:	53                   	push   ebx
c0002063:	75 05                	jne    c000206a <make_rand+0xb>
c0002065:	b8 01 00 00 00       	mov    eax,0x1
c000206a:	01 d1                	add    ecx,edx
c000206c:	bb 08 00 00 00       	mov    ebx,0x8
c0002071:	89 c6                	mov    esi,eax
c0002073:	d1 e8                	shr    eax,1
c0002075:	83 e6 01             	and    esi,0x1
c0002078:	85 f6                	test   esi,esi
c000207a:	74 05                	je     c0002081 <make_rand+0x22>
c000207c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002081:	4b                   	dec    ebx
c0002082:	75 ed                	jne    c0002071 <make_rand+0x12>
c0002084:	42                   	inc    edx
c0002085:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002088:	39 ca                	cmp    edx,ecx
c000208a:	75 e0                	jne    c000206c <make_rand+0xd>
c000208c:	5b                   	pop    ebx
c000208d:	5e                   	pop    esi
c000208e:	c3                   	ret    

c000208f <validate>:
c000208f:	56                   	push   esi
c0002090:	89 d6                	mov    esi,edx
c0002092:	53                   	push   ebx
c0002093:	85 c0                	test   eax,eax
c0002095:	51                   	push   ecx
c0002096:	75 09                	jne    c00020a1 <validate+0x12>
c0002098:	b8 09 00 00 00       	mov    eax,0x9
c000209d:	31 c9                	xor    ecx,ecx
c000209f:	eb 2f                	jmp    c00020d0 <validate+0x41>
c00020a1:	89 c3                	mov    ebx,eax
c00020a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a5:	85 c0                	test   eax,eax
c00020a7:	74 ef                	je     c0002098 <validate+0x9>
c00020a9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ac:	74 ea                	je     c0002098 <validate+0x9>
c00020ae:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b2:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b6:	75 e0                	jne    c0002098 <validate+0x9>
c00020b8:	83 ec 0c             	sub    esp,0xc
c00020bb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020bf:	50                   	push   eax
c00020c0:	e8 7d f8 ff ff       	call   c0001942 <disk_status>
c00020c5:	83 c4 10             	add    esp,0x10
c00020c8:	a8 01                	test   al,0x1
c00020ca:	75 cc                	jne    c0002098 <validate+0x9>
c00020cc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020ce:	31 c0                	xor    eax,eax
c00020d0:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d2:	5a                   	pop    edx
c00020d3:	5b                   	pop    ebx
c00020d4:	5e                   	pop    esi
c00020d5:	c3                   	ret    

c00020d6 <sync_window>:
c00020d6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020da:	0f 84 85 00 00 00    	je     c0002165 <sync_window+0x8f>
c00020e0:	55                   	push   ebp
c00020e1:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e4:	57                   	push   edi
c00020e5:	56                   	push   esi
c00020e6:	53                   	push   ebx
c00020e7:	89 c3                	mov    ebx,eax
c00020e9:	83 ec 28             	sub    esp,0x28
c00020ec:	6a 01                	push   0x1
c00020ee:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f4:	55                   	push   ebp
c00020f5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020f9:	50                   	push   eax
c00020fa:	e8 5f f8 ff ff       	call   c000195e <disk_write>
c00020ff:	83 c4 20             	add    esp,0x20
c0002102:	ba 01 00 00 00       	mov    edx,0x1
c0002107:	85 c0                	test   eax,eax
c0002109:	75 50                	jne    c000215b <sync_window+0x85>
c000210b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000210e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002111:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002115:	89 c6                	mov    esi,eax
c0002117:	31 ff                	xor    edi,edi
c0002119:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000211c:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000211f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002123:	89 d7                	mov    edi,edx
c0002125:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002129:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002130:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002134:	73 23                	jae    c0002159 <sync_window+0x83>
c0002136:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213a:	75 1d                	jne    c0002159 <sync_window+0x83>
c000213c:	83 ec 0c             	sub    esp,0xc
c000213f:	6a 01                	push   0x1
c0002141:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002145:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002149:	52                   	push   edx
c000214a:	50                   	push   eax
c000214b:	55                   	push   ebp
c000214c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002150:	50                   	push   eax
c0002151:	e8 08 f8 ff ff       	call   c000195e <disk_write>
c0002156:	83 c4 20             	add    esp,0x20
c0002159:	31 d2                	xor    edx,edx
c000215b:	83 c4 1c             	add    esp,0x1c
c000215e:	89 d0                	mov    eax,edx
c0002160:	5b                   	pop    ebx
c0002161:	5e                   	pop    esi
c0002162:	5f                   	pop    edi
c0002163:	5d                   	pop    ebp
c0002164:	c3                   	ret    
c0002165:	31 d2                	xor    edx,edx
c0002167:	89 d0                	mov    eax,edx
c0002169:	c3                   	ret    

c000216a <move_window>:
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 14             	sub    esp,0x14
c0002171:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002174:	75 07                	jne    c000217d <move_window+0x13>
c0002176:	31 f6                	xor    esi,esi
c0002178:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217b:	74 59                	je     c00021d6 <move_window+0x6c>
c000217d:	89 d8                	mov    eax,ebx
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	e8 4a ff ff ff       	call   c00020d6 <sync_window>
c000218c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002190:	89 c6                	mov    esi,eax
c0002192:	85 c0                	test   eax,eax
c0002194:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002198:	75 3c                	jne    c00021d6 <move_window+0x6c>
c000219a:	83 ec 0c             	sub    esp,0xc
c000219d:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a0:	6a 01                	push   0x1
c00021a2:	51                   	push   ecx
c00021a3:	52                   	push   edx
c00021a4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021a8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ac:	50                   	push   eax
c00021ad:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b1:	50                   	push   eax
c00021b2:	e8 91 f7 ff ff       	call   c0001948 <disk_read>
c00021b7:	83 c4 20             	add    esp,0x20
c00021ba:	85 c0                	test   eax,eax
c00021bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c4:	74 0a                	je     c00021d0 <move_window+0x66>
c00021c6:	83 ca ff             	or     edx,0xffffffff
c00021c9:	be 01 00 00 00       	mov    esi,0x1
c00021ce:	89 d1                	mov    ecx,edx
c00021d0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d6:	83 c4 14             	add    esp,0x14
c00021d9:	89 f0                	mov    eax,esi
c00021db:	5b                   	pop    ebx
c00021dc:	5e                   	pop    esi
c00021dd:	c3                   	ret    

c00021de <check_fs>:
c00021de:	53                   	push   ebx
c00021df:	89 c3                	mov    ebx,eax
c00021e1:	83 ec 08             	sub    esp,0x8
c00021e4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021e8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021ef:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f6:	e8 6f ff ff ff       	call   c000216a <move_window>
c00021fb:	ba 04 00 00 00       	mov    edx,0x4
c0002200:	85 c0                	test   eax,eax
c0002202:	0f 85 89 00 00 00    	jne    c0002291 <check_fs+0xb3>
c0002208:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000220e:	e8 80 f7 ff ff       	call   c0001993 <ld_word>
c0002213:	ba 03 00 00 00       	mov    edx,0x3
c0002218:	66 3d 55 aa          	cmp    ax,0xaa55
c000221c:	75 73                	jne    c0002291 <check_fs+0xb3>
c000221e:	ba 60 00 02 c0       	mov    edx,0xc0020060
c0002223:	8d 43 54             	lea    eax,[ebx+0x54]
c0002226:	b9 0b 00 00 00       	mov    ecx,0xb
c000222b:	e8 02 f8 ff ff       	call   c0001a32 <mem_cmp>
c0002230:	ba 01 00 00 00       	mov    edx,0x1
c0002235:	85 c0                	test   eax,eax
c0002237:	74 58                	je     c0002291 <check_fs+0xb3>
c0002239:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223c:	8d 50 18             	lea    edx,[eax+0x18]
c000223f:	80 fa 01             	cmp    dl,0x1
c0002242:	76 09                	jbe    c000224d <check_fs+0x6f>
c0002244:	ba 02 00 00 00       	mov    edx,0x2
c0002249:	3c eb                	cmp    al,0xeb
c000224b:	75 44                	jne    c0002291 <check_fs+0xb3>
c000224d:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0002252:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002258:	b9 03 00 00 00       	mov    ecx,0x3
c000225d:	e8 d0 f7 ff ff       	call   c0001a32 <mem_cmp>
c0002262:	31 d2                	xor    edx,edx
c0002264:	85 c0                	test   eax,eax
c0002266:	74 29                	je     c0002291 <check_fs+0xb3>
c0002268:	ba 6c 00 02 c0       	mov    edx,0xc002006c
c000226d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002273:	b9 05 00 00 00       	mov    ecx,0x5
c0002278:	e8 b5 f7 ff ff       	call   c0001a32 <mem_cmp>
c000227d:	31 d2                	xor    edx,edx
c000227f:	85 c0                	test   eax,eax
c0002281:	74 0e                	je     c0002291 <check_fs+0xb3>
c0002283:	31 d2                	xor    edx,edx
c0002285:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228c:	0f 95 c2             	setne  dl
c000228f:	01 d2                	add    edx,edx
c0002291:	83 c4 08             	add    esp,0x8
c0002294:	89 d0                	mov    eax,edx
c0002296:	5b                   	pop    ebx
c0002297:	c3                   	ret    

c0002298 <find_volume>:
c0002298:	55                   	push   ebp
c0002299:	31 c9                	xor    ecx,ecx
c000229b:	57                   	push   edi
c000229c:	56                   	push   esi
c000229d:	89 d6                	mov    esi,edx
c000229f:	53                   	push   ebx
c00022a0:	31 d2                	xor    edx,edx
c00022a2:	83 ec 3c             	sub    esp,0x3c
c00022a5:	89 c3                	mov    ebx,eax
c00022a7:	e8 32 ff ff ff       	call   c00021de <check_fs>
c00022ac:	83 f8 02             	cmp    eax,0x2
c00022af:	74 0e                	je     c00022bf <find_volume+0x27>
c00022b1:	0f 87 56 01 00 00    	ja     c000240d <find_volume+0x175>
c00022b7:	85 f6                	test   esi,esi
c00022b9:	0f 84 4e 01 00 00    	je     c000240d <find_volume+0x175>
c00022bf:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c6:	0f 85 df 00 00 00    	jne    c00023ab <find_volume+0x113>
c00022cc:	31 c9                	xor    ecx,ecx
c00022ce:	ba 01 00 00 00       	mov    edx,0x1
c00022d3:	89 d8                	mov    eax,ebx
c00022d5:	e8 90 fe ff ff       	call   c000216a <move_window>
c00022da:	85 c0                	test   eax,eax
c00022dc:	74 0a                	je     c00022e8 <find_volume+0x50>
c00022de:	b8 04 00 00 00       	mov    eax,0x4
c00022e3:	e9 25 01 00 00       	jmp    c000240d <find_volume+0x175>
c00022e8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022eb:	89 e8                	mov    eax,ebp
c00022ed:	e8 f6 fc ff ff       	call   c0001fe8 <test_gpt_header>
c00022f2:	85 c0                	test   eax,eax
c00022f4:	75 0a                	jne    c0002300 <find_volume+0x68>
c00022f6:	b8 03 00 00 00       	mov    eax,0x3
c00022fb:	e9 0d 01 00 00       	jmp    c000240d <find_volume+0x175>
c0002300:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002306:	e8 95 f6 ff ff       	call   c00019a0 <ld_dword>
c000230b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000230f:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002315:	e8 9e f6 ff ff       	call   c00019b8 <ld_qword>
c000231a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002326:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002332:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002336:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233a:	74 ba                	je     c00022f6 <find_volume+0x5e>
c000233c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002340:	31 c9                	xor    ecx,ecx
c0002342:	c1 e7 07             	shl    edi,0x7
c0002345:	89 d8                	mov    eax,ebx
c0002347:	89 fa                	mov    edx,edi
c0002349:	c1 ea 09             	shr    edx,0x9
c000234c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002350:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002354:	e8 11 fe ff ff       	call   c000216a <move_window>
c0002359:	85 c0                	test   eax,eax
c000235b:	75 81                	jne    c00022de <find_volume+0x46>
c000235d:	81 e7 80 01 00 00    	and    edi,0x180
c0002363:	b9 10 00 00 00       	mov    ecx,0x10
c0002368:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000236d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002371:	e8 bc f6 ff ff       	call   c0001a32 <mem_cmp>
c0002376:	85 c0                	test   eax,eax
c0002378:	75 2b                	jne    c00023a5 <find_volume+0x10d>
c000237a:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000237e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002382:	e8 31 f6 ff ff       	call   c00019b8 <ld_qword>
c0002387:	89 d1                	mov    ecx,edx
c0002389:	89 c2                	mov    edx,eax
c000238b:	89 d8                	mov    eax,ebx
c000238d:	e8 4c fe ff ff       	call   c00021de <check_fs>
c0002392:	85 f6                	test   esi,esi
c0002394:	75 05                	jne    c000239b <find_volume+0x103>
c0002396:	83 f8 01             	cmp    eax,0x1
c0002399:	76 72                	jbe    c000240d <find_volume+0x175>
c000239b:	85 f6                	test   esi,esi
c000239d:	74 06                	je     c00023a5 <find_volume+0x10d>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 68                	je     c000240d <find_volume+0x175>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 87                	jmp    c0002332 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 f8                	mov    eax,edi
c00023c3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c7:	e8 d4 f5 ff ff       	call   c00019a0 <ld_dword>
c00023cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d0:	83 c7 10             	add    edi,0x10
c00023d3:	83 c1 04             	add    ecx,0x4
c00023d6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00023d9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dd:	75 e2                	jne    c00023c1 <find_volume+0x129>
c00023df:	31 ff                	xor    edi,edi
c00023e1:	85 f6                	test   esi,esi
c00023e3:	74 03                	je     c00023e8 <find_volume+0x150>
c00023e5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023ec:	b8 03 00 00 00       	mov    eax,0x3
c00023f1:	85 d2                	test   edx,edx
c00023f3:	74 09                	je     c00023fe <find_volume+0x166>
c00023f5:	31 c9                	xor    ecx,ecx
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	e8 e0 fd ff ff       	call   c00021de <check_fs>
c00023fe:	85 f6                	test   esi,esi
c0002400:	75 0b                	jne    c000240d <find_volume+0x175>
c0002402:	83 f8 01             	cmp    eax,0x1
c0002405:	76 06                	jbe    c000240d <find_volume+0x175>
c0002407:	47                   	inc    edi
c0002408:	83 ff 03             	cmp    edi,0x3
c000240b:	76 db                	jbe    c00023e8 <find_volume+0x150>
c000240d:	83 c4 3c             	add    esp,0x3c
c0002410:	5b                   	pop    ebx
c0002411:	5e                   	pop    esi
c0002412:	5f                   	pop    edi
c0002413:	5d                   	pop    ebp
c0002414:	c3                   	ret    

c0002415 <mount_volume>:
c0002415:	55                   	push   ebp
c0002416:	57                   	push   edi
c0002417:	89 cf                	mov    edi,ecx
c0002419:	56                   	push   esi
c000241a:	53                   	push   ebx
c000241b:	bb 0b 00 00 00       	mov    ebx,0xb
c0002420:	83 ec 3c             	sub    esp,0x3c
c0002423:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002429:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000242d:	e8 43 fb ff ff       	call   c0001f75 <get_ldnumber>
c0002432:	85 c0                	test   eax,eax
c0002434:	0f 88 3b 05 00 00    	js     c0002975 <mount_volume+0x560>
c000243a:	8b 2c 85 20 42 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbde0]
c0002441:	89 c6                	mov    esi,eax
c0002443:	bb 0c 00 00 00       	mov    ebx,0xc
c0002448:	85 ed                	test   ebp,ebp
c000244a:	0f 84 25 05 00 00    	je     c0002975 <mount_volume+0x560>
c0002450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002454:	83 e7 fe             	and    edi,0xfffffffe
c0002457:	89 2a                	mov    DWORD PTR [edx],ebp
c0002459:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000245d:	74 32                	je     c0002491 <mount_volume+0x7c>
c000245f:	83 ec 0c             	sub    esp,0xc
c0002462:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002466:	50                   	push   eax
c0002467:	e8 d6 f4 ff ff       	call   c0001942 <disk_status>
c000246c:	83 c4 10             	add    esp,0x10
c000246f:	a8 01                	test   al,0x1
c0002471:	75 1e                	jne    c0002491 <mount_volume+0x7c>
c0002473:	89 f9                	mov    ecx,edi
c0002475:	31 db                	xor    ebx,ebx
c0002477:	84 c9                	test   cl,cl
c0002479:	0f 84 f6 04 00 00    	je     c0002975 <mount_volume+0x560>
c000247f:	a8 04                	test   al,0x4
c0002481:	0f 84 ee 04 00 00    	je     c0002975 <mount_volume+0x560>
c0002487:	bb 0a 00 00 00       	mov    ebx,0xa
c000248c:	e9 e4 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c0002491:	83 ec 0c             	sub    esp,0xc
c0002494:	89 f0                	mov    eax,esi
c0002496:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000249a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000249d:	0f b6 f0             	movzx  esi,al
c00024a0:	56                   	push   esi
c00024a1:	e8 9f f4 ff ff       	call   c0001945 <disk_initialize>
c00024a6:	bb 03 00 00 00       	mov    ebx,0x3
c00024ab:	83 c4 10             	add    esp,0x10
c00024ae:	a8 01                	test   al,0x1
c00024b0:	0f 85 bf 04 00 00    	jne    c0002975 <mount_volume+0x560>
c00024b6:	89 f9                	mov    ecx,edi
c00024b8:	84 c9                	test   cl,cl
c00024ba:	74 04                	je     c00024c0 <mount_volume+0xab>
c00024bc:	a8 04                	test   al,0x4
c00024be:	75 c7                	jne    c0002487 <mount_volume+0x72>
c00024c0:	31 d2                	xor    edx,edx
c00024c2:	89 e8                	mov    eax,ebp
c00024c4:	e8 cf fd ff ff       	call   c0002298 <find_volume>
c00024c9:	83 f8 04             	cmp    eax,0x4
c00024cc:	75 0a                	jne    c00024d8 <mount_volume+0xc3>
c00024ce:	bb 01 00 00 00       	mov    ebx,0x1
c00024d3:	e9 9d 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c00024d8:	83 f8 01             	cmp    eax,0x1
c00024db:	76 0a                	jbe    c00024e7 <mount_volume+0xd2>
c00024dd:	bb 0d 00 00 00       	mov    ebx,0xd
c00024e2:	e9 8e 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c00024e7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024ea:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024f5:	75 17                	jne    c000250e <mount_volume+0xf9>
c00024f7:	b8 0b 00 00 00       	mov    eax,0xb
c00024fc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002501:	75 da                	jne    c00024dd <mount_volume+0xc8>
c0002503:	40                   	inc    eax
c0002504:	83 f8 40             	cmp    eax,0x40
c0002507:	75 f3                	jne    c00024fc <mount_volume+0xe7>
c0002509:	e9 5a 02 00 00       	jmp    c0002768 <mount_volume+0x353>
c000250e:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002511:	e8 7d f4 ff ff       	call   c0001993 <ld_word>
c0002516:	66 3d 00 02          	cmp    ax,0x200
c000251a:	75 c1                	jne    c00024dd <mount_volume+0xc8>
c000251c:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000251f:	e8 6f f4 ff ff       	call   c0001993 <ld_word>
c0002524:	0f b7 c0             	movzx  eax,ax
c0002527:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000252b:	85 c0                	test   eax,eax
c000252d:	75 0c                	jne    c000253b <mount_volume+0x126>
c000252f:	8d 45 78             	lea    eax,[ebp+0x78]
c0002532:	e8 69 f4 ff ff       	call   c00019a0 <ld_dword>
c0002537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000253f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002542:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002545:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002549:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000254c:	48                   	dec    eax
c000254d:	3c 01                	cmp    al,0x1
c000254f:	77 8c                	ja     c00024dd <mount_volume+0xc8>
c0002551:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002555:	89 c3                	mov    ebx,eax
c0002557:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000255b:	66 85 c0             	test   ax,ax
c000255e:	0f 84 79 ff ff ff    	je     c00024dd <mount_volume+0xc8>
c0002564:	8d 40 ff             	lea    eax,[eax-0x1]
c0002567:	85 d8                	test   eax,ebx
c0002569:	0f 85 6e ff ff ff    	jne    c00024dd <mount_volume+0xc8>
c000256f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002572:	e8 1c f4 ff ff       	call   c0001993 <ld_word>
c0002577:	89 c7                	mov    edi,eax
c0002579:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000257d:	a8 0f                	test   al,0xf
c000257f:	0f 85 58 ff ff ff    	jne    c00024dd <mount_volume+0xc8>
c0002585:	8d 45 67             	lea    eax,[ebp+0x67]
c0002588:	e8 06 f4 ff ff       	call   c0001993 <ld_word>
c000258d:	0f b7 f0             	movzx  esi,ax
c0002590:	85 f6                	test   esi,esi
c0002592:	75 0a                	jne    c000259e <mount_volume+0x189>
c0002594:	8d 45 74             	lea    eax,[ebp+0x74]
c0002597:	e8 04 f4 ff ff       	call   c00019a0 <ld_dword>
c000259c:	89 c6                	mov    esi,eax
c000259e:	8d 45 62             	lea    eax,[ebp+0x62]
c00025a1:	e8 ed f3 ff ff       	call   c0001993 <ld_word>
c00025a6:	66 85 c0             	test   ax,ax
c00025a9:	0f 84 2e ff ff ff    	je     c00024dd <mount_volume+0xc8>
c00025af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025b4:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025bd:	89 fa                	mov    edx,edi
c00025bf:	66 c1 ea 04          	shr    dx,0x4
c00025c3:	0f b7 d2             	movzx  edx,dx
c00025c6:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025ca:	0f b7 c8             	movzx  ecx,ax
c00025cd:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025d4:	39 c6                	cmp    esi,eax
c00025d6:	0f 82 01 ff ff ff    	jb     c00024dd <mount_volume+0xc8>
c00025dc:	29 c6                	sub    esi,eax
c00025de:	31 d2                	xor    edx,edx
c00025e0:	89 f0                	mov    eax,esi
c00025e2:	f7 f3                	div    ebx
c00025e4:	39 de                	cmp    esi,ebx
c00025e6:	0f 82 f1 fe ff ff    	jb     c00024dd <mount_volume+0xc8>
c00025ec:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025f1:	0f 87 e6 fe ff ff    	ja     c00024dd <mount_volume+0xc8>
c00025f7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025fc:	0f 86 63 03 00 00    	jbe    c0002965 <mount_volume+0x550>
c0002602:	bb 03 00 00 00       	mov    ebx,0x3
c0002607:	8d 70 02             	lea    esi,[eax+0x2]
c000260a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002612:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002615:	89 c8                	mov    eax,ecx
c0002617:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261a:	31 d2                	xor    edx,edx
c000261c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002620:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002624:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002628:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000262f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002633:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002636:	31 d2                	xor    edx,edx
c0002638:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000263c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002640:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002643:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002646:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002649:	83 fb 03             	cmp    ebx,0x3
c000264c:	75 2b                	jne    c0002679 <mount_volume+0x264>
c000264e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002651:	e8 3d f3 ff ff       	call   c0001993 <ld_word>
c0002656:	66 09 c7             	or     di,ax
c0002659:	0f 85 7e fe ff ff    	jne    c00024dd <mount_volume+0xc8>
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002668:	e8 33 f3 ff ff       	call   c00019a0 <ld_dword>
c000266d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002674:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002677:	eb 30                	jmp    c00026a9 <mount_volume+0x294>
c0002679:	66 85 ff             	test   di,di
c000267c:	0f 84 5b fe ff ff    	je     c00024dd <mount_volume+0xc8>
c0002682:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002686:	31 d2                	xor    edx,edx
c0002688:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000268c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002690:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002693:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002696:	83 fb 02             	cmp    ebx,0x2
c0002699:	75 04                	jne    c000269f <mount_volume+0x28a>
c000269b:	01 f6                	add    esi,esi
c000269d:	eb 0a                	jmp    c00026a9 <mount_volume+0x294>
c000269f:	8d 04 76             	lea    eax,[esi+esi*2]
c00026a2:	83 e6 01             	and    esi,0x1
c00026a5:	d1 e8                	shr    eax,1
c00026a7:	01 c6                	add    esi,eax
c00026a9:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026af:	c1 ee 09             	shr    esi,0x9
c00026b2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b6:	0f 87 21 fe ff ff    	ja     c00024dd <mount_volume+0xc8>
c00026bc:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026c3:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026ca:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026ce:	83 fb 03             	cmp    ebx,0x3
c00026d1:	75 7a                	jne    c000274d <mount_volume+0x338>
c00026d3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d9:	e8 b5 f2 ff ff       	call   c0001993 <ld_word>
c00026de:	66 48                	dec    ax
c00026e0:	75 6b                	jne    c000274d <mount_volume+0x338>
c00026e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026ea:	83 c2 01             	add    edx,0x1
c00026ed:	89 e8                	mov    eax,ebp
c00026ef:	83 d1 00             	adc    ecx,0x0
c00026f2:	e8 73 fa ff ff       	call   c000216a <move_window>
c00026f7:	85 c0                	test   eax,eax
c00026f9:	75 52                	jne    c000274d <mount_volume+0x338>
c00026fb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026ff:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002705:	e8 89 f2 ff ff       	call   c0001993 <ld_word>
c000270a:	66 3d 55 aa          	cmp    ax,0xaa55
c000270e:	75 3d                	jne    c000274d <mount_volume+0x338>
c0002710:	8d 45 54             	lea    eax,[ebp+0x54]
c0002713:	e8 88 f2 ff ff       	call   c00019a0 <ld_dword>
c0002718:	3d 52 52 61 41       	cmp    eax,0x41615252
c000271d:	75 2e                	jne    c000274d <mount_volume+0x338>
c000271f:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002725:	e8 76 f2 ff ff       	call   c00019a0 <ld_dword>
c000272a:	3d 72 72 41 61       	cmp    eax,0x61417272
c000272f:	75 1c                	jne    c000274d <mount_volume+0x338>
c0002731:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002737:	e8 64 f2 ff ff       	call   c00019a0 <ld_dword>
c000273c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000273f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002745:	e8 56 f2 ff ff       	call   c00019a0 <ld_dword>
c000274a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000274d:	66 a1 00 42 02 c0    	mov    ax,ds:0xc0024200
c0002753:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002756:	40                   	inc    eax
c0002757:	31 db                	xor    ebx,ebx
c0002759:	66 a3 00 42 02 c0    	mov    ds:0xc0024200,ax
c000275f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002763:	e9 0d 02 00 00       	jmp    c0002975 <mount_volume+0x560>
c0002768:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000276e:	e8 20 f2 ff ff       	call   c0001993 <ld_word>
c0002773:	66 3d 00 01          	cmp    ax,0x100
c0002777:	0f 85 60 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c000277d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002784:	0f 85 53 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c000278a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002790:	e8 23 f2 ff ff       	call   c00019b8 <ld_qword>
c0002795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002799:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a3:	e8 f8 f1 ff ff       	call   c00019a0 <ld_dword>
c00027a8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027ab:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027b1:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027b4:	fe c8                	dec    al
c00027b6:	0f 85 21 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c00027bc:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027c3:	bb 01 00 00 00       	mov    ebx,0x1
c00027c8:	d3 e3                	shl    ebx,cl
c00027ca:	66 85 db             	test   bx,bx
c00027cd:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d1:	0f 84 06 fd ff ff    	je     c00024dd <mount_volume+0xc8>
c00027d7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027dd:	e8 be f1 ff ff       	call   c00019a0 <ld_dword>
c00027e2:	89 c6                	mov    esi,eax
c00027e4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e9:	0f 87 ee fc ff ff    	ja     c00024dd <mount_volume+0xc8>
c00027ef:	8d 40 02             	lea    eax,[eax+0x2]
c00027f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002800:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002803:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002809:	e8 92 f1 ff ff       	call   c00019a0 <ld_dword>
c000280e:	31 d2                	xor    edx,edx
c0002810:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002814:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002818:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002822:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000282c:	e8 6f f1 ff ff       	call   c00019a0 <ld_dword>
c0002831:	31 d2                	xor    edx,edx
c0002833:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002837:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000283b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000283f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002842:	0f b7 c3             	movzx  eax,bx
c0002845:	0f af f0             	imul   esi,eax
c0002848:	89 f0                	mov    eax,esi
c000284a:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284d:	31 d2                	xor    edx,edx
c000284f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002853:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002857:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000285b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002863:	39 c1                	cmp    ecx,eax
c0002865:	89 df                	mov    edi,ebx
c0002867:	19 d7                	sbb    edi,edx
c0002869:	0f 82 6e fc ff ff    	jb     c00024dd <mount_volume+0xc8>
c000286f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002875:	31 db                	xor    ebx,ebx
c0002877:	e8 24 f1 ff ff       	call   c00019a0 <ld_dword>
c000287c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002883:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002886:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000288e:	85 db                	test   ebx,ebx
c0002890:	75 39                	jne    c00028cb <mount_volume+0x4b6>
c0002892:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002896:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000289a:	0f 86 3d fc ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028a0:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028a3:	89 e8                	mov    eax,ebp
c00028a5:	e8 82 f3 ff ff       	call   c0001c2c <clst2sect>
c00028aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ae:	31 ff                	xor    edi,edi
c00028b0:	01 c6                	add    esi,eax
c00028b2:	11 d7                	adc    edi,edx
c00028b4:	89 e8                	mov    eax,ebp
c00028b6:	89 f2                	mov    edx,esi
c00028b8:	89 f9                	mov    ecx,edi
c00028ba:	e8 ab f8 ff ff       	call   c000216a <move_window>
c00028bf:	85 c0                	test   eax,eax
c00028c1:	0f 85 07 fc ff ff    	jne    c00024ce <mount_volume+0xb9>
c00028c7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028cb:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d0:	74 0b                	je     c00028dd <mount_volume+0x4c8>
c00028d2:	83 c3 20             	add    ebx,0x20
c00028d5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028db:	eb b1                	jmp    c000288e <mount_volume+0x479>
c00028dd:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028e4:	e8 b7 f0 ff ff       	call   c00019a0 <ld_dword>
c00028e9:	89 c3                	mov    ebx,eax
c00028eb:	83 f8 01             	cmp    eax,0x1
c00028ee:	0f 86 e9 fb ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028f4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f7:	0f 86 e0 fb ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028fd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002901:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002904:	0f af c2             	imul   eax,edx
c0002907:	31 d2                	xor    edx,edx
c0002909:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000290c:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000290f:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002912:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002915:	89 da                	mov    edx,ebx
c0002917:	31 c9                	xor    ecx,ecx
c0002919:	c1 ea 07             	shr    edx,0x7
c000291c:	89 e8                	mov    eax,ebp
c000291e:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002921:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002924:	e8 41 f8 ff ff       	call   c000216a <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	0f 85 9d fb ff ff    	jne    c00024ce <mount_volume+0xb9>
c0002931:	89 d8                	mov    eax,ebx
c0002933:	83 e0 7f             	and    eax,0x7f
c0002936:	8d 04 86             	lea    eax,[esi+eax*4]
c0002939:	e8 62 f0 ff ff       	call   c00019a0 <ld_dword>
c000293e:	83 f8 ff             	cmp    eax,0xffffffff
c0002941:	74 0a                	je     c000294d <mount_volume+0x538>
c0002943:	43                   	inc    ebx
c0002944:	39 d8                	cmp    eax,ebx
c0002946:	74 cd                	je     c0002915 <mount_volume+0x500>
c0002948:	e9 90 fb ff ff       	jmp    c00024dd <mount_volume+0xc8>
c000294d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002954:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000295b:	bb 04 00 00 00       	mov    ebx,0x4
c0002960:	e9 e8 fd ff ff       	jmp    c000274d <mount_volume+0x338>
c0002965:	31 db                	xor    ebx,ebx
c0002967:	3d f5 0f 00 00       	cmp    eax,0xff5
c000296c:	0f 97 c3             	seta   bl
c000296f:	43                   	inc    ebx
c0002970:	e9 92 fc ff ff       	jmp    c0002607 <mount_volume+0x1f2>
c0002975:	83 c4 3c             	add    esp,0x3c
c0002978:	89 d8                	mov    eax,ebx
c000297a:	5b                   	pop    ebx
c000297b:	5e                   	pop    esi
c000297c:	5f                   	pop    edi
c000297d:	5d                   	pop    ebp
c000297e:	c3                   	ret    

c000297f <find_bitmap>:
c000297f:	55                   	push   ebp
c0002980:	57                   	push   edi
c0002981:	89 c7                	mov    edi,eax
c0002983:	56                   	push   esi
c0002984:	8d 72 fe             	lea    esi,[edx-0x2]
c0002987:	53                   	push   ebx
c0002988:	83 ec 1c             	sub    esp,0x1c
c000298b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000298e:	83 e8 02             	sub    eax,0x2
c0002991:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002995:	39 f0                	cmp    eax,esi
c0002997:	77 02                	ja     c000299b <find_bitmap+0x1c>
c0002999:	31 f6                	xor    esi,esi
c000299b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000299f:	89 f3                	mov    ebx,esi
c00029a1:	31 ed                	xor    ebp,ebp
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	31 c9                	xor    ecx,ecx
c00029a7:	c1 ea 0c             	shr    edx,0xc
c00029aa:	89 f8                	mov    eax,edi
c00029ac:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029af:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029b2:	e8 b3 f7 ff ff       	call   c000216a <move_window>
c00029b7:	85 c0                	test   eax,eax
c00029b9:	75 68                	jne    c0002a23 <find_bitmap+0xa4>
c00029bb:	89 d9                	mov    ecx,ebx
c00029bd:	b8 01 00 00 00       	mov    eax,0x1
c00029c2:	83 e1 07             	and    ecx,0x7
c00029c5:	89 da                	mov    edx,ebx
c00029c7:	d3 e0                	shl    eax,cl
c00029c9:	c1 ea 03             	shr    edx,0x3
c00029cc:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029cf:	83 e9 02             	sub    ecx,0x2
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029dc:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e0:	43                   	inc    ebx
c00029e1:	21 c1                	and    ecx,eax
c00029e3:	01 c0                	add    eax,eax
c00029e5:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e9:	77 09                	ja     c00029f4 <find_bitmap+0x75>
c00029eb:	31 db                	xor    ebx,ebx
c00029ed:	ba 00 02 00 00       	mov    edx,0x200
c00029f2:	31 c0                	xor    eax,eax
c00029f4:	84 c9                	test   cl,cl
c00029f6:	75 10                	jne    c0002a08 <find_bitmap+0x89>
c00029f8:	45                   	inc    ebp
c00029f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029fd:	75 0f                	jne    c0002a0e <find_bitmap+0x8f>
c00029ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a03:	83 c0 02             	add    eax,0x2
c0002a06:	eb 22                	jmp    c0002a2a <find_bitmap+0xab>
c0002a08:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a0c:	31 ed                	xor    ebp,ebp
c0002a0e:	39 de                	cmp    esi,ebx
c0002a10:	74 16                	je     c0002a28 <find_bitmap+0xa9>
c0002a12:	84 c0                	test   al,al
c0002a14:	75 c6                	jne    c00029dc <find_bitmap+0x5d>
c0002a16:	42                   	inc    edx
c0002a17:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a1d:	77 84                	ja     c00029a3 <find_bitmap+0x24>
c0002a1f:	b0 01                	mov    al,0x1
c0002a21:	eb b9                	jmp    c00029dc <find_bitmap+0x5d>
c0002a23:	83 c8 ff             	or     eax,0xffffffff
c0002a26:	eb 02                	jmp    c0002a2a <find_bitmap+0xab>
c0002a28:	31 c0                	xor    eax,eax
c0002a2a:	83 c4 1c             	add    esp,0x1c
c0002a2d:	5b                   	pop    ebx
c0002a2e:	5e                   	pop    esi
c0002a2f:	5f                   	pop    edi
c0002a30:	5d                   	pop    ebp
c0002a31:	c3                   	ret    

c0002a32 <change_bitmap>:
c0002a32:	55                   	push   ebp
c0002a33:	89 cd                	mov    ebp,ecx
c0002a35:	57                   	push   edi
c0002a36:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a39:	56                   	push   esi
c0002a3a:	89 c7                	mov    edi,eax
c0002a3c:	53                   	push   ebx
c0002a3d:	89 c8                	mov    eax,ecx
c0002a3f:	83 ec 1c             	sub    esp,0x1c
c0002a42:	31 d2                	xor    edx,edx
c0002a44:	c1 e8 0c             	shr    eax,0xc
c0002a47:	89 ce                	mov    esi,ecx
c0002a49:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4c:	bb 01 00 00 00       	mov    ebx,0x1
c0002a51:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a54:	83 e1 07             	and    ecx,0x7
c0002a57:	c1 ee 03             	shr    esi,0x3
c0002a5a:	d3 e3                	shl    ebx,cl
c0002a5c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a62:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a66:	89 c1                	mov    ecx,eax
c0002a68:	89 d3                	mov    ebx,edx
c0002a6a:	83 c1 01             	add    ecx,0x1
c0002a6d:	83 d3 00             	adc    ebx,0x0
c0002a70:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a74:	89 d1                	mov    ecx,edx
c0002a76:	89 c2                	mov    edx,eax
c0002a78:	89 f8                	mov    eax,edi
c0002a7a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a7e:	e8 e7 f6 ff ff       	call   c000216a <move_window>
c0002a83:	89 c1                	mov    ecx,eax
c0002a85:	85 c0                	test   eax,eax
c0002a87:	75 48                	jne    c0002ad1 <change_bitmap+0x9f>
c0002a89:	31 d2                	xor    edx,edx
c0002a8b:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a8f:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a93:	0f 95 c2             	setne  dl
c0002a96:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a9a:	74 3c                	je     c0002ad8 <change_bitmap+0xa6>
c0002a9c:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa0:	4d                   	dec    ebp
c0002aa1:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aa5:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa9:	74 32                	je     c0002add <change_bitmap+0xab>
c0002aab:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aaf:	75 d8                	jne    c0002a89 <change_bitmap+0x57>
c0002ab1:	8d 46 01             	lea    eax,[esi+0x1]
c0002ab4:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab9:	89 c3                	mov    ebx,eax
c0002abb:	31 f6                	xor    esi,esi
c0002abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ac5:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002acb:	74 99                	je     c0002a66 <change_bitmap+0x34>
c0002acd:	89 de                	mov    esi,ebx
c0002acf:	eb b8                	jmp    c0002a89 <change_bitmap+0x57>
c0002ad1:	b9 01 00 00 00       	mov    ecx,0x1
c0002ad6:	eb 05                	jmp    c0002add <change_bitmap+0xab>
c0002ad8:	b9 02 00 00 00       	mov    ecx,0x2
c0002add:	83 c4 1c             	add    esp,0x1c
c0002ae0:	89 c8                	mov    eax,ecx
c0002ae2:	5b                   	pop    ebx
c0002ae3:	5e                   	pop    esi
c0002ae4:	5f                   	pop    edi
c0002ae5:	5d                   	pop    ebp
c0002ae6:	c3                   	ret    

c0002ae7 <put_fat>:
c0002ae7:	83 fa 01             	cmp    edx,0x1
c0002aea:	0f 86 7b 01 00 00    	jbe    c0002c6b <put_fat+0x184>
c0002af0:	55                   	push   ebp
c0002af1:	57                   	push   edi
c0002af2:	89 cf                	mov    edi,ecx
c0002af4:	56                   	push   esi
c0002af5:	b9 02 00 00 00       	mov    ecx,0x2
c0002afa:	53                   	push   ebx
c0002afb:	89 c6                	mov    esi,eax
c0002afd:	83 ec 1c             	sub    esp,0x1c
c0002b00:	89 d3                	mov    ebx,edx
c0002b02:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b05:	0f 86 68 01 00 00    	jbe    c0002c73 <put_fat+0x18c>
c0002b0b:	8a 00                	mov    al,BYTE PTR [eax]
c0002b0d:	3c 02                	cmp    al,0x2
c0002b0f:	0f 84 c7 00 00 00    	je     c0002bdc <put_fat+0xf5>
c0002b15:	77 09                	ja     c0002b20 <put_fat+0x39>
c0002b17:	fe c8                	dec    al
c0002b19:	74 17                	je     c0002b32 <put_fat+0x4b>
c0002b1b:	e9 53 01 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002b20:	b9 02 00 00 00       	mov    ecx,0x2
c0002b25:	3c 04                	cmp    al,0x4
c0002b27:	0f 86 e1 00 00 00    	jbe    c0002c0e <put_fat+0x127>
c0002b2d:	e9 41 01 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002b32:	89 d5                	mov    ebp,edx
c0002b34:	31 c9                	xor    ecx,ecx
c0002b36:	d1 ed                	shr    ebp,1
c0002b38:	89 f0                	mov    eax,esi
c0002b3a:	01 d5                	add    ebp,edx
c0002b3c:	89 ea                	mov    edx,ebp
c0002b3e:	c1 ea 09             	shr    edx,0x9
c0002b41:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b44:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b47:	e8 1e f6 ff ff       	call   c000216a <move_window>
c0002b4c:	89 c1                	mov    ecx,eax
c0002b4e:	85 c0                	test   eax,eax
c0002b50:	0f 85 1d 01 00 00    	jne    c0002c73 <put_fat+0x18c>
c0002b56:	8d 46 54             	lea    eax,[esi+0x54]
c0002b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b5d:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b60:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b6a:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b6e:	83 e3 01             	and    ebx,0x1
c0002b71:	89 f8                	mov    eax,edi
c0002b73:	74 0d                	je     c0002b82 <put_fat+0x9b>
c0002b75:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b78:	89 fa                	mov    edx,edi
c0002b7a:	c1 e2 04             	shl    edx,0x4
c0002b7d:	83 e0 0f             	and    eax,0xf
c0002b80:	09 d0                	or     eax,edx
c0002b82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b86:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b89:	c1 ea 09             	shr    edx,0x9
c0002b8c:	31 c9                	xor    ecx,ecx
c0002b8e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b91:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b98:	89 f0                	mov    eax,esi
c0002b9a:	e8 cb f5 ff ff       	call   c000216a <move_window>
c0002b9f:	89 c1                	mov    ecx,eax
c0002ba1:	85 c0                	test   eax,eax
c0002ba3:	0f 85 ca 00 00 00    	jne    c0002c73 <put_fat+0x18c>
c0002ba9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bb3:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb7:	85 db                	test   ebx,ebx
c0002bb9:	74 07                	je     c0002bc2 <put_fat+0xdb>
c0002bbb:	c1 ef 04             	shr    edi,0x4
c0002bbe:	89 fa                	mov    edx,edi
c0002bc0:	eb 0e                	jmp    c0002bd0 <put_fat+0xe9>
c0002bc2:	c1 ef 08             	shr    edi,0x8
c0002bc5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bc8:	83 e2 f0             	and    edx,0xfffffff0
c0002bcb:	83 e7 0f             	and    edi,0xf
c0002bce:	09 fa                	or     edx,edi
c0002bd0:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bd3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd7:	e9 97 00 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002bdc:	c1 ea 08             	shr    edx,0x8
c0002bdf:	31 c9                	xor    ecx,ecx
c0002be1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002be4:	89 f0                	mov    eax,esi
c0002be6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be9:	e8 7c f5 ff ff       	call   c000216a <move_window>
c0002bee:	89 c1                	mov    ecx,eax
c0002bf0:	85 c0                	test   eax,eax
c0002bf2:	75 7f                	jne    c0002c73 <put_fat+0x18c>
c0002bf4:	01 db                	add    ebx,ebx
c0002bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bfa:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c00:	0f b7 d7             	movzx  edx,di
c0002c03:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c07:	e8 f9 ed ff ff       	call   c0001a05 <st_word>
c0002c0c:	eb 53                	jmp    c0002c61 <put_fat+0x17a>
c0002c0e:	c1 ea 07             	shr    edx,0x7
c0002c11:	31 c9                	xor    ecx,ecx
c0002c13:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c16:	89 f0                	mov    eax,esi
c0002c18:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c1b:	e8 4a f5 ff ff       	call   c000216a <move_window>
c0002c20:	89 c1                	mov    ecx,eax
c0002c22:	85 c0                	test   eax,eax
c0002c24:	75 4d                	jne    c0002c73 <put_fat+0x18c>
c0002c26:	c1 e3 02             	shl    ebx,0x2
c0002c29:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c2f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c32:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c36:	74 1c                	je     c0002c54 <put_fat+0x16d>
c0002c38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c3c:	89 d8                	mov    eax,ebx
c0002c3e:	e8 5d ed ff ff       	call   c00019a0 <ld_dword>
c0002c43:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c49:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c52:	09 c7                	or     edi,eax
c0002c54:	89 fa                	mov    edx,edi
c0002c56:	89 d8                	mov    eax,ebx
c0002c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c5c:	e8 a8 ed ff ff       	call   c0001a09 <st_dword>
c0002c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c69:	eb 08                	jmp    c0002c73 <put_fat+0x18c>
c0002c6b:	b9 02 00 00 00       	mov    ecx,0x2
c0002c70:	89 c8                	mov    eax,ecx
c0002c72:	c3                   	ret    
c0002c73:	83 c4 1c             	add    esp,0x1c
c0002c76:	89 c8                	mov    eax,ecx
c0002c78:	5b                   	pop    ebx
c0002c79:	5e                   	pop    esi
c0002c7a:	5f                   	pop    edi
c0002c7b:	5d                   	pop    ebp
c0002c7c:	c3                   	ret    

c0002c7d <fill_last_frag>:
c0002c7d:	57                   	push   edi
c0002c7e:	89 cf                	mov    edi,ecx
c0002c80:	56                   	push   esi
c0002c81:	89 d6                	mov    esi,edx
c0002c83:	53                   	push   ebx
c0002c84:	89 c3                	mov    ebx,eax
c0002c86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c89:	85 c0                	test   eax,eax
c0002c8b:	74 21                	je     c0002cae <fill_last_frag+0x31>
c0002c8d:	89 f9                	mov    ecx,edi
c0002c8f:	83 f8 01             	cmp    eax,0x1
c0002c92:	76 05                	jbe    c0002c99 <fill_last_frag+0x1c>
c0002c94:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c97:	29 c1                	sub    ecx,eax
c0002c99:	8d 56 01             	lea    edx,[esi+0x1]
c0002c9c:	29 c2                	sub    edx,eax
c0002c9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca0:	e8 42 fe ff ff       	call   c0002ae7 <put_fat>
c0002ca5:	85 c0                	test   eax,eax
c0002ca7:	75 05                	jne    c0002cae <fill_last_frag+0x31>
c0002ca9:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cac:	eb d8                	jmp    c0002c86 <fill_last_frag+0x9>
c0002cae:	5b                   	pop    ebx
c0002caf:	5e                   	pop    esi
c0002cb0:	5f                   	pop    edi
c0002cb1:	c3                   	ret    

c0002cb2 <fill_first_frag>:
c0002cb2:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cb6:	75 2d                	jne    c0002ce5 <fill_first_frag+0x33>
c0002cb8:	57                   	push   edi
c0002cb9:	56                   	push   esi
c0002cba:	53                   	push   ebx
c0002cbb:	89 c3                	mov    ebx,eax
c0002cbd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc0:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cc3:	01 d7                	add    edi,edx
c0002cc5:	39 fa                	cmp    edx,edi
c0002cc7:	74 14                	je     c0002cdd <fill_first_frag+0x2b>
c0002cc9:	8d 72 01             	lea    esi,[edx+0x1]
c0002ccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cce:	89 f1                	mov    ecx,esi
c0002cd0:	e8 12 fe ff ff       	call   c0002ae7 <put_fat>
c0002cd5:	89 f2                	mov    edx,esi
c0002cd7:	85 c0                	test   eax,eax
c0002cd9:	74 ea                	je     c0002cc5 <fill_first_frag+0x13>
c0002cdb:	eb 0b                	jmp    c0002ce8 <fill_first_frag+0x36>
c0002cdd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce1:	31 c0                	xor    eax,eax
c0002ce3:	eb 03                	jmp    c0002ce8 <fill_first_frag+0x36>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	c3                   	ret    
c0002ce8:	5b                   	pop    ebx
c0002ce9:	5e                   	pop    esi
c0002cea:	5f                   	pop    edi
c0002ceb:	c3                   	ret    

c0002cec <get_fat>:
c0002cec:	83 fa 01             	cmp    edx,0x1
c0002cef:	0f 86 db 01 00 00    	jbe    c0002ed0 <get_fat+0x1e4>
c0002cf5:	55                   	push   ebp
c0002cf6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cfb:	57                   	push   edi
c0002cfc:	56                   	push   esi
c0002cfd:	53                   	push   ebx
c0002cfe:	83 ec 1c             	sub    esp,0x1c
c0002d01:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d03:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d06:	0f 86 cc 01 00 00    	jbe    c0002ed8 <get_fat+0x1ec>
c0002d0c:	89 c3                	mov    ebx,eax
c0002d0e:	8a 07                	mov    al,BYTE PTR [edi]
c0002d10:	89 d6                	mov    esi,edx
c0002d12:	3c 02                	cmp    al,0x2
c0002d14:	0f 84 99 00 00 00    	je     c0002db3 <get_fat+0xc7>
c0002d1a:	77 09                	ja     c0002d25 <get_fat+0x39>
c0002d1c:	fe c8                	dec    al
c0002d1e:	74 1a                	je     c0002d3a <get_fat+0x4e>
c0002d20:	e9 b3 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	0f 84 b5 00 00 00    	je     c0002de2 <get_fat+0xf6>
c0002d2d:	3c 04                	cmp    al,0x4
c0002d2f:	0f 84 e3 00 00 00    	je     c0002e18 <get_fat+0x12c>
c0002d35:	e9 9e 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d3a:	89 d3                	mov    ebx,edx
c0002d3c:	31 c9                	xor    ecx,ecx
c0002d3e:	d1 eb                	shr    ebx,1
c0002d40:	89 f8                	mov    eax,edi
c0002d42:	01 d3                	add    ebx,edx
c0002d44:	89 da                	mov    edx,ebx
c0002d46:	c1 ea 09             	shr    edx,0x9
c0002d49:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d4c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d4f:	e8 16 f4 ff ff       	call   c000216a <move_window>
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 08                	je     c0002d60 <get_fat+0x74>
c0002d58:	83 c9 ff             	or     ecx,0xffffffff
c0002d5b:	e9 78 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d60:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d63:	31 c9                	xor    ecx,ecx
c0002d65:	89 ea                	mov    edx,ebp
c0002d67:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d6d:	c1 ea 09             	shr    edx,0x9
c0002d70:	89 f8                	mov    eax,edi
c0002d72:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d7c:	e8 e9 f3 ff ff       	call   c000216a <move_window>
c0002d81:	85 c0                	test   eax,eax
c0002d83:	75 d3                	jne    c0002d58 <get_fat+0x6c>
c0002d85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d8b:	0f b6 c3             	movzx  eax,bl
c0002d8e:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d93:	c1 e3 08             	shl    ebx,0x8
c0002d96:	09 c3                	or     ebx,eax
c0002d98:	89 d9                	mov    ecx,ebx
c0002d9a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da0:	83 e6 01             	and    esi,0x1
c0002da3:	0f 84 2f 01 00 00    	je     c0002ed8 <get_fat+0x1ec>
c0002da9:	89 d9                	mov    ecx,ebx
c0002dab:	c1 e9 04             	shr    ecx,0x4
c0002dae:	e9 25 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	31 c9                	xor    ecx,ecx
c0002db8:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dbb:	89 f8                	mov    eax,edi
c0002dbd:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc0:	e8 a5 f3 ff ff       	call   c000216a <move_window>
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 8f                	jne    c0002d58 <get_fat+0x6c>
c0002dc9:	01 f6                	add    esi,esi
c0002dcb:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dd5:	e8 b9 eb ff ff       	call   c0001993 <ld_word>
c0002dda:	0f b7 c8             	movzx  ecx,ax
c0002ddd:	e9 f6 00 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002de2:	c1 ea 07             	shr    edx,0x7
c0002de5:	31 c9                	xor    ecx,ecx
c0002de7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dea:	89 f8                	mov    eax,edi
c0002dec:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002def:	e8 76 f3 ff ff       	call   c000216a <move_window>
c0002df4:	85 c0                	test   eax,eax
c0002df6:	0f 85 5c ff ff ff    	jne    c0002d58 <get_fat+0x6c>
c0002dfc:	c1 e6 02             	shl    esi,0x2
c0002dff:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e05:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e09:	e8 92 eb ff ff       	call   c00019a0 <ld_dword>
c0002e0e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e13:	e9 b4 00 00 00       	jmp    c0002ecc <get_fat+0x1e0>
c0002e18:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e1e:	89 d1                	mov    ecx,edx
c0002e20:	09 c1                	or     ecx,eax
c0002e22:	74 06                	je     c0002e2a <get_fat+0x13e>
c0002e24:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e28:	75 0f                	jne    c0002e39 <get_fat+0x14d>
c0002e2a:	b9 01 00 00 00       	mov    ecx,0x1
c0002e2f:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e33:	0f 85 9f 00 00 00    	jne    c0002ed8 <get_fat+0x1ec>
c0002e39:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e3d:	89 f5                	mov    ebp,esi
c0002e3f:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e44:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e47:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4a:	80 f9 02             	cmp    cl,0x2
c0002e4d:	75 35                	jne    c0002e84 <get_fat+0x198>
c0002e4f:	83 c0 ff             	add    eax,0xffffffff
c0002e52:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e57:	83 d2 ff             	adc    edx,0xffffffff
c0002e5a:	31 db                	xor    ebx,ebx
c0002e5c:	53                   	push   ebx
c0002e5d:	51                   	push   ecx
c0002e5e:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e62:	c1 ea 09             	shr    edx,0x9
c0002e65:	52                   	push   edx
c0002e66:	50                   	push   eax
c0002e67:	e8 b0 c1 01 00       	call   c001f01c <__udivdi3>
c0002e6c:	83 c4 10             	add    esp,0x10
c0002e6f:	b9 01 00 00 00       	mov    ecx,0x1
c0002e74:	39 c5                	cmp    ebp,eax
c0002e76:	77 60                	ja     c0002ed8 <get_fat+0x1ec>
c0002e78:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e7d:	74 59                	je     c0002ed8 <get_fat+0x1ec>
c0002e7f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e82:	eb 54                	jmp    c0002ed8 <get_fat+0x1ec>
c0002e84:	80 f9 03             	cmp    cl,0x3
c0002e87:	75 05                	jne    c0002e8e <get_fat+0x1a2>
c0002e89:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e8c:	77 f1                	ja     c0002e7f <get_fat+0x193>
c0002e8e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e93:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e97:	75 3f                	jne    c0002ed8 <get_fat+0x1ec>
c0002e99:	89 f2                	mov    edx,esi
c0002e9b:	31 c9                	xor    ecx,ecx
c0002e9d:	c1 ea 07             	shr    edx,0x7
c0002ea0:	89 f8                	mov    eax,edi
c0002ea2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea8:	e8 bd f2 ff ff       	call   c000216a <move_window>
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	0f 85 a3 fe ff ff    	jne    c0002d58 <get_fat+0x6c>
c0002eb5:	c1 e6 02             	shl    esi,0x2
c0002eb8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec2:	e8 d9 ea ff ff       	call   c00019a0 <ld_dword>
c0002ec7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ecc:	89 c1                	mov    ecx,eax
c0002ece:	eb 08                	jmp    c0002ed8 <get_fat+0x1ec>
c0002ed0:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed5:	89 c8                	mov    eax,ecx
c0002ed7:	c3                   	ret    
c0002ed8:	83 c4 1c             	add    esp,0x1c
c0002edb:	89 c8                	mov    eax,ecx
c0002edd:	5b                   	pop    ebx
c0002ede:	5e                   	pop    esi
c0002edf:	5f                   	pop    edi
c0002ee0:	5d                   	pop    ebp
c0002ee1:	c3                   	ret    

c0002ee2 <dir_sdi>:
c0002ee2:	55                   	push   ebp
c0002ee3:	57                   	push   edi
c0002ee4:	56                   	push   esi
c0002ee5:	53                   	push   ebx
c0002ee6:	89 c3                	mov    ebx,eax
c0002ee8:	83 ec 1c             	sub    esp,0x1c
c0002eeb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002eed:	31 c0                	xor    eax,eax
c0002eef:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002ef2:	0f 94 c0             	sete   al
c0002ef5:	48                   	dec    eax
c0002ef6:	25 00 00 20 f0       	and    eax,0xf0200000
c0002efb:	05 00 00 00 10       	add    eax,0x10000000
c0002f00:	39 d0                	cmp    eax,edx
c0002f02:	77 0a                	ja     c0002f0e <dir_sdi+0x2c>
c0002f04:	b8 02 00 00 00       	mov    eax,0x2
c0002f09:	e9 c4 00 00 00       	jmp    c0002fd2 <dir_sdi+0xf0>
c0002f0e:	89 d6                	mov    esi,edx
c0002f10:	f6 c2 1f             	test   dl,0x1f
c0002f13:	75 ef                	jne    c0002f04 <dir_sdi+0x22>
c0002f15:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f18:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f1b:	85 c9                	test   ecx,ecx
c0002f1d:	75 2d                	jne    c0002f4c <dir_sdi+0x6a>
c0002f1f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f22:	77 1b                	ja     c0002f3f <dir_sdi+0x5d>
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f2a:	c1 ea 05             	shr    edx,0x5
c0002f2d:	39 c2                	cmp    edx,eax
c0002f2f:	73 d3                	jae    c0002f04 <dir_sdi+0x22>
c0002f31:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f34:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f37:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f3a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f3d:	eb 4b                	jmp    c0002f8a <dir_sdi+0xa8>
c0002f3f:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f42:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 da                	je     c0002f24 <dir_sdi+0x42>
c0002f4a:	89 c1                	mov    ecx,eax
c0002f4c:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f50:	c1 e5 09             	shl    ebp,0x9
c0002f53:	89 ca                	mov    edx,ecx
c0002f55:	39 ee                	cmp    esi,ebp
c0002f57:	72 1c                	jb     c0002f75 <dir_sdi+0x93>
c0002f59:	89 d8                	mov    eax,ebx
c0002f5b:	e8 8c fd ff ff       	call   c0002cec <get_fat>
c0002f60:	89 c1                	mov    ecx,eax
c0002f62:	83 f8 ff             	cmp    eax,0xffffffff
c0002f65:	74 66                	je     c0002fcd <dir_sdi+0xeb>
c0002f67:	83 f8 01             	cmp    eax,0x1
c0002f6a:	76 98                	jbe    c0002f04 <dir_sdi+0x22>
c0002f6c:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f6f:	76 93                	jbe    c0002f04 <dir_sdi+0x22>
c0002f71:	29 ee                	sub    esi,ebp
c0002f73:	eb de                	jmp    c0002f53 <dir_sdi+0x71>
c0002f75:	89 f8                	mov    eax,edi
c0002f77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7b:	e8 ac ec ff ff       	call   c0001c2c <clst2sect>
c0002f80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f84:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f87:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f8a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f90:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f93:	89 d1                	mov    ecx,edx
c0002f95:	09 c1                	or     ecx,eax
c0002f97:	0f 84 67 ff ff ff    	je     c0002f04 <dir_sdi+0x22>
c0002f9d:	89 f1                	mov    ecx,esi
c0002f9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa7:	c1 e9 09             	shr    ecx,0x9
c0002faa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fb2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fb6:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fbc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fbf:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fc3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc9:	31 c0                	xor    eax,eax
c0002fcb:	eb 05                	jmp    c0002fd2 <dir_sdi+0xf0>
c0002fcd:	b8 01 00 00 00       	mov    eax,0x1
c0002fd2:	83 c4 1c             	add    esp,0x1c
c0002fd5:	5b                   	pop    ebx
c0002fd6:	5e                   	pop    esi
c0002fd7:	5f                   	pop    edi
c0002fd8:	5d                   	pop    ebp
c0002fd9:	c3                   	ret    

c0002fda <create_chain>:
c0002fda:	55                   	push   ebp
c0002fdb:	89 c5                	mov    ebp,eax
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 1c             	sub    esp,0x1c
c0002fe3:	85 d2                	test   edx,edx
c0002fe5:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002feb:	75 0e                	jne    c0002ffb <create_chain+0x21>
c0002fed:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff0:	85 ff                	test   edi,edi
c0002ff2:	74 39                	je     c000302d <create_chain+0x53>
c0002ff4:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff7:	77 39                	ja     c0003032 <create_chain+0x58>
c0002ff9:	eb 32                	jmp    c000302d <create_chain+0x53>
c0002ffb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fff:	e8 e8 fc ff ff       	call   c0002cec <get_fat>
c0003004:	89 c3                	mov    ebx,eax
c0003006:	83 f8 01             	cmp    eax,0x1
c0003009:	77 0a                	ja     c0003015 <create_chain+0x3b>
c000300b:	bb 01 00 00 00       	mov    ebx,0x1
c0003010:	e9 bc 01 00 00       	jmp    c00031d1 <create_chain+0x1f7>
c0003015:	83 f8 ff             	cmp    eax,0xffffffff
c0003018:	0f 84 60 01 00 00    	je     c000317e <create_chain+0x1a4>
c000301e:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003021:	0f 87 aa 01 00 00    	ja     c00031d1 <create_chain+0x1f7>
c0003027:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000302b:	eb 05                	jmp    c0003032 <create_chain+0x58>
c000302d:	bf 01 00 00 00       	mov    edi,0x1
c0003032:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003036:	75 07                	jne    c000303f <create_chain+0x65>
c0003038:	31 db                	xor    ebx,ebx
c000303a:	e9 92 01 00 00       	jmp    c00031d1 <create_chain+0x1f7>
c000303f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003042:	75 74                	jne    c00030b8 <create_chain+0xde>
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	89 fa                	mov    edx,edi
c000304b:	89 f0                	mov    eax,esi
c000304d:	e8 2d f9 ff ff       	call   c000297f <find_bitmap>
c0003052:	89 c3                	mov    ebx,eax
c0003054:	8d 40 ff             	lea    eax,[eax-0x1]
c0003057:	83 f8 fd             	cmp    eax,0xfffffffd
c000305a:	0f 87 71 01 00 00    	ja     c00031d1 <create_chain+0x1f7>
c0003060:	83 ec 0c             	sub    esp,0xc
c0003063:	b9 01 00 00 00       	mov    ecx,0x1
c0003068:	89 da                	mov    edx,ebx
c000306a:	89 f0                	mov    eax,esi
c000306c:	6a 01                	push   0x1
c000306e:	e8 bf f9 ff ff       	call   c0002a32 <change_bitmap>
c0003073:	83 c4 10             	add    esp,0x10
c0003076:	83 f8 02             	cmp    eax,0x2
c0003079:	74 90                	je     c000300b <create_chain+0x31>
c000307b:	83 f8 01             	cmp    eax,0x1
c000307e:	0f 84 fa 00 00 00    	je     c000317e <create_chain+0x1a4>
c0003084:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003089:	75 09                	jne    c0003094 <create_chain+0xba>
c000308b:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000308f:	e9 0e 01 00 00       	jmp    c00031a2 <create_chain+0x1c8>
c0003094:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003098:	0f 85 e9 00 00 00    	jne    c0003187 <create_chain+0x1ad>
c000309e:	8d 57 01             	lea    edx,[edi+0x1]
c00030a1:	39 da                	cmp    edx,ebx
c00030a3:	0f 84 f9 00 00 00    	je     c00031a2 <create_chain+0x1c8>
c00030a9:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030ac:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b0:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030b3:	e9 cf 00 00 00       	jmp    c0003187 <create_chain+0x1ad>
c00030b8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030bc:	75 41                	jne    c00030ff <create_chain+0x125>
c00030be:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c1:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030c4:	77 05                	ja     c00030cb <create_chain+0xf1>
c00030c6:	bb 02 00 00 00       	mov    ebx,0x2
c00030cb:	89 da                	mov    edx,ebx
c00030cd:	89 e8                	mov    eax,ebp
c00030cf:	e8 18 fc ff ff       	call   c0002cec <get_fat>
c00030d4:	83 f8 01             	cmp    eax,0x1
c00030d7:	0f 84 a6 00 00 00    	je     c0003183 <create_chain+0x1a9>
c00030dd:	83 f8 ff             	cmp    eax,0xffffffff
c00030e0:	0f 84 9d 00 00 00    	je     c0003183 <create_chain+0x1a9>
c00030e6:	85 c0                	test   eax,eax
c00030e8:	74 11                	je     c00030fb <create_chain+0x121>
c00030ea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030ed:	83 f8 01             	cmp    eax,0x1
c00030f0:	76 0d                	jbe    c00030ff <create_chain+0x125>
c00030f2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030f5:	76 08                	jbe    c00030ff <create_chain+0x125>
c00030f7:	89 c7                	mov    edi,eax
c00030f9:	eb 04                	jmp    c00030ff <create_chain+0x125>
c00030fb:	85 db                	test   ebx,ebx
c00030fd:	75 36                	jne    c0003135 <create_chain+0x15b>
c00030ff:	89 fb                	mov    ebx,edi
c0003101:	43                   	inc    ebx
c0003102:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003105:	77 0e                	ja     c0003115 <create_chain+0x13b>
c0003107:	83 ff 01             	cmp    edi,0x1
c000310a:	0f 86 28 ff ff ff    	jbe    c0003038 <create_chain+0x5e>
c0003110:	bb 02 00 00 00       	mov    ebx,0x2
c0003115:	89 da                	mov    edx,ebx
c0003117:	89 e8                	mov    eax,ebp
c0003119:	e8 ce fb ff ff       	call   c0002cec <get_fat>
c000311e:	85 c0                	test   eax,eax
c0003120:	74 13                	je     c0003135 <create_chain+0x15b>
c0003122:	83 f8 01             	cmp    eax,0x1
c0003125:	74 5c                	je     c0003183 <create_chain+0x1a9>
c0003127:	83 f8 ff             	cmp    eax,0xffffffff
c000312a:	74 57                	je     c0003183 <create_chain+0x1a9>
c000312c:	39 fb                	cmp    ebx,edi
c000312e:	75 d1                	jne    c0003101 <create_chain+0x127>
c0003130:	e9 03 ff ff ff       	jmp    c0003038 <create_chain+0x5e>
c0003135:	83 c9 ff             	or     ecx,0xffffffff
c0003138:	89 da                	mov    edx,ebx
c000313a:	89 f0                	mov    eax,esi
c000313c:	e8 a6 f9 ff ff       	call   c0002ae7 <put_fat>
c0003141:	85 c0                	test   eax,eax
c0003143:	75 14                	jne    c0003159 <create_chain+0x17f>
c0003145:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314a:	74 0d                	je     c0003159 <create_chain+0x17f>
c000314c:	89 d9                	mov    ecx,ebx
c000314e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003152:	89 f0                	mov    eax,esi
c0003154:	e8 8e f9 ff ff       	call   c0002ae7 <put_fat>
c0003159:	85 c0                	test   eax,eax
c000315b:	75 1a                	jne    c0003177 <create_chain+0x19d>
c000315d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003160:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003163:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003166:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003169:	39 d0                	cmp    eax,edx
c000316b:	77 04                	ja     c0003171 <create_chain+0x197>
c000316d:	48                   	dec    eax
c000316e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003171:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003175:	eb 5a                	jmp    c00031d1 <create_chain+0x1f7>
c0003177:	48                   	dec    eax
c0003178:	0f 85 8d fe ff ff    	jne    c000300b <create_chain+0x31>
c000317e:	83 cb ff             	or     ebx,0xffffffff
c0003181:	eb 4e                	jmp    c00031d1 <create_chain+0x1f7>
c0003183:	89 c3                	mov    ebx,eax
c0003185:	eb 4a                	jmp    c00031d1 <create_chain+0x1f7>
c0003187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000318b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000318e:	41                   	inc    ecx
c000318f:	39 d9                	cmp    ecx,ebx
c0003191:	75 19                	jne    c00031ac <create_chain+0x1d2>
c0003193:	b9 02 00 00 00       	mov    ecx,0x2
c0003198:	85 d2                	test   edx,edx
c000319a:	74 03                	je     c000319f <create_chain+0x1c5>
c000319c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000319f:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a2:	85 c0                	test   eax,eax
c00031a4:	0f 85 61 fe ff ff    	jne    c000300b <create_chain+0x31>
c00031aa:	eb b1                	jmp    c000315d <create_chain+0x183>
c00031ac:	85 d2                	test   edx,edx
c00031ae:	75 07                	jne    c00031b7 <create_chain+0x1dd>
c00031b0:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031b7:	89 d9                	mov    ecx,ebx
c00031b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031bd:	89 e8                	mov    eax,ebp
c00031bf:	e8 b9 fa ff ff       	call   c0002c7d <fill_last_frag>
c00031c4:	85 c0                	test   eax,eax
c00031c6:	75 af                	jne    c0003177 <create_chain+0x19d>
c00031c8:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031cf:	eb 8c                	jmp    c000315d <create_chain+0x183>
c00031d1:	83 c4 1c             	add    esp,0x1c
c00031d4:	89 d8                	mov    eax,ebx
c00031d6:	5b                   	pop    ebx
c00031d7:	5e                   	pop    esi
c00031d8:	5f                   	pop    edi
c00031d9:	5d                   	pop    ebp
c00031da:	c3                   	ret    

c00031db <remove_chain>:
c00031db:	55                   	push   ebp
c00031dc:	57                   	push   edi
c00031dd:	56                   	push   esi
c00031de:	53                   	push   ebx
c00031df:	83 ec 1c             	sub    esp,0x1c
c00031e2:	83 fa 01             	cmp    edx,0x1
c00031e5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031eb:	77 0a                	ja     c00031f7 <remove_chain+0x1c>
c00031ed:	b8 02 00 00 00       	mov    eax,0x2
c00031f2:	e9 24 01 00 00       	jmp    c000331b <remove_chain+0x140>
c00031f7:	89 d6                	mov    esi,edx
c00031f9:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031fc:	76 ef                	jbe    c00031ed <remove_chain+0x12>
c00031fe:	89 c7                	mov    edi,eax
c0003200:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003205:	75 06                	jne    c000320d <remove_chain+0x32>
c0003207:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000320b:	eb 54                	jmp    c0003261 <remove_chain+0x86>
c000320d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003210:	75 06                	jne    c0003218 <remove_chain+0x3d>
c0003212:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003216:	74 ef                	je     c0003207 <remove_chain+0x2c>
c0003218:	83 c9 ff             	or     ecx,0xffffffff
c000321b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000321f:	89 d8                	mov    eax,ebx
c0003221:	e8 c1 f8 ff ff       	call   c0002ae7 <put_fat>
c0003226:	85 c0                	test   eax,eax
c0003228:	74 dd                	je     c0003207 <remove_chain+0x2c>
c000322a:	e9 ec 00 00 00       	jmp    c000331b <remove_chain+0x140>
c000322f:	83 f8 01             	cmp    eax,0x1
c0003232:	74 b9                	je     c00031ed <remove_chain+0x12>
c0003234:	83 f8 ff             	cmp    eax,0xffffffff
c0003237:	74 6d                	je     c00032a6 <remove_chain+0xcb>
c0003239:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000323c:	75 6f                	jne    c00032ad <remove_chain+0xd2>
c000323e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003241:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003244:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003247:	39 d0                	cmp    eax,edx
c0003249:	73 08                	jae    c0003253 <remove_chain+0x78>
c000324b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000324f:	40                   	inc    eax
c0003250:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003253:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003256:	39 e9                	cmp    ecx,ebp
c0003258:	75 64                	jne    c00032be <remove_chain+0xe3>
c000325a:	89 ee                	mov    esi,ebp
c000325c:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000325f:	76 0f                	jbe    c0003270 <remove_chain+0x95>
c0003261:	89 f2                	mov    edx,esi
c0003263:	89 f8                	mov    eax,edi
c0003265:	e8 82 fa ff ff       	call   c0002cec <get_fat>
c000326a:	89 c5                	mov    ebp,eax
c000326c:	85 c0                	test   eax,eax
c000326e:	75 bf                	jne    c000322f <remove_chain+0x54>
c0003270:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003273:	0f 85 a0 00 00 00    	jne    c0003319 <remove_chain+0x13e>
c0003279:	eb 6c                	jmp    c00032e7 <remove_chain+0x10c>
c000327b:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000327e:	84 c0                	test   al,al
c0003280:	75 7d                	jne    c00032ff <remove_chain+0x124>
c0003282:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003285:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003289:	0f 84 86 00 00 00    	je     c0003315 <remove_chain+0x13a>
c000328f:	89 da                	mov    edx,ebx
c0003291:	89 f8                	mov    eax,edi
c0003293:	e8 54 fa ff ff       	call   c0002cec <get_fat>
c0003298:	83 f8 01             	cmp    eax,0x1
c000329b:	0f 86 4c ff ff ff    	jbe    c00031ed <remove_chain+0x12>
c00032a1:	83 f8 ff             	cmp    eax,0xffffffff
c00032a4:	75 4e                	jne    c00032f4 <remove_chain+0x119>
c00032a6:	b8 01 00 00 00       	mov    eax,0x1
c00032ab:	eb 6e                	jmp    c000331b <remove_chain+0x140>
c00032ad:	31 c9                	xor    ecx,ecx
c00032af:	89 f2                	mov    edx,esi
c00032b1:	89 d8                	mov    eax,ebx
c00032b3:	e8 2f f8 ff ff       	call   c0002ae7 <put_fat>
c00032b8:	85 c0                	test   eax,eax
c00032ba:	74 82                	je     c000323e <remove_chain+0x63>
c00032bc:	eb 5d                	jmp    c000331b <remove_chain+0x140>
c00032be:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c1:	75 1b                	jne    c00032de <remove_chain+0x103>
c00032c3:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032c7:	83 ec 0c             	sub    esp,0xc
c00032ca:	6a 00                	push   0x0
c00032cc:	89 d8                	mov    eax,ebx
c00032ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d2:	e8 5b f7 ff ff       	call   c0002a32 <change_bitmap>
c00032d7:	83 c4 10             	add    esp,0x10
c00032da:	85 c0                	test   eax,eax
c00032dc:	75 3d                	jne    c000331b <remove_chain+0x140>
c00032de:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e2:	e9 73 ff ff ff       	jmp    c000325a <remove_chain+0x7f>
c00032e7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ec:	75 8d                	jne    c000327b <remove_chain+0xa0>
c00032ee:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f2:	eb 25                	jmp    c0003319 <remove_chain+0x13e>
c00032f4:	8d 53 01             	lea    edx,[ebx+0x1]
c00032f7:	89 c3                	mov    ebx,eax
c00032f9:	39 c2                	cmp    edx,eax
c00032fb:	74 88                	je     c0003285 <remove_chain+0xaa>
c00032fd:	eb 1a                	jmp    c0003319 <remove_chain+0x13e>
c00032ff:	3c 03                	cmp    al,0x3
c0003301:	75 16                	jne    c0003319 <remove_chain+0x13e>
c0003303:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	77 0d                	ja     c0003319 <remove_chain+0x13e>
c000330c:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000330f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003313:	72 04                	jb     c0003319 <remove_chain+0x13e>
c0003315:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003319:	31 c0                	xor    eax,eax
c000331b:	83 c4 1c             	add    esp,0x1c
c000331e:	5b                   	pop    ebx
c000331f:	5e                   	pop    esi
c0003320:	5f                   	pop    edi
c0003321:	5d                   	pop    ebp
c0003322:	c3                   	ret    

c0003323 <dir_clear>:
c0003323:	55                   	push   ebp
c0003324:	57                   	push   edi
c0003325:	56                   	push   esi
c0003326:	89 c6                	mov    esi,eax
c0003328:	53                   	push   ebx
c0003329:	83 ec 1c             	sub    esp,0x1c
c000332c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003330:	e8 a1 ed ff ff       	call   c00020d6 <sync_window>
c0003335:	85 c0                	test   eax,eax
c0003337:	0f 85 de 00 00 00    	jne    c000341b <dir_clear+0xf8>
c000333d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003341:	89 f0                	mov    eax,esi
c0003343:	e8 e4 e8 ff ff       	call   c0001c2c <clst2sect>
c0003348:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003353:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003356:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003359:	b9 00 02 00 00       	mov    ecx,0x200
c000335e:	31 d2                	xor    edx,edx
c0003360:	89 e8                	mov    eax,ebp
c0003362:	e8 c0 e6 ff ff       	call   c0001a27 <mem_set>
c0003367:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000336b:	c1 e3 09             	shl    ebx,0x9
c000336e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003374:	76 1f                	jbe    c0003395 <dir_clear+0x72>
c0003376:	bb 00 80 00 00       	mov    ebx,0x8000
c000337b:	eb 18                	jmp    c0003395 <dir_clear+0x72>
c000337d:	83 ec 0c             	sub    esp,0xc
c0003380:	53                   	push   ebx
c0003381:	e8 f3 4d 00 00       	call   c0008179 <ff_memalloc>
c0003386:	83 c4 10             	add    esp,0x10
c0003389:	89 c7                	mov    edi,eax
c000338b:	85 c0                	test   eax,eax
c000338d:	0f 85 8f 00 00 00    	jne    c0003422 <dir_clear+0xff>
c0003393:	d1 eb                	shr    ebx,1
c0003395:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000339b:	77 e0                	ja     c000337d <dir_clear+0x5a>
c000339d:	31 db                	xor    ebx,ebx
c000339f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a3:	39 d8                	cmp    eax,ebx
c00033a5:	76 66                	jbe    c000340d <dir_clear+0xea>
c00033a7:	83 ec 0c             	sub    esp,0xc
c00033aa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ae:	6a 01                	push   0x1
c00033b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033b8:	55                   	push   ebp
c00033b9:	50                   	push   eax
c00033ba:	e8 9f e5 ff ff       	call   c000195e <disk_write>
c00033bf:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033c4:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c9:	83 c4 20             	add    esp,0x20
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 3d                	jne    c000340d <dir_clear+0xea>
c00033d0:	43                   	inc    ebx
c00033d1:	eb cc                	jmp    c000339f <dir_clear+0x7c>
c00033d3:	83 ec 0c             	sub    esp,0xc
c00033d6:	89 d8                	mov    eax,ebx
c00033d8:	31 d2                	xor    edx,edx
c00033da:	55                   	push   ebp
c00033db:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033df:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e3:	52                   	push   edx
c00033e4:	50                   	push   eax
c00033e5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e9:	57                   	push   edi
c00033ea:	50                   	push   eax
c00033eb:	e8 6e e5 ff ff       	call   c000195e <disk_write>
c00033f0:	83 c4 20             	add    esp,0x20
c00033f3:	85 c0                	test   eax,eax
c00033f5:	75 0a                	jne    c0003401 <dir_clear+0xde>
c00033f7:	01 eb                	add    ebx,ebp
c00033f9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033fd:	39 d8                	cmp    eax,ebx
c00033ff:	77 d2                	ja     c00033d3 <dir_clear+0xb0>
c0003401:	83 ec 0c             	sub    esp,0xc
c0003404:	57                   	push   edi
c0003405:	e8 85 4d 00 00       	call   c000818f <ff_memfree>
c000340a:	83 c4 10             	add    esp,0x10
c000340d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003411:	39 d8                	cmp    eax,ebx
c0003413:	0f 95 c0             	setne  al
c0003416:	0f b6 c0             	movzx  eax,al
c0003419:	eb 19                	jmp    c0003434 <dir_clear+0x111>
c000341b:	b8 01 00 00 00       	mov    eax,0x1
c0003420:	eb 12                	jmp    c0003434 <dir_clear+0x111>
c0003422:	89 d9                	mov    ecx,ebx
c0003424:	31 d2                	xor    edx,edx
c0003426:	c1 eb 09             	shr    ebx,0x9
c0003429:	e8 f9 e5 ff ff       	call   c0001a27 <mem_set>
c000342e:	89 dd                	mov    ebp,ebx
c0003430:	31 db                	xor    ebx,ebx
c0003432:	eb c5                	jmp    c00033f9 <dir_clear+0xd6>
c0003434:	83 c4 1c             	add    esp,0x1c
c0003437:	5b                   	pop    ebx
c0003438:	5e                   	pop    esi
c0003439:	5f                   	pop    edi
c000343a:	5d                   	pop    ebp
c000343b:	c3                   	ret    

c000343c <dir_next>:
c000343c:	55                   	push   ebp
c000343d:	57                   	push   edi
c000343e:	56                   	push   esi
c000343f:	53                   	push   ebx
c0003440:	89 c3                	mov    ebx,eax
c0003442:	83 ec 1c             	sub    esp,0x1c
c0003445:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003447:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000344a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000344e:	8d 78 20             	lea    edi,[eax+0x20]
c0003451:	31 c0                	xor    eax,eax
c0003453:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003457:	0f 94 c0             	sete   al
c000345a:	48                   	dec    eax
c000345b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003460:	05 00 00 00 10       	add    eax,0x10000000
c0003465:	39 f8                	cmp    eax,edi
c0003467:	77 0e                	ja     c0003477 <dir_next+0x3b>
c0003469:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003470:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003477:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000347a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000347d:	89 ce                	mov    esi,ecx
c000347f:	b8 04 00 00 00       	mov    eax,0x4
c0003484:	09 d6                	or     esi,edx
c0003486:	0f 84 da 00 00 00    	je     c0003566 <dir_next+0x12a>
c000348c:	89 f8                	mov    eax,edi
c000348e:	25 ff 01 00 00       	and    eax,0x1ff
c0003493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003497:	0f 85 b9 00 00 00    	jne    c0003556 <dir_next+0x11a>
c000349d:	83 c2 01             	add    edx,0x1
c00034a0:	83 d1 00             	adc    ecx,0x0
c00034a3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034ac:	85 d2                	test   edx,edx
c00034ae:	75 29                	jne    c00034d9 <dir_next+0x9d>
c00034b0:	89 fa                	mov    edx,edi
c00034b2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034b6:	c1 ea 05             	shr    edx,0x5
c00034b9:	39 c2                	cmp    edx,eax
c00034bb:	0f 82 95 00 00 00    	jb     c0003556 <dir_next+0x11a>
c00034c1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034cf:	b8 04 00 00 00       	mov    eax,0x4
c00034d4:	e9 8d 00 00 00       	jmp    c0003566 <dir_next+0x12a>
c00034d9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034dd:	89 f9                	mov    ecx,edi
c00034df:	48                   	dec    eax
c00034e0:	c1 e9 09             	shr    ecx,0x9
c00034e3:	85 c8                	test   eax,ecx
c00034e5:	75 6f                	jne    c0003556 <dir_next+0x11a>
c00034e7:	89 d8                	mov    eax,ebx
c00034e9:	e8 fe f7 ff ff       	call   c0002cec <get_fat>
c00034ee:	89 c6                	mov    esi,eax
c00034f0:	83 f8 01             	cmp    eax,0x1
c00034f3:	77 07                	ja     c00034fc <dir_next+0xc0>
c00034f5:	b8 02 00 00 00       	mov    eax,0x2
c00034fa:	eb 6a                	jmp    c0003566 <dir_next+0x12a>
c00034fc:	83 f8 ff             	cmp    eax,0xffffffff
c00034ff:	75 07                	jne    c0003508 <dir_next+0xcc>
c0003501:	b8 01 00 00 00       	mov    eax,0x1
c0003506:	eb 5e                	jmp    c0003566 <dir_next+0x12a>
c0003508:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000350b:	77 37                	ja     c0003544 <dir_next+0x108>
c000350d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003512:	74 ad                	je     c00034c1 <dir_next+0x85>
c0003514:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003517:	89 d8                	mov    eax,ebx
c0003519:	e8 bc fa ff ff       	call   c0002fda <create_chain>
c000351e:	89 c6                	mov    esi,eax
c0003520:	b8 07 00 00 00       	mov    eax,0x7
c0003525:	85 f6                	test   esi,esi
c0003527:	74 3d                	je     c0003566 <dir_next+0x12a>
c0003529:	83 fe 01             	cmp    esi,0x1
c000352c:	74 c7                	je     c00034f5 <dir_next+0xb9>
c000352e:	83 fe ff             	cmp    esi,0xffffffff
c0003531:	74 ce                	je     c0003501 <dir_next+0xc5>
c0003533:	89 f2                	mov    edx,esi
c0003535:	89 e8                	mov    eax,ebp
c0003537:	e8 e7 fd ff ff       	call   c0003323 <dir_clear>
c000353c:	85 c0                	test   eax,eax
c000353e:	75 c1                	jne    c0003501 <dir_next+0xc5>
c0003540:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003544:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003547:	89 f2                	mov    edx,esi
c0003549:	89 e8                	mov    eax,ebp
c000354b:	e8 dc e6 ff ff       	call   c0001c2c <clst2sect>
c0003550:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000355a:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000355d:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003561:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003564:	31 c0                	xor    eax,eax
c0003566:	83 c4 1c             	add    esp,0x1c
c0003569:	5b                   	pop    ebx
c000356a:	5e                   	pop    esi
c000356b:	5f                   	pop    edi
c000356c:	5d                   	pop    ebp
c000356d:	c3                   	ret    

c000356e <load_xdir>:
c000356e:	55                   	push   ebp
c000356f:	57                   	push   edi
c0003570:	56                   	push   esi
c0003571:	89 c6                	mov    esi,eax
c0003573:	53                   	push   ebx
c0003574:	83 ec 1c             	sub    esp,0x1c
c0003577:	8b 00                	mov    eax,DWORD PTR [eax]
c0003579:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000357c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000357f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003582:	e8 e3 eb ff ff       	call   c000216a <move_window>
c0003587:	89 c3                	mov    ebx,eax
c0003589:	85 c0                	test   eax,eax
c000358b:	0f 85 0c 01 00 00    	jne    c000369d <load_xdir+0x12f>
c0003591:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003594:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003597:	0f 85 fb 00 00 00    	jne    c0003698 <load_xdir+0x12a>
c000359d:	89 f8                	mov    eax,edi
c000359f:	b9 20 00 00 00       	mov    ecx,0x20
c00035a4:	e8 69 e4 ff ff       	call   c0001a12 <mem_cpy>
c00035a9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035ad:	40                   	inc    eax
c00035ae:	c1 e0 05             	shl    eax,0x5
c00035b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035b5:	83 e8 60             	sub    eax,0x60
c00035b8:	3d 00 02 00 00       	cmp    eax,0x200
c00035bd:	0f 87 d5 00 00 00    	ja     c0003698 <load_xdir+0x12a>
c00035c3:	31 d2                	xor    edx,edx
c00035c5:	89 f0                	mov    eax,esi
c00035c7:	e8 70 fe ff ff       	call   c000343c <dir_next>
c00035cc:	89 c3                	mov    ebx,eax
c00035ce:	83 f8 04             	cmp    eax,0x4
c00035d1:	0f 84 c1 00 00 00    	je     c0003698 <load_xdir+0x12a>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	0f 85 be 00 00 00    	jne    c000369d <load_xdir+0x12f>
c00035df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00035e7:	e8 7e eb ff ff       	call   c000216a <move_window>
c00035ec:	89 c3                	mov    ebx,eax
c00035ee:	85 c0                	test   eax,eax
c00035f0:	0f 85 a7 00 00 00    	jne    c000369d <load_xdir+0x12f>
c00035f6:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f9:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035fc:	0f 85 96 00 00 00    	jne    c0003698 <load_xdir+0x12a>
c0003602:	8d 47 20             	lea    eax,[edi+0x20]
c0003605:	b9 20 00 00 00       	mov    ecx,0x20
c000360a:	e8 03 e4 ff ff       	call   c0001a12 <mem_cpy>
c000360f:	31 d2                	xor    edx,edx
c0003611:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003615:	b9 0f 00 00 00       	mov    ecx,0xf
c000361a:	83 c0 2c             	add    eax,0x2c
c000361d:	f7 f1                	div    ecx
c000361f:	c1 e0 05             	shl    eax,0x5
c0003622:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003626:	77 70                	ja     c0003698 <load_xdir+0x12a>
c0003628:	bd 40 00 00 00       	mov    ebp,0x40
c000362d:	31 d2                	xor    edx,edx
c000362f:	89 f0                	mov    eax,esi
c0003631:	e8 06 fe ff ff       	call   c000343c <dir_next>
c0003636:	89 c3                	mov    ebx,eax
c0003638:	83 f8 04             	cmp    eax,0x4
c000363b:	74 5b                	je     c0003698 <load_xdir+0x12a>
c000363d:	85 c0                	test   eax,eax
c000363f:	75 5c                	jne    c000369d <load_xdir+0x12f>
c0003641:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003644:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003647:	8b 06                	mov    eax,DWORD PTR [esi]
c0003649:	e8 1c eb ff ff       	call   c000216a <move_window>
c000364e:	89 c3                	mov    ebx,eax
c0003650:	85 c0                	test   eax,eax
c0003652:	75 49                	jne    c000369d <load_xdir+0x12f>
c0003654:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003657:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000365a:	75 3c                	jne    c0003698 <load_xdir+0x12a>
c000365c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003662:	77 0d                	ja     c0003671 <load_xdir+0x103>
c0003664:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003667:	b9 20 00 00 00       	mov    ecx,0x20
c000366c:	e8 a1 e3 ff ff       	call   c0001a12 <mem_cpy>
c0003671:	83 c5 20             	add    ebp,0x20
c0003674:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003678:	77 b3                	ja     c000362d <load_xdir+0xbf>
c000367a:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003680:	77 1b                	ja     c000369d <load_xdir+0x12f>
c0003682:	89 f8                	mov    eax,edi
c0003684:	e8 d8 e7 ff ff       	call   c0001e61 <xdir_sum>
c0003689:	89 c1                	mov    ecx,eax
c000368b:	8d 47 02             	lea    eax,[edi+0x2]
c000368e:	e8 00 e3 ff ff       	call   c0001993 <ld_word>
c0003693:	66 39 c1             	cmp    cx,ax
c0003696:	74 05                	je     c000369d <load_xdir+0x12f>
c0003698:	bb 02 00 00 00       	mov    ebx,0x2
c000369d:	83 c4 1c             	add    esp,0x1c
c00036a0:	89 d8                	mov    eax,ebx
c00036a2:	5b                   	pop    ebx
c00036a3:	5e                   	pop    esi
c00036a4:	5f                   	pop    edi
c00036a5:	5d                   	pop    ebp
c00036a6:	c3                   	ret    

c00036a7 <load_obj_xdir>:
c00036a7:	53                   	push   ebx
c00036a8:	89 c3                	mov    ebx,eax
c00036aa:	83 ec 08             	sub    esp,0x8
c00036ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00036af:	89 03                	mov    DWORD PTR [ebx],eax
c00036b1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036b7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036ba:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036c7:	30 c0                	xor    al,al
c00036c9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d3:	89 d8                	mov    eax,ebx
c00036d5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036d8:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036db:	e8 02 f8 ff ff       	call   c0002ee2 <dir_sdi>
c00036e0:	85 c0                	test   eax,eax
c00036e2:	75 0b                	jne    c00036ef <load_obj_xdir+0x48>
c00036e4:	83 c4 08             	add    esp,0x8
c00036e7:	89 d8                	mov    eax,ebx
c00036e9:	5b                   	pop    ebx
c00036ea:	e9 7f fe ff ff       	jmp    c000356e <load_xdir>
c00036ef:	83 c4 08             	add    esp,0x8
c00036f2:	5b                   	pop    ebx
c00036f3:	c3                   	ret    

c00036f4 <dir_read>:
c00036f4:	55                   	push   ebp
c00036f5:	bd 04 00 00 00       	mov    ebp,0x4
c00036fa:	57                   	push   edi
c00036fb:	56                   	push   esi
c00036fc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003701:	53                   	push   ebx
c0003702:	89 c3                	mov    ebx,eax
c0003704:	83 ec 1c             	sub    esp,0x1c
c0003707:	8b 38                	mov    edi,DWORD PTR [eax]
c0003709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000370d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003712:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003715:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003718:	89 c8                	mov    eax,ecx
c000371a:	09 d0                	or     eax,edx
c000371c:	0f 84 25 01 00 00    	je     c0003847 <dir_read+0x153>
c0003722:	89 f8                	mov    eax,edi
c0003724:	e8 41 ea ff ff       	call   c000216a <move_window>
c0003729:	89 c5                	mov    ebp,eax
c000372b:	85 c0                	test   eax,eax
c000372d:	0f 85 23 01 00 00    	jne    c0003856 <dir_read+0x162>
c0003733:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003736:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003738:	84 c9                	test   cl,cl
c000373a:	0f 84 11 01 00 00    	je     c0003851 <dir_read+0x15d>
c0003740:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003743:	75 48                	jne    c000378d <dir_read+0x99>
c0003745:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000374a:	74 10                	je     c000375c <dir_read+0x68>
c000374c:	80 f9 83             	cmp    cl,0x83
c000374f:	0f 85 dd 00 00 00    	jne    c0003832 <dir_read+0x13e>
c0003755:	31 ed                	xor    ebp,ebp
c0003757:	e9 08 01 00 00       	jmp    c0003864 <dir_read+0x170>
c000375c:	80 f9 85             	cmp    cl,0x85
c000375f:	0f 85 cd 00 00 00    	jne    c0003832 <dir_read+0x13e>
c0003765:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003768:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000376b:	89 d8                	mov    eax,ebx
c000376d:	e8 fc fd ff ff       	call   c000356e <load_xdir>
c0003772:	89 c5                	mov    ebp,eax
c0003774:	85 c0                	test   eax,eax
c0003776:	0f 85 da 00 00 00    	jne    c0003856 <dir_read+0x162>
c000377c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000377f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003782:	83 e0 3f             	and    eax,0x3f
c0003785:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003788:	e9 d7 00 00 00       	jmp    c0003864 <dir_read+0x170>
c000378d:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003790:	83 e0 3f             	and    eax,0x3f
c0003793:	80 f9 e5             	cmp    cl,0xe5
c0003796:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000379a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000379d:	0f 84 8a 00 00 00    	je     c000382d <dir_read+0x139>
c00037a3:	80 f9 2e             	cmp    cl,0x2e
c00037a6:	0f 84 81 00 00 00    	je     c000382d <dir_read+0x139>
c00037ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b0:	83 e0 1f             	and    eax,0x1f
c00037b3:	83 f8 08             	cmp    eax,0x8
c00037b6:	0f 94 c0             	sete   al
c00037b9:	0f b6 c0             	movzx  eax,al
c00037bc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c0:	75 6b                	jne    c000382d <dir_read+0x139>
c00037c2:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037c7:	75 44                	jne    c000380d <dir_read+0x119>
c00037c9:	f6 c1 40             	test   cl,0x40
c00037cc:	74 12                	je     c00037e0 <dir_read+0xec>
c00037ce:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d1:	83 e1 bf             	and    ecx,0xffffffbf
c00037d4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037db:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037de:	eb 06                	jmp    c00037e6 <dir_read+0xf2>
c00037e0:	89 f0                	mov    eax,esi
c00037e2:	38 c8                	cmp    al,cl
c00037e4:	75 47                	jne    c000382d <dir_read+0x139>
c00037e6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037ea:	be ff ff ff ff       	mov    esi,0xffffffff
c00037ef:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f2:	75 3e                	jne    c0003832 <dir_read+0x13e>
c00037f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fb:	e8 95 e4 ff ff       	call   c0001c95 <pick_lfn>
c0003800:	85 c0                	test   eax,eax
c0003802:	74 2e                	je     c0003832 <dir_read+0x13e>
c0003804:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003808:	8d 71 ff             	lea    esi,[ecx-0x1]
c000380b:	eb 25                	jmp    c0003832 <dir_read+0x13e>
c000380d:	89 f0                	mov    eax,esi
c000380f:	84 c0                	test   al,al
c0003811:	75 11                	jne    c0003824 <dir_read+0x130>
c0003813:	89 d0                	mov    eax,edx
c0003815:	e8 35 e6 ff ff       	call   c0001e4f <sum_sfn>
c000381a:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000381e:	0f 84 31 ff ff ff    	je     c0003755 <dir_read+0x61>
c0003824:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000382b:	eb 37                	jmp    c0003864 <dir_read+0x170>
c000382d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003832:	31 d2                	xor    edx,edx
c0003834:	89 d8                	mov    eax,ebx
c0003836:	e8 01 fc ff ff       	call   c000343c <dir_next>
c000383b:	89 c5                	mov    ebp,eax
c000383d:	85 c0                	test   eax,eax
c000383f:	0f 84 cd fe ff ff    	je     c0003712 <dir_read+0x1e>
c0003845:	eb 0f                	jmp    c0003856 <dir_read+0x162>
c0003847:	85 ed                	test   ebp,ebp
c0003849:	0f 84 06 ff ff ff    	je     c0003755 <dir_read+0x61>
c000384f:	eb 05                	jmp    c0003856 <dir_read+0x162>
c0003851:	bd 04 00 00 00       	mov    ebp,0x4
c0003856:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000385d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003864:	83 c4 1c             	add    esp,0x1c
c0003867:	89 e8                	mov    eax,ebp
c0003869:	5b                   	pop    ebx
c000386a:	5e                   	pop    esi
c000386b:	5f                   	pop    edi
c000386c:	5d                   	pop    ebp
c000386d:	c3                   	ret    

c000386e <dir_alloc>:
c000386e:	55                   	push   ebp
c000386f:	89 d5                	mov    ebp,edx
c0003871:	57                   	push   edi
c0003872:	31 d2                	xor    edx,edx
c0003874:	56                   	push   esi
c0003875:	53                   	push   ebx
c0003876:	89 c3                	mov    ebx,eax
c0003878:	83 ec 0c             	sub    esp,0xc
c000387b:	8b 38                	mov    edi,DWORD PTR [eax]
c000387d:	e8 60 f6 ff ff       	call   c0002ee2 <dir_sdi>
c0003882:	85 c0                	test   eax,eax
c0003884:	75 4e                	jne    c00038d4 <dir_alloc+0x66>
c0003886:	31 f6                	xor    esi,esi
c0003888:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000388b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000388e:	89 f8                	mov    eax,edi
c0003890:	e8 d5 e8 ff ff       	call   c000216a <move_window>
c0003895:	85 c0                	test   eax,eax
c0003897:	75 3b                	jne    c00038d4 <dir_alloc+0x66>
c0003899:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000389c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000389f:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a1:	75 07                	jne    c00038aa <dir_alloc+0x3c>
c00038a3:	f7 d2                	not    edx
c00038a5:	c0 ea 07             	shr    dl,0x7
c00038a8:	eb 0d                	jmp    c00038b7 <dir_alloc+0x49>
c00038aa:	80 fa e5             	cmp    dl,0xe5
c00038ad:	0f 94 c1             	sete   cl
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c2             	sete   dl
c00038b5:	09 ca                	or     edx,ecx
c00038b7:	84 d2                	test   dl,dl
c00038b9:	74 07                	je     c00038c2 <dir_alloc+0x54>
c00038bb:	46                   	inc    esi
c00038bc:	39 ee                	cmp    esi,ebp
c00038be:	75 04                	jne    c00038c4 <dir_alloc+0x56>
c00038c0:	eb 1c                	jmp    c00038de <dir_alloc+0x70>
c00038c2:	31 f6                	xor    esi,esi
c00038c4:	ba 01 00 00 00       	mov    edx,0x1
c00038c9:	89 d8                	mov    eax,ebx
c00038cb:	e8 6c fb ff ff       	call   c000343c <dir_next>
c00038d0:	85 c0                	test   eax,eax
c00038d2:	74 b4                	je     c0003888 <dir_alloc+0x1a>
c00038d4:	83 f8 04             	cmp    eax,0x4
c00038d7:	75 05                	jne    c00038de <dir_alloc+0x70>
c00038d9:	b8 07 00 00 00       	mov    eax,0x7
c00038de:	83 c4 0c             	add    esp,0xc
c00038e1:	5b                   	pop    ebx
c00038e2:	5e                   	pop    esi
c00038e3:	5f                   	pop    edi
c00038e4:	5d                   	pop    ebp
c00038e5:	c3                   	ret    

c00038e6 <store_xdir>:
c00038e6:	55                   	push   ebp
c00038e7:	57                   	push   edi
c00038e8:	89 c7                	mov    edi,eax
c00038ea:	56                   	push   esi
c00038eb:	53                   	push   ebx
c00038ec:	83 ec 0c             	sub    esp,0xc
c00038ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f1:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038f4:	89 e8                	mov    eax,ebp
c00038f6:	e8 66 e5 ff ff       	call   c0001e61 <xdir_sum>
c00038fb:	0f b7 d0             	movzx  edx,ax
c00038fe:	8d 45 02             	lea    eax,[ebp+0x2]
c0003901:	e8 ff e0 ff ff       	call   c0001a05 <st_word>
c0003906:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003909:	89 f8                	mov    eax,edi
c000390b:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c000390f:	e8 ce f5 ff ff       	call   c0002ee2 <dir_sdi>
c0003914:	89 c6                	mov    esi,eax
c0003916:	85 f6                	test   esi,esi
c0003918:	75 3d                	jne    c0003957 <store_xdir+0x71>
c000391a:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c000391d:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003920:	8b 07                	mov    eax,DWORD PTR [edi]
c0003922:	e8 43 e8 ff ff       	call   c000216a <move_window>
c0003927:	89 c6                	mov    esi,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 2a                	jne    c0003957 <store_xdir+0x71>
c000392d:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003930:	b9 20 00 00 00       	mov    ecx,0x20
c0003935:	89 ea                	mov    edx,ebp
c0003937:	e8 d6 e0 ff ff       	call   c0001a12 <mem_cpy>
c000393c:	8b 07                	mov    eax,DWORD PTR [edi]
c000393e:	85 db                	test   ebx,ebx
c0003940:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003944:	74 11                	je     c0003957 <store_xdir+0x71>
c0003946:	31 d2                	xor    edx,edx
c0003948:	89 f8                	mov    eax,edi
c000394a:	e8 ed fa ff ff       	call   c000343c <dir_next>
c000394f:	83 c5 20             	add    ebp,0x20
c0003952:	89 c6                	mov    esi,eax
c0003954:	4b                   	dec    ebx
c0003955:	eb bf                	jmp    c0003916 <store_xdir+0x30>
c0003957:	89 f0                	mov    eax,esi
c0003959:	83 fe 02             	cmp    esi,0x2
c000395c:	76 05                	jbe    c0003963 <store_xdir+0x7d>
c000395e:	b8 02 00 00 00       	mov    eax,0x2
c0003963:	83 c4 0c             	add    esp,0xc
c0003966:	5b                   	pop    ebx
c0003967:	5e                   	pop    esi
c0003968:	5f                   	pop    edi
c0003969:	5d                   	pop    ebp
c000396a:	c3                   	ret    

c000396b <dir_remove>:
c000396b:	57                   	push   edi
c000396c:	56                   	push   esi
c000396d:	53                   	push   ebx
c000396e:	89 c3                	mov    ebx,eax
c0003970:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003973:	8b 30                	mov    esi,DWORD PTR [eax]
c0003975:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003978:	83 fa ff             	cmp    edx,0xffffffff
c000397b:	74 09                	je     c0003986 <dir_remove+0x1b>
c000397d:	e8 60 f5 ff ff       	call   c0002ee2 <dir_sdi>
c0003982:	85 c0                	test   eax,eax
c0003984:	75 41                	jne    c00039c7 <dir_remove+0x5c>
c0003986:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003989:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000398c:	89 f0                	mov    eax,esi
c000398e:	e8 d7 e7 ff ff       	call   c000216a <move_window>
c0003993:	85 c0                	test   eax,eax
c0003995:	75 26                	jne    c00039bd <dir_remove+0x52>
c0003997:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000399a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000399d:	75 05                	jne    c00039a4 <dir_remove+0x39>
c000399f:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a2:	eb 03                	jmp    c00039a7 <dir_remove+0x3c>
c00039a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039ab:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039ae:	73 17                	jae    c00039c7 <dir_remove+0x5c>
c00039b0:	31 d2                	xor    edx,edx
c00039b2:	89 d8                	mov    eax,ebx
c00039b4:	e8 83 fa ff ff       	call   c000343c <dir_next>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	74 c9                	je     c0003986 <dir_remove+0x1b>
c00039bd:	83 f8 04             	cmp    eax,0x4
c00039c0:	75 05                	jne    c00039c7 <dir_remove+0x5c>
c00039c2:	b8 02 00 00 00       	mov    eax,0x2
c00039c7:	5b                   	pop    ebx
c00039c8:	5e                   	pop    esi
c00039c9:	5f                   	pop    edi
c00039ca:	c3                   	ret    

c00039cb <create_name>:
c00039cb:	55                   	push   ebp
c00039cc:	89 d5                	mov    ebp,edx
c00039ce:	57                   	push   edi
c00039cf:	89 c7                	mov    edi,eax
c00039d1:	56                   	push   esi
c00039d2:	31 f6                	xor    esi,esi
c00039d4:	53                   	push   ebx
c00039d5:	83 ec 3c             	sub    esp,0x3c
c00039d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00039da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039de:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039e7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039eb:	e8 7d e0 ff ff       	call   c0001a6d <tchar2uni>
c00039f0:	89 c3                	mov    ebx,eax
c00039f2:	83 f8 ff             	cmp    eax,0xffffffff
c00039f5:	75 0a                	jne    c0003a01 <create_name+0x36>
c00039f7:	b8 06 00 00 00       	mov    eax,0x6
c00039fc:	e9 83 02 00 00       	jmp    c0003c84 <create_name+0x2b9>
c0003a01:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a06:	76 0c                	jbe    c0003a14 <create_name+0x49>
c0003a08:	c1 e8 10             	shr    eax,0x10
c0003a0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a0f:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a13:	46                   	inc    esi
c0003a14:	66 83 fb 1f          	cmp    bx,0x1f
c0003a18:	89 d8                	mov    eax,ebx
c0003a1a:	76 36                	jbe    c0003a52 <create_name+0x87>
c0003a1c:	66 83 fb 2f          	cmp    bx,0x2f
c0003a20:	74 30                	je     c0003a52 <create_name+0x87>
c0003a22:	66 83 fb 5c          	cmp    bx,0x5c
c0003a26:	74 39                	je     c0003a61 <create_name+0x96>
c0003a28:	66 83 fb 7f          	cmp    bx,0x7f
c0003a2c:	77 11                	ja     c0003a3f <create_name+0x74>
c0003a2e:	0f b7 d3             	movzx  edx,bx
c0003a31:	b8 72 00 02 c0       	mov    eax,0xc0020072
c0003a36:	e8 1a e0 ff ff       	call   c0001a55 <chk_chr>
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 b8                	jne    c00039f7 <create_name+0x2c>
c0003a3f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a45:	77 b0                	ja     c00039f7 <create_name+0x2c>
c0003a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a4b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a4f:	46                   	inc    esi
c0003a50:	eb 95                	jmp    c00039e7 <create_name+0x1c>
c0003a52:	66 83 f8 1f          	cmp    ax,0x1f
c0003a56:	b3 04                	mov    bl,0x4
c0003a58:	76 19                	jbe    c0003a73 <create_name+0xa8>
c0003a5a:	eb 05                	jmp    c0003a61 <create_name+0x96>
c0003a5c:	40                   	inc    eax
c0003a5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a65:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a67:	80 fa 2f             	cmp    dl,0x2f
c0003a6a:	74 f0                	je     c0003a5c <create_name+0x91>
c0003a6c:	80 fa 5c             	cmp    dl,0x5c
c0003a6f:	74 eb                	je     c0003a5c <create_name+0x91>
c0003a71:	31 db                	xor    ebx,ebx
c0003a73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a77:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a7a:	85 f6                	test   esi,esi
c0003a7c:	74 18                	je     c0003a96 <create_name+0xcb>
c0003a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a82:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a87:	66 83 f8 20          	cmp    ax,0x20
c0003a8b:	74 06                	je     c0003a93 <create_name+0xc8>
c0003a8d:	66 83 f8 2e          	cmp    ax,0x2e
c0003a91:	75 03                	jne    c0003a96 <create_name+0xcb>
c0003a93:	4e                   	dec    esi
c0003a94:	eb e4                	jmp    c0003a7a <create_name+0xaf>
c0003a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a9a:	31 ed                	xor    ebp,ebp
c0003a9c:	85 f6                	test   esi,esi
c0003a9e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa4:	0f 84 4d ff ff ff    	je     c00039f7 <create_name+0x2c>
c0003aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003aae:	8d 55 01             	lea    edx,[ebp+0x1]
c0003ab1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab5:	66 83 f8 20          	cmp    ax,0x20
c0003ab9:	75 04                	jne    c0003abf <create_name+0xf4>
c0003abb:	89 d5                	mov    ebp,edx
c0003abd:	eb eb                	jmp    c0003aaa <create_name+0xdf>
c0003abf:	85 ed                	test   ebp,ebp
c0003ac1:	75 06                	jne    c0003ac9 <create_name+0xfe>
c0003ac3:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac7:	75 08                	jne    c0003ad1 <create_name+0x106>
c0003ac9:	83 cb 03             	or     ebx,0x3
c0003acc:	eb 03                	jmp    c0003ad1 <create_name+0x106>
c0003ace:	4e                   	dec    esi
c0003acf:	74 0c                	je     c0003add <create_name+0x112>
c0003ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ad5:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003adb:	75 f1                	jne    c0003ace <create_name+0x103>
c0003add:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae2:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae5:	ba 20 00 00 00       	mov    edx,0x20
c0003aea:	e8 38 df ff ff       	call   c0001a27 <mem_set>
c0003aef:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003af7:	31 c9                	xor    ecx,ecx
c0003af9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003afe:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b09:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0d:	66 85 ed             	test   bp,bp
c0003b10:	0f 84 1f 01 00 00    	je     c0003c35 <create_name+0x26a>
c0003b16:	66 83 fd 20          	cmp    bp,0x20
c0003b1a:	74 0c                	je     c0003b28 <create_name+0x15d>
c0003b1c:	66 83 fd 2e          	cmp    bp,0x2e
c0003b20:	75 0f                	jne    c0003b31 <create_name+0x166>
c0003b22:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b26:	74 09                	je     c0003b31 <create_name+0x166>
c0003b28:	83 cb 03             	or     ebx,0x3
c0003b2b:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003b2f:	eb cd                	jmp    c0003afe <create_name+0x133>
c0003b31:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003b35:	73 06                	jae    c0003b3d <create_name+0x172>
c0003b37:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b3b:	75 3a                	jne    c0003b77 <create_name+0x1ac>
c0003b3d:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003b42:	75 08                	jne    c0003b4c <create_name+0x181>
c0003b44:	83 cb 03             	or     ebx,0x3
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x26a>
c0003b4c:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x194>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x26a>
c0003b5f:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003b64:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003b68:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb b4                	jmp    c0003b2b <create_name+0x160>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x21a>
c0003b7d:	88 da                	mov    dl,bl
c0003b7f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 0f 46 00 00       	call   c00081a6 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1e9>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad c0 ff 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0040]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x213>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x213>
c0003bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x204>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003bca:	e9 5c ff ff ff       	jmp    c0003b2b <create_name+0x160>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x25e>
c0003bde:	66 85 ed             	test   bp,bp
c0003be1:	88 d3                	mov    bl,dl
c0003be3:	74 19                	je     c0003bfe <create_name+0x233>
c0003be5:	0f b7 d5             	movzx  edx,bp
c0003be8:	b8 7b 00 02 c0       	mov    eax,0xc002007b
c0003bed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf1:	e8 5f de ff ff       	call   c0001a55 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x23d>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x25e>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x24d>
c0003c11:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x25e>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x25e>
c0003c21:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 f6 fe ff ff       	jmp    c0003b2b <create_name+0x160>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x274>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x280>
c0003c46:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x296>
c0003c56:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x29b>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2b4>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2b4>
c0003c6b:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2aa>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2b4>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	83 c4 3c             	add    esp,0x3c
c0003c87:	5b                   	pop    ebx
c0003c88:	5e                   	pop    esi
c0003c89:	5f                   	pop    edi
c0003c8a:	5d                   	pop    ebp
c0003c8b:	c3                   	ret    

c0003c8c <xname_sum>:
c0003c8c:	56                   	push   esi
c0003c8d:	89 c6                	mov    esi,eax
c0003c8f:	53                   	push   ebx
c0003c90:	31 db                	xor    ebx,ebx
c0003c92:	51                   	push   ecx
c0003c93:	83 c6 02             	add    esi,0x2
c0003c96:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003c9a:	66 85 c0             	test   ax,ax
c0003c9d:	74 1f                	je     c0003cbe <xname_sum+0x32>
c0003c9f:	66 d1 cb             	ror    bx,1
c0003ca2:	83 ec 0c             	sub    esp,0xc
c0003ca5:	50                   	push   eax
c0003ca6:	e8 00 46 00 00       	call   c00082ab <ff_wtoupper>
c0003cab:	0f b6 d0             	movzx  edx,al
c0003cae:	01 d3                	add    ebx,edx
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	66 c1 e8 08          	shr    ax,0x8
c0003cb7:	66 d1 cb             	ror    bx,1
c0003cba:	01 c3                	add    ebx,eax
c0003cbc:	eb d5                	jmp    c0003c93 <xname_sum+0x7>
c0003cbe:	5a                   	pop    edx
c0003cbf:	89 d8                	mov    eax,ebx
c0003cc1:	5b                   	pop    ebx
c0003cc2:	5e                   	pop    esi
c0003cc3:	c3                   	ret    

c0003cc4 <create_xdir>:
c0003cc4:	55                   	push   ebp
c0003cc5:	b9 40 00 00 00       	mov    ecx,0x40
c0003cca:	57                   	push   edi
c0003ccb:	bd 01 00 00 00       	mov    ebp,0x1
c0003cd0:	56                   	push   esi
c0003cd1:	31 ff                	xor    edi,edi
c0003cd3:	53                   	push   ebx
c0003cd4:	89 c3                	mov    ebx,eax
c0003cd6:	83 ec 1c             	sub    esp,0x1c
c0003cd9:	be 40 00 00 00       	mov    esi,0x40
c0003cde:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ce2:	31 d2                	xor    edx,edx
c0003ce4:	e8 3e dd ff ff       	call   c0001a27 <mem_set>
c0003ce9:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cec:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003cf0:	31 c9                	xor    ecx,ecx
c0003cf2:	8d 46 01             	lea    eax,[esi+0x1]
c0003cf5:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003cf9:	83 c6 02             	add    esi,0x2
c0003cfc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d00:	66 85 ed             	test   bp,bp
c0003d03:	74 12                	je     c0003d17 <create_xdir+0x53>
c0003d05:	0f b6 c1             	movzx  eax,cl
c0003d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d0c:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d10:	66 83 fd 01          	cmp    bp,0x1
c0003d14:	80 d9 ff             	sbb    cl,0xff
c0003d17:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	0f b7 d5             	movzx  edx,bp
c0003d20:	e8 e0 dc ff ff       	call   c0001a05 <st_word>
c0003d25:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d2b:	75 d3                	jne    c0003d00 <create_xdir+0x3c>
c0003d2d:	8d 47 01             	lea    eax,[edi+0x1]
c0003d30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d38:	0f b6 c1             	movzx  eax,cl
c0003d3b:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d40:	74 07                	je     c0003d49 <create_xdir+0x85>
c0003d42:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d47:	eb a9                	jmp    c0003cf2 <create_xdir+0x2e>
c0003d49:	8d 47 02             	lea    eax,[edi+0x2]
c0003d4c:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d4f:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d52:	89 d0                	mov    eax,edx
c0003d54:	e8 33 ff ff ff       	call   c0003c8c <xname_sum>
c0003d59:	83 c4 1c             	add    esp,0x1c
c0003d5c:	0f b7 d0             	movzx  edx,ax
c0003d5f:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d62:	5b                   	pop    ebx
c0003d63:	5e                   	pop    esi
c0003d64:	5f                   	pop    edi
c0003d65:	5d                   	pop    ebp
c0003d66:	e9 9a dc ff ff       	jmp    c0001a05 <st_word>

c0003d6b <cmp_lfn>:
c0003d6b:	55                   	push   ebp
c0003d6c:	57                   	push   edi
c0003d6d:	89 d7                	mov    edi,edx
c0003d6f:	56                   	push   esi
c0003d70:	53                   	push   ebx
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d78:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d7b:	e8 13 dc ff ff       	call   c0001993 <ld_word>
c0003d80:	66 85 c0             	test   ax,ax
c0003d83:	74 07                	je     c0003d8c <cmp_lfn+0x21>
c0003d85:	31 c0                	xor    eax,eax
c0003d87:	e9 9a 00 00 00       	jmp    c0003e26 <cmp_lfn+0xbb>
c0003d8c:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003d8e:	bd 01 00 00 00       	mov    ebp,0x1
c0003d93:	83 e3 3f             	and    ebx,0x3f
c0003d96:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003d9e:	4b                   	dec    ebx
c0003d9f:	6b db 0d             	imul   ebx,ebx,0xd
c0003da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003da6:	0f b6 80 40 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffc0]
c0003dad:	01 f8                	add    eax,edi
c0003daf:	e8 df db ff ff       	call   c0001993 <ld_word>
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	89 c6                	mov    esi,eax
c0003db9:	74 3c                	je     c0003df7 <cmp_lfn+0x8c>
c0003dbb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dc1:	77 c2                	ja     c0003d85 <cmp_lfn+0x1a>
c0003dc3:	83 ec 0c             	sub    esp,0xc
c0003dc6:	0f b7 c0             	movzx  eax,ax
c0003dc9:	50                   	push   eax
c0003dca:	e8 dc 44 00 00       	call   c00082ab <ff_wtoupper>
c0003dcf:	89 c5                	mov    ebp,eax
c0003dd1:	8d 43 01             	lea    eax,[ebx+0x1]
c0003dd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ddc:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0003de3:	e8 c3 44 00 00       	call   c00082ab <ff_wtoupper>
c0003de8:	83 c4 10             	add    esp,0x10
c0003deb:	39 c5                	cmp    ebp,eax
c0003ded:	75 96                	jne    c0003d85 <cmp_lfn+0x1a>
c0003def:	89 f5                	mov    ebp,esi
c0003df1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003df5:	eb 04                	jmp    c0003dfb <cmp_lfn+0x90>
c0003df7:	66 46                	inc    si
c0003df9:	75 8a                	jne    c0003d85 <cmp_lfn+0x1a>
c0003dfb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003dff:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e04:	75 9c                	jne    c0003da2 <cmp_lfn+0x37>
c0003e06:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e09:	74 16                	je     c0003e21 <cmp_lfn+0xb6>
c0003e0b:	66 85 ed             	test   bp,bp
c0003e0e:	74 11                	je     c0003e21 <cmp_lfn+0xb6>
c0003e10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e14:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e19:	0f 94 c0             	sete   al
c0003e1c:	0f b6 c0             	movzx  eax,al
c0003e1f:	eb 05                	jmp    c0003e26 <cmp_lfn+0xbb>
c0003e21:	b8 01 00 00 00       	mov    eax,0x1
c0003e26:	83 c4 1c             	add    esp,0x1c
c0003e29:	5b                   	pop    ebx
c0003e2a:	5e                   	pop    esi
c0003e2b:	5f                   	pop    edi
c0003e2c:	5d                   	pop    ebp
c0003e2d:	c3                   	ret    

c0003e2e <dir_find>:
c0003e2e:	55                   	push   ebp
c0003e2f:	31 d2                	xor    edx,edx
c0003e31:	57                   	push   edi
c0003e32:	56                   	push   esi
c0003e33:	53                   	push   ebx
c0003e34:	89 c3                	mov    ebx,eax
c0003e36:	83 ec 1c             	sub    esp,0x1c
c0003e39:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e3b:	e8 a2 f0 ff ff       	call   c0002ee2 <dir_sdi>
c0003e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e43:	85 c0                	test   eax,eax
c0003e45:	0f 85 9f 01 00 00    	jne    c0003fea <dir_find+0x1bc>
c0003e4b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e4e:	0f 85 8e 00 00 00    	jne    c0003ee2 <dir_find+0xb4>
c0003e54:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e57:	e8 30 fe ff ff       	call   c0003c8c <xname_sum>
c0003e5c:	89 c5                	mov    ebp,eax
c0003e5e:	31 d2                	xor    edx,edx
c0003e60:	89 d8                	mov    eax,ebx
c0003e62:	e8 8d f8 ff ff       	call   c00036f4 <dir_read>
c0003e67:	85 c0                	test   eax,eax
c0003e69:	0f 85 5f 01 00 00    	jne    c0003fce <dir_find+0x1a0>
c0003e6f:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e72:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e75:	e8 19 db ff ff       	call   c0001993 <ld_word>
c0003e7a:	66 39 e8             	cmp    ax,bp
c0003e7d:	75 df                	jne    c0003e5e <dir_find+0x30>
c0003e7f:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003e83:	31 ff                	xor    edi,edi
c0003e85:	ba 40 00 00 00       	mov    edx,0x40
c0003e8a:	39 f9                	cmp    ecx,edi
c0003e8c:	0f 84 4a 01 00 00    	je     c0003fdc <dir_find+0x1ae>
c0003e92:	f6 c2 1f             	test   dl,0x1f
c0003e95:	75 03                	jne    c0003e9a <dir_find+0x6c>
c0003e97:	83 c2 02             	add    edx,0x2
c0003e9a:	89 d0                	mov    eax,edx
c0003e9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ea0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ea3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ea7:	e8 e7 da ff ff       	call   c0001993 <ld_word>
c0003eac:	83 ec 0c             	sub    esp,0xc
c0003eaf:	0f b7 c0             	movzx  eax,ax
c0003eb2:	50                   	push   eax
c0003eb3:	e8 f3 43 00 00       	call   c00082ab <ff_wtoupper>
c0003eb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ebc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ebf:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec6:	e8 e0 43 00 00       	call   c00082ab <ff_wtoupper>
c0003ecb:	83 c4 10             	add    esp,0x10
c0003ece:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ed2:	75 8a                	jne    c0003e5e <dir_find+0x30>
c0003ed4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ed8:	47                   	inc    edi
c0003ed9:	83 c2 02             	add    edx,0x2
c0003edc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee0:	eb a8                	jmp    c0003e8a <dir_find+0x5c>
c0003ee2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ee9:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eee:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ef3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ef6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ef9:	89 f0                	mov    eax,esi
c0003efb:	e8 6a e2 ff ff       	call   c000216a <move_window>
c0003f00:	85 c0                	test   eax,eax
c0003f02:	0f 85 c6 00 00 00    	jne    c0003fce <dir_find+0x1a0>
c0003f08:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f0b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f0e:	84 c9                	test   cl,cl
c0003f10:	0f 84 bd 00 00 00    	je     c0003fd3 <dir_find+0x1a5>
c0003f16:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f19:	88 d0                	mov    al,dl
c0003f1b:	83 e0 3f             	and    eax,0x3f
c0003f1e:	80 f9 e5             	cmp    cl,0xe5
c0003f21:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f24:	0f 84 87 00 00 00    	je     c0003fb1 <dir_find+0x183>
c0003f2a:	80 e2 08             	and    dl,0x8
c0003f2d:	74 06                	je     c0003f35 <dir_find+0x107>
c0003f2f:	3c 0f                	cmp    al,0xf
c0003f31:	75 7e                	jne    c0003fb1 <dir_find+0x183>
c0003f33:	eb 04                	jmp    c0003f39 <dir_find+0x10b>
c0003f35:	3c 0f                	cmp    al,0xf
c0003f37:	75 4c                	jne    c0003f85 <dir_find+0x157>
c0003f39:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f3d:	75 7e                	jne    c0003fbd <dir_find+0x18f>
c0003f3f:	f6 c1 40             	test   cl,0x40
c0003f42:	74 12                	je     c0003f56 <dir_find+0x128>
c0003f44:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f47:	83 e1 bf             	and    ecx,0xffffffbf
c0003f4a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f4e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f51:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f54:	eb 06                	jmp    c0003f5c <dir_find+0x12e>
c0003f56:	89 f8                	mov    eax,edi
c0003f58:	38 c8                	cmp    al,cl
c0003f5a:	75 5c                	jne    c0003fb8 <dir_find+0x18a>
c0003f5c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f60:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f65:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f68:	75 53                	jne    c0003fbd <dir_find+0x18f>
c0003f6a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f6d:	89 ea                	mov    edx,ebp
c0003f6f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003f73:	e8 f3 fd ff ff       	call   c0003d6b <cmp_lfn>
c0003f78:	85 c0                	test   eax,eax
c0003f7a:	74 41                	je     c0003fbd <dir_find+0x18f>
c0003f7c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003f80:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f83:	eb 38                	jmp    c0003fbd <dir_find+0x18f>
c0003f85:	89 f8                	mov    eax,edi
c0003f87:	84 c0                	test   al,al
c0003f89:	75 0d                	jne    c0003f98 <dir_find+0x16a>
c0003f8b:	89 e8                	mov    eax,ebp
c0003f8d:	e8 bd de ff ff       	call   c0001e4f <sum_sfn>
c0003f92:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003f96:	74 52                	je     c0003fea <dir_find+0x1bc>
c0003f98:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003f9c:	75 13                	jne    c0003fb1 <dir_find+0x183>
c0003f9e:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fa1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fa6:	89 e8                	mov    eax,ebp
c0003fa8:	e8 85 da ff ff       	call   c0001a32 <mem_cmp>
c0003fad:	85 c0                	test   eax,eax
c0003faf:	74 39                	je     c0003fea <dir_find+0x1bc>
c0003fb1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fb8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fbd:	31 d2                	xor    edx,edx
c0003fbf:	89 d8                	mov    eax,ebx
c0003fc1:	e8 76 f4 ff ff       	call   c000343c <dir_next>
c0003fc6:	85 c0                	test   eax,eax
c0003fc8:	0f 84 25 ff ff ff    	je     c0003ef3 <dir_find+0xc5>
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	eb 17                	jmp    c0003fea <dir_find+0x1bc>
c0003fd3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003fda:	eb 0e                	jmp    c0003fea <dir_find+0x1bc>
c0003fdc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fdf:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0003fe4:	0f 85 74 fe ff ff    	jne    c0003e5e <dir_find+0x30>
c0003fea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003fed:	83 c4 1c             	add    esp,0x1c
c0003ff0:	5b                   	pop    ebx
c0003ff1:	5e                   	pop    esi
c0003ff2:	5f                   	pop    edi
c0003ff3:	5d                   	pop    ebp
c0003ff4:	c3                   	ret    

c0003ff5 <dir_register>:
c0003ff5:	55                   	push   ebp
c0003ff6:	57                   	push   edi
c0003ff7:	56                   	push   esi
c0003ff8:	be 06 00 00 00       	mov    esi,0x6
c0003ffd:	53                   	push   ebx
c0003ffe:	83 ec 6c             	sub    esp,0x6c
c0004001:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004005:	0f 85 63 02 00 00    	jne    c000426e <dir_register+0x279>
c000400b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000400d:	31 ff                	xor    edi,edi
c000400f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004012:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004017:	74 03                	je     c000401c <dir_register+0x27>
c0004019:	47                   	inc    edi
c000401a:	eb f6                	jmp    c0004012 <dir_register+0x1d>
c000401c:	89 c3                	mov    ebx,eax
c000401e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004022:	0f 85 e1 00 00 00    	jne    c0004109 <dir_register+0x114>
c0004028:	83 c7 0e             	add    edi,0xe
c000402b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004030:	89 f8                	mov    eax,edi
c0004032:	31 d2                	xor    edx,edx
c0004034:	f7 f1                	div    ecx
c0004036:	89 c7                	mov    edi,eax
c0004038:	8d 50 02             	lea    edx,[eax+0x2]
c000403b:	89 d8                	mov    eax,ebx
c000403d:	e8 2c f8 ff ff       	call   c000386e <dir_alloc>
c0004042:	89 c6                	mov    esi,eax
c0004044:	85 c0                	test   eax,eax
c0004046:	0f 85 22 02 00 00    	jne    c000426e <dir_register+0x279>
c000404c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004052:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004055:	c1 e7 05             	shl    edi,0x5
c0004058:	29 f8                	sub    eax,edi
c000405a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000405d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004060:	a8 04                	test   al,0x4
c0004062:	0f 84 91 00 00 00    	je     c00040f9 <dir_register+0x104>
c0004068:	83 e0 fb             	and    eax,0xfffffffb
c000406b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000406e:	89 d8                	mov    eax,ebx
c0004070:	e8 3d ec ff ff       	call   c0002cb2 <fill_first_frag>
c0004075:	85 c0                	test   eax,eax
c0004077:	0f 85 ef 01 00 00    	jne    c000426c <dir_register+0x277>
c000407d:	83 c9 ff             	or     ecx,0xffffffff
c0004080:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004083:	89 d8                	mov    eax,ebx
c0004085:	e8 f3 eb ff ff       	call   c0002c7d <fill_last_frag>
c000408a:	85 c0                	test   eax,eax
c000408c:	0f 85 da 01 00 00    	jne    c000426c <dir_register+0x277>
c0004092:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004096:	74 61                	je     c00040f9 <dir_register+0x104>
c0004098:	89 da                	mov    edx,ebx
c000409a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000409e:	e8 04 f6 ff ff       	call   c00036a7 <load_obj_xdir>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 85 c1 01 00 00    	jne    c000426c <dir_register+0x277>
c00040ab:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040af:	c1 e2 09             	shl    edx,0x9
c00040b2:	31 c9                	xor    ecx,ecx
c00040b4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040b7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040ba:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040bd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040c3:	83 c0 38             	add    eax,0x38
c00040c6:	e8 41 d9 ff ff       	call   c0001a0c <st_qword>
c00040cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ce:	83 c0 28             	add    eax,0x28
c00040d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040d4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040d7:	e8 30 d9 ff ff       	call   c0001a0c <st_qword>
c00040dc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040df:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040e2:	83 c8 01             	or     eax,0x1
c00040e5:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040ec:	e8 f5 f7 ff ff       	call   c00038e6 <store_xdir>
c00040f1:	85 c0                	test   eax,eax
c00040f3:	0f 85 73 01 00 00    	jne    c000426c <dir_register+0x277>
c00040f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ff:	e8 c0 fb ff ff       	call   c0003cc4 <create_xdir>
c0004104:	e9 65 01 00 00       	jmp    c000426e <dir_register+0x279>
c0004109:	8d 40 3c             	lea    eax,[eax+0x3c]
c000410c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004115:	89 c2                	mov    edx,eax
c0004117:	8d 44 24 14          	lea    eax,[esp+0x14]
c000411b:	e8 f2 d8 ff ff       	call   c0001a12 <mem_cpy>
c0004120:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004125:	74 58                	je     c000417f <dir_register+0x18a>
c0004127:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000412b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004133:	83 ec 0c             	sub    esp,0xc
c0004136:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000413d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004141:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004145:	e8 49 dc ff ff       	call   c0001d93 <gen_numname>
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 dd fc ff ff       	call   c0003e2e <dir_find>
c0004151:	83 c4 10             	add    esp,0x10
c0004154:	89 c6                	mov    esi,eax
c0004156:	85 c0                	test   eax,eax
c0004158:	75 15                	jne    c000416f <dir_register+0x17a>
c000415a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000415e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004163:	75 ce                	jne    c0004133 <dir_register+0x13e>
c0004165:	be 07 00 00 00       	mov    esi,0x7
c000416a:	e9 ff 00 00 00       	jmp    c000426e <dir_register+0x279>
c000416f:	83 f8 04             	cmp    eax,0x4
c0004172:	0f 85 f6 00 00 00    	jne    c000426e <dir_register+0x279>
c0004178:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000417c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000417f:	b9 01 00 00 00       	mov    ecx,0x1
c0004184:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004189:	74 0f                	je     c000419a <dir_register+0x1a5>
c000418b:	b9 0d 00 00 00       	mov    ecx,0xd
c0004190:	8d 47 0c             	lea    eax,[edi+0xc]
c0004193:	31 d2                	xor    edx,edx
c0004195:	f7 f1                	div    ecx
c0004197:	8d 48 01             	lea    ecx,[eax+0x1]
c000419a:	89 ca                	mov    edx,ecx
c000419c:	89 d8                	mov    eax,ebx
c000419e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041a2:	e8 c7 f6 ff ff       	call   c000386e <dir_alloc>
c00041a7:	89 c6                	mov    esi,eax
c00041a9:	85 c0                	test   eax,eax
c00041ab:	0f 85 bd 00 00 00    	jne    c000426e <dir_register+0x279>
c00041b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041b5:	89 cf                	mov    edi,ecx
c00041b7:	4f                   	dec    edi
c00041b8:	74 6d                	je     c0004227 <dir_register+0x232>
c00041ba:	89 f8                	mov    eax,edi
c00041bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041bf:	c1 e0 05             	shl    eax,0x5
c00041c2:	29 c2                	sub    edx,eax
c00041c4:	89 d8                	mov    eax,ebx
c00041c6:	e8 17 ed ff ff       	call   c0002ee2 <dir_sdi>
c00041cb:	89 c6                	mov    esi,eax
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 99 00 00 00    	jne    c000426e <dir_register+0x279>
c00041d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041d9:	e8 71 dc ff ff       	call   c0001e4f <sum_sfn>
c00041de:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00041e2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041e8:	89 e8                	mov    eax,ebp
c00041ea:	e8 7b df ff ff       	call   c000216a <move_window>
c00041ef:	89 c6                	mov    esi,eax
c00041f1:	85 c0                	test   eax,eax
c00041f3:	75 79                	jne    c000426e <dir_register+0x279>
c00041f5:	83 ec 0c             	sub    esp,0xc
c00041f8:	89 f8                	mov    eax,edi
c00041fa:	0f b6 c8             	movzx  ecx,al
c00041fd:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0004202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004205:	52                   	push   edx
c0004206:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004209:	e8 01 db ff ff       	call   c0001d0f <put_lfn>
c000420e:	31 d2                	xor    edx,edx
c0004210:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004214:	89 d8                	mov    eax,ebx
c0004216:	e8 21 f2 ff ff       	call   c000343c <dir_next>
c000421b:	83 c4 10             	add    esp,0x10
c000421e:	89 c6                	mov    esi,eax
c0004220:	85 c0                	test   eax,eax
c0004222:	75 4a                	jne    c000426e <dir_register+0x279>
c0004224:	4f                   	dec    edi
c0004225:	75 bb                	jne    c00041e2 <dir_register+0x1ed>
c0004227:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000422a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000422d:	89 e8                	mov    eax,ebp
c000422f:	e8 36 df ff ff       	call   c000216a <move_window>
c0004234:	89 c6                	mov    esi,eax
c0004236:	85 c0                	test   eax,eax
c0004238:	75 34                	jne    c000426e <dir_register+0x279>
c000423a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000423d:	b9 20 00 00 00       	mov    ecx,0x20
c0004242:	31 d2                	xor    edx,edx
c0004244:	e8 de d7 ff ff       	call   c0001a27 <mem_set>
c0004249:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004250:	b9 0b 00 00 00       	mov    ecx,0xb
c0004255:	e8 b8 d7 ff ff       	call   c0001a12 <mem_cpy>
c000425a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000425d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004260:	83 e0 18             	and    eax,0x18
c0004263:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004266:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000426a:	eb 02                	jmp    c000426e <dir_register+0x279>
c000426c:	89 c6                	mov    esi,eax
c000426e:	83 c4 6c             	add    esp,0x6c
c0004271:	89 f0                	mov    eax,esi
c0004273:	5b                   	pop    ebx
c0004274:	5e                   	pop    esi
c0004275:	5f                   	pop    edi
c0004276:	5d                   	pop    ebp
c0004277:	c3                   	ret    

c0004278 <sync_fs>:
c0004278:	56                   	push   esi
c0004279:	53                   	push   ebx
c000427a:	53                   	push   ebx
c000427b:	89 c3                	mov    ebx,eax
c000427d:	e8 54 de ff ff       	call   c00020d6 <sync_window>
c0004282:	85 c0                	test   eax,eax
c0004284:	0f 85 b1 00 00 00    	jne    c000433b <sync_fs+0xc3>
c000428a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000428d:	0f 85 8e 00 00 00    	jne    c0004321 <sync_fs+0xa9>
c0004293:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004297:	0f 85 84 00 00 00    	jne    c0004321 <sync_fs+0xa9>
c000429d:	8d 73 54             	lea    esi,[ebx+0x54]
c00042a0:	b9 00 02 00 00       	mov    ecx,0x200
c00042a5:	31 d2                	xor    edx,edx
c00042a7:	89 f0                	mov    eax,esi
c00042a9:	e8 79 d7 ff ff       	call   c0001a27 <mem_set>
c00042ae:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042b4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042b9:	e8 47 d7 ff ff       	call   c0001a05 <st_word>
c00042be:	ba 52 52 61 41       	mov    edx,0x41615252
c00042c3:	89 f0                	mov    eax,esi
c00042c5:	e8 3f d7 ff ff       	call   c0001a09 <st_dword>
c00042ca:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042d0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042d5:	e8 2f d7 ff ff       	call   c0001a09 <st_dword>
c00042da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042dd:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042e3:	e8 21 d7 ff ff       	call   c0001a09 <st_dword>
c00042e8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042eb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00042f1:	e8 13 d7 ff ff       	call   c0001a09 <st_dword>
c00042f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00042f9:	83 c0 01             	add    eax,0x1
c00042fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042ff:	83 d2 00             	adc    edx,0x0
c0004302:	83 ec 0c             	sub    esp,0xc
c0004305:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004308:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000430b:	6a 01                	push   0x1
c000430d:	52                   	push   edx
c000430e:	50                   	push   eax
c000430f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004313:	56                   	push   esi
c0004314:	50                   	push   eax
c0004315:	e8 44 d6 ff ff       	call   c000195e <disk_write>
c000431a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000431e:	83 c4 20             	add    esp,0x20
c0004321:	51                   	push   ecx
c0004322:	6a 00                	push   0x0
c0004324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004328:	6a 00                	push   0x0
c000432a:	50                   	push   eax
c000432b:	e8 44 d6 ff ff       	call   c0001974 <disk_ioctl>
c0004330:	83 c4 10             	add    esp,0x10
c0004333:	85 c0                	test   eax,eax
c0004335:	0f 95 c0             	setne  al
c0004338:	0f b6 c0             	movzx  eax,al
c000433b:	5a                   	pop    edx
c000433c:	5b                   	pop    ebx
c000433d:	5e                   	pop    esi
c000433e:	c3                   	ret    

c000433f <create_partition>:
c000433f:	55                   	push   ebp
c0004340:	57                   	push   edi
c0004341:	56                   	push   esi
c0004342:	53                   	push   ebx
c0004343:	83 ec 60             	sub    esp,0x60
c0004346:	0f b6 c0             	movzx  eax,al
c0004349:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000434d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004351:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004355:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004359:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000435d:	50                   	push   eax
c000435e:	6a 01                	push   0x1
c0004360:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004364:	e8 0b d6 ff ff       	call   c0001974 <disk_ioctl>
c0004369:	83 c4 10             	add    esp,0x10
c000436c:	85 c0                	test   eax,eax
c000436e:	74 0a                	je     c000437a <create_partition+0x3b>
c0004370:	b8 01 00 00 00       	mov    eax,0x1
c0004375:	e9 73 05 00 00       	jmp    c00048ed <create_partition+0x5ae>
c000437a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000437e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000438a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000438f:	0f 86 ed 03 00 00    	jbe    c0004782 <create_partition+0x443>
c0004395:	83 c0 df             	add    eax,0xffffffdf
c0004398:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043a0:	83 d2 ff             	adc    edx,0xffffffff
c00043a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043af:	83 c0 bd             	add    eax,0xffffffbd
c00043b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043b6:	83 d2 ff             	adc    edx,0xffffffff
c00043b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043c1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043d0:	be 22 00 00 00       	mov    esi,0x22
c00043d5:	31 ff                	xor    edi,edi
c00043d7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043df:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00043f3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00043f9:	75 0e                	jne    c0004409 <create_partition+0xca>
c00043fb:	b9 00 02 00 00       	mov    ecx,0x200
c0004400:	31 d2                	xor    edx,edx
c0004402:	89 d8                	mov    eax,ebx
c0004404:	e8 1e d6 ff ff       	call   c0001a27 <mem_set>
c0004409:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000440d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004415:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004418:	0f 84 23 01 00 00    	je     c0004541 <create_partition+0x202>
c000441e:	89 f0                	mov    eax,esi
c0004420:	89 fa                	mov    edx,edi
c0004422:	05 ff 07 00 00       	add    eax,0x7ff
c0004427:	83 d2 00             	adc    edx,0x0
c000442a:	89 c1                	mov    ecx,eax
c000442c:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004436:	89 ce                	mov    esi,ecx
c0004438:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000443c:	89 d7                	mov    edi,edx
c000443e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004442:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004446:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004449:	89 04 24             	mov    DWORD PTR [esp],eax
c000444c:	b8 64 00 00 00       	mov    eax,0x64
c0004451:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004454:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004458:	b8 00 00 00 00       	mov    eax,0x0
c000445d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004461:	72 41                	jb     c00044a4 <create_partition+0x165>
c0004463:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000446b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004470:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004474:	01 c1                	add    ecx,eax
c0004476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000447a:	f7 24 24             	mul    DWORD PTR [esp]
c000447d:	6a 00                	push   0x0
c000447f:	01 ca                	add    edx,ecx
c0004481:	6a 64                	push   0x64
c0004483:	52                   	push   edx
c0004484:	50                   	push   eax
c0004485:	e8 92 ab 01 00       	call   c001f01c <__udivdi3>
c000448a:	83 c4 10             	add    esp,0x10
c000448d:	05 ff 07 00 00       	add    eax,0x7ff
c0004492:	83 d2 00             	adc    edx,0x0
c0004495:	89 c1                	mov    ecx,eax
c0004497:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000449d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044a1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ab:	01 f0                	add    eax,esi
c00044ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044b1:	11 fa                	adc    edx,edi
c00044b3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044b7:	19 d1                	sbb    ecx,edx
c00044b9:	73 2e                	jae    c00044e9 <create_partition+0x1aa>
c00044bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044bf:	89 f8                	mov    eax,edi
c00044c1:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044d4:	73 6b                	jae    c0004541 <create_partition+0x202>
c00044d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044de:	29 f0                	sub    eax,esi
c00044e0:	19 fa                	sbb    edx,edi
c00044e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ed:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f0:	74 4f                	je     c0004541 <create_partition+0x202>
c00044f2:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00044f5:	b9 10 00 00 00       	mov    ecx,0x10
c00044fa:	ba 50 00 02 c0       	mov    edx,0xc0020050
c00044ff:	e8 0e d5 ff ff       	call   c0001a12 <mem_cpy>
c0004504:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004508:	b9 10 00 00 00       	mov    ecx,0x10
c000450d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004511:	e8 49 db ff ff       	call   c000205f <make_rand>
c0004516:	89 f2                	mov    edx,esi
c0004518:	89 f9                	mov    ecx,edi
c000451a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000451e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004522:	e8 e5 d4 ff ff       	call   c0001a0c <st_qword>
c0004527:	03 34 24             	add    esi,DWORD PTR [esp]
c000452a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000452e:	89 f2                	mov    edx,esi
c0004530:	89 f9                	mov    ecx,edi
c0004532:	83 c2 ff             	add    edx,0xffffffff
c0004535:	83 d1 ff             	adc    ecx,0xffffffff
c0004538:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453c:	e8 cb d4 ff ff       	call   c0001a0c <st_qword>
c0004541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004545:	83 e8 80             	sub    eax,0xffffff80
c0004548:	89 c5                	mov    ebp,eax
c000454a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000454e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004554:	75 6b                	jne    c00045c1 <create_partition+0x282>
c0004556:	45                   	inc    ebp
c0004557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000455b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004560:	e8 56 da ff ff       	call   c0001fbb <crc32>
c0004565:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000456b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000456f:	75 e5                	jne    c0004556 <create_partition+0x217>
c0004571:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004575:	83 ec 0c             	sub    esp,0xc
c0004578:	c1 ed 09             	shr    ebp,0x9
c000457b:	31 d2                	xor    edx,edx
c000457d:	6a 01                	push   0x1
c000457f:	52                   	push   edx
c0004580:	8d 45 02             	lea    eax,[ebp+0x2]
c0004583:	50                   	push   eax
c0004584:	53                   	push   ebx
c0004585:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004589:	e8 d0 d3 ff ff       	call   c000195e <disk_write>
c000458e:	83 c4 20             	add    esp,0x20
c0004591:	85 c0                	test   eax,eax
c0004593:	0f 85 d7 fd ff ff    	jne    c0004370 <create_partition+0x31>
c0004599:	83 ec 0c             	sub    esp,0xc
c000459c:	89 e8                	mov    eax,ebp
c000459e:	31 d2                	xor    edx,edx
c00045a0:	6a 01                	push   0x1
c00045a2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045a6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045aa:	52                   	push   edx
c00045ab:	50                   	push   eax
c00045ac:	53                   	push   ebx
c00045ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045b1:	e8 a8 d3 ff ff       	call   c000195e <disk_write>
c00045b6:	83 c4 20             	add    esp,0x20
c00045b9:	85 c0                	test   eax,eax
c00045bb:	0f 85 af fd ff ff    	jne    c0004370 <create_partition+0x31>
c00045c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045c9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ce:	74 0d                	je     c00045dd <create_partition+0x29e>
c00045d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045d8:	e9 12 fe ff ff       	jmp    c00043ef <create_partition+0xb0>
c00045dd:	31 d2                	xor    edx,edx
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	89 d8                	mov    eax,ebx
c00045e6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045e9:	e8 39 d4 ff ff       	call   c0001a27 <mem_set>
c00045ee:	b9 10 00 00 00       	mov    ecx,0x10
c00045f3:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c00045f8:	89 d8                	mov    eax,ebx
c00045fa:	e8 13 d4 ff ff       	call   c0001a12 <mem_cpy>
c00045ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004603:	f7 d2                	not    edx
c0004605:	8d 43 58             	lea    eax,[ebx+0x58]
c0004608:	8d 7b 48             	lea    edi,[ebx+0x48]
c000460b:	e8 f9 d3 ff ff       	call   c0001a09 <st_dword>
c0004610:	8d 43 18             	lea    eax,[ebx+0x18]
c0004613:	31 c9                	xor    ecx,ecx
c0004615:	ba 01 00 00 00       	mov    edx,0x1
c000461a:	89 04 24             	mov    DWORD PTR [esp],eax
c000461d:	e8 ea d3 ff ff       	call   c0001a0c <st_qword>
c0004622:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004626:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000462a:	83 c2 ff             	add    edx,0xffffffff
c000462d:	89 e8                	mov    eax,ebp
c000462f:	83 d1 ff             	adc    ecx,0xffffffff
c0004632:	e8 d5 d3 ff ff       	call   c0001a0c <st_qword>
c0004637:	31 c9                	xor    ecx,ecx
c0004639:	8d 43 28             	lea    eax,[ebx+0x28]
c000463c:	ba 22 00 00 00       	mov    edx,0x22
c0004641:	e8 c6 d3 ff ff       	call   c0001a0c <st_qword>
c0004646:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000464a:	83 c2 de             	add    edx,0xffffffde
c000464d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004651:	83 d1 ff             	adc    ecx,0xffffffff
c0004654:	8d 43 30             	lea    eax,[ebx+0x30]
c0004657:	e8 b0 d3 ff ff       	call   c0001a0c <st_qword>
c000465c:	8d 43 54             	lea    eax,[ebx+0x54]
c000465f:	ba 80 00 00 00       	mov    edx,0x80
c0004664:	31 f6                	xor    esi,esi
c0004666:	e8 9e d3 ff ff       	call   c0001a09 <st_dword>
c000466b:	8d 43 50             	lea    eax,[ebx+0x50]
c000466e:	ba 80 00 00 00       	mov    edx,0x80
c0004673:	e8 91 d3 ff ff       	call   c0001a09 <st_dword>
c0004678:	ba 02 00 00 00       	mov    edx,0x2
c000467d:	89 f8                	mov    eax,edi
c000467f:	e8 85 d3 ff ff       	call   c0001a09 <st_dword>
c0004684:	8d 53 38             	lea    edx,[ebx+0x38]
c0004687:	b9 10 00 00 00       	mov    ecx,0x10
c000468c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004690:	e8 ca d9 ff ff       	call   c000205f <make_rand>
c0004695:	83 c8 ff             	or     eax,0xffffffff
c0004698:	46                   	inc    esi
c0004699:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000469e:	e8 18 d9 ff ff       	call   c0001fbb <crc32>
c00046a3:	83 fe 5c             	cmp    esi,0x5c
c00046a6:	75 f0                	jne    c0004698 <create_partition+0x359>
c00046a8:	f7 d0                	not    eax
c00046aa:	8d 73 10             	lea    esi,[ebx+0x10]
c00046ad:	89 c2                	mov    edx,eax
c00046af:	89 f0                	mov    eax,esi
c00046b1:	e8 53 d3 ff ff       	call   c0001a09 <st_dword>
c00046b6:	83 ec 0c             	sub    esp,0xc
c00046b9:	6a 01                	push   0x1
c00046bb:	6a 00                	push   0x0
c00046bd:	6a 01                	push   0x1
c00046bf:	53                   	push   ebx
c00046c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046c4:	e8 95 d2 ff ff       	call   c000195e <disk_write>
c00046c9:	83 c4 20             	add    esp,0x20
c00046cc:	85 c0                	test   eax,eax
c00046ce:	0f 85 9c fc ff ff    	jne    c0004370 <create_partition+0x31>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046e2:	83 d1 ff             	adc    ecx,0xffffffff
c00046e5:	e8 22 d3 ff ff       	call   c0001a0c <st_qword>
c00046ea:	ba 01 00 00 00       	mov    edx,0x1
c00046ef:	31 c9                	xor    ecx,ecx
c00046f1:	89 e8                	mov    eax,ebp
c00046f3:	e8 14 d3 ff ff       	call   c0001a0c <st_qword>
c00046f8:	89 f8                	mov    eax,edi
c00046fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00046fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004702:	e8 05 d3 ff ff       	call   c0001a0c <st_qword>
c0004707:	89 f0                	mov    eax,esi
c0004709:	31 d2                	xor    edx,edx
c000470b:	31 ff                	xor    edi,edi
c000470d:	e8 f7 d2 ff ff       	call   c0001a09 <st_dword>
c0004712:	83 c8 ff             	or     eax,0xffffffff
c0004715:	47                   	inc    edi
c0004716:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000471b:	e8 9b d8 ff ff       	call   c0001fbb <crc32>
c0004720:	83 ff 5c             	cmp    edi,0x5c
c0004723:	75 f0                	jne    c0004715 <create_partition+0x3d6>
c0004725:	f7 d0                	not    eax
c0004727:	89 c2                	mov    edx,eax
c0004729:	89 f0                	mov    eax,esi
c000472b:	e8 d9 d2 ff ff       	call   c0001a09 <st_dword>
c0004730:	83 ec 0c             	sub    esp,0xc
c0004733:	6a 01                	push   0x1
c0004735:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004739:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000473d:	83 c0 ff             	add    eax,0xffffffff
c0004740:	83 d2 ff             	adc    edx,0xffffffff
c0004743:	52                   	push   edx
c0004744:	50                   	push   eax
c0004745:	53                   	push   ebx
c0004746:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000474a:	e8 0f d2 ff ff       	call   c000195e <disk_write>
c000474f:	83 c4 20             	add    esp,0x20
c0004752:	85 c0                	test   eax,eax
c0004754:	0f 85 16 fc ff ff    	jne    c0004370 <create_partition+0x31>
c000475a:	31 d2                	xor    edx,edx
c000475c:	89 d8                	mov    eax,ebx
c000475e:	b9 00 02 00 00       	mov    ecx,0x200
c0004763:	e8 bf d2 ff ff       	call   c0001a27 <mem_set>
c0004768:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000476e:	b9 10 00 00 00       	mov    ecx,0x10
c0004773:	ba 50 ff 01 c0       	mov    edx,0xc001ff50
c0004778:	e8 95 d2 ff ff       	call   c0001a12 <mem_cpy>
c000477d:	e9 3d 01 00 00       	jmp    c00048bf <create_partition+0x580>
c0004782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004786:	b9 05 00 00 00       	mov    ecx,0x5
c000478b:	89 04 24             	mov    DWORD PTR [esp],eax
c000478e:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004793:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004798:	31 d2                	xor    edx,edx
c000479a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000479d:	f7 f6                	div    esi
c000479f:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047a4:	76 0c                	jbe    c00047b2 <create_partition+0x473>
c00047a6:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c00047aa:	49                   	dec    ecx
c00047ab:	75 e6                	jne    c0004793 <create_partition+0x454>
c00047ad:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c00047b2:	b9 00 02 00 00       	mov    ecx,0x200
c00047b7:	31 d2                	xor    edx,edx
c00047b9:	89 d8                	mov    eax,ebx
c00047bb:	bd 3f 00 00 00       	mov    ebp,0x3f
c00047c0:	e8 62 d2 ff ff       	call   c0001a27 <mem_set>
c00047c5:	b9 64 00 00 00       	mov    ecx,0x64
c00047ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cd:	31 d2                	xor    edx,edx
c00047cf:	f7 f1                	div    ecx
c00047d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00047d5:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c00047db:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00047e3:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00047e8:	0f 96 c2             	setbe  dl
c00047eb:	85 ed                	test   ebp,ebp
c00047ed:	0f 95 c0             	setne  al
c00047f0:	84 c2                	test   dl,al
c00047f2:	0f 84 c7 00 00 00    	je     c00048bf <create_partition+0x580>
c00047f8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00047fb:	0f 83 be 00 00 00    	jae    c00048bf <create_partition+0x580>
c0004801:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004805:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0004809:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c000480c:	83 fe 64             	cmp    esi,0x64
c000480f:	77 0c                	ja     c000481d <create_partition+0x4de>
c0004811:	74 07                	je     c000481a <create_partition+0x4db>
c0004813:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c0004818:	eb 03                	jmp    c000481d <create_partition+0x4de>
c000481a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000481d:	89 e8                	mov    eax,ebp
c000481f:	01 f0                	add    eax,esi
c0004821:	72 05                	jb     c0004828 <create_partition+0x4e9>
c0004823:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004826:	76 07                	jbe    c000482f <create_partition+0x4f0>
c0004828:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000482b:	29 ee                	sub    esi,ebp
c000482d:	eb 08                	jmp    c0004837 <create_partition+0x4f8>
c000482f:	85 f6                	test   esi,esi
c0004831:	0f 84 88 00 00 00    	je     c00048bf <create_partition+0x580>
c0004837:	89 c8                	mov    eax,ecx
c0004839:	89 ea                	mov    edx,ebp
c000483b:	e8 c9 d1 ff ff       	call   c0001a09 <st_dword>
c0004840:	89 f2                	mov    edx,esi
c0004842:	bf 3f 00 00 00       	mov    edi,0x3f
c0004847:	8d 41 04             	lea    eax,[ecx+0x4]
c000484a:	e8 ba d1 ff ff       	call   c0001a09 <st_dword>
c000484f:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004853:	31 d2                	xor    edx,edx
c0004855:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004859:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000485c:	83 c1 10             	add    ecx,0x10
c000485f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004864:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004868:	89 e8                	mov    eax,ebp
c000486a:	f7 f7                	div    edi
c000486c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004870:	31 d2                	xor    edx,edx
c0004872:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004876:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004879:	89 c2                	mov    edx,eax
c000487b:	c1 ea 02             	shr    edx,0x2
c000487e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004882:	47                   	inc    edi
c0004883:	01 f5                	add    ebp,esi
c0004885:	83 e2 c0             	and    edx,0xffffffc0
c0004888:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000488b:	09 fa                	or     edx,edi
c000488d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004890:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004893:	bf 3f 00 00 00       	mov    edi,0x3f
c0004898:	31 d2                	xor    edx,edx
c000489a:	f7 f7                	div    edi
c000489c:	89 d6                	mov    esi,edx
c000489e:	31 d2                	xor    edx,edx
c00048a0:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00048a4:	89 c7                	mov    edi,eax
c00048a6:	46                   	inc    esi
c00048a7:	c1 ef 02             	shr    edi,0x2
c00048aa:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c00048ad:	83 e7 c0             	and    edi,0xffffffc0
c00048b0:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c00048b3:	09 fe                	or     esi,edi
c00048b5:	89 f2                	mov    edx,esi
c00048b7:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c00048ba:	e9 24 ff ff ff       	jmp    c00047e3 <create_partition+0x4a4>
c00048bf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048ca:	e8 36 d1 ff ff       	call   c0001a05 <st_word>
c00048cf:	83 ec 0c             	sub    esp,0xc
c00048d2:	6a 01                	push   0x1
c00048d4:	6a 00                	push   0x0
c00048d6:	6a 00                	push   0x0
c00048d8:	53                   	push   ebx
c00048d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048dd:	e8 7c d0 ff ff       	call   c000195e <disk_write>
c00048e2:	83 c4 20             	add    esp,0x20
c00048e5:	85 c0                	test   eax,eax
c00048e7:	0f 95 c0             	setne  al
c00048ea:	0f b6 c0             	movzx  eax,al
c00048ed:	83 c4 5c             	add    esp,0x5c
c00048f0:	5b                   	pop    ebx
c00048f1:	5e                   	pop    esi
c00048f2:	5f                   	pop    edi
c00048f3:	5d                   	pop    ebp
c00048f4:	c3                   	ret    

c00048f5 <get_fileinfo>:
c00048f5:	55                   	push   ebp
c00048f6:	57                   	push   edi
c00048f7:	56                   	push   esi
c00048f8:	53                   	push   ebx
c00048f9:	83 ec 1c             	sub    esp,0x1c
c00048fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00048fe:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004902:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004905:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004909:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000490c:	0f 84 dc 01 00 00    	je     c0004aee <get_fileinfo+0x1f9>
c0004912:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004915:	75 0f                	jne    c0004926 <get_fileinfo+0x31>
c0004917:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491a:	83 c4 1c             	add    esp,0x1c
c000491d:	5b                   	pop    ebx
c000491e:	5e                   	pop    esi
c000491f:	5f                   	pop    edi
c0004920:	5d                   	pop    ebp
c0004921:	e9 70 d5 ff ff       	jmp    c0001e96 <get_xfileinfo>
c0004926:	89 d3                	mov    ebx,edx
c0004928:	89 c6                	mov    esi,eax
c000492a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c000492e:	74 6a                	je     c000499a <get_fileinfo+0xa5>
c0004930:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004938:	31 ed                	xor    ebp,ebp
c000493a:	31 ff                	xor    edi,edi
c000493c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004944:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004947:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494b:	66 85 d2             	test   dx,dx
c000494e:	74 3e                	je     c000498e <get_fileinfo+0x99>
c0004950:	66 85 ed             	test   bp,bp
c0004953:	75 0c                	jne    c0004961 <get_fileinfo+0x6c>
c0004955:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495b:	66 3d ff 07          	cmp    ax,0x7ff
c000495f:	76 22                	jbe    c0004983 <get_fileinfo+0x8e>
c0004961:	89 e8                	mov    eax,ebp
c0004963:	b9 ff 00 00 00       	mov    ecx,0xff
c0004968:	c1 e0 10             	shl    eax,0x10
c000496b:	29 f9                	sub    ecx,edi
c000496d:	09 d0                	or     eax,edx
c000496f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004973:	e8 bb d1 ff ff       	call   c0001b33 <put_utf>
c0004978:	84 c0                	test   al,al
c000497a:	74 10                	je     c000498c <get_fileinfo+0x97>
c000497c:	0f b6 c0             	movzx  eax,al
c000497f:	01 c7                	add    edi,eax
c0004981:	31 d2                	xor    edx,edx
c0004983:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004988:	89 d5                	mov    ebp,edx
c000498a:	eb b0                	jmp    c000493c <get_fileinfo+0x47>
c000498c:	31 ff                	xor    edi,edi
c000498e:	66 85 ed             	test   bp,bp
c0004991:	74 02                	je     c0004995 <get_fileinfo+0xa0>
c0004993:	31 ff                	xor    edi,edi
c0004995:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499a:	31 ff                	xor    edi,edi
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	83 f9 0a             	cmp    ecx,0xa
c00049a1:	0f 87 ad 00 00 00    	ja     c0004a54 <get_fileinfo+0x15f>
c00049a7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049aa:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049ad:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b1:	66 83 fa 20          	cmp    dx,0x20
c00049b5:	0f 84 92 00 00 00    	je     c0004a4d <get_fileinfo+0x158>
c00049bb:	66 83 fa 05          	cmp    dx,0x5
c00049bf:	75 05                	jne    c00049c6 <get_fileinfo+0xd1>
c00049c1:	ba e5 00 00 00       	mov    edx,0xe5
c00049c6:	83 fd 09             	cmp    ebp,0x9
c00049c9:	75 0b                	jne    c00049d6 <get_fileinfo+0xe1>
c00049cb:	83 ff 0b             	cmp    edi,0xb
c00049ce:	77 06                	ja     c00049d6 <get_fileinfo+0xe1>
c00049d0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d5:	47                   	inc    edi
c00049d6:	0f b7 c2             	movzx  eax,dx
c00049d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049dd:	e8 85 d0 ff ff       	call   c0001a67 <dbc_1st>
c00049e2:	85 c0                	test   eax,eax
c00049e4:	74 2f                	je     c0004a15 <get_fileinfo+0x120>
c00049e6:	83 fd 08             	cmp    ebp,0x8
c00049e9:	74 2a                	je     c0004a15 <get_fileinfo+0x120>
c00049eb:	83 fd 0b             	cmp    ebp,0xb
c00049ee:	74 25                	je     c0004a15 <get_fileinfo+0x120>
c00049f0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049f7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049fb:	e8 6a d0 ff ff       	call   c0001a6a <dbc_2nd>
c0004a00:	85 c0                	test   eax,eax
c0004a02:	74 11                	je     c0004a15 <get_fileinfo+0x120>
c0004a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a08:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a0b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a10:	c1 e2 08             	shl    edx,0x8
c0004a13:	09 c2                	or     edx,eax
c0004a15:	50                   	push   eax
c0004a16:	50                   	push   eax
c0004a17:	68 b5 01 00 00       	push   0x1b5
c0004a1c:	0f b7 d2             	movzx  edx,dx
c0004a1f:	52                   	push   edx
c0004a20:	e8 17 38 00 00       	call   c000823c <ff_oem2uni>
c0004a25:	83 c4 10             	add    esp,0x10
c0004a28:	66 85 c0             	test   ax,ax
c0004a2b:	75 04                	jne    c0004a31 <get_fileinfo+0x13c>
c0004a2d:	31 ff                	xor    edi,edi
c0004a2f:	eb 23                	jmp    c0004a54 <get_fileinfo+0x15f>
c0004a31:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a36:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3a:	29 f9                	sub    ecx,edi
c0004a3c:	0f b7 c0             	movzx  eax,ax
c0004a3f:	e8 ef d0 ff ff       	call   c0001b33 <put_utf>
c0004a44:	84 c0                	test   al,al
c0004a46:	74 e5                	je     c0004a2d <get_fileinfo+0x138>
c0004a48:	0f b6 c0             	movzx  eax,al
c0004a4b:	01 c7                	add    edi,eax
c0004a4d:	89 e9                	mov    ecx,ebp
c0004a4f:	e9 4a ff ff ff       	jmp    c000499e <get_fileinfo+0xa9>
c0004a54:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a59:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a5d:	75 54                	jne    c0004ab3 <get_fileinfo+0x1be>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <get_fileinfo+0x179>
c0004a63:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a67:	ba 01 00 00 00       	mov    edx,0x1
c0004a6c:	eb 33                	jmp    c0004aa1 <get_fileinfo+0x1ac>
c0004a6e:	b1 08                	mov    cl,0x8
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a78:	84 c0                	test   al,al
c0004a7a:	74 25                	je     c0004aa1 <get_fileinfo+0x1ac>
c0004a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0004a80:	74 16                	je     c0004a98 <get_fileinfo+0x1a3>
c0004a82:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a85:	66 83 ff 19          	cmp    di,0x19
c0004a89:	77 0f                	ja     c0004a9a <get_fileinfo+0x1a5>
c0004a8b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a8e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a91:	74 07                	je     c0004a9a <get_fileinfo+0x1a5>
c0004a93:	83 c0 20             	add    eax,0x20
c0004a96:	eb 02                	jmp    c0004a9a <get_fileinfo+0x1a5>
c0004a98:	b1 10                	mov    cl,0x10
c0004a9a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004a9e:	42                   	inc    edx
c0004a9f:	eb d1                	jmp    c0004a72 <get_fileinfo+0x17d>
c0004aa1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aa6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004aad:	75 04                	jne    c0004ab3 <get_fileinfo+0x1be>
c0004aaf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ab9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004abc:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abf:	83 c0 1c             	add    eax,0x1c
c0004ac2:	e8 d9 ce ff ff       	call   c00019a0 <ld_dword>
c0004ac7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ace:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad3:	83 c0 16             	add    eax,0x16
c0004ad6:	e8 b8 ce ff ff       	call   c0001993 <ld_word>
c0004adb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004adf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae2:	83 c0 18             	add    eax,0x18
c0004ae5:	e8 a9 ce ff ff       	call   c0001993 <ld_word>
c0004aea:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004aee:	83 c4 1c             	add    esp,0x1c
c0004af1:	5b                   	pop    ebx
c0004af2:	5e                   	pop    esi
c0004af3:	5f                   	pop    edi
c0004af4:	5d                   	pop    ebp
c0004af5:	c3                   	ret    

c0004af6 <ld_clust.isra.0>:
c0004af6:	56                   	push   esi
c0004af7:	89 c6                	mov    esi,eax
c0004af9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004afc:	53                   	push   ebx
c0004afd:	89 d3                	mov    ebx,edx
c0004aff:	e8 8f ce ff ff       	call   c0001993 <ld_word>
c0004b04:	0f b7 c8             	movzx  ecx,ax
c0004b07:	89 f0                	mov    eax,esi
c0004b09:	3c 03                	cmp    al,0x3
c0004b0b:	75 0d                	jne    c0004b1a <ld_clust.isra.0+0x24>
c0004b0d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b10:	e8 7e ce ff ff       	call   c0001993 <ld_word>
c0004b15:	c1 e0 10             	shl    eax,0x10
c0004b18:	09 c1                	or     ecx,eax
c0004b1a:	5b                   	pop    ebx
c0004b1b:	89 c8                	mov    eax,ecx
c0004b1d:	5e                   	pop    esi
c0004b1e:	c3                   	ret    

c0004b1f <st_clust.isra.1>:
c0004b1f:	56                   	push   esi
c0004b20:	89 c6                	mov    esi,eax
c0004b22:	53                   	push   ebx
c0004b23:	89 d3                	mov    ebx,edx
c0004b25:	0f b7 d1             	movzx  edx,cx
c0004b28:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2b:	e8 d5 ce ff ff       	call   c0001a05 <st_word>
c0004b30:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b33:	75 0f                	jne    c0004b44 <st_clust.isra.1+0x25>
c0004b35:	c1 e9 10             	shr    ecx,0x10
c0004b38:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3b:	89 ca                	mov    edx,ecx
c0004b3d:	5b                   	pop    ebx
c0004b3e:	5e                   	pop    esi
c0004b3f:	e9 c1 ce ff ff       	jmp    c0001a05 <st_word>
c0004b44:	5b                   	pop    ebx
c0004b45:	5e                   	pop    esi
c0004b46:	c3                   	ret    

c0004b47 <init_alloc_info.isra.2>:
c0004b47:	56                   	push   esi
c0004b48:	89 c6                	mov    esi,eax
c0004b4a:	53                   	push   ebx
c0004b4b:	89 d3                	mov    ebx,edx
c0004b4d:	51                   	push   ecx
c0004b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b50:	83 c0 34             	add    eax,0x34
c0004b53:	e8 48 ce ff ff       	call   c00019a0 <ld_dword>
c0004b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b5d:	83 c0 38             	add    eax,0x38
c0004b60:	e8 53 ce ff ff       	call   c00019b8 <ld_qword>
c0004b65:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b68:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b6d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b70:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b77:	83 e0 02             	and    eax,0x2
c0004b7a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b7d:	5b                   	pop    ebx
c0004b7e:	5b                   	pop    ebx
c0004b7f:	5e                   	pop    esi
c0004b80:	c3                   	ret    

c0004b81 <follow_path>:
c0004b81:	56                   	push   esi
c0004b82:	53                   	push   ebx
c0004b83:	89 c3                	mov    ebx,eax
c0004b85:	83 ec 14             	sub    esp,0x14
c0004b88:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b92:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b94:	80 fa 2f             	cmp    dl,0x2f
c0004b97:	75 07                	jne    c0004ba0 <follow_path+0x1f>
c0004b99:	40                   	inc    eax
c0004b9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b9e:	eb ee                	jmp    c0004b8e <follow_path+0xd>
c0004ba0:	80 fa 5c             	cmp    dl,0x5c
c0004ba3:	74 f4                	je     c0004b99 <follow_path+0x18>
c0004ba5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bb6:	77 52                	ja     c0004c0a <follow_path+0x89>
c0004bb8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bbc:	31 d2                	xor    edx,edx
c0004bbe:	89 d8                	mov    eax,ebx
c0004bc0:	e8 1d e3 ff ff       	call   c0002ee2 <dir_sdi>
c0004bc5:	eb 7c                	jmp    c0004c43 <follow_path+0xc2>
c0004bc7:	89 d8                	mov    eax,ebx
c0004bc9:	e8 60 f2 ff ff       	call   c0003e2e <dir_find>
c0004bce:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd1:	85 c0                	test   eax,eax
c0004bd3:	75 46                	jne    c0004c1b <follow_path+0x9a>
c0004bd5:	80 e2 04             	and    dl,0x4
c0004bd8:	75 69                	jne    c0004c43 <follow_path+0xc2>
c0004bda:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bde:	74 5e                	je     c0004c3e <follow_path+0xbd>
c0004be0:	8a 06                	mov    al,BYTE PTR [esi]
c0004be2:	3c 04                	cmp    al,0x4
c0004be4:	75 41                	jne    c0004c27 <follow_path+0xa6>
c0004be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004be9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bed:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf3:	30 c0                	xor    al,al
c0004bf5:	09 d0                	or     eax,edx
c0004bf7:	89 da                	mov    edx,ebx
c0004bf9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004bfc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004bff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c02:	8d 46 10             	lea    eax,[esi+0x10]
c0004c05:	e8 3d ff ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004c0a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c0e:	89 d8                	mov    eax,ebx
c0004c10:	e8 b6 ed ff ff       	call   c00039cb <create_name>
c0004c15:	85 c0                	test   eax,eax
c0004c17:	74 ae                	je     c0004bc7 <follow_path+0x46>
c0004c19:	eb 28                	jmp    c0004c43 <follow_path+0xc2>
c0004c1b:	83 f8 04             	cmp    eax,0x4
c0004c1e:	75 23                	jne    c0004c43 <follow_path+0xc2>
c0004c20:	80 e2 04             	and    dl,0x4
c0004c23:	74 19                	je     c0004c3e <follow_path+0xbd>
c0004c25:	eb 1c                	jmp    c0004c43 <follow_path+0xc2>
c0004c27:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c30:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c34:	e8 bd fe ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004c39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c3c:	eb cc                	jmp    c0004c0a <follow_path+0x89>
c0004c3e:	b8 05 00 00 00       	mov    eax,0x5
c0004c43:	83 c4 14             	add    esp,0x14
c0004c46:	5b                   	pop    ebx
c0004c47:	5e                   	pop    esi
c0004c48:	c3                   	ret    

c0004c49 <f_mount>:
c0004c49:	53                   	push   ebx
c0004c4a:	83 ec 18             	sub    esp,0x18
c0004c4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c51:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c5d:	e8 13 d3 ff ff       	call   c0001f75 <get_ldnumber>
c0004c62:	89 c2                	mov    edx,eax
c0004c64:	b8 0b 00 00 00       	mov    eax,0xb
c0004c69:	85 d2                	test   edx,edx
c0004c6b:	78 39                	js     c0004ca6 <f_mount+0x5d>
c0004c6d:	8b 04 95 20 42 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbde0]
c0004c74:	85 c0                	test   eax,eax
c0004c76:	74 03                	je     c0004c7b <f_mount+0x32>
c0004c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c7f:	85 c0                	test   eax,eax
c0004c81:	74 03                	je     c0004c86 <f_mount+0x3d>
c0004c83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8a:	89 04 95 20 42 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbde0],eax
c0004c91:	31 c0                	xor    eax,eax
c0004c93:	84 db                	test   bl,bl
c0004c95:	74 0f                	je     c0004ca6 <f_mount+0x5d>
c0004c97:	31 c9                	xor    ecx,ecx
c0004c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004c9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca1:	e8 6f d7 ff ff       	call   c0002415 <mount_volume>
c0004ca6:	83 c4 18             	add    esp,0x18
c0004ca9:	5b                   	pop    ebx
c0004caa:	c3                   	ret    

c0004cab <f_open>:
c0004cab:	55                   	push   ebp
c0004cac:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	83 ec 7c             	sub    esp,0x7c
c0004cb7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cbe:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc5:	85 db                	test   ebx,ebx
c0004cc7:	0f 84 10 04 00 00    	je     c00050dd <f_open+0x432>
c0004ccd:	89 fe                	mov    esi,edi
c0004ccf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd3:	83 e6 3f             	and    esi,0x3f
c0004cd6:	89 f0                	mov    eax,esi
c0004cd8:	0f b6 c8             	movzx  ecx,al
c0004cdb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce2:	e8 2e d7 ff ff       	call   c0002415 <mount_volume>
c0004ce7:	89 c5                	mov    ebp,eax
c0004ce9:	85 c0                	test   eax,eax
c0004ceb:	0f 85 e6 03 00 00    	jne    c00050d7 <f_open+0x42c>
c0004cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf5:	83 ec 0c             	sub    esp,0xc
c0004cf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004cfc:	bd 11 00 00 00       	mov    ebp,0x11
c0004d01:	68 60 04 00 00       	push   0x460
c0004d06:	e8 6e 34 00 00       	call   c0008179 <ff_memalloc>
c0004d0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d17:	0f 84 c0 03 00 00    	je     c00050dd <f_open+0x432>
c0004d1d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d31:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d3c:	e8 40 fe ff ff       	call   c0004b81 <follow_path>
c0004d41:	89 c5                	mov    ebp,eax
c0004d43:	85 c0                	test   eax,eax
c0004d45:	75 0c                	jne    c0004d53 <f_open+0xa8>
c0004d47:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d4c:	79 05                	jns    c0004d53 <f_open+0xa8>
c0004d4e:	bd 06 00 00 00       	mov    ebp,0x6
c0004d53:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d59:	0f 84 84 01 00 00    	je     c0004ee3 <f_open+0x238>
c0004d5f:	85 ed                	test   ebp,ebp
c0004d61:	74 20                	je     c0004d83 <f_open+0xd8>
c0004d63:	83 fd 04             	cmp    ebp,0x4
c0004d66:	0f 85 58 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	83 ce 08             	or     esi,0x8
c0004d73:	e8 7d f2 ff ff       	call   c0003ff5 <dir_register>
c0004d78:	89 c5                	mov    ebp,eax
c0004d7a:	85 c0                	test   eax,eax
c0004d7c:	74 2f                	je     c0004dad <f_open+0x102>
c0004d7e:	e9 41 03 00 00       	jmp    c00050c4 <f_open+0x419>
c0004d83:	bd 07 00 00 00       	mov    ebp,0x7
c0004d88:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d8d:	0f 85 31 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004d93:	bd 08 00 00 00       	mov    ebp,0x8
c0004d98:	f7 c7 04 00 00 00    	test   edi,0x4
c0004d9e:	0f 85 20 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004da4:	83 e7 08             	and    edi,0x8
c0004da7:	0f 84 65 01 00 00    	je     c0004f12 <f_open+0x267>
c0004dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db1:	8a 02                	mov    al,BYTE PTR [edx]
c0004db3:	3c 04                	cmp    al,0x4
c0004db5:	0f 85 97 00 00 00    	jne    c0004e52 <f_open+0x1a7>
c0004dbb:	8d 42 10             	lea    eax,[edx+0x10]
c0004dbe:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc0:	89 da                	mov    edx,ebx
c0004dc2:	e8 80 fd ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dcb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dce:	31 d2                	xor    edx,edx
c0004dd0:	83 c0 02             	add    eax,0x2
c0004dd3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd8:	e8 4a cc ff ff       	call   c0001a27 <mem_set>
c0004ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de9:	83 c0 26             	add    eax,0x26
c0004dec:	31 d2                	xor    edx,edx
c0004dee:	e8 34 cc ff ff       	call   c0001a27 <mem_set>
c0004df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfa:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004dfe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e06:	83 c0 08             	add    eax,0x8
c0004e09:	e8 fb cb ff ff       	call   c0001a09 <st_dword>
c0004e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e15:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e1d:	e8 c4 ea ff ff       	call   c00038e6 <store_xdir>
c0004e22:	89 c5                	mov    ebp,eax
c0004e24:	85 c0                	test   eax,eax
c0004e26:	0f 85 98 02 00 00    	jne    c00050c4 <f_open+0x419>
c0004e2c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e2f:	85 d2                	test   edx,edx
c0004e31:	0f 84 db 00 00 00    	je     c0004f12 <f_open+0x267>
c0004e37:	31 c9                	xor    ecx,ecx
c0004e39:	89 d8                	mov    eax,ebx
c0004e3b:	e8 9b e3 ff ff       	call   c00031db <remove_chain>
c0004e40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e44:	89 c5                	mov    ebp,eax
c0004e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e49:	48                   	dec    eax
c0004e4a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e4d:	e9 b8 00 00 00       	jmp    c0004f0a <f_open+0x25f>
c0004e52:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e56:	89 ea                	mov    edx,ebp
c0004e58:	e8 99 fc ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004e5d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e62:	89 c7                	mov    edi,eax
c0004e64:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e67:	e8 9d cb ff ff       	call   c0001a09 <st_dword>
c0004e6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e70:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	e8 9c fc ff ff       	call   c0004b1f <st_clust.isra.1>
c0004e83:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e87:	83 c0 1c             	add    eax,0x1c
c0004e8a:	31 d2                	xor    edx,edx
c0004e8c:	e8 78 cb ff ff       	call   c0001a09 <st_dword>
c0004e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e95:	85 ff                	test   edi,edi
c0004e97:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9b:	74 75                	je     c0004f12 <f_open+0x267>
c0004e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea1:	31 c9                	xor    ecx,ecx
c0004ea3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004ea6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	e8 1f e3 ff ff       	call   c00031db <remove_chain>
c0004ebc:	89 c5                	mov    ebp,eax
c0004ebe:	85 c0                	test   eax,eax
c0004ec0:	0f 85 fe 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004ec6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004eca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed2:	4f                   	dec    edi
c0004ed3:	e8 92 d2 ff ff       	call   c000216a <move_window>
c0004ed8:	89 c5                	mov    ebp,eax
c0004eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ede:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee1:	eb 27                	jmp    c0004f0a <f_open+0x25f>
c0004ee3:	85 ed                	test   ebp,ebp
c0004ee5:	0f 85 d9 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004eeb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004eef:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef4:	a8 10                	test   al,0x10
c0004ef6:	0f 85 c8 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004efc:	83 e7 02             	and    edi,0x2
c0004eff:	74 11                	je     c0004f12 <f_open+0x267>
c0004f01:	bd 07 00 00 00       	mov    ebp,0x7
c0004f06:	a8 01                	test   al,0x1
c0004f08:	eb 02                	jmp    c0004f0c <f_open+0x261>
c0004f0a:	85 ed                	test   ebp,ebp
c0004f0c:	0f 85 b2 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004f12:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f18:	74 03                	je     c0004f1d <f_open+0x272>
c0004f1a:	83 ce 40             	or     esi,0x40
c0004f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f21:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f24:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f27:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2a:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f34:	8a 02                	mov    al,BYTE PTR [edx]
c0004f36:	3c 04                	cmp    al,0x4
c0004f38:	75 2a                	jne    c0004f64 <f_open+0x2b9>
c0004f3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f3e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f45:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f4a:	30 c0                	xor    al,al
c0004f4c:	09 c8                	or     eax,ecx
c0004f4e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f51:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f58:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5b:	89 da                	mov    edx,ebx
c0004f5d:	e8 e5 fb ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004f62:	eb 1c                	jmp    c0004f80 <f_open+0x2d5>
c0004f64:	89 fa                	mov    edx,edi
c0004f66:	e8 8b fb ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004f6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f71:	e8 2a ca ff ff       	call   c00019a0 <ld_dword>
c0004f76:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8b:	89 03                	mov    DWORD PTR [ebx],eax
c0004f8d:	31 d2                	xor    edx,edx
c0004f8f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f93:	b9 00 02 00 00       	mov    ecx,0x200
c0004f98:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004f9c:	89 f0                	mov    eax,esi
c0004f9e:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fa1:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa5:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fa8:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004faf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fbd:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fc8:	e8 5a ca ff ff       	call   c0001a27 <mem_set>
c0004fcd:	83 e6 20             	and    esi,0x20
c0004fd0:	75 07                	jne    c0004fd9 <f_open+0x32e>
c0004fd2:	31 ed                	xor    ebp,ebp
c0004fd4:	e9 eb 00 00 00       	jmp    c00050c4 <f_open+0x419>
c0004fd9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fdc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004feb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004fef:	74 e1                	je     c0004fd2 <f_open+0x327>
c0004ff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ff9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0004ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005006:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500a:	c1 e5 09             	shl    ebp,0x9
c000500d:	31 ff                	xor    edi,edi
c000500f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005013:	89 f8                	mov    eax,edi
c0005015:	89 ee                	mov    esi,ebp
c0005017:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501b:	73 22                	jae    c000503f <f_open+0x394>
c000501d:	89 d8                	mov    eax,ebx
c000501f:	e8 c8 dc ff ff       	call   c0002cec <get_fat>
c0005024:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005028:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000502c:	89 c2                	mov    edx,eax
c000502e:	83 f8 01             	cmp    eax,0x1
c0005031:	76 10                	jbe    c0005043 <f_open+0x398>
c0005033:	83 f8 ff             	cmp    eax,0xffffffff
c0005036:	75 d5                	jne    c000500d <f_open+0x362>
c0005038:	bd 01 00 00 00       	mov    ebp,0x1
c000503d:	eb 09                	jmp    c0005048 <f_open+0x39d>
c000503f:	31 ed                	xor    ebp,ebp
c0005041:	eb 05                	jmp    c0005048 <f_open+0x39d>
c0005043:	bd 02 00 00 00       	mov    ebp,0x2
c0005048:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504b:	85 ed                	test   ebp,ebp
c000504d:	75 75                	jne    c00050c4 <f_open+0x419>
c000504f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005053:	25 ff 01 00 00       	and    eax,0x1ff
c0005058:	0f 84 74 ff ff ff    	je     c0004fd2 <f_open+0x327>
c000505e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005062:	bd 02 00 00 00       	mov    ebp,0x2
c0005067:	89 c8                	mov    eax,ecx
c0005069:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000506d:	e8 ba cb ff ff       	call   c0001c2c <clst2sect>
c0005072:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005076:	89 d7                	mov    edi,edx
c0005078:	09 c7                	or     edi,eax
c000507a:	74 48                	je     c00050c4 <f_open+0x419>
c000507c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005080:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005084:	0f ac fe 09          	shrd   esi,edi,0x9
c0005088:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000508c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005094:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005098:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000509c:	83 ec 0c             	sub    esp,0xc
c000509f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050a2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a5:	6a 01                	push   0x1
c00050a7:	52                   	push   edx
c00050a8:	50                   	push   eax
c00050a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b1:	50                   	push   eax
c00050b2:	e8 91 c8 ff ff       	call   c0001948 <disk_read>
c00050b7:	83 c4 20             	add    esp,0x20
c00050ba:	85 c0                	test   eax,eax
c00050bc:	0f 95 c0             	setne  al
c00050bf:	0f b6 c0             	movzx  eax,al
c00050c2:	89 c5                	mov    ebp,eax
c00050c4:	83 ec 0c             	sub    esp,0xc
c00050c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cb:	e8 bf 30 00 00       	call   c000818f <ff_memfree>
c00050d0:	83 c4 10             	add    esp,0x10
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	74 06                	je     c00050dd <f_open+0x432>
c00050d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050dd:	83 c4 7c             	add    esp,0x7c
c00050e0:	89 e8                	mov    eax,ebp
c00050e2:	5b                   	pop    ebx
c00050e3:	5e                   	pop    esi
c00050e4:	5f                   	pop    edi
c00050e5:	5d                   	pop    ebp
c00050e6:	c3                   	ret    

c00050e7 <f_read>:
c00050e7:	55                   	push   ebp
c00050e8:	57                   	push   edi
c00050e9:	56                   	push   esi
c00050ea:	53                   	push   ebx
c00050eb:	83 ec 2c             	sub    esp,0x2c
c00050ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050f6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	89 d8                	mov    eax,ebx
c0005102:	e8 88 cf ff ff       	call   c000208f <validate>
c0005107:	89 c5                	mov    ebp,eax
c0005109:	85 c0                	test   eax,eax
c000510b:	0f 85 4c 02 00 00    	jne    c000535d <f_read+0x276>
c0005111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005115:	85 ed                	test   ebp,ebp
c0005117:	0f 85 40 02 00 00    	jne    c000535d <f_read+0x276>
c000511d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005121:	0f 84 31 02 00 00    	je     c0005358 <f_read+0x271>
c0005127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000512d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005130:	bf 00 00 00 00       	mov    edi,0x0
c0005135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000513c:	89 d1                	mov    ecx,edx
c000513e:	19 f9                	sbb    ecx,edi
c0005140:	0f 83 cf 00 00 00    	jae    c0005215 <f_read+0x12e>
c0005146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514a:	e9 c6 00 00 00       	jmp    c0005215 <f_read+0x12e>
c000514f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005152:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005155:	89 d0                	mov    eax,edx
c0005157:	25 ff 01 00 00       	and    eax,0x1ff
c000515c:	0f 85 c9 01 00 00    	jne    c000532b <f_read+0x244>
c0005162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005166:	89 d6                	mov    esi,edx
c0005168:	89 cf                	mov    edi,ecx
c000516a:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000516e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005172:	48                   	dec    eax
c0005173:	21 f0                	and    eax,esi
c0005175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005179:	0f 84 a6 00 00 00    	je     c0005225 <f_read+0x13e>
c000517f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005183:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005186:	89 c8                	mov    eax,ecx
c0005188:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518b:	e8 9c ca ff ff       	call   c0001c2c <clst2sect>
c0005190:	89 d7                	mov    edi,edx
c0005192:	09 c7                	or     edi,eax
c0005194:	0f 84 b4 00 00 00    	je     c000524e <f_read+0x167>
c000519a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000519e:	31 ff                	xor    edi,edi
c00051a0:	01 c6                	add    esi,eax
c00051a2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a5:	11 d7                	adc    edi,edx
c00051a7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051af:	0f 86 fd 00 00 00    	jbe    c00052b2 <f_read+0x1cb>
c00051b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051bd:	c1 e8 09             	shr    eax,0x9
c00051c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c3:	03 14 24             	add    edx,DWORD PTR [esp]
c00051c6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051ca:	39 c2                	cmp    edx,eax
c00051cc:	76 07                	jbe    c00051d5 <f_read+0xee>
c00051ce:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d5:	83 ec 0c             	sub    esp,0xc
c00051d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051dc:	57                   	push   edi
c00051dd:	56                   	push   esi
c00051de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051e6:	50                   	push   eax
c00051e7:	e8 5c c7 ff ff       	call   c0001948 <disk_read>
c00051ec:	83 c4 20             	add    esp,0x20
c00051ef:	85 c0                	test   eax,eax
c00051f1:	75 6e                	jne    c0005261 <f_read+0x17a>
c00051f3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051f7:	78 7e                	js     c0005277 <f_read+0x190>
c00051f9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00051fc:	c1 e6 09             	shl    esi,0x9
c00051ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	01 30                	add    DWORD PTR [eax],esi
c000520b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000520f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005212:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521a:	0f 85 2f ff ff ff    	jne    c000514f <f_read+0x68>
c0005220:	e9 38 01 00 00       	jmp    c000535d <f_read+0x276>
c0005225:	89 c8                	mov    eax,ecx
c0005227:	09 d0                	or     eax,edx
c0005229:	75 05                	jne    c0005230 <f_read+0x149>
c000522b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000522e:	eb 19                	jmp    c0005249 <f_read+0x162>
c0005230:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005234:	74 09                	je     c000523f <f_read+0x158>
c0005236:	89 d8                	mov    eax,ebx
c0005238:	e8 10 ca ff ff       	call   c0001c4d <clmt_clust>
c000523d:	eb 0a                	jmp    c0005249 <f_read+0x162>
c000523f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005242:	89 d8                	mov    eax,ebx
c0005244:	e8 a3 da ff ff       	call   c0002cec <get_fat>
c0005249:	83 f8 01             	cmp    eax,0x1
c000524c:	77 0e                	ja     c000525c <f_read+0x175>
c000524e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	e9 01 01 00 00       	jmp    c000535d <f_read+0x276>
c000525c:	83 f8 ff             	cmp    eax,0xffffffff
c000525f:	75 0e                	jne    c000526f <f_read+0x188>
c0005261:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005265:	bd 01 00 00 00       	mov    ebp,0x1
c000526a:	e9 ee 00 00 00       	jmp    c000535d <f_read+0x276>
c000526f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005272:	e9 08 ff ff ff       	jmp    c000517f <f_read+0x98>
c0005277:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000527d:	29 f0                	sub    eax,esi
c000527f:	19 fa                	sbb    edx,edi
c0005281:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005284:	89 d7                	mov    edi,edx
c0005286:	ba 00 00 00 00       	mov    edx,0x0
c000528b:	89 f9                	mov    ecx,edi
c000528d:	19 d1                	sbb    ecx,edx
c000528f:	0f 83 64 ff ff ff    	jae    c00051f9 <f_read+0x112>
c0005295:	89 c7                	mov    edi,eax
c0005297:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000529b:	c1 e7 09             	shl    edi,0x9
c000529e:	8d 53 50             	lea    edx,[ebx+0x50]
c00052a1:	01 f8                	add    eax,edi
c00052a3:	b9 00 02 00 00       	mov    ecx,0x200
c00052a8:	e8 65 c7 ff ff       	call   c0001a12 <mem_cpy>
c00052ad:	e9 47 ff ff ff       	jmp    c00051f9 <f_read+0x112>
c00052b2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c3:	75 05                	jne    c00052ca <f_read+0x1e3>
c00052c5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052c8:	74 5b                	je     c0005325 <f_read+0x23e>
c00052ca:	8d 43 50             	lea    eax,[ebx+0x50]
c00052cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	79 2a                	jns    c0005301 <f_read+0x21a>
c00052d7:	83 ec 0c             	sub    esp,0xc
c00052da:	6a 01                	push   0x1
c00052dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052e8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ec:	50                   	push   eax
c00052ed:	e8 6c c6 ff ff       	call   c000195e <disk_write>
c00052f2:	83 c4 20             	add    esp,0x20
c00052f5:	85 c0                	test   eax,eax
c00052f7:	0f 85 64 ff ff ff    	jne    c0005261 <f_read+0x17a>
c00052fd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005301:	83 ec 0c             	sub    esp,0xc
c0005304:	6a 01                	push   0x1
c0005306:	57                   	push   edi
c0005307:	56                   	push   esi
c0005308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000530c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005310:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005314:	50                   	push   eax
c0005315:	e8 2e c6 ff ff       	call   c0001948 <disk_read>
c000531a:	83 c4 20             	add    esp,0x20
c000531d:	85 c0                	test   eax,eax
c000531f:	0f 85 3c ff ff ff    	jne    c0005261 <f_read+0x17a>
c0005325:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005328:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000532e:	ba 00 02 00 00       	mov    edx,0x200
c0005333:	25 ff 01 00 00       	and    eax,0x1ff
c0005338:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000533c:	29 c2                	sub    edx,eax
c000533e:	39 d6                	cmp    esi,edx
c0005340:	76 02                	jbe    c0005344 <f_read+0x25d>
c0005342:	89 d6                	mov    esi,edx
c0005344:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005348:	89 f1                	mov    ecx,esi
c000534a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534e:	e8 bf c6 ff ff       	call   c0001a12 <mem_cpy>
c0005353:	e9 a7 fe ff ff       	jmp    c00051ff <f_read+0x118>
c0005358:	bd 07 00 00 00       	mov    ebp,0x7
c000535d:	83 c4 2c             	add    esp,0x2c
c0005360:	89 e8                	mov    eax,ebp
c0005362:	5b                   	pop    ebx
c0005363:	5e                   	pop    esi
c0005364:	5f                   	pop    edi
c0005365:	5d                   	pop    ebp
c0005366:	c3                   	ret    

c0005367 <f_write>:
c0005367:	55                   	push   ebp
c0005368:	57                   	push   edi
c0005369:	56                   	push   esi
c000536a:	53                   	push   ebx
c000536b:	83 ec 2c             	sub    esp,0x2c
c000536e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005372:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005376:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	89 d8                	mov    eax,ebx
c0005382:	e8 08 cd ff ff       	call   c000208f <validate>
c0005387:	89 c5                	mov    ebp,eax
c0005389:	85 c0                	test   eax,eax
c000538b:	0f 85 86 02 00 00    	jne    c0005617 <f_write+0x2b0>
c0005391:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005395:	85 ed                	test   ebp,ebp
c0005397:	0f 85 7a 02 00 00    	jne    c0005617 <f_write+0x2b0>
c000539d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a1:	0f 84 6b 02 00 00    	je     c0005612 <f_write+0x2ab>
c00053a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053ab:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053ae:	0f 84 43 01 00 00    	je     c00054f7 <f_write+0x190>
c00053b4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b7:	89 c1                	mov    ecx,eax
c00053b9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053bd:	0f 83 34 01 00 00    	jae    c00054f7 <f_write+0x190>
c00053c3:	f7 d0                	not    eax
c00053c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053c9:	e9 29 01 00 00       	jmp    c00054f7 <f_write+0x190>
c00053ce:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d4:	89 d0                	mov    eax,edx
c00053d6:	25 ff 01 00 00       	and    eax,0x1ff
c00053db:	0f 85 00 02 00 00    	jne    c00055e1 <f_write+0x27a>
c00053e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e5:	89 d6                	mov    esi,edx
c00053e7:	89 cf                	mov    edi,ecx
c00053e9:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ed:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f1:	48                   	dec    eax
c00053f2:	21 f0                	and    eax,esi
c00053f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053f8:	0f 84 06 01 00 00    	je     c0005504 <f_write+0x19d>
c00053fe:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005402:	0f 88 6e 01 00 00    	js     c0005576 <f_write+0x20f>
c0005408:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000540c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000540f:	89 c8                	mov    eax,ecx
c0005411:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005415:	e8 12 c8 ff ff       	call   c0001c2c <clst2sect>
c000541a:	89 d1                	mov    ecx,edx
c000541c:	09 c1                	or     ecx,eax
c000541e:	0f 84 1c 01 00 00    	je     c0005540 <f_write+0x1d9>
c0005424:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005428:	31 ff                	xor    edi,edi
c000542a:	01 c6                	add    esi,eax
c000542c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005430:	11 d7                	adc    edi,edx
c0005432:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543a:	0f 86 63 01 00 00    	jbe    c00055a3 <f_write+0x23c>
c0005440:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005444:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005448:	c1 e8 09             	shr    eax,0x9
c000544b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000544f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	39 c2                	cmp    edx,eax
c0005459:	76 08                	jbe    c0005463 <f_write+0xfc>
c000545b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000545f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005463:	83 ec 0c             	sub    esp,0xc
c0005466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546a:	57                   	push   edi
c000546b:	56                   	push   esi
c000546c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005470:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005474:	50                   	push   eax
c0005475:	e8 e4 c4 ff ff       	call   c000195e <disk_write>
c000547a:	83 c4 20             	add    esp,0x20
c000547d:	85 c0                	test   eax,eax
c000547f:	0f 85 ce 00 00 00    	jne    c0005553 <f_write+0x1ec>
c0005485:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005488:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548b:	29 f0                	sub    eax,esi
c000548d:	19 fa                	sbb    edx,edi
c000548f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005493:	89 d7                	mov    edi,edx
c0005495:	ba 00 00 00 00       	mov    edx,0x0
c000549a:	89 f9                	mov    ecx,edi
c000549c:	19 d1                	sbb    ecx,edx
c000549e:	73 1c                	jae    c00054bc <f_write+0x155>
c00054a0:	89 c7                	mov    edi,eax
c00054a2:	b9 00 02 00 00       	mov    ecx,0x200
c00054a7:	c1 e7 09             	shl    edi,0x9
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b1:	89 fa                	mov    edx,edi
c00054b3:	e8 5a c5 ff ff       	call   c0001a12 <mem_cpy>
c00054b8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054bc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c0:	c1 e6 09             	shl    esi,0x9
c00054c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054d6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054dc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054df:	89 c1                	mov    ecx,eax
c00054e1:	39 f2                	cmp    edx,esi
c00054e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054e6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054e9:	19 f9                	sbb    ecx,edi
c00054eb:	73 04                	jae    c00054f1 <f_write+0x18a>
c00054ed:	89 f2                	mov    edx,esi
c00054ef:	89 f8                	mov    eax,edi
c00054f1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054f7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054fc:	0f 85 cc fe ff ff    	jne    c00053ce <f_write+0x67>
c0005502:	eb 2e                	jmp    c0005532 <f_write+0x1cb>
c0005504:	89 c8                	mov    eax,ecx
c0005506:	09 d0                	or     eax,edx
c0005508:	75 0b                	jne    c0005515 <f_write+0x1ae>
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	31 d2                	xor    edx,edx
c000550f:	85 c0                	test   eax,eax
c0005511:	75 28                	jne    c000553b <f_write+0x1d4>
c0005513:	eb 12                	jmp    c0005527 <f_write+0x1c0>
c0005515:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005519:	74 09                	je     c0005524 <f_write+0x1bd>
c000551b:	89 d8                	mov    eax,ebx
c000551d:	e8 2b c7 ff ff       	call   c0001c4d <clmt_clust>
c0005522:	eb 0a                	jmp    c000552e <f_write+0x1c7>
c0005524:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005527:	89 d8                	mov    eax,ebx
c0005529:	e8 ac da ff ff       	call   c0002fda <create_chain>
c000552e:	85 c0                	test   eax,eax
c0005530:	75 09                	jne    c000553b <f_write+0x1d4>
c0005532:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005536:	e9 dc 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c000553b:	83 f8 01             	cmp    eax,0x1
c000553e:	75 0e                	jne    c000554e <f_write+0x1e7>
c0005540:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005544:	bd 02 00 00 00       	mov    ebp,0x2
c0005549:	e9 c9 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c000554e:	83 f8 ff             	cmp    eax,0xffffffff
c0005551:	75 0e                	jne    c0005561 <f_write+0x1fa>
c0005553:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005557:	bd 01 00 00 00       	mov    ebp,0x1
c000555c:	e9 b6 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c0005561:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005564:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005568:	0f 85 90 fe ff ff    	jne    c00053fe <f_write+0x97>
c000556e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005571:	e9 88 fe ff ff       	jmp    c00053fe <f_write+0x97>
c0005576:	83 ec 0c             	sub    esp,0xc
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	6a 01                	push   0x1
c000557e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005581:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005584:	50                   	push   eax
c0005585:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005589:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000558d:	50                   	push   eax
c000558e:	e8 cb c3 ff ff       	call   c000195e <disk_write>
c0005593:	83 c4 20             	add    esp,0x20
c0005596:	85 c0                	test   eax,eax
c0005598:	75 b9                	jne    c0005553 <f_write+0x1ec>
c000559a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000559e:	e9 65 fe ff ff       	jmp    c0005408 <f_write+0xa1>
c00055a3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055a6:	75 05                	jne    c00055ad <f_write+0x246>
c00055a8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055ab:	74 2e                	je     c00055db <f_write+0x274>
c00055ad:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055b6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055b9:	73 20                	jae    c00055db <f_write+0x274>
c00055bb:	83 ec 0c             	sub    esp,0xc
c00055be:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c1:	6a 01                	push   0x1
c00055c3:	57                   	push   edi
c00055c4:	56                   	push   esi
c00055c5:	50                   	push   eax
c00055c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ca:	50                   	push   eax
c00055cb:	e8 78 c3 ff ff       	call   c0001948 <disk_read>
c00055d0:	83 c4 20             	add    esp,0x20
c00055d3:	85 c0                	test   eax,eax
c00055d5:	0f 85 78 ff ff ff    	jne    c0005553 <f_write+0x1ec>
c00055db:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055de:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e4:	ba 00 02 00 00       	mov    edx,0x200
c00055e9:	25 ff 01 00 00       	and    eax,0x1ff
c00055ee:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f2:	29 c2                	sub    edx,eax
c00055f4:	39 d6                	cmp    esi,edx
c00055f6:	76 02                	jbe    c00055fa <f_write+0x293>
c00055f8:	89 d6                	mov    esi,edx
c00055fa:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00055fe:	89 f1                	mov    ecx,esi
c0005600:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005604:	e8 09 c4 ff ff       	call   c0001a12 <mem_cpy>
c0005609:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000560d:	e9 b1 fe ff ff       	jmp    c00054c3 <f_write+0x15c>
c0005612:	bd 07 00 00 00       	mov    ebp,0x7
c0005617:	83 c4 2c             	add    esp,0x2c
c000561a:	89 e8                	mov    eax,ebp
c000561c:	5b                   	pop    ebx
c000561d:	5e                   	pop    esi
c000561e:	5f                   	pop    edi
c000561f:	5d                   	pop    ebp
c0005620:	c3                   	ret    

c0005621 <f_sync>:
c0005621:	56                   	push   esi
c0005622:	53                   	push   ebx
c0005623:	83 ec 64             	sub    esp,0x64
c0005626:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000562e:	89 d8                	mov    eax,ebx
c0005630:	e8 5a ca ff ff       	call   c000208f <validate>
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 ba 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000563d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005640:	f6 c2 40             	test   dl,0x40
c0005643:	0f 84 ae 01 00 00    	je     c00057f7 <f_sync+0x1d6>
c0005649:	84 d2                	test   dl,dl
c000564b:	79 33                	jns    c0005680 <f_sync+0x5f>
c000564d:	83 ec 0c             	sub    esp,0xc
c0005650:	8d 43 50             	lea    eax,[ebx+0x50]
c0005653:	6a 01                	push   0x1
c0005655:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005658:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565b:	50                   	push   eax
c000565c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005660:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 f4 c2 ff ff       	call   c000195e <disk_write>
c000566a:	89 c2                	mov    edx,eax
c000566c:	83 c4 20             	add    esp,0x20
c000566f:	b8 01 00 00 00       	mov    eax,0x1
c0005674:	85 d2                	test   edx,edx
c0005676:	0f 85 7b 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000567c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005684:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005687:	0f 85 11 01 00 00    	jne    c000579e <f_sync+0x17d>
c000568d:	89 d8                	mov    eax,ebx
c000568f:	e8 1e d6 ff ff       	call   c0002cb2 <fill_first_frag>
c0005694:	85 c0                	test   eax,eax
c0005696:	0f 85 5b 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000569c:	83 c9 ff             	or     ecx,0xffffffff
c000569f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a2:	89 d8                	mov    eax,ebx
c00056a4:	e8 d4 d5 ff ff       	call   c0002c7d <fill_last_frag>
c00056a9:	85 c0                	test   eax,eax
c00056ab:	0f 85 46 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c00056b1:	83 ec 0c             	sub    esp,0xc
c00056b4:	68 60 04 00 00       	push   0x460
c00056b9:	e8 bb 2a 00 00       	call   c0008179 <ff_memalloc>
c00056be:	89 c6                	mov    esi,eax
c00056c0:	83 c4 10             	add    esp,0x10
c00056c3:	b8 11 00 00 00       	mov    eax,0x11
c00056c8:	85 f6                	test   esi,esi
c00056ca:	0f 84 27 01 00 00    	je     c00057f7 <f_sync+0x1d6>
c00056d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056dd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e0:	89 da                	mov    edx,ebx
c00056e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056e6:	e8 bc df ff ff       	call   c00036a7 <load_obj_xdir>
c00056eb:	85 c0                	test   eax,eax
c00056ed:	0f 85 95 00 00 00    	jne    c0005788 <f_sync+0x167>
c00056f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fa:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00056fe:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005701:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005704:	83 ca 01             	or     edx,0x1
c0005707:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000570d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005710:	83 c0 34             	add    eax,0x34
c0005713:	e8 f1 c2 ff ff       	call   c0001a09 <st_dword>
c0005718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000571f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005722:	83 c0 38             	add    eax,0x38
c0005725:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005728:	e8 df c2 ff ff       	call   c0001a0c <st_qword>
c000572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005731:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005734:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005737:	83 c0 28             	add    eax,0x28
c000573a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573d:	e8 ca c2 ff ff       	call   c0001a0c <st_qword>
c0005742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005746:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005749:	ba 00 00 21 50       	mov    edx,0x50210000
c000574e:	83 c0 0c             	add    eax,0xc
c0005751:	e8 b3 c2 ff ff       	call   c0001a09 <st_dword>
c0005756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000575d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005761:	31 d2                	xor    edx,edx
c0005763:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005766:	83 c0 10             	add    eax,0x10
c0005769:	e8 9b c2 ff ff       	call   c0001a09 <st_dword>
c000576e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005772:	e8 6f e1 ff ff       	call   c00038e6 <store_xdir>
c0005777:	85 c0                	test   eax,eax
c0005779:	75 0d                	jne    c0005788 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	e8 f4 ea ff ff       	call   c0004278 <sync_fs>
c0005784:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000578c:	83 ec 0c             	sub    esp,0xc
c000578f:	56                   	push   esi
c0005790:	e8 fa 29 00 00       	call   c000818f <ff_memfree>
c0005795:	83 c4 10             	add    esp,0x10
c0005798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000579c:	eb 59                	jmp    c00057f7 <f_sync+0x1d6>
c000579e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a4:	e8 c1 c9 ff ff       	call   c000216a <move_window>
c00057a9:	85 c0                	test   eax,eax
c00057ab:	75 4a                	jne    c00057f7 <f_sync+0x1d6>
c00057ad:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b0:	89 f2                	mov    edx,esi
c00057b2:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bb:	e8 5f f3 ff ff       	call   c0004b1f <st_clust.isra.1>
c00057c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057c6:	e8 3e c2 ff ff       	call   c0001a09 <st_dword>
c00057cb:	8d 46 16             	lea    eax,[esi+0x16]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	e8 31 c2 ff ff       	call   c0001a09 <st_dword>
c00057d8:	8d 46 12             	lea    eax,[esi+0x12]
c00057db:	31 d2                	xor    edx,edx
c00057dd:	e8 23 c2 ff ff       	call   c0001a05 <st_word>
c00057e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ee:	e8 85 ea ff ff       	call   c0004278 <sync_fs>
c00057f3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057f7:	83 c4 64             	add    esp,0x64
c00057fa:	5b                   	pop    ebx
c00057fb:	5e                   	pop    esi
c00057fc:	c3                   	ret    

c00057fd <f_close>:
c00057fd:	53                   	push   ebx
c00057fe:	83 ec 24             	sub    esp,0x24
c0005801:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005805:	53                   	push   ebx
c0005806:	e8 16 fe ff ff       	call   c0005621 <f_sync>
c000580b:	83 c4 10             	add    esp,0x10
c000580e:	85 c0                	test   eax,eax
c0005810:	75 15                	jne    c0005827 <f_close+0x2a>
c0005812:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005816:	89 d8                	mov    eax,ebx
c0005818:	e8 72 c8 ff ff       	call   c000208f <validate>
c000581d:	85 c0                	test   eax,eax
c000581f:	75 06                	jne    c0005827 <f_close+0x2a>
c0005821:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005827:	83 c4 18             	add    esp,0x18
c000582a:	5b                   	pop    ebx
c000582b:	c3                   	ret    

c000582c <f_lseek>:
c000582c:	55                   	push   ebp
c000582d:	57                   	push   edi
c000582e:	56                   	push   esi
c000582f:	53                   	push   ebx
c0005830:	83 ec 3c             	sub    esp,0x3c
c0005833:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005837:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000583f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005842:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005846:	89 d8                	mov    eax,ebx
c0005848:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000584c:	e8 3e c8 ff ff       	call   c000208f <validate>
c0005851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005855:	85 c0                	test   eax,eax
c0005857:	0f 85 28 04 00 00    	jne    c0005c85 <f_lseek+0x459>
c000585d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005865:	85 c0                	test   eax,eax
c0005867:	0f 85 18 04 00 00    	jne    c0005c85 <f_lseek+0x459>
c000586d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005871:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005874:	74 0c                	je     c0005882 <f_lseek+0x56>
c0005876:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005879:	85 c0                	test   eax,eax
c000587b:	75 1f                	jne    c000589c <f_lseek+0x70>
c000587d:	e9 8b 01 00 00       	jmp    c0005a0d <f_lseek+0x1e1>
c0005882:	83 c9 ff             	or     ecx,0xffffffff
c0005885:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005888:	89 d8                	mov    eax,ebx
c000588a:	e8 ee d3 ff ff       	call   c0002c7d <fill_last_frag>
c000588f:	85 c0                	test   eax,eax
c0005891:	74 e3                	je     c0005876 <f_lseek+0x4a>
c0005893:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005897:	e9 e9 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c000589c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a1:	0f 85 ac 00 00 00    	jne    c0005953 <f_lseek+0x127>
c00058a7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058ab:	0f 85 a2 00 00 00    	jne    c0005953 <f_lseek+0x127>
c00058b1:	8d 78 04             	lea    edi,[eax+0x4]
c00058b4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00058b9:	be 02 00 00 00       	mov    esi,0x2
c00058be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058c2:	85 ed                	test   ebp,ebp
c00058c4:	74 73                	je     c0005939 <f_lseek+0x10d>
c00058c6:	89 e9                	mov    ecx,ebp
c00058c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058cf:	89 ca                	mov    edx,ecx
c00058d1:	89 d8                	mov    eax,ebx
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058da:	e8 0d d4 ff ff       	call   c0002cec <get_fat>
c00058df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e3:	83 f8 01             	cmp    eax,0x1
c00058e6:	77 11                	ja     c00058f9 <f_lseek+0xcd>
c00058e8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ec:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00058f4:	e9 8c 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c00058f9:	83 f8 ff             	cmp    eax,0xffffffff
c00058fc:	75 11                	jne    c000590f <f_lseek+0xe3>
c00058fe:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005902:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000590a:	e9 76 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c000590f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005912:	89 c1                	mov    ecx,eax
c0005914:	39 c2                	cmp    edx,eax
c0005916:	74 b7                	je     c00058cf <f_lseek+0xa3>
c0005918:	83 c6 02             	add    esi,0x2
c000591b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c000591f:	72 0b                	jb     c000592c <f_lseek+0x100>
c0005921:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005924:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005927:	89 0f                	mov    DWORD PTR [edi],ecx
c0005929:	83 c7 08             	add    edi,0x8
c000592c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005930:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005933:	76 04                	jbe    c0005939 <f_lseek+0x10d>
c0005935:	89 c5                	mov    ebp,eax
c0005937:	eb 8d                	jmp    c00058c6 <f_lseek+0x9a>
c0005939:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593c:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c0005940:	89 30                	mov    DWORD PTR [eax],esi
c0005942:	0f 87 35 03 00 00    	ja     c0005c7d <f_lseek+0x451>
c0005948:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c000594e:	e9 32 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c0005953:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005956:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005959:	39 34 24             	cmp    DWORD PTR [esp],esi
c000595c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005960:	19 f8                	sbb    eax,edi
c0005962:	73 07                	jae    c000596b <f_lseek+0x13f>
c0005964:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005967:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000596b:	89 f8                	mov    eax,edi
c000596d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005970:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005973:	09 f0                	or     eax,esi
c0005975:	0f 84 0a 03 00 00    	je     c0005c85 <f_lseek+0x459>
c000597b:	89 f0                	mov    eax,esi
c000597d:	89 fa                	mov    edx,edi
c000597f:	83 c0 ff             	add    eax,0xffffffff
c0005982:	83 d2 ff             	adc    edx,0xffffffff
c0005985:	89 04 24             	mov    DWORD PTR [esp],eax
c0005988:	89 d1                	mov    ecx,edx
c000598a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000598e:	89 c2                	mov    edx,eax
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 b6 c2 ff ff       	call   c0001c4d <clmt_clust>
c0005997:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000599b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000599e:	89 c2                	mov    edx,eax
c00059a0:	89 c8                	mov    eax,ecx
c00059a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00059a6:	e8 81 c2 ff ff       	call   c0001c2c <clst2sect>
c00059ab:	89 d1                	mov    ecx,edx
c00059ad:	09 c1                	or     ecx,eax
c00059af:	0f 84 33 ff ff ff    	je     c00058e8 <f_lseek+0xbc>
c00059b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00059bb:	0f 84 c4 02 00 00    	je     c0005c85 <f_lseek+0x459>
c00059c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00059c5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059cc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059d0:	0f ac fe 09          	shrd   esi,edi,0x9
c00059d4:	4d                   	dec    ebp
c00059d5:	31 ff                	xor    edi,edi
c00059d7:	21 ee                	and    esi,ebp
c00059d9:	01 c6                	add    esi,eax
c00059db:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00059de:	11 d7                	adc    edi,edx
c00059e0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00059e3:	39 fa                	cmp    edx,edi
c00059e5:	75 08                	jne    c00059ef <f_lseek+0x1c3>
c00059e7:	39 f0                	cmp    eax,esi
c00059e9:	0f 84 96 02 00 00    	je     c0005c85 <f_lseek+0x459>
c00059ef:	8d 6b 50             	lea    ebp,[ebx+0x50]
c00059f2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00059f6:	0f 89 58 02 00 00    	jns    c0005c54 <f_lseek+0x428>
c00059fc:	83 ec 0c             	sub    esp,0xc
c00059ff:	6a 01                	push   0x1
c0005a01:	52                   	push   edx
c0005a02:	50                   	push   eax
c0005a03:	55                   	push   ebp
c0005a04:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a08:	e9 32 02 00 00       	jmp    c0005c3f <f_lseek+0x413>
c0005a0d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a11:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a14:	74 16                	je     c0005a2c <f_lseek+0x200>
c0005a16:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a1b:	76 0f                	jbe    c0005a2c <f_lseek+0x200>
c0005a1d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a24:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a32:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a35:	89 c7                	mov    edi,eax
c0005a37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a3b:	73 0d                	jae    c0005a4a <f_lseek+0x21e>
c0005a3d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a41:	75 07                	jne    c0005a4a <f_lseek+0x21e>
c0005a43:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a54:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a5b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a62:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a65:	75 09                	jne    c0005a70 <f_lseek+0x244>
c0005a67:	31 f6                	xor    esi,esi
c0005a69:	31 ff                	xor    edi,edi
c0005a6b:	e9 87 01 00 00       	jmp    c0005bf7 <f_lseek+0x3cb>
c0005a70:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005a74:	c1 e1 09             	shl    ecx,0x9
c0005a77:	89 d7                	mov    edi,edx
c0005a79:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a7d:	09 c7                	or     edi,eax
c0005a7f:	74 6b                	je     c0005aec <f_lseek+0x2c0>
c0005a81:	83 c0 ff             	add    eax,0xffffffff
c0005a84:	89 cf                	mov    edi,ecx
c0005a86:	83 d2 ff             	adc    edx,0xffffffff
c0005a89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a90:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005a94:	83 c0 ff             	add    eax,0xffffffff
c0005a97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a9b:	83 d2 ff             	adc    edx,0xffffffff
c0005a9e:	31 ed                	xor    ebp,ebp
c0005aa0:	55                   	push   ebp
c0005aa1:	51                   	push   ecx
c0005aa2:	52                   	push   edx
c0005aa3:	50                   	push   eax
c0005aa4:	e8 73 95 01 00       	call   c001f01c <__udivdi3>
c0005aa9:	83 c4 10             	add    esp,0x10
c0005aac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab0:	89 d6                	mov    esi,edx
c0005ab2:	55                   	push   ebp
c0005ab3:	57                   	push   edi
c0005ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005abc:	e8 5b 95 01 00       	call   c001f01c <__udivdi3>
c0005ac1:	83 c4 10             	add    esp,0x10
c0005ac4:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005ac8:	19 d6                	sbb    esi,edx
c0005aca:	72 20                	jb     c0005aec <f_lseek+0x2c0>
c0005acc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005ad0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ad4:	f7 d9                	neg    ecx
c0005ad6:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005ada:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005add:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ae0:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ae3:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ae7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005aea:	eb 28                	jmp    c0005b14 <f_lseek+0x2e8>
c0005aec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005aef:	85 c0                	test   eax,eax
c0005af1:	75 1e                	jne    c0005b11 <f_lseek+0x2e5>
c0005af3:	31 d2                	xor    edx,edx
c0005af5:	89 d8                	mov    eax,ebx
c0005af7:	e8 de d4 ff ff       	call   c0002fda <create_chain>
c0005afc:	83 f8 01             	cmp    eax,0x1
c0005aff:	0f 84 e3 fd ff ff    	je     c00058e8 <f_lseek+0xbc>
c0005b05:	83 f8 ff             	cmp    eax,0xffffffff
c0005b08:	0f 84 f0 fd ff ff    	je     c00058fe <f_lseek+0xd2>
c0005b0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b11:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b14:	85 c0                	test   eax,eax
c0005b16:	0f 84 4b ff ff ff    	je     c0005a67 <f_lseek+0x23b>
c0005b1c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005b20:	31 ff                	xor    edi,edi
c0005b22:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b25:	89 fd                	mov    ebp,edi
c0005b27:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005b2b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b2e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b31:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005b35:	73 7d                	jae    c0005bb4 <f_lseek+0x388>
c0005b37:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b3a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b3e:	01 d6                	add    esi,edx
c0005b40:	11 cf                	adc    edi,ecx
c0005b42:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005b45:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005b48:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005b4b:	f6 c2 02             	test   dl,0x2
c0005b4e:	74 25                	je     c0005b75 <f_lseek+0x349>
c0005b50:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005b53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005b56:	19 f9                	sbb    ecx,edi
c0005b58:	73 0c                	jae    c0005b66 <f_lseek+0x33a>
c0005b5a:	83 ca 40             	or     edx,0x40
c0005b5d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005b60:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005b63:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005b66:	89 c2                	mov    edx,eax
c0005b68:	89 d8                	mov    eax,ebx
c0005b6a:	e8 6b d4 ff ff       	call   c0002fda <create_chain>
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	75 0b                	jne    c0005b7e <f_lseek+0x352>
c0005b73:	eb 30                	jmp    c0005ba5 <f_lseek+0x379>
c0005b75:	89 c2                	mov    edx,eax
c0005b77:	89 d8                	mov    eax,ebx
c0005b79:	e8 6e d1 ff ff       	call   c0002cec <get_fat>
c0005b7e:	83 f8 ff             	cmp    eax,0xffffffff
c0005b81:	0f 84 77 fd ff ff    	je     c00058fe <f_lseek+0xd2>
c0005b87:	83 f8 01             	cmp    eax,0x1
c0005b8a:	0f 86 58 fd ff ff    	jbe    c00058e8 <f_lseek+0xbc>
c0005b90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b94:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b97:	0f 86 4b fd ff ff    	jbe    c00058e8 <f_lseek+0xbc>
c0005b9d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba0:	e9 77 ff ff ff       	jmp    c0005b1c <f_lseek+0x2f0>
c0005ba5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005bb4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005bb7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005bbb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005bbe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005bc1:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005bc4:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005bca:	0f 84 97 fe ff ff    	je     c0005a67 <f_lseek+0x23b>
c0005bd0:	89 c2                	mov    edx,eax
c0005bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005bd6:	e8 51 c0 ff ff       	call   c0001c2c <clst2sect>
c0005bdb:	89 d7                	mov    edi,edx
c0005bdd:	09 c7                	or     edi,eax
c0005bdf:	0f 84 03 fd ff ff    	je     c00058e8 <f_lseek+0xbc>
c0005be5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005be9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bec:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bf0:	c1 ef 09             	shr    edi,0x9
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	11 d7                	adc    edi,edx
c0005bf7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005bfa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005bfd:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c00:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c03:	19 d1                	sbb    ecx,edx
c0005c05:	73 0a                	jae    c0005c11 <f_lseek+0x3e5>
c0005c07:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c0b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c0e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c11:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c16:	74 6d                	je     c0005c85 <f_lseek+0x459>
c0005c18:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c1e:	39 fa                	cmp    edx,edi
c0005c20:	75 04                	jne    c0005c26 <f_lseek+0x3fa>
c0005c22:	39 f0                	cmp    eax,esi
c0005c24:	74 5f                	je     c0005c85 <f_lseek+0x459>
c0005c26:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c29:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c2d:	79 25                	jns    c0005c54 <f_lseek+0x428>
c0005c2f:	83 ec 0c             	sub    esp,0xc
c0005c32:	6a 01                	push   0x1
c0005c34:	52                   	push   edx
c0005c35:	50                   	push   eax
c0005c36:	55                   	push   ebp
c0005c37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c3b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c3f:	50                   	push   eax
c0005c40:	e8 19 bd ff ff       	call   c000195e <disk_write>
c0005c45:	83 c4 20             	add    esp,0x20
c0005c48:	85 c0                	test   eax,eax
c0005c4a:	0f 85 ae fc ff ff    	jne    c00058fe <f_lseek+0xd2>
c0005c50:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	6a 01                	push   0x1
c0005c59:	57                   	push   edi
c0005c5a:	56                   	push   esi
c0005c5b:	55                   	push   ebp
c0005c5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c60:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c64:	50                   	push   eax
c0005c65:	e8 de bc ff ff       	call   c0001948 <disk_read>
c0005c6a:	83 c4 20             	add    esp,0x20
c0005c6d:	85 c0                	test   eax,eax
c0005c6f:	0f 85 89 fc ff ff    	jne    c00058fe <f_lseek+0xd2>
c0005c75:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005c78:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005c7b:	eb 08                	jmp    c0005c85 <f_lseek+0x459>
c0005c7d:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c89:	83 c4 3c             	add    esp,0x3c
c0005c8c:	5b                   	pop    ebx
c0005c8d:	5e                   	pop    esi
c0005c8e:	5f                   	pop    edi
c0005c8f:	5d                   	pop    ebp
c0005c90:	c3                   	ret    

c0005c91 <f_opendir>:
c0005c91:	56                   	push   esi
c0005c92:	b8 09 00 00 00       	mov    eax,0x9
c0005c97:	53                   	push   ebx
c0005c98:	83 ec 24             	sub    esp,0x24
c0005c9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005c9f:	85 db                	test   ebx,ebx
c0005ca1:	0f 84 e6 00 00 00    	je     c0005d8d <f_opendir+0xfc>
c0005ca7:	31 c9                	xor    ecx,ecx
c0005ca9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005cad:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005cb1:	e8 5f c7 ff ff       	call   c0002415 <mount_volume>
c0005cb6:	85 c0                	test   eax,eax
c0005cb8:	0f 85 c9 00 00 00    	jne    c0005d87 <f_opendir+0xf6>
c0005cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cc2:	83 ec 0c             	sub    esp,0xc
c0005cc5:	89 03                	mov    DWORD PTR [ebx],eax
c0005cc7:	68 60 04 00 00       	push   0x460
c0005ccc:	e8 a8 24 00 00       	call   c0008179 <ff_memalloc>
c0005cd1:	89 c6                	mov    esi,eax
c0005cd3:	83 c4 10             	add    esp,0x10
c0005cd6:	b8 11 00 00 00       	mov    eax,0x11
c0005cdb:	85 f6                	test   esi,esi
c0005cdd:	0f 84 aa 00 00 00    	je     c0005d8d <f_opendir+0xfc>
c0005ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ce7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ced:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005cf0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005cf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 83 ee ff ff       	call   c0004b81 <follow_path>
c0005cfe:	85 c0                	test   eax,eax
c0005d00:	75 61                	jne    c0005d63 <f_opendir+0xd2>
c0005d02:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d06:	78 46                	js     c0005d4e <f_opendir+0xbd>
c0005d08:	b8 05 00 00 00       	mov    eax,0x5
c0005d0d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d11:	74 50                	je     c0005d63 <f_opendir+0xd2>
c0005d13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d17:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d19:	3c 04                	cmp    al,0x4
c0005d1b:	75 26                	jne    c0005d43 <f_opendir+0xb2>
c0005d1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d20:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d23:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d26:	30 d2                	xor    dl,dl
c0005d28:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d2c:	09 c2                	or     edx,eax
c0005d2e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d31:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d34:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d37:	89 da                	mov    edx,ebx
c0005d39:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d3c:	e8 06 ee ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0005d41:	eb 0b                	jmp    c0005d4e <f_opendir+0xbd>
c0005d43:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d46:	e8 ab ed ff ff       	call   c0004af6 <ld_clust.isra.0>
c0005d4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d52:	31 d2                	xor    edx,edx
c0005d54:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005d58:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 7f d1 ff ff       	call   c0002ee2 <dir_sdi>
c0005d63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d67:	83 ec 0c             	sub    esp,0xc
c0005d6a:	56                   	push   esi
c0005d6b:	e8 1f 24 00 00       	call   c000818f <ff_memfree>
c0005d70:	83 c4 10             	add    esp,0x10
c0005d73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d77:	83 f8 04             	cmp    eax,0x4
c0005d7a:	74 06                	je     c0005d82 <f_opendir+0xf1>
c0005d7c:	85 c0                	test   eax,eax
c0005d7e:	74 0d                	je     c0005d8d <f_opendir+0xfc>
c0005d80:	eb 05                	jmp    c0005d87 <f_opendir+0xf6>
c0005d82:	b8 05 00 00 00       	mov    eax,0x5
c0005d87:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005d8d:	83 c4 24             	add    esp,0x24
c0005d90:	5b                   	pop    ebx
c0005d91:	5e                   	pop    esi
c0005d92:	c3                   	ret    

c0005d93 <f_closedir>:
c0005d93:	53                   	push   ebx
c0005d94:	83 ec 18             	sub    esp,0x18
c0005d97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005d9b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005d9f:	89 d8                	mov    eax,ebx
c0005da1:	e8 e9 c2 ff ff       	call   c000208f <validate>
c0005da6:	85 c0                	test   eax,eax
c0005da8:	75 06                	jne    c0005db0 <f_closedir+0x1d>
c0005daa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005db0:	83 c4 18             	add    esp,0x18
c0005db3:	5b                   	pop    ebx
c0005db4:	c3                   	ret    

c0005db5 <f_readdir>:
c0005db5:	57                   	push   edi
c0005db6:	56                   	push   esi
c0005db7:	53                   	push   ebx
c0005db8:	83 ec 20             	sub    esp,0x20
c0005dbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dbf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc3:	89 d8                	mov    eax,ebx
c0005dc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005dc9:	e8 c1 c2 ff ff       	call   c000208f <validate>
c0005dce:	85 c0                	test   eax,eax
c0005dd0:	75 77                	jne    c0005e49 <f_readdir+0x94>
c0005dd2:	85 ff                	test   edi,edi
c0005dd4:	75 0b                	jne    c0005de1 <f_readdir+0x2c>
c0005dd6:	31 d2                	xor    edx,edx
c0005dd8:	89 d8                	mov    eax,ebx
c0005dda:	e8 03 d1 ff ff       	call   c0002ee2 <dir_sdi>
c0005ddf:	eb 68                	jmp    c0005e49 <f_readdir+0x94>
c0005de1:	83 ec 0c             	sub    esp,0xc
c0005de4:	68 60 04 00 00       	push   0x460
c0005de9:	e8 8b 23 00 00       	call   c0008179 <ff_memalloc>
c0005dee:	89 c6                	mov    esi,eax
c0005df0:	83 c4 10             	add    esp,0x10
c0005df3:	b8 11 00 00 00       	mov    eax,0x11
c0005df8:	85 f6                	test   esi,esi
c0005dfa:	74 4d                	je     c0005e49 <f_readdir+0x94>
c0005dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e00:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e09:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e0c:	31 d2                	xor    edx,edx
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 df d8 ff ff       	call   c00036f4 <dir_read>
c0005e15:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e1a:	75 19                	jne    c0005e35 <f_readdir+0x80>
c0005e1c:	89 fa                	mov    edx,edi
c0005e1e:	89 d8                	mov    eax,ebx
c0005e20:	e8 d0 ea ff ff       	call   c00048f5 <get_fileinfo>
c0005e25:	31 d2                	xor    edx,edx
c0005e27:	89 d8                	mov    eax,ebx
c0005e29:	e8 0e d6 ff ff       	call   c000343c <dir_next>
c0005e2e:	83 f8 04             	cmp    eax,0x4
c0005e31:	75 02                	jne    c0005e35 <f_readdir+0x80>
c0005e33:	31 c0                	xor    eax,eax
c0005e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e39:	83 ec 0c             	sub    esp,0xc
c0005e3c:	56                   	push   esi
c0005e3d:	e8 4d 23 00 00       	call   c000818f <ff_memfree>
c0005e42:	83 c4 10             	add    esp,0x10
c0005e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e49:	83 c4 20             	add    esp,0x20
c0005e4c:	5b                   	pop    ebx
c0005e4d:	5e                   	pop    esi
c0005e4e:	5f                   	pop    edi
c0005e4f:	c3                   	ret    

c0005e50 <f_stat>:
c0005e50:	57                   	push   edi
c0005e51:	31 c9                	xor    ecx,ecx
c0005e53:	56                   	push   esi
c0005e54:	53                   	push   ebx
c0005e55:	83 ec 50             	sub    esp,0x50
c0005e58:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005e5c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005e60:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005e64:	e8 ac c5 ff ff       	call   c0002415 <mount_volume>
c0005e69:	89 c3                	mov    ebx,eax
c0005e6b:	85 c0                	test   eax,eax
c0005e6d:	75 67                	jne    c0005ed6 <f_stat+0x86>
c0005e6f:	83 ec 0c             	sub    esp,0xc
c0005e72:	bb 11 00 00 00       	mov    ebx,0x11
c0005e77:	68 60 04 00 00       	push   0x460
c0005e7c:	e8 f8 22 00 00       	call   c0008179 <ff_memalloc>
c0005e81:	83 c4 10             	add    esp,0x10
c0005e84:	89 c6                	mov    esi,eax
c0005e86:	85 c0                	test   eax,eax
c0005e88:	74 4c                	je     c0005ed6 <f_stat+0x86>
c0005e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e8e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e97:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e9a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005e9e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ea2:	e8 da ec ff ff       	call   c0004b81 <follow_path>
c0005ea7:	89 c3                	mov    ebx,eax
c0005ea9:	85 c0                	test   eax,eax
c0005eab:	75 1d                	jne    c0005eca <f_stat+0x7a>
c0005ead:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005eb2:	78 11                	js     c0005ec5 <f_stat+0x75>
c0005eb4:	85 ff                	test   edi,edi
c0005eb6:	74 12                	je     c0005eca <f_stat+0x7a>
c0005eb8:	89 fa                	mov    edx,edi
c0005eba:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ebe:	e8 32 ea ff ff       	call   c00048f5 <get_fileinfo>
c0005ec3:	eb 05                	jmp    c0005eca <f_stat+0x7a>
c0005ec5:	bb 06 00 00 00       	mov    ebx,0x6
c0005eca:	83 ec 0c             	sub    esp,0xc
c0005ecd:	56                   	push   esi
c0005ece:	e8 bc 22 00 00       	call   c000818f <ff_memfree>
c0005ed3:	83 c4 10             	add    esp,0x10
c0005ed6:	83 c4 50             	add    esp,0x50
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	5b                   	pop    ebx
c0005edc:	5e                   	pop    esi
c0005edd:	5f                   	pop    edi
c0005ede:	c3                   	ret    

c0005edf <f_getfree>:
c0005edf:	55                   	push   ebp
c0005ee0:	31 c9                	xor    ecx,ecx
c0005ee2:	57                   	push   edi
c0005ee3:	56                   	push   esi
c0005ee4:	53                   	push   ebx
c0005ee5:	83 ec 5c             	sub    esp,0x5c
c0005ee8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005eec:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005ef0:	e8 20 c5 ff ff       	call   c0002415 <mount_volume>
c0005ef5:	89 c5                	mov    ebp,eax
c0005ef7:	85 c0                	test   eax,eax
c0005ef9:	0f 85 be 01 00 00    	jne    c00060bd <f_getfree+0x1de>
c0005eff:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f07:	89 02                	mov    DWORD PTR [edx],eax
c0005f09:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005f0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005f13:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005f16:	39 f2                	cmp    edx,esi
c0005f18:	77 0b                	ja     c0005f25 <f_getfree+0x46>
c0005f1a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f1e:	89 10                	mov    DWORD PTR [eax],edx
c0005f20:	e9 98 01 00 00       	jmp    c00060bd <f_getfree+0x1de>
c0005f25:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f27:	80 fa 01             	cmp    dl,0x1
c0005f2a:	75 3a                	jne    c0005f66 <f_getfree+0x87>
c0005f2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f30:	be 02 00 00 00       	mov    esi,0x2
c0005f35:	31 db                	xor    ebx,ebx
c0005f37:	89 f2                	mov    edx,esi
c0005f39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f3d:	e8 aa cd ff ff       	call   c0002cec <get_fat>
c0005f42:	83 f8 ff             	cmp    eax,0xffffffff
c0005f45:	0f 84 51 01 00 00    	je     c000609c <f_getfree+0x1bd>
c0005f4b:	83 f8 01             	cmp    eax,0x1
c0005f4e:	0f 84 4f 01 00 00    	je     c00060a3 <f_getfree+0x1c4>
c0005f54:	83 d3 00             	adc    ebx,0x0
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	46                   	inc    esi
c0005f5c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005f5f:	77 d6                	ja     c0005f37 <f_getfree+0x58>
c0005f61:	e9 46 01 00 00       	jmp    c00060ac <f_getfree+0x1cd>
c0005f66:	80 fa 04             	cmp    dl,0x4
c0005f69:	0f 85 94 00 00 00    	jne    c0006003 <f_getfree+0x124>
c0005f6f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005f72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f7d:	31 ff                	xor    edi,edi
c0005f7f:	31 db                	xor    ebx,ebx
c0005f81:	85 ff                	test   edi,edi
c0005f83:	75 3f                	jne    c0005fc4 <f_getfree+0xe5>
c0005f85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f8d:	83 c0 01             	add    eax,0x1
c0005f90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f94:	83 d2 00             	adc    edx,0x0
c0005f97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005f9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005f9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005fa7:	e8 be c1 ff ff       	call   c000216a <move_window>
c0005fac:	85 c0                	test   eax,eax
c0005fae:	0f 85 f6 00 00 00    	jne    c00060aa <f_getfree+0x1cb>
c0005fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005fc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc8:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0005fcc:	88 c2                	mov    dl,al
c0005fce:	b8 08 00 00 00       	mov    eax,0x8
c0005fd3:	29 f0                	sub    eax,esi
c0005fd5:	89 c1                	mov    ecx,eax
c0005fd7:	01 f1                	add    ecx,esi
c0005fd9:	74 18                	je     c0005ff3 <f_getfree+0x114>
c0005fdb:	85 f6                	test   esi,esi
c0005fdd:	74 14                	je     c0005ff3 <f_getfree+0x114>
c0005fdf:	88 d1                	mov    cl,dl
c0005fe1:	83 e1 01             	and    ecx,0x1
c0005fe4:	80 f9 01             	cmp    cl,0x1
c0005fe7:	88 d1                	mov    cl,dl
c0005fe9:	83 d3 00             	adc    ebx,0x0
c0005fec:	4e                   	dec    esi
c0005fed:	d0 e9                	shr    cl,1
c0005fef:	88 ca                	mov    dl,cl
c0005ff1:	eb e2                	jmp    c0005fd5 <f_getfree+0xf6>
c0005ff3:	47                   	inc    edi
c0005ff4:	81 e7 ff 01 00 00    	and    edi,0x1ff
c0005ffa:	85 f6                	test   esi,esi
c0005ffc:	75 83                	jne    c0005f81 <f_getfree+0xa2>
c0005ffe:	e9 a9 00 00 00       	jmp    c00060ac <f_getfree+0x1cd>
c0006003:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006006:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006009:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006011:	31 db                	xor    ebx,ebx
c0006013:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006018:	75 1b                	jne    c0006035 <f_getfree+0x156>
c000601a:	89 d6                	mov    esi,edx
c000601c:	89 cf                	mov    edi,ecx
c000601e:	83 c6 01             	add    esi,0x1
c0006021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006025:	83 d7 00             	adc    edi,0x0
c0006028:	e8 3d c1 ff ff       	call   c000216a <move_window>
c000602d:	85 c0                	test   eax,eax
c000602f:	75 79                	jne    c00060aa <f_getfree+0x1cb>
c0006031:	89 f2                	mov    edx,esi
c0006033:	89 f9                	mov    ecx,edi
c0006035:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006039:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000603d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006041:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006045:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006049:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000604d:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006050:	75 15                	jne    c0006067 <f_getfree+0x188>
c0006052:	e8 3c b9 ff ff       	call   c0001993 <ld_word>
c0006057:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000605b:	66 83 f8 01          	cmp    ax,0x1
c000605f:	83 d3 00             	adc    ebx,0x0
c0006062:	83 c6 02             	add    esi,0x2
c0006065:	eb 17                	jmp    c000607e <f_getfree+0x19f>
c0006067:	e8 34 b9 ff ff       	call   c00019a0 <ld_dword>
c000606c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006070:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006075:	83 f8 01             	cmp    eax,0x1
c0006078:	83 d3 00             	adc    ebx,0x0
c000607b:	83 c6 04             	add    esi,0x4
c000607e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006084:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006088:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000608c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006090:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006094:	0f 85 79 ff ff ff    	jne    c0006013 <f_getfree+0x134>
c000609a:	eb 10                	jmp    c00060ac <f_getfree+0x1cd>
c000609c:	bd 01 00 00 00       	mov    ebp,0x1
c00060a1:	eb 09                	jmp    c00060ac <f_getfree+0x1cd>
c00060a3:	bd 02 00 00 00       	mov    ebp,0x2
c00060a8:	eb 02                	jmp    c00060ac <f_getfree+0x1cd>
c00060aa:	89 c5                	mov    ebp,eax
c00060ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060b0:	89 18                	mov    DWORD PTR [eax],ebx
c00060b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b6:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060ba:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060bd:	83 c4 5c             	add    esp,0x5c
c00060c0:	89 e8                	mov    eax,ebp
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <f_truncate>:
c00060c7:	56                   	push   esi
c00060c8:	53                   	push   ebx
c00060c9:	83 ec 14             	sub    esp,0x14
c00060cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d4:	89 d8                	mov    eax,ebx
c00060d6:	e8 b4 bf ff ff       	call   c000208f <validate>
c00060db:	89 c6                	mov    esi,eax
c00060dd:	85 c0                	test   eax,eax
c00060df:	0f 85 d2 00 00 00    	jne    c00061b7 <f_truncate+0xf0>
c00060e5:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00060e9:	85 f6                	test   esi,esi
c00060eb:	0f 85 c6 00 00 00    	jne    c00061b7 <f_truncate+0xf0>
c00060f1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00060f5:	0f 84 b7 00 00 00    	je     c00061b2 <f_truncate+0xeb>
c00060fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00060fe:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006101:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006104:	89 d1                	mov    ecx,edx
c0006106:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006109:	0f 83 a8 00 00 00    	jae    c00061b7 <f_truncate+0xf0>
c000610f:	09 c2                	or     edx,eax
c0006111:	75 15                	jne    c0006128 <f_truncate+0x61>
c0006113:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006116:	31 c9                	xor    ecx,ecx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 bc d0 ff ff       	call   c00031db <remove_chain>
c000611f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006126:	eb 35                	jmp    c000615d <f_truncate+0x96>
c0006128:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000612b:	89 d8                	mov    eax,ebx
c000612d:	e8 ba cb ff ff       	call   c0002cec <get_fat>
c0006132:	89 c2                	mov    edx,eax
c0006134:	b8 01 00 00 00       	mov    eax,0x1
c0006139:	83 fa ff             	cmp    edx,0xffffffff
c000613c:	74 1f                	je     c000615d <f_truncate+0x96>
c000613e:	b8 02 00 00 00       	mov    eax,0x2
c0006143:	83 fa 01             	cmp    edx,0x1
c0006146:	74 15                	je     c000615d <f_truncate+0x96>
c0006148:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000614c:	31 c0                	xor    eax,eax
c000614e:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006151:	76 0a                	jbe    c000615d <f_truncate+0x96>
c0006153:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e d0 ff ff       	call   c00031db <remove_chain>
c000615d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006160:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006163:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006166:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006169:	83 ca 40             	or     edx,0x40
c000616c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000616f:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006172:	85 c0                	test   eax,eax
c0006174:	75 35                	jne    c00061ab <f_truncate+0xe4>
c0006176:	84 d2                	test   dl,dl
c0006178:	79 3d                	jns    c00061b7 <f_truncate+0xf0>
c000617a:	83 ec 0c             	sub    esp,0xc
c000617d:	8d 43 50             	lea    eax,[ebx+0x50]
c0006180:	6a 01                	push   0x1
c0006182:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006185:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006188:	50                   	push   eax
c0006189:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000618d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006191:	50                   	push   eax
c0006192:	e8 c7 b7 ff ff       	call   c000195e <disk_write>
c0006197:	83 c4 20             	add    esp,0x20
c000619a:	85 c0                	test   eax,eax
c000619c:	75 08                	jne    c00061a6 <f_truncate+0xdf>
c000619e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061a2:	31 f6                	xor    esi,esi
c00061a4:	eb 11                	jmp    c00061b7 <f_truncate+0xf0>
c00061a6:	b8 01 00 00 00       	mov    eax,0x1
c00061ab:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061ae:	89 c6                	mov    esi,eax
c00061b0:	eb 05                	jmp    c00061b7 <f_truncate+0xf0>
c00061b2:	be 07 00 00 00       	mov    esi,0x7
c00061b7:	83 c4 14             	add    esp,0x14
c00061ba:	89 f0                	mov    eax,esi
c00061bc:	5b                   	pop    ebx
c00061bd:	5e                   	pop    esi
c00061be:	c3                   	ret    

c00061bf <f_unlink>:
c00061bf:	56                   	push   esi
c00061c0:	b9 02 00 00 00       	mov    ecx,0x2
c00061c5:	53                   	push   ebx
c00061c6:	81 ec e4 00 00 00    	sub    esp,0xe4
c00061cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00061d0:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00061d7:	e8 39 c2 ff ff       	call   c0002415 <mount_volume>
c00061dc:	85 c0                	test   eax,eax
c00061de:	0f 85 53 01 00 00    	jne    c0006337 <f_unlink+0x178>
c00061e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00061e8:	83 ec 0c             	sub    esp,0xc
c00061eb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00061ef:	68 60 04 00 00       	push   0x460
c00061f4:	e8 80 1f 00 00       	call   c0008179 <ff_memalloc>
c00061f9:	89 c3                	mov    ebx,eax
c00061fb:	83 c4 10             	add    esp,0x10
c00061fe:	b8 11 00 00 00       	mov    eax,0x11
c0006203:	85 db                	test   ebx,ebx
c0006205:	0f 84 2c 01 00 00    	je     c0006337 <f_unlink+0x178>
c000620b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000620f:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006215:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006218:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000621b:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006222:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006226:	e8 56 e9 ff ff       	call   c0004b81 <follow_path>
c000622b:	85 c0                	test   eax,eax
c000622d:	0f 85 f0 00 00 00    	jne    c0006323 <f_unlink+0x164>
c0006233:	b8 06 00 00 00       	mov    eax,0x6
c0006238:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006240:	0f 88 dd 00 00 00    	js     c0006323 <f_unlink+0x164>
c0006246:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000624b:	74 0a                	je     c0006257 <f_unlink+0x98>
c000624d:	b8 07 00 00 00       	mov    eax,0x7
c0006252:	e9 cc 00 00 00       	jmp    c0006323 <f_unlink+0x164>
c0006257:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000625b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000625f:	8a 02                	mov    al,BYTE PTR [edx]
c0006261:	3c 04                	cmp    al,0x4
c0006263:	75 12                	jne    c0006277 <f_unlink+0xb8>
c0006265:	8d 42 10             	lea    eax,[edx+0x10]
c0006268:	8d 54 24 20          	lea    edx,[esp+0x20]
c000626c:	e8 d6 e8 ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0006271:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006275:	eb 0e                	jmp    c0006285 <f_unlink+0xc6>
c0006277:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000627e:	e8 73 e8 ff ff       	call   c0004af6 <ld_clust.isra.0>
c0006283:	89 c6                	mov    esi,eax
c0006285:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000628a:	75 20                	jne    c00062ac <f_unlink+0xed>
c000628c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006290:	e8 d6 d6 ff ff       	call   c000396b <dir_remove>
c0006295:	85 c0                	test   eax,eax
c0006297:	75 7d                	jne    c0006316 <f_unlink+0x157>
c0006299:	85 f6                	test   esi,esi
c000629b:	74 79                	je     c0006316 <f_unlink+0x157>
c000629d:	31 c9                	xor    ecx,ecx
c000629f:	89 f2                	mov    edx,esi
c00062a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062a5:	e8 31 cf ff ff       	call   c00031db <remove_chain>
c00062aa:	eb 6a                	jmp    c0006316 <f_unlink+0x157>
c00062ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b0:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062b7:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062c1:	75 21                	jne    c00062e4 <f_unlink+0x125>
c00062c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062cb:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062d2:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00062d6:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00062dd:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00062e4:	31 d2                	xor    edx,edx
c00062e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00062ed:	e8 f0 cb ff ff       	call   c0002ee2 <dir_sdi>
c00062f2:	85 c0                	test   eax,eax
c00062f4:	75 2d                	jne    c0006323 <f_unlink+0x164>
c00062f6:	31 d2                	xor    edx,edx
c00062f8:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00062ff:	e8 f0 d3 ff ff       	call   c00036f4 <dir_read>
c0006304:	85 c0                	test   eax,eax
c0006306:	0f 84 41 ff ff ff    	je     c000624d <f_unlink+0x8e>
c000630c:	83 f8 04             	cmp    eax,0x4
c000630f:	75 12                	jne    c0006323 <f_unlink+0x164>
c0006311:	e9 76 ff ff ff       	jmp    c000628c <f_unlink+0xcd>
c0006316:	85 c0                	test   eax,eax
c0006318:	75 09                	jne    c0006323 <f_unlink+0x164>
c000631a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000631e:	e8 55 df ff ff       	call   c0004278 <sync_fs>
c0006323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006327:	83 ec 0c             	sub    esp,0xc
c000632a:	53                   	push   ebx
c000632b:	e8 5f 1e 00 00       	call   c000818f <ff_memfree>
c0006330:	83 c4 10             	add    esp,0x10
c0006333:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006337:	81 c4 e4 00 00 00    	add    esp,0xe4
c000633d:	5b                   	pop    ebx
c000633e:	5e                   	pop    esi
c000633f:	c3                   	ret    

c0006340 <f_mkdir>:
c0006340:	57                   	push   edi
c0006341:	b9 02 00 00 00       	mov    ecx,0x2
c0006346:	56                   	push   esi
c0006347:	53                   	push   ebx
c0006348:	83 c4 80             	add    esp,0xffffff80
c000634b:	8d 54 24 08          	lea    edx,[esp+0x8]
c000634f:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006356:	e8 ba c0 ff ff       	call   c0002415 <mount_volume>
c000635b:	89 c3                	mov    ebx,eax
c000635d:	85 c0                	test   eax,eax
c000635f:	0f 85 fe 01 00 00    	jne    c0006563 <f_mkdir+0x223>
c0006365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006369:	83 ec 0c             	sub    esp,0xc
c000636c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006370:	bb 11 00 00 00       	mov    ebx,0x11
c0006375:	68 60 04 00 00       	push   0x460
c000637a:	e8 fa 1d 00 00       	call   c0008179 <ff_memalloc>
c000637f:	83 c4 10             	add    esp,0x10
c0006382:	89 c7                	mov    edi,eax
c0006384:	85 c0                	test   eax,eax
c0006386:	0f 84 d7 01 00 00    	je     c0006563 <f_mkdir+0x223>
c000638c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006390:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006396:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006399:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000639c:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063a3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063a7:	e8 d5 e7 ff ff       	call   c0004b81 <follow_path>
c00063ac:	89 c3                	mov    ebx,eax
c00063ae:	85 c0                	test   eax,eax
c00063b0:	74 3e                	je     c00063f0 <f_mkdir+0xb0>
c00063b2:	83 f8 04             	cmp    eax,0x4
c00063b5:	75 3e                	jne    c00063f5 <f_mkdir+0xb5>
c00063b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063bb:	31 d2                	xor    edx,edx
c00063bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00063c5:	e8 10 cc ff ff       	call   c0002fda <create_chain>
c00063ca:	89 c6                	mov    esi,eax
c00063cc:	85 c0                	test   eax,eax
c00063ce:	74 0c                	je     c00063dc <f_mkdir+0x9c>
c00063d0:	bb 02 00 00 00       	mov    ebx,0x2
c00063d5:	83 f8 01             	cmp    eax,0x1
c00063d8:	74 07                	je     c00063e1 <f_mkdir+0xa1>
c00063da:	eb 2a                	jmp    c0006406 <f_mkdir+0xc6>
c00063dc:	bb 07 00 00 00       	mov    ebx,0x7
c00063e1:	31 c9                	xor    ecx,ecx
c00063e3:	89 f2                	mov    edx,esi
c00063e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00063e9:	e8 ed cd ff ff       	call   c00031db <remove_chain>
c00063ee:	eb 05                	jmp    c00063f5 <f_mkdir+0xb5>
c00063f0:	bb 08 00 00 00       	mov    ebx,0x8
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	57                   	push   edi
c00063f9:	e8 91 1d 00 00       	call   c000818f <ff_memfree>
c00063fe:	83 c4 10             	add    esp,0x10
c0006401:	e9 5d 01 00 00       	jmp    c0006563 <f_mkdir+0x223>
c0006406:	bb 01 00 00 00       	mov    ebx,0x1
c000640b:	83 f8 ff             	cmp    eax,0xffffffff
c000640e:	74 d1                	je     c00063e1 <f_mkdir+0xa1>
c0006410:	89 f2                	mov    edx,esi
c0006412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006416:	e8 08 cf ff ff       	call   c0003323 <dir_clear>
c000641b:	89 c3                	mov    ebx,eax
c000641d:	85 c0                	test   eax,eax
c000641f:	75 c0                	jne    c00063e1 <f_mkdir+0xa1>
c0006421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006425:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006428:	74 69                	je     c0006493 <f_mkdir+0x153>
c000642a:	b9 0b 00 00 00       	mov    ecx,0xb
c000642f:	83 c0 54             	add    eax,0x54
c0006432:	ba 20 00 00 00       	mov    edx,0x20
c0006437:	e8 eb b5 ff ff       	call   c0001a27 <mem_set>
c000643c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006440:	83 c0 6a             	add    eax,0x6a
c0006443:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006447:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c000644b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006450:	e8 b4 b5 ff ff       	call   c0001a09 <st_dword>
c0006455:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006459:	89 f1                	mov    ecx,esi
c000645b:	8d 50 54             	lea    edx,[eax+0x54]
c000645e:	e8 bc e6 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006467:	b9 20 00 00 00       	mov    ecx,0x20
c000646c:	8d 50 54             	lea    edx,[eax+0x54]
c000646f:	83 c0 74             	add    eax,0x74
c0006472:	e8 9b b5 ff ff       	call   c0001a12 <mem_cpy>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000647f:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006483:	8d 50 74             	lea    edx,[eax+0x74]
c0006486:	e8 94 e6 ff ff       	call   c0004b1f <st_clust.isra.1>
c000648b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006493:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006497:	e8 59 db ff ff       	call   c0003ff5 <dir_register>
c000649c:	89 c3                	mov    ebx,eax
c000649e:	85 c0                	test   eax,eax
c00064a0:	0f 85 3b ff ff ff    	jne    c00063e1 <f_mkdir+0xa1>
c00064a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064aa:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064ad:	75 74                	jne    c0006523 <f_mkdir+0x1e3>
c00064af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064b2:	ba 00 00 21 50       	mov    edx,0x50210000
c00064b7:	83 c0 0c             	add    eax,0xc
c00064ba:	e8 4a b5 ff ff       	call   c0001a09 <st_dword>
c00064bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064c6:	89 f2                	mov    edx,esi
c00064c8:	83 c0 34             	add    eax,0x34
c00064cb:	e8 39 b5 ff ff       	call   c0001a09 <st_dword>
c00064d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00064d8:	c1 e2 09             	shl    edx,0x9
c00064db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064de:	83 c0 38             	add    eax,0x38
c00064e1:	e8 23 b5 ff ff       	call   c0001a09 <st_dword>
c00064e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ea:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00064ee:	c1 e2 09             	shl    edx,0x9
c00064f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064f4:	83 c0 28             	add    eax,0x28
c00064f7:	e8 0d b5 ff ff       	call   c0001a09 <st_dword>
c00064fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006500:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006503:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006507:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000650a:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000650e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006512:	e8 cf d3 ff ff       	call   c00038e6 <store_xdir>
c0006517:	89 c3                	mov    ebx,eax
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 85 d4 fe ff ff    	jne    c00063f5 <f_mkdir+0xb5>
c0006521:	eb 30                	jmp    c0006553 <f_mkdir+0x213>
c0006523:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006527:	ba 00 00 21 50       	mov    edx,0x50210000
c000652c:	83 c0 16             	add    eax,0x16
c000652f:	e8 d5 b4 ff ff       	call   c0001a09 <st_dword>
c0006534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006538:	89 f1                	mov    ecx,esi
c000653a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000653e:	e8 dc e5 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006543:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006547:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000654b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	e8 1c dd ff ff       	call   c0004278 <sync_fs>
c000655c:	89 c3                	mov    ebx,eax
c000655e:	e9 92 fe ff ff       	jmp    c00063f5 <f_mkdir+0xb5>
c0006563:	83 ec 80             	sub    esp,0xffffff80
c0006566:	89 d8                	mov    eax,ebx
c0006568:	5b                   	pop    ebx
c0006569:	5e                   	pop    esi
c000656a:	5f                   	pop    edi
c000656b:	c3                   	ret    

c000656c <f_rename>:
c000656c:	55                   	push   ebp
c000656d:	57                   	push   edi
c000656e:	56                   	push   esi
c000656f:	53                   	push   ebx
c0006570:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006576:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000657d:	e8 f3 b9 ff ff       	call   c0001f75 <get_ldnumber>
c0006582:	b9 02 00 00 00       	mov    ecx,0x2
c0006587:	8d 54 24 14          	lea    edx,[esp+0x14]
c000658b:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006592:	e8 7e be ff ff       	call   c0002415 <mount_volume>
c0006597:	85 c0                	test   eax,eax
c0006599:	0f 85 b5 02 00 00    	jne    c0006854 <f_rename+0x2e8>
c000659f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065aa:	68 60 04 00 00       	push   0x460
c00065af:	e8 c5 1b 00 00       	call   c0008179 <ff_memalloc>
c00065b4:	89 c3                	mov    ebx,eax
c00065b6:	83 c4 10             	add    esp,0x10
c00065b9:	b8 11 00 00 00       	mov    eax,0x11
c00065be:	85 db                	test   ebx,ebx
c00065c0:	0f 84 8e 02 00 00    	je     c0006854 <f_rename+0x2e8>
c00065c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ca:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00065d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00065d6:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00065dd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00065e1:	e8 9b e5 ff ff       	call   c0004b81 <follow_path>
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 52 02 00 00    	jne    c0006840 <f_rename+0x2d4>
c00065ee:	b8 06 00 00 00       	mov    eax,0x6
c00065f3:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00065fb:	0f 85 3f 02 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006608:	0f 85 05 01 00 00    	jne    c0006713 <f_rename+0x1a7>
c000660e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006611:	b9 40 00 00 00       	mov    ecx,0x40
c0006616:	8d 44 24 18          	lea    eax,[esp+0x18]
c000661a:	e8 f3 b3 ff ff       	call   c0001a12 <mem_cpy>
c000661f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006624:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006628:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000662f:	e8 de b3 ff ff       	call   c0001a12 <mem_cpy>
c0006634:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000663b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006642:	e8 3a e5 ff ff       	call   c0004b81 <follow_path>
c0006647:	85 c0                	test   eax,eax
c0006649:	75 29                	jne    c0006674 <f_rename+0x108>
c000664b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000664f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006656:	74 0a                	je     c0006662 <f_rename+0xf6>
c0006658:	b8 08 00 00 00       	mov    eax,0x8
c000665d:	e9 de 01 00 00       	jmp    c0006840 <f_rename+0x2d4>
c0006662:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006669:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006670:	75 e6                	jne    c0006658 <f_rename+0xec>
c0006672:	eb 09                	jmp    c000667d <f_rename+0x111>
c0006674:	83 f8 04             	cmp    eax,0x4
c0006677:	0f 85 c3 01 00 00    	jne    c0006840 <f_rename+0x2d4>
c000667d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006684:	e8 6c d9 ff ff       	call   c0003ff5 <dir_register>
c0006689:	85 c0                	test   eax,eax
c000668b:	0f 85 af 01 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006695:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006698:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000669b:	89 c5                	mov    ebp,eax
c000669d:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066a4:	8d 46 24             	lea    eax,[esi+0x24]
c00066a7:	e8 e7 b2 ff ff       	call   c0001993 <ld_word>
c00066ac:	b9 40 00 00 00       	mov    ecx,0x40
c00066b1:	89 c7                	mov    edi,eax
c00066b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066b7:	89 f0                	mov    eax,esi
c00066b9:	e8 54 b3 ff ff       	call   c0001a12 <mem_cpy>
c00066be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c5:	89 e9                	mov    ecx,ebp
c00066c7:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00066ca:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d5:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00066d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066db:	83 c0 24             	add    eax,0x24
c00066de:	0f b7 d7             	movzx  edx,di
c00066e1:	e8 1f b3 ff ff       	call   c0001a05 <st_word>
c00066e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066ed:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00066f0:	a8 10                	test   al,0x10
c00066f2:	75 06                	jne    c00066fa <f_rename+0x18e>
c00066f4:	83 c8 20             	or     eax,0x20
c00066f7:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 e0 d1 ff ff       	call   c00038e6 <store_xdir>
c0006706:	85 c0                	test   eax,eax
c0006708:	0f 84 1c 01 00 00    	je     c000682a <f_rename+0x2be>
c000670e:	e9 2d 01 00 00       	jmp    c0006840 <f_rename+0x2d4>
c0006713:	b9 20 00 00 00       	mov    ecx,0x20
c0006718:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000671f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006723:	e8 ea b2 ff ff       	call   c0001a12 <mem_cpy>
c0006728:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006731:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006738:	e8 d5 b2 ff ff       	call   c0001a12 <mem_cpy>
c000673d:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 31 e4 ff ff       	call   c0004b81 <follow_path>
c0006750:	85 c0                	test   eax,eax
c0006752:	75 27                	jne    c000677b <f_rename+0x20f>
c0006754:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006758:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675f:	0f 85 f3 fe ff ff    	jne    c0006658 <f_rename+0xec>
c0006765:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006773:	0f 85 df fe ff ff    	jne    c0006658 <f_rename+0xec>
c0006779:	eb 09                	jmp    c0006784 <f_rename+0x218>
c000677b:	83 f8 04             	cmp    eax,0x4
c000677e:	0f 85 bc 00 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006784:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678b:	e8 65 d8 ff ff       	call   c0003ff5 <dir_register>
c0006790:	85 c0                	test   eax,eax
c0006792:	0f 85 a8 00 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006798:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000679f:	b9 13 00 00 00       	mov    ecx,0x13
c00067a4:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067a8:	8d 46 0d             	lea    eax,[esi+0xd]
c00067ab:	e8 62 b2 ff ff       	call   c0001a12 <mem_cpy>
c00067b0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067b4:	a8 10                	test   al,0x10
c00067b6:	75 03                	jne    c00067bb <f_rename+0x24f>
c00067b8:	83 c8 20             	or     eax,0x20
c00067bb:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067c6:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00067ca:	74 5e                	je     c000682a <f_rename+0x2be>
c00067cc:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00067d3:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00067d7:	74 51                	je     c000682a <f_rename+0x2be>
c00067d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00067dd:	89 f2                	mov    edx,esi
c00067df:	8a 07                	mov    al,BYTE PTR [edi]
c00067e1:	e8 10 e3 ff ff       	call   c0004af6 <ld_clust.isra.0>
c00067e6:	89 c2                	mov    edx,eax
c00067e8:	89 f8                	mov    eax,edi
c00067ea:	e8 3d b4 ff ff       	call   c0001c2c <clst2sect>
c00067ef:	89 c6                	mov    esi,eax
c00067f1:	89 d1                	mov    ecx,edx
c00067f3:	b8 02 00 00 00       	mov    eax,0x2
c00067f8:	09 f2                	or     edx,esi
c00067fa:	74 44                	je     c0006840 <f_rename+0x2d4>
c00067fc:	89 f2                	mov    edx,esi
c00067fe:	89 f8                	mov    eax,edi
c0006800:	e8 65 b9 ff ff       	call   c000216a <move_window>
c0006805:	85 c0                	test   eax,eax
c0006807:	75 37                	jne    c0006840 <f_rename+0x2d4>
c0006809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680d:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006811:	75 17                	jne    c000682a <f_rename+0x2be>
c0006813:	8d 50 74             	lea    edx,[eax+0x74]
c0006816:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000681d:	e8 fd e2 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006826:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000682a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000682e:	e8 38 d1 ff ff       	call   c000396b <dir_remove>
c0006833:	85 c0                	test   eax,eax
c0006835:	75 09                	jne    c0006840 <f_rename+0x2d4>
c0006837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000683b:	e8 38 da ff ff       	call   c0004278 <sync_fs>
c0006840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006844:	83 ec 0c             	sub    esp,0xc
c0006847:	53                   	push   ebx
c0006848:	e8 42 19 00 00       	call   c000818f <ff_memfree>
c000684d:	83 c4 10             	add    esp,0x10
c0006850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006854:	81 c4 fc 00 00 00    	add    esp,0xfc
c000685a:	5b                   	pop    ebx
c000685b:	5e                   	pop    esi
c000685c:	5f                   	pop    edi
c000685d:	5d                   	pop    ebp
c000685e:	c3                   	ret    

c000685f <f_chmod>:
c000685f:	57                   	push   edi
c0006860:	b9 02 00 00 00       	mov    ecx,0x2
c0006865:	56                   	push   esi
c0006866:	53                   	push   ebx
c0006867:	83 ec 60             	sub    esp,0x60
c000686a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000686e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006872:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006876:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000687a:	e8 96 bb ff ff       	call   c0002415 <mount_volume>
c000687f:	85 c0                	test   eax,eax
c0006881:	0f 85 af 00 00 00    	jne    c0006936 <f_chmod+0xd7>
c0006887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000688b:	83 ec 0c             	sub    esp,0xc
c000688e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006892:	68 60 04 00 00       	push   0x460
c0006897:	e8 dd 18 00 00       	call   c0008179 <ff_memalloc>
c000689c:	89 c6                	mov    esi,eax
c000689e:	83 c4 10             	add    esp,0x10
c00068a1:	b8 11 00 00 00       	mov    eax,0x11
c00068a6:	85 f6                	test   esi,esi
c00068a8:	0f 84 88 00 00 00    	je     c0006936 <f_chmod+0xd7>
c00068ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068b2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068bb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068be:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068c6:	e8 b6 e2 ff ff       	call   c0004b81 <follow_path>
c00068cb:	85 c0                	test   eax,eax
c00068cd:	75 53                	jne    c0006922 <f_chmod+0xc3>
c00068cf:	b8 06 00 00 00       	mov    eax,0x6
c00068d4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00068d9:	75 47                	jne    c0006922 <f_chmod+0xc3>
c00068db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068df:	89 f9                	mov    ecx,edi
c00068e1:	83 e1 27             	and    ecx,0x27
c00068e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068e7:	75 1d                	jne    c0006906 <f_chmod+0xa7>
c00068e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ec:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00068ef:	21 cb                	and    ebx,ecx
c00068f1:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00068f4:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00068f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068fb:	e8 e6 cf ff ff       	call   c00038e6 <store_xdir>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 1e                	jne    c0006922 <f_chmod+0xc3>
c0006904:	eb 13                	jmp    c0006919 <f_chmod+0xba>
c0006906:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000690a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000690d:	21 cb                	and    ebx,ecx
c000690f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006912:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006915:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691d:	e8 56 d9 ff ff       	call   c0004278 <sync_fs>
c0006922:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006926:	83 ec 0c             	sub    esp,0xc
c0006929:	56                   	push   esi
c000692a:	e8 60 18 00 00       	call   c000818f <ff_memfree>
c000692f:	83 c4 10             	add    esp,0x10
c0006932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006936:	83 c4 60             	add    esp,0x60
c0006939:	5b                   	pop    ebx
c000693a:	5e                   	pop    esi
c000693b:	5f                   	pop    edi
c000693c:	c3                   	ret    

c000693d <f_utime>:
c000693d:	56                   	push   esi
c000693e:	b9 02 00 00 00       	mov    ecx,0x2
c0006943:	53                   	push   ebx
c0006944:	83 ec 64             	sub    esp,0x64
c0006947:	8d 54 24 10          	lea    edx,[esp+0x10]
c000694b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000694f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006953:	e8 bd ba ff ff       	call   c0002415 <mount_volume>
c0006958:	85 c0                	test   eax,eax
c000695a:	0f 85 b5 00 00 00    	jne    c0006a15 <f_utime+0xd8>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	83 ec 0c             	sub    esp,0xc
c0006967:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000696b:	68 60 04 00 00       	push   0x460
c0006970:	e8 04 18 00 00       	call   c0008179 <ff_memalloc>
c0006975:	89 c3                	mov    ebx,eax
c0006977:	83 c4 10             	add    esp,0x10
c000697a:	b8 11 00 00 00       	mov    eax,0x11
c000697f:	85 db                	test   ebx,ebx
c0006981:	0f 84 8e 00 00 00    	je     c0006a15 <f_utime+0xd8>
c0006987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000698b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006991:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006994:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006997:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000699b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000699f:	e8 dd e1 ff ff       	call   c0004b81 <follow_path>
c00069a4:	85 c0                	test   eax,eax
c00069a6:	75 59                	jne    c0006a01 <f_utime+0xc4>
c00069a8:	b8 06 00 00 00       	mov    eax,0x6
c00069ad:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069b2:	75 4d                	jne    c0006a01 <f_utime+0xc4>
c00069b4:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069bc:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069c0:	c1 e2 10             	shl    edx,0x10
c00069c3:	09 ca                	or     edx,ecx
c00069c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069c8:	75 1a                	jne    c00069e4 <f_utime+0xa7>
c00069ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069cd:	83 c0 0c             	add    eax,0xc
c00069d0:	e8 34 b0 ff ff       	call   c0001a09 <st_dword>
c00069d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069d9:	e8 08 cf ff ff       	call   c00038e6 <store_xdir>
c00069de:	85 c0                	test   eax,eax
c00069e0:	75 1f                	jne    c0006a01 <f_utime+0xc4>
c00069e2:	eb 14                	jmp    c00069f8 <f_utime+0xbb>
c00069e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00069e8:	83 c0 16             	add    eax,0x16
c00069eb:	e8 19 b0 ff ff       	call   c0001a09 <st_dword>
c00069f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069fc:	e8 77 d8 ff ff       	call   c0004278 <sync_fs>
c0006a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a05:	83 ec 0c             	sub    esp,0xc
c0006a08:	53                   	push   ebx
c0006a09:	e8 81 17 00 00       	call   c000818f <ff_memfree>
c0006a0e:	83 c4 10             	add    esp,0x10
c0006a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a15:	83 c4 64             	add    esp,0x64
c0006a18:	5b                   	pop    ebx
c0006a19:	5e                   	pop    esi
c0006a1a:	c3                   	ret    

c0006a1b <f_getlabel>:
c0006a1b:	55                   	push   ebp
c0006a1c:	31 c9                	xor    ecx,ecx
c0006a1e:	57                   	push   edi
c0006a1f:	56                   	push   esi
c0006a20:	53                   	push   ebx
c0006a21:	83 ec 6c             	sub    esp,0x6c
c0006a24:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a28:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a2f:	e8 e1 b9 ff ff       	call   c0002415 <mount_volume>
c0006a34:	89 c3                	mov    ebx,eax
c0006a36:	85 c0                	test   eax,eax
c0006a38:	0f 85 73 01 00 00    	jne    c0006bb1 <f_getlabel+0x196>
c0006a3e:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a46:	0f 84 65 01 00 00    	je     c0006bb1 <f_getlabel+0x196>
c0006a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a50:	31 d2                	xor    edx,edx
c0006a52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a62:	e8 7b c4 ff ff       	call   c0002ee2 <dir_sdi>
c0006a67:	89 c3                	mov    ebx,eax
c0006a69:	85 c0                	test   eax,eax
c0006a6b:	0f 85 2f 01 00 00    	jne    c0006ba0 <f_getlabel+0x185>
c0006a71:	ba 01 00 00 00       	mov    edx,0x1
c0006a76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a7a:	e8 75 cc ff ff       	call   c00036f4 <dir_read>
c0006a7f:	89 c3                	mov    ebx,eax
c0006a81:	85 c0                	test   eax,eax
c0006a83:	0f 85 17 01 00 00    	jne    c0006ba0 <f_getlabel+0x185>
c0006a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a90:	74 09                	je     c0006a9b <f_getlabel+0x80>
c0006a92:	31 f6                	xor    esi,esi
c0006a94:	31 c9                	xor    ecx,ecx
c0006a96:	e9 c8 00 00 00       	jmp    c0006b63 <f_getlabel+0x148>
c0006a9b:	31 ed                	xor    ebp,ebp
c0006a9d:	31 f6                	xor    esi,esi
c0006a9f:	31 ff                	xor    edi,edi
c0006aa1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa5:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aa9:	39 fa                	cmp    edx,edi
c0006aab:	76 4b                	jbe    c0006af8 <f_getlabel+0xdd>
c0006aad:	47                   	inc    edi
c0006aae:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ab1:	01 d0                	add    eax,edx
c0006ab3:	e8 db ae ff ff       	call   c0001993 <ld_word>
c0006ab8:	66 85 ed             	test   bp,bp
c0006abb:	75 0d                	jne    c0006aca <f_getlabel+0xaf>
c0006abd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ac3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ac8:	76 28                	jbe    c0006af2 <f_getlabel+0xd7>
c0006aca:	89 e9                	mov    ecx,ebp
c0006acc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ad3:	c1 e1 10             	shl    ecx,0x10
c0006ad6:	01 f2                	add    edx,esi
c0006ad8:	0f b7 c0             	movzx  eax,ax
c0006adb:	09 c8                	or     eax,ecx
c0006add:	b9 04 00 00 00       	mov    ecx,0x4
c0006ae2:	e8 4c b0 ff ff       	call   c0001b33 <put_utf>
c0006ae7:	84 c0                	test   al,al
c0006ae9:	74 0b                	je     c0006af6 <f_getlabel+0xdb>
c0006aeb:	0f b6 c0             	movzx  eax,al
c0006aee:	01 c6                	add    esi,eax
c0006af0:	31 c0                	xor    eax,eax
c0006af2:	89 c5                	mov    ebp,eax
c0006af4:	eb ab                	jmp    c0006aa1 <f_getlabel+0x86>
c0006af6:	31 f6                	xor    esi,esi
c0006af8:	66 85 ed             	test   bp,bp
c0006afb:	74 02                	je     c0006aff <f_getlabel+0xe4>
c0006afd:	31 f6                	xor    esi,esi
c0006aff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b06:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006b0a:	e9 a2 00 00 00       	jmp    c0006bb1 <f_getlabel+0x196>
c0006b0f:	83 ff 0b             	cmp    edi,0xb
c0006b12:	74 11                	je     c0006b25 <f_getlabel+0x10a>
c0006b14:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1d:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b20:	c1 e0 08             	shl    eax,0x8
c0006b23:	09 c2                	or     edx,eax
c0006b25:	50                   	push   eax
c0006b26:	50                   	push   eax
c0006b27:	68 b5 01 00 00       	push   0x1b5
c0006b2c:	0f b7 d2             	movzx  edx,dx
c0006b2f:	52                   	push   edx
c0006b30:	e8 07 17 00 00       	call   c000823c <ff_oem2uni>
c0006b35:	83 c4 10             	add    esp,0x10
c0006b38:	66 85 c0             	test   ax,ax
c0006b3b:	74 46                	je     c0006b83 <f_getlabel+0x168>
c0006b3d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b44:	b9 04 00 00 00       	mov    ecx,0x4
c0006b49:	01 f2                	add    edx,esi
c0006b4b:	0f b7 c0             	movzx  eax,ax
c0006b4e:	e8 e0 af ff ff       	call   c0001b33 <put_utf>
c0006b53:	84 c0                	test   al,al
c0006b55:	74 2c                	je     c0006b83 <f_getlabel+0x168>
c0006b57:	0f b6 c0             	movzx  eax,al
c0006b5a:	01 c6                	add    esi,eax
c0006b5c:	83 ff 0b             	cmp    edi,0xb
c0006b5f:	74 24                	je     c0006b85 <f_getlabel+0x16a>
c0006b61:	89 f9                	mov    ecx,edi
c0006b63:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b67:	8d 79 01             	lea    edi,[ecx+0x1]
c0006b6a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006b6f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006b74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b78:	e8 ea ae ff ff       	call   c0001a67 <dbc_1st>
c0006b7d:	85 c0                	test   eax,eax
c0006b7f:	74 a4                	je     c0006b25 <f_getlabel+0x10a>
c0006b81:	eb 8c                	jmp    c0006b0f <f_getlabel+0xf4>
c0006b83:	31 f6                	xor    esi,esi
c0006b85:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006b8c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006b8f:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006b96:	74 19                	je     c0006bb1 <f_getlabel+0x196>
c0006b98:	4e                   	dec    esi
c0006b99:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006b9c:	74 ee                	je     c0006b8c <f_getlabel+0x171>
c0006b9e:	eb 11                	jmp    c0006bb1 <f_getlabel+0x196>
c0006ba0:	83 fb 04             	cmp    ebx,0x4
c0006ba3:	75 0c                	jne    c0006bb1 <f_getlabel+0x196>
c0006ba5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bac:	31 db                	xor    ebx,ebx
c0006bae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bb1:	85 db                	test   ebx,ebx
c0006bb3:	75 50                	jne    c0006c05 <f_getlabel+0x1ea>
c0006bb5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bbd:	74 46                	je     c0006c05 <f_getlabel+0x1ea>
c0006bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bc6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bc9:	e8 9c b5 ff ff       	call   c000216a <move_window>
c0006bce:	89 c3                	mov    ebx,eax
c0006bd0:	85 c0                	test   eax,eax
c0006bd2:	75 31                	jne    c0006c05 <f_getlabel+0x1ea>
c0006bd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006bd8:	b8 43 00 00 00       	mov    eax,0x43
c0006bdd:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006bdf:	80 f9 03             	cmp    cl,0x3
c0006be2:	74 0f                	je     c0006bf3 <f_getlabel+0x1d8>
c0006be4:	31 c0                	xor    eax,eax
c0006be6:	80 f9 04             	cmp    cl,0x4
c0006be9:	0f 94 c0             	sete   al
c0006bec:	48                   	dec    eax
c0006bed:	83 e0 c3             	and    eax,0xffffffc3
c0006bf0:	83 c0 64             	add    eax,0x64
c0006bf3:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006bf7:	e8 a4 ad ff ff       	call   c00019a0 <ld_dword>
c0006bfc:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c03:	89 07                	mov    DWORD PTR [edi],eax
c0006c05:	83 c4 6c             	add    esp,0x6c
c0006c08:	89 d8                	mov    eax,ebx
c0006c0a:	5b                   	pop    ebx
c0006c0b:	5e                   	pop    esi
c0006c0c:	5f                   	pop    edi
c0006c0d:	5d                   	pop    ebp
c0006c0e:	c3                   	ret    

c0006c0f <f_setlabel>:
c0006c0f:	56                   	push   esi
c0006c10:	b9 02 00 00 00       	mov    ecx,0x2
c0006c15:	53                   	push   ebx
c0006c16:	83 ec 74             	sub    esp,0x74
c0006c19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c24:	e8 ec b7 ff ff       	call   c0002415 <mount_volume>
c0006c29:	89 c6                	mov    esi,eax
c0006c2b:	85 c0                	test   eax,eax
c0006c2d:	0f 85 41 02 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006c33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c3a:	0f 85 8e 00 00 00    	jne    c0006cce <f_setlabel+0xbf>
c0006c40:	b9 16 00 00 00       	mov    ecx,0x16
c0006c45:	31 d2                	xor    edx,edx
c0006c47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c4b:	31 db                	xor    ebx,ebx
c0006c4d:	e8 d5 ad ff ff       	call   c0001a27 <mem_set>
c0006c52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c5c:	0f 86 0a 01 00 00    	jbe    c0006d6c <f_setlabel+0x15d>
c0006c62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c69:	e8 ff ad ff ff       	call   c0001a6d <tchar2uni>
c0006c6e:	89 c6                	mov    esi,eax
c0006c70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006c75:	76 2a                	jbe    c0006ca1 <f_setlabel+0x92>
c0006c77:	83 f8 ff             	cmp    eax,0xffffffff
c0006c7a:	74 05                	je     c0006c81 <f_setlabel+0x72>
c0006c7c:	83 fb 09             	cmp    ebx,0x9
c0006c7f:	76 0a                	jbe    c0006c8b <f_setlabel+0x7c>
c0006c81:	be 06 00 00 00       	mov    esi,0x6
c0006c86:	e9 e9 01 00 00       	jmp    c0006e74 <f_setlabel+0x265>
c0006c8b:	89 c2                	mov    edx,eax
c0006c8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006c91:	c1 ea 10             	shr    edx,0x10
c0006c94:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006c97:	01 c8                	add    eax,ecx
c0006c99:	43                   	inc    ebx
c0006c9a:	e8 66 ad ff ff       	call   c0001a05 <st_word>
c0006c9f:	eb 04                	jmp    c0006ca5 <f_setlabel+0x96>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 dc                	je     c0006c81 <f_setlabel+0x72>
c0006ca5:	89 f2                	mov    edx,esi
c0006ca7:	b8 97 ff 01 c0       	mov    eax,0xc001ff97
c0006cac:	e8 a4 ad ff ff       	call   c0001a55 <chk_chr>
c0006cb1:	85 c0                	test   eax,eax
c0006cb3:	75 cc                	jne    c0006c81 <f_setlabel+0x72>
c0006cb5:	83 fb 0a             	cmp    ebx,0xa
c0006cb8:	77 c7                	ja     c0006c81 <f_setlabel+0x72>
c0006cba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc1:	0f b7 d6             	movzx  edx,si
c0006cc4:	01 c8                	add    eax,ecx
c0006cc6:	43                   	inc    ebx
c0006cc7:	e8 39 ad ff ff       	call   c0001a05 <st_word>
c0006ccc:	eb 84                	jmp    c0006c52 <f_setlabel+0x43>
c0006cce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006cd3:	ba 20 00 00 00       	mov    edx,0x20
c0006cd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cdc:	31 db                	xor    ebx,ebx
c0006cde:	e8 44 ad ff ff       	call   c0001a27 <mem_set>
c0006ce3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006cea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ced:	76 60                	jbe    c0006d4f <f_setlabel+0x140>
c0006cef:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cf6:	e8 72 ad ff ff       	call   c0001a6d <tchar2uni>
c0006cfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d00:	0f 87 7b ff ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006d06:	83 ec 0c             	sub    esp,0xc
c0006d09:	50                   	push   eax
c0006d0a:	e8 9c 15 00 00       	call   c00082ab <ff_wtoupper>
c0006d0f:	5a                   	pop    edx
c0006d10:	59                   	pop    ecx
c0006d11:	68 b5 01 00 00       	push   0x1b5
c0006d16:	50                   	push   eax
c0006d17:	e8 8a 14 00 00       	call   c00081a6 <ff_uni2oem>
c0006d1c:	83 c4 10             	add    esp,0x10
c0006d1f:	89 c6                	mov    esi,eax
c0006d21:	66 85 c0             	test   ax,ax
c0006d24:	0f 84 57 ff ff ff    	je     c0006c81 <f_setlabel+0x72>
c0006d2a:	0f b7 d0             	movzx  edx,ax
c0006d2d:	b8 90 ff 01 c0       	mov    eax,0xc001ff90
c0006d32:	e8 1e ad ff ff       	call   c0001a55 <chk_chr>
c0006d37:	85 c0                	test   eax,eax
c0006d39:	0f 85 42 ff ff ff    	jne    c0006c81 <f_setlabel+0x72>
c0006d3f:	66 81 fe ff 00       	cmp    si,0xff
c0006d44:	0f 87 14 01 00 00    	ja     c0006e5e <f_setlabel+0x24f>
c0006d4a:	e9 fa 00 00 00       	jmp    c0006e49 <f_setlabel+0x23a>
c0006d4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d54:	0f 84 27 ff ff ff    	je     c0006c81 <f_setlabel+0x72>
c0006d5a:	85 db                	test   ebx,ebx
c0006d5c:	74 0e                	je     c0006d6c <f_setlabel+0x15d>
c0006d5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d66:	75 04                	jne    c0006d6c <f_setlabel+0x15d>
c0006d68:	89 c3                	mov    ebx,eax
c0006d6a:	eb ee                	jmp    c0006d5a <f_setlabel+0x14b>
c0006d6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d70:	31 d2                	xor    edx,edx
c0006d72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006d76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006d7a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006d82:	e8 5b c1 ff ff       	call   c0002ee2 <dir_sdi>
c0006d87:	89 c6                	mov    esi,eax
c0006d89:	85 c0                	test   eax,eax
c0006d8b:	0f 85 e3 00 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006d91:	ba 01 00 00 00       	mov    edx,0x1
c0006d96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006d9a:	e8 55 c9 ff ff       	call   c00036f4 <dir_read>
c0006d9f:	85 c0                	test   eax,eax
c0006da1:	75 21                	jne    c0006dc4 <f_setlabel+0x1b5>
c0006da3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006da7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006dab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006dae:	74 5d                	je     c0006e0d <f_setlabel+0x1fe>
c0006db0:	85 db                	test   ebx,ebx
c0006db2:	74 0b                	je     c0006dbf <f_setlabel+0x1b0>
c0006db4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006db9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006dbd:	eb 70                	jmp    c0006e2f <f_setlabel+0x220>
c0006dbf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006dc2:	eb 70                	jmp    c0006e34 <f_setlabel+0x225>
c0006dc4:	83 f8 04             	cmp    eax,0x4
c0006dc7:	75 7c                	jne    c0006e45 <f_setlabel+0x236>
c0006dc9:	85 db                	test   ebx,ebx
c0006dcb:	0f 84 a3 00 00 00    	je     c0006e74 <f_setlabel+0x265>
c0006dd1:	ba 01 00 00 00       	mov    edx,0x1
c0006dd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dda:	e8 8f ca ff ff       	call   c000386e <dir_alloc>
c0006ddf:	89 c6                	mov    esi,eax
c0006de1:	85 c0                	test   eax,eax
c0006de3:	0f 85 8b 00 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006de9:	31 d2                	xor    edx,edx
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	b9 20 00 00 00       	mov    ecx,0x20
c0006df4:	e8 2e ac ff ff       	call   c0001a27 <mem_set>
c0006df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006dfd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e04:	75 18                	jne    c0006e1e <f_setlabel+0x20f>
c0006e06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e10:	b9 16 00 00 00       	mov    ecx,0x16
c0006e15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e19:	83 c0 02             	add    eax,0x2
c0006e1c:	eb 9b                	jmp    c0006db9 <f_setlabel+0x1aa>
c0006e1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e2f:	e8 de ab ff ff       	call   c0001a12 <mem_cpy>
c0006e34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	e8 33 d4 ff ff       	call   c0004278 <sync_fs>
c0006e45:	89 c6                	mov    esi,eax
c0006e47:	eb 2b                	jmp    c0006e74 <f_setlabel+0x265>
c0006e49:	83 fb 0a             	cmp    ebx,0xa
c0006e4c:	0f 87 2f fe ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006e52:	89 f0                	mov    eax,esi
c0006e54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e58:	43                   	inc    ebx
c0006e59:	e9 85 fe ff ff       	jmp    c0006ce3 <f_setlabel+0xd4>
c0006e5e:	83 fb 09             	cmp    ebx,0x9
c0006e61:	0f 87 1a fe ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006e67:	89 f0                	mov    eax,esi
c0006e69:	66 c1 e8 08          	shr    ax,0x8
c0006e6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e71:	43                   	inc    ebx
c0006e72:	eb de                	jmp    c0006e52 <f_setlabel+0x243>
c0006e74:	83 c4 74             	add    esp,0x74
c0006e77:	89 f0                	mov    eax,esi
c0006e79:	5b                   	pop    ebx
c0006e7a:	5e                   	pop    esi
c0006e7b:	c3                   	ret    

c0006e7c <f_forward>:
c0006e7c:	55                   	push   ebp
c0006e7d:	57                   	push   edi
c0006e7e:	56                   	push   esi
c0006e7f:	53                   	push   ebx
c0006e80:	83 ec 2c             	sub    esp,0x2c
c0006e83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006e8b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006e8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006e95:	89 d8                	mov    eax,ebx
c0006e97:	e8 f3 b1 ff ff       	call   c000208f <validate>
c0006e9c:	89 c5                	mov    ebp,eax
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	0f 85 aa 01 00 00    	jne    c0007050 <f_forward+0x1d4>
c0006ea6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eaa:	85 ed                	test   ebp,ebp
c0006eac:	0f 85 9e 01 00 00    	jne    c0007050 <f_forward+0x1d4>
c0006eb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006eb6:	0f 84 8f 01 00 00    	je     c000704b <f_forward+0x1cf>
c0006ebc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006ebf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006ec2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006ec5:	bf 00 00 00 00       	mov    edi,0x0
c0006eca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006ecd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ed1:	89 d1                	mov    ecx,edx
c0006ed3:	19 f9                	sbb    ecx,edi
c0006ed5:	0f 83 cf 00 00 00    	jae    c0006faa <f_forward+0x12e>
c0006edb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006edf:	e9 c6 00 00 00       	jmp    c0006faa <f_forward+0x12e>
c0006ee4:	50                   	push   eax
c0006ee5:	50                   	push   eax
c0006ee6:	6a 00                	push   0x0
c0006ee8:	6a 00                	push   0x0
c0006eea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006eee:	83 c4 10             	add    esp,0x10
c0006ef1:	85 c0                	test   eax,eax
c0006ef3:	0f 84 57 01 00 00    	je     c0007050 <f_forward+0x1d4>
c0006ef9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006efd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f00:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f03:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f07:	89 d7                	mov    edi,edx
c0006f09:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f12:	21 ce                	and    esi,ecx
c0006f14:	89 c1                	mov    ecx,eax
c0006f16:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f1c:	0f 84 98 00 00 00    	je     c0006fba <f_forward+0x13e>
c0006f22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f26:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f29:	89 c8                	mov    eax,ecx
c0006f2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f2f:	e8 f8 ac ff ff       	call   c0001c2c <clst2sect>
c0006f34:	89 d7                	mov    edi,edx
c0006f36:	09 c7                	or     edi,eax
c0006f38:	0f 84 9e 00 00 00    	je     c0006fdc <f_forward+0x160>
c0006f3e:	31 ff                	xor    edi,edi
c0006f40:	01 c6                	add    esi,eax
c0006f42:	11 d7                	adc    edi,edx
c0006f44:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f47:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f4e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f51:	39 fa                	cmp    edx,edi
c0006f53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f57:	0f 85 a2 00 00 00    	jne    c0006fff <f_forward+0x183>
c0006f5d:	39 f0                	cmp    eax,esi
c0006f5f:	0f 85 9a 00 00 00    	jne    c0006fff <f_forward+0x183>
c0006f65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f68:	ba 00 02 00 00       	mov    edx,0x200
c0006f6d:	25 ff 01 00 00       	and    eax,0x1ff
c0006f72:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006f76:	29 c2                	sub    edx,eax
c0006f78:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006f7b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006f7e:	39 d1                	cmp    ecx,edx
c0006f80:	76 02                	jbe    c0006f84 <f_forward+0x108>
c0006f82:	89 d1                	mov    ecx,edx
c0006f84:	52                   	push   edx
c0006f85:	8d 73 50             	lea    esi,[ebx+0x50]
c0006f88:	52                   	push   edx
c0006f89:	01 c6                	add    esi,eax
c0006f8b:	51                   	push   ecx
c0006f8c:	56                   	push   esi
c0006f8d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f91:	83 c4 10             	add    esp,0x10
c0006f94:	85 c0                	test   eax,eax
c0006f96:	74 44                	je     c0006fdc <f_forward+0x160>
c0006f98:	31 ff                	xor    edi,edi
c0006f9a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006f9d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fa0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fa4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fa8:	01 07                	add    DWORD PTR [edi],eax
c0006faa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006faf:	0f 85 2f ff ff ff    	jne    c0006ee4 <f_forward+0x68>
c0006fb5:	e9 96 00 00 00       	jmp    c0007050 <f_forward+0x1d4>
c0006fba:	85 f6                	test   esi,esi
c0006fbc:	0f 85 60 ff ff ff    	jne    c0006f22 <f_forward+0xa6>
c0006fc2:	89 d7                	mov    edi,edx
c0006fc4:	09 c7                	or     edi,eax
c0006fc6:	75 05                	jne    c0006fcd <f_forward+0x151>
c0006fc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006fcb:	eb 0a                	jmp    c0006fd7 <f_forward+0x15b>
c0006fcd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fd0:	89 d8                	mov    eax,ebx
c0006fd2:	e8 15 bd ff ff       	call   c0002cec <get_fat>
c0006fd7:	83 f8 01             	cmp    eax,0x1
c0006fda:	77 0b                	ja     c0006fe7 <f_forward+0x16b>
c0006fdc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0006fe0:	bd 02 00 00 00       	mov    ebp,0x2
c0006fe5:	eb 69                	jmp    c0007050 <f_forward+0x1d4>
c0006fe7:	83 f8 ff             	cmp    eax,0xffffffff
c0006fea:	75 0b                	jne    c0006ff7 <f_forward+0x17b>
c0006fec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0006ff0:	bd 01 00 00 00       	mov    ebp,0x1
c0006ff5:	eb 59                	jmp    c0007050 <f_forward+0x1d4>
c0006ff7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0006ffa:	e9 23 ff ff ff       	jmp    c0006f22 <f_forward+0xa6>
c0006fff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007003:	79 20                	jns    c0007025 <f_forward+0x1a9>
c0007005:	83 ec 0c             	sub    esp,0xc
c0007008:	6a 01                	push   0x1
c000700a:	52                   	push   edx
c000700b:	50                   	push   eax
c000700c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007010:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007014:	50                   	push   eax
c0007015:	e8 44 a9 ff ff       	call   c000195e <disk_write>
c000701a:	83 c4 20             	add    esp,0x20
c000701d:	85 c0                	test   eax,eax
c000701f:	75 cb                	jne    c0006fec <f_forward+0x170>
c0007021:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	6a 01                	push   0x1
c000702a:	57                   	push   edi
c000702b:	56                   	push   esi
c000702c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007030:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007034:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007038:	50                   	push   eax
c0007039:	e8 0a a9 ff ff       	call   c0001948 <disk_read>
c000703e:	83 c4 20             	add    esp,0x20
c0007041:	85 c0                	test   eax,eax
c0007043:	0f 84 1c ff ff ff    	je     c0006f65 <f_forward+0xe9>
c0007049:	eb a1                	jmp    c0006fec <f_forward+0x170>
c000704b:	bd 07 00 00 00       	mov    ebp,0x7
c0007050:	83 c4 2c             	add    esp,0x2c
c0007053:	89 e8                	mov    eax,ebp
c0007055:	5b                   	pop    ebx
c0007056:	5e                   	pop    esi
c0007057:	5f                   	pop    edi
c0007058:	5d                   	pop    ebp
c0007059:	c3                   	ret    

c000705a <f_mkfs>:
c000705a:	55                   	push   ebp
c000705b:	57                   	push   edi
c000705c:	56                   	push   esi
c000705d:	53                   	push   ebx
c000705e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007063:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007069:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007070:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007077:	e8 f9 ae ff ff       	call   c0001f75 <get_ldnumber>
c000707c:	85 c0                	test   eax,eax
c000707e:	0f 88 e8 10 00 00    	js     c000816c <f_mkfs+0x1112>
c0007084:	8b 14 85 20 42 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbde0]
c000708b:	85 d2                	test   edx,edx
c000708d:	74 03                	je     c0007092 <f_mkfs+0x38>
c000708f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007092:	85 f6                	test   esi,esi
c0007094:	75 05                	jne    c000709b <f_mkfs+0x41>
c0007096:	be 80 ff 01 c0       	mov    esi,0xc001ff80
c000709b:	0f b6 c0             	movzx  eax,al
c000709e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a2:	83 ec 0c             	sub    esp,0xc
c00070a5:	bb 03 00 00 00       	mov    ebx,0x3
c00070aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070ae:	e8 92 a8 ff ff       	call   c0001945 <disk_initialize>
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	a8 01                	test   al,0x1
c00070b8:	0f 85 ae 10 00 00    	jne    c000816c <f_mkfs+0x1112>
c00070be:	bb 0a 00 00 00       	mov    ebx,0xa
c00070c3:	a8 04                	test   al,0x4
c00070c5:	0f 85 a1 10 00 00    	jne    c000816c <f_mkfs+0x1112>
c00070cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00070ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00070d2:	85 c0                	test   eax,eax
c00070d4:	75 20                	jne    c00070f6 <f_mkfs+0x9c>
c00070d6:	51                   	push   ecx
c00070d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00070db:	50                   	push   eax
c00070dc:	6a 03                	push   0x3
c00070de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070e2:	e8 8d a8 ff ff       	call   c0001974 <disk_ioctl>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	85 c0                	test   eax,eax
c00070ec:	74 08                	je     c00070f6 <f_mkfs+0x9c>
c00070ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00070f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00070fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00070fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007102:	77 04                	ja     c0007108 <f_mkfs+0xae>
c0007104:	85 c2                	test   edx,eax
c0007106:	74 08                	je     c0007110 <f_mkfs+0xb6>
c0007108:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007110:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007113:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c0007117:	48                   	dec    eax
c0007118:	3c 01                	cmp    al,0x1
c000711a:	76 05                	jbe    c0007121 <f_mkfs+0xc7>
c000711c:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c0007121:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007124:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007128:	48                   	dec    eax
c0007129:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000712e:	77 07                	ja     c0007137 <f_mkfs+0xdd>
c0007130:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007135:	74 08                	je     c000713f <f_mkfs+0xe5>
c0007137:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000713f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007142:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007148:	77 07                	ja     c0007151 <f_mkfs+0xf7>
c000714a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000714d:	85 d8                	test   eax,ebx
c000714f:	74 02                	je     c0007153 <f_mkfs+0xf9>
c0007151:	31 db                	xor    ebx,ebx
c0007153:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000715e:	77 0a                	ja     c000716a <f_mkfs+0x110>
c0007160:	bb 11 00 00 00       	mov    ebx,0x11
c0007165:	e9 02 10 00 00       	jmp    c000816c <f_mkfs+0x1112>
c000716a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007171:	8b 36                	mov    esi,DWORD PTR [esi]
c0007173:	85 ed                	test   ebp,ebp
c0007175:	75 1e                	jne    c0007195 <f_mkfs+0x13b>
c0007177:	83 ec 0c             	sub    esp,0xc
c000717a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007181:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007186:	50                   	push   eax
c0007187:	e8 ed 0f 00 00       	call   c0008179 <ff_memalloc>
c000718c:	83 c4 10             	add    esp,0x10
c000718f:	89 c5                	mov    ebp,eax
c0007191:	85 c0                	test   eax,eax
c0007193:	74 cb                	je     c0007160 <f_mkfs+0x106>
c0007195:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000719d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071a5:	52                   	push   edx
c00071a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071aa:	50                   	push   eax
c00071ab:	6a 01                	push   0x1
c00071ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071b1:	e8 be a7 ff ff       	call   c0001974 <disk_ioctl>
c00071b6:	83 c4 10             	add    esp,0x10
c00071b9:	85 c0                	test   eax,eax
c00071bb:	0f 85 46 0f 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00071c1:	89 f1                	mov    ecx,esi
c00071c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00071cb:	83 e1 0f             	and    ecx,0xf
c00071ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00071da:	83 e6 08             	and    esi,0x8
c00071dd:	75 56                	jne    c0007235 <f_mkfs+0x1db>
c00071df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00071e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00071e7:	83 ff 00             	cmp    edi,0x0
c00071ea:	76 20                	jbe    c000720c <f_mkfs+0x1b2>
c00071ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00071f1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00071f7:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00071ff:	83 d7 ff             	adc    edi,0xffffffff
c0007202:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007206:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000720a:	eb 21                	jmp    c000722d <f_mkfs+0x1d3>
c000720c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007211:	39 f2                	cmp    edx,esi
c0007213:	19 f8                	sbb    eax,edi
c0007215:	73 1e                	jae    c0007235 <f_mkfs+0x1db>
c0007217:	83 c6 c1             	add    esi,0xffffffc1
c000721a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007222:	83 d7 ff             	adc    edi,0xffffffff
c0007225:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007229:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000722d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007235:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007239:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000723d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007240:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007244:	ba 7f 00 00 00       	mov    edx,0x7f
c0007249:	31 c0                	xor    eax,eax
c000724b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000724e:	89 c7                	mov    edi,eax
c0007250:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007254:	0f 83 c1 0a 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c000725a:	89 df                	mov    edi,ebx
c000725c:	c1 ef 09             	shr    edi,0x9
c000725f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007263:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000726a:	c1 ef 09             	shr    edi,0x9
c000726d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007272:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007276:	74 29                	je     c00072a1 <f_mkfs+0x247>
c0007278:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000727d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007283:	0f 97 c2             	seta   dl
c0007286:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007289:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000728d:	0f 92 c0             	setb   al
c0007290:	08 c2                	or     dl,al
c0007292:	75 5b                	jne    c00072ef <f_mkfs+0x295>
c0007294:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007298:	83 e0 07             	and    eax,0x7
c000729b:	3c 04                	cmp    al,0x4
c000729d:	74 50                	je     c00072ef <f_mkfs+0x295>
c000729f:	eb 1b                	jmp    c00072bc <f_mkfs+0x262>
c00072a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072a6:	0f 87 6f 0a 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c00072ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072b2:	76 08                	jbe    c00072bc <f_mkfs+0x262>
c00072b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00072bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00072c4:	83 e0 01             	and    eax,0x1
c00072c7:	80 e1 02             	and    cl,0x2
c00072ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00072ce:	74 0d                	je     c00072dd <f_mkfs+0x283>
c00072d0:	84 c0                	test   al,al
c00072d2:	0f 84 4f 09 00 00    	je     c0007c27 <f_mkfs+0xbcd>
c00072d8:	e9 0e 08 00 00       	jmp    c0007aeb <f_mkfs+0xa91>
c00072dd:	bb 13 00 00 00       	mov    ebx,0x13
c00072e2:	84 c0                	test   al,al
c00072e4:	0f 85 01 08 00 00    	jne    c0007aeb <f_mkfs+0xa91>
c00072ea:	e9 35 0e 00 00       	jmp    c0008124 <f_mkfs+0x10ca>
c00072ef:	ba ff 0f 00 00       	mov    edx,0xfff
c00072f4:	31 c0                	xor    eax,eax
c00072f6:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00072f9:	89 c7                	mov    edi,eax
c00072fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00072ff:	0f 83 16 0a 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c0007305:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000730b:	77 39                	ja     c0007346 <f_mkfs+0x2ec>
c000730d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007312:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000731a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000731d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007321:	73 08                	jae    c000732b <f_mkfs+0x2d1>
c0007323:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000732b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007330:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007333:	b8 00 00 00 00       	mov    eax,0x0
c0007338:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733c:	73 08                	jae    c0007346 <f_mkfs+0x2ec>
c000733e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000734a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000734e:	83 c0 20             	add    eax,0x20
c0007351:	83 d2 00             	adc    edx,0x0
c0007354:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007358:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000735c:	31 d2                	xor    edx,edx
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	52                   	push   edx
c0007363:	50                   	push   eax
c0007364:	31 ff                	xor    edi,edi
c0007366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000736a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000736e:	e8 a9 7c 01 00       	call   c001f01c <__udivdi3>
c0007373:	83 c4 10             	add    esp,0x10
c0007376:	c1 e0 02             	shl    eax,0x2
c0007379:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000737d:	05 07 02 00 00       	add    eax,0x207
c0007382:	89 f1                	mov    ecx,esi
c0007384:	c1 e8 09             	shr    eax,0x9
c0007387:	89 fb                	mov    ebx,edi
c0007389:	83 c1 ff             	add    ecx,0xffffffff
c000738c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007390:	83 d3 ff             	adc    ebx,0xffffffff
c0007393:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007397:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000739b:	31 d2                	xor    edx,edx
c000739d:	01 c8                	add    eax,ecx
c000739f:	11 da                	adc    edx,ebx
c00073a1:	89 c1                	mov    ecx,eax
c00073a3:	f7 de                	neg    esi
c00073a5:	83 d7 00             	adc    edi,0x0
c00073a8:	21 f1                	and    ecx,esi
c00073aa:	f7 df                	neg    edi
c00073ac:	89 d0                	mov    eax,edx
c00073ae:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073b2:	21 f8                	and    eax,edi
c00073b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00073b8:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00073bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00073c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073c8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00073cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00073d3:	d1 ea                	shr    edx,1
c00073d5:	89 df                	mov    edi,ebx
c00073d7:	39 c1                	cmp    ecx,eax
c00073d9:	19 d7                	sbb    edi,edx
c00073db:	0f 83 3a 09 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c00073e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073e5:	31 d2                	xor    edx,edx
c00073e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00073eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00073ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00073f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00073fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00073fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007402:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007406:	83 f8 0f             	cmp    eax,0xf
c0007409:	0f 86 0c 09 00 00    	jbe    c0007d1b <f_mkfs+0xcc1>
c000740f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007417:	0f 87 fe 08 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c000741d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007421:	31 d2                	xor    edx,edx
c0007423:	83 c0 07             	add    eax,0x7
c0007426:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000742e:	c1 e8 03             	shr    eax,0x3
c0007431:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007439:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000743d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007441:	c1 e0 09             	shl    eax,0x9
c0007444:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000744b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000744f:	48                   	dec    eax
c0007450:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007454:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007458:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000745c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007460:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746b:	31 d2                	xor    edx,edx
c000746d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007472:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007476:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000747a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000747e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007482:	31 ff                	xor    edi,edi
c0007484:	31 f6                	xor    esi,esi
c0007486:	31 db                	xor    ebx,ebx
c0007488:	85 ff                	test   edi,edi
c000748a:	74 05                	je     c0007491 <f_mkfs+0x437>
c000748c:	4f                   	dec    edi
c000748d:	74 44                	je     c00074d3 <f_mkfs+0x479>
c000748f:	eb 4f                	jmp    c00074e0 <f_mkfs+0x486>
c0007491:	83 ec 0c             	sub    esp,0xc
c0007494:	0f b7 c3             	movzx  eax,bx
c0007497:	50                   	push   eax
c0007498:	e8 0e 0e 00 00       	call   c00082ab <ff_wtoupper>
c000749d:	83 c4 10             	add    esp,0x10
c00074a0:	89 c1                	mov    ecx,eax
c00074a2:	66 39 c3             	cmp    bx,ax
c00074a5:	8d 53 01             	lea    edx,[ebx+0x1]
c00074a8:	75 3e                	jne    c00074e8 <f_mkfs+0x48e>
c00074aa:	be 01 00 00 00       	mov    esi,0x1
c00074af:	89 df                	mov    edi,ebx
c00074b1:	66 01 f7             	add    di,si
c00074b4:	75 07                	jne    c00074bd <f_mkfs+0x463>
c00074b6:	83 fe 7f             	cmp    esi,0x7f
c00074b9:	77 31                	ja     c00074ec <f_mkfs+0x492>
c00074bb:	eb 16                	jmp    c00074d3 <f_mkfs+0x479>
c00074bd:	83 ec 0c             	sub    esp,0xc
c00074c0:	0f b7 ff             	movzx  edi,di
c00074c3:	57                   	push   edi
c00074c4:	e8 e2 0d 00 00       	call   c00082ab <ff_wtoupper>
c00074c9:	83 c4 10             	add    esp,0x10
c00074cc:	39 c7                	cmp    edi,eax
c00074ce:	75 e6                	jne    c00074b6 <f_mkfs+0x45c>
c00074d0:	46                   	inc    esi
c00074d1:	eb dc                	jmp    c00074af <f_mkfs+0x455>
c00074d3:	31 c0                	xor    eax,eax
c00074d5:	4e                   	dec    esi
c00074d6:	0f 95 c0             	setne  al
c00074d9:	89 d9                	mov    ecx,ebx
c00074db:	89 c7                	mov    edi,eax
c00074dd:	43                   	inc    ebx
c00074de:	eb 14                	jmp    c00074f4 <f_mkfs+0x49a>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	01 f3                	add    ebx,esi
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	eb 0c                	jmp    c00074f4 <f_mkfs+0x49a>
c00074e8:	89 d3                	mov    ebx,edx
c00074ea:	eb 08                	jmp    c00074f4 <f_mkfs+0x49a>
c00074ec:	bf 02 00 00 00       	mov    edi,0x2
c00074f1:	83 c9 ff             	or     ecx,0xffffffff
c00074f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00074fb:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00074ff:	0f b6 c1             	movzx  eax,cl
c0007502:	e8 87 a9 ff ff       	call   c0001e8e <xsum32>
c0007507:	66 c1 e9 08          	shr    cx,0x8
c000750b:	89 c2                	mov    edx,eax
c000750d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007510:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007514:	0f b7 c1             	movzx  eax,cx
c0007517:	e8 72 a9 ff ff       	call   c0001e8e <xsum32>
c000751c:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007521:	66 85 db             	test   bx,bx
c0007524:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007528:	74 1f                	je     c0007549 <f_mkfs+0x4ef>
c000752a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000752d:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007534:	83 c0 02             	add    eax,0x2
c0007537:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000753d:	39 c2                	cmp    edx,eax
c000753f:	74 08                	je     c0007549 <f_mkfs+0x4ef>
c0007541:	89 04 24             	mov    DWORD PTR [esp],eax
c0007544:	e9 3f ff ff ff       	jmp    c0007488 <f_mkfs+0x42e>
c0007549:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000754c:	83 ec 0c             	sub    esp,0xc
c000754f:	05 01 02 00 00       	add    eax,0x201
c0007554:	c1 e8 09             	shr    eax,0x9
c0007557:	50                   	push   eax
c0007558:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000755c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007560:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007564:	55                   	push   ebp
c0007565:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007569:	e8 f0 a3 ff ff       	call   c000195e <disk_write>
c000756e:	83 c4 20             	add    esp,0x20
c0007571:	85 c0                	test   eax,eax
c0007573:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007576:	0f 85 8b 0b 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c000757c:	89 d0                	mov    eax,edx
c000757e:	31 d2                	xor    edx,edx
c0007580:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007584:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007588:	66 85 db             	test   bx,bx
c000758b:	74 04                	je     c0007591 <f_mkfs+0x537>
c000758d:	31 c0                	xor    eax,eax
c000758f:	eb b0                	jmp    c0007541 <f_mkfs+0x4e7>
c0007591:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007595:	31 d2                	xor    edx,edx
c0007597:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000759b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000759f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075a3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00075aa:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00075ae:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075b4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075b8:	8d 70 01             	lea    esi,[eax+0x1]
c00075bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c3:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075ce:	c1 eb 09             	shr    ebx,0x9
c00075d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00075d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00075d9:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00075e0:	31 d2                	xor    edx,edx
c00075e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ea:	89 c1                	mov    ecx,eax
c00075ec:	89 e8                	mov    eax,ebp
c00075ee:	e8 34 a4 ff ff       	call   c0001a27 <mem_set>
c00075f3:	31 c0                	xor    eax,eax
c00075f5:	83 fe 07             	cmp    esi,0x7
c00075f8:	76 10                	jbe    c000760a <f_mkfs+0x5b0>
c00075fa:	39 04 24             	cmp    DWORD PTR [esp],eax
c00075fd:	76 0b                	jbe    c000760a <f_mkfs+0x5b0>
c00075ff:	40                   	inc    eax
c0007600:	83 ee 08             	sub    esi,0x8
c0007603:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007608:	eb eb                	jmp    c00075f5 <f_mkfs+0x59b>
c000760a:	b2 01                	mov    dl,0x1
c000760c:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007610:	85 f6                	test   esi,esi
c0007612:	74 0c                	je     c0007620 <f_mkfs+0x5c6>
c0007614:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007617:	76 07                	jbe    c0007620 <f_mkfs+0x5c6>
c0007619:	08 11                	or     BYTE PTR [ecx],dl
c000761b:	4e                   	dec    esi
c000761c:	01 d2                	add    edx,edx
c000761e:	eb f0                	jmp    c0007610 <f_mkfs+0x5b6>
c0007620:	89 df                	mov    edi,ebx
c0007622:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007626:	76 04                	jbe    c000762c <f_mkfs+0x5d2>
c0007628:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000762c:	83 ec 0c             	sub    esp,0xc
c000762f:	57                   	push   edi
c0007630:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007634:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007638:	55                   	push   ebp
c0007639:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000763d:	e8 1c a3 ff ff       	call   c000195e <disk_write>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	85 c0                	test   eax,eax
c0007647:	0f 85 ba 0a 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c000764d:	31 d2                	xor    edx,edx
c000764f:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007653:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007657:	29 fb                	sub    ebx,edi
c0007659:	0f 85 7a ff ff ff    	jne    c00075d9 <f_mkfs+0x57f>
c000765f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007663:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000766b:	31 f6                	xor    esi,esi
c000766d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007671:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007674:	31 d2                	xor    edx,edx
c0007676:	89 e8                	mov    eax,ebp
c0007678:	e8 aa a3 ff ff       	call   c0001a27 <mem_set>
c000767d:	31 c9                	xor    ecx,ecx
c000767f:	85 db                	test   ebx,ebx
c0007681:	75 40                	jne    c00076c3 <f_mkfs+0x669>
c0007683:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007688:	89 e8                	mov    eax,ebp
c000768a:	e8 7a a3 ff ff       	call   c0001a09 <st_dword>
c000768f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007692:	83 ca ff             	or     edx,0xffffffff
c0007695:	bb 02 00 00 00       	mov    ebx,0x2
c000769a:	e8 6a a3 ff ff       	call   c0001a09 <st_dword>
c000769f:	b9 08 00 00 00       	mov    ecx,0x8
c00076a4:	eb 1d                	jmp    c00076c3 <f_mkfs+0x669>
c00076a6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076a9:	76 3b                	jbe    c00076e6 <f_mkfs+0x68c>
c00076ab:	43                   	inc    ebx
c00076ac:	83 fe 01             	cmp    esi,0x1
c00076af:	89 da                	mov    edx,ebx
c00076b1:	77 03                	ja     c00076b6 <f_mkfs+0x65c>
c00076b3:	83 ca ff             	or     edx,0xffffffff
c00076b6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00076ba:	4e                   	dec    esi
c00076bb:	e8 49 a3 ff ff       	call   c0001a09 <st_dword>
c00076c0:	83 c1 04             	add    ecx,0x4
c00076c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00076c7:	85 f6                	test   esi,esi
c00076c9:	75 db                	jne    c00076a6 <f_mkfs+0x64c>
c00076cb:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00076d0:	77 14                	ja     c00076e6 <f_mkfs+0x68c>
c00076d2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00076d9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00076dd:	85 f6                	test   esi,esi
c00076df:	74 05                	je     c00076e6 <f_mkfs+0x68c>
c00076e1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076e4:	77 dd                	ja     c00076c3 <f_mkfs+0x669>
c00076e6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00076ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00076ee:	39 cf                	cmp    edi,ecx
c00076f0:	76 02                	jbe    c00076f4 <f_mkfs+0x69a>
c00076f2:	89 cf                	mov    edi,ecx
c00076f4:	83 ec 0c             	sub    esp,0xc
c00076f7:	57                   	push   edi
c00076f8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00076fc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007700:	55                   	push   ebp
c0007701:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007705:	e8 54 a2 ff ff       	call   c000195e <disk_write>
c000770a:	83 c4 20             	add    esp,0x20
c000770d:	85 c0                	test   eax,eax
c000770f:	0f 85 f2 09 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007715:	31 d2                	xor    edx,edx
c0007717:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c000771b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000771f:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c0007723:	0f 85 48 ff ff ff    	jne    c0007671 <f_mkfs+0x617>
c0007729:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772c:	31 d2                	xor    edx,edx
c000772e:	89 e8                	mov    eax,ebp
c0007730:	31 ff                	xor    edi,edi
c0007732:	e8 f0 a2 ff ff       	call   c0001a27 <mem_set>
c0007737:	8d 45 34             	lea    eax,[ebp+0x34]
c000773a:	ba 02 00 00 00       	mov    edx,0x2
c000773f:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007743:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007747:	e8 bd a2 ff ff       	call   c0001a09 <st_dword>
c000774c:	8d 45 38             	lea    eax,[ebp+0x38]
c000774f:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007753:	e8 b1 a2 ff ff       	call   c0001a09 <st_dword>
c0007758:	8d 45 44             	lea    eax,[ebp+0x44]
c000775b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000775f:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007763:	e8 a1 a2 ff ff       	call   c0001a09 <st_dword>
c0007768:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000776c:	8d 45 54             	lea    eax,[ebp+0x54]
c000776f:	83 c2 02             	add    edx,0x2
c0007772:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007776:	e8 8e a2 ff ff       	call   c0001a09 <st_dword>
c000777b:	8d 45 58             	lea    eax,[ebp+0x58]
c000777e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007782:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007786:	e8 7e a2 ff ff       	call   c0001a09 <st_dword>
c000778b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000778f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007794:	89 c6                	mov    esi,eax
c0007796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000779e:	89 04 24             	mov    DWORD PTR [esp],eax
c00077a1:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077a5:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ac:	39 cb                	cmp    ebx,ecx
c00077ae:	76 02                	jbe    c00077b2 <f_mkfs+0x758>
c00077b0:	89 cb                	mov    ebx,ecx
c00077b2:	83 ec 0c             	sub    esp,0xc
c00077b5:	53                   	push   ebx
c00077b6:	57                   	push   edi
c00077b7:	56                   	push   esi
c00077b8:	55                   	push   ebp
c00077b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077bd:	e8 9c a1 ff ff       	call   c000195e <disk_write>
c00077c2:	83 c4 20             	add    esp,0x20
c00077c5:	85 c0                	test   eax,eax
c00077c7:	0f 85 3a 09 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00077cd:	31 d2                	xor    edx,edx
c00077cf:	b9 00 02 00 00       	mov    ecx,0x200
c00077d4:	89 e8                	mov    eax,ebp
c00077d6:	e8 4c a2 ff ff       	call   c0001a27 <mem_set>
c00077db:	31 d2                	xor    edx,edx
c00077dd:	01 de                	add    esi,ebx
c00077df:	11 d7                	adc    edi,edx
c00077e1:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00077e4:	75 bf                	jne    c00077a5 <f_mkfs+0x74b>
c00077e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00077ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00077ee:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00077f6:	b9 00 02 00 00       	mov    ecx,0x200
c00077fb:	31 d2                	xor    edx,edx
c00077fd:	89 e8                	mov    eax,ebp
c00077ff:	e8 23 a2 ff ff       	call   c0001a27 <mem_set>
c0007804:	b9 0b 00 00 00       	mov    ecx,0xb
c0007809:	ba 60 00 02 c0       	mov    edx,0xc0020060
c000780e:	89 e8                	mov    eax,ebp
c0007810:	e8 fd a1 ff ff       	call   c0001a12 <mem_cpy>
c0007815:	8d 45 40             	lea    eax,[ebp+0x40]
c0007818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000781c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007820:	e8 e7 a1 ff ff       	call   c0001a0c <st_qword>
c0007825:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007829:	8d 45 48             	lea    eax,[ebp+0x48]
c000782c:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007830:	e8 d7 a1 ff ff       	call   c0001a0c <st_qword>
c0007835:	8d 45 50             	lea    eax,[ebp+0x50]
c0007838:	ba 20 00 00 00       	mov    edx,0x20
c000783d:	e8 c7 a1 ff ff       	call   c0001a09 <st_dword>
c0007842:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007846:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000784a:	e8 ba a1 ff ff       	call   c0001a09 <st_dword>
c000784f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007853:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007857:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000785b:	e8 a9 a1 ff ff       	call   c0001a09 <st_dword>
c0007860:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007863:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007867:	e8 9d a1 ff ff       	call   c0001a09 <st_dword>
c000786c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007870:	8d 50 02             	lea    edx,[eax+0x2]
c0007873:	8d 45 60             	lea    eax,[ebp+0x60]
c0007876:	e8 8e a1 ff ff       	call   c0001a09 <st_dword>
c000787b:	8d 45 64             	lea    eax,[ebp+0x64]
c000787e:	ba 00 00 21 50       	mov    edx,0x50210000
c0007883:	e8 81 a1 ff ff       	call   c0001a09 <st_dword>
c0007888:	8d 45 68             	lea    eax,[ebp+0x68]
c000788b:	ba 00 01 00 00       	mov    edx,0x100
c0007890:	e8 70 a1 ff ff       	call   c0001a05 <st_word>
c0007895:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007899:	b8 0a 00 00 00       	mov    eax,0xa
c000789e:	48                   	dec    eax
c000789f:	74 05                	je     c00078a6 <f_mkfs+0x84c>
c00078a1:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078a4:	eb f8                	jmp    c000789e <f_mkfs+0x844>
c00078a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078aa:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078b2:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078b6:	74 05                	je     c00078bd <f_mkfs+0x863>
c00078b8:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00078bb:	eb f5                	jmp    c00078b2 <f_mkfs+0x858>
c00078bd:	8d 45 78             	lea    eax,[ebp+0x78]
c00078c0:	ba eb fe 00 00       	mov    edx,0xfeeb
c00078c5:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00078cb:	31 db                	xor    ebx,ebx
c00078cd:	e8 33 a1 ff ff       	call   c0001a05 <st_word>
c00078d2:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00078d8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00078dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e0:	e8 20 a1 ff ff       	call   c0001a05 <st_word>
c00078e5:	31 c9                	xor    ecx,ecx
c00078e7:	8d 41 96             	lea    eax,[ecx-0x6a]
c00078ea:	83 f8 01             	cmp    eax,0x1
c00078ed:	76 13                	jbe    c0007902 <f_mkfs+0x8a8>
c00078ef:	83 f9 70             	cmp    ecx,0x70
c00078f2:	74 0e                	je     c0007902 <f_mkfs+0x8a8>
c00078f4:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00078f9:	89 da                	mov    edx,ebx
c00078fb:	e8 8e a5 ff ff       	call   c0001e8e <xsum32>
c0007900:	89 c3                	mov    ebx,eax
c0007902:	41                   	inc    ecx
c0007903:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007909:	75 dc                	jne    c00078e7 <f_mkfs+0x88d>
c000790b:	89 f0                	mov    eax,esi
c000790d:	89 fa                	mov    edx,edi
c000790f:	83 c0 01             	add    eax,0x1
c0007912:	83 d2 00             	adc    edx,0x0
c0007915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007919:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	6a 01                	push   0x1
c0007922:	57                   	push   edi
c0007923:	56                   	push   esi
c0007924:	55                   	push   ebp
c0007925:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007929:	e8 30 a0 ff ff       	call   c000195e <disk_write>
c000792e:	83 c4 20             	add    esp,0x20
c0007931:	85 c0                	test   eax,eax
c0007933:	0f 85 ce 07 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007939:	31 d2                	xor    edx,edx
c000793b:	b9 00 02 00 00       	mov    ecx,0x200
c0007940:	89 e8                	mov    eax,ebp
c0007942:	e8 e0 a0 ff ff       	call   c0001a27 <mem_set>
c0007947:	ba 55 aa 00 00       	mov    edx,0xaa55
c000794c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000794f:	e8 b1 a0 ff ff       	call   c0001a05 <st_word>
c0007954:	89 f0                	mov    eax,esi
c0007956:	83 c0 09             	add    eax,0x9
c0007959:	89 fa                	mov    edx,edi
c000795b:	83 d2 00             	adc    edx,0x0
c000795e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007961:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007965:	31 c9                	xor    ecx,ecx
c0007967:	41                   	inc    ecx
c0007968:	89 da                	mov    edx,ebx
c000796a:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c000796f:	e8 1a a5 ff ff       	call   c0001e8e <xsum32>
c0007974:	89 c3                	mov    ebx,eax
c0007976:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000797c:	75 e9                	jne    c0007967 <f_mkfs+0x90d>
c000797e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007982:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007986:	83 c0 01             	add    eax,0x1
c0007989:	83 d2 00             	adc    edx,0x0
c000798c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007990:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007994:	83 ec 0c             	sub    esp,0xc
c0007997:	6a 01                	push   0x1
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079a1:	55                   	push   ebp
c00079a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a6:	e8 b3 9f ff ff       	call   c000195e <disk_write>
c00079ab:	83 c4 20             	add    esp,0x20
c00079ae:	85 c0                	test   eax,eax
c00079b0:	0f 85 51 07 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00079b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079ba:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00079be:	75 09                	jne    c00079c9 <f_mkfs+0x96f>
c00079c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079c3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00079c7:	74 12                	je     c00079db <f_mkfs+0x981>
c00079c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00079d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d9:	eb 8a                	jmp    c0007965 <f_mkfs+0x90b>
c00079db:	31 d2                	xor    edx,edx
c00079dd:	b9 00 02 00 00       	mov    ecx,0x200
c00079e2:	89 e8                	mov    eax,ebp
c00079e4:	e8 3e a0 ff ff       	call   c0001a27 <mem_set>
c00079e9:	83 c6 0b             	add    esi,0xb
c00079ec:	83 d7 00             	adc    edi,0x0
c00079ef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00079f3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	41                   	inc    ecx
c00079fa:	89 da                	mov    edx,ebx
c00079fc:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a01:	e8 88 a4 ff ff       	call   c0001e8e <xsum32>
c0007a06:	89 c3                	mov    ebx,eax
c0007a08:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0e:	75 e9                	jne    c00079f9 <f_mkfs+0x99f>
c0007a10:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a17:	83 c6 01             	add    esi,0x1
c0007a1a:	83 d7 00             	adc    edi,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	6a 01                	push   0x1
c0007a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a2a:	55                   	push   ebp
c0007a2b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2f:	e8 2a 9f ff ff       	call   c000195e <disk_write>
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	0f 85 c8 06 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007a3f:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a43:	75 06                	jne    c0007a4b <f_mkfs+0x9f1>
c0007a45:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a49:	74 09                	je     c0007a54 <f_mkfs+0x9fa>
c0007a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a4e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a52:	eb a3                	jmp    c00079f7 <f_mkfs+0x99d>
c0007a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a58:	89 da                	mov    edx,ebx
c0007a5a:	01 e8                	add    eax,ebp
c0007a5c:	e8 a8 9f ff ff       	call   c0001a09 <st_dword>
c0007a61:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007a66:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007a6e:	75 e4                	jne    c0007a54 <f_mkfs+0x9fa>
c0007a70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a77:	83 c6 02             	add    esi,0x2
c0007a7a:	83 d7 00             	adc    edi,0x0
c0007a7d:	83 ec 0c             	sub    esp,0xc
c0007a80:	6a 01                	push   0x1
c0007a82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007a86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007a8a:	55                   	push   ebp
c0007a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a8f:	e8 ca 9e ff ff       	call   c000195e <disk_write>
c0007a94:	83 c4 20             	add    esp,0x20
c0007a97:	85 c0                	test   eax,eax
c0007a99:	0f 85 68 06 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007a9f:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aa4:	74 0d                	je     c0007ab3 <f_mkfs+0xa59>
c0007aa6:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007aae:	e9 43 fd ff ff       	jmp    c00077f6 <f_mkfs+0x79c>
c0007ab3:	b1 07                	mov    cl,0x7
c0007ab5:	e9 e3 05 00 00       	jmp    c000809d <f_mkfs+0x1043>
c0007aba:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007abf:	0f 85 4f 02 00 00    	jne    c0007d14 <f_mkfs+0xcba>
c0007ac5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007aca:	0f 86 22 02 00 00    	jbe    c0007cf2 <f_mkfs+0xc98>
c0007ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ad5:	0f 85 81 06 00 00    	jne    c000815c <f_mkfs+0x1102>
c0007adb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ae2:	83 f8 40             	cmp    eax,0x40
c0007ae5:	0f 87 51 06 00 00    	ja     c000813c <f_mkfs+0x10e2>
c0007aeb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007aef:	85 ff                	test   edi,edi
c0007af1:	75 1c                	jne    c0007b0f <f_mkfs+0xab5>
c0007af3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007af6:	ba 60 ff 01 c0       	mov    edx,0xc001ff60
c0007afb:	c1 e9 0c             	shr    ecx,0xc
c0007afe:	bf 01 00 00 00       	mov    edi,0x1
c0007b03:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b06:	66 85 c0             	test   ax,ax
c0007b09:	0f 85 95 01 00 00    	jne    c0007ca4 <f_mkfs+0xc4a>
c0007b0f:	31 d2                	xor    edx,edx
c0007b11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b14:	f7 f7                	div    edi
c0007b16:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b1b:	0f 86 95 01 00 00    	jbe    c0007cb6 <f_mkfs+0xc5c>
c0007b21:	83 c0 02             	add    eax,0x2
c0007b24:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b29:	01 c0                	add    eax,eax
c0007b2b:	05 ff 01 00 00       	add    eax,0x1ff
c0007b30:	be 01 00 00 00       	mov    esi,0x1
c0007b35:	c1 e8 09             	shr    eax,0x9
c0007b38:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b40:	c1 e0 05             	shl    eax,0x5
c0007b43:	c1 e8 09             	shr    eax,0x9
c0007b46:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007b4a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007b4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b53:	89 f0                	mov    eax,esi
c0007b55:	31 d2                	xor    edx,edx
c0007b57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007b5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007b5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007b63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007b67:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007b6b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007b70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007b74:	31 d2                	xor    edx,edx
c0007b76:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007b7a:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	01 c8                	add    eax,ecx
c0007b82:	11 da                	adc    edx,ebx
c0007b84:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007b88:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007b8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007b90:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007b94:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007b98:	f7 da                	neg    edx
c0007b9a:	21 d1                	and    ecx,edx
c0007b9c:	29 d9                	sub    ecx,ebx
c0007b9e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ba3:	0f 85 20 01 00 00    	jne    c0007cc9 <f_mkfs+0xc6f>
c0007ba9:	31 db                	xor    ebx,ebx
c0007bab:	01 ce                	add    esi,ecx
c0007bad:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bb1:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bb5:	89 f8                	mov    eax,edi
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	c1 e0 04             	shl    eax,0x4
c0007bbc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007bc0:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007bc4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007bc8:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007bcc:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007bd0:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007bd3:	19 d3                	sbb    ebx,edx
c0007bd5:	0f 82 40 01 00 00    	jb     c0007d1b <f_mkfs+0xcc1>
c0007bdb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007be2:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007be7:	89 c8                	mov    eax,ecx
c0007be9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007bed:	29 f0                	sub    eax,esi
c0007bef:	29 d0                	sub    eax,edx
c0007bf1:	31 d2                	xor    edx,edx
c0007bf3:	f7 f7                	div    edi
c0007bf5:	89 c3                	mov    ebx,eax
c0007bf7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007bfc:	0f 85 b8 fe ff ff    	jne    c0007aba <f_mkfs+0xa60>
c0007c02:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c07:	0f 87 1d 01 00 00    	ja     c0007d2a <f_mkfs+0xcd0>
c0007c0d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c12:	0f 85 03 01 00 00    	jne    c0007d1b <f_mkfs+0xcc1>
c0007c18:	83 ff 01             	cmp    edi,0x1
c0007c1b:	0f 86 fa 00 00 00    	jbe    c0007d1b <f_mkfs+0xcc1>
c0007c21:	d1 ef                	shr    edi,1
c0007c23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c27:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c2e:	85 db                	test   ebx,ebx
c0007c30:	75 2d                	jne    c0007c5f <f_mkfs+0xc05>
c0007c32:	89 cb                	mov    ebx,ecx
c0007c34:	ba 70 ff 01 c0       	mov    edx,0xc001ff70
c0007c39:	c1 eb 11             	shr    ebx,0x11
c0007c3c:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c44:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c47:	66 85 c0             	test   ax,ax
c0007c4a:	74 11                	je     c0007c5d <f_mkfs+0xc03>
c0007c4c:	83 c2 02             	add    edx,0x2
c0007c4f:	39 d8                	cmp    eax,ebx
c0007c51:	77 0a                	ja     c0007c5d <f_mkfs+0xc03>
c0007c53:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c57:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007c5b:	eb e7                	jmp    c0007c44 <f_mkfs+0xbea>
c0007c5d:	31 db                	xor    ebx,ebx
c0007c5f:	31 d2                	xor    edx,edx
c0007c61:	89 c8                	mov    eax,ecx
c0007c63:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007c67:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007c6e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007c73:	c1 ea 09             	shr    edx,0x9
c0007c76:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007c7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c7f:	0f 87 96 00 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c0007c85:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c89:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007c91:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c95:	be 20 00 00 00       	mov    esi,0x20
c0007c9a:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007c9f:	e9 a6 fe ff ff       	jmp    c0007b4a <f_mkfs+0xaf0>
c0007ca4:	83 c2 02             	add    edx,0x2
c0007ca7:	39 c8                	cmp    eax,ecx
c0007ca9:	0f 87 60 fe ff ff    	ja     c0007b0f <f_mkfs+0xab5>
c0007caf:	01 ff                	add    edi,edi
c0007cb1:	e9 4d fe ff ff       	jmp    c0007b03 <f_mkfs+0xaa9>
c0007cb6:	8d 04 40             	lea    eax,[eax+eax*2]
c0007cb9:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007cbe:	40                   	inc    eax
c0007cbf:	d1 e8                	shr    eax,1
c0007cc1:	83 c0 03             	add    eax,0x3
c0007cc4:	e9 62 fe ff ff       	jmp    c0007b2b <f_mkfs+0xad1>
c0007cc9:	31 d2                	xor    edx,edx
c0007ccb:	89 c8                	mov    eax,ecx
c0007ccd:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007cd1:	85 d2                	test   edx,edx
c0007cd3:	74 0c                	je     c0007ce1 <f_mkfs+0xc87>
c0007cd5:	49                   	dec    ecx
c0007cd6:	46                   	inc    esi
c0007cd7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007cdc:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ce1:	89 c8                	mov    eax,ecx
c0007ce3:	31 d2                	xor    edx,edx
c0007ce5:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007ce9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007ced:	e9 c3 fe ff ff       	jmp    c0007bb5 <f_mkfs+0xb5b>
c0007cf2:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007cf7:	77 31                	ja     c0007d2a <f_mkfs+0xcd0>
c0007cf9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cfe:	75 1b                	jne    c0007d1b <f_mkfs+0xcc1>
c0007d00:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d07:	3d 80 00 00 00       	cmp    eax,0x80
c0007d0c:	0f 86 d9 fd ff ff    	jbe    c0007aeb <f_mkfs+0xa91>
c0007d12:	eb 07                	jmp    c0007d1b <f_mkfs+0xcc1>
c0007d14:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d19:	76 0a                	jbe    c0007d25 <f_mkfs+0xccb>
c0007d1b:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d20:	e9 ff 03 00 00       	jmp    c0008124 <f_mkfs+0x10ca>
c0007d25:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	b9 00 02 00 00       	mov    ecx,0x200
c0007d31:	89 e8                	mov    eax,ebp
c0007d33:	e8 ef 9c ff ff       	call   c0001a27 <mem_set>
c0007d38:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d3d:	ba 82 00 02 c0       	mov    edx,0xc0020082
c0007d42:	89 e8                	mov    eax,ebp
c0007d44:	e8 c9 9c ff ff       	call   c0001a12 <mem_cpy>
c0007d49:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d4c:	ba 00 02 00 00       	mov    edx,0x200
c0007d51:	e8 af 9c ff ff       	call   c0001a05 <st_word>
c0007d56:	89 f8                	mov    eax,edi
c0007d58:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007d5b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007d5e:	0f b7 d6             	movzx  edx,si
c0007d61:	e8 9f 9c ff ff       	call   c0001a05 <st_word>
c0007d66:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007d6a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007d6d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d72:	75 08                	jne    c0007d7c <f_mkfs+0xd22>
c0007d74:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007d7c:	8d 45 11             	lea    eax,[ebp+0x11]
c0007d7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007d83:	e8 7d 9c ff ff       	call   c0001a05 <st_word>
c0007d88:	b8 ff ff 00 00       	mov    eax,0xffff
c0007d8d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d91:	39 d0                	cmp    eax,edx
c0007d93:	b8 00 00 00 00       	mov    eax,0x0
c0007d98:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007d9c:	72 0a                	jb     c0007da8 <f_mkfs+0xd4e>
c0007d9e:	8d 45 13             	lea    eax,[ebp+0x13]
c0007da1:	e8 5f 9c ff ff       	call   c0001a05 <st_word>
c0007da6:	eb 08                	jmp    c0007db0 <f_mkfs+0xd56>
c0007da8:	8d 45 20             	lea    eax,[ebp+0x20]
c0007dab:	e8 59 9c ff ff       	call   c0001a09 <st_dword>
c0007db0:	8d 45 18             	lea    eax,[ebp+0x18]
c0007db3:	ba 3f 00 00 00       	mov    edx,0x3f
c0007db8:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007dbc:	e8 44 9c ff ff       	call   c0001a05 <st_word>
c0007dc1:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007dc4:	ba ff 00 00 00       	mov    edx,0xff
c0007dc9:	e8 37 9c ff ff       	call   c0001a05 <st_word>
c0007dce:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007dd5:	e8 2f 9c ff ff       	call   c0001a09 <st_dword>
c0007dda:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ddf:	75 57                	jne    c0007e38 <f_mkfs+0xdde>
c0007de1:	8d 45 43             	lea    eax,[ebp+0x43]
c0007de4:	ba 00 00 21 50       	mov    edx,0x50210000
c0007de9:	e8 1b 9c ff ff       	call   c0001a09 <st_dword>
c0007dee:	8d 45 24             	lea    eax,[ebp+0x24]
c0007df1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007df5:	e8 0f 9c ff ff       	call   c0001a09 <st_dword>
c0007dfa:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007dfd:	ba 02 00 00 00       	mov    edx,0x2
c0007e02:	e8 02 9c ff ff       	call   c0001a09 <st_dword>
c0007e07:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e0a:	ba 01 00 00 00       	mov    edx,0x1
c0007e0f:	e8 f1 9b ff ff       	call   c0001a05 <st_word>
c0007e14:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e17:	ba 06 00 00 00       	mov    edx,0x6
c0007e1c:	e8 e4 9b ff ff       	call   c0001a05 <st_word>
c0007e21:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e25:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e29:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e2c:	b9 13 00 00 00       	mov    ecx,0x13
c0007e31:	ba 8e 00 02 c0       	mov    edx,0xc002008e
c0007e36:	eb 2f                	jmp    c0007e67 <f_mkfs+0xe0d>
c0007e38:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e3b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e40:	e8 c4 9b ff ff       	call   c0001a09 <st_dword>
c0007e45:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e48:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e4d:	e8 b3 9b ff ff       	call   c0001a05 <st_word>
c0007e52:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e56:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007e5a:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007e5d:	b9 13 00 00 00       	mov    ecx,0x13
c0007e62:	ba a2 00 02 c0       	mov    edx,0xc00200a2
c0007e67:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007e6d:	e8 a0 9b ff ff       	call   c0001a12 <mem_cpy>
c0007e72:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e77:	89 f0                	mov    eax,esi
c0007e79:	e8 87 9b ff ff       	call   c0001a05 <st_word>
c0007e7e:	83 ec 0c             	sub    esp,0xc
c0007e81:	6a 01                	push   0x1
c0007e83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007e87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007e8b:	55                   	push   ebp
c0007e8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e90:	e8 c9 9a ff ff       	call   c000195e <disk_write>
c0007e95:	83 c4 20             	add    esp,0x20
c0007e98:	85 c0                	test   eax,eax
c0007e9a:	0f 85 67 02 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007ea0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea5:	0f 85 b7 00 00 00    	jne    c0007f62 <f_mkfs+0xf08>
c0007eab:	83 ec 0c             	sub    esp,0xc
c0007eae:	6a 01                	push   0x1
c0007eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007eb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007eb8:	83 c0 06             	add    eax,0x6
c0007ebb:	83 d2 00             	adc    edx,0x0
c0007ebe:	52                   	push   edx
c0007ebf:	50                   	push   eax
c0007ec0:	55                   	push   ebp
c0007ec1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ec5:	e8 94 9a ff ff       	call   c000195e <disk_write>
c0007eca:	83 c4 20             	add    esp,0x20
c0007ecd:	b9 00 02 00 00       	mov    ecx,0x200
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	89 e8                	mov    eax,ebp
c0007ed6:	e8 4c 9b ff ff       	call   c0001a27 <mem_set>
c0007edb:	ba 52 52 61 41       	mov    edx,0x41615252
c0007ee0:	89 e8                	mov    eax,ebp
c0007ee2:	e8 22 9b ff ff       	call   c0001a09 <st_dword>
c0007ee7:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007eed:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ef2:	e8 12 9b ff ff       	call   c0001a09 <st_dword>
c0007ef7:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007efa:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f00:	e8 04 9b ff ff       	call   c0001a09 <st_dword>
c0007f05:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f0b:	ba 02 00 00 00       	mov    edx,0x2
c0007f10:	e8 f4 9a ff ff       	call   c0001a09 <st_dword>
c0007f15:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f1a:	89 f0                	mov    eax,esi
c0007f1c:	e8 e4 9a ff ff       	call   c0001a05 <st_word>
c0007f21:	83 ec 0c             	sub    esp,0xc
c0007f24:	6a 01                	push   0x1
c0007f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f2e:	83 c0 07             	add    eax,0x7
c0007f31:	83 d2 00             	adc    edx,0x0
c0007f34:	52                   	push   edx
c0007f35:	50                   	push   eax
c0007f36:	55                   	push   ebp
c0007f37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f3b:	e8 1e 9a ff ff       	call   c000195e <disk_write>
c0007f40:	83 c4 14             	add    esp,0x14
c0007f43:	6a 01                	push   0x1
c0007f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f4d:	83 c0 01             	add    eax,0x1
c0007f50:	83 d2 00             	adc    edx,0x0
c0007f53:	52                   	push   edx
c0007f54:	50                   	push   eax
c0007f55:	55                   	push   ebp
c0007f56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5a:	e8 ff 99 ff ff       	call   c000195e <disk_write>
c0007f5f:	83 c4 20             	add    esp,0x20
c0007f62:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007f69:	31 d2                	xor    edx,edx
c0007f6b:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007f71:	31 db                	xor    ebx,ebx
c0007f73:	89 e8                	mov    eax,ebp
c0007f75:	e8 ad 9a ff ff       	call   c0001a27 <mem_set>
c0007f7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007f81:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007f86:	0f 94 c3             	sete   bl
c0007f89:	4b                   	dec    ebx
c0007f8a:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007f90:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007f96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f9b:	75 21                	jne    c0007fbe <f_mkfs+0xf64>
c0007f9d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fa2:	89 e8                	mov    eax,ebp
c0007fa4:	e8 60 9a ff ff       	call   c0001a09 <st_dword>
c0007fa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0007fac:	83 ca ff             	or     edx,0xffffffff
c0007faf:	e8 55 9a ff ff       	call   c0001a09 <st_dword>
c0007fb4:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fb7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0007fbc:	eb 04                	jmp    c0007fc2 <f_mkfs+0xf68>
c0007fbe:	89 da                	mov    edx,ebx
c0007fc0:	89 e8                	mov    eax,ebp
c0007fc2:	e8 42 9a ff ff       	call   c0001a09 <st_dword>
c0007fc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fcf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007fd7:	39 ce                	cmp    esi,ecx
c0007fd9:	76 02                	jbe    c0007fdd <f_mkfs+0xf83>
c0007fdb:	89 ce                	mov    esi,ecx
c0007fdd:	83 ec 0c             	sub    esp,0xc
c0007fe0:	56                   	push   esi
c0007fe1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007fe5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007fe9:	55                   	push   ebp
c0007fea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fee:	e8 6b 99 ff ff       	call   c000195e <disk_write>
c0007ff3:	83 c4 20             	add    esp,0x20
c0007ff6:	85 c0                	test   eax,eax
c0007ff8:	0f 85 09 01 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	b9 00 02 00 00       	mov    ecx,0x200
c0008005:	89 e8                	mov    eax,ebp
c0008007:	e8 1b 9a ff ff       	call   c0001a27 <mem_set>
c000800c:	31 d2                	xor    edx,edx
c000800e:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008012:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008016:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000801a:	75 b3                	jne    c0007fcf <f_mkfs+0xf75>
c000801c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000801f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008026:	40                   	inc    eax
c0008027:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c000802b:	0f 87 65 ff ff ff    	ja     c0007f96 <f_mkfs+0xf3c>
c0008031:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008036:	74 04                	je     c000803c <f_mkfs+0xfe2>
c0008038:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000803c:	89 fb                	mov    ebx,edi
c000803e:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008042:	76 04                	jbe    c0008048 <f_mkfs+0xfee>
c0008044:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008048:	83 ec 0c             	sub    esp,0xc
c000804b:	53                   	push   ebx
c000804c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008050:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008054:	55                   	push   ebp
c0008055:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008059:	e8 00 99 ff ff       	call   c000195e <disk_write>
c000805e:	83 c4 20             	add    esp,0x20
c0008061:	85 c0                	test   eax,eax
c0008063:	0f 85 9e 00 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0008069:	31 d2                	xor    edx,edx
c000806b:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000806f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008073:	29 df                	sub    edi,ebx
c0008075:	75 c5                	jne    c000803c <f_mkfs+0xfe2>
c0008077:	b1 0c                	mov    cl,0xc
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 1d                	je     c000809d <f_mkfs+0x1043>
c0008080:	b8 ff ff 00 00       	mov    eax,0xffff
c0008085:	b1 06                	mov    cl,0x6
c0008087:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000808b:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000808f:	72 0c                	jb     c000809d <f_mkfs+0x1043>
c0008091:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008096:	0f 94 c1             	sete   cl
c0008099:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000809d:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080a2:	75 4c                	jne    c00080f0 <f_mkfs+0x1096>
c00080a4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080a8:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080ac:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080b3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00080ba:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00080c5:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00080d0:	83 ec 0c             	sub    esp,0xc
c00080d3:	0f b6 c9             	movzx  ecx,cl
c00080d6:	55                   	push   ebp
c00080d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00080e2:	e8 58 c2 ff ff       	call   c000433f <create_partition>
c00080e7:	83 c4 10             	add    esp,0x10
c00080ea:	89 c3                	mov    ebx,eax
c00080ec:	85 c0                	test   eax,eax
c00080ee:	75 34                	jne    c0008124 <f_mkfs+0x10ca>
c00080f0:	50                   	push   eax
c00080f1:	31 db                	xor    ebx,ebx
c00080f3:	6a 00                	push   0x0
c00080f5:	6a 00                	push   0x0
c00080f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00080fb:	e8 74 98 ff ff       	call   c0001974 <disk_ioctl>
c0008100:	83 c4 10             	add    esp,0x10
c0008103:	85 c0                	test   eax,eax
c0008105:	74 1d                	je     c0008124 <f_mkfs+0x10ca>
c0008107:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000810f:	75 0c                	jne    c000811d <f_mkfs+0x10c3>
c0008111:	83 ec 0c             	sub    esp,0xc
c0008114:	55                   	push   ebp
c0008115:	e8 75 00 00 00       	call   c000818f <ff_memfree>
c000811a:	83 c4 10             	add    esp,0x10
c000811d:	bb 01 00 00 00       	mov    ebx,0x1
c0008122:	eb 48                	jmp    c000816c <f_mkfs+0x1112>
c0008124:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000812c:	75 3e                	jne    c000816c <f_mkfs+0x1112>
c000812e:	83 ec 0c             	sub    esp,0xc
c0008131:	55                   	push   ebp
c0008132:	e8 58 00 00 00       	call   c000818f <ff_memfree>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	eb 30                	jmp    c000816c <f_mkfs+0x1112>
c000813c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008141:	0f 85 eb fa ff ff    	jne    c0007c32 <f_mkfs+0xbd8>
c0008147:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000814b:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008151:	0f 86 b8 f9 ff ff    	jbe    c0007b0f <f_mkfs+0xab5>
c0008157:	e9 bf fb ff ff       	jmp    c0007d1b <f_mkfs+0xcc1>
c000815c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008161:	0f 85 c0 fa ff ff    	jne    c0007c27 <f_mkfs+0xbcd>
c0008167:	e9 af fb ff ff       	jmp    c0007d1b <f_mkfs+0xcc1>
c000816c:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008172:	89 d8                	mov    eax,ebx
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    

c0008179 <ff_memalloc>:
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	83 ec 0c             	sub    esp,0xc
c000817f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008183:	e8 9f 3d 00 00       	call   c000bf27 <malloc>
c0008188:	83 c4 10             	add    esp,0x10
c000818b:	83 c4 0c             	add    esp,0xc
c000818e:	c3                   	ret    

c000818f <ff_memfree>:
c000818f:	83 ec 0c             	sub    esp,0xc
c0008192:	83 ec 0c             	sub    esp,0xc
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 99 3d 00 00       	call   c000bf37 <free>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <ff_uni2oem>:
c00081a6:	83 ec 14             	sub    esp,0x14
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081b1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00081b8:	c7 44 24 0c c0 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc00203c0
c00081c0:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00081c5:	77 0b                	ja     c00081d2 <ff_uni2oem+0x2c>
c00081c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00081d0:	eb 61                	jmp    c0008233 <ff_uni2oem+0x8d>
c00081d2:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00081da:	77 57                	ja     c0008233 <ff_uni2oem+0x8d>
c00081dc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00081e2:	75 4f                	jne    c0008233 <ff_uni2oem+0x8d>
c00081e4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00081eb:	eb 0b                	jmp    c00081f8 <ff_uni2oem+0x52>
c00081ed:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00081f2:	40                   	inc    eax
c00081f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00081f8:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00081fe:	77 21                	ja     c0008221 <ff_uni2oem+0x7b>
c0008200:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008205:	25 ff ff 00 00       	and    eax,0xffff
c000820a:	8d 14 00             	lea    edx,[eax+eax*1]
c000820d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008211:	01 d0                	add    eax,edx
c0008213:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008216:	25 ff ff 00 00       	and    eax,0xffff
c000821b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000821f:	75 cc                	jne    c00081ed <ff_uni2oem+0x47>
c0008221:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008226:	83 e8 80             	sub    eax,0xffffff80
c0008229:	25 ff 00 00 00       	and    eax,0xff
c000822e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008233:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008238:	83 c4 14             	add    esp,0x14
c000823b:	c3                   	ret    

c000823c <ff_oem2uni>:
c000823c:	83 ec 18             	sub    esp,0x18
c000823f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008247:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000824c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008250:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008257:	c7 44 24 10 c0 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203c0
c000825f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008265:	77 0b                	ja     c0008272 <ff_oem2uni+0x36>
c0008267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008270:	eb 30                	jmp    c00082a2 <ff_oem2uni+0x66>
c0008272:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008278:	75 28                	jne    c00082a2 <ff_oem2uni+0x66>
c000827a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008281:	77 1f                	ja     c00082a2 <ff_oem2uni+0x66>
c0008283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008287:	25 ff ff 00 00       	and    eax,0xffff
c000828c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008291:	8d 14 00             	lea    edx,[eax+eax*1]
c0008294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008298:	01 d0                	add    eax,edx
c000829a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000829d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082a2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082a7:	83 c4 18             	add    esp,0x18
c00082aa:	c3                   	ret    

c00082ab <ff_wtoupper>:
c00082ab:	83 ec 10             	sub    esp,0x10
c00082ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082b6:	0f 87 62 01 00 00    	ja     c000841e <ff_wtoupper+0x173>
c00082bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00082c5:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00082cc:	77 07                	ja     c00082d5 <ff_wtoupper+0x2a>
c00082ce:	b8 c0 01 02 c0       	mov    eax,0xc00201c0
c00082d3:	eb 05                	jmp    c00082da <ff_wtoupper+0x2f>
c00082d5:	b8 00 01 02 c0       	mov    eax,0xc0020100
c00082da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e2:	8d 50 02             	lea    edx,[eax+0x2]
c00082e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00082e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082ec:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00082f1:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00082f7:	0f 84 13 01 00 00    	je     c0008410 <ff_wtoupper+0x165>
c00082fd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008302:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008307:	0f 82 03 01 00 00    	jb     c0008410 <ff_wtoupper+0x165>
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	8d 50 02             	lea    edx,[eax+0x2]
c0008314:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008318:	66 8b 00             	mov    ax,WORD PTR [eax]
c000831b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008320:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008325:	66 c1 e8 08          	shr    ax,0x8
c0008329:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000832e:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008335:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000833a:	31 d2                	xor    edx,edx
c000833c:	66 89 c2             	mov    dx,ax
c000833f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008343:	31 c9                	xor    ecx,ecx
c0008345:	66 89 c1             	mov    cx,ax
c0008348:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000834d:	25 ff ff 00 00       	and    eax,0xffff
c0008352:	01 c8                	add    eax,ecx
c0008354:	39 c2                	cmp    edx,eax
c0008356:	0f 8d 92 00 00 00    	jge    c00083ee <ff_wtoupper+0x143>
c000835c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008360:	25 ff ff 00 00       	and    eax,0xffff
c0008365:	83 f8 08             	cmp    eax,0x8
c0008368:	0f 87 a1 00 00 00    	ja     c000840f <ff_wtoupper+0x164>
c000836e:	8b 04 85 c0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff40]
c0008375:	ff e0                	jmp    eax
c0008377:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000837c:	31 d2                	xor    edx,edx
c000837e:	66 89 c2             	mov    dx,ax
c0008381:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008385:	25 ff ff 00 00       	and    eax,0xffff
c000838a:	29 c2                	sub    edx,eax
c000838c:	89 d0                	mov    eax,edx
c000838e:	8d 14 00             	lea    edx,[eax+eax*1]
c0008391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008395:	01 d0                	add    eax,edx
c0008397:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000839f:	eb 4b                	jmp    c00083ec <ff_wtoupper+0x141>
c00083a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083aa:	83 e0 01             	and    eax,0x1
c00083ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083b2:	eb 38                	jmp    c00083ec <ff_wtoupper+0x141>
c00083b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083ba:	eb 30                	jmp    c00083ec <ff_wtoupper+0x141>
c00083bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083c2:	eb 28                	jmp    c00083ec <ff_wtoupper+0x141>
c00083c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ca:	eb 20                	jmp    c00083ec <ff_wtoupper+0x141>
c00083cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083d2:	eb 18                	jmp    c00083ec <ff_wtoupper+0x141>
c00083d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083da:	eb 10                	jmp    c00083ec <ff_wtoupper+0x141>
c00083dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00083e2:	eb 08                	jmp    c00083ec <ff_wtoupper+0x141>
c00083e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00083eb:	90                   	nop
c00083ec:	eb 21                	jmp    c000840f <ff_wtoupper+0x164>
c00083ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00083f4:	0f 85 e4 fe ff ff    	jne    c00082de <ff_wtoupper+0x33>
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c0                	add    eax,eax
c0008406:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000840a:	e9 cf fe ff ff       	jmp    c00082de <ff_wtoupper+0x33>
c000840f:	90                   	nop
c0008410:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008415:	25 ff ff 00 00       	and    eax,0xffff
c000841a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000841e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008422:	83 c4 10             	add    esp,0x10
c0008425:	c3                   	ret    

c0008426 <is_bad_src_ratio>:
c0008426:	83 ec 0c             	sub    esp,0xc
c0008429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008430:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008434:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008438:	dd 04 24             	fld    QWORD PTR [esp]
c000843b:	dd 05 80 09 02 c0    	fld    QWORD PTR ds:0xc0020980
c0008441:	de d9                	fcompp 
c0008443:	df e0                	fnstsw ax
c0008445:	f6 c4 45             	test   ah,0x45
c0008448:	74 10                	je     c000845a <is_bad_src_ratio+0x34>
c000844a:	dd 04 24             	fld    QWORD PTR [esp]
c000844d:	dc 1d 88 09 02 c0    	fcomp  QWORD PTR ds:0xc0020988
c0008453:	df e0                	fnstsw ax
c0008455:	f6 c4 45             	test   ah,0x45
c0008458:	75 07                	jne    c0008461 <is_bad_src_ratio+0x3b>
c000845a:	b8 01 00 00 00       	mov    eax,0x1
c000845f:	eb 05                	jmp    c0008466 <is_bad_src_ratio+0x40>
c0008461:	b8 00 00 00 00       	mov    eax,0x0
c0008466:	83 c4 0c             	add    esp,0xc
c0008469:	c3                   	ret    

c000846a <psrc_set_converter>:
c000846a:	56                   	push   esi
c000846b:	89 d6                	mov    esi,edx
c000846d:	53                   	push   ebx
c000846e:	89 c3                	mov    ebx,eax
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	52                   	push   edx
c0008474:	50                   	push   eax
c0008475:	e8 21 24 00 00       	call   c000a89b <sinc_set_converter>
c000847a:	83 c4 10             	add    esp,0x10
c000847d:	85 c0                	test   eax,eax
c000847f:	74 25                	je     c00084a6 <psrc_set_converter+0x3c>
c0008481:	50                   	push   eax
c0008482:	50                   	push   eax
c0008483:	56                   	push   esi
c0008484:	53                   	push   ebx
c0008485:	e8 1c 28 00 00       	call   c000aca6 <zoh_set_converter>
c000848a:	83 c4 10             	add    esp,0x10
c000848d:	85 c0                	test   eax,eax
c000848f:	74 15                	je     c00084a6 <psrc_set_converter+0x3c>
c0008491:	51                   	push   ecx
c0008492:	51                   	push   ecx
c0008493:	56                   	push   esi
c0008494:	53                   	push   ebx
c0008495:	e8 0c 0a 00 00       	call   c0008ea6 <linear_set_converter>
c000849a:	83 c4 10             	add    esp,0x10
c000849d:	ba 0a 00 00 00       	mov    edx,0xa
c00084a2:	85 c0                	test   eax,eax
c00084a4:	75 02                	jne    c00084a8 <psrc_set_converter+0x3e>
c00084a6:	31 d2                	xor    edx,edx
c00084a8:	89 d0                	mov    eax,edx
c00084aa:	5a                   	pop    edx
c00084ab:	5b                   	pop    ebx
c00084ac:	5e                   	pop    esi
c00084ad:	c3                   	ret    

c00084ae <src_delete>:
c00084ae:	53                   	push   ebx
c00084af:	83 ec 08             	sub    esp,0x8
c00084b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084b6:	85 db                	test   ebx,ebx
c00084b8:	74 29                	je     c00084e3 <src_delete+0x35>
c00084ba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084bd:	85 c0                	test   eax,eax
c00084bf:	74 0c                	je     c00084cd <src_delete+0x1f>
c00084c1:	83 ec 0c             	sub    esp,0xc
c00084c4:	50                   	push   eax
c00084c5:	e8 6d 3a 00 00       	call   c000bf37 <free>
c00084ca:	83 c4 10             	add    esp,0x10
c00084cd:	50                   	push   eax
c00084ce:	6a 3c                	push   0x3c
c00084d0:	6a 00                	push   0x0
c00084d2:	53                   	push   ebx
c00084d3:	e8 30 81 ff ff       	call   c0000608 <memset>
c00084d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084db:	e8 57 3a 00 00       	call   c000bf37 <free>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 c4 08             	add    esp,0x8
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	5b                   	pop    ebx
c00084e9:	c3                   	ret    

c00084ea <src_process>:
c00084ea:	56                   	push   esi
c00084eb:	53                   	push   ebx
c00084ec:	53                   	push   ebx
c00084ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00084f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00084f5:	85 f6                	test   esi,esi
c00084f7:	0f 84 e2 00 00 00    	je     c00085df <src_process+0xf5>
c00084fd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008501:	0f 84 df 00 00 00    	je     c00085e6 <src_process+0xfc>
c0008507:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000850b:	0f 84 d5 00 00 00    	je     c00085e6 <src_process+0xfc>
c0008511:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008518:	0f 85 cf 00 00 00    	jne    c00085ed <src_process+0x103>
c000851e:	85 db                	test   ebx,ebx
c0008520:	0f 84 ce 00 00 00    	je     c00085f4 <src_process+0x10a>
c0008526:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008529:	0f 84 cc 00 00 00    	je     c00085fb <src_process+0x111>
c000852f:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008533:	0f 84 c2 00 00 00    	je     c00085fb <src_process+0x111>
c0008539:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000853c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000853f:	e8 e2 fe ff ff       	call   c0008426 <is_bad_src_ratio>
c0008544:	5a                   	pop    edx
c0008545:	85 c0                	test   eax,eax
c0008547:	59                   	pop    ecx
c0008548:	0f 85 b4 00 00 00    	jne    c0008602 <src_process+0x118>
c000854e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008552:	79 07                	jns    c000855b <src_process+0x71>
c0008554:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000855b:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000855f:	79 07                	jns    c0008568 <src_process+0x7e>
c0008561:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008568:	8b 13                	mov    edx,DWORD PTR [ebx]
c000856a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000856d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008570:	39 ca                	cmp    edx,ecx
c0008572:	73 0b                	jae    c000857f <src_process+0x95>
c0008574:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008578:	8d 04 82             	lea    eax,[edx+eax*4]
c000857b:	39 c1                	cmp    ecx,eax
c000857d:	eb 09                	jmp    c0008588 <src_process+0x9e>
c000857f:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008583:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008586:	39 c2                	cmp    edx,eax
c0008588:	72 7f                	jb     c0008609 <src_process+0x11f>
c000858a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008591:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008598:	d9 05 a0 09 02 c0    	fld    DWORD PTR ds:0xc00209a0
c000859e:	dc 1e                	fcomp  QWORD PTR [esi]
c00085a0:	df e0                	fnstsw ax
c00085a2:	9e                   	sahf   
c00085a3:	76 05                	jbe    c00085aa <src_process+0xc0>
c00085a5:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085a8:	dd 1e                	fstp   QWORD PTR [esi]
c00085aa:	dd 06                	fld    QWORD PTR [esi]
c00085ac:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085af:	83 ec 10             	sub    esp,0x10
c00085b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085b5:	e8 86 6c 01 00       	call   c001f240 <fabs>
c00085ba:	83 c4 10             	add    esp,0x10
c00085bd:	dd 05 90 09 02 c0    	fld    QWORD PTR ds:0xc0020990
c00085c3:	de d9                	fcompp 
c00085c5:	df e0                	fnstsw ax
c00085c7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085cb:	9e                   	sahf   
c00085cc:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085d0:	76 05                	jbe    c00085d7 <src_process+0xed>
c00085d2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085d5:	eb 03                	jmp    c00085da <src_process+0xf0>
c00085d7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085da:	59                   	pop    ecx
c00085db:	5b                   	pop    ebx
c00085dc:	5e                   	pop    esi
c00085dd:	ff e0                	jmp    eax
c00085df:	b8 02 00 00 00       	mov    eax,0x2
c00085e4:	eb 28                	jmp    c000860e <src_process+0x124>
c00085e6:	b8 07 00 00 00       	mov    eax,0x7
c00085eb:	eb 21                	jmp    c000860e <src_process+0x124>
c00085ed:	b8 12 00 00 00       	mov    eax,0x12
c00085f2:	eb 1a                	jmp    c000860e <src_process+0x124>
c00085f4:	b8 03 00 00 00       	mov    eax,0x3
c00085f9:	eb 13                	jmp    c000860e <src_process+0x124>
c00085fb:	b8 04 00 00 00       	mov    eax,0x4
c0008600:	eb 0c                	jmp    c000860e <src_process+0x124>
c0008602:	b8 06 00 00 00       	mov    eax,0x6
c0008607:	eb 05                	jmp    c000860e <src_process+0x124>
c0008609:	b8 10 00 00 00       	mov    eax,0x10
c000860e:	5a                   	pop    edx
c000860f:	5b                   	pop    ebx
c0008610:	5e                   	pop    esi
c0008611:	c3                   	ret    

c0008612 <src_callback_read>:
c0008612:	55                   	push   ebp
c0008613:	57                   	push   edi
c0008614:	56                   	push   esi
c0008615:	53                   	push   ebx
c0008616:	83 ec 4c             	sub    esp,0x4c
c0008619:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000861d:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008621:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008625:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008629:	85 ff                	test   edi,edi
c000862b:	0f 8e 36 01 00 00    	jle    c0008767 <src_callback_read+0x155>
c0008631:	85 db                	test   ebx,ebx
c0008633:	0f 84 2e 01 00 00    	je     c0008767 <src_callback_read+0x155>
c0008639:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008640:	74 0c                	je     c000864e <src_callback_read+0x3c>
c0008642:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008649:	e9 19 01 00 00       	jmp    c0008767 <src_callback_read+0x155>
c000864e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008652:	75 0c                	jne    c0008660 <src_callback_read+0x4e>
c0008654:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000865b:	e9 07 01 00 00       	jmp    c0008767 <src_callback_read+0x155>
c0008660:	51                   	push   ecx
c0008661:	6a 24                	push   0x24
c0008663:	6a 00                	push   0x0
c0008665:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008669:	50                   	push   eax
c000866a:	e8 99 7f ff ff       	call   c0000608 <memset>
c000866f:	5e                   	pop    esi
c0008670:	5d                   	pop    ebp
c0008671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008679:	e8 a8 fd ff ff       	call   c0008426 <is_bad_src_ratio>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	85 c0                	test   eax,eax
c0008683:	74 0c                	je     c0008691 <src_callback_read+0x7f>
c0008685:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000868c:	e9 d6 00 00 00       	jmp    c0008767 <src_callback_read+0x155>
c0008691:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008695:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008699:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000869d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086a1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086a8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086ab:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086b3:	31 f6                	xor    esi,esi
c00086b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086ba:	75 30                	jne    c00086ec <src_callback_read+0xda>
c00086bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c4:	52                   	push   edx
c00086c5:	52                   	push   edx
c00086c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086ca:	50                   	push   eax
c00086cb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086ce:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086dd:	83 c4 10             	add    esp,0x10
c00086e0:	85 c0                	test   eax,eax
c00086e2:	75 08                	jne    c00086ec <src_callback_read+0xda>
c00086e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086ec:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00086f3:	50                   	push   eax
c00086f4:	50                   	push   eax
c00086f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00086f9:	50                   	push   eax
c00086fa:	53                   	push   ebx
c00086fb:	e8 ea fd ff ff       	call   c00084ea <src_process>
c0008700:	83 c4 10             	add    esp,0x10
c0008703:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000870a:	85 c0                	test   eax,eax
c000870c:	75 42                	jne    c0008750 <src_callback_read+0x13e>
c000870e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008712:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008715:	89 e9                	mov    ecx,ebp
c0008717:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c000871b:	0f af ca             	imul   ecx,edx
c000871e:	c1 e1 02             	shl    ecx,0x2
c0008721:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008725:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008729:	0f af d1             	imul   edx,ecx
c000872c:	c1 e2 02             	shl    edx,0x2
c000872f:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008733:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008737:	8d 14 31             	lea    edx,[ecx+esi*1]
c000873a:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000873f:	75 04                	jne    c0008745 <src_callback_read+0x133>
c0008741:	85 c9                	test   ecx,ecx
c0008743:	74 0b                	je     c0008750 <src_callback_read+0x13e>
c0008745:	39 d7                	cmp    edi,edx
c0008747:	7e 09                	jle    c0008752 <src_callback_read+0x140>
c0008749:	89 d6                	mov    esi,edx
c000874b:	e9 65 ff ff ff       	jmp    c00086b5 <src_callback_read+0xa3>
c0008750:	89 f2                	mov    edx,esi
c0008752:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008756:	85 c0                	test   eax,eax
c0008758:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000875b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000875f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008762:	74 05                	je     c0008769 <src_callback_read+0x157>
c0008764:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008767:	31 d2                	xor    edx,edx
c0008769:	83 c4 4c             	add    esp,0x4c
c000876c:	89 d0                	mov    eax,edx
c000876e:	5b                   	pop    ebx
c000876f:	5e                   	pop    esi
c0008770:	5f                   	pop    edi
c0008771:	5d                   	pop    ebp
c0008772:	c3                   	ret    

c0008773 <src_set_ratio>:
c0008773:	53                   	push   ebx
c0008774:	b8 02 00 00 00       	mov    eax,0x2
c0008779:	83 ec 08             	sub    esp,0x8
c000877c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008780:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008784:	85 db                	test   ebx,ebx
c0008786:	74 33                	je     c00087bb <src_set_ratio+0x48>
c0008788:	b8 07 00 00 00       	mov    eax,0x7
c000878d:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008791:	74 2c                	je     c00087bf <src_set_ratio+0x4c>
c0008793:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008797:	74 2a                	je     c00087c3 <src_set_ratio+0x50>
c0008799:	50                   	push   eax
c000879a:	50                   	push   eax
c000879b:	dd 14 24             	fst    QWORD PTR [esp]
c000879e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087a2:	e8 7f fc ff ff       	call   c0008426 <is_bad_src_ratio>
c00087a7:	5a                   	pop    edx
c00087a8:	59                   	pop    ecx
c00087a9:	85 c0                	test   eax,eax
c00087ab:	75 07                	jne    c00087b4 <src_set_ratio+0x41>
c00087ad:	dd 04 24             	fld    QWORD PTR [esp]
c00087b0:	dd 1b                	fstp   QWORD PTR [ebx]
c00087b2:	eb 11                	jmp    c00087c5 <src_set_ratio+0x52>
c00087b4:	b8 06 00 00 00       	mov    eax,0x6
c00087b9:	eb 0a                	jmp    c00087c5 <src_set_ratio+0x52>
c00087bb:	dd d8                	fstp   st(0)
c00087bd:	eb 06                	jmp    c00087c5 <src_set_ratio+0x52>
c00087bf:	dd d8                	fstp   st(0)
c00087c1:	eb 02                	jmp    c00087c5 <src_set_ratio+0x52>
c00087c3:	dd d8                	fstp   st(0)
c00087c5:	83 c4 08             	add    esp,0x8
c00087c8:	5b                   	pop    ebx
c00087c9:	c3                   	ret    

c00087ca <src_get_channels>:
c00087ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087ce:	b8 02 00 00 00       	mov    eax,0x2
c00087d3:	85 d2                	test   edx,edx
c00087d5:	74 14                	je     c00087eb <src_get_channels+0x21>
c00087d7:	b8 07 00 00 00       	mov    eax,0x7
c00087dc:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087e0:	74 09                	je     c00087eb <src_get_channels+0x21>
c00087e2:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00087e6:	74 03                	je     c00087eb <src_get_channels+0x21>
c00087e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00087eb:	c3                   	ret    

c00087ec <src_reset>:
c00087ec:	53                   	push   ebx
c00087ed:	b8 02 00 00 00       	mov    eax,0x2
c00087f2:	83 ec 08             	sub    esp,0x8
c00087f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087f9:	85 db                	test   ebx,ebx
c00087fb:	74 2e                	je     c000882b <src_reset+0x3f>
c00087fd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008800:	85 c0                	test   eax,eax
c0008802:	74 09                	je     c000880d <src_reset+0x21>
c0008804:	83 ec 0c             	sub    esp,0xc
c0008807:	53                   	push   ebx
c0008808:	ff d0                	call   eax
c000880a:	83 c4 10             	add    esp,0x10
c000880d:	d9 ee                	fldz   
c000880f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008816:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000881d:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008820:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008827:	31 c0                	xor    eax,eax
c0008829:	dd 1b                	fstp   QWORD PTR [ebx]
c000882b:	83 c4 08             	add    esp,0x8
c000882e:	5b                   	pop    ebx
c000882f:	c3                   	ret    

c0008830 <src_new>:
c0008830:	57                   	push   edi
c0008831:	56                   	push   esi
c0008832:	53                   	push   ebx
c0008833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008837:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000883b:	85 f6                	test   esi,esi
c000883d:	74 73                	je     c00088b2 <src_new+0x82>
c000883f:	85 ff                	test   edi,edi
c0008841:	7f 08                	jg     c000884b <src_new+0x1b>
c0008843:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008849:	eb 1e                	jmp    c0008869 <src_new+0x39>
c000884b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008851:	50                   	push   eax
c0008852:	50                   	push   eax
c0008853:	6a 3c                	push   0x3c
c0008855:	6a 01                	push   0x1
c0008857:	e8 fb 36 00 00       	call   c000bf57 <calloc>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 c3                	mov    ebx,eax
c0008861:	85 c0                	test   eax,eax
c0008863:	75 10                	jne    c0008875 <src_new+0x45>
c0008865:	85 f6                	test   esi,esi
c0008867:	75 04                	jne    c000886d <src_new+0x3d>
c0008869:	31 db                	xor    ebx,ebx
c000886b:	eb 4b                	jmp    c00088b8 <src_new+0x88>
c000886d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008873:	eb 43                	jmp    c00088b8 <src_new+0x88>
c0008875:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008878:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000887f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008883:	e8 e2 fb ff ff       	call   c000846a <psrc_set_converter>
c0008888:	85 c0                	test   eax,eax
c000888a:	74 18                	je     c00088a4 <src_new+0x74>
c000888c:	85 f6                	test   esi,esi
c000888e:	74 06                	je     c0008896 <src_new+0x66>
c0008890:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008896:	83 ec 0c             	sub    esp,0xc
c0008899:	53                   	push   ebx
c000889a:	31 db                	xor    ebx,ebx
c000889c:	e8 96 36 00 00       	call   c000bf37 <free>
c00088a1:	83 c4 10             	add    esp,0x10
c00088a4:	83 ec 0c             	sub    esp,0xc
c00088a7:	53                   	push   ebx
c00088a8:	e8 3f ff ff ff       	call   c00087ec <src_reset>
c00088ad:	83 c4 10             	add    esp,0x10
c00088b0:	eb 06                	jmp    c00088b8 <src_new+0x88>
c00088b2:	85 ff                	test   edi,edi
c00088b4:	7f 9b                	jg     c0008851 <src_new+0x21>
c00088b6:	eb b1                	jmp    c0008869 <src_new+0x39>
c00088b8:	89 d8                	mov    eax,ebx
c00088ba:	5b                   	pop    ebx
c00088bb:	5e                   	pop    esi
c00088bc:	5f                   	pop    edi
c00088bd:	c3                   	ret    

c00088be <src_callback_new>:
c00088be:	56                   	push   esi
c00088bf:	53                   	push   ebx
c00088c0:	53                   	push   ebx
c00088c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088c9:	85 f6                	test   esi,esi
c00088cb:	75 0e                	jne    c00088db <src_callback_new+0x1d>
c00088cd:	31 db                	xor    ebx,ebx
c00088cf:	85 c0                	test   eax,eax
c00088d1:	74 47                	je     c000891a <src_callback_new+0x5c>
c00088d3:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088d9:	eb 3f                	jmp    c000891a <src_callback_new+0x5c>
c00088db:	85 c0                	test   eax,eax
c00088dd:	74 06                	je     c00088e5 <src_callback_new+0x27>
c00088df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e5:	51                   	push   ecx
c00088e6:	50                   	push   eax
c00088e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00088eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00088ef:	e8 3c ff ff ff       	call   c0008830 <src_new>
c00088f4:	83 c4 10             	add    esp,0x10
c00088f7:	89 c3                	mov    ebx,eax
c00088f9:	85 c0                	test   eax,eax
c00088fb:	74 1d                	je     c000891a <src_callback_new+0x5c>
c00088fd:	83 ec 0c             	sub    esp,0xc
c0008900:	50                   	push   eax
c0008901:	e8 e6 fe ff ff       	call   c00087ec <src_reset>
c0008906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000890a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008911:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008914:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008917:	83 c4 10             	add    esp,0x10
c000891a:	5a                   	pop    edx
c000891b:	89 d8                	mov    eax,ebx
c000891d:	5b                   	pop    ebx
c000891e:	5e                   	pop    esi
c000891f:	c3                   	ret    

c0008920 <src_get_name>:
c0008920:	53                   	push   ebx
c0008921:	83 ec 14             	sub    esp,0x14
c0008924:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008928:	53                   	push   ebx
c0008929:	e8 47 1f 00 00       	call   c000a875 <sinc_get_name>
c000892e:	83 c4 10             	add    esp,0x10
c0008931:	85 c0                	test   eax,eax
c0008933:	75 1d                	jne    c0008952 <src_get_name+0x32>
c0008935:	83 ec 0c             	sub    esp,0xc
c0008938:	53                   	push   ebx
c0008939:	e8 4a 23 00 00       	call   c000ac88 <zoh_get_name>
c000893e:	83 c4 10             	add    esp,0x10
c0008941:	85 c0                	test   eax,eax
c0008943:	75 0d                	jne    c0008952 <src_get_name+0x32>
c0008945:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008949:	83 c4 08             	add    esp,0x8
c000894c:	5b                   	pop    ebx
c000894d:	e9 36 05 00 00       	jmp    c0008e88 <linear_get_name>
c0008952:	83 c4 08             	add    esp,0x8
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    

c0008957 <src_get_description>:
c0008957:	53                   	push   ebx
c0008958:	83 ec 14             	sub    esp,0x14
c000895b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000895f:	53                   	push   ebx
c0008960:	e8 23 1f 00 00       	call   c000a888 <sinc_get_description>
c0008965:	83 c4 10             	add    esp,0x10
c0008968:	85 c0                	test   eax,eax
c000896a:	75 1d                	jne    c0008989 <src_get_description+0x32>
c000896c:	83 ec 0c             	sub    esp,0xc
c000896f:	53                   	push   ebx
c0008970:	e8 22 23 00 00       	call   c000ac97 <zoh_get_description>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	75 0d                	jne    c0008989 <src_get_description+0x32>
c000897c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008980:	83 c4 08             	add    esp,0x8
c0008983:	5b                   	pop    ebx
c0008984:	e9 0e 05 00 00       	jmp    c0008e97 <linear_get_description>
c0008989:	83 c4 08             	add    esp,0x8
c000898c:	5b                   	pop    ebx
c000898d:	c3                   	ret    

c000898e <src_get_version>:
c000898e:	b8 c0 04 02 c0       	mov    eax,0xc00204c0
c0008993:	c3                   	ret    

c0008994 <src_is_valid_ratio>:
c0008994:	50                   	push   eax
c0008995:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008999:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000899d:	e8 84 fa ff ff       	call   c0008426 <is_bad_src_ratio>
c00089a2:	85 c0                	test   eax,eax
c00089a4:	0f 94 c0             	sete   al
c00089a7:	0f b6 c0             	movzx  eax,al
c00089aa:	83 c4 0c             	add    esp,0xc
c00089ad:	c3                   	ret    

c00089ae <src_error>:
c00089ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089b2:	31 c0                	xor    eax,eax
c00089b4:	85 d2                	test   edx,edx
c00089b6:	74 03                	je     c00089bb <src_error+0xd>
c00089b8:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089bb:	c3                   	ret    

c00089bc <src_strerror>:
c00089bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	83 fa 17             	cmp    edx,0x17
c00089c5:	77 07                	ja     c00089ce <src_strerror+0x12>
c00089c7:	8b 04 95 20 09 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf6e0]
c00089ce:	c3                   	ret    

c00089cf <src_simple>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	83 ec 18             	sub    esp,0x18
c00089d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089dc:	50                   	push   eax
c00089dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089e5:	e8 46 fe ff ff       	call   c0008830 <src_new>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	85 c0                	test   eax,eax
c00089ef:	75 06                	jne    c00089f7 <src_simple+0x28>
c00089f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089f5:	eb 25                	jmp    c0008a1c <src_simple+0x4d>
c00089f7:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c00089fe:	89 c3                	mov    ebx,eax
c0008a00:	50                   	push   eax
c0008a01:	50                   	push   eax
c0008a02:	56                   	push   esi
c0008a03:	53                   	push   ebx
c0008a04:	e8 e1 fa ff ff       	call   c00084ea <src_process>
c0008a09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a10:	e8 99 fa ff ff       	call   c00084ae <src_delete>
c0008a15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	83 c4 14             	add    esp,0x14
c0008a1f:	5b                   	pop    ebx
c0008a20:	5e                   	pop    esi
c0008a21:	c3                   	ret    

c0008a22 <src_short_to_float_array>:
c0008a22:	83 ec 0c             	sub    esp,0xc
c0008a25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a29:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a31:	85 c0                	test   eax,eax
c0008a33:	74 0f                	je     c0008a44 <src_short_to_float_array+0x22>
c0008a35:	48                   	dec    eax
c0008a36:	d9 05 a4 09 02 c0    	fld    DWORD PTR ds:0xc00209a4
c0008a3c:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a3f:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a42:	eb ed                	jmp    c0008a31 <src_short_to_float_array+0xf>
c0008a44:	83 c4 0c             	add    esp,0xc
c0008a47:	c3                   	ret    

c0008a48 <src_float_to_short_array>:
c0008a48:	56                   	push   esi
c0008a49:	53                   	push   ebx
c0008a4a:	52                   	push   edx
c0008a4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a53:	85 db                	test   ebx,ebx
c0008a55:	74 51                	je     c0008aa8 <src_float_to_short_array+0x60>
c0008a57:	4b                   	dec    ebx
c0008a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5c:	d9 05 a8 09 02 c0    	fld    DWORD PTR ds:0xc00209a8
c0008a62:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a65:	dc 15 98 09 02 c0    	fcom   QWORD PTR ds:0xc0020998
c0008a6b:	df e0                	fnstsw ax
c0008a6d:	9e                   	sahf   
c0008a6e:	72 0a                	jb     c0008a7a <src_float_to_short_array+0x32>
c0008a70:	dd d8                	fstp   st(0)
c0008a72:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a78:	eb d9                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008a7a:	d9 05 ac 09 02 c0    	fld    DWORD PTR ds:0xc00209ac
c0008a80:	d8 d9                	fcomp  st(1)
c0008a82:	df e0                	fnstsw ax
c0008a84:	9e                   	sahf   
c0008a85:	72 0a                	jb     c0008a91 <src_float_to_short_array+0x49>
c0008a87:	dd d8                	fstp   st(0)
c0008a89:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008a8f:	eb c2                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008a91:	83 ec 10             	sub    esp,0x10
c0008a94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008a97:	e8 c4 67 01 00       	call   c001f260 <lrint>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	c1 f8 10             	sar    eax,0x10
c0008aa2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008aa6:	eb ab                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008aa8:	58                   	pop    eax
c0008aa9:	5b                   	pop    ebx
c0008aaa:	5e                   	pop    esi
c0008aab:	c3                   	ret    

c0008aac <src_int_to_float_array>:
c0008aac:	83 ec 0c             	sub    esp,0xc
c0008aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008abb:	85 c0                	test   eax,eax
c0008abd:	74 0f                	je     c0008ace <src_int_to_float_array+0x22>
c0008abf:	48                   	dec    eax
c0008ac0:	d9 05 b0 09 02 c0    	fld    DWORD PTR ds:0xc00209b0
c0008ac6:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ac9:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008acc:	eb ed                	jmp    c0008abb <src_int_to_float_array+0xf>
c0008ace:	83 c4 0c             	add    esp,0xc
c0008ad1:	c3                   	ret    

c0008ad2 <src_float_to_int_array>:
c0008ad2:	56                   	push   esi
c0008ad3:	53                   	push   ebx
c0008ad4:	52                   	push   edx
c0008ad5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008add:	85 db                	test   ebx,ebx
c0008adf:	74 4f                	je     c0008b30 <src_float_to_int_array+0x5e>
c0008ae1:	4b                   	dec    ebx
c0008ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae6:	d9 05 a8 09 02 c0    	fld    DWORD PTR ds:0xc00209a8
c0008aec:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008aef:	dc 15 98 09 02 c0    	fcom   QWORD PTR ds:0xc0020998
c0008af5:	df e0                	fnstsw ax
c0008af7:	9e                   	sahf   
c0008af8:	72 0b                	jb     c0008b05 <src_float_to_int_array+0x33>
c0008afa:	dd d8                	fstp   st(0)
c0008afc:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b03:	eb d8                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b05:	d9 05 ac 09 02 c0    	fld    DWORD PTR ds:0xc00209ac
c0008b0b:	d8 d9                	fcomp  st(1)
c0008b0d:	df e0                	fnstsw ax
c0008b0f:	9e                   	sahf   
c0008b10:	72 0b                	jb     c0008b1d <src_float_to_int_array+0x4b>
c0008b12:	dd d8                	fstp   st(0)
c0008b14:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b1b:	eb c0                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b1d:	83 ec 10             	sub    esp,0x10
c0008b20:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b23:	e8 38 67 01 00       	call   c001f260 <lrint>
c0008b28:	83 c4 10             	add    esp,0x10
c0008b2b:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b2e:	eb ad                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b30:	58                   	pop    eax
c0008b31:	5b                   	pop    ebx
c0008b32:	5e                   	pop    esi
c0008b33:	c3                   	ret    

c0008b34 <is_bad_src_ratio>:
c0008b34:	83 ec 0c             	sub    esp,0xc
c0008b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b46:	dd 04 24             	fld    QWORD PTR [esp]
c0008b49:	dd 05 80 09 02 c0    	fld    QWORD PTR ds:0xc0020980
c0008b4f:	de d9                	fcompp 
c0008b51:	df e0                	fnstsw ax
c0008b53:	f6 c4 45             	test   ah,0x45
c0008b56:	74 10                	je     c0008b68 <is_bad_src_ratio+0x34>
c0008b58:	dd 04 24             	fld    QWORD PTR [esp]
c0008b5b:	dc 1d 88 09 02 c0    	fcomp  QWORD PTR ds:0xc0020988
c0008b61:	df e0                	fnstsw ax
c0008b63:	f6 c4 45             	test   ah,0x45
c0008b66:	75 07                	jne    c0008b6f <is_bad_src_ratio+0x3b>
c0008b68:	b8 01 00 00 00       	mov    eax,0x1
c0008b6d:	eb 05                	jmp    c0008b74 <is_bad_src_ratio+0x40>
c0008b6f:	b8 00 00 00 00       	mov    eax,0x0
c0008b74:	83 c4 0c             	add    esp,0xc
c0008b77:	c3                   	ret    

c0008b78 <fmod_one>:
c0008b78:	83 ec 2c             	sub    esp,0x2c
c0008b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008b87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b8b:	83 ec 08             	sub    esp,0x8
c0008b8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b96:	e8 c5 66 01 00       	call   c001f260 <lrint>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ba2:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ba6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008baa:	de e1                	fsubrp st(1),st
c0008bac:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bb0:	d9 ee                	fldz   
c0008bb2:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bb6:	df e0                	fnstsw ax
c0008bb8:	f6 c4 45             	test   ah,0x45
c0008bbb:	75 0a                	jne    c0008bc7 <fmod_one+0x4f>
c0008bbd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bc1:	d9 e8                	fld1   
c0008bc3:	de c1                	faddp  st(1),st
c0008bc5:	eb 04                	jmp    c0008bcb <fmod_one+0x53>
c0008bc7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bcb:	83 c4 2c             	add    esp,0x2c
c0008bce:	c3                   	ret    

c0008bcf <linear_vari_process>:
c0008bcf:	55                   	push   ebp
c0008bd0:	57                   	push   edi
c0008bd1:	56                   	push   esi
c0008bd2:	53                   	push   ebx
c0008bd3:	83 ec 2c             	sub    esp,0x2c
c0008bd6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bda:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008be6:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008bea:	0f 8e 5a 02 00 00    	jle    c0008e4a <linear_vari_process+0x27b>
c0008bf0:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008bf3:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008bfb:	85 db                	test   ebx,ebx
c0008bfd:	0f 84 47 02 00 00    	je     c0008e4a <linear_vari_process+0x27b>
c0008c03:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c06:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c0a:	74 19                	je     c0008c25 <linear_vari_process+0x56>
c0008c0c:	31 d2                	xor    edx,edx
c0008c0e:	39 c2                	cmp    edx,eax
c0008c10:	7d 0c                	jge    c0008c1e <linear_vari_process+0x4f>
c0008c12:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c14:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c17:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c1b:	42                   	inc    edx
c0008c1c:	eb f0                	jmp    c0008c0e <linear_vari_process+0x3f>
c0008c1e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c25:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c28:	0f af d0             	imul   edx,eax
c0008c2b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c2e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c32:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c39:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c3c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c43:	dd 07                	fld    QWORD PTR [edi]
c0008c45:	dd 14 24             	fst    QWORD PTR [esp]
c0008c48:	50                   	push   eax
c0008c49:	50                   	push   eax
c0008c4a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c4d:	e8 e2 fe ff ff       	call   c0008b34 <is_bad_src_ratio>
c0008c52:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c56:	5a                   	pop    edx
c0008c57:	59                   	pop    ecx
c0008c58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c5d:	0f 85 df 01 00 00    	jne    c0008e42 <linear_vari_process+0x273>
c0008c63:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c66:	d9 e8                	fld1   
c0008c68:	d8 d1                	fcom   st(1)
c0008c6a:	df e0                	fnstsw ax
c0008c6c:	9e                   	sahf   
c0008c6d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c71:	0f 86 97 00 00 00    	jbe    c0008d0e <linear_vari_process+0x13f>
c0008c77:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c7a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c7d:	0f 8d 8b 00 00 00    	jge    c0008d0e <linear_vari_process+0x13f>
c0008c83:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c87:	d8 c1                	fadd   st,st(1)
c0008c89:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008c8c:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008c8f:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008c92:	df e0                	fnstsw ax
c0008c94:	9e                   	sahf   
c0008c95:	73 77                	jae    c0008d0e <linear_vari_process+0x13f>
c0008c97:	85 d2                	test   edx,edx
c0008c99:	7e 36                	jle    c0008cd1 <linear_vari_process+0x102>
c0008c9b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008c9f:	dd 07                	fld    QWORD PTR [edi]
c0008ca1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008ca4:	83 ec 10             	sub    esp,0x10
c0008ca7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008caa:	e8 91 65 01 00       	call   c001f240 <fabs>
c0008caf:	83 c4 10             	add    esp,0x10
c0008cb2:	dc 1d f8 09 02 c0    	fcomp  QWORD PTR ds:0xc00209f8
c0008cb8:	df e0                	fnstsw ax
c0008cba:	9e                   	sahf   
c0008cbb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cbf:	76 10                	jbe    c0008cd1 <linear_vari_process+0x102>
c0008cc1:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008cc4:	dc 27                	fsub   QWORD PTR [edi]
c0008cc6:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008cc9:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ccc:	dc 07                	fadd   QWORD PTR [edi]
c0008cce:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cd1:	31 c0                	xor    eax,eax
c0008cd3:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cd6:	7e 1f                	jle    c0008cf7 <linear_vari_process+0x128>
c0008cd8:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cda:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cdd:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008ce1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ce5:	d8 e1                	fsub   st,st(1)
c0008ce7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008cea:	40                   	inc    eax
c0008ceb:	d8 ca                	fmul   st,st(2)
c0008ced:	de c1                	faddp  st(1),st
c0008cef:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008cf2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008cf5:	eb dc                	jmp    c0008cd3 <linear_vari_process+0x104>
c0008cf7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008cfb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008cfe:	de c1                	faddp  st(1),st
c0008d00:	e9 61 ff ff ff       	jmp    c0008c66 <linear_vari_process+0x97>
c0008d05:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d09:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d0c:	de c1                	faddp  st(1),st
c0008d0e:	83 ec 10             	sub    esp,0x10
c0008d11:	dd 14 24             	fst    QWORD PTR [esp]
c0008d14:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d18:	e8 5b fe ff ff       	call   c0008b78 <fmod_one>
c0008d1d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d20:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d24:	d8 e1                	fsub   st,st(1)
c0008d26:	d9 c9                	fxch   st(1)
c0008d28:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d2f:	e8 2c 65 01 00       	call   c001f260 <lrint>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	0f af e8             	imul   ebp,eax
c0008d3a:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d3d:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d40:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d47:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d4a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d4d:	0f 8d 95 00 00 00    	jge    c0008de8 <linear_vari_process+0x219>
c0008d53:	d9 c0                	fld    st(0)
c0008d55:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d5c:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d64:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d68:	de d9                	fcompp 
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	76 79                	jbe    c0008de8 <linear_vari_process+0x219>
c0008d6f:	85 ed                	test   ebp,ebp
c0008d71:	7e 36                	jle    c0008da9 <linear_vari_process+0x1da>
c0008d73:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d77:	dd 07                	fld    QWORD PTR [edi]
c0008d79:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d7c:	83 ec 10             	sub    esp,0x10
c0008d7f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d82:	e8 b9 64 01 00       	call   c001f240 <fabs>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	dc 1d f8 09 02 c0    	fcomp  QWORD PTR ds:0xc00209f8
c0008d90:	df e0                	fnstsw ax
c0008d92:	9e                   	sahf   
c0008d93:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d97:	76 10                	jbe    c0008da9 <linear_vari_process+0x1da>
c0008d99:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d9c:	dc 27                	fsub   QWORD PTR [edi]
c0008d9e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008da1:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008da4:	dc 07                	fadd   QWORD PTR [edi]
c0008da6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da9:	31 c0                	xor    eax,eax
c0008dab:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dae:	39 c2                	cmp    edx,eax
c0008db0:	0f 8e 4f ff ff ff    	jle    c0008d05 <linear_vari_process+0x136>
c0008db6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008db8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dbb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dbf:	89 e9                	mov    ecx,ebp
c0008dc1:	29 d1                	sub    ecx,edx
c0008dc3:	01 c5                	add    ebp,eax
c0008dc5:	89 ca                	mov    edx,ecx
c0008dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dcb:	01 c2                	add    edx,eax
c0008dcd:	40                   	inc    eax
c0008dce:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008dd1:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008dd4:	d8 e1                	fsub   st,st(1)
c0008dd6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008dd9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ddc:	d8 ca                	fmul   st,st(2)
c0008dde:	de c1                	faddp  st(1),st
c0008de0:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008de3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008de6:	eb c3                	jmp    c0008dab <linear_vari_process+0x1dc>
c0008de8:	39 d1                	cmp    ecx,edx
c0008dea:	7d 13                	jge    c0008dff <linear_vari_process+0x230>
c0008dec:	89 d0                	mov    eax,edx
c0008dee:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008df1:	29 c8                	sub    eax,ecx
c0008df3:	99                   	cdq    
c0008df4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dfb:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008dff:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e05:	85 c0                	test   eax,eax
c0008e07:	7f 1b                	jg     c0008e24 <linear_vari_process+0x255>
c0008e09:	dd 04 24             	fld    QWORD PTR [esp]
c0008e0c:	dd 1f                	fstp   QWORD PTR [edi]
c0008e0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e11:	99                   	cdq    
c0008e12:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e15:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e18:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e1b:	99                   	cdq    
c0008e1c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e1f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e22:	eb 26                	jmp    c0008e4a <linear_vari_process+0x27b>
c0008e24:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e27:	31 d2                	xor    edx,edx
c0008e29:	29 c8                	sub    eax,ecx
c0008e2b:	c1 e0 02             	shl    eax,0x2
c0008e2e:	39 d1                	cmp    ecx,edx
c0008e30:	7e d7                	jle    c0008e09 <linear_vari_process+0x23a>
c0008e32:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e34:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e38:	83 c0 04             	add    eax,0x4
c0008e3b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e3f:	42                   	inc    edx
c0008e40:	eb ec                	jmp    c0008e2e <linear_vari_process+0x25f>
c0008e42:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e4e:	83 c4 2c             	add    esp,0x2c
c0008e51:	5b                   	pop    ebx
c0008e52:	5e                   	pop    esi
c0008e53:	5f                   	pop    edi
c0008e54:	5d                   	pop    ebp
c0008e55:	c3                   	ret    

c0008e56 <linear_reset>:
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e60:	85 c0                	test   eax,eax
c0008e62:	74 20                	je     c0008e84 <linear_reset+0x2e>
c0008e64:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e67:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008e6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008e71:	51                   	push   ecx
c0008e72:	c1 e2 02             	shl    edx,0x2
c0008e75:	83 c0 1c             	add    eax,0x1c
c0008e78:	52                   	push   edx
c0008e79:	6a 00                	push   0x0
c0008e7b:	50                   	push   eax
c0008e7c:	e8 87 77 ff ff       	call   c0000608 <memset>
c0008e81:	83 c4 10             	add    esp,0x10
c0008e84:	83 c4 0c             	add    esp,0xc
c0008e87:	c3                   	ret    

c0008e88 <linear_get_name>:
c0008e88:	31 c0                	xor    eax,eax
c0008e8a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008e8f:	75 05                	jne    c0008e96 <linear_get_name+0xe>
c0008e91:	b8 b4 09 02 c0       	mov    eax,0xc00209b4
c0008e96:	c3                   	ret    

c0008e97 <linear_get_description>:
c0008e97:	31 c0                	xor    eax,eax
c0008e99:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008e9e:	75 05                	jne    c0008ea5 <linear_get_description+0xe>
c0008ea0:	b8 c8 09 02 c0       	mov    eax,0xc00209c8
c0008ea5:	c3                   	ret    

c0008ea6 <linear_set_converter>:
c0008ea6:	53                   	push   ebx
c0008ea7:	b8 0a 00 00 00       	mov    eax,0xa
c0008eac:	83 ec 08             	sub    esp,0x8
c0008eaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008eb3:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008eb8:	75 6e                	jne    c0008f28 <linear_set_converter+0x82>
c0008eba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008ebd:	85 c0                	test   eax,eax
c0008ebf:	74 13                	je     c0008ed4 <linear_set_converter+0x2e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	50                   	push   eax
c0008ec5:	e8 6d 30 00 00       	call   c000bf37 <free>
c0008eca:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	50                   	push   eax
c0008ed5:	50                   	push   eax
c0008ed6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ed9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008ee0:	50                   	push   eax
c0008ee1:	6a 01                	push   0x1
c0008ee3:	e8 6f 30 00 00       	call   c000bf57 <calloc>
c0008ee8:	89 c2                	mov    edx,eax
c0008eea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	b8 01 00 00 00       	mov    eax,0x1
c0008ef5:	85 d2                	test   edx,edx
c0008ef7:	74 2f                	je     c0008f28 <linear_set_converter+0x82>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008eff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f02:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f08:	c7 43 24 cf 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bcf
c0008f0f:	c7 43 20 cf 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bcf
c0008f16:	c7 43 28 56 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e56
c0008f1d:	53                   	push   ebx
c0008f1e:	e8 33 ff ff ff       	call   c0008e56 <linear_reset>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	31 c0                	xor    eax,eax
c0008f28:	83 c4 08             	add    esp,0x8
c0008f2b:	5b                   	pop    ebx
c0008f2c:	c3                   	ret    

c0008f2d <is_bad_src_ratio>:
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f34:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f3f:	dd 04 24             	fld    QWORD PTR [esp]
c0008f42:	dd 05 80 09 02 c0    	fld    QWORD PTR ds:0xc0020980
c0008f48:	de d9                	fcompp 
c0008f4a:	df e0                	fnstsw ax
c0008f4c:	f6 c4 45             	test   ah,0x45
c0008f4f:	74 10                	je     c0008f61 <is_bad_src_ratio+0x34>
c0008f51:	dd 04 24             	fld    QWORD PTR [esp]
c0008f54:	dc 1d 88 09 02 c0    	fcomp  QWORD PTR ds:0xc0020988
c0008f5a:	df e0                	fnstsw ax
c0008f5c:	f6 c4 45             	test   ah,0x45
c0008f5f:	75 07                	jne    c0008f68 <is_bad_src_ratio+0x3b>
c0008f61:	b8 01 00 00 00       	mov    eax,0x1
c0008f66:	eb 05                	jmp    c0008f6d <is_bad_src_ratio+0x40>
c0008f68:	b8 00 00 00 00       	mov    eax,0x0
c0008f6d:	83 c4 0c             	add    esp,0xc
c0008f70:	c3                   	ret    

c0008f71 <int_to_fp>:
c0008f71:	c1 e0 0c             	shl    eax,0xc
c0008f74:	c3                   	ret    

c0008f75 <fp_to_int>:
c0008f75:	c1 f8 0c             	sar    eax,0xc
c0008f78:	c3                   	ret    

c0008f79 <fp_fraction_part>:
c0008f79:	25 ff 0f 00 00       	and    eax,0xfff
c0008f7e:	c3                   	ret    

c0008f7f <fp_to_double>:
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	e8 f2 ff ff ff       	call   c0008f79 <fp_fraction_part>
c0008f87:	d9 05 88 0b 02 c0    	fld    DWORD PTR ds:0xc0020b88
c0008f8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f91:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008f95:	83 c4 0c             	add    esp,0xc
c0008f98:	c3                   	ret    

c0008f99 <calc_output_single>:
c0008f99:	55                   	push   ebp
c0008f9a:	57                   	push   edi
c0008f9b:	89 c7                	mov    edi,eax
c0008f9d:	56                   	push   esi
c0008f9e:	53                   	push   ebx
c0008f9f:	89 d3                	mov    ebx,edx
c0008fa1:	83 ec 24             	sub    esp,0x24
c0008fa4:	89 de                	mov    esi,ebx
c0008fa6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fa9:	e8 c3 ff ff ff       	call   c0008f71 <int_to_fp>
c0008fae:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fb5:	29 c8                	sub    eax,ecx
c0008fb7:	99                   	cdq    
c0008fb8:	f7 fb                	idiv   ebx
c0008fba:	0f af f0             	imul   esi,eax
c0008fbd:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008fc0:	01 ce                	add    esi,ecx
c0008fc2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008fc6:	29 c2                	sub    edx,eax
c0008fc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fd7:	8d 14 97             	lea    edx,[edi+edx*4]
c0008fda:	89 f0                	mov    eax,esi
c0008fdc:	e8 9e ff ff ff       	call   c0008f7f <fp_to_double>
c0008fe1:	89 f0                	mov    eax,esi
c0008fe3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008fe7:	e8 89 ff ff ff       	call   c0008f75 <fp_to_int>
c0008fec:	83 c2 04             	add    edx,0x4
c0008fef:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ff3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0008ff7:	d8 e1                	fsub   st,st(1)
c0008ff9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ffd:	de c9                	fmulp  st(1),st
c0008fff:	de c1                	faddp  st(1),st
c0009001:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009007:	29 de                	sub    esi,ebx
c0009009:	dc 04 24             	fadd   QWORD PTR [esp]
c000900c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900f:	79 c9                	jns    c0008fda <calc_output_single+0x41>
c0009011:	89 d8                	mov    eax,ebx
c0009013:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009017:	29 c8                	sub    eax,ecx
c0009019:	89 c1                	mov    ecx,eax
c000901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901f:	29 c8                	sub    eax,ecx
c0009021:	99                   	cdq    
c0009022:	f7 fb                	idiv   ebx
c0009024:	89 da                	mov    edx,ebx
c0009026:	0f af d0             	imul   edx,eax
c0009029:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000902d:	01 d1                	add    ecx,edx
c000902f:	d9 ee                	fldz   
c0009031:	8d 14 87             	lea    edx,[edi+eax*4]
c0009034:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009038:	89 c8                	mov    eax,ecx
c000903a:	e8 40 ff ff ff       	call   c0008f7f <fp_to_double>
c000903f:	89 c8                	mov    eax,ecx
c0009041:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009045:	e8 2b ff ff ff       	call   c0008f75 <fp_to_int>
c000904a:	29 d9                	sub    ecx,ebx
c000904c:	83 ea 04             	sub    edx,0x4
c000904f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009053:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009057:	d8 e1                	fsub   st,st(1)
c0009059:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000905d:	de c9                	fmulp  st(1),st
c000905f:	de c1                	faddp  st(1),st
c0009061:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009067:	85 c9                	test   ecx,ecx
c0009069:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000906d:	de c1                	faddp  st(1),st
c000906f:	7f c3                	jg     c0009034 <calc_output_single+0x9b>
c0009071:	dd 04 24             	fld    QWORD PTR [esp]
c0009074:	de c1                	faddp  st(1),st
c0009076:	83 c4 24             	add    esp,0x24
c0009079:	5b                   	pop    ebx
c000907a:	5e                   	pop    esi
c000907b:	5f                   	pop    edi
c000907c:	5d                   	pop    ebp
c000907d:	c3                   	ret    

c000907e <calc_output_stereo>:
c000907e:	55                   	push   ebp
c000907f:	57                   	push   edi
c0009080:	89 c7                	mov    edi,eax
c0009082:	56                   	push   esi
c0009083:	53                   	push   ebx
c0009084:	89 d3                	mov    ebx,edx
c0009086:	83 ec 44             	sub    esp,0x44
c0009089:	89 de                	mov    esi,ebx
c000908b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000908e:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009092:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009096:	e8 d6 fe ff ff       	call   c0008f71 <int_to_fp>
c000909b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000909e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090a2:	29 c8                	sub    eax,ecx
c00090a4:	99                   	cdq    
c00090a5:	f7 fb                	idiv   ebx
c00090a7:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00090b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090b6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090b9:	0f af f0             	imul   esi,eax
c00090bc:	0f af c2             	imul   eax,edx
c00090bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00090c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090c7:	d9 ee                	fldz   
c00090c9:	29 c2                	sub    edx,eax
c00090cb:	01 ce                	add    esi,ecx
c00090cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090d0:	8d 14 97             	lea    edx,[edi+edx*4]
c00090d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00090db:	89 f0                	mov    eax,esi
c00090dd:	e8 9d fe ff ff       	call   c0008f7f <fp_to_double>
c00090e2:	89 f0                	mov    eax,esi
c00090e4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090e8:	e8 88 fe ff ff       	call   c0008f75 <fp_to_int>
c00090ed:	83 c2 08             	add    edx,0x8
c00090f0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090f4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090f8:	d8 e1                	fsub   st,st(1)
c00090fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00090fe:	de c9                	fmulp  st(1),st
c0009100:	de c1                	faddp  st(1),st
c0009102:	d9 c0                	fld    st(0)
c0009104:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000910a:	dc 04 24             	fadd   QWORD PTR [esp]
c000910d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009110:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009116:	29 de                	sub    esi,ebx
c0009118:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000911c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009120:	79 b9                	jns    c00090db <calc_output_stereo+0x5d>
c0009122:	89 d8                	mov    eax,ebx
c0009124:	29 c8                	sub    eax,ecx
c0009126:	89 c1                	mov    ecx,eax
c0009128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000912c:	29 c8                	sub    eax,ecx
c000912e:	99                   	cdq    
c000912f:	f7 fb                	idiv   ebx
c0009131:	89 da                	mov    edx,ebx
c0009133:	0f af d0             	imul   edx,eax
c0009136:	40                   	inc    eax
c0009137:	01 d1                	add    ecx,edx
c0009139:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c000913e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0009142:	d9 ee                	fldz   
c0009144:	d9 ee                	fldz   
c0009146:	8d 14 87             	lea    edx,[edi+eax*4]
c0009149:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000914d:	89 c8                	mov    eax,ecx
c000914f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009153:	e8 27 fe ff ff       	call   c0008f7f <fp_to_double>
c0009158:	89 c8                	mov    eax,ecx
c000915a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000915e:	e8 12 fe ff ff       	call   c0008f75 <fp_to_int>
c0009163:	29 d9                	sub    ecx,ebx
c0009165:	83 ea 08             	sub    edx,0x8
c0009168:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000916c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009170:	d8 e1                	fsub   st,st(1)
c0009172:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009176:	de c9                	fmulp  st(1),st
c0009178:	de c1                	faddp  st(1),st
c000917a:	d9 c0                	fld    st(0)
c000917c:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009182:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009186:	de c1                	faddp  st(1),st
c0009188:	d9 c9                	fxch   st(1)
c000918a:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009190:	85 c9                	test   ecx,ecx
c0009192:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009196:	de c1                	faddp  st(1),st
c0009198:	7f af                	jg     c0009149 <calc_output_stereo+0xcb>
c000919a:	dd 04 24             	fld    QWORD PTR [esp]
c000919d:	de c2                	faddp  st(2),st
c000919f:	d9 c9                	fxch   st(1)
c00091a1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091a5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00091a9:	d9 18                	fstp   DWORD PTR [eax]
c00091ab:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00091af:	de c1                	faddp  st(1),st
c00091b1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00091b5:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091b8:	83 c4 44             	add    esp,0x44
c00091bb:	5b                   	pop    ebx
c00091bc:	5e                   	pop    esi
c00091bd:	5f                   	pop    edi
c00091be:	5d                   	pop    ebp
c00091bf:	c3                   	ret    

c00091c0 <calc_output_quad>:
c00091c0:	55                   	push   ebp
c00091c1:	57                   	push   edi
c00091c2:	56                   	push   esi
c00091c3:	89 c6                	mov    esi,eax
c00091c5:	53                   	push   ebx
c00091c6:	89 d3                	mov    ebx,edx
c00091c8:	83 ec 5c             	sub    esp,0x5c
c00091cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ce:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091d2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091d9:	e8 93 fd ff ff       	call   c0008f71 <int_to_fp>
c00091de:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00091e5:	29 c8                	sub    eax,ecx
c00091e7:	99                   	cdq    
c00091e8:	f7 fb                	idiv   ebx
c00091ea:	89 da                	mov    edx,ebx
c00091ec:	0f af d0             	imul   edx,eax
c00091ef:	01 ca                	add    edx,ecx
c00091f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091f5:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00091f8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00091fc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00091ff:	0f af c2             	imul   eax,edx
c0009202:	d9 ee                	fldz   
c0009204:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009208:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000920c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009210:	29 c2                	sub    edx,eax
c0009212:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0009216:	8d 14 96             	lea    edx,[esi+edx*4]
c0009219:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000921d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009225:	e8 55 fd ff ff       	call   c0008f7f <fp_to_double>
c000922a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922e:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009232:	e8 3e fd ff ff       	call   c0008f75 <fp_to_int>
c0009237:	83 c2 10             	add    edx,0x10
c000923a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000923e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009242:	d8 e1                	fsub   st,st(1)
c0009244:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009248:	de c9                	fmulp  st(1),st
c000924a:	de c1                	faddp  st(1),st
c000924c:	d9 c0                	fld    st(0)
c000924e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009254:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009258:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000925c:	d9 c0                	fld    st(0)
c000925e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009264:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009268:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000926c:	d9 c0                	fld    st(0)
c000926e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009274:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009278:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000927c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009282:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009286:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000928a:	de c1                	faddp  st(1),st
c000928c:	79 8f                	jns    c000921d <calc_output_quad+0x5d>
c000928e:	89 d8                	mov    eax,ebx
c0009290:	29 c8                	sub    eax,ecx
c0009292:	89 c1                	mov    ecx,eax
c0009294:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009298:	29 c8                	sub    eax,ecx
c000929a:	99                   	cdq    
c000929b:	f7 fb                	idiv   ebx
c000929d:	89 da                	mov    edx,ebx
c000929f:	0f af d0             	imul   edx,eax
c00092a2:	40                   	inc    eax
c00092a3:	01 d1                	add    ecx,edx
c00092a5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092aa:	d9 ee                	fldz   
c00092ac:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092b0:	d9 ee                	fldz   
c00092b2:	d9 ee                	fldz   
c00092b4:	d9 ee                	fldz   
c00092b6:	8d 14 86             	lea    edx,[esi+eax*4]
c00092b9:	eb 0a                	jmp    c00092c5 <calc_output_quad+0x105>
c00092bb:	d9 cc                	fxch   st(4)
c00092bd:	d9 ca                	fxch   st(2)
c00092bf:	d9 c9                	fxch   st(1)
c00092c1:	d9 cb                	fxch   st(3)
c00092c3:	d9 c9                	fxch   st(1)
c00092c5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092c9:	d9 c9                	fxch   st(1)
c00092cb:	89 c8                	mov    eax,ecx
c00092cd:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092d1:	d9 c9                	fxch   st(1)
c00092d3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092d7:	d9 c9                	fxch   st(1)
c00092d9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092dd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092e1:	e8 99 fc ff ff       	call   c0008f7f <fp_to_double>
c00092e6:	89 c8                	mov    eax,ecx
c00092e8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00092ec:	e8 84 fc ff ff       	call   c0008f75 <fp_to_int>
c00092f1:	29 d9                	sub    ecx,ebx
c00092f3:	83 ea 10             	sub    edx,0x10
c00092f6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092fa:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092fe:	d8 e1                	fsub   st,st(1)
c0009300:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009304:	de c9                	fmulp  st(1),st
c0009306:	de c1                	faddp  st(1),st
c0009308:	d9 c0                	fld    st(0)
c000930a:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c0009310:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009314:	de c1                	faddp  st(1),st
c0009316:	d9 c1                	fld    st(1)
c0009318:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000931e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009322:	de c1                	faddp  st(1),st
c0009324:	d9 c2                	fld    st(2)
c0009326:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c000932c:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009330:	de c1                	faddp  st(1),st
c0009332:	d9 cb                	fxch   st(3)
c0009334:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c000933a:	85 c9                	test   ecx,ecx
c000933c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009340:	de c1                	faddp  st(1),st
c0009342:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009346:	0f 8f 6f ff ff ff    	jg     c00092bb <calc_output_quad+0xfb>
c000934c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009350:	de c4                	faddp  st(4),st
c0009352:	d9 cb                	fxch   st(3)
c0009354:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009357:	d9 1f                	fstp   DWORD PTR [edi]
c0009359:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000935d:	de c2                	faddp  st(2),st
c000935f:	d9 c9                	fxch   st(1)
c0009361:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009364:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009367:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000936b:	de c3                	faddp  st(3),st
c000936d:	d9 ca                	fxch   st(2)
c000936f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009372:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009375:	de c1                	faddp  st(1),st
c0009377:	dc 0c 24             	fmul   QWORD PTR [esp]
c000937a:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000937d:	83 c4 5c             	add    esp,0x5c
c0009380:	5b                   	pop    ebx
c0009381:	5e                   	pop    esi
c0009382:	5f                   	pop    edi
c0009383:	5d                   	pop    ebp
c0009384:	c3                   	ret    

c0009385 <calc_output_hex>:
c0009385:	55                   	push   ebp
c0009386:	57                   	push   edi
c0009387:	89 c7                	mov    edi,eax
c0009389:	56                   	push   esi
c000938a:	53                   	push   ebx
c000938b:	89 d3                	mov    ebx,edx
c000938d:	83 ec 7c             	sub    esp,0x7c
c0009390:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009393:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000939a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093a4:	e8 c8 fb ff ff       	call   c0008f71 <int_to_fp>
c00093a9:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00093b0:	29 c8                	sub    eax,ecx
c00093b2:	99                   	cdq    
c00093b3:	f7 fb                	idiv   ebx
c00093b5:	89 da                	mov    edx,ebx
c00093b7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00093bf:	0f af d0             	imul   edx,eax
c00093c2:	01 ca                	add    edx,ecx
c00093c4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00093cc:	d9 ee                	fldz   
c00093ce:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093d2:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093d5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00093d9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093dc:	0f af c2             	imul   eax,edx
c00093df:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093e3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00093e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00093eb:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093ef:	29 c2                	sub    edx,eax
c00093f1:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093f5:	8d 14 97             	lea    edx,[edi+edx*4]
c00093f8:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093fc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009404:	e8 76 fb ff ff       	call   c0008f7f <fp_to_double>
c0009409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	e8 5f fb ff ff       	call   c0008f75 <fp_to_int>
c0009416:	83 c2 18             	add    edx,0x18
c0009419:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000941d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009421:	d8 e1                	fsub   st,st(1)
c0009423:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009427:	de c9                	fmulp  st(1),st
c0009429:	de c1                	faddp  st(1),st
c000942b:	d9 c0                	fld    st(0)
c000942d:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009433:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009437:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000943b:	d9 c0                	fld    st(0)
c000943d:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009443:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009447:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000944b:	d9 c0                	fld    st(0)
c000944d:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009453:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009457:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000945b:	d9 c0                	fld    st(0)
c000945d:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009463:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009467:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000946b:	d9 c0                	fld    st(0)
c000946d:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009473:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009477:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000947b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009481:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009485:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009489:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000948d:	0f 89 6d ff ff ff    	jns    c0009400 <calc_output_hex+0x7b>
c0009493:	89 d8                	mov    eax,ebx
c0009495:	29 c8                	sub    eax,ecx
c0009497:	89 c1                	mov    ecx,eax
c0009499:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000949d:	29 c8                	sub    eax,ecx
c000949f:	99                   	cdq    
c00094a0:	f7 fb                	idiv   ebx
c00094a2:	89 da                	mov    edx,ebx
c00094a4:	0f af d0             	imul   edx,eax
c00094a7:	40                   	inc    eax
c00094a8:	01 d1                	add    ecx,edx
c00094aa:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c00094af:	d9 ee                	fldz   
c00094b1:	d9 ee                	fldz   
c00094b3:	d9 ee                	fldz   
c00094b5:	d9 ca                	fxch   st(2)
c00094b7:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c00094bb:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094bf:	d9 ee                	fldz   
c00094c1:	8d 14 87             	lea    edx,[edi+eax*4]
c00094c4:	d9 ee                	fldz   
c00094c6:	d9 ca                	fxch   st(2)
c00094c8:	eb 0a                	jmp    c00094d4 <calc_output_hex+0x14f>
c00094ca:	d9 c9                	fxch   st(1)
c00094cc:	d9 cc                	fxch   st(4)
c00094ce:	d9 cb                	fxch   st(3)
c00094d0:	d9 ca                	fxch   st(2)
c00094d2:	d9 c9                	fxch   st(1)
c00094d4:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094d8:	89 c8                	mov    eax,ecx
c00094da:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094de:	d9 ca                	fxch   st(2)
c00094e0:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094e4:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094e8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094ec:	e8 8e fa ff ff       	call   c0008f7f <fp_to_double>
c00094f1:	89 c8                	mov    eax,ecx
c00094f3:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00094f7:	e8 79 fa ff ff       	call   c0008f75 <fp_to_int>
c00094fc:	29 d9                	sub    ecx,ebx
c00094fe:	83 ea 18             	sub    edx,0x18
c0009501:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009505:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009509:	d8 e1                	fsub   st,st(1)
c000950b:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000950f:	de c9                	fmulp  st(1),st
c0009511:	de c1                	faddp  st(1),st
c0009513:	d9 c0                	fld    st(0)
c0009515:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c000951b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000951f:	de c1                	faddp  st(1),st
c0009521:	d9 c1                	fld    st(1)
c0009523:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009529:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000952d:	de c1                	faddp  st(1),st
c000952f:	d9 c2                	fld    st(2)
c0009531:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009537:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000953b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000953f:	d9 c2                	fld    st(2)
c0009541:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009547:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000954b:	de c1                	faddp  st(1),st
c000954d:	d9 c3                	fld    st(3)
c000954f:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009555:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009559:	de c1                	faddp  st(1),st
c000955b:	d9 cc                	fxch   st(4)
c000955d:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009563:	85 c9                	test   ecx,ecx
c0009565:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009569:	de c1                	faddp  st(1),st
c000956b:	0f 8f 59 ff ff ff    	jg     c00094ca <calc_output_hex+0x145>
c0009571:	d9 cb                	fxch   st(3)
c0009573:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009577:	dc 0c 24             	fmul   QWORD PTR [esp]
c000957a:	d9 1e                	fstp   DWORD PTR [esi]
c000957c:	d9 c9                	fxch   st(1)
c000957e:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009582:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009585:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009588:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000958c:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009590:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009593:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009596:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000959a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000959d:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095a0:	d9 c9                	fxch   st(1)
c00095a2:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095a6:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a9:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095ac:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095b0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b3:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095b6:	83 c4 7c             	add    esp,0x7c
c00095b9:	5b                   	pop    ebx
c00095ba:	5e                   	pop    esi
c00095bb:	5f                   	pop    edi
c00095bc:	5d                   	pop    ebp
c00095bd:	c3                   	ret    

c00095be <sinc_reset>:
c00095be:	56                   	push   esi
c00095bf:	53                   	push   ebx
c00095c0:	51                   	push   ecx
c00095c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095c5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095c8:	85 db                	test   ebx,ebx
c00095ca:	74 51                	je     c000961d <sinc_reset+0x5f>
c00095cc:	d9 ee                	fldz   
c00095ce:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095d5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095dc:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00095df:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095e6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095ec:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00095ef:	52                   	push   edx
c00095f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00095f3:	c1 e0 02             	shl    eax,0x2
c00095f6:	50                   	push   eax
c00095f7:	6a 00                	push   0x0
c00095f9:	56                   	push   esi
c00095fa:	e8 09 70 ff ff       	call   c0000608 <memset>
c00095ff:	83 c4 0c             	add    esp,0xc
c0009602:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009605:	c1 e0 02             	shl    eax,0x2
c0009608:	50                   	push   eax
c0009609:	68 aa 00 00 00       	push   0xaa
c000960e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009611:	8d 04 86             	lea    eax,[esi+eax*4]
c0009614:	50                   	push   eax
c0009615:	e8 ee 6f ff ff       	call   c0000608 <memset>
c000961a:	83 c4 10             	add    esp,0x10
c000961d:	58                   	pop    eax
c000961e:	5b                   	pop    ebx
c000961f:	5e                   	pop    esi
c0009620:	c3                   	ret    

c0009621 <calc_output_multi>:
c0009621:	55                   	push   ebp
c0009622:	57                   	push   edi
c0009623:	8d 78 44             	lea    edi,[eax+0x44]
c0009626:	56                   	push   esi
c0009627:	89 c6                	mov    esi,eax
c0009629:	53                   	push   ebx
c000962a:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009630:	83 ec 4c             	sub    esp,0x4c
c0009633:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000963b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000963e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009642:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009646:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000964a:	e8 22 f9 ff ff       	call   c0008f71 <int_to_fp>
c000964f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009653:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009657:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000965b:	99                   	cdq    
c000965c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009664:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009667:	0f af d0             	imul   edx,eax
c000966a:	0f af c3             	imul   eax,ebx
c000966d:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009671:	29 c5                	sub    ebp,eax
c0009673:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000967a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000967e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009682:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009686:	52                   	push   edx
c0009687:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968b:	6a 00                	push   0x0
c000968d:	57                   	push   edi
c000968e:	e8 75 6f ff ff       	call   c0000608 <memset>
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000969a:	e8 e0 f8 ff ff       	call   c0008f7f <fp_to_double>
c000969f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096a3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096a7:	e8 c9 f8 ff ff       	call   c0008f75 <fp_to_int>
c00096ac:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096af:	89 d9                	mov    ecx,ebx
c00096b1:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096b4:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096b8:	d8 e1                	fsub   st,st(1)
c00096ba:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096be:	de c9                	fmulp  st(1),st
c00096c0:	de c1                	faddp  st(1),st
c00096c2:	89 c8                	mov    eax,ecx
c00096c4:	bd 08 00 00 00       	mov    ebp,0x8
c00096c9:	99                   	cdq    
c00096ca:	f7 fd                	idiv   ebp
c00096cc:	4a                   	dec    edx
c00096cd:	83 fa 06             	cmp    edx,0x6
c00096d0:	77 07                	ja     c00096d9 <calc_output_multi+0xb8>
c00096d2:	ff 24 95 00 0a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf600]
c00096d9:	49                   	dec    ecx
c00096da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096de:	d9 c0                	fld    st(0)
c00096e0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096e7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00096ea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096ee:	dc 00                	fadd   QWORD PTR [eax]
c00096f0:	dd 18                	fstp   QWORD PTR [eax]
c00096f2:	49                   	dec    ecx
c00096f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096f7:	d9 c0                	fld    st(0)
c00096f9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009700:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009703:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009707:	dc 00                	fadd   QWORD PTR [eax]
c0009709:	dd 18                	fstp   QWORD PTR [eax]
c000970b:	49                   	dec    ecx
c000970c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009710:	d9 c0                	fld    st(0)
c0009712:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009719:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009720:	dc 00                	fadd   QWORD PTR [eax]
c0009722:	dd 18                	fstp   QWORD PTR [eax]
c0009724:	49                   	dec    ecx
c0009725:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009729:	d9 c0                	fld    st(0)
c000972b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009732:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009735:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009739:	dc 00                	fadd   QWORD PTR [eax]
c000973b:	dd 18                	fstp   QWORD PTR [eax]
c000973d:	49                   	dec    ecx
c000973e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009742:	d9 c0                	fld    st(0)
c0009744:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000974b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009752:	dc 00                	fadd   QWORD PTR [eax]
c0009754:	dd 18                	fstp   QWORD PTR [eax]
c0009756:	49                   	dec    ecx
c0009757:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000975b:	d9 c0                	fld    st(0)
c000975d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009764:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009767:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000976b:	dc 00                	fadd   QWORD PTR [eax]
c000976d:	dd 18                	fstp   QWORD PTR [eax]
c000976f:	49                   	dec    ecx
c0009770:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009774:	d9 c0                	fld    st(0)
c0009776:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000977d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009780:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009784:	dc 00                	fadd   QWORD PTR [eax]
c0009786:	dd 18                	fstp   QWORD PTR [eax]
c0009788:	49                   	dec    ecx
c0009789:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000978d:	d9 c0                	fld    st(0)
c000978f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009796:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009799:	85 c9                	test   ecx,ecx
c000979b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000979f:	dc 00                	fadd   QWORD PTR [eax]
c00097a1:	dd 18                	fstp   QWORD PTR [eax]
c00097a3:	0f 8f 19 ff ff ff    	jg     c00096c2 <calc_output_multi+0xa1>
c00097a9:	dd d8                	fstp   st(0)
c00097ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097af:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00097b3:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00097b7:	0f 89 d9 fe ff ff    	jns    c0009696 <calc_output_multi+0x75>
c00097bd:	89 d1                	mov    ecx,edx
c00097bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097c3:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c00097c7:	29 c8                	sub    eax,ecx
c00097c9:	99                   	cdq    
c00097ca:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c00097ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097d2:	0f af d0             	imul   edx,eax
c00097d5:	40                   	inc    eax
c00097d6:	01 d1                	add    ecx,edx
c00097d8:	0f af c3             	imul   eax,ebx
c00097db:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00097de:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00097e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00097e6:	50                   	push   eax
c00097e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097eb:	6a 00                	push   0x0
c00097ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00097f1:	e8 12 6e ff ff       	call   c0000608 <memset>
c00097f6:	83 c4 10             	add    esp,0x10
c00097f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00097fd:	e8 7d f7 ff ff       	call   c0008f7f <fp_to_double>
c0009802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009806:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000980a:	e8 66 f7 ff ff       	call   c0008f75 <fp_to_int>
c000980f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009812:	89 d9                	mov    ecx,ebx
c0009814:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009817:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000981b:	d8 e1                	fsub   st,st(1)
c000981d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009821:	de c9                	fmulp  st(1),st
c0009823:	de c1                	faddp  st(1),st
c0009825:	89 c8                	mov    eax,ecx
c0009827:	bd 08 00 00 00       	mov    ebp,0x8
c000982c:	99                   	cdq    
c000982d:	f7 fd                	idiv   ebp
c000982f:	4a                   	dec    edx
c0009830:	83 fa 06             	cmp    edx,0x6
c0009833:	77 07                	ja     c000983c <calc_output_multi+0x21b>
c0009835:	ff 24 95 1c 0a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf5e4]
c000983c:	49                   	dec    ecx
c000983d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009845:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984c:	d9 c0                	fld    st(0)
c000984e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009852:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009855:	dc 00                	fadd   QWORD PTR [eax]
c0009857:	dd 18                	fstp   QWORD PTR [eax]
c0009859:	49                   	dec    ecx
c000985a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000985e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009862:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009869:	d9 c0                	fld    st(0)
c000986b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000986f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009872:	dc 00                	fadd   QWORD PTR [eax]
c0009874:	dd 18                	fstp   QWORD PTR [eax]
c0009876:	49                   	dec    ecx
c0009877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000987b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000987f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009886:	d9 c0                	fld    st(0)
c0009888:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000988c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000988f:	dc 00                	fadd   QWORD PTR [eax]
c0009891:	dd 18                	fstp   QWORD PTR [eax]
c0009893:	49                   	dec    ecx
c0009894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000989c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098a3:	d9 c0                	fld    st(0)
c00098a5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ac:	dc 00                	fadd   QWORD PTR [eax]
c00098ae:	dd 18                	fstp   QWORD PTR [eax]
c00098b0:	49                   	dec    ecx
c00098b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098c0:	d9 c0                	fld    st(0)
c00098c2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c6:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098c9:	dc 00                	fadd   QWORD PTR [eax]
c00098cb:	dd 18                	fstp   QWORD PTR [eax]
c00098cd:	49                   	dec    ecx
c00098ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098dd:	d9 c0                	fld    st(0)
c00098df:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098e3:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098e6:	dc 00                	fadd   QWORD PTR [eax]
c00098e8:	dd 18                	fstp   QWORD PTR [eax]
c00098ea:	49                   	dec    ecx
c00098eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fa:	d9 c0                	fld    st(0)
c00098fc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009900:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009903:	dc 00                	fadd   QWORD PTR [eax]
c0009905:	dd 18                	fstp   QWORD PTR [eax]
c0009907:	49                   	dec    ecx
c0009908:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000990c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009910:	85 c9                	test   ecx,ecx
c0009912:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009919:	d9 c0                	fld    st(0)
c000991b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000991f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009922:	dc 00                	fadd   QWORD PTR [eax]
c0009924:	dd 18                	fstp   QWORD PTR [eax]
c0009926:	0f 8f f9 fe ff ff    	jg     c0009825 <calc_output_multi+0x204>
c000992c:	dd d8                	fstp   st(0)
c000992e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009932:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c0009936:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c000993a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000993f:	0f 8f b4 fe ff ff    	jg     c00097f9 <calc_output_multi+0x1d8>
c0009945:	b9 08 00 00 00       	mov    ecx,0x8
c000994a:	89 d8                	mov    eax,ebx
c000994c:	99                   	cdq    
c000994d:	f7 f9                	idiv   ecx
c000994f:	4a                   	dec    edx
c0009950:	83 fa 06             	cmp    edx,0x6
c0009953:	77 07                	ja     c000995c <calc_output_multi+0x33b>
c0009955:	ff 24 95 38 0a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf5c8]
c000995c:	4b                   	dec    ebx
c000995d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009961:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009964:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009967:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000996b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c000996f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009972:	4b                   	dec    ebx
c0009973:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009977:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c000997a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c000997d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009981:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009985:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009988:	4b                   	dec    ebx
c0009989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000998d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009990:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009993:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009997:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c000999b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c000999e:	4b                   	dec    ebx
c000999f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a3:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a6:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099a9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ad:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099b1:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b4:	4b                   	dec    ebx
c00099b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b9:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bc:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099bf:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c3:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099c7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ca:	4b                   	dec    ebx
c00099cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099dd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099e0:	4b                   	dec    ebx
c00099e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e5:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e8:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099eb:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ef:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099f3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f6:	4b                   	dec    ebx
c00099f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099fb:	85 db                	test   ebx,ebx
c00099fd:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a00:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a03:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a07:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a0b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a0e:	0f 8f 36 ff ff ff    	jg     c000994a <calc_output_multi+0x329>
c0009a14:	83 c4 4c             	add    esp,0x4c
c0009a17:	5b                   	pop    ebx
c0009a18:	5e                   	pop    esi
c0009a19:	5f                   	pop    edi
c0009a1a:	5d                   	pop    ebp
c0009a1b:	c3                   	ret    

c0009a1c <double_to_fp>:
c0009a1c:	d9 05 8c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b8c
c0009a22:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a26:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a2a:	e9 31 58 01 00       	jmp    c001f260 <lrint>

c0009a2f <fmod_one>:
c0009a2f:	83 ec 2c             	sub    esp,0x2c
c0009a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a42:	83 ec 08             	sub    esp,0x8
c0009a45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4d:	e8 0e 58 01 00       	call   c001f260 <lrint>
c0009a52:	83 c4 10             	add    esp,0x10
c0009a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a59:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a5d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a61:	de e1                	fsubrp st(1),st
c0009a63:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a67:	d9 ee                	fldz   
c0009a69:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a6d:	df e0                	fnstsw ax
c0009a6f:	f6 c4 45             	test   ah,0x45
c0009a72:	75 0a                	jne    c0009a7e <fmod_one+0x4f>
c0009a74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a78:	d9 e8                	fld1   
c0009a7a:	de c1                	faddp  st(1),st
c0009a7c:	eb 04                	jmp    c0009a82 <fmod_one+0x53>
c0009a7e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a82:	83 c4 2c             	add    esp,0x2c
c0009a85:	c3                   	ret    

c0009a86 <prepare_data>:
c0009a86:	55                   	push   ebp
c0009a87:	57                   	push   edi
c0009a88:	56                   	push   esi
c0009a89:	53                   	push   ebx
c0009a8a:	83 ec 1c             	sub    esp,0x1c
c0009a8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009a91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009a95:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009a99:	0f 89 57 01 00 00    	jns    c0009bf6 <prepare_data+0x170>
c0009a9f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009aa2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009aa5:	85 d2                	test   edx,edx
c0009aa7:	75 0d                	jne    c0009ab6 <prepare_data+0x30>
c0009aa9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009aac:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009aaf:	29 d0                	sub    eax,edx
c0009ab1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ab4:	eb 44                	jmp    c0009afa <prepare_data+0x74>
c0009ab6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009ab9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009abc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009abf:	39 c1                	cmp    ecx,eax
c0009ac1:	7d 04                	jge    c0009ac7 <prepare_data+0x41>
c0009ac3:	29 d0                	sub    eax,edx
c0009ac5:	eb 2d                	jmp    c0009af4 <prepare_data+0x6e>
c0009ac7:	29 d7                	sub    edi,edx
c0009ac9:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009acf:	01 f7                	add    edi,esi
c0009ad1:	29 f2                	sub    edx,esi
c0009ad3:	51                   	push   ecx
c0009ad4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009adb:	8d 14 90             	lea    edx,[eax+edx*4]
c0009ade:	51                   	push   ecx
c0009adf:	52                   	push   edx
c0009ae0:	50                   	push   eax
c0009ae1:	e8 b4 6a ff ff       	call   c000059a <memmove>
c0009ae6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ae9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009aec:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009aef:	29 f0                	sub    eax,esi
c0009af1:	83 c4 10             	add    esp,0x10
c0009af4:	29 f0                	sub    eax,esi
c0009af6:	79 02                	jns    c0009afa <prepare_data+0x74>
c0009af8:	31 c0                	xor    eax,eax
c0009afa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009afd:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b00:	29 ef                	sub    edi,ebp
c0009b02:	39 c7                	cmp    edi,eax
c0009b04:	7e 02                	jle    c0009b08 <prepare_data+0x82>
c0009b06:	89 c7                	mov    edi,eax
c0009b08:	89 f8                	mov    eax,edi
c0009b0a:	99                   	cdq    
c0009b0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b0e:	29 d7                	sub    edi,edx
c0009b10:	b8 15 00 00 00       	mov    eax,0x15
c0009b15:	0f 88 dd 00 00 00    	js     c0009bf8 <prepare_data+0x172>
c0009b1b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b1e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b21:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b24:	0f 8f ce 00 00 00    	jg     c0009bf8 <prepare_data+0x172>
c0009b2a:	50                   	push   eax
c0009b2b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b32:	50                   	push   eax
c0009b33:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b3f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b42:	50                   	push   eax
c0009b43:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b46:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b4a:	50                   	push   eax
c0009b4b:	e8 82 6a ff ff       	call   c00005d2 <memcpy>
c0009b50:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b53:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	01 fd                	add    ebp,edi
c0009b5b:	01 f9                	add    ecx,edi
c0009b5d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b60:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b63:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	0f 85 86 00 00 00    	jne    c0009bf6 <prepare_data+0x170>
c0009b70:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b73:	89 e8                	mov    eax,ebp
c0009b75:	29 c8                	sub    eax,ecx
c0009b77:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b7a:	39 f8                	cmp    eax,edi
c0009b7c:	7d 78                	jge    c0009bf6 <prepare_data+0x170>
c0009b7e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009b82:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009b86:	74 6e                	je     c0009bf6 <prepare_data+0x170>
c0009b88:	8d 7e 04             	lea    edi,[esi+0x4]
c0009b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009b8f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009b92:	29 ef                	sub    edi,ebp
c0009b94:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009b98:	7c 29                	jl     c0009bc3 <prepare_data+0x13d>
c0009b9a:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009b9d:	29 f1                	sub    ecx,esi
c0009b9f:	55                   	push   ebp
c0009ba0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ba7:	50                   	push   eax
c0009ba8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bab:	50                   	push   eax
c0009bac:	52                   	push   edx
c0009bad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bb1:	e8 e4 69 ff ff       	call   c000059a <memmove>
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bbc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009bc6:	83 c6 05             	add    esi,0x5
c0009bc9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bcc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bcf:	78 07                	js     c0009bd8 <prepare_data+0x152>
c0009bd1:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bd4:	39 cf                	cmp    edi,ecx
c0009bd6:	7e 04                	jle    c0009bdc <prepare_data+0x156>
c0009bd8:	89 ce                	mov    esi,ecx
c0009bda:	29 c6                	sub    esi,eax
c0009bdc:	51                   	push   ecx
c0009bdd:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009be4:	51                   	push   ecx
c0009be5:	8d 04 82             	lea    eax,[edx+eax*4]
c0009be8:	6a 00                	push   0x0
c0009bea:	50                   	push   eax
c0009beb:	e8 18 6a ff ff       	call   c0000608 <memset>
c0009bf0:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	31 c0                	xor    eax,eax
c0009bf8:	83 c4 1c             	add    esp,0x1c
c0009bfb:	5b                   	pop    ebx
c0009bfc:	5e                   	pop    esi
c0009bfd:	5f                   	pop    edi
c0009bfe:	5d                   	pop    ebp
c0009bff:	c3                   	ret    

c0009c00 <sinc_multichan_vari_process>:
c0009c00:	55                   	push   ebp
c0009c01:	b8 05 00 00 00       	mov    eax,0x5
c0009c06:	57                   	push   edi
c0009c07:	56                   	push   esi
c0009c08:	53                   	push   ebx
c0009c09:	83 ec 3c             	sub    esp,0x3c
c0009c0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c10:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c14:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c17:	85 db                	test   ebx,ebx
c0009c19:	0f 84 5b 02 00 00    	je     c0009e7a <sinc_multichan_vari_process+0x27a>
c0009c1f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c25:	0f af d0             	imul   edx,eax
c0009c28:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c2b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c2f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c36:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c39:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c40:	dd 06                	fld    QWORD PTR [esi]
c0009c42:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c46:	55                   	push   ebp
c0009c47:	55                   	push   ebp
c0009c48:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c4b:	e8 dd f2 ff ff       	call   c0008f2d <is_bad_src_ratio>
c0009c50:	89 c2                	mov    edx,eax
c0009c52:	58                   	pop    eax
c0009c53:	59                   	pop    ecx
c0009c54:	b8 16 00 00 00       	mov    eax,0x16
c0009c59:	85 d2                	test   edx,edx
c0009c5b:	0f 85 19 02 00 00    	jne    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009c61:	d9 05 90 0b 02 c0    	fld    DWORD PTR ds:0xc0020b90
c0009c67:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c6a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c6d:	dd 06                	fld    QWORD PTR [esi]
c0009c6f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c72:	d8 d1                	fcom   st(1)
c0009c74:	df e0                	fnstsw ax
c0009c76:	9e                   	sahf   
c0009c77:	76 0f                	jbe    c0009c88 <sinc_multichan_vari_process+0x88>
c0009c79:	dd d8                	fstp   st(0)
c0009c7b:	d9 e8                	fld1   
c0009c7d:	d8 d9                	fcomp  st(1)
c0009c7f:	df e0                	fnstsw ax
c0009c81:	9e                   	sahf   
c0009c82:	77 0f                	ja     c0009c93 <sinc_multichan_vari_process+0x93>
c0009c84:	dd d8                	fstp   st(0)
c0009c86:	eb 11                	jmp    c0009c99 <sinc_multichan_vari_process+0x99>
c0009c88:	dd d9                	fstp   st(1)
c0009c8a:	d9 e8                	fld1   
c0009c8c:	d8 d9                	fcomp  st(1)
c0009c8e:	df e0                	fnstsw ax
c0009c90:	9e                   	sahf   
c0009c91:	76 04                	jbe    c0009c97 <sinc_multichan_vari_process+0x97>
c0009c93:	de f9                	fdivp  st(1),st
c0009c95:	eb 02                	jmp    c0009c99 <sinc_multichan_vari_process+0x99>
c0009c97:	dd d8                	fstp   st(0)
c0009c99:	83 ec 10             	sub    esp,0x10
c0009c9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009c9f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ca2:	e8 b9 55 01 00       	call   c001f260 <lrint>
c0009ca7:	40                   	inc    eax
c0009ca8:	0f af c5             	imul   eax,ebp
c0009cab:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009cae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cb2:	dd 14 24             	fst    QWORD PTR [esp]
c0009cb5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cb9:	e8 71 fd ff ff       	call   c0009a2f <fmod_one>
c0009cbe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009cc1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cc8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ccc:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cd0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cd4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cd7:	e8 84 55 01 00       	call   c001f260 <lrint>
c0009cdc:	d9 e8                	fld1   
c0009cde:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009ce2:	0f af e8             	imul   ebp,eax
c0009ce5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ce9:	01 e8                	add    eax,ebp
c0009ceb:	99                   	cdq    
c0009cec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009cef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009cf2:	dc 05 f8 09 02 c0    	fadd   QWORD PTR ds:0xc00209f8
c0009cf8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cfc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009cff:	83 c4 10             	add    esp,0x10
c0009d02:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d05:	7d 4b                	jge    c0009d52 <sinc_multichan_vari_process+0x152>
c0009d07:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d0a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d0d:	01 c8                	add    eax,ecx
c0009d0f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d12:	99                   	cdq    
c0009d13:	f7 f9                	idiv   ecx
c0009d15:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d19:	7d 09                	jge    c0009d24 <sinc_multichan_vari_process+0x124>
c0009d1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d1e:	85 c0                	test   eax,eax
c0009d20:	79 57                	jns    c0009d79 <sinc_multichan_vari_process+0x179>
c0009d22:	eb 70                	jmp    c0009d94 <sinc_multichan_vari_process+0x194>
c0009d24:	51                   	push   ecx
c0009d25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d29:	57                   	push   edi
c0009d2a:	53                   	push   ebx
c0009d2b:	e8 56 fd ff ff       	call   c0009a86 <prepare_data>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d36:	85 c0                	test   eax,eax
c0009d38:	0f 85 3c 01 00 00    	jne    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009d3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d41:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d44:	01 c8                	add    eax,ecx
c0009d46:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d49:	99                   	cdq    
c0009d4a:	f7 f9                	idiv   ecx
c0009d4c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d50:	7c c9                	jl     c0009d1b <sinc_multichan_vari_process+0x11b>
c0009d52:	dd 04 24             	fld    QWORD PTR [esp]
c0009d55:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d5c:	dd 1e                	fstp   QWORD PTR [esi]
c0009d5e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d61:	99                   	cdq    
c0009d62:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d65:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d6b:	99                   	cdq    
c0009d6c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d6f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d72:	31 c0                	xor    eax,eax
c0009d74:	e9 01 01 00 00       	jmp    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009d79:	dd 04 24             	fld    QWORD PTR [esp]
c0009d7c:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009d7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d83:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009d87:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009d8b:	d9 c9                	fxch   st(1)
c0009d8d:	de d9                	fcompp 
c0009d8f:	df e0                	fnstsw ax
c0009d91:	9e                   	sahf   
c0009d92:	73 be                	jae    c0009d52 <sinc_multichan_vari_process+0x152>
c0009d94:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009d98:	7e 2f                	jle    c0009dc9 <sinc_multichan_vari_process+0x1c9>
c0009d9a:	dd 06                	fld    QWORD PTR [esi]
c0009d9c:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009d9f:	83 ec 10             	sub    esp,0x10
c0009da2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009da5:	e8 96 54 01 00       	call   c001f240 <fabs>
c0009daa:	83 c4 10             	add    esp,0x10
c0009dad:	dc 1d 80 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b80
c0009db3:	df e0                	fnstsw ax
c0009db5:	9e                   	sahf   
c0009db6:	76 11                	jbe    c0009dc9 <sinc_multichan_vari_process+0x1c9>
c0009db8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009dbb:	dc 26                	fsub   QWORD PTR [esi]
c0009dbd:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009dc0:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009dc3:	dc 06                	fadd   QWORD PTR [esi]
c0009dc5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dc9:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009dcc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009dd0:	d9 e8                	fld1   
c0009dd2:	d8 d9                	fcomp  st(1)
c0009dd4:	df e0                	fnstsw ax
c0009dd6:	9e                   	sahf   
c0009dd7:	77 04                	ja     c0009ddd <sinc_multichan_vari_process+0x1dd>
c0009dd9:	dd d8                	fstp   st(0)
c0009ddb:	d9 e8                	fld1   
c0009ddd:	de c9                	fmulp  st(1),st
c0009ddf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009de3:	50                   	push   eax
c0009de4:	50                   	push   eax
c0009de5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009de9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ded:	e8 2a fc ff ff       	call   c0009a1c <double_to_fp>
c0009df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009df6:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009dfa:	89 c5                	mov    ebp,eax
c0009dfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dff:	e8 18 fc ff ff       	call   c0009a1c <double_to_fp>
c0009e04:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e07:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e0a:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e0d:	89 c1                	mov    ecx,eax
c0009e0f:	52                   	push   edx
c0009e10:	89 d8                	mov    eax,ebx
c0009e12:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e16:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e19:	52                   	push   edx
c0009e1a:	52                   	push   edx
c0009e1b:	89 ea                	mov    edx,ebp
c0009e1d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e20:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e23:	e8 f9 f7 ff ff       	call   c0009621 <calc_output_multi>
c0009e28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e2b:	d9 e8                	fld1   
c0009e2d:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e31:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e34:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e38:	83 c4 10             	add    esp,0x10
c0009e3b:	dd 14 24             	fst    QWORD PTR [esp]
c0009e3e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e42:	e8 e8 fb ff ff       	call   c0009a2f <fmod_one>
c0009e47:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e4a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e51:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e55:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e59:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e5d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e60:	e8 fb 53 01 00       	call   c001f260 <lrint>
c0009e65:	0f af e8             	imul   ebp,eax
c0009e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e6c:	01 e8                	add    eax,ebp
c0009e6e:	99                   	cdq    
c0009e6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e75:	e9 82 fe ff ff       	jmp    c0009cfc <sinc_multichan_vari_process+0xfc>
c0009e7a:	83 c4 3c             	add    esp,0x3c
c0009e7d:	5b                   	pop    ebx
c0009e7e:	5e                   	pop    esi
c0009e7f:	5f                   	pop    edi
c0009e80:	5d                   	pop    ebp
c0009e81:	c3                   	ret    

c0009e82 <sinc_hex_vari_process>:
c0009e82:	55                   	push   ebp
c0009e83:	b8 05 00 00 00       	mov    eax,0x5
c0009e88:	57                   	push   edi
c0009e89:	56                   	push   esi
c0009e8a:	53                   	push   ebx
c0009e8b:	83 ec 3c             	sub    esp,0x3c
c0009e8e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009e92:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009e96:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009e99:	85 db                	test   ebx,ebx
c0009e9b:	0f 84 56 02 00 00    	je     c000a0f7 <sinc_hex_vari_process+0x275>
c0009ea1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ea4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ea7:	0f af d0             	imul   edx,eax
c0009eaa:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ead:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009eb1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009eb8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ebb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ec2:	dd 06                	fld    QWORD PTR [esi]
c0009ec4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009ec8:	55                   	push   ebp
c0009ec9:	55                   	push   ebp
c0009eca:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ecd:	e8 5b f0 ff ff       	call   c0008f2d <is_bad_src_ratio>
c0009ed2:	89 c2                	mov    edx,eax
c0009ed4:	58                   	pop    eax
c0009ed5:	59                   	pop    ecx
c0009ed6:	b8 16 00 00 00       	mov    eax,0x16
c0009edb:	85 d2                	test   edx,edx
c0009edd:	0f 85 14 02 00 00    	jne    c000a0f7 <sinc_hex_vari_process+0x275>
c0009ee3:	d9 05 90 0b 02 c0    	fld    DWORD PTR ds:0xc0020b90
c0009ee9:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009eec:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009eef:	dd 06                	fld    QWORD PTR [esi]
c0009ef1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ef4:	d8 d1                	fcom   st(1)
c0009ef6:	df e0                	fnstsw ax
c0009ef8:	9e                   	sahf   
c0009ef9:	76 0f                	jbe    c0009f0a <sinc_hex_vari_process+0x88>
c0009efb:	dd d8                	fstp   st(0)
c0009efd:	d9 e8                	fld1   
c0009eff:	d8 d9                	fcomp  st(1)
c0009f01:	df e0                	fnstsw ax
c0009f03:	9e                   	sahf   
c0009f04:	77 0f                	ja     c0009f15 <sinc_hex_vari_process+0x93>
c0009f06:	dd d8                	fstp   st(0)
c0009f08:	eb 11                	jmp    c0009f1b <sinc_hex_vari_process+0x99>
c0009f0a:	dd d9                	fstp   st(1)
c0009f0c:	d9 e8                	fld1   
c0009f0e:	d8 d9                	fcomp  st(1)
c0009f10:	df e0                	fnstsw ax
c0009f12:	9e                   	sahf   
c0009f13:	76 04                	jbe    c0009f19 <sinc_hex_vari_process+0x97>
c0009f15:	de f9                	fdivp  st(1),st
c0009f17:	eb 02                	jmp    c0009f1b <sinc_hex_vari_process+0x99>
c0009f19:	dd d8                	fstp   st(0)
c0009f1b:	83 ec 10             	sub    esp,0x10
c0009f1e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f24:	e8 37 53 01 00       	call   c001f260 <lrint>
c0009f29:	40                   	inc    eax
c0009f2a:	0f af c5             	imul   eax,ebp
c0009f2d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f34:	dd 14 24             	fst    QWORD PTR [esp]
c0009f37:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f3b:	e8 ef fa ff ff       	call   c0009a2f <fmod_one>
c0009f40:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f4a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f4e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f52:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f59:	e8 02 53 01 00       	call   c001f260 <lrint>
c0009f5e:	d9 e8                	fld1   
c0009f60:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f64:	0f af e8             	imul   ebp,eax
c0009f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6b:	01 e8                	add    eax,ebp
c0009f6d:	99                   	cdq    
c0009f6e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f71:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f74:	dc 05 f8 09 02 c0    	fadd   QWORD PTR ds:0xc00209f8
c0009f7a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009f87:	7d 4b                	jge    c0009fd4 <sinc_hex_vari_process+0x152>
c0009f89:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f8c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f8f:	01 c8                	add    eax,ecx
c0009f91:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009f94:	99                   	cdq    
c0009f95:	f7 f9                	idiv   ecx
c0009f97:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009f9b:	7d 09                	jge    c0009fa6 <sinc_hex_vari_process+0x124>
c0009f9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fa0:	85 c0                	test   eax,eax
c0009fa2:	79 57                	jns    c0009ffb <sinc_hex_vari_process+0x179>
c0009fa4:	eb 70                	jmp    c000a016 <sinc_hex_vari_process+0x194>
c0009fa6:	51                   	push   ecx
c0009fa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fab:	57                   	push   edi
c0009fac:	53                   	push   ebx
c0009fad:	e8 d4 fa ff ff       	call   c0009a86 <prepare_data>
c0009fb2:	83 c4 10             	add    esp,0x10
c0009fb5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fb8:	85 c0                	test   eax,eax
c0009fba:	0f 85 37 01 00 00    	jne    c000a0f7 <sinc_hex_vari_process+0x275>
c0009fc0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fc6:	01 c8                	add    eax,ecx
c0009fc8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fcb:	99                   	cdq    
c0009fcc:	f7 f9                	idiv   ecx
c0009fce:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fd2:	7c c9                	jl     c0009f9d <sinc_hex_vari_process+0x11b>
c0009fd4:	dd 04 24             	fld    QWORD PTR [esp]
c0009fd7:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fda:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009fde:	dd 1e                	fstp   QWORD PTR [esi]
c0009fe0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009fe3:	99                   	cdq    
c0009fe4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009fe7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009fea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009fed:	99                   	cdq    
c0009fee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009ff1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009ff4:	31 c0                	xor    eax,eax
c0009ff6:	e9 fc 00 00 00       	jmp    c000a0f7 <sinc_hex_vari_process+0x275>
c0009ffb:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffe:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a001:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a005:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a009:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a00d:	d9 c9                	fxch   st(1)
c000a00f:	de d9                	fcompp 
c000a011:	df e0                	fnstsw ax
c000a013:	9e                   	sahf   
c000a014:	73 be                	jae    c0009fd4 <sinc_hex_vari_process+0x152>
c000a016:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a01a:	7e 2f                	jle    c000a04b <sinc_hex_vari_process+0x1c9>
c000a01c:	dd 06                	fld    QWORD PTR [esi]
c000a01e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a021:	83 ec 10             	sub    esp,0x10
c000a024:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a027:	e8 14 52 01 00       	call   c001f240 <fabs>
c000a02c:	83 c4 10             	add    esp,0x10
c000a02f:	dc 1d 80 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b80
c000a035:	df e0                	fnstsw ax
c000a037:	9e                   	sahf   
c000a038:	76 11                	jbe    c000a04b <sinc_hex_vari_process+0x1c9>
c000a03a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a03d:	dc 26                	fsub   QWORD PTR [esi]
c000a03f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a042:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a045:	dc 06                	fadd   QWORD PTR [esi]
c000a047:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a04b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a04e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a052:	d9 e8                	fld1   
c000a054:	d8 d9                	fcomp  st(1)
c000a056:	df e0                	fnstsw ax
c000a058:	9e                   	sahf   
c000a059:	77 04                	ja     c000a05f <sinc_hex_vari_process+0x1dd>
c000a05b:	dd d8                	fstp   st(0)
c000a05d:	d9 e8                	fld1   
c000a05f:	de c9                	fmulp  st(1),st
c000a061:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a065:	50                   	push   eax
c000a066:	50                   	push   eax
c000a067:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06f:	e8 a8 f9 ff ff       	call   c0009a1c <double_to_fp>
c000a074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a078:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a07c:	89 c5                	mov    ebp,eax
c000a07e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a081:	e8 96 f9 ff ff       	call   c0009a1c <double_to_fp>
c000a086:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a089:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a08c:	83 c4 0c             	add    esp,0xc
c000a08f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a092:	89 c1                	mov    ecx,eax
c000a094:	52                   	push   edx
c000a095:	89 d8                	mov    eax,ebx
c000a097:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a09b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a09e:	52                   	push   edx
c000a09f:	52                   	push   edx
c000a0a0:	89 ea                	mov    edx,ebp
c000a0a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a5:	e8 db f2 ff ff       	call   c0009385 <calc_output_hex>
c000a0aa:	d9 e8                	fld1   
c000a0ac:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0b0:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0b4:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0b8:	dd 14 24             	fst    QWORD PTR [esp]
c000a0bb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0bf:	e8 6b f9 ff ff       	call   c0009a2f <fmod_one>
c000a0c4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0c7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0ce:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0d6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a0da:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0dd:	e8 7e 51 01 00       	call   c001f260 <lrint>
c000a0e2:	0f af e8             	imul   ebp,eax
c000a0e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0e9:	01 e8                	add    eax,ebp
c000a0eb:	99                   	cdq    
c000a0ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a0ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a0f2:	e9 87 fe ff ff       	jmp    c0009f7e <sinc_hex_vari_process+0xfc>
c000a0f7:	83 c4 3c             	add    esp,0x3c
c000a0fa:	5b                   	pop    ebx
c000a0fb:	5e                   	pop    esi
c000a0fc:	5f                   	pop    edi
c000a0fd:	5d                   	pop    ebp
c000a0fe:	c3                   	ret    

c000a0ff <sinc_quad_vari_process>:
c000a0ff:	55                   	push   ebp
c000a100:	b8 05 00 00 00       	mov    eax,0x5
c000a105:	57                   	push   edi
c000a106:	56                   	push   esi
c000a107:	53                   	push   ebx
c000a108:	83 ec 3c             	sub    esp,0x3c
c000a10b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a10f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a113:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a116:	85 db                	test   ebx,ebx
c000a118:	0f 84 56 02 00 00    	je     c000a374 <sinc_quad_vari_process+0x275>
c000a11e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a121:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a124:	0f af d0             	imul   edx,eax
c000a127:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a12a:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a12e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a135:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a138:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a13f:	dd 06                	fld    QWORD PTR [esi]
c000a141:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a145:	55                   	push   ebp
c000a146:	55                   	push   ebp
c000a147:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a14a:	e8 de ed ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a14f:	89 c2                	mov    edx,eax
c000a151:	58                   	pop    eax
c000a152:	59                   	pop    ecx
c000a153:	b8 16 00 00 00       	mov    eax,0x16
c000a158:	85 d2                	test   edx,edx
c000a15a:	0f 85 14 02 00 00    	jne    c000a374 <sinc_quad_vari_process+0x275>
c000a160:	d9 05 90 0b 02 c0    	fld    DWORD PTR ds:0xc0020b90
c000a166:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a169:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a16c:	dd 06                	fld    QWORD PTR [esi]
c000a16e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a171:	d8 d1                	fcom   st(1)
c000a173:	df e0                	fnstsw ax
c000a175:	9e                   	sahf   
c000a176:	76 0f                	jbe    c000a187 <sinc_quad_vari_process+0x88>
c000a178:	dd d8                	fstp   st(0)
c000a17a:	d9 e8                	fld1   
c000a17c:	d8 d9                	fcomp  st(1)
c000a17e:	df e0                	fnstsw ax
c000a180:	9e                   	sahf   
c000a181:	77 0f                	ja     c000a192 <sinc_quad_vari_process+0x93>
c000a183:	dd d8                	fstp   st(0)
c000a185:	eb 11                	jmp    c000a198 <sinc_quad_vari_process+0x99>
c000a187:	dd d9                	fstp   st(1)
c000a189:	d9 e8                	fld1   
c000a18b:	d8 d9                	fcomp  st(1)
c000a18d:	df e0                	fnstsw ax
c000a18f:	9e                   	sahf   
c000a190:	76 04                	jbe    c000a196 <sinc_quad_vari_process+0x97>
c000a192:	de f9                	fdivp  st(1),st
c000a194:	eb 02                	jmp    c000a198 <sinc_quad_vari_process+0x99>
c000a196:	dd d8                	fstp   st(0)
c000a198:	83 ec 10             	sub    esp,0x10
c000a19b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a19e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a1:	e8 ba 50 01 00       	call   c001f260 <lrint>
c000a1a6:	40                   	inc    eax
c000a1a7:	0f af c5             	imul   eax,ebp
c000a1aa:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1b1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1b8:	e8 72 f8 ff ff       	call   c0009a2f <fmod_one>
c000a1bd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1c7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1cb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1cf:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1d3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1d6:	e8 85 50 01 00       	call   c001f260 <lrint>
c000a1db:	d9 e8                	fld1   
c000a1dd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a1e1:	0f af e8             	imul   ebp,eax
c000a1e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1e8:	01 e8                	add    eax,ebp
c000a1ea:	99                   	cdq    
c000a1eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1f1:	dc 05 f8 09 02 c0    	fadd   QWORD PTR ds:0xc00209f8
c000a1f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a204:	7d 4b                	jge    c000a251 <sinc_quad_vari_process+0x152>
c000a206:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a209:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a20c:	01 c8                	add    eax,ecx
c000a20e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a211:	99                   	cdq    
c000a212:	f7 f9                	idiv   ecx
c000a214:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a218:	7d 09                	jge    c000a223 <sinc_quad_vari_process+0x124>
c000a21a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a21d:	85 c0                	test   eax,eax
c000a21f:	79 57                	jns    c000a278 <sinc_quad_vari_process+0x179>
c000a221:	eb 70                	jmp    c000a293 <sinc_quad_vari_process+0x194>
c000a223:	51                   	push   ecx
c000a224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a228:	57                   	push   edi
c000a229:	53                   	push   ebx
c000a22a:	e8 57 f8 ff ff       	call   c0009a86 <prepare_data>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a235:	85 c0                	test   eax,eax
c000a237:	0f 85 37 01 00 00    	jne    c000a374 <sinc_quad_vari_process+0x275>
c000a23d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a240:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a243:	01 c8                	add    eax,ecx
c000a245:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a248:	99                   	cdq    
c000a249:	f7 f9                	idiv   ecx
c000a24b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a24f:	7c c9                	jl     c000a21a <sinc_quad_vari_process+0x11b>
c000a251:	dd 04 24             	fld    QWORD PTR [esp]
c000a254:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a257:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a25b:	dd 1e                	fstp   QWORD PTR [esi]
c000a25d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a260:	99                   	cdq    
c000a261:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a264:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a267:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a26a:	99                   	cdq    
c000a26b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a26e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a271:	31 c0                	xor    eax,eax
c000a273:	e9 fc 00 00 00       	jmp    c000a374 <sinc_quad_vari_process+0x275>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a27e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a282:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a286:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a28a:	d9 c9                	fxch   st(1)
c000a28c:	de d9                	fcompp 
c000a28e:	df e0                	fnstsw ax
c000a290:	9e                   	sahf   
c000a291:	73 be                	jae    c000a251 <sinc_quad_vari_process+0x152>
c000a293:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a297:	7e 2f                	jle    c000a2c8 <sinc_quad_vari_process+0x1c9>
c000a299:	dd 06                	fld    QWORD PTR [esi]
c000a29b:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a29e:	83 ec 10             	sub    esp,0x10
c000a2a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2a4:	e8 97 4f 01 00       	call   c001f240 <fabs>
c000a2a9:	83 c4 10             	add    esp,0x10
c000a2ac:	dc 1d 80 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b80
c000a2b2:	df e0                	fnstsw ax
c000a2b4:	9e                   	sahf   
c000a2b5:	76 11                	jbe    c000a2c8 <sinc_quad_vari_process+0x1c9>
c000a2b7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2ba:	dc 26                	fsub   QWORD PTR [esi]
c000a2bc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2bf:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2c2:	dc 06                	fadd   QWORD PTR [esi]
c000a2c4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2c8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2cb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2cf:	d9 e8                	fld1   
c000a2d1:	d8 d9                	fcomp  st(1)
c000a2d3:	df e0                	fnstsw ax
c000a2d5:	9e                   	sahf   
c000a2d6:	77 04                	ja     c000a2dc <sinc_quad_vari_process+0x1dd>
c000a2d8:	dd d8                	fstp   st(0)
c000a2da:	d9 e8                	fld1   
c000a2dc:	de c9                	fmulp  st(1),st
c000a2de:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a2e2:	50                   	push   eax
c000a2e3:	50                   	push   eax
c000a2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2ec:	e8 2b f7 ff ff       	call   c0009a1c <double_to_fp>
c000a2f1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a2f5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a2f9:	89 c5                	mov    ebp,eax
c000a2fb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2fe:	e8 19 f7 ff ff       	call   c0009a1c <double_to_fp>
c000a303:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a306:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a309:	83 c4 0c             	add    esp,0xc
c000a30c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a30f:	89 c1                	mov    ecx,eax
c000a311:	52                   	push   edx
c000a312:	89 d8                	mov    eax,ebx
c000a314:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a318:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a31b:	52                   	push   edx
c000a31c:	52                   	push   edx
c000a31d:	89 ea                	mov    edx,ebp
c000a31f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a322:	e8 99 ee ff ff       	call   c00091c0 <calc_output_quad>
c000a327:	d9 e8                	fld1   
c000a329:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a32d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a331:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a335:	dd 14 24             	fst    QWORD PTR [esp]
c000a338:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a33c:	e8 ee f6 ff ff       	call   c0009a2f <fmod_one>
c000a341:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a344:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a34b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a34f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a353:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a357:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a35a:	e8 01 4f 01 00       	call   c001f260 <lrint>
c000a35f:	0f af e8             	imul   ebp,eax
c000a362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a366:	01 e8                	add    eax,ebp
c000a368:	99                   	cdq    
c000a369:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a36c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a36f:	e9 87 fe ff ff       	jmp    c000a1fb <sinc_quad_vari_process+0xfc>
c000a374:	83 c4 3c             	add    esp,0x3c
c000a377:	5b                   	pop    ebx
c000a378:	5e                   	pop    esi
c000a379:	5f                   	pop    edi
c000a37a:	5d                   	pop    ebp
c000a37b:	c3                   	ret    

c000a37c <sinc_stereo_vari_process>:
c000a37c:	55                   	push   ebp
c000a37d:	b8 05 00 00 00       	mov    eax,0x5
c000a382:	57                   	push   edi
c000a383:	56                   	push   esi
c000a384:	53                   	push   ebx
c000a385:	83 ec 3c             	sub    esp,0x3c
c000a388:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a38c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a390:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a393:	85 db                	test   ebx,ebx
c000a395:	0f 84 56 02 00 00    	je     c000a5f1 <sinc_stereo_vari_process+0x275>
c000a39b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a39e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3a1:	0f af d0             	imul   edx,eax
c000a3a4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3a7:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3b2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3bc:	dd 06                	fld    QWORD PTR [esi]
c000a3be:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3c2:	55                   	push   ebp
c000a3c3:	55                   	push   ebp
c000a3c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c7:	e8 61 eb ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a3cc:	89 c2                	mov    edx,eax
c000a3ce:	58                   	pop    eax
c000a3cf:	59                   	pop    ecx
c000a3d0:	b8 16 00 00 00       	mov    eax,0x16
c000a3d5:	85 d2                	test   edx,edx
c000a3d7:	0f 85 14 02 00 00    	jne    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a3dd:	d9 05 90 0b 02 c0    	fld    DWORD PTR ds:0xc0020b90
c000a3e3:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a3e6:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e9:	dd 06                	fld    QWORD PTR [esi]
c000a3eb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a3ee:	d8 d1                	fcom   st(1)
c000a3f0:	df e0                	fnstsw ax
c000a3f2:	9e                   	sahf   
c000a3f3:	76 0f                	jbe    c000a404 <sinc_stereo_vari_process+0x88>
c000a3f5:	dd d8                	fstp   st(0)
c000a3f7:	d9 e8                	fld1   
c000a3f9:	d8 d9                	fcomp  st(1)
c000a3fb:	df e0                	fnstsw ax
c000a3fd:	9e                   	sahf   
c000a3fe:	77 0f                	ja     c000a40f <sinc_stereo_vari_process+0x93>
c000a400:	dd d8                	fstp   st(0)
c000a402:	eb 11                	jmp    c000a415 <sinc_stereo_vari_process+0x99>
c000a404:	dd d9                	fstp   st(1)
c000a406:	d9 e8                	fld1   
c000a408:	d8 d9                	fcomp  st(1)
c000a40a:	df e0                	fnstsw ax
c000a40c:	9e                   	sahf   
c000a40d:	76 04                	jbe    c000a413 <sinc_stereo_vari_process+0x97>
c000a40f:	de f9                	fdivp  st(1),st
c000a411:	eb 02                	jmp    c000a415 <sinc_stereo_vari_process+0x99>
c000a413:	dd d8                	fstp   st(0)
c000a415:	83 ec 10             	sub    esp,0x10
c000a418:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a41b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a41e:	e8 3d 4e 01 00       	call   c001f260 <lrint>
c000a423:	40                   	inc    eax
c000a424:	0f af c5             	imul   eax,ebp
c000a427:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a42a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a42e:	dd 14 24             	fst    QWORD PTR [esp]
c000a431:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a435:	e8 f5 f5 ff ff       	call   c0009a2f <fmod_one>
c000a43a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a43d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a444:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a44c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a450:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a453:	e8 08 4e 01 00       	call   c001f260 <lrint>
c000a458:	d9 e8                	fld1   
c000a45a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a45e:	0f af e8             	imul   ebp,eax
c000a461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a465:	01 e8                	add    eax,ebp
c000a467:	99                   	cdq    
c000a468:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a46b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a46e:	dc 05 f8 09 02 c0    	fadd   QWORD PTR ds:0xc00209f8
c000a474:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a478:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a47b:	83 c4 10             	add    esp,0x10
c000a47e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a481:	7d 4b                	jge    c000a4ce <sinc_stereo_vari_process+0x152>
c000a483:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a486:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a489:	01 c8                	add    eax,ecx
c000a48b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a48e:	99                   	cdq    
c000a48f:	f7 f9                	idiv   ecx
c000a491:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a495:	7d 09                	jge    c000a4a0 <sinc_stereo_vari_process+0x124>
c000a497:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a49a:	85 c0                	test   eax,eax
c000a49c:	79 57                	jns    c000a4f5 <sinc_stereo_vari_process+0x179>
c000a49e:	eb 70                	jmp    c000a510 <sinc_stereo_vari_process+0x194>
c000a4a0:	51                   	push   ecx
c000a4a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4a5:	57                   	push   edi
c000a4a6:	53                   	push   ebx
c000a4a7:	e8 da f5 ff ff       	call   c0009a86 <prepare_data>
c000a4ac:	83 c4 10             	add    esp,0x10
c000a4af:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4b2:	85 c0                	test   eax,eax
c000a4b4:	0f 85 37 01 00 00    	jne    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a4ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4c0:	01 c8                	add    eax,ecx
c000a4c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4c5:	99                   	cdq    
c000a4c6:	f7 f9                	idiv   ecx
c000a4c8:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4cc:	7c c9                	jl     c000a497 <sinc_stereo_vari_process+0x11b>
c000a4ce:	dd 04 24             	fld    QWORD PTR [esp]
c000a4d1:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4d4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a4d8:	dd 1e                	fstp   QWORD PTR [esi]
c000a4da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a4dd:	99                   	cdq    
c000a4de:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4e1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a4e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a4e7:	99                   	cdq    
c000a4e8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4eb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a4ee:	31 c0                	xor    eax,eax
c000a4f0:	e9 fc 00 00 00       	jmp    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a4f5:	dd 04 24             	fld    QWORD PTR [esp]
c000a4f8:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a4fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ff:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a503:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a507:	d9 c9                	fxch   st(1)
c000a509:	de d9                	fcompp 
c000a50b:	df e0                	fnstsw ax
c000a50d:	9e                   	sahf   
c000a50e:	73 be                	jae    c000a4ce <sinc_stereo_vari_process+0x152>
c000a510:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a514:	7e 2f                	jle    c000a545 <sinc_stereo_vari_process+0x1c9>
c000a516:	dd 06                	fld    QWORD PTR [esi]
c000a518:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a51b:	83 ec 10             	sub    esp,0x10
c000a51e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a521:	e8 1a 4d 01 00       	call   c001f240 <fabs>
c000a526:	83 c4 10             	add    esp,0x10
c000a529:	dc 1d 80 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b80
c000a52f:	df e0                	fnstsw ax
c000a531:	9e                   	sahf   
c000a532:	76 11                	jbe    c000a545 <sinc_stereo_vari_process+0x1c9>
c000a534:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a537:	dc 26                	fsub   QWORD PTR [esi]
c000a539:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a53c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a53f:	dc 06                	fadd   QWORD PTR [esi]
c000a541:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a545:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a548:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a54c:	d9 e8                	fld1   
c000a54e:	d8 d9                	fcomp  st(1)
c000a550:	df e0                	fnstsw ax
c000a552:	9e                   	sahf   
c000a553:	77 04                	ja     c000a559 <sinc_stereo_vari_process+0x1dd>
c000a555:	dd d8                	fstp   st(0)
c000a557:	d9 e8                	fld1   
c000a559:	de c9                	fmulp  st(1),st
c000a55b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a55f:	50                   	push   eax
c000a560:	50                   	push   eax
c000a561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a565:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a569:	e8 ae f4 ff ff       	call   c0009a1c <double_to_fp>
c000a56e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a572:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a576:	89 c5                	mov    ebp,eax
c000a578:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a57b:	e8 9c f4 ff ff       	call   c0009a1c <double_to_fp>
c000a580:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a583:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a58c:	89 c1                	mov    ecx,eax
c000a58e:	52                   	push   edx
c000a58f:	89 d8                	mov    eax,ebx
c000a591:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a595:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a598:	52                   	push   edx
c000a599:	52                   	push   edx
c000a59a:	89 ea                	mov    edx,ebp
c000a59c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a59f:	e8 da ea ff ff       	call   c000907e <calc_output_stereo>
c000a5a4:	d9 e8                	fld1   
c000a5a6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5aa:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5b2:	dd 14 24             	fst    QWORD PTR [esp]
c000a5b5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5b9:	e8 71 f4 ff ff       	call   c0009a2f <fmod_one>
c000a5be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5c1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5c8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5d0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d7:	e8 84 4c 01 00       	call   c001f260 <lrint>
c000a5dc:	0f af e8             	imul   ebp,eax
c000a5df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a5e3:	01 e8                	add    eax,ebp
c000a5e5:	99                   	cdq    
c000a5e6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a5e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a5ec:	e9 87 fe ff ff       	jmp    c000a478 <sinc_stereo_vari_process+0xfc>
c000a5f1:	83 c4 3c             	add    esp,0x3c
c000a5f4:	5b                   	pop    ebx
c000a5f5:	5e                   	pop    esi
c000a5f6:	5f                   	pop    edi
c000a5f7:	5d                   	pop    ebp
c000a5f8:	c3                   	ret    

c000a5f9 <sinc_mono_vari_process>:
c000a5f9:	55                   	push   ebp
c000a5fa:	b8 05 00 00 00       	mov    eax,0x5
c000a5ff:	57                   	push   edi
c000a600:	56                   	push   esi
c000a601:	53                   	push   ebx
c000a602:	83 ec 3c             	sub    esp,0x3c
c000a605:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a609:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a60d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a610:	85 db                	test   ebx,ebx
c000a612:	0f 84 55 02 00 00    	je     c000a86d <sinc_mono_vari_process+0x274>
c000a618:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a61b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a61e:	0f af d0             	imul   edx,eax
c000a621:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a624:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a628:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a62f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a639:	dd 06                	fld    QWORD PTR [esi]
c000a63b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a63f:	51                   	push   ecx
c000a640:	51                   	push   ecx
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 e4 e8 ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a649:	5d                   	pop    ebp
c000a64a:	89 c2                	mov    edx,eax
c000a64c:	58                   	pop    eax
c000a64d:	85 d2                	test   edx,edx
c000a64f:	b8 16 00 00 00       	mov    eax,0x16
c000a654:	0f 85 13 02 00 00    	jne    c000a86d <sinc_mono_vari_process+0x274>
c000a65a:	d9 05 90 0b 02 c0    	fld    DWORD PTR ds:0xc0020b90
c000a660:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a663:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a666:	dd 06                	fld    QWORD PTR [esi]
c000a668:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a66b:	d8 d1                	fcom   st(1)
c000a66d:	df e0                	fnstsw ax
c000a66f:	9e                   	sahf   
c000a670:	76 0f                	jbe    c000a681 <sinc_mono_vari_process+0x88>
c000a672:	dd d8                	fstp   st(0)
c000a674:	d9 e8                	fld1   
c000a676:	d8 d9                	fcomp  st(1)
c000a678:	df e0                	fnstsw ax
c000a67a:	9e                   	sahf   
c000a67b:	77 0f                	ja     c000a68c <sinc_mono_vari_process+0x93>
c000a67d:	dd d8                	fstp   st(0)
c000a67f:	eb 11                	jmp    c000a692 <sinc_mono_vari_process+0x99>
c000a681:	dd d9                	fstp   st(1)
c000a683:	d9 e8                	fld1   
c000a685:	d8 d9                	fcomp  st(1)
c000a687:	df e0                	fnstsw ax
c000a689:	9e                   	sahf   
c000a68a:	76 04                	jbe    c000a690 <sinc_mono_vari_process+0x97>
c000a68c:	de f9                	fdivp  st(1),st
c000a68e:	eb 02                	jmp    c000a692 <sinc_mono_vari_process+0x99>
c000a690:	dd d8                	fstp   st(0)
c000a692:	83 ec 10             	sub    esp,0x10
c000a695:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a698:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a69b:	e8 c0 4b 01 00       	call   c001f260 <lrint>
c000a6a0:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6a3:	40                   	inc    eax
c000a6a4:	dd 14 24             	fst    QWORD PTR [esp]
c000a6a7:	0f af e8             	imul   ebp,eax
c000a6aa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6ae:	e8 7c f3 ff ff       	call   c0009a2f <fmod_one>
c000a6b3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6bd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6c1:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6c5:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6d0:	e8 8b 4b 01 00       	call   c001f260 <lrint>
c000a6d5:	d9 e8                	fld1   
c000a6d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a6db:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a6e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6e4:	99                   	cdq    
c000a6e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6eb:	dc 05 f8 09 02 c0    	fadd   QWORD PTR ds:0xc00209f8
c000a6f1:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a6f8:	83 c4 10             	add    esp,0x10
c000a6fb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a6fe:	7d 44                	jge    c000a744 <sinc_mono_vari_process+0x14b>
c000a700:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a703:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a706:	01 c8                	add    eax,ecx
c000a708:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a70b:	99                   	cdq    
c000a70c:	f7 f9                	idiv   ecx
c000a70e:	39 d5                	cmp    ebp,edx
c000a710:	7d 09                	jge    c000a71b <sinc_mono_vari_process+0x122>
c000a712:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a715:	85 c0                	test   eax,eax
c000a717:	79 52                	jns    c000a76b <sinc_mono_vari_process+0x172>
c000a719:	eb 6b                	jmp    c000a786 <sinc_mono_vari_process+0x18d>
c000a71b:	52                   	push   edx
c000a71c:	55                   	push   ebp
c000a71d:	57                   	push   edi
c000a71e:	53                   	push   ebx
c000a71f:	e8 62 f3 ff ff       	call   c0009a86 <prepare_data>
c000a724:	83 c4 10             	add    esp,0x10
c000a727:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a72a:	85 c0                	test   eax,eax
c000a72c:	0f 85 3b 01 00 00    	jne    c000a86d <sinc_mono_vari_process+0x274>
c000a732:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a735:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a738:	01 c8                	add    eax,ecx
c000a73a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a73d:	99                   	cdq    
c000a73e:	f7 f9                	idiv   ecx
c000a740:	39 d5                	cmp    ebp,edx
c000a742:	7c ce                	jl     c000a712 <sinc_mono_vari_process+0x119>
c000a744:	dd 04 24             	fld    QWORD PTR [esp]
c000a747:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a74a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a74e:	dd 1e                	fstp   QWORD PTR [esi]
c000a750:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a753:	99                   	cdq    
c000a754:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a757:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a75a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a75d:	99                   	cdq    
c000a75e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a761:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a764:	31 c0                	xor    eax,eax
c000a766:	e9 02 01 00 00       	jmp    c000a86d <sinc_mono_vari_process+0x274>
c000a76b:	dd 04 24             	fld    QWORD PTR [esp]
c000a76e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a771:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a775:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a779:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a77d:	d9 c9                	fxch   st(1)
c000a77f:	de d9                	fcompp 
c000a781:	df e0                	fnstsw ax
c000a783:	9e                   	sahf   
c000a784:	77 be                	ja     c000a744 <sinc_mono_vari_process+0x14b>
c000a786:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a78a:	7e 2f                	jle    c000a7bb <sinc_mono_vari_process+0x1c2>
c000a78c:	dd 06                	fld    QWORD PTR [esi]
c000a78e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a791:	83 ec 10             	sub    esp,0x10
c000a794:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a797:	e8 a4 4a 01 00       	call   c001f240 <fabs>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	dc 1d 80 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b80
c000a7a5:	df e0                	fnstsw ax
c000a7a7:	9e                   	sahf   
c000a7a8:	76 11                	jbe    c000a7bb <sinc_mono_vari_process+0x1c2>
c000a7aa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7ad:	dc 26                	fsub   QWORD PTR [esi]
c000a7af:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7b2:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7b5:	dc 06                	fadd   QWORD PTR [esi]
c000a7b7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7bb:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7be:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7c2:	d9 e8                	fld1   
c000a7c4:	d8 d9                	fcomp  st(1)
c000a7c6:	df e0                	fnstsw ax
c000a7c8:	9e                   	sahf   
c000a7c9:	77 04                	ja     c000a7cf <sinc_mono_vari_process+0x1d6>
c000a7cb:	dd d8                	fstp   st(0)
c000a7cd:	d9 e8                	fld1   
c000a7cf:	de c9                	fmulp  st(1),st
c000a7d1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a7d5:	50                   	push   eax
c000a7d6:	50                   	push   eax
c000a7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7df:	e8 38 f2 ff ff       	call   c0009a1c <double_to_fp>
c000a7e4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a7e8:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a7ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7f0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7f3:	e8 24 f2 ff ff       	call   c0009a1c <double_to_fp>
c000a7f8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a7fc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a800:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a803:	89 c1                	mov    ecx,eax
c000a805:	89 d8                	mov    eax,ebx
c000a807:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a80b:	e8 89 e7 ff ff       	call   c0008f99 <calc_output_single>
c000a810:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a813:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a817:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a81a:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a81d:	d9 e8                	fld1   
c000a81f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a823:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a826:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a82a:	dd 14 24             	fst    QWORD PTR [esp]
c000a82d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a831:	e8 f9 f1 ff ff       	call   c0009a2f <fmod_one>
c000a836:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a839:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a840:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a844:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a848:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a84c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a850:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a853:	e8 08 4a 01 00       	call   c001f260 <lrint>
c000a858:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a85d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a861:	99                   	cdq    
c000a862:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a865:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a868:	e9 88 fe ff ff       	jmp    c000a6f5 <sinc_mono_vari_process+0xfc>
c000a86d:	83 c4 3c             	add    esp,0x3c
c000a870:	5b                   	pop    ebx
c000a871:	5e                   	pop    esi
c000a872:	5f                   	pop    edi
c000a873:	5d                   	pop    ebp
c000a874:	c3                   	ret    

c000a875 <sinc_get_name>:
c000a875:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a879:	31 c0                	xor    eax,eax
c000a87b:	83 fa 02             	cmp    edx,0x2
c000a87e:	77 07                	ja     c000a887 <sinc_get_name+0x12>
c000a880:	8b 04 95 60 0a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf5a0]
c000a887:	c3                   	ret    

c000a888 <sinc_get_description>:
c000a888:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a88c:	31 c0                	xor    eax,eax
c000a88e:	83 fa 02             	cmp    edx,0x2
c000a891:	77 07                	ja     c000a89a <sinc_get_description+0x12>
c000a893:	8b 04 95 54 0a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf5ac]
c000a89a:	c3                   	ret    

c000a89b <sinc_set_converter>:
c000a89b:	53                   	push   ebx
c000a89c:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8a2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 13                	je     c000a8c3 <sinc_set_converter+0x28>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	50                   	push   eax
c000a8b4:	e8 7e 16 00 00       	call   c000bf37 <free>
c000a8b9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	50                   	push   eax
c000a8c4:	68 44 08 00 00       	push   0x844
c000a8c9:	6a 00                	push   0x0
c000a8cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8cf:	50                   	push   eax
c000a8d0:	e8 33 5d ff ff       	call   c0000608 <memset>
c000a8d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8d8:	83 c4 10             	add    esp,0x10
c000a8db:	b8 0b 00 00 00       	mov    eax,0xb
c000a8e0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a8e6:	7f 6e                	jg     c000a956 <sinc_set_converter+0xbb>
c000a8e8:	83 fa 01             	cmp    edx,0x1
c000a8eb:	75 10                	jne    c000a8fd <sinc_set_converter+0x62>
c000a8ed:	c7 43 24 f9 a5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a5f9
c000a8f4:	c7 43 20 f9 a5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a5f9
c000a8fb:	eb 4d                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a8fd:	83 fa 02             	cmp    edx,0x2
c000a900:	75 10                	jne    c000a912 <sinc_set_converter+0x77>
c000a902:	c7 43 24 7c a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a37c
c000a909:	c7 43 20 7c a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a37c
c000a910:	eb 38                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a912:	83 fa 04             	cmp    edx,0x4
c000a915:	75 10                	jne    c000a927 <sinc_set_converter+0x8c>
c000a917:	c7 43 24 ff a0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a0ff
c000a91e:	c7 43 20 ff a0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a0ff
c000a925:	eb 23                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a927:	83 fa 06             	cmp    edx,0x6
c000a92a:	75 10                	jne    c000a93c <sinc_set_converter+0xa1>
c000a92c:	c7 43 24 82 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009e82
c000a933:	c7 43 20 82 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009e82
c000a93a:	eb 0e                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a93c:	c7 43 24 00 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c00
c000a943:	c7 43 20 00 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c00
c000a94a:	c7 43 28 be 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095be
c000a951:	b8 0a 00 00 00       	mov    eax,0xa
c000a956:	81 c4 58 08 00 00    	add    esp,0x858
c000a95c:	5b                   	pop    ebx
c000a95d:	c3                   	ret    

c000a95e <is_bad_src_ratio>:
c000a95e:	83 ec 0c             	sub    esp,0xc
c000a961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a965:	89 04 24             	mov    DWORD PTR [esp],eax
c000a968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a96c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a970:	dd 04 24             	fld    QWORD PTR [esp]
c000a973:	dd 05 80 09 02 c0    	fld    QWORD PTR ds:0xc0020980
c000a979:	de d9                	fcompp 
c000a97b:	df e0                	fnstsw ax
c000a97d:	f6 c4 45             	test   ah,0x45
c000a980:	74 10                	je     c000a992 <is_bad_src_ratio+0x34>
c000a982:	dd 04 24             	fld    QWORD PTR [esp]
c000a985:	dc 1d 88 09 02 c0    	fcomp  QWORD PTR ds:0xc0020988
c000a98b:	df e0                	fnstsw ax
c000a98d:	f6 c4 45             	test   ah,0x45
c000a990:	75 07                	jne    c000a999 <is_bad_src_ratio+0x3b>
c000a992:	b8 01 00 00 00       	mov    eax,0x1
c000a997:	eb 05                	jmp    c000a99e <is_bad_src_ratio+0x40>
c000a999:	b8 00 00 00 00       	mov    eax,0x0
c000a99e:	83 c4 0c             	add    esp,0xc
c000a9a1:	c3                   	ret    

c000a9a2 <fmod_one>:
c000a9a2:	83 ec 2c             	sub    esp,0x2c
c000a9a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9b5:	83 ec 08             	sub    esp,0x8
c000a9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c0:	e8 9b 48 01 00       	call   c001f260 <lrint>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9cc:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9d0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a9d4:	de e1                	fsubrp st(1),st
c000a9d6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a9da:	d9 ee                	fldz   
c000a9dc:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000a9e0:	df e0                	fnstsw ax
c000a9e2:	f6 c4 45             	test   ah,0x45
c000a9e5:	75 0a                	jne    c000a9f1 <fmod_one+0x4f>
c000a9e7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000a9eb:	d9 e8                	fld1   
c000a9ed:	de c1                	faddp  st(1),st
c000a9ef:	eb 04                	jmp    c000a9f5 <fmod_one+0x53>
c000a9f1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000a9f5:	83 c4 2c             	add    esp,0x2c
c000a9f8:	c3                   	ret    

c000a9f9 <zoh_vari_process>:
c000a9f9:	55                   	push   ebp
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	53                   	push   ebx
c000a9fd:	83 ec 2c             	sub    esp,0x2c
c000aa00:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa04:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa10:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa14:	0f 8e 30 02 00 00    	jle    c000ac4a <zoh_vari_process+0x251>
c000aa1a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa1d:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa25:	85 db                	test   ebx,ebx
c000aa27:	0f 84 1d 02 00 00    	je     c000ac4a <zoh_vari_process+0x251>
c000aa2d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa30:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa34:	74 19                	je     c000aa4f <zoh_vari_process+0x56>
c000aa36:	31 d2                	xor    edx,edx
c000aa38:	39 c2                	cmp    edx,eax
c000aa3a:	7d 0c                	jge    c000aa48 <zoh_vari_process+0x4f>
c000aa3c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa3e:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa41:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa45:	42                   	inc    edx
c000aa46:	eb f0                	jmp    c000aa38 <zoh_vari_process+0x3f>
c000aa48:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa4f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa52:	0f af d0             	imul   edx,eax
c000aa55:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa58:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa5c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa63:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa66:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa6d:	dd 07                	fld    QWORD PTR [edi]
c000aa6f:	dd 14 24             	fst    QWORD PTR [esp]
c000aa72:	50                   	push   eax
c000aa73:	50                   	push   eax
c000aa74:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa77:	e8 e2 fe ff ff       	call   c000a95e <is_bad_src_ratio>
c000aa7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa80:	5a                   	pop    edx
c000aa81:	59                   	pop    ecx
c000aa82:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aa87:	0f 85 b5 01 00 00    	jne    c000ac42 <zoh_vari_process+0x249>
c000aa8d:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aa90:	d9 e8                	fld1   
c000aa92:	d8 d1                	fcom   st(1)
c000aa94:	df e0                	fnstsw ax
c000aa96:	9e                   	sahf   
c000aa97:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa9b:	0f 86 83 00 00 00    	jbe    c000ab24 <zoh_vari_process+0x12b>
c000aaa1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aaa4:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aaa7:	7d 7b                	jge    c000ab24 <zoh_vari_process+0x12b>
c000aaa9:	d9 c0                	fld    st(0)
c000aaab:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aaae:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aab1:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aab4:	df e0                	fnstsw ax
c000aab6:	9e                   	sahf   
c000aab7:	73 6b                	jae    c000ab24 <zoh_vari_process+0x12b>
c000aab9:	85 d2                	test   edx,edx
c000aabb:	7e 36                	jle    c000aaf3 <zoh_vari_process+0xfa>
c000aabd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aac1:	dd 07                	fld    QWORD PTR [edi]
c000aac3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aac6:	83 ec 10             	sub    esp,0x10
c000aac9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aacc:	e8 6f 47 01 00       	call   c001f240 <fabs>
c000aad1:	83 c4 10             	add    esp,0x10
c000aad4:	dc 1d f8 09 02 c0    	fcomp  QWORD PTR ds:0xc00209f8
c000aada:	df e0                	fnstsw ax
c000aadc:	9e                   	sahf   
c000aadd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aae1:	76 10                	jbe    c000aaf3 <zoh_vari_process+0xfa>
c000aae3:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000aae6:	dc 27                	fsub   QWORD PTR [edi]
c000aae8:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aaeb:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aaee:	dc 07                	fadd   QWORD PTR [edi]
c000aaf0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf3:	31 c0                	xor    eax,eax
c000aaf5:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000aaf8:	7e 13                	jle    c000ab0d <zoh_vari_process+0x114>
c000aafa:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000aafe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab01:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab04:	40                   	inc    eax
c000ab05:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab08:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab0b:	eb e8                	jmp    c000aaf5 <zoh_vari_process+0xfc>
c000ab0d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab11:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab14:	de c1                	faddp  st(1),st
c000ab16:	e9 75 ff ff ff       	jmp    c000aa90 <zoh_vari_process+0x97>
c000ab1b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab1f:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab22:	de c1                	faddp  st(1),st
c000ab24:	83 ec 10             	sub    esp,0x10
c000ab27:	dd 14 24             	fst    QWORD PTR [esp]
c000ab2a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab2e:	e8 6f fe ff ff       	call   c000a9a2 <fmod_one>
c000ab33:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab36:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab3a:	d8 e1                	fsub   st,st(1)
c000ab3c:	d9 c9                	fxch   st(1)
c000ab3e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab42:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab45:	e8 16 47 01 00       	call   c001f260 <lrint>
c000ab4a:	83 c4 10             	add    esp,0x10
c000ab4d:	0f af e8             	imul   ebp,eax
c000ab50:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab5a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab5d:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab60:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab63:	0f 8d 80 00 00 00    	jge    c000abe9 <zoh_vari_process+0x1f0>
c000ab69:	d9 c0                	fld    st(0)
c000ab6b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab6e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab72:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ab76:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ab7a:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ab7e:	de d9                	fcompp 
c000ab80:	df e0                	fnstsw ax
c000ab82:	9e                   	sahf   
c000ab83:	72 64                	jb     c000abe9 <zoh_vari_process+0x1f0>
c000ab85:	85 d2                	test   edx,edx
c000ab87:	7e 36                	jle    c000abbf <zoh_vari_process+0x1c6>
c000ab89:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab8d:	dd 07                	fld    QWORD PTR [edi]
c000ab8f:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab92:	83 ec 10             	sub    esp,0x10
c000ab95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab98:	e8 a3 46 01 00       	call   c001f240 <fabs>
c000ab9d:	83 c4 10             	add    esp,0x10
c000aba0:	dc 1d f8 09 02 c0    	fcomp  QWORD PTR ds:0xc00209f8
c000aba6:	df e0                	fnstsw ax
c000aba8:	9e                   	sahf   
c000aba9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abad:	76 10                	jbe    c000abbf <zoh_vari_process+0x1c6>
c000abaf:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abb2:	dc 27                	fsub   QWORD PTR [edi]
c000abb4:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abb7:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abba:	dc 07                	fadd   QWORD PTR [edi]
c000abbc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abbf:	31 d2                	xor    edx,edx
c000abc1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abc4:	39 d0                	cmp    eax,edx
c000abc6:	0f 8e 4f ff ff ff    	jle    c000ab1b <zoh_vari_process+0x122>
c000abcc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000abcf:	29 c1                	sub    ecx,eax
c000abd1:	89 c8                	mov    eax,ecx
c000abd3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000abd5:	01 d0                	add    eax,edx
c000abd7:	42                   	inc    edx
c000abd8:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000abdb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abde:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000abe1:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000abe4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abe7:	eb d8                	jmp    c000abc1 <zoh_vari_process+0x1c8>
c000abe9:	39 e9                	cmp    ecx,ebp
c000abeb:	7d 13                	jge    c000ac00 <zoh_vari_process+0x207>
c000abed:	89 e8                	mov    eax,ebp
c000abef:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000abf2:	29 c8                	sub    eax,ecx
c000abf4:	99                   	cdq    
c000abf5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000abf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abfc:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac00:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac06:	85 c0                	test   eax,eax
c000ac08:	7f 1b                	jg     c000ac25 <zoh_vari_process+0x22c>
c000ac0a:	dd 04 24             	fld    QWORD PTR [esp]
c000ac0d:	dd 1f                	fstp   QWORD PTR [edi]
c000ac0f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac12:	99                   	cdq    
c000ac13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac16:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac19:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac1c:	99                   	cdq    
c000ac1d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac20:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac23:	eb 25                	jmp    c000ac4a <zoh_vari_process+0x251>
c000ac25:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac28:	31 d2                	xor    edx,edx
c000ac2a:	29 e8                	sub    eax,ebp
c000ac2c:	c1 e0 02             	shl    eax,0x2
c000ac2f:	39 d5                	cmp    ebp,edx
c000ac31:	7e d7                	jle    c000ac0a <zoh_vari_process+0x211>
c000ac33:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac35:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac38:	83 c0 04             	add    eax,0x4
c000ac3b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac3f:	42                   	inc    edx
c000ac40:	eb ed                	jmp    c000ac2f <zoh_vari_process+0x236>
c000ac42:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac4e:	83 c4 2c             	add    esp,0x2c
c000ac51:	5b                   	pop    ebx
c000ac52:	5e                   	pop    esi
c000ac53:	5f                   	pop    edi
c000ac54:	5d                   	pop    ebp
c000ac55:	c3                   	ret    

c000ac56 <zoh_reset>:
c000ac56:	83 ec 0c             	sub    esp,0xc
c000ac59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac60:	85 c0                	test   eax,eax
c000ac62:	74 20                	je     c000ac84 <zoh_reset+0x2e>
c000ac64:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac67:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ac6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac71:	51                   	push   ecx
c000ac72:	c1 e2 02             	shl    edx,0x2
c000ac75:	83 c0 1c             	add    eax,0x1c
c000ac78:	52                   	push   edx
c000ac79:	6a 00                	push   0x0
c000ac7b:	50                   	push   eax
c000ac7c:	e8 87 59 ff ff       	call   c0000608 <memset>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <zoh_get_name>:
c000ac88:	31 c0                	xor    eax,eax
c000ac8a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ac8f:	75 05                	jne    c000ac96 <zoh_get_name+0xe>
c000ac91:	b8 94 0b 02 c0       	mov    eax,0xc0020b94
c000ac96:	c3                   	ret    

c000ac97 <zoh_get_description>:
c000ac97:	31 c0                	xor    eax,eax
c000ac99:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ac9e:	75 05                	jne    c000aca5 <zoh_get_description+0xe>
c000aca0:	b8 a5 0b 02 c0       	mov    eax,0xc0020ba5
c000aca5:	c3                   	ret    

c000aca6 <zoh_set_converter>:
c000aca6:	53                   	push   ebx
c000aca7:	b8 0a 00 00 00       	mov    eax,0xa
c000acac:	83 ec 08             	sub    esp,0x8
c000acaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000acb3:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000acb8:	75 6e                	jne    c000ad28 <zoh_set_converter+0x82>
c000acba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	74 13                	je     c000acd4 <zoh_set_converter+0x2e>
c000acc1:	83 ec 0c             	sub    esp,0xc
c000acc4:	50                   	push   eax
c000acc5:	e8 6d 12 00 00       	call   c000bf37 <free>
c000acca:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000acd1:	83 c4 10             	add    esp,0x10
c000acd4:	50                   	push   eax
c000acd5:	50                   	push   eax
c000acd6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000acd9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ace0:	50                   	push   eax
c000ace1:	6a 01                	push   0x1
c000ace3:	e8 6f 12 00 00       	call   c000bf57 <calloc>
c000ace8:	89 c2                	mov    edx,eax
c000acea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000aced:	83 c4 10             	add    esp,0x10
c000acf0:	b8 01 00 00 00       	mov    eax,0x1
c000acf5:	85 d2                	test   edx,edx
c000acf7:	74 2f                	je     c000ad28 <zoh_set_converter+0x82>
c000acf9:	83 ec 0c             	sub    esp,0xc
c000acfc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000acff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad02:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad08:	c7 43 24 f9 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a9f9
c000ad0f:	c7 43 20 f9 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a9f9
c000ad16:	c7 43 28 56 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac56
c000ad1d:	53                   	push   ebx
c000ad1e:	e8 33 ff ff ff       	call   c000ac56 <zoh_reset>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	31 c0                	xor    eax,eax
c000ad28:	83 c4 08             	add    esp,0x8
c000ad2b:	5b                   	pop    ebx
c000ad2c:	c3                   	ret    
c000ad2d:	90                   	nop

c000ad2e <Computer::close(int, int, void*)>:
c000ad2e:	57                   	push   edi
c000ad2f:	56                   	push   esi
c000ad30:	53                   	push   ebx
c000ad31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad3d:	83 ec 0c             	sub    esp,0xc
c000ad40:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad46:	50                   	push   eax
c000ad47:	e8 98 59 00 00       	call   c00106e4 <Device::closeAll()>
c000ad4c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad52:	83 c4 10             	add    esp,0x10
c000ad55:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad57:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad5b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad6b:	5b                   	pop    ebx
c000ad6c:	5e                   	pop    esi
c000ad6d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad70:	5f                   	pop    edi
c000ad71:	ff e0                	jmp    eax
c000ad73:	90                   	nop

c000ad74 <Computer::Computer()>:
c000ad74:	83 ec 0c             	sub    esp,0xc
c000ad77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7b:	83 ec 08             	sub    esp,0x8
c000ad7e:	68 dc 0b 02 c0       	push   0xc0020bdc
c000ad83:	50                   	push   eax
c000ad84:	e8 d5 59 00 00       	call   c001075e <Device::Device(char const*)>
c000ad89:	83 c4 10             	add    esp,0x10
c000ad8c:	ba a4 0d 02 c0       	mov    edx,0xc0020da4
c000ad91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad95:	89 10                	mov    DWORD PTR [eax],edx
c000ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adbd:	83 ca 04             	or     edx,0x4
c000adc0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000add0:	31 d2                	xor    edx,edx
c000add2:	88 c2                	mov    dl,al
c000add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add8:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ade9:	31 d2                	xor    edx,edx
c000adeb:	88 c2                	mov    dl,al
c000aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000adf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae00:	8d 50 01             	lea    edx,[eax+0x1]
c000ae03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae07:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae0d:	31 d2                	xor    edx,edx
c000ae0f:	88 c2                	mov    dl,al
c000ae11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae15:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae19:	83 e1 3f             	and    ecx,0x3f
c000ae1c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2a:	31 d2                	xor    edx,edx
c000ae2c:	88 c2                	mov    dl,al
c000ae2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae32:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae43:	31 d2                	xor    edx,edx
c000ae45:	88 c2                	mov    dl,al
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ae5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae67:	31 d2                	xor    edx,edx
c000ae69:	88 c2                	mov    dl,al
c000ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae73:	83 e1 3f             	and    ecx,0x3f
c000ae76:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae84:	31 d2                	xor    edx,edx
c000ae86:	88 c2                	mov    dl,al
c000ae88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8c:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	88 c2                	mov    dl,al
c000aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb4:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aebb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec1:	31 d2                	xor    edx,edx
c000aec3:	88 c2                	mov    dl,al
c000aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aecd:	83 e1 3f             	and    ecx,0x3f
c000aed0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed4:	90                   	nop
c000aed5:	83 c4 0c             	add    esp,0xc
c000aed8:	c3                   	ret    
c000aed9:	90                   	nop

c000aeda <Computer::setBootMessage(char const*)>:
c000aeda:	c3                   	ret    
c000aedb:	90                   	nop

c000aedc <Computer::start()>:
c000aedc:	56                   	push   esi
c000aedd:	53                   	push   ebx
c000aede:	83 ec 14             	sub    esp,0x14
c000aee1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aee5:	e8 6d d6 00 00       	call   c0018557 <lockScheduler()>
c000aeea:	e8 b1 d9 00 00       	call   c00188a0 <schedule()>
c000aeef:	e8 65 d6 00 00       	call   c0018559 <unlockScheduler()>
c000aef4:	fb                   	sti    
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	68 3b 07 00 00       	push   0x73b
c000aefd:	e8 22 41 00 00       	call   c000f024 <operator new(unsigned long)>
c000af02:	89 c6                	mov    esi,eax
c000af04:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c000af09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af10:	50                   	push   eax
c000af11:	68 e5 0b 02 c0       	push   0xc0020be5
c000af16:	6a 01                	push   0x1
c000af18:	56                   	push   esi
c000af19:	e8 90 d4 00 00       	call   c00183ae <Process::Process(bool, char const*, Process*, char**)>
c000af1e:	83 c4 20             	add    esp,0x20
c000af21:	68 ff 00 00 00       	push   0xff
c000af26:	6a 00                	push   0x0
c000af28:	68 b5 b8 00 c0       	push   0xc000b8b5
c000af2d:	56                   	push   esi
c000af2e:	e8 59 d7 00 00       	call   c001868c <Process::createThread(void (*)(void*), void*, int)>
c000af33:	6a 7a                	push   0x7a
c000af35:	8b 15 d4 56 02 c0    	mov    edx,DWORD PTR ds:0xc00256d4
c000af3b:	6a 00                	push   0x0
c000af3d:	68 d1 8e 01 c0       	push   0xc0018ed1
c000af42:	52                   	push   edx
c000af43:	e8 44 d7 00 00       	call   c001868c <Process::createThread(void (*)(void*), void*, int)>
c000af48:	83 c4 20             	add    esp,0x20
c000af4b:	a3 88 56 02 c0       	mov    ds:0xc0025688,eax
c000af50:	c6 05 8d 42 02 c0 01 	mov    BYTE PTR ds:0xc002428d,0x1
c000af57:	e8 60 45 00 00       	call   c000f4bc <initVFS()>
c000af5c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af62:	8b 10                	mov    edx,DWORD PTR [eax]
c000af64:	6a 00                	push   0x0
c000af66:	6a 00                	push   0x0
c000af68:	6a 00                	push   0x0
c000af6a:	50                   	push   eax
c000af6b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af6e:	e8 32 be 00 00       	call   c0016da5 <setupSystemCalls()>
c000af73:	e8 42 50 00 00       	call   c000ffba <loadClockSettings()>
c000af78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af7b:	e8 38 57 00 00       	call   c00106b8 <Device::loadDriversForAll()>
c000af80:	bb 02 00 00 00       	mov    ebx,0x2
c000af85:	b8 01 00 00 00       	mov    eax,0x1
c000af8a:	31 d2                	xor    edx,edx
c000af8c:	31 c9                	xor    ecx,ecx
c000af8e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000af96:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af9e:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000afa4:	59                   	pop    ecx
c000afa5:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c000afab:	5e                   	pop    esi
c000afac:	6a 01                	push   0x1
c000afae:	68 f2 0b 02 c0       	push   0xc0020bf2
c000afb3:	e8 b9 cf 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c000afb8:	5a                   	pop    edx
c000afb9:	59                   	pop    ecx
c000afba:	53                   	push   ebx
c000afbb:	50                   	push   eax
c000afbc:	e8 76 d1 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c000afc1:	c7 04 24 d0 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dd0
c000afc8:	e8 8c 41 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000afcd:	83 c4 10             	add    esp,0x10
c000afd0:	83 ec 0c             	sub    esp,0xc
c000afd3:	6a 02                	push   0x2
c000afd5:	e8 1f da 00 00       	call   c00189f9 <blockTask(TaskState)>
c000afda:	83 c4 10             	add    esp,0x10
c000afdd:	eb f1                	jmp    c000afd0 <Computer::start()+0xf4>

c000afdf <firstTask()>:
c000afdf:	83 ec 18             	sub    esp,0x18
c000afe2:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c000afe7:	50                   	push   eax
c000afe8:	e8 ef fe ff ff       	call   c000aedc <Computer::start()>
c000afed:	90                   	nop

c000afee <Computer::detectFeatures()>:
c000afee:	55                   	push   ebp
c000afef:	57                   	push   edi
c000aff0:	56                   	push   esi
c000aff1:	53                   	push   ebx
c000aff2:	83 ec 1c             	sub    esp,0x1c
c000aff5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff9:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000afff:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b005:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b00b:	e8 af 52 ff ff       	call   c00002bf <detectCPUID>
c000b010:	85 c0                	test   eax,eax
c000b012:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b018:	0f 95 c2             	setne  dl
c000b01b:	01 d2                	add    edx,edx
c000b01d:	83 e0 fd             	and    eax,0xfffffffd
c000b020:	09 d0                	or     eax,edx
c000b022:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b028:	a8 02                	test   al,0x2
c000b02a:	75 4e                	jne    c000b07a <Computer::detectFeatures()+0x8c>
c000b02c:	f6 05 a1 42 02 c0 04 	test   BYTE PTR ds:0xc00242a1,0x4
c000b033:	74 0f                	je     c000b044 <Computer::detectFeatures()+0x56>
c000b035:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b03b:	83 e0 fb             	and    eax,0xfffffffb
c000b03e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b044:	e8 9d 3c 01 00       	call   c001ece6 <x87Detect>
c000b049:	83 e0 01             	and    eax,0x1
c000b04c:	c1 e0 04             	shl    eax,0x4
c000b04f:	88 c2                	mov    dl,al
c000b051:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b057:	83 e0 ef             	and    eax,0xffffffef
c000b05a:	09 d0                	or     eax,edx
c000b05c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b062:	a8 10                	test   al,0x10
c000b064:	0f 85 20 01 00 00    	jne    c000b18a <Computer::detectFeatures()+0x19c>
c000b06a:	84 c0                	test   al,al
c000b06c:	0f 88 3b 01 00 00    	js     c000b1ad <Computer::detectFeatures()+0x1bf>
c000b072:	83 c4 1c             	add    esp,0x1c
c000b075:	5b                   	pop    ebx
c000b076:	5e                   	pop    esi
c000b077:	5f                   	pop    edi
c000b078:	5d                   	pop    ebp
c000b079:	c3                   	ret    
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	6a 20                	push   0x20
c000b07f:	e8 a7 92 00 00       	call   c001432b <cpuidCheckEDX(unsigned int)>
c000b084:	83 e0 01             	and    eax,0x1
c000b087:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b08e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b094:	83 e0 f7             	and    eax,0xfffffff7
c000b097:	09 d0                	or     eax,edx
c000b099:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b09f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b0a6:	e8 80 92 00 00       	call   c001432b <cpuidCheckEDX(unsigned int)>
c000b0ab:	83 e0 01             	and    eax,0x1
c000b0ae:	88 c2                	mov    dl,al
c000b0b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0b6:	83 e0 fe             	and    eax,0xfffffffe
c000b0b9:	09 d0                	or     eax,edx
c000b0bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0c8:	e8 5e 92 00 00       	call   c001432b <cpuidCheckEDX(unsigned int)>
c000b0cd:	c1 e0 07             	shl    eax,0x7
c000b0d0:	88 c2                	mov    dl,al
c000b0d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0d8:	83 e0 7f             	and    eax,0x7f
c000b0db:	09 d0                	or     eax,edx
c000b0dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0ea:	e8 3c 92 00 00       	call   c001432b <cpuidCheckEDX(unsigned int)>
c000b0ef:	83 c4 10             	add    esp,0x10
c000b0f2:	83 e0 01             	and    eax,0x1
c000b0f5:	c1 e0 05             	shl    eax,0x5
c000b0f8:	88 c2                	mov    dl,al
c000b0fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b100:	83 e0 df             	and    eax,0xffffffdf
c000b103:	09 d0                	or     eax,edx
c000b105:	f7 05 a0 42 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00242a0,0x401
c000b10f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b115:	0f 84 b8 00 00 00    	je     c000b1d3 <Computer::detectFeatures()+0x1e5>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b124:	83 e1 fe             	and    ecx,0xfffffffe
c000b127:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b12b:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b131:	50                   	push   eax
c000b132:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b136:	55                   	push   ebp
c000b137:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b13b:	57                   	push   edi
c000b13c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b140:	56                   	push   esi
c000b141:	68 00 00 00 80       	push   0x80000000
c000b146:	e8 5d 91 00 00       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b14b:	83 c4 20             	add    esp,0x20
c000b14e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b155:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b159:	0f 86 cd fe ff ff    	jbe    c000b02c <Computer::detectFeatures()+0x3e>
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	50                   	push   eax
c000b163:	55                   	push   ebp
c000b164:	57                   	push   edi
c000b165:	56                   	push   esi
c000b166:	68 01 00 00 80       	push   0x80000001
c000b16b:	e8 38 91 00 00       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b170:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b176:	83 c4 20             	add    esp,0x20
c000b179:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b17f:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b185:	e9 a2 fe ff ff       	jmp    c000b02c <Computer::detectFeatures()+0x3e>
c000b18a:	e8 11 3b 01 00       	call   c001eca0 <sseDetect>
c000b18f:	88 c2                	mov    dl,al
c000b191:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b197:	c1 e2 07             	shl    edx,0x7
c000b19a:	83 e0 7f             	and    eax,0x7f
c000b19d:	09 d0                	or     eax,edx
c000b19f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1a5:	84 c0                	test   al,al
c000b1a7:	0f 89 c5 fe ff ff    	jns    c000b072 <Computer::detectFeatures()+0x84>
c000b1ad:	e8 de 3a 01 00       	call   c001ec90 <avxDetect>
c000b1b2:	83 e0 01             	and    eax,0x1
c000b1b5:	c1 e0 05             	shl    eax,0x5
c000b1b8:	88 c2                	mov    dl,al
c000b1ba:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1c0:	83 e0 df             	and    eax,0xffffffdf
c000b1c3:	09 d0                	or     eax,edx
c000b1c5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1cb:	83 c4 1c             	add    esp,0x1c
c000b1ce:	5b                   	pop    ebx
c000b1cf:	5e                   	pop    esi
c000b1d0:	5f                   	pop    edi
c000b1d1:	5d                   	pop    ebp
c000b1d2:	c3                   	ret    
c000b1d3:	83 ec 0c             	sub    esp,0xc
c000b1d6:	68 00 02 00 00       	push   0x200
c000b1db:	e8 4b 91 00 00       	call   c001432b <cpuidCheckEDX(unsigned int)>
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	e9 33 ff ff ff       	jmp    c000b11b <Computer::detectFeatures()+0x12d>

c000b1e8 <Computer::displayFeatures()>:
c000b1e8:	53                   	push   ebx
c000b1e9:	83 ec 14             	sub    esp,0x14
c000b1ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b1f0:	68 15 0c 02 c0       	push   0xc0020c15
c000b1f5:	e8 5f 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b1fa:	83 c4 10             	add    esp,0x10
c000b1fd:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b202:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b209:	74 05                	je     c000b210 <Computer::displayFeatures()+0x28>
c000b20b:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b210:	51                   	push   ecx
c000b211:	51                   	push   ecx
c000b212:	50                   	push   eax
c000b213:	68 28 0c 02 c0       	push   0xc0020c28
c000b218:	e8 3c 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b21d:	83 c4 10             	add    esp,0x10
c000b220:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b225:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b22c:	75 05                	jne    c000b233 <Computer::displayFeatures()+0x4b>
c000b22e:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b233:	52                   	push   edx
c000b234:	52                   	push   edx
c000b235:	50                   	push   eax
c000b236:	68 39 0c 02 c0       	push   0xc0020c39
c000b23b:	e8 19 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b248:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b24f:	75 05                	jne    c000b256 <Computer::displayFeatures()+0x6e>
c000b251:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b256:	51                   	push   ecx
c000b257:	51                   	push   ecx
c000b258:	50                   	push   eax
c000b259:	68 4a 0c 02 c0       	push   0xc0020c4a
c000b25e:	e8 f6 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b263:	83 c4 10             	add    esp,0x10
c000b266:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b26b:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b272:	75 05                	jne    c000b279 <Computer::displayFeatures()+0x91>
c000b274:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b279:	52                   	push   edx
c000b27a:	52                   	push   edx
c000b27b:	50                   	push   eax
c000b27c:	68 5b 0c 02 c0       	push   0xc0020c5b
c000b281:	e8 d3 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b28e:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b295:	75 05                	jne    c000b29c <Computer::displayFeatures()+0xb4>
c000b297:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b29c:	51                   	push   ecx
c000b29d:	51                   	push   ecx
c000b29e:	50                   	push   eax
c000b29f:	68 6c 0c 02 c0       	push   0xc0020c6c
c000b2a4:	e8 b0 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b2b1:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b2b8:	75 05                	jne    c000b2bf <Computer::displayFeatures()+0xd7>
c000b2ba:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b2bf:	52                   	push   edx
c000b2c0:	52                   	push   edx
c000b2c1:	50                   	push   eax
c000b2c2:	68 7d 0c 02 c0       	push   0xc0020c7d
c000b2c7:	e8 8d 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b2d4:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b2db:	75 05                	jne    c000b2e2 <Computer::displayFeatures()+0xfa>
c000b2dd:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b2e2:	51                   	push   ecx
c000b2e3:	51                   	push   ecx
c000b2e4:	50                   	push   eax
c000b2e5:	68 8e 0c 02 c0       	push   0xc0020c8e
c000b2ea:	e8 6a 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2ef:	83 c4 10             	add    esp,0x10
c000b2f2:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b2f7:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b2fe:	78 05                	js     c000b305 <Computer::displayFeatures()+0x11d>
c000b300:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b305:	52                   	push   edx
c000b306:	52                   	push   edx
c000b307:	50                   	push   eax
c000b308:	68 9f 0c 02 c0       	push   0xc0020c9f
c000b30d:	e8 47 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b312:	83 c4 10             	add    esp,0x10
c000b315:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b31a:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b321:	0f 84 93 01 00 00    	je     c000b4ba <Computer::displayFeatures()+0x2d2>
c000b327:	51                   	push   ecx
c000b328:	51                   	push   ecx
c000b329:	50                   	push   eax
c000b32a:	68 b0 0c 02 c0       	push   0xc0020cb0
c000b32f:	e8 25 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b334:	83 c4 10             	add    esp,0x10
c000b337:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b33c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b343:	0f 84 67 01 00 00    	je     c000b4b0 <Computer::displayFeatures()+0x2c8>
c000b349:	52                   	push   edx
c000b34a:	52                   	push   edx
c000b34b:	50                   	push   eax
c000b34c:	68 c1 0c 02 c0       	push   0xc0020cc1
c000b351:	e8 03 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b356:	83 c4 10             	add    esp,0x10
c000b359:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b35e:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b365:	0f 84 3b 01 00 00    	je     c000b4a6 <Computer::displayFeatures()+0x2be>
c000b36b:	51                   	push   ecx
c000b36c:	51                   	push   ecx
c000b36d:	50                   	push   eax
c000b36e:	68 d2 0c 02 c0       	push   0xc0020cd2
c000b373:	e8 e1 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b380:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b387:	0f 84 0f 01 00 00    	je     c000b49c <Computer::displayFeatures()+0x2b4>
c000b38d:	52                   	push   edx
c000b38e:	52                   	push   edx
c000b38f:	50                   	push   eax
c000b390:	68 e3 0c 02 c0       	push   0xc0020ce3
c000b395:	e8 bf 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b3a2:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b3a9:	0f 84 e3 00 00 00    	je     c000b492 <Computer::displayFeatures()+0x2aa>
c000b3af:	51                   	push   ecx
c000b3b0:	51                   	push   ecx
c000b3b1:	50                   	push   eax
c000b3b2:	68 f4 0c 02 c0       	push   0xc0020cf4
c000b3b7:	e8 9d 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3bc:	83 c4 10             	add    esp,0x10
c000b3bf:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b3c4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b3cb:	0f 84 b7 00 00 00    	je     c000b488 <Computer::displayFeatures()+0x2a0>
c000b3d1:	52                   	push   edx
c000b3d2:	52                   	push   edx
c000b3d3:	50                   	push   eax
c000b3d4:	68 05 0d 02 c0       	push   0xc0020d05
c000b3d9:	e8 7b 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b3e6:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b3ed:	0f 84 8b 00 00 00    	je     c000b47e <Computer::displayFeatures()+0x296>
c000b3f3:	51                   	push   ecx
c000b3f4:	51                   	push   ecx
c000b3f5:	50                   	push   eax
c000b3f6:	68 16 0d 02 c0       	push   0xc0020d16
c000b3fb:	e8 59 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b408:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b40f:	78 05                	js     c000b416 <Computer::displayFeatures()+0x22e>
c000b411:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b416:	52                   	push   edx
c000b417:	52                   	push   edx
c000b418:	50                   	push   eax
c000b419:	68 27 0d 02 c0       	push   0xc0020d27
c000b41e:	e8 36 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b423:	83 c4 10             	add    esp,0x10
c000b426:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b42b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b432:	74 43                	je     c000b477 <Computer::displayFeatures()+0x28f>
c000b434:	51                   	push   ecx
c000b435:	51                   	push   ecx
c000b436:	50                   	push   eax
c000b437:	68 38 0d 02 c0       	push   0xc0020d38
c000b43c:	e8 18 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c000b449:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b450:	74 1e                	je     c000b470 <Computer::displayFeatures()+0x288>
c000b452:	52                   	push   edx
c000b453:	52                   	push   edx
c000b454:	50                   	push   eax
c000b455:	68 49 0d 02 c0       	push   0xc0020d49
c000b45a:	e8 fa 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b45f:	c7 44 24 20 ae 23 02 c0 	mov    DWORD PTR [esp+0x20],0xc00223ae
c000b467:	83 c4 18             	add    esp,0x18
c000b46a:	5b                   	pop    ebx
c000b46b:	e9 e9 3c 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c000b470:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b475:	eb db                	jmp    c000b452 <Computer::displayFeatures()+0x26a>
c000b477:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b47c:	eb b6                	jmp    c000b434 <Computer::displayFeatures()+0x24c>
c000b47e:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b483:	e9 6b ff ff ff       	jmp    c000b3f3 <Computer::displayFeatures()+0x20b>
c000b488:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b48d:	e9 3f ff ff ff       	jmp    c000b3d1 <Computer::displayFeatures()+0x1e9>
c000b492:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b497:	e9 13 ff ff ff       	jmp    c000b3af <Computer::displayFeatures()+0x1c7>
c000b49c:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b4a1:	e9 e7 fe ff ff       	jmp    c000b38d <Computer::displayFeatures()+0x1a5>
c000b4a6:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b4ab:	e9 bb fe ff ff       	jmp    c000b36b <Computer::displayFeatures()+0x183>
c000b4b0:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b4b5:	e9 8f fe ff ff       	jmp    c000b349 <Computer::displayFeatures()+0x161>
c000b4ba:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c000b4bf:	e9 63 fe ff ff       	jmp    c000b327 <Computer::displayFeatures()+0x13f>

c000b4c4 <Computer::rdmsr(unsigned int)>:
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b4d2:	74 0a                	je     c000b4de <Computer::rdmsr(unsigned int)+0x1a>
c000b4d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4d8:	0f 32                	rdmsr  
c000b4da:	83 c4 0c             	add    esp,0xc
c000b4dd:	c3                   	ret    
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	68 5a 0d 02 c0       	push   0xc0020d5a
c000b4e6:	e8 63 a0 00 00       	call   c001554e <Krnl::panic(char const*)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	eb e4                	jmp    c000b4d4 <Computer::rdmsr(unsigned int)+0x10>

c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b4f0:	57                   	push   edi
c000b4f1:	56                   	push   esi
c000b4f2:	52                   	push   edx
c000b4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b4fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b4ff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b506:	74 0e                	je     c000b516 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b508:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b50c:	89 f0                	mov    eax,esi
c000b50e:	89 fa                	mov    edx,edi
c000b510:	0f 30                	wrmsr  
c000b512:	58                   	pop    eax
c000b513:	5e                   	pop    esi
c000b514:	5f                   	pop    edi
c000b515:	c3                   	ret    
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	68 60 0d 02 c0       	push   0xc0020d60
c000b51e:	e8 2b a0 00 00       	call   c001554e <Krnl::panic(char const*)>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	eb e0                	jmp    c000b508 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b528 <Computer::nmiEnabled()>:
c000b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Computer::readCMOS(unsigned char)>:
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b53c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b543:	19 c0                	sbb    eax,eax
c000b545:	83 e0 80             	and    eax,0xffffff80
c000b548:	09 d0                	or     eax,edx
c000b54a:	e6 70                	out    0x70,al
c000b54c:	e4 71                	in     al,0x71
c000b54e:	c3                   	ret    
c000b54f:	90                   	nop

c000b550 <Computer::enableNMI(bool)>:
c000b550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b558:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b55e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b566:	eb cc                	jmp    c000b534 <Computer::readCMOS(unsigned char)>

c000b568 <Computer::open(int, int, void*)>:
c000b568:	56                   	push   esi
c000b569:	53                   	push   ebx
c000b56a:	83 ec 10             	sub    esp,0x10
c000b56d:	f6 05 a0 42 02 c0 04 	test   BYTE PTR ds:0xc00242a0,0x4
c000b574:	0f 94 05 c0 36 02 c0 	sete   BYTE PTR ds:0xc00236c0
c000b57b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b57f:	68 68 22 00 00       	push   0x2268
c000b584:	e8 9b 3a 00 00       	call   c000f024 <operator new(unsigned long)>
c000b589:	89 c6                	mov    esi,eax
c000b58b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58e:	e8 85 83 00 00       	call   c0013918 <ACPI::ACPI()>
c000b593:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b599:	59                   	pop    ecx
c000b59a:	58                   	pop    eax
c000b59b:	56                   	push   esi
c000b59c:	53                   	push   ebx
c000b59d:	e8 cc 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b5a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5a5:	e8 44 fa ff ff       	call   c000afee <Computer::detectFeatures()>
c000b5aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5ad:	e8 36 fc ff ff       	call   c000b1e8 <Computer::displayFeatures()>
c000b5b2:	58                   	pop    eax
c000b5b3:	5a                   	pop    edx
c000b5b4:	6a 01                	push   0x1
c000b5b6:	53                   	push   ebx
c000b5b7:	e8 94 ff ff ff       	call   c000b550 <Computer::enableNMI(bool)>
c000b5bc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b5c3:	e8 5c 3a 00 00       	call   c000f024 <operator new(unsigned long)>
c000b5c8:	89 c6                	mov    esi,eax
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 24 8e 00 00       	call   c00143f6 <CPU::CPU()>
c000b5d2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b5d8:	59                   	pop    ecx
c000b5d9:	58                   	pop    eax
c000b5da:	56                   	push   esi
c000b5db:	53                   	push   ebx
c000b5dc:	e8 8d 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b5e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b5e7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ed:	51                   	push   ecx
c000b5ee:	6a 00                	push   0x0
c000b5f0:	6a 00                	push   0x0
c000b5f2:	50                   	push   eax
c000b5f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b5f6:	83 c4 20             	add    esp,0x20
c000b5f9:	e8 d8 54 00 00       	call   c0010ad6 <setupFPU()>
c000b5fe:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b604:	85 c0                	test   eax,eax
c000b606:	74 1e                	je     c000b626 <Computer::open(int, int, void*)+0xbe>
c000b608:	52                   	push   edx
c000b609:	52                   	push   edx
c000b60a:	50                   	push   eax
c000b60b:	53                   	push   ebx
c000b60c:	e8 5d 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b611:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b617:	8b 10                	mov    edx,DWORD PTR [eax]
c000b619:	6a 00                	push   0x0
c000b61b:	6a 00                	push   0x0
c000b61d:	6a 00                	push   0x0
c000b61f:	50                   	push   eax
c000b620:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b623:	83 c4 20             	add    esp,0x20
c000b626:	83 ec 0c             	sub    esp,0xc
c000b629:	68 df af 00 c0       	push   0xc000afdf
c000b62e:	e8 58 d1 00 00       	call   c001878b <setupMultitasking(void (*)())>
c000b633:	83 c4 14             	add    esp,0x14
c000b636:	83 c8 ff             	or     eax,0xffffffff
c000b639:	5b                   	pop    ebx
c000b63a:	5e                   	pop    esi
c000b63b:	c3                   	ret    

c000b63c <Computer::disableNMI()>:
c000b63c:	6a 00                	push   0x0
c000b63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b642:	50                   	push   eax
c000b643:	e8 08 ff ff ff       	call   c000b550 <Computer::enableNMI(bool)>
c000b648:	5a                   	pop    edx
c000b649:	59                   	pop    ecx
c000b64a:	c3                   	ret    
c000b64b:	90                   	nop

c000b64c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b654:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b65b:	19 c0                	sbb    eax,eax
c000b65d:	83 e0 80             	and    eax,0xffffff80
c000b660:	09 d0                	or     eax,edx
c000b662:	e6 70                	out    0x70,al
c000b664:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b668:	e6 71                	out    0x71,al
c000b66a:	c3                   	ret    
c000b66b:	90                   	nop

c000b66c <Computer::handleNMI()>:
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 10             	sub    esp,0x10
c000b671:	e4 92                	in     al,0x92
c000b673:	89 c6                	mov    esi,eax
c000b675:	e4 61                	in     al,0x61
c000b677:	68 66 0d 02 c0       	push   0xc0020d66
c000b67c:	88 c3                	mov    bl,al
c000b67e:	e8 d6 3a 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b683:	83 c4 10             	add    esp,0x10
c000b686:	83 e6 10             	and    esi,0x10
c000b689:	75 0d                	jne    c000b698 <Computer::handleNMI()+0x2c>
c000b68b:	f6 c3 40             	test   bl,0x40
c000b68e:	75 1d                	jne    c000b6ad <Computer::handleNMI()+0x41>
c000b690:	84 db                	test   bl,bl
c000b692:	78 2d                	js     c000b6c1 <Computer::handleNMI()+0x55>
c000b694:	58                   	pop    eax
c000b695:	5b                   	pop    ebx
c000b696:	5e                   	pop    esi
c000b697:	c3                   	ret    
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	68 77 0d 02 c0       	push   0xc0020d77
c000b6a0:	e8 a9 9e 00 00       	call   c001554e <Krnl::panic(char const*)>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	f6 c3 40             	test   bl,0x40
c000b6ab:	74 e3                	je     c000b690 <Computer::handleNMI()+0x24>
c000b6ad:	83 ec 0c             	sub    esp,0xc
c000b6b0:	68 84 0d 02 c0       	push   0xc0020d84
c000b6b5:	e8 94 9e 00 00       	call   c001554e <Krnl::panic(char const*)>
c000b6ba:	83 c4 10             	add    esp,0x10
c000b6bd:	84 db                	test   bl,bl
c000b6bf:	79 d3                	jns    c000b694 <Computer::handleNMI()+0x28>
c000b6c1:	c7 44 24 10 8e 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d8e
c000b6c9:	5a                   	pop    edx
c000b6ca:	5b                   	pop    ebx
c000b6cb:	5e                   	pop    esi
c000b6cc:	e9 7d 9e 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c000b6d1:	90                   	nop

c000b6d2 <Computer::setDiskActivityLight(int, bool)>:
c000b6d2:	56                   	push   esi
c000b6d3:	53                   	push   ebx
c000b6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b6d8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b6dd:	77 1c                	ja     c000b6fb <Computer::setDiskActivityLight(int, bool)+0x29>
c000b6df:	e4 92                	in     al,0x92
c000b6e1:	bb 40 00 00 00       	mov    ebx,0x40
c000b6e6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b6ea:	89 da                	mov    edx,ebx
c000b6ec:	d3 e2                	shl    edx,cl
c000b6ee:	83 f2 ff             	xor    edx,0xffffffff
c000b6f1:	89 f1                	mov    ecx,esi
c000b6f3:	21 d0                	and    eax,edx
c000b6f5:	d3 e3                	shl    ebx,cl
c000b6f7:	09 d8                	or     eax,ebx
c000b6f9:	e6 92                	out    0x92,al
c000b6fb:	5b                   	pop    ebx
c000b6fc:	5e                   	pop    esi
c000b6fd:	c3                   	ret    

c000b6fe <GDTEntry::setBase(unsigned int)>:
c000b6fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b702:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b706:	89 c1                	mov    ecx,eax
c000b708:	c1 e9 10             	shr    ecx,0x10
c000b70b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b70f:	c1 e8 18             	shr    eax,0x18
c000b712:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b715:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b718:	c3                   	ret    
c000b719:	90                   	nop

c000b71a <GDTEntry::setLimit(unsigned int)>:
c000b71a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b722:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b725:	66 89 01             	mov    WORD PTR [ecx],ax
c000b728:	c1 e8 10             	shr    eax,0x10
c000b72b:	83 e2 f0             	and    edx,0xfffffff0
c000b72e:	83 e0 0f             	and    eax,0xf
c000b731:	09 d0                	or     eax,edx
c000b733:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b736:	c3                   	ret    
c000b737:	90                   	nop

c000b738 <GDT::GDT()>:
c000b738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b73c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b746:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b74c:	90                   	nop
c000b74d:	c3                   	ret    

c000b74e <GDT::addEntry(GDTEntry)>:
c000b74e:	53                   	push   ebx
c000b74f:	83 ec 0c             	sub    esp,0xc
c000b752:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b756:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b758:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b75f:	52                   	push   edx
c000b760:	50                   	push   eax
c000b761:	68 c8 0d 02 c0       	push   0xc0020dc8
c000b766:	e8 ee 39 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b76b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b76d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b771:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b775:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b779:	8d 50 01             	lea    edx,[eax+0x1]
c000b77c:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b780:	89 13                	mov    DWORD PTR [ebx],edx
c000b782:	c1 e0 03             	shl    eax,0x3
c000b785:	83 c4 18             	add    esp,0x18
c000b788:	5b                   	pop    ebx
c000b789:	c3                   	ret    

c000b78a <GDT::getNumberOfEntries()>:
c000b78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b790:	c3                   	ret    
c000b791:	90                   	nop

c000b792 <GDT::flush()>:
c000b792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b796:	83 c0 04             	add    eax,0x4
c000b799:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b79c:	a3 92 42 02 c0       	mov    ds:0xc0024292,eax
c000b7a1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b7a8:	66 89 15 90 42 02 c0 	mov    WORD PTR ds:0xc0024290,dx
c000b7af:	e9 7f 4b ff ff       	jmp    c0000333 <loadGDT>

c000b7b4 <GDT::setup()>:
c000b7b4:	55                   	push   ebp
c000b7b5:	57                   	push   edi
c000b7b6:	56                   	push   esi
c000b7b7:	53                   	push   ebx
c000b7b8:	83 ec 3c             	sub    esp,0x3c
c000b7bb:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b7bf:	6a 00                	push   0x0
c000b7c1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b7c5:	53                   	push   ebx
c000b7c6:	e8 33 ff ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000b7cb:	6a 00                	push   0x0
c000b7cd:	53                   	push   ebx
c000b7ce:	e8 47 ff ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000b7d3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b7db:	6a 00                	push   0x0
c000b7dd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b7e1:	53                   	push   ebx
c000b7e2:	e8 17 ff ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000b7e7:	68 ff ff ff 00       	push   0xffffff
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 28 ff ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000b7f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7f6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b7fb:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b800:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b804:	83 c4 20             	add    esp,0x20
c000b807:	6a 00                	push   0x0
c000b809:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b80d:	53                   	push   ebx
c000b80e:	e8 eb fe ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000b813:	68 ff ff ff 00       	push   0xffffff
c000b818:	53                   	push   ebx
c000b819:	e8 fc fe ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000b81e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b822:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b826:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b82b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b82f:	0d 00 92 c0 00       	or     eax,0xc09200
c000b834:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b838:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b83c:	89 d8                	mov    eax,ebx
c000b83e:	80 cc 60             	or     ah,0x60
c000b841:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b845:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b849:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b84d:	83 c4 0c             	add    esp,0xc
c000b850:	89 f8                	mov    eax,edi
c000b852:	80 cc 60             	or     ah,0x60
c000b855:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b859:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b85d:	89 c7                	mov    edi,eax
c000b85f:	55                   	push   ebp
c000b860:	e8 e9 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b865:	83 c4 0c             	add    esp,0xc
c000b868:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b86c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b870:	55                   	push   ebp
c000b871:	e8 d8 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b876:	83 c4 0c             	add    esp,0xc
c000b879:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b87d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b881:	55                   	push   ebp
c000b882:	e8 c7 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b887:	83 c4 0c             	add    esp,0xc
c000b88a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b88e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b892:	53                   	push   ebx
c000b893:	51                   	push   ecx
c000b894:	55                   	push   ebp
c000b895:	e8 b4 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	57                   	push   edi
c000b89e:	56                   	push   esi
c000b89f:	55                   	push   ebp
c000b8a0:	e8 a9 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b8a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b8a8:	e8 e5 fe ff ff       	call   c000b792 <GDT::flush()>
c000b8ad:	83 c4 4c             	add    esp,0x4c
c000b8b0:	5b                   	pop    ebx
c000b8b1:	5e                   	pop    esi
c000b8b2:	5f                   	pop    edi
c000b8b3:	5d                   	pop    ebp
c000b8b4:	c3                   	ret    

c000b8b5 <idleFunction(void*)>:
c000b8b5:	53                   	push   ebx
c000b8b6:	83 ec 08             	sub    esp,0x8
c000b8b9:	e8 9b cc 00 00       	call   c0018559 <unlockScheduler()>
c000b8be:	e8 1f 8b 00 00       	call   c00143e2 <thisCPU()>
c000b8c3:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b8ca:	74 41                	je     c000b90d <idleFunction(void*)+0x58>
c000b8cc:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c000b8d1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b8d8:	74 33                	je     c000b90d <idleFunction(void*)+0x58>
c000b8da:	52                   	push   edx
c000b8db:	31 db                	xor    ebx,ebx
c000b8dd:	52                   	push   edx
c000b8de:	68 e1 00 00 00       	push   0xe1
c000b8e3:	50                   	push   eax
c000b8e4:	e8 db fb ff ff       	call   c000b4c4 <Computer::rdmsr(unsigned int)>
c000b8e9:	53                   	push   ebx
c000b8ea:	83 e0 02             	and    eax,0x2
c000b8ed:	50                   	push   eax
c000b8ee:	68 e1 00 00 00       	push   0xe1
c000b8f3:	ff 35 88 42 02 c0    	push   DWORD PTR ds:0xc0024288
c000b8f9:	e8 f2 fb ff ff       	call   c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b8fe:	83 c4 20             	add    esp,0x20
c000b901:	e8 4a 48 ff ff       	call   c0000150 <doTPAUSE>
c000b906:	e8 d5 39 01 00       	call   c001f2e0 <idleCommon()>
c000b90b:	eb f4                	jmp    c000b901 <idleFunction(void*)+0x4c>
c000b90d:	fb                   	sti    
c000b90e:	f4                   	hlt    
c000b90f:	e8 cc 39 01 00       	call   c001f2e0 <idleCommon()>
c000b914:	eb f7                	jmp    c000b90d <idleFunction(void*)+0x58>

c000b916 <IDTEntry::IDTEntry(bool)>:
c000b916:	83 ec 04             	sub    esp,0x4
c000b919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b91d:	88 04 24             	mov    BYTE PTR [esp],al
c000b920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b924:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b92a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b92e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b936:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b939:	83 e2 f0             	and    edx,0xfffffff0
c000b93c:	83 ca 0e             	or     edx,0xe
c000b93f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b946:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b949:	83 e2 ef             	and    edx,0xffffffef
c000b94c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b94f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b953:	74 04                	je     c000b959 <IDTEntry::IDTEntry(bool)+0x43>
c000b955:	b2 03                	mov    dl,0x3
c000b957:	eb 02                	jmp    c000b95b <IDTEntry::IDTEntry(bool)+0x45>
c000b959:	b2 00                	mov    dl,0x0
c000b95b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b95f:	83 e2 03             	and    edx,0x3
c000b962:	88 d1                	mov    cl,dl
c000b964:	c1 e1 05             	shl    ecx,0x5
c000b967:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b96a:	83 e2 9f             	and    edx,0xffffff9f
c000b96d:	09 ca                	or     edx,ecx
c000b96f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b976:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b979:	83 ca 80             	or     edx,0xffffff80
c000b97c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b97f:	90                   	nop
c000b980:	83 c4 04             	add    esp,0x4
c000b983:	c3                   	ret    

c000b984 <IDTEntry::setOffset(unsigned int)>:
c000b984:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b98c:	66 89 02             	mov    WORD PTR [edx],ax
c000b98f:	c1 e8 10             	shr    eax,0x10
c000b992:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b996:	c3                   	ret    
c000b997:	90                   	nop

c000b998 <IDT::IDT()>:
c000b998:	90                   	nop
c000b999:	c3                   	ret    

c000b99a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99e:	83 c0 30             	add    eax,0x30
c000b9a1:	c3                   	ret    

c000b9a2 <IDT::addEntry(IDTEntry, int)>:
c000b9a2:	53                   	push   ebx
c000b9a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b9ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b9af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9b3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b9b6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b9ba:	5b                   	pop    ebx
c000b9bb:	c3                   	ret    

c000b9bc <IDT::addEntry(int, void (*)(), bool)>:
c000b9bc:	53                   	push   ebx
c000b9bd:	83 ec 10             	sub    esp,0x10
c000b9c0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b9c5:	50                   	push   eax
c000b9c6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b9ca:	53                   	push   ebx
c000b9cb:	e8 46 ff ff ff       	call   c000b916 <IDTEntry::IDTEntry(bool)>
c000b9d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b9d4:	53                   	push   ebx
c000b9d5:	e8 aa ff ff ff       	call   c000b984 <IDTEntry::setOffset(unsigned int)>
c000b9da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b9de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9ea:	e8 b3 ff ff ff       	call   c000b9a2 <IDT::addEntry(IDTEntry, int)>
c000b9ef:	83 c4 30             	add    esp,0x30
c000b9f2:	5b                   	pop    ebx
c000b9f3:	c3                   	ret    

c000b9f4 <IDT::flush()>:
c000b9f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9f8:	66 c7 05 98 42 02 c0 ff 07 	mov    WORD PTR ds:0xc0024298,0x7ff
c000ba01:	a3 9a 42 02 c0       	mov    ds:0xc002429a,eax
c000ba06:	0f 01 1d 98 42 02 c0 	lidtd  ds:0xc0024298
c000ba0d:	c3                   	ret    

c000ba0e <IDT::setup()>:
c000ba0e:	57                   	push   edi
c000ba0f:	56                   	push   esi
c000ba10:	53                   	push   ebx
c000ba11:	83 ec 10             	sub    esp,0x10
c000ba14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba18:	6a 00                	push   0x0
c000ba1a:	68 53 03 00 c0       	push   0xc0000353
c000ba1f:	6a 00                	push   0x0
c000ba21:	53                   	push   ebx
c000ba22:	e8 95 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba27:	6a 00                	push   0x0
c000ba29:	68 63 03 00 c0       	push   0xc0000363
c000ba2e:	6a 01                	push   0x1
c000ba30:	53                   	push   ebx
c000ba31:	e8 86 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba36:	83 c4 20             	add    esp,0x20
c000ba39:	6a 00                	push   0x0
c000ba3b:	68 6d 03 00 c0       	push   0xc000036d
c000ba40:	6a 02                	push   0x2
c000ba42:	53                   	push   ebx
c000ba43:	e8 74 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba48:	6a 00                	push   0x0
c000ba4a:	68 77 03 00 c0       	push   0xc0000377
c000ba4f:	6a 03                	push   0x3
c000ba51:	53                   	push   ebx
c000ba52:	e8 65 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba57:	83 c4 20             	add    esp,0x20
c000ba5a:	6a 00                	push   0x0
c000ba5c:	68 81 03 00 c0       	push   0xc0000381
c000ba61:	6a 04                	push   0x4
c000ba63:	53                   	push   ebx
c000ba64:	e8 53 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba69:	6a 00                	push   0x0
c000ba6b:	68 8b 03 00 c0       	push   0xc000038b
c000ba70:	6a 05                	push   0x5
c000ba72:	53                   	push   ebx
c000ba73:	e8 44 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba78:	83 c4 20             	add    esp,0x20
c000ba7b:	6a 00                	push   0x0
c000ba7d:	68 95 03 00 c0       	push   0xc0000395
c000ba82:	6a 06                	push   0x6
c000ba84:	53                   	push   ebx
c000ba85:	e8 32 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba8a:	6a 00                	push   0x0
c000ba8c:	68 9f 03 00 c0       	push   0xc000039f
c000ba91:	6a 07                	push   0x7
c000ba93:	53                   	push   ebx
c000ba94:	e8 23 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba99:	83 c4 20             	add    esp,0x20
c000ba9c:	6a 00                	push   0x0
c000ba9e:	68 a9 03 00 c0       	push   0xc00003a9
c000baa3:	6a 08                	push   0x8
c000baa5:	53                   	push   ebx
c000baa6:	e8 11 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000baab:	6a 00                	push   0x0
c000baad:	68 b1 03 00 c0       	push   0xc00003b1
c000bab2:	6a 09                	push   0x9
c000bab4:	53                   	push   ebx
c000bab5:	e8 02 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000baba:	83 c4 20             	add    esp,0x20
c000babd:	6a 00                	push   0x0
c000babf:	68 bb 03 00 c0       	push   0xc00003bb
c000bac4:	6a 0a                	push   0xa
c000bac6:	53                   	push   ebx
c000bac7:	e8 f0 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bacc:	6a 00                	push   0x0
c000bace:	68 c3 03 00 c0       	push   0xc00003c3
c000bad3:	6a 0b                	push   0xb
c000bad5:	53                   	push   ebx
c000bad6:	e8 e1 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000badb:	83 c4 20             	add    esp,0x20
c000bade:	6a 00                	push   0x0
c000bae0:	68 cb 03 00 c0       	push   0xc00003cb
c000bae5:	6a 0c                	push   0xc
c000bae7:	53                   	push   ebx
c000bae8:	e8 cf fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000baed:	6a 00                	push   0x0
c000baef:	68 d3 03 00 c0       	push   0xc00003d3
c000baf4:	6a 0d                	push   0xd
c000baf6:	53                   	push   ebx
c000baf7:	e8 c0 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bafc:	83 c4 20             	add    esp,0x20
c000baff:	6a 00                	push   0x0
c000bb01:	68 db 03 00 c0       	push   0xc00003db
c000bb06:	6a 0e                	push   0xe
c000bb08:	53                   	push   ebx
c000bb09:	e8 ae fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb0e:	6a 00                	push   0x0
c000bb10:	68 e3 03 00 c0       	push   0xc00003e3
c000bb15:	6a 0f                	push   0xf
c000bb17:	53                   	push   ebx
c000bb18:	e8 9f fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb1d:	83 c4 20             	add    esp,0x20
c000bb20:	6a 00                	push   0x0
c000bb22:	68 ed 03 00 c0       	push   0xc00003ed
c000bb27:	6a 10                	push   0x10
c000bb29:	53                   	push   ebx
c000bb2a:	e8 8d fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb2f:	6a 00                	push   0x0
c000bb31:	68 f7 03 00 c0       	push   0xc00003f7
c000bb36:	6a 11                	push   0x11
c000bb38:	53                   	push   ebx
c000bb39:	e8 7e fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb3e:	83 c4 20             	add    esp,0x20
c000bb41:	6a 00                	push   0x0
c000bb43:	68 01 04 00 c0       	push   0xc0000401
c000bb48:	6a 12                	push   0x12
c000bb4a:	53                   	push   ebx
c000bb4b:	e8 6c fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb50:	6a 01                	push   0x1
c000bb52:	68 0b 04 00 c0       	push   0xc000040b
c000bb57:	6a 60                	push   0x60
c000bb59:	53                   	push   ebx
c000bb5a:	e8 5d fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	6a 00                	push   0x0
c000bb64:	68 15 04 00 c0       	push   0xc0000415
c000bb69:	6a 20                	push   0x20
c000bb6b:	53                   	push   ebx
c000bb6c:	e8 4b fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb71:	6a 00                	push   0x0
c000bb73:	68 1f 04 00 c0       	push   0xc000041f
c000bb78:	6a 21                	push   0x21
c000bb7a:	53                   	push   ebx
c000bb7b:	e8 3c fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb80:	83 c4 20             	add    esp,0x20
c000bb83:	6a 00                	push   0x0
c000bb85:	68 29 04 00 c0       	push   0xc0000429
c000bb8a:	6a 22                	push   0x22
c000bb8c:	53                   	push   ebx
c000bb8d:	e8 2a fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb92:	6a 00                	push   0x0
c000bb94:	68 33 04 00 c0       	push   0xc0000433
c000bb99:	6a 23                	push   0x23
c000bb9b:	53                   	push   ebx
c000bb9c:	e8 1b fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bba1:	83 c4 20             	add    esp,0x20
c000bba4:	6a 00                	push   0x0
c000bba6:	68 3d 04 00 c0       	push   0xc000043d
c000bbab:	6a 24                	push   0x24
c000bbad:	53                   	push   ebx
c000bbae:	e8 09 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbb3:	6a 00                	push   0x0
c000bbb5:	68 47 04 00 c0       	push   0xc0000447
c000bbba:	6a 25                	push   0x25
c000bbbc:	53                   	push   ebx
c000bbbd:	e8 fa fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbc2:	83 c4 20             	add    esp,0x20
c000bbc5:	6a 00                	push   0x0
c000bbc7:	68 51 04 00 c0       	push   0xc0000451
c000bbcc:	6a 26                	push   0x26
c000bbce:	53                   	push   ebx
c000bbcf:	e8 e8 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbd4:	6a 00                	push   0x0
c000bbd6:	68 5b 04 00 c0       	push   0xc000045b
c000bbdb:	6a 27                	push   0x27
c000bbdd:	53                   	push   ebx
c000bbde:	e8 d9 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbe3:	83 c4 20             	add    esp,0x20
c000bbe6:	6a 00                	push   0x0
c000bbe8:	68 65 04 00 c0       	push   0xc0000465
c000bbed:	6a 28                	push   0x28
c000bbef:	53                   	push   ebx
c000bbf0:	e8 c7 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbf5:	6a 00                	push   0x0
c000bbf7:	68 6f 04 00 c0       	push   0xc000046f
c000bbfc:	6a 29                	push   0x29
c000bbfe:	53                   	push   ebx
c000bbff:	e8 b8 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc04:	83 c4 20             	add    esp,0x20
c000bc07:	6a 00                	push   0x0
c000bc09:	68 79 04 00 c0       	push   0xc0000479
c000bc0e:	6a 2a                	push   0x2a
c000bc10:	53                   	push   ebx
c000bc11:	e8 a6 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc16:	6a 00                	push   0x0
c000bc18:	68 83 04 00 c0       	push   0xc0000483
c000bc1d:	6a 2b                	push   0x2b
c000bc1f:	53                   	push   ebx
c000bc20:	e8 97 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc25:	83 c4 20             	add    esp,0x20
c000bc28:	6a 00                	push   0x0
c000bc2a:	68 8d 04 00 c0       	push   0xc000048d
c000bc2f:	6a 2c                	push   0x2c
c000bc31:	53                   	push   ebx
c000bc32:	e8 85 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc37:	6a 00                	push   0x0
c000bc39:	68 97 04 00 c0       	push   0xc0000497
c000bc3e:	6a 2d                	push   0x2d
c000bc40:	53                   	push   ebx
c000bc41:	e8 76 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc46:	83 c4 20             	add    esp,0x20
c000bc49:	6a 00                	push   0x0
c000bc4b:	68 a1 04 00 c0       	push   0xc00004a1
c000bc50:	6a 2e                	push   0x2e
c000bc52:	53                   	push   ebx
c000bc53:	e8 64 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc58:	6a 00                	push   0x0
c000bc5a:	68 ab 04 00 c0       	push   0xc00004ab
c000bc5f:	6a 2f                	push   0x2f
c000bc61:	53                   	push   ebx
c000bc62:	e8 55 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc67:	83 c4 20             	add    esp,0x20
c000bc6a:	6a 00                	push   0x0
c000bc6c:	68 b5 04 00 c0       	push   0xc00004b5
c000bc71:	6a 30                	push   0x30
c000bc73:	53                   	push   ebx
c000bc74:	e8 43 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc79:	6a 00                	push   0x0
c000bc7b:	68 bf 04 00 c0       	push   0xc00004bf
c000bc80:	6a 31                	push   0x31
c000bc82:	53                   	push   ebx
c000bc83:	e8 34 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc88:	83 c4 20             	add    esp,0x20
c000bc8b:	6a 00                	push   0x0
c000bc8d:	68 c9 04 00 c0       	push   0xc00004c9
c000bc92:	6a 32                	push   0x32
c000bc94:	53                   	push   ebx
c000bc95:	e8 22 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc9a:	6a 00                	push   0x0
c000bc9c:	68 d3 04 00 c0       	push   0xc00004d3
c000bca1:	6a 33                	push   0x33
c000bca3:	53                   	push   ebx
c000bca4:	e8 13 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bca9:	83 c4 20             	add    esp,0x20
c000bcac:	6a 00                	push   0x0
c000bcae:	68 dd 04 00 c0       	push   0xc00004dd
c000bcb3:	6a 34                	push   0x34
c000bcb5:	53                   	push   ebx
c000bcb6:	e8 01 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bcbb:	6a 00                	push   0x0
c000bcbd:	68 e7 04 00 c0       	push   0xc00004e7
c000bcc2:	6a 35                	push   0x35
c000bcc4:	53                   	push   ebx
c000bcc5:	e8 f2 fc ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bcca:	83 c4 20             	add    esp,0x20
c000bccd:	6a 00                	push   0x0
c000bccf:	68 f1 04 00 c0       	push   0xc00004f1
c000bcd4:	6a 36                	push   0x36
c000bcd6:	53                   	push   ebx
c000bcd7:	e8 e0 fc ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bcdc:	6a 00                	push   0x0
c000bcde:	68 fb 04 00 c0       	push   0xc00004fb
c000bce3:	6a 37                	push   0x37
c000bce5:	53                   	push   ebx
c000bce6:	e8 d1 fc ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bceb:	83 c4 20             	add    esp,0x20
c000bcee:	e8 d8 25 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bcf3:	52                   	push   edx
c000bcf4:	6a 03                	push   0x3
c000bcf6:	6a 02                	push   0x2
c000bcf8:	50                   	push   eax
c000bcf9:	e8 0e 2c 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bcfe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bd05:	89 c6                	mov    esi,eax
c000bd07:	e8 18 33 00 00       	call   c000f024 <operator new(unsigned long)>
c000bd0c:	81 c6 00 20 00 00    	add    esi,0x2000
c000bd12:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd15:	89 c7                	mov    edi,eax
c000bd17:	e8 ee 1c 00 00       	call   c000da0a <TSS::TSS()>
c000bd1c:	83 c4 0c             	add    esp,0xc
c000bd1f:	68 a9 03 00 c0       	push   0xc00003a9
c000bd24:	56                   	push   esi
c000bd25:	57                   	push   edi
c000bd26:	e8 1f 1d 00 00       	call   c000da4a <TSS::setup(unsigned long, unsigned long)>
c000bd2b:	59                   	pop    ecx
c000bd2c:	89 c6                	mov    esi,eax
c000bd2e:	5f                   	pop    edi
c000bd2f:	6a 00                	push   0x0
c000bd31:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bd35:	50                   	push   eax
c000bd36:	e8 db fb ff ff       	call   c000b916 <IDTEntry::IDTEntry(bool)>
c000bd3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd3f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bd44:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bd4a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000bd51:	80 ce 05             	or     dh,0x5
c000bd54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000bd5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd63:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000bd66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bd69:	e8 86 fc ff ff       	call   c000b9f4 <IDT::flush()>
c000bd6e:	83 c4 20             	add    esp,0x20
c000bd71:	5b                   	pop    ebx
c000bd72:	5e                   	pop    esi
c000bd73:	5f                   	pop    edi
c000bd74:	c3                   	ret    

c000bd75 <sbrk>:
c000bd75:	55                   	push   ebp
c000bd76:	57                   	push   edi
c000bd77:	56                   	push   esi
c000bd78:	53                   	push   ebx
c000bd79:	83 ec 1c             	sub    esp,0x1c
c000bd7c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bd80:	85 db                	test   ebx,ebx
c000bd82:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c000bd87:	0f 84 e4 00 00 00    	je     c000be71 <sbrk+0xfc>
c000bd8d:	78 3d                	js     c000bdcc <sbrk+0x57>
c000bd8f:	e8 4e 86 00 00       	call   c00143e2 <thisCPU()>
c000bd94:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bd9a:	83 e0 01             	and    eax,0x1
c000bd9d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bda1:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c000bda6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdaa:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bdb0:	89 d8                	mov    eax,ebx
c000bdb2:	c1 f8 1f             	sar    eax,0x1f
c000bdb5:	25 ff 0f 00 00       	and    eax,0xfff
c000bdba:	01 c3                	add    ebx,eax
c000bdbc:	c1 fb 0c             	sar    ebx,0xc
c000bdbf:	89 df                	mov    edi,ebx
c000bdc1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bdc5:	be 00 00 00 00       	mov    esi,0x0
c000bdca:	eb 2a                	jmp    c000bdf6 <sbrk+0x81>
c000bdcc:	83 ec 08             	sub    esp,0x8
c000bdcf:	53                   	push   ebx
c000bdd0:	68 e4 0d 02 c0       	push   0xc0020de4
c000bdd5:	e8 7f 33 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000bdda:	83 c4 10             	add    esp,0x10
c000bddd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bde2:	e9 8a 00 00 00       	jmp    c000be71 <sbrk+0xfc>
c000bde7:	81 05 a0 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00236a0,0x1000
c000bdf1:	46                   	inc    esi
c000bdf2:	39 f7                	cmp    edi,esi
c000bdf4:	74 34                	je     c000be2a <sbrk+0xb5>
c000bdf6:	e8 d0 24 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bdfb:	89 c3                	mov    ebx,eax
c000bdfd:	8b 2d a0 36 02 c0    	mov    ebp,DWORD PTR ds:0xc00236a0
c000be03:	e8 f5 06 00 00       	call   c000c4fd <Phys::allocatePage()>
c000be08:	68 01 04 00 00       	push   0x401
c000be0d:	55                   	push   ebp
c000be0e:	50                   	push   eax
c000be0f:	53                   	push   ebx
c000be10:	e8 f5 29 00 00       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000be15:	83 c4 10             	add    esp,0x10
c000be18:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be1d:	74 c8                	je     c000bde7 <sbrk+0x72>
c000be1f:	8b 1d a0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236a0
c000be25:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be28:	eb bd                	jmp    c000bde7 <sbrk+0x72>
c000be2a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be2f:	74 48                	je     c000be79 <sbrk+0x104>
c000be31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be35:	89 d3                	mov    ebx,edx
c000be37:	c1 eb 0a             	shr    ebx,0xa
c000be3a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000be40:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000be46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be4a:	c1 e0 0c             	shl    eax,0xc
c000be4d:	01 d0                	add    eax,edx
c000be4f:	c1 e8 0a             	shr    eax,0xa
c000be52:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be57:	2d 00 00 40 00       	sub    eax,0x400000
c000be5c:	39 c3                	cmp    ebx,eax
c000be5e:	77 0d                	ja     c000be6d <sbrk+0xf8>
c000be60:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be63:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be69:	39 d8                	cmp    eax,ebx
c000be6b:	73 f3                	jae    c000be60 <sbrk+0xeb>
c000be6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be71:	83 c4 1c             	add    esp,0x1c
c000be74:	5b                   	pop    ebx
c000be75:	5e                   	pop    esi
c000be76:	5f                   	pop    edi
c000be77:	5d                   	pop    ebp
c000be78:	c3                   	ret    
c000be79:	e8 77 34 01 00       	call   c001f2f5 <CPU::readCR3()>
c000be7e:	83 ec 0c             	sub    esp,0xc
c000be81:	50                   	push   eax
c000be82:	e8 80 34 01 00       	call   c001f307 <CPU::writeCR3(unsigned long)>
c000be87:	83 c4 10             	add    esp,0x10
c000be8a:	eb e1                	jmp    c000be6d <sbrk+0xf8>

c000be8c <mmap>:
c000be8c:	83 ec 18             	sub    esp,0x18
c000be8f:	68 14 0e 02 c0       	push   0xc0020e14
c000be94:	e8 b5 96 00 00       	call   c001554e <Krnl::panic(char const*)>
c000be99:	b8 00 00 00 00       	mov    eax,0x0
c000be9e:	83 c4 1c             	add    esp,0x1c
c000bea1:	c3                   	ret    

c000bea2 <munmap>:
c000bea2:	83 ec 18             	sub    esp,0x18
c000bea5:	68 19 0e 02 c0       	push   0xc0020e19
c000beaa:	e8 9f 96 00 00       	call   c001554e <Krnl::panic(char const*)>
c000beaf:	b8 00 00 00 00       	mov    eax,0x0
c000beb4:	83 c4 1c             	add    esp,0x1c
c000beb7:	c3                   	ret    

c000beb8 <liballoc_lock()>:
c000beb8:	83 ec 0c             	sub    esp,0xc
c000bebb:	e8 97 c6 00 00       	call   c0018557 <lockScheduler()>
c000bec0:	b8 00 00 00 00       	mov    eax,0x0
c000bec5:	83 c4 0c             	add    esp,0xc
c000bec8:	c3                   	ret    

c000bec9 <liballoc_unlock()>:
c000bec9:	83 ec 0c             	sub    esp,0xc
c000becc:	e8 88 c6 00 00       	call   c0018559 <unlockScheduler()>
c000bed1:	b8 00 00 00 00       	mov    eax,0x0
c000bed6:	83 c4 0c             	add    esp,0xc
c000bed9:	c3                   	ret    

c000beda <liballoc_alloc(int)>:
c000beda:	83 ec 0c             	sub    esp,0xc
c000bedd:	e8 e9 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bee2:	83 ec 04             	sub    esp,0x4
c000bee5:	6a 01                	push   0x1
c000bee7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000beeb:	50                   	push   eax
c000beec:	e8 1b 2a 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bef1:	83 c4 1c             	add    esp,0x1c
c000bef4:	c3                   	ret    

c000bef5 <liballoc_free(void*, int)>:
c000bef5:	83 ec 0c             	sub    esp,0xc
c000bef8:	e8 ce 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000befd:	83 ec 08             	sub    esp,0x8
c000bf00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf04:	50                   	push   eax
c000bf05:	e8 a2 26 00 00       	call   c000e5ac <VAS::freeAllocatedPages(unsigned long)>
c000bf0a:	b8 00 00 00 00       	mov    eax,0x0
c000bf0f:	83 c4 1c             	add    esp,0x1c
c000bf12:	c3                   	ret    

c000bf13 <realloc>:
c000bf13:	83 ec 14             	sub    esp,0x14
c000bf16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf1e:	e8 63 54 ff ff       	call   c0001386 <dlrealloc>
c000bf23:	83 c4 1c             	add    esp,0x1c
c000bf26:	c3                   	ret    

c000bf27 <malloc>:
c000bf27:	83 ec 18             	sub    esp,0x18
c000bf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2e:	e8 16 4f ff ff       	call   c0000e49 <dlmalloc>
c000bf33:	83 c4 1c             	add    esp,0x1c
c000bf36:	c3                   	ret    

c000bf37 <free>:
c000bf37:	83 ec 18             	sub    esp,0x18
c000bf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3e:	e8 a8 4b ff ff       	call   c0000aeb <dlfree>
c000bf43:	83 c4 1c             	add    esp,0x1c
c000bf46:	c3                   	ret    

c000bf47 <rfree>:
c000bf47:	83 ec 18             	sub    esp,0x18
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	e8 e4 ff ff ff       	call   c000bf37 <free>
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	c3                   	ret    

c000bf57 <calloc>:
c000bf57:	56                   	push   esi
c000bf58:	53                   	push   ebx
c000bf59:	83 ec 10             	sub    esp,0x10
c000bf5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf60:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bf65:	53                   	push   ebx
c000bf66:	e8 bc ff ff ff       	call   c000bf27 <malloc>
c000bf6b:	89 c6                	mov    esi,eax
c000bf6d:	83 c4 0c             	add    esp,0xc
c000bf70:	53                   	push   ebx
c000bf71:	6a 00                	push   0x0
c000bf73:	50                   	push   eax
c000bf74:	e8 8f 46 ff ff       	call   c0000608 <memset>
c000bf79:	89 f0                	mov    eax,esi
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	5b                   	pop    ebx
c000bf7f:	5e                   	pop    esi
c000bf80:	c3                   	ret    

c000bf81 <hwTextMode_loadInData(VgaText*)>:
c000bf81:	57                   	push   edi
c000bf82:	56                   	push   esi
c000bf83:	53                   	push   ebx
c000bf84:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bf88:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bf8e:	85 c0                	test   eax,eax
c000bf90:	7e 30                	jle    c000bfc2 <hwTextMode_loadInData(VgaText*)+0x41>
c000bf92:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bf95:	31 f6                	xor    esi,esi
c000bf97:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bf9a:	31 c0                	xor    eax,eax
c000bf9c:	c1 e1 05             	shl    ecx,0x5
c000bf9f:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bfa5:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bfa9:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bfad:	40                   	inc    eax
c000bfae:	83 f8 50             	cmp    eax,0x50
c000bfb1:	75 f2                	jne    c000bfa5 <hwTextMode_loadInData(VgaText*)+0x24>
c000bfb3:	46                   	inc    esi
c000bfb4:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bfba:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bfc0:	7f d5                	jg     c000bf97 <hwTextMode_loadInData(VgaText*)+0x16>
c000bfc2:	5b                   	pop    ebx
c000bfc3:	5e                   	pop    esi
c000bfc4:	5f                   	pop    edi
c000bfc5:	c3                   	ret    

c000bfc6 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bfc6:	56                   	push   esi
c000bfc7:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bfcc:	53                   	push   ebx
c000bfcd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfd5:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bfdb:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bfe1:	c1 e0 04             	shl    eax,0x4
c000bfe4:	83 e6 0f             	and    esi,0xf
c000bfe7:	25 ff 00 00 00       	and    eax,0xff
c000bfec:	83 c2 02             	add    edx,0x2
c000bfef:	09 f0                	or     eax,esi
c000bff1:	41                   	inc    ecx
c000bff2:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bff6:	c1 e0 08             	shl    eax,0x8
c000bff9:	81 e6 ff 00 00 00    	and    esi,0xff
c000bfff:	09 f0                	or     eax,esi
c000c001:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c005:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c00b:	75 c8                	jne    c000bfd5 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c00d:	5b                   	pop    ebx
c000c00e:	5e                   	pop    esi
c000c00f:	c3                   	ret    

c000c010 <hwTextMode_showCursor(VgaText*, bool)>:
c000c010:	56                   	push   esi
c000c011:	53                   	push   ebx
c000c012:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c017:	74 38                	je     c000c051 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c019:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c01e:	b0 0a                	mov    al,0xa
c000c020:	89 da                	mov    edx,ebx
c000c022:	ee                   	out    dx,al
c000c023:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c028:	89 ca                	mov    edx,ecx
c000c02a:	ec                   	in     al,dx
c000c02b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c02f:	b2 0f                	mov    dl,0xf
c000c031:	83 e0 c0             	and    eax,0xffffffc0
c000c034:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c03a:	09 d0                	or     eax,edx
c000c03c:	89 ca                	mov    edx,ecx
c000c03e:	ee                   	out    dx,al
c000c03f:	b0 0b                	mov    al,0xb
c000c041:	89 da                	mov    edx,ebx
c000c043:	ee                   	out    dx,al
c000c044:	89 ca                	mov    edx,ecx
c000c046:	ec                   	in     al,dx
c000c047:	83 e0 e0             	and    eax,0xffffffe0
c000c04a:	83 c8 0f             	or     eax,0xf
c000c04d:	ee                   	out    dx,al
c000c04e:	5b                   	pop    ebx
c000c04f:	5e                   	pop    esi
c000c050:	c3                   	ret    
c000c051:	b0 0a                	mov    al,0xa
c000c053:	ba d4 03 00 00       	mov    edx,0x3d4
c000c058:	ee                   	out    dx,al
c000c059:	b0 20                	mov    al,0x20
c000c05b:	ba d5 03 00 00       	mov    edx,0x3d5
c000c060:	ee                   	out    dx,al
c000c061:	5b                   	pop    ebx
c000c062:	5e                   	pop    esi
c000c063:	c3                   	ret    

c000c064 <hwTextMode_update(VgaText*)>:
c000c064:	c3                   	ret    

c000c065 <hwTextMode_updateCursor(VgaText*)>:
c000c065:	56                   	push   esi
c000c066:	b9 19 00 00 00       	mov    ecx,0x19
c000c06b:	53                   	push   ebx
c000c06c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c070:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c076:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c07c:	29 d1                	sub    ecx,edx
c000c07e:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c084:	01 d9                	add    ecx,ebx
c000c086:	b0 0f                	mov    al,0xf
c000c088:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c08b:	c1 e1 04             	shl    ecx,0x4
c000c08e:	01 f1                	add    ecx,esi
c000c090:	be d4 03 00 00       	mov    esi,0x3d4
c000c095:	89 f2                	mov    edx,esi
c000c097:	ee                   	out    dx,al
c000c098:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c09d:	88 c8                	mov    al,cl
c000c09f:	89 da                	mov    edx,ebx
c000c0a1:	ee                   	out    dx,al
c000c0a2:	b0 0e                	mov    al,0xe
c000c0a4:	89 f2                	mov    edx,esi
c000c0a6:	ee                   	out    dx,al
c000c0a7:	89 c8                	mov    eax,ecx
c000c0a9:	89 da                	mov    edx,ebx
c000c0ab:	66 c1 e8 08          	shr    ax,0x8
c000c0af:	ee                   	out    dx,al
c000c0b0:	5b                   	pop    ebx
c000c0b1:	5e                   	pop    esi
c000c0b2:	c3                   	ret    

c000c0b3 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c0b3:	ba da 03 00 00       	mov    edx,0x3da
c000c0b8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c0bd:	75 18                	jne    c000c0d7 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c0bf:	ec                   	in     al,dx
c000c0c0:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c0c5:	b0 30                	mov    al,0x30
c000c0c7:	89 ca                	mov    edx,ecx
c000c0c9:	ee                   	out    dx,al
c000c0ca:	ba c1 03 00 00       	mov    edx,0x3c1
c000c0cf:	ec                   	in     al,dx
c000c0d0:	83 c8 08             	or     eax,0x8
c000c0d3:	89 ca                	mov    edx,ecx
c000c0d5:	ee                   	out    dx,al
c000c0d6:	c3                   	ret    
c000c0d7:	ec                   	in     al,dx
c000c0d8:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c0dd:	b0 30                	mov    al,0x30
c000c0df:	89 ca                	mov    edx,ecx
c000c0e1:	ee                   	out    dx,al
c000c0e2:	ba c1 03 00 00       	mov    edx,0x3c1
c000c0e7:	ec                   	in     al,dx
c000c0e8:	83 e0 f7             	and    eax,0xfffffff7
c000c0eb:	89 ca                	mov    edx,ecx
c000c0ed:	ee                   	out    dx,al
c000c0ee:	c3                   	ret    

c000c0ef <hwTextMode_scrollScreen(VgaText*)>:
c000c0ef:	55                   	push   ebp
c000c0f0:	bd 02 00 00 00       	mov    ebp,0x2
c000c0f5:	57                   	push   edi
c000c0f6:	56                   	push   esi
c000c0f7:	53                   	push   ebx
c000c0f8:	83 ec 1c             	sub    esp,0x1c
c000c0fb:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c103:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c107:	31 c0                	xor    eax,eax
c000c109:	eb 0b                	jmp    c000c116 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c10b:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c111:	74 58                	je     c000c16b <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c113:	43                   	inc    ebx
c000c114:	89 f0                	mov    eax,esi
c000c116:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c11c:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c122:	88 13                	mov    BYTE PTR [ebx],dl
c000c124:	8d 70 01             	lea    esi,[eax+0x1]
c000c127:	83 fd 18             	cmp    ebp,0x18
c000c12a:	75 df                	jne    c000c10b <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c12c:	a8 01                	test   al,0x1
c000c12e:	75 13                	jne    c000c143 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c130:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c133:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c139:	75 d8                	jne    c000c113 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c13b:	83 c4 1c             	add    esp,0x1c
c000c13e:	5b                   	pop    ebx
c000c13f:	5e                   	pop    esi
c000c140:	5f                   	pop    edi
c000c141:	5d                   	pop    ebp
c000c142:	c3                   	ret    
c000c143:	52                   	push   edx
c000c144:	31 c0                	xor    eax,eax
c000c146:	52                   	push   edx
c000c147:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c14b:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c151:	50                   	push   eax
c000c152:	31 c0                	xor    eax,eax
c000c154:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c158:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c15e:	50                   	push   eax
c000c15f:	e8 84 0b 00 00       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	88 07                	mov    BYTE PTR [edi],al
c000c169:	eb c8                	jmp    c000c133 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c16b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c16f:	45                   	inc    ebp
c000c170:	05 a0 00 00 00       	add    eax,0xa0
c000c175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c179:	eb 88                	jmp    c000c103 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c17b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c17b:	56                   	push   esi
c000c17c:	31 c0                	xor    eax,eax
c000c17e:	53                   	push   ebx
c000c17f:	83 ec 0c             	sub    esp,0xc
c000c182:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c186:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c18a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c18e:	50                   	push   eax
c000c18f:	31 c0                	xor    eax,eax
c000c191:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c195:	50                   	push   eax
c000c196:	e8 4d 0b 00 00       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000c19b:	5a                   	pop    edx
c000c19c:	25 ff 00 00 00       	and    eax,0xff
c000c1a1:	59                   	pop    ecx
c000c1a2:	50                   	push   eax
c000c1a3:	89 f0                	mov    eax,esi
c000c1a5:	0f be f0             	movsx  esi,al
c000c1a8:	56                   	push   esi
c000c1a9:	e8 e0 0b 00 00       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000c1ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c1b2:	ba 19 00 00 00       	mov    edx,0x19
c000c1b7:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c1bd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c1c0:	29 f2                	sub    edx,esi
c000c1c2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c1c6:	c1 e1 04             	shl    ecx,0x4
c000c1c9:	8d 14 92             	lea    edx,[edx+edx*4]
c000c1cc:	01 d9                	add    ecx,ebx
c000c1ce:	c1 e2 04             	shl    edx,0x4
c000c1d1:	01 ca                	add    edx,ecx
c000c1d3:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c1db:	83 c4 14             	add    esp,0x14
c000c1de:	5b                   	pop    ebx
c000c1df:	5e                   	pop    esi
c000c1e0:	c3                   	ret    

c000c1e1 <setupTextMode()>:
c000c1e1:	c7 05 38 43 02 c0 b3 c0 00 c0 	mov    DWORD PTR ds:0xc0024338,0xc000c0b3
c000c1eb:	c7 05 24 43 02 c0 81 bf 00 c0 	mov    DWORD PTR ds:0xc0024324,0xc000bf81
c000c1f5:	c7 05 20 43 02 c0 c6 bf 00 c0 	mov    DWORD PTR ds:0xc0024320,0xc000bfc6
c000c1ff:	c7 05 2c 43 02 c0 ef c0 00 c0 	mov    DWORD PTR ds:0xc002432c,0xc000c0ef
c000c209:	c7 05 34 43 02 c0 10 c0 00 c0 	mov    DWORD PTR ds:0xc0024334,0xc000c010
c000c213:	c7 05 28 43 02 c0 64 c0 00 c0 	mov    DWORD PTR ds:0xc0024328,0xc000c064
c000c21d:	c7 05 30 43 02 c0 65 c0 00 c0 	mov    DWORD PTR ds:0xc0024330,0xc000c065
c000c227:	c7 05 3c 43 02 c0 7b c1 00 c0 	mov    DWORD PTR ds:0xc002433c,0xc000c17b
c000c231:	c3                   	ret    

c000c232 <kernel_main>:
c000c232:	57                   	push   edi
c000c233:	bf f9 03 00 00       	mov    edi,0x3f9
c000c238:	56                   	push   esi
c000c239:	31 f6                	xor    esi,esi
c000c23b:	53                   	push   ebx
c000c23c:	83 ec 10             	sub    esp,0x10
c000c23f:	e8 fe 08 00 00       	call   c000cb42 <installVgaTextImplementation()>
c000c244:	e8 98 ff ff ff       	call   c000c1e1 <setupTextMode()>
c000c249:	89 f0                	mov    eax,esi
c000c24b:	89 fa                	mov    edx,edi
c000c24d:	ee                   	out    dx,al
c000c24e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c253:	b0 80                	mov    al,0x80
c000c255:	89 da                	mov    edx,ebx
c000c257:	ee                   	out    dx,al
c000c258:	b1 03                	mov    cl,0x3
c000c25a:	ba f8 03 00 00       	mov    edx,0x3f8
c000c25f:	88 c8                	mov    al,cl
c000c261:	ee                   	out    dx,al
c000c262:	89 f0                	mov    eax,esi
c000c264:	89 fa                	mov    edx,edi
c000c266:	ee                   	out    dx,al
c000c267:	88 c8                	mov    al,cl
c000c269:	89 da                	mov    edx,ebx
c000c26b:	ee                   	out    dx,al
c000c26c:	b0 c7                	mov    al,0xc7
c000c26e:	ba fa 03 00 00       	mov    edx,0x3fa
c000c273:	ee                   	out    dx,al
c000c274:	b0 0b                	mov    al,0xb
c000c276:	ba fc 03 00 00       	mov    edx,0x3fc
c000c27b:	ee                   	out    dx,al
c000c27c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c281:	83 ec 0c             	sub    esp,0xc
c000c284:	05 ff 0f 00 00       	add    eax,0xfff
c000c289:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c28e:	50                   	push   eax
c000c28f:	e8 6d 03 00 00       	call   c000c601 <Phys::physicalMemorySetup(unsigned int)>
c000c294:	e8 b6 1f 00 00       	call   c000e24f <Virt::virtualMemorySetup()>
c000c299:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c2a8:	75 0e                	jne    c000c2b8 <kernel_main+0x86>
c000c2aa:	89 d8                	mov    eax,ebx
c000c2ac:	25 48 03 00 00       	and    eax,0x348
c000c2b1:	3d 00 03 00 00       	cmp    eax,0x300
c000c2b6:	74 10                	je     c000c2c8 <kernel_main+0x96>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	68 af 23 02 c0       	push   0xc00223af
c000c2c0:	e8 89 92 00 00       	call   c001554e <Krnl::panic(char const*)>
c000c2c5:	83 c4 10             	add    esp,0x10
c000c2c8:	83 ec 0c             	sub    esp,0xc
c000c2cb:	89 1d a0 42 02 c0    	mov    DWORD PTR ds:0xc00242a0,ebx
c000c2d1:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c2d5:	53                   	push   ebx
c000c2d6:	e8 11 21 00 00       	call   c000e3ec <VAS::VAS()>
c000c2db:	89 1d e4 43 02 c0    	mov    DWORD PTR ds:0xc00243e4,ebx
c000c2e1:	e8 3a 3d ff ff       	call   c0000020 <callGlobalConstructors>
c000c2e6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c2ed:	e8 32 2d 00 00       	call   c000f024 <operator new(unsigned long)>
c000c2f2:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2f5:	89 c6                	mov    esi,eax
c000c2f7:	e8 78 ea ff ff       	call   c000ad74 <Computer::Computer()>
c000c2fc:	6a 00                	push   0x0
c000c2fe:	6a 00                	push   0x0
c000c300:	89 35 88 42 02 c0    	mov    DWORD PTR ds:0xc0024288,esi
c000c306:	6a 00                	push   0x0
c000c308:	56                   	push   esi
c000c309:	e8 5a f2 ff ff       	call   c000b568 <Computer::open(int, int, void*)>
c000c30e:	83 c4 14             	add    esp,0x14
c000c311:	53                   	push   ebx
c000c312:	e8 87 23 00 00       	call   c000e69e <VAS::~VAS()>
c000c317:	c7 04 24 20 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e20
c000c31e:	e8 2b 92 00 00       	call   c001554e <Krnl::panic(char const*)>
c000c323:	83 c4 20             	add    esp,0x20
c000c326:	5b                   	pop    ebx
c000c327:	5e                   	pop    esi
c000c328:	5f                   	pop    edi
c000c329:	c3                   	ret    

c000c32a <Phys::allocateDMA(unsigned long)>:
c000c32a:	57                   	push   edi
c000c32b:	31 d2                	xor    edx,edx
c000c32d:	56                   	push   esi
c000c32e:	31 ff                	xor    edi,edi
c000c330:	53                   	push   ebx
c000c331:	31 c9                	xor    ecx,ecx
c000c333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c337:	31 f6                	xor    esi,esi
c000c339:	05 ff 0f 00 00       	add    eax,0xfff
c000c33e:	c1 e8 0c             	shr    eax,0xc
c000c341:	eb 17                	jmp    c000c35a <Phys::allocateDMA(unsigned long)+0x30>
c000c343:	85 c9                	test   ecx,ecx
c000c345:	75 04                	jne    c000c34b <Phys::allocateDMA(unsigned long)+0x21>
c000c347:	89 d7                	mov    edi,edx
c000c349:	89 d6                	mov    esi,edx
c000c34b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c34e:	39 d8                	cmp    eax,ebx
c000c350:	74 1f                	je     c000c371 <Phys::allocateDMA(unsigned long)+0x47>
c000c352:	42                   	inc    edx
c000c353:	89 d9                	mov    ecx,ebx
c000c355:	83 fa 2f             	cmp    edx,0x2f
c000c358:	7f 11                	jg     c000c36b <Phys::allocateDMA(unsigned long)+0x41>
c000c35a:	80 ba e0 42 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbd20],0x0
c000c361:	74 e0                	je     c000c343 <Phys::allocateDMA(unsigned long)+0x19>
c000c363:	31 c9                	xor    ecx,ecx
c000c365:	42                   	inc    edx
c000c366:	83 fa 2f             	cmp    edx,0x2f
c000c369:	7e ef                	jle    c000c35a <Phys::allocateDMA(unsigned long)+0x30>
c000c36b:	5b                   	pop    ebx
c000c36c:	31 c0                	xor    eax,eax
c000c36e:	5e                   	pop    esi
c000c36f:	5f                   	pop    edi
c000c370:	c3                   	ret    
c000c371:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c375:	89 d3                	mov    ebx,edx
c000c377:	c1 fb 1f             	sar    ebx,0x1f
c000c37a:	83 e3 0f             	and    ebx,0xf
c000c37d:	01 d3                	add    ebx,edx
c000c37f:	89 f2                	mov    edx,esi
c000c381:	c1 fb 04             	sar    ebx,0x4
c000c384:	c1 fa 04             	sar    edx,0x4
c000c387:	39 da                	cmp    edx,ebx
c000c389:	75 30                	jne    c000c3bb <Phys::allocateDMA(unsigned long)+0x91>
c000c38b:	85 c0                	test   eax,eax
c000c38d:	74 1b                	je     c000c3aa <Phys::allocateDMA(unsigned long)+0x80>
c000c38f:	bf e0 42 02 c0       	mov    edi,0xc00242e0
c000c394:	8d 96 e0 42 02 c0    	lea    edx,[esi-0x3ffdbd20]
c000c39a:	83 f7 ff             	xor    edi,0xffffffff
c000c39d:	29 f7                	sub    edi,esi
c000c39f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c3a2:	42                   	inc    edx
c000c3a3:	8d 04 17             	lea    eax,[edi+edx*1]
c000c3a6:	39 c1                	cmp    ecx,eax
c000c3a8:	7f f5                	jg     c000c39f <Phys::allocateDMA(unsigned long)+0x75>
c000c3aa:	85 db                	test   ebx,ebx
c000c3ac:	74 13                	je     c000c3c1 <Phys::allocateDMA(unsigned long)+0x97>
c000c3ae:	5b                   	pop    ebx
c000c3af:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c3b5:	c1 e0 0c             	shl    eax,0xc
c000c3b8:	5e                   	pop    esi
c000c3b9:	5f                   	pop    edi
c000c3ba:	c3                   	ret    
c000c3bb:	89 fa                	mov    edx,edi
c000c3bd:	31 c9                	xor    ecx,ecx
c000c3bf:	eb a4                	jmp    c000c365 <Phys::allocateDMA(unsigned long)+0x3b>
c000c3c1:	c1 e6 0c             	shl    esi,0xc
c000c3c4:	5b                   	pop    ebx
c000c3c5:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c3cb:	5e                   	pop    esi
c000c3cc:	5f                   	pop    edi
c000c3cd:	c3                   	ret    

c000c3ce <Phys::freeDMA(unsigned long, unsigned long)>:
c000c3ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3d6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c3dc:	c1 e9 0c             	shr    ecx,0xc
c000c3df:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c3e4:	76 25                	jbe    c000c40b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c3e6:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c3eb:	c1 e8 0c             	shr    eax,0xc
c000c3ee:	8d 50 10             	lea    edx,[eax+0x10]
c000c3f1:	85 c9                	test   ecx,ecx
c000c3f3:	74 15                	je     c000c40a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c3f5:	8d 82 e0 42 02 c0    	lea    eax,[edx-0x3ffdbd20]
c000c3fb:	8d 94 11 e0 42 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbd20]
c000c402:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c405:	40                   	inc    eax
c000c406:	39 d0                	cmp    eax,edx
c000c408:	75 f8                	jne    c000c402 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c40a:	c3                   	ret    
c000c40b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c411:	c1 ea 0c             	shr    edx,0xc
c000c414:	eb db                	jmp    c000c3f1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c416 <Phys::setPageState(unsigned long, bool)>:
c000c416:	56                   	push   esi
c000c417:	ba 01 00 00 00       	mov    edx,0x1
c000c41c:	53                   	push   ebx
c000c41d:	8b 35 a4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236a4
c000c423:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c42b:	89 c8                	mov    eax,ecx
c000c42d:	83 e1 07             	and    ecx,0x7
c000c430:	c1 e8 03             	shr    eax,0x3
c000c433:	01 c6                	add    esi,eax
c000c435:	d3 e2                	shl    edx,cl
c000c437:	83 f2 ff             	xor    edx,0xffffffff
c000c43a:	20 16                	and    BYTE PTR [esi],dl
c000c43c:	8b 15 a4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236a4
c000c442:	01 d0                	add    eax,edx
c000c444:	d3 e3                	shl    ebx,cl
c000c446:	8a 08                	mov    cl,BYTE PTR [eax]
c000c448:	09 d9                	or     ecx,ebx
c000c44a:	88 08                	mov    BYTE PTR [eax],cl
c000c44c:	5b                   	pop    ebx
c000c44d:	5e                   	pop    esi
c000c44e:	c3                   	ret    

c000c44f <Phys::getPageState(unsigned long)>:
c000c44f:	53                   	push   ebx
c000c450:	8b 15 a4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236a4
c000c456:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c45a:	31 db                	xor    ebx,ebx
c000c45c:	89 c8                	mov    eax,ecx
c000c45e:	83 e1 07             	and    ecx,0x7
c000c461:	c1 e8 03             	shr    eax,0x3
c000c464:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c467:	89 d8                	mov    eax,ebx
c000c469:	5b                   	pop    ebx
c000c46a:	d3 f8                	sar    eax,cl
c000c46c:	83 e0 01             	and    eax,0x1
c000c46f:	c3                   	ret    

c000c470 <Phys::freePage(unsigned long)>:
c000c470:	53                   	push   ebx
c000c471:	83 ec 08             	sub    esp,0x8
c000c474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c478:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c47e:	76 5a                	jbe    c000c4da <Phys::freePage(unsigned long)+0x6a>
c000c480:	c1 eb 0c             	shr    ebx,0xc
c000c483:	53                   	push   ebx
c000c484:	e8 c6 ff ff ff       	call   c000c44f <Phys::getPageState(unsigned long)>
c000c489:	5a                   	pop    edx
c000c48a:	84 c0                	test   al,al
c000c48c:	74 5e                	je     c000c4ec <Phys::freePage(unsigned long)+0x7c>
c000c48e:	a1 cc 42 02 c0       	mov    eax,ds:0xc00242cc
c000c493:	48                   	dec    eax
c000c494:	a3 cc 42 02 c0       	mov    ds:0xc00242cc,eax
c000c499:	8d 04 80             	lea    eax,[eax+eax*4]
c000c49c:	8d 04 80             	lea    eax,[eax+eax*4]
c000c49f:	c1 e0 02             	shl    eax,0x2
c000c4a2:	89 c2                	mov    edx,eax
c000c4a4:	c1 fa 1f             	sar    edx,0x1f
c000c4a7:	f7 3d d0 42 02 c0    	idiv   DWORD PTR ds:0xc00242d0
c000c4ad:	39 05 c8 42 02 c0    	cmp    DWORD PTR ds:0xc00242c8,eax
c000c4b3:	75 12                	jne    c000c4c7 <Phys::freePage(unsigned long)+0x57>
c000c4b5:	51                   	push   ecx
c000c4b6:	51                   	push   ecx
c000c4b7:	6a 00                	push   0x0
c000c4b9:	53                   	push   ebx
c000c4ba:	e8 57 ff ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	83 c4 08             	add    esp,0x8
c000c4c5:	5b                   	pop    ebx
c000c4c6:	c3                   	ret    
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	a3 c8 42 02 c0       	mov    ds:0xc00242c8,eax
c000c4cf:	50                   	push   eax
c000c4d0:	e8 01 0a 00 00       	call   c000ced6 <VgaText::updateRAMUsageDisplay(int)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	eb db                	jmp    c000c4b5 <Phys::freePage(unsigned long)+0x45>
c000c4da:	68 00 10 00 00       	push   0x1000
c000c4df:	53                   	push   ebx
c000c4e0:	e8 e9 fe ff ff       	call   c000c3ce <Phys::freeDMA(unsigned long, unsigned long)>
c000c4e5:	59                   	pop    ecx
c000c4e6:	5b                   	pop    ebx
c000c4e7:	83 c4 08             	add    esp,0x8
c000c4ea:	5b                   	pop    ebx
c000c4eb:	c3                   	ret    
c000c4ec:	c7 44 24 10 3b 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e3b
c000c4f4:	83 c4 08             	add    esp,0x8
c000c4f7:	5b                   	pop    ebx
c000c4f8:	e9 51 90 00 00       	jmp    c001554e <Krnl::panic(char const*)>

c000c4fd <Phys::allocatePage()>:
c000c4fd:	56                   	push   esi
c000c4fe:	53                   	push   ebx
c000c4ff:	51                   	push   ecx
c000c500:	8b 35 c0 42 02 c0    	mov    esi,DWORD PTR ds:0xc00242c0
c000c506:	89 f3                	mov    ebx,esi
c000c508:	eb 0a                	jmp    c000c514 <Phys::allocatePage()+0x17>
c000c50a:	89 1d c0 42 02 c0    	mov    DWORD PTR ds:0xc00242c0,ebx
c000c510:	39 de                	cmp    esi,ebx
c000c512:	74 24                	je     c000c538 <Phys::allocatePage()+0x3b>
c000c514:	53                   	push   ebx
c000c515:	e8 35 ff ff ff       	call   c000c44f <Phys::getPageState(unsigned long)>
c000c51a:	5a                   	pop    edx
c000c51b:	84 c0                	test   al,al
c000c51d:	74 5a                	je     c000c579 <Phys::allocatePage()+0x7c>
c000c51f:	43                   	inc    ebx
c000c520:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c526:	75 e2                	jne    c000c50a <Phys::allocatePage()+0xd>
c000c528:	31 db                	xor    ebx,ebx
c000c52a:	c7 05 c0 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242c0,0x0
c000c534:	39 de                	cmp    esi,ebx
c000c536:	75 dc                	jne    c000c514 <Phys::allocatePage()+0x17>
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	68 51 0e 02 c0       	push   0xc0020e51
c000c540:	e8 14 2c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c545:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c54c:	e8 d9 fd ff ff       	call   c000c32a <Phys::allocateDMA(unsigned long)>
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	85 c0                	test   eax,eax
c000c556:	75 5a                	jne    c000c5b2 <Phys::allocatePage()+0xb5>
c000c558:	83 ec 0c             	sub    esp,0xc
c000c55b:	68 62 0e 02 c0       	push   0xc0020e62
c000c560:	e8 e9 8f 00 00       	call   c001554e <Krnl::panic(char const*)>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	8b 1d c0 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242c0
c000c56e:	53                   	push   ebx
c000c56f:	e8 db fe ff ff       	call   c000c44f <Phys::getPageState(unsigned long)>
c000c574:	5a                   	pop    edx
c000c575:	84 c0                	test   al,al
c000c577:	75 a6                	jne    c000c51f <Phys::allocatePage()+0x22>
c000c579:	6a 01                	push   0x1
c000c57b:	53                   	push   ebx
c000c57c:	e8 95 fe ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c581:	a1 cc 42 02 c0       	mov    eax,ds:0xc00242cc
c000c586:	59                   	pop    ecx
c000c587:	40                   	inc    eax
c000c588:	5b                   	pop    ebx
c000c589:	a3 cc 42 02 c0       	mov    ds:0xc00242cc,eax
c000c58e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c591:	8d 04 80             	lea    eax,[eax+eax*4]
c000c594:	c1 e0 02             	shl    eax,0x2
c000c597:	89 c2                	mov    edx,eax
c000c599:	c1 fa 1f             	sar    edx,0x1f
c000c59c:	f7 3d d0 42 02 c0    	idiv   DWORD PTR ds:0xc00242d0
c000c5a2:	39 05 c8 42 02 c0    	cmp    DWORD PTR ds:0xc00242c8,eax
c000c5a8:	75 0c                	jne    c000c5b6 <Phys::allocatePage()+0xb9>
c000c5aa:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c000c5af:	c1 e0 0c             	shl    eax,0xc
c000c5b2:	5a                   	pop    edx
c000c5b3:	5b                   	pop    ebx
c000c5b4:	5e                   	pop    esi
c000c5b5:	c3                   	ret    
c000c5b6:	83 ec 0c             	sub    esp,0xc
c000c5b9:	a3 c8 42 02 c0       	mov    ds:0xc00242c8,eax
c000c5be:	50                   	push   eax
c000c5bf:	e8 12 09 00 00       	call   c000ced6 <VgaText::updateRAMUsageDisplay(int)>
c000c5c4:	83 c4 10             	add    esp,0x10
c000c5c7:	eb e1                	jmp    c000c5aa <Phys::allocatePage()+0xad>

c000c5c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c5c9:	56                   	push   esi
c000c5ca:	53                   	push   ebx
c000c5cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5cf:	39 1d c4 42 02 c0    	cmp    DWORD PTR ds:0xc00242c4,ebx
c000c5d5:	73 06                	jae    c000c5dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c5d7:	89 1d c4 42 02 c0    	mov    DWORD PTR ds:0xc00242c4,ebx
c000c5dd:	c1 eb 0c             	shr    ebx,0xc
c000c5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5e4:	c1 e8 0c             	shr    eax,0xc
c000c5e7:	39 d8                	cmp    eax,ebx
c000c5e9:	73 13                	jae    c000c5fe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c5eb:	6a 00                	push   0x0
c000c5ed:	8d 70 01             	lea    esi,[eax+0x1]
c000c5f0:	50                   	push   eax
c000c5f1:	e8 20 fe ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c5f6:	5a                   	pop    edx
c000c5f7:	89 f0                	mov    eax,esi
c000c5f9:	59                   	pop    ecx
c000c5fa:	39 f3                	cmp    ebx,esi
c000c5fc:	75 ed                	jne    c000c5eb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c5fe:	5b                   	pop    ebx
c000c5ff:	5e                   	pop    esi
c000c600:	c3                   	ret    

c000c601 <Phys::physicalMemorySetup(unsigned int)>:
c000c601:	55                   	push   ebp
c000c602:	57                   	push   edi
c000c603:	56                   	push   esi
c000c604:	53                   	push   ebx
c000c605:	31 db                	xor    ebx,ebx
c000c607:	83 ec 40             	sub    esp,0x40
c000c60a:	6a 30                	push   0x30
c000c60c:	6a 00                	push   0x0
c000c60e:	68 e0 42 02 c0       	push   0xc00242e0
c000c613:	e8 f0 3f ff ff       	call   c0000608 <memset>
c000c618:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c61c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c621:	05 00 10 00 00       	add    eax,0x1000
c000c626:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c62a:	83 c4 10             	add    esp,0x10
c000c62d:	56                   	push   esi
c000c62e:	56                   	push   esi
c000c62f:	6a 01                	push   0x1
c000c631:	53                   	push   ebx
c000c632:	43                   	inc    ebx
c000c633:	e8 de fd ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c641:	75 ea                	jne    c000c62d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c643:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c649:	66 85 c0             	test   ax,ax
c000c64c:	0f 84 3b 01 00 00    	je     c000c78d <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c652:	89 c7                	mov    edi,eax
c000c654:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c65c:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c662:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c667:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c66b:	eb 6d                	jmp    c000c6da <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c66d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c671:	89 c1                	mov    ecx,eax
c000c673:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c677:	0f 83 bc 00 00 00    	jae    c000c739 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c67d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c681:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c686:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c68a:	39 f2                	cmp    edx,esi
c000c68c:	19 f8                	sbb    eax,edi
c000c68e:	73 07                	jae    c000c697 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c690:	be 00 00 0a 00       	mov    esi,0xa0000
c000c695:	31 ff                	xor    edi,edi
c000c697:	89 f2                	mov    edx,esi
c000c699:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c69e:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c6a4:	89 f9                	mov    ecx,edi
c000c6a6:	83 d1 ff             	adc    ecx,0xffffffff
c000c6a9:	39 d0                	cmp    eax,edx
c000c6ab:	b8 00 00 00 00       	mov    eax,0x0
c000c6b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6b4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c6b8:	19 c8                	sbb    eax,ecx
c000c6ba:	0f 82 0d 01 00 00    	jb     c000c7cd <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c6c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c6c4:	83 c3 18             	add    ebx,0x18
c000c6c7:	41                   	inc    ecx
c000c6c8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c6cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6d0:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c6d4:	0f 84 c3 00 00 00    	je     c000c79d <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c6da:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c6dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c6df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c6e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6e6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c6e9:	01 f0                	add    eax,esi
c000c6eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c6ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c6f6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c6fa:	11 fa                	adc    edx,edi
c000c6fc:	55                   	push   ebp
c000c6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c701:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c705:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c709:	51                   	push   ecx
c000c70a:	56                   	push   esi
c000c70b:	68 9c 0e 02 c0       	push   0xc0020e9c
c000c710:	e8 44 2a 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	09 f8                	or     eax,edi
c000c71e:	75 7d                	jne    c000c79d <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c720:	83 fd 01             	cmp    ebp,0x1
c000c723:	75 11                	jne    c000c736 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c725:	ba 00 00 08 00       	mov    edx,0x80000
c000c72a:	89 c1                	mov    ecx,eax
c000c72c:	39 f2                	cmp    edx,esi
c000c72e:	19 f9                	sbb    ecx,edi
c000c730:	0f 83 37 ff ff ff    	jae    c000c66d <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c736:	4d                   	dec    ebp
c000c737:	75 87                	jne    c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c739:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c73d:	31 d2                	xor    edx,edx
c000c73f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c743:	89 c8                	mov    eax,ecx
c000c745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c749:	19 d1                	sbb    ecx,edx
c000c74b:	0f 82 6f ff ff ff    	jb     c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c751:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c756:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c75a:	b9 00 00 00 00       	mov    ecx,0x0
c000c75f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c763:	0f 83 57 ff ff ff    	jae    c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c769:	39 c6                	cmp    esi,eax
c000c76b:	19 d7                	sbb    edi,edx
c000c76d:	73 6a                	jae    c000c7d9 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c76f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c773:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c777:	29 c7                	sub    edi,eax
c000c779:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c77d:	19 d5                	sbb    ebp,edx
c000c77f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c783:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c787:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c78b:	eb 4c                	jmp    c000c7d9 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c78d:	83 ec 0c             	sub    esp,0xc
c000c790:	68 70 0e 02 c0       	push   0xc0020e70
c000c795:	e8 b4 8d 00 00       	call   c001554e <Krnl::panic(char const*)>
c000c79a:	83 c4 10             	add    esp,0x10
c000c79d:	bb 40 01 00 00       	mov    ebx,0x140
c000c7a2:	50                   	push   eax
c000c7a3:	50                   	push   eax
c000c7a4:	6a 00                	push   0x0
c000c7a6:	53                   	push   ebx
c000c7a7:	e8 6a fc ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c7ac:	8b 15 d0 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242d0
c000c7b2:	43                   	inc    ebx
c000c7b3:	42                   	inc    edx
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	89 15 d0 42 02 c0    	mov    DWORD PTR ds:0xc00242d0,edx
c000c7bd:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c7c3:	75 dd                	jne    c000c7a2 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c7c5:	83 c4 3c             	add    esp,0x3c
c000c7c8:	5b                   	pop    ebx
c000c7c9:	5e                   	pop    esi
c000c7ca:	5f                   	pop    edi
c000c7cb:	5d                   	pop    ebp
c000c7cc:	c3                   	ret    
c000c7cd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c7d1:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c7d9:	56                   	push   esi
c000c7da:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c7de:	56                   	push   esi
c000c7df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c7e3:	57                   	push   edi
c000c7e4:	68 c0 0e 02 c0       	push   0xc0020ec0
c000c7e9:	e8 6b 29 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c7ee:	5d                   	pop    ebp
c000c7ef:	58                   	pop    eax
c000c7f0:	56                   	push   esi
c000c7f1:	57                   	push   edi
c000c7f2:	e8 d2 fd ff ff       	call   c000c5c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c7f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c7fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7ff:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c803:	8b 15 d0 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242d0
c000c809:	83 c4 0c             	add    esp,0xc
c000c80c:	01 d0                	add    eax,edx
c000c80e:	a3 d0 42 02 c0       	mov    ds:0xc00242d0,eax
c000c813:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c81a:	52                   	push   edx
c000c81b:	50                   	push   eax
c000c81c:	68 7e 0e 02 c0       	push   0xc0020e7e
c000c821:	e8 33 29 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c826:	83 c4 10             	add    esp,0x10
c000c829:	e9 92 fe ff ff       	jmp    c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c82e <Pipe::isAtty()>:
c000c82e:	31 c0                	xor    eax,eax
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <Pipe::~Pipe()>:
c000c832:	83 ec 0c             	sub    esp,0xc
c000c835:	ba 2c 0f 02 c0       	mov    edx,0xc0020f2c
c000c83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83e:	89 10                	mov    DWORD PTR [eax],edx
c000c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	50                   	push   eax
c000c848:	e8 5d 16 00 00       	call   c000deaa <UnixFile::~UnixFile()>
c000c84d:	83 c4 10             	add    esp,0x10
c000c850:	90                   	nop
c000c851:	83 c4 0c             	add    esp,0xc
c000c854:	c3                   	ret    
c000c855:	90                   	nop

c000c856 <Pipe::~Pipe()>:
c000c856:	83 ec 0c             	sub    esp,0xc
c000c859:	83 ec 0c             	sub    esp,0xc
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 cd ff ff ff       	call   c000c832 <Pipe::~Pipe()>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	83 ec 08             	sub    esp,0x8
c000c86b:	6a 20                	push   0x20
c000c86d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c871:	e8 bd 27 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000c876:	83 c4 10             	add    esp,0x10
c000c879:	83 c4 0c             	add    esp,0xc
c000c87c:	c3                   	ret    
c000c87d:	90                   	nop

c000c87e <Pipe::read(unsigned long long, void*, int*)>:
c000c87e:	55                   	push   ebp
c000c87f:	57                   	push   edi
c000c880:	56                   	push   esi
c000c881:	53                   	push   ebx
c000c882:	83 ec 1c             	sub    esp,0x1c
c000c885:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c889:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c88d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c891:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c894:	89 c8                	mov    eax,ecx
c000c896:	99                   	cdq    
c000c897:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c89b:	74 19                	je     c000c8b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c89d:	39 f9                	cmp    ecx,edi
c000c89f:	89 d1                	mov    ecx,edx
c000c8a1:	19 f1                	sbb    ecx,esi
c000c8a3:	73 11                	jae    c000c8b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c8a5:	e8 ad bc 00 00       	call   c0018557 <lockScheduler()>
c000c8aa:	e8 f1 bf 00 00       	call   c00188a0 <schedule()>
c000c8af:	e8 a5 bc 00 00       	call   c0018559 <unlockScheduler()>
c000c8b4:	eb db                	jmp    c000c891 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c8b6:	39 f8                	cmp    eax,edi
c000c8b8:	89 d1                	mov    ecx,edx
c000c8ba:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c8be:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c8c2:	19 f1                	sbb    ecx,esi
c000c8c4:	73 08                	jae    c000c8ce <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c8c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c8d1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c8d4:	29 c6                	sub    esi,eax
c000c8d6:	89 f1                	mov    ecx,esi
c000c8d8:	c1 f9 1f             	sar    ecx,0x1f
c000c8db:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c8df:	89 ca                	mov    edx,ecx
c000c8e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8e5:	19 d1                	sbb    ecx,edx
c000c8e7:	73 04                	jae    c000c8ed <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c8e9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c8ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c8f1:	89 fd                	mov    ebp,edi
c000c8f3:	29 f5                	sub    ebp,esi
c000c8f5:	85 f6                	test   esi,esi
c000c8f7:	74 12                	je     c000c90b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c8f9:	52                   	push   edx
c000c8fa:	56                   	push   esi
c000c8fb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c8fe:	50                   	push   eax
c000c8ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c903:	e8 ca 3c ff ff       	call   c00005d2 <memcpy>
c000c908:	83 c4 10             	add    esp,0x10
c000c90b:	85 ed                	test   ebp,ebp
c000c90d:	74 12                	je     c000c921 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c90f:	50                   	push   eax
c000c910:	55                   	push   ebp
c000c911:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c914:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c918:	56                   	push   esi
c000c919:	e8 b4 3c ff ff       	call   c00005d2 <memcpy>
c000c91e:	83 c4 10             	add    esp,0x10
c000c921:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c924:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c927:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c92a:	99                   	cdq    
c000c92b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c92f:	89 f7                	mov    edi,esi
c000c931:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c935:	c1 ff 1f             	sar    edi,0x1f
c000c938:	57                   	push   edi
c000c939:	56                   	push   esi
c000c93a:	52                   	push   edx
c000c93b:	50                   	push   eax
c000c93c:	e8 db 27 01 00       	call   c001f11c <__umoddi3>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c947:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c94c:	75 10                	jne    c000c95e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c94e:	83 ec 0c             	sub    esp,0xc
c000c951:	68 e9 0e 02 c0       	push   0xc0020ee9
c000c956:	e8 f3 8b 00 00       	call   c001554e <Krnl::panic(char const*)>
c000c95b:	83 c4 10             	add    esp,0x10
c000c95e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c966:	89 10                	mov    DWORD PTR [eax],edx
c000c968:	83 c4 1c             	add    esp,0x1c
c000c96b:	31 c0                	xor    eax,eax
c000c96d:	5b                   	pop    ebx
c000c96e:	5e                   	pop    esi
c000c96f:	5f                   	pop    edi
c000c970:	5d                   	pop    ebp
c000c971:	c3                   	ret    

c000c972 <Pipe::write(unsigned long long, void*, int*)>:
c000c972:	55                   	push   ebp
c000c973:	57                   	push   edi
c000c974:	56                   	push   esi
c000c975:	53                   	push   ebx
c000c976:	83 ec 1c             	sub    esp,0x1c
c000c979:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c97d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c981:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c985:	89 04 24             	mov    DWORD PTR [esp],eax
c000c988:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c98b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c98e:	89 de                	mov    esi,ebx
c000c990:	89 df                	mov    edi,ebx
c000c992:	c1 ff 1f             	sar    edi,0x1f
c000c995:	01 c6                	add    esi,eax
c000c997:	89 c8                	mov    eax,ecx
c000c999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c99d:	11 d7                	adc    edi,edx
c000c99f:	99                   	cdq    
c000c9a0:	89 d0                	mov    eax,edx
c000c9a2:	39 f1                	cmp    ecx,esi
c000c9a4:	19 f8                	sbb    eax,edi
c000c9a6:	b8 01 00 00 00       	mov    eax,0x1
c000c9ab:	0f 82 80 00 00 00    	jb     c000ca31 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c9b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c9b4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c9b7:	01 d8                	add    eax,ebx
c000c9b9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c9bd:	99                   	cdq    
c000c9be:	f7 f9                	idiv   ecx
c000c9c0:	29 d1                	sub    ecx,edx
c000c9c2:	89 d7                	mov    edi,edx
c000c9c4:	89 c8                	mov    eax,ecx
c000c9c6:	99                   	cdq    
c000c9c7:	39 ce                	cmp    esi,ecx
c000c9c9:	19 d3                	sbb    ebx,edx
c000c9cb:	bb 00 00 00 00       	mov    ebx,0x0
c000c9d0:	72 04                	jb     c000c9d6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c9d2:	89 f3                	mov    ebx,esi
c000c9d4:	29 cb                	sub    ebx,ecx
c000c9d6:	89 f1                	mov    ecx,esi
c000c9d8:	29 d9                	sub    ecx,ebx
c000c9da:	74 1a                	je     c000c9f6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c9dc:	52                   	push   edx
c000c9dd:	51                   	push   ecx
c000c9de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c9e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c9e6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c9e9:	57                   	push   edi
c000c9ea:	e8 e3 3b ff ff       	call   c00005d2 <memcpy>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9f6:	85 db                	test   ebx,ebx
c000c9f8:	74 12                	je     c000ca0c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c9fa:	50                   	push   eax
c000c9fb:	53                   	push   ebx
c000c9fc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ca00:	51                   	push   ecx
c000ca01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ca04:	e8 c9 3b ff ff       	call   c00005d2 <memcpy>
c000ca09:	83 c4 10             	add    esp,0x10
c000ca0c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ca0f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca14:	75 10                	jne    c000ca26 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	68 05 0f 02 c0       	push   0xc0020f05
c000ca1e:	e8 2b 8b 00 00       	call   c001554e <Krnl::panic(char const*)>
c000ca23:	83 c4 10             	add    esp,0x10
c000ca26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca2a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ca2d:	89 38                	mov    DWORD PTR [eax],edi
c000ca2f:	31 c0                	xor    eax,eax
c000ca31:	83 c4 1c             	add    esp,0x1c
c000ca34:	5b                   	pop    ebx
c000ca35:	5e                   	pop    esi
c000ca36:	5f                   	pop    edi
c000ca37:	5d                   	pop    ebp
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <Pipe::Pipe(int)>:
c000ca3a:	83 ec 0c             	sub    esp,0xc
c000ca3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca41:	83 ec 08             	sub    esp,0x8
c000ca44:	6a 00                	push   0x0
c000ca46:	50                   	push   eax
c000ca47:	e8 bc 12 00 00       	call   c000dd08 <UnixFile::UnixFile(int)>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	ba 2c 0f 02 c0       	mov    edx,0xc0020f2c
c000ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca58:	89 10                	mov    DWORD PTR [eax],edx
c000ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca62:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ca65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca69:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca74:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ca7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca7f:	83 ec 0c             	sub    esp,0xc
c000ca82:	50                   	push   eax
c000ca83:	e8 9f f4 ff ff       	call   c000bf27 <malloc>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	89 c2                	mov    edx,eax
c000ca8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca91:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ca94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca98:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ca9c:	90                   	nop
c000ca9d:	83 c4 0c             	add    esp,0xc
c000caa0:	c3                   	ret    
c000caa1:	90                   	nop

c000caa2 <VgaText::isAtty()>:
c000caa2:	b0 01                	mov    al,0x1
c000caa4:	c3                   	ret    
c000caa5:	90                   	nop

c000caa6 <VgaText::~VgaText()>:
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ba e8 0f 02 c0       	mov    edx,0xc0020fe8
c000caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab2:	89 10                	mov    DWORD PTR [eax],edx
c000cab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab8:	83 ec 0c             	sub    esp,0xc
c000cabb:	50                   	push   eax
c000cabc:	e8 e9 13 00 00       	call   c000deaa <UnixFile::~UnixFile()>
c000cac1:	83 c4 10             	add    esp,0x10
c000cac4:	90                   	nop
c000cac5:	83 c4 0c             	add    esp,0xc
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <VgaText::~VgaText()>:
c000caca:	83 ec 0c             	sub    esp,0xc
c000cacd:	83 ec 0c             	sub    esp,0xc
c000cad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad4:	e8 cd ff ff ff       	call   c000caa6 <VgaText::~VgaText()>
c000cad9:	83 c4 10             	add    esp,0x10
c000cadc:	83 ec 08             	sub    esp,0x8
c000cadf:	68 60 12 00 00       	push   0x1260
c000cae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae8:	e8 46 25 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	83 c4 0c             	add    esp,0xc
c000caf3:	c3                   	ret    

c000caf4 <VgaText::read(unsigned long long, void*, int*)>:
c000caf4:	83 ec 10             	sub    esp,0x10
c000caf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cafb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb03:	e8 2f 54 00 00       	call   c0011f37 <readKeyboard(VgaText*, char*, unsigned long)>
c000cb08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cb0c:	89 02                	mov    DWORD PTR [edx],eax
c000cb0e:	31 c0                	xor    eax,eax
c000cb10:	83 c4 1c             	add    esp,0x1c
c000cb13:	c3                   	ret    

c000cb14 <setTerminalScrollLock(bool)>:
c000cb14:	c3                   	ret    

c000cb15 <addToTerminalCycle(VgaText*)>:
c000cb15:	8b 15 40 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024340
c000cb1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb1f:	85 d2                	test   edx,edx
c000cb21:	75 0c                	jne    c000cb2f <addToTerminalCycle(VgaText*)+0x1a>
c000cb23:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cb29:	a3 40 43 02 c0       	mov    ds:0xc0024340,eax
c000cb2e:	c3                   	ret    
c000cb2f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cb35:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cb3b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cb41:	c3                   	ret    

c000cb42 <installVgaTextImplementation()>:
c000cb42:	83 ec 10             	sub    esp,0x10
c000cb45:	6a 20                	push   0x20
c000cb47:	6a 00                	push   0x0
c000cb49:	68 20 43 02 c0       	push   0xc0024320
c000cb4e:	e8 b5 3a ff ff       	call   c0000608 <memset>
c000cb53:	83 c4 1c             	add    esp,0x1c
c000cb56:	c3                   	ret    

c000cb57 <scrollTerminalScrollLock(int)>:
c000cb57:	c3                   	ret    

c000cb58 <VgaText::load()>:
c000cb58:	53                   	push   ebx
c000cb59:	31 c0                	xor    eax,eax
c000cb5b:	83 ec 58             	sub    esp,0x58
c000cb5e:	89 e2                	mov    edx,esp
c000cb60:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cb64:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cb68:	40                   	inc    eax
c000cb69:	83 f8 50             	cmp    eax,0x50
c000cb6c:	75 f6                	jne    c000cb64 <VgaText::load()+0xc>
c000cb6e:	31 c0                	xor    eax,eax
c000cb70:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cb77:	84 c9                	test   cl,cl
c000cb79:	74 06                	je     c000cb81 <VgaText::load()+0x29>
c000cb7b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cb7e:	40                   	inc    eax
c000cb7f:	eb ef                	jmp    c000cb70 <VgaText::load()+0x18>
c000cb81:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cb87:	85 c0                	test   eax,eax
c000cb89:	74 09                	je     c000cb94 <VgaText::load()+0x3c>
c000cb8b:	51                   	push   ecx
c000cb8c:	51                   	push   ecx
c000cb8d:	52                   	push   edx
c000cb8e:	53                   	push   ebx
c000cb8f:	ff d0                	call   eax
c000cb91:	83 c4 10             	add    esp,0x10
c000cb94:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cb9a:	85 c0                	test   eax,eax
c000cb9c:	74 09                	je     c000cba7 <VgaText::load()+0x4f>
c000cb9e:	83 ec 0c             	sub    esp,0xc
c000cba1:	53                   	push   ebx
c000cba2:	ff d0                	call   eax
c000cba4:	83 c4 10             	add    esp,0x10
c000cba7:	83 c4 58             	add    esp,0x58
c000cbaa:	5b                   	pop    ebx
c000cbab:	c3                   	ret    

c000cbac <VgaText::updateCursor()>:
c000cbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbb0:	39 05 44 43 02 c0    	cmp    DWORD PTR ds:0xc0024344,eax
c000cbb6:	75 0c                	jne    c000cbc4 <VgaText::updateCursor()+0x18>
c000cbb8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cbbe:	85 c0                	test   eax,eax
c000cbc0:	74 02                	je     c000cbc4 <VgaText::updateCursor()+0x18>
c000cbc2:	ff e0                	jmp    eax
c000cbc4:	c3                   	ret    
c000cbc5:	90                   	nop

c000cbc6 <VgaText::showCursor(bool)>:
c000cbc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbce:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cbd4:	c3                   	ret    
c000cbd5:	90                   	nop

c000cbd6 <VgaText::disableBlink(bool)>:
c000cbd6:	56                   	push   esi
c000cbd7:	53                   	push   ebx
c000cbd8:	51                   	push   ecx
c000cbd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cbdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cbe1:	39 1d 44 43 02 c0    	cmp    DWORD PTR ds:0xc0024344,ebx
c000cbe7:	75 18                	jne    c000cc01 <VgaText::disableBlink(bool)+0x2b>
c000cbe9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cbef:	85 c0                	test   eax,eax
c000cbf1:	74 0e                	je     c000cc01 <VgaText::disableBlink(bool)+0x2b>
c000cbf3:	89 f1                	mov    ecx,esi
c000cbf5:	52                   	push   edx
c000cbf6:	52                   	push   edx
c000cbf7:	0f b6 d1             	movzx  edx,cl
c000cbfa:	52                   	push   edx
c000cbfb:	53                   	push   ebx
c000cbfc:	ff d0                	call   eax
c000cbfe:	83 c4 10             	add    esp,0x10
c000cc01:	89 f0                	mov    eax,esi
c000cc03:	83 f0 01             	xor    eax,0x1
c000cc06:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000cc0c:	58                   	pop    eax
c000cc0d:	5b                   	pop    ebx
c000cc0e:	5e                   	pop    esi
c000cc0f:	c3                   	ret    

c000cc10 <VgaText::doANSI_SGR(int)>:
c000cc10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc18:	85 d2                	test   edx,edx
c000cc1a:	75 14                	jne    c000cc30 <VgaText::doANSI_SGR(int)+0x20>
c000cc1c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cc22:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc28:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cc2e:	eb 65                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x85>
c000cc30:	83 fa 07             	cmp    edx,0x7
c000cc33:	75 14                	jne    c000cc49 <VgaText::doANSI_SGR(int)+0x39>
c000cc35:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cc3b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cc41:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cc47:	eb 4c                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x85>
c000cc49:	83 fa 1b             	cmp    edx,0x1b
c000cc4c:	74 ce                	je     c000cc1c <VgaText::doANSI_SGR(int)+0xc>
c000cc4e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cc51:	83 f9 07             	cmp    ecx,0x7
c000cc54:	77 09                	ja     c000cc5f <VgaText::doANSI_SGR(int)+0x4f>
c000cc56:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c000cc5d:	eb 20                	jmp    c000cc7f <VgaText::doANSI_SGR(int)+0x6f>
c000cc5f:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cc62:	83 f9 07             	cmp    ecx,0x7
c000cc65:	77 09                	ja     c000cc70 <VgaText::doANSI_SGR(int)+0x60>
c000cc67:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c000cc6e:	eb 25                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x85>
c000cc70:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cc73:	83 f9 07             	cmp    ecx,0x7
c000cc76:	77 0e                	ja     c000cc86 <VgaText::doANSI_SGR(int)+0x76>
c000cc78:	8b 14 95 98 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca68]
c000cc7f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc85:	c3                   	ret    
c000cc86:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cc89:	83 f9 07             	cmp    ecx,0x7
c000cc8c:	77 0d                	ja     c000cc9b <VgaText::doANSI_SGR(int)+0x8b>
c000cc8e:	8b 14 95 70 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca90]
c000cc95:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cc9b:	c3                   	ret    

c000cc9c <VgaText::setDefaultBgColour(VgaColour)>:
c000cc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cca4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000ccaa:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ccb0:	c3                   	ret    
c000ccb1:	90                   	nop

c000ccb2 <VgaText::setDefaultFgColour(VgaColour)>:
c000ccb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccba:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000ccc0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccc6:	c3                   	ret    
c000ccc7:	90                   	nop

c000ccc8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ccc8:	53                   	push   ebx
c000ccc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cccd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ccd1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ccd5:	51                   	push   ecx
c000ccd6:	e8 c1 ff ff ff       	call   c000cc9c <VgaText::setDefaultBgColour(VgaColour)>
c000ccdb:	58                   	pop    eax
c000ccdc:	5a                   	pop    edx
c000ccdd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cce1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cce5:	5b                   	pop    ebx
c000cce6:	eb ca                	jmp    c000ccb2 <VgaText::setDefaultFgColour(VgaColour)>

c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cce8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cced:	c1 e2 04             	shl    edx,0x4
c000ccf0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ccf4:	83 e0 0f             	and    eax,0xf
c000ccf7:	09 d0                	or     eax,edx
c000ccf9:	c3                   	ret    

c000ccfa <VgaText::scrollScreen()>:
c000ccfa:	57                   	push   edi
c000ccfb:	56                   	push   esi
c000ccfc:	be 01 00 00 00       	mov    esi,0x1
c000cd01:	53                   	push   ebx
c000cd02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd06:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cd0c:	31 ff                	xor    edi,edi
c000cd0e:	01 d9                	add    ecx,ebx
c000cd10:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cd13:	83 fe 17             	cmp    esi,0x17
c000cd16:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cd1c:	75 28                	jne    c000cd46 <VgaText::scrollScreen()+0x4c>
c000cd1e:	f7 c7 01 00 00 00    	test   edi,0x1
c000cd24:	74 1c                	je     c000cd42 <VgaText::scrollScreen()+0x48>
c000cd26:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cd2d:	50                   	push   eax
c000cd2e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cd35:	50                   	push   eax
c000cd36:	e8 ad ff ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cd3b:	5a                   	pop    edx
c000cd3c:	5a                   	pop    edx
c000cd3d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cd40:	eb 04                	jmp    c000cd46 <VgaText::scrollScreen()+0x4c>
c000cd42:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cd46:	47                   	inc    edi
c000cd47:	41                   	inc    ecx
c000cd48:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cd4e:	75 c0                	jne    c000cd10 <VgaText::scrollScreen()+0x16>
c000cd50:	46                   	inc    esi
c000cd51:	83 fe 18             	cmp    esi,0x18
c000cd54:	75 b0                	jne    c000cd06 <VgaText::scrollScreen()+0xc>
c000cd56:	39 1d 44 43 02 c0    	cmp    DWORD PTR ds:0xc0024344,ebx
c000cd5c:	75 24                	jne    c000cd82 <VgaText::scrollScreen()+0x88>
c000cd5e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cd65:	74 08                	je     c000cd6f <VgaText::scrollScreen()+0x75>
c000cd67:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000cd6d:	eb 13                	jmp    c000cd82 <VgaText::scrollScreen()+0x88>
c000cd6f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000cd75:	85 c0                	test   eax,eax
c000cd77:	74 09                	je     c000cd82 <VgaText::scrollScreen()+0x88>
c000cd79:	83 ec 0c             	sub    esp,0xc
c000cd7c:	53                   	push   ebx
c000cd7d:	ff d0                	call   eax
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cd86:	5b                   	pop    ebx
c000cd87:	5e                   	pop    esi
c000cd88:	5f                   	pop    edi
c000cd89:	e9 1e fe ff ff       	jmp    c000cbac <VgaText::updateCursor()>

c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>:
c000cd8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000cd93:	c1 e0 08             	shl    eax,0x8
c000cd96:	89 c2                	mov    edx,eax
c000cd98:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000cd9d:	09 d0                	or     eax,edx
c000cd9f:	c3                   	ret    

c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000cda0:	53                   	push   ebx
c000cda1:	83 ec 08             	sub    esp,0x8
c000cda4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cda9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cdad:	50                   	push   eax
c000cdae:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cdb3:	50                   	push   eax
c000cdb4:	e8 2f ff ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cdb9:	5a                   	pop    edx
c000cdba:	5b                   	pop    ebx
c000cdbb:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cdc0:	0f b6 c0             	movzx  eax,al
c000cdc3:	50                   	push   eax
c000cdc4:	53                   	push   ebx
c000cdc5:	e8 c4 ff ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cdca:	5a                   	pop    edx
c000cdcb:	5a                   	pop    edx
c000cdcc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cdd2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cdd6:	0f b7 d2             	movzx  edx,dx
c000cdd9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cdde:	39 0d 44 43 02 c0    	cmp    DWORD PTR ds:0xc0024344,ecx
c000cde4:	75 14                	jne    c000cdfa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cde6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cdec:	85 c0                	test   eax,eax
c000cdee:	74 0a                	je     c000cdfa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cdf0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cdf4:	83 c4 08             	add    esp,0x8
c000cdf7:	5b                   	pop    ebx
c000cdf8:	ff e0                	jmp    eax
c000cdfa:	83 c4 08             	add    esp,0x8
c000cdfd:	5b                   	pop    ebx
c000cdfe:	c3                   	ret    
c000cdff:	90                   	nop

c000ce00 <VgaText::getCursorX()>:
c000ce00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce04:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ce0a:	c3                   	ret    
c000ce0b:	90                   	nop

c000ce0c <VgaText::getCursorY()>:
c000ce0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce10:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ce16:	c3                   	ret    
c000ce17:	90                   	nop

c000ce18 <VgaText::setCursor(int, int)>:
c000ce18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce20:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ce26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce2a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ce30:	e9 77 fd ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000ce35:	90                   	nop

c000ce36 <VgaText::setCursorX(int)>:
c000ce36:	83 ec 10             	sub    esp,0x10
c000ce39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce3d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ce43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce47:	50                   	push   eax
c000ce48:	e8 cb ff ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000ce4d:	83 c4 1c             	add    esp,0x1c
c000ce50:	c3                   	ret    
c000ce51:	90                   	nop

c000ce52 <VgaText::setCursorY(int)>:
c000ce52:	83 ec 10             	sub    esp,0x10
c000ce55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce5d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ce63:	50                   	push   eax
c000ce64:	e8 af ff ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000ce69:	83 c4 1c             	add    esp,0x1c
c000ce6c:	c3                   	ret    
c000ce6d:	90                   	nop

c000ce6e <VgaText::incrementCursor(bool)>:
c000ce6e:	56                   	push   esi
c000ce6f:	53                   	push   ebx
c000ce70:	51                   	push   ecx
c000ce71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce79:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000ce7f:	40                   	inc    eax
c000ce80:	83 f8 50             	cmp    eax,0x50
c000ce83:	74 08                	je     c000ce8d <VgaText::incrementCursor(bool)+0x1f>
c000ce85:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000ce8b:	eb 33                	jmp    c000cec0 <VgaText::incrementCursor(bool)+0x52>
c000ce8d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce93:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce9d:	8d 50 01             	lea    edx,[eax+0x1]
c000cea0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cea6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ceac:	75 12                	jne    c000cec0 <VgaText::incrementCursor(bool)+0x52>
c000ceae:	83 ec 0c             	sub    esp,0xc
c000ceb1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ceb7:	53                   	push   ebx
c000ceb8:	e8 3d fe ff ff       	call   c000ccfa <VgaText::scrollScreen()>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	89 f0                	mov    eax,esi
c000cec2:	84 c0                	test   al,al
c000cec4:	74 0c                	je     c000ced2 <VgaText::incrementCursor(bool)+0x64>
c000cec6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceca:	5a                   	pop    edx
c000cecb:	5b                   	pop    ebx
c000cecc:	5e                   	pop    esi
c000cecd:	e9 da fc ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000ced2:	58                   	pop    eax
c000ced3:	5b                   	pop    ebx
c000ced4:	5e                   	pop    esi
c000ced5:	c3                   	ret    

c000ced6 <VgaText::updateRAMUsageDisplay(int)>:
c000ced6:	53                   	push   ebx
c000ced7:	bb 0a 00 00 00       	mov    ebx,0xa
c000cedc:	6a 0f                	push   0xf
c000cede:	6a 00                	push   0x0
c000cee0:	e8 03 fe ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cee5:	5a                   	pop    edx
c000cee6:	59                   	pop    ecx
c000cee7:	0f b6 c8             	movzx  ecx,al
c000ceea:	51                   	push   ecx
c000ceeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceef:	99                   	cdq    
c000cef0:	f7 fb                	idiv   ebx
c000cef2:	83 c0 30             	add    eax,0x30
c000cef5:	89 d3                	mov    ebx,edx
c000cef7:	0f be c0             	movsx  eax,al
c000cefa:	50                   	push   eax
c000cefb:	e8 8e fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf00:	5a                   	pop    edx
c000cf01:	83 c3 30             	add    ebx,0x30
c000cf04:	5a                   	pop    edx
c000cf05:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cf0b:	0f b6 db             	movzx  ebx,bl
c000cf0e:	51                   	push   ecx
c000cf0f:	53                   	push   ebx
c000cf10:	e8 79 fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf15:	5b                   	pop    ebx
c000cf16:	5a                   	pop    edx
c000cf17:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cf1d:	51                   	push   ecx
c000cf1e:	6a 25                	push   0x25
c000cf20:	e8 69 fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf25:	59                   	pop    ecx
c000cf26:	5b                   	pop    ebx
c000cf27:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cf2d:	5b                   	pop    ebx
c000cf2e:	c3                   	ret    
c000cf2f:	90                   	nop

c000cf30 <VgaText::updateDiskUsage()>:
c000cf30:	55                   	push   ebp
c000cf31:	bd 10 27 00 00       	mov    ebp,0x2710
c000cf36:	57                   	push   edi
c000cf37:	56                   	push   esi
c000cf38:	53                   	push   ebx
c000cf39:	6a 0f                	push   0xf
c000cf3b:	6a 00                	push   0x0
c000cf3d:	e8 a6 fd ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf42:	0f b6 d8             	movzx  ebx,al
c000cf45:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c000cf4a:	5a                   	pop    edx
c000cf4b:	99                   	cdq    
c000cf4c:	f7 fd                	idiv   ebp
c000cf4e:	59                   	pop    ecx
c000cf4f:	b9 0a 00 00 00       	mov    ecx,0xa
c000cf54:	99                   	cdq    
c000cf55:	f7 f9                	idiv   ecx
c000cf57:	53                   	push   ebx
c000cf58:	8d 42 30             	lea    eax,[edx+0x30]
c000cf5b:	0f b6 c0             	movzx  eax,al
c000cf5e:	50                   	push   eax
c000cf5f:	e8 2a fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf64:	5e                   	pop    esi
c000cf65:	5f                   	pop    edi
c000cf66:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cf6c:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c000cf71:	bf e8 03 00 00       	mov    edi,0x3e8
c000cf76:	99                   	cdq    
c000cf77:	f7 ff                	idiv   edi
c000cf79:	99                   	cdq    
c000cf7a:	f7 f9                	idiv   ecx
c000cf7c:	53                   	push   ebx
c000cf7d:	8d 42 30             	lea    eax,[edx+0x30]
c000cf80:	0f b6 c0             	movzx  eax,al
c000cf83:	50                   	push   eax
c000cf84:	e8 05 fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf89:	5a                   	pop    edx
c000cf8a:	5e                   	pop    esi
c000cf8b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cf91:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c000cf96:	be 64 00 00 00       	mov    esi,0x64
c000cf9b:	99                   	cdq    
c000cf9c:	f7 fe                	idiv   esi
c000cf9e:	99                   	cdq    
c000cf9f:	f7 f9                	idiv   ecx
c000cfa1:	53                   	push   ebx
c000cfa2:	8d 42 30             	lea    eax,[edx+0x30]
c000cfa5:	0f b6 c0             	movzx  eax,al
c000cfa8:	50                   	push   eax
c000cfa9:	e8 e0 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfae:	5a                   	pop    edx
c000cfaf:	5a                   	pop    edx
c000cfb0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cfb6:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c000cfbb:	53                   	push   ebx
c000cfbc:	99                   	cdq    
c000cfbd:	f7 f9                	idiv   ecx
c000cfbf:	99                   	cdq    
c000cfc0:	f7 f9                	idiv   ecx
c000cfc2:	8d 42 30             	lea    eax,[edx+0x30]
c000cfc5:	0f b6 c0             	movzx  eax,al
c000cfc8:	50                   	push   eax
c000cfc9:	e8 c0 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfce:	5a                   	pop    edx
c000cfcf:	5a                   	pop    edx
c000cfd0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cfd6:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c000cfdb:	53                   	push   ebx
c000cfdc:	99                   	cdq    
c000cfdd:	f7 f9                	idiv   ecx
c000cfdf:	8d 42 30             	lea    eax,[edx+0x30]
c000cfe2:	0f b6 c0             	movzx  eax,al
c000cfe5:	50                   	push   eax
c000cfe6:	e8 a3 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfeb:	5a                   	pop    edx
c000cfec:	5a                   	pop    edx
c000cfed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cff3:	a1 20 60 02 c0       	mov    eax,ds:0xc0026020
c000cff8:	53                   	push   ebx
c000cff9:	99                   	cdq    
c000cffa:	f7 fd                	idiv   ebp
c000cffc:	99                   	cdq    
c000cffd:	f7 f9                	idiv   ecx
c000cfff:	8d 42 30             	lea    eax,[edx+0x30]
c000d002:	0f b6 c0             	movzx  eax,al
c000d005:	50                   	push   eax
c000d006:	e8 83 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d00b:	5d                   	pop    ebp
c000d00c:	5a                   	pop    edx
c000d00d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d013:	a1 20 60 02 c0       	mov    eax,ds:0xc0026020
c000d018:	53                   	push   ebx
c000d019:	99                   	cdq    
c000d01a:	f7 ff                	idiv   edi
c000d01c:	99                   	cdq    
c000d01d:	f7 f9                	idiv   ecx
c000d01f:	8d 42 30             	lea    eax,[edx+0x30]
c000d022:	0f b6 c0             	movzx  eax,al
c000d025:	50                   	push   eax
c000d026:	e8 63 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d02b:	5f                   	pop    edi
c000d02c:	5d                   	pop    ebp
c000d02d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d033:	53                   	push   ebx
c000d034:	a1 20 60 02 c0       	mov    eax,ds:0xc0026020
c000d039:	99                   	cdq    
c000d03a:	f7 fe                	idiv   esi
c000d03c:	99                   	cdq    
c000d03d:	f7 f9                	idiv   ecx
c000d03f:	8d 42 30             	lea    eax,[edx+0x30]
c000d042:	0f b6 c0             	movzx  eax,al
c000d045:	50                   	push   eax
c000d046:	e8 43 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d04b:	5a                   	pop    edx
c000d04c:	5e                   	pop    esi
c000d04d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d053:	a1 20 60 02 c0       	mov    eax,ds:0xc0026020
c000d058:	53                   	push   ebx
c000d059:	99                   	cdq    
c000d05a:	f7 f9                	idiv   ecx
c000d05c:	99                   	cdq    
c000d05d:	f7 f9                	idiv   ecx
c000d05f:	8d 42 30             	lea    eax,[edx+0x30]
c000d062:	0f b6 c0             	movzx  eax,al
c000d065:	50                   	push   eax
c000d066:	e8 23 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d06b:	5f                   	pop    edi
c000d06c:	5d                   	pop    ebp
c000d06d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d073:	a1 20 60 02 c0       	mov    eax,ds:0xc0026020
c000d078:	53                   	push   ebx
c000d079:	99                   	cdq    
c000d07a:	f7 f9                	idiv   ecx
c000d07c:	83 c2 30             	add    edx,0x30
c000d07f:	0f b6 d2             	movzx  edx,dl
c000d082:	52                   	push   edx
c000d083:	e8 06 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d088:	5a                   	pop    edx
c000d089:	59                   	pop    ecx
c000d08a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d090:	5b                   	pop    ebx
c000d091:	5e                   	pop    esi
c000d092:	5f                   	pop    edi
c000d093:	5d                   	pop    ebp
c000d094:	c3                   	ret    
c000d095:	90                   	nop

c000d096 <VgaText::updateTitle()>:
c000d096:	53                   	push   ebx
c000d097:	31 c0                	xor    eax,eax
c000d099:	83 ec 58             	sub    esp,0x58
c000d09c:	89 e1                	mov    ecx,esp
c000d09e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d0a2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d0a6:	40                   	inc    eax
c000d0a7:	83 f8 50             	cmp    eax,0x50
c000d0aa:	75 f6                	jne    c000d0a2 <VgaText::updateTitle()+0xc>
c000d0ac:	31 c0                	xor    eax,eax
c000d0ae:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d0b5:	84 db                	test   bl,bl
c000d0b7:	74 06                	je     c000d0bf <VgaText::updateTitle()+0x29>
c000d0b9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d0bc:	40                   	inc    eax
c000d0bd:	eb ef                	jmp    c000d0ae <VgaText::updateTitle()+0x18>
c000d0bf:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d0c5:	85 c0                	test   eax,eax
c000d0c7:	74 09                	je     c000d0d2 <VgaText::updateTitle()+0x3c>
c000d0c9:	53                   	push   ebx
c000d0ca:	53                   	push   ebx
c000d0cb:	51                   	push   ecx
c000d0cc:	52                   	push   edx
c000d0cd:	ff d0                	call   eax
c000d0cf:	83 c4 10             	add    esp,0x10
c000d0d2:	e8 59 fe ff ff       	call   c000cf30 <VgaText::updateDiskUsage()>
c000d0d7:	83 c4 58             	add    esp,0x58
c000d0da:	5b                   	pop    ebx
c000d0db:	c3                   	ret    

c000d0dc <VgaText::setTitleTextColour(VgaColour)>:
c000d0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0e4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d0ea:	eb aa                	jmp    c000d096 <VgaText::updateTitle()>

c000d0ec <VgaText::setTitleColour(VgaColour)>:
c000d0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d0fa:	eb 9a                	jmp    c000d096 <VgaText::updateTitle()>

c000d0fc <VgaText::setTitle(char*)>:
c000d0fc:	53                   	push   ebx
c000d0fd:	83 ec 10             	sub    esp,0x10
c000d100:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d108:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d10e:	50                   	push   eax
c000d10f:	e8 93 35 ff ff       	call   c00006a7 <strcpy>
c000d114:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d118:	83 c4 18             	add    esp,0x18
c000d11b:	5b                   	pop    ebx
c000d11c:	e9 75 ff ff ff       	jmp    c000d096 <VgaText::updateTitle()>
c000d121:	90                   	nop

c000d122 <VgaText::decrementCursor(bool)>:
c000d122:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d126:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d12a:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d130:	85 c0                	test   eax,eax
c000d132:	74 07                	je     c000d13b <VgaText::decrementCursor(bool)+0x19>
c000d134:	48                   	dec    eax
c000d135:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d13b:	84 c9                	test   cl,cl
c000d13d:	74 09                	je     c000d148 <VgaText::decrementCursor(bool)+0x26>
c000d13f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d143:	e9 64 fa ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000d148:	c3                   	ret    
c000d149:	90                   	nop

c000d14a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d14a:	53                   	push   ebx
c000d14b:	83 ec 08             	sub    esp,0x8
c000d14e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d152:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d156:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d15a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d15e:	3c 07                	cmp    al,0x7
c000d160:	75 2a                	jne    c000d18c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d162:	a1 ec 43 02 c0       	mov    eax,ds:0xc00243ec
c000d167:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d16f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d177:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d17f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d183:	83 c4 08             	add    esp,0x8
c000d186:	5b                   	pop    ebx
c000d187:	e9 c0 2d 00 00       	jmp    c000ff4c <Buzzer::beep(int, int, bool)>
c000d18c:	3c 0d                	cmp    al,0xd
c000d18e:	75 0c                	jne    c000d19c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d190:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d19a:	eb 3b                	jmp    c000d1d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d19c:	3c 0a                	cmp    al,0xa
c000d19e:	75 40                	jne    c000d1e0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d1a0:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d1a6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d1b0:	8d 50 01             	lea    edx,[eax+0x1]
c000d1b3:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d1b9:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d1bf:	75 12                	jne    c000d1d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d1c1:	83 ec 0c             	sub    esp,0xc
c000d1c4:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d1ca:	53                   	push   ebx
c000d1cb:	e8 2a fb ff ff       	call   c000ccfa <VgaText::scrollScreen()>
c000d1d0:	83 c4 10             	add    esp,0x10
c000d1d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1d7:	83 c4 08             	add    esp,0x8
c000d1da:	5b                   	pop    ebx
c000d1db:	e9 cc f9 ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000d1e0:	3c 08                	cmp    al,0x8
c000d1e2:	75 31                	jne    c000d215 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d1e4:	50                   	push   eax
c000d1e5:	50                   	push   eax
c000d1e6:	6a 01                	push   0x1
c000d1e8:	53                   	push   ebx
c000d1e9:	e8 34 ff ff ff       	call   c000d122 <VgaText::decrementCursor(bool)>
c000d1ee:	5a                   	pop    edx
c000d1ef:	59                   	pop    ecx
c000d1f0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d1f6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d1fc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d202:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d208:	6a 20                	push   0x20
c000d20a:	53                   	push   ebx
c000d20b:	e8 90 fb ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d210:	83 c4 28             	add    esp,0x28
c000d213:	5b                   	pop    ebx
c000d214:	c3                   	ret    
c000d215:	83 ec 08             	sub    esp,0x8
c000d218:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d21e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d224:	0f be c0             	movsx  eax,al
c000d227:	51                   	push   ecx
c000d228:	52                   	push   edx
c000d229:	50                   	push   eax
c000d22a:	53                   	push   ebx
c000d22b:	e8 70 fb ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d230:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d234:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d23c:	83 c4 28             	add    esp,0x28
c000d23f:	5b                   	pop    ebx
c000d240:	e9 29 fc ff ff       	jmp    c000ce6e <VgaText::incrementCursor(bool)>
c000d245:	90                   	nop

c000d246 <VgaText::isShowingCursor()>:
c000d246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d24a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d250:	c3                   	ret    
c000d251:	90                   	nop

c000d252 <VgaText::isBlinkDisabled()>:
c000d252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d256:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d25c:	83 f0 01             	xor    eax,0x1
c000d25f:	c3                   	ret    

c000d260 <VgaText::setCursorHeight(int)>:
c000d260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d268:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d26e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d275:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d279:	e9 48 f9 ff ff       	jmp    c000cbc6 <VgaText::showCursor(bool)>

c000d27e <VgaText::getCursorHeight()>:
c000d27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d282:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d288:	c3                   	ret    

c000d289 <setActiveTerminal(VgaText*)>:
c000d289:	53                   	push   ebx
c000d28a:	83 ec 08             	sub    esp,0x8
c000d28d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d291:	85 db                	test   ebx,ebx
c000d293:	75 11                	jne    c000d2a6 <setActiveTerminal(VgaText*)+0x1d>
c000d295:	c7 44 24 10 40 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f40
c000d29d:	83 c4 08             	add    esp,0x8
c000d2a0:	5b                   	pop    ebx
c000d2a1:	e9 a8 82 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c000d2a6:	50                   	push   eax
c000d2a7:	50                   	push   eax
c000d2a8:	53                   	push   ebx
c000d2a9:	68 4e 0f 02 c0       	push   0xc0020f4e
c000d2ae:	e8 a6 1e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d2b3:	a1 44 43 02 c0       	mov    eax,ds:0xc0024344
c000d2b8:	83 c4 10             	add    esp,0x10
c000d2bb:	85 c0                	test   eax,eax
c000d2bd:	74 0c                	je     c000d2cb <setActiveTerminal(VgaText*)+0x42>
c000d2bf:	83 ec 0c             	sub    esp,0xc
c000d2c2:	50                   	push   eax
c000d2c3:	e8 e4 f8 ff ff       	call   c000cbac <VgaText::updateCursor()>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	51                   	push   ecx
c000d2cc:	89 1d 44 43 02 c0    	mov    DWORD PTR ds:0xc0024344,ebx
c000d2d2:	51                   	push   ecx
c000d2d3:	53                   	push   ebx
c000d2d4:	68 66 0f 02 c0       	push   0xc0020f66
c000d2d9:	e8 7b 1e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d2de:	83 c4 0c             	add    esp,0xc
c000d2e1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ed:	53                   	push   ebx
c000d2ee:	e8 25 fb ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d2f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d2f6:	e8 57 ff ff ff       	call   c000d252 <VgaText::isBlinkDisabled()>
c000d2fb:	5a                   	pop    edx
c000d2fc:	59                   	pop    ecx
c000d2fd:	0f b6 c0             	movzx  eax,al
c000d300:	50                   	push   eax
c000d301:	53                   	push   ebx
c000d302:	e8 cf f8 ff ff       	call   c000cbd6 <VgaText::disableBlink(bool)>
c000d307:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d30a:	e8 6f ff ff ff       	call   c000d27e <VgaText::getCursorHeight()>
c000d30f:	5a                   	pop    edx
c000d310:	59                   	pop    ecx
c000d311:	50                   	push   eax
c000d312:	53                   	push   ebx
c000d313:	e8 48 ff ff ff       	call   c000d260 <VgaText::setCursorHeight(int)>
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d322:	75 0a                	jne    c000d32e <setActiveTerminal(VgaText*)+0xa5>
c000d324:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d32e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d332:	83 c4 08             	add    esp,0x8
c000d335:	5b                   	pop    ebx
c000d336:	e9 1d f8 ff ff       	jmp    c000cb58 <VgaText::load()>

c000d33b <doTerminalCycle()>:
c000d33b:	83 ec 18             	sub    esp,0x18
c000d33e:	a1 40 43 02 c0       	mov    eax,ds:0xc0024340
c000d343:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d349:	50                   	push   eax
c000d34a:	a3 40 43 02 c0       	mov    ds:0xc0024340,eax
c000d34f:	e8 35 ff ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c000d354:	83 c4 1c             	add    esp,0x1c
c000d357:	c3                   	ret    

c000d358 <VgaText::doUpdate()>:
c000d358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d35c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d362:	85 c0                	test   eax,eax
c000d364:	74 02                	je     c000d368 <VgaText::doUpdate()+0x10>
c000d366:	ff e0                	jmp    eax
c000d368:	c3                   	ret    
c000d369:	90                   	nop

c000d36a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d36a:	55                   	push   ebp
c000d36b:	57                   	push   edi
c000d36c:	56                   	push   esi
c000d36d:	53                   	push   ebx
c000d36e:	83 ec 1c             	sub    esp,0x1c
c000d371:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d375:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d37a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d381:	50                   	push   eax
c000d382:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d387:	50                   	push   eax
c000d388:	e8 5b f9 ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000d38d:	59                   	pop    ecx
c000d38e:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d391:	5b                   	pop    ebx
c000d392:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d39a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d3a0:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d3a4:	0f b7 db             	movzx  ebx,bx
c000d3a7:	01 db                	add    ebx,ebx
c000d3a9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d3ad:	01 fb                	add    ebx,edi
c000d3af:	31 c0                	xor    eax,eax
c000d3b1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d3b4:	84 c9                	test   cl,cl
c000d3b6:	0f 84 3d 01 00 00    	je     c000d4f9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d3bc:	80 f9 0d             	cmp    cl,0xd
c000d3bf:	75 0f                	jne    c000d3d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d3c1:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3cb:	e9 23 01 00 00       	jmp    c000d4f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d3d0:	80 f9 0a             	cmp    cl,0xa
c000d3d3:	75 5b                	jne    c000d430 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d3d5:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d3db:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3e5:	8d 48 01             	lea    ecx,[eax+0x1]
c000d3e8:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d3ee:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d3f4:	75 12                	jne    c000d408 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d3f6:	83 ec 0c             	sub    esp,0xc
c000d3f9:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d3ff:	55                   	push   ebp
c000d400:	e8 f5 f8 ff ff       	call   c000ccfa <VgaText::scrollScreen()>
c000d405:	83 c4 10             	add    esp,0x10
c000d408:	83 ec 0c             	sub    esp,0xc
c000d40b:	55                   	push   ebp
c000d40c:	e8 9b f7 ff ff       	call   c000cbac <VgaText::updateCursor()>
c000d411:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d419:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d41f:	83 c4 10             	add    esp,0x10
c000d422:	0f b7 db             	movzx  ebx,bx
c000d425:	01 db                	add    ebx,ebx
c000d427:	31 c0                	xor    eax,eax
c000d429:	01 fb                	add    ebx,edi
c000d42b:	e9 c3 00 00 00       	jmp    c000d4f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d430:	80 f9 08             	cmp    cl,0x8
c000d433:	75 4e                	jne    c000d483 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d435:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d439:	50                   	push   eax
c000d43a:	50                   	push   eax
c000d43b:	6a 01                	push   0x1
c000d43d:	55                   	push   ebp
c000d43e:	e8 df fc ff ff       	call   c000d122 <VgaText::decrementCursor(bool)>
c000d443:	58                   	pop    eax
c000d444:	5a                   	pop    edx
c000d445:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d44b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d451:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d457:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d45d:	6a 20                	push   0x20
c000d45f:	55                   	push   ebp
c000d460:	e8 3b f9 ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d465:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d46d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d473:	83 c4 20             	add    esp,0x20
c000d476:	0f b7 db             	movzx  ebx,bx
c000d479:	01 db                	add    ebx,ebx
c000d47b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d47f:	01 fb                	add    ebx,edi
c000d481:	eb 70                	jmp    c000d4f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d483:	50                   	push   eax
c000d484:	50                   	push   eax
c000d485:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d48a:	50                   	push   eax
c000d48b:	51                   	push   ecx
c000d48c:	e8 fd f8 ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d491:	66 89 03             	mov    WORD PTR [ebx],ax
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	39 2d 44 43 02 c0    	cmp    DWORD PTR ds:0xc0024344,ebp
c000d49d:	75 2a                	jne    c000d4c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d49f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d4a5:	85 c0                	test   eax,eax
c000d4a7:	74 20                	je     c000d4c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d4a9:	52                   	push   edx
c000d4aa:	52                   	push   edx
c000d4ab:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4b1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d4b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4bf:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d4c2:	51                   	push   ecx
c000d4c3:	55                   	push   ebp
c000d4c4:	ff d0                	call   eax
c000d4c6:	83 c4 20             	add    esp,0x20
c000d4c9:	50                   	push   eax
c000d4ca:	83 c3 02             	add    ebx,0x2
c000d4cd:	50                   	push   eax
c000d4ce:	6a 00                	push   0x0
c000d4d0:	55                   	push   ebp
c000d4d1:	e8 98 f9 ff ff       	call   c000ce6e <VgaText::incrementCursor(bool)>
c000d4d6:	83 c4 10             	add    esp,0x10
c000d4d9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d4e0:	75 0f                	jne    c000d4f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4e2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4ea:	0f b7 db             	movzx  ebx,bx
c000d4ed:	01 db                	add    ebx,ebx
c000d4ef:	01 fb                	add    ebx,edi
c000d4f1:	b0 01                	mov    al,0x1
c000d4f3:	46                   	inc    esi
c000d4f4:	e9 b8 fe ff ff       	jmp    c000d3b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d4f9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d4fd:	83 ec 0c             	sub    esp,0xc
c000d500:	55                   	push   ebp
c000d501:	e8 a6 f6 ff ff       	call   c000cbac <VgaText::updateCursor()>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d50d:	84 c0                	test   al,al
c000d50f:	74 0c                	je     c000d51d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	55                   	push   ebp
c000d515:	e8 3e fe ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d524:	83 c4 1c             	add    esp,0x1c
c000d527:	5b                   	pop    ebx
c000d528:	5e                   	pop    esi
c000d529:	5f                   	pop    edi
c000d52a:	5d                   	pop    ebp
c000d52b:	c3                   	ret    

c000d52c <VgaText::clearScreen()>:
c000d52c:	57                   	push   edi
c000d52d:	56                   	push   esi
c000d52e:	31 f6                	xor    esi,esi
c000d530:	53                   	push   ebx
c000d531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d535:	52                   	push   edx
c000d536:	6a 00                	push   0x0
c000d538:	6a 00                	push   0x0
c000d53a:	53                   	push   ebx
c000d53b:	e8 d8 f8 ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d540:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d547:	83 c4 10             	add    esp,0x10
c000d54a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d550:	7e 26                	jle    c000d578 <VgaText::clearScreen()+0x4c>
c000d552:	31 ff                	xor    edi,edi
c000d554:	50                   	push   eax
c000d555:	50                   	push   eax
c000d556:	56                   	push   esi
c000d557:	57                   	push   edi
c000d558:	47                   	inc    edi
c000d559:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d55f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d565:	6a 20                	push   0x20
c000d567:	53                   	push   ebx
c000d568:	e8 33 f8 ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d56d:	83 c4 20             	add    esp,0x20
c000d570:	83 ff 50             	cmp    edi,0x50
c000d573:	75 df                	jne    c000d554 <VgaText::clearScreen()+0x28>
c000d575:	46                   	inc    esi
c000d576:	eb d2                	jmp    c000d54a <VgaText::clearScreen()+0x1e>
c000d578:	83 ec 0c             	sub    esp,0xc
c000d57b:	53                   	push   ebx
c000d57c:	e8 d7 fd ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d58b:	5b                   	pop    ebx
c000d58c:	5e                   	pop    esi
c000d58d:	5f                   	pop    edi
c000d58e:	c3                   	ret    
c000d58f:	90                   	nop

c000d590 <VgaText::putchar(char)>:
c000d590:	56                   	push   esi
c000d591:	53                   	push   ebx
c000d592:	83 ec 14             	sub    esp,0x14
c000d595:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d599:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d59d:	3c 5b                	cmp    al,0x5b
c000d59f:	75 21                	jne    c000d5c2 <VgaText::putchar(char)+0x32>
c000d5a1:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d5a8:	74 28                	je     c000d5d2 <VgaText::putchar(char)+0x42>
c000d5aa:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d5b3:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d5bd:	e9 e2 00 00 00       	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d5c2:	3c 1b                	cmp    al,0x1b
c000d5c4:	75 0c                	jne    c000d5d2 <VgaText::putchar(char)+0x42>
c000d5c6:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d5cd:	e9 d2 00 00 00       	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d5d2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d5d8:	84 c9                	test   cl,cl
c000d5da:	0f 84 ab 00 00 00    	je     c000d68b <VgaText::putchar(char)+0xfb>
c000d5e0:	8d 50 c0             	lea    edx,[eax-0x40]
c000d5e3:	80 fa 3e             	cmp    dl,0x3e
c000d5e6:	0f 87 82 00 00 00    	ja     c000d66e <VgaText::putchar(char)+0xde>
c000d5ec:	3c 6d                	cmp    al,0x6d
c000d5ee:	75 4d                	jne    c000d63d <VgaText::putchar(char)+0xad>
c000d5f0:	31 f6                	xor    esi,esi
c000d5f2:	31 d2                	xor    edx,edx
c000d5f4:	31 c0                	xor    eax,eax
c000d5f6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d5fc:	7e 30                	jle    c000d62e <VgaText::putchar(char)+0x9e>
c000d5fe:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d606:	80 fa 3b             	cmp    dl,0x3b
c000d609:	75 17                	jne    c000d622 <VgaText::putchar(char)+0x92>
c000d60b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d60f:	50                   	push   eax
c000d610:	53                   	push   ebx
c000d611:	e8 fa f5 ff ff       	call   c000cc10 <VgaText::doANSI_SGR(int)>
c000d616:	59                   	pop    ecx
c000d617:	31 d2                	xor    edx,edx
c000d619:	58                   	pop    eax
c000d61a:	31 c0                	xor    eax,eax
c000d61c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d620:	eb 09                	jmp    c000d62b <VgaText::putchar(char)+0x9b>
c000d622:	6b c0 0a             	imul   eax,eax,0xa
c000d625:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d629:	88 ca                	mov    dl,cl
c000d62b:	46                   	inc    esi
c000d62c:	eb c8                	jmp    c000d5f6 <VgaText::putchar(char)+0x66>
c000d62e:	84 d2                	test   dl,dl
c000d630:	74 31                	je     c000d663 <VgaText::putchar(char)+0xd3>
c000d632:	50                   	push   eax
c000d633:	53                   	push   ebx
c000d634:	e8 d7 f5 ff ff       	call   c000cc10 <VgaText::doANSI_SGR(int)>
c000d639:	58                   	pop    eax
c000d63a:	5a                   	pop    edx
c000d63b:	eb 26                	jmp    c000d663 <VgaText::putchar(char)+0xd3>
c000d63d:	3c 4a                	cmp    al,0x4a
c000d63f:	75 22                	jne    c000d663 <VgaText::putchar(char)+0xd3>
c000d641:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d648:	75 19                	jne    c000d663 <VgaText::putchar(char)+0xd3>
c000d64a:	83 ec 0c             	sub    esp,0xc
c000d64d:	53                   	push   ebx
c000d64e:	e8 d9 fe ff ff       	call   c000d52c <VgaText::clearScreen()>
c000d653:	83 c4 0c             	add    esp,0xc
c000d656:	6a 00                	push   0x0
c000d658:	6a 00                	push   0x0
c000d65a:	53                   	push   ebx
c000d65b:	e8 b8 f7 ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d660:	83 c4 10             	add    esp,0x10
c000d663:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d66c:	eb 36                	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d66e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d674:	83 fa 0e             	cmp    edx,0xe
c000d677:	7f 2b                	jg     c000d6a4 <VgaText::putchar(char)+0x114>
c000d679:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d67c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d682:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d689:	eb 19                	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d68b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d691:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d697:	0f be c0             	movsx  eax,al
c000d69a:	50                   	push   eax
c000d69b:	53                   	push   ebx
c000d69c:	e8 a9 fa ff ff       	call   c000d14a <VgaText::putchar(char, VgaColour, VgaColour)>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	83 c4 14             	add    esp,0x14
c000d6a7:	5b                   	pop    ebx
c000d6a8:	5e                   	pop    esi
c000d6a9:	c3                   	ret    

c000d6aa <VgaText::puts(char const*)>:
c000d6aa:	53                   	push   ebx
c000d6ab:	83 ec 08             	sub    esp,0x8
c000d6ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d6b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d6b5:	84 c0                	test   al,al
c000d6b7:	74 12                	je     c000d6cb <VgaText::puts(char const*)+0x21>
c000d6b9:	51                   	push   ecx
c000d6ba:	43                   	inc    ebx
c000d6bb:	51                   	push   ecx
c000d6bc:	50                   	push   eax
c000d6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c1:	e8 ca fe ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	eb e7                	jmp    c000d6b2 <VgaText::puts(char const*)+0x8>
c000d6cb:	83 c4 08             	add    esp,0x8
c000d6ce:	5b                   	pop    ebx
c000d6cf:	c3                   	ret    

c000d6d0 <VgaText::putx(unsigned int)>:
c000d6d0:	57                   	push   edi
c000d6d1:	b9 11 00 00 00       	mov    ecx,0x11
c000d6d6:	56                   	push   esi
c000d6d7:	be 82 0f 02 c0       	mov    esi,0xc0020f82
c000d6dc:	53                   	push   ebx
c000d6dd:	83 ec 20             	sub    esp,0x20
c000d6e0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d6e4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d6e8:	fc                   	cld    
c000d6e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6eb:	be 08 00 00 00       	mov    esi,0x8
c000d6f0:	50                   	push   eax
c000d6f1:	50                   	push   eax
c000d6f2:	89 d8                	mov    eax,ebx
c000d6f4:	c1 e8 1c             	shr    eax,0x1c
c000d6f7:	c1 e3 04             	shl    ebx,0x4
c000d6fa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d6ff:	50                   	push   eax
c000d700:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d704:	e8 87 fe ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	4e                   	dec    esi
c000d70d:	75 e1                	jne    c000d6f0 <VgaText::putx(unsigned int)+0x20>
c000d70f:	83 c4 20             	add    esp,0x20
c000d712:	5b                   	pop    ebx
c000d713:	5e                   	pop    esi
c000d714:	5f                   	pop    edi
c000d715:	c3                   	ret    

c000d716 <VgaText::VgaText(char const*)>:
c000d716:	57                   	push   edi
c000d717:	56                   	push   esi
c000d718:	53                   	push   ebx
c000d719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71d:	83 ec 08             	sub    esp,0x8
c000d720:	6a 00                	push   0x0
c000d722:	50                   	push   eax
c000d723:	e8 e0 05 00 00       	call   c000dd08 <UnixFile::UnixFile(int)>
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	ba e8 0f 02 c0       	mov    edx,0xc0020fe8
c000d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d734:	89 10                	mov    DWORD PTR [eax],edx
c000d736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d748:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d756:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d761:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d788:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d793:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d7a4:	bb 20 43 02 c0       	mov    ebx,0xc0024320
c000d7a9:	b8 08 00 00 00       	mov    eax,0x8
c000d7ae:	fc                   	cld    
c000d7af:	89 d7                	mov    edi,edx
c000d7b1:	89 de                	mov    esi,ebx
c000d7b3:	89 c1                	mov    ecx,eax
c000d7b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7bb:	05 1e 10 00 00       	add    eax,0x101e
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c7:	50                   	push   eax
c000d7c8:	e8 da 2e ff ff       	call   c00006a7 <strcpy>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e2:	83 c0 0c             	add    eax,0xc
c000d7e5:	83 ec 04             	sub    esp,0x4
c000d7e8:	68 00 0f 00 00       	push   0xf00
c000d7ed:	6a 00                	push   0x0
c000d7ef:	50                   	push   eax
c000d7f0:	e8 13 2e ff ff       	call   c0000608 <memset>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	83 ec 04             	sub    esp,0x4
c000d7fb:	6a 00                	push   0x0
c000d7fd:	6a 07                	push   0x7
c000d7ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d803:	e8 c0 f4 ff ff       	call   c000ccc8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	83 ec 08             	sub    esp,0x8
c000d80e:	6a 02                	push   0x2
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	e8 47 fa ff ff       	call   c000d260 <VgaText::setCursorHeight(int)>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	83 ec 04             	sub    esp,0x4
c000d81f:	6a 00                	push   0x0
c000d821:	6a 00                	push   0x0
c000d823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d827:	e8 ec f5 ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	83 ec 08             	sub    esp,0x8
c000d832:	6a 01                	push   0x1
c000d834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d838:	e8 89 f3 ff ff       	call   c000cbc6 <VgaText::showCursor(bool)>
c000d83d:	83 c4 10             	add    esp,0x10
c000d840:	83 ec 08             	sub    esp,0x8
c000d843:	6a 01                	push   0x1
c000d845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d849:	e8 88 f3 ff ff       	call   c000cbd6 <VgaText::disableBlink(bool)>
c000d84e:	83 c4 10             	add    esp,0x10
c000d851:	83 ec 0c             	sub    esp,0xc
c000d854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d858:	e8 cf fc ff ff       	call   c000d52c <VgaText::clearScreen()>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d864:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86f:	05 9e 10 00 00       	add    eax,0x109e
c000d874:	83 ec 04             	sub    esp,0x4
c000d877:	68 96 00 00 00       	push   0x96
c000d87c:	6a 00                	push   0x0
c000d87e:	50                   	push   eax
c000d87f:	e8 84 2d ff ff       	call   c0000608 <memset>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88b:	05 34 11 00 00       	add    eax,0x1134
c000d890:	83 ec 04             	sub    esp,0x4
c000d893:	68 2c 01 00 00       	push   0x12c
c000d898:	6a 00                	push   0x0
c000d89a:	50                   	push   eax
c000d89b:	e8 68 2d ff ff       	call   c0000608 <memset>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	90                   	nop
c000d8a4:	5b                   	pop    ebx
c000d8a5:	5e                   	pop    esi
c000d8a6:	5f                   	pop    edi
c000d8a7:	c3                   	ret    

c000d8a8 <VgaText::receiveKey(unsigned char)>:
c000d8a8:	55                   	push   ebp
c000d8a9:	57                   	push   edi
c000d8aa:	56                   	push   esi
c000d8ab:	53                   	push   ebx
c000d8ac:	83 ec 1c             	sub    esp,0x1c
c000d8af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d8b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8b7:	84 db                	test   bl,bl
c000d8b9:	0f 84 c9 00 00 00    	je     c000d988 <VgaText::receiveKey(unsigned char)+0xe0>
c000d8bf:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d8c5:	80 fb 08             	cmp    bl,0x8
c000d8c8:	75 2c                	jne    c000d8f6 <VgaText::receiveKey(unsigned char)+0x4e>
c000d8ca:	83 ec 0c             	sub    esp,0xc
c000d8cd:	57                   	push   edi
c000d8ce:	e8 52 2d ff ff       	call   c0000625 <strlen>
c000d8d3:	83 c4 10             	add    esp,0x10
c000d8d6:	85 c0                	test   eax,eax
c000d8d8:	74 41                	je     c000d91b <VgaText::receiveKey(unsigned char)+0x73>
c000d8da:	50                   	push   eax
c000d8db:	50                   	push   eax
c000d8dc:	6a 08                	push   0x8
c000d8de:	56                   	push   esi
c000d8df:	e8 ac fc ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d8e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8e7:	e8 39 2d ff ff       	call   c0000625 <strlen>
c000d8ec:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d8f4:	eb 22                	jmp    c000d918 <VgaText::receiveKey(unsigned char)+0x70>
c000d8f6:	52                   	push   edx
c000d8f7:	52                   	push   edx
c000d8f8:	0f be c3             	movsx  eax,bl
c000d8fb:	50                   	push   eax
c000d8fc:	56                   	push   esi
c000d8fd:	e8 8e fc ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d902:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d906:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d90b:	59                   	pop    ecx
c000d90c:	5d                   	pop    ebp
c000d90d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d911:	50                   	push   eax
c000d912:	57                   	push   edi
c000d913:	e8 46 2e ff ff       	call   c000075e <strcat>
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d922:	75 05                	jne    c000d929 <VgaText::receiveKey(unsigned char)+0x81>
c000d924:	80 fb 0a             	cmp    bl,0xa
c000d927:	75 53                	jne    c000d97c <VgaText::receiveKey(unsigned char)+0xd4>
c000d929:	83 ec 0c             	sub    esp,0xc
c000d92c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d932:	53                   	push   ebx
c000d933:	e8 ed 2c ff ff       	call   c0000625 <strlen>
c000d938:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d93b:	89 c5                	mov    ebp,eax
c000d93d:	e8 e3 2c ff ff       	call   c0000625 <strlen>
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d949:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d94e:	76 10                	jbe    c000d960 <VgaText::receiveKey(unsigned char)+0xb8>
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	68 93 0f 02 c0       	push   0xc0020f93
c000d958:	e8 f1 7b 00 00       	call   c001554e <Krnl::panic(char const*)>
c000d95d:	83 c4 10             	add    esp,0x10
c000d960:	50                   	push   eax
c000d961:	50                   	push   eax
c000d962:	57                   	push   edi
c000d963:	53                   	push   ebx
c000d964:	e8 f5 2d ff ff       	call   c000075e <strcat>
c000d969:	83 c4 0c             	add    esp,0xc
c000d96c:	68 96 00 00 00       	push   0x96
c000d971:	6a 00                	push   0x0
c000d973:	57                   	push   edi
c000d974:	e8 8f 2c ff ff       	call   c0000608 <memset>
c000d979:	83 c4 10             	add    esp,0x10
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	56                   	push   esi
c000d980:	e8 d3 f9 ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	83 c4 1c             	add    esp,0x1c
c000d98b:	5b                   	pop    ebx
c000d98c:	5e                   	pop    esi
c000d98d:	5f                   	pop    edi
c000d98e:	5d                   	pop    ebp
c000d98f:	c3                   	ret    

c000d990 <VgaText::write(unsigned long long, void*, int*)>:
c000d990:	55                   	push   ebp
c000d991:	57                   	push   edi
c000d992:	56                   	push   esi
c000d993:	53                   	push   ebx
c000d994:	83 ec 0c             	sub    esp,0xc
c000d997:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d99b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d99f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d9a3:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d9aa:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d9ad:	39 eb                	cmp    ebx,ebp
c000d9af:	74 13                	je     c000d9c4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d9b1:	50                   	push   eax
c000d9b2:	43                   	inc    ebx
c000d9b3:	50                   	push   eax
c000d9b4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d9b8:	50                   	push   eax
c000d9b9:	56                   	push   esi
c000d9ba:	e8 d1 fb ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	eb e9                	jmp    c000d9ad <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d9c4:	83 ec 0c             	sub    esp,0xc
c000d9c7:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d9ce:	56                   	push   esi
c000d9cf:	e8 84 f9 ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d9d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d9d8:	89 38                	mov    DWORD PTR [eax],edi
c000d9da:	83 c4 1c             	add    esp,0x1c
c000d9dd:	31 c0                	xor    eax,eax
c000d9df:	5b                   	pop    ebx
c000d9e0:	5e                   	pop    esi
c000d9e1:	5f                   	pop    edi
c000d9e2:	5d                   	pop    ebp
c000d9e3:	c3                   	ret    

c000d9e4 <newTerminal(char*)>:
c000d9e4:	83 ec 28             	sub    esp,0x28
c000d9e7:	68 60 12 00 00       	push   0x1260
c000d9ec:	e8 33 16 00 00       	call   c000f024 <operator new(unsigned long)>
c000d9f1:	5a                   	pop    edx
c000d9f2:	59                   	pop    ecx
c000d9f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9f7:	50                   	push   eax
c000d9f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9fc:	e8 15 fd ff ff       	call   c000d716 <VgaText::VgaText(char const*)>
c000da01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da05:	83 c4 2c             	add    esp,0x2c
c000da08:	c3                   	ret    
c000da09:	90                   	nop

c000da0a <TSS::TSS()>:
c000da0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da15:	90                   	nop
c000da16:	c3                   	ret    
c000da17:	90                   	nop

c000da18 <TSS::setESP(unsigned long)>:
c000da18:	55                   	push   ebp
c000da19:	89 e5                	mov    ebp,esp
c000da1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000da24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da27:	90                   	nop
c000da28:	5d                   	pop    ebp
c000da29:	c3                   	ret    

c000da2a <TSS::flush()>:
c000da2a:	55                   	push   ebp
c000da2b:	89 e5                	mov    ebp,esp
c000da2d:	83 ec 10             	sub    esp,0x10
c000da30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da33:	8b 00                	mov    eax,DWORD PTR [eax]
c000da35:	83 c8 03             	or     eax,0x3
c000da38:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000da3c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000da40:	66 89 d0             	mov    ax,dx
c000da43:	0f 00 d8             	ltr    ax
c000da46:	90                   	nop
c000da47:	c9                   	leave  
c000da48:	c3                   	ret    
c000da49:	90                   	nop

c000da4a <TSS::setup(unsigned long, unsigned long)>:
c000da4a:	55                   	push   ebp
c000da4b:	89 e5                	mov    ebp,esp
c000da4d:	53                   	push   ebx
c000da4e:	83 ec 14             	sub    esp,0x14
c000da51:	83 ec 0c             	sub    esp,0xc
c000da54:	6a 68                	push   0x68
c000da56:	e8 cc e4 ff ff       	call   c000bf27 <malloc>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	89 c2                	mov    edx,eax
c000da60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da6c:	83 ec 04             	sub    esp,0x4
c000da6f:	6a 68                	push   0x68
c000da71:	6a 00                	push   0x0
c000da73:	50                   	push   eax
c000da74:	e8 8f 2b ff ff       	call   c0000608 <memset>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da82:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000da88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da8e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000da94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da9a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000da9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daa6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000daac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dab2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000dab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dabb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dabe:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daca:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dad9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dadf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dae5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daee:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000daf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dafb:	e8 f5 17 01 00       	call   c001f2f5 <CPU::readCR3()>
c000db00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000db03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db09:	83 ec 08             	sub    esp,0x8
c000db0c:	50                   	push   eax
c000db0d:	8d 45 f0             	lea    eax,[ebp-0x10]
c000db10:	50                   	push   eax
c000db11:	e8 e8 db ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000db16:	83 c4 10             	add    esp,0x10
c000db19:	83 ec 08             	sub    esp,0x8
c000db1c:	6a 68                	push   0x68
c000db1e:	8d 45 f0             	lea    eax,[ebp-0x10]
c000db21:	50                   	push   eax
c000db22:	e8 f3 db ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000db2e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db31:	83 e0 0f             	and    eax,0xf
c000db34:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db37:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db3a:	83 c8 40             	or     eax,0x40
c000db3d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db40:	e8 9d 68 00 00       	call   c00143e2 <thisCPU()>
c000db45:	05 78 01 00 00       	add    eax,0x178
c000db4a:	83 ec 04             	sub    esp,0x4
c000db4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000db50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000db53:	50                   	push   eax
c000db54:	e8 f5 db ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	89 c2                	mov    edx,eax
c000db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db61:	89 10                	mov    DWORD PTR [eax],edx
c000db63:	e8 7a 68 00 00       	call   c00143e2 <thisCPU()>
c000db68:	05 78 01 00 00       	add    eax,0x178
c000db6d:	83 ec 0c             	sub    esp,0xc
c000db70:	50                   	push   eax
c000db71:	e8 1c dc ff ff       	call   c000b792 <GDT::flush()>
c000db76:	83 c4 10             	add    esp,0x10
c000db79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000db7e:	83 ec 08             	sub    esp,0x8
c000db81:	50                   	push   eax
c000db82:	68 fc 0f 02 c0       	push   0xc0020ffc
c000db87:	e8 cd 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000db8c:	83 c4 10             	add    esp,0x10
c000db8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db92:	8b 00                	mov    eax,DWORD PTR [eax]
c000db94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000db97:	c9                   	leave  
c000db98:	c3                   	ret    
c000db99:	90                   	nop

c000db9a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000db9a:	55                   	push   ebp
c000db9b:	57                   	push   edi
c000db9c:	56                   	push   esi
c000db9d:	53                   	push   ebx
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dba9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dbad:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dbb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbb8:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dbbd:	75 08                	jne    c000dbc7 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dbbf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dbc5:	eb 5e                	jmp    c000dc25 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dbc7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dbcc:	75 3d                	jne    c000dc0b <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	68 1a 10 02 c0       	push   0xc002101a
c000dbd6:	e8 7e 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dbdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbe0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dbe3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dbe9:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbeb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dbef:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dbf3:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dbf7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dbfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbff:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dc02:	83 c4 1c             	add    esp,0x1c
c000dc05:	5b                   	pop    ebx
c000dc06:	5e                   	pop    esi
c000dc07:	5f                   	pop    edi
c000dc08:	5d                   	pop    ebp
c000dc09:	ff e0                	jmp    eax
c000dc0b:	89 c2                	mov    edx,eax
c000dc0d:	83 e2 fd             	and    edx,0xfffffffd
c000dc10:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dc16:	74 a7                	je     c000dbbf <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dc18:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dc1d:	83 e0 ef             	and    eax,0xffffffef
c000dc20:	83 f8 08             	cmp    eax,0x8
c000dc23:	76 9a                	jbe    c000dbbf <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dc25:	83 c4 0c             	add    esp,0xc
c000dc28:	31 c0                	xor    eax,eax
c000dc2a:	5b                   	pop    ebx
c000dc2b:	5e                   	pop    esi
c000dc2c:	5f                   	pop    edi
c000dc2d:	5d                   	pop    ebp
c000dc2e:	c3                   	ret    
c000dc2f:	90                   	nop

c000dc30 <ReservedFilename::isAtty()>:
c000dc30:	83 ec 18             	sub    esp,0x18
c000dc33:	68 27 10 02 c0       	push   0xc0021027
c000dc38:	e8 1c 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc44:	31 c0                	xor    eax,eax
c000dc46:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dc4d:	75 12                	jne    c000dc61 <ReservedFilename::isAtty()+0x31>
c000dc4f:	83 ec 0c             	sub    esp,0xc
c000dc52:	68 3d 10 02 c0       	push   0xc002103d
c000dc57:	e8 fd 14 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	b0 01                	mov    al,0x1
c000dc61:	83 c4 0c             	add    esp,0xc
c000dc64:	c3                   	ret    
c000dc65:	90                   	nop

c000dc66 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dc66:	55                   	push   ebp
c000dc67:	57                   	push   edi
c000dc68:	56                   	push   esi
c000dc69:	53                   	push   ebx
c000dc6a:	83 ec 0c             	sub    esp,0xc
c000dc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc71:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc75:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc79:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc80:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc84:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc89:	75 08                	jne    c000dc93 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dc8b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc91:	eb 63                	jmp    c000dcf6 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dc93:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc98:	75 3d                	jne    c000dcd7 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dc9a:	83 ec 0c             	sub    esp,0xc
c000dc9d:	68 50 10 02 c0       	push   0xc0021050
c000dca2:	e8 b2 14 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcaf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcb5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcb7:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dcbb:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcbf:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcc3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcc7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dccb:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dcce:	83 c4 1c             	add    esp,0x1c
c000dcd1:	5b                   	pop    ebx
c000dcd2:	5e                   	pop    esi
c000dcd3:	5f                   	pop    edi
c000dcd4:	5d                   	pop    ebp
c000dcd5:	ff e0                	jmp    eax
c000dcd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcdc:	75 04                	jne    c000dce2 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dcde:	89 33                	mov    DWORD PTR [ebx],esi
c000dce0:	eb 14                	jmp    c000dcf6 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dce2:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dce7:	74 a2                	je     c000dc8b <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dce9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcee:	83 e0 ef             	and    eax,0xffffffef
c000dcf1:	83 f8 08             	cmp    eax,0x8
c000dcf4:	76 95                	jbe    c000dc8b <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dcf6:	83 c4 0c             	add    esp,0xc
c000dcf9:	31 c0                	xor    eax,eax
c000dcfb:	5b                   	pop    ebx
c000dcfc:	5e                   	pop    esi
c000dcfd:	5f                   	pop    edi
c000dcfe:	5d                   	pop    ebp
c000dcff:	c3                   	ret    

c000dd00 <UnixFile::getFileDescriptor()>:
c000dd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd07:	c3                   	ret    

c000dd08 <UnixFile::UnixFile(int)>:
c000dd08:	53                   	push   ebx
c000dd09:	83 ec 18             	sub    esp,0x18
c000dd0c:	ba 6c 11 02 c0       	mov    edx,0xc002116c
c000dd11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd15:	89 10                	mov    DWORD PTR [eax],edx
c000dd17:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd1f:	0f 8f 4d 01 00 00    	jg     c000de72 <UnixFile::UnixFile(int)+0x16a>
c000dd25:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c000dd2a:	8d 50 01             	lea    edx,[eax+0x1]
c000dd2d:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c000dd33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd3a:	83 ec 08             	sub    esp,0x8
c000dd3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd41:	68 d8 43 02 c0       	push   0xc00243d8
c000dd46:	e8 1f 16 01 00       	call   c001f36a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	a0 d4 43 02 c0       	mov    al,ds:0xc00243d4
c000dd53:	83 f0 01             	xor    eax,0x1
c000dd56:	84 c0                	test   al,al
c000dd58:	0f 84 15 01 00 00    	je     c000de73 <UnixFile::UnixFile(int)+0x16b>
c000dd5e:	c6 05 d4 43 02 c0 01 	mov    BYTE PTR ds:0xc00243d4,0x1
c000dd65:	83 ec 0c             	sub    esp,0xc
c000dd68:	6a 0c                	push   0xc
c000dd6a:	e8 b5 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dd6f:	83 c4 10             	add    esp,0x10
c000dd72:	89 c3                	mov    ebx,eax
c000dd74:	83 ec 08             	sub    esp,0x8
c000dd77:	68 03 ff ff 0f       	push   0xfffff03
c000dd7c:	53                   	push   ebx
c000dd7d:	e8 f6 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000dd82:	83 c4 10             	add    esp,0x10
c000dd85:	89 1d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebx
c000dd8b:	83 ec 0c             	sub    esp,0xc
c000dd8e:	6a 0c                	push   0xc
c000dd90:	e8 8f 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dd95:	83 c4 10             	add    esp,0x10
c000dd98:	89 c3                	mov    ebx,eax
c000dd9a:	83 ec 08             	sub    esp,0x8
c000dd9d:	68 01 ff ff 0f       	push   0xfffff01
c000dda2:	53                   	push   ebx
c000dda3:	e8 d0 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	89 1d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,ebx
c000ddb1:	83 ec 0c             	sub    esp,0xc
c000ddb4:	6a 0c                	push   0xc
c000ddb6:	e8 69 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000ddbb:	83 c4 10             	add    esp,0x10
c000ddbe:	89 c3                	mov    ebx,eax
c000ddc0:	83 ec 08             	sub    esp,0x8
c000ddc3:	68 00 ff ff 0f       	push   0xfffff00
c000ddc8:	53                   	push   ebx
c000ddc9:	e8 aa 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000ddce:	83 c4 10             	add    esp,0x10
c000ddd1:	89 1d c4 43 02 c0    	mov    DWORD PTR ds:0xc00243c4,ebx
c000ddd7:	83 ec 0c             	sub    esp,0xc
c000ddda:	6a 0c                	push   0xc
c000dddc:	e8 43 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dde1:	83 c4 10             	add    esp,0x10
c000dde4:	89 c3                	mov    ebx,eax
c000dde6:	83 ec 08             	sub    esp,0x8
c000dde9:	68 02 ff ff 0f       	push   0xfffff02
c000ddee:	53                   	push   ebx
c000ddef:	e8 84 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	89 1d c8 43 02 c0    	mov    DWORD PTR ds:0xc00243c8,ebx
c000ddfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de05:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de0a:	7f 67                	jg     c000de73 <UnixFile::UnixFile(int)+0x16b>
c000de0c:	83 ec 0c             	sub    esp,0xc
c000de0f:	6a 0c                	push   0xc
c000de11:	e8 0e 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000de16:	83 c4 10             	add    esp,0x10
c000de19:	89 c3                	mov    ebx,eax
c000de1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de1f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de24:	83 ec 08             	sub    esp,0x8
c000de27:	50                   	push   eax
c000de28:	53                   	push   ebx
c000de29:	e8 4a 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000de2e:	83 c4 10             	add    esp,0x10
c000de31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de35:	89 1c 85 a0 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc60],ebx
c000de3c:	83 ec 0c             	sub    esp,0xc
c000de3f:	6a 0c                	push   0xc
c000de41:	e8 de 11 00 00       	call   c000f024 <operator new(unsigned long)>
c000de46:	83 c4 10             	add    esp,0x10
c000de49:	89 c3                	mov    ebx,eax
c000de4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4f:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de54:	83 ec 08             	sub    esp,0x8
c000de57:	50                   	push   eax
c000de58:	53                   	push   ebx
c000de59:	e8 1a 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de65:	89 1c 85 60 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbca0],ebx
c000de6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de70:	eb 93                	jmp    c000de05 <UnixFile::UnixFile(int)+0xfd>
c000de72:	90                   	nop
c000de73:	83 c4 18             	add    esp,0x18
c000de76:	5b                   	pop    ebx
c000de77:	c3                   	ret    

c000de78 <ReservedFilename::ReservedFilename(int)>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de7f:	83 ec 08             	sub    esp,0x8
c000de82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de86:	50                   	push   eax
c000de87:	e8 7c fe ff ff       	call   c000dd08 <UnixFile::UnixFile(int)>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	ba 88 11 02 c0       	mov    edx,0xc0021188
c000de94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de98:	89 10                	mov    DWORD PTR [eax],edx
c000de9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dea2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dea5:	90                   	nop
c000dea6:	83 c4 0c             	add    esp,0xc
c000dea9:	c3                   	ret    

c000deaa <UnixFile::~UnixFile()>:
c000deaa:	83 ec 1c             	sub    esp,0x1c
c000dead:	ba 6c 11 02 c0       	mov    edx,0xc002116c
c000deb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb6:	89 10                	mov    DWORD PTR [eax],edx
c000deb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000debc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000debf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000dec4:	7f 73                	jg     c000df39 <UnixFile::~UnixFile()+0x8f>
c000dec6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dece:	83 ec 0c             	sub    esp,0xc
c000ded1:	68 d8 43 02 c0       	push   0xc00243d8
c000ded6:	e8 63 15 01 00       	call   c001f43e <LinkedList<UnixFile>::getFirstElement()>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dee2:	83 ec 0c             	sub    esp,0xc
c000dee5:	68 d8 43 02 c0       	push   0xc00243d8
c000deea:	e8 57 15 01 00       	call   c001f446 <LinkedList<UnixFile>::removeFirst()>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000def6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000defa:	74 40                	je     c000df3c <UnixFile::~UnixFile()+0x92>
c000defc:	83 ec 08             	sub    esp,0x8
c000deff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df03:	68 d8 43 02 c0       	push   0xc00243d8
c000df08:	e8 5d 14 01 00       	call   c001f36a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df14:	8d 50 01             	lea    edx,[eax+0x1]
c000df17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df1b:	3d 88 13 00 00       	cmp    eax,0x1388
c000df20:	0f 94 c0             	sete   al
c000df23:	84 c0                	test   al,al
c000df25:	74 a7                	je     c000dece <UnixFile::~UnixFile()+0x24>
c000df27:	83 ec 0c             	sub    esp,0xc
c000df2a:	68 44 11 02 c0       	push   0xc0021144
c000df2f:	e8 1a 76 00 00       	call   c001554e <Krnl::panic(char const*)>
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	eb 95                	jmp    c000dece <UnixFile::~UnixFile()+0x24>
c000df39:	90                   	nop
c000df3a:	eb 01                	jmp    c000df3d <UnixFile::~UnixFile()+0x93>
c000df3c:	90                   	nop
c000df3d:	90                   	nop
c000df3e:	83 c4 1c             	add    esp,0x1c
c000df41:	c3                   	ret    

c000df42 <UnixFile::~UnixFile()>:
c000df42:	83 ec 0c             	sub    esp,0xc
c000df45:	83 ec 0c             	sub    esp,0xc
c000df48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4c:	e8 59 ff ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000df51:	83 c4 10             	add    esp,0x10
c000df54:	83 ec 08             	sub    esp,0x8
c000df57:	6a 0c                	push   0xc
c000df59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5d:	e8 d1 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	83 c4 0c             	add    esp,0xc
c000df68:	c3                   	ret    
c000df69:	90                   	nop

c000df6a <ReservedFilename::~ReservedFilename()>:
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	ba 88 11 02 c0       	mov    edx,0xc0021188
c000df72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df76:	89 10                	mov    DWORD PTR [eax],edx
c000df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	50                   	push   eax
c000df80:	e8 25 ff ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	90                   	nop
c000df89:	83 c4 0c             	add    esp,0xc
c000df8c:	c3                   	ret    
c000df8d:	90                   	nop

c000df8e <ReservedFilename::~ReservedFilename()>:
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df98:	e8 cd ff ff ff       	call   c000df6a <ReservedFilename::~ReservedFilename()>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	83 ec 08             	sub    esp,0x8
c000dfa3:	6a 0c                	push   0xc
c000dfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa9:	e8 85 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	83 c4 0c             	add    esp,0xc
c000dfb4:	c3                   	ret    

c000dfb5 <getFromFileDescriptor(int)>:
c000dfb5:	53                   	push   ebx
c000dfb6:	83 ec 08             	sub    esp,0x8
c000dfb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfbd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dfc3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfc9:	7f 33                	jg     c000dffe <getFromFileDescriptor(int)+0x49>
c000dfcb:	83 ec 0c             	sub    esp,0xc
c000dfce:	68 d8 43 02 c0       	push   0xc00243d8
c000dfd3:	e8 66 14 01 00       	call   c001f43e <LinkedList<UnixFile>::getFirstElement()>
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	85 c0                	test   eax,eax
c000dfdd:	75 07                	jne    c000dfe6 <getFromFileDescriptor(int)+0x31>
c000dfdf:	31 c0                	xor    eax,eax
c000dfe1:	e9 98 00 00 00       	jmp    c000e07e <getFromFileDescriptor(int)+0xc9>
c000dfe6:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dfe9:	0f 84 8f 00 00 00    	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000dfef:	52                   	push   edx
c000dff0:	52                   	push   edx
c000dff1:	50                   	push   eax
c000dff2:	68 d8 43 02 c0       	push   0xc00243d8
c000dff7:	e8 ec 14 01 00       	call   c001f4e8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dffc:	eb da                	jmp    c000dfd8 <getFromFileDescriptor(int)+0x23>
c000dffe:	83 ec 0c             	sub    esp,0xc
c000e001:	68 5d 10 02 c0       	push   0xc002105d
c000e006:	e8 4e 11 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c000e013:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e019:	74 63                	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000e01b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e021:	75 17                	jne    c000e03a <getFromFileDescriptor(int)+0x85>
c000e023:	83 ec 0c             	sub    esp,0xc
c000e026:	68 84 10 02 c0       	push   0xc0021084
c000e02b:	e8 29 11 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e030:	a1 d0 43 02 c0       	mov    eax,ds:0xc00243d0
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	eb 44                	jmp    c000e07e <getFromFileDescriptor(int)+0xc9>
c000e03a:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c000e03f:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e045:	74 37                	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000e047:	a1 c4 43 02 c0       	mov    eax,ds:0xc00243c4
c000e04c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e052:	74 2a                	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000e054:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e05a:	83 f8 08             	cmp    eax,0x8
c000e05d:	77 09                	ja     c000e068 <getFromFileDescriptor(int)+0xb3>
c000e05f:	8b 04 85 a0 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc60]
c000e066:	eb 16                	jmp    c000e07e <getFromFileDescriptor(int)+0xc9>
c000e068:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e06e:	83 fb 08             	cmp    ebx,0x8
c000e071:	0f 87 68 ff ff ff    	ja     c000dfdf <getFromFileDescriptor(int)+0x2a>
c000e077:	8b 04 9d 60 43 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbca0]
c000e07e:	83 c4 08             	add    esp,0x8
c000e081:	5b                   	pop    ebx
c000e082:	c3                   	ret    

c000e083 <__static_initialization_and_destruction_0(int, int)>:
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e08b:	75 34                	jne    c000e0c1 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e08d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e095:	75 2a                	jne    c000e0c1 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e097:	83 ec 0c             	sub    esp,0xc
c000e09a:	68 d8 43 02 c0       	push   0xc00243d8
c000e09f:	e8 6e 12 01 00       	call   c001f312 <LinkedList<UnixFile>::LinkedList()>
c000e0a4:	83 c4 10             	add    esp,0x10
c000e0a7:	83 ec 04             	sub    esp,0x4
c000e0aa:	68 9c 36 02 c0       	push   0xc002369c
c000e0af:	68 d8 43 02 c0       	push   0xc00243d8
c000e0b4:	68 10 f3 01 c0       	push   0xc001f310
c000e0b9:	e8 f1 0e 00 00       	call   c000efaf <__cxa_atexit>
c000e0be:	83 c4 10             	add    esp,0x10
c000e0c1:	90                   	nop
c000e0c2:	83 c4 0c             	add    esp,0xc
c000e0c5:	c3                   	ret    

c000e0c6 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0c6:	83 ec 0c             	sub    esp,0xc
c000e0c9:	83 ec 08             	sub    esp,0x8
c000e0cc:	68 ff ff 00 00       	push   0xffff
c000e0d1:	6a 01                	push   0x1
c000e0d3:	e8 ab ff ff ff       	call   c000e083 <__static_initialization_and_destruction_0(int, int)>
c000e0d8:	83 c4 10             	add    esp,0x10
c000e0db:	83 c4 0c             	add    esp,0xc
c000e0de:	c3                   	ret    
c000e0df:	90                   	nop

c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0e0:	53                   	push   ebx
c000e0e1:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c000e0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0ef:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0f5:	89 c8                	mov    eax,ecx
c000e0f7:	d1 e8                	shr    eax,1
c000e0f9:	01 d0                	add    eax,edx
c000e0fb:	83 e1 01             	and    ecx,0x1
c000e0fe:	8a 10                	mov    dl,BYTE PTR [eax]
c000e100:	75 09                	jne    c000e10b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e102:	83 e2 f0             	and    edx,0xfffffff0
c000e105:	09 da                	or     edx,ebx
c000e107:	88 10                	mov    BYTE PTR [eax],dl
c000e109:	5b                   	pop    ebx
c000e10a:	c3                   	ret    
c000e10b:	c1 e3 04             	shl    ebx,0x4
c000e10e:	83 e2 0f             	and    edx,0xf
c000e111:	09 da                	or     edx,ebx
c000e113:	88 10                	mov    BYTE PTR [eax],dl
c000e115:	5b                   	pop    ebx
c000e116:	c3                   	ret    

c000e117 <Virt::getPageState(unsigned long)>:
c000e117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11b:	8b 0d 28 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023728
c000e121:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e127:	89 d0                	mov    eax,edx
c000e129:	d1 e8                	shr    eax,1
c000e12b:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e12e:	88 c8                	mov    al,cl
c000e130:	c0 e8 04             	shr    al,0x4
c000e133:	83 e2 01             	and    edx,0x1
c000e136:	75 05                	jne    c000e13d <Virt::getPageState(unsigned long)+0x26>
c000e138:	88 c8                	mov    al,cl
c000e13a:	83 e0 0f             	and    eax,0xf
c000e13d:	c3                   	ret    

c000e13e <Virt::allocateKernelVirtualPages(int)>:
c000e13e:	55                   	push   ebp
c000e13f:	31 ed                	xor    ebp,ebp
c000e141:	57                   	push   edi
c000e142:	56                   	push   esi
c000e143:	53                   	push   ebx
c000e144:	31 db                	xor    ebx,ebx
c000e146:	83 ec 1c             	sub    esp,0x1c
c000e149:	8b 3d 24 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023724
c000e14f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e153:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e158:	57                   	push   edi
c000e159:	e8 b9 ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e15e:	5a                   	pop    edx
c000e15f:	84 c0                	test   al,al
c000e161:	75 3a                	jne    c000e19d <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e163:	85 db                	test   ebx,ebx
c000e165:	75 02                	jne    c000e169 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e167:	89 fd                	mov    ebp,edi
c000e169:	43                   	inc    ebx
c000e16a:	39 f3                	cmp    ebx,esi
c000e16c:	74 5a                	je     c000e1c8 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e16e:	47                   	inc    edi
c000e16f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e175:	76 31                	jbe    c000e1a8 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e177:	c7 05 24 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023724,0xc8000
c000e181:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e186:	75 28                	jne    c000e1b0 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e188:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e18d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e192:	57                   	push   edi
c000e193:	e8 7f ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e198:	5a                   	pop    edx
c000e199:	84 c0                	test   al,al
c000e19b:	74 c6                	je     c000e163 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e19d:	47                   	inc    edi
c000e19e:	31 db                	xor    ebx,ebx
c000e1a0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1a6:	77 cf                	ja     c000e177 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1a8:	89 3d 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,edi
c000e1ae:	eb a8                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1b0:	83 ec 0c             	sub    esp,0xc
c000e1b3:	68 9c 11 02 c0       	push   0xc002119c
c000e1b8:	e8 91 73 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e1bd:	8b 3d 24 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023724
c000e1c3:	83 c4 10             	add    esp,0x10
c000e1c6:	eb 90                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1c8:	89 2d 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,ebp
c000e1ce:	4b                   	dec    ebx
c000e1cf:	74 5f                	je     c000e230 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1d1:	85 f6                	test   esi,esi
c000e1d3:	74 3d                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d5:	89 e8                	mov    eax,ebp
c000e1d7:	31 db                	xor    ebx,ebx
c000e1d9:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1dc:	eb 14                	jmp    c000e1f2 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1de:	6a 01                	push   0x1
c000e1e0:	43                   	inc    ebx
c000e1e1:	50                   	push   eax
c000e1e2:	e8 f9 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e7:	58                   	pop    eax
c000e1e8:	39 f3                	cmp    ebx,esi
c000e1ea:	5a                   	pop    edx
c000e1eb:	74 25                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ed:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c000e1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f5:	85 db                	test   ebx,ebx
c000e1f7:	89 15 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,edx
c000e1fd:	74 20                	je     c000e21f <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1ff:	39 df                	cmp    edi,ebx
c000e201:	75 db                	jne    c000e1de <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e203:	6a 03                	push   0x3
c000e205:	43                   	inc    ebx
c000e206:	50                   	push   eax
c000e207:	e8 d4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e20c:	59                   	pop    ecx
c000e20d:	39 f3                	cmp    ebx,esi
c000e20f:	58                   	pop    eax
c000e210:	75 db                	jne    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e212:	83 c4 1c             	add    esp,0x1c
c000e215:	89 e8                	mov    eax,ebp
c000e217:	c1 e0 0c             	shl    eax,0xc
c000e21a:	5b                   	pop    ebx
c000e21b:	5e                   	pop    esi
c000e21c:	5f                   	pop    edi
c000e21d:	5d                   	pop    ebp
c000e21e:	c3                   	ret    
c000e21f:	6a 02                	push   0x2
c000e221:	bb 01 00 00 00       	mov    ebx,0x1
c000e226:	50                   	push   eax
c000e227:	e8 b4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e22c:	58                   	pop    eax
c000e22d:	5a                   	pop    edx
c000e22e:	eb bd                	jmp    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e230:	6a 04                	push   0x4
c000e232:	8d 45 01             	lea    eax,[ebp+0x1]
c000e235:	55                   	push   ebp
c000e236:	a3 24 37 02 c0       	mov    ds:0xc0023724,eax
c000e23b:	e8 a0 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e240:	59                   	pop    ecx
c000e241:	5b                   	pop    ebx
c000e242:	89 e8                	mov    eax,ebp
c000e244:	c1 e0 0c             	shl    eax,0xc
c000e247:	83 c4 1c             	add    esp,0x1c
c000e24a:	5b                   	pop    ebx
c000e24b:	5e                   	pop    esi
c000e24c:	5f                   	pop    edi
c000e24d:	5d                   	pop    ebp
c000e24e:	c3                   	ret    

c000e24f <Virt::virtualMemorySetup()>:
c000e24f:	53                   	push   ebx
c000e250:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	6a 0f                	push   0xf
c000e25a:	53                   	push   ebx
c000e25b:	43                   	inc    ebx
c000e25c:	e8 7f fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e261:	59                   	pop    ecx
c000e262:	58                   	pop    eax
c000e263:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e269:	75 ed                	jne    c000e258 <Virt::virtualMemorySetup()+0x9>
c000e26b:	50                   	push   eax
c000e26c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e271:	50                   	push   eax
c000e272:	68 00 00 00 c8       	push   0xc8000000
c000e277:	68 23 13 02 c0       	push   0xc0021323
c000e27c:	e8 d8 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e281:	58                   	pop    eax
c000e282:	5a                   	pop    edx
c000e283:	68 00 f0 ff ef       	push   0xeffff000
c000e288:	68 37 13 02 c0       	push   0xc0021337
c000e28d:	e8 c7 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e292:	83 c4 10             	add    esp,0x10
c000e295:	50                   	push   eax
c000e296:	50                   	push   eax
c000e297:	6a 00                	push   0x0
c000e299:	53                   	push   ebx
c000e29a:	43                   	inc    ebx
c000e29b:	e8 40 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a0:	83 c4 10             	add    esp,0x10
c000e2a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2a9:	75 ea                	jne    c000e295 <Virt::virtualMemorySetup()+0x46>
c000e2ab:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2b0:	51                   	push   ecx
c000e2b1:	51                   	push   ecx
c000e2b2:	6a 0f                	push   0xf
c000e2b4:	53                   	push   ebx
c000e2b5:	43                   	inc    ebx
c000e2b6:	e8 25 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2c4:	75 ea                	jne    c000e2b0 <Virt::virtualMemorySetup()+0x61>
c000e2c6:	83 c4 08             	add    esp,0x8
c000e2c9:	5b                   	pop    ebx
c000e2ca:	c3                   	ret    

c000e2cb <Virt::getAKernelVAS()>:
c000e2cb:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000e2d0:	c3                   	ret    

c000e2d1 <Virt::setupPageSwapping(int)>:
c000e2d1:	57                   	push   edi
c000e2d2:	56                   	push   esi
c000e2d3:	53                   	push   ebx
c000e2d4:	83 ec 1c             	sub    esp,0x1c
c000e2d7:	68 14 01 00 00       	push   0x114
c000e2dc:	e8 43 0d 00 00       	call   c000f024 <operator new(unsigned long)>
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	8b 3d d4 56 02 c0    	mov    edi,DWORD PTR ds:0xc00256d4
c000e2ea:	89 c6                	mov    esi,eax
c000e2ec:	57                   	push   edi
c000e2ed:	68 4b 13 02 c0       	push   0xc002134b
c000e2f2:	50                   	push   eax
c000e2f3:	e8 98 13 00 00       	call   c000f690 <File::File(char const*, Process*)>
c000e2f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2fb:	e8 6c 15 00 00       	call   c000f86c <File::unlink()>
c000e300:	58                   	pop    eax
c000e301:	5a                   	pop    edx
c000e302:	6a 12                	push   0x12
c000e304:	56                   	push   esi
c000e305:	e8 ea 13 00 00       	call   c000f6f4 <File::open(FileOpenMode)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	85 c0                	test   eax,eax
c000e30f:	0f 85 b6 00 00 00    	jne    c000e3cb <Virt::setupPageSwapping(int)+0xfa>
c000e315:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e319:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e321:	c1 e3 08             	shl    ebx,0x8
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	c1 fb 04             	sar    ebx,0x4
c000e32a:	68 00 00 01 00       	push   0x10000
c000e32f:	e8 f3 db ff ff       	call   c000bf27 <malloc>
c000e334:	83 c4 0c             	add    esp,0xc
c000e337:	89 c7                	mov    edi,eax
c000e339:	68 00 00 01 00       	push   0x10000
c000e33e:	6a 00                	push   0x0
c000e340:	50                   	push   eax
c000e341:	e8 c2 22 ff ff       	call   c0000608 <memset>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	4b                   	dec    ebx
c000e34a:	83 fb ff             	cmp    ebx,0xffffffff
c000e34d:	74 4a                	je     c000e399 <Virt::setupPageSwapping(int)+0xc8>
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	8b 06                	mov    eax,DWORD PTR [esi]
c000e354:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e358:	52                   	push   edx
c000e359:	57                   	push   edi
c000e35a:	6a 00                	push   0x0
c000e35c:	68 00 00 01 00       	push   0x10000
c000e361:	56                   	push   esi
c000e362:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e365:	83 c4 20             	add    esp,0x20
c000e368:	85 c0                	test   eax,eax
c000e36a:	75 4d                	jne    c000e3b9 <Virt::setupPageSwapping(int)+0xe8>
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	3d 00 00 01 00       	cmp    eax,0x10000
c000e375:	74 d2                	je     c000e349 <Virt::setupPageSwapping(int)+0x78>
c000e377:	52                   	push   edx
c000e378:	4b                   	dec    ebx
c000e379:	52                   	push   edx
c000e37a:	50                   	push   eax
c000e37b:	68 9e 13 02 c0       	push   0xc002139e
c000e380:	e8 d4 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e385:	c7 04 24 a7 13 02 c0 	mov    DWORD PTR [esp],0xc00213a7
c000e38c:	e8 bd 71 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e391:	83 c4 10             	add    esp,0x10
c000e394:	83 fb ff             	cmp    ebx,0xffffffff
c000e397:	75 b6                	jne    c000e34f <Virt::setupPageSwapping(int)+0x7e>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	56                   	push   esi
c000e39d:	e8 b0 13 00 00       	call   c000f752 <File::close()>
c000e3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3a5:	e8 9d db ff ff       	call   c000bf47 <rfree>
c000e3aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b2:	83 c4 20             	add    esp,0x20
c000e3b5:	5b                   	pop    ebx
c000e3b6:	5e                   	pop    esi
c000e3b7:	5f                   	pop    edi
c000e3b8:	c3                   	ret    
c000e3b9:	51                   	push   ecx
c000e3ba:	51                   	push   ecx
c000e3bb:	50                   	push   eax
c000e3bc:	68 86 13 02 c0       	push   0xc0021386
c000e3c1:	e8 93 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	eb a1                	jmp    c000e36c <Virt::setupPageSwapping(int)+0x9b>
c000e3cb:	53                   	push   ebx
c000e3cc:	53                   	push   ebx
c000e3cd:	50                   	push   eax
c000e3ce:	68 62 13 02 c0       	push   0xc0021362
c000e3d3:	e8 81 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3d8:	c7 04 24 6b 13 02 c0 	mov    DWORD PTR [esp],0xc002136b
c000e3df:	e8 6a 71 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	e9 29 ff ff ff       	jmp    c000e315 <Virt::setupPageSwapping(int)+0x44>

c000e3ec <VAS::VAS()>:
c000e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fb:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000e400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e404:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e40f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e413:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e41a:	90                   	nop
c000e41b:	c3                   	ret    

c000e41c <VAS::VAS(VAS*)>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e423:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e42a:	83 ec 0c             	sub    esp,0xc
c000e42d:	68 bc 11 02 c0       	push   0xc00211bc
c000e432:	e8 17 71 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	90                   	nop
c000e43b:	83 c4 0c             	add    esp,0xc
c000e43e:	c3                   	ret    
c000e43f:	90                   	nop

c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e444:	89 c2                	mov    edx,eax
c000e446:	c1 ea 16             	shr    edx,0x16
c000e449:	c1 e8 0a             	shr    eax,0xa
c000e44c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e451:	19 c9                	sbb    ecx,ecx
c000e453:	25 fc 0f 00 00       	and    eax,0xffc
c000e458:	c1 e2 0c             	shl    edx,0xc
c000e45b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e461:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e468:	01 d0                	add    eax,edx
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <VAS::getPageTableEntry(unsigned long)>:
c000e46c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e470:	89 ca                	mov    edx,ecx
c000e472:	c1 ea 16             	shr    edx,0x16
c000e475:	c1 e9 0a             	shr    ecx,0xa
c000e478:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e47e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e484:	c1 e0 0c             	shl    eax,0xc
c000e487:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e48a:	c3                   	ret    

c000e48b <Virt::freeKernelVirtualPages(unsigned long)>:
c000e48b:	57                   	push   edi
c000e48c:	56                   	push   esi
c000e48d:	be 01 00 00 00       	mov    esi,0x1
c000e492:	53                   	push   ebx
c000e493:	83 ec 10             	sub    esp,0x10
c000e496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e49a:	c1 eb 0c             	shr    ebx,0xc
c000e49d:	eb 3e                	jmp    c000e4dd <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e49f:	e8 27 fe ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e4a4:	51                   	push   ecx
c000e4a5:	51                   	push   ecx
c000e4a6:	57                   	push   edi
c000e4a7:	50                   	push   eax
c000e4a8:	e8 bf ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e4ad:	83 c4 10             	add    esp,0x10
c000e4b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4b6:	f6 c4 04             	test   ah,0x4
c000e4b9:	75 5f                	jne    c000e51a <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4bb:	80 fa 04             	cmp    dl,0x4
c000e4be:	74 78                	je     c000e538 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4c0:	80 fa 02             	cmp    dl,0x2
c000e4c3:	0f 84 88 00 00 00    	je     c000e551 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4c9:	80 fa 03             	cmp    dl,0x3
c000e4cc:	0f 84 ac 00 00 00    	je     c000e57e <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4d2:	fe ca                	dec    dl
c000e4d4:	0f 84 92 00 00 00    	je     c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4da:	43                   	inc    ebx
c000e4db:	31 f6                	xor    esi,esi
c000e4dd:	53                   	push   ebx
c000e4de:	e8 34 fc ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e4e3:	5f                   	pop    edi
c000e4e4:	89 df                	mov    edi,ebx
c000e4e6:	c1 e7 0c             	shl    edi,0xc
c000e4e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4ed:	84 c0                	test   al,al
c000e4ef:	75 ae                	jne    c000e49f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4f1:	83 ec 0c             	sub    esp,0xc
c000e4f4:	68 ad 13 02 c0       	push   0xc00213ad
c000e4f9:	e8 50 70 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e4fe:	e8 c8 fd ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	57                   	push   edi
c000e506:	50                   	push   eax
c000e507:	e8 60 ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e513:	8b 00                	mov    eax,DWORD PTR [eax]
c000e515:	f6 c4 04             	test   ah,0x4
c000e518:	74 c0                	je     c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e51a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e526:	50                   	push   eax
c000e527:	e8 44 df ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e533:	80 fa 04             	cmp    dl,0x4
c000e536:	75 88                	jne    c000e4c0 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e538:	89 f0                	mov    eax,esi
c000e53a:	84 c0                	test   al,al
c000e53c:	75 46                	jne    c000e584 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e53e:	c7 44 24 20 e0 11 02 c0 	mov    DWORD PTR [esp+0x20],0xc00211e0
c000e546:	83 c4 10             	add    esp,0x10
c000e549:	5b                   	pop    ebx
c000e54a:	5e                   	pop    esi
c000e54b:	5f                   	pop    edi
c000e54c:	e9 fd 6f 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c000e551:	89 f0                	mov    eax,esi
c000e553:	84 c0                	test   al,al
c000e555:	75 15                	jne    c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e557:	83 ec 0c             	sub    esp,0xc
c000e55a:	68 c9 13 02 c0       	push   0xc00213c9
c000e55f:	e8 ea 6f 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	e9 6e ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e56c:	50                   	push   eax
c000e56d:	50                   	push   eax
c000e56e:	6a 00                	push   0x0
c000e570:	53                   	push   ebx
c000e571:	e8 6a fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	e9 5c ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e57e:	89 f0                	mov    eax,esi
c000e580:	84 c0                	test   al,al
c000e582:	75 14                	jne    c000e598 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e584:	52                   	push   edx
c000e585:	52                   	push   edx
c000e586:	6a 00                	push   0x0
c000e588:	53                   	push   ebx
c000e589:	e8 52 fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e58e:	83 c4 10             	add    esp,0x10
c000e591:	83 c4 10             	add    esp,0x10
c000e594:	5b                   	pop    ebx
c000e595:	5e                   	pop    esi
c000e596:	5f                   	pop    edi
c000e597:	c3                   	ret    
c000e598:	c7 44 24 20 e5 13 02 c0 	mov    DWORD PTR [esp+0x20],0xc00213e5
c000e5a0:	83 c4 10             	add    esp,0x10
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	e9 a3 6f 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c000e5ab:	90                   	nop

c000e5ac <VAS::freeAllocatedPages(unsigned long)>:
c000e5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5b4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5b8:	74 09                	je     c000e5c3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5be:	e9 c8 fe ff ff       	jmp    c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e5c3:	c7 44 24 04 04 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021204
c000e5cb:	e9 89 0b 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>

c000e5d0 <VAS::virtualToPhysical(unsigned long)>:
c000e5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5d4:	50                   	push   eax
c000e5d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d9:	52                   	push   edx
c000e5da:	e8 8d fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e5df:	59                   	pop    ecx
c000e5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5e2:	5a                   	pop    edx
c000e5e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5e8:	c3                   	ret    
c000e5e9:	90                   	nop

c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5ea:	55                   	push   ebp
c000e5eb:	57                   	push   edi
c000e5ec:	56                   	push   esi
c000e5ed:	53                   	push   ebx
c000e5ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5f6:	89 c3                	mov    ebx,eax
c000e5f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5fc:	c1 e3 0c             	shl    ebx,0xc
c000e5ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e603:	01 f3                	add    ebx,esi
c000e605:	85 c0                	test   eax,eax
c000e607:	7e 1f                	jle    c000e628 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e609:	56                   	push   esi
c000e60a:	81 c6 00 10 00 00    	add    esi,0x1000
c000e610:	55                   	push   ebp
c000e611:	e8 56 fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e616:	5a                   	pop    edx
c000e617:	59                   	pop    ecx
c000e618:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e61a:	21 f9                	and    ecx,edi
c000e61c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e620:	09 d1                	or     ecx,edx
c000e622:	39 f3                	cmp    ebx,esi
c000e624:	89 08                	mov    DWORD PTR [eax],ecx
c000e626:	75 e1                	jne    c000e609 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e628:	5b                   	pop    ebx
c000e629:	5e                   	pop    esi
c000e62a:	5f                   	pop    edi
c000e62b:	5d                   	pop    ebp
c000e62c:	c3                   	ret    
c000e62d:	90                   	nop

c000e62e <VAS::setToWriteCombining(unsigned long, int)>:
c000e62e:	83 ec 0c             	sub    esp,0xc
c000e631:	e8 ac 5d 00 00       	call   c00143e2 <thisCPU()>
c000e636:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e63d:	75 04                	jne    c000e643 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e63f:	83 c4 0c             	add    esp,0xc
c000e642:	c3                   	ret    
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	68 80 00 00 00       	push   0x80
c000e64b:	6a ff                	push   0xffffffff
c000e64d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e651:	50                   	push   eax
c000e652:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e656:	52                   	push   edx
c000e657:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e65b:	51                   	push   ecx
c000e65c:	e8 89 ff ff ff       	call   c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>
c000e661:	83 c4 20             	add    esp,0x20
c000e664:	83 c4 0c             	add    esp,0xc
c000e667:	c3                   	ret    

c000e668 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e66f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e674:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e67e:	19 c0                	sbb    eax,eax
c000e680:	83 ca 03             	or     edx,0x3
c000e683:	83 e0 fc             	and    eax,0xfffffffc
c000e686:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e68d:	e8 63 0c 01 00       	call   c001f2f5 <CPU::readCR3()>
c000e692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e696:	83 c4 0c             	add    esp,0xc
c000e699:	e9 69 0c 01 00       	jmp    c001f307 <CPU::writeCR3(unsigned long)>

c000e69e <VAS::~VAS()>:
c000e69e:	83 ec 2c             	sub    esp,0x2c
c000e6a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6a9:	e8 a9 9e 00 00       	call   c0018557 <lockScheduler()>
c000e6ae:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6b8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6be:	83 ec 04             	sub    esp,0x4
c000e6c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6c5:	6a 01                	push   0x1
c000e6c7:	50                   	push   eax
c000e6c8:	e8 9b ff ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6d8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6e0:	0f 8f d7 00 00 00    	jg     c000e7bd <VAS::~VAS()+0x11f>
c000e6e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f1:	c1 e2 02             	shl    edx,0x2
c000e6f4:	01 d0                	add    eax,edx
c000e6f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e700:	83 e0 01             	and    eax,0x1
c000e703:	0f 84 ab 00 00 00    	je     c000e7b4 <VAS::~VAS()+0x116>
c000e709:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e711:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e719:	7f 75                	jg     c000e790 <VAS::~VAS()+0xf2>
c000e71b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71f:	c1 e0 0a             	shl    eax,0xa
c000e722:	89 c2                	mov    edx,eax
c000e724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e728:	01 d0                	add    eax,edx
c000e72a:	c1 e0 0c             	shl    eax,0xc
c000e72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e731:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e736:	8b 00                	mov    eax,DWORD PTR [eax]
c000e738:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e73b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e741:	83 ec 04             	sub    esp,0x4
c000e744:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e748:	6a 01                	push   0x1
c000e74a:	50                   	push   eax
c000e74b:	e8 f0 fc ff ff       	call   c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e750:	83 c4 10             	add    esp,0x10
c000e753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e75b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e75d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e765:	25 01 04 00 00       	and    eax,0x401
c000e76a:	3d 01 04 00 00       	cmp    eax,0x401
c000e76f:	75 19                	jne    c000e78a <VAS::~VAS()+0xec>
c000e771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e775:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	50                   	push   eax
c000e77e:	e8 ed dc ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e78e:	eb 81                	jmp    c000e711 <VAS::~VAS()+0x73>
c000e790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e794:	25 00 04 00 00       	and    eax,0x400
c000e799:	74 19                	je     c000e7b4 <VAS::~VAS()+0x116>
c000e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	50                   	push   eax
c000e7a8:	e8 c3 dc ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7b4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7b8:	e9 1b ff ff ff       	jmp    c000e6d8 <VAS::~VAS()+0x3a>
c000e7bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7c4:	83 ec 0c             	sub    esp,0xc
c000e7c7:	50                   	push   eax
c000e7c8:	e8 be fc ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e7cd:	83 c4 10             	add    esp,0x10
c000e7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7d7:	83 ec 0c             	sub    esp,0xc
c000e7da:	50                   	push   eax
c000e7db:	e8 90 dc ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7eb:	c1 e0 02             	shl    eax,0x2
c000e7ee:	83 ec 08             	sub    esp,0x8
c000e7f1:	50                   	push   eax
c000e7f2:	68 28 12 02 c0       	push   0xc0021228
c000e7f7:	e8 5d 09 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	e8 55 9d 00 00       	call   c0018559 <unlockScheduler()>
c000e804:	90                   	nop
c000e805:	83 c4 2c             	add    esp,0x2c
c000e808:	c3                   	ret    
c000e809:	90                   	nop

c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e80a:	55                   	push   ebp
c000e80b:	57                   	push   edi
c000e80c:	56                   	push   esi
c000e80d:	53                   	push   ebx
c000e80e:	83 ec 1c             	sub    esp,0x1c
c000e811:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e815:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e819:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e81f:	77 08                	ja     c000e829 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e821:	0f 20 d8             	mov    eax,cr3
c000e824:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e827:	75 49                	jne    c000e872 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e829:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e82d:	09 d8                	or     eax,ebx
c000e82f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e834:	75 59                	jne    c000e88f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e836:	89 de                	mov    esi,ebx
c000e838:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e83b:	c1 ee 16             	shr    esi,0x16
c000e83e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e845:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e849:	74 56                	je     c000e8a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e84b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e851:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e855:	c1 eb 0a             	shr    ebx,0xa
c000e858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e85c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e862:	09 d0                	or     eax,edx
c000e864:	c1 e6 0c             	shl    esi,0xc
c000e867:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e86a:	83 c4 1c             	add    esp,0x1c
c000e86d:	5b                   	pop    ebx
c000e86e:	5e                   	pop    esi
c000e86f:	5f                   	pop    edi
c000e870:	5d                   	pop    ebp
c000e871:	c3                   	ret    
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	68 48 12 02 c0       	push   0xc0021248
c000e87a:	e8 da 08 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e886:	09 d8                	or     eax,ebx
c000e888:	a9 ff 0f 00 00       	test   eax,0xfff
c000e88d:	74 a7                	je     c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	68 b0 12 02 c0       	push   0xc00212b0
c000e897:	e8 b2 6c 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e89c:	83 c4 10             	add    esp,0x10
c000e89f:	eb 95                	jmp    c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8a5:	e8 53 dc ff ff       	call   c000c4fd <Phys::allocatePage()>
c000e8aa:	89 c5                	mov    ebp,eax
c000e8ac:	e8 1a fa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e8b1:	83 ec 0c             	sub    esp,0xc
c000e8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8b8:	6a 01                	push   0x1
c000e8ba:	e8 7f f8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000e8bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8c6:	6a 01                	push   0x1
c000e8c8:	50                   	push   eax
c000e8c9:	55                   	push   ebp
c000e8ca:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8d4:	51                   	push   ecx
c000e8d5:	e8 22 02 00 00       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8da:	83 c4 1c             	add    esp,0x1c
c000e8dd:	68 00 10 00 00       	push   0x1000
c000e8e2:	6a 00                	push   0x0
c000e8e4:	50                   	push   eax
c000e8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8e9:	e8 1a 1d ff ff       	call   c0000608 <memset>
c000e8ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8f5:	e8 91 fb ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8fe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e907:	e9 3f ff ff ff       	jmp    c000e84b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e90c <VAS::allocatePages(int, int)>:
c000e90c:	55                   	push   ebp
c000e90d:	57                   	push   edi
c000e90e:	56                   	push   esi
c000e90f:	53                   	push   ebx
c000e910:	83 ec 1c             	sub    esp,0x1c
c000e913:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e917:	e8 c6 5a 00 00       	call   c00143e2 <thisCPU()>
c000e91c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e922:	83 e0 01             	and    eax,0x1
c000e925:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e929:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e92d:	0f 85 d5 00 00 00    	jne    c000ea08 <VAS::allocatePages(int, int)+0xfc>
c000e933:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93a:	85 c0                	test   eax,eax
c000e93c:	0f 84 aa 00 00 00    	je     c000e9ec <VAS::allocatePages(int, int)+0xe0>
c000e942:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e946:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e94a:	c1 e6 0c             	shl    esi,0xc
c000e94d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e951:	01 de                	add    esi,ebx
c000e953:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e957:	81 cd 00 04 00 00    	or     ebp,0x400
c000e95d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e960:	85 c0                	test   eax,eax
c000e962:	7e 25                	jle    c000e989 <VAS::allocatePages(int, int)+0x7d>
c000e964:	e8 94 db ff ff       	call   c000c4fd <Phys::allocatePage()>
c000e969:	55                   	push   ebp
c000e96a:	53                   	push   ebx
c000e96b:	50                   	push   eax
c000e96c:	57                   	push   edi
c000e96d:	e8 98 fe ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e972:	83 c4 10             	add    esp,0x10
c000e975:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97a:	74 03                	je     c000e97f <VAS::allocatePages(int, int)+0x73>
c000e97c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e97f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e985:	39 de                	cmp    esi,ebx
c000e987:	75 db                	jne    c000e964 <VAS::allocatePages(int, int)+0x58>
c000e989:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e98e:	74 3f                	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000e990:	c1 ee 0a             	shr    esi,0xa
c000e993:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e997:	c1 eb 0a             	shr    ebx,0xa
c000e99a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9a6:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9ac:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9b2:	39 f3                	cmp    ebx,esi
c000e9b4:	77 0d                	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000e9b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9bf:	39 de                	cmp    esi,ebx
c000e9c1:	73 f3                	jae    c000e9b6 <VAS::allocatePages(int, int)+0xaa>
c000e9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c7:	83 c4 1c             	add    esp,0x1c
c000e9ca:	5b                   	pop    ebx
c000e9cb:	5e                   	pop    esi
c000e9cc:	5f                   	pop    edi
c000e9cd:	5d                   	pop    ebp
c000e9ce:	c3                   	ret    
c000e9cf:	e8 21 09 01 00       	call   c001f2f5 <CPU::readCR3()>
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	50                   	push   eax
c000e9d8:	e8 2a 09 01 00       	call   c001f307 <CPU::writeCR3(unsigned long)>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e4:	83 c4 1c             	add    esp,0x1c
c000e9e7:	5b                   	pop    ebx
c000e9e8:	5e                   	pop    esi
c000e9e9:	5f                   	pop    edi
c000e9ea:	5d                   	pop    ebp
c000e9eb:	c3                   	ret    
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	68 d4 12 02 c0       	push   0xc00212d4
c000e9f4:	e8 55 6b 00 00       	call   c001554e <Krnl::panic(char const*)>
c000e9f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea00:	83 c4 10             	add    esp,0x10
c000ea03:	e9 3a ff ff ff       	jmp    c000e942 <VAS::allocatePages(int, int)+0x36>
c000ea08:	83 ec 0c             	sub    esp,0xc
c000ea0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea0f:	53                   	push   ebx
c000ea10:	e8 29 f7 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea21:	0f 87 94 00 00 00    	ja     c000eabb <VAS::allocatePages(int, int)+0x1af>
c000ea27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea2b:	85 d2                	test   edx,edx
c000ea2d:	7e 3c                	jle    c000ea6b <VAS::allocatePages(int, int)+0x15f>
c000ea2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea37:	c1 e5 0c             	shl    ebp,0xc
c000ea3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea3e:	81 ce 00 04 00 00    	or     esi,0x400
c000ea44:	01 dd                	add    ebp,ebx
c000ea46:	e8 b2 da ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ea4b:	56                   	push   esi
c000ea4c:	53                   	push   ebx
c000ea4d:	50                   	push   eax
c000ea4e:	57                   	push   edi
c000ea4f:	e8 b6 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5c:	74 03                	je     c000ea61 <VAS::allocatePages(int, int)+0x155>
c000ea5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea61:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea67:	39 dd                	cmp    ebp,ebx
c000ea69:	75 db                	jne    c000ea46 <VAS::allocatePages(int, int)+0x13a>
c000ea6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea70:	0f 84 59 ff ff ff    	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000ea76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7e:	c1 e0 0c             	shl    eax,0xc
c000ea81:	89 d3                	mov    ebx,edx
c000ea83:	c1 eb 0a             	shr    ebx,0xa
c000ea86:	01 d0                	add    eax,edx
c000ea88:	c1 e8 0a             	shr    eax,0xa
c000ea8b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea91:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea9c:	2d 00 00 40 00       	sub    eax,0x400000
c000eaa1:	39 c3                	cmp    ebx,eax
c000eaa3:	0f 87 1a ff ff ff    	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eaa9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eaac:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eab2:	39 d8                	cmp    eax,ebx
c000eab4:	73 f3                	jae    c000eaa9 <VAS::allocatePages(int, int)+0x19d>
c000eab6:	e9 08 ff ff ff       	jmp    c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eabb:	e8 22 59 00 00       	call   c00143e2 <thisCPU()>
c000eac0:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eac7:	0f 84 5a ff ff ff    	je     c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eacd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead1:	80 cd 01             	or     ch,0x1
c000ead4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000ead8:	e9 4a ff ff ff       	jmp    c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eadd:	90                   	nop

c000eade <VAS::setCPUSpecific(unsigned long)>:
c000eade:	83 ec 0c             	sub    esp,0xc
c000eae1:	6a 05                	push   0x5
c000eae3:	68 00 00 40 c2       	push   0xc2400000
c000eae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaec:	50                   	push   eax
c000eaed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eaf1:	52                   	push   edx
c000eaf2:	e8 13 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eaf7:	83 c4 1c             	add    esp,0x1c
c000eafa:	c3                   	ret    
c000eafb:	90                   	nop

c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eafc:	55                   	push   ebp
c000eafd:	57                   	push   edi
c000eafe:	56                   	push   esi
c000eaff:	53                   	push   ebx
c000eb00:	83 ec 1c             	sub    esp,0x1c
c000eb03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb0b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb0f:	e8 ce 58 00 00       	call   c00143e2 <thisCPU()>
c000eb14:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb1a:	83 e0 01             	and    eax,0x1
c000eb1d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb25:	85 c0                	test   eax,eax
c000eb27:	7e 39                	jle    c000eb62 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2d:	89 f3                	mov    ebx,esi
c000eb2f:	c1 e0 0c             	shl    eax,0xc
c000eb32:	01 f0                	add    eax,esi
c000eb34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb38:	55                   	push   ebp
c000eb39:	53                   	push   ebx
c000eb3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3e:	29 f0                	sub    eax,esi
c000eb40:	01 d8                	add    eax,ebx
c000eb42:	50                   	push   eax
c000eb43:	57                   	push   edi
c000eb44:	e8 c1 fc ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb51:	74 03                	je     c000eb56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb53:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb56:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb5c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb60:	75 d6                	jne    c000eb38 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb62:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb67:	74 42                	je     c000ebab <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6d:	89 f3                	mov    ebx,esi
c000eb6f:	c1 e0 0c             	shl    eax,0xc
c000eb72:	c1 eb 0a             	shr    ebx,0xa
c000eb75:	01 f0                	add    eax,esi
c000eb77:	c1 e8 0a             	shr    eax,0xa
c000eb7a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb80:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb85:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb8b:	2d 00 00 40 00       	sub    eax,0x400000
c000eb90:	39 c3                	cmp    ebx,eax
c000eb92:	77 0d                	ja     c000eba1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb94:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb97:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb9d:	39 d8                	cmp    eax,ebx
c000eb9f:	73 f3                	jae    c000eb94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eba1:	83 c4 1c             	add    esp,0x1c
c000eba4:	89 f0                	mov    eax,esi
c000eba6:	5b                   	pop    ebx
c000eba7:	5e                   	pop    esi
c000eba8:	5f                   	pop    edi
c000eba9:	5d                   	pop    ebp
c000ebaa:	c3                   	ret    
c000ebab:	e8 45 07 01 00       	call   c001f2f5 <CPU::readCR3()>
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	50                   	push   eax
c000ebb4:	e8 4e 07 01 00       	call   c001f307 <CPU::writeCR3(unsigned long)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	89 f0                	mov    eax,esi
c000ebbe:	83 c4 1c             	add    esp,0x1c
c000ebc1:	5b                   	pop    ebx
c000ebc2:	5e                   	pop    esi
c000ebc3:	5f                   	pop    edi
c000ebc4:	5d                   	pop    ebp
c000ebc5:	c3                   	ret    

c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebc6:	55                   	push   ebp
c000ebc7:	57                   	push   edi
c000ebc8:	56                   	push   esi
c000ebc9:	53                   	push   ebx
c000ebca:	83 ec 1c             	sub    esp,0x1c
c000ebcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebd1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebd5:	09 f0                	or     eax,esi
c000ebd7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebdb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebdf:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebe4:	75 4c                	jne    c000ec32 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebe6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebed:	c1 eb 16             	shr    ebx,0x16
c000ebf0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebf7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebfb:	74 4f                	je     c000ec4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec01:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec05:	c1 e8 0a             	shr    eax,0xa
c000ec08:	80 fa 01             	cmp    dl,0x1
c000ec0b:	19 d2                	sbb    edx,edx
c000ec0d:	25 fc 0f 00 00       	and    eax,0xffc
c000ec12:	c1 e3 0c             	shl    ebx,0xc
c000ec15:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec1b:	01 d8                	add    eax,ebx
c000ec1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec21:	09 d9                	or     ecx,ebx
c000ec23:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec2a:	83 c4 1c             	add    esp,0x1c
c000ec2d:	5b                   	pop    ebx
c000ec2e:	5e                   	pop    esi
c000ec2f:	5f                   	pop    edi
c000ec30:	5d                   	pop    ebp
c000ec31:	c3                   	ret    
c000ec32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec36:	83 ec 0c             	sub    esp,0xc
c000ec39:	68 00 13 02 c0       	push   0xc0021300
c000ec3e:	e8 0b 69 00 00       	call   c001554e <Krnl::panic(char const*)>
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec4a:	eb 9a                	jmp    c000ebe6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec50:	e8 a8 d8 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ec55:	89 c5                	mov    ebp,eax
c000ec57:	e8 6f f6 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec63:	6a 01                	push   0x1
c000ec65:	e8 d4 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ec6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec71:	6a 01                	push   0x1
c000ec73:	50                   	push   eax
c000ec74:	55                   	push   ebp
c000ec75:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec7f:	51                   	push   ecx
c000ec80:	e8 77 fe ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec85:	83 c4 1c             	add    esp,0x1c
c000ec88:	68 00 10 00 00       	push   0x1000
c000ec8d:	6a 00                	push   0x0
c000ec8f:	50                   	push   eax
c000ec90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec94:	e8 6f 19 ff ff       	call   c0000608 <memset>
c000ec99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec9d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eca0:	e8 e6 f7 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000eca5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca8:	83 c4 10             	add    esp,0x10
c000ecab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecaf:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecb2:	e9 46 ff ff ff       	jmp    c000ebfd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ecb7:	90                   	nop

c000ecb8 <VAS::VAS(bool)>:
c000ecb8:	53                   	push   ebx
c000ecb9:	83 ec 28             	sub    esp,0x28
c000ecbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecd7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecda:	e8 1e d8 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ecdf:	89 c2                	mov    edx,eax
c000ece1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ece8:	e8 de f5 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000eced:	89 c3                	mov    ebx,eax
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	6a 01                	push   0x1
c000ecf4:	e8 45 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	89 c2                	mov    edx,eax
c000ecfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed05:	83 ec 0c             	sub    esp,0xc
c000ed08:	6a 03                	push   0x3
c000ed0a:	6a 01                	push   0x1
c000ed0c:	52                   	push   edx
c000ed0d:	50                   	push   eax
c000ed0e:	53                   	push   ebx
c000ed0f:	e8 e8 fd ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed14:	83 c4 20             	add    esp,0x20
c000ed17:	89 c2                	mov    edx,eax
c000ed19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed30:	7f 1c                	jg     c000ed4e <VAS::VAS(bool)+0x96>
c000ed32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed3d:	c1 e2 02             	shl    edx,0x2
c000ed40:	01 d0                	add    eax,edx
c000ed42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed4c:	eb da                	jmp    c000ed28 <VAS::VAS(bool)+0x70>
c000ed4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed5e:	7f 71                	jg     c000edd1 <VAS::VAS(bool)+0x119>
c000ed60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed64:	2d 00 02 00 00       	sub    eax,0x200
c000ed69:	c1 e0 0c             	shl    eax,0xc
c000ed6c:	83 c8 03             	or     eax,0x3
c000ed6f:	89 c3                	mov    ebx,eax
c000ed71:	e8 6c 56 00 00       	call   c00143e2 <thisCPU()>
c000ed76:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed7c:	83 e0 10             	and    eax,0x10
c000ed7f:	84 c0                	test   al,al
c000ed81:	74 07                	je     c000ed8a <VAS::VAS(bool)+0xd2>
c000ed83:	b8 00 01 00 00       	mov    eax,0x100
c000ed88:	eb 05                	jmp    c000ed8f <VAS::VAS(bool)+0xd7>
c000ed8a:	b8 00 00 00 00       	mov    eax,0x0
c000ed8f:	09 d8                	or     eax,ebx
c000ed91:	89 c1                	mov    ecx,eax
c000ed93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed9e:	c1 e2 02             	shl    edx,0x2
c000eda1:	01 d0                	add    eax,edx
c000eda3:	89 ca                	mov    edx,ecx
c000eda5:	89 10                	mov    DWORD PTR [eax],edx
c000eda7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edab:	2d 40 03 00 00       	sub    eax,0x340
c000edb0:	83 f8 7f             	cmp    eax,0x7f
c000edb3:	77 16                	ja     c000edcb <VAS::VAS(bool)+0x113>
c000edb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc0:	c1 e2 02             	shl    edx,0x2
c000edc3:	01 d0                	add    eax,edx
c000edc5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edcb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edcf:	eb 85                	jmp    c000ed56 <VAS::VAS(bool)+0x9e>
c000edd1:	e8 0c 56 00 00       	call   c00143e2 <thisCPU()>
c000edd6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eddc:	83 e0 10             	and    eax,0x10
c000eddf:	84 c0                	test   al,al
c000ede1:	74 07                	je     c000edea <VAS::VAS(bool)+0x132>
c000ede3:	b8 03 41 00 00       	mov    eax,0x4103
c000ede8:	eb 05                	jmp    c000edef <VAS::VAS(bool)+0x137>
c000edea:	b8 03 40 00 00       	mov    eax,0x4003
c000edef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edf3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edf6:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edfc:	89 02                	mov    DWORD PTR [edx],eax
c000edfe:	e8 df 55 00 00       	call   c00143e2 <thisCPU()>
c000ee03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee09:	83 ec 08             	sub    esp,0x8
c000ee0c:	50                   	push   eax
c000ee0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee11:	e8 c8 fc ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee20:	e8 bd 55 00 00       	call   c00143e2 <thisCPU()>
c000ee25:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee2b:	83 e0 10             	and    eax,0x10
c000ee2e:	84 c0                	test   al,al
c000ee30:	74 07                	je     c000ee39 <VAS::VAS(bool)+0x181>
c000ee32:	b8 00 01 00 00       	mov    eax,0x100
c000ee37:	eb 05                	jmp    c000ee3e <VAS::VAS(bool)+0x186>
c000ee39:	b8 00 00 00 00       	mov    eax,0x0
c000ee3e:	09 d8                	or     eax,ebx
c000ee40:	89 c2                	mov    edx,eax
c000ee42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee49:	05 fc 0f 00 00       	add    eax,0xffc
c000ee4e:	83 ca 03             	or     edx,0x3
c000ee51:	89 10                	mov    DWORD PTR [eax],edx
c000ee53:	e8 8a 55 00 00       	call   c00143e2 <thisCPU()>
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	50                   	push   eax
c000ee5c:	e8 ef 19 00 00       	call   c0010850 <Device::getName()>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	83 ec 08             	sub    esp,0x8
c000ee67:	68 ff 13 02 c0       	push   0xc00213ff
c000ee6c:	50                   	push   eax
c000ee6d:	e8 86 18 ff ff       	call   c00006f8 <strcmp>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	85 c0                	test   eax,eax
c000ee77:	0f 94 c0             	sete   al
c000ee7a:	84 c0                	test   al,al
c000ee7c:	74 64                	je     c000eee2 <VAS::VAS(bool)+0x22a>
c000ee7e:	e8 b2 96 00 00       	call   c0018535 <disableIRQs()>
c000ee83:	e8 5a 55 00 00       	call   c00143e2 <thisCPU()>
c000ee88:	05 7c 09 00 00       	add    eax,0x97c
c000ee8d:	83 ec 0c             	sub    esp,0xc
c000ee90:	50                   	push   eax
c000ee91:	e8 04 cb ff ff       	call   c000b99a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee96:	83 c4 10             	add    esp,0x10
c000ee99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee9e:	89 c3                	mov    ebx,eax
c000eea0:	e8 3d 55 00 00       	call   c00143e2 <thisCPU()>
c000eea5:	05 7c 09 00 00       	add    eax,0x97c
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	50                   	push   eax
c000eeae:	e8 e7 ca ff ff       	call   c000b99a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	83 ec 08             	sub    esp,0x8
c000eeb9:	50                   	push   eax
c000eeba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eebe:	e8 a9 f5 ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000eec3:	83 c4 10             	add    esp,0x10
c000eec6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eecd:	6a 11                	push   0x11
c000eecf:	53                   	push   ebx
c000eed0:	50                   	push   eax
c000eed1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eed5:	e8 30 f9 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eeda:	83 c4 10             	add    esp,0x10
c000eedd:	e8 66 96 00 00       	call   c0018548 <enableIRQs()>
c000eee2:	90                   	nop
c000eee3:	83 c4 28             	add    esp,0x28
c000eee6:	5b                   	pop    ebx
c000eee7:	c3                   	ret    

c000eee8 <mapVASFirstTime>:
c000eee8:	55                   	push   ebp
c000eee9:	57                   	push   edi
c000eeea:	56                   	push   esi
c000eeeb:	53                   	push   ebx
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eef4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eef7:	4a                   	dec    edx
c000eef8:	0f 84 99 00 00 00    	je     c000ef97 <mapVASFirstTime+0xaf>
c000eefe:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef01:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef04:	c1 e5 15             	shl    ebp,0x15
c000ef07:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef0c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef11:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef17:	29 eb                	sub    ebx,ebp
c000ef19:	29 ee                	sub    esi,ebp
c000ef1b:	e8 dd d5 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	68 03 04 00 00       	push   0x403
c000ef28:	6a 01                	push   0x1
c000ef2a:	53                   	push   ebx
c000ef2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef31:	50                   	push   eax
c000ef32:	57                   	push   edi
c000ef33:	e8 c4 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef38:	83 c4 20             	add    esp,0x20
c000ef3b:	39 f3                	cmp    ebx,esi
c000ef3d:	75 dc                	jne    c000ef1b <mapVASFirstTime+0x33>
c000ef3f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef44:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef49:	29 e8                	sub    eax,ebp
c000ef4b:	29 ee                	sub    esi,ebp
c000ef4d:	89 c5                	mov    ebp,eax
c000ef4f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef53:	19 db                	sbb    ebx,ebx
c000ef55:	e8 a3 d5 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ef5a:	83 e3 04             	and    ebx,0x4
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef66:	53                   	push   ebx
c000ef67:	6a 01                	push   0x1
c000ef69:	56                   	push   esi
c000ef6a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef70:	50                   	push   eax
c000ef71:	57                   	push   edi
c000ef72:	e8 85 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef77:	83 c4 20             	add    esp,0x20
c000ef7a:	39 f5                	cmp    ebp,esi
c000ef7c:	75 d1                	jne    c000ef4f <mapVASFirstTime+0x67>
c000ef7e:	e8 72 03 01 00       	call   c001f2f5 <CPU::readCR3()>
c000ef83:	83 ec 0c             	sub    esp,0xc
c000ef86:	50                   	push   eax
c000ef87:	e8 7b 03 01 00       	call   c001f307 <CPU::writeCR3(unsigned long)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	83 c4 0c             	add    esp,0xc
c000ef92:	5b                   	pop    ebx
c000ef93:	5e                   	pop    esi
c000ef94:	5f                   	pop    edi
c000ef95:	5d                   	pop    ebp
c000ef96:	c3                   	ret    
c000ef97:	83 ec 0c             	sub    esp,0xc
c000ef9a:	68 0d 14 02 c0       	push   0xc002140d
c000ef9f:	e8 b5 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	5b                   	pop    ebx
c000efab:	5e                   	pop    esi
c000efac:	5f                   	pop    edi
c000efad:	5d                   	pop    ebp
c000efae:	c3                   	ret    

c000efaf <__cxa_atexit>:
c000efaf:	31 c0                	xor    eax,eax
c000efb1:	c3                   	ret    

c000efb2 <__cxa_finalize>:
c000efb2:	c3                   	ret    

c000efb3 <__stack_chk_fail>:
c000efb3:	55                   	push   ebp
c000efb4:	89 e5                	mov    ebp,esp
c000efb6:	83 ec 10             	sub    esp,0x10
c000efb9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efbc:	68 26 14 02 c0       	push   0xc0021426
c000efc1:	e8 93 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efc6:	58                   	pop    eax
c000efc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efca:	5a                   	pop    edx
c000efcb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efce:	68 26 14 02 c0       	push   0xc0021426
c000efd3:	e8 81 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efdb:	59                   	pop    ecx
c000efdc:	5a                   	pop    edx
c000efdd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efdf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe2:	68 26 14 02 c0       	push   0xc0021426
c000efe7:	e8 6d 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efef:	59                   	pop    ecx
c000eff0:	5a                   	pop    edx
c000eff1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff8:	68 26 14 02 c0       	push   0xc0021426
c000effd:	e8 57 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000f002:	c7 04 24 2e 14 02 c0 	mov    DWORD PTR [esp],0xc002142e
c000f009:	e8 40 65 00 00       	call   c001554e <Krnl::panic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	c9                   	leave  
c000f012:	c3                   	ret    

c000f013 <__cxa_pure_virtual>:
c000f013:	83 ec 18             	sub    esp,0x18
c000f016:	68 46 14 02 c0       	push   0xc0021446
c000f01b:	e8 2e 65 00 00       	call   c001554e <Krnl::panic(char const*)>
c000f020:	83 c4 1c             	add    esp,0x1c
c000f023:	c3                   	ret    

c000f024 <operator new(unsigned long)>:
c000f024:	e9 fe ce ff ff       	jmp    c000bf27 <malloc>

c000f029 <operator new[](unsigned long)>:
c000f029:	e9 f9 ce ff ff       	jmp    c000bf27 <malloc>

c000f02e <operator delete(void*)>:
c000f02e:	e9 14 cf ff ff       	jmp    c000bf47 <rfree>

c000f033 <operator delete(void*, unsigned long)>:
c000f033:	e9 0f cf ff ff       	jmp    c000bf47 <rfree>

c000f038 <operator delete[](void*)>:
c000f038:	e9 0a cf ff ff       	jmp    c000bf47 <rfree>

c000f03d <operator delete[](void*, unsigned long)>:
c000f03d:	e9 05 cf ff ff       	jmp    c000bf47 <rfree>

c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f042:	57                   	push   edi
c000f043:	56                   	push   esi
c000f044:	be 5d 14 02 c0       	mov    esi,0xc002145d
c000f049:	53                   	push   ebx
c000f04a:	83 ec 40             	sub    esp,0x40
c000f04d:	a0 5c 14 02 c0       	mov    al,ds:0xc002145c
c000f052:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f056:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f05a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f05e:	b8 3e 00 00 00       	mov    eax,0x3e
c000f063:	f7 c7 02 00 00 00    	test   edi,0x2
c000f069:	75 69                	jne    c000f0d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f06b:	89 c1                	mov    ecx,eax
c000f06d:	c1 e9 02             	shr    ecx,0x2
c000f070:	fc                   	cld    
c000f071:	31 d2                	xor    edx,edx
c000f073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f075:	a8 02                	test   al,0x2
c000f077:	74 0b                	je     c000f084 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f079:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f07c:	66 89 17             	mov    WORD PTR [edi],dx
c000f07f:	ba 02 00 00 00       	mov    edx,0x2
c000f084:	a8 01                	test   al,0x1
c000f086:	74 06                	je     c000f08e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f088:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f08b:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f08e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f092:	83 f9 3e             	cmp    ecx,0x3e
c000f095:	7e 05                	jle    c000f09c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f097:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f09c:	89 df                	mov    edi,ebx
c000f09e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f0a2:	eb 02                	jmp    c000f0a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f0a4:	89 c7                	mov    edi,eax
c000f0a6:	31 d2                	xor    edx,edx
c000f0a8:	89 f8                	mov    eax,edi
c000f0aa:	46                   	inc    esi
c000f0ab:	f7 f1                	div    ecx
c000f0ad:	39 cf                	cmp    edi,ecx
c000f0af:	73 f3                	jae    c000f0a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f0b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0b4:	eb 02                	jmp    c000f0b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f0b6:	89 c3                	mov    ebx,eax
c000f0b8:	31 d2                	xor    edx,edx
c000f0ba:	89 d8                	mov    eax,ebx
c000f0bc:	f7 f1                	div    ecx
c000f0be:	4e                   	dec    esi
c000f0bf:	39 cb                	cmp    ebx,ecx
c000f0c1:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0c5:	88 16                	mov    BYTE PTR [esi],dl
c000f0c7:	73 ed                	jae    c000f0b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0cd:	83 c4 40             	add    esp,0x40
c000f0d0:	5b                   	pop    ebx
c000f0d1:	5e                   	pop    esi
c000f0d2:	5f                   	pop    edi
c000f0d3:	c3                   	ret    
c000f0d4:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0d7:	83 c7 02             	add    edi,0x2
c000f0da:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0de:	83 c6 02             	add    esi,0x2
c000f0e1:	83 e8 02             	sub    eax,0x2
c000f0e4:	eb 85                	jmp    c000f06b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0e6 <Dbg::logc(char)>:
c000f0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0ef:	ec                   	in     al,dx
c000f0f0:	a8 20                	test   al,0x20
c000f0f2:	74 fb                	je     c000f0ef <Dbg::logc(char)+0x9>
c000f0f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0f9:	88 c8                	mov    al,cl
c000f0fb:	ee                   	out    dx,al
c000f0fc:	c3                   	ret    

c000f0fd <Dbg::logs(char*)>:
c000f0fd:	53                   	push   ebx
c000f0fe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f102:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f105:	84 c0                	test   al,al
c000f107:	74 0f                	je     c000f118 <Dbg::logs(char*)+0x1b>
c000f109:	43                   	inc    ebx
c000f10a:	50                   	push   eax
c000f10b:	e8 d6 ff ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f110:	5a                   	pop    edx
c000f111:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f114:	84 c0                	test   al,al
c000f116:	75 f1                	jne    c000f109 <Dbg::logs(char*)+0xc>
c000f118:	5b                   	pop    ebx
c000f119:	c3                   	ret    

c000f11a <Dbg::logWriteInt(unsigned int)>:
c000f11a:	83 ec 10             	sub    esp,0x10
c000f11d:	6a 0a                	push   0xa
c000f11f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f123:	50                   	push   eax
c000f124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f128:	50                   	push   eax
c000f129:	e8 14 ff ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f12e:	50                   	push   eax
c000f12f:	e8 c9 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	c3                   	ret    

c000f138 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f138:	83 ec 10             	sub    esp,0x10
c000f13b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f13f:	50                   	push   eax
c000f140:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f144:	50                   	push   eax
c000f145:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f149:	52                   	push   edx
c000f14a:	e8 f3 fe ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f14f:	50                   	push   eax
c000f150:	e8 a8 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	c3                   	ret    

c000f159 <Dbg::kprintf(char const*, ...)>:
c000f159:	55                   	push   ebp
c000f15a:	57                   	push   edi
c000f15b:	56                   	push   esi
c000f15c:	53                   	push   ebx
c000f15d:	83 ec 0c             	sub    esp,0xc
c000f160:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f164:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f16c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f16f:	84 c0                	test   al,al
c000f171:	74 4d                	je     c000f1c0 <Dbg::kprintf(char const*, ...)+0x67>
c000f173:	31 ff                	xor    edi,edi
c000f175:	8d 77 01             	lea    esi,[edi+0x1]
c000f178:	3c 25                	cmp    al,0x25
c000f17a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f17d:	0f 85 ec 00 00 00    	jne    c000f26f <Dbg::kprintf(char const*, ...)+0x116>
c000f183:	83 c7 02             	add    edi,0x2
c000f186:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f189:	83 e8 25             	sub    eax,0x25
c000f18c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f18f:	3c 53                	cmp    al,0x53
c000f191:	0f 87 c0 00 00 00    	ja     c000f257 <Dbg::kprintf(char const*, ...)+0xfe>
c000f197:	25 ff 00 00 00       	and    eax,0xff
c000f19c:	ff 24 85 9c 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb64]
c000f1a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a7:	89 c8                	mov    eax,ecx
c000f1a9:	83 c1 04             	add    ecx,0x4
c000f1ac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b2:	50                   	push   eax
c000f1b3:	e8 45 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f1b8:	58                   	pop    eax
c000f1b9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1bc:	84 c0                	test   al,al
c000f1be:	75 b5                	jne    c000f175 <Dbg::kprintf(char const*, ...)+0x1c>
c000f1c0:	83 c4 0c             	add    esp,0xc
c000f1c3:	5b                   	pop    ebx
c000f1c4:	5e                   	pop    esi
c000f1c5:	5f                   	pop    edi
c000f1c6:	5d                   	pop    ebp
c000f1c7:	c3                   	ret    
c000f1c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1cc:	89 d0                	mov    eax,edx
c000f1ce:	83 c2 04             	add    edx,0x4
c000f1d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d7:	50                   	push   eax
c000f1d8:	e8 3d ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f1dd:	58                   	pop    eax
c000f1de:	eb d9                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1e4:	89 d0                	mov    eax,edx
c000f1e6:	83 c2 04             	add    edx,0x4
c000f1e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1ed:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1f0:	50                   	push   eax
c000f1f1:	e8 f0 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f1f6:	58                   	pop    eax
c000f1f7:	eb c0                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1fd:	89 c8                	mov    eax,ecx
c000f1ff:	83 c1 04             	add    ecx,0x4
c000f202:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f206:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f208:	55                   	push   ebp
c000f209:	e8 0c ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f20e:	58                   	pop    eax
c000f20f:	eb a8                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f211:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f215:	89 c8                	mov    eax,ecx
c000f217:	83 c1 04             	add    ecx,0x4
c000f21a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f21e:	6a 10                	push   0x10
c000f220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f222:	51                   	push   ecx
c000f223:	e8 10 ff ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f228:	5d                   	pop    ebp
c000f229:	58                   	pop    eax
c000f22a:	eb 8d                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f22c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f230:	89 d0                	mov    eax,edx
c000f232:	83 c2 08             	add    edx,0x8
c000f235:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f239:	6a 10                	push   0x10
c000f23b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f23d:	50                   	push   eax
c000f23e:	e8 f5 fe ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f243:	58                   	pop    eax
c000f244:	5a                   	pop    edx
c000f245:	e9 6f ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f24a:	6a 25                	push   0x25
c000f24c:	e8 95 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f251:	5a                   	pop    edx
c000f252:	e9 62 ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f257:	6a 25                	push   0x25
c000f259:	e8 88 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f25e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f262:	50                   	push   eax
c000f263:	e8 7e fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f268:	5a                   	pop    edx
c000f269:	59                   	pop    ecx
c000f26a:	e9 4a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f26f:	50                   	push   eax
c000f270:	89 f7                	mov    edi,esi
c000f272:	e8 6f fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f277:	89 ee                	mov    esi,ebp
c000f279:	58                   	pop    eax
c000f27a:	e9 3a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f27f:	90                   	nop

c000f280 <File::read(unsigned long long, void*, int*)>:
c000f280:	53                   	push   ebx
c000f281:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f285:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f289:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f290:	3c 19                	cmp    al,0x19
c000f292:	77 35                	ja     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f294:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c000f29b:	85 c0                	test   eax,eax
c000f29d:	74 2a                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f29f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2a5:	85 c0                	test   eax,eax
c000f2a7:	74 20                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f2a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2ad:	74 21                	je     c000f2d0 <File::read(unsigned long long, void*, int*)+0x50>
c000f2af:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2c3:	5b                   	pop    ebx
c000f2c4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2c7:	ff e0                	jmp    eax
c000f2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ce:	eb 05                	jmp    c000f2d5 <File::read(unsigned long long, void*, int*)+0x55>
c000f2d0:	b8 05 00 00 00       	mov    eax,0x5
c000f2d5:	5b                   	pop    ebx
c000f2d6:	c3                   	ret    
c000f2d7:	90                   	nop

c000f2d8 <File::write(unsigned long long, void*, int*)>:
c000f2d8:	53                   	push   ebx
c000f2d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2e8:	3c 19                	cmp    al,0x19
c000f2ea:	77 35                	ja     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2ec:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c000f2f3:	85 c0                	test   eax,eax
c000f2f5:	74 2a                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2fd:	85 c0                	test   eax,eax
c000f2ff:	74 20                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f301:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f305:	74 21                	je     c000f328 <File::write(unsigned long long, void*, int*)+0x50>
c000f307:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f309:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f30d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f317:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f31b:	5b                   	pop    ebx
c000f31c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f31f:	ff e0                	jmp    eax
c000f321:	b8 0b 00 00 00       	mov    eax,0xb
c000f326:	eb 05                	jmp    c000f32d <File::write(unsigned long long, void*, int*)+0x55>
c000f328:	b8 05 00 00 00       	mov    eax,0x5
c000f32d:	5b                   	pop    ebx
c000f32e:	c3                   	ret    
c000f32f:	90                   	nop

c000f330 <Directory::read(unsigned long long, void*, int*)>:
c000f330:	53                   	push   ebx
c000f331:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f335:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f339:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f340:	3c 19                	cmp    al,0x19
c000f342:	77 35                	ja     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f344:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c000f34b:	85 c0                	test   eax,eax
c000f34d:	74 2a                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f34f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f355:	85 c0                	test   eax,eax
c000f357:	74 20                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f359:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f35d:	74 21                	je     c000f380 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f35f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f361:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f365:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f36b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f36f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f373:	5b                   	pop    ebx
c000f374:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f377:	ff e0                	jmp    eax
c000f379:	b8 0b 00 00 00       	mov    eax,0xb
c000f37e:	eb 05                	jmp    c000f385 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f380:	b8 05 00 00 00       	mov    eax,0x5
c000f385:	5b                   	pop    ebx
c000f386:	c3                   	ret    
c000f387:	90                   	nop

c000f388 <Directory::write(unsigned long long, void*, int*)>:
c000f388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f38c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f393:	b8 0b 00 00 00       	mov    eax,0xb
c000f398:	80 fa 19             	cmp    dl,0x19
c000f39b:	77 18                	ja     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f39d:	8b 14 95 80 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb780]
c000f3a4:	85 d2                	test   edx,edx
c000f3a6:	74 0d                	je     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f3a8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f3af:	19 c0                	sbb    eax,eax
c000f3b1:	83 e0 0a             	and    eax,0xa
c000f3b4:	40                   	inc    eax
c000f3b5:	c3                   	ret    

c000f3b6 <File::isAtty()>:
c000f3b6:	31 c0                	xor    eax,eax
c000f3b8:	c3                   	ret    
c000f3b9:	90                   	nop

c000f3ba <Directory::isAtty()>:
c000f3ba:	31 c0                	xor    eax,eax
c000f3bc:	c3                   	ret    
c000f3bd:	90                   	nop

c000f3be <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3be:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c3:	c3                   	ret    

c000f3c4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3c4:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c9:	c3                   	ret    

c000f3ca <File::~File()>:
c000f3ca:	83 ec 0c             	sub    esp,0xc
c000f3cd:	ba 58 16 02 c0       	mov    edx,0xc0021658
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	89 10                	mov    DWORD PTR [eax],edx
c000f3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	50                   	push   eax
c000f3e0:	e8 c5 ea ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	90                   	nop
c000f3e9:	83 c4 0c             	add    esp,0xc
c000f3ec:	c3                   	ret    
c000f3ed:	90                   	nop

c000f3ee <File::~File()>:
c000f3ee:	83 ec 0c             	sub    esp,0xc
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f8:	e8 cd ff ff ff       	call   c000f3ca <File::~File()>
c000f3fd:	83 c4 10             	add    esp,0x10
c000f400:	83 ec 08             	sub    esp,0x8
c000f403:	68 14 01 00 00       	push   0x114
c000f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f40c:	e8 22 fc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f411:	83 c4 10             	add    esp,0x10
c000f414:	83 c4 0c             	add    esp,0xc
c000f417:	c3                   	ret    

c000f418 <Directory::~Directory()>:
c000f418:	83 ec 0c             	sub    esp,0xc
c000f41b:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000f420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f424:	89 10                	mov    DWORD PTR [eax],edx
c000f426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42a:	83 ec 0c             	sub    esp,0xc
c000f42d:	50                   	push   eax
c000f42e:	e8 77 ea ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000f433:	83 c4 10             	add    esp,0x10
c000f436:	90                   	nop
c000f437:	83 c4 0c             	add    esp,0xc
c000f43a:	c3                   	ret    
c000f43b:	90                   	nop

c000f43c <Directory::~Directory()>:
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	83 ec 0c             	sub    esp,0xc
c000f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f446:	e8 cd ff ff ff       	call   c000f418 <Directory::~Directory()>
c000f44b:	83 c4 10             	add    esp,0x10
c000f44e:	83 ec 08             	sub    esp,0x8
c000f451:	68 14 01 00 00       	push   0x114
c000f456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45a:	e8 d4 fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	83 c4 0c             	add    esp,0xc
c000f465:	c3                   	ret    

c000f466 <Filesystem::Filesystem()>:
c000f466:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c000f46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46f:	89 10                	mov    DWORD PTR [eax],edx
c000f471:	8b 15 e8 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e8
c000f477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f47b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f482:	a3 e8 43 02 c0       	mov    ds:0xc00243e8,eax
c000f487:	90                   	nop
c000f488:	c3                   	ret    
c000f489:	90                   	nop

c000f48a <Filesystem::~Filesystem()>:
c000f48a:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c000f48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f493:	89 10                	mov    DWORD PTR [eax],edx
c000f495:	90                   	nop
c000f496:	c3                   	ret    
c000f497:	90                   	nop

c000f498 <Filesystem::~Filesystem()>:
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f49f:	e8 e6 ff ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c000f4a4:	83 c4 04             	add    esp,0x4
c000f4a7:	83 ec 08             	sub    esp,0x8
c000f4aa:	6a 08                	push   0x8
c000f4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b0:	e8 7e fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	83 c4 0c             	add    esp,0xc
c000f4bb:	c3                   	ret    

c000f4bc <initVFS()>:
c000f4bc:	83 ec 18             	sub    esp,0x18
c000f4bf:	6a 08                	push   0x8
c000f4c1:	e8 5e fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c9:	e8 a0 af 00 00       	call   c001a46e <FAT::FAT()>
c000f4ce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4d5:	e8 4a fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4da:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4dd:	e8 2c c2 00 00       	call   c001b70e <ISO9660::ISO9660()>
c000f4e2:	83 c4 1c             	add    esp,0x1c
c000f4e5:	c3                   	ret    

c000f4e6 <standardiseFiles(char*, char const*, char const*)>:
c000f4e6:	55                   	push   ebp
c000f4e7:	57                   	push   edi
c000f4e8:	56                   	push   esi
c000f4e9:	53                   	push   ebx
c000f4ea:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4f0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4f7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4fe:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f505:	68 00 04 00 00       	push   0x400
c000f50a:	6a 00                	push   0x0
c000f50c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f510:	56                   	push   esi
c000f511:	e8 f2 10 ff ff       	call   c0000608 <memset>
c000f516:	83 c4 10             	add    esp,0x10
c000f519:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f51d:	75 0b                	jne    c000f52a <standardiseFiles(char*, char const*, char const*)+0x44>
c000f51f:	50                   	push   eax
c000f520:	50                   	push   eax
c000f521:	57                   	push   edi
c000f522:	56                   	push   esi
c000f523:	e8 7f 11 ff ff       	call   c00006a7 <strcpy>
c000f528:	eb 41                	jmp    c000f56b <standardiseFiles(char*, char const*, char const*)+0x85>
c000f52a:	8a 07                	mov    al,BYTE PTR [edi]
c000f52c:	3c 5c                	cmp    al,0x5c
c000f52e:	74 04                	je     c000f534 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f530:	3c 2f                	cmp    al,0x2f
c000f532:	75 18                	jne    c000f54c <standardiseFiles(char*, char const*, char const*)+0x66>
c000f534:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f537:	3c 60                	cmp    al,0x60
c000f539:	7e 03                	jle    c000f53e <standardiseFiles(char*, char const*, char const*)+0x58>
c000f53b:	83 e8 20             	sub    eax,0x20
c000f53e:	88 04 24             	mov    BYTE PTR [esp],al
c000f541:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f548:	50                   	push   eax
c000f549:	50                   	push   eax
c000f54a:	eb 18                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f54c:	50                   	push   eax
c000f54d:	50                   	push   eax
c000f54e:	55                   	push   ebp
c000f54f:	56                   	push   esi
c000f550:	e8 52 11 ff ff       	call   c00006a7 <strcpy>
c000f555:	5a                   	pop    edx
c000f556:	59                   	pop    ecx
c000f557:	68 34 29 02 c0       	push   0xc0022934
c000f55c:	56                   	push   esi
c000f55d:	e8 fc 11 ff ff       	call   c000075e <strcat>
c000f562:	5d                   	pop    ebp
c000f563:	58                   	pop    eax
c000f564:	57                   	push   edi
c000f565:	56                   	push   esi
c000f566:	e8 f3 11 ff ff       	call   c000075e <strcat>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f571:	3c 60                	cmp    al,0x60
c000f573:	7e 03                	jle    c000f578 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f575:	83 e8 20             	sub    eax,0x20
c000f578:	88 04 24             	mov    BYTE PTR [esp],al
c000f57b:	88 03                	mov    BYTE PTR [ebx],al
c000f57d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f584:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f58a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f58e:	bf 03 00 00 00       	mov    edi,0x3
c000f593:	b8 03 00 00 00       	mov    eax,0x3
c000f598:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f59b:	84 d2                	test   dl,dl
c000f59d:	0f 84 91 00 00 00    	je     c000f634 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f5a3:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f5a6:	80 fa 2f             	cmp    dl,0x2f
c000f5a9:	74 05                	je     c000f5b0 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f5ab:	80 fa 5c             	cmp    dl,0x5c
c000f5ae:	75 12                	jne    c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b0:	89 c5                	mov    ebp,eax
c000f5b2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f5b7:	74 09                	je     c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b9:	40                   	inc    eax
c000f5ba:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5be:	89 cf                	mov    edi,ecx
c000f5c0:	eb d6                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5c2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5c7:	75 5b                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5c9:	80 fa 2e             	cmp    dl,0x2e
c000f5cc:	75 56                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5ce:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5d2:	74 19                	je     c000f5ed <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5d4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5d9:	74 53                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5db:	89 f9                	mov    ecx,edi
c000f5dd:	41                   	inc    ecx
c000f5de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5e1:	80 fa 5c             	cmp    dl,0x5c
c000f5e4:	74 f7                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5e6:	80 fa 2f             	cmp    dl,0x2f
c000f5e9:	74 f2                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5eb:	eb d1                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ed:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5f2:	74 3a                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5f4:	83 f8 03             	cmp    eax,0x3
c000f5f7:	74 c5                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5f9:	41                   	inc    ecx
c000f5fa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5fd:	80 fa 2f             	cmp    dl,0x2f
c000f600:	74 f7                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f602:	80 fa 5c             	cmp    dl,0x5c
c000f605:	74 f2                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f607:	48                   	dec    eax
c000f608:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f60c:	75 06                	jne    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f60e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f612:	eb f3                	jmp    c000f607 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f614:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f618:	74 07                	je     c000f621 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f61a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f61e:	48                   	dec    eax
c000f61f:	eb f3                	jmp    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f621:	40                   	inc    eax
c000f622:	eb 9a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f624:	80 fa 2f             	cmp    dl,0x2f
c000f627:	74 95                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f629:	80 fa 5c             	cmp    dl,0x5c
c000f62c:	74 90                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f62e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f631:	40                   	inc    eax
c000f632:	eb 8a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f634:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	53                   	push   ebx
c000f63c:	e8 e4 0f ff ff       	call   c0000625 <strlen>
c000f641:	83 c4 10             	add    esp,0x10
c000f644:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f649:	75 26                	jne    c000f671 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f64b:	83 ec 0c             	sub    esp,0xc
c000f64e:	53                   	push   ebx
c000f64f:	e8 d1 0f ff ff       	call   c0000625 <strlen>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f65c:	74 26                	je     c000f684 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	53                   	push   ebx
c000f662:	e8 be 0f ff ff       	call   c0000625 <strlen>
c000f667:	83 c4 10             	add    esp,0x10
c000f66a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f66f:	eb c7                	jmp    c000f638 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	53                   	push   ebx
c000f675:	e8 ab 0f ff ff       	call   c0000625 <strlen>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f682:	74 c7                	je     c000f64b <standardiseFiles(char*, char const*, char const*)+0x165>
c000f684:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f68a:	5b                   	pop    ebx
c000f68b:	5e                   	pop    esi
c000f68c:	5f                   	pop    edi
c000f68d:	5d                   	pop    ebp
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <File::File(char const*, Process*)>:
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	6a 00                	push   0x0
c000f69c:	50                   	push   eax
c000f69d:	e8 66 e6 ff ff       	call   c000dd08 <UnixFile::UnixFile(int)>
c000f6a2:	83 c4 10             	add    esp,0x10
c000f6a5:	ba 58 16 02 c0       	mov    edx,0xc0021658
c000f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ae:	89 10                	mov    DWORD PTR [eax],edx
c000f6b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6be:	83 c0 0d             	add    eax,0xd
c000f6c1:	83 ec 04             	sub    esp,0x4
c000f6c4:	52                   	push   edx
c000f6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c9:	50                   	push   eax
c000f6ca:	e8 17 fe ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6ee:	90                   	nop
c000f6ef:	83 c4 0c             	add    esp,0xc
c000f6f2:	c3                   	ret    
c000f6f3:	90                   	nop

c000f6f4 <File::open(FileOpenMode)>:
c000f6f4:	53                   	push   ebx
c000f6f5:	b8 0b 00 00 00       	mov    eax,0xb
c000f6fa:	83 ec 08             	sub    esp,0x8
c000f6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f701:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f708:	80 fa 19             	cmp    dl,0x19
c000f70b:	77 40                	ja     c000f74d <File::open(FileOpenMode)+0x59>
c000f70d:	8b 14 95 80 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb780]
c000f714:	85 d2                	test   edx,edx
c000f716:	74 35                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f718:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f71e:	85 d2                	test   edx,edx
c000f720:	74 2b                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f722:	b8 06 00 00 00       	mov    eax,0x6
c000f727:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f72b:	75 20                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f72d:	8b 02                	mov    eax,DWORD PTR [edx]
c000f72f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f739:	51                   	push   ecx
c000f73a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f73d:	51                   	push   ecx
c000f73e:	52                   	push   edx
c000f73f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	85 c0                	test   eax,eax
c000f747:	75 04                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f749:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f74d:	83 c4 08             	add    esp,0x8
c000f750:	5b                   	pop    ebx
c000f751:	c3                   	ret    

c000f752 <File::close()>:
c000f752:	53                   	push   ebx
c000f753:	b8 0b 00 00 00       	mov    eax,0xb
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f75f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f766:	80 fa 19             	cmp    dl,0x19
c000f769:	77 41                	ja     c000f7ac <File::close()+0x5a>
c000f76b:	8b 1c 95 80 48 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb780]
c000f772:	85 db                	test   ebx,ebx
c000f774:	74 36                	je     c000f7ac <File::close()+0x5a>
c000f776:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f77d:	74 2d                	je     c000f7ac <File::close()+0x5a>
c000f77f:	b8 05 00 00 00       	mov    eax,0x5
c000f784:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f788:	74 22                	je     c000f7ac <File::close()+0x5a>
c000f78a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f78e:	8b 04 95 80 48 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb780]
c000f795:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f79b:	53                   	push   ebx
c000f79c:	53                   	push   ebx
c000f79d:	8b 10                	mov    edx,DWORD PTR [eax]
c000f79f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7a5:	50                   	push   eax
c000f7a6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	83 c4 08             	add    esp,0x8
c000f7af:	5b                   	pop    ebx
c000f7b0:	c3                   	ret    
c000f7b1:	90                   	nop

c000f7b2 <File::seek(unsigned long long)>:
c000f7b2:	56                   	push   esi
c000f7b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b8:	53                   	push   ebx
c000f7b9:	51                   	push   ecx
c000f7ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7c6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7cd:	80 fa 19             	cmp    dl,0x19
c000f7d0:	77 31                	ja     c000f803 <File::seek(unsigned long long)+0x51>
c000f7d2:	8b 14 95 80 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb780]
c000f7d9:	85 d2                	test   edx,edx
c000f7db:	74 26                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7e3:	85 d2                	test   edx,edx
c000f7e5:	74 1c                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7e7:	b8 05 00 00 00       	mov    eax,0x5
c000f7ec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7f0:	74 11                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f4:	53                   	push   ebx
c000f7f5:	51                   	push   ecx
c000f7f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7fc:	52                   	push   edx
c000f7fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f800:	83 c4 10             	add    esp,0x10
c000f803:	5a                   	pop    edx
c000f804:	5b                   	pop    ebx
c000f805:	5e                   	pop    esi
c000f806:	c3                   	ret    
c000f807:	90                   	nop

c000f808 <File::tell(unsigned long long*)>:
c000f808:	83 ec 0c             	sub    esp,0xc
c000f80b:	b8 0b 00 00 00       	mov    eax,0xb
c000f810:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f814:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f81b:	80 fa 19             	cmp    dl,0x19
c000f81e:	77 34                	ja     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f820:	8b 14 95 80 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb780]
c000f827:	85 d2                	test   edx,edx
c000f829:	74 29                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f82b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f831:	85 d2                	test   edx,edx
c000f833:	74 1f                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f835:	b8 05 00 00 00       	mov    eax,0x5
c000f83a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f83e:	74 14                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f840:	50                   	push   eax
c000f841:	8b 02                	mov    eax,DWORD PTR [edx]
c000f843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f847:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f84d:	52                   	push   edx
c000f84e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	83 c4 0c             	add    esp,0xc
c000f857:	c3                   	ret    

c000f858 <File::rewind()>:
c000f858:	83 ec 10             	sub    esp,0x10
c000f85b:	6a 00                	push   0x0
c000f85d:	6a 00                	push   0x0
c000f85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f863:	e8 4a ff ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c000f868:	83 c4 1c             	add    esp,0x1c
c000f86b:	c3                   	ret    

c000f86c <File::unlink()>:
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	b8 0b 00 00 00       	mov    eax,0xb
c000f874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f87f:	80 f9 19             	cmp    cl,0x19
c000f882:	77 2f                	ja     c000f8b3 <File::unlink()+0x47>
c000f884:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000f88b:	85 c9                	test   ecx,ecx
c000f88d:	74 24                	je     c000f8b3 <File::unlink()+0x47>
c000f88f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f895:	85 c9                	test   ecx,ecx
c000f897:	74 1a                	je     c000f8b3 <File::unlink()+0x47>
c000f899:	b8 06 00 00 00       	mov    eax,0x6
c000f89e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8a2:	75 0f                	jne    c000f8b3 <File::unlink()+0x47>
c000f8a4:	50                   	push   eax
c000f8a5:	83 c2 0d             	add    edx,0xd
c000f8a8:	50                   	push   eax
c000f8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ab:	52                   	push   edx
c000f8ac:	51                   	push   ecx
c000f8ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	83 c4 0c             	add    esp,0xc
c000f8b6:	c3                   	ret    
c000f8b7:	90                   	nop

c000f8b8 <File::rename(char const*)>:
c000f8b8:	83 ec 0c             	sub    esp,0xc
c000f8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8cb:	80 f9 19             	cmp    cl,0x19
c000f8ce:	77 32                	ja     c000f902 <File::rename(char const*)+0x4a>
c000f8d0:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000f8d7:	85 c9                	test   ecx,ecx
c000f8d9:	74 27                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8e1:	85 c9                	test   ecx,ecx
c000f8e3:	74 1d                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8e5:	b8 06 00 00 00       	mov    eax,0x6
c000f8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ee:	75 12                	jne    c000f902 <File::rename(char const*)+0x4a>
c000f8f0:	50                   	push   eax
c000f8f1:	83 c2 0d             	add    edx,0xd
c000f8f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8fa:	52                   	push   edx
c000f8fb:	51                   	push   ecx
c000f8fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <File::chfatattr(unsigned char, unsigned char)>:
c000f906:	57                   	push   edi
c000f907:	b8 0b 00 00 00       	mov    eax,0xb
c000f90c:	56                   	push   esi
c000f90d:	53                   	push   ebx
c000f90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f912:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f916:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f91a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f921:	80 f9 19             	cmp    cl,0x19
c000f924:	77 37                	ja     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f926:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000f92d:	85 c9                	test   ecx,ecx
c000f92f:	74 2c                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f931:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f937:	85 c9                	test   ecx,ecx
c000f939:	74 22                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f93b:	b8 06 00 00 00       	mov    eax,0x6
c000f940:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f944:	75 17                	jne    c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f946:	89 f0                	mov    eax,esi
c000f948:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f94a:	0f b6 f0             	movzx  esi,al
c000f94d:	56                   	push   esi
c000f94e:	83 c2 0d             	add    edx,0xd
c000f951:	0f b6 db             	movzx  ebx,bl
c000f954:	53                   	push   ebx
c000f955:	52                   	push   edx
c000f956:	51                   	push   ecx
c000f957:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	5b                   	pop    ebx
c000f95e:	5e                   	pop    esi
c000f95f:	5f                   	pop    edi
c000f960:	c3                   	ret    
c000f961:	90                   	nop

c000f962 <File::exists()>:
c000f962:	83 ec 0c             	sub    esp,0xc
c000f965:	31 c0                	xor    eax,eax
c000f967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f96b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f972:	80 f9 19             	cmp    cl,0x19
c000f975:	77 24                	ja     c000f99b <File::exists()+0x39>
c000f977:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000f97e:	85 c9                	test   ecx,ecx
c000f980:	74 19                	je     c000f99b <File::exists()+0x39>
c000f982:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f988:	85 c9                	test   ecx,ecx
c000f98a:	74 0f                	je     c000f99b <File::exists()+0x39>
c000f98c:	50                   	push   eax
c000f98d:	83 c2 0d             	add    edx,0xd
c000f990:	50                   	push   eax
c000f991:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f993:	52                   	push   edx
c000f994:	51                   	push   ecx
c000f995:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f998:	83 c4 10             	add    esp,0x10
c000f99b:	83 c4 0c             	add    esp,0xc
c000f99e:	c3                   	ret    
c000f99f:	90                   	nop

c000f9a0 <File::stat(unsigned long long*, bool*)>:
c000f9a0:	56                   	push   esi
c000f9a1:	53                   	push   ebx
c000f9a2:	50                   	push   eax
c000f9a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9bb:	80 f9 19             	cmp    cl,0x19
c000f9be:	77 3d                	ja     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9c0:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000f9c7:	85 c9                	test   ecx,ecx
c000f9c9:	74 32                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9d1:	85 c9                	test   ecx,ecx
c000f9d3:	74 28                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9db:	74 13                	je     c000f9f0 <File::stat(unsigned long long*, bool*)+0x50>
c000f9dd:	83 ec 04             	sub    esp,0x4
c000f9e0:	56                   	push   esi
c000f9e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9e7:	51                   	push   ecx
c000f9e8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9eb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9ee:	eb 0a                	jmp    c000f9fa <File::stat(unsigned long long*, bool*)+0x5a>
c000f9f0:	53                   	push   ebx
c000f9f1:	83 c2 0d             	add    edx,0xd
c000f9f4:	56                   	push   esi
c000f9f5:	52                   	push   edx
c000f9f6:	51                   	push   ecx
c000f9f7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	5a                   	pop    edx
c000f9fe:	5b                   	pop    ebx
c000f9ff:	5e                   	pop    esi
c000fa00:	c3                   	ret    

c000fa01 <getcwd(Process*, char*, int)>:
c000fa01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa05:	31 c0                	xor    eax,eax
c000fa07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fa0a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fa0e:	7d 15                	jge    c000fa25 <getcwd(Process*, char*, int)+0x24>
c000fa10:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa14:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa1b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa1e:	84 c9                	test   cl,cl
c000fa20:	74 06                	je     c000fa28 <getcwd(Process*, char*, int)+0x27>
c000fa22:	40                   	inc    eax
c000fa23:	eb e2                	jmp    c000fa07 <getcwd(Process*, char*, int)+0x6>
c000fa25:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa28:	31 c0                	xor    eax,eax
c000fa2a:	c3                   	ret    

c000fa2b <setcwd(Process*, char*)>:
c000fa2b:	55                   	push   ebp
c000fa2c:	57                   	push   edi
c000fa2d:	56                   	push   esi
c000fa2e:	53                   	push   ebx
c000fa2f:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa35:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa3c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa42:	57                   	push   edi
c000fa43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa4e:	56                   	push   esi
c000fa4f:	e8 92 fa ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fa54:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa57:	e8 c9 0b ff ff       	call   c0000625 <strlen>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	83 f8 02             	cmp    eax,0x2
c000fa62:	77 17                	ja     c000fa7b <setcwd(Process*, char*)+0x50>
c000fa64:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa69:	83 e8 41             	sub    eax,0x41
c000fa6c:	83 f8 19             	cmp    eax,0x19
c000fa6f:	76 24                	jbe    c000fa95 <setcwd(Process*, char*)+0x6a>
c000fa71:	b8 03 00 00 00       	mov    eax,0x3
c000fa76:	e9 cb 00 00 00       	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fa7b:	83 ec 0c             	sub    esp,0xc
c000fa7e:	56                   	push   esi
c000fa7f:	e8 a1 0b ff ff       	call   c0000625 <strlen>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	83 f8 03             	cmp    eax,0x3
c000fa8a:	75 33                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa8c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa91:	75 2c                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa93:	eb cf                	jmp    c000fa64 <setcwd(Process*, char*)+0x39>
c000fa95:	8b 14 85 80 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb780]
c000fa9c:	b8 05 00 00 00       	mov    eax,0x5
c000faa1:	85 d2                	test   edx,edx
c000faa3:	0f 84 9d 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000faa9:	b8 06 00 00 00       	mov    eax,0x6
c000faae:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fab5:	0f 84 8b 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000fabb:	51                   	push   ecx
c000fabc:	51                   	push   ecx
c000fabd:	eb 7b                	jmp    c000fb3a <setcwd(Process*, char*)+0x10f>
c000fabf:	83 ec 0c             	sub    esp,0xc
c000fac2:	68 14 01 00 00       	push   0x114
c000fac7:	e8 58 f5 ff ff       	call   c000f024 <operator new(unsigned long)>
c000facc:	83 c4 0c             	add    esp,0xc
c000facf:	89 c3                	mov    ebx,eax
c000fad1:	55                   	push   ebp
c000fad2:	56                   	push   esi
c000fad3:	50                   	push   eax
c000fad4:	e8 b7 fb ff ff       	call   c000f690 <File::File(char const*, Process*)>
c000fad9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fade:	83 c4 0c             	add    esp,0xc
c000fae1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fae5:	50                   	push   eax
c000fae6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000faea:	50                   	push   eax
c000faeb:	53                   	push   ebx
c000faec:	e8 af fe ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000faf6:	83 f8 02             	cmp    eax,0x2
c000faf9:	75 09                	jne    c000fb04 <setcwd(Process*, char*)+0xd9>
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	53                   	push   ebx
c000faff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb02:	eb 0d                	jmp    c000fb11 <setcwd(Process*, char*)+0xe6>
c000fb04:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fb07:	85 c0                	test   eax,eax
c000fb09:	74 10                	je     c000fb1b <setcwd(Process*, char*)+0xf0>
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	53                   	push   ebx
c000fb0f:	ff d2                	call   edx
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	b8 01 00 00 00       	mov    eax,0x1
c000fb19:	eb 2b                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb1b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb20:	75 10                	jne    c000fb32 <setcwd(Process*, char*)+0x107>
c000fb22:	83 ec 0c             	sub    esp,0xc
c000fb25:	53                   	push   ebx
c000fb26:	ff d2                	call   edx
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	b8 02 00 00 00       	mov    eax,0x2
c000fb30:	eb 14                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	53                   	push   ebx
c000fb36:	ff d2                	call   edx
c000fb38:	58                   	pop    eax
c000fb39:	5a                   	pop    edx
c000fb3a:	56                   	push   esi
c000fb3b:	57                   	push   edi
c000fb3c:	e8 66 0b ff ff       	call   c00006a7 <strcpy>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	31 c0                	xor    eax,eax
c000fb46:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb4c:	5b                   	pop    ebx
c000fb4d:	5e                   	pop    esi
c000fb4e:	5f                   	pop    edi
c000fb4f:	5d                   	pop    ebp
c000fb50:	c3                   	ret    
c000fb51:	90                   	nop

c000fb52 <Directory::Directory(char const*, Process*)>:
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb59:	83 ec 08             	sub    esp,0x8
c000fb5c:	6a 00                	push   0x0
c000fb5e:	50                   	push   eax
c000fb5f:	e8 a4 e1 ff ff       	call   c000dd08 <UnixFile::UnixFile(int)>
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	ba 74 16 02 c0       	mov    edx,0xc0021674
c000fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb70:	89 10                	mov    DWORD PTR [eax],edx
c000fb72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	83 c0 0d             	add    eax,0xd
c000fb83:	83 ec 04             	sub    esp,0x4
c000fb86:	52                   	push   edx
c000fb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb8b:	50                   	push   eax
c000fb8c:	e8 55 f9 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb98:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb9b:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fbb0:	90                   	nop
c000fbb1:	83 c4 0c             	add    esp,0xc
c000fbb4:	c3                   	ret    
c000fbb5:	90                   	nop

c000fbb6 <Directory::open()>:
c000fbb6:	53                   	push   ebx
c000fbb7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbbc:	83 ec 08             	sub    esp,0x8
c000fbbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbca:	80 fa 19             	cmp    dl,0x19
c000fbcd:	77 3d                	ja     c000fc0c <Directory::open()+0x56>
c000fbcf:	8b 14 95 80 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb780]
c000fbd6:	85 d2                	test   edx,edx
c000fbd8:	74 32                	je     c000fc0c <Directory::open()+0x56>
c000fbda:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbe0:	85 d2                	test   edx,edx
c000fbe2:	74 28                	je     c000fc0c <Directory::open()+0x56>
c000fbe4:	b8 06 00 00 00       	mov    eax,0x6
c000fbe9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbed:	75 1d                	jne    c000fc0c <Directory::open()+0x56>
c000fbef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbf5:	50                   	push   eax
c000fbf6:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbf8:	51                   	push   ecx
c000fbf9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbfc:	51                   	push   ecx
c000fbfd:	52                   	push   edx
c000fbfe:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	85 c0                	test   eax,eax
c000fc06:	75 04                	jne    c000fc0c <Directory::open()+0x56>
c000fc08:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fc0c:	83 c4 08             	add    esp,0x8
c000fc0f:	5b                   	pop    ebx
c000fc10:	c3                   	ret    
c000fc11:	90                   	nop

c000fc12 <Directory::close()>:
c000fc12:	53                   	push   ebx
c000fc13:	b8 0b 00 00 00       	mov    eax,0xb
c000fc18:	83 ec 08             	sub    esp,0x8
c000fc1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc1f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc26:	80 fa 19             	cmp    dl,0x19
c000fc29:	77 41                	ja     c000fc6c <Directory::close()+0x5a>
c000fc2b:	8b 1c 95 80 48 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb780]
c000fc32:	85 db                	test   ebx,ebx
c000fc34:	74 36                	je     c000fc6c <Directory::close()+0x5a>
c000fc36:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc3d:	74 2d                	je     c000fc6c <Directory::close()+0x5a>
c000fc3f:	b8 05 00 00 00       	mov    eax,0x5
c000fc44:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc48:	74 22                	je     c000fc6c <Directory::close()+0x5a>
c000fc4a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc4e:	8b 04 95 80 48 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb780]
c000fc55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc5b:	53                   	push   ebx
c000fc5c:	53                   	push   ebx
c000fc5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc5f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc65:	50                   	push   eax
c000fc66:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	83 c4 08             	add    esp,0x8
c000fc6f:	5b                   	pop    ebx
c000fc70:	c3                   	ret    
c000fc71:	90                   	nop

c000fc72 <Directory::unlink()>:
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	b8 0b 00 00 00       	mov    eax,0xb
c000fc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc85:	80 f9 19             	cmp    cl,0x19
c000fc88:	77 2f                	ja     c000fcb9 <Directory::unlink()+0x47>
c000fc8a:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000fc91:	85 c9                	test   ecx,ecx
c000fc93:	74 24                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc9b:	85 c9                	test   ecx,ecx
c000fc9d:	74 1a                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc9f:	b8 06 00 00 00       	mov    eax,0x6
c000fca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fca8:	75 0f                	jne    c000fcb9 <Directory::unlink()+0x47>
c000fcaa:	50                   	push   eax
c000fcab:	83 c2 0d             	add    edx,0xd
c000fcae:	50                   	push   eax
c000fcaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcb1:	52                   	push   edx
c000fcb2:	51                   	push   ecx
c000fcb3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	83 c4 0c             	add    esp,0xc
c000fcbc:	c3                   	ret    
c000fcbd:	90                   	nop

c000fcbe <Directory::rename(char const*)>:
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	b8 0b 00 00 00       	mov    eax,0xb
c000fcc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcd1:	80 f9 19             	cmp    cl,0x19
c000fcd4:	77 32                	ja     c000fd08 <Directory::rename(char const*)+0x4a>
c000fcd6:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000fcdd:	85 c9                	test   ecx,ecx
c000fcdf:	74 27                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fce1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fce7:	85 c9                	test   ecx,ecx
c000fce9:	74 1d                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fceb:	b8 06 00 00 00       	mov    eax,0x6
c000fcf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcf4:	75 12                	jne    c000fd08 <Directory::rename(char const*)+0x4a>
c000fcf6:	50                   	push   eax
c000fcf7:	83 c2 0d             	add    edx,0xd
c000fcfa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd00:	52                   	push   edx
c000fd01:	51                   	push   ecx
c000fd02:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	83 c4 0c             	add    esp,0xc
c000fd0b:	c3                   	ret    

c000fd0c <Directory::exists()>:
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	31 c0                	xor    eax,eax
c000fd11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd15:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd1c:	80 f9 19             	cmp    cl,0x19
c000fd1f:	77 24                	ja     c000fd45 <Directory::exists()+0x39>
c000fd21:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000fd28:	85 c9                	test   ecx,ecx
c000fd2a:	74 19                	je     c000fd45 <Directory::exists()+0x39>
c000fd2c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd32:	85 c9                	test   ecx,ecx
c000fd34:	74 0f                	je     c000fd45 <Directory::exists()+0x39>
c000fd36:	50                   	push   eax
c000fd37:	83 c2 0d             	add    edx,0xd
c000fd3a:	50                   	push   eax
c000fd3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd3d:	52                   	push   edx
c000fd3e:	51                   	push   ecx
c000fd3f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd42:	83 c4 10             	add    esp,0x10
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	c3                   	ret    
c000fd49:	90                   	nop

c000fd4a <Directory::read(dirent*)>:
c000fd4a:	83 ec 1c             	sub    esp,0x1c
c000fd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd52:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd56:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd5d:	80 fa 19             	cmp    dl,0x19
c000fd60:	77 30                	ja     c000fd92 <Directory::read(dirent*)+0x48>
c000fd62:	8b 14 95 80 48 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb780]
c000fd69:	85 d2                	test   edx,edx
c000fd6b:	74 25                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd6d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd74:	74 1c                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd7f:	52                   	push   edx
c000fd80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd84:	6a 00                	push   0x0
c000fd86:	68 10 01 00 00       	push   0x110
c000fd8b:	51                   	push   ecx
c000fd8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd8f:	83 c4 20             	add    esp,0x20
c000fd92:	83 c4 1c             	add    esp,0x1c
c000fd95:	c3                   	ret    

c000fd96 <Directory::create()>:
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	b8 0b 00 00 00       	mov    eax,0xb
c000fd9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fda2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fda9:	80 f9 19             	cmp    cl,0x19
c000fdac:	77 2f                	ja     c000fddd <Directory::create()+0x47>
c000fdae:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c000fdb5:	85 c9                	test   ecx,ecx
c000fdb7:	74 24                	je     c000fddd <Directory::create()+0x47>
c000fdb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdbf:	85 c9                	test   ecx,ecx
c000fdc1:	74 1a                	je     c000fddd <Directory::create()+0x47>
c000fdc3:	b8 06 00 00 00       	mov    eax,0x6
c000fdc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdcc:	75 0f                	jne    c000fddd <Directory::create()+0x47>
c000fdce:	50                   	push   eax
c000fdcf:	83 c2 0d             	add    edx,0xd
c000fdd2:	50                   	push   eax
c000fdd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdd5:	52                   	push   edx
c000fdd6:	51                   	push   ecx
c000fdd7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	83 c4 0c             	add    esp,0xc
c000fde0:	c3                   	ret    
c000fde1:	90                   	nop

c000fde2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fde2:	b8 0a 00 00 00       	mov    eax,0xa
c000fde7:	c3                   	ret    

c000fde8 <Bus::Bus(char const*)>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdef:	83 ec 08             	sub    esp,0x8
c000fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf6:	50                   	push   eax
c000fdf7:	e8 62 09 00 00       	call   c001075e <Device::Device(char const*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe08:	89 10                	mov    DWORD PTR [eax],edx
c000fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe18:	90                   	nop
c000fe19:	83 c4 0c             	add    esp,0xc
c000fe1c:	c3                   	ret    
c000fe1d:	90                   	nop

c000fe1e <Bus::~Bus()>:
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	ba 90 16 02 c0       	mov    edx,0xc0021690
c000fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2a:	89 10                	mov    DWORD PTR [eax],edx
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	50                   	push   eax
c000fe34:	e8 db 05 00 00       	call   c0010414 <Device::~Device()>
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	90                   	nop
c000fe3d:	83 c4 0c             	add    esp,0xc
c000fe40:	c3                   	ret    
c000fe41:	90                   	nop

c000fe42 <Bus::~Bus()>:
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	83 ec 0c             	sub    esp,0xc
c000fe48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4c:	e8 cd ff ff ff       	call   c000fe1e <Bus::~Bus()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	68 58 01 00 00       	push   0x158
c000fe5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe60:	e8 ce f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	83 c4 0c             	add    esp,0xc
c000fe6b:	c3                   	ret    

c000fe6c <Buzzer::Buzzer(char const*)>:
c000fe6c:	83 ec 0c             	sub    esp,0xc
c000fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe73:	83 ec 08             	sub    esp,0x8
c000fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7a:	50                   	push   eax
c000fe7b:	e8 de 08 00 00       	call   c001075e <Device::Device(char const*)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	ba bc 16 02 c0       	mov    edx,0xc00216bc
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	89 10                	mov    DWORD PTR [eax],edx
c000fe8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000feaa:	90                   	nop
c000feab:	83 c4 0c             	add    esp,0xc
c000feae:	c3                   	ret    
c000feaf:	90                   	nop

c000feb0 <Buzzer::~Buzzer()>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	ba bc 16 02 c0       	mov    edx,0xc00216bc
c000feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febc:	89 10                	mov    DWORD PTR [eax],edx
c000febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	50                   	push   eax
c000fec6:	e8 49 05 00 00       	call   c0010414 <Device::~Device()>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	90                   	nop
c000fecf:	83 c4 0c             	add    esp,0xc
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <Buzzer::~Buzzer()>:
c000fed4:	83 ec 0c             	sub    esp,0xc
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fede:	e8 cd ff ff ff       	call   c000feb0 <Buzzer::~Buzzer()>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	83 ec 08             	sub    esp,0x8
c000fee9:	68 5c 01 00 00       	push   0x15c
c000feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef2:	e8 3c f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	83 c4 0c             	add    esp,0xc
c000fefd:	c3                   	ret    

c000fefe <Buzzer::stop()>:
c000fefe:	83 ec 14             	sub    esp,0x14
c000ff01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff05:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff07:	6a 00                	push   0x0
c000ff09:	50                   	push   eax
c000ff0a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff0d:	83 c4 1c             	add    esp,0x1c
c000ff10:	c3                   	ret    

c000ff11 <beepThread(void*)>:
c000ff11:	53                   	push   ebx
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff19:	e8 3b 86 00 00       	call   c0018559 <unlockScheduler()>
c000ff1e:	52                   	push   edx
c000ff1f:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff24:	52                   	push   edx
c000ff25:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff2b:	52                   	push   edx
c000ff2c:	50                   	push   eax
c000ff2d:	e8 83 8b 00 00       	call   c0018ab5 <nanoSleep(unsigned long long)>
c000ff32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff35:	e8 c4 ff ff ff       	call   c000fefe <Buzzer::stop()>
c000ff3a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff42:	83 c4 18             	add    esp,0x18
c000ff45:	5b                   	pop    ebx
c000ff46:	e9 ae 8a 00 00       	jmp    c00189f9 <blockTask(TaskState)>
c000ff4b:	90                   	nop

c000ff4c <Buzzer::beep(int, int, bool)>:
c000ff4c:	57                   	push   edi
c000ff4d:	56                   	push   esi
c000ff4e:	53                   	push   ebx
c000ff4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff5b:	52                   	push   edx
c000ff5c:	52                   	push   edx
c000ff5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff63:	56                   	push   esi
c000ff64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff67:	89 f8                	mov    eax,edi
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	84 c0                	test   al,al
c000ff6e:	74 1f                	je     c000ff8f <Buzzer::beep(int, int, bool)+0x43>
c000ff70:	50                   	push   eax
c000ff71:	50                   	push   eax
c000ff72:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff78:	99                   	cdq    
c000ff79:	52                   	push   edx
c000ff7a:	50                   	push   eax
c000ff7b:	e8 35 8b 00 00       	call   c0018ab5 <nanoSleep(unsigned long long)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff87:	5b                   	pop    ebx
c000ff88:	5e                   	pop    esi
c000ff89:	5f                   	pop    edi
c000ff8a:	e9 6f ff ff ff       	jmp    c000fefe <Buzzer::stop()>
c000ff8f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff95:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c000ff9a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ffa2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ffa6:	c7 44 24 14 11 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ff11
c000ffae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ffb2:	5b                   	pop    ebx
c000ffb3:	5e                   	pop    esi
c000ffb4:	5f                   	pop    edi
c000ffb5:	e9 d2 86 00 00       	jmp    c001868c <Process::createThread(void (*)(void*), void*, int)>

c000ffba <loadClockSettings()>:
c000ffba:	c7 05 f4 43 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00243f4,0xa
c000ffc4:	c6 05 f1 43 02 c0 00 	mov    BYTE PTR ds:0xc00243f1,0x0
c000ffcb:	c6 05 f0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243f0,0x1
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <Clock::Clock(char const*)>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdb:	83 ec 08             	sub    esp,0x8
c000ffde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe2:	50                   	push   eax
c000ffe3:	e8 76 07 00 00       	call   c001075e <Device::Device(char const*)>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c000fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff4:	89 10                	mov    DWORD PTR [eax],edx
c000fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0010004:	90                   	nop
c0010005:	83 c4 0c             	add    esp,0xc
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <Clock::~Clock()>:
c001000a:	83 ec 0c             	sub    esp,0xc
c001000d:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c0010012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010016:	89 10                	mov    DWORD PTR [eax],edx
c0010018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	50                   	push   eax
c0010020:	e8 ef 03 00 00       	call   c0010414 <Device::~Device()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	90                   	nop
c0010029:	83 c4 0c             	add    esp,0xc
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <Clock::~Clock()>:
c001002e:	83 ec 0c             	sub    esp,0xc
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010038:	e8 cd ff ff ff       	call   c001000a <Clock::~Clock()>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	83 ec 08             	sub    esp,0x8
c0010043:	68 58 01 00 00       	push   0x158
c0010048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001004c:	e8 e2 ef ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	c3                   	ret    

c0010058 <Clock::timeInSecondsLocal()>:
c0010058:	53                   	push   ebx
c0010059:	83 ec 14             	sub    esp,0x14
c001005c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010060:	8b 10                	mov    edx,DWORD PTR [eax]
c0010062:	50                   	push   eax
c0010063:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010066:	0f b6 0d f0 43 02 c0 	movzx  ecx,BYTE PTR ds:0xc00243f0
c001006d:	03 0d f4 43 02 c0    	add    ecx,DWORD PTR ds:0xc00243f4
c0010073:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010079:	89 cb                	mov    ebx,ecx
c001007b:	c1 fb 1f             	sar    ebx,0x1f
c001007e:	01 c8                	add    eax,ecx
c0010080:	11 da                	adc    edx,ebx
c0010082:	83 c4 10             	add    esp,0x10
c0010085:	31 c9                	xor    ecx,ecx
c0010087:	80 3d f1 43 02 c0 00 	cmp    BYTE PTR ds:0xc00243f1,0x0
c001008e:	74 05                	je     c0010095 <Clock::timeInSecondsLocal()+0x3d>
c0010090:	b9 08 07 00 00       	mov    ecx,0x708
c0010095:	31 db                	xor    ebx,ebx
c0010097:	01 c8                	add    eax,ecx
c0010099:	11 da                	adc    edx,ebx
c001009b:	83 c4 08             	add    esp,0x8
c001009e:	5b                   	pop    ebx
c001009f:	c3                   	ret    

c00100a0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00100a0:	57                   	push   edi
c00100a1:	56                   	push   esi
c00100a2:	53                   	push   ebx
c00100a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00100af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100b1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00100b4:	0f b6 05 f0 43 02 c0 	movzx  eax,BYTE PTR ds:0xc00243f0
c00100bb:	03 05 f4 43 02 c0    	add    eax,DWORD PTR ds:0xc00243f4
c00100c1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100c7:	99                   	cdq    
c00100c8:	29 c6                	sub    esi,eax
c00100ca:	19 d7                	sbb    edi,edx
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	89 fa                	mov    edx,edi
c00100d0:	31 f6                	xor    esi,esi
c00100d2:	80 3d f1 43 02 c0 00 	cmp    BYTE PTR ds:0xc00243f1,0x0
c00100d9:	74 05                	je     c00100e0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100db:	be 08 07 00 00       	mov    esi,0x708
c00100e0:	31 ff                	xor    edi,edi
c00100e2:	29 f0                	sub    eax,esi
c00100e4:	19 fa                	sbb    edx,edi
c00100e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100ee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100f2:	89 d8                	mov    eax,ebx
c00100f4:	5b                   	pop    ebx
c00100f5:	5e                   	pop    esi
c00100f6:	5f                   	pop    edi
c00100f7:	ff e0                	jmp    eax

c00100f9 <datetimeToSeconds(datetime_t)>:
c00100f9:	55                   	push   ebp
c00100fa:	57                   	push   edi
c00100fb:	56                   	push   esi
c00100fc:	53                   	push   ebx
c00100fd:	83 ec 14             	sub    esp,0x14
c0010100:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010108:	0f b6 f5             	movzx  esi,ch
c001010b:	6b f6 3c             	imul   esi,esi,0x3c
c001010e:	89 cf                	mov    edi,ecx
c0010110:	89 d3                	mov    ebx,edx
c0010112:	0f b6 c9             	movzx  ecx,cl
c0010115:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001011b:	0f b6 c6             	movzx  eax,dh
c001011e:	c1 ef 10             	shr    edi,0x10
c0010121:	48                   	dec    eax
c0010122:	c1 eb 10             	shr    ebx,0x10
c0010125:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010129:	89 f8                	mov    eax,edi
c001012b:	0f b6 f8             	movzx  edi,al
c001012e:	01 fe                	add    esi,edi
c0010130:	01 f1                	add    ecx,esi
c0010132:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010136:	c1 f9 1f             	sar    ecx,0x1f
c0010139:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001013d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010142:	0f b6 d2             	movzx  edx,dl
c0010145:	66 81 eb 6c 07       	sub    bx,0x76c
c001014a:	8b 0c 8d 20 17 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde8e0]
c0010151:	0f b7 f3             	movzx  esi,bx
c0010154:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010158:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001015d:	76 29                	jbe    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c001015f:	f6 c3 03             	test   bl,0x3
c0010162:	75 24                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010164:	31 d2                	xor    edx,edx
c0010166:	bf 64 00 00 00       	mov    edi,0x64
c001016b:	89 d8                	mov    eax,ebx
c001016d:	66 f7 f7             	div    di
c0010170:	66 85 d2             	test   dx,dx
c0010173:	75 12                	jne    c0010187 <datetimeToSeconds(datetime_t)+0x8e>
c0010175:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001017b:	bf 90 01 00 00       	mov    edi,0x190
c0010180:	99                   	cdq    
c0010181:	f7 ff                	idiv   edi
c0010183:	85 d2                	test   edx,edx
c0010185:	75 01                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010187:	41                   	inc    ecx
c0010188:	66 83 fb 46          	cmp    bx,0x46
c001018c:	76 45                	jbe    c00101d3 <datetimeToSeconds(datetime_t)+0xda>
c001018e:	bb 46 00 00 00       	mov    ebx,0x46
c0010193:	bf 64 00 00 00       	mov    edi,0x64
c0010198:	bd 90 01 00 00       	mov    ebp,0x190
c001019d:	b8 6d 01 00 00       	mov    eax,0x16d
c00101a2:	f6 c3 03             	test   bl,0x3
c00101a5:	75 23                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101a7:	89 d8                	mov    eax,ebx
c00101a9:	99                   	cdq    
c00101aa:	f7 ff                	idiv   edi
c00101ac:	85 d2                	test   edx,edx
c00101ae:	b8 6e 01 00 00       	mov    eax,0x16e
c00101b3:	75 15                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101b5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101bb:	99                   	cdq    
c00101bc:	f7 fd                	idiv   ebp
c00101be:	31 c0                	xor    eax,eax
c00101c0:	85 d2                	test   edx,edx
c00101c2:	0f 94 c0             	sete   al
c00101c5:	05 6d 01 00 00       	add    eax,0x16d
c00101ca:	43                   	inc    ebx
c00101cb:	01 c1                	add    ecx,eax
c00101cd:	39 f3                	cmp    ebx,esi
c00101cf:	7c cc                	jl     c001019d <datetimeToSeconds(datetime_t)+0xa4>
c00101d1:	eb 3b                	jmp    c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d3:	74 39                	je     c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d5:	b8 45 00 00 00       	mov    eax,0x45
c00101da:	89 c2                	mov    edx,eax
c00101dc:	83 e2 03             	and    edx,0x3
c00101df:	39 f0                	cmp    eax,esi
c00101e1:	7e 13                	jle    c00101f6 <datetimeToSeconds(datetime_t)+0xfd>
c00101e3:	85 d2                	test   edx,edx
c00101e5:	0f 94 c2             	sete   dl
c00101e8:	0f b6 d2             	movzx  edx,dl
c00101eb:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101f1:	48                   	dec    eax
c00101f2:	29 d1                	sub    ecx,edx
c00101f4:	eb e4                	jmp    c00101da <datetimeToSeconds(datetime_t)+0xe1>
c00101f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00101fb:	85 d2                	test   edx,edx
c00101fd:	75 0d                	jne    c001020c <datetimeToSeconds(datetime_t)+0x113>
c00101ff:	31 c0                	xor    eax,eax
c0010201:	66 85 db             	test   bx,bx
c0010204:	0f 95 c0             	setne  al
c0010207:	05 6d 01 00 00       	add    eax,0x16d
c001020c:	29 c1                	sub    ecx,eax
c001020e:	b8 80 51 01 00       	mov    eax,0x15180
c0010213:	f7 e9                	imul   ecx
c0010215:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010219:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001021d:	83 c4 14             	add    esp,0x14
c0010220:	5b                   	pop    ebx
c0010221:	5e                   	pop    esi
c0010222:	5f                   	pop    edi
c0010223:	5d                   	pop    ebp
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010226:	57                   	push   edi
c0010227:	56                   	push   esi
c0010228:	53                   	push   ebx
c0010229:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001022d:	8b 06                	mov    eax,DWORD PTR [esi]
c001022f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001023a:	e8 ba fe ff ff       	call   c00100f9 <datetimeToSeconds(datetime_t)>
c001023f:	59                   	pop    ecx
c0010240:	0f b6 0d f0 43 02 c0 	movzx  ecx,BYTE PTR ds:0xc00243f0
c0010247:	03 0d f4 43 02 c0    	add    ecx,DWORD PTR ds:0xc00243f4
c001024d:	5b                   	pop    ebx
c001024e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010254:	89 cb                	mov    ebx,ecx
c0010256:	c1 fb 1f             	sar    ebx,0x1f
c0010259:	29 c8                	sub    eax,ecx
c001025b:	19 da                	sbb    edx,ebx
c001025d:	31 c9                	xor    ecx,ecx
c001025f:	80 3d f1 43 02 c0 00 	cmp    BYTE PTR ds:0xc00243f1,0x0
c0010266:	74 05                	je     c001026d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010268:	b9 08 07 00 00       	mov    ecx,0x708
c001026d:	31 db                	xor    ebx,ebx
c001026f:	29 c8                	sub    eax,ecx
c0010271:	19 da                	sbb    edx,ebx
c0010273:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010277:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001027b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001027f:	5b                   	pop    ebx
c0010280:	89 f8                	mov    eax,edi
c0010282:	5e                   	pop    esi
c0010283:	5f                   	pop    edi
c0010284:	ff e0                	jmp    eax

c0010286 <secondsToDatetime(unsigned long long)>:
c0010286:	55                   	push   ebp
c0010287:	57                   	push   edi
c0010288:	56                   	push   esi
c0010289:	53                   	push   ebx
c001028a:	83 ec 1c             	sub    esp,0x1c
c001028d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010291:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010295:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010299:	6a 00                	push   0x0
c001029b:	68 80 51 01 00       	push   0x15180
c00102a0:	55                   	push   ebp
c00102a1:	57                   	push   edi
c00102a2:	e8 75 ed 00 00       	call   c001f01c <__udivdi3>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102ae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00102b4:	6a 00                	push   0x0
c00102b6:	68 80 51 01 00       	push   0x15180
c00102bb:	55                   	push   ebp
c00102bc:	57                   	push   edi
c00102bd:	e8 5a ee 00 00       	call   c001f11c <__umoddi3>
c00102c2:	bf 10 0e 00 00       	mov    edi,0xe10
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	99                   	cdq    
c00102cb:	f7 ff                	idiv   edi
c00102cd:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102d0:	89 d0                	mov    eax,edx
c00102d2:	99                   	cdq    
c00102d3:	bf 3c 00 00 00       	mov    edi,0x3c
c00102d8:	f7 ff                	idiv   edi
c00102da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102e0:	85 db                	test   ebx,ebx
c00102e2:	79 11                	jns    c00102f5 <secondsToDatetime(unsigned long long)+0x6f>
c00102e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102f3:	eb 07                	jmp    c00102fc <secondsToDatetime(unsigned long long)+0x76>
c00102f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102fa:	89 d8                	mov    eax,ebx
c00102fc:	99                   	cdq    
c00102fd:	f7 f9                	idiv   ecx
c00102ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010303:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010308:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010310:	01 c3                	add    ebx,eax
c0010312:	31 d2                	xor    edx,edx
c0010314:	89 d8                	mov    eax,ebx
c0010316:	bf b4 05 00 00       	mov    edi,0x5b4
c001031b:	f7 f1                	div    ecx
c001031d:	31 d2                	xor    edx,edx
c001031f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010324:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010327:	89 d8                	mov    eax,ebx
c0010329:	f7 f7                	div    edi
c001032b:	29 c1                	sub    ecx,eax
c001032d:	31 d2                	xor    edx,edx
c001032f:	89 d8                	mov    eax,ebx
c0010331:	f7 f5                	div    ebp
c0010333:	29 c1                	sub    ecx,eax
c0010335:	bd 6d 01 00 00       	mov    ebp,0x16d
c001033a:	89 c8                	mov    eax,ecx
c001033c:	31 d2                	xor    edx,edx
c001033e:	f7 f5                	div    ebp
c0010340:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010344:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010349:	89 c8                	mov    eax,ecx
c001034b:	31 d2                	xor    edx,edx
c001034d:	f7 f5                	div    ebp
c001034f:	01 c3                	add    ebx,eax
c0010351:	31 d2                	xor    edx,edx
c0010353:	89 c8                	mov    eax,ecx
c0010355:	f7 f7                	div    edi
c0010357:	29 c3                	sub    ebx,eax
c0010359:	bf 99 00 00 00       	mov    edi,0x99
c001035e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010366:	29 c3                	sub    ebx,eax
c0010368:	31 d2                	xor    edx,edx
c001036a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001036d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010370:	83 c1 02             	add    ecx,0x2
c0010373:	bb 05 00 00 00       	mov    ebx,0x5
c0010378:	89 c8                	mov    eax,ecx
c001037a:	f7 f7                	div    edi
c001037c:	89 c7                	mov    edi,eax
c001037e:	31 d2                	xor    edx,edx
c0010380:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010386:	83 c0 02             	add    eax,0x2
c0010389:	f7 f3                	div    ebx
c001038b:	89 eb                	mov    ebx,ebp
c001038d:	29 c3                	sub    ebx,eax
c001038f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010395:	19 c0                	sbb    eax,eax
c0010397:	31 d2                	xor    edx,edx
c0010399:	83 e0 0c             	and    eax,0xc
c001039c:	88 1e                	mov    BYTE PTR [esi],bl
c001039e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00103a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00103aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00103ae:	83 f9 01             	cmp    ecx,0x1
c00103b1:	0f 96 c2             	setbe  dl
c00103b4:	01 d0                	add    eax,edx
c00103b6:	41                   	inc    ecx
c00103b7:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c2 04 00             	ret    0x4

c00103ca <Clock::timeInDatetimeLocal()>:
c00103ca:	53                   	push   ebx
c00103cb:	83 ec 14             	sub    esp,0x14
c00103ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103d6:	e8 7d fc ff ff       	call   c0010058 <Clock::timeInSecondsLocal()>
c00103db:	83 c4 0c             	add    esp,0xc
c00103de:	52                   	push   edx
c00103df:	50                   	push   eax
c00103e0:	53                   	push   ebx
c00103e1:	e8 a0 fe ff ff       	call   c0010286 <secondsToDatetime(unsigned long long)>
c00103e6:	83 c4 14             	add    esp,0x14
c00103e9:	89 d8                	mov    eax,ebx
c00103eb:	5b                   	pop    ebx
c00103ec:	c2 04 00             	ret    0x4
c00103ef:	90                   	nop

c00103f0 <Device::hibernate()>:
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <Device::wake()>:
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <Device::detect()>:
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <Device::disableLegacy()>:
c00103f6:	c3                   	ret    
c00103f7:	90                   	nop

c00103f8 <Device::powerSaving(PowerSavingLevel)>:
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <DriverlessDevice::close(int, int, void*)>:
c00103fa:	31 c0                	xor    eax,eax
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <DriverlessDevice::detect()>:
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <DriverlessDevice::open(int, int, void*)>:
c0010400:	83 ec 18             	sub    esp,0x18
c0010403:	68 50 17 02 c0       	push   0xc0021750
c0010408:	e8 41 51 00 00       	call   c001554e <Krnl::panic(char const*)>
c001040d:	83 c8 ff             	or     eax,0xffffffff
c0010410:	83 c4 1c             	add    esp,0x1c
c0010413:	c3                   	ret    

c0010414 <Device::~Device()>:
c0010414:	ba 78 17 02 c0       	mov    edx,0xc0021778
c0010419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041d:	89 10                	mov    DWORD PTR [eax],edx
c001041f:	90                   	nop
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <Device::~Device()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010429:	e8 e6 ff ff ff       	call   c0010414 <Device::~Device()>
c001042e:	83 c4 04             	add    esp,0x4
c0010431:	83 ec 08             	sub    esp,0x8
c0010434:	68 58 01 00 00       	push   0x158
c0010439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043d:	e8 f1 eb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010442:	83 c4 10             	add    esp,0x10
c0010445:	83 c4 0c             	add    esp,0xc
c0010448:	c3                   	ret    
c0010449:	90                   	nop

c001044a <Device::findAndLoadDriver()>:
c001044a:	c3                   	ret    
c001044b:	90                   	nop

c001044c <Device::preOpenPCI(PCIDeviceInfo)>:
c001044c:	57                   	push   edi
c001044d:	b9 09 00 00 00       	mov    ecx,0x9
c0010452:	56                   	push   esi
c0010453:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010457:	81 c7 18 01 00 00    	add    edi,0x118
c001045d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010461:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010468:	fc                   	cld    
c0010469:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001046b:	5e                   	pop    esi
c001046c:	5f                   	pop    edi
c001046d:	c3                   	ret    

c001046e <Device::preOpenACPI(void*, char*, char*)>:
c001046e:	56                   	push   esi
c001046f:	53                   	push   ebx
c0010470:	83 ec 08             	sub    esp,0x8
c0010473:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010477:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001047b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001047f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010485:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001048f:	6a 1e                	push   0x1e
c0010491:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001049b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00104a1:	50                   	push   eax
c00104a2:	e8 2b 01 ff ff       	call   c00005d2 <memcpy>
c00104a7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104ab:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104af:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00104b7:	83 c4 14             	add    esp,0x14
c00104ba:	5b                   	pop    ebx
c00104bb:	5e                   	pop    esi
c00104bc:	e9 11 01 ff ff       	jmp    c00005d2 <memcpy>
c00104c1:	90                   	nop

c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104c2:	55                   	push   ebp
c00104c3:	57                   	push   edi
c00104c4:	56                   	push   esi
c00104c5:	53                   	push   ebx
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104d9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104de:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104e5:	75 0b                	jne    c00104f2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104ed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104f0:	eb 24                	jmp    c0010516 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104f2:	e8 eb 3e 00 00       	call   c00143e2 <thisCPU()>
c00104f7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010503:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010507:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001050b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001050f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010513:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010516:	83 c4 0c             	add    esp,0xc
c0010519:	5b                   	pop    ebx
c001051a:	5e                   	pop    esi
c001051b:	5f                   	pop    edi
c001051c:	5d                   	pop    ebp
c001051d:	ff e0                	jmp    eax
c001051f:	90                   	nop

c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010520:	57                   	push   edi
c0010521:	56                   	push   esi
c0010522:	53                   	push   ebx
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001052b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001052f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010534:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001053b:	75 0b                	jne    c0010548 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001053d:	8b 00                	mov    eax,DWORD PTR [eax]
c001053f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010543:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010546:	eb 20                	jmp    c0010568 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010548:	e8 95 3e 00 00       	call   c00143e2 <thisCPU()>
c001054d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010553:	8b 10                	mov    edx,DWORD PTR [eax]
c0010555:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010559:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001055d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010561:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010565:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010568:	5b                   	pop    ebx
c0010569:	5e                   	pop    esi
c001056a:	5f                   	pop    edi
c001056b:	ff e0                	jmp    eax
c001056d:	90                   	nop

c001056e <Device::addChild(Device*)>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001057a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010580:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010586:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010588:	85 d2                	test   edx,edx
c001058a:	74 04                	je     c0010590 <Device::addChild(Device*)+0x22>
c001058c:	89 d3                	mov    ebx,edx
c001058e:	eb f6                	jmp    c0010586 <Device::addChild(Device*)+0x18>
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010596:	6a 08                	push   0x8
c0010598:	e8 87 ea ff ff       	call   c000f024 <operator new(unsigned long)>
c001059d:	89 03                	mov    DWORD PTR [ebx],eax
c001059f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ac:	83 c4 18             	add    esp,0x18
c00105af:	5b                   	pop    ebx
c00105b0:	c3                   	ret    
c00105b1:	90                   	nop

c00105b2 <Device::removeAllChildren()>:
c00105b2:	56                   	push   esi
c00105b3:	53                   	push   ebx
c00105b4:	52                   	push   edx
c00105b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105c2:	74 17                	je     c00105db <Device::removeAllChildren()+0x29>
c00105c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105c7:	85 c0                	test   eax,eax
c00105c9:	74 0c                	je     c00105d7 <Device::removeAllChildren()+0x25>
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00105d0:	50                   	push   eax
c00105d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105d4:	83 c4 10             	add    esp,0x10
c00105d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105d9:	eb e4                	jmp    c00105bf <Device::removeAllChildren()+0xd>
c00105db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105f4:	58                   	pop    eax
c00105f5:	5b                   	pop    ebx
c00105f6:	5e                   	pop    esi
c00105f7:	c3                   	ret    

c00105f8 <Device::hibernateAll()>:
c00105f8:	53                   	push   ebx
c00105f9:	83 ec 14             	sub    esp,0x14
c00105fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010602:	53                   	push   ebx
c0010603:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010606:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010612:	74 0f                	je     c0010623 <Device::hibernateAll()+0x2b>
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001061a:	e8 d9 ff ff ff       	call   c00105f8 <Device::hibernateAll()>
c001061f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010621:	eb e9                	jmp    c001060c <Device::hibernateAll()+0x14>
c0010623:	83 c4 08             	add    esp,0x8
c0010626:	5b                   	pop    ebx
c0010627:	c3                   	ret    

c0010628 <Device::wakeAll()>:
c0010628:	53                   	push   ebx
c0010629:	83 ec 14             	sub    esp,0x14
c001062c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010632:	53                   	push   ebx
c0010633:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010636:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010642:	74 0f                	je     c0010653 <Device::wakeAll()+0x2b>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001064a:	e8 d9 ff ff ff       	call   c0010628 <Device::wakeAll()>
c001064f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010651:	eb e9                	jmp    c001063c <Device::wakeAll()+0x14>
c0010653:	83 c4 08             	add    esp,0x8
c0010656:	5b                   	pop    ebx
c0010657:	c3                   	ret    

c0010658 <Device::detectAll()>:
c0010658:	53                   	push   ebx
c0010659:	83 ec 14             	sub    esp,0x14
c001065c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010662:	53                   	push   ebx
c0010663:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010666:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010672:	74 0f                	je     c0010683 <Device::detectAll()+0x2b>
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001067a:	e8 d9 ff ff ff       	call   c0010658 <Device::detectAll()>
c001067f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010681:	eb e9                	jmp    c001066c <Device::detectAll()+0x14>
c0010683:	83 c4 08             	add    esp,0x8
c0010686:	5b                   	pop    ebx
c0010687:	c3                   	ret    

c0010688 <Device::disableLegacyAll()>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 14             	sub    esp,0x14
c001068c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010692:	53                   	push   ebx
c0010693:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010696:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001069c:	83 c4 10             	add    esp,0x10
c001069f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106a2:	74 0f                	je     c00106b3 <Device::disableLegacyAll()+0x2b>
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106aa:	e8 d9 ff ff ff       	call   c0010688 <Device::disableLegacyAll()>
c00106af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106b1:	eb e9                	jmp    c001069c <Device::disableLegacyAll()+0x14>
c00106b3:	83 c4 08             	add    esp,0x8
c00106b6:	5b                   	pop    ebx
c00106b7:	c3                   	ret    

c00106b8 <Device::loadDriversForAll()>:
c00106b8:	53                   	push   ebx
c00106b9:	83 ec 08             	sub    esp,0x8
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106c6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106c8:	85 db                	test   ebx,ebx
c00106ca:	74 12                	je     c00106de <Device::loadDriversForAll()+0x26>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106d2:	e8 e1 ff ff ff       	call   c00106b8 <Device::loadDriversForAll()>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	89 d8                	mov    eax,ebx
c00106dc:	eb e8                	jmp    c00106c6 <Device::loadDriversForAll()+0xe>
c00106de:	83 c4 08             	add    esp,0x8
c00106e1:	5b                   	pop    ebx
c00106e2:	c3                   	ret    
c00106e3:	90                   	nop

c00106e4 <Device::closeAll()>:
c00106e4:	53                   	push   ebx
c00106e5:	83 ec 08             	sub    esp,0x8
c00106e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ee:	6a 00                	push   0x0
c00106f0:	6a 00                	push   0x0
c00106f2:	6a 00                	push   0x0
c00106f4:	53                   	push   ebx
c00106f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106fe:	83 c4 10             	add    esp,0x10
c0010701:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010704:	74 0f                	je     c0010715 <Device::closeAll()+0x31>
c0010706:	83 ec 0c             	sub    esp,0xc
c0010709:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001070c:	e8 d3 ff ff ff       	call   c00106e4 <Device::closeAll()>
c0010711:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010713:	eb e9                	jmp    c00106fe <Device::closeAll()+0x1a>
c0010715:	83 c4 08             	add    esp,0x8
c0010718:	5b                   	pop    ebx
c0010719:	c3                   	ret    

c001071a <Device::powerSavingAll(PowerSavingLevel)>:
c001071a:	56                   	push   esi
c001071b:	53                   	push   ebx
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010723:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010729:	56                   	push   esi
c001072a:	53                   	push   ebx
c001072b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001072e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001073a:	74 0f                	je     c001074b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001073c:	52                   	push   edx
c001073d:	52                   	push   edx
c001073e:	56                   	push   esi
c001073f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010742:	e8 d3 ff ff ff       	call   c001071a <Device::powerSavingAll(PowerSavingLevel)>
c0010747:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010749:	eb e9                	jmp    c0010734 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001074b:	58                   	pop    eax
c001074c:	5b                   	pop    ebx
c001074d:	5e                   	pop    esi
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <Device::setName(char const*)>:
c0010750:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010758:	e9 4a ff fe ff       	jmp    c00006a7 <strcpy>
c001075d:	90                   	nop

c001075e <Device::Device(char const*)>:
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	ba 78 17 02 c0       	mov    edx,0xc0021778
c0010766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076a:	89 10                	mov    DWORD PTR [eax],edx
c001076c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010770:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001077a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107a4:	83 ec 08             	sub    esp,0x8
c00107a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107af:	e8 9c ff ff ff       	call   c0010750 <Device::setName(char const*)>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	83 ec 0c             	sub    esp,0xc
c00107ba:	6a 08                	push   0x8
c00107bc:	e8 63 e8 ff ff       	call   c000f024 <operator new(unsigned long)>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107df:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010800:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010832:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001084a:	90                   	nop
c001084b:	83 c4 0c             	add    esp,0xc
c001084e:	c3                   	ret    
c001084f:	90                   	nop

c0010850 <Device::getName()>:
c0010850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010854:	05 d0 00 00 00       	add    eax,0xd0
c0010859:	c3                   	ret    

c001085a <DriverlessDevice::DriverlessDevice(char const*)>:
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010868:	50                   	push   eax
c0010869:	e8 f0 fe ff ff       	call   c001075e <Device::Device(char const*)>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c0010876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087a:	89 10                	mov    DWORD PTR [eax],edx
c001087c:	90                   	nop
c001087d:	83 c4 0c             	add    esp,0xc
c0010880:	c3                   	ret    
c0010881:	90                   	nop

c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010882:	57                   	push   edi
c0010883:	56                   	push   esi
c0010884:	53                   	push   ebx
c0010885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010889:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001088d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010891:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010897:	75 0c                	jne    c00108a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010899:	52                   	push   edx
c001089a:	52                   	push   edx
c001089b:	53                   	push   ebx
c001089c:	56                   	push   esi
c001089d:	e8 92 ec 00 00       	call   c001f534 <LinkedList<Device>::addElement(Device*)>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00108ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00108ae:	74 12                	je     c00108c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00108b0:	50                   	push   eax
c00108b1:	57                   	push   edi
c00108b2:	56                   	push   esi
c00108b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00108b6:	e8 c7 ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	eb e9                	jmp    c00108ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108c2:	5b                   	pop    ebx
c00108c3:	5e                   	pop    esi
c00108c4:	5f                   	pop    edi
c00108c5:	c3                   	ret    

c00108c6 <getDevicesOfType(DeviceType)>:
c00108c6:	53                   	push   ebx
c00108c7:	83 ec 14             	sub    esp,0x14
c00108ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108ce:	53                   	push   ebx
c00108cf:	e8 3c ed 00 00       	call   c001f610 <LinkedList<Device>::LinkedList()>
c00108d4:	83 c4 0c             	add    esp,0xc
c00108d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108db:	53                   	push   ebx
c00108dc:	ff 35 88 42 02 c0    	push   DWORD PTR ds:0xc0024288
c00108e2:	e8 9b ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108e7:	83 c4 18             	add    esp,0x18
c00108ea:	89 d8                	mov    eax,ebx
c00108ec:	5b                   	pop    ebx
c00108ed:	c2 04 00             	ret    0x4

c00108f0 <HardDiskController::HardDiskController(char const*)>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	83 ec 08             	sub    esp,0x8
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	50                   	push   eax
c00108ff:	e8 5a fe ff ff       	call   c001075e <Device::Device(char const*)>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	89 10                	mov    DWORD PTR [eax],edx
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010920:	90                   	nop
c0010921:	83 c4 0c             	add    esp,0xc
c0010924:	c3                   	ret    
c0010925:	90                   	nop

c0010926 <HardDiskController::~HardDiskController()>:
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	89 10                	mov    DWORD PTR [eax],edx
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	50                   	push   eax
c001093c:	e8 d3 fa ff ff       	call   c0010414 <Device::~Device()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	90                   	nop
c0010945:	83 c4 0c             	add    esp,0xc
c0010948:	c3                   	ret    
c0010949:	90                   	nop

c001094a <HardDiskController::~HardDiskController()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	83 ec 0c             	sub    esp,0xc
c0010950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010954:	e8 cd ff ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	83 ec 08             	sub    esp,0x8
c001095f:	68 58 01 00 00       	push   0x158
c0010964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010968:	e8 c6 e6 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	83 c4 0c             	add    esp,0xc
c0010973:	c3                   	ret    

c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010982:	50                   	push   eax
c0010983:	e8 d6 fd ff ff       	call   c001075e <Device::Device(char const*)>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	ba fc 17 02 c0       	mov    edx,0xc00217fc
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	89 10                	mov    DWORD PTR [eax],edx
c0010996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00109a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109d6:	90                   	nop
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <PhysicalDisk::startCache()>:
c00109dc:	56                   	push   esi
c00109dd:	53                   	push   ebx
c00109de:	83 ec 10             	sub    esp,0x10
c00109e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109e5:	6a 30                	push   0x30
c00109e7:	e8 38 e6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00109ec:	89 c6                	mov    esi,eax
c00109ee:	58                   	pop    eax
c00109ef:	5a                   	pop    edx
c00109f0:	53                   	push   ebx
c00109f1:	56                   	push   esi
c00109f2:	e8 01 21 00 00       	call   c0012af8 <VCache::VCache(PhysicalDisk*)>
c00109f7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109fd:	83 c4 14             	add    esp,0x14
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	c3                   	ret    
c0010a03:	90                   	nop

c0010a04 <PhysicalDisk::~PhysicalDisk()>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	ba fc 17 02 c0       	mov    edx,0xc00217fc
c0010a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a10:	89 10                	mov    DWORD PTR [eax],edx
c0010a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	50                   	push   eax
c0010a1a:	e8 f5 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	90                   	nop
c0010a23:	83 c4 0c             	add    esp,0xc
c0010a26:	c3                   	ret    
c0010a27:	90                   	nop

c0010a28 <PhysicalDisk::~PhysicalDisk()>:
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a32:	e8 cd ff ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	83 ec 08             	sub    esp,0x8
c0010a3d:	68 6c 01 00 00       	push   0x16c
c0010a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a46:	e8 e8 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	83 c4 0c             	add    esp,0xc
c0010a51:	c3                   	ret    

c0010a52 <FPU::FPU(char const*)>:
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a59:	83 ec 08             	sub    esp,0x8
c0010a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a60:	50                   	push   eax
c0010a61:	e8 f8 fc ff ff       	call   c001075e <Device::Device(char const*)>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c0010a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a72:	89 10                	mov    DWORD PTR [eax],edx
c0010a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a78:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a82:	90                   	nop
c0010a83:	83 c4 0c             	add    esp,0xc
c0010a86:	c3                   	ret    
c0010a87:	90                   	nop

c0010a88 <FPU::~FPU()>:
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	ba 3c 18 02 c0       	mov    edx,0xc002183c
c0010a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a94:	89 10                	mov    DWORD PTR [eax],edx
c0010a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	50                   	push   eax
c0010a9e:	e8 71 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	90                   	nop
c0010aa7:	83 c4 0c             	add    esp,0xc
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <FPU::~FPU()>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab6:	e8 cd ff ff ff       	call   c0010a88 <FPU::~FPU()>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	83 ec 08             	sub    esp,0x8
c0010ac1:	68 58 01 00 00       	push   0x158
c0010ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aca:	e8 64 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	83 c4 0c             	add    esp,0xc
c0010ad5:	c3                   	ret    

c0010ad6 <setupFPU()>:
c0010ad6:	53                   	push   ebx
c0010ad7:	83 ec 08             	sub    esp,0x8
c0010ada:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0010adf:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ae6:	74 19                	je     c0010b01 <setupFPU()+0x2b>
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	68 58 01 00 00       	push   0x158
c0010af0:	e8 2f e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010af5:	89 c3                	mov    ebx,eax
c0010af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afa:	e8 5d d1 00 00       	call   c001dc5c <AVX::AVX()>
c0010aff:	eb 5b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010b07:	84 c0                	test   al,al
c0010b09:	79 19                	jns    c0010b24 <setupFPU()+0x4e>
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	68 58 01 00 00       	push   0x158
c0010b13:	e8 0c e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b18:	89 c3                	mov    ebx,eax
c0010b1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1d:	e8 60 d2 00 00       	call   c001dd82 <SSE::SSE()>
c0010b22:	eb 38                	jmp    c0010b5c <setupFPU()+0x86>
c0010b24:	a8 20                	test   al,0x20
c0010b26:	74 19                	je     c0010b41 <setupFPU()+0x6b>
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	68 58 01 00 00       	push   0x158
c0010b30:	e8 ef e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b35:	89 c3                	mov    ebx,eax
c0010b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3a:	e8 ad d1 00 00       	call   c001dcec <MMX::MMX()>
c0010b3f:	eb 1b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b41:	a8 10                	test   al,0x10
c0010b43:	74 1c                	je     c0010b61 <setupFPU()+0x8b>
c0010b45:	83 ec 0c             	sub    esp,0xc
c0010b48:	68 58 01 00 00       	push   0x158
c0010b4d:	e8 d2 e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b52:	89 c3                	mov    ebx,eax
c0010b54:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b57:	e8 b4 d2 00 00       	call   c001de10 <x87::x87()>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	eb 2c                	jmp    c0010b8d <setupFPU()+0xb7>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	31 db                	xor    ebx,ebx
c0010b66:	68 28 18 02 c0       	push   0xc0021828
c0010b6b:	e8 e9 e5 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010b70:	e8 6d 38 00 00       	call   c00143e2 <thisCPU()>
c0010b75:	e8 68 38 00 00       	call   c00143e2 <thisCPU()>
c0010b7a:	e8 e9 ea 00 00       	call   c001f668 <CPU::readCR0()>
c0010b7f:	83 c8 04             	or     eax,0x4
c0010b82:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b85:	e8 f0 ea 00 00       	call   c001f67a <CPU::writeCR0(unsigned long)>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	83 c4 08             	add    esp,0x8
c0010b90:	89 d8                	mov    eax,ebx
c0010b92:	5b                   	pop    ebx
c0010b93:	c3                   	ret    

c0010b94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9c:	c1 e0 04             	shl    eax,0x4
c0010b9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ba3:	01 d0                	add    eax,edx
c0010ba5:	8d 50 10             	lea    edx,[eax+0x10]
c0010ba8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010bae:	74 08                	je     c0010bb8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x24>
c0010bb0:	83 c0 04             	add    eax,0x4
c0010bb3:	39 d0                	cmp    eax,edx
c0010bb5:	75 f1                	jne    c0010ba8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x14>
c0010bb7:	c3                   	ret    
c0010bb8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bc2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bcc:	eb e2                	jmp    c0010bb0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1c>

c0010bce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bce:	57                   	push   edi
c0010bcf:	31 c0                	xor    eax,eax
c0010bd1:	56                   	push   esi
c0010bd2:	53                   	push   ebx
c0010bd3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bdb:	89 da                	mov    edx,ebx
c0010bdd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010be1:	c1 e2 04             	shl    edx,0x4
c0010be4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010be8:	01 ca                	add    edx,ecx
c0010bea:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bf2:	74 16                	je     c0010c0a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bf4:	40                   	inc    eax
c0010bf5:	83 f8 04             	cmp    eax,0x4
c0010bf8:	75 f0                	jne    c0010bea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bfa:	c7 44 24 10 6c 18 02 c0 	mov    DWORD PTR [esp+0x10],0xc002186c
c0010c02:	5b                   	pop    ebx
c0010c03:	5e                   	pop    esi
c0010c04:	5f                   	pop    edi
c0010c05:	e9 44 49 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c0010c0a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010c0d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010c10:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010c16:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c1c:	5b                   	pop    ebx
c0010c1d:	5e                   	pop    esi
c0010c1e:	5f                   	pop    edi
c0010c1f:	c3                   	ret    

c0010c20 <doubleFault(regs*, void*)>:
c0010c20:	c7 44 24 04 9c 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc002199c
c0010c28:	e9 21 49 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c0010c2d:	90                   	nop

c0010c2e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c2e:	56                   	push   esi
c0010c2f:	53                   	push   ebx
c0010c30:	50                   	push   eax
c0010c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c39:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c3e:	75 33                	jne    c0010c73 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x45>
c0010c40:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c43:	31 d2                	xor    edx,edx
c0010c45:	89 c1                	mov    ecx,eax
c0010c47:	c1 e1 04             	shl    ecx,0x4
c0010c4a:	01 f1                	add    ecx,esi
c0010c4c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c54:	74 3f                	je     c0010c95 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0010c56:	42                   	inc    edx
c0010c57:	83 fa 04             	cmp    edx,0x4
c0010c5a:	75 f0                	jne    c0010c4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	68 e0 18 02 c0       	push   0xc00218e0
c0010c64:	e8 e5 48 00 00       	call   c001554e <Krnl::panic(char const*)>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	83 c8 ff             	or     eax,0xffffffff
c0010c6f:	5a                   	pop    edx
c0010c70:	5b                   	pop    ebx
c0010c71:	5e                   	pop    esi
c0010c72:	c3                   	ret    
c0010c73:	83 ec 0c             	sub    esp,0xc
c0010c76:	56                   	push   esi
c0010c77:	e8 d4 fb ff ff       	call   c0010850 <Device::getName()>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c82:	75 bc                	jne    c0010c40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c84:	83 fb 0f             	cmp    ebx,0xf
c0010c87:	7f 2c                	jg     c0010cb5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x87>
c0010c89:	31 c0                	xor    eax,eax
c0010c8b:	8a 83 e0 39 02 c0    	mov    al,BYTE PTR [ebx-0x3ffdc620]
c0010c91:	89 c3                	mov    ebx,eax
c0010c93:	eb ab                	jmp    c0010c40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c95:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c9c:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010ca5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ca9:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010caf:	89 d8                	mov    eax,ebx
c0010cb1:	5a                   	pop    edx
c0010cb2:	5b                   	pop    ebx
c0010cb3:	5e                   	pop    esi
c0010cb4:	c3                   	ret    
c0010cb5:	83 ec 0c             	sub    esp,0xc
c0010cb8:	68 a8 18 02 c0       	push   0xc00218a8
c0010cbd:	e8 8c 48 00 00       	call   c001554e <Krnl::panic(char const*)>
c0010cc2:	83 c4 10             	add    esp,0x10
c0010cc5:	e9 76 ff ff ff       	jmp    c0010c40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>

c0010cca <InterruptController::clearAllHandlers(int, bool)>:
c0010cca:	56                   	push   esi
c0010ccb:	53                   	push   ebx
c0010ccc:	52                   	push   edx
c0010ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cd5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010cda:	75 61                	jne    c0010d3d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010cdc:	8d 46 20             	lea    eax,[esi+0x20]
c0010cdf:	c1 e0 04             	shl    eax,0x4
c0010ce2:	c1 e6 04             	shl    esi,0x4
c0010ce5:	01 d8                	add    eax,ebx
c0010ce7:	01 de                	add    esi,ebx
c0010ce9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cf3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cfd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010d07:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d11:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d1b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d25:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d2f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d39:	58                   	pop    eax
c0010d3a:	5b                   	pop    ebx
c0010d3b:	5e                   	pop    esi
c0010d3c:	c3                   	ret    
c0010d3d:	83 ec 0c             	sub    esp,0xc
c0010d40:	53                   	push   ebx
c0010d41:	e8 0a fb ff ff       	call   c0010850 <Device::getName()>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d4c:	75 8e                	jne    c0010cdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d4e:	83 fe 0f             	cmp    esi,0xf
c0010d51:	7f 12                	jg     c0010d65 <InterruptController::clearAllHandlers(int, bool)+0x9b>
c0010d53:	8a 86 e0 39 02 c0    	mov    al,BYTE PTR [esi-0x3ffdc620]
c0010d59:	25 ff 00 00 00       	and    eax,0xff
c0010d5e:	89 c6                	mov    esi,eax
c0010d60:	e9 77 ff ff ff       	jmp    c0010cdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d65:	83 ec 0c             	sub    esp,0xc
c0010d68:	68 1c 19 02 c0       	push   0xc002191c
c0010d6d:	e8 dc 47 00 00       	call   c001554e <Krnl::panic(char const*)>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	e9 62 ff ff ff       	jmp    c0010cdc <InterruptController::clearAllHandlers(int, bool)+0x12>

c0010d7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	52                   	push   edx
c0010d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d85:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d8a:	75 3a                	jne    c0010dc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d90:	8d 50 20             	lea    edx,[eax+0x20]
c0010d93:	c1 e2 04             	shl    edx,0x4
c0010d96:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d99:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d9d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010da3:	74 0b                	je     c0010db0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010da5:	83 c0 04             	add    eax,0x4
c0010da8:	39 d0                	cmp    eax,edx
c0010daa:	75 f1                	jne    c0010d9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010dac:	58                   	pop    eax
c0010dad:	5b                   	pop    ebx
c0010dae:	5e                   	pop    esi
c0010daf:	c3                   	ret    
c0010db0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010dba:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010dc4:	eb df                	jmp    c0010da5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010dc6:	83 ec 0c             	sub    esp,0xc
c0010dc9:	56                   	push   esi
c0010dca:	e8 81 fa ff ff       	call   c0010850 <Device::getName()>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dd5:	75 b5                	jne    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dd7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010ddc:	7f 12                	jg     c0010df0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x76>
c0010dde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010de2:	31 c0                	xor    eax,eax
c0010de4:	8a 81 e0 39 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdc620]
c0010dea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010dee:	eb 9c                	jmp    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	68 1c 19 02 c0       	push   0xc002191c
c0010df8:	e8 51 47 00 00       	call   c001554e <Krnl::panic(char const*)>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	eb 8a                	jmp    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010e02 <nmiHandler(regs*, void*)>:
c0010e02:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0010e07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e0b:	e9 5c a8 ff ff       	jmp    c000b66c <Computer::handleNMI()>

c0010e10 <int_handler>:
c0010e10:	55                   	push   ebp
c0010e11:	57                   	push   edi
c0010e12:	56                   	push   esi
c0010e13:	53                   	push   ebx
c0010e14:	83 ec 0c             	sub    esp,0xc
c0010e17:	80 3d d4 4c 02 c0 00 	cmp    BYTE PTR ds:0xc0024cd4,0x0
c0010e1e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e22:	74 0b                	je     c0010e2f <int_handler+0x1f>
c0010e24:	fa                   	cli    
c0010e25:	f4                   	hlt    
c0010e26:	80 3d d4 4c 02 c0 00 	cmp    BYTE PTR ds:0xc0024cd4,0x0
c0010e2d:	75 f5                	jne    c0010e24 <int_handler+0x14>
c0010e2f:	e8 ae 35 00 00       	call   c00143e2 <thisCPU()>
c0010e34:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e37:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e3d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e40:	83 f8 17             	cmp    eax,0x17
c0010e43:	77 14                	ja     c0010e59 <int_handler+0x49>
c0010e45:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e48:	55                   	push   ebp
c0010e49:	55                   	push   ebp
c0010e4a:	25 ff 00 00 00       	and    eax,0xff
c0010e4f:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e51:	50                   	push   eax
c0010e52:	57                   	push   edi
c0010e53:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	83 c3 15             	add    ebx,0x15
c0010e5c:	c1 e3 04             	shl    ebx,0x4
c0010e5f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e63:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e6a:	31 db                	xor    ebx,ebx
c0010e6c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e70:	85 c0                	test   eax,eax
c0010e72:	74 12                	je     c0010e86 <int_handler+0x76>
c0010e74:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e77:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e7b:	74 1b                	je     c0010e98 <int_handler+0x88>
c0010e7d:	51                   	push   ecx
c0010e7e:	51                   	push   ecx
c0010e7f:	52                   	push   edx
c0010e80:	56                   	push   esi
c0010e81:	ff d0                	call   eax
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	43                   	inc    ebx
c0010e87:	83 fb 04             	cmp    ebx,0x4
c0010e8a:	75 e0                	jne    c0010e6c <int_handler+0x5c>
c0010e8c:	83 c4 0c             	add    esp,0xc
c0010e8f:	31 c0                	xor    eax,eax
c0010e91:	31 d2                	xor    edx,edx
c0010e93:	5b                   	pop    ebx
c0010e94:	5e                   	pop    esi
c0010e95:	5f                   	pop    edi
c0010e96:	5d                   	pop    ebp
c0010e97:	c3                   	ret    
c0010e98:	53                   	push   ebx
c0010e99:	53                   	push   ebx
c0010e9a:	52                   	push   edx
c0010e9b:	56                   	push   esi
c0010e9c:	ff d0                	call   eax
c0010e9e:	83 c4 10             	add    esp,0x10
c0010ea1:	83 c4 0c             	add    esp,0xc
c0010ea4:	5b                   	pop    ebx
c0010ea5:	5e                   	pop    esi
c0010ea6:	5f                   	pop    edi
c0010ea7:	5d                   	pop    ebp
c0010ea8:	c3                   	ret    
c0010ea9:	90                   	nop

c0010eaa <InterruptController::InterruptController(char const*)>:
c0010eaa:	83 ec 1c             	sub    esp,0x1c
c0010ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb1:	83 ec 08             	sub    esp,0x8
c0010eb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010eb8:	50                   	push   eax
c0010eb9:	e8 a0 f8 ff ff       	call   c001075e <Device::Device(char const*)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	ba 4c 1b 02 c0       	mov    edx,0xc0021b4c
c0010ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eca:	89 10                	mov    DWORD PTR [eax],edx
c0010ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010eda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ee2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010eea:	7f 5e                	jg     c0010f4a <InterruptController::InterruptController(char const*)+0xa0>
c0010eec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ef4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ef9:	7f 49                	jg     c0010f44 <InterruptController::InterruptController(char const*)+0x9a>
c0010efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f03:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f0e:	01 ca                	add    edx,ecx
c0010f10:	83 c2 54             	add    edx,0x54
c0010f13:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f23:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f2e:	01 ca                	add    edx,ecx
c0010f30:	81 c2 54 04 00 00    	add    edx,0x454
c0010f36:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f3e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f42:	eb b0                	jmp    c0010ef4 <InterruptController::InterruptController(char const*)+0x4a>
c0010f44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f48:	eb 98                	jmp    c0010ee2 <InterruptController::InterruptController(char const*)+0x38>
c0010f4a:	90                   	nop
c0010f4b:	83 c4 1c             	add    esp,0x1c
c0010f4e:	c3                   	ret    
c0010f4f:	90                   	nop

c0010f50 <InterruptController::~InterruptController()>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	ba 4c 1b 02 c0       	mov    edx,0xc0021b4c
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	89 10                	mov    DWORD PTR [eax],edx
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	50                   	push   eax
c0010f66:	e8 a9 f4 ff ff       	call   c0010414 <Device::~Device()>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	90                   	nop
c0010f6f:	83 c4 0c             	add    esp,0xc
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <InterruptController::~InterruptController()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7e:	e8 cd ff ff ff       	call   c0010f50 <InterruptController::~InterruptController()>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	83 ec 08             	sub    esp,0x8
c0010f89:	68 58 21 00 00       	push   0x2158
c0010f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f92:	e8 9c e0 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	83 c4 0c             	add    esp,0xc
c0010f9d:	c3                   	ret    

c0010f9e <displayDebugInfo(regs*)>:
c0010f9e:	55                   	push   ebp
c0010f9f:	57                   	push   edi
c0010fa0:	56                   	push   esi
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 24             	sub    esp,0x24
c0010fa5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010fa9:	0f 20 c2             	mov    edx,cr0
c0010fac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010fb0:	0f 20 d7             	mov    edi,cr2
c0010fb3:	0f 20 de             	mov    esi,cr3
c0010fb6:	0f 20 e5             	mov    ebp,cr4
c0010fb9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fbc:	50                   	push   eax
c0010fbd:	68 a9 19 02 c0       	push   0xc00219a9
c0010fc2:	e8 92 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fc7:	5a                   	pop    edx
c0010fc8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fcb:	59                   	pop    ecx
c0010fcc:	50                   	push   eax
c0010fcd:	68 b4 19 02 c0       	push   0xc00219b4
c0010fd2:	e8 82 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fd7:	58                   	pop    eax
c0010fd8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010fdb:	5a                   	pop    edx
c0010fdc:	51                   	push   ecx
c0010fdd:	68 bf 19 02 c0       	push   0xc00219bf
c0010fe2:	e8 72 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fe7:	58                   	pop    eax
c0010fe8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010feb:	5a                   	pop    edx
c0010fec:	51                   	push   ecx
c0010fed:	68 ca 19 02 c0       	push   0xc00219ca
c0010ff2:	e8 62 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010ff7:	58                   	pop    eax
c0010ff8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010ffb:	5a                   	pop    edx
c0010ffc:	51                   	push   ecx
c0010ffd:	68 d5 19 02 c0       	push   0xc00219d5
c0011002:	e8 52 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011007:	58                   	pop    eax
c0011008:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001100b:	5a                   	pop    edx
c001100c:	51                   	push   ecx
c001100d:	68 e0 19 02 c0       	push   0xc00219e0
c0011012:	e8 42 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011017:	58                   	pop    eax
c0011018:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c001101b:	5a                   	pop    edx
c001101c:	51                   	push   ecx
c001101d:	68 fa 19 02 c0       	push   0xc00219fa
c0011022:	e8 32 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011027:	58                   	pop    eax
c0011028:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c001102b:	5a                   	pop    edx
c001102c:	51                   	push   ecx
c001102d:	68 eb 19 02 c0       	push   0xc00219eb
c0011032:	e8 22 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011037:	58                   	pop    eax
c0011038:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001103b:	5a                   	pop    edx
c001103c:	51                   	push   ecx
c001103d:	68 f6 19 02 c0       	push   0xc00219f6
c0011042:	e8 12 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011047:	58                   	pop    eax
c0011048:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001104b:	5a                   	pop    edx
c001104c:	51                   	push   ecx
c001104d:	68 05 1a 02 c0       	push   0xc0021a05
c0011052:	e8 02 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011057:	58                   	pop    eax
c0011058:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001105b:	5a                   	pop    edx
c001105c:	51                   	push   ecx
c001105d:	68 10 1a 02 c0       	push   0xc0021a10
c0011062:	e8 f2 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011067:	58                   	pop    eax
c0011068:	5a                   	pop    edx
c0011069:	57                   	push   edi
c001106a:	68 1b 1a 02 c0       	push   0xc0021a1b
c001106f:	e8 e5 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011074:	59                   	pop    ecx
c0011075:	58                   	pop    eax
c0011076:	56                   	push   esi
c0011077:	68 26 1a 02 c0       	push   0xc0021a26
c001107c:	e8 d8 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011081:	58                   	pop    eax
c0011082:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011087:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001108d:	50                   	push   eax
c001108e:	e8 f6 c1 ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c0011093:	58                   	pop    eax
c0011094:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011097:	c1 e0 05             	shl    eax,0x5
c001109a:	5a                   	pop    edx
c001109b:	05 40 37 02 c0       	add    eax,0xc0023740
c00110a0:	50                   	push   eax
c00110a1:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00110a6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110ac:	51                   	push   ecx
c00110ad:	e8 f8 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00110b2:	58                   	pop    eax
c00110b3:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00110b8:	5a                   	pop    edx
c00110b9:	68 31 1a 02 c0       	push   0xc0021a31
c00110be:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110c4:	51                   	push   ecx
c00110c5:	e8 e0 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00110ca:	58                   	pop    eax
c00110cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d0:	5a                   	pop    edx
c00110d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110d4:	83 c0 0c             	add    eax,0xc
c00110d7:	50                   	push   eax
c00110d8:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00110dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110e3:	51                   	push   ecx
c00110e4:	e8 c1 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00110e9:	58                   	pop    eax
c00110ea:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00110ef:	5a                   	pop    edx
c00110f0:	68 3a 1a 02 c0       	push   0xc0021a3a
c00110f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110fb:	51                   	push   ecx
c00110fc:	e8 a9 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011101:	58                   	pop    eax
c0011102:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0011105:	5a                   	pop    edx
c0011106:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001110b:	51                   	push   ecx
c001110c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011112:	50                   	push   eax
c0011113:	e8 b8 c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011118:	58                   	pop    eax
c0011119:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001111e:	5a                   	pop    edx
c001111f:	68 42 1a 02 c0       	push   0xc0021a42
c0011124:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001112a:	51                   	push   ecx
c001112b:	e8 7a c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011130:	58                   	pop    eax
c0011131:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0011134:	5a                   	pop    edx
c0011135:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001113a:	51                   	push   ecx
c001113b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011141:	50                   	push   eax
c0011142:	e8 89 c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011147:	58                   	pop    eax
c0011148:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001114d:	5a                   	pop    edx
c001114e:	68 4a 1a 02 c0       	push   0xc0021a4a
c0011153:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011159:	51                   	push   ecx
c001115a:	e8 4b c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001115f:	58                   	pop    eax
c0011160:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0011163:	5a                   	pop    edx
c0011164:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011169:	51                   	push   ecx
c001116a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011170:	50                   	push   eax
c0011171:	e8 5a c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011176:	58                   	pop    eax
c0011177:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001117c:	5a                   	pop    edx
c001117d:	68 52 1a 02 c0       	push   0xc0021a52
c0011182:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011188:	51                   	push   ecx
c0011189:	e8 1c c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001118e:	58                   	pop    eax
c001118f:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0011192:	5a                   	pop    edx
c0011193:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011198:	51                   	push   ecx
c0011199:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001119f:	50                   	push   eax
c00111a0:	e8 2b c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00111a5:	58                   	pop    eax
c00111a6:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00111ab:	5a                   	pop    edx
c00111ac:	68 5a 1a 02 c0       	push   0xc0021a5a
c00111b1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00111b7:	51                   	push   ecx
c00111b8:	e8 ed c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00111bd:	58                   	pop    eax
c00111be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00111c1:	5a                   	pop    edx
c00111c2:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00111c7:	51                   	push   ecx
c00111c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111ce:	50                   	push   eax
c00111cf:	e8 fc c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00111d4:	58                   	pop    eax
c00111d5:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00111da:	5a                   	pop    edx
c00111db:	68 62 1a 02 c0       	push   0xc0021a62
c00111e0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00111e6:	51                   	push   ecx
c00111e7:	e8 be c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00111ec:	58                   	pop    eax
c00111ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00111f0:	5a                   	pop    edx
c00111f1:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00111f6:	51                   	push   ecx
c00111f7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111fd:	53                   	push   ebx
c00111fe:	e8 cd c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011203:	58                   	pop    eax
c0011204:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011209:	5a                   	pop    edx
c001120a:	68 6a 1a 02 c0       	push   0xc0021a6a
c001120f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011215:	51                   	push   ecx
c0011216:	e8 8f c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001121b:	5b                   	pop    ebx
c001121c:	58                   	pop    eax
c001121d:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011222:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011226:	52                   	push   edx
c0011227:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001122d:	50                   	push   eax
c001122e:	e8 9d c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011233:	58                   	pop    eax
c0011234:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011239:	5a                   	pop    edx
c001123a:	68 73 1a 02 c0       	push   0xc0021a73
c001123f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011245:	51                   	push   ecx
c0011246:	e8 5f c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001124b:	5b                   	pop    ebx
c001124c:	58                   	pop    eax
c001124d:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011252:	57                   	push   edi
c0011253:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011259:	50                   	push   eax
c001125a:	e8 71 c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001125f:	58                   	pop    eax
c0011260:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011265:	5a                   	pop    edx
c0011266:	68 7b 1a 02 c0       	push   0xc0021a7b
c001126b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011271:	51                   	push   ecx
c0011272:	e8 33 c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011277:	5b                   	pop    ebx
c0011278:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001127d:	5f                   	pop    edi
c001127e:	56                   	push   esi
c001127f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011285:	50                   	push   eax
c0011286:	e8 45 c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001128b:	58                   	pop    eax
c001128c:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011291:	5a                   	pop    edx
c0011292:	68 83 1a 02 c0       	push   0xc0021a83
c0011297:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001129d:	51                   	push   ecx
c001129e:	e8 07 c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00112a3:	5b                   	pop    ebx
c00112a4:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00112a9:	5e                   	pop    esi
c00112aa:	55                   	push   ebp
c00112ab:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00112b1:	57                   	push   edi
c00112b2:	e8 19 c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00112b7:	5d                   	pop    ebp
c00112b8:	58                   	pop    eax
c00112b9:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00112be:	68 8b 1a 02 c0       	push   0xc0021a8b
c00112c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112c9:	50                   	push   eax
c00112ca:	e8 db c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00112cf:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00112d4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112da:	e8 a4 e3 00 00       	call   c001f683 <CPU::readDR0()>
c00112df:	5a                   	pop    edx
c00112e0:	59                   	pop    ecx
c00112e1:	50                   	push   eax
c00112e2:	53                   	push   ebx
c00112e3:	e8 e8 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00112e8:	5b                   	pop    ebx
c00112e9:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00112ee:	5e                   	pop    esi
c00112ef:	68 94 1a 02 c0       	push   0xc0021a94
c00112f4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00112fa:	57                   	push   edi
c00112fb:	e8 aa c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011300:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011305:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001130b:	e8 85 e3 00 00       	call   c001f695 <CPU::readDR1()>
c0011310:	5d                   	pop    ebp
c0011311:	5a                   	pop    edx
c0011312:	50                   	push   eax
c0011313:	53                   	push   ebx
c0011314:	e8 b7 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011319:	59                   	pop    ecx
c001131a:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001131f:	5b                   	pop    ebx
c0011320:	68 9c 1a 02 c0       	push   0xc0021a9c
c0011325:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001132b:	56                   	push   esi
c001132c:	e8 79 c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011331:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011336:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001133c:	e8 66 e3 00 00       	call   c001f6a7 <CPU::readDR2()>
c0011341:	5f                   	pop    edi
c0011342:	5d                   	pop    ebp
c0011343:	50                   	push   eax
c0011344:	53                   	push   ebx
c0011345:	e8 86 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001134a:	58                   	pop    eax
c001134b:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011350:	5a                   	pop    edx
c0011351:	68 a4 1a 02 c0       	push   0xc0021aa4
c0011356:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001135c:	51                   	push   ecx
c001135d:	e8 48 c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011362:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011367:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001136d:	e8 47 e3 00 00       	call   c001f6b9 <CPU::readDR3()>
c0011372:	5e                   	pop    esi
c0011373:	5f                   	pop    edi
c0011374:	50                   	push   eax
c0011375:	53                   	push   ebx
c0011376:	e8 55 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001137b:	5d                   	pop    ebp
c001137c:	58                   	pop    eax
c001137d:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011382:	68 ac 1a 02 c0       	push   0xc0021aac
c0011387:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001138d:	50                   	push   eax
c001138e:	e8 17 c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011393:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011398:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001139e:	e8 28 e3 00 00       	call   c001f6cb <CPU::readDR6()>
c00113a3:	5a                   	pop    edx
c00113a4:	59                   	pop    ecx
c00113a5:	50                   	push   eax
c00113a6:	53                   	push   ebx
c00113a7:	e8 24 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00113ac:	5b                   	pop    ebx
c00113ad:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00113b2:	5e                   	pop    esi
c00113b3:	68 b4 1a 02 c0       	push   0xc0021ab4
c00113b8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00113be:	57                   	push   edi
c00113bf:	e8 e6 c2 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00113c4:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00113c9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113cf:	e8 09 e3 00 00       	call   c001f6dd <CPU::readDR7()>
c00113d4:	5d                   	pop    ebp
c00113d5:	5a                   	pop    edx
c00113d6:	50                   	push   eax
c00113d7:	53                   	push   ebx
c00113d8:	e8 f3 c2 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00113dd:	fa                   	cli    
c00113de:	f4                   	hlt    
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	eb fe                	jmp    c00113e2 <displayDebugInfo(regs*)+0x444>

c00113e4 <x87EmulHandler(regs*, void*)>:
c00113e4:	53                   	push   ebx
c00113e5:	83 ec 08             	sub    esp,0x8
c00113e8:	a1 14 44 02 c0       	mov    eax,ds:0xc0024414
c00113ed:	85 c0                	test   eax,eax
c00113ef:	74 16                	je     c0011407 <x87EmulHandler(regs*, void*)+0x23>
c00113f1:	83 ec 0c             	sub    esp,0xc
c00113f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113f8:	53                   	push   ebx
c00113f9:	ff d0                	call   eax
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	84 c0                	test   al,al
c0011400:	74 2e                	je     c0011430 <x87EmulHandler(regs*, void*)+0x4c>
c0011402:	83 c4 08             	add    esp,0x8
c0011405:	5b                   	pop    ebx
c0011406:	c3                   	ret    
c0011407:	50                   	push   eax
c0011408:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c001140e:	50                   	push   eax
c001140f:	6a 01                	push   0x1
c0011411:	68 bc 1a 02 c0       	push   0xc0021abc
c0011416:	e8 56 6b 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c001141b:	5a                   	pop    edx
c001141c:	59                   	pop    ecx
c001141d:	53                   	push   ebx
c001141e:	50                   	push   eax
c001141f:	e8 13 6d 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0011424:	a1 14 44 02 c0       	mov    eax,ds:0xc0024414
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	85 c0                	test   eax,eax
c001142e:	75 c1                	jne    c00113f1 <x87EmulHandler(regs*, void*)+0xd>
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	68 d9 1a 02 c0       	push   0xc0021ad9
c0011438:	e8 1c dd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001143d:	59                   	pop    ecx
c001143e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011442:	e8 57 fb ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011447 <gpFault(regs*, void*)>:
c0011447:	53                   	push   ebx
c0011448:	83 ec 14             	sub    esp,0x14
c001144b:	c7 05 10 44 02 c0 e9 93 01 c0 	mov    DWORD PTR ds:0xc0024410,0xc00193e9
c0011455:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011459:	53                   	push   ebx
c001145a:	e8 8a 7f 00 00       	call   c00193e9 <Vm::faultHandler(regs*)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	84 c0                	test   al,al
c0011464:	74 05                	je     c001146b <gpFault(regs*, void*)+0x24>
c0011466:	83 c4 08             	add    esp,0x8
c0011469:	5b                   	pop    ebx
c001146a:	c3                   	ret    
c001146b:	83 ec 0c             	sub    esp,0xc
c001146e:	68 d9 1a 02 c0       	push   0xc0021ad9
c0011473:	e8 e1 dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011478:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001147b:	e8 1e fb ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011480 <pgFault(regs*, void*)>:
c0011480:	83 ec 18             	sub    esp,0x18
c0011483:	68 f4 1a 02 c0       	push   0xc0021af4
c0011488:	e8 cc dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001148d:	58                   	pop    eax
c001148e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011492:	52                   	push   edx
c0011493:	e8 06 fb ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011498 <otherISRHandler(regs*, void*)>:
c0011498:	53                   	push   ebx
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00114a0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00114a3:	50                   	push   eax
c00114a4:	50                   	push   eax
c00114a5:	68 01 1b 02 c0       	push   0xc0021b01
c00114aa:	e8 aa dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00114af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114b2:	e8 e7 fa ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c00114b7 <opcodeFault(regs*, void*)>:
c00114b7:	55                   	push   ebp
c00114b8:	57                   	push   edi
c00114b9:	56                   	push   esi
c00114ba:	53                   	push   ebx
c00114bb:	83 ec 2c             	sub    esp,0x2c
c00114be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00114c2:	e8 1b 2f 00 00       	call   c00143e2 <thisCPU()>
c00114c7:	8a 88 94 11 00 00    	mov    cl,BYTE PTR [eax+0x1194]
c00114cd:	84 c9                	test   cl,cl
c00114cf:	0f 85 8a 01 00 00    	jne    c001165f <opcodeFault(regs*, void*)+0x1a8>
c00114d5:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00114d8:	8a 06                	mov    al,BYTE PTR [esi]
c00114da:	3c f0                	cmp    al,0xf0
c00114dc:	0f 84 a6 00 00 00    	je     c0011588 <opcodeFault(regs*, void*)+0xd1>
c00114e2:	8d 50 0e             	lea    edx,[eax+0xe]
c00114e5:	80 fa 01             	cmp    dl,0x1
c00114e8:	76 46                	jbe    c0011530 <opcodeFault(regs*, void*)+0x79>
c00114ea:	3c 66                	cmp    al,0x66
c00114ec:	0f 84 8e 01 00 00    	je     c0011680 <opcodeFault(regs*, void*)+0x1c9>
c00114f2:	3c 67                	cmp    al,0x67
c00114f4:	74 3a                	je     c0011530 <opcodeFault(regs*, void*)+0x79>
c00114f6:	88 c2                	mov    dl,al
c00114f8:	83 e2 ef             	and    edx,0xffffffef
c00114fb:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c00114ff:	80 fa 2e             	cmp    dl,0x2e
c0011502:	74 2c                	je     c0011530 <opcodeFault(regs*, void*)+0x79>
c0011504:	8d 78 9c             	lea    edi,[eax-0x64]
c0011507:	89 fa                	mov    edx,edi
c0011509:	80 fa 01             	cmp    dl,0x1
c001150c:	0f 96 44 24 0c       	setbe  BYTE PTR [esp+0xc]
c0011511:	80 7c 24 08 26       	cmp    BYTE PTR [esp+0x8],0x26
c0011516:	0f 94 c2             	sete   dl
c0011519:	0a 54 24 0c          	or     dl,BYTE PTR [esp+0xc]
c001151d:	89 d5                	mov    ebp,edx
c001151f:	0f 84 70 01 00 00    	je     c0011695 <opcodeFault(regs*, void*)+0x1de>
c0011525:	8d 56 01             	lea    edx,[esi+0x1]
c0011528:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001152b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c001152e:	eb 0e                	jmp    c001153e <opcodeFault(regs*, void*)+0x87>
c0011530:	8d 56 01             	lea    edx,[esi+0x1]
c0011533:	bd 01 00 00 00       	mov    ebp,0x1
c0011538:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001153b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c001153e:	3c 0f                	cmp    al,0xf
c0011540:	74 55                	je     c0011597 <opcodeFault(regs*, void*)+0xe0>
c0011542:	83 ec 0c             	sub    esp,0xc
c0011545:	68 31 1b 02 c0       	push   0xc0021b31
c001154a:	e8 0a dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001154f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011552:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0011555:	c1 e0 04             	shl    eax,0x4
c0011558:	31 c9                	xor    ecx,ecx
c001155a:	01 d0                	add    eax,edx
c001155c:	31 d2                	xor    edx,edx
c001155e:	8a 50 03             	mov    dl,BYTE PTR [eax+0x3]
c0011561:	89 14 24             	mov    DWORD PTR [esp],edx
c0011564:	31 d2                	xor    edx,edx
c0011566:	8a 50 02             	mov    dl,BYTE PTR [eax+0x2]
c0011569:	52                   	push   edx
c001156a:	31 d2                	xor    edx,edx
c001156c:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c001156f:	52                   	push   edx
c0011570:	8a 08                	mov    cl,BYTE PTR [eax]
c0011572:	89 c8                	mov    eax,ecx
c0011574:	50                   	push   eax
c0011575:	68 7c 19 02 c0       	push   0xc002197c
c001157a:	e8 da db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001157f:	83 c4 14             	add    esp,0x14
c0011582:	53                   	push   ebx
c0011583:	e8 16 fa ff ff       	call   c0010f9e <displayDebugInfo(regs*)>
c0011588:	8d 56 01             	lea    edx,[esi+0x1]
c001158b:	31 ed                	xor    ebp,ebp
c001158d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0011590:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0011593:	3c 0f                	cmp    al,0xf
c0011595:	75 ab                	jne    c0011542 <opcodeFault(regs*, void*)+0x8b>
c0011597:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
c001159a:	8d 50 38             	lea    edx,[eax+0x38]
c001159d:	80 fa 07             	cmp    dl,0x7
c00115a0:	0f 86 f8 00 00 00    	jbe    c001169e <opcodeFault(regs*, void*)+0x1e7>
c00115a6:	3c c7                	cmp    al,0xc7
c00115a8:	75 98                	jne    c0011542 <opcodeFault(regs*, void*)+0x8b>
c00115aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00115ad:	40                   	inc    eax
c00115ae:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00115b1:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00115b5:	50                   	push   eax
c00115b6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00115ba:	50                   	push   eax
c00115bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00115bf:	50                   	push   eax
c00115c0:	53                   	push   ebx
c00115c1:	e8 88 3d 00 00       	call   c001534e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00115c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115ca:	83 c4 10             	add    esp,0x10
c00115cd:	80 7c 24 1a 00       	cmp    BYTE PTR [esp+0x1a],0x0
c00115d2:	0f 85 6a ff ff ff    	jne    c0011542 <opcodeFault(regs*, void*)+0x8b>
c00115d8:	80 7c 24 1b 01       	cmp    BYTE PTR [esp+0x1b],0x1
c00115dd:	0f 85 5f ff ff ff    	jne    c0011542 <opcodeFault(regs*, void*)+0x8b>
c00115e3:	89 e8                	mov    eax,ebp
c00115e5:	84 c0                	test   al,al
c00115e7:	0f 85 55 ff ff ff    	jne    c0011542 <opcodeFault(regs*, void*)+0x8b>
c00115ed:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115f0:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00115f3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00115f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115fa:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
c00115fd:	e8 55 6f 00 00       	call   c0018557 <lockScheduler()>
c0011602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011606:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011608:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001160b:	31 ce                	xor    esi,ecx
c001160d:	31 d7                	xor    edi,edx
c001160f:	09 f7                	or     edi,esi
c0011611:	74 38                	je     c001164b <opcodeFault(regs*, void*)+0x194>
c0011613:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0011616:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0011619:	83 e6 bf             	and    esi,0xffffffbf
c001161c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001161f:	89 73 40             	mov    DWORD PTR [ebx+0x40],esi
c0011622:	e8 32 6f 00 00       	call   c0018559 <unlockScheduler()>
c0011627:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001162b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001162e:	83 ec 0c             	sub    esp,0xc
c0011631:	01 c1                	add    ecx,eax
c0011633:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0011636:	68 1e 1b 02 c0       	push   0xc0021b1e
c001163b:	e8 19 db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	83 c4 2c             	add    esp,0x2c
c0011646:	5b                   	pop    ebx
c0011647:	5e                   	pop    esi
c0011648:	5f                   	pop    edi
c0011649:	5d                   	pop    ebp
c001164a:	c3                   	ret    
c001164b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001164f:	89 28                	mov    DWORD PTR [eax],ebp
c0011651:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011654:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0011657:	83 cf 40             	or     edi,0x40
c001165a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c001165d:	eb c3                	jmp    c0011622 <opcodeFault(regs*, void*)+0x16b>
c001165f:	83 ec 0c             	sub    esp,0xc
c0011662:	68 58 19 02 c0       	push   0xc0021958
c0011667:	e8 ed da ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001166c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001166f:	83 c4 10             	add    esp,0x10
c0011672:	83 c0 19             	add    eax,0x19
c0011675:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0011678:	83 c4 2c             	add    esp,0x2c
c001167b:	5b                   	pop    ebx
c001167c:	5e                   	pop    esi
c001167d:	5f                   	pop    edi
c001167e:	5d                   	pop    ebp
c001167f:	c3                   	ret    
c0011680:	8d 56 01             	lea    edx,[esi+0x1]
c0011683:	b1 01                	mov    cl,0x1
c0011685:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0011688:	bd 01 00 00 00       	mov    ebp,0x1
c001168d:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0011690:	e9 a9 fe ff ff       	jmp    c001153e <opcodeFault(regs*, void*)+0x87>
c0011695:	88 d1                	mov    cl,dl
c0011697:	89 f2                	mov    edx,esi
c0011699:	e9 a0 fe ff ff       	jmp    c001153e <opcodeFault(regs*, void*)+0x87>
c001169e:	84 d2                	test   dl,dl
c00116a0:	75 2c                	jne    c00116ce <opcodeFault(regs*, void*)+0x217>
c00116a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00116a5:	89 c6                	mov    esi,eax
c00116a7:	84 c9                	test   cl,cl
c00116a9:	0f ce                	bswap  esi
c00116ab:	74 0c                	je     c00116b9 <opcodeFault(regs*, void*)+0x202>
c00116ad:	25 00 00 ff ff       	and    eax,0xffff0000
c00116b2:	0d ad de 00 00       	or     eax,0xdead
c00116b7:	89 c6                	mov    esi,eax
c00116b9:	84 d2                	test   dl,dl
c00116bb:	75 34                	jne    c00116f1 <opcodeFault(regs*, void*)+0x23a>
c00116bd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00116c0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00116c3:	83 c0 02             	add    eax,0x2
c00116c6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00116c9:	e9 75 ff ff ff       	jmp    c0011643 <opcodeFault(regs*, void*)+0x18c>
c00116ce:	80 fa 01             	cmp    dl,0x1
c00116d1:	74 41                	je     c0011714 <opcodeFault(regs*, void*)+0x25d>
c00116d3:	80 fa 02             	cmp    dl,0x2
c00116d6:	74 46                	je     c001171e <opcodeFault(regs*, void*)+0x267>
c00116d8:	80 fa 03             	cmp    dl,0x3
c00116db:	74 50                	je     c001172d <opcodeFault(regs*, void*)+0x276>
c00116dd:	80 fa 04             	cmp    dl,0x4
c00116e0:	74 58                	je     c001173a <opcodeFault(regs*, void*)+0x283>
c00116e2:	80 fa 05             	cmp    dl,0x5
c00116e5:	74 5b                	je     c0011742 <opcodeFault(regs*, void*)+0x28b>
c00116e7:	80 fa 06             	cmp    dl,0x6
c00116ea:	74 66                	je     c0011752 <opcodeFault(regs*, void*)+0x29b>
c00116ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00116ef:	eb b4                	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c00116f1:	80 fa 01             	cmp    dl,0x1
c00116f4:	74 23                	je     c0011719 <opcodeFault(regs*, void*)+0x262>
c00116f6:	80 fa 02             	cmp    dl,0x2
c00116f9:	74 28                	je     c0011723 <opcodeFault(regs*, void*)+0x26c>
c00116fb:	80 fa 03             	cmp    dl,0x3
c00116fe:	74 28                	je     c0011728 <opcodeFault(regs*, void*)+0x271>
c0011700:	80 fa 04             	cmp    dl,0x4
c0011703:	74 30                	je     c0011735 <opcodeFault(regs*, void*)+0x27e>
c0011705:	80 fa 05             	cmp    dl,0x5
c0011708:	74 40                	je     c001174a <opcodeFault(regs*, void*)+0x293>
c001170a:	80 fa 06             	cmp    dl,0x6
c001170d:	74 4b                	je     c001175a <opcodeFault(regs*, void*)+0x2a3>
c001170f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0011712:	eb ac                	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>
c0011714:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011717:	eb 8c                	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c0011719:	89 73 28             	mov    DWORD PTR [ebx+0x28],esi
c001171c:	eb a2                	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>
c001171e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011721:	eb 82                	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c0011723:	89 73 24             	mov    DWORD PTR [ebx+0x24],esi
c0011726:	eb 98                	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>
c0011728:	89 73 20             	mov    DWORD PTR [ebx+0x20],esi
c001172b:	eb 93                	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>
c001172d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011730:	e9 70 ff ff ff       	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c0011735:	89 73 44             	mov    DWORD PTR [ebx+0x44],esi
c0011738:	eb 86                	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>
c001173a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001173d:	e9 63 ff ff ff       	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c0011742:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011745:	e9 5b ff ff ff       	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c001174a:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c001174d:	e9 6e ff ff ff       	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>
c0011752:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011755:	e9 4b ff ff ff       	jmp    c00116a5 <opcodeFault(regs*, void*)+0x1ee>
c001175a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001175d:	e9 5e ff ff ff       	jmp    c00116c0 <opcodeFault(regs*, void*)+0x209>

c0011762 <displayProgramFault(char const*)>:
c0011762:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011767:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001176a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011770:	85 c0                	test   eax,eax
c0011772:	74 16                	je     c001178a <displayProgramFault(char const*)+0x28>
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	6a 04                	push   0x4
c0011779:	6a 0f                	push   0xf
c001177b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001177f:	52                   	push   edx
c0011780:	50                   	push   eax
c0011781:	e8 e4 bb ff ff       	call   c000d36a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011786:	83 c4 1c             	add    esp,0x1c
c0011789:	c3                   	ret    
c001178a:	c3                   	ret    
c001178b:	90                   	nop

c001178c <InterruptController::convertLegacyIRQNumber(int)>:
c001178c:	53                   	push   ebx
c001178d:	83 ec 14             	sub    esp,0x14
c0011790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011794:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011798:	50                   	push   eax
c0011799:	e8 b2 f0 ff ff       	call   c0010850 <Device::getName()>
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00117a4:	74 07                	je     c00117ad <InterruptController::convertLegacyIRQNumber(int)+0x21>
c00117a6:	83 c4 08             	add    esp,0x8
c00117a9:	89 d8                	mov    eax,ebx
c00117ab:	5b                   	pop    ebx
c00117ac:	c3                   	ret    
c00117ad:	83 fb 0f             	cmp    ebx,0xf
c00117b0:	7f 11                	jg     c00117c3 <InterruptController::convertLegacyIRQNumber(int)+0x37>
c00117b2:	31 c0                	xor    eax,eax
c00117b4:	8a 83 e0 39 02 c0    	mov    al,BYTE PTR [ebx-0x3ffdc620]
c00117ba:	83 c4 08             	add    esp,0x8
c00117bd:	89 c3                	mov    ebx,eax
c00117bf:	89 d8                	mov    eax,ebx
c00117c1:	5b                   	pop    ebx
c00117c2:	c3                   	ret    
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	68 a8 18 02 c0       	push   0xc00218a8
c00117cb:	e8 7e 3d 00 00       	call   c001554e <Krnl::panic(char const*)>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	89 d8                	mov    eax,ebx
c00117d5:	83 c4 08             	add    esp,0x8
c00117d8:	5b                   	pop    ebx
c00117d9:	c3                   	ret    

c00117da <setupInterruptController()>:
c00117da:	56                   	push   esi
c00117db:	53                   	push   ebx
c00117dc:	50                   	push   eax
c00117dd:	e8 fd 2b 00 00       	call   c00143df <getCPUNumber()>
c00117e2:	85 c0                	test   eax,eax
c00117e4:	0f 85 10 02 00 00    	jne    c00119fa <setupInterruptController()+0x220>
c00117ea:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c00117ef:	83 ec 0c             	sub    esp,0xc
c00117f2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00117f8:	68 58 21 00 00       	push   0x2158
c00117fd:	83 e0 01             	and    eax,0x1
c0011800:	89 c6                	mov    esi,eax
c0011802:	e8 1d d8 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011807:	89 04 24             	mov    DWORD PTR [esp],eax
c001180a:	89 c3                	mov    ebx,eax
c001180c:	e8 b3 cc 00 00       	call   c001e4c4 <PIC::PIC()>
c0011811:	6a 00                	push   0x0
c0011813:	6a 00                	push   0x0
c0011815:	6a 00                	push   0x0
c0011817:	53                   	push   ebx
c0011818:	e8 0b d0 00 00       	call   c001e828 <PIC::open(int, int, void*)>
c001181d:	89 f0                	mov    eax,esi
c001181f:	83 c4 20             	add    esp,0x20
c0011822:	84 c0                	test   al,al
c0011824:	0f 85 92 01 00 00    	jne    c00119bc <setupInterruptController()+0x1e2>
c001182a:	51                   	push   ecx
c001182b:	8b 35 88 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024288
c0011831:	51                   	push   ecx
c0011832:	53                   	push   ebx
c0011833:	56                   	push   esi
c0011834:	e8 35 ed ff ff       	call   c001056e <Device::addChild(Device*)>
c0011839:	8b 03                	mov    eax,DWORD PTR [ebx]
c001183b:	6a 00                	push   0x0
c001183d:	68 98 14 01 c0       	push   0xc0011498
c0011842:	6a 00                	push   0x0
c0011844:	53                   	push   ebx
c0011845:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011848:	83 c4 20             	add    esp,0x20
c001184b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001184d:	6a 00                	push   0x0
c001184f:	68 98 14 01 c0       	push   0xc0011498
c0011854:	6a 01                	push   0x1
c0011856:	53                   	push   ebx
c0011857:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001185a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001185c:	6a 00                	push   0x0
c001185e:	68 02 0e 01 c0       	push   0xc0010e02
c0011863:	6a 02                	push   0x2
c0011865:	53                   	push   ebx
c0011866:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011869:	83 c4 20             	add    esp,0x20
c001186c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001186e:	6a 00                	push   0x0
c0011870:	68 98 14 01 c0       	push   0xc0011498
c0011875:	6a 03                	push   0x3
c0011877:	53                   	push   ebx
c0011878:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001187b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001187d:	6a 00                	push   0x0
c001187f:	68 98 14 01 c0       	push   0xc0011498
c0011884:	6a 04                	push   0x4
c0011886:	53                   	push   ebx
c0011887:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001188a:	83 c4 20             	add    esp,0x20
c001188d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001188f:	6a 00                	push   0x0
c0011891:	68 98 14 01 c0       	push   0xc0011498
c0011896:	6a 05                	push   0x5
c0011898:	53                   	push   ebx
c0011899:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001189c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001189e:	6a 00                	push   0x0
c00118a0:	68 b7 14 01 c0       	push   0xc00114b7
c00118a5:	6a 06                	push   0x6
c00118a7:	53                   	push   ebx
c00118a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118ab:	83 c4 20             	add    esp,0x20
c00118ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b0:	6a 00                	push   0x0
c00118b2:	68 e4 13 01 c0       	push   0xc00113e4
c00118b7:	6a 07                	push   0x7
c00118b9:	53                   	push   ebx
c00118ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118bf:	6a 00                	push   0x0
c00118c1:	68 20 0c 01 c0       	push   0xc0010c20
c00118c6:	6a 08                	push   0x8
c00118c8:	53                   	push   ebx
c00118c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118cc:	83 c4 20             	add    esp,0x20
c00118cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118d1:	6a 00                	push   0x0
c00118d3:	68 98 14 01 c0       	push   0xc0011498
c00118d8:	6a 09                	push   0x9
c00118da:	53                   	push   ebx
c00118db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118e0:	6a 00                	push   0x0
c00118e2:	68 98 14 01 c0       	push   0xc0011498
c00118e7:	6a 0a                	push   0xa
c00118e9:	53                   	push   ebx
c00118ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118ed:	83 c4 20             	add    esp,0x20
c00118f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118f2:	6a 00                	push   0x0
c00118f4:	68 98 14 01 c0       	push   0xc0011498
c00118f9:	6a 0b                	push   0xb
c00118fb:	53                   	push   ebx
c00118fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011901:	6a 00                	push   0x0
c0011903:	68 98 14 01 c0       	push   0xc0011498
c0011908:	6a 0c                	push   0xc
c001190a:	53                   	push   ebx
c001190b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001190e:	83 c4 20             	add    esp,0x20
c0011911:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011913:	6a 00                	push   0x0
c0011915:	68 47 14 01 c0       	push   0xc0011447
c001191a:	6a 0d                	push   0xd
c001191c:	53                   	push   ebx
c001191d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011922:	6a 00                	push   0x0
c0011924:	68 80 14 01 c0       	push   0xc0011480
c0011929:	6a 0e                	push   0xe
c001192b:	53                   	push   ebx
c001192c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001192f:	83 c4 20             	add    esp,0x20
c0011932:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011934:	6a 00                	push   0x0
c0011936:	68 98 14 01 c0       	push   0xc0011498
c001193b:	6a 0f                	push   0xf
c001193d:	53                   	push   ebx
c001193e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011943:	6a 00                	push   0x0
c0011945:	68 98 14 01 c0       	push   0xc0011498
c001194a:	6a 10                	push   0x10
c001194c:	53                   	push   ebx
c001194d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011950:	83 c4 20             	add    esp,0x20
c0011953:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011955:	6a 00                	push   0x0
c0011957:	68 98 14 01 c0       	push   0xc0011498
c001195c:	6a 11                	push   0x11
c001195e:	53                   	push   ebx
c001195f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011962:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011964:	6a 00                	push   0x0
c0011966:	68 98 14 01 c0       	push   0xc0011498
c001196b:	6a 12                	push   0x12
c001196d:	53                   	push   ebx
c001196e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011971:	83 c4 20             	add    esp,0x20
c0011974:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011976:	6a 00                	push   0x0
c0011978:	68 98 14 01 c0       	push   0xc0011498
c001197d:	6a 13                	push   0x13
c001197f:	53                   	push   ebx
c0011980:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011983:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011985:	6a 00                	push   0x0
c0011987:	68 98 14 01 c0       	push   0xc0011498
c001198c:	6a 14                	push   0x14
c001198e:	53                   	push   ebx
c001198f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011992:	83 c4 20             	add    esp,0x20
c0011995:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011997:	6a 00                	push   0x0
c0011999:	68 98 14 01 c0       	push   0xc0011498
c001199e:	6a 1e                	push   0x1e
c00119a0:	53                   	push   ebx
c00119a1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00119a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119a6:	6a 00                	push   0x0
c00119a8:	68 5e 6f 01 c0       	push   0xc0016f5e
c00119ad:	6a 60                	push   0x60
c00119af:	53                   	push   ebx
c00119b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00119b3:	83 c4 20             	add    esp,0x20
c00119b6:	89 d8                	mov    eax,ebx
c00119b8:	5a                   	pop    edx
c00119b9:	5b                   	pop    ebx
c00119ba:	5e                   	pop    esi
c00119bb:	c3                   	ret    
c00119bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119be:	6a 00                	push   0x0
c00119c0:	6a 00                	push   0x0
c00119c2:	6a 00                	push   0x0
c00119c4:	53                   	push   ebx
c00119c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00119c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119cd:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00119d0:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00119d7:	e8 48 d6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00119dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00119df:	89 c3                	mov    ebx,eax
c00119e1:	e8 e4 c5 00 00       	call   c001dfca <APIC::APIC()>
c00119e6:	6a 00                	push   0x0
c00119e8:	6a 00                	push   0x0
c00119ea:	6a 00                	push   0x0
c00119ec:	53                   	push   ebx
c00119ed:	e8 e6 c4 00 00       	call   c001ded8 <APIC::open(int, int, void*)>
c00119f2:	83 c4 20             	add    esp,0x20
c00119f5:	e9 30 fe ff ff       	jmp    c001182a <setupInterruptController()+0x50>
c00119fa:	83 ec 0c             	sub    esp,0xc
c00119fd:	68 58 21 00 00       	push   0x2158
c0011a02:	e8 1d d6 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a0a:	89 c3                	mov    ebx,eax
c0011a0c:	e8 b9 c5 00 00       	call   c001dfca <APIC::APIC()>
c0011a11:	6a 00                	push   0x0
c0011a13:	6a 00                	push   0x0
c0011a15:	6a 00                	push   0x0
c0011a17:	53                   	push   ebx
c0011a18:	e8 bb c4 00 00       	call   c001ded8 <APIC::open(int, int, void*)>
c0011a1d:	83 c4 18             	add    esp,0x18
c0011a20:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0011a25:	53                   	push   ebx
c0011a26:	50                   	push   eax
c0011a27:	e8 42 eb ff ff       	call   c001056e <Device::addChild(Device*)>
c0011a2c:	83 c4 10             	add    esp,0x10
c0011a2f:	89 d8                	mov    eax,ebx
c0011a31:	5a                   	pop    edx
c0011a32:	5b                   	pop    ebx
c0011a33:	5e                   	pop    esi
c0011a34:	c3                   	ret    
c0011a35:	90                   	nop

c0011a36 <startGUI(void*)>:
c0011a36:	55                   	push   ebp
c0011a37:	89 e5                	mov    ebp,esp
c0011a39:	53                   	push   ebx
c0011a3a:	83 ec 04             	sub    esp,0x4
c0011a3d:	e8 17 6b 00 00       	call   c0018559 <unlockScheduler()>
c0011a42:	e8 fb 6a 00 00       	call   c0018542 <getIRQNestingLevel()>
c0011a47:	83 ec 08             	sub    esp,0x8
c0011a4a:	50                   	push   eax
c0011a4b:	68 8c 1b 02 c0       	push   0xc0021b8c
c0011a50:	e8 04 d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c0011a5e:	83 ec 08             	sub    esp,0x8
c0011a61:	6a 01                	push   0x1
c0011a63:	68 a6 1b 02 c0       	push   0xc0021ba6
c0011a68:	e8 04 65 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	83 ec 08             	sub    esp,0x8
c0011a73:	53                   	push   ebx
c0011a74:	50                   	push   eax
c0011a75:	e8 bd 66 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0011a7a:	83 c4 10             	add    esp,0x10
c0011a7d:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c0011a83:	83 ec 08             	sub    esp,0x8
c0011a86:	6a 01                	push   0x1
c0011a88:	68 c0 1b 02 c0       	push   0xc0021bc0
c0011a8d:	e8 df 64 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c0011a92:	83 c4 10             	add    esp,0x10
c0011a95:	83 ec 08             	sub    esp,0x8
c0011a98:	53                   	push   ebx
c0011a99:	50                   	push   eax
c0011a9a:	e8 98 66 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	90                   	nop
c0011aa3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011aa6:	c9                   	leave  
c0011aa7:	c3                   	ret    

c0011aa8 <sendKeyToTerminal(unsigned char)>:
c0011aa8:	55                   	push   ebp
c0011aa9:	89 e5                	mov    ebp,esp
c0011aab:	83 ec 28             	sub    esp,0x28
c0011aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011ab4:	8b 15 44 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024344
c0011aba:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011abd:	25 ff 00 00 00       	and    eax,0xff
c0011ac2:	83 ec 08             	sub    esp,0x8
c0011ac5:	50                   	push   eax
c0011ac6:	52                   	push   edx
c0011ac7:	e8 dc bd ff ff       	call   c000d8a8 <VgaText::receiveKey(unsigned char)>
c0011acc:	83 c4 10             	add    esp,0x10
c0011acf:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011ad3:	75 41                	jne    c0011b16 <sendKeyToTerminal(unsigned char)+0x6e>
c0011ad5:	e8 a4 6a 00 00       	call   c001857e <lockStuff()>
c0011ada:	a1 20 44 02 c0       	mov    eax,ds:0xc0024420
c0011adf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ae2:	c7 05 20 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024420,0x0
c0011aec:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011af0:	74 1f                	je     c0011b11 <sendKeyToTerminal(unsigned char)+0x69>
c0011af2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011af5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011af8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011afb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011afe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b07:	e8 6f 70 00 00       	call   c0018b7b <unblockTask(ThreadControlBlock*)>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	eb db                	jmp    c0011aec <sendKeyToTerminal(unsigned char)+0x44>
c0011b11:	e8 0f 6e 00 00       	call   c0018925 <unlockStuff()>
c0011b16:	90                   	nop
c0011b17:	c9                   	leave  
c0011b18:	c3                   	ret    

c0011b19 <sendKeyboardToken(KeyboardToken)>:
c0011b19:	55                   	push   ebp
c0011b1a:	89 e5                	mov    ebp,esp
c0011b1c:	83 ec 18             	sub    esp,0x18
c0011b1f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b25:	25 ff ff 00 00       	and    eax,0xffff
c0011b2a:	83 f2 01             	xor    edx,0x1
c0011b2d:	88 90 40 44 02 c0    	mov    BYTE PTR [eax-0x3ffdbbc0],dl
c0011b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b36:	66 3d 03 02          	cmp    ax,0x203
c0011b3a:	75 07                	jne    c0011b43 <sendKeyboardToken(KeyboardToken)+0x2a>
c0011b3c:	a0 40 45 02 c0       	mov    al,ds:0xc0024540
c0011b41:	84 c0                	test   al,al
c0011b43:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011b47:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011b4a:	a0 48 48 02 c0       	mov    al,ds:0xc0024848
c0011b4f:	38 c2                	cmp    dl,al
c0011b51:	74 1e                	je     c0011b71 <sendKeyboardToken(KeyboardToken)+0x58>
c0011b53:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011b56:	a2 48 48 02 c0       	mov    ds:0xc0024848,al
c0011b5b:	a0 48 48 02 c0       	mov    al,ds:0xc0024848
c0011b60:	25 ff 00 00 00       	and    eax,0xff
c0011b65:	83 ec 0c             	sub    esp,0xc
c0011b68:	50                   	push   eax
c0011b69:	e8 a6 af ff ff       	call   c000cb14 <setTerminalScrollLock(bool)>
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011b74:	84 c0                	test   al,al
c0011b76:	0f 84 ae 00 00 00    	je     c0011c2a <sendKeyboardToken(KeyboardToken)+0x111>
c0011b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b7f:	66 3d 10 03          	cmp    ax,0x310
c0011b83:	75 06                	jne    c0011b8b <sendKeyboardToken(KeyboardToken)+0x72>
c0011b85:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b8e:	66 3d 11 03          	cmp    ax,0x311
c0011b92:	75 06                	jne    c0011b9a <sendKeyboardToken(KeyboardToken)+0x81>
c0011b94:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b9d:	66 3d 12 03          	cmp    ax,0x312
c0011ba1:	75 06                	jne    c0011ba9 <sendKeyboardToken(KeyboardToken)+0x90>
c0011ba3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bac:	66 3d 13 03          	cmp    ax,0x313
c0011bb0:	75 06                	jne    c0011bb8 <sendKeyboardToken(KeyboardToken)+0x9f>
c0011bb2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bbb:	66 3d 14 03          	cmp    ax,0x314
c0011bbf:	75 06                	jne    c0011bc7 <sendKeyboardToken(KeyboardToken)+0xae>
c0011bc1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bca:	66 3d 15 03          	cmp    ax,0x315
c0011bce:	75 06                	jne    c0011bd6 <sendKeyboardToken(KeyboardToken)+0xbd>
c0011bd0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bd9:	66 3d 16 03          	cmp    ax,0x316
c0011bdd:	75 06                	jne    c0011be5 <sendKeyboardToken(KeyboardToken)+0xcc>
c0011bdf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011be8:	66 3d 17 03          	cmp    ax,0x317
c0011bec:	75 06                	jne    c0011bf4 <sendKeyboardToken(KeyboardToken)+0xdb>
c0011bee:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bf7:	66 3d 18 03          	cmp    ax,0x318
c0011bfb:	75 06                	jne    c0011c03 <sendKeyboardToken(KeyboardToken)+0xea>
c0011bfd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c06:	66 3d 19 03          	cmp    ax,0x319
c0011c0a:	75 06                	jne    c0011c12 <sendKeyboardToken(KeyboardToken)+0xf9>
c0011c0c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c15:	66 3d 1a 03          	cmp    ax,0x31a
c0011c19:	0f 85 c9 00 00 00    	jne    c0011ce8 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011c1f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011c25:	e9 be 00 00 00       	jmp    c0011ce8 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c2d:	66 3d 10 03          	cmp    ax,0x310
c0011c31:	75 0a                	jne    c0011c3d <sendKeyboardToken(KeyboardToken)+0x124>
c0011c33:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011c39:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c40:	66 3d 11 03          	cmp    ax,0x311
c0011c44:	75 0a                	jne    c0011c50 <sendKeyboardToken(KeyboardToken)+0x137>
c0011c46:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011c4c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c53:	66 3d 12 03          	cmp    ax,0x312
c0011c57:	75 0a                	jne    c0011c63 <sendKeyboardToken(KeyboardToken)+0x14a>
c0011c59:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011c5f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c66:	66 3d 13 03          	cmp    ax,0x313
c0011c6a:	75 0a                	jne    c0011c76 <sendKeyboardToken(KeyboardToken)+0x15d>
c0011c6c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011c72:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c79:	66 3d 14 03          	cmp    ax,0x314
c0011c7d:	75 0a                	jne    c0011c89 <sendKeyboardToken(KeyboardToken)+0x170>
c0011c7f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0011c85:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c8c:	66 3d 15 03          	cmp    ax,0x315
c0011c90:	75 0a                	jne    c0011c9c <sendKeyboardToken(KeyboardToken)+0x183>
c0011c92:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011c98:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c9f:	66 3d 16 03          	cmp    ax,0x316
c0011ca3:	75 0a                	jne    c0011caf <sendKeyboardToken(KeyboardToken)+0x196>
c0011ca5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0011cab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cb2:	66 3d 17 03          	cmp    ax,0x317
c0011cb6:	75 0a                	jne    c0011cc2 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0011cb8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011cbe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cc5:	66 3d 18 03          	cmp    ax,0x318
c0011cc9:	75 0a                	jne    c0011cd5 <sendKeyboardToken(KeyboardToken)+0x1bc>
c0011ccb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011cd1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cd8:	66 3d 19 03          	cmp    ax,0x319
c0011cdc:	75 0a                	jne    c0011ce8 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011cde:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011ce4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ceb:	66 3d 00 02          	cmp    ax,0x200
c0011cef:	75 2a                	jne    c0011d1b <sendKeyboardToken(KeyboardToken)+0x202>
c0011cf1:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c0011cf6:	83 f0 01             	xor    eax,0x1
c0011cf9:	84 c0                	test   al,al
c0011cfb:	74 1e                	je     c0011d1b <sendKeyboardToken(KeyboardToken)+0x202>
c0011cfd:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0011d02:	6a 01                	push   0x1
c0011d04:	6a 00                	push   0x0
c0011d06:	68 36 1a 01 c0       	push   0xc0011a36
c0011d0b:	50                   	push   eax
c0011d0c:	e8 7b 69 00 00       	call   c001868c <Process::createThread(void (*)(void*), void*, int)>
c0011d11:	83 c4 10             	add    esp,0x10
c0011d14:	c6 05 40 48 02 c0 01 	mov    BYTE PTR ds:0xc0024840,0x1
c0011d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d1e:	66 3d 1d 03          	cmp    ax,0x31d
c0011d22:	75 06                	jne    c0011d2a <sendKeyboardToken(KeyboardToken)+0x211>
c0011d24:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d2d:	66 3d 1c 03          	cmp    ax,0x31c
c0011d31:	75 06                	jne    c0011d39 <sendKeyboardToken(KeyboardToken)+0x220>
c0011d33:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d3c:	66 3d 1b 03          	cmp    ax,0x31b
c0011d40:	75 06                	jne    c0011d48 <sendKeyboardToken(KeyboardToken)+0x22f>
c0011d42:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d4b:	66 3d 1e 03          	cmp    ax,0x31e
c0011d4f:	75 06                	jne    c0011d57 <sendKeyboardToken(KeyboardToken)+0x23e>
c0011d51:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d5a:	66 3d 1f 03          	cmp    ax,0x31f
c0011d5e:	75 06                	jne    c0011d66 <sendKeyboardToken(KeyboardToken)+0x24d>
c0011d60:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d69:	66 3d 1a 03          	cmp    ax,0x31a
c0011d6d:	75 06                	jne    c0011d75 <sendKeyboardToken(KeyboardToken)+0x25c>
c0011d6f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011d75:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011d79:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011d7c:	83 f0 01             	xor    eax,0x1
c0011d7f:	84 c0                	test   al,al
c0011d81:	74 7b                	je     c0011dfe <sendKeyboardToken(KeyboardToken)+0x2e5>
c0011d83:	a0 41 45 02 c0       	mov    al,ds:0xc0024541
c0011d88:	84 c0                	test   al,al
c0011d8a:	74 43                	je     c0011dcf <sendKeyboardToken(KeyboardToken)+0x2b6>
c0011d8c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011d90:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011d94:	74 2d                	je     c0011dc3 <sendKeyboardToken(KeyboardToken)+0x2aa>
c0011d96:	8b 15 44 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024844
c0011d9c:	89 d0                	mov    eax,edx
c0011d9e:	c1 e0 02             	shl    eax,0x2
c0011da1:	01 d0                	add    eax,edx
c0011da3:	01 c0                	add    eax,eax
c0011da5:	a3 44 48 02 c0       	mov    ds:0xc0024844,eax
c0011daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011dad:	25 ff ff 00 00       	and    eax,0xffff
c0011db2:	8d 50 d0             	lea    edx,[eax-0x30]
c0011db5:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c0011dba:	01 d0                	add    eax,edx
c0011dbc:	a3 44 48 02 c0       	mov    ds:0xc0024844,eax
c0011dc1:	eb 71                	jmp    c0011e34 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011dc3:	c7 05 44 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024844,0x0
c0011dcd:	eb 65                	jmp    c0011e34 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011dcf:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c0011dd4:	85 c0                	test   eax,eax
c0011dd6:	74 1a                	je     c0011df2 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0011dd8:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c0011ddd:	25 ff 00 00 00       	and    eax,0xff
c0011de2:	83 ec 0c             	sub    esp,0xc
c0011de5:	50                   	push   eax
c0011de6:	e8 bd fc ff ff       	call   c0011aa8 <sendKeyToTerminal(unsigned char)>
c0011deb:	83 c4 10             	add    esp,0x10
c0011dee:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011df2:	c7 05 44 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024844,0x0
c0011dfc:	eb 36                	jmp    c0011e34 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e01:	66 3d 01 01          	cmp    ax,0x101
c0011e05:	75 2d                	jne    c0011e34 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011e07:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c0011e0c:	85 c0                	test   eax,eax
c0011e0e:	74 1a                	je     c0011e2a <sendKeyboardToken(KeyboardToken)+0x311>
c0011e10:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c0011e15:	25 ff 00 00 00       	and    eax,0xff
c0011e1a:	83 ec 0c             	sub    esp,0xc
c0011e1d:	50                   	push   eax
c0011e1e:	e8 85 fc ff ff       	call   c0011aa8 <sendKeyToTerminal(unsigned char)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011e2a:	c7 05 44 48 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024844,0x0
c0011e34:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011e37:	83 f0 01             	xor    eax,0x1
c0011e3a:	84 c0                	test   al,al
c0011e3c:	74 4e                	je     c0011e8c <sendKeyboardToken(KeyboardToken)+0x373>
c0011e3e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011e41:	83 f0 01             	xor    eax,0x1
c0011e44:	84 c0                	test   al,al
c0011e46:	74 44                	je     c0011e8c <sendKeyboardToken(KeyboardToken)+0x373>
c0011e48:	a0 40 45 02 c0       	mov    al,ds:0xc0024540
c0011e4d:	83 f0 01             	xor    eax,0x1
c0011e50:	84 c0                	test   al,al
c0011e52:	74 38                	je     c0011e8c <sendKeyboardToken(KeyboardToken)+0x373>
c0011e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e57:	66 83 f8 1f          	cmp    ax,0x1f
c0011e5b:	76 09                	jbe    c0011e66 <sendKeyboardToken(KeyboardToken)+0x34d>
c0011e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e60:	66 83 f8 7e          	cmp    ax,0x7e
c0011e64:	76 12                	jbe    c0011e78 <sendKeyboardToken(KeyboardToken)+0x35f>
c0011e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e69:	66 83 f8 0a          	cmp    ax,0xa
c0011e6d:	74 09                	je     c0011e78 <sendKeyboardToken(KeyboardToken)+0x35f>
c0011e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e72:	66 83 f8 08          	cmp    ax,0x8
c0011e76:	75 14                	jne    c0011e8c <sendKeyboardToken(KeyboardToken)+0x373>
c0011e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e7b:	25 ff 00 00 00       	and    eax,0xff
c0011e80:	83 ec 0c             	sub    esp,0xc
c0011e83:	50                   	push   eax
c0011e84:	e8 1f fc ff ff       	call   c0011aa8 <sendKeyToTerminal(unsigned char)>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011e8f:	83 f0 01             	xor    eax,0x1
c0011e92:	84 c0                	test   al,al
c0011e94:	74 51                	je     c0011ee7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011e96:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011e99:	83 f0 01             	xor    eax,0x1
c0011e9c:	84 c0                	test   al,al
c0011e9e:	74 47                	je     c0011ee7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011ea0:	a0 40 45 02 c0       	mov    al,ds:0xc0024540
c0011ea5:	84 c0                	test   al,al
c0011ea7:	74 3e                	je     c0011ee7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eac:	66 83 f8 3f          	cmp    ax,0x3f
c0011eb0:	76 35                	jbe    c0011ee7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eb5:	66 83 f8 7f          	cmp    ax,0x7f
c0011eb9:	77 2c                	ja     c0011ee7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ebe:	88 c2                	mov    dl,al
c0011ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ec3:	66 83 f8 5f          	cmp    ax,0x5f
c0011ec7:	76 04                	jbe    c0011ecd <sendKeyboardToken(KeyboardToken)+0x3b4>
c0011ec9:	b0 20                	mov    al,0x20
c0011ecb:	eb 02                	jmp    c0011ecf <sendKeyboardToken(KeyboardToken)+0x3b6>
c0011ecd:	b0 00                	mov    al,0x0
c0011ecf:	29 c2                	sub    edx,eax
c0011ed1:	88 d0                	mov    al,dl
c0011ed3:	83 e8 40             	sub    eax,0x40
c0011ed6:	25 ff 00 00 00       	and    eax,0xff
c0011edb:	83 ec 0c             	sub    esp,0xc
c0011ede:	50                   	push   eax
c0011edf:	e8 c4 fb ff ff       	call   c0011aa8 <sendKeyToTerminal(unsigned char)>
c0011ee4:	83 c4 10             	add    esp,0x10
c0011ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eea:	66 3d 00 03          	cmp    ax,0x300
c0011eee:	75 0f                	jne    c0011eff <sendKeyboardToken(KeyboardToken)+0x3e6>
c0011ef0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011ef3:	83 f0 01             	xor    eax,0x1
c0011ef6:	84 c0                	test   al,al
c0011ef8:	74 05                	je     c0011eff <sendKeyboardToken(KeyboardToken)+0x3e6>
c0011efa:	e8 3c b4 ff ff       	call   c000d33b <doTerminalCycle()>
c0011eff:	90                   	nop
c0011f00:	c9                   	leave  
c0011f01:	c3                   	ret    

c0011f02 <clearInternalKeybuffer(VgaText*)>:
c0011f02:	55                   	push   ebp
c0011f03:	89 e5                	mov    ebp,esp
c0011f05:	83 ec 08             	sub    esp,0x8
c0011f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f0b:	05 34 11 00 00       	add    eax,0x1134
c0011f10:	83 ec 0c             	sub    esp,0xc
c0011f13:	50                   	push   eax
c0011f14:	e8 0c e7 fe ff       	call   c0000625 <strlen>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011f1f:	81 c2 34 11 00 00    	add    edx,0x1134
c0011f25:	83 ec 04             	sub    esp,0x4
c0011f28:	50                   	push   eax
c0011f29:	6a 00                	push   0x0
c0011f2b:	52                   	push   edx
c0011f2c:	e8 d7 e6 fe ff       	call   c0000608 <memset>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	90                   	nop
c0011f35:	c9                   	leave  
c0011f36:	c3                   	ret    

c0011f37 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011f37:	55                   	push   ebp
c0011f38:	89 e5                	mov    ebp,esp
c0011f3a:	83 ec 18             	sub    esp,0x18
c0011f3d:	fb                   	sti    
c0011f3e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011f45:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011f49:	74 77                	je     c0011fc2 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f4e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011f54:	84 c0                	test   al,al
c0011f56:	75 02                	jne    c0011f5a <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011f58:	eb f1                	jmp    c0011f4b <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011f5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f5d:	8d 50 01             	lea    edx,[eax+0x1]
c0011f60:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011f63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011f66:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011f6c:	88 10                	mov    BYTE PTR [eax],dl
c0011f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f71:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011f77:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f7d:	05 34 11 00 00       	add    eax,0x1134
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	50                   	push   eax
c0011f86:	e8 9a e6 fe ff       	call   c0000625 <strlen>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011f91:	81 c2 34 11 00 00    	add    edx,0x1134
c0011f97:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011f9a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011f9d:	81 c2 34 11 00 00    	add    edx,0x1134
c0011fa3:	83 ec 04             	sub    esp,0x4
c0011fa6:	50                   	push   eax
c0011fa7:	51                   	push   ecx
c0011fa8:	52                   	push   edx
c0011fa9:	e8 ec e5 fe ff       	call   c000059a <memmove>
c0011fae:	83 c4 10             	add    esp,0x10
c0011fb1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011fb4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011fb7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011fbb:	75 88                	jne    c0011f45 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011fbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fc0:	eb 03                	jmp    c0011fc5 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011fc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fc5:	c9                   	leave  
c0011fc6:	c3                   	ret    
c0011fc7:	90                   	nop

c0011fc8 <Keyboard::Keyboard(char const*)>:
c0011fc8:	83 ec 0c             	sub    esp,0xc
c0011fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fcf:	83 ec 08             	sub    esp,0x8
c0011fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fd6:	50                   	push   eax
c0011fd7:	e8 82 e7 ff ff       	call   c001075e <Device::Device(char const*)>
c0011fdc:	83 c4 10             	add    esp,0x10
c0011fdf:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c0011fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fe8:	89 10                	mov    DWORD PTR [eax],edx
c0011fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fee:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011ff8:	c6 05 24 44 02 c0 01 	mov    BYTE PTR ds:0xc0024424,0x1
c0011fff:	90                   	nop
c0012000:	83 c4 0c             	add    esp,0xc
c0012003:	c3                   	ret    

c0012004 <Keyboard::~Keyboard()>:
c0012004:	83 ec 0c             	sub    esp,0xc
c0012007:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001200c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012010:	89 10                	mov    DWORD PTR [eax],edx
c0012012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	50                   	push   eax
c001201a:	e8 f5 e3 ff ff       	call   c0010414 <Device::~Device()>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	90                   	nop
c0012023:	83 c4 0c             	add    esp,0xc
c0012026:	c3                   	ret    
c0012027:	90                   	nop

c0012028 <Keyboard::~Keyboard()>:
c0012028:	83 ec 0c             	sub    esp,0xc
c001202b:	83 ec 0c             	sub    esp,0xc
c001202e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012032:	e8 cd ff ff ff       	call   c0012004 <Keyboard::~Keyboard()>
c0012037:	83 c4 10             	add    esp,0x10
c001203a:	83 ec 08             	sub    esp,0x8
c001203d:	68 5c 01 00 00       	push   0x15c
c0012042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012046:	e8 e8 cf ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	83 c4 0c             	add    esp,0xc
c0012051:	c3                   	ret    

c0012052 <LogicalDisk::close(int, int, void*)>:
c0012052:	83 c8 ff             	or     eax,0xffffffff
c0012055:	c3                   	ret    

c0012056 <LogicalDisk::~LogicalDisk()>:
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	ba 94 1c 02 c0       	mov    edx,0xc0021c94
c001205e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012062:	89 10                	mov    DWORD PTR [eax],edx
c0012064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012068:	83 ec 0c             	sub    esp,0xc
c001206b:	50                   	push   eax
c001206c:	e8 a3 e3 ff ff       	call   c0010414 <Device::~Device()>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	90                   	nop
c0012075:	83 c4 0c             	add    esp,0xc
c0012078:	c3                   	ret    
c0012079:	90                   	nop

c001207a <LogicalDisk::~LogicalDisk()>:
c001207a:	83 ec 0c             	sub    esp,0xc
c001207d:	83 ec 0c             	sub    esp,0xc
c0012080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012084:	e8 cd ff ff ff       	call   c0012056 <LogicalDisk::~LogicalDisk()>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	83 ec 08             	sub    esp,0x8
c001208f:	68 74 01 00 00       	push   0x174
c0012094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012098:	e8 96 cf ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	83 c4 0c             	add    esp,0xc
c00120a3:	c3                   	ret    

c00120a4 <LogicalDisk::open(int, int, void*)>:
c00120a4:	83 ec 18             	sub    esp,0x18
c00120a7:	68 10 1c 02 c0       	push   0xc0021c10
c00120ac:	e8 9d 34 00 00       	call   c001554e <Krnl::panic(char const*)>
c00120b1:	83 c8 ff             	or     eax,0xffffffff
c00120b4:	83 c4 1c             	add    esp,0x1c
c00120b7:	c3                   	ret    

c00120b8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00120b8:	53                   	push   ebx
c00120b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00120bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00120c5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00120cb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00120d1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00120d7:	77 10                	ja     c00120e9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00120d9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00120df:	89 d3                	mov    ebx,edx
c00120e1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00120e7:	72 05                	jb     c00120ee <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00120e9:	83 c8 ff             	or     eax,0xffffffff
c00120ec:	89 c2                	mov    edx,eax
c00120ee:	5b                   	pop    ebx
c00120ef:	c3                   	ret    

c00120f0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00120f0:	56                   	push   esi
c00120f1:	83 c8 ff             	or     eax,0xffffffff
c00120f4:	53                   	push   ebx
c00120f5:	89 c2                	mov    edx,eax
c00120f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00120fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00120ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012103:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012109:	77 27                	ja     c0012132 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001210b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012111:	89 d8                	mov    eax,ebx
c0012113:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012119:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001211e:	89 c2                	mov    edx,eax
c0012120:	73 10                	jae    c0012132 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012122:	89 c8                	mov    eax,ecx
c0012124:	89 da                	mov    edx,ebx
c0012126:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001212c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012132:	5b                   	pop    ebx
c0012133:	5e                   	pop    esi
c0012134:	c3                   	ret    
c0012135:	90                   	nop

c0012136 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012136:	83 ec 1c             	sub    esp,0x1c
c0012139:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001213d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012149:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001214d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012150:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012154:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001215c:	83 ec 08             	sub    esp,0x8
c001215f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012163:	50                   	push   eax
c0012164:	e8 f5 e5 ff ff       	call   c001075e <Device::Device(char const*)>
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	ba 94 1c 02 c0       	mov    edx,0xc0021c94
c0012171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012175:	89 10                	mov    DWORD PTR [eax],edx
c0012177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001217b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012186:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001218d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012191:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001219b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001219f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121a7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00121ad:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00121b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00121b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00121ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00121be:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00121c4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00121ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121d2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00121d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121dc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00121e6:	90                   	nop
c00121e7:	83 c4 1c             	add    esp,0x1c
c00121ea:	c3                   	ret    
c00121eb:	90                   	nop

c00121ec <LogicalDisk::assignDriveLetter()>:
c00121ec:	55                   	push   ebp
c00121ed:	57                   	push   edi
c00121ee:	56                   	push   esi
c00121ef:	53                   	push   ebx
c00121f0:	83 ec 14             	sub    esp,0x14
c00121f3:	8b 3d 60 48 02 c0    	mov    edi,DWORD PTR ds:0xc0024860
c00121f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00121fd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012201:	8b 3d 64 48 02 c0    	mov    edi,DWORD PTR ds:0xc0024864
c0012207:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001220d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012211:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012217:	3c 01                	cmp    al,0x1
c0012219:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001221d:	19 c0                	sbb    eax,eax
c001221f:	83 e0 02             	and    eax,0x2
c0012222:	83 c0 41             	add    eax,0x41
c0012225:	0f be e8             	movsx  ebp,al
c0012228:	3c 43                	cmp    al,0x43
c001222a:	75 10                	jne    c001223c <LogicalDisk::assignDriveLetter()+0x50>
c001222c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012233:	75 5d                	jne    c0012292 <LogicalDisk::assignDriveLetter()+0xa6>
c0012235:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001223a:	75 56                	jne    c0012292 <LogicalDisk::assignDriveLetter()+0xa6>
c001223c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001223f:	ba 01 00 00 00       	mov    edx,0x1
c0012244:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012248:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001224c:	d3 e2                	shl    edx,cl
c001224e:	89 d7                	mov    edi,edx
c0012250:	89 d6                	mov    esi,edx
c0012252:	c1 ff 1f             	sar    edi,0x1f
c0012255:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001225d:	21 f9                	and    ecx,edi
c001225f:	09 d1                	or     ecx,edx
c0012261:	75 2f                	jne    c0012292 <LogicalDisk::assignDriveLetter()+0xa6>
c0012263:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012267:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001226b:	09 f2                	or     edx,esi
c001226d:	89 15 60 48 02 c0    	mov    DWORD PTR ds:0xc0024860,edx
c0012273:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012277:	09 fa                	or     edx,edi
c0012279:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001227d:	89 15 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,edx
c0012283:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012289:	89 1c bd 80 48 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb780],ebx
c0012290:	eb 08                	jmp    c001229a <LogicalDisk::assignDriveLetter()+0xae>
c0012292:	40                   	inc    eax
c0012293:	45                   	inc    ebp
c0012294:	3c 5b                	cmp    al,0x5b
c0012296:	75 90                	jne    c0012228 <LogicalDisk::assignDriveLetter()+0x3c>
c0012298:	31 c0                	xor    eax,eax
c001229a:	83 c4 14             	add    esp,0x14
c001229d:	5b                   	pop    ebx
c001229e:	5e                   	pop    esi
c001229f:	5f                   	pop    edi
c00122a0:	5d                   	pop    ebp
c00122a1:	c3                   	ret    

c00122a2 <LogicalDisk::mount()>:
c00122a2:	56                   	push   esi
c00122a3:	53                   	push   ebx
c00122a4:	51                   	push   ecx
c00122a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122a9:	8b 1d e8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e8
c00122af:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00122b9:	85 db                	test   ebx,ebx
c00122bb:	74 50                	je     c001230d <LogicalDisk::mount()+0x6b>
c00122bd:	e8 80 62 00 00       	call   c0018542 <getIRQNestingLevel()>
c00122c2:	52                   	push   edx
c00122c3:	52                   	push   edx
c00122c4:	50                   	push   eax
c00122c5:	68 34 1c 02 c0       	push   0xc0021c34
c00122ca:	e8 8a ce ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00122cf:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00122d6:	83 c4 0c             	add    esp,0xc
c00122d9:	83 e8 41             	sub    eax,0x41
c00122dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00122de:	50                   	push   eax
c00122df:	56                   	push   esi
c00122e0:	53                   	push   ebx
c00122e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00122e4:	83 c4 10             	add    esp,0x10
c00122e7:	84 c0                	test   al,al
c00122e9:	74 08                	je     c00122f3 <LogicalDisk::mount()+0x51>
c00122eb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00122f1:	eb 1c                	jmp    c001230f <LogicalDisk::mount()+0x6d>
c00122f3:	e8 4a 62 00 00       	call   c0018542 <getIRQNestingLevel()>
c00122f8:	51                   	push   ecx
c00122f9:	51                   	push   ecx
c00122fa:	50                   	push   eax
c00122fb:	68 4f 1c 02 c0       	push   0xc0021c4f
c0012300:	e8 54 ce ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0012305:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	eb ac                	jmp    c00122b9 <LogicalDisk::mount()+0x17>
c001230d:	31 c0                	xor    eax,eax
c001230f:	5a                   	pop    edx
c0012310:	5b                   	pop    ebx
c0012311:	5e                   	pop    esi
c0012312:	c3                   	ret    
c0012313:	90                   	nop

c0012314 <LogicalDisk::unmount()>:
c0012314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012318:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012322:	c3                   	ret    
c0012323:	90                   	nop

c0012324 <LogicalDisk::unassignDriveLetter()>:
c0012324:	57                   	push   edi
c0012325:	56                   	push   esi
c0012326:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001232a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012331:	84 c9                	test   cl,cl
c0012333:	75 0f                	jne    c0012344 <LogicalDisk::unassignDriveLetter()+0x20>
c0012335:	c7 44 24 0c 6a 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c6a
c001233d:	5e                   	pop    esi
c001233e:	5f                   	pop    edi
c001233f:	e9 0a 32 00 00       	jmp    c001554e <Krnl::panic(char const*)>
c0012344:	83 e9 41             	sub    ecx,0x41
c0012347:	b8 01 00 00 00       	mov    eax,0x1
c001234c:	d3 e0                	shl    eax,cl
c001234e:	89 c7                	mov    edi,eax
c0012350:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012357:	c1 ff 1f             	sar    edi,0x1f
c001235a:	c7 04 8d 80 48 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb780],0x0
c0012365:	89 fe                	mov    esi,edi
c0012367:	f7 d6                	not    esi
c0012369:	f7 d0                	not    eax
c001236b:	21 35 64 48 02 c0    	and    DWORD PTR ds:0xc0024864,esi
c0012371:	5e                   	pop    esi
c0012372:	21 05 60 48 02 c0    	and    DWORD PTR ds:0xc0024860,eax
c0012378:	5f                   	pop    edi
c0012379:	c3                   	ret    

c001237a <LogicalDisk::read(unsigned long long, int, void*)>:
c001237a:	57                   	push   edi
c001237b:	56                   	push   esi
c001237c:	53                   	push   ebx
c001237d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012381:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012385:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012389:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001238d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012393:	77 41                	ja     c00123d6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012395:	99                   	cdq    
c0012396:	01 c8                	add    eax,ecx
c0012398:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001239e:	11 da                	adc    edx,ebx
c00123a0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00123a6:	19 d7                	sbb    edi,edx
c00123a8:	72 33                	jb     c00123dd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00123aa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00123b0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00123b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00123ba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00123be:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00123c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00123ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00123ce:	5b                   	pop    ebx
c00123cf:	5e                   	pop    esi
c00123d0:	5f                   	pop    edi
c00123d1:	e9 9a 09 00 00       	jmp    c0012d70 <VCache::read(unsigned long long, int, void*)>
c00123d6:	b8 05 00 00 00       	mov    eax,0x5
c00123db:	eb 05                	jmp    c00123e2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00123dd:	b8 07 00 00 00       	mov    eax,0x7
c00123e2:	5b                   	pop    ebx
c00123e3:	5e                   	pop    esi
c00123e4:	5f                   	pop    edi
c00123e5:	c3                   	ret    

c00123e6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00123e6:	57                   	push   edi
c00123e7:	56                   	push   esi
c00123e8:	53                   	push   ebx
c00123e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00123ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00123f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00123f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123f9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00123ff:	77 41                	ja     c0012442 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012401:	99                   	cdq    
c0012402:	01 c8                	add    eax,ecx
c0012404:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001240a:	11 da                	adc    edx,ebx
c001240c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012412:	19 d7                	sbb    edi,edx
c0012414:	72 33                	jb     c0012449 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012416:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001241c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012422:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012426:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001242a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012430:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012436:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001243a:	5b                   	pop    ebx
c001243b:	5e                   	pop    esi
c001243c:	5f                   	pop    edi
c001243d:	e9 4a 08 00 00       	jmp    c0012c8c <VCache::write(unsigned long long, int, void*)>
c0012442:	b8 05 00 00 00       	mov    eax,0x5
c0012447:	eb 05                	jmp    c001244e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012449:	b8 07 00 00 00       	mov    eax,0x7
c001244e:	5b                   	pop    ebx
c001244f:	5e                   	pop    esi
c0012450:	5f                   	pop    edi
c0012451:	c3                   	ret    

c0012452 <Mouse::Mouse(char const*)>:
c0012452:	83 ec 0c             	sub    esp,0xc
c0012455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012459:	83 ec 08             	sub    esp,0x8
c001245c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012460:	50                   	push   eax
c0012461:	e8 f8 e2 ff ff       	call   c001075e <Device::Device(char const*)>
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	ba c0 1c 02 c0       	mov    edx,0xc0021cc0
c001246e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012472:	89 10                	mov    DWORD PTR [eax],edx
c0012474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012478:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012482:	90                   	nop
c0012483:	83 c4 0c             	add    esp,0xc
c0012486:	c3                   	ret    
c0012487:	90                   	nop

c0012488 <Mouse::~Mouse()>:
c0012488:	83 ec 0c             	sub    esp,0xc
c001248b:	ba c0 1c 02 c0       	mov    edx,0xc0021cc0
c0012490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012494:	89 10                	mov    DWORD PTR [eax],edx
c0012496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001249a:	83 ec 0c             	sub    esp,0xc
c001249d:	50                   	push   eax
c001249e:	e8 71 df ff ff       	call   c0010414 <Device::~Device()>
c00124a3:	83 c4 10             	add    esp,0x10
c00124a6:	90                   	nop
c00124a7:	83 c4 0c             	add    esp,0xc
c00124aa:	c3                   	ret    
c00124ab:	90                   	nop

c00124ac <Mouse::~Mouse()>:
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	83 ec 0c             	sub    esp,0xc
c00124b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124b6:	e8 cd ff ff ff       	call   c0012488 <Mouse::~Mouse()>
c00124bb:	83 c4 10             	add    esp,0x10
c00124be:	83 ec 08             	sub    esp,0x8
c00124c1:	68 58 01 00 00       	push   0x158
c00124c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ca:	e8 64 cb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	83 c4 0c             	add    esp,0xc
c00124d5:	c3                   	ret    

c00124d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00124d6:	55                   	push   ebp
c00124d7:	57                   	push   edi
c00124d8:	56                   	push   esi
c00124d9:	53                   	push   ebx
c00124da:	81 ec 28 01 00 00    	sub    esp,0x128
c00124e0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00124e7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00124ee:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00124f5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00124fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012500:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012504:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001250b:	e8 40 e3 ff ff       	call   c0010850 <Device::getName()>
c0012510:	5a                   	pop    edx
c0012511:	59                   	pop    ecx
c0012512:	50                   	push   eax
c0012513:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012517:	55                   	push   ebp
c0012518:	e8 8a e1 fe ff       	call   c00006a7 <strcpy>
c001251d:	5b                   	pop    ebx
c001251e:	58                   	pop    eax
c001251f:	68 e4 1c 02 c0       	push   0xc0021ce4
c0012524:	55                   	push   ebp
c0012525:	e8 34 e2 fe ff       	call   c000075e <strcat>
c001252a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012531:	e8 ee ca ff ff       	call   c000f024 <operator new(unsigned long)>
c0012536:	83 c4 0c             	add    esp,0xc
c0012539:	89 c3                	mov    ebx,eax
c001253b:	57                   	push   edi
c001253c:	56                   	push   esi
c001253d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012545:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001254c:	55                   	push   ebp
c001254d:	50                   	push   eax
c001254e:	e8 e3 fb ff ff       	call   c0012136 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012553:	83 c4 14             	add    esp,0x14
c0012556:	53                   	push   ebx
c0012557:	e8 90 fc ff ff       	call   c00121ec <LogicalDisk::assignDriveLetter()>
c001255c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001255f:	e8 3e fd ff ff       	call   c00122a2 <LogicalDisk::mount()>
c0012564:	58                   	pop    eax
c0012565:	5a                   	pop    edx
c0012566:	53                   	push   ebx
c0012567:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001256e:	e8 fb df ff ff       	call   c001056e <Device::addChild(Device*)>
c0012573:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012579:	5b                   	pop    ebx
c001257a:	5e                   	pop    esi
c001257b:	5f                   	pop    edi
c001257c:	5d                   	pop    ebp
c001257d:	c3                   	ret    

c001257e <createPartitionsForDisk(PhysicalDisk*)>:
c001257e:	55                   	push   ebp
c001257f:	57                   	push   edi
c0012580:	56                   	push   esi
c0012581:	53                   	push   ebx
c0012582:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012588:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001258f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012595:	3d 00 02 00 00       	cmp    eax,0x200
c001259a:	74 27                	je     c00125c3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001259c:	83 ec 10             	sub    esp,0x10
c001259f:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00125a5:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00125ab:	99                   	cdq    
c00125ac:	52                   	push   edx
c00125ad:	0f a4 f7 0a          	shld   edi,esi,0xa
c00125b1:	50                   	push   eax
c00125b2:	89 fd                	mov    ebp,edi
c00125b4:	c1 e6 0a             	shl    esi,0xa
c00125b7:	55                   	push   ebp
c00125b8:	56                   	push   esi
c00125b9:	e8 5e ca 00 00       	call   c001f01c <__udivdi3>
c00125be:	e9 b1 00 00 00       	jmp    c0012674 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00125c3:	83 ec 0c             	sub    esp,0xc
c00125c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125c8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00125cc:	56                   	push   esi
c00125cd:	6a 01                	push   0x1
c00125cf:	6a 00                	push   0x0
c00125d1:	6a 00                	push   0x0
c00125d3:	53                   	push   ebx
c00125d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00125d7:	83 c4 20             	add    esp,0x20
c00125da:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00125e2:	75 0a                	jne    c00125ee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00125e4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00125ec:	74 2c                	je     c001261a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00125ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00125f4:	83 ec 10             	sub    esp,0x10
c00125f7:	89 f7                	mov    edi,esi
c00125f9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00125ff:	c1 ff 1f             	sar    edi,0x1f
c0012602:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012608:	57                   	push   edi
c0012609:	0f a4 c2 0a          	shld   edx,eax,0xa
c001260d:	c1 e0 0a             	shl    eax,0xa
c0012610:	56                   	push   esi
c0012611:	52                   	push   edx
c0012612:	50                   	push   eax
c0012613:	e8 04 ca 00 00       	call   c001f01c <__udivdi3>
c0012618:	eb 5a                	jmp    c0012674 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001261a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012621:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012628:	83 e0 7f             	and    eax,0x7f
c001262b:	83 e1 7f             	and    ecx,0x7f
c001262e:	01 c1                	add    ecx,eax
c0012630:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012637:	83 e0 7f             	and    eax,0x7f
c001263a:	01 c1                	add    ecx,eax
c001263c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012643:	83 e0 7f             	and    eax,0x7f
c0012646:	00 c1                	add    cl,al
c0012648:	74 41                	je     c001268b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001264a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012650:	83 ec 10             	sub    esp,0x10
c0012653:	89 f7                	mov    edi,esi
c0012655:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001265b:	c1 ff 1f             	sar    edi,0x1f
c001265e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012664:	57                   	push   edi
c0012665:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012669:	c1 e0 0a             	shl    eax,0xa
c001266c:	56                   	push   esi
c001266d:	52                   	push   edx
c001266e:	50                   	push   eax
c001266f:	e8 a8 c9 00 00       	call   c001f01c <__udivdi3>
c0012674:	83 c4 14             	add    esp,0x14
c0012677:	52                   	push   edx
c0012678:	50                   	push   eax
c0012679:	6a 00                	push   0x0
c001267b:	6a 00                	push   0x0
c001267d:	53                   	push   ebx
c001267e:	e8 53 fe ff ff       	call   c00124d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012683:	83 c4 20             	add    esp,0x20
c0012686:	e9 79 01 00 00       	jmp    c0012804 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001268b:	89 f0                	mov    eax,esi
c001268d:	31 f6                	xor    esi,esi
c001268f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012696:	75 02                	jne    c001269a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012698:	89 f1                	mov    ecx,esi
c001269a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00126a1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00126a8:	c1 e2 08             	shl    edx,0x8
c00126ab:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00126b3:	c1 e7 10             	shl    edi,0x10
c00126b6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00126be:	09 fa                	or     edx,edi
c00126c0:	83 c0 10             	add    eax,0x10
c00126c3:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c00126ca:	09 fa                	or     edx,edi
c00126cc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00126d3:	c1 e7 18             	shl    edi,0x18
c00126d6:	09 fa                	or     edx,edi
c00126d8:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00126dc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00126e3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00126ea:	c1 e7 10             	shl    edi,0x10
c00126ed:	c1 e2 08             	shl    edx,0x8
c00126f0:	09 fa                	or     edx,edi
c00126f2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00126f9:	09 fa                	or     edx,edi
c00126fb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012702:	c1 e7 18             	shl    edi,0x18
c0012705:	09 fa                	or     edx,edi
c0012707:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001270b:	46                   	inc    esi
c001270c:	83 fe 04             	cmp    esi,0x4
c001270f:	0f 85 7a ff ff ff    	jne    c001268f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012719:	83 f0 01             	xor    eax,0x1
c001271c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012720:	75 57                	jne    c0012779 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012726:	83 f0 01             	xor    eax,0x1
c0012729:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001272d:	75 4a                	jne    c0012779 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001272f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012735:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012739:	89 f7                	mov    edi,esi
c001273b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012743:	c1 ff 1f             	sar    edi,0x1f
c0012746:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001274e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012754:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001275a:	57                   	push   edi
c001275b:	56                   	push   esi
c001275c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012760:	c1 e0 0a             	shl    eax,0xa
c0012763:	52                   	push   edx
c0012764:	50                   	push   eax
c0012765:	e8 b2 c8 00 00       	call   c001f01c <__udivdi3>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012771:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012775:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012779:	84 c9                	test   cl,cl
c001277b:	74 53                	je     c00127d0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001277d:	0f b6 c9             	movzx  ecx,cl
c0012780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012784:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012788:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001278c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012790:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012794:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012798:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001279c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00127a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00127ac:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00127b0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00127b4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00127b8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00127bc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00127c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00127c8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00127cc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00127d0:	31 ed                	xor    ebp,ebp
c00127d2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00127d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00127da:	89 f8                	mov    eax,edi
c00127dc:	09 f0                	or     eax,esi
c00127de:	74 1e                	je     c00127fe <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00127e0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00127e4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00127e8:	89 d1                	mov    ecx,edx
c00127ea:	09 c1                	or     ecx,eax
c00127ec:	74 10                	je     c00127fe <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00127ee:	83 ec 0c             	sub    esp,0xc
c00127f1:	57                   	push   edi
c00127f2:	56                   	push   esi
c00127f3:	52                   	push   edx
c00127f4:	50                   	push   eax
c00127f5:	53                   	push   ebx
c00127f6:	e8 db fc ff ff       	call   c00124d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00127fb:	83 c4 20             	add    esp,0x20
c00127fe:	45                   	inc    ebp
c00127ff:	83 fd 04             	cmp    ebp,0x4
c0012802:	75 ce                	jne    c00127d2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012804:	81 c4 5c 02 00 00    	add    esp,0x25c
c001280a:	5b                   	pop    ebx
c001280b:	5e                   	pop    esi
c001280c:	5f                   	pop    edi
c001280d:	5d                   	pop    ebp
c001280e:	c3                   	ret    
c001280f:	90                   	nop

c0012810 <Timer::Timer(char const*)>:
c0012810:	83 ec 0c             	sub    esp,0xc
c0012813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012817:	83 ec 08             	sub    esp,0x8
c001281a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001281e:	50                   	push   eax
c001281f:	e8 3a df ff ff       	call   c001075e <Device::Device(char const*)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	ba f8 1c 02 c0       	mov    edx,0xc0021cf8
c001282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012830:	89 10                	mov    DWORD PTR [eax],edx
c0012832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012836:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012840:	90                   	nop
c0012841:	83 c4 0c             	add    esp,0xc
c0012844:	c3                   	ret    
c0012845:	90                   	nop

c0012846 <Timer::~Timer()>:
c0012846:	83 ec 0c             	sub    esp,0xc
c0012849:	ba f8 1c 02 c0       	mov    edx,0xc0021cf8
c001284e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012852:	89 10                	mov    DWORD PTR [eax],edx
c0012854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012858:	83 ec 0c             	sub    esp,0xc
c001285b:	50                   	push   eax
c001285c:	e8 b3 db ff ff       	call   c0010414 <Device::~Device()>
c0012861:	83 c4 10             	add    esp,0x10
c0012864:	90                   	nop
c0012865:	83 c4 0c             	add    esp,0xc
c0012868:	c3                   	ret    
c0012869:	90                   	nop

c001286a <Timer::~Timer()>:
c001286a:	83 ec 0c             	sub    esp,0xc
c001286d:	83 ec 0c             	sub    esp,0xc
c0012870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012874:	e8 cd ff ff ff       	call   c0012846 <Timer::~Timer()>
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	83 ec 08             	sub    esp,0x8
c001287f:	68 5c 01 00 00       	push   0x15c
c0012884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012888:	e8 a6 c7 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	83 c4 0c             	add    esp,0xc
c0012893:	c3                   	ret    

c0012894 <Timer::read()>:
c0012894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012898:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001289e:	c3                   	ret    

c001289f <timerHandler(unsigned long long)>:
c001289f:	55                   	push   ebp
c00128a0:	57                   	push   edi
c00128a1:	56                   	push   esi
c00128a2:	53                   	push   ebx
c00128a3:	83 ec 0c             	sub    esp,0xc
c00128a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128aa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00128ae:	01 35 f0 48 02 c0    	add    DWORD PTR ds:0xc00248f0,esi
c00128b4:	11 3d f4 48 02 c0    	adc    DWORD PTR ds:0xc00248f4,edi
c00128ba:	80 3d 8d 42 02 c0 00 	cmp    BYTE PTR ds:0xc002428d,0x0
c00128c1:	0f 84 07 01 00 00    	je     c00129ce <timerHandler(unsigned long long)+0x12f>
c00128c7:	e8 b2 5c 00 00       	call   c001857e <lockStuff()>
c00128cc:	83 ec 0c             	sub    esp,0xc
c00128cf:	68 bc 56 02 c0       	push   0xc00256bc
c00128d4:	e8 17 ce 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00128d9:	c7 04 24 bc 56 02 c0 	mov    DWORD PTR [esp],0xc00256bc
c00128e0:	89 c3                	mov    ebx,eax
c00128e2:	e8 11 ce 00 00       	call   c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	84 c0                	test   al,al
c00128ec:	74 60                	je     c001294e <timerHandler(unsigned long long)+0xaf>
c00128ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00128f4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00128f7:	85 c0                	test   eax,eax
c00128f9:	0f 85 91 00 00 00    	jne    c0012990 <timerHandler(unsigned long long)+0xf1>
c00128ff:	e9 be 00 00 00       	jmp    c00129c2 <timerHandler(unsigned long long)+0x123>
c0012904:	83 ec 0c             	sub    esp,0xc
c0012907:	55                   	push   ebp
c0012908:	e8 6e 62 00 00       	call   c0018b7b <unblockTask(ThreadControlBlock*)>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	39 eb                	cmp    ebx,ebp
c0012912:	75 12                	jne    c0012926 <timerHandler(unsigned long long)+0x87>
c0012914:	83 ec 0c             	sub    esp,0xc
c0012917:	68 bc 56 02 c0       	push   0xc00256bc
c001291c:	e8 cf cd 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012921:	89 c3                	mov    ebx,eax
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	83 ec 0c             	sub    esp,0xc
c0012929:	68 bc 56 02 c0       	push   0xc00256bc
c001292e:	e8 c5 cd 00 00       	call   c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	84 c0                	test   al,al
c0012938:	75 b4                	jne    c00128ee <timerHandler(unsigned long long)+0x4f>
c001293a:	83 ec 0c             	sub    esp,0xc
c001293d:	68 bc 56 02 c0       	push   0xc00256bc
c0012942:	e8 a9 cd 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	39 d8                	cmp    eax,ebx
c001294c:	74 a0                	je     c00128ee <timerHandler(unsigned long long)+0x4f>
c001294e:	83 ec 0c             	sub    esp,0xc
c0012951:	68 bc 56 02 c0       	push   0xc00256bc
c0012956:	e8 95 cd 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001295b:	89 c5                	mov    ebp,eax
c001295d:	c7 04 24 bc 56 02 c0 	mov    DWORD PTR [esp],0xc00256bc
c0012964:	e8 ab cd 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001296f:	a1 f4 48 02 c0       	mov    eax,ds:0xc00248f4
c0012974:	39 15 f0 48 02 c0    	cmp    DWORD PTR ds:0xc00248f0,edx
c001297a:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001297d:	19 c8                	sbb    eax,ecx
c001297f:	73 83                	jae    c0012904 <timerHandler(unsigned long long)+0x65>
c0012981:	50                   	push   eax
c0012982:	50                   	push   eax
c0012983:	55                   	push   ebp
c0012984:	68 bc 56 02 c0       	push   0xc00256bc
c0012989:	e8 34 ce 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001298e:	eb 93                	jmp    c0012923 <timerHandler(unsigned long long)+0x84>
c0012990:	80 3d 8c 42 02 c0 00 	cmp    BYTE PTR ds:0xc002428c,0x0
c0012997:	74 29                	je     c00129c2 <timerHandler(unsigned long long)+0x123>
c0012999:	39 c6                	cmp    esi,eax
c001299b:	bb 00 00 00 00       	mov    ebx,0x0
c00129a0:	19 df                	sbb    edi,ebx
c00129a2:	72 19                	jb     c00129bd <timerHandler(unsigned long long)+0x11e>
c00129a4:	e8 ae 5b 00 00       	call   c0018557 <lockScheduler()>
c00129a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129ae:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00129b1:	e8 ea 5e 00 00       	call   c00188a0 <schedule()>
c00129b6:	e8 9e 5b 00 00       	call   c0018559 <unlockScheduler()>
c00129bb:	eb 05                	jmp    c00129c2 <timerHandler(unsigned long long)+0x123>
c00129bd:	29 f0                	sub    eax,esi
c00129bf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00129c2:	83 c4 0c             	add    esp,0xc
c00129c5:	5b                   	pop    ebx
c00129c6:	5e                   	pop    esi
c00129c7:	5f                   	pop    edi
c00129c8:	5d                   	pop    ebp
c00129c9:	e9 57 5f 00 00       	jmp    c0018925 <unlockStuff()>
c00129ce:	83 c4 0c             	add    esp,0xc
c00129d1:	5b                   	pop    ebx
c00129d2:	5e                   	pop    esi
c00129d3:	5f                   	pop    edi
c00129d4:	5d                   	pop    ebp
c00129d5:	c3                   	ret    

c00129d6 <setupTimer(int)>:
c00129d6:	57                   	push   edi
c00129d7:	56                   	push   esi
c00129d8:	53                   	push   ebx
c00129d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00129dd:	e8 fd 19 00 00       	call   c00143df <getCPUNumber()>
c00129e2:	85 c0                	test   eax,eax
c00129e4:	74 32                	je     c0012a18 <setupTimer(int)+0x42>
c00129e6:	83 ec 0c             	sub    esp,0xc
c00129e9:	68 60 01 00 00       	push   0x160
c00129ee:	e8 31 c6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00129f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00129f6:	89 c3                	mov    ebx,eax
c00129f8:	e8 a7 c0 00 00       	call   c001eaa4 <APICTimer::APICTimer()>
c00129fd:	6a 00                	push   0x0
c00129ff:	6a 00                	push   0x0
c0012a01:	56                   	push   esi
c0012a02:	53                   	push   ebx
c0012a03:	e8 96 bf 00 00       	call   c001e99e <APICTimer::open(int, int, void*)>
c0012a08:	83 c4 20             	add    esp,0x20
c0012a0b:	e8 d2 19 00 00       	call   c00143e2 <thisCPU()>
c0012a10:	56                   	push   esi
c0012a11:	56                   	push   esi
c0012a12:	53                   	push   ebx
c0012a13:	e9 96 00 00 00       	jmp    c0012aae <setupTimer(int)+0xd8>
c0012a18:	e8 c5 19 00 00       	call   c00143e2 <thisCPU()>
c0012a1d:	83 ec 0c             	sub    esp,0xc
c0012a20:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012a26:	e8 25 de ff ff       	call   c0010850 <Device::getName()>
c0012a2b:	83 c4 10             	add    esp,0x10
c0012a2e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012a31:	0f 85 87 00 00 00    	jne    c0012abe <setupTimer(int)+0xe8>
c0012a37:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0012a3c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012a43:	74 79                	je     c0012abe <setupTimer(int)+0xe8>
c0012a45:	83 ec 0c             	sub    esp,0xc
c0012a48:	68 5c 01 00 00       	push   0x15c
c0012a4d:	e8 d2 c5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012a52:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a55:	89 c3                	mov    ebx,eax
c0012a57:	e8 a4 c1 00 00       	call   c001ec00 <PIT::PIT()>
c0012a5c:	59                   	pop    ecx
c0012a5d:	5f                   	pop    edi
c0012a5e:	53                   	push   ebx
c0012a5f:	ff 35 88 42 02 c0    	push   DWORD PTR ds:0xc0024288
c0012a65:	e8 04 db ff ff       	call   c001056e <Device::addChild(Device*)>
c0012a6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a6c:	6a 00                	push   0x0
c0012a6e:	6a 00                	push   0x0
c0012a70:	56                   	push   esi
c0012a71:	53                   	push   ebx
c0012a72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012a75:	83 c4 14             	add    esp,0x14
c0012a78:	68 60 01 00 00       	push   0x160
c0012a7d:	e8 a2 c5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012a82:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a85:	89 c7                	mov    edi,eax
c0012a87:	e8 18 c0 00 00       	call   c001eaa4 <APICTimer::APICTimer()>
c0012a8c:	6a 00                	push   0x0
c0012a8e:	6a 00                	push   0x0
c0012a90:	56                   	push   esi
c0012a91:	57                   	push   edi
c0012a92:	e8 07 bf 00 00       	call   c001e99e <APICTimer::open(int, int, void*)>
c0012a97:	83 c4 20             	add    esp,0x20
c0012a9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a9c:	6a 00                	push   0x0
c0012a9e:	6a 00                	push   0x0
c0012aa0:	6a 00                	push   0x0
c0012aa2:	53                   	push   ebx
c0012aa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012aa6:	e8 37 19 00 00       	call   c00143e2 <thisCPU()>
c0012aab:	5a                   	pop    edx
c0012aac:	59                   	pop    ecx
c0012aad:	57                   	push   edi
c0012aae:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012ab4:	e8 b5 da ff ff       	call   c001056e <Device::addChild(Device*)>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	eb 33                	jmp    c0012af1 <setupTimer(int)+0x11b>
c0012abe:	83 ec 0c             	sub    esp,0xc
c0012ac1:	68 5c 01 00 00       	push   0x15c
c0012ac6:	e8 59 c5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012acb:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ace:	89 c3                	mov    ebx,eax
c0012ad0:	e8 2b c1 00 00       	call   c001ec00 <PIT::PIT()>
c0012ad5:	58                   	pop    eax
c0012ad6:	5a                   	pop    edx
c0012ad7:	53                   	push   ebx
c0012ad8:	ff 35 88 42 02 c0    	push   DWORD PTR ds:0xc0024288
c0012ade:	e8 8b da ff ff       	call   c001056e <Device::addChild(Device*)>
c0012ae3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ae5:	6a 00                	push   0x0
c0012ae7:	6a 00                	push   0x0
c0012ae9:	56                   	push   esi
c0012aea:	53                   	push   ebx
c0012aeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012aee:	83 c4 20             	add    esp,0x20
c0012af1:	89 d8                	mov    eax,ebx
c0012af3:	5b                   	pop    ebx
c0012af4:	5e                   	pop    esi
c0012af5:	5f                   	pop    edi
c0012af6:	c3                   	ret    
c0012af7:	90                   	nop

c0012af8 <VCache::VCache(PhysicalDisk*)>:
c0012af8:	53                   	push   ebx
c0012af9:	83 ec 08             	sub    esp,0x8
c0012afc:	ba 28 1d 02 c0       	mov    edx,0xc0021d28
c0012b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b05:	89 10                	mov    DWORD PTR [eax],edx
c0012b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b0b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b16:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b21:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012b28:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b33:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012b3a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b45:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012b54:	83 ec 0c             	sub    esp,0xc
c0012b57:	6a 10                	push   0x10
c0012b59:	e8 c6 c4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	89 c3                	mov    ebx,eax
c0012b63:	83 ec 0c             	sub    esp,0xc
c0012b66:	53                   	push   ebx
c0012b67:	e8 0e 5b 00 00       	call   c001867a <Mutex::Mutex()>
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b73:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b85:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b90:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ba1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012ba7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012bb1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012bb4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbb:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bc3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012bc9:	c1 e0 06             	shl    eax,0x6
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	50                   	push   eax
c0012bd0:	e8 52 93 ff ff       	call   c000bf27 <malloc>
c0012bd5:	83 c4 10             	add    esp,0x10
c0012bd8:	89 c2                	mov    edx,eax
c0012bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bde:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012be1:	90                   	nop
c0012be2:	83 c4 08             	add    esp,0x8
c0012be5:	5b                   	pop    ebx
c0012be6:	c3                   	ret    
c0012be7:	90                   	nop

c0012be8 <VCache::writeWriteBuffer()>:
c0012be8:	53                   	push   ebx
c0012be9:	83 ec 14             	sub    esp,0x14
c0012bec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012bf0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012bf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bf5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012bf8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012bfb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012bfe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012c01:	50                   	push   eax
c0012c02:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012c05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012c0c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012c13:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012c17:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012c1e:	83 c4 28             	add    esp,0x28
c0012c21:	5b                   	pop    ebx
c0012c22:	c3                   	ret    
c0012c23:	90                   	nop

c0012c24 <VCache::~VCache()>:
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	ba 28 1d 02 c0       	mov    edx,0xc0021d28
c0012c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c30:	89 10                	mov    DWORD PTR [eax],edx
c0012c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c36:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012c39:	84 c0                	test   al,al
c0012c3b:	74 0f                	je     c0012c4c <VCache::~VCache()+0x28>
c0012c3d:	83 ec 0c             	sub    esp,0xc
c0012c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c44:	e8 9f ff ff ff       	call   c0012be8 <VCache::writeWriteBuffer()>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c50:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012c53:	83 ec 0c             	sub    esp,0xc
c0012c56:	50                   	push   eax
c0012c57:	e8 db 92 ff ff       	call   c000bf37 <free>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	90                   	nop
c0012c60:	83 c4 0c             	add    esp,0xc
c0012c63:	c3                   	ret    

c0012c64 <VCache::~VCache()>:
c0012c64:	83 ec 0c             	sub    esp,0xc
c0012c67:	83 ec 0c             	sub    esp,0xc
c0012c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c6e:	e8 b1 ff ff ff       	call   c0012c24 <VCache::~VCache()>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	83 ec 08             	sub    esp,0x8
c0012c79:	6a 30                	push   0x30
c0012c7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7f:	e8 af c3 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012c84:	83 c4 10             	add    esp,0x10
c0012c87:	83 c4 0c             	add    esp,0xc
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <VCache::write(unsigned long long, int, void*)>:
c0012c8c:	55                   	push   ebp
c0012c8d:	57                   	push   edi
c0012c8e:	56                   	push   esi
c0012c8f:	53                   	push   ebx
c0012c90:	83 ec 28             	sub    esp,0x28
c0012c93:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012c97:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012c9b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012c9f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012ca3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012ca6:	e8 3d 5e 00 00       	call   c0018ae8 <Semaphore::acquire()>
c0012cab:	83 c4 10             	add    esp,0x10
c0012cae:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012cb2:	74 66                	je     c0012d1a <VCache::write(unsigned long long, int, void*)+0x8e>
c0012cb4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012cb7:	99                   	cdq    
c0012cb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cbc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0012cbf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0012cc2:	89 c1                	mov    ecx,eax
c0012cc4:	31 f1                	xor    ecx,esi
c0012cc6:	89 d0                	mov    eax,edx
c0012cc8:	31 f8                	xor    eax,edi
c0012cca:	89 ca                	mov    edx,ecx
c0012ccc:	09 c2                	or     edx,eax
c0012cce:	75 3e                	jne    c0012d0e <VCache::write(unsigned long long, int, void*)+0x82>
c0012cd0:	83 fd 01             	cmp    ebp,0x1
c0012cd3:	75 39                	jne    c0012d0e <VCache::write(unsigned long long, int, void*)+0x82>
c0012cd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012cd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012cde:	51                   	push   ecx
c0012cdf:	50                   	push   eax
c0012ce0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012ce4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ce8:	0f af c8             	imul   ecx,eax
c0012ceb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012cee:	51                   	push   ecx
c0012cef:	e8 de d8 fe ff       	call   c00005d2 <memcpy>
c0012cf4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	40                   	inc    eax
c0012cfb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012cfe:	83 f8 40             	cmp    eax,0x40
c0012d01:	75 57                	jne    c0012d5a <VCache::write(unsigned long long, int, void*)+0xce>
c0012d03:	83 ec 0c             	sub    esp,0xc
c0012d06:	53                   	push   ebx
c0012d07:	e8 dc fe ff ff       	call   c0012be8 <VCache::writeWriteBuffer()>
c0012d0c:	eb 34                	jmp    c0012d42 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	53                   	push   ebx
c0012d12:	e8 d1 fe ff ff       	call   c0012be8 <VCache::writeWriteBuffer()>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012d1d:	83 fd 3f             	cmp    ebp,0x3f
c0012d20:	7f 25                	jg     c0012d47 <VCache::write(unsigned long long, int, void*)+0xbb>
c0012d22:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012d25:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012d28:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012d2b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012d2f:	52                   	push   edx
c0012d30:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012d36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012d3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012d3d:	e8 90 d8 fe ff       	call   c00005d2 <memcpy>
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	eb 13                	jmp    c0012d5a <VCache::write(unsigned long long, int, void*)+0xce>
c0012d47:	83 ec 0c             	sub    esp,0xc
c0012d4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d50:	55                   	push   ebp
c0012d51:	57                   	push   edi
c0012d52:	56                   	push   esi
c0012d53:	50                   	push   eax
c0012d54:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012d57:	83 c4 20             	add    esp,0x20
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012d60:	e8 0f 63 00 00       	call   c0019074 <Semaphore::release()>
c0012d65:	83 c4 2c             	add    esp,0x2c
c0012d68:	5b                   	pop    ebx
c0012d69:	31 c0                	xor    eax,eax
c0012d6b:	5e                   	pop    esi
c0012d6c:	5f                   	pop    edi
c0012d6d:	5d                   	pop    ebp
c0012d6e:	c3                   	ret    
c0012d6f:	90                   	nop

c0012d70 <VCache::read(unsigned long long, int, void*)>:
c0012d70:	57                   	push   edi
c0012d71:	56                   	push   esi
c0012d72:	53                   	push   ebx
c0012d73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d7f:	83 ec 0c             	sub    esp,0xc
c0012d82:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012d85:	e8 5e 5d 00 00       	call   c0018ae8 <Semaphore::acquire()>
c0012d8a:	83 c4 10             	add    esp,0x10
c0012d8d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012d91:	74 0c                	je     c0012d9f <VCache::read(unsigned long long, int, void*)+0x2f>
c0012d93:	83 ec 0c             	sub    esp,0xc
c0012d96:	53                   	push   ebx
c0012d97:	e8 4c fe ff ff       	call   c0012be8 <VCache::writeWriteBuffer()>
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012da7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012dab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012daf:	57                   	push   edi
c0012db0:	56                   	push   esi
c0012db1:	50                   	push   eax
c0012db2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012db5:	83 c4 14             	add    esp,0x14
c0012db8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012dbb:	e8 b4 62 00 00       	call   c0019074 <Semaphore::release()>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	5b                   	pop    ebx
c0012dc4:	31 c0                	xor    eax,eax
c0012dc6:	5e                   	pop    esi
c0012dc7:	5f                   	pop    edi
c0012dc8:	c3                   	ret    
c0012dc9:	90                   	nop

c0012dca <Video::putrect(int, int, int, int, unsigned int)>:
c0012dca:	55                   	push   ebp
c0012dcb:	57                   	push   edi
c0012dcc:	56                   	push   esi
c0012dcd:	53                   	push   ebx
c0012dce:	83 ec 1c             	sub    esp,0x1c
c0012dd1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012dd5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dd9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012ddd:	01 e8                	add    eax,ebp
c0012ddf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012de3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012de7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012deb:	01 df                	add    edi,ebx
c0012ded:	39 fb                	cmp    ebx,edi
c0012def:	7d 1b                	jge    c0012e0c <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012df1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012df5:	7d 12                	jge    c0012e09 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012df7:	8b 16                	mov    edx,DWORD PTR [esi]
c0012df9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012dfd:	53                   	push   ebx
c0012dfe:	55                   	push   ebp
c0012dff:	45                   	inc    ebp
c0012e00:	56                   	push   esi
c0012e01:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012e04:	83 c4 10             	add    esp,0x10
c0012e07:	eb e8                	jmp    c0012df1 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012e09:	43                   	inc    ebx
c0012e0a:	eb e1                	jmp    c0012ded <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012e0c:	83 c4 1c             	add    esp,0x1c
c0012e0f:	5b                   	pop    ebx
c0012e10:	5e                   	pop    esi
c0012e11:	5f                   	pop    edi
c0012e12:	5d                   	pop    ebp
c0012e13:	c3                   	ret    

c0012e14 <Video::blit(unsigned int*, int, int, int, int)>:
c0012e14:	55                   	push   ebp
c0012e15:	57                   	push   edi
c0012e16:	56                   	push   esi
c0012e17:	53                   	push   ebx
c0012e18:	83 ec 1c             	sub    esp,0x1c
c0012e1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012e1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012e23:	85 c0                	test   eax,eax
c0012e25:	79 02                	jns    c0012e29 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012e27:	31 c0                	xor    eax,eax
c0012e29:	c1 e0 02             	shl    eax,0x2
c0012e2c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e34:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e38:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012e3c:	39 d8                	cmp    eax,ebx
c0012e3e:	7e 49                	jle    c0012e89 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012e40:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012e46:	7c 41                	jl     c0012e89 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012e48:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012e4c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012e50:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012e54:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012e58:	39 f9                	cmp    ecx,edi
c0012e5a:	7e 22                	jle    c0012e7e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012e5c:	83 c5 04             	add    ebp,0x4
c0012e5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012e65:	7c 14                	jl     c0012e7b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012e67:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012e69:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012e70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012e74:	56                   	push   esi
c0012e75:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012e78:	83 c4 10             	add    esp,0x10
c0012e7b:	47                   	inc    edi
c0012e7c:	eb d2                	jmp    c0012e50 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012e7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e82:	43                   	inc    ebx
c0012e83:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012e87:	eb ab                	jmp    c0012e34 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012e89:	83 c4 1c             	add    esp,0x1c
c0012e8c:	5b                   	pop    ebx
c0012e8d:	5e                   	pop    esi
c0012e8e:	5f                   	pop    edi
c0012e8f:	5d                   	pop    ebp
c0012e90:	c3                   	ret    
c0012e91:	90                   	nop

c0012e92 <Video::clearScreen(unsigned int)>:
c0012e92:	57                   	push   edi
c0012e93:	56                   	push   esi
c0012e94:	53                   	push   ebx
c0012e95:	31 db                	xor    ebx,ebx
c0012e97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e9b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012ea1:	7e 1f                	jle    c0012ec2 <Video::clearScreen(unsigned int)+0x30>
c0012ea3:	31 ff                	xor    edi,edi
c0012ea5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012eab:	7e 12                	jle    c0012ebf <Video::clearScreen(unsigned int)+0x2d>
c0012ead:	8b 06                	mov    eax,DWORD PTR [esi]
c0012eaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012eb3:	53                   	push   ebx
c0012eb4:	57                   	push   edi
c0012eb5:	47                   	inc    edi
c0012eb6:	56                   	push   esi
c0012eb7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012eba:	83 c4 10             	add    esp,0x10
c0012ebd:	eb e6                	jmp    c0012ea5 <Video::clearScreen(unsigned int)+0x13>
c0012ebf:	43                   	inc    ebx
c0012ec0:	eb d9                	jmp    c0012e9b <Video::clearScreen(unsigned int)+0x9>
c0012ec2:	5b                   	pop    ebx
c0012ec3:	5e                   	pop    esi
c0012ec4:	5f                   	pop    edi
c0012ec5:	c3                   	ret    

c0012ec6 <Video::putpixel(int, int, unsigned int)>:
c0012ec6:	c7 44 24 04 30 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d30
c0012ece:	e9 86 c2 ff ff       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c0012ed3:	90                   	nop

c0012ed4 <Video::Video(char const*)>:
c0012ed4:	83 ec 0c             	sub    esp,0xc
c0012ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edb:	83 ec 08             	sub    esp,0x8
c0012ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee2:	50                   	push   eax
c0012ee3:	e8 76 d8 ff ff       	call   c001075e <Device::Device(char const*)>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	ba 48 1d 02 c0       	mov    edx,0xc0021d48
c0012ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef4:	89 10                	mov    DWORD PTR [eax],edx
c0012ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efa:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012f04:	90                   	nop
c0012f05:	83 c4 0c             	add    esp,0xc
c0012f08:	c3                   	ret    
c0012f09:	90                   	nop

c0012f0a <Video::~Video()>:
c0012f0a:	83 ec 0c             	sub    esp,0xc
c0012f0d:	ba 48 1d 02 c0       	mov    edx,0xc0021d48
c0012f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f16:	89 10                	mov    DWORD PTR [eax],edx
c0012f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1c:	83 ec 0c             	sub    esp,0xc
c0012f1f:	50                   	push   eax
c0012f20:	e8 ef d4 ff ff       	call   c0010414 <Device::~Device()>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	90                   	nop
c0012f29:	83 c4 0c             	add    esp,0xc
c0012f2c:	c3                   	ret    
c0012f2d:	90                   	nop

c0012f2e <Video::~Video()>:
c0012f2e:	83 ec 0c             	sub    esp,0xc
c0012f31:	83 ec 0c             	sub    esp,0xc
c0012f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f38:	e8 cd ff ff ff       	call   c0012f0a <Video::~Video()>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	83 ec 08             	sub    esp,0x8
c0012f43:	68 64 01 00 00       	push   0x164
c0012f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4c:	e8 e2 c0 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012f51:	83 c4 10             	add    esp,0x10
c0012f54:	83 c4 0c             	add    esp,0xc
c0012f57:	c3                   	ret    

c0012f58 <Video::isMonochrome()>:
c0012f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f5c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012f62:	c3                   	ret    
c0012f63:	90                   	nop

c0012f64 <Video::getWidth()>:
c0012f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f68:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012f6e:	c3                   	ret    
c0012f6f:	90                   	nop

c0012f70 <Video::getHeight()>:
c0012f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f74:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012f7a:	c3                   	ret    
c0012f7b:	90                   	nop

c0012f7c <Video::drawCursor(int, int, unsigned char*, int)>:
c0012f7c:	55                   	push   ebp
c0012f7d:	57                   	push   edi
c0012f7e:	56                   	push   esi
c0012f7f:	53                   	push   ebx
c0012f80:	83 ec 2c             	sub    esp,0x2c
c0012f83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012f87:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012f8b:	83 f8 01             	cmp    eax,0x1
c0012f8e:	19 c9                	sbb    ecx,ecx
c0012f90:	31 db                	xor    ebx,ebx
c0012f92:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012f96:	89 cd                	mov    ebp,ecx
c0012f98:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012fa0:	f7 d5                	not    ebp
c0012fa2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012fa8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012fac:	01 d8                	add    eax,ebx
c0012fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012fb2:	56                   	push   esi
c0012fb3:	e8 b8 ff ff ff       	call   c0012f70 <Video::getHeight()>
c0012fb8:	59                   	pop    ecx
c0012fb9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012fbd:	7e 70                	jle    c001302f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012fbf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012fc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012fc7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012fca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012fd2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012fd9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fdd:	89 f8                	mov    eax,edi
c0012fdf:	83 c0 20             	add    eax,0x20
c0012fe2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fe6:	56                   	push   esi
c0012fe7:	e8 78 ff ff ff       	call   c0012f64 <Video::getWidth()>
c0012fec:	5a                   	pop    edx
c0012fed:	39 c7                	cmp    edi,eax
c0012fef:	7d 34                	jge    c0013025 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012ff1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012ff6:	74 05                	je     c0012ffd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012ff8:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ffa:	55                   	push   ebp
c0012ffb:	eb 0d                	jmp    c001300a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012ffd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0013002:	74 12                	je     c0013016 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0013004:	8b 06                	mov    eax,DWORD PTR [esi]
c0013006:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001300a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001300e:	57                   	push   edi
c001300f:	56                   	push   esi
c0013010:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	47                   	inc    edi
c0013017:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001301b:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001301f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013023:	75 c1                	jne    c0012fe6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013025:	43                   	inc    ebx
c0013026:	83 fb 20             	cmp    ebx,0x20
c0013029:	0f 85 79 ff ff ff    	jne    c0012fa8 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001302f:	83 c4 2c             	add    esp,0x2c
c0013032:	5b                   	pop    ebx
c0013033:	5e                   	pop    esi
c0013034:	5f                   	pop    edi
c0013035:	5d                   	pop    ebp
c0013036:	c3                   	ret    
c0013037:	90                   	nop

c0013038 <ACPI::close(int, int, void*)>:
c0013038:	83 ec 1c             	sub    esp,0x1c
c001303b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013043:	74 0a                	je     c001304f <ACPI::close(int, int, void*)+0x17>
c0013045:	b8 00 00 00 00       	mov    eax,0x0
c001304a:	e9 9e 00 00 00       	jmp    c00130ed <ACPI::close(int, int, void*)+0xb5>
c001304f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013054:	75 37                	jne    c001308d <ACPI::close(int, int, void*)+0x55>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	68 80 1d 02 c0       	push   0xc0021d80
c001305e:	e8 f6 c0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	a1 08 49 02 c0       	mov    eax,ds:0xc0024908
c001306b:	85 c0                	test   eax,eax
c001306d:	74 07                	je     c0013076 <ACPI::close(int, int, void*)+0x3e>
c001306f:	a1 08 49 02 c0       	mov    eax,ds:0xc0024908
c0013074:	ff d0                	call   eax
c0013076:	83 ec 0c             	sub    esp,0xc
c0013079:	68 54 1e 02 c0       	push   0xc0021e54
c001307e:	e8 cb 24 00 00       	call   c001554e <Krnl::panic(char const*)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001308b:	eb 60                	jmp    c00130ed <ACPI::close(int, int, void*)+0xb5>
c001308d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013092:	75 54                	jne    c00130e8 <ACPI::close(int, int, void*)+0xb0>
c0013094:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c0013099:	85 c0                	test   eax,eax
c001309b:	74 07                	je     c00130a4 <ACPI::close(int, int, void*)+0x6c>
c001309d:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c00130a2:	ff d0                	call   eax
c00130a4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00130a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00130ad:	25 ff 00 00 00       	and    eax,0xff
c00130b2:	83 e0 02             	and    eax,0x2
c00130b5:	74 1c                	je     c00130d3 <ACPI::close(int, int, void*)+0x9b>
c00130b7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00130be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130c2:	89 c2                	mov    edx,eax
c00130c4:	ec                   	in     al,dx
c00130c5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00130c9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00130cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00130d1:	eb d6                	jmp    c00130a9 <ACPI::close(int, int, void*)+0x71>
c00130d3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00130da:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00130df:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00130e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130e7:	ee                   	out    dx,al
c00130e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00130ed:	83 c4 1c             	add    esp,0x1c
c00130f0:	c3                   	ret    

c00130f1 <findRSDP()>:
c00130f1:	83 ec 1c             	sub    esp,0x1c
c00130f4:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c00130f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130ff:	83 e0 04             	and    eax,0x4
c0013102:	84 c0                	test   al,al
c0013104:	75 07                	jne    c001310d <findRSDP()+0x1c>
c0013106:	b8 00 00 00 00       	mov    eax,0x0
c001310b:	eb 6a                	jmp    c0013177 <findRSDP()+0x86>
c001310d:	a1 d0 42 02 c0       	mov    eax,ds:0xc00242d0
c0013112:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013117:	7f 1b                	jg     c0013134 <findRSDP()+0x43>
c0013119:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001311e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013124:	83 e2 fb             	and    edx,0xfffffffb
c0013127:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001312d:	b8 00 00 00 00       	mov    eax,0x0
c0013132:	eb 43                	jmp    c0013177 <findRSDP()+0x86>
c0013134:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001313c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013144:	77 2c                	ja     c0013172 <findRSDP()+0x81>
c0013146:	83 ec 04             	sub    esp,0x4
c0013149:	6a 08                	push   0x8
c001314b:	68 8d 1d 02 c0       	push   0xc0021d8d
c0013150:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013154:	e8 16 d4 fe ff       	call   c000056f <memcmp>
c0013159:	83 c4 10             	add    esp,0x10
c001315c:	85 c0                	test   eax,eax
c001315e:	0f 94 c0             	sete   al
c0013161:	84 c0                	test   al,al
c0013163:	74 06                	je     c001316b <findRSDP()+0x7a>
c0013165:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013169:	eb 0c                	jmp    c0013177 <findRSDP()+0x86>
c001316b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013170:	eb ca                	jmp    c001313c <findRSDP()+0x4b>
c0013172:	b8 00 00 00 00       	mov    eax,0x0
c0013177:	83 c4 1c             	add    esp,0x1c
c001317a:	c3                   	ret    

c001317b <loadACPITables(unsigned char*)>:
c001317b:	56                   	push   esi
c001317c:	53                   	push   ebx
c001317d:	83 ec 44             	sub    esp,0x44
c0013180:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0013185:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001318b:	83 e0 04             	and    eax,0x4
c001318e:	84 c0                	test   al,al
c0013190:	0f 84 05 02 00 00    	je     c001339b <loadACPITables(unsigned char*)+0x220>
c0013196:	a0 20 4b 02 c0       	mov    al,ds:0xc0024b20
c001319b:	84 c0                	test   al,al
c001319d:	74 75                	je     c0013214 <loadACPITables(unsigned char*)+0x99>
c001319f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00131a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00131a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ae:	83 e8 24             	sub    eax,0x24
c00131b1:	c1 e8 03             	shr    eax,0x3
c00131b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00131b8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00131c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131c4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00131c8:	0f 8d b2 00 00 00    	jge    c0013280 <loadACPITables(unsigned char*)+0x105>
c00131ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00131d2:	83 c0 24             	add    eax,0x24
c00131d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00131d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00131e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131e5:	c1 e0 03             	shl    eax,0x3
c00131e8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00131ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00131f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00131f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00131f5:	89 c1                	mov    ecx,eax
c00131f7:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c00131fc:	8d 50 01             	lea    edx,[eax+0x1]
c00131ff:	89 15 0c 49 02 c0    	mov    DWORD PTR ds:0xc002490c,edx
c0013205:	89 ca                	mov    edx,ecx
c0013207:	89 14 c5 24 49 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb6dc],edx
c001320e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013212:	eb ac                	jmp    c00131c0 <loadACPITables(unsigned char*)+0x45>
c0013214:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013218:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001321c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013220:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013223:	83 e8 24             	sub    eax,0x24
c0013226:	c1 e8 02             	shr    eax,0x2
c0013229:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001322d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013235:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013239:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001323d:	7d 41                	jge    c0013280 <loadACPITables(unsigned char*)+0x105>
c001323f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013243:	83 c0 24             	add    eax,0x24
c0013246:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001324a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001324e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013252:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013256:	c1 e0 02             	shl    eax,0x2
c0013259:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001325d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013261:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013263:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c0013268:	8d 50 01             	lea    edx,[eax+0x1]
c001326b:	89 15 0c 49 02 c0    	mov    DWORD PTR ds:0xc002490c,edx
c0013271:	89 ca                	mov    edx,ecx
c0013273:	89 14 c5 24 49 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb6dc],edx
c001327a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001327e:	eb b5                	jmp    c0013235 <loadACPITables(unsigned char*)+0xba>
c0013280:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013288:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c001328d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013291:	0f 8d 05 01 00 00    	jge    c001339c <loadACPITables(unsigned char*)+0x221>
c0013297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001329b:	8b 04 c5 24 49 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb6dc]
c00132a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00132a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	25 ff 0f 00 00       	and    eax,0xfff
c00132b7:	89 c6                	mov    esi,eax
c00132b9:	e8 0d b0 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00132be:	89 c3                	mov    ebx,eax
c00132c0:	83 ec 0c             	sub    esp,0xc
c00132c3:	6a 01                	push   0x1
c00132c5:	e8 74 ae ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00132d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00132d7:	83 ec 0c             	sub    esp,0xc
c00132da:	6a 01                	push   0x1
c00132dc:	6a 01                	push   0x1
c00132de:	50                   	push   eax
c00132df:	52                   	push   edx
c00132e0:	53                   	push   ebx
c00132e1:	e8 16 b8 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00132e6:	83 c4 20             	add    esp,0x20
c00132e9:	09 f0                	or     eax,esi
c00132eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00132ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132f3:	c1 e0 03             	shl    eax,0x3
c00132f6:	05 20 49 02 c0       	add    eax,0xc0024920
c00132fb:	83 ec 04             	sub    esp,0x4
c00132fe:	6a 04                	push   0x4
c0013300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013304:	50                   	push   eax
c0013305:	e8 c8 d2 fe ff       	call   c00005d2 <memcpy>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013311:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013314:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001331c:	05 00 10 00 00       	add    eax,0x1000
c0013321:	c1 e8 0c             	shr    eax,0xc
c0013324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332c:	89 04 24             	mov    DWORD PTR [esp],eax
c001332f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013333:	25 ff 0f 00 00       	and    eax,0xfff
c0013338:	89 c6                	mov    esi,eax
c001333a:	e8 8c af ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001333f:	89 c3                	mov    ebx,eax
c0013341:	83 ec 0c             	sub    esp,0xc
c0013344:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013348:	e8 f1 ad ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013354:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001335a:	83 ec 0c             	sub    esp,0xc
c001335d:	6a 01                	push   0x1
c001335f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013363:	50                   	push   eax
c0013364:	52                   	push   edx
c0013365:	53                   	push   ebx
c0013366:	e8 91 b7 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001336b:	83 c4 20             	add    esp,0x20
c001336e:	09 f0                	or     eax,esi
c0013370:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013374:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013377:	83 ec 0c             	sub    esp,0xc
c001337a:	50                   	push   eax
c001337b:	e8 0b b1 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013387:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001338b:	89 14 c5 24 49 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb6dc],edx
c0013392:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013396:	e9 ed fe ff ff       	jmp    c0013288 <loadACPITables(unsigned char*)+0x10d>
c001339b:	90                   	nop
c001339c:	83 c4 44             	add    esp,0x44
c001339f:	5b                   	pop    ebx
c00133a0:	5e                   	pop    esi
c00133a1:	c3                   	ret    

c00133a2 <findRSDT(unsigned char*)>:
c00133a2:	56                   	push   esi
c00133a3:	53                   	push   ebx
c00133a4:	83 ec 44             	sub    esp,0x44
c00133a7:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c00133ac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00133b2:	83 e0 04             	and    eax,0x4
c00133b5:	84 c0                	test   al,al
c00133b7:	75 0a                	jne    c00133c3 <findRSDT(unsigned char*)+0x21>
c00133b9:	b8 00 00 00 00       	mov    eax,0x0
c00133be:	e9 f7 00 00 00       	jmp    c00134ba <findRSDT(unsigned char*)+0x118>
c00133c3:	83 ec 04             	sub    esp,0x4
c00133c6:	6a 24                	push   0x24
c00133c8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00133cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00133d0:	50                   	push   eax
c00133d1:	e8 fc d1 fe ff       	call   c00005d2 <memcpy>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00133dd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00133e1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00133e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00133ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00133f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00133f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00133fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013401:	25 ff 0f 00 00       	and    eax,0xfff
c0013406:	89 c6                	mov    esi,eax
c0013408:	e8 be ae ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001340d:	89 c3                	mov    ebx,eax
c001340f:	83 ec 0c             	sub    esp,0xc
c0013412:	6a 02                	push   0x2
c0013414:	e8 25 ad ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013420:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	6a 01                	push   0x1
c001342b:	6a 02                	push   0x2
c001342d:	50                   	push   eax
c001342e:	52                   	push   edx
c001342f:	53                   	push   ebx
c0013430:	e8 c7 b6 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013435:	83 c4 20             	add    esp,0x20
c0013438:	09 f0                	or     eax,esi
c001343a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001343e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013442:	25 ff 0f 00 00       	and    eax,0xfff
c0013447:	89 c6                	mov    esi,eax
c0013449:	e8 7d ae ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001344e:	89 c3                	mov    ebx,eax
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	6a 02                	push   0x2
c0013455:	e8 e4 ac ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c001345a:	83 c4 10             	add    esp,0x10
c001345d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013461:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013467:	83 ec 0c             	sub    esp,0xc
c001346a:	6a 01                	push   0x1
c001346c:	6a 02                	push   0x2
c001346e:	50                   	push   eax
c001346f:	52                   	push   edx
c0013470:	53                   	push   ebx
c0013471:	e8 86 b6 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013476:	83 c4 20             	add    esp,0x20
c0013479:	09 f0                	or     eax,esi
c001347b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001347f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013484:	75 11                	jne    c0013497 <findRSDT(unsigned char*)+0xf5>
c0013486:	c6 05 20 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024b20,0x0
c001348d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013491:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013495:	eb 1f                	jmp    c00134b6 <findRSDT(unsigned char*)+0x114>
c0013497:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001349c:	75 11                	jne    c00134af <findRSDT(unsigned char*)+0x10d>
c001349e:	c6 05 20 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b20,0x1
c00134a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134a9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00134ad:	eb 07                	jmp    c00134b6 <findRSDT(unsigned char*)+0x114>
c00134af:	b8 00 00 00 00       	mov    eax,0x0
c00134b4:	eb 04                	jmp    c00134ba <findRSDT(unsigned char*)+0x118>
c00134b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00134ba:	83 c4 44             	add    esp,0x44
c00134bd:	5b                   	pop    ebx
c00134be:	5e                   	pop    esi
c00134bf:	c3                   	ret    

c00134c0 <findDataTable(unsigned char*, char*)>:
c00134c0:	83 ec 1c             	sub    esp,0x1c
c00134c3:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c00134c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00134ce:	83 e0 04             	and    eax,0x4
c00134d1:	84 c0                	test   al,al
c00134d3:	75 07                	jne    c00134dc <findDataTable(unsigned char*, char*)+0x1c>
c00134d5:	b8 00 00 00 00       	mov    eax,0x0
c00134da:	eb 7c                	jmp    c0013558 <findDataTable(unsigned char*, char*)+0x98>
c00134dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00134e4:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c00134e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00134ed:	7d 3a                	jge    c0013529 <findDataTable(unsigned char*, char*)+0x69>
c00134ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134f3:	c1 e0 03             	shl    eax,0x3
c00134f6:	05 20 49 02 c0       	add    eax,0xc0024920
c00134fb:	83 ec 04             	sub    esp,0x4
c00134fe:	6a 04                	push   0x4
c0013500:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013504:	50                   	push   eax
c0013505:	e8 65 d0 fe ff       	call   c000056f <memcmp>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	85 c0                	test   eax,eax
c001350f:	0f 94 c0             	sete   al
c0013512:	84 c0                	test   al,al
c0013514:	74 0d                	je     c0013523 <findDataTable(unsigned char*, char*)+0x63>
c0013516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001351a:	8b 04 c5 24 49 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb6dc]
c0013521:	eb 35                	jmp    c0013558 <findDataTable(unsigned char*, char*)+0x98>
c0013523:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013527:	eb bb                	jmp    c00134e4 <findDataTable(unsigned char*, char*)+0x24>
c0013529:	a0 20 4b 02 c0       	mov    al,ds:0xc0024b20
c001352e:	84 c0                	test   al,al
c0013530:	74 07                	je     c0013539 <findDataTable(unsigned char*, char*)+0x79>
c0013532:	b8 58 00 00 00       	mov    eax,0x58
c0013537:	eb 05                	jmp    c001353e <findDataTable(unsigned char*, char*)+0x7e>
c0013539:	b8 52 00 00 00       	mov    eax,0x52
c001353e:	83 ec 04             	sub    esp,0x4
c0013541:	50                   	push   eax
c0013542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013546:	68 78 1e 02 c0       	push   0xc0021e78
c001354b:	e8 09 bc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	b8 00 00 00 00       	mov    eax,0x0
c0013558:	83 c4 1c             	add    esp,0x1c
c001355b:	c3                   	ret    

c001355c <scanMADT()>:
c001355c:	83 ec 2c             	sub    esp,0x2c
c001355f:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0013564:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001356a:	83 e0 04             	and    eax,0x4
c001356d:	84 c0                	test   al,al
c001356f:	0f 84 9a 03 00 00    	je     c001390f <scanMADT()+0x3b3>
c0013575:	e8 77 fb ff ff       	call   c00130f1 <findRSDP()>
c001357a:	a3 2c 4b 02 c0       	mov    ds:0xc0024b2c,eax
c001357f:	a1 2c 4b 02 c0       	mov    eax,ds:0xc0024b2c
c0013584:	85 c0                	test   eax,eax
c0013586:	75 19                	jne    c00135a1 <scanMADT()+0x45>
c0013588:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001358d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013593:	83 e2 fb             	and    edx,0xfffffffb
c0013596:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001359c:	e9 72 03 00 00       	jmp    c0013913 <scanMADT()+0x3b7>
c00135a1:	a1 2c 4b 02 c0       	mov    eax,ds:0xc0024b2c
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	50                   	push   eax
c00135aa:	e8 f3 fd ff ff       	call   c00133a2 <findRSDT(unsigned char*)>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	a3 28 4b 02 c0       	mov    ds:0xc0024b28,eax
c00135b7:	a1 28 4b 02 c0       	mov    eax,ds:0xc0024b28
c00135bc:	85 c0                	test   eax,eax
c00135be:	75 19                	jne    c00135d9 <scanMADT()+0x7d>
c00135c0:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c00135c5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00135cb:	83 e2 fb             	and    edx,0xfffffffb
c00135ce:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00135d4:	e9 3a 03 00 00       	jmp    c0013913 <scanMADT()+0x3b7>
c00135d9:	a1 28 4b 02 c0       	mov    eax,ds:0xc0024b28
c00135de:	83 ec 0c             	sub    esp,0xc
c00135e1:	50                   	push   eax
c00135e2:	e8 94 fb ff ff       	call   c001317b <loadACPITables(unsigned char*)>
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	a1 28 4b 02 c0       	mov    eax,ds:0xc0024b28
c00135ef:	83 ec 08             	sub    esp,0x8
c00135f2:	68 96 1d 02 c0       	push   0xc0021d96
c00135f7:	50                   	push   eax
c00135f8:	e8 c3 fe ff ff       	call   c00134c0 <findDataTable(unsigned char*, char*)>
c00135fd:	83 c4 10             	add    esp,0x10
c0013600:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013604:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013609:	75 19                	jne    c0013624 <scanMADT()+0xc8>
c001360b:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0013610:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013616:	83 e2 fe             	and    edx,0xfffffffe
c0013619:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001361f:	e9 ef 02 00 00       	jmp    c0013913 <scanMADT()+0x3b7>
c0013624:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001362c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013633:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013637:	0f 87 d6 02 00 00    	ja     c0013913 <scanMADT()+0x3b7>
c001363d:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013645:	0f 87 c8 02 00 00    	ja     c0013913 <scanMADT()+0x3b7>
c001364b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013657:	8d 50 01             	lea    edx,[eax+0x1]
c001365a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001365e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013662:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013666:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001366a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001366e:	8d 50 01             	lea    edx,[eax+0x1]
c0013671:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013675:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013679:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001367d:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013681:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013686:	0f 86 86 02 00 00    	jbe    c0013912 <scanMADT()+0x3b6>
c001368c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013691:	75 5b                	jne    c00136ee <scanMADT()+0x192>
c0013693:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013697:	8d 50 01             	lea    edx,[eax+0x1]
c001369a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001369e:	8a 15 60 4c 02 c0    	mov    dl,BYTE PTR ds:0xc0024c60
c00136a4:	81 e2 ff 00 00 00    	and    edx,0xff
c00136aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00136ae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00136b2:	88 82 a0 4c 02 c0    	mov    BYTE PTR [edx-0x3ffdb360],al
c00136b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00136bc:	8d 42 01             	lea    eax,[edx+0x1]
c00136bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00136c3:	a0 60 4c 02 c0       	mov    al,ds:0xc0024c60
c00136c8:	8d 48 01             	lea    ecx,[eax+0x1]
c00136cb:	88 0d 60 4c 02 c0    	mov    BYTE PTR ds:0xc0024c60,cl
c00136d1:	25 ff 00 00 00       	and    eax,0xff
c00136d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00136da:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c00136de:	88 90 80 4c 02 c0    	mov    BYTE PTR [eax-0x3ffdb380],dl
c00136e4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00136e9:	e9 0a 02 00 00       	jmp    c00138f8 <scanMADT()+0x39c>
c00136ee:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00136f3:	0f 85 29 01 00 00    	jne    c0013822 <scanMADT()+0x2c6>
c00136f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136fd:	8d 50 01             	lea    edx,[eax+0x1]
c0013700:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013704:	8a 15 30 4b 02 c0    	mov    dl,BYTE PTR ds:0xc0024b30
c001370a:	81 e2 ff 00 00 00    	and    edx,0xff
c0013710:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013714:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013718:	88 82 40 4b 02 c0    	mov    BYTE PTR [edx-0x3ffdb4c0],al
c001371e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001372a:	01 d0                	add    eax,edx
c001372c:	83 c0 2c             	add    eax,0x2c
c001372f:	8a 00                	mov    al,BYTE PTR [eax]
c0013731:	31 d2                	xor    edx,edx
c0013733:	88 c2                	mov    dl,al
c0013735:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013739:	8d 48 01             	lea    ecx,[eax+0x1]
c001373c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013740:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013744:	25 ff 00 00 00       	and    eax,0xff
c0013749:	c1 e0 08             	shl    eax,0x8
c001374c:	89 d1                	mov    ecx,edx
c001374e:	09 c1                	or     ecx,eax
c0013750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013754:	8d 50 02             	lea    edx,[eax+0x2]
c0013757:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001375b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001375f:	25 ff 00 00 00       	and    eax,0xff
c0013764:	c1 e0 10             	shl    eax,0x10
c0013767:	09 c1                	or     ecx,eax
c0013769:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001376d:	8d 50 03             	lea    edx,[eax+0x3]
c0013770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013774:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013778:	25 ff 00 00 00       	and    eax,0xff
c001377d:	c1 e0 18             	shl    eax,0x18
c0013780:	09 c1                	or     ecx,eax
c0013782:	89 ca                	mov    edx,ecx
c0013784:	a0 30 4b 02 c0       	mov    al,ds:0xc0024b30
c0013789:	25 ff 00 00 00       	and    eax,0xff
c001378e:	89 14 85 60 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4a0],edx
c0013795:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001379a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001379e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137a2:	01 d0                	add    eax,edx
c00137a4:	83 c0 2c             	add    eax,0x2c
c00137a7:	8a 00                	mov    al,BYTE PTR [eax]
c00137a9:	31 d2                	xor    edx,edx
c00137ab:	88 c2                	mov    dl,al
c00137ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00137b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137b8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00137bc:	25 ff 00 00 00       	and    eax,0xff
c00137c1:	c1 e0 08             	shl    eax,0x8
c00137c4:	89 d1                	mov    ecx,edx
c00137c6:	09 c1                	or     ecx,eax
c00137c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137cc:	8d 50 02             	lea    edx,[eax+0x2]
c00137cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137d3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00137d7:	25 ff 00 00 00       	and    eax,0xff
c00137dc:	c1 e0 10             	shl    eax,0x10
c00137df:	09 c1                	or     ecx,eax
c00137e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137e5:	8d 50 03             	lea    edx,[eax+0x3]
c00137e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137ec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00137f0:	25 ff 00 00 00       	and    eax,0xff
c00137f5:	c1 e0 18             	shl    eax,0x18
c00137f8:	09 c1                	or     ecx,eax
c00137fa:	89 ca                	mov    edx,ecx
c00137fc:	a0 30 4b 02 c0       	mov    al,ds:0xc0024b30
c0013801:	25 ff 00 00 00       	and    eax,0xff
c0013806:	89 14 85 e0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb420],edx
c001380d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013812:	a0 30 4b 02 c0       	mov    al,ds:0xc0024b30
c0013817:	40                   	inc    eax
c0013818:	a2 30 4b 02 c0       	mov    ds:0xc0024b30,al
c001381d:	e9 d6 00 00 00       	jmp    c00138f8 <scanMADT()+0x39c>
c0013822:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013827:	0f 85 b1 00 00 00    	jne    c00138de <scanMADT()+0x382>
c001382d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013831:	8d 50 01             	lea    edx,[eax+0x1]
c0013834:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013838:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001383c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013840:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013844:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013848:	8d 50 01             	lea    edx,[eax+0x1]
c001384b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001384f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013853:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013857:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001385b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001385f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013863:	01 d0                	add    eax,edx
c0013865:	83 c0 2c             	add    eax,0x2c
c0013868:	8a 00                	mov    al,BYTE PTR [eax]
c001386a:	31 d2                	xor    edx,edx
c001386c:	88 c2                	mov    dl,al
c001386e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013872:	8d 48 01             	lea    ecx,[eax+0x1]
c0013875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013879:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001387d:	25 ff 00 00 00       	and    eax,0xff
c0013882:	c1 e0 08             	shl    eax,0x8
c0013885:	89 d1                	mov    ecx,edx
c0013887:	09 c1                	or     ecx,eax
c0013889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001388d:	8d 50 02             	lea    edx,[eax+0x2]
c0013890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013894:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013898:	25 ff 00 00 00       	and    eax,0xff
c001389d:	c1 e0 10             	shl    eax,0x10
c00138a0:	09 c1                	or     ecx,eax
c00138a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138a6:	8d 50 03             	lea    edx,[eax+0x3]
c00138a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00138b1:	25 ff 00 00 00       	and    eax,0xff
c00138b6:	c1 e0 18             	shl    eax,0x18
c00138b9:	09 c8                	or     eax,ecx
c00138bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138bf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00138c4:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00138c9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00138cd:	25 ff 00 00 00       	and    eax,0xff
c00138d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00138d6:	88 90 e0 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc620],dl
c00138dc:	eb 1a                	jmp    c00138f8 <scanMADT()+0x39c>
c00138de:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00138e3:	75 07                	jne    c00138ec <scanMADT()+0x390>
c00138e5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00138ea:	eb 0c                	jmp    c00138f8 <scanMADT()+0x39c>
c00138ec:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00138f1:	75 05                	jne    c00138f8 <scanMADT()+0x39c>
c00138f3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00138f8:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c00138fc:	31 d2                	xor    edx,edx
c00138fe:	88 c2                	mov    dl,al
c0013900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013904:	01 d0                	add    eax,edx
c0013906:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001390a:	e9 1d fd ff ff       	jmp    c001362c <scanMADT()+0xd0>
c001390f:	90                   	nop
c0013910:	eb 01                	jmp    c0013913 <scanMADT()+0x3b7>
c0013912:	90                   	nop
c0013913:	83 c4 2c             	add    esp,0x2c
c0013916:	c3                   	ret    
c0013917:	90                   	nop

c0013918 <ACPI::ACPI()>:
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391f:	83 ec 08             	sub    esp,0x8
c0013922:	68 9b 1d 02 c0       	push   0xc0021d9b
c0013927:	50                   	push   eax
c0013928:	e8 31 ce ff ff       	call   c001075e <Device::Device(char const*)>
c001392d:	83 c4 10             	add    esp,0x10
c0013930:	ba 44 1f 02 c0       	mov    edx,0xc0021f44
c0013935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013939:	89 10                	mov    DWORD PTR [eax],edx
c001393b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013958:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013966:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001396d:	e8 ea fb ff ff       	call   c001355c <scanMADT()>
c0013972:	90                   	nop
c0013973:	83 c4 0c             	add    esp,0xc
c0013976:	c3                   	ret    
c0013977:	90                   	nop

c0013978 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013978:	83 ec 2c             	sub    esp,0x2c
c001397b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001397f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013983:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013987:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001398b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013990:	88 d0                	mov    al,dl
c0013992:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013996:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001399b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00139a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139a7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00139ad:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00139b1:	0f 8d 97 00 00 00    	jge    c0013a4e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00139b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00139bf:	83 c2 2a             	add    edx,0x2a
c00139c2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00139c6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00139cb:	75 78                	jne    c0013a45 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00139cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00139d5:	83 c2 2a             	add    edx,0x2a
c00139d8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00139dc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00139e0:	75 63                	jne    c0013a45 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00139e2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00139e7:	74 3a                	je     c0013a23 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00139e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00139f1:	83 c2 2a             	add    edx,0x2a
c00139f4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00139f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139ff:	39 c2                	cmp    edx,eax
c0013a01:	74 10                	je     c0013a13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013a03:	83 ec 0c             	sub    esp,0xc
c0013a06:	68 a8 1e 02 c0       	push   0xc0021ea8
c0013a0b:	e8 3e 1b 00 00       	call   c001554e <Krnl::panic(char const*)>
c0013a10:	83 c4 10             	add    esp,0x10
c0013a13:	83 ec 0c             	sub    esp,0xc
c0013a16:	68 a0 1d 02 c0       	push   0xc0021da0
c0013a1b:	e8 2e 1b 00 00       	call   c001554e <Krnl::panic(char const*)>
c0013a20:	83 c4 10             	add    esp,0x10
c0013a23:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a2f:	83 c2 2a             	add    edx,0x2a
c0013a32:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013a36:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a38:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013a3b:	89 01                	mov    DWORD PTR [ecx],eax
c0013a3d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013a40:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013a45:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013a49:	e9 55 ff ff ff       	jmp    c00139a3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013a4e:	90                   	nop
c0013a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a53:	83 c4 2c             	add    esp,0x2c
c0013a56:	c2 04 00             	ret    0x4
c0013a59:	90                   	nop

c0013a5a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013a5a:	56                   	push   esi
c0013a5b:	53                   	push   ebx
c0013a5c:	83 ec 14             	sub    esp,0x14
c0013a5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013a63:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013a67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013a6b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013a70:	88 c8                	mov    al,cl
c0013a72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013a76:	88 d0                	mov    al,dl
c0013a78:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a80:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a8a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013a90:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013a94:	31 c9                	xor    ecx,ecx
c0013a96:	88 c1                	mov    cl,al
c0013a98:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013a9c:	31 d2                	xor    edx,edx
c0013a9e:	88 c2                	mov    dl,al
c0013aa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013aa4:	25 ff ff 00 00       	and    eax,0xffff
c0013aa9:	83 ec 04             	sub    esp,0x4
c0013aac:	56                   	push   esi
c0013aad:	53                   	push   ebx
c0013aae:	51                   	push   ecx
c0013aaf:	52                   	push   edx
c0013ab0:	50                   	push   eax
c0013ab1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ab5:	68 d8 1e 02 c0       	push   0xc0021ed8
c0013aba:	e8 9a b6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013abf:	83 c4 20             	add    esp,0x20
c0013ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ac6:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ad0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ad3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ad7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013adf:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ae5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ae9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013af0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013af9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013aff:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013b03:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b0a:	83 c2 2a             	add    edx,0x2a
c0013b0d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b15:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b1f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013b22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b26:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b2e:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013b34:	8d 50 01             	lea    edx,[eax+0x1]
c0013b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b3b:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b45:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013b4b:	3d 00 08 00 00       	cmp    eax,0x800
c0013b50:	75 10                	jne    c0013b62 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0013b52:	83 ec 0c             	sub    esp,0xc
c0013b55:	68 af 1d 02 c0       	push   0xc0021daf
c0013b5a:	e8 ef 19 00 00       	call   c001554e <Krnl::panic(char const*)>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	90                   	nop
c0013b63:	83 c4 14             	add    esp,0x14
c0013b66:	5b                   	pop    ebx
c0013b67:	5e                   	pop    esi
c0013b68:	c3                   	ret    
c0013b69:	90                   	nop

c0013b6a <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013b6a:	b8 00 00 00 00       	mov    eax,0x0
c0013b6f:	c3                   	ret    

c0013b70 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013b70:	83 ec 1c             	sub    esp,0x1c
c0013b73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b77:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013b7a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013b7e:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c0013b84:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013b88:	25 ff 00 00 00       	and    eax,0xff
c0013b8d:	83 ec 08             	sub    esp,0x8
c0013b90:	50                   	push   eax
c0013b91:	52                   	push   edx
c0013b92:	e8 9d 79 ff ff       	call   c000b534 <Computer::readCMOS(unsigned char)>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013b9e:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c0013ba4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013ba8:	25 ff 00 00 00       	and    eax,0xff
c0013bad:	83 ec 04             	sub    esp,0x4
c0013bb0:	6a 01                	push   0x1
c0013bb2:	50                   	push   eax
c0013bb3:	52                   	push   edx
c0013bb4:	e8 93 7a ff ff       	call   c000b64c <Computer::writeCMOS(unsigned char, unsigned char)>
c0013bb9:	83 c4 10             	add    esp,0x10
c0013bbc:	90                   	nop
c0013bbd:	83 c4 1c             	add    esp,0x1c
c0013bc0:	c3                   	ret    
c0013bc1:	90                   	nop

c0013bc2 <ACPI::open(int, int, void*)>:
c0013bc2:	53                   	push   ebx
c0013bc3:	83 ec 18             	sub    esp,0x18
c0013bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bca:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bd5:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013bdb:	84 c0                	test   al,al
c0013bdd:	74 60                	je     c0013c3f <ACPI::open(int, int, void*)+0x7d>
c0013bdf:	83 ec 0c             	sub    esp,0xc
c0013be2:	68 58 01 00 00       	push   0x158
c0013be7:	e8 38 b4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0013bec:	83 c4 10             	add    esp,0x10
c0013bef:	89 c3                	mov    ebx,eax
c0013bf1:	83 ec 0c             	sub    esp,0xc
c0013bf4:	53                   	push   ebx
c0013bf5:	e8 a8 80 00 00       	call   c001bca2 <PCI::PCI()>
c0013bfa:	83 c4 10             	add    esp,0x10
c0013bfd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c05:	83 ec 08             	sub    esp,0x8
c0013c08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013c0c:	50                   	push   eax
c0013c0d:	e8 5c c9 ff ff       	call   c001056e <Device::addChild(Device*)>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c1b:	83 c0 08             	add    eax,0x8
c0013c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c20:	6a 00                	push   0x0
c0013c22:	6a 00                	push   0x0
c0013c24:	6a 00                	push   0x0
c0013c26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c2a:	ff d0                	call   eax
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	83 ec 0c             	sub    esp,0xc
c0013c32:	68 cc 1d 02 c0       	push   0xc0021dcc
c0013c37:	e8 1d b5 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013c3c:	83 c4 10             	add    esp,0x10
c0013c3f:	83 ec 0c             	sub    esp,0xc
c0013c42:	68 d7 1d 02 c0       	push   0xc0021dd7
c0013c47:	e8 43 38 00 00       	call   c001748f <Thr::loadKernelSymbolTable(char const*)>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c0013c55:	83 ec 08             	sub    esp,0x8
c0013c58:	6a 01                	push   0x1
c0013c5a:	68 f5 1d 02 c0       	push   0xc0021df5
c0013c5f:	e8 0d 43 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	83 ec 08             	sub    esp,0x8
c0013c6a:	53                   	push   ebx
c0013c6b:	50                   	push   eax
c0013c6c:	e8 c6 44 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c0013c7a:	83 ec 08             	sub    esp,0x8
c0013c7d:	6a 01                	push   0x1
c0013c7f:	68 12 1e 02 c0       	push   0xc0021e12
c0013c84:	e8 e8 42 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c0013c89:	83 c4 10             	add    esp,0x10
c0013c8c:	83 ec 08             	sub    esp,0x8
c0013c8f:	53                   	push   ebx
c0013c90:	50                   	push   eax
c0013c91:	e8 a1 44 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0013c9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013ca4:	83 e0 04             	and    eax,0x4
c0013ca7:	84 c0                	test   al,al
c0013ca9:	0f 84 cf 00 00 00    	je     c0013d7e <ACPI::open(int, int, void*)+0x1bc>
c0013caf:	83 ec 0c             	sub    esp,0xc
c0013cb2:	68 14 01 00 00       	push   0x114
c0013cb7:	e8 68 b3 ff ff       	call   c000f024 <operator new(unsigned long)>
c0013cbc:	83 c4 10             	add    esp,0x10
c0013cbf:	89 c3                	mov    ebx,eax
c0013cc1:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0013cc6:	83 ec 04             	sub    esp,0x4
c0013cc9:	50                   	push   eax
c0013cca:	68 2f 1e 02 c0       	push   0xc0021e2f
c0013ccf:	53                   	push   ebx
c0013cd0:	e8 bb b9 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013cdc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ce1:	74 17                	je     c0013cfa <ACPI::open(int, int, void*)+0x138>
c0013ce3:	83 ec 0c             	sub    esp,0xc
c0013ce6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013cea:	e8 73 bc ff ff       	call   c000f962 <File::exists()>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	84 c0                	test   al,al
c0013cf4:	74 04                	je     c0013cfa <ACPI::open(int, int, void*)+0x138>
c0013cf6:	b0 01                	mov    al,0x1
c0013cf8:	eb 02                	jmp    c0013cfc <ACPI::open(int, int, void*)+0x13a>
c0013cfa:	b0 00                	mov    al,0x0
c0013cfc:	84 c0                	test   al,al
c0013cfe:	74 25                	je     c0013d25 <ACPI::open(int, int, void*)+0x163>
c0013d00:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c0013d06:	83 ec 08             	sub    esp,0x8
c0013d09:	6a 01                	push   0x1
c0013d0b:	68 2f 1e 02 c0       	push   0xc0021e2f
c0013d10:	e8 5c 42 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c0013d15:	83 c4 10             	add    esp,0x10
c0013d18:	83 ec 08             	sub    esp,0x8
c0013d1b:	53                   	push   ebx
c0013d1c:	50                   	push   eax
c0013d1d:	e8 15 44 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0013d22:	83 c4 10             	add    esp,0x10
c0013d25:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013d2a:	74 1e                	je     c0013d4a <ACPI::open(int, int, void*)+0x188>
c0013d2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013d31:	74 17                	je     c0013d4a <ACPI::open(int, int, void*)+0x188>
c0013d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d39:	83 c0 08             	add    eax,0x8
c0013d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d45:	ff d0                	call   eax
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	a1 28 4b 02 c0       	mov    eax,ds:0xc0024b28
c0013d4f:	83 ec 08             	sub    esp,0x8
c0013d52:	68 4c 1e 02 c0       	push   0xc0021e4c
c0013d57:	50                   	push   eax
c0013d58:	e8 63 f7 ff ff       	call   c00134c0 <findDataTable(unsigned char*, char*)>
c0013d5d:	83 c4 10             	add    esp,0x10
c0013d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d64:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013d69:	74 13                	je     c0013d7e <ACPI::open(int, int, void*)+0x1bc>
c0013d6b:	83 ec 08             	sub    esp,0x8
c0013d6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013d72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d76:	e8 f5 fd ff ff       	call   c0013b70 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013d7b:	83 c4 10             	add    esp,0x10
c0013d7e:	b8 00 00 00 00       	mov    eax,0x0
c0013d83:	83 c4 18             	add    esp,0x18
c0013d86:	5b                   	pop    ebx
c0013d87:	c3                   	ret    

c0013d88 <ACPI::sleep()>:
c0013d88:	83 ec 0c             	sub    esp,0xc
c0013d8b:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0013d90:	85 c0                	test   eax,eax
c0013d92:	74 07                	je     c0013d9b <ACPI::sleep()+0x13>
c0013d94:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0013d99:	ff d0                	call   eax
c0013d9b:	90                   	nop
c0013d9c:	83 c4 0c             	add    esp,0xc
c0013d9f:	c3                   	ret    

c0013da0 <CPU::close(int, int, void*)>:
c0013da0:	31 c0                	xor    eax,eax
c0013da2:	c3                   	ret    

c0013da3 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013da3:	55                   	push   ebp
c0013da4:	57                   	push   edi
c0013da5:	56                   	push   esi
c0013da6:	53                   	push   ebx
c0013da7:	51                   	push   ecx
c0013da8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013db0:	89 d6                	mov    esi,edx
c0013db2:	89 cd                	mov    ebp,ecx
c0013db4:	80 fa 04             	cmp    dl,0x4
c0013db7:	75 28                	jne    c0013de1 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c0013db9:	8d 41 f9             	lea    eax,[ecx-0x7]
c0013dbc:	3c 03                	cmp    al,0x3
c0013dbe:	0f 86 64 01 00 00    	jbe    c0013f28 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0013dc4:	80 f9 03             	cmp    cl,0x3
c0013dc7:	0f 84 5b 01 00 00    	je     c0013f28 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0013dcd:	8d 79 f2             	lea    edi,[ecx-0xe]
c0013dd0:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c0013dd5:	89 fb                	mov    ebx,edi
c0013dd7:	80 fb 01             	cmp    bl,0x1
c0013dda:	77 4e                	ja     c0013e2a <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c0013ddc:	e9 61 01 00 00       	jmp    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013de1:	80 fa 05             	cmp    dl,0x5
c0013de4:	75 4d                	jne    c0013e33 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c0013de6:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c0013deb:	80 f9 03             	cmp    cl,0x3
c0013dee:	0f 86 4e 01 00 00    	jbe    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013df4:	8d 79 fa             	lea    edi,[ecx-0x6]
c0013df7:	b8 d0 3b 02 c0       	mov    eax,0xc0023bd0
c0013dfc:	89 fb                	mov    ebx,edi
c0013dfe:	80 fb 01             	cmp    bl,0x1
c0013e01:	0f 86 3b 01 00 00    	jbe    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013e07:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c0013e0c:	80 f9 08             	cmp    cl,0x8
c0013e0f:	0f 84 2d 01 00 00    	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013e15:	89 cf                	mov    edi,ecx
c0013e17:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c0013e1c:	83 e7 fb             	and    edi,0xfffffffb
c0013e1f:	89 fb                	mov    ebx,edi
c0013e21:	80 fb 09             	cmp    bl,0x9
c0013e24:	0f 84 18 01 00 00    	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013e2a:	31 c0                	xor    eax,eax
c0013e2c:	89 eb                	mov    ebx,ebp
c0013e2e:	0f b6 fb             	movzx  edi,bl
c0013e31:	eb 30                	jmp    c0013e63 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0013e33:	31 c0                	xor    eax,eax
c0013e35:	80 fa 06             	cmp    dl,0x6
c0013e38:	75 f2                	jne    c0013e2c <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013e3a:	80 f9 0a             	cmp    cl,0xa
c0013e3d:	77 ed                	ja     c0013e2c <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013e3f:	bf de 05 00 00       	mov    edi,0x5de
c0013e44:	0f a3 cf             	bt     edi,ecx
c0013e47:	73 e3                	jae    c0013e2c <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013e49:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0013e4e:	e9 ef 00 00 00       	jmp    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013e53:	39 c7                	cmp    edi,eax
c0013e55:	0f 84 d4 00 00 00    	je     c0013f2f <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0013e5b:	40                   	inc    eax
c0013e5c:	3d d0 00 00 00       	cmp    eax,0xd0
c0013e61:	74 09                	je     c0013e6c <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0013e63:	89 f3                	mov    ebx,esi
c0013e65:	80 fb 0f             	cmp    bl,0xf
c0013e68:	75 f1                	jne    c0013e5b <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0013e6a:	eb e7                	jmp    c0013e53 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0013e6c:	80 fa 10             	cmp    dl,0x10
c0013e6f:	75 19                	jne    c0013e8a <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0013e71:	8d 41 fc             	lea    eax,[ecx-0x4]
c0013e74:	83 e0 fb             	and    eax,0xfffffffb
c0013e77:	3c 02                	cmp    al,0x2
c0013e79:	0f 86 b7 00 00 00    	jbe    c0013f36 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0013e7f:	80 f9 02             	cmp    cl,0x2
c0013e82:	0f 84 ae 00 00 00    	je     c0013f36 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0013e88:	eb 13                	jmp    c0013e9d <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0013e8a:	80 fa 11             	cmp    dl,0x11
c0013e8d:	75 0e                	jne    c0013e9d <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0013e8f:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c0013e94:	80 f9 03             	cmp    cl,0x3
c0013e97:	0f 84 a5 00 00 00    	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013e9d:	80 fa 12             	cmp    dl,0x12
c0013ea0:	75 0e                	jne    c0013eb0 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0013ea2:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c0013ea7:	80 f9 01             	cmp    cl,0x1
c0013eaa:	0f 84 92 00 00 00    	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013eb0:	80 fa 14             	cmp    dl,0x14
c0013eb3:	be 01 00 00 00       	mov    esi,0x1
c0013eb8:	0f 94 c3             	sete   bl
c0013ebb:	80 f9 13             	cmp    cl,0x13
c0013ebe:	77 0c                	ja     c0013ecc <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013ec0:	be 04 00 09 00       	mov    esi,0x90004
c0013ec5:	d3 ee                	shr    esi,cl
c0013ec7:	f7 d6                	not    esi
c0013ec9:	83 e6 01             	and    esi,0x1
c0013ecc:	8d 41 ff             	lea    eax,[ecx-0x1]
c0013ecf:	3c 01                	cmp    al,0x1
c0013ed1:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c0013ed6:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c0013edb:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c0013edf:	75 61                	jne    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013ee1:	80 fa 15             	cmp    dl,0x15
c0013ee4:	75 1f                	jne    c0013f05 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c0013ee6:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c0013eeb:	80 f9 01             	cmp    cl,0x1
c0013eee:	74 52                	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013ef0:	89 f3                	mov    ebx,esi
c0013ef2:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c0013ef7:	84 db                	test   bl,bl
c0013ef9:	74 47                	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013efb:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c0013f00:	80 f9 30             	cmp    cl,0x30
c0013f03:	74 3d                	je     c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013f05:	80 fa 16             	cmp    dl,0x16
c0013f08:	0f 94 c2             	sete   dl
c0013f0b:	84 c9                	test   cl,cl
c0013f0d:	75 09                	jne    c0013f18 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0013f0f:	b8 70 3c 02 c0       	mov    eax,0xc0023c70
c0013f14:	84 d2                	test   dl,dl
c0013f16:	75 2a                	jne    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013f18:	80 f9 30             	cmp    cl,0x30
c0013f1b:	75 20                	jne    c0013f3d <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0013f1d:	b8 80 3c 02 c0       	mov    eax,0xc0023c80
c0013f22:	84 d2                	test   dl,dl
c0013f24:	75 1c                	jne    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013f26:	eb 15                	jmp    c0013f3d <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0013f28:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0013f2d:	eb 13                	jmp    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013f2f:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c0013f34:	eb 0c                	jmp    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013f36:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c0013f3b:	eb 05                	jmp    c0013f42 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013f3d:	b8 5a 22 02 c0       	mov    eax,0xc002225a
c0013f42:	5a                   	pop    edx
c0013f43:	5b                   	pop    ebx
c0013f44:	5e                   	pop    esi
c0013f45:	5f                   	pop    edi
c0013f46:	5d                   	pop    ebp
c0013f47:	c3                   	ret    

c0013f48 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013f48:	53                   	push   ebx
c0013f49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f51:	80 f9 04             	cmp    cl,0x4
c0013f54:	75 6a                	jne    c0013fc0 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013f56:	b8 00 3a 02 c0       	mov    eax,0xc0023a00
c0013f5b:	80 fa 01             	cmp    dl,0x1
c0013f5e:	0f 86 9b 02 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f64:	b8 10 3a 02 c0       	mov    eax,0xc0023a10
c0013f69:	80 fa 02             	cmp    dl,0x2
c0013f6c:	0f 84 8d 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f72:	b8 20 3a 02 c0       	mov    eax,0xc0023a20
c0013f77:	80 fa 03             	cmp    dl,0x3
c0013f7a:	0f 84 7f 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f80:	b8 30 3a 02 c0       	mov    eax,0xc0023a30
c0013f85:	80 fa 04             	cmp    dl,0x4
c0013f88:	0f 84 71 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f8e:	b8 40 3a 02 c0       	mov    eax,0xc0023a40
c0013f93:	80 fa 05             	cmp    dl,0x5
c0013f96:	0f 84 63 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f9c:	b8 20 3a 02 c0       	mov    eax,0xc0023a20
c0013fa1:	80 fa 07             	cmp    dl,0x7
c0013fa4:	0f 84 55 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013faa:	8d 5a f8             	lea    ebx,[edx-0x8]
c0013fad:	b8 50 3a 02 c0       	mov    eax,0xc0023a50
c0013fb2:	80 fb 01             	cmp    bl,0x1
c0013fb5:	0f 87 e0 01 00 00    	ja     c001419b <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0013fbb:	e9 3f 02 00 00       	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fc0:	80 f9 05             	cmp    cl,0x5
c0013fc3:	75 3e                	jne    c0014003 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c0013fc5:	8d 5a ff             	lea    ebx,[edx-0x1]
c0013fc8:	b8 60 3a 02 c0       	mov    eax,0xc0023a60
c0013fcd:	80 fb 02             	cmp    bl,0x2
c0013fd0:	0f 86 29 02 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fd6:	80 fa 04             	cmp    dl,0x4
c0013fd9:	0f 84 f1 01 00 00    	je     c00141d0 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c0013fdf:	80 fa 07             	cmp    dl,0x7
c0013fe2:	0f 84 17 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fe8:	b8 70 3a 02 c0       	mov    eax,0xc0023a70
c0013fed:	80 fa 08             	cmp    dl,0x8
c0013ff0:	0f 84 09 02 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ff6:	b8 80 3a 02 c0       	mov    eax,0xc0023a80
c0013ffb:	80 fa 09             	cmp    dl,0x9
c0013ffe:	e9 96 01 00 00       	jmp    c0014199 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c0014003:	80 f9 06             	cmp    cl,0x6
c0014006:	0f 85 80 01 00 00    	jne    c001418c <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c001400c:	b8 90 3a 02 c0       	mov    eax,0xc0023a90
c0014011:	80 fa 01             	cmp    dl,0x1
c0014014:	0f 84 e5 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001401a:	8d 42 fb             	lea    eax,[edx-0x5]
c001401d:	3c 01                	cmp    al,0x1
c001401f:	0f 86 b2 01 00 00    	jbe    c00141d7 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014025:	80 fa 03             	cmp    dl,0x3
c0014028:	0f 84 a9 01 00 00    	je     c00141d7 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001402e:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014031:	b8 b0 3a 02 c0       	mov    eax,0xc0023ab0
c0014036:	80 fb 01             	cmp    bl,0x1
c0014039:	0f 86 c0 01 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001403f:	80 fa 09             	cmp    dl,0x9
c0014042:	0f 84 96 01 00 00    	je     c00141de <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014048:	8d 5a f6             	lea    ebx,[edx-0xa]
c001404b:	80 fb 01             	cmp    bl,0x1
c001404e:	0f 86 ab 01 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014054:	b8 c0 3a 02 c0       	mov    eax,0xc0023ac0
c0014059:	80 fa 0d             	cmp    dl,0xd
c001405c:	0f 84 9d 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014062:	b8 d0 3a 02 c0       	mov    eax,0xc0023ad0
c0014067:	80 fa 0e             	cmp    dl,0xe
c001406a:	0f 84 8f 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014070:	b8 e0 3a 02 c0       	mov    eax,0xc0023ae0
c0014075:	80 fa 0f             	cmp    dl,0xf
c0014078:	0f 84 81 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001407e:	b8 c0 3a 02 c0       	mov    eax,0xc0023ac0
c0014083:	80 fa 15             	cmp    dl,0x15
c0014086:	0f 84 73 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001408c:	8d 5a ea             	lea    ebx,[edx-0x16]
c001408f:	b8 e0 3a 02 c0       	mov    eax,0xc0023ae0
c0014094:	80 fb 01             	cmp    bl,0x1
c0014097:	0f 86 62 01 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001409d:	80 fa 1a             	cmp    dl,0x1a
c00140a0:	0f 84 3f 01 00 00    	je     c00141e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00140a6:	80 fa 1c             	cmp    dl,0x1c
c00140a9:	0f 84 3d 01 00 00    	je     c00141ec <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00140af:	80 fa 1d             	cmp    dl,0x1d
c00140b2:	0f 84 47 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00140b8:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c00140bd:	80 fa 25             	cmp    dl,0x25
c00140c0:	0f 84 39 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00140c6:	8d 5a da             	lea    ebx,[edx-0x26]
c00140c9:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c00140ce:	80 fb 01             	cmp    bl,0x1
c00140d1:	0f 86 28 01 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00140d7:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c00140dc:	80 fa 2a             	cmp    dl,0x2a
c00140df:	0f 84 1a 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00140e5:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c00140ea:	80 fa 2c             	cmp    dl,0x2c
c00140ed:	0f 84 0c 01 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00140f3:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c00140f8:	80 fa 2d             	cmp    dl,0x2d
c00140fb:	0f 84 fe 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014101:	b8 f0 3a 02 c0       	mov    eax,0xc0023af0
c0014106:	80 fa 2e             	cmp    dl,0x2e
c0014109:	0f 84 f0 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001410f:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c0014114:	80 fa 2f             	cmp    dl,0x2f
c0014117:	0f 84 e2 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001411d:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014120:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c0014125:	80 fb 01             	cmp    bl,0x1
c0014128:	0f 86 d1 00 00 00    	jbe    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001412e:	b8 30 3b 02 c0       	mov    eax,0xc0023b30
c0014133:	80 fa 37             	cmp    dl,0x37
c0014136:	0f 84 c3 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001413c:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c0014141:	80 fa 3a             	cmp    dl,0x3a
c0014144:	0f 84 b5 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001414a:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c001414f:	80 fa 3c             	cmp    dl,0x3c
c0014152:	0f 84 a7 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014158:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c001415d:	80 fa 3d             	cmp    dl,0x3d
c0014160:	0f 84 99 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014166:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c001416b:	80 fa 3e             	cmp    dl,0x3e
c001416e:	0f 84 8b 00 00 00    	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014174:	8d 42 bb             	lea    eax,[edx-0x45]
c0014177:	3c 01                	cmp    al,0x1
c0014179:	76 78                	jbe    c00141f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001417b:	80 fa 3f             	cmp    dl,0x3f
c001417e:	74 73                	je     c00141f3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014180:	80 fa 4a             	cmp    dl,0x4a
c0014183:	74 75                	je     c00141fa <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014185:	80 fa 4d             	cmp    dl,0x4d
c0014188:	75 11                	jne    c001419b <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001418a:	eb 6e                	jmp    c00141fa <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001418c:	80 f9 0b             	cmp    cl,0xb
c001418f:	75 0a                	jne    c001419b <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014191:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c0014196:	80 fa 01             	cmp    dl,0x1
c0014199:	74 64                	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001419b:	80 f9 0f             	cmp    cl,0xf
c001419e:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c00141a3:	0f 94 c1             	sete   cl
c00141a6:	80 fa 02             	cmp    dl,0x2
c00141a9:	0f 96 c3             	setbe  bl
c00141ac:	84 cb                	test   bl,cl
c00141ae:	75 4f                	jne    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141b0:	8d 42 fd             	lea    eax,[edx-0x3]
c00141b3:	3c 01                	cmp    al,0x1
c00141b5:	0f 96 c0             	setbe  al
c00141b8:	80 fa 06             	cmp    dl,0x6
c00141bb:	0f 94 c2             	sete   dl
c00141be:	09 c2                	or     edx,eax
c00141c0:	b8 5a 22 02 c0       	mov    eax,0xc002225a
c00141c5:	84 ca                	test   dl,cl
c00141c7:	74 36                	je     c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141c9:	b8 90 3b 02 c0       	mov    eax,0xc0023b90
c00141ce:	eb 2f                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141d0:	b8 70 3a 02 c0       	mov    eax,0xc0023a70
c00141d5:	eb 28                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141d7:	b8 a0 3a 02 c0       	mov    eax,0xc0023aa0
c00141dc:	eb 21                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141de:	b8 c0 3a 02 c0       	mov    eax,0xc0023ac0
c00141e3:	eb 1a                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141e5:	b8 f0 3a 02 c0       	mov    eax,0xc0023af0
c00141ea:	eb 13                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141ec:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c00141f1:	eb 0c                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141f3:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c00141f8:	eb 05                	jmp    c00141ff <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00141fa:	b8 30 3b 02 c0       	mov    eax,0xc0023b30
c00141ff:	5b                   	pop    ebx
c0014200:	c3                   	ret    

c0014201 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0014201:	60                   	pusha  
c0014202:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001420a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001420e:	9c                   	pushf  
c001420f:	fa                   	cli    
c0014210:	0f 09                	wbinvd 
c0014212:	0f 30                	wrmsr  
c0014214:	9d                   	popf   
c0014215:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014219:	89 02                	mov    DWORD PTR [edx],eax
c001421b:	61                   	popa   
c001421c:	c3                   	ret    

c001421d <AMD_K6_read_msr(unsigned int, REGS*)>:
c001421d:	60                   	pusha  
c001421e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014222:	9c                   	pushf  
c0014223:	fa                   	cli    
c0014224:	0f 09                	wbinvd 
c0014226:	31 c0                	xor    eax,eax
c0014228:	31 d2                	xor    edx,edx
c001422a:	0f 32                	rdmsr  
c001422c:	9d                   	popf   
c001422d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014231:	89 02                	mov    DWORD PTR [edx],eax
c0014233:	61                   	popa   
c0014234:	c3                   	ret    

c0014235 <AMD_K6_writeback(int, int, int)>:
c0014235:	56                   	push   esi
c0014236:	53                   	push   ebx
c0014237:	83 ec 10             	sub    esp,0x10
c001423a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001423e:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014243:	75 5d                	jne    c00142a2 <AMD_K6_writeback(int, int, int)+0x6d>
c0014245:	83 f8 08             	cmp    eax,0x8
c0014248:	75 09                	jne    c0014253 <AMD_K6_writeback(int, int, int)+0x1e>
c001424a:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001424f:	7e 13                	jle    c0014264 <AMD_K6_writeback(int, int, int)+0x2f>
c0014251:	eb 30                	jmp    c0014283 <AMD_K6_writeback(int, int, int)+0x4e>
c0014253:	83 f8 06             	cmp    eax,0x6
c0014256:	7c 4a                	jl     c00142a2 <AMD_K6_writeback(int, int, int)+0x6d>
c0014258:	83 f8 07             	cmp    eax,0x7
c001425b:	7e 07                	jle    c0014264 <AMD_K6_writeback(int, int, int)+0x2f>
c001425d:	83 f8 09             	cmp    eax,0x9
c0014260:	74 21                	je     c0014283 <AMD_K6_writeback(int, int, int)+0x4e>
c0014262:	eb 3e                	jmp    c00142a2 <AMD_K6_writeback(int, int, int)+0x6d>
c0014264:	89 e6                	mov    esi,esp
c0014266:	8b 1d c4 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242c4
c001426c:	c1 eb 15             	shr    ebx,0x15
c001426f:	56                   	push   esi
c0014270:	68 82 00 00 c0       	push   0xc0000082
c0014275:	e8 a3 ff ff ff       	call   c001421d <AMD_K6_read_msr(unsigned int, REGS*)>
c001427a:	56                   	push   esi
c001427b:	83 e3 7e             	and    ebx,0x7e
c001427e:	6a 00                	push   0x0
c0014280:	53                   	push   ebx
c0014281:	eb 12                	jmp    c0014295 <AMD_K6_writeback(int, int, int)+0x60>
c0014283:	89 e3                	mov    ebx,esp
c0014285:	53                   	push   ebx
c0014286:	68 82 00 00 c0       	push   0xc0000082
c001428b:	e8 8d ff ff ff       	call   c001421d <AMD_K6_read_msr(unsigned int, REGS*)>
c0014290:	53                   	push   ebx
c0014291:	6a 00                	push   0x0
c0014293:	6a 00                	push   0x0
c0014295:	68 82 00 00 c0       	push   0xc0000082
c001429a:	e8 62 ff ff ff       	call   c0014201 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001429f:	83 c4 18             	add    esp,0x18
c00142a2:	83 c4 10             	add    esp,0x10
c00142a5:	5b                   	pop    ebx
c00142a6:	5e                   	pop    esi
c00142a7:	c3                   	ret    

c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00142a8:	55                   	push   ebp
c00142a9:	57                   	push   edi
c00142aa:	56                   	push   esi
c00142ab:	53                   	push   ebx
c00142ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00142b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00142b8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00142bc:	39 05 a0 3c 02 c0    	cmp    DWORD PTR ds:0xc0023ca0,eax
c00142c2:	75 23                	jne    c00142e7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00142c4:	a1 cc 4c 02 c0       	mov    eax,ds:0xc0024ccc
c00142c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00142cd:	89 06                	mov    DWORD PTR [esi],eax
c00142cf:	a1 c8 4c 02 c0       	mov    eax,ds:0xc0024cc8
c00142d4:	89 07                	mov    DWORD PTR [edi],eax
c00142d6:	a1 c4 4c 02 c0       	mov    eax,ds:0xc0024cc4
c00142db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00142de:	a1 c0 4c 02 c0       	mov    eax,ds:0xc0024cc0
c00142e3:	89 02                	mov    DWORD PTR [edx],eax
c00142e5:	eb 3f                	jmp    c0014326 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00142e7:	31 c9                	xor    ecx,ecx
c00142e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142ed:	0f a2                	cpuid  
c00142ef:	89 06                	mov    DWORD PTR [esi],eax
c00142f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142f5:	89 1f                	mov    DWORD PTR [edi],ebx
c00142f7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00142fa:	89 10                	mov    DWORD PTR [eax],edx
c00142fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014300:	a3 a0 3c 02 c0       	mov    ds:0xc0023ca0,eax
c0014305:	8b 06                	mov    eax,DWORD PTR [esi]
c0014307:	a3 cc 4c 02 c0       	mov    ds:0xc0024ccc,eax
c001430c:	8b 07                	mov    eax,DWORD PTR [edi]
c001430e:	a3 c8 4c 02 c0       	mov    ds:0xc0024cc8,eax
c0014313:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014316:	a3 c4 4c 02 c0       	mov    ds:0xc0024cc4,eax
c001431b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001431f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014321:	a3 c0 4c 02 c0       	mov    ds:0xc0024cc0,eax
c0014326:	5b                   	pop    ebx
c0014327:	5e                   	pop    esi
c0014328:	5f                   	pop    edi
c0014329:	5d                   	pop    ebp
c001432a:	c3                   	ret    

c001432b <cpuidCheckEDX(unsigned int)>:
c001432b:	83 ec 10             	sub    esp,0x10
c001432e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014332:	50                   	push   eax
c0014333:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014337:	50                   	push   eax
c0014338:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001433c:	50                   	push   eax
c001433d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014341:	50                   	push   eax
c0014342:	6a 01                	push   0x1
c0014344:	e8 5f ff ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001434d:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014351:	0f 95 c0             	setne  al
c0014354:	83 c4 24             	add    esp,0x24
c0014357:	c3                   	ret    

c0014358 <cpuidCheckECX(unsigned int)>:
c0014358:	83 ec 10             	sub    esp,0x10
c001435b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001435f:	50                   	push   eax
c0014360:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014364:	50                   	push   eax
c0014365:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014369:	50                   	push   eax
c001436a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001436e:	50                   	push   eax
c001436f:	6a 01                	push   0x1
c0014371:	e8 32 ff ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014376:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001437a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001437e:	0f 95 c0             	setne  al
c0014381:	83 c4 24             	add    esp,0x24
c0014384:	c3                   	ret    

c0014385 <cpuidCheckExtendedEBX(unsigned int)>:
c0014385:	83 ec 10             	sub    esp,0x10
c0014388:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001438c:	50                   	push   eax
c001438d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014391:	50                   	push   eax
c0014392:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014396:	50                   	push   eax
c0014397:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001439b:	50                   	push   eax
c001439c:	6a 07                	push   0x7
c001439e:	e8 05 ff ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00143a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143a7:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00143ab:	0f 95 c0             	setne  al
c00143ae:	83 c4 24             	add    esp,0x24
c00143b1:	c3                   	ret    

c00143b2 <cpuidCheckExtendedECX(unsigned int)>:
c00143b2:	83 ec 10             	sub    esp,0x10
c00143b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00143b9:	50                   	push   eax
c00143ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00143be:	50                   	push   eax
c00143bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00143c3:	50                   	push   eax
c00143c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00143c8:	50                   	push   eax
c00143c9:	6a 07                	push   0x7
c00143cb:	e8 d8 fe ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00143d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143d4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00143d8:	0f 95 c0             	setne  al
c00143db:	83 c4 24             	add    esp,0x24
c00143de:	c3                   	ret    

c00143df <getCPUNumber()>:
c00143df:	31 c0                	xor    eax,eax
c00143e1:	c3                   	ret    

c00143e2 <thisCPU()>:
c00143e2:	e8 f8 ff ff ff       	call   c00143df <getCPUNumber()>
c00143e7:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c00143ed:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00143f4:	c3                   	ret    
c00143f5:	90                   	nop

c00143f6 <CPU::CPU()>:
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fd:	83 ec 08             	sub    esp,0x8
c0014400:	68 5a 22 02 c0       	push   0xc002225a
c0014405:	50                   	push   eax
c0014406:	e8 53 c3 ff ff       	call   c001075e <Device::Device(char const*)>
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	ba 34 23 02 c0       	mov    edx,0xc0022334
c0014413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014417:	89 10                	mov    DWORD PTR [eax],edx
c0014419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001442b:	05 78 01 00 00       	add    eax,0x178
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	50                   	push   eax
c0014434:	e8 ff 72 ff ff       	call   c000b738 <GDT::GDT()>
c0014439:	83 c4 10             	add    esp,0x10
c001443c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014440:	05 7c 09 00 00       	add    eax,0x97c
c0014445:	83 ec 0c             	sub    esp,0xc
c0014448:	50                   	push   eax
c0014449:	e8 4a 75 ff ff       	call   c000b998 <IDT::IDT()>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014455:	05 7c 11 00 00       	add    eax,0x117c
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	50                   	push   eax
c001445e:	e8 a7 95 ff ff       	call   c000da0a <TSS::TSS()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001446a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014475:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001447f:	90                   	nop
c0014480:	83 c4 0c             	add    esp,0xc
c0014483:	c3                   	ret    

c0014484 <CPU::displayFeatures()>:
c0014484:	53                   	push   ebx
c0014485:	83 ec 10             	sub    esp,0x10
c0014488:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001448c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014492:	68 68 1f 02 c0       	push   0xc0021f68
c0014497:	e8 bd ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001449c:	59                   	pop    ecx
c001449d:	58                   	pop    eax
c001449e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00144a4:	50                   	push   eax
c00144a5:	68 79 1f 02 c0       	push   0xc0021f79
c00144aa:	e8 aa ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144af:	58                   	pop    eax
c00144b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144b6:	c1 e8 0e             	shr    eax,0xe
c00144b9:	5a                   	pop    edx
c00144ba:	0f b6 c0             	movzx  eax,al
c00144bd:	50                   	push   eax
c00144be:	68 8a 1f 02 c0       	push   0xc0021f8a
c00144c3:	e8 91 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144c8:	59                   	pop    ecx
c00144c9:	58                   	pop    eax
c00144ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144d0:	66 c1 e8 06          	shr    ax,0x6
c00144d4:	0f b6 c0             	movzx  eax,al
c00144d7:	50                   	push   eax
c00144d8:	68 9b 1f 02 c0       	push   0xc0021f9b
c00144dd:	e8 77 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144e2:	c7 04 24 ae 23 02 c0 	mov    DWORD PTR [esp],0xc00223ae
c00144e9:	e8 6b ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144ee:	83 c4 10             	add    esp,0x10
c00144f1:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00144f6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00144fd:	74 05                	je     c0014504 <CPU::displayFeatures()+0x80>
c00144ff:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c0014504:	52                   	push   edx
c0014505:	52                   	push   edx
c0014506:	50                   	push   eax
c0014507:	68 ac 1f 02 c0       	push   0xc0021fac
c001450c:	e8 48 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014511:	83 c4 10             	add    esp,0x10
c0014514:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c0014519:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014520:	78 05                	js     c0014527 <CPU::displayFeatures()+0xa3>
c0014522:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c0014527:	51                   	push   ecx
c0014528:	51                   	push   ecx
c0014529:	50                   	push   eax
c001452a:	68 c3 1f 02 c0       	push   0xc0021fc3
c001452f:	e8 25 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014534:	83 c4 10             	add    esp,0x10
c0014537:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c001453c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014543:	75 05                	jne    c001454a <CPU::displayFeatures()+0xc6>
c0014545:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c001454a:	52                   	push   edx
c001454b:	52                   	push   edx
c001454c:	50                   	push   eax
c001454d:	68 da 1f 02 c0       	push   0xc0021fda
c0014552:	e8 02 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c001455f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014566:	75 05                	jne    c001456d <CPU::displayFeatures()+0xe9>
c0014568:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c001456d:	51                   	push   ecx
c001456e:	51                   	push   ecx
c001456f:	50                   	push   eax
c0014570:	68 f1 1f 02 c0       	push   0xc0021ff1
c0014575:	e8 df ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c0014582:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014589:	75 05                	jne    c0014590 <CPU::displayFeatures()+0x10c>
c001458b:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c0014590:	52                   	push   edx
c0014591:	52                   	push   edx
c0014592:	50                   	push   eax
c0014593:	68 08 20 02 c0       	push   0xc0022008
c0014598:	e8 bc ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001459d:	83 c4 10             	add    esp,0x10
c00145a0:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c00145a5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00145ac:	75 05                	jne    c00145b3 <CPU::displayFeatures()+0x12f>
c00145ae:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00145b3:	51                   	push   ecx
c00145b4:	51                   	push   ecx
c00145b5:	50                   	push   eax
c00145b6:	68 1f 20 02 c0       	push   0xc002201f
c00145bb:	e8 99 ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00145c0:	83 c4 10             	add    esp,0x10
c00145c3:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c00145c8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00145cf:	75 05                	jne    c00145d6 <CPU::displayFeatures()+0x152>
c00145d1:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00145d6:	52                   	push   edx
c00145d7:	52                   	push   edx
c00145d8:	50                   	push   eax
c00145d9:	68 36 20 02 c0       	push   0xc0022036
c00145de:	e8 76 ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c00145eb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00145f2:	75 05                	jne    c00145f9 <CPU::displayFeatures()+0x175>
c00145f4:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00145f9:	51                   	push   ecx
c00145fa:	51                   	push   ecx
c00145fb:	50                   	push   eax
c00145fc:	68 4d 20 02 c0       	push   0xc002204d
c0014601:	e8 53 ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c001460e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014615:	75 05                	jne    c001461c <CPU::displayFeatures()+0x198>
c0014617:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c001461c:	52                   	push   edx
c001461d:	52                   	push   edx
c001461e:	50                   	push   eax
c001461f:	68 64 20 02 c0       	push   0xc0022064
c0014624:	e8 30 ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014629:	83 c4 10             	add    esp,0x10
c001462c:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c0014631:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014638:	75 05                	jne    c001463f <CPU::displayFeatures()+0x1bb>
c001463a:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c001463f:	51                   	push   ecx
c0014640:	51                   	push   ecx
c0014641:	50                   	push   eax
c0014642:	68 7b 20 02 c0       	push   0xc002207b
c0014647:	e8 0d ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c0014654:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001465b:	75 05                	jne    c0014662 <CPU::displayFeatures()+0x1de>
c001465d:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c0014662:	52                   	push   edx
c0014663:	52                   	push   edx
c0014664:	50                   	push   eax
c0014665:	68 92 20 02 c0       	push   0xc0022092
c001466a:	e8 ea aa ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c0014677:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001467e:	75 05                	jne    c0014685 <CPU::displayFeatures()+0x201>
c0014680:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c0014685:	51                   	push   ecx
c0014686:	51                   	push   ecx
c0014687:	50                   	push   eax
c0014688:	68 a9 20 02 c0       	push   0xc00220a9
c001468d:	e8 c7 aa ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014692:	83 c4 10             	add    esp,0x10
c0014695:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c001469a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00146a1:	75 05                	jne    c00146a8 <CPU::displayFeatures()+0x224>
c00146a3:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00146a8:	52                   	push   edx
c00146a9:	52                   	push   edx
c00146aa:	50                   	push   eax
c00146ab:	68 c0 20 02 c0       	push   0xc00220c0
c00146b0:	e8 a4 aa ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c00146bd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00146c4:	78 05                	js     c00146cb <CPU::displayFeatures()+0x247>
c00146c6:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00146cb:	51                   	push   ecx
c00146cc:	51                   	push   ecx
c00146cd:	50                   	push   eax
c00146ce:	68 d7 20 02 c0       	push   0xc00220d7
c00146d3:	e8 81 aa ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00146d8:	83 c4 10             	add    esp,0x10
c00146db:	b8 0e 0c 02 c0       	mov    eax,0xc0020c0e
c00146e0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00146e7:	75 05                	jne    c00146ee <CPU::displayFeatures()+0x26a>
c00146e9:	b8 12 0c 02 c0       	mov    eax,0xc0020c12
c00146ee:	52                   	push   edx
c00146ef:	52                   	push   edx
c00146f0:	50                   	push   eax
c00146f1:	68 ee 20 02 c0       	push   0xc00220ee
c00146f6:	e8 5e aa ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00146fb:	83 c4 18             	add    esp,0x18
c00146fe:	5b                   	pop    ebx
c00146ff:	c3                   	ret    

c0014700 <CPU::detectFeatures()>:
c0014700:	55                   	push   ebp
c0014701:	57                   	push   edi
c0014702:	56                   	push   esi
c0014703:	53                   	push   ebx
c0014704:	83 ec 50             	sub    esp,0x50
c0014707:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001470b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014715:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001471c:	6a 0d                	push   0xd
c001471e:	6a 00                	push   0x0
c0014720:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014726:	57                   	push   edi
c0014727:	e8 dc be fe ff       	call   c0000608 <memset>
c001472c:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0014731:	83 c4 10             	add    esp,0x10
c0014734:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001473b:	0f 84 04 09 00 00    	je     c0015045 <CPU::detectFeatures()+0x945>
c0014741:	83 ec 0c             	sub    esp,0xc
c0014744:	6a 10                	push   0x10
c0014746:	e8 e0 fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c001474b:	83 e0 01             	and    eax,0x1
c001474e:	8d 14 00             	lea    edx,[eax+eax*1]
c0014751:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014757:	83 e0 fd             	and    eax,0xfffffffd
c001475a:	09 d0                	or     eax,edx
c001475c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014762:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014769:	e8 bd fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c001476e:	83 e0 01             	and    eax,0x1
c0014771:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014778:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001477e:	83 e0 fb             	and    eax,0xfffffffb
c0014781:	09 d0                	or     eax,edx
c0014783:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014789:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014790:	e8 96 fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c0014795:	83 e0 01             	and    eax,0x1
c0014798:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001479f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00147a5:	83 e0 f7             	and    eax,0xfffffff7
c00147a8:	09 d0                	or     eax,edx
c00147aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00147b0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00147b7:	e8 6f fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c00147bc:	83 e0 01             	and    eax,0x1
c00147bf:	c1 e0 04             	shl    eax,0x4
c00147c2:	88 c2                	mov    dl,al
c00147c4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00147ca:	83 e0 ef             	and    eax,0xffffffef
c00147cd:	09 d0                	or     eax,edx
c00147cf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00147d5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00147dc:	e8 4a fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c00147e1:	83 e0 01             	and    eax,0x1
c00147e4:	c1 e0 05             	shl    eax,0x5
c00147e7:	88 c2                	mov    dl,al
c00147e9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00147ef:	83 e0 df             	and    eax,0xffffffdf
c00147f2:	09 d0                	or     eax,edx
c00147f4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00147fa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014801:	e8 25 fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c0014806:	83 e0 01             	and    eax,0x1
c0014809:	8d 14 00             	lea    edx,[eax+eax*1]
c001480c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014812:	83 e0 fd             	and    eax,0xfffffffd
c0014815:	09 d0                	or     eax,edx
c0014817:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001481d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014824:	e8 02 fb ff ff       	call   c001432b <cpuidCheckEDX(unsigned int)>
c0014829:	83 e0 01             	and    eax,0x1
c001482c:	c1 e0 06             	shl    eax,0x6
c001482f:	88 c2                	mov    dl,al
c0014831:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014837:	83 e0 bf             	and    eax,0xffffffbf
c001483a:	09 d0                	or     eax,edx
c001483c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014842:	58                   	pop    eax
c0014843:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014847:	56                   	push   esi
c0014848:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001484c:	55                   	push   ebp
c001484d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014851:	50                   	push   eax
c0014852:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014856:	52                   	push   edx
c0014857:	6a 00                	push   0x0
c0014859:	e8 4a fa ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001485e:	83 c4 1c             	add    esp,0x1c
c0014861:	6a 04                	push   0x4
c0014863:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014867:	50                   	push   eax
c0014868:	57                   	push   edi
c0014869:	e8 64 bd fe ff       	call   c00005d2 <memcpy>
c001486e:	83 c4 0c             	add    esp,0xc
c0014871:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014877:	6a 04                	push   0x4
c0014879:	56                   	push   esi
c001487a:	50                   	push   eax
c001487b:	e8 52 bd fe ff       	call   c00005d2 <memcpy>
c0014880:	83 c4 0c             	add    esp,0xc
c0014883:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014889:	6a 04                	push   0x4
c001488b:	55                   	push   ebp
c001488c:	50                   	push   eax
c001488d:	e8 40 bd fe ff       	call   c00005d2 <memcpy>
c0014892:	58                   	pop    eax
c0014893:	5a                   	pop    edx
c0014894:	68 05 21 02 c0       	push   0xc0022105
c0014899:	57                   	push   edi
c001489a:	e8 59 be fe ff       	call   c00006f8 <strcmp>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	85 c0                	test   eax,eax
c00148a4:	75 0f                	jne    c00148b5 <CPU::detectFeatures()+0x1b5>
c00148a6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00148b0:	e9 22 02 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c00148b5:	50                   	push   eax
c00148b6:	50                   	push   eax
c00148b7:	68 12 21 02 c0       	push   0xc0022112
c00148bc:	57                   	push   edi
c00148bd:	e8 36 be fe ff       	call   c00006f8 <strcmp>
c00148c2:	83 c4 10             	add    esp,0x10
c00148c5:	85 c0                	test   eax,eax
c00148c7:	74 dd                	je     c00148a6 <CPU::detectFeatures()+0x1a6>
c00148c9:	51                   	push   ecx
c00148ca:	51                   	push   ecx
c00148cb:	68 1f 21 02 c0       	push   0xc002211f
c00148d0:	57                   	push   edi
c00148d1:	e8 22 be fe ff       	call   c00006f8 <strcmp>
c00148d6:	83 c4 10             	add    esp,0x10
c00148d9:	85 c0                	test   eax,eax
c00148db:	74 2a                	je     c0014907 <CPU::detectFeatures()+0x207>
c00148dd:	52                   	push   edx
c00148de:	52                   	push   edx
c00148df:	68 2c 21 02 c0       	push   0xc002212c
c00148e4:	57                   	push   edi
c00148e5:	e8 0e be fe ff       	call   c00006f8 <strcmp>
c00148ea:	83 c4 10             	add    esp,0x10
c00148ed:	85 c0                	test   eax,eax
c00148ef:	74 16                	je     c0014907 <CPU::detectFeatures()+0x207>
c00148f1:	50                   	push   eax
c00148f2:	50                   	push   eax
c00148f3:	68 39 21 02 c0       	push   0xc0022139
c00148f8:	57                   	push   edi
c00148f9:	e8 fa bd fe ff       	call   c00006f8 <strcmp>
c00148fe:	83 c4 10             	add    esp,0x10
c0014901:	85 c0                	test   eax,eax
c0014903:	74 48                	je     c001494d <CPU::detectFeatures()+0x24d>
c0014905:	eb 0f                	jmp    c0014916 <CPU::detectFeatures()+0x216>
c0014907:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014911:	e9 c1 01 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c0014916:	50                   	push   eax
c0014917:	50                   	push   eax
c0014918:	68 46 21 02 c0       	push   0xc0022146
c001491d:	57                   	push   edi
c001491e:	e8 d5 bd fe ff       	call   c00006f8 <strcmp>
c0014923:	83 c4 10             	add    esp,0x10
c0014926:	85 c0                	test   eax,eax
c0014928:	74 23                	je     c001494d <CPU::detectFeatures()+0x24d>
c001492a:	50                   	push   eax
c001492b:	50                   	push   eax
c001492c:	68 53 21 02 c0       	push   0xc0022153
c0014931:	57                   	push   edi
c0014932:	e8 c1 bd fe ff       	call   c00006f8 <strcmp>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	85 c0                	test   eax,eax
c001493c:	75 1e                	jne    c001495c <CPU::detectFeatures()+0x25c>
c001493e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014948:	e9 8a 01 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c001494d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014957:	e9 7b 01 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c001495c:	50                   	push   eax
c001495d:	50                   	push   eax
c001495e:	68 60 21 02 c0       	push   0xc0022160
c0014963:	57                   	push   edi
c0014964:	e8 8f bd fe ff       	call   c00006f8 <strcmp>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	85 c0                	test   eax,eax
c001496e:	75 0f                	jne    c001497f <CPU::detectFeatures()+0x27f>
c0014970:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001497a:	e9 58 01 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c001497f:	50                   	push   eax
c0014980:	50                   	push   eax
c0014981:	68 1f 21 02 c0       	push   0xc002211f
c0014986:	57                   	push   edi
c0014987:	e8 6c bd fe ff       	call   c00006f8 <strcmp>
c001498c:	83 c4 10             	add    esp,0x10
c001498f:	85 c0                	test   eax,eax
c0014991:	75 0f                	jne    c00149a2 <CPU::detectFeatures()+0x2a2>
c0014993:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001499d:	e9 35 01 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c00149a2:	50                   	push   eax
c00149a3:	50                   	push   eax
c00149a4:	68 6d 21 02 c0       	push   0xc002216d
c00149a9:	57                   	push   edi
c00149aa:	e8 49 bd fe ff       	call   c00006f8 <strcmp>
c00149af:	83 c4 10             	add    esp,0x10
c00149b2:	85 c0                	test   eax,eax
c00149b4:	75 0f                	jne    c00149c5 <CPU::detectFeatures()+0x2c5>
c00149b6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00149c0:	e9 12 01 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c00149c5:	51                   	push   ecx
c00149c6:	51                   	push   ecx
c00149c7:	68 7a 21 02 c0       	push   0xc002217a
c00149cc:	57                   	push   edi
c00149cd:	e8 26 bd fe ff       	call   c00006f8 <strcmp>
c00149d2:	83 c4 10             	add    esp,0x10
c00149d5:	85 c0                	test   eax,eax
c00149d7:	75 0f                	jne    c00149e8 <CPU::detectFeatures()+0x2e8>
c00149d9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00149e3:	e9 ef 00 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c00149e8:	52                   	push   edx
c00149e9:	52                   	push   edx
c00149ea:	68 87 21 02 c0       	push   0xc0022187
c00149ef:	57                   	push   edi
c00149f0:	e8 03 bd fe ff       	call   c00006f8 <strcmp>
c00149f5:	83 c4 10             	add    esp,0x10
c00149f8:	85 c0                	test   eax,eax
c00149fa:	75 0f                	jne    c0014a0b <CPU::detectFeatures()+0x30b>
c00149fc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014a06:	e9 cc 00 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c0014a0b:	50                   	push   eax
c0014a0c:	50                   	push   eax
c0014a0d:	68 94 21 02 c0       	push   0xc0022194
c0014a12:	57                   	push   edi
c0014a13:	e8 e0 bc fe ff       	call   c00006f8 <strcmp>
c0014a18:	83 c4 10             	add    esp,0x10
c0014a1b:	85 c0                	test   eax,eax
c0014a1d:	75 0f                	jne    c0014a2e <CPU::detectFeatures()+0x32e>
c0014a1f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014a29:	e9 a9 00 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c0014a2e:	50                   	push   eax
c0014a2f:	50                   	push   eax
c0014a30:	68 a1 21 02 c0       	push   0xc00221a1
c0014a35:	57                   	push   edi
c0014a36:	e8 bd bc fe ff       	call   c00006f8 <strcmp>
c0014a3b:	83 c4 10             	add    esp,0x10
c0014a3e:	85 c0                	test   eax,eax
c0014a40:	75 0f                	jne    c0014a51 <CPU::detectFeatures()+0x351>
c0014a42:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014a4c:	e9 86 00 00 00       	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c0014a51:	50                   	push   eax
c0014a52:	50                   	push   eax
c0014a53:	68 ae 21 02 c0       	push   0xc00221ae
c0014a58:	57                   	push   edi
c0014a59:	e8 9a bc fe ff       	call   c00006f8 <strcmp>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	85 c0                	test   eax,eax
c0014a63:	75 0c                	jne    c0014a71 <CPU::detectFeatures()+0x371>
c0014a65:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014a6f:	eb 66                	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c0014a71:	50                   	push   eax
c0014a72:	50                   	push   eax
c0014a73:	68 bb 21 02 c0       	push   0xc00221bb
c0014a78:	57                   	push   edi
c0014a79:	e8 7a bc fe ff       	call   c00006f8 <strcmp>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	85 c0                	test   eax,eax
c0014a83:	75 0c                	jne    c0014a91 <CPU::detectFeatures()+0x391>
c0014a85:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014a8f:	eb 46                	jmp    c0014ad7 <CPU::detectFeatures()+0x3d7>
c0014a91:	50                   	push   eax
c0014a92:	50                   	push   eax
c0014a93:	68 c8 21 02 c0       	push   0xc00221c8
c0014a98:	57                   	push   edi
c0014a99:	e8 5a bc fe ff       	call   c00006f8 <strcmp>
c0014a9e:	83 c4 10             	add    esp,0x10
c0014aa1:	85 c0                	test   eax,eax
c0014aa3:	74 e0                	je     c0014a85 <CPU::detectFeatures()+0x385>
c0014aa5:	50                   	push   eax
c0014aa6:	50                   	push   eax
c0014aa7:	68 d5 21 02 c0       	push   0xc00221d5
c0014aac:	57                   	push   edi
c0014aad:	e8 46 bc fe ff       	call   c00006f8 <strcmp>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	85 c0                	test   eax,eax
c0014ab7:	74 cc                	je     c0014a85 <CPU::detectFeatures()+0x385>
c0014ab9:	51                   	push   ecx
c0014aba:	51                   	push   ecx
c0014abb:	68 e2 21 02 c0       	push   0xc00221e2
c0014ac0:	57                   	push   edi
c0014ac1:	e8 32 bc fe ff       	call   c00006f8 <strcmp>
c0014ac6:	83 c4 10             	add    esp,0x10
c0014ac9:	85 c0                	test   eax,eax
c0014acb:	74 b8                	je     c0014a85 <CPU::detectFeatures()+0x385>
c0014acd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014ad7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014adc:	0f 86 be 00 00 00    	jbe    c0014ba0 <CPU::detectFeatures()+0x4a0>
c0014ae2:	83 ec 0c             	sub    esp,0xc
c0014ae5:	68 80 00 00 00       	push   0x80
c0014aea:	e8 96 f8 ff ff       	call   c0014385 <cpuidCheckExtendedEBX(unsigned int)>
c0014aef:	83 e0 01             	and    eax,0x1
c0014af2:	c1 e0 06             	shl    eax,0x6
c0014af5:	88 c2                	mov    dl,al
c0014af7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014afd:	83 e0 bf             	and    eax,0xffffffbf
c0014b00:	09 d0                	or     eax,edx
c0014b02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b08:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014b0f:	e8 71 f8 ff ff       	call   c0014385 <cpuidCheckExtendedEBX(unsigned int)>
c0014b14:	83 e0 01             	and    eax,0x1
c0014b17:	c1 e0 04             	shl    eax,0x4
c0014b1a:	88 c2                	mov    dl,al
c0014b1c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014b22:	83 e0 ef             	and    eax,0xffffffef
c0014b25:	09 d0                	or     eax,edx
c0014b27:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014b2d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014b34:	e8 4c f8 ff ff       	call   c0014385 <cpuidCheckExtendedEBX(unsigned int)>
c0014b39:	c1 e0 07             	shl    eax,0x7
c0014b3c:	88 c2                	mov    dl,al
c0014b3e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b44:	83 e0 7f             	and    eax,0x7f
c0014b47:	09 d0                	or     eax,edx
c0014b49:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b4f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014b56:	e8 57 f8 ff ff       	call   c00143b2 <cpuidCheckExtendedECX(unsigned int)>
c0014b5b:	83 e0 01             	and    eax,0x1
c0014b5e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b65:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014b6b:	83 e0 f7             	and    eax,0xfffffff7
c0014b6e:	09 d0                	or     eax,edx
c0014b70:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014b76:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014b7d:	e8 30 f8 ff ff       	call   c00143b2 <cpuidCheckExtendedECX(unsigned int)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	83 e0 01             	and    eax,0x1
c0014b88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014b8f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014b95:	83 e0 fb             	and    eax,0xfffffffb
c0014b98:	09 d0                	or     eax,edx
c0014b9a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014ba0:	83 ec 0c             	sub    esp,0xc
c0014ba3:	56                   	push   esi
c0014ba4:	55                   	push   ebp
c0014ba5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014ba9:	57                   	push   edi
c0014baa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014bae:	50                   	push   eax
c0014baf:	6a 01                	push   0x1
c0014bb1:	e8 f2 f6 ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014bb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bba:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014bc0:	88 c1                	mov    cl,al
c0014bc2:	83 e2 f0             	and    edx,0xfffffff0
c0014bc5:	83 e1 0f             	and    ecx,0xf
c0014bc8:	09 ca                	or     edx,ecx
c0014bca:	88 c1                	mov    cl,al
c0014bcc:	c0 e9 04             	shr    cl,0x4
c0014bcf:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014bd5:	0f b6 d1             	movzx  edx,cl
c0014bd8:	c1 e2 06             	shl    edx,0x6
c0014bdb:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0014bdf:	89 d5                	mov    ebp,edx
c0014be1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014be7:	66 81 e2 3f c0       	and    dx,0xc03f
c0014bec:	83 c4 20             	add    esp,0x20
c0014bef:	09 ea                	or     edx,ebp
c0014bf1:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014bf8:	89 c2                	mov    edx,eax
c0014bfa:	c1 ea 08             	shr    edx,0x8
c0014bfd:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0014c03:	83 e2 0f             	and    edx,0xf
c0014c06:	83 e1 3f             	and    ecx,0x3f
c0014c09:	89 d5                	mov    ebp,edx
c0014c0b:	c1 e5 06             	shl    ebp,0x6
c0014c0e:	09 cd                	or     ebp,ecx
c0014c10:	89 e9                	mov    ecx,ebp
c0014c12:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0014c18:	88 d1                	mov    cl,dl
c0014c1a:	c0 e9 02             	shr    cl,0x2
c0014c1d:	89 cd                	mov    ebp,ecx
c0014c1f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0014c25:	83 e1 c0             	and    ecx,0xffffffc0
c0014c28:	09 cd                	or     ebp,ecx
c0014c2a:	89 e9                	mov    ecx,ebp
c0014c2c:	89 c5                	mov    ebp,eax
c0014c2e:	c1 ed 0c             	shr    ebp,0xc
c0014c31:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014c37:	83 e5 03             	and    ebp,0x3
c0014c3a:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0014c40:	c1 e5 04             	shl    ebp,0x4
c0014c43:	83 e1 cf             	and    ecx,0xffffffcf
c0014c46:	09 cd                	or     ebp,ecx
c0014c48:	80 fa 06             	cmp    dl,0x6
c0014c4b:	89 e9                	mov    ecx,ebp
c0014c4d:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0014c53:	74 05                	je     c0014c5a <CPU::detectFeatures()+0x55a>
c0014c55:	80 fa 0f             	cmp    dl,0xf
c0014c58:	75 5d                	jne    c0014cb7 <CPU::detectFeatures()+0x5b7>
c0014c5a:	89 c5                	mov    ebp,eax
c0014c5c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014c60:	c1 ed 10             	shr    ebp,0x10
c0014c63:	c1 e5 04             	shl    ebp,0x4
c0014c66:	09 e9                	or     ecx,ebp
c0014c68:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014c6e:	0f b6 c9             	movzx  ecx,cl
c0014c71:	c1 e1 06             	shl    ecx,0x6
c0014c74:	66 81 e5 3f c0       	and    bp,0xc03f
c0014c79:	09 e9                	or     ecx,ebp
c0014c7b:	80 fa 0f             	cmp    dl,0xf
c0014c7e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0014c85:	75 30                	jne    c0014cb7 <CPU::detectFeatures()+0x5b7>
c0014c87:	c1 e8 14             	shr    eax,0x14
c0014c8a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014c90:	83 c0 0f             	add    eax,0xf
c0014c93:	83 e2 3f             	and    edx,0x3f
c0014c96:	88 c1                	mov    cl,al
c0014c98:	c1 e1 06             	shl    ecx,0x6
c0014c9b:	c0 e8 02             	shr    al,0x2
c0014c9e:	09 ca                	or     edx,ecx
c0014ca0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014ca6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014cac:	83 e2 c0             	and    edx,0xffffffc0
c0014caf:	09 d0                	or     eax,edx
c0014cb1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0014cb7:	83 ec 0c             	sub    esp,0xc
c0014cba:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014cc1:	56                   	push   esi
c0014cc2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014cc6:	50                   	push   eax
c0014cc7:	57                   	push   edi
c0014cc8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014ccc:	55                   	push   ebp
c0014ccd:	68 00 00 00 80       	push   0x80000000
c0014cd2:	e8 d1 f5 ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014cd7:	83 c4 20             	add    esp,0x20
c0014cda:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014ce2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014ce6:	76 1e                	jbe    c0014d06 <CPU::detectFeatures()+0x606>
c0014ce8:	83 ec 0c             	sub    esp,0xc
c0014ceb:	56                   	push   esi
c0014cec:	50                   	push   eax
c0014ced:	57                   	push   edi
c0014cee:	55                   	push   ebp
c0014cef:	68 01 00 00 80       	push   0x80000001
c0014cf4:	e8 af f5 ff ff       	call   c00142a8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014cf9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014d03:	83 c4 20             	add    esp,0x20
c0014d06:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014d0c:	83 f8 01             	cmp    eax,0x1
c0014d0f:	75 6f                	jne    c0014d80 <CPU::detectFeatures()+0x680>
c0014d11:	51                   	push   ecx
c0014d12:	51                   	push   ecx
c0014d13:	68 ee 21 02 c0       	push   0xc00221ee
c0014d18:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014d1c:	56                   	push   esi
c0014d1d:	e8 85 b9 fe ff       	call   c00006a7 <strcpy>
c0014d22:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014d28:	5f                   	pop    edi
c0014d29:	66 c1 e8 06          	shr    ax,0x6
c0014d2d:	5d                   	pop    ebp
c0014d2e:	0f b6 c0             	movzx  eax,al
c0014d31:	50                   	push   eax
c0014d32:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014d38:	c1 e8 0e             	shr    eax,0xe
c0014d3b:	0f b6 c0             	movzx  eax,al
c0014d3e:	50                   	push   eax
c0014d3f:	e8 04 f2 ff ff       	call   c0013f48 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014d44:	5a                   	pop    edx
c0014d45:	59                   	pop    ecx
c0014d46:	50                   	push   eax
c0014d47:	56                   	push   esi
c0014d48:	e8 11 ba fe ff       	call   c000075e <strcat>
c0014d4d:	5f                   	pop    edi
c0014d4e:	5d                   	pop    ebp
c0014d4f:	56                   	push   esi
c0014d50:	53                   	push   ebx
c0014d51:	e8 fa b9 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014d56:	58                   	pop    eax
c0014d57:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014d5d:	5a                   	pop    edx
c0014d5e:	68 f5 21 02 c0       	push   0xc00221f5
c0014d63:	50                   	push   eax
c0014d64:	e8 8f b9 fe ff       	call   c00006f8 <strcmp>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	85 c0                	test   eax,eax
c0014d6e:	0f 85 53 03 00 00    	jne    c00150c7 <CPU::detectFeatures()+0x9c7>
c0014d74:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014d7b:	e9 47 03 00 00       	jmp    c00150c7 <CPU::detectFeatures()+0x9c7>
c0014d80:	83 f8 02             	cmp    eax,0x2
c0014d83:	0f 85 b5 00 00 00    	jne    c0014e3e <CPU::detectFeatures()+0x73e>
c0014d89:	57                   	push   edi
c0014d8a:	57                   	push   edi
c0014d8b:	68 07 22 02 c0       	push   0xc0022207
c0014d90:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014d94:	56                   	push   esi
c0014d95:	e8 0d b9 fe ff       	call   c00006a7 <strcpy>
c0014d9a:	5d                   	pop    ebp
c0014d9b:	58                   	pop    eax
c0014d9c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014da2:	66 c1 e8 06          	shr    ax,0x6
c0014da6:	0f b6 c0             	movzx  eax,al
c0014da9:	50                   	push   eax
c0014daa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014db0:	c1 e8 0e             	shr    eax,0xe
c0014db3:	0f b6 c0             	movzx  eax,al
c0014db6:	50                   	push   eax
c0014db7:	e8 e7 ef ff ff       	call   c0013da3 <lookupAMDCPUName(unsigned char, unsigned char)>
c0014dbc:	5a                   	pop    edx
c0014dbd:	59                   	pop    ecx
c0014dbe:	50                   	push   eax
c0014dbf:	56                   	push   esi
c0014dc0:	e8 99 b9 fe ff       	call   c000075e <strcat>
c0014dc5:	5f                   	pop    edi
c0014dc6:	5d                   	pop    ebp
c0014dc7:	56                   	push   esi
c0014dc8:	53                   	push   ebx
c0014dc9:	e8 82 b9 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014dce:	58                   	pop    eax
c0014dcf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014dd5:	5a                   	pop    edx
c0014dd6:	68 0c 22 02 c0       	push   0xc002220c
c0014ddb:	50                   	push   eax
c0014ddc:	e8 17 b9 fe ff       	call   c00006f8 <strcmp>
c0014de1:	83 c4 10             	add    esp,0x10
c0014de4:	85 c0                	test   eax,eax
c0014de6:	75 20                	jne    c0014e08 <CPU::detectFeatures()+0x708>
c0014de8:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c0014dee:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014df4:	a8 01                	test   al,0x1
c0014df6:	74 10                	je     c0014e08 <CPU::detectFeatures()+0x708>
c0014df8:	83 e0 fe             	and    eax,0xfffffffe
c0014dfb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014e01:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014e08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014e0e:	c1 e8 0e             	shr    eax,0xe
c0014e11:	3c 05                	cmp    al,0x5
c0014e13:	0f 85 ae 02 00 00    	jne    c00150c7 <CPU::detectFeatures()+0x9c7>
c0014e19:	56                   	push   esi
c0014e1a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014e20:	83 e0 0f             	and    eax,0xf
c0014e23:	50                   	push   eax
c0014e24:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014e2a:	66 c1 e8 06          	shr    ax,0x6
c0014e2e:	0f b6 c0             	movzx  eax,al
c0014e31:	50                   	push   eax
c0014e32:	6a 05                	push   0x5
c0014e34:	e8 fc f3 ff ff       	call   c0014235 <AMD_K6_writeback(int, int, int)>
c0014e39:	e9 ff 01 00 00       	jmp    c001503d <CPU::detectFeatures()+0x93d>
c0014e3e:	89 c1                	mov    ecx,eax
c0014e40:	83 e1 fd             	and    ecx,0xfffffffd
c0014e43:	83 f9 04             	cmp    ecx,0x4
c0014e46:	74 09                	je     c0014e51 <CPU::detectFeatures()+0x751>
c0014e48:	83 f8 03             	cmp    eax,0x3
c0014e4b:	0f 85 6f 01 00 00    	jne    c0014fc0 <CPU::detectFeatures()+0x8c0>
c0014e51:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014e57:	c1 ea 0e             	shr    edx,0xe
c0014e5a:	80 fa 05             	cmp    dl,0x5
c0014e5d:	75 62                	jne    c0014ec1 <CPU::detectFeatures()+0x7c1>
c0014e5f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014e65:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014e6a:	66 81 fa 00 01       	cmp    dx,0x100
c0014e6f:	75 0c                	jne    c0014e7d <CPU::detectFeatures()+0x77d>
c0014e71:	51                   	push   ecx
c0014e72:	51                   	push   ecx
c0014e73:	68 13 22 02 c0       	push   0xc0022213
c0014e78:	e9 ba 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014e7d:	66 81 fa 00 02       	cmp    dx,0x200
c0014e82:	75 0c                	jne    c0014e90 <CPU::detectFeatures()+0x790>
c0014e84:	52                   	push   edx
c0014e85:	52                   	push   edx
c0014e86:	68 26 22 02 c0       	push   0xc0022226
c0014e8b:	e9 a7 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014e90:	66 81 fa 40 02       	cmp    dx,0x240
c0014e95:	75 0c                	jne    c0014ea3 <CPU::detectFeatures()+0x7a3>
c0014e97:	50                   	push   eax
c0014e98:	50                   	push   eax
c0014e99:	68 38 22 02 c0       	push   0xc0022238
c0014e9e:	e9 94 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014ea3:	83 f8 06             	cmp    eax,0x6
c0014ea6:	0f 84 ee 00 00 00    	je     c0014f9a <CPU::detectFeatures()+0x89a>
c0014eac:	83 f9 04             	cmp    ecx,0x4
c0014eaf:	0f 84 f6 00 00 00    	je     c0014fab <CPU::detectFeatures()+0x8ab>
c0014eb5:	50                   	push   eax
c0014eb6:	50                   	push   eax
c0014eb7:	68 5e 22 02 c0       	push   0xc002225e
c0014ebc:	e9 76 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014ec1:	80 fa 06             	cmp    dl,0x6
c0014ec4:	0f 85 cb 00 00 00    	jne    c0014f95 <CPU::detectFeatures()+0x895>
c0014eca:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014ed0:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014ed5:	66 81 fa 80 01       	cmp    dx,0x180
c0014eda:	75 0c                	jne    c0014ee8 <CPU::detectFeatures()+0x7e8>
c0014edc:	50                   	push   eax
c0014edd:	50                   	push   eax
c0014ede:	68 69 22 02 c0       	push   0xc0022269
c0014ee3:	e9 4f 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014ee8:	66 81 fa c0 01       	cmp    dx,0x1c0
c0014eed:	74 07                	je     c0014ef6 <CPU::detectFeatures()+0x7f6>
c0014eef:	66 81 fa 00 02       	cmp    dx,0x200
c0014ef4:	75 0c                	jne    c0014f02 <CPU::detectFeatures()+0x802>
c0014ef6:	50                   	push   eax
c0014ef7:	50                   	push   eax
c0014ef8:	68 79 22 02 c0       	push   0xc0022279
c0014efd:	e9 35 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014f02:	66 81 fa 40 02       	cmp    dx,0x240
c0014f07:	75 0c                	jne    c0014f15 <CPU::detectFeatures()+0x815>
c0014f09:	50                   	push   eax
c0014f0a:	50                   	push   eax
c0014f0b:	68 80 22 02 c0       	push   0xc0022280
c0014f10:	e9 22 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014f15:	66 81 fa 80 02       	cmp    dx,0x280
c0014f1a:	74 07                	je     c0014f23 <CPU::detectFeatures()+0x823>
c0014f1c:	66 81 fa 40 03       	cmp    dx,0x340
c0014f21:	75 0c                	jne    c0014f2f <CPU::detectFeatures()+0x82f>
c0014f23:	50                   	push   eax
c0014f24:	50                   	push   eax
c0014f25:	68 89 22 02 c0       	push   0xc0022289
c0014f2a:	e9 08 01 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014f2f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014f34:	75 0c                	jne    c0014f42 <CPU::detectFeatures()+0x842>
c0014f36:	55                   	push   ebp
c0014f37:	55                   	push   ebp
c0014f38:	68 90 22 02 c0       	push   0xc0022290
c0014f3d:	e9 f5 00 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014f42:	83 f8 06             	cmp    eax,0x6
c0014f45:	74 53                	je     c0014f9a <CPU::detectFeatures()+0x89a>
c0014f47:	83 f9 04             	cmp    ecx,0x4
c0014f4a:	74 5f                	je     c0014fab <CPU::detectFeatures()+0x8ab>
c0014f4c:	57                   	push   edi
c0014f4d:	57                   	push   edi
c0014f4e:	68 99 22 02 c0       	push   0xc0022299
c0014f53:	53                   	push   ebx
c0014f54:	e8 f7 b7 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014f59:	b1 c1                	mov    cl,0xc1
c0014f5b:	88 c8                	mov    al,cl
c0014f5d:	e6 22                	out    0x22,al
c0014f5f:	e4 23                	in     al,0x23
c0014f61:	88 c2                	mov    dl,al
c0014f63:	88 c8                	mov    al,cl
c0014f65:	e6 22                	out    0x22,al
c0014f67:	88 d0                	mov    al,dl
c0014f69:	83 c8 10             	or     eax,0x10
c0014f6c:	e6 23                	out    0x23,al
c0014f6e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014f75:	89 d0                	mov    eax,edx
c0014f77:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014f7a:	40                   	inc    eax
c0014f7b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014f81:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014f85:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014f8b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014f90:	e9 a8 00 00 00       	jmp    c001503d <CPU::detectFeatures()+0x93d>
c0014f95:	83 f8 06             	cmp    eax,0x6
c0014f98:	75 0c                	jne    c0014fa6 <CPU::detectFeatures()+0x8a6>
c0014f9a:	56                   	push   esi
c0014f9b:	56                   	push   esi
c0014f9c:	68 4a 22 02 c0       	push   0xc002224a
c0014fa1:	e9 91 00 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014fa6:	83 f9 04             	cmp    ecx,0x4
c0014fa9:	75 0c                	jne    c0014fb7 <CPU::detectFeatures()+0x8b7>
c0014fab:	51                   	push   ecx
c0014fac:	51                   	push   ecx
c0014fad:	68 56 22 02 c0       	push   0xc0022256
c0014fb2:	e9 80 00 00 00       	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014fb7:	52                   	push   edx
c0014fb8:	52                   	push   edx
c0014fb9:	68 a4 22 02 c0       	push   0xc00222a4
c0014fbe:	eb 77                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014fc0:	83 f8 07             	cmp    eax,0x7
c0014fc3:	75 09                	jne    c0014fce <CPU::detectFeatures()+0x8ce>
c0014fc5:	50                   	push   eax
c0014fc6:	50                   	push   eax
c0014fc7:	68 ae 22 02 c0       	push   0xc00222ae
c0014fcc:	eb 69                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014fce:	83 f8 0a             	cmp    eax,0xa
c0014fd1:	75 09                	jne    c0014fdc <CPU::detectFeatures()+0x8dc>
c0014fd3:	50                   	push   eax
c0014fd4:	50                   	push   eax
c0014fd5:	68 b9 22 02 c0       	push   0xc00222b9
c0014fda:	eb 5b                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014fdc:	83 f8 0b             	cmp    eax,0xb
c0014fdf:	75 09                	jne    c0014fea <CPU::detectFeatures()+0x8ea>
c0014fe1:	50                   	push   eax
c0014fe2:	50                   	push   eax
c0014fe3:	68 c1 22 02 c0       	push   0xc00222c1
c0014fe8:	eb 4d                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014fea:	83 f8 08             	cmp    eax,0x8
c0014fed:	75 09                	jne    c0014ff8 <CPU::detectFeatures()+0x8f8>
c0014fef:	50                   	push   eax
c0014ff0:	50                   	push   eax
c0014ff1:	68 ca 22 02 c0       	push   0xc00222ca
c0014ff6:	eb 3f                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0014ff8:	83 f8 09             	cmp    eax,0x9
c0014ffb:	75 09                	jne    c0015006 <CPU::detectFeatures()+0x906>
c0014ffd:	50                   	push   eax
c0014ffe:	50                   	push   eax
c0014fff:	68 d2 22 02 c0       	push   0xc00222d2
c0015004:	eb 31                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0015006:	83 f8 05             	cmp    eax,0x5
c0015009:	75 09                	jne    c0015014 <CPU::detectFeatures()+0x914>
c001500b:	50                   	push   eax
c001500c:	50                   	push   eax
c001500d:	68 da 22 02 c0       	push   0xc00222da
c0015012:	eb 23                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0015014:	83 f8 0c             	cmp    eax,0xc
c0015017:	75 09                	jne    c0015022 <CPU::detectFeatures()+0x922>
c0015019:	55                   	push   ebp
c001501a:	55                   	push   ebp
c001501b:	68 e8 22 02 c0       	push   0xc00222e8
c0015020:	eb 15                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0015022:	83 f8 0d             	cmp    eax,0xd
c0015025:	75 09                	jne    c0015030 <CPU::detectFeatures()+0x930>
c0015027:	57                   	push   edi
c0015028:	57                   	push   edi
c0015029:	68 f3 22 02 c0       	push   0xc00222f3
c001502e:	eb 07                	jmp    c0015037 <CPU::detectFeatures()+0x937>
c0015030:	56                   	push   esi
c0015031:	56                   	push   esi
c0015032:	68 07 23 02 c0       	push   0xc0022307
c0015037:	53                   	push   ebx
c0015038:	e8 13 b7 ff ff       	call   c0010750 <Device::setName(char const*)>
c001503d:	83 c4 10             	add    esp,0x10
c0015040:	e9 82 00 00 00       	jmp    c00150c7 <CPU::detectFeatures()+0x9c7>
c0015045:	51                   	push   ecx
c0015046:	51                   	push   ecx
c0015047:	68 53 21 02 c0       	push   0xc0022153
c001504c:	57                   	push   edi
c001504d:	e8 55 b6 fe ff       	call   c00006a7 <strcpy>
c0015052:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001505c:	e8 1e b1 fe ff       	call   c000017f <is486>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	85 c0                	test   eax,eax
c0015066:	74 2d                	je     c0015095 <CPU::detectFeatures()+0x995>
c0015068:	52                   	push   edx
c0015069:	52                   	push   edx
c001506a:	68 13 23 02 c0       	push   0xc0022313
c001506f:	53                   	push   ebx
c0015070:	e8 db b6 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015075:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001507c:	e8 e7 a5 00 00       	call   c001f668 <CPU::readCR0()>
c0015081:	83 c4 10             	add    esp,0x10
c0015084:	83 e0 14             	and    eax,0x14
c0015087:	83 f8 04             	cmp    eax,0x4
c001508a:	75 1f                	jne    c00150ab <CPU::detectFeatures()+0x9ab>
c001508c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015093:	eb 32                	jmp    c00150c7 <CPU::detectFeatures()+0x9c7>
c0015095:	50                   	push   eax
c0015096:	50                   	push   eax
c0015097:	68 1e 23 02 c0       	push   0xc002231e
c001509c:	53                   	push   ebx
c001509d:	e8 ae b6 ff ff       	call   c0010750 <Device::setName(char const*)>
c00150a2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00150a9:	eb d1                	jmp    c001507c <CPU::detectFeatures()+0x97c>
c00150ab:	e8 aa b0 fe ff       	call   c000015a <hasLegacyFPU>
c00150b0:	83 e0 01             	and    eax,0x1
c00150b3:	8d 14 00             	lea    edx,[eax+eax*1]
c00150b6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00150bc:	83 e0 fd             	and    eax,0xfffffffd
c00150bf:	09 d0                	or     eax,edx
c00150c1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00150c7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00150ce:	83 c4 4c             	add    esp,0x4c
c00150d1:	5b                   	pop    ebx
c00150d2:	5e                   	pop    esi
c00150d3:	5f                   	pop    edi
c00150d4:	5d                   	pop    ebp
c00150d5:	c3                   	ret    

c00150d6 <CPU::setupSMEP()>:
c00150d6:	83 ec 0c             	sub    esp,0xc
c00150d9:	e8 54 a8 00 00       	call   c001f932 <CPU::readCR4()>
c00150de:	0d 00 00 10 00       	or     eax,0x100000
c00150e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150e7:	83 c4 0c             	add    esp,0xc
c00150ea:	e9 5e a8 00 00       	jmp    c001f94d <CPU::writeCR4(unsigned long)>
c00150ef:	90                   	nop

c00150f0 <CPU::setupUMIP()>:
c00150f0:	83 ec 0c             	sub    esp,0xc
c00150f3:	e8 3a a8 00 00       	call   c001f932 <CPU::readCR4()>
c00150f8:	80 cc 08             	or     ah,0x8
c00150fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150ff:	83 c4 0c             	add    esp,0xc
c0015102:	e9 46 a8 00 00       	jmp    c001f94d <CPU::writeCR4(unsigned long)>
c0015107:	90                   	nop

c0015108 <CPU::setupTSC()>:
c0015108:	83 ec 0c             	sub    esp,0xc
c001510b:	e8 22 a8 00 00       	call   c001f932 <CPU::readCR4()>
c0015110:	83 c8 04             	or     eax,0x4
c0015113:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015117:	83 c4 0c             	add    esp,0xc
c001511a:	e9 2e a8 00 00       	jmp    c001f94d <CPU::writeCR4(unsigned long)>
c001511f:	90                   	nop

c0015120 <CPU::setupLargePages()>:
c0015120:	83 ec 0c             	sub    esp,0xc
c0015123:	e8 0a a8 00 00       	call   c001f932 <CPU::readCR4()>
c0015128:	83 c8 10             	or     eax,0x10
c001512b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001512f:	83 c4 0c             	add    esp,0xc
c0015132:	e9 16 a8 00 00       	jmp    c001f94d <CPU::writeCR4(unsigned long)>
c0015137:	90                   	nop

c0015138 <CPU::setupPAT()>:
c0015138:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001513d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015144:	74 2c                	je     c0015172 <CPU::setupPAT()+0x3a>
c0015146:	53                   	push   ebx
c0015147:	83 ec 10             	sub    esp,0x10
c001514a:	68 77 02 00 00       	push   0x277
c001514f:	50                   	push   eax
c0015150:	e8 6f 63 ff ff       	call   c000b4c4 <Computer::rdmsr(unsigned int)>
c0015155:	83 e2 f8             	and    edx,0xfffffff8
c0015158:	83 ca 01             	or     edx,0x1
c001515b:	52                   	push   edx
c001515c:	50                   	push   eax
c001515d:	68 77 02 00 00       	push   0x277
c0015162:	ff 35 88 42 02 c0    	push   DWORD PTR ds:0xc0024288
c0015168:	e8 83 63 ff ff       	call   c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c001516d:	83 c4 28             	add    esp,0x28
c0015170:	5b                   	pop    ebx
c0015171:	c3                   	ret    
c0015172:	c3                   	ret    
c0015173:	90                   	nop

c0015174 <CPU::setupMTRR()>:
c0015174:	c3                   	ret    
c0015175:	90                   	nop

c0015176 <CPU::setupGlobalPages()>:
c0015176:	83 ec 0c             	sub    esp,0xc
c0015179:	e8 b4 a7 00 00       	call   c001f932 <CPU::readCR4()>
c001517e:	0c 80                	or     al,0x80
c0015180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015184:	83 c4 0c             	add    esp,0xc
c0015187:	e9 c1 a7 00 00       	jmp    c001f94d <CPU::writeCR4(unsigned long)>

c001518c <CPU::allowUsermodeDataAccess()>:
c001518c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015190:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015197:	74 03                	je     c001519c <CPU::allowUsermodeDataAccess()+0x10>
c0015199:	0f 01 cb             	stac   
c001519c:	c3                   	ret    
c001519d:	90                   	nop

c001519e <CPU::prohibitUsermodeDataAccess()>:
c001519e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151a2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00151a9:	74 03                	je     c00151ae <CPU::prohibitUsermodeDataAccess()+0x10>
c00151ab:	0f 01 ca             	clac   
c00151ae:	c3                   	ret    
c00151af:	90                   	nop

c00151b0 <CPU::setupSMAP()>:
c00151b0:	53                   	push   ebx
c00151b1:	83 ec 08             	sub    esp,0x8
c00151b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151b8:	e8 75 a7 00 00       	call   c001f932 <CPU::readCR4()>
c00151bd:	83 ec 0c             	sub    esp,0xc
c00151c0:	0d 00 00 20 00       	or     eax,0x200000
c00151c5:	50                   	push   eax
c00151c6:	e8 82 a7 00 00       	call   c001f94d <CPU::writeCR4(unsigned long)>
c00151cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00151cf:	83 c4 18             	add    esp,0x18
c00151d2:	5b                   	pop    ebx
c00151d3:	eb c9                	jmp    c001519e <CPU::prohibitUsermodeDataAccess()>
c00151d5:	90                   	nop

c00151d6 <CPU::setupFeatures()>:
c00151d6:	53                   	push   ebx
c00151d7:	83 ec 08             	sub    esp,0x8
c00151da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151de:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00151e5:	74 0c                	je     c00151f3 <CPU::setupFeatures()+0x1d>
c00151e7:	83 ec 0c             	sub    esp,0xc
c00151ea:	53                   	push   ebx
c00151eb:	e8 e6 fe ff ff       	call   c00150d6 <CPU::setupSMEP()>
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00151fa:	74 0c                	je     c0015208 <CPU::setupFeatures()+0x32>
c00151fc:	83 ec 0c             	sub    esp,0xc
c00151ff:	53                   	push   ebx
c0015200:	e8 ab ff ff ff       	call   c00151b0 <CPU::setupSMAP()>
c0015205:	83 c4 10             	add    esp,0x10
c0015208:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001520f:	74 0c                	je     c001521d <CPU::setupFeatures()+0x47>
c0015211:	83 ec 0c             	sub    esp,0xc
c0015214:	53                   	push   ebx
c0015215:	e8 d6 fe ff ff       	call   c00150f0 <CPU::setupUMIP()>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015224:	74 0c                	je     c0015232 <CPU::setupFeatures()+0x5c>
c0015226:	83 ec 0c             	sub    esp,0xc
c0015229:	53                   	push   ebx
c001522a:	e8 d9 fe ff ff       	call   c0015108 <CPU::setupTSC()>
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015239:	74 0c                	je     c0015247 <CPU::setupFeatures()+0x71>
c001523b:	83 ec 0c             	sub    esp,0xc
c001523e:	53                   	push   ebx
c001523f:	e8 dc fe ff ff       	call   c0015120 <CPU::setupLargePages()>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001524e:	74 0c                	je     c001525c <CPU::setupFeatures()+0x86>
c0015250:	83 ec 0c             	sub    esp,0xc
c0015253:	53                   	push   ebx
c0015254:	e8 1d ff ff ff       	call   c0015176 <CPU::setupGlobalPages()>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015263:	74 0d                	je     c0015272 <CPU::setupFeatures()+0x9c>
c0015265:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015269:	83 c4 08             	add    esp,0x8
c001526c:	5b                   	pop    ebx
c001526d:	e9 c6 fe ff ff       	jmp    c0015138 <CPU::setupPAT()>
c0015272:	83 c4 08             	add    esp,0x8
c0015275:	5b                   	pop    ebx
c0015276:	c3                   	ret    
c0015277:	90                   	nop

c0015278 <CPU::open(int, int, void*)>:
c0015278:	57                   	push   edi
c0015279:	56                   	push   esi
c001527a:	53                   	push   ebx
c001527b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001527f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001528c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015292:	50                   	push   eax
c0015293:	e8 1c 65 ff ff       	call   c000b7b4 <GDT::setup()>
c0015298:	83 c4 0c             	add    esp,0xc
c001529b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00152a1:	6a 00                	push   0x0
c00152a3:	68 ef be ad de       	push   0xdeadbeef
c00152a8:	57                   	push   edi
c00152a9:	e8 9c 87 ff ff       	call   c000da4a <TSS::setup(unsigned long, unsigned long)>
c00152ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00152b1:	e8 74 87 ff ff       	call   c000da2a <TSS::flush()>
c00152b6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00152bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00152bf:	e8 4a 67 ff ff       	call   c000ba0e <IDT::setup()>
c00152c4:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00152cb:	e8 74 a6 00 00       	call   c001f944 <CPU::writeDR7(unsigned long)>
c00152d0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00152da:	e8 1e 72 ff ff       	call   c000c4fd <Phys::allocatePage()>
c00152df:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00152e5:	89 30                	mov    DWORD PTR [eax],esi
c00152e7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00152ed:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00152f0:	58                   	pop    eax
c00152f1:	5a                   	pop    edx
c00152f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00152f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00152fc:	e8 dd 97 ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c0015301:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015304:	e8 f7 f3 ff ff       	call   c0014700 <CPU::detectFeatures()>
c0015309:	e8 cc c4 ff ff       	call   c00117da <setupInterruptController()>
c001530e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015314:	a1 a0 42 02 c0       	mov    eax,ds:0xc00242a0
c0015319:	83 e0 10             	and    eax,0x10
c001531c:	83 f8 01             	cmp    eax,0x1
c001531f:	19 c0                	sbb    eax,eax
c0015321:	83 e0 46             	and    eax,0x46
c0015324:	83 c0 1e             	add    eax,0x1e
c0015327:	89 04 24             	mov    DWORD PTR [esp],eax
c001532a:	e8 a7 d6 ff ff       	call   c00129d6 <setupTimer(int)>
c001532f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015338:	e8 99 fe ff ff       	call   c00151d6 <CPU::setupFeatures()>
c001533d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015340:	e8 3f f1 ff ff       	call   c0014484 <CPU::displayFeatures()>
c0015345:	83 c4 10             	add    esp,0x10
c0015348:	5b                   	pop    ebx
c0015349:	31 c0                	xor    eax,eax
c001534b:	5e                   	pop    esi
c001534c:	5f                   	pop    edi
c001534d:	c3                   	ret    

c001534e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001534e:	56                   	push   esi
c001534f:	53                   	push   ebx
c0015350:	51                   	push   ecx
c0015351:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015355:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015359:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c001535c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001535f:	88 c1                	mov    cl,al
c0015361:	c0 e9 06             	shr    cl,0x6
c0015364:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015367:	88 c1                	mov    cl,al
c0015369:	66 c1 e8 03          	shr    ax,0x3
c001536d:	83 e1 07             	and    ecx,0x7
c0015370:	83 e0 07             	and    eax,0x7
c0015373:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015377:	88 06                	mov    BYTE PTR [esi],al
c0015379:	74 7f                	je     c00153fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001537b:	80 f9 04             	cmp    cl,0x4
c001537e:	74 7a                	je     c00153fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015380:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015384:	75 05                	jne    c001538b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015386:	80 f9 05             	cmp    cl,0x5
c0015389:	74 6f                	je     c00153fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001538b:	84 c9                	test   cl,cl
c001538d:	75 05                	jne    c0015394 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c001538f:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015392:	eb 3c                	jmp    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015394:	80 f9 01             	cmp    cl,0x1
c0015397:	75 05                	jne    c001539e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015399:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001539c:	eb 32                	jmp    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001539e:	80 f9 02             	cmp    cl,0x2
c00153a1:	75 05                	jne    c00153a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c00153a3:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00153a6:	eb 28                	jmp    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00153a8:	31 c0                	xor    eax,eax
c00153aa:	80 f9 03             	cmp    cl,0x3
c00153ad:	75 05                	jne    c00153b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00153af:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00153b2:	eb 1c                	jmp    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00153b4:	80 f9 05             	cmp    cl,0x5
c00153b7:	75 05                	jne    c00153be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00153b9:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00153bc:	eb 12                	jmp    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00153be:	80 f9 06             	cmp    cl,0x6
c00153c1:	75 05                	jne    c00153c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00153c3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00153c6:	eb 08                	jmp    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00153c8:	80 f9 07             	cmp    cl,0x7
c00153cb:	75 03                	jne    c00153d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00153cd:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00153d0:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00153d4:	75 10                	jne    c00153e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00153d6:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00153da:	b9 03 00 00 00       	mov    ecx,0x3
c00153df:	01 d0                	add    eax,edx
c00153e1:	e9 42 01 00 00       	jmp    c0015528 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00153e6:	b9 02 00 00 00       	mov    ecx,0x2
c00153eb:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00153ef:	0f 85 33 01 00 00    	jne    c0015528 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00153f5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00153f8:	eb 18                	jmp    c0015412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00153fa:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00153fe:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c0015403:	80 f9 05             	cmp    cl,0x5
c0015406:	0f 94 c0             	sete   al
c0015409:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c001540d:	74 0d                	je     c001541c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001540f:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015412:	b9 06 00 00 00       	mov    ecx,0x6
c0015417:	e9 0c 01 00 00       	jmp    c0015528 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001541c:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015420:	0f 84 06 01 00 00    	je     c001552c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015426:	80 f9 04             	cmp    cl,0x4
c0015429:	0f 85 06 01 00 00    	jne    c0015535 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001542f:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015432:	89 c6                	mov    esi,eax
c0015434:	88 c1                	mov    cl,al
c0015436:	66 c1 ee 03          	shr    si,0x3
c001543a:	c0 e9 06             	shr    cl,0x6
c001543d:	83 e6 07             	and    esi,0x7
c0015440:	24 07                	and    al,0x7
c0015442:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015446:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001544a:	89 f1                	mov    ecx,esi
c001544c:	75 05                	jne    c0015453 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c001544e:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015451:	eb 4b                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015453:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015458:	75 05                	jne    c001545f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c001545a:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c001545d:	eb 3f                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001545f:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015464:	75 05                	jne    c001546b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015466:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015469:	eb 33                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001546b:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015470:	75 05                	jne    c0015477 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015472:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015475:	eb 27                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015477:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c001547c:	75 05                	jne    c0015483 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c001547e:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015481:	eb 1b                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015483:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015488:	75 05                	jne    c001548f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001548a:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c001548d:	eb 0f                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001548f:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015494:	75 05                	jne    c001549b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015496:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015499:	eb 03                	jmp    c001549e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001549b:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001549e:	84 c9                	test   cl,cl
c00154a0:	75 05                	jne    c00154a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00154a2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00154a5:	eb 3c                	jmp    c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154a7:	80 f9 01             	cmp    cl,0x1
c00154aa:	75 05                	jne    c00154b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00154ac:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00154af:	eb 32                	jmp    c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154b1:	80 f9 02             	cmp    cl,0x2
c00154b4:	75 05                	jne    c00154bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00154b6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00154b9:	eb 28                	jmp    c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154bb:	80 f9 03             	cmp    cl,0x3
c00154be:	75 05                	jne    c00154c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00154c0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00154c3:	eb 1e                	jmp    c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154c5:	31 c0                	xor    eax,eax
c00154c7:	80 f9 04             	cmp    cl,0x4
c00154ca:	74 17                	je     c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154cc:	80 f9 05             	cmp    cl,0x5
c00154cf:	75 05                	jne    c00154d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00154d1:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00154d4:	eb 0d                	jmp    c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154d6:	80 f9 06             	cmp    cl,0x6
c00154d9:	75 05                	jne    c00154e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00154db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00154de:	eb 03                	jmp    c00154e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00154e0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00154e3:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00154e8:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00154ec:	0f 94 c2             	sete   dl
c00154ef:	d3 e0                	shl    eax,cl
c00154f1:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00154f5:	74 07                	je     c00154fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00154f7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00154fa:	31 d2                	xor    edx,edx
c00154fc:	eb 23                	jmp    c0015521 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00154fe:	01 f0                	add    eax,esi
c0015500:	b9 03 00 00 00       	mov    ecx,0x3
c0015505:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015509:	74 33                	je     c001553e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c001550b:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c001550f:	75 0d                	jne    c001551e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015511:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015515:	01 c8                	add    eax,ecx
c0015517:	b9 04 00 00 00       	mov    ecx,0x4
c001551c:	eb 20                	jmp    c001553e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c001551e:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015521:	b9 07 00 00 00       	mov    ecx,0x7
c0015526:	eb 16                	jmp    c001553e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015528:	31 d2                	xor    edx,edx
c001552a:	eb 12                	jmp    c001553e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c001552c:	b9 02 00 00 00       	mov    ecx,0x2
c0015531:	b2 01                	mov    dl,0x1
c0015533:	eb 07                	jmp    c001553c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015535:	31 d2                	xor    edx,edx
c0015537:	b9 02 00 00 00       	mov    ecx,0x2
c001553c:	31 c0                	xor    eax,eax
c001553e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015542:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015544:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015548:	88 11                	mov    BYTE PTR [ecx],dl
c001554a:	5a                   	pop    edx
c001554b:	5b                   	pop    ebx
c001554c:	5e                   	pop    esi
c001554d:	c3                   	ret    

c001554e <Krnl::panic(char const*)>:
c001554e:	55                   	push   ebp
c001554f:	89 e5                	mov    ebp,esp
c0015551:	53                   	push   ebx
c0015552:	51                   	push   ecx
c0015553:	a1 d0 4c 02 c0       	mov    eax,ds:0xc0024cd0
c0015558:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001555b:	85 c0                	test   eax,eax
c001555d:	74 02                	je     c0015561 <Krnl::panic(char const*)+0x13>
c001555f:	ff d0                	call   eax
c0015561:	fa                   	cli    
c0015562:	50                   	push   eax
c0015563:	c6 05 d4 4c 02 c0 01 	mov    BYTE PTR ds:0xc0024cd4,0x1
c001556a:	50                   	push   eax
c001556b:	c6 05 c0 36 02 c0 00 	mov    BYTE PTR ds:0xc00236c0,0x0
c0015572:	53                   	push   ebx
c0015573:	68 58 23 02 c0       	push   0xc0022358
c0015578:	e8 dc 9b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001557d:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015582:	5a                   	pop    edx
c0015583:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015589:	51                   	push   ecx
c001558a:	e8 fa 7c ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c001558f:	83 c4 0c             	add    esp,0xc
c0015592:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015597:	6a 01                	push   0x1
c0015599:	6a 0f                	push   0xf
c001559b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00155a1:	50                   	push   eax
c00155a2:	e8 21 77 ff ff       	call   c000ccc8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155a7:	58                   	pop    eax
c00155a8:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00155ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00155b3:	50                   	push   eax
c00155b4:	e8 73 7f ff ff       	call   c000d52c <VgaText::clearScreen()>
c00155b9:	58                   	pop    eax
c00155ba:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00155bf:	5a                   	pop    edx
c00155c0:	68 71 23 02 c0       	push   0xc0022371
c00155c5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155cb:	51                   	push   ecx
c00155cc:	e8 d9 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00155d1:	58                   	pop    eax
c00155d2:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00155d7:	5a                   	pop    edx
c00155d8:	68 10 24 02 c0       	push   0xc0022410
c00155dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155e3:	51                   	push   ecx
c00155e4:	e8 c1 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00155e9:	58                   	pop    eax
c00155ea:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00155ef:	5a                   	pop    edx
c00155f0:	68 8d 23 02 c0       	push   0xc002238d
c00155f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155fb:	51                   	push   ecx
c00155fc:	e8 a9 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015601:	58                   	pop    eax
c0015602:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015607:	5a                   	pop    edx
c0015608:	53                   	push   ebx
c0015609:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001560f:	51                   	push   ecx
c0015610:	e8 95 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015615:	5b                   	pop    ebx
c0015616:	58                   	pop    eax
c0015617:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001561c:	68 ad 23 02 c0       	push   0xc00223ad
c0015621:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015627:	50                   	push   eax
c0015628:	e8 7d 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001562d:	58                   	pop    eax
c001562e:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015633:	5a                   	pop    edx
c0015634:	68 4c 24 02 c0       	push   0xc002244c
c0015639:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001563f:	51                   	push   ecx
c0015640:	e8 65 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015645:	5b                   	pop    ebx
c0015646:	58                   	pop    eax
c0015647:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001564c:	68 8d 23 02 c0       	push   0xc002238d
c0015651:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015657:	50                   	push   eax
c0015658:	e8 4d 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001565d:	58                   	pop    eax
c001565e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015663:	5a                   	pop    edx
c0015664:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015667:	83 c0 0c             	add    eax,0xc
c001566a:	50                   	push   eax
c001566b:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015670:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015676:	51                   	push   ecx
c0015677:	e8 2e 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001567c:	5b                   	pop    ebx
c001567d:	58                   	pop    eax
c001567e:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015683:	68 ac 23 02 c0       	push   0xc00223ac
c0015688:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001568e:	50                   	push   eax
c001568f:	e8 16 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015694:	58                   	pop    eax
c0015695:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001569a:	5a                   	pop    edx
c001569b:	68 78 24 02 c0       	push   0xc0022478
c00156a0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00156a6:	51                   	push   ecx
c00156a7:	e8 fe 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00156ac:	5b                   	pop    ebx
c00156ad:	58                   	pop    eax
c00156ae:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00156b3:	68 b8 24 02 c0       	push   0xc00224b8
c00156b8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00156be:	50                   	push   eax
c00156bf:	e8 e6 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00156c4:	58                   	pop    eax
c00156c5:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00156ca:	5a                   	pop    edx
c00156cb:	68 98 23 02 c0       	push   0xc0022398
c00156d0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00156d6:	51                   	push   ecx
c00156d7:	e8 ce 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00156dc:	5b                   	pop    ebx
c00156dd:	58                   	pop    eax
c00156de:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00156e1:	50                   	push   eax
c00156e2:	68 b0 23 02 c0       	push   0xc00223b0
c00156e7:	e8 6d 9a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00156ec:	58                   	pop    eax
c00156ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00156f0:	5a                   	pop    edx
c00156f1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00156f4:	51                   	push   ecx
c00156f5:	68 b9 23 02 c0       	push   0xc00223b9
c00156fa:	e8 5a 9a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00156ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015702:	5b                   	pop    ebx
c0015703:	5a                   	pop    edx
c0015704:	8b 00                	mov    eax,DWORD PTR [eax]
c0015706:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015709:	51                   	push   ecx
c001570a:	68 1d 1a 02 c0       	push   0xc0021a1d
c001570f:	e8 45 9a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015714:	5b                   	pop    ebx
c0015715:	58                   	pop    eax
c0015716:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001571b:	68 fc 24 02 c0       	push   0xc00224fc
c0015720:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015726:	50                   	push   eax
c0015727:	e8 7e 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001572c:	58                   	pop    eax
c001572d:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015732:	5a                   	pop    edx
c0015733:	68 c2 23 02 c0       	push   0xc00223c2
c0015738:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001573e:	51                   	push   ecx
c001573f:	e8 66 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015744:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015749:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001574f:	e8 14 9f 00 00       	call   c001f668 <CPU::readCR0()>
c0015754:	5a                   	pop    edx
c0015755:	59                   	pop    ecx
c0015756:	50                   	push   eax
c0015757:	53                   	push   ebx
c0015758:	e8 73 7f ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001575d:	5b                   	pop    ebx
c001575e:	58                   	pop    eax
c001575f:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015764:	68 cc 23 02 c0       	push   0xc00223cc
c0015769:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001576f:	50                   	push   eax
c0015770:	e8 35 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015775:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001577a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015780:	e8 d1 a1 00 00       	call   c001f956 <CPU::readCR2()>
c0015785:	5a                   	pop    edx
c0015786:	59                   	pop    ecx
c0015787:	50                   	push   eax
c0015788:	53                   	push   ebx
c0015789:	e8 42 7f ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001578e:	5b                   	pop    ebx
c001578f:	58                   	pop    eax
c0015790:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015795:	68 d6 23 02 c0       	push   0xc00223d6
c001579a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157a0:	50                   	push   eax
c00157a1:	e8 04 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00157a6:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00157ab:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00157b1:	e8 3f 9b 00 00       	call   c001f2f5 <CPU::readCR3()>
c00157b6:	5a                   	pop    edx
c00157b7:	59                   	pop    ecx
c00157b8:	50                   	push   eax
c00157b9:	53                   	push   ebx
c00157ba:	e8 11 7f ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00157bf:	5b                   	pop    ebx
c00157c0:	58                   	pop    eax
c00157c1:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00157c6:	68 e9 23 02 c0       	push   0xc00223e9
c00157cb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00157d1:	50                   	push   eax
c00157d2:	e8 d3 7e ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00157d7:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00157dc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00157e2:	e8 4b a1 00 00       	call   c001f932 <CPU::readCR4()>
c00157e7:	5a                   	pop    edx
c00157e8:	59                   	pop    ecx
c00157e9:	50                   	push   eax
c00157ea:	53                   	push   ebx
c00157eb:	e8 e0 7e ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00157f0:	5b                   	pop    ebx
c00157f1:	58                   	pop    eax
c00157f2:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c00157f7:	68 f3 23 02 c0       	push   0xc00223f3
c00157fc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015802:	50                   	push   eax
c0015803:	e8 a2 7e ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015808:	5a                   	pop    edx
c0015809:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001580e:	59                   	pop    ecx
c001580f:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015812:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015818:	53                   	push   ebx
c0015819:	50                   	push   eax
c001581a:	e8 b1 7e ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001581f:	58                   	pop    eax
c0015820:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015825:	5a                   	pop    edx
c0015826:	68 0a 24 02 c0       	push   0xc002240a
c001582b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015831:	51                   	push   ecx
c0015832:	e8 73 7e ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015837:	5b                   	pop    ebx
c0015838:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c001583d:	5a                   	pop    edx
c001583e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015841:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015847:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001584a:	51                   	push   ecx
c001584b:	50                   	push   eax
c001584c:	e8 7f 7e ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0015851:	5b                   	pop    ebx
c0015852:	58                   	pop    eax
c0015853:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015858:	68 0a 24 02 c0       	push   0xc002240a
c001585d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015863:	50                   	push   eax
c0015864:	e8 41 7e ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015869:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001586c:	59                   	pop    ecx
c001586d:	a1 d4 56 02 c0       	mov    eax,ds:0xc00256d4
c0015872:	5b                   	pop    ebx
c0015873:	8b 12                	mov    edx,DWORD PTR [edx]
c0015875:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001587b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001587e:	52                   	push   edx
c001587f:	50                   	push   eax
c0015880:	e8 4b 7e ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	b2 fe                	mov    dl,0xfe
c001588a:	e4 60                	in     al,0x60
c001588c:	3c 1c                	cmp    al,0x1c
c001588e:	74 04                	je     c0015894 <Krnl::panic(char const*)+0x346>
c0015890:	3c 5a                	cmp    al,0x5a
c0015892:	75 f6                	jne    c001588a <Krnl::panic(char const*)+0x33c>
c0015894:	e4 64                	in     al,0x64
c0015896:	a8 02                	test   al,0x2
c0015898:	75 fa                	jne    c0015894 <Krnl::panic(char const*)+0x346>
c001589a:	88 d0                	mov    al,dl
c001589c:	e6 64                	out    0x64,al
c001589e:	fa                   	cli    
c001589f:	f4                   	hlt    
c00158a0:	eb e8                	jmp    c001588a <Krnl::panic(char const*)+0x33c>

c00158a2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00158a2:	55                   	push   ebp
c00158a3:	57                   	push   edi
c00158a4:	56                   	push   esi
c00158a5:	53                   	push   ebx
c00158a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00158ac:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00158b3:	8d 46 01             	lea    eax,[esi+0x1]
c00158b6:	8a 1e                	mov    bl,BYTE PTR [esi]
c00158b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158bc:	80 fb 40             	cmp    bl,0x40
c00158bf:	75 19                	jne    c00158da <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c00158c1:	8a 06                	mov    al,BYTE PTR [esi]
c00158c3:	84 c0                	test   al,al
c00158c5:	74 07                	je     c00158ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c00158c7:	3c 3a                	cmp    al,0x3a
c00158c9:	74 03                	je     c00158ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c00158cb:	46                   	inc    esi
c00158cc:	eb f3                	jmp    c00158c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c00158ce:	84 c0                	test   al,al
c00158d0:	0f 84 1f 01 00 00    	je     c00159f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00158d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00158d9:	46                   	inc    esi
c00158da:	50                   	push   eax
c00158db:	6a 40                	push   0x40
c00158dd:	6a 00                	push   0x0
c00158df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00158e3:	50                   	push   eax
c00158e4:	e8 1f ad fe ff       	call   c0000608 <memset>
c00158e9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00158f0:	31 d2                	xor    edx,edx
c00158f2:	83 c4 10             	add    esp,0x10
c00158f5:	8a 07                	mov    al,BYTE PTR [edi]
c00158f7:	84 c0                	test   al,al
c00158f9:	0f 84 f6 00 00 00    	je     c00159f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00158ff:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015905:	0f 8f ea 00 00 00    	jg     c00159f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001590b:	3c 0a                	cmp    al,0xa
c001590d:	0f 85 d3 00 00 00    	jne    c00159e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015913:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015918:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c001591c:	f6 c1 df             	test   cl,0xdf
c001591f:	0f 94 c2             	sete   dl
c0015922:	80 f9 23             	cmp    cl,0x23
c0015925:	0f 94 c0             	sete   al
c0015928:	08 c2                	or     dl,al
c001592a:	75 47                	jne    c0015973 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c001592c:	8d 41 f7             	lea    eax,[ecx-0x9]
c001592f:	3c 01                	cmp    al,0x1
c0015931:	76 40                	jbe    c0015973 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015933:	80 f9 5b             	cmp    cl,0x5b
c0015936:	75 3f                	jne    c0015977 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015938:	80 fb 40             	cmp    bl,0x40
c001593b:	75 36                	jne    c0015973 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c001593d:	83 ec 0c             	sub    esp,0xc
c0015940:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015944:	55                   	push   ebp
c0015945:	e8 db ac fe ff       	call   c0000625 <strlen>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	83 f8 3f             	cmp    eax,0x3f
c0015950:	0f 87 9f 00 00 00    	ja     c00159f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015956:	50                   	push   eax
c0015957:	50                   	push   eax
c0015958:	55                   	push   ebp
c0015959:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001595d:	55                   	push   ebp
c001595e:	e8 44 ad fe ff       	call   c00006a7 <strcpy>
c0015963:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015966:	e8 ba ac fe ff       	call   c0000625 <strlen>
c001596b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015970:	83 c4 10             	add    esp,0x10
c0015973:	31 c9                	xor    ecx,ecx
c0015975:	eb 76                	jmp    c00159ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015977:	80 fb 40             	cmp    bl,0x40
c001597a:	74 06                	je     c0015982 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c001597c:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015980:	eb 19                	jmp    c001599b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015982:	51                   	push   ecx
c0015983:	51                   	push   ecx
c0015984:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015988:	8d 44 24 24          	lea    eax,[esp+0x24]
c001598c:	50                   	push   eax
c001598d:	e8 66 ad fe ff       	call   c00006f8 <strcmp>
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	85 c0                	test   eax,eax
c0015997:	75 da                	jne    c0015973 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015999:	eb e1                	jmp    c001597c <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c001599b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001599e:	84 c0                	test   al,al
c00159a0:	0f 94 c1             	sete   cl
c00159a3:	3c 3d                	cmp    al,0x3d
c00159a5:	0f 94 c2             	sete   dl
c00159a8:	08 d1                	or     cl,dl
c00159aa:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00159ae:	75 03                	jne    c00159b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c00159b0:	45                   	inc    ebp
c00159b1:	eb e8                	jmp    c001599b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c00159b3:	84 c0                	test   al,al
c00159b5:	74 3e                	je     c00159f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00159b7:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00159bb:	52                   	push   edx
c00159bc:	52                   	push   edx
c00159bd:	8d 44 24 60          	lea    eax,[esp+0x60]
c00159c1:	50                   	push   eax
c00159c2:	56                   	push   esi
c00159c3:	e8 30 ad fe ff       	call   c00006f8 <strcmp>
c00159c8:	83 c4 10             	add    esp,0x10
c00159cb:	85 c0                	test   eax,eax
c00159cd:	75 a4                	jne    c0015973 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00159cf:	50                   	push   eax
c00159d0:	8d 55 01             	lea    edx,[ebp+0x1]
c00159d3:	50                   	push   eax
c00159d4:	52                   	push   edx
c00159d5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00159dc:	e8 c6 ac fe ff       	call   c00006a7 <strcpy>
c00159e1:	83 c4 10             	add    esp,0x10
c00159e4:	eb 14                	jmp    c00159fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c00159e6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00159e9:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c00159ed:	47                   	inc    edi
c00159ee:	89 ca                	mov    edx,ecx
c00159f0:	e9 00 ff ff ff       	jmp    c00158f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c00159f5:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00159fa:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00159fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a04:	5b                   	pop    ebx
c0015a05:	5e                   	pop    esi
c0015a06:	5f                   	pop    edi
c0015a07:	5d                   	pop    ebp
c0015a08:	c3                   	ret    

c0015a09 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015a09:	57                   	push   edi
c0015a0a:	56                   	push   esi
c0015a0b:	53                   	push   ebx
c0015a0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015a12:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015a19:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015a20:	53                   	push   ebx
c0015a21:	e8 ff ab fe ff       	call   c0000625 <strlen>
c0015a26:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a29:	89 c7                	mov    edi,eax
c0015a2b:	e8 f5 ab fe ff       	call   c0000625 <strlen>
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015a37:	31 ff                	xor    edi,edi
c0015a39:	3d ff 00 00 00       	cmp    eax,0xff
c0015a3e:	0f 87 18 01 00 00    	ja     c0015b5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015a44:	51                   	push   ecx
c0015a45:	51                   	push   ecx
c0015a46:	56                   	push   esi
c0015a47:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015a4b:	56                   	push   esi
c0015a4c:	e8 56 ac fe ff       	call   c00006a7 <strcpy>
c0015a51:	58                   	pop    eax
c0015a52:	5a                   	pop    edx
c0015a53:	68 34 29 02 c0       	push   0xc0022934
c0015a58:	56                   	push   esi
c0015a59:	e8 00 ad fe ff       	call   c000075e <strcat>
c0015a5e:	59                   	pop    ecx
c0015a5f:	58                   	pop    eax
c0015a60:	53                   	push   ebx
c0015a61:	56                   	push   esi
c0015a62:	e8 f7 ac fe ff       	call   c000075e <strcat>
c0015a67:	58                   	pop    eax
c0015a68:	5a                   	pop    edx
c0015a69:	68 22 25 02 c0       	push   0xc0022522
c0015a6e:	56                   	push   esi
c0015a6f:	e8 ea ac fe ff       	call   c000075e <strcat>
c0015a74:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015a7b:	e8 a4 95 ff ff       	call   c000f024 <operator new(unsigned long)>
c0015a80:	83 c4 0c             	add    esp,0xc
c0015a83:	89 c3                	mov    ebx,eax
c0015a85:	ff 35 d4 56 02 c0    	push   DWORD PTR ds:0xc00256d4
c0015a8b:	56                   	push   esi
c0015a8c:	50                   	push   eax
c0015a8d:	e8 fe 9b ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0015a92:	59                   	pop    ecx
c0015a93:	5e                   	pop    esi
c0015a94:	6a 01                	push   0x1
c0015a96:	53                   	push   ebx
c0015a97:	e8 58 9c ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0015a9c:	83 c4 10             	add    esp,0x10
c0015a9f:	85 c0                	test   eax,eax
c0015aa1:	74 08                	je     c0015aab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015aa3:	83 ec 0c             	sub    esp,0xc
c0015aa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aa8:	53                   	push   ebx
c0015aa9:	eb 2e                	jmp    c0015ad9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015aab:	52                   	push   edx
c0015aac:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015ab0:	50                   	push   eax
c0015ab1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015ab5:	50                   	push   eax
c0015ab6:	53                   	push   ebx
c0015ab7:	e8 e4 9e ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0015abc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	89 c1                	mov    ecx,eax
c0015ac5:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015ac9:	75 13                	jne    c0015ade <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015acb:	83 ec 0c             	sub    esp,0xc
c0015ace:	53                   	push   ebx
c0015acf:	e8 7e 9c ff ff       	call   c000f752 <File::close()>
c0015ad4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ad9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015adc:	eb 7b                	jmp    c0015b59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015ade:	83 ec 0c             	sub    esp,0xc
c0015ae1:	50                   	push   eax
c0015ae2:	e8 40 64 ff ff       	call   c000bf27 <malloc>
c0015ae7:	89 c6                	mov    esi,eax
c0015ae9:	58                   	pop    eax
c0015aea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aec:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015af0:	52                   	push   edx
c0015af1:	56                   	push   esi
c0015af2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015af6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015afa:	53                   	push   ebx
c0015afb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015afe:	83 c4 20             	add    esp,0x20
c0015b01:	85 c0                	test   eax,eax
c0015b03:	75 0a                	jne    c0015b0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b09:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015b0d:	74 18                	je     c0015b27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015b0f:	83 ec 0c             	sub    esp,0xc
c0015b12:	31 ff                	xor    edi,edi
c0015b14:	53                   	push   ebx
c0015b15:	e8 38 9c ff ff       	call   c000f752 <File::close()>
c0015b1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	eb 35                	jmp    c0015b5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015b27:	83 ec 0c             	sub    esp,0xc
c0015b2a:	53                   	push   ebx
c0015b2b:	e8 22 9c ff ff       	call   c000f752 <File::close()>
c0015b30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b38:	83 c4 0c             	add    esp,0xc
c0015b3b:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015b42:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015b49:	56                   	push   esi
c0015b4a:	e8 53 fd ff ff       	call   c00158a2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b52:	89 c7                	mov    edi,eax
c0015b54:	e8 de 63 ff ff       	call   c000bf37 <free>
c0015b59:	83 c4 10             	add    esp,0x10
c0015b5c:	81 c4 10 01 00 00    	add    esp,0x110
c0015b62:	89 f8                	mov    eax,edi
c0015b64:	5b                   	pop    ebx
c0015b65:	5e                   	pop    esi
c0015b66:	5f                   	pop    edi
c0015b67:	c3                   	ret    

c0015b68 <Reg::getLine(char*, char*, char*)>:
c0015b68:	57                   	push   edi
c0015b69:	56                   	push   esi
c0015b6a:	53                   	push   ebx
c0015b6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015b77:	57                   	push   edi
c0015b78:	56                   	push   esi
c0015b79:	53                   	push   ebx
c0015b7a:	68 27 25 02 c0       	push   0xc0022527
c0015b7f:	e8 85 fe ff ff       	call   c0015a09 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	84 c0                	test   al,al
c0015b89:	75 10                	jne    c0015b9b <Reg::getLine(char*, char*, char*)+0x33>
c0015b8b:	57                   	push   edi
c0015b8c:	56                   	push   esi
c0015b8d:	53                   	push   ebx
c0015b8e:	68 4c 25 02 c0       	push   0xc002254c
c0015b93:	e8 71 fe ff ff       	call   c0015a09 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015b98:	83 c4 10             	add    esp,0x10
c0015b9b:	5b                   	pop    ebx
c0015b9c:	5e                   	pop    esi
c0015b9d:	5f                   	pop    edi
c0015b9e:	c3                   	ret    

c0015b9f <Reg::readInt(char*, char*, int*)>:
c0015b9f:	55                   	push   ebp
c0015ba0:	57                   	push   edi
c0015ba1:	56                   	push   esi
c0015ba2:	53                   	push   ebx
c0015ba3:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015ba9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015bad:	57                   	push   edi
c0015bae:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015bb5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015bbc:	e8 a7 ff ff ff       	call   c0015b68 <Reg::getLine(char*, char*, char*)>
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	84 c0                	test   al,al
c0015bc6:	0f 84 b2 00 00 00    	je     c0015c7e <Reg::readInt(char*, char*, int*)+0xdf>
c0015bcc:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015bd0:	80 fa 2b             	cmp    dl,0x2b
c0015bd3:	74 0c                	je     c0015be1 <Reg::readInt(char*, char*, int*)+0x42>
c0015bd5:	80 fa 2d             	cmp    dl,0x2d
c0015bd8:	75 0e                	jne    c0015be8 <Reg::readInt(char*, char*, int*)+0x49>
c0015bda:	ba 01 00 00 00       	mov    edx,0x1
c0015bdf:	eb 0b                	jmp    c0015bec <Reg::readInt(char*, char*, int*)+0x4d>
c0015be1:	ba 01 00 00 00       	mov    edx,0x1
c0015be6:	eb 02                	jmp    c0015bea <Reg::readInt(char*, char*, int*)+0x4b>
c0015be8:	31 d2                	xor    edx,edx
c0015bea:	31 c0                	xor    eax,eax
c0015bec:	be 0a 00 00 00       	mov    esi,0xa
c0015bf1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015bf6:	75 20                	jne    c0015c18 <Reg::readInt(char*, char*, int*)+0x79>
c0015bf8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015bfc:	80 f9 78             	cmp    cl,0x78
c0015bff:	75 0a                	jne    c0015c0b <Reg::readInt(char*, char*, int*)+0x6c>
c0015c01:	83 c2 02             	add    edx,0x2
c0015c04:	be 10 00 00 00       	mov    esi,0x10
c0015c09:	eb 0d                	jmp    c0015c18 <Reg::readInt(char*, char*, int*)+0x79>
c0015c0b:	80 f9 62             	cmp    cl,0x62
c0015c0e:	75 08                	jne    c0015c18 <Reg::readInt(char*, char*, int*)+0x79>
c0015c10:	83 c2 02             	add    edx,0x2
c0015c13:	be 02 00 00 00       	mov    esi,0x2
c0015c18:	01 d7                	add    edi,edx
c0015c1a:	31 d2                	xor    edx,edx
c0015c1c:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015c1e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015c22:	84 db                	test   bl,bl
c0015c24:	0f 94 c3             	sete   bl
c0015c27:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0015c2c:	0f 94 c1             	sete   cl
c0015c2f:	08 cb                	or     bl,cl
c0015c31:	75 3a                	jne    c0015c6d <Reg::readInt(char*, char*, int*)+0xce>
c0015c33:	0f af d6             	imul   edx,esi
c0015c36:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015c3b:	83 fe 10             	cmp    esi,0x10
c0015c3e:	75 26                	jne    c0015c66 <Reg::readInt(char*, char*, int*)+0xc7>
c0015c40:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015c44:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015c47:	89 e9                	mov    ecx,ebp
c0015c49:	80 f9 05             	cmp    cl,0x5
c0015c4c:	77 06                	ja     c0015c54 <Reg::readInt(char*, char*, int*)+0xb5>
c0015c4e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015c52:	eb 16                	jmp    c0015c6a <Reg::readInt(char*, char*, int*)+0xcb>
c0015c54:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015c58:	83 e9 61             	sub    ecx,0x61
c0015c5b:	80 f9 05             	cmp    cl,0x5
c0015c5e:	77 06                	ja     c0015c66 <Reg::readInt(char*, char*, int*)+0xc7>
c0015c60:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015c64:	eb 04                	jmp    c0015c6a <Reg::readInt(char*, char*, int*)+0xcb>
c0015c66:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015c6a:	47                   	inc    edi
c0015c6b:	eb af                	jmp    c0015c1c <Reg::readInt(char*, char*, int*)+0x7d>
c0015c6d:	84 c0                	test   al,al
c0015c6f:	74 02                	je     c0015c73 <Reg::readInt(char*, char*, int*)+0xd4>
c0015c71:	f7 da                	neg    edx
c0015c73:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015c7a:	89 10                	mov    DWORD PTR [eax],edx
c0015c7c:	88 d8                	mov    al,bl
c0015c7e:	81 c4 ec 00 00 00    	add    esp,0xec
c0015c84:	5b                   	pop    ebx
c0015c85:	5e                   	pop    esi
c0015c86:	5f                   	pop    edi
c0015c87:	5d                   	pop    ebp
c0015c88:	c3                   	ret    

c0015c89 <Reg::readString(char*, char*, char*, int)>:
c0015c89:	57                   	push   edi
c0015c8a:	56                   	push   esi
c0015c8b:	53                   	push   ebx
c0015c8c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015c92:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015c96:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015c9d:	57                   	push   edi
c0015c9e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015ca5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015cac:	e8 b7 fe ff ff       	call   c0015b68 <Reg::getLine(char*, char*, char*)>
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	89 c6                	mov    esi,eax
c0015cb6:	84 c0                	test   al,al
c0015cb8:	74 44                	je     c0015cfe <Reg::readString(char*, char*, char*, int)+0x75>
c0015cba:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015cc1:	31 c0                	xor    eax,eax
c0015cc3:	4a                   	dec    edx
c0015cc4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015cc7:	84 c9                	test   cl,cl
c0015cc9:	74 0f                	je     c0015cda <Reg::readString(char*, char*, char*, int)+0x51>
c0015ccb:	39 c2                	cmp    edx,eax
c0015ccd:	7e 0b                	jle    c0015cda <Reg::readString(char*, char*, char*, int)+0x51>
c0015ccf:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015cd2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015cd7:	40                   	inc    eax
c0015cd8:	eb ea                	jmp    c0015cc4 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015cda:	83 ec 0c             	sub    esp,0xc
c0015cdd:	53                   	push   ebx
c0015cde:	e8 42 a9 fe ff       	call   c0000625 <strlen>
c0015ce3:	83 c4 10             	add    esp,0x10
c0015ce6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015ceb:	75 11                	jne    c0015cfe <Reg::readString(char*, char*, char*, int)+0x75>
c0015ced:	83 ec 0c             	sub    esp,0xc
c0015cf0:	53                   	push   ebx
c0015cf1:	e8 2f a9 fe ff       	call   c0000625 <strlen>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015cfe:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015d04:	89 f0                	mov    eax,esi
c0015d06:	5b                   	pop    ebx
c0015d07:	5e                   	pop    esi
c0015d08:	5f                   	pop    edi
c0015d09:	c3                   	ret    

c0015d0a <Reg::readBool(char*, char*, bool*)>:
c0015d0a:	83 ec 20             	sub    esp,0x20
c0015d0d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015d11:	50                   	push   eax
c0015d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d1a:	e8 80 fe ff ff       	call   c0015b9f <Reg::readInt(char*, char*, int*)>
c0015d1f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015d23:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015d28:	0f 95 02             	setne  BYTE PTR [edx]
c0015d2b:	83 c4 2c             	add    esp,0x2c
c0015d2e:	c3                   	ret    

c0015d2f <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015d2f:	53                   	push   ebx
c0015d30:	83 ec 1c             	sub    esp,0x1c
c0015d33:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015d37:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015d3b:	50                   	push   eax
c0015d3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d44:	e8 c1 ff ff ff       	call   c0015d0a <Reg::readBool(char*, char*, bool*)>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	84 c0                	test   al,al
c0015d4e:	74 04                	je     c0015d54 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015d50:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015d54:	83 c4 18             	add    esp,0x18
c0015d57:	88 d8                	mov    al,bl
c0015d59:	5b                   	pop    ebx
c0015d5a:	c3                   	ret    

c0015d5b <Reg::readIntWithDefault(char*, char*, int)>:
c0015d5b:	53                   	push   ebx
c0015d5c:	83 ec 1c             	sub    esp,0x1c
c0015d5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015d63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015d67:	50                   	push   eax
c0015d68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d70:	e8 2a fe ff ff       	call   c0015b9f <Reg::readInt(char*, char*, int*)>
c0015d75:	83 c4 10             	add    esp,0x10
c0015d78:	84 c0                	test   al,al
c0015d7a:	74 04                	je     c0015d80 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015d7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015d80:	83 c4 18             	add    esp,0x18
c0015d83:	89 d8                	mov    eax,ebx
c0015d85:	5b                   	pop    ebx
c0015d86:	c3                   	ret    

c0015d87 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015d87:	56                   	push   esi
c0015d88:	53                   	push   ebx
c0015d89:	51                   	push   ecx
c0015d8a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015d8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d96:	56                   	push   esi
c0015d97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9f:	e8 e5 fe ff ff       	call   c0015c89 <Reg::readString(char*, char*, char*, int)>
c0015da4:	83 c4 10             	add    esp,0x10
c0015da7:	84 c0                	test   al,al
c0015da9:	74 02                	je     c0015dad <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0015dab:	89 f3                	mov    ebx,esi
c0015dad:	5a                   	pop    edx
c0015dae:	89 d8                	mov    eax,ebx
c0015db0:	5b                   	pop    ebx
c0015db1:	5e                   	pop    esi
c0015db2:	c3                   	ret    

c0015db3 <Sys::exit(regs*)>:
c0015db3:	83 ec 18             	sub    esp,0x18
c0015db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015dba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015dbd:	e8 c2 31 00 00       	call   c0018f84 <terminateTask(int)>
c0015dc2:	83 c8 ff             	or     eax,0xffffffff
c0015dc5:	89 c2                	mov    edx,eax
c0015dc7:	83 c4 1c             	add    esp,0x1c
c0015dca:	c3                   	ret    

c0015dcb <Sys::loadDLL(regs*)>:
c0015dcb:	56                   	push   esi
c0015dcc:	31 d2                	xor    edx,edx
c0015dce:	53                   	push   ebx
c0015dcf:	b8 01 00 00 00       	mov    eax,0x1
c0015dd4:	51                   	push   ecx
c0015dd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dd9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015ddd:	74 7d                	je     c0015e5c <Sys::loadDLL(regs*)+0x91>
c0015ddf:	83 ec 0c             	sub    esp,0xc
c0015de2:	68 14 01 00 00       	push   0x114
c0015de7:	e8 38 92 ff ff       	call   c000f024 <operator new(unsigned long)>
c0015dec:	89 c3                	mov    ebx,eax
c0015dee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015df3:	83 c4 0c             	add    esp,0xc
c0015df6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015df9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015dfc:	53                   	push   ebx
c0015dfd:	e8 8e 98 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0015e02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e05:	e8 58 9b ff ff       	call   c000f962 <File::exists()>
c0015e0a:	83 c4 10             	add    esp,0x10
c0015e0d:	84 c0                	test   al,al
c0015e0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e11:	75 11                	jne    c0015e24 <Sys::loadDLL(regs*)+0x59>
c0015e13:	83 ec 0c             	sub    esp,0xc
c0015e16:	53                   	push   ebx
c0015e17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	b8 03 00 00 00       	mov    eax,0x3
c0015e22:	eb 36                	jmp    c0015e5a <Sys::loadDLL(regs*)+0x8f>
c0015e24:	83 ec 0c             	sub    esp,0xc
c0015e27:	53                   	push   ebx
c0015e28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e2b:	58                   	pop    eax
c0015e2c:	5a                   	pop    edx
c0015e2d:	6a 00                	push   0x0
c0015e2f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015e32:	e8 3a 21 00 00       	call   c0017f71 <Thr::loadDLL(char const*, bool)>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	89 c1                	mov    ecx,eax
c0015e3c:	31 d2                	xor    edx,edx
c0015e3e:	b8 04 00 00 00       	mov    eax,0x4
c0015e43:	85 c9                	test   ecx,ecx
c0015e45:	74 15                	je     c0015e5c <Sys::loadDLL(regs*)+0x91>
c0015e47:	53                   	push   ebx
c0015e48:	53                   	push   ebx
c0015e49:	ff 35 88 42 02 c0    	push   DWORD PTR ds:0xc0024288
c0015e4f:	51                   	push   ecx
c0015e50:	e8 e2 22 00 00       	call   c0018137 <Thr::executeDLL(unsigned long, void*)>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	31 c0                	xor    eax,eax
c0015e5a:	31 d2                	xor    edx,edx
c0015e5c:	59                   	pop    ecx
c0015e5d:	5b                   	pop    ebx
c0015e5e:	5e                   	pop    esi
c0015e5f:	c3                   	ret    

c0015e60 <Sys::read(regs*)>:
c0015e60:	57                   	push   edi
c0015e61:	56                   	push   esi
c0015e62:	53                   	push   ebx
c0015e63:	83 ec 10             	sub    esp,0x10
c0015e66:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e6a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e6d:	83 f8 02             	cmp    eax,0x2
c0015e70:	77 10                	ja     c0015e82 <Sys::read(regs*)+0x22>
c0015e72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e7a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015e80:	eb 0e                	jmp    c0015e90 <Sys::read(regs*)+0x30>
c0015e82:	83 ec 0c             	sub    esp,0xc
c0015e85:	50                   	push   eax
c0015e86:	e8 2a 81 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	89 c1                	mov    ecx,eax
c0015e90:	83 c8 ff             	or     eax,0xffffffff
c0015e93:	85 c9                	test   ecx,ecx
c0015e95:	89 c2                	mov    edx,eax
c0015e97:	74 28                	je     c0015ec1 <Sys::read(regs*)+0x61>
c0015e99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ea1:	83 ec 0c             	sub    esp,0xc
c0015ea4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015ea6:	31 ff                	xor    edi,edi
c0015ea8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015eac:	52                   	push   edx
c0015ead:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015eb0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015eb3:	57                   	push   edi
c0015eb4:	56                   	push   esi
c0015eb5:	51                   	push   ecx
c0015eb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015eb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ebd:	83 c4 20             	add    esp,0x20
c0015ec0:	99                   	cdq    
c0015ec1:	83 c4 10             	add    esp,0x10
c0015ec4:	5b                   	pop    ebx
c0015ec5:	5e                   	pop    esi
c0015ec6:	5f                   	pop    edi
c0015ec7:	c3                   	ret    

c0015ec8 <Sys::sbrk(regs*)>:
c0015ec8:	56                   	push   esi
c0015ec9:	53                   	push   ebx
c0015eca:	50                   	push   eax
c0015ecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ed4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ed7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015eda:	85 db                	test   ebx,ebx
c0015edc:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015ee2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015ee5:	74 02                	je     c0015ee9 <Sys::sbrk(regs*)+0x21>
c0015ee7:	79 06                	jns    c0015eef <Sys::sbrk(regs*)+0x27>
c0015ee9:	89 f0                	mov    eax,esi
c0015eeb:	31 d2                	xor    edx,edx
c0015eed:	eb 2a                	jmp    c0015f19 <Sys::sbrk(regs*)+0x51>
c0015eef:	83 c8 ff             	or     eax,0xffffffff
c0015ef2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015ef8:	89 c2                	mov    edx,eax
c0015efa:	77 1d                	ja     c0015f19 <Sys::sbrk(regs*)+0x51>
c0015efc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015f02:	50                   	push   eax
c0015f03:	c1 ea 0c             	shr    edx,0xc
c0015f06:	68 07 04 00 00       	push   0x407
c0015f0b:	52                   	push   edx
c0015f0c:	51                   	push   ecx
c0015f0d:	e8 fa 89 ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c0015f12:	89 f0                	mov    eax,esi
c0015f14:	31 d2                	xor    edx,edx
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	59                   	pop    ecx
c0015f1a:	5b                   	pop    ebx
c0015f1b:	5e                   	pop    esi
c0015f1c:	c3                   	ret    

c0015f1d <Sys::write(regs*)>:
c0015f1d:	57                   	push   edi
c0015f1e:	56                   	push   esi
c0015f1f:	53                   	push   ebx
c0015f20:	83 ec 18             	sub    esp,0x18
c0015f23:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f27:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015f2a:	68 67 25 02 c0       	push   0xc0022567
c0015f2f:	e8 25 92 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015f3b:	77 10                	ja     c0015f4d <Sys::write(regs*)+0x30>
c0015f3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f45:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015f4b:	eb 1b                	jmp    c0015f68 <Sys::write(regs*)+0x4b>
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	68 86 25 02 c0       	push   0xc0022586
c0015f55:	e8 ff 91 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015f5a:	58                   	pop    eax
c0015f5b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015f5e:	e8 52 80 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	89 c1                	mov    ecx,eax
c0015f68:	83 c8 ff             	or     eax,0xffffffff
c0015f6b:	85 c9                	test   ecx,ecx
c0015f6d:	89 c2                	mov    edx,eax
c0015f6f:	74 28                	je     c0015f99 <Sys::write(regs*)+0x7c>
c0015f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015f79:	83 ec 0c             	sub    esp,0xc
c0015f7c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015f7e:	31 ff                	xor    edi,edi
c0015f80:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015f84:	52                   	push   edx
c0015f85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015f88:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015f8b:	57                   	push   edi
c0015f8c:	56                   	push   esi
c0015f8d:	51                   	push   ecx
c0015f8e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015f91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015f95:	83 c4 20             	add    esp,0x20
c0015f98:	99                   	cdq    
c0015f99:	83 c4 10             	add    esp,0x10
c0015f9c:	5b                   	pop    ebx
c0015f9d:	5e                   	pop    esi
c0015f9e:	5f                   	pop    edi
c0015f9f:	c3                   	ret    

c0015fa0 <Sys::yield(regs*)>:
c0015fa0:	83 ec 0c             	sub    esp,0xc
c0015fa3:	e8 af 25 00 00       	call   c0018557 <lockScheduler()>
c0015fa8:	e8 f3 28 00 00       	call   c00188a0 <schedule()>
c0015fad:	e8 a7 25 00 00       	call   c0018559 <unlockScheduler()>
c0015fb2:	31 c0                	xor    eax,eax
c0015fb4:	31 d2                	xor    edx,edx
c0015fb6:	83 c4 0c             	add    esp,0xc
c0015fb9:	c3                   	ret    

c0015fba <sysCallGetPID(regs*)>:
c0015fba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fbf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015fc4:	89 c2                	mov    edx,eax
c0015fc6:	c1 fa 1f             	sar    edx,0x1f
c0015fc9:	c3                   	ret    

c0015fca <sysCallSeekDir(regs*)>:
c0015fca:	31 c0                	xor    eax,eax
c0015fcc:	31 d2                	xor    edx,edx
c0015fce:	c3                   	ret    

c0015fcf <sysCallTellDir(regs*)>:
c0015fcf:	31 c0                	xor    eax,eax
c0015fd1:	31 d2                	xor    edx,edx
c0015fd3:	c3                   	ret    

c0015fd4 <sysCallVerify(regs*)>:
c0015fd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fd8:	31 d2                	xor    edx,edx
c0015fda:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015fdd:	c3                   	ret    

c0015fde <sysCallFork(regs*)>:
c0015fde:	83 c8 ff             	or     eax,0xffffffff
c0015fe1:	83 ca ff             	or     edx,0xffffffff
c0015fe4:	c3                   	ret    

c0015fe5 <sysCallExecve(regs*)>:
c0015fe5:	83 c8 ff             	or     eax,0xffffffff
c0015fe8:	83 ca ff             	or     edx,0xffffffff
c0015feb:	c3                   	ret    

c0015fec <sysCallGetArgc(regs*)>:
c0015fec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ff4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015ffa:	89 c2                	mov    edx,eax
c0015ffc:	c1 fa 1f             	sar    edx,0x1f
c0015fff:	c3                   	ret    

c0016000 <sysFormatDisk(regs*)>:
c0016000:	56                   	push   esi
c0016001:	53                   	push   ebx
c0016002:	50                   	push   eax
c0016003:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016007:	8b 1d e8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e8
c001600d:	eb 2a                	jmp    c0016039 <sysFormatDisk(regs*)+0x39>
c001600f:	83 ec 0c             	sub    esp,0xc
c0016012:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016015:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016018:	8b 13                	mov    edx,DWORD PTR [ebx]
c001601a:	51                   	push   ecx
c001601b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001601e:	51                   	push   ecx
c001601f:	50                   	push   eax
c0016020:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c0016027:	50                   	push   eax
c0016028:	53                   	push   ebx
c0016029:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001602c:	83 c4 20             	add    esp,0x20
c001602f:	89 c1                	mov    ecx,eax
c0016031:	83 f8 08             	cmp    eax,0x8
c0016034:	75 12                	jne    c0016048 <sysFormatDisk(regs*)+0x48>
c0016036:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016039:	85 db                	test   ebx,ebx
c001603b:	75 d2                	jne    c001600f <sysFormatDisk(regs*)+0xf>
c001603d:	b8 03 00 00 00       	mov    eax,0x3
c0016042:	31 d2                	xor    edx,edx
c0016044:	59                   	pop    ecx
c0016045:	5b                   	pop    ebx
c0016046:	5e                   	pop    esi
c0016047:	c3                   	ret    
c0016048:	85 c0                	test   eax,eax
c001604a:	74 13                	je     c001605f <sysFormatDisk(regs*)+0x5f>
c001604c:	31 d2                	xor    edx,edx
c001604e:	b8 01 00 00 00       	mov    eax,0x1
c0016053:	83 f9 09             	cmp    ecx,0x9
c0016056:	74 ec                	je     c0016044 <sysFormatDisk(regs*)+0x44>
c0016058:	b8 02 00 00 00       	mov    eax,0x2
c001605d:	eb e3                	jmp    c0016042 <sysFormatDisk(regs*)+0x42>
c001605f:	31 c0                	xor    eax,eax
c0016061:	eb df                	jmp    c0016042 <sysFormatDisk(regs*)+0x42>

c0016063 <sysSetDiskVolumeLabel(regs*)>:
c0016063:	56                   	push   esi
c0016064:	53                   	push   ebx
c0016065:	53                   	push   ebx
c0016066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001606a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001606d:	83 f8 19             	cmp    eax,0x19
c0016070:	77 2d                	ja     c001609f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016072:	8b 0c 85 80 48 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb780]
c0016079:	85 c9                	test   ecx,ecx
c001607b:	74 22                	je     c001609f <sysSetDiskVolumeLabel(regs*)+0x3c>
c001607d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016080:	85 d2                	test   edx,edx
c0016082:	74 1b                	je     c001609f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016084:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001608a:	8b 33                	mov    esi,DWORD PTR [ebx]
c001608c:	52                   	push   edx
c001608d:	50                   	push   eax
c001608e:	51                   	push   ecx
c001608f:	53                   	push   ebx
c0016090:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	89 c2                	mov    edx,eax
c0016098:	c1 fa 1f             	sar    edx,0x1f
c001609b:	59                   	pop    ecx
c001609c:	5b                   	pop    ebx
c001609d:	5e                   	pop    esi
c001609e:	c3                   	ret    
c001609f:	59                   	pop    ecx
c00160a0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160a5:	5b                   	pop    ebx
c00160a6:	83 ca ff             	or     edx,0xffffffff
c00160a9:	5e                   	pop    esi
c00160aa:	c3                   	ret    

c00160ab <sysGetDiskVolumeLabel(regs*)>:
c00160ab:	57                   	push   edi
c00160ac:	56                   	push   esi
c00160ad:	53                   	push   ebx
c00160ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00160b5:	83 fa 19             	cmp    edx,0x19
c00160b8:	77 38                	ja     c00160f2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00160ba:	8b 0c 95 80 48 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb780]
c00160c1:	85 c9                	test   ecx,ecx
c00160c3:	74 2d                	je     c00160f2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00160c5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00160c8:	85 db                	test   ebx,ebx
c00160ca:	74 26                	je     c00160f2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00160cc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00160cf:	85 c0                	test   eax,eax
c00160d1:	74 1f                	je     c00160f2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00160d3:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00160d9:	83 ec 0c             	sub    esp,0xc
c00160dc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00160de:	50                   	push   eax
c00160df:	53                   	push   ebx
c00160e0:	52                   	push   edx
c00160e1:	51                   	push   ecx
c00160e2:	56                   	push   esi
c00160e3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00160e6:	83 c4 20             	add    esp,0x20
c00160e9:	89 c2                	mov    edx,eax
c00160eb:	c1 fa 1f             	sar    edx,0x1f
c00160ee:	5b                   	pop    ebx
c00160ef:	5e                   	pop    esi
c00160f0:	5f                   	pop    edi
c00160f1:	c3                   	ret    
c00160f2:	5b                   	pop    ebx
c00160f3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160f8:	5e                   	pop    esi
c00160f9:	83 ca ff             	or     edx,0xffffffff
c00160fc:	5f                   	pop    edi
c00160fd:	c3                   	ret    

c00160fe <sysShutdown(regs*)>:
c00160fe:	57                   	push   edi
c00160ff:	56                   	push   esi
c0016100:	56                   	push   esi
c0016101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016105:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016108:	85 c0                	test   eax,eax
c001610a:	74 18                	je     c0016124 <sysShutdown(regs*)+0x26>
c001610c:	83 f8 01             	cmp    eax,0x1
c001610f:	74 51                	je     c0016162 <sysShutdown(regs*)+0x64>
c0016111:	83 ce ff             	or     esi,0xffffffff
c0016114:	83 cf ff             	or     edi,0xffffffff
c0016117:	83 f8 02             	cmp    eax,0x2
c001611a:	74 2a                	je     c0016146 <sysShutdown(regs*)+0x48>
c001611c:	59                   	pop    ecx
c001611d:	89 f0                	mov    eax,esi
c001611f:	5e                   	pop    esi
c0016120:	89 fa                	mov    edx,edi
c0016122:	5f                   	pop    edi
c0016123:	c3                   	ret    
c0016124:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0016129:	83 ce ff             	or     esi,0xffffffff
c001612c:	83 cf ff             	or     edi,0xffffffff
c001612f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016131:	6a 00                	push   0x0
c0016133:	6a 00                	push   0x0
c0016135:	6a 00                	push   0x0
c0016137:	50                   	push   eax
c0016138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	89 f0                	mov    eax,esi
c0016140:	89 fa                	mov    edx,edi
c0016142:	59                   	pop    ecx
c0016143:	5e                   	pop    esi
c0016144:	5f                   	pop    edi
c0016145:	c3                   	ret    
c0016146:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001614b:	8b 10                	mov    edx,DWORD PTR [eax]
c001614d:	6a 00                	push   0x0
c001614f:	6a 00                	push   0x0
c0016151:	6a 01                	push   0x1
c0016153:	50                   	push   eax
c0016154:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016157:	83 c4 10             	add    esp,0x10
c001615a:	89 f0                	mov    eax,esi
c001615c:	89 fa                	mov    edx,edi
c001615e:	59                   	pop    ecx
c001615f:	5e                   	pop    esi
c0016160:	5f                   	pop    edi
c0016161:	c3                   	ret    
c0016162:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0016167:	85 c0                	test   eax,eax
c0016169:	74 02                	je     c001616d <sysShutdown(regs*)+0x6f>
c001616b:	ff d0                	call   eax
c001616d:	31 f6                	xor    esi,esi
c001616f:	59                   	pop    ecx
c0016170:	31 ff                	xor    edi,edi
c0016172:	89 f0                	mov    eax,esi
c0016174:	5e                   	pop    esi
c0016175:	89 fa                	mov    edx,edi
c0016177:	5f                   	pop    edi
c0016178:	c3                   	ret    

c0016179 <sysCallGetCwd(regs*)>:
c0016179:	83 ec 10             	sub    esp,0x10
c001617c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016180:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016183:	52                   	push   edx
c0016184:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016187:	51                   	push   ecx
c0016188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001618d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016190:	50                   	push   eax
c0016191:	e8 6b 98 ff ff       	call   c000fa01 <getcwd(Process*, char*, int)>
c0016196:	89 c2                	mov    edx,eax
c0016198:	83 c4 1c             	add    esp,0x1c
c001619b:	c1 fa 1f             	sar    edx,0x1f
c001619e:	c3                   	ret    

c001619f <sysCallSetCwd(regs*)>:
c001619f:	83 ec 14             	sub    esp,0x14
c00161a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00161a9:	50                   	push   eax
c00161aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161af:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00161b2:	52                   	push   edx
c00161b3:	e8 73 98 ff ff       	call   c000fa2b <setcwd(Process*, char*)>
c00161b8:	89 c2                	mov    edx,eax
c00161ba:	83 c4 1c             	add    esp,0x1c
c00161bd:	c1 fa 1f             	sar    edx,0x1f
c00161c0:	c3                   	ret    

c00161c1 <sysCallRealpath(regs*)>:
c00161c1:	53                   	push   ebx
c00161c2:	83 ec 08             	sub    esp,0x8
c00161c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00161cc:	85 c9                	test   ecx,ecx
c00161ce:	74 35                	je     c0016205 <sysCallRealpath(regs*)+0x44>
c00161d0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00161d3:	31 d2                	xor    edx,edx
c00161d5:	b8 01 00 00 00       	mov    eax,0x1
c00161da:	85 db                	test   ebx,ebx
c00161dc:	75 05                	jne    c00161e3 <sysCallRealpath(regs*)+0x22>
c00161de:	83 c4 08             	add    esp,0x8
c00161e1:	5b                   	pop    ebx
c00161e2:	c3                   	ret    
c00161e3:	50                   	push   eax
c00161e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00161ec:	05 0c 01 00 00       	add    eax,0x10c
c00161f1:	50                   	push   eax
c00161f2:	51                   	push   ecx
c00161f3:	53                   	push   ebx
c00161f4:	e8 ed 92 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	31 c0                	xor    eax,eax
c00161fe:	31 d2                	xor    edx,edx
c0016200:	83 c4 08             	add    esp,0x8
c0016203:	5b                   	pop    ebx
c0016204:	c3                   	ret    
c0016205:	b8 01 00 00 00       	mov    eax,0x1
c001620a:	31 d2                	xor    edx,edx
c001620c:	eb f2                	jmp    c0016200 <sysCallRealpath(regs*)+0x3f>

c001620e <sysCallReadDir(regs*)>:
c001620e:	53                   	push   ebx
c001620f:	83 ec 18             	sub    esp,0x18
c0016212:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016216:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016219:	83 f8 02             	cmp    eax,0x2
c001621c:	76 56                	jbe    c0016274 <sysCallReadDir(regs*)+0x66>
c001621e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016221:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016227:	77 57                	ja     c0016280 <sysCallReadDir(regs*)+0x72>
c0016229:	83 ec 0c             	sub    esp,0xc
c001622c:	50                   	push   eax
c001622d:	e8 83 7d ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	85 c0                	test   eax,eax
c0016237:	74 57                	je     c0016290 <sysCallReadDir(regs*)+0x82>
c0016239:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016241:	83 ec 0c             	sub    esp,0xc
c0016244:	8b 10                	mov    edx,DWORD PTR [eax]
c0016246:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001624a:	51                   	push   ecx
c001624b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001624e:	51                   	push   ecx
c001624f:	6a 00                	push   0x0
c0016251:	68 10 01 00 00       	push   0x110
c0016256:	50                   	push   eax
c0016257:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001625a:	83 c4 20             	add    esp,0x20
c001625d:	89 c1                	mov    ecx,eax
c001625f:	85 c0                	test   eax,eax
c0016261:	74 38                	je     c001629b <sysCallReadDir(regs*)+0x8d>
c0016263:	31 d2                	xor    edx,edx
c0016265:	b8 02 00 00 00       	mov    eax,0x2
c001626a:	83 f9 07             	cmp    ecx,0x7
c001626d:	74 05                	je     c0016274 <sysCallReadDir(regs*)+0x66>
c001626f:	83 c4 18             	add    esp,0x18
c0016272:	5b                   	pop    ebx
c0016273:	c3                   	ret    
c0016274:	b8 01 00 00 00       	mov    eax,0x1
c0016279:	31 d2                	xor    edx,edx
c001627b:	83 c4 18             	add    esp,0x18
c001627e:	5b                   	pop    ebx
c001627f:	c3                   	ret    
c0016280:	53                   	push   ebx
c0016281:	53                   	push   ebx
c0016282:	52                   	push   edx
c0016283:	68 a8 25 02 c0       	push   0xc00225a8
c0016288:	e8 cc 8e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001628d:	83 c4 10             	add    esp,0x10
c0016290:	83 c4 18             	add    esp,0x18
c0016293:	83 c8 ff             	or     eax,0xffffffff
c0016296:	83 ca ff             	or     edx,0xffffffff
c0016299:	5b                   	pop    ebx
c001629a:	c3                   	ret    
c001629b:	31 c0                	xor    eax,eax
c001629d:	31 d2                	xor    edx,edx
c001629f:	eb da                	jmp    c001627b <sysCallReadDir(regs*)+0x6d>

c00162a1 <sysCallIsATTY(regs*)>:
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162ab:	83 f8 02             	cmp    eax,0x2
c00162ae:	76 07                	jbe    c00162b7 <sysCallIsATTY(regs*)+0x16>
c00162b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00162b5:	75 28                	jne    c00162df <sysCallIsATTY(regs*)+0x3e>
c00162b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00162c5:	85 c0                	test   eax,eax
c00162c7:	74 26                	je     c00162ef <sysCallIsATTY(regs*)+0x4e>
c00162c9:	83 ec 0c             	sub    esp,0xc
c00162cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00162ce:	50                   	push   eax
c00162cf:	ff 12                	call   DWORD PTR [edx]
c00162d1:	83 c4 10             	add    esp,0x10
c00162d4:	25 ff 00 00 00       	and    eax,0xff
c00162d9:	31 d2                	xor    edx,edx
c00162db:	83 c4 0c             	add    esp,0xc
c00162de:	c3                   	ret    
c00162df:	83 ec 0c             	sub    esp,0xc
c00162e2:	50                   	push   eax
c00162e3:	e8 cd 7c ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	85 c0                	test   eax,eax
c00162ed:	75 da                	jne    c00162c9 <sysCallIsATTY(regs*)+0x28>
c00162ef:	83 c8 ff             	or     eax,0xffffffff
c00162f2:	83 ca ff             	or     edx,0xffffffff
c00162f5:	83 c4 0c             	add    esp,0xc
c00162f8:	c3                   	ret    

c00162f9 <sysCallSeek(regs*)>:
c00162f9:	53                   	push   ebx
c00162fa:	83 ec 08             	sub    esp,0x8
c00162fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016301:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016304:	83 f8 02             	cmp    eax,0x2
c0016307:	76 4b                	jbe    c0016354 <sysCallSeek(regs*)+0x5b>
c0016309:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001630e:	77 34                	ja     c0016344 <sysCallSeek(regs*)+0x4b>
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	50                   	push   eax
c0016314:	e8 9c 7c ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016319:	83 c4 0c             	add    esp,0xc
c001631c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001631f:	31 db                	xor    ebx,ebx
c0016321:	53                   	push   ebx
c0016322:	51                   	push   ecx
c0016323:	50                   	push   eax
c0016324:	e8 89 94 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	85 c0                	test   eax,eax
c001632e:	0f 95 c0             	setne  al
c0016331:	25 ff 00 00 00       	and    eax,0xff
c0016336:	31 d2                	xor    edx,edx
c0016338:	f7 d8                	neg    eax
c001633a:	83 d2 00             	adc    edx,0x0
c001633d:	83 c4 08             	add    esp,0x8
c0016340:	f7 da                	neg    edx
c0016342:	5b                   	pop    ebx
c0016343:	c3                   	ret    
c0016344:	52                   	push   edx
c0016345:	52                   	push   edx
c0016346:	50                   	push   eax
c0016347:	68 64 26 02 c0       	push   0xc0022664
c001634c:	e8 08 8e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	83 c4 08             	add    esp,0x8
c0016357:	83 c8 ff             	or     eax,0xffffffff
c001635a:	83 ca ff             	or     edx,0xffffffff
c001635d:	5b                   	pop    ebx
c001635e:	c3                   	ret    

c001635f <sysCallTell(regs*)>:
c001635f:	53                   	push   ebx
c0016360:	83 ec 08             	sub    esp,0x8
c0016363:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016367:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001636a:	83 f8 02             	cmp    eax,0x2
c001636d:	76 60                	jbe    c00163cf <sysCallTell(regs*)+0x70>
c001636f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016374:	77 30                	ja     c00163a6 <sysCallTell(regs*)+0x47>
c0016376:	83 ec 0c             	sub    esp,0xc
c0016379:	50                   	push   eax
c001637a:	e8 36 7c ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c001637f:	5a                   	pop    edx
c0016380:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016383:	59                   	pop    ecx
c0016384:	53                   	push   ebx
c0016385:	50                   	push   eax
c0016386:	e8 7d 94 ff ff       	call   c000f808 <File::tell(unsigned long long*)>
c001638b:	83 c4 10             	add    esp,0x10
c001638e:	85 c0                	test   eax,eax
c0016390:	0f 95 c0             	setne  al
c0016393:	25 ff 00 00 00       	and    eax,0xff
c0016398:	31 d2                	xor    edx,edx
c001639a:	f7 d8                	neg    eax
c001639c:	83 d2 00             	adc    edx,0x0
c001639f:	83 c4 08             	add    esp,0x8
c00163a2:	f7 da                	neg    edx
c00163a4:	5b                   	pop    ebx
c00163a5:	c3                   	ret    
c00163a6:	52                   	push   edx
c00163a7:	52                   	push   edx
c00163a8:	50                   	push   eax
c00163a9:	68 7e 26 02 c0       	push   0xc002267e
c00163ae:	e8 a6 8d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00163b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00163b6:	83 c4 10             	add    esp,0x10
c00163b9:	31 d2                	xor    edx,edx
c00163bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00163c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00163c8:	83 c4 08             	add    esp,0x8
c00163cb:	31 c0                	xor    eax,eax
c00163cd:	5b                   	pop    ebx
c00163ce:	c3                   	ret    
c00163cf:	83 c4 08             	add    esp,0x8
c00163d2:	83 c8 ff             	or     eax,0xffffffff
c00163d5:	83 ca ff             	or     edx,0xffffffff
c00163d8:	5b                   	pop    ebx
c00163d9:	c3                   	ret    

c00163da <sysCallSizeFromFilename(regs*)>:
c00163da:	57                   	push   edi
c00163db:	56                   	push   esi
c00163dc:	53                   	push   ebx
c00163dd:	83 ec 10             	sub    esp,0x10
c00163e0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163e4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00163e7:	83 fb 02             	cmp    ebx,0x2
c00163ea:	0f 86 8b 00 00 00    	jbe    c001647b <sysCallSizeFromFilename(regs*)+0xa1>
c00163f0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00163f6:	77 58                	ja     c0016450 <sysCallSizeFromFilename(regs*)+0x76>
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	68 14 01 00 00       	push   0x114
c0016400:	e8 1f 8c ff ff       	call   c000f024 <operator new(unsigned long)>
c0016405:	89 c7                	mov    edi,eax
c0016407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001640c:	83 c4 0c             	add    esp,0xc
c001640f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016412:	50                   	push   eax
c0016413:	53                   	push   ebx
c0016414:	57                   	push   edi
c0016415:	e8 76 92 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001641a:	83 c4 0c             	add    esp,0xc
c001641d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016421:	50                   	push   eax
c0016422:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016425:	52                   	push   edx
c0016426:	57                   	push   edi
c0016427:	e8 74 95 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c001642c:	89 c3                	mov    ebx,eax
c001642e:	8b 07                	mov    eax,DWORD PTR [edi]
c0016430:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016433:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016436:	31 c0                	xor    eax,eax
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	85 db                	test   ebx,ebx
c001643d:	0f 95 c0             	setne  al
c0016440:	31 d2                	xor    edx,edx
c0016442:	f7 d8                	neg    eax
c0016444:	83 d2 00             	adc    edx,0x0
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	f7 da                	neg    edx
c001644c:	5b                   	pop    ebx
c001644d:	5e                   	pop    esi
c001644e:	5f                   	pop    edi
c001644f:	c3                   	ret    
c0016450:	51                   	push   ecx
c0016451:	51                   	push   ecx
c0016452:	53                   	push   ebx
c0016453:	68 98 26 02 c0       	push   0xc0022698
c0016458:	e8 fc 8c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001645d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016460:	83 c4 10             	add    esp,0x10
c0016463:	31 d2                	xor    edx,edx
c0016465:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001646b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016472:	83 c4 10             	add    esp,0x10
c0016475:	31 c0                	xor    eax,eax
c0016477:	5b                   	pop    ebx
c0016478:	5e                   	pop    esi
c0016479:	5f                   	pop    edi
c001647a:	c3                   	ret    
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	83 c8 ff             	or     eax,0xffffffff
c0016481:	83 ca ff             	or     edx,0xffffffff
c0016484:	5b                   	pop    ebx
c0016485:	5e                   	pop    esi
c0016486:	5f                   	pop    edi
c0016487:	c3                   	ret    

c0016488 <sysCallSize(regs*)>:
c0016488:	53                   	push   ebx
c0016489:	83 ec 18             	sub    esp,0x18
c001648c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016490:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016493:	83 f8 02             	cmp    eax,0x2
c0016496:	76 66                	jbe    c00164fe <sysCallSize(regs*)+0x76>
c0016498:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001649d:	77 36                	ja     c00164d5 <sysCallSize(regs*)+0x4d>
c001649f:	83 ec 0c             	sub    esp,0xc
c00164a2:	50                   	push   eax
c00164a3:	e8 0d 7b ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c00164a8:	83 c4 0c             	add    esp,0xc
c00164ab:	8d 54 24 13          	lea    edx,[esp+0x13]
c00164af:	52                   	push   edx
c00164b0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00164b3:	52                   	push   edx
c00164b4:	50                   	push   eax
c00164b5:	e8 e6 94 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	85 c0                	test   eax,eax
c00164bf:	0f 95 c0             	setne  al
c00164c2:	25 ff 00 00 00       	and    eax,0xff
c00164c7:	31 d2                	xor    edx,edx
c00164c9:	f7 d8                	neg    eax
c00164cb:	83 d2 00             	adc    edx,0x0
c00164ce:	83 c4 18             	add    esp,0x18
c00164d1:	f7 da                	neg    edx
c00164d3:	5b                   	pop    ebx
c00164d4:	c3                   	ret    
c00164d5:	51                   	push   ecx
c00164d6:	51                   	push   ecx
c00164d7:	50                   	push   eax
c00164d8:	68 98 26 02 c0       	push   0xc0022698
c00164dd:	e8 77 8c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00164e2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	31 d2                	xor    edx,edx
c00164ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00164f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00164f7:	83 c4 18             	add    esp,0x18
c00164fa:	31 c0                	xor    eax,eax
c00164fc:	5b                   	pop    ebx
c00164fd:	c3                   	ret    
c00164fe:	83 c4 18             	add    esp,0x18
c0016501:	83 c8 ff             	or     eax,0xffffffff
c0016504:	83 ca ff             	or     edx,0xffffffff
c0016507:	5b                   	pop    ebx
c0016508:	c3                   	ret    

c0016509 <sysCallClose(regs*)>:
c0016509:	53                   	push   ebx
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016511:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016514:	83 f8 02             	cmp    eax,0x2
c0016517:	76 4f                	jbe    c0016568 <sysCallClose(regs*)+0x5f>
c0016519:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001651e:	74 53                	je     c0016573 <sysCallClose(regs*)+0x6a>
c0016520:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016525:	74 5b                	je     c0016582 <sysCallClose(regs*)+0x79>
c0016527:	77 2f                	ja     c0016558 <sysCallClose(regs*)+0x4f>
c0016529:	83 ec 0c             	sub    esp,0xc
c001652c:	50                   	push   eax
c001652d:	e8 83 7a ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016532:	89 c3                	mov    ebx,eax
c0016534:	89 04 24             	mov    DWORD PTR [esp],eax
c0016537:	e8 16 92 ff ff       	call   c000f752 <File::close()>
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	85 db                	test   ebx,ebx
c0016541:	74 0c                	je     c001654f <sysCallClose(regs*)+0x46>
c0016543:	83 ec 0c             	sub    esp,0xc
c0016546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016548:	53                   	push   ebx
c0016549:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001654c:	83 c4 10             	add    esp,0x10
c001654f:	83 c4 08             	add    esp,0x8
c0016552:	31 c0                	xor    eax,eax
c0016554:	31 d2                	xor    edx,edx
c0016556:	5b                   	pop    ebx
c0016557:	c3                   	ret    
c0016558:	52                   	push   edx
c0016559:	52                   	push   edx
c001655a:	50                   	push   eax
c001655b:	68 cc 25 02 c0       	push   0xc00225cc
c0016560:	e8 f4 8b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	83 c4 08             	add    esp,0x8
c001656b:	83 c8 ff             	or     eax,0xffffffff
c001656e:	83 ca ff             	or     edx,0xffffffff
c0016571:	5b                   	pop    ebx
c0016572:	c3                   	ret    
c0016573:	83 ec 0c             	sub    esp,0xc
c0016576:	68 b3 26 02 c0       	push   0xc00226b3
c001657b:	e8 d9 8b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016580:	eb ca                	jmp    c001654c <sysCallClose(regs*)+0x43>
c0016582:	83 ec 0c             	sub    esp,0xc
c0016585:	68 c1 26 02 c0       	push   0xc00226c1
c001658a:	eb ef                	jmp    c001657b <sysCallClose(regs*)+0x72>

c001658c <sysCallOpenDir(regs*)>:
c001658c:	56                   	push   esi
c001658d:	53                   	push   ebx
c001658e:	50                   	push   eax
c001658f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016593:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016596:	85 c0                	test   eax,eax
c0016598:	74 53                	je     c00165ed <sysCallOpenDir(regs*)+0x61>
c001659a:	83 ec 0c             	sub    esp,0xc
c001659d:	68 14 01 00 00       	push   0x114
c00165a2:	e8 7d 8a ff ff       	call   c000f024 <operator new(unsigned long)>
c00165a7:	89 c6                	mov    esi,eax
c00165a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165ae:	83 c4 0c             	add    esp,0xc
c00165b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165b4:	50                   	push   eax
c00165b5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00165b8:	50                   	push   eax
c00165b9:	56                   	push   esi
c00165ba:	e8 93 95 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c00165bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00165c2:	e8 ef 95 ff ff       	call   c000fbb6 <Directory::open()>
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	85 c0                	test   eax,eax
c00165cc:	75 1f                	jne    c00165ed <sysCallOpenDir(regs*)+0x61>
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	56                   	push   esi
c00165d2:	e8 29 77 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c00165d7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00165da:	83 c4 10             	add    esp,0x10
c00165dd:	89 02                	mov    DWORD PTR [edx],eax
c00165df:	c1 f8 1f             	sar    eax,0x1f
c00165e2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165e5:	31 c0                	xor    eax,eax
c00165e7:	59                   	pop    ecx
c00165e8:	31 d2                	xor    edx,edx
c00165ea:	5b                   	pop    ebx
c00165eb:	5e                   	pop    esi
c00165ec:	c3                   	ret    
c00165ed:	59                   	pop    ecx
c00165ee:	83 c8 ff             	or     eax,0xffffffff
c00165f1:	5b                   	pop    ebx
c00165f2:	83 ca ff             	or     edx,0xffffffff
c00165f5:	5e                   	pop    esi
c00165f6:	c3                   	ret    

c00165f7 <sysCallMakeDir(regs*)>:
c00165f7:	56                   	push   esi
c00165f8:	53                   	push   ebx
c00165f9:	83 ec 10             	sub    esp,0x10
c00165fc:	68 14 01 00 00       	push   0x114
c0016601:	e8 1e 8a ff ff       	call   c000f024 <operator new(unsigned long)>
c0016606:	89 c3                	mov    ebx,eax
c0016608:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001660d:	83 c4 0c             	add    esp,0xc
c0016610:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016613:	50                   	push   eax
c0016614:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016618:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001661b:	52                   	push   edx
c001661c:	53                   	push   ebx
c001661d:	e8 30 95 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c0016622:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016625:	e8 6c 97 ff ff       	call   c000fd96 <Directory::create()>
c001662a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001662d:	89 c6                	mov    esi,eax
c001662f:	e8 de 95 ff ff       	call   c000fc12 <Directory::close()>
c0016634:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016636:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016639:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001663c:	31 c0                	xor    eax,eax
c001663e:	85 f6                	test   esi,esi
c0016640:	0f 95 c0             	setne  al
c0016643:	31 d2                	xor    edx,edx
c0016645:	f7 d8                	neg    eax
c0016647:	83 d2 00             	adc    edx,0x0
c001664a:	83 c4 14             	add    esp,0x14
c001664d:	f7 da                	neg    edx
c001664f:	5b                   	pop    ebx
c0016650:	5e                   	pop    esi
c0016651:	c3                   	ret    

c0016652 <sysCallCloseDir(regs*)>:
c0016652:	53                   	push   ebx
c0016653:	83 ec 08             	sub    esp,0x8
c0016656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001665a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001665d:	83 f8 02             	cmp    eax,0x2
c0016660:	76 46                	jbe    c00166a8 <sysCallCloseDir(regs*)+0x56>
c0016662:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016667:	77 2f                	ja     c0016698 <sysCallCloseDir(regs*)+0x46>
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	50                   	push   eax
c001666d:	e8 43 79 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016672:	89 c3                	mov    ebx,eax
c0016674:	89 04 24             	mov    DWORD PTR [esp],eax
c0016677:	e8 96 95 ff ff       	call   c000fc12 <Directory::close()>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	85 db                	test   ebx,ebx
c0016681:	74 0c                	je     c001668f <sysCallCloseDir(regs*)+0x3d>
c0016683:	83 ec 0c             	sub    esp,0xc
c0016686:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016688:	53                   	push   ebx
c0016689:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001668c:	83 c4 10             	add    esp,0x10
c001668f:	83 c4 08             	add    esp,0x8
c0016692:	31 c0                	xor    eax,eax
c0016694:	31 d2                	xor    edx,edx
c0016696:	5b                   	pop    ebx
c0016697:	c3                   	ret    
c0016698:	52                   	push   edx
c0016699:	52                   	push   edx
c001669a:	50                   	push   eax
c001669b:	68 f4 25 02 c0       	push   0xc00225f4
c00166a0:	e8 b4 8a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	83 c4 08             	add    esp,0x8
c00166ab:	83 c8 ff             	or     eax,0xffffffff
c00166ae:	83 ca ff             	or     edx,0xffffffff
c00166b1:	5b                   	pop    ebx
c00166b2:	c3                   	ret    

c00166b3 <sysCallWait(regs*)>:
c00166b3:	83 ec 10             	sub    esp,0x10
c00166b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166ba:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00166bd:	52                   	push   edx
c00166be:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00166c1:	51                   	push   ecx
c00166c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166c5:	50                   	push   eax
c00166c6:	e8 4f 23 00 00       	call   c0018a1a <waitTask(int, int*, int)>
c00166cb:	89 c2                	mov    edx,eax
c00166cd:	83 c4 1c             	add    esp,0x1c
c00166d0:	c1 fa 1f             	sar    edx,0x1f
c00166d3:	c3                   	ret    

c00166d4 <sysCallRmdir(regs*)>:
c00166d4:	56                   	push   esi
c00166d5:	53                   	push   ebx
c00166d6:	83 ec 10             	sub    esp,0x10
c00166d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166dd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00166e0:	68 14 01 00 00       	push   0x114
c00166e5:	e8 3a 89 ff ff       	call   c000f024 <operator new(unsigned long)>
c00166ea:	83 c4 0c             	add    esp,0xc
c00166ed:	89 c3                	mov    ebx,eax
c00166ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166f7:	50                   	push   eax
c00166f8:	56                   	push   esi
c00166f9:	53                   	push   ebx
c00166fa:	e8 91 8f ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00166ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016702:	e8 65 91 ff ff       	call   c000f86c <File::unlink()>
c0016707:	89 c6                	mov    esi,eax
c0016709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001670b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001670e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016711:	31 c0                	xor    eax,eax
c0016713:	85 f6                	test   esi,esi
c0016715:	0f 95 c0             	setne  al
c0016718:	31 d2                	xor    edx,edx
c001671a:	f7 d8                	neg    eax
c001671c:	83 d2 00             	adc    edx,0x0
c001671f:	83 c4 14             	add    esp,0x14
c0016722:	f7 da                	neg    edx
c0016724:	5b                   	pop    ebx
c0016725:	5e                   	pop    esi
c0016726:	c3                   	ret    

c0016727 <sysCallUnlink(regs*)>:
c0016727:	56                   	push   esi
c0016728:	53                   	push   ebx
c0016729:	83 ec 10             	sub    esp,0x10
c001672c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016730:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016733:	68 14 01 00 00       	push   0x114
c0016738:	e8 e7 88 ff ff       	call   c000f024 <operator new(unsigned long)>
c001673d:	83 c4 0c             	add    esp,0xc
c0016740:	89 c3                	mov    ebx,eax
c0016742:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016747:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001674a:	50                   	push   eax
c001674b:	56                   	push   esi
c001674c:	53                   	push   ebx
c001674d:	e8 3e 8f ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016752:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016755:	e8 12 91 ff ff       	call   c000f86c <File::unlink()>
c001675a:	89 c6                	mov    esi,eax
c001675c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001675e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016761:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016764:	31 c0                	xor    eax,eax
c0016766:	85 f6                	test   esi,esi
c0016768:	0f 95 c0             	setne  al
c001676b:	31 d2                	xor    edx,edx
c001676d:	f7 d8                	neg    eax
c001676f:	83 d2 00             	adc    edx,0x0
c0016772:	83 c4 14             	add    esp,0x14
c0016775:	f7 da                	neg    edx
c0016777:	5b                   	pop    ebx
c0016778:	5e                   	pop    esi
c0016779:	c3                   	ret    

c001677a <sysCallGetArgv(regs*)>:
c001677a:	83 ec 0c             	sub    esp,0xc
c001677d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016781:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016784:	85 c0                	test   eax,eax
c0016786:	78 2b                	js     c00167b3 <sysCallGetArgv(regs*)+0x39>
c0016788:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001678e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016791:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016797:	7d 1a                	jge    c00167b3 <sysCallGetArgv(regs*)+0x39>
c0016799:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c00167a0:	85 c0                	test   eax,eax
c00167a2:	74 17                	je     c00167bb <sysCallGetArgv(regs*)+0x41>
c00167a4:	51                   	push   ecx
c00167a5:	51                   	push   ecx
c00167a6:	50                   	push   eax
c00167a7:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00167aa:	50                   	push   eax
c00167ab:	e8 f7 9e fe ff       	call   c00006a7 <strcpy>
c00167b0:	83 c4 10             	add    esp,0x10
c00167b3:	31 c0                	xor    eax,eax
c00167b5:	31 d2                	xor    edx,edx
c00167b7:	83 c4 0c             	add    esp,0xc
c00167ba:	c3                   	ret    
c00167bb:	b8 01 00 00 00       	mov    eax,0x1
c00167c0:	31 d2                	xor    edx,edx
c00167c2:	83 c4 0c             	add    esp,0xc
c00167c5:	c3                   	ret    

c00167c6 <sysCallTTYName(regs*)>:
c00167c6:	56                   	push   esi
c00167c7:	53                   	push   ebx
c00167c8:	50                   	push   eax
c00167c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167cd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00167d0:	85 c0                	test   eax,eax
c00167d2:	74 4d                	je     c0016821 <sysCallTTYName(regs*)+0x5b>
c00167d4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00167d7:	83 f8 02             	cmp    eax,0x2
c00167da:	76 07                	jbe    c00167e3 <sysCallTTYName(regs*)+0x1d>
c00167dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167e1:	75 54                	jne    c0016837 <sysCallTTYName(regs*)+0x71>
c00167e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167eb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00167f1:	85 db                	test   ebx,ebx
c00167f3:	74 2c                	je     c0016821 <sysCallTTYName(regs*)+0x5b>
c00167f5:	83 ec 0c             	sub    esp,0xc
c00167f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167fa:	53                   	push   ebx
c00167fb:	ff 10                	call   DWORD PTR [eax]
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	84 c0                	test   al,al
c0016802:	74 28                	je     c001682c <sysCallTTYName(regs*)+0x66>
c0016804:	50                   	push   eax
c0016805:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001680b:	50                   	push   eax
c001680c:	53                   	push   ebx
c001680d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016810:	50                   	push   eax
c0016811:	e8 91 9e fe ff       	call   c00006a7 <strcpy>
c0016816:	83 c4 10             	add    esp,0x10
c0016819:	31 c0                	xor    eax,eax
c001681b:	31 d2                	xor    edx,edx
c001681d:	59                   	pop    ecx
c001681e:	5b                   	pop    ebx
c001681f:	5e                   	pop    esi
c0016820:	c3                   	ret    
c0016821:	59                   	pop    ecx
c0016822:	b8 01 00 00 00       	mov    eax,0x1
c0016827:	5b                   	pop    ebx
c0016828:	31 d2                	xor    edx,edx
c001682a:	5e                   	pop    esi
c001682b:	c3                   	ret    
c001682c:	59                   	pop    ecx
c001682d:	b8 02 00 00 00       	mov    eax,0x2
c0016832:	5b                   	pop    ebx
c0016833:	31 d2                	xor    edx,edx
c0016835:	5e                   	pop    esi
c0016836:	c3                   	ret    
c0016837:	83 ec 0c             	sub    esp,0xc
c001683a:	50                   	push   eax
c001683b:	e8 75 77 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016840:	83 c4 10             	add    esp,0x10
c0016843:	89 c3                	mov    ebx,eax
c0016845:	eb aa                	jmp    c00167f1 <sysCallTTYName(regs*)+0x2b>

c0016847 <sysCallGetEnv(regs*)>:
c0016847:	83 ec 0c             	sub    esp,0xc
c001684a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016851:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016854:	85 d2                	test   edx,edx
c0016856:	75 22                	jne    c001687a <sysCallGetEnv(regs*)+0x33>
c0016858:	31 c0                	xor    eax,eax
c001685a:	31 d2                	xor    edx,edx
c001685c:	85 c9                	test   ecx,ecx
c001685e:	74 04                	je     c0016864 <sysCallGetEnv(regs*)+0x1d>
c0016860:	83 c4 0c             	add    esp,0xc
c0016863:	c3                   	ret    
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	68 18 26 02 c0       	push   0xc0022618
c001686c:	e8 b4 9d fe ff       	call   c0000625 <strlen>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	31 d2                	xor    edx,edx
c0016876:	83 c4 0c             	add    esp,0xc
c0016879:	c3                   	ret    
c001687a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001687d:	85 c9                	test   ecx,ecx
c001687f:	74 0b                	je     c001688c <sysCallGetEnv(regs*)+0x45>
c0016881:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016884:	31 c0                	xor    eax,eax
c0016886:	31 d2                	xor    edx,edx
c0016888:	83 c4 0c             	add    esp,0xc
c001688b:	c3                   	ret    
c001688c:	52                   	push   edx
c001688d:	52                   	push   edx
c001688e:	68 18 26 02 c0       	push   0xc0022618
c0016893:	50                   	push   eax
c0016894:	e8 0e 9e fe ff       	call   c00006a7 <strcpy>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	eb e6                	jmp    c0016884 <sysCallGetEnv(regs*)+0x3d>

c001689e <sysCallUSleep(regs*)>:
c001689e:	57                   	push   edi
c001689f:	56                   	push   esi
c00168a0:	53                   	push   ebx
c00168a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a5:	52                   	push   edx
c00168a6:	52                   	push   edx
c00168a7:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c00168aa:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00168ad:	89 c8                	mov    eax,ecx
c00168af:	89 da                	mov    edx,ebx
c00168b1:	0f a4 c2 05          	shld   edx,eax,0x5
c00168b5:	c1 e0 05             	shl    eax,0x5
c00168b8:	29 c8                	sub    eax,ecx
c00168ba:	19 da                	sbb    edx,ebx
c00168bc:	0f a4 c2 02          	shld   edx,eax,0x2
c00168c0:	c1 e0 02             	shl    eax,0x2
c00168c3:	01 c8                	add    eax,ecx
c00168c5:	11 da                	adc    edx,ebx
c00168c7:	0f a4 c2 03          	shld   edx,eax,0x3
c00168cb:	c1 e0 03             	shl    eax,0x3
c00168ce:	52                   	push   edx
c00168cf:	50                   	push   eax
c00168d0:	e8 e0 21 00 00       	call   c0018ab5 <nanoSleep(unsigned long long)>
c00168d5:	83 c4 10             	add    esp,0x10
c00168d8:	31 c0                	xor    eax,eax
c00168da:	31 d2                	xor    edx,edx
c00168dc:	5b                   	pop    ebx
c00168dd:	5e                   	pop    esi
c00168de:	5f                   	pop    edi
c00168df:	c3                   	ret    

c00168e0 <sysCallSpawn(regs*)>:
c00168e0:	56                   	push   esi
c00168e1:	53                   	push   ebx
c00168e2:	50                   	push   eax
c00168e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168e7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00168ea:	85 c0                	test   eax,eax
c00168ec:	75 08                	jne    c00168f6 <sysCallSpawn(regs*)+0x16>
c00168ee:	59                   	pop    ecx
c00168ef:	31 c0                	xor    eax,eax
c00168f1:	5b                   	pop    ebx
c00168f2:	31 d2                	xor    edx,edx
c00168f4:	5e                   	pop    esi
c00168f5:	c3                   	ret    
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	68 3b 07 00 00       	push   0x73b
c00168fe:	e8 21 87 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016903:	89 c6                	mov    esi,eax
c0016905:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016908:	50                   	push   eax
c0016909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001690e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016911:	50                   	push   eax
c0016912:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016915:	50                   	push   eax
c0016916:	56                   	push   esi
c0016917:	e8 d6 18 00 00       	call   c00181f2 <Process::Process(char const*, Process*, char**)>
c001691c:	83 c4 20             	add    esp,0x20
c001691f:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016926:	75 c6                	jne    c00168ee <sysCallSpawn(regs*)+0xe>
c0016928:	83 ec 0c             	sub    esp,0xc
c001692b:	56                   	push   esi
c001692c:	e8 3d 1e 00 00       	call   c001876e <Process::createUserThread()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	8b 06                	mov    eax,DWORD PTR [esi]
c0016936:	89 c2                	mov    edx,eax
c0016938:	c1 fa 1f             	sar    edx,0x1f
c001693b:	59                   	pop    ecx
c001693c:	5b                   	pop    ebx
c001693d:	5e                   	pop    esi
c001693e:	c3                   	ret    

c001693f <sysAppSettings(regs*)>:
c001693f:	53                   	push   ebx
c0016940:	31 d2                	xor    edx,edx
c0016942:	83 ec 08             	sub    esp,0x8
c0016945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016949:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001694c:	b8 01 00 00 00       	mov    eax,0x1
c0016951:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016957:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c001695d:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016962:	75 30                	jne    c0016994 <sysAppSettings(regs*)+0x55>
c0016964:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001696a:	83 e0 1f             	and    eax,0x1f
c001696d:	3c 01                	cmp    al,0x1
c001696f:	74 28                	je     c0016999 <sysAppSettings(regs*)+0x5a>
c0016971:	3c 07                	cmp    al,0x7
c0016973:	0f 84 be 00 00 00    	je     c0016a37 <sysAppSettings(regs*)+0xf8>
c0016979:	84 c0                	test   al,al
c001697b:	0f 84 da 00 00 00    	je     c0016a5b <sysAppSettings(regs*)+0x11c>
c0016981:	3c 08                	cmp    al,0x8
c0016983:	74 6d                	je     c00169f2 <sysAppSettings(regs*)+0xb3>
c0016985:	25 ff 00 00 00       	and    eax,0xff
c001698a:	05 e8 03 00 00       	add    eax,0x3e8
c001698f:	89 c2                	mov    edx,eax
c0016991:	c1 fa 1f             	sar    edx,0x1f
c0016994:	83 c4 08             	add    esp,0x8
c0016997:	5b                   	pop    ebx
c0016998:	c3                   	ret    
c0016999:	50                   	push   eax
c001699a:	68 00 01 00 00       	push   0x100
c001699f:	6a 00                	push   0x0
c00169a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169a9:	83 c0 0c             	add    eax,0xc
c00169ac:	50                   	push   eax
c00169ad:	e8 56 9c fe ff       	call   c0000608 <memset>
c00169b2:	83 c4 0c             	add    esp,0xc
c00169b5:	68 ff 00 00 00       	push   0xff
c00169ba:	53                   	push   ebx
c00169bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169c3:	83 c0 0c             	add    eax,0xc
c00169c6:	50                   	push   eax
c00169c7:	e8 06 9c fe ff       	call   c00005d2 <memcpy>
c00169cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169d1:	5a                   	pop    edx
c00169d2:	59                   	pop    ecx
c00169d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169d6:	8d 50 0c             	lea    edx,[eax+0xc]
c00169d9:	52                   	push   edx
c00169da:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00169e0:	53                   	push   ebx
c00169e1:	e8 16 67 ff ff       	call   c000d0fc <VgaText::setTitle(char*)>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	31 c0                	xor    eax,eax
c00169eb:	31 d2                	xor    edx,edx
c00169ed:	83 c4 08             	add    esp,0x8
c00169f0:	5b                   	pop    ebx
c00169f1:	c3                   	ret    
c00169f2:	50                   	push   eax
c00169f3:	50                   	push   eax
c00169f4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c00169fa:	83 e0 0f             	and    eax,0xf
c00169fd:	50                   	push   eax
c00169fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016a0c:	50                   	push   eax
c0016a0d:	e8 da 66 ff ff       	call   c000d0ec <VgaText::setTitleColour(VgaColour)>
c0016a12:	58                   	pop    eax
c0016a13:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016a19:	c1 e8 04             	shr    eax,0x4
c0016a1c:	5a                   	pop    edx
c0016a1d:	83 e0 0f             	and    eax,0xf
c0016a20:	50                   	push   eax
c0016a21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a29:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016a2f:	51                   	push   ecx
c0016a30:	e8 a7 66 ff ff       	call   c000d0dc <VgaText::setTitleTextColour(VgaColour)>
c0016a35:	eb af                	jmp    c00169e6 <sysAppSettings(regs*)+0xa7>
c0016a37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a3f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016a45:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016a4b:	c0 e8 06             	shr    al,0x6
c0016a4e:	83 e0 01             	and    eax,0x1
c0016a51:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016a57:	31 c0                	xor    eax,eax
c0016a59:	eb 90                	jmp    c00169eb <sysAppSettings(regs*)+0xac>
c0016a5b:	b8 02 00 00 00       	mov    eax,0x2
c0016a60:	31 d2                	xor    edx,edx
c0016a62:	eb 89                	jmp    c00169ed <sysAppSettings(regs*)+0xae>

c0016a64 <sysSetFatAttrib(regs*)>:
c0016a64:	57                   	push   edi
c0016a65:	56                   	push   esi
c0016a66:	53                   	push   ebx
c0016a67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a6b:	83 ec 0c             	sub    esp,0xc
c0016a6e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016a71:	68 14 01 00 00       	push   0x114
c0016a76:	e8 a9 85 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016a7b:	83 c4 0c             	add    esp,0xc
c0016a7e:	89 c3                	mov    ebx,eax
c0016a80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a88:	50                   	push   eax
c0016a89:	57                   	push   edi
c0016a8a:	53                   	push   ebx
c0016a8b:	e8 00 8c ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016a90:	83 c4 0c             	add    esp,0xc
c0016a93:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016a96:	0f b6 d4             	movzx  edx,ah
c0016a99:	52                   	push   edx
c0016a9a:	25 ff 00 00 00       	and    eax,0xff
c0016a9f:	50                   	push   eax
c0016aa0:	53                   	push   ebx
c0016aa1:	e8 60 8e ff ff       	call   c000f906 <File::chfatattr(unsigned char, unsigned char)>
c0016aa6:	89 c6                	mov    esi,eax
c0016aa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ab0:	83 c4 10             	add    esp,0x10
c0016ab3:	31 c0                	xor    eax,eax
c0016ab5:	85 f6                	test   esi,esi
c0016ab7:	0f 95 c0             	setne  al
c0016aba:	5b                   	pop    ebx
c0016abb:	31 d2                	xor    edx,edx
c0016abd:	f7 d8                	neg    eax
c0016abf:	83 d2 00             	adc    edx,0x0
c0016ac2:	5e                   	pop    esi
c0016ac3:	f7 da                	neg    edx
c0016ac5:	5f                   	pop    edi
c0016ac6:	c3                   	ret    

c0016ac7 <sysPanic(regs*)>:
c0016ac7:	83 ec 18             	sub    esp,0x18
c0016aca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ace:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016ad1:	50                   	push   eax
c0016ad2:	e8 77 ea ff ff       	call   c001554e <Krnl::panic(char const*)>
c0016ad7:	c7 04 24 cf 26 02 c0 	mov    DWORD PTR [esp],0xc00226cf
c0016ade:	e8 6b ea ff ff       	call   c001554e <Krnl::panic(char const*)>
c0016ae3:	b8 01 00 00 00       	mov    eax,0x1
c0016ae8:	31 d2                	xor    edx,edx
c0016aea:	83 c4 1c             	add    esp,0x1c
c0016aed:	c3                   	ret    

c0016aee <sysPipe(regs*)>:
c0016aee:	57                   	push   edi
c0016aef:	56                   	push   esi
c0016af0:	53                   	push   ebx
c0016af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af5:	83 ec 0c             	sub    esp,0xc
c0016af8:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016afb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016afe:	6a 20                	push   0x20
c0016b00:	e8 1f 85 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016b05:	89 c3                	mov    ebx,eax
c0016b07:	58                   	pop    eax
c0016b08:	5a                   	pop    edx
c0016b09:	68 00 50 00 00       	push   0x5000
c0016b0e:	53                   	push   ebx
c0016b0f:	e8 26 5f ff ff       	call   c000ca3a <Pipe::Pipe(int)>
c0016b14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b17:	e8 e4 71 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c0016b1c:	89 07                	mov    DWORD PTR [edi],eax
c0016b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b21:	e8 da 71 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	89 06                	mov    DWORD PTR [esi],eax
c0016b2b:	31 d2                	xor    edx,edx
c0016b2d:	5b                   	pop    ebx
c0016b2e:	31 c0                	xor    eax,eax
c0016b30:	5e                   	pop    esi
c0016b31:	5f                   	pop    edi
c0016b32:	c3                   	ret    

c0016b33 <sysGetUnixTime(regs*)>:
c0016b33:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c0016b38:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b42:	e9 11 95 ff ff       	jmp    c0010058 <Clock::timeInSecondsLocal()>

c0016b47 <string_ends_with(char const*, char const*)>:
c0016b47:	57                   	push   edi
c0016b48:	56                   	push   esi
c0016b49:	53                   	push   ebx
c0016b4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b52:	83 ec 0c             	sub    esp,0xc
c0016b55:	53                   	push   ebx
c0016b56:	e8 ca 9a fe ff       	call   c0000625 <strlen>
c0016b5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016b5e:	89 c6                	mov    esi,eax
c0016b60:	e8 c0 9a fe ff       	call   c0000625 <strlen>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	31 d2                	xor    edx,edx
c0016b6a:	39 c6                	cmp    esi,eax
c0016b6c:	7d 06                	jge    c0016b74 <string_ends_with(char const*, char const*)+0x2d>
c0016b6e:	5b                   	pop    ebx
c0016b6f:	89 d0                	mov    eax,edx
c0016b71:	5e                   	pop    esi
c0016b72:	5f                   	pop    edi
c0016b73:	c3                   	ret    
c0016b74:	52                   	push   edx
c0016b75:	29 c6                	sub    esi,eax
c0016b77:	52                   	push   edx
c0016b78:	01 f3                	add    ebx,esi
c0016b7a:	57                   	push   edi
c0016b7b:	53                   	push   ebx
c0016b7c:	e8 77 9b fe ff       	call   c00006f8 <strcmp>
c0016b81:	83 c4 10             	add    esp,0x10
c0016b84:	31 d2                	xor    edx,edx
c0016b86:	85 c0                	test   eax,eax
c0016b88:	5b                   	pop    ebx
c0016b89:	0f 94 c2             	sete   dl
c0016b8c:	5e                   	pop    esi
c0016b8d:	89 d0                	mov    eax,edx
c0016b8f:	5f                   	pop    edi
c0016b90:	c3                   	ret    

c0016b91 <sysCallOpen(regs*)>:
c0016b91:	56                   	push   esi
c0016b92:	53                   	push   ebx
c0016b93:	81 ec 04 01 00 00    	sub    esp,0x104
c0016b99:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016ba0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016ba3:	85 c9                	test   ecx,ecx
c0016ba5:	0f 84 bb 00 00 00    	je     c0016c66 <sysCallOpen(regs*)+0xd5>
c0016bab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016bae:	85 c0                	test   eax,eax
c0016bb0:	0f 84 b0 00 00 00    	je     c0016c66 <sysCallOpen(regs*)+0xd5>
c0016bb6:	52                   	push   edx
c0016bb7:	68 de 26 02 c0       	push   0xc00226de
c0016bbc:	50                   	push   eax
c0016bbd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016bc1:	56                   	push   esi
c0016bc2:	e8 1f 89 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c0016bc7:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bca:	e8 56 9a fe ff       	call   c0000625 <strlen>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	48                   	dec    eax
c0016bd3:	74 25                	je     c0016bfa <sysCallOpen(regs*)+0x69>
c0016bd5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016bd8:	80 fa 2e             	cmp    dl,0x2e
c0016bdb:	74 19                	je     c0016bf6 <sysCallOpen(regs*)+0x65>
c0016bdd:	80 fa 3a             	cmp    dl,0x3a
c0016be0:	74 14                	je     c0016bf6 <sysCallOpen(regs*)+0x65>
c0016be2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016be6:	48                   	dec    eax
c0016be7:	74 11                	je     c0016bfa <sysCallOpen(regs*)+0x69>
c0016be9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016bec:	80 fa 3a             	cmp    dl,0x3a
c0016bef:	74 05                	je     c0016bf6 <sysCallOpen(regs*)+0x65>
c0016bf1:	80 fa 2e             	cmp    dl,0x2e
c0016bf4:	75 ec                	jne    c0016be2 <sysCallOpen(regs*)+0x51>
c0016bf6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016bfa:	51                   	push   ecx
c0016bfb:	51                   	push   ecx
c0016bfc:	68 e2 26 02 c0       	push   0xc00226e2
c0016c01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c04:	50                   	push   eax
c0016c05:	e8 3d ff ff ff       	call   c0016b47 <string_ends_with(char const*, char const*)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	85 c0                	test   eax,eax
c0016c0f:	75 17                	jne    c0016c28 <sysCallOpen(regs*)+0x97>
c0016c11:	50                   	push   eax
c0016c12:	50                   	push   eax
c0016c13:	68 03 27 02 c0       	push   0xc0022703
c0016c18:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c1b:	50                   	push   eax
c0016c1c:	e8 26 ff ff ff       	call   c0016b47 <string_ends_with(char const*, char const*)>
c0016c21:	83 c4 10             	add    esp,0x10
c0016c24:	85 c0                	test   eax,eax
c0016c26:	74 4d                	je     c0016c75 <sysCallOpen(regs*)+0xe4>
c0016c28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016c2b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016c31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016c38:	50                   	push   eax
c0016c39:	50                   	push   eax
c0016c3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016c3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c3f:	52                   	push   edx
c0016c40:	68 e7 26 02 c0       	push   0xc00226e7
c0016c45:	e8 0f 85 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016c4a:	c7 04 24 f6 26 02 c0 	mov    DWORD PTR [esp],0xc00226f6
c0016c51:	e8 03 85 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	81 c4 04 01 00 00    	add    esp,0x104
c0016c5f:	31 c0                	xor    eax,eax
c0016c61:	31 d2                	xor    edx,edx
c0016c63:	5b                   	pop    ebx
c0016c64:	5e                   	pop    esi
c0016c65:	c3                   	ret    
c0016c66:	81 c4 04 01 00 00    	add    esp,0x104
c0016c6c:	83 c8 ff             	or     eax,0xffffffff
c0016c6f:	83 ca ff             	or     edx,0xffffffff
c0016c72:	5b                   	pop    ebx
c0016c73:	5e                   	pop    esi
c0016c74:	c3                   	ret    
c0016c75:	50                   	push   eax
c0016c76:	50                   	push   eax
c0016c77:	68 e3 26 02 c0       	push   0xc00226e3
c0016c7c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c7f:	50                   	push   eax
c0016c80:	e8 73 9a fe ff       	call   c00006f8 <strcmp>
c0016c85:	83 c4 10             	add    esp,0x10
c0016c88:	85 c0                	test   eax,eax
c0016c8a:	74 9c                	je     c0016c28 <sysCallOpen(regs*)+0x97>
c0016c8c:	50                   	push   eax
c0016c8d:	50                   	push   eax
c0016c8e:	68 e2 26 02 c0       	push   0xc00226e2
c0016c93:	56                   	push   esi
c0016c94:	e8 ae fe ff ff       	call   c0016b47 <string_ends_with(char const*, char const*)>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	85 c0                	test   eax,eax
c0016c9e:	75 88                	jne    c0016c28 <sysCallOpen(regs*)+0x97>
c0016ca0:	52                   	push   edx
c0016ca1:	52                   	push   edx
c0016ca2:	68 08 27 02 c0       	push   0xc0022708
c0016ca7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016caa:	51                   	push   ecx
c0016cab:	e8 97 fe ff ff       	call   c0016b47 <string_ends_with(char const*, char const*)>
c0016cb0:	83 c4 10             	add    esp,0x10
c0016cb3:	85 c0                	test   eax,eax
c0016cb5:	0f 85 d5 00 00 00    	jne    c0016d90 <sysCallOpen(regs*)+0x1ff>
c0016cbb:	50                   	push   eax
c0016cbc:	50                   	push   eax
c0016cbd:	68 0d 27 02 c0       	push   0xc002270d
c0016cc2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cc5:	50                   	push   eax
c0016cc6:	e8 7c fe ff ff       	call   c0016b47 <string_ends_with(char const*, char const*)>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	85 c0                	test   eax,eax
c0016cd0:	0f 85 ba 00 00 00    	jne    c0016d90 <sysCallOpen(regs*)+0x1ff>
c0016cd6:	50                   	push   eax
c0016cd7:	50                   	push   eax
c0016cd8:	68 09 27 02 c0       	push   0xc0022709
c0016cdd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ce0:	50                   	push   eax
c0016ce1:	e8 12 9a fe ff       	call   c00006f8 <strcmp>
c0016ce6:	83 c4 10             	add    esp,0x10
c0016ce9:	85 c0                	test   eax,eax
c0016ceb:	0f 84 9f 00 00 00    	je     c0016d90 <sysCallOpen(regs*)+0x1ff>
c0016cf1:	50                   	push   eax
c0016cf2:	50                   	push   eax
c0016cf3:	68 08 27 02 c0       	push   0xc0022708
c0016cf8:	56                   	push   esi
c0016cf9:	e8 49 fe ff ff       	call   c0016b47 <string_ends_with(char const*, char const*)>
c0016cfe:	83 c4 10             	add    esp,0x10
c0016d01:	85 c0                	test   eax,eax
c0016d03:	0f 85 87 00 00 00    	jne    c0016d90 <sysCallOpen(regs*)+0x1ff>
c0016d09:	83 ec 0c             	sub    esp,0xc
c0016d0c:	68 14 01 00 00       	push   0x114
c0016d11:	e8 0e 83 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016d16:	89 c6                	mov    esi,eax
c0016d18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d1d:	83 c4 0c             	add    esp,0xc
c0016d20:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0016d23:	51                   	push   ecx
c0016d24:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d27:	50                   	push   eax
c0016d28:	56                   	push   esi
c0016d29:	e8 62 89 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016d2e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	89 d0                	mov    eax,edx
c0016d36:	25 ff 00 00 00       	and    eax,0xff
c0016d3b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016d3e:	89 d0                	mov    eax,edx
c0016d40:	83 e0 01             	and    eax,0x1
c0016d43:	f6 c2 02             	test   dl,0x2
c0016d46:	74 03                	je     c0016d4b <sysCallOpen(regs*)+0x1ba>
c0016d48:	83 c8 02             	or     eax,0x2
c0016d4b:	f6 c2 04             	test   dl,0x4
c0016d4e:	74 03                	je     c0016d53 <sysCallOpen(regs*)+0x1c2>
c0016d50:	83 c8 04             	or     eax,0x4
c0016d53:	f6 c2 08             	test   dl,0x8
c0016d56:	74 03                	je     c0016d5b <sysCallOpen(regs*)+0x1ca>
c0016d58:	83 c8 0a             	or     eax,0xa
c0016d5b:	83 e2 10             	and    edx,0x10
c0016d5e:	74 03                	je     c0016d63 <sysCallOpen(regs*)+0x1d2>
c0016d60:	83 c8 12             	or     eax,0x12
c0016d63:	52                   	push   edx
c0016d64:	52                   	push   edx
c0016d65:	50                   	push   eax
c0016d66:	56                   	push   esi
c0016d67:	e8 88 89 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	85 c0                	test   eax,eax
c0016d71:	0f 85 ef fe ff ff    	jne    c0016c66 <sysCallOpen(regs*)+0xd5>
c0016d77:	83 ec 0c             	sub    esp,0xc
c0016d7a:	56                   	push   esi
c0016d7b:	e8 80 6f ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c0016d80:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016d83:	89 02                	mov    DWORD PTR [edx],eax
c0016d85:	c1 f8 1f             	sar    eax,0x1f
c0016d88:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016d8b:	e9 c6 fe ff ff       	jmp    c0016c56 <sysCallOpen(regs*)+0xc5>
c0016d90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016d93:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016da0:	e9 b4 fe ff ff       	jmp    c0016c59 <sysCallOpen(regs*)+0xc8>

c0016da5 <setupSystemCalls()>:
c0016da5:	c7 05 e0 4c 02 c0 a0 5f 01 c0 	mov    DWORD PTR ds:0xc0024ce0,0xc0015fa0
c0016daf:	c7 05 e4 4c 02 c0 b3 5d 01 c0 	mov    DWORD PTR ds:0xc0024ce4,0xc0015db3
c0016db9:	c7 05 e8 4c 02 c0 c8 5e 01 c0 	mov    DWORD PTR ds:0xc0024ce8,0xc0015ec8
c0016dc3:	c7 05 ec 4c 02 c0 1d 5f 01 c0 	mov    DWORD PTR ds:0xc0024cec,0xc0015f1d
c0016dcd:	c7 05 f0 4c 02 c0 60 5e 01 c0 	mov    DWORD PTR ds:0xc0024cf0,0xc0015e60
c0016dd7:	c7 05 f4 4c 02 c0 ba 5f 01 c0 	mov    DWORD PTR ds:0xc0024cf4,0xc0015fba
c0016de1:	c7 05 f8 4c 02 c0 79 61 01 c0 	mov    DWORD PTR ds:0xc0024cf8,0xc0016179
c0016deb:	c7 05 fc 4c 02 c0 9f 61 01 c0 	mov    DWORD PTR ds:0xc0024cfc,0xc001619f
c0016df5:	c7 05 04 4d 02 c0 09 65 01 c0 	mov    DWORD PTR ds:0xc0024d04,0xc0016509
c0016dff:	c7 05 00 4d 02 c0 91 6b 01 c0 	mov    DWORD PTR ds:0xc0024d00,0xc0016b91
c0016e09:	c7 05 08 4d 02 c0 8c 65 01 c0 	mov    DWORD PTR ds:0xc0024d08,0xc001658c
c0016e13:	c7 05 0c 4d 02 c0 0e 62 01 c0 	mov    DWORD PTR ds:0xc0024d0c,0xc001620e
c0016e1d:	c7 05 10 4d 02 c0 ca 5f 01 c0 	mov    DWORD PTR ds:0xc0024d10,0xc0015fca
c0016e27:	c7 05 14 4d 02 c0 cf 5f 01 c0 	mov    DWORD PTR ds:0xc0024d14,0xc0015fcf
c0016e31:	c7 05 18 4d 02 c0 f7 65 01 c0 	mov    DWORD PTR ds:0xc0024d18,0xc00165f7
c0016e3b:	c7 05 1c 4d 02 c0 52 66 01 c0 	mov    DWORD PTR ds:0xc0024d1c,0xc0016652
c0016e45:	c7 05 20 4d 02 c0 f9 62 01 c0 	mov    DWORD PTR ds:0xc0024d20,0xc00162f9
c0016e4f:	c7 05 24 4d 02 c0 5f 63 01 c0 	mov    DWORD PTR ds:0xc0024d24,0xc001635f
c0016e59:	c7 05 28 4d 02 c0 88 64 01 c0 	mov    DWORD PTR ds:0xc0024d28,0xc0016488
c0016e63:	c7 05 2c 4d 02 c0 d4 5f 01 c0 	mov    DWORD PTR ds:0xc0024d2c,0xc0015fd4
c0016e6d:	c7 05 30 4d 02 c0 b3 66 01 c0 	mov    DWORD PTR ds:0xc0024d30,0xc00166b3
c0016e77:	c7 05 34 4d 02 c0 de 5f 01 c0 	mov    DWORD PTR ds:0xc0024d34,0xc0015fde
c0016e81:	c7 05 38 4d 02 c0 e5 5f 01 c0 	mov    DWORD PTR ds:0xc0024d38,0xc0015fe5
c0016e8b:	c7 05 3c 4d 02 c0 d4 66 01 c0 	mov    DWORD PTR ds:0xc0024d3c,0xc00166d4
c0016e95:	c7 05 40 4d 02 c0 27 67 01 c0 	mov    DWORD PTR ds:0xc0024d40,0xc0016727
c0016e9f:	c7 05 44 4d 02 c0 ec 5f 01 c0 	mov    DWORD PTR ds:0xc0024d44,0xc0015fec
c0016ea9:	c7 05 48 4d 02 c0 7a 67 01 c0 	mov    DWORD PTR ds:0xc0024d48,0xc001677a
c0016eb3:	c7 05 4c 4d 02 c0 c1 61 01 c0 	mov    DWORD PTR ds:0xc0024d4c,0xc00161c1
c0016ebd:	c7 05 50 4d 02 c0 c6 67 01 c0 	mov    DWORD PTR ds:0xc0024d50,0xc00167c6
c0016ec7:	c7 05 54 4d 02 c0 a1 62 01 c0 	mov    DWORD PTR ds:0xc0024d54,0xc00162a1
c0016ed1:	c7 05 58 4d 02 c0 9e 68 01 c0 	mov    DWORD PTR ds:0xc0024d58,0xc001689e
c0016edb:	c7 05 5c 4d 02 c0 da 63 01 c0 	mov    DWORD PTR ds:0xc0024d5c,0xc00163da
c0016ee5:	c7 05 60 4d 02 c0 e0 68 01 c0 	mov    DWORD PTR ds:0xc0024d60,0xc00168e0
c0016eef:	c7 05 64 4d 02 c0 47 68 01 c0 	mov    DWORD PTR ds:0xc0024d64,0xc0016847
c0016ef9:	c7 05 68 4d 02 c0 3f 69 01 c0 	mov    DWORD PTR ds:0xc0024d68,0xc001693f
c0016f03:	c7 05 6c 4d 02 c0 00 60 01 c0 	mov    DWORD PTR ds:0xc0024d6c,0xc0016000
c0016f0d:	c7 05 70 4d 02 c0 63 60 01 c0 	mov    DWORD PTR ds:0xc0024d70,0xc0016063
c0016f17:	c7 05 74 4d 02 c0 ab 60 01 c0 	mov    DWORD PTR ds:0xc0024d74,0xc00160ab
c0016f21:	c7 05 78 4d 02 c0 64 6a 01 c0 	mov    DWORD PTR ds:0xc0024d78,0xc0016a64
c0016f2b:	c7 05 7c 4d 02 c0 c7 6a 01 c0 	mov    DWORD PTR ds:0xc0024d7c,0xc0016ac7
c0016f35:	c7 05 80 4d 02 c0 fe 60 01 c0 	mov    DWORD PTR ds:0xc0024d80,0xc00160fe
c0016f3f:	c7 05 84 4d 02 c0 ee 6a 01 c0 	mov    DWORD PTR ds:0xc0024d84,0xc0016aee
c0016f49:	c7 05 88 4d 02 c0 33 6b 01 c0 	mov    DWORD PTR ds:0xc0024d88,0xc0016b33
c0016f53:	c7 05 8c 4d 02 c0 cb 5d 01 c0 	mov    DWORD PTR ds:0xc0024d8c,0xc0015dcb
c0016f5d:	c3                   	ret    

c0016f5e <systemCall(regs*, void*)>:
c0016f5e:	53                   	push   ebx
c0016f5f:	83 ec 08             	sub    esp,0x8
c0016f62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f66:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016f69:	83 f8 7f             	cmp    eax,0x7f
c0016f6c:	77 16                	ja     c0016f84 <systemCall(regs*, void*)+0x26>
c0016f6e:	8b 14 85 e0 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb320]
c0016f75:	85 d2                	test   edx,edx
c0016f77:	74 0b                	je     c0016f84 <systemCall(regs*, void*)+0x26>
c0016f79:	83 ec 0c             	sub    esp,0xc
c0016f7c:	53                   	push   ebx
c0016f7d:	ff d2                	call   edx
c0016f7f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016f82:	eb 0d                	jmp    c0016f91 <systemCall(regs*, void*)+0x33>
c0016f84:	52                   	push   edx
c0016f85:	52                   	push   edx
c0016f86:	50                   	push   eax
c0016f87:	68 12 27 02 c0       	push   0xc0022712
c0016f8c:	e8 c8 81 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016f91:	83 c4 10             	add    esp,0x10
c0016f94:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016f99:	83 c4 08             	add    esp,0x8
c0016f9c:	31 d2                	xor    edx,edx
c0016f9e:	5b                   	pop    ebx
c0016f9f:	c3                   	ret    

c0016fa0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016fa0:	55                   	push   ebp
c0016fa1:	89 e5                	mov    ebp,esp
c0016fa3:	57                   	push   edi
c0016fa4:	56                   	push   esi
c0016fa5:	53                   	push   ebx
c0016fa6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016fac:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016faf:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016fb2:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016fb9:	74 27                	je     c0016fe2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016fbb:	85 c0                	test   eax,eax
c0016fbd:	74 23                	je     c0016fe2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016fbf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016fc3:	75 1d                	jne    c0016fe2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016fc5:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c0016fc8:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c0016fce:	89 d1                	mov    ecx,edx
c0016fd0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016fd6:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0016fdc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016fdf:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016fe8:	05 ff 0f 00 00       	add    eax,0xfff
c0016fed:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016ff3:	6a 01                	push   0x1
c0016ff5:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016ffb:	e8 3e 71 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	89 c6                	mov    esi,eax
c0017005:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001700b:	0f 86 21 01 00 00    	jbe    c0017132 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017011:	c1 eb 0c             	shr    ebx,0xc
c0017014:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001701e:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017024:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017027:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001702a:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017030:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017033:	29 d8                	sub    eax,ebx
c0017035:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001703b:	0f 83 f4 00 00 00    	jae    c0017135 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017041:	83 ec 0c             	sub    esp,0xc
c0017044:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017047:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001704d:	3d 00 10 00 00       	cmp    eax,0x1000
c0017052:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017054:	52                   	push   edx
c0017055:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001705b:	52                   	push   edx
c001705c:	76 05                	jbe    c0017063 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001705e:	b8 00 10 00 00       	mov    eax,0x1000
c0017063:	31 d2                	xor    edx,edx
c0017065:	52                   	push   edx
c0017066:	50                   	push   eax
c0017067:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001706a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001706d:	83 c4 20             	add    esp,0x20
c0017070:	85 c0                	test   eax,eax
c0017072:	74 1f                	je     c0017093 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017074:	51                   	push   ecx
c0017075:	51                   	push   ecx
c0017076:	50                   	push   eax
c0017077:	68 26 27 02 c0       	push   0xc0022726
c001707c:	e8 d8 80 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017081:	89 34 24             	mov    DWORD PTR [esp],esi
c0017084:	e8 02 74 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	31 c0                	xor    eax,eax
c001708e:	e9 7c 01 00 00       	jmp    c001720f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017093:	e8 bf 14 00 00       	call   c0018557 <lockScheduler()>
c0017098:	e8 60 54 ff ff       	call   c000c4fd <Phys::allocatePage()>
c001709d:	6a 07                	push   0x7
c001709f:	56                   	push   esi
c00170a0:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00170a6:	50                   	push   eax
c00170a7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170ad:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00170b0:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00170b6:	e8 4f 77 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c00170bb:	83 c4 0c             	add    esp,0xc
c00170be:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00170c4:	6a 00                	push   0x0
c00170c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170cc:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00170cf:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00170d5:	e8 8e 75 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c00170da:	58                   	pop    eax
c00170db:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00170e1:	5a                   	pop    edx
c00170e2:	68 07 04 00 00       	push   0x407
c00170e7:	53                   	push   ebx
c00170e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00170ee:	50                   	push   eax
c00170ef:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00170f5:	6a 00                	push   0x0
c00170f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00170ff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017105:	e8 bc 7a ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001710a:	83 c4 1c             	add    esp,0x1c
c001710d:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017113:	68 00 10 00 00       	push   0x1000
c0017118:	50                   	push   eax
c0017119:	56                   	push   esi
c001711a:	e8 b3 94 fe ff       	call   c00005d2 <memcpy>
c001711f:	e8 35 14 00 00       	call   c0018559 <unlockScheduler()>
c0017124:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001712a:	83 c4 10             	add    esp,0x10
c001712d:	e9 f5 fe ff ff       	jmp    c0017027 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017132:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017135:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001713f:	0f 86 bc 00 00 00    	jbe    c0017201 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017145:	e8 0d 14 00 00       	call   c0018557 <lockScheduler()>
c001714a:	51                   	push   ecx
c001714b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017151:	6a 00                	push   0x0
c0017153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017158:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001715b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017161:	e8 02 75 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c0017166:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001716c:	c1 e8 0c             	shr    eax,0xc
c001716f:	83 c4 10             	add    esp,0x10
c0017172:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017178:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017182:	e8 76 53 ff ff       	call   c000c4fd <Phys::allocatePage()>
c0017187:	6a 07                	push   0x7
c0017189:	56                   	push   esi
c001718a:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017190:	50                   	push   eax
c0017191:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017197:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001719a:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00171a0:	e8 65 76 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c00171a5:	58                   	pop    eax
c00171a6:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00171ac:	5a                   	pop    edx
c00171ad:	68 07 04 00 00       	push   0x407
c00171b2:	53                   	push   ebx
c00171b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00171b9:	50                   	push   eax
c00171ba:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00171c0:	6a 00                	push   0x0
c00171c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00171ca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00171d0:	e8 f1 79 ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00171d5:	83 c4 1c             	add    esp,0x1c
c00171d8:	68 00 10 00 00       	push   0x1000
c00171dd:	6a 00                	push   0x0
c00171df:	56                   	push   esi
c00171e0:	e8 23 94 fe ff       	call   c0000608 <memset>
c00171e5:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00171eb:	83 c4 10             	add    esp,0x10
c00171ee:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00171f4:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00171fa:	77 86                	ja     c0017182 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00171fc:	e8 58 13 00 00       	call   c0018559 <unlockScheduler()>
c0017201:	83 ec 0c             	sub    esp,0xc
c0017204:	56                   	push   esi
c0017205:	e8 81 72 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c001720a:	83 c4 10             	add    esp,0x10
c001720d:	b0 01                	mov    al,0x1
c001720f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017212:	5b                   	pop    ebx
c0017213:	5e                   	pop    esi
c0017214:	5f                   	pop    edi
c0017215:	5d                   	pop    ebp
c0017216:	c3                   	ret    

c0017217 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017217:	55                   	push   ebp
c0017218:	57                   	push   edi
c0017219:	56                   	push   esi
c001721a:	53                   	push   ebx
c001721b:	83 ec 48             	sub    esp,0x48
c001721e:	68 14 01 00 00       	push   0x114
c0017223:	e8 fc 7d ff ff       	call   c000f024 <operator new(unsigned long)>
c0017228:	83 c4 0c             	add    esp,0xc
c001722b:	89 c6                	mov    esi,eax
c001722d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017231:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017235:	50                   	push   eax
c0017236:	e8 55 84 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001723b:	58                   	pop    eax
c001723c:	5a                   	pop    edx
c001723d:	6a 01                	push   0x1
c001723f:	56                   	push   esi
c0017240:	e8 af 84 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017245:	83 c4 10             	add    esp,0x10
c0017248:	85 c0                	test   eax,eax
c001724a:	0f 85 47 01 00 00    	jne    c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017250:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017258:	83 ec 0c             	sub    esp,0xc
c001725b:	6a 34                	push   0x34
c001725d:	e8 c5 4c ff ff       	call   c000bf27 <malloc>
c0017262:	89 c3                	mov    ebx,eax
c0017264:	58                   	pop    eax
c0017265:	8b 06                	mov    eax,DWORD PTR [esi]
c0017267:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001726b:	57                   	push   edi
c001726c:	53                   	push   ebx
c001726d:	6a 00                	push   0x0
c001726f:	6a 34                	push   0x34
c0017271:	56                   	push   esi
c0017272:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017275:	83 c4 20             	add    esp,0x20
c0017278:	85 c0                	test   eax,eax
c001727a:	0f 85 17 01 00 00    	jne    c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017280:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017286:	0f 85 0b 01 00 00    	jne    c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001728c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001728f:	85 c0                	test   eax,eax
c0017291:	0f 84 00 01 00 00    	je     c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017297:	31 d2                	xor    edx,edx
c0017299:	55                   	push   ebp
c001729a:	52                   	push   edx
c001729b:	50                   	push   eax
c001729c:	56                   	push   esi
c001729d:	e8 10 85 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	85 c0                	test   eax,eax
c00172a7:	0f 85 ea 00 00 00    	jne    c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00172ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172b0:	83 ec 0c             	sub    esp,0xc
c00172b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00172b7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00172bb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00172bf:	0f af c2             	imul   eax,edx
c00172c2:	50                   	push   eax
c00172c3:	e8 5f 4c ff ff       	call   c000bf27 <malloc>
c00172c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00172cc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00172cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172d3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00172d7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00172db:	0f af c2             	imul   eax,edx
c00172de:	99                   	cdq    
c00172df:	52                   	push   edx
c00172e0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00172e2:	50                   	push   eax
c00172e3:	56                   	push   esi
c00172e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00172ea:	83 c4 20             	add    esp,0x20
c00172ed:	85 c0                	test   eax,eax
c00172ef:	0f 84 a2 00 00 00    	je     c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00172f5:	31 d2                	xor    edx,edx
c00172f7:	51                   	push   ecx
c00172f8:	52                   	push   edx
c00172f9:	50                   	push   eax
c00172fa:	56                   	push   esi
c00172fb:	e8 b2 84 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	85 c0                	test   eax,eax
c0017305:	0f 85 8c 00 00 00    	jne    c0017397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001730b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001730f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017313:	0f af c2             	imul   eax,edx
c0017316:	83 ec 0c             	sub    esp,0xc
c0017319:	31 ed                	xor    ebp,ebp
c001731b:	50                   	push   eax
c001731c:	e8 06 4c ff ff       	call   c000bf27 <malloc>
c0017321:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017325:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001732c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017330:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017334:	0f af c2             	imul   eax,edx
c0017337:	99                   	cdq    
c0017338:	52                   	push   edx
c0017339:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001733b:	50                   	push   eax
c001733c:	56                   	push   esi
c001733d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017340:	83 c4 20             	add    esp,0x20
c0017343:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001734b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001734f:	0f 86 80 00 00 00    	jbe    c00173d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017355:	0f b7 fd             	movzx  edi,bp
c0017358:	c1 e7 05             	shl    edi,0x5
c001735b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001735f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017362:	75 6b                	jne    c00173cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017364:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017367:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001736b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001736e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017372:	52                   	push   edx
c0017373:	31 d2                	xor    edx,edx
c0017375:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017378:	52                   	push   edx
c0017379:	50                   	push   eax
c001737a:	56                   	push   esi
c001737b:	e8 32 84 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017380:	83 c4 10             	add    esp,0x10
c0017383:	85 c0                	test   eax,eax
c0017385:	74 17                	je     c001739e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017387:	83 ec 0c             	sub    esp,0xc
c001738a:	68 51 27 02 c0       	push   0xc0022751
c001738f:	e8 c5 7d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017394:	83 c4 10             	add    esp,0x10
c0017397:	31 c0                	xor    eax,eax
c0017399:	e9 87 00 00 00       	jmp    c0017425 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001739e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00173a1:	83 ec 0c             	sub    esp,0xc
c00173a4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00173a7:	50                   	push   eax
c00173a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00173ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173b0:	56                   	push   esi
c00173b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00173b5:	e8 e6 fb ff ff       	call   c0016fa0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00173ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173be:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00173c2:	83 c4 20             	add    esp,0x20
c00173c5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00173c9:	73 04                	jae    c00173cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00173cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173cf:	45                   	inc    ebp
c00173d0:	e9 76 ff ff ff       	jmp    c001734b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00173d5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00173d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00173e1:	83 ec 0c             	sub    esp,0xc
c00173e4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00173ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00173ef:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00173f5:	05 00 10 00 00       	add    eax,0x1000
c00173fa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00173fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017401:	e8 31 4b ff ff       	call   c000bf37 <free>
c0017406:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017409:	e8 29 4b ff ff       	call   c000bf37 <free>
c001740e:	58                   	pop    eax
c001740f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017413:	e8 1f 4b ff ff       	call   c000bf37 <free>
c0017418:	89 34 24             	mov    DWORD PTR [esp],esi
c001741b:	e8 32 83 ff ff       	call   c000f752 <File::close()>
c0017420:	83 c4 10             	add    esp,0x10
c0017423:	b0 01                	mov    al,0x1
c0017425:	83 c4 3c             	add    esp,0x3c
c0017428:	5b                   	pop    ebx
c0017429:	5e                   	pop    esi
c001742a:	5f                   	pop    edi
c001742b:	5d                   	pop    ebp
c001742c:	c3                   	ret    

c001742d <Thr::runtimeReferenceHelper()>:
c001742d:	83 ec 18             	sub    esp,0x18
c0017430:	68 59 27 02 c0       	push   0xc0022759
c0017435:	e8 1f 7d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001743a:	fa                   	cli    
c001743b:	83 c4 10             	add    esp,0x10
c001743e:	eb fe                	jmp    c001743e <Thr::runtimeReferenceHelper()+0x11>

c0017440 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017440:	57                   	push   edi
c0017441:	56                   	push   esi
c0017442:	53                   	push   ebx
c0017443:	31 db                	xor    ebx,ebx
c0017445:	39 1d 80 56 02 c0    	cmp    DWORD PTR ds:0xc0025680,ebx
c001744b:	7e 3c                	jle    c0017489 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001744d:	8b 34 9d 00 56 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaa00]
c0017454:	31 ff                	xor    edi,edi
c0017456:	39 3c 9d 00 55 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdab00],edi
c001745d:	7e 27                	jle    c0017486 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001745f:	50                   	push   eax
c0017460:	50                   	push   eax
c0017461:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017465:	8b 06                	mov    eax,DWORD PTR [esi]
c0017467:	03 04 9d 80 55 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdaa80]
c001746e:	50                   	push   eax
c001746f:	e8 84 92 fe ff       	call   c00006f8 <strcmp>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	85 c0                	test   eax,eax
c0017479:	75 05                	jne    c0017480 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001747b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001747e:	eb 0b                	jmp    c001748b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017480:	83 c6 10             	add    esi,0x10
c0017483:	47                   	inc    edi
c0017484:	eb d0                	jmp    c0017456 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017486:	43                   	inc    ebx
c0017487:	eb bc                	jmp    c0017445 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017489:	31 c0                	xor    eax,eax
c001748b:	5b                   	pop    ebx
c001748c:	5e                   	pop    esi
c001748d:	5f                   	pop    edi
c001748e:	c3                   	ret    

c001748f <Thr::loadKernelSymbolTable(char const*)>:
c001748f:	55                   	push   ebp
c0017490:	57                   	push   edi
c0017491:	56                   	push   esi
c0017492:	53                   	push   ebx
c0017493:	83 ec 68             	sub    esp,0x68
c0017496:	8b 35 d4 56 02 c0    	mov    esi,DWORD PTR ds:0xc00256d4
c001749c:	68 14 01 00 00       	push   0x114
c00174a1:	e8 7e 7b ff ff       	call   c000f024 <operator new(unsigned long)>
c00174a6:	83 c4 0c             	add    esp,0xc
c00174a9:	89 c3                	mov    ebx,eax
c00174ab:	56                   	push   esi
c00174ac:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00174b0:	50                   	push   eax
c00174b1:	e8 da 81 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00174b6:	5e                   	pop    esi
c00174b7:	5f                   	pop    edi
c00174b8:	6a 01                	push   0x1
c00174ba:	53                   	push   ebx
c00174bb:	e8 34 82 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c00174c0:	83 c4 10             	add    esp,0x10
c00174c3:	31 d2                	xor    edx,edx
c00174c5:	85 c0                	test   eax,eax
c00174c7:	0f 85 79 02 00 00    	jne    c0017746 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00174cd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00174d5:	83 ec 0c             	sub    esp,0xc
c00174d8:	6a 34                	push   0x34
c00174da:	e8 48 4a ff ff       	call   c000bf27 <malloc>
c00174df:	59                   	pop    ecx
c00174e0:	89 c7                	mov    edi,eax
c00174e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174e4:	8d 74 24 34          	lea    esi,[esp+0x34]
c00174e8:	56                   	push   esi
c00174e9:	57                   	push   edi
c00174ea:	6a 00                	push   0x0
c00174ec:	6a 34                	push   0x34
c00174ee:	53                   	push   ebx
c00174ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174f2:	83 c4 20             	add    esp,0x20
c00174f5:	85 c0                	test   eax,eax
c00174f7:	74 17                	je     c0017510 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00174f9:	83 ec 0c             	sub    esp,0xc
c00174fc:	68 7b 27 02 c0       	push   0xc002277b
c0017501:	e8 48 e0 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	31 d2                	xor    edx,edx
c001750b:	e9 36 02 00 00       	jmp    c0017746 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017510:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017516:	75 e1                	jne    c00174f9 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017518:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001751b:	85 c0                	test   eax,eax
c001751d:	74 da                	je     c00174f9 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001751f:	52                   	push   edx
c0017520:	31 d2                	xor    edx,edx
c0017522:	52                   	push   edx
c0017523:	50                   	push   eax
c0017524:	53                   	push   ebx
c0017525:	e8 88 82 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001752a:	83 c4 10             	add    esp,0x10
c001752d:	85 c0                	test   eax,eax
c001752f:	75 c8                	jne    c00174f9 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017531:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017535:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017539:	0f af c2             	imul   eax,edx
c001753c:	83 ec 0c             	sub    esp,0xc
c001753f:	31 ed                	xor    ebp,ebp
c0017541:	50                   	push   eax
c0017542:	e8 e0 49 ff ff       	call   c000bf27 <malloc>
c0017547:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001754b:	89 34 24             	mov    DWORD PTR [esp],esi
c001754e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017552:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017556:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001755a:	0f af c2             	imul   eax,edx
c001755d:	99                   	cdq    
c001755e:	52                   	push   edx
c001755f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017561:	50                   	push   eax
c0017562:	53                   	push   ebx
c0017563:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017566:	83 c4 20             	add    esp,0x20
c0017569:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017571:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017579:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017581:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017589:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001758d:	0f 86 aa 00 00 00    	jbe    c001763d <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017593:	0f b7 f5             	movzx  esi,bp
c0017596:	6b f6 28             	imul   esi,esi,0x28
c0017599:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001759d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00175a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175a4:	50                   	push   eax
c00175a5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00175a9:	6b c0 28             	imul   eax,eax,0x28
c00175ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00175b0:	8b 16                	mov    edx,DWORD PTR [esi]
c00175b2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00175b6:	89 d0                	mov    eax,edx
c00175b8:	31 d2                	xor    edx,edx
c00175ba:	52                   	push   edx
c00175bb:	50                   	push   eax
c00175bc:	53                   	push   ebx
c00175bd:	e8 f0 81 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00175c2:	83 c4 0c             	add    esp,0xc
c00175c5:	6a 20                	push   0x20
c00175c7:	6a 00                	push   0x0
c00175c9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00175cd:	52                   	push   edx
c00175ce:	e8 35 90 fe ff       	call   c0000608 <memset>
c00175d3:	58                   	pop    eax
c00175d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175d6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00175da:	51                   	push   ecx
c00175db:	8d 54 24 40          	lea    edx,[esp+0x40]
c00175df:	52                   	push   edx
c00175e0:	6a 00                	push   0x0
c00175e2:	6a 1f                	push   0x1f
c00175e4:	53                   	push   ebx
c00175e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00175e8:	83 c4 18             	add    esp,0x18
c00175eb:	68 92 27 02 c0       	push   0xc0022792
c00175f0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00175f4:	52                   	push   edx
c00175f5:	e8 fe 90 fe ff       	call   c00006f8 <strcmp>
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	85 c0                	test   eax,eax
c00175ff:	75 0f                	jne    c0017610 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017601:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017604:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017608:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001760c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017610:	50                   	push   eax
c0017611:	50                   	push   eax
c0017612:	68 9a 27 02 c0       	push   0xc002279a
c0017617:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001761b:	50                   	push   eax
c001761c:	e8 d7 90 fe ff       	call   c00006f8 <strcmp>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	85 c0                	test   eax,eax
c0017626:	75 0f                	jne    c0017637 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017628:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001762b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001762f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017633:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017637:	45                   	inc    ebp
c0017638:	e9 4c ff ff ff       	jmp    c0017589 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001763d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017642:	75 10                	jne    c0017654 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017644:	83 ec 0c             	sub    esp,0xc
c0017647:	68 a2 27 02 c0       	push   0xc00227a2
c001764c:	e8 fd de ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017659:	75 10                	jne    c001766b <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001765b:	83 ec 0c             	sub    esp,0xc
c001765e:	68 a2 27 02 c0       	push   0xc00227a2
c0017663:	e8 e6 de ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017668:	83 c4 10             	add    esp,0x10
c001766b:	31 d2                	xor    edx,edx
c001766d:	50                   	push   eax
c001766e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017672:	52                   	push   edx
c0017673:	50                   	push   eax
c0017674:	53                   	push   ebx
c0017675:	e8 38 81 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001767a:	5a                   	pop    edx
c001767b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001767f:	e8 a3 48 ff ff       	call   c000bf27 <malloc>
c0017684:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001768c:	89 c1                	mov    ecx,eax
c001768e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017692:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017696:	5e                   	pop    esi
c0017697:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017699:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001769d:	55                   	push   ebp
c001769e:	51                   	push   ecx
c001769f:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00176a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176ab:	53                   	push   ebx
c00176ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00176af:	83 c4 14             	add    esp,0x14
c00176b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176b6:	e8 6c 48 ff ff       	call   c000bf27 <malloc>
c00176bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176be:	89 c6                	mov    esi,eax
c00176c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176c2:	56                   	push   esi
c00176c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176cb:	53                   	push   ebx
c00176cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00176cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176d3:	8b 15 80 56 02 c0    	mov    edx,DWORD PTR ds:0xc0025680
c00176d9:	c1 e8 04             	shr    eax,0x4
c00176dc:	83 c4 1c             	add    esp,0x1c
c00176df:	89 04 95 00 55 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab00],eax
c00176e6:	31 d2                	xor    edx,edx
c00176e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176ec:	52                   	push   edx
c00176ed:	50                   	push   eax
c00176ee:	53                   	push   ebx
c00176ef:	e8 be 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00176f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176f7:	31 d2                	xor    edx,edx
c00176f9:	56                   	push   esi
c00176fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176fe:	52                   	push   edx
c00176ff:	50                   	push   eax
c0017700:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017702:	53                   	push   ebx
c0017703:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017706:	83 c4 14             	add    esp,0x14
c0017709:	53                   	push   ebx
c001770a:	e8 43 80 ff ff       	call   c000f752 <File::close()>
c001770f:	5d                   	pop    ebp
c0017710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017714:	e8 1e 48 ff ff       	call   c000bf37 <free>
c0017719:	89 3c 24             	mov    DWORD PTR [esp],edi
c001771c:	e8 16 48 ff ff       	call   c000bf37 <free>
c0017721:	a1 80 56 02 c0       	mov    eax,ds:0xc0025680
c0017726:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001772a:	8d 50 01             	lea    edx,[eax+0x1]
c001772d:	89 15 80 56 02 c0    	mov    DWORD PTR ds:0xc0025680,edx
c0017733:	89 0c 85 00 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa00],ecx
c001773a:	89 34 85 80 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa80],esi
c0017741:	83 c4 10             	add    esp,0x10
c0017744:	b2 01                	mov    dl,0x1
c0017746:	83 c4 5c             	add    esp,0x5c
c0017749:	88 d0                	mov    al,dl
c001774b:	5b                   	pop    ebx
c001774c:	5e                   	pop    esi
c001774d:	5f                   	pop    edi
c001774e:	5d                   	pop    ebp
c001774f:	c3                   	ret    

c0017750 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017750:	55                   	push   ebp
c0017751:	57                   	push   edi
c0017752:	56                   	push   esi
c0017753:	53                   	push   ebx
c0017754:	81 ec 68 03 00 00    	sub    esp,0x368
c001775a:	8b 1d d4 56 02 c0    	mov    ebx,DWORD PTR ds:0xc00256d4
c0017760:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017767:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001776b:	68 14 01 00 00       	push   0x114
c0017770:	e8 af 78 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017775:	83 c4 0c             	add    esp,0xc
c0017778:	53                   	push   ebx
c0017779:	89 c7                	mov    edi,eax
c001777b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017782:	50                   	push   eax
c0017783:	e8 08 7f ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017788:	5e                   	pop    esi
c0017789:	5d                   	pop    ebp
c001778a:	6a 01                	push   0x1
c001778c:	57                   	push   edi
c001778d:	e8 62 7f ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	85 c0                	test   eax,eax
c0017797:	0f 85 10 07 00 00    	jne    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001779d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00177a5:	83 ec 0c             	sub    esp,0xc
c00177a8:	6a 34                	push   0x34
c00177aa:	e8 78 47 ff ff       	call   c000bf27 <malloc>
c00177af:	5b                   	pop    ebx
c00177b0:	89 c5                	mov    ebp,eax
c00177b2:	8b 07                	mov    eax,DWORD PTR [edi]
c00177b4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00177b8:	53                   	push   ebx
c00177b9:	55                   	push   ebp
c00177ba:	6a 00                	push   0x0
c00177bc:	6a 34                	push   0x34
c00177be:	57                   	push   edi
c00177bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177c2:	83 c4 20             	add    esp,0x20
c00177c5:	85 c0                	test   eax,eax
c00177c7:	0f 85 e0 06 00 00    	jne    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00177cd:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00177d4:	0f 85 d3 06 00 00    	jne    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00177da:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00177dd:	85 c0                	test   eax,eax
c00177df:	0f 84 c8 06 00 00    	je     c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00177e5:	31 d2                	xor    edx,edx
c00177e7:	51                   	push   ecx
c00177e8:	52                   	push   edx
c00177e9:	50                   	push   eax
c00177ea:	57                   	push   edi
c00177eb:	e8 c2 7f ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	85 c0                	test   eax,eax
c00177f5:	0f 85 b2 06 00 00    	jne    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00177fb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00177fe:	83 ec 0c             	sub    esp,0xc
c0017801:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017805:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017809:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001780d:	0f af c2             	imul   eax,edx
c0017810:	50                   	push   eax
c0017811:	e8 11 47 ff ff       	call   c000bf27 <malloc>
c0017816:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001781a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001781d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017821:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017825:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017829:	0f af c2             	imul   eax,edx
c001782c:	99                   	cdq    
c001782d:	52                   	push   edx
c001782e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017830:	50                   	push   eax
c0017831:	57                   	push   edi
c0017832:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017835:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017838:	83 c4 20             	add    esp,0x20
c001783b:	85 c0                	test   eax,eax
c001783d:	0f 84 6a 06 00 00    	je     c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017843:	52                   	push   edx
c0017844:	31 d2                	xor    edx,edx
c0017846:	52                   	push   edx
c0017847:	50                   	push   eax
c0017848:	57                   	push   edi
c0017849:	e8 64 7f ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	85 c0                	test   eax,eax
c0017853:	0f 85 54 06 00 00    	jne    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017859:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001785d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017861:	0f af c2             	imul   eax,edx
c0017864:	83 ec 0c             	sub    esp,0xc
c0017867:	31 f6                	xor    esi,esi
c0017869:	50                   	push   eax
c001786a:	e8 b8 46 ff ff       	call   c000bf27 <malloc>
c001786f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017876:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001787a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001787e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017882:	0f af c2             	imul   eax,edx
c0017885:	99                   	cdq    
c0017886:	52                   	push   edx
c0017887:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017889:	50                   	push   eax
c001788a:	57                   	push   edi
c001788b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001788e:	83 c4 20             	add    esp,0x20
c0017891:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017895:	0f 86 af 00 00 00    	jbe    c001794a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001789b:	0f b7 de             	movzx  ebx,si
c001789e:	c1 e3 05             	shl    ebx,0x5
c00178a1:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c00178a5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00178a8:	0f 85 96 00 00 00    	jne    c0017944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c00178ae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00178b1:	31 d2                	xor    edx,edx
c00178b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00178ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178be:	50                   	push   eax
c00178bf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00178c2:	52                   	push   edx
c00178c3:	50                   	push   eax
c00178c4:	57                   	push   edi
c00178c5:	e8 e8 7e ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00178ca:	83 c4 10             	add    esp,0x10
c00178cd:	85 c0                	test   eax,eax
c00178cf:	0f 85 d8 05 00 00    	jne    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00178d5:	52                   	push   edx
c00178d6:	52                   	push   edx
c00178d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178db:	68 bc 27 02 c0       	push   0xc00227bc
c00178e0:	e8 74 78 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00178e5:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c00178ec:	31 d2                	xor    edx,edx
c00178ee:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c00178f2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00178f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178fa:	59                   	pop    ecx
c00178fb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00178fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017904:	50                   	push   eax
c0017905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017909:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001790d:	52                   	push   edx
c001790e:	50                   	push   eax
c001790f:	57                   	push   edi
c0017910:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017913:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017916:	83 c4 18             	add    esp,0x18
c0017919:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001791c:	50                   	push   eax
c001791d:	68 e0 27 02 c0       	push   0xc00227e0
c0017922:	e8 32 78 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017927:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001792a:	83 c4 0c             	add    esp,0xc
c001792d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017930:	50                   	push   eax
c0017931:	6a 00                	push   0x0
c0017933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017937:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001793b:	50                   	push   eax
c001793c:	e8 c7 8c fe ff       	call   c0000608 <memset>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	46                   	inc    esi
c0017945:	e9 47 ff ff ff       	jmp    c0017891 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001794a:	50                   	push   eax
c001794b:	31 db                	xor    ebx,ebx
c001794d:	68 00 01 00 00       	push   0x100
c0017952:	6a 00                	push   0x0
c0017954:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017958:	50                   	push   eax
c0017959:	e8 aa 8c fe ff       	call   c0000608 <memset>
c001795e:	83 c4 0c             	add    esp,0xc
c0017961:	68 00 01 00 00       	push   0x100
c0017966:	6a 00                	push   0x0
c0017968:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001796f:	50                   	push   eax
c0017970:	e8 93 8c fe ff       	call   c0000608 <memset>
c0017975:	83 c4 10             	add    esp,0x10
c0017978:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017980:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017988:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017990:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017998:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00179a0:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c00179a4:	0f 86 2f 01 00 00    	jbe    c0017ad9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c00179aa:	0f b7 f3             	movzx  esi,bx
c00179ad:	6b f6 28             	imul   esi,esi,0x28
c00179b0:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00179b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00179b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179bb:	50                   	push   eax
c00179bc:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00179c0:	6b d2 28             	imul   edx,edx,0x28
c00179c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00179c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00179c9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00179cd:	31 d2                	xor    edx,edx
c00179cf:	52                   	push   edx
c00179d0:	50                   	push   eax
c00179d1:	57                   	push   edi
c00179d2:	e8 db 7d ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00179d7:	83 c4 0c             	add    esp,0xc
c00179da:	6a 20                	push   0x20
c00179dc:	6a 00                	push   0x0
c00179de:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00179e5:	51                   	push   ecx
c00179e6:	e8 1d 8c fe ff       	call   c0000608 <memset>
c00179eb:	58                   	pop    eax
c00179ec:	8b 07                	mov    eax,DWORD PTR [edi]
c00179ee:	8d 54 24 58          	lea    edx,[esp+0x58]
c00179f2:	52                   	push   edx
c00179f3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00179fa:	51                   	push   ecx
c00179fb:	6a 00                	push   0x0
c00179fd:	6a 1f                	push   0x1f
c00179ff:	57                   	push   edi
c0017a00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a03:	83 c4 1c             	add    esp,0x1c
c0017a06:	6a 09                	push   0x9
c0017a08:	68 fd 27 02 c0       	push   0xc00227fd
c0017a0d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017a14:	51                   	push   ecx
c0017a15:	e8 55 8b fe ff       	call   c000056f <memcmp>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	85 c0                	test   eax,eax
c0017a1f:	75 21                	jne    c0017a42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017a2d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017a31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a34:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017a3b:	89 c8                	mov    eax,ecx
c0017a3d:	40                   	inc    eax
c0017a3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a42:	50                   	push   eax
c0017a43:	6a 09                	push   0x9
c0017a45:	68 07 28 02 c0       	push   0xc0022807
c0017a4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a51:	50                   	push   eax
c0017a52:	e8 18 8b fe ff       	call   c000056f <memcmp>
c0017a57:	83 c4 10             	add    esp,0x10
c0017a5a:	85 c0                	test   eax,eax
c0017a5c:	75 21                	jne    c0017a7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a66:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017a6a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017a6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a71:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017a78:	89 c8                	mov    eax,ecx
c0017a7a:	40                   	inc    eax
c0017a7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a7f:	50                   	push   eax
c0017a80:	50                   	push   eax
c0017a81:	68 92 27 02 c0       	push   0xc0022792
c0017a86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a8d:	50                   	push   eax
c0017a8e:	e8 65 8c fe ff       	call   c00006f8 <strcmp>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	85 c0                	test   eax,eax
c0017a98:	75 0f                	jne    c0017aa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017a9a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017aa5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017aa9:	50                   	push   eax
c0017aaa:	50                   	push   eax
c0017aab:	68 9a 27 02 c0       	push   0xc002279a
c0017ab0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ab7:	50                   	push   eax
c0017ab8:	e8 3b 8c fe ff       	call   c00006f8 <strcmp>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	85 c0                	test   eax,eax
c0017ac2:	75 0f                	jne    c0017ad3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017ac4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ac7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017acf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ad3:	43                   	inc    ebx
c0017ad4:	e9 c7 fe ff ff       	jmp    c00179a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017ad9:	31 d2                	xor    edx,edx
c0017adb:	50                   	push   eax
c0017adc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ae0:	52                   	push   edx
c0017ae1:	50                   	push   eax
c0017ae2:	57                   	push   edi
c0017ae3:	e8 ca 7c ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017ae8:	5a                   	pop    edx
c0017ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aed:	e8 35 44 ff ff       	call   c000bf27 <malloc>
c0017af2:	31 d2                	xor    edx,edx
c0017af4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017af8:	59                   	pop    ecx
c0017af9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017afb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017aff:	53                   	push   ebx
c0017b00:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b08:	52                   	push   edx
c0017b09:	50                   	push   eax
c0017b0a:	57                   	push   edi
c0017b0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b0e:	83 c4 14             	add    esp,0x14
c0017b11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b15:	e8 0d 44 ff ff       	call   c000bf27 <malloc>
c0017b1a:	31 d2                	xor    edx,edx
c0017b1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b20:	83 c4 0c             	add    esp,0xc
c0017b23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b27:	52                   	push   edx
c0017b28:	50                   	push   eax
c0017b29:	57                   	push   edi
c0017b2a:	e8 83 7c ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017b2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b32:	31 d2                	xor    edx,edx
c0017b34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b3c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b3e:	52                   	push   edx
c0017b3f:	50                   	push   eax
c0017b40:	57                   	push   edi
c0017b41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b44:	83 c4 20             	add    esp,0x20
c0017b47:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017b4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b53:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017b57:	0f 84 54 03 00 00    	je     c0017eb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017b5d:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017b64:	31 d2                	xor    edx,edx
c0017b66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b6a:	c1 e8 03             	shr    eax,0x3
c0017b6d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b71:	50                   	push   eax
c0017b72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b76:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017b7a:	52                   	push   edx
c0017b7b:	50                   	push   eax
c0017b7c:	57                   	push   edi
c0017b7d:	e8 30 7c ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017b82:	58                   	pop    eax
c0017b83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b87:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017b8e:	e8 94 43 ff ff       	call   c000bf27 <malloc>
c0017b93:	31 d2                	xor    edx,edx
c0017b95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b99:	58                   	pop    eax
c0017b9a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b9c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017ba0:	50                   	push   eax
c0017ba1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ba5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ba9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017bb0:	52                   	push   edx
c0017bb1:	50                   	push   eax
c0017bb2:	57                   	push   edi
c0017bb3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bb6:	83 c4 20             	add    esp,0x20
c0017bb9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017bc1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017bc5:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017bc9:	0f 8d c6 02 00 00    	jge    c0017e95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017bcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bd7:	31 db                	xor    ebx,ebx
c0017bd9:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017bdc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017be0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017be4:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017be8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bec:	c1 e8 08             	shr    eax,0x8
c0017bef:	89 c6                	mov    esi,eax
c0017bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bf5:	c1 e6 04             	shl    esi,0x4
c0017bf8:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017bfc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017bff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c03:	85 c0                	test   eax,eax
c0017c05:	0f 85 17 01 00 00    	jne    c0017d22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017c0b:	83 ec 0c             	sub    esp,0xc
c0017c0e:	b3 01                	mov    bl,0x1
c0017c10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c14:	03 06                	add    eax,DWORD PTR [esi]
c0017c16:	50                   	push   eax
c0017c17:	e8 24 f8 ff ff       	call   c0017440 <Thr::getAddressOfKernelSymbol(char const*)>
c0017c1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c20:	83 c4 10             	add    esp,0x10
c0017c23:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017c28:	0f 85 f4 00 00 00    	jne    c0017d22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017c2e:	50                   	push   eax
c0017c2f:	50                   	push   eax
c0017c30:	68 11 28 02 c0       	push   0xc0022811
c0017c35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c39:	03 06                	add    eax,DWORD PTR [esi]
c0017c3b:	50                   	push   eax
c0017c3c:	e8 b7 8a fe ff       	call   c00006f8 <strcmp>
c0017c41:	83 c4 10             	add    esp,0x10
c0017c44:	85 c0                	test   eax,eax
c0017c46:	75 0a                	jne    c0017c52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017c48:	b8 1c f0 01 c0       	mov    eax,0xc001f01c
c0017c4d:	e9 ca 00 00 00       	jmp    c0017d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017c52:	50                   	push   eax
c0017c53:	50                   	push   eax
c0017c54:	68 1b 28 02 c0       	push   0xc002281b
c0017c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c5d:	03 06                	add    eax,DWORD PTR [esi]
c0017c5f:	50                   	push   eax
c0017c60:	e8 93 8a fe ff       	call   c00006f8 <strcmp>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	85 c0                	test   eax,eax
c0017c6a:	75 0a                	jne    c0017c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017c6c:	b8 50 ed 01 c0       	mov    eax,0xc001ed50
c0017c71:	e9 a6 00 00 00       	jmp    c0017d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017c76:	53                   	push   ebx
c0017c77:	53                   	push   ebx
c0017c78:	68 24 28 02 c0       	push   0xc0022824
c0017c7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c81:	03 06                	add    eax,DWORD PTR [esi]
c0017c83:	50                   	push   eax
c0017c84:	e8 6f 8a fe ff       	call   c00006f8 <strcmp>
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	85 c0                	test   eax,eax
c0017c8e:	75 0a                	jne    c0017c9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017c90:	b8 1c f1 01 c0       	mov    eax,0xc001f11c
c0017c95:	e9 82 00 00 00       	jmp    c0017d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017c9a:	51                   	push   ecx
c0017c9b:	51                   	push   ecx
c0017c9c:	68 2e 28 02 c0       	push   0xc002282e
c0017ca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ca5:	03 06                	add    eax,DWORD PTR [esi]
c0017ca7:	50                   	push   eax
c0017ca8:	e8 4b 8a fe ff       	call   c00006f8 <strcmp>
c0017cad:	83 c4 10             	add    esp,0x10
c0017cb0:	85 c0                	test   eax,eax
c0017cb2:	74 63                	je     c0017d17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017cb4:	50                   	push   eax
c0017cb5:	50                   	push   eax
c0017cb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cba:	03 06                	add    eax,DWORD PTR [esi]
c0017cbc:	50                   	push   eax
c0017cbd:	68 37 28 02 c0       	push   0xc0022837
c0017cc2:	e8 92 74 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017cc7:	58                   	pop    eax
c0017cc8:	5a                   	pop    edx
c0017cc9:	68 51 28 02 c0       	push   0xc0022851
c0017cce:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017cd5:	53                   	push   ebx
c0017cd6:	e8 cc 89 fe ff       	call   c00006a7 <strcpy>
c0017cdb:	59                   	pop    ecx
c0017cdc:	58                   	pop    eax
c0017cdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ce1:	03 06                	add    eax,DWORD PTR [esi]
c0017ce3:	50                   	push   eax
c0017ce4:	53                   	push   ebx
c0017ce5:	e8 74 8a fe ff       	call   c000075e <strcat>
c0017cea:	58                   	pop    eax
c0017ceb:	5a                   	pop    edx
c0017cec:	68 e7 28 02 c0       	push   0xc00228e7
c0017cf1:	53                   	push   ebx
c0017cf2:	e8 67 8a fe ff       	call   c000075e <strcat>
c0017cf7:	83 c4 10             	add    esp,0x10
c0017cfa:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017cff:	0f 84 4b 01 00 00    	je     c0017e50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017d05:	83 ec 0c             	sub    esp,0xc
c0017d08:	53                   	push   ebx
c0017d09:	e8 40 d8 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017d0e:	83 c4 10             	add    esp,0x10
c0017d11:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017d15:	eb 0b                	jmp    c0017d22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017d17:	b8 9c ee 01 c0       	mov    eax,0xc001ee9c
c0017d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d20:	b3 01                	mov    bl,0x1
c0017d22:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017d27:	0f 85 80 00 00 00    	jne    c0017dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0017d2d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017d34:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017d38:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017d3c:	01 ce                	add    esi,ecx
c0017d3e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017d46:	0f 94 c2             	sete   dl
c0017d49:	8b 06                	mov    eax,DWORD PTR [esi]
c0017d4b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017d53:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017d58:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017d5c:	84 db                	test   bl,bl
c0017d5e:	74 31                	je     c0017d91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0017d60:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d64:	01 c3                	add    ebx,eax
c0017d66:	84 d2                	test   dl,dl
c0017d68:	75 0a                	jne    c0017d74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0017d6a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d6e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017d72:	76 32                	jbe    c0017da6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017d74:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017d79:	0f 84 d1 00 00 00    	je     c0017e50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017d7f:	83 ec 0c             	sub    esp,0xc
c0017d82:	68 68 28 02 c0       	push   0xc0022868
c0017d87:	e8 c2 d7 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	eb 15                	jmp    c0017da6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017d91:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0017d94:	84 d2                	test   dl,dl
c0017d96:	75 0e                	jne    c0017da6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017d98:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d9c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017da0:	77 04                	ja     c0017da6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017da2:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017da6:	89 1e                	mov    DWORD PTR [esi],ebx
c0017da8:	e9 df 00 00 00       	jmp    c0017e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017dad:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017db2:	75 6e                	jne    c0017e22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c0017db4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017dbb:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017dbf:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017dc3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017dcb:	74 17                	je     c0017de4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017dcd:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017dd5:	74 0d                	je     c0017de4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017dd7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017ddb:	83 e8 04             	sub    eax,0x4
c0017dde:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017de2:	76 17                	jbe    c0017dfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017de4:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017de9:	74 65                	je     c0017e50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017deb:	83 ec 0c             	sub    esp,0xc
c0017dee:	68 84 28 02 c0       	push   0xc0022884
c0017df3:	e8 56 d7 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	8b 16                	mov    edx,DWORD PTR [esi]
c0017dfd:	84 db                	test   bl,bl
c0017dff:	74 13                	je     c0017e14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0017e01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e05:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017e0c:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017e10:	01 d0                	add    eax,edx
c0017e12:	eb 06                	jmp    c0017e1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0017e14:	89 d0                	mov    eax,edx
c0017e16:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017e1a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017e1e:	89 06                	mov    DWORD PTR [esi],eax
c0017e20:	eb 6a                	jmp    c0017e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017e22:	50                   	push   eax
c0017e23:	50                   	push   eax
c0017e24:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e29:	50                   	push   eax
c0017e2a:	68 a0 28 02 c0       	push   0xc00228a0
c0017e2f:	e8 25 73 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017e3c:	74 12                	je     c0017e50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017e3e:	83 ec 0c             	sub    esp,0xc
c0017e41:	68 ab 28 02 c0       	push   0xc00228ab
c0017e46:	e8 03 d7 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0017e4b:	83 c4 10             	add    esp,0x10
c0017e4e:	eb 3c                	jmp    c0017e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017e50:	83 ec 0c             	sub    esp,0xc
c0017e53:	57                   	push   edi
c0017e54:	e8 f9 78 ff ff       	call   c000f752 <File::close()>
c0017e59:	8b 07                	mov    eax,DWORD PTR [edi]
c0017e5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017e5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e61:	59                   	pop    ecx
c0017e62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e66:	e8 cc 40 ff ff       	call   c000bf37 <free>
c0017e6b:	5b                   	pop    ebx
c0017e6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e70:	e8 c2 40 ff ff       	call   c000bf37 <free>
c0017e75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017e78:	e8 ba 40 ff ff       	call   c000bf37 <free>
c0017e7d:	5e                   	pop    esi
c0017e7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e82:	e8 b0 40 ff ff       	call   c000bf37 <free>
c0017e87:	83 c4 10             	add    esp,0x10
c0017e8a:	eb 21                	jmp    c0017ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017e8c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017e90:	e9 2c fd ff ff       	jmp    c0017bc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0017e95:	83 ec 0c             	sub    esp,0xc
c0017e98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e9c:	e8 96 40 ff ff       	call   c000bf37 <free>
c0017ea1:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017ea5:	83 c4 10             	add    esp,0x10
c0017ea8:	e9 a2 fc ff ff       	jmp    c0017b4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0017ead:	31 c0                	xor    eax,eax
c0017eaf:	eb 32                	jmp    c0017ee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0017eb1:	83 ec 0c             	sub    esp,0xc
c0017eb4:	57                   	push   edi
c0017eb5:	e8 98 78 ff ff       	call   c000f752 <File::close()>
c0017eba:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017ebf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ec2:	58                   	pop    eax
c0017ec3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ec7:	e8 6b 40 ff ff       	call   c000bf37 <free>
c0017ecc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ecf:	e8 63 40 ff ff       	call   c000bf37 <free>
c0017ed4:	5a                   	pop    edx
c0017ed5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017ed9:	e8 59 40 ff ff       	call   c000bf37 <free>
c0017ede:	83 c4 10             	add    esp,0x10
c0017ee1:	b0 01                	mov    al,0x1
c0017ee3:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017ee9:	5b                   	pop    ebx
c0017eea:	5e                   	pop    esi
c0017eeb:	5f                   	pop    edi
c0017eec:	5d                   	pop    ebp
c0017eed:	c3                   	ret    

c0017eee <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017eee:	56                   	push   esi
c0017eef:	31 d2                	xor    edx,edx
c0017ef1:	53                   	push   ebx
c0017ef2:	8b 1d e0 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ee0
c0017ef8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017efc:	39 d3                	cmp    ebx,edx
c0017efe:	7e 1b                	jle    c0017f1b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017f00:	8b 04 95 00 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaf00]
c0017f07:	39 c8                	cmp    eax,ecx
c0017f09:	77 0d                	ja     c0017f18 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017f0b:	8b 34 95 00 4f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb100]
c0017f12:	01 c6                	add    esi,eax
c0017f14:	39 ce                	cmp    esi,ecx
c0017f16:	77 05                	ja     c0017f1d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017f18:	42                   	inc    edx
c0017f19:	eb e1                	jmp    c0017efc <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017f1b:	31 c0                	xor    eax,eax
c0017f1d:	5b                   	pop    ebx
c0017f1e:	5e                   	pop    esi
c0017f1f:	c3                   	ret    

c0017f20 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017f20:	53                   	push   ebx
c0017f21:	31 c0                	xor    eax,eax
c0017f23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017f27:	8b 1d e0 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ee0
c0017f2d:	39 c3                	cmp    ebx,eax
c0017f2f:	7e 22                	jle    c0017f53 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017f31:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c0017f38:	39 ca                	cmp    edx,ecx
c0017f3a:	77 14                	ja     c0017f50 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017f3c:	03 14 85 00 4f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb100]
c0017f43:	39 ca                	cmp    edx,ecx
c0017f45:	76 09                	jbe    c0017f50 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017f47:	8b 04 85 00 53 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad00]
c0017f4e:	eb 05                	jmp    c0017f55 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017f50:	40                   	inc    eax
c0017f51:	eb da                	jmp    c0017f2d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017f53:	31 c0                	xor    eax,eax
c0017f55:	5b                   	pop    ebx
c0017f56:	c3                   	ret    

c0017f57 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017f57:	53                   	push   ebx
c0017f58:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017f5c:	53                   	push   ebx
c0017f5d:	e8 8c ff ff ff       	call   c0017eee <Thr::getDriverBaseFromAddress(unsigned long)>
c0017f62:	5a                   	pop    edx
c0017f63:	31 d2                	xor    edx,edx
c0017f65:	85 c0                	test   eax,eax
c0017f67:	74 04                	je     c0017f6d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017f69:	89 da                	mov    edx,ebx
c0017f6b:	29 c2                	sub    edx,eax
c0017f6d:	89 d0                	mov    eax,edx
c0017f6f:	5b                   	pop    ebx
c0017f70:	c3                   	ret    

c0017f71 <Thr::loadDLL(char const*, bool)>:
c0017f71:	55                   	push   ebp
c0017f72:	57                   	push   edi
c0017f73:	56                   	push   esi
c0017f74:	53                   	push   ebx
c0017f75:	81 ec 34 01 00 00    	sub    esp,0x134
c0017f7b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017f82:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0017f89:	56                   	push   esi
c0017f8a:	68 c3 28 02 c0       	push   0xc00228c3
c0017f8f:	e8 c5 71 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017f94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017f9b:	e8 84 70 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017fa0:	83 c4 0c             	add    esp,0xc
c0017fa3:	89 c3                	mov    ebx,eax
c0017fa5:	ff 35 d4 56 02 c0    	push   DWORD PTR ds:0xc00256d4
c0017fab:	56                   	push   esi
c0017fac:	50                   	push   eax
c0017fad:	e8 de 76 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017fb2:	83 c4 0c             	add    esp,0xc
c0017fb5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017fb9:	50                   	push   eax
c0017fba:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017fbe:	50                   	push   eax
c0017fbf:	53                   	push   ebx
c0017fc0:	e8 db 79 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0017fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017fca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017fd5:	75 0a                	jne    c0017fe1 <Thr::loadDLL(char const*, bool)+0x70>
c0017fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fdb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017fdf:	75 3c                	jne    c001801d <Thr::loadDLL(char const*, bool)+0xac>
c0017fe1:	89 e8                	mov    eax,ebp
c0017fe3:	84 c0                	test   al,al
c0017fe5:	0f 84 3d 01 00 00    	je     c0018128 <Thr::loadDLL(char const*, bool)+0x1b7>
c0017feb:	50                   	push   eax
c0017fec:	50                   	push   eax
c0017fed:	68 d4 28 02 c0       	push   0xc00228d4
c0017ff2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017ff6:	53                   	push   ebx
c0017ff7:	e8 ab 86 fe ff       	call   c00006a7 <strcpy>
c0017ffc:	58                   	pop    eax
c0017ffd:	5a                   	pop    edx
c0017ffe:	56                   	push   esi
c0017fff:	53                   	push   ebx
c0018000:	e8 59 87 fe ff       	call   c000075e <strcat>
c0018005:	59                   	pop    ecx
c0018006:	5f                   	pop    edi
c0018007:	68 e7 28 02 c0       	push   0xc00228e7
c001800c:	53                   	push   ebx
c001800d:	e8 4c 87 fe ff       	call   c000075e <strcat>
c0018012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018015:	e8 34 d5 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001801a:	83 c4 10             	add    esp,0x10
c001801d:	e8 a9 62 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0018022:	51                   	push   ecx
c0018023:	6a 03                	push   0x3
c0018025:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018029:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001802d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018033:	83 d3 00             	adc    ebx,0x0
c0018036:	89 ca                	mov    edx,ecx
c0018038:	89 d1                	mov    ecx,edx
c001803a:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001803e:	51                   	push   ecx
c001803f:	50                   	push   eax
c0018040:	e8 c7 68 ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c0018045:	89 34 24             	mov    DWORD PTR [esp],esi
c0018048:	89 c3                	mov    ebx,eax
c001804a:	e8 d6 85 fe ff       	call   c0000625 <strlen>
c001804f:	8b 3d e0 4e 02 c0    	mov    edi,DWORD PTR ds:0xc0024ee0
c0018055:	40                   	inc    eax
c0018056:	89 04 24             	mov    DWORD PTR [esp],eax
c0018059:	e8 c9 3e ff ff       	call   c000bf27 <malloc>
c001805e:	89 04 bd 00 53 02 c0 	mov    DWORD PTR [edi*4-0x3ffdad00],eax
c0018065:	5f                   	pop    edi
c0018066:	58                   	pop    eax
c0018067:	a1 e0 4e 02 c0       	mov    eax,ds:0xc0024ee0
c001806c:	56                   	push   esi
c001806d:	ff 34 85 00 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdad00]
c0018074:	e8 2e 86 fe ff       	call   c00006a7 <strcpy>
c0018079:	a1 e0 4e 02 c0       	mov    eax,ds:0xc0024ee0
c001807e:	8d 50 01             	lea    edx,[eax+0x1]
c0018081:	89 1c 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],ebx
c0018088:	89 15 e0 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee0,edx
c001808e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018092:	83 c4 0c             	add    esp,0xc
c0018095:	89 14 85 00 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb100],edx
c001809c:	6a 01                	push   0x1
c001809e:	53                   	push   ebx
c001809f:	56                   	push   esi
c00180a0:	e8 ab f6 ff ff       	call   c0017750 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00180a5:	83 c4 10             	add    esp,0x10
c00180a8:	89 c7                	mov    edi,eax
c00180aa:	fe c8                	dec    al
c00180ac:	74 16                	je     c00180c4 <Thr::loadDLL(char const*, bool)+0x153>
c00180ae:	89 e8                	mov    eax,ebp
c00180b0:	84 c0                	test   al,al
c00180b2:	74 10                	je     c00180c4 <Thr::loadDLL(char const*, bool)+0x153>
c00180b4:	83 ec 0c             	sub    esp,0xc
c00180b7:	68 e9 28 02 c0       	push   0xc00228e9
c00180bc:	e8 8d d4 ff ff       	call   c001554e <Krnl::panic(char const*)>
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	31 f6                	xor    esi,esi
c00180c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180ce:	05 ff 0f 00 00       	add    eax,0xfff
c00180d3:	83 d2 00             	adc    edx,0x0
c00180d6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00180da:	c1 ea 0c             	shr    edx,0xc
c00180dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00180e5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00180e9:	ba 00 00 00 00       	mov    edx,0x0
c00180ee:	89 d0                	mov    eax,edx
c00180f0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00180f4:	73 2c                	jae    c0018122 <Thr::loadDLL(char const*, bool)+0x1b1>
c00180f6:	e8 d0 61 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00180fb:	89 f5                	mov    ebp,esi
c00180fd:	c1 e5 0c             	shl    ebp,0xc
c0018100:	52                   	push   edx
c0018101:	52                   	push   edx
c0018102:	01 dd                	add    ebp,ebx
c0018104:	55                   	push   ebp
c0018105:	50                   	push   eax
c0018106:	e8 61 63 ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018111:	75 0c                	jne    c001811f <Thr::loadDLL(char const*, bool)+0x1ae>
c0018113:	83 ec 0c             	sub    esp,0xc
c0018116:	55                   	push   ebp
c0018117:	e8 54 43 ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c001811c:	83 c4 10             	add    esp,0x10
c001811f:	46                   	inc    esi
c0018120:	eb a4                	jmp    c00180c6 <Thr::loadDLL(char const*, bool)+0x155>
c0018122:	89 f8                	mov    eax,edi
c0018124:	84 c0                	test   al,al
c0018126:	75 02                	jne    c001812a <Thr::loadDLL(char const*, bool)+0x1b9>
c0018128:	31 db                	xor    ebx,ebx
c001812a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018130:	89 d8                	mov    eax,ebx
c0018132:	5b                   	pop    ebx
c0018133:	5e                   	pop    esi
c0018134:	5f                   	pop    edi
c0018135:	5d                   	pop    ebp
c0018136:	c3                   	ret    

c0018137 <Thr::executeDLL(unsigned long, void*)>:
c0018137:	56                   	push   esi
c0018138:	53                   	push   ebx
c0018139:	51                   	push   ecx
c001813a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001813e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018142:	85 db                	test   ebx,ebx
c0018144:	75 10                	jne    c0018156 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018146:	83 ec 0c             	sub    esp,0xc
c0018149:	68 08 29 02 c0       	push   0xc0022908
c001814e:	e8 fb d3 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0018153:	83 c4 10             	add    esp,0x10
c0018156:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001815a:	5a                   	pop    edx
c001815b:	89 d8                	mov    eax,ebx
c001815d:	5b                   	pop    ebx
c001815e:	5e                   	pop    esi
c001815f:	ff e0                	jmp    eax
c0018161:	90                   	nop

c0018162 <changeTSS>:
c0018162:	83 ec 0c             	sub    esp,0xc
c0018165:	e8 78 c2 ff ff       	call   c00143e2 <thisCPU()>
c001816a:	52                   	push   edx
c001816b:	05 7c 11 00 00       	add    eax,0x117c
c0018170:	52                   	push   edx
c0018171:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018177:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001817a:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001817f:	c1 e1 15             	shl    ecx,0x15
c0018182:	29 ca                	sub    edx,ecx
c0018184:	52                   	push   edx
c0018185:	50                   	push   eax
c0018186:	e8 8d 58 ff ff       	call   c000da18 <TSS::setESP(unsigned long)>
c001818b:	83 c4 1c             	add    esp,0x1c
c001818e:	c3                   	ret    
c001818f:	90                   	nop

c0018190 <Process::addArgs(char**)>:
c0018190:	57                   	push   edi
c0018191:	56                   	push   esi
c0018192:	53                   	push   ebx
c0018193:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018197:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001819b:	85 ff                	test   edi,edi
c001819d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00181a7:	74 45                	je     c00181ee <Process::addArgs(char**)+0x5e>
c00181a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00181ab:	85 c0                	test   eax,eax
c00181ad:	74 3f                	je     c00181ee <Process::addArgs(char**)+0x5e>
c00181af:	31 db                	xor    ebx,ebx
c00181b1:	83 ec 0c             	sub    esp,0xc
c00181b4:	50                   	push   eax
c00181b5:	e8 6b 84 fe ff       	call   c0000625 <strlen>
c00181ba:	40                   	inc    eax
c00181bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00181be:	e8 64 3d ff ff       	call   c000bf27 <malloc>
c00181c3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00181ca:	5a                   	pop    edx
c00181cb:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00181ce:	59                   	pop    ecx
c00181cf:	43                   	inc    ebx
c00181d0:	52                   	push   edx
c00181d1:	50                   	push   eax
c00181d2:	e8 d0 84 fe ff       	call   c00006a7 <strcpy>
c00181d7:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00181dd:	83 c4 10             	add    esp,0x10
c00181e0:	41                   	inc    ecx
c00181e1:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00181e7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00181ea:	85 c0                	test   eax,eax
c00181ec:	75 c3                	jne    c00181b1 <Process::addArgs(char**)+0x21>
c00181ee:	5b                   	pop    ebx
c00181ef:	5e                   	pop    esi
c00181f0:	5f                   	pop    edi
c00181f1:	c3                   	ret    

c00181f2 <Process::Process(char const*, Process*, char**)>:
c00181f2:	56                   	push   esi
c00181f3:	53                   	push   ebx
c00181f4:	83 ec 14             	sub    esp,0x14
c00181f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181fb:	05 0c 02 00 00       	add    eax,0x20c
c0018200:	bb 07 00 00 00       	mov    ebx,0x7
c0018205:	89 c6                	mov    esi,eax
c0018207:	85 db                	test   ebx,ebx
c0018209:	78 12                	js     c001821d <Process::Process(char const*, Process*, char**)+0x2b>
c001820b:	83 ec 0c             	sub    esp,0xc
c001820e:	56                   	push   esi
c001820f:	e8 56 77 00 00       	call   c001f96a <ThreadControlBlock::ThreadControlBlock()>
c0018214:	83 c4 10             	add    esp,0x10
c0018217:	83 c6 63             	add    esi,0x63
c001821a:	4b                   	dec    ebx
c001821b:	eb ea                	jmp    c0018207 <Process::Process(char const*, Process*, char**)+0x15>
c001821d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018221:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001822c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018235:	a1 a4 3c 02 c0       	mov    eax,ds:0xc0023ca4
c001823a:	8d 50 01             	lea    edx,[eax+0x1]
c001823d:	89 15 a4 3c 02 c0    	mov    DWORD PTR ds:0xc0023ca4,edx
c0018243:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018247:	89 02                	mov    DWORD PTR [edx],eax
c0018249:	83 ec 0c             	sub    esp,0xc
c001824c:	6a 10                	push   0x10
c001824e:	e8 d1 6d ff ff       	call   c000f024 <operator new(unsigned long)>
c0018253:	83 c4 10             	add    esp,0x10
c0018256:	89 c3                	mov    ebx,eax
c0018258:	83 ec 08             	sub    esp,0x8
c001825b:	6a 00                	push   0x0
c001825d:	53                   	push   ebx
c001825e:	e8 55 6a ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c0018263:	83 c4 10             	add    esp,0x10
c0018266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001826a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018274:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001827e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018282:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018286:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001828c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018290:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018296:	85 c0                	test   eax,eax
c0018298:	74 42                	je     c00182dc <Process::Process(char const*, Process*, char**)+0xea>
c001829a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001829e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00182a4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00182aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ae:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00182b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182b8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00182be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00182c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c8:	05 0c 01 00 00       	add    eax,0x10c
c00182cd:	83 ec 08             	sub    esp,0x8
c00182d0:	52                   	push   edx
c00182d1:	50                   	push   eax
c00182d2:	e8 d0 83 fe ff       	call   c00006a7 <strcpy>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	eb 5c                	jmp    c0018338 <Process::Process(char const*, Process*, char**)+0x146>
c00182dc:	83 ec 0c             	sub    esp,0xc
c00182df:	68 60 12 00 00       	push   0x1260
c00182e4:	e8 3b 6d ff ff       	call   c000f024 <operator new(unsigned long)>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	89 c3                	mov    ebx,eax
c00182ee:	83 ec 08             	sub    esp,0x8
c00182f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182f5:	53                   	push   ebx
c00182f6:	e8 1b 54 ff ff       	call   c000d716 <VgaText::VgaText(char const*)>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018302:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001830c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018312:	83 ec 0c             	sub    esp,0xc
c0018315:	50                   	push   eax
c0018316:	e8 fa 47 ff ff       	call   c000cb15 <addToTerminalCycle(VgaText*)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018322:	05 0c 01 00 00       	add    eax,0x10c
c0018327:	83 ec 08             	sub    esp,0x8
c001832a:	68 32 29 02 c0       	push   0xc0022932
c001832f:	50                   	push   eax
c0018330:	e8 72 83 fe ff       	call   c00006a7 <strcpy>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833c:	83 c0 0c             	add    eax,0xc
c001833f:	83 ec 08             	sub    esp,0x8
c0018342:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018346:	50                   	push   eax
c0018347:	e8 5b 83 fe ff       	call   c00006a7 <strcpy>
c001834c:	83 c4 10             	add    esp,0x10
c001834f:	83 ec 08             	sub    esp,0x8
c0018352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018356:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001835a:	e8 31 fe ff ff       	call   c0018190 <Process::addArgs(char**)>
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	83 ec 08             	sub    esp,0x8
c0018365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018369:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836d:	e8 a5 ee ff ff       	call   c0017217 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018372:	83 c4 10             	add    esp,0x10
c0018375:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018379:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001837d:	83 f0 01             	xor    eax,0x1
c0018380:	88 c2                	mov    dl,al
c0018382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018386:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001838c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018390:	25 ff 00 00 00       	and    eax,0xff
c0018395:	83 ec 08             	sub    esp,0x8
c0018398:	50                   	push   eax
c0018399:	68 30 2a 02 c0       	push   0xc0022a30
c001839e:	e8 b6 6d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	90                   	nop
c00183a7:	83 c4 14             	add    esp,0x14
c00183aa:	5b                   	pop    ebx
c00183ab:	5e                   	pop    esi
c00183ac:	c3                   	ret    
c00183ad:	90                   	nop

c00183ae <Process::Process(bool, char const*, Process*, char**)>:
c00183ae:	56                   	push   esi
c00183af:	53                   	push   ebx
c00183b0:	83 ec 14             	sub    esp,0x14
c00183b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00183bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183bf:	05 0c 02 00 00       	add    eax,0x20c
c00183c4:	bb 07 00 00 00       	mov    ebx,0x7
c00183c9:	89 c6                	mov    esi,eax
c00183cb:	85 db                	test   ebx,ebx
c00183cd:	78 12                	js     c00183e1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00183cf:	83 ec 0c             	sub    esp,0xc
c00183d2:	56                   	push   esi
c00183d3:	e8 92 75 00 00       	call   c001f96a <ThreadControlBlock::ThreadControlBlock()>
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	83 c6 63             	add    esi,0x63
c00183de:	4b                   	dec    ebx
c00183df:	eb ea                	jmp    c00183cb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00183e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e5:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00183ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f0:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00183f9:	a1 a4 3c 02 c0       	mov    eax,ds:0xc0023ca4
c00183fe:	8d 50 01             	lea    edx,[eax+0x1]
c0018401:	89 15 a4 3c 02 c0    	mov    DWORD PTR ds:0xc0023ca4,edx
c0018407:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001840b:	89 02                	mov    DWORD PTR [edx],eax
c001840d:	83 ec 0c             	sub    esp,0xc
c0018410:	6a 10                	push   0x10
c0018412:	e8 0d 6c ff ff       	call   c000f024 <operator new(unsigned long)>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	89 c3                	mov    ebx,eax
c001841c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018420:	25 ff 00 00 00       	and    eax,0xff
c0018425:	83 ec 08             	sub    esp,0x8
c0018428:	50                   	push   eax
c0018429:	53                   	push   ebx
c001842a:	e8 89 68 ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c001842f:	83 c4 10             	add    esp,0x10
c0018432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018436:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001843c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018440:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001844a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018452:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018462:	85 c0                	test   eax,eax
c0018464:	74 42                	je     c00184a8 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018470:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018484:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001848a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018494:	05 0c 01 00 00       	add    eax,0x10c
c0018499:	83 ec 08             	sub    esp,0x8
c001849c:	52                   	push   edx
c001849d:	50                   	push   eax
c001849e:	e8 04 82 fe ff       	call   c00006a7 <strcpy>
c00184a3:	83 c4 10             	add    esp,0x10
c00184a6:	eb 5c                	jmp    c0018504 <Process::Process(bool, char const*, Process*, char**)+0x156>
c00184a8:	83 ec 0c             	sub    esp,0xc
c00184ab:	68 60 12 00 00       	push   0x1260
c00184b0:	e8 6f 6b ff ff       	call   c000f024 <operator new(unsigned long)>
c00184b5:	83 c4 10             	add    esp,0x10
c00184b8:	89 c3                	mov    ebx,eax
c00184ba:	83 ec 08             	sub    esp,0x8
c00184bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184c1:	53                   	push   ebx
c00184c2:	e8 4f 52 ff ff       	call   c000d716 <VgaText::VgaText(char const*)>
c00184c7:	83 c4 10             	add    esp,0x10
c00184ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ce:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00184d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00184de:	83 ec 0c             	sub    esp,0xc
c00184e1:	50                   	push   eax
c00184e2:	e8 2e 46 ff ff       	call   c000cb15 <addToTerminalCycle(VgaText*)>
c00184e7:	83 c4 10             	add    esp,0x10
c00184ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ee:	05 0c 01 00 00       	add    eax,0x10c
c00184f3:	83 ec 08             	sub    esp,0x8
c00184f6:	68 32 29 02 c0       	push   0xc0022932
c00184fb:	50                   	push   eax
c00184fc:	e8 a6 81 fe ff       	call   c00006a7 <strcpy>
c0018501:	83 c4 10             	add    esp,0x10
c0018504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018508:	83 c0 0c             	add    eax,0xc
c001850b:	83 ec 08             	sub    esp,0x8
c001850e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018512:	50                   	push   eax
c0018513:	e8 8f 81 fe ff       	call   c00006a7 <strcpy>
c0018518:	83 c4 10             	add    esp,0x10
c001851b:	83 ec 08             	sub    esp,0x8
c001851e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018526:	e8 65 fc ff ff       	call   c0018190 <Process::addArgs(char**)>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	90                   	nop
c001852f:	83 c4 14             	add    esp,0x14
c0018532:	5b                   	pop    ebx
c0018533:	5e                   	pop    esi
c0018534:	c3                   	ret    

c0018535 <disableIRQs()>:
c0018535:	fa                   	cli    
c0018536:	a1 ac 56 02 c0       	mov    eax,ds:0xc00256ac
c001853b:	40                   	inc    eax
c001853c:	a3 ac 56 02 c0       	mov    ds:0xc00256ac,eax
c0018541:	c3                   	ret    

c0018542 <getIRQNestingLevel()>:
c0018542:	a1 ac 56 02 c0       	mov    eax,ds:0xc00256ac
c0018547:	c3                   	ret    

c0018548 <enableIRQs()>:
c0018548:	a1 ac 56 02 c0       	mov    eax,ds:0xc00256ac
c001854d:	48                   	dec    eax
c001854e:	a3 ac 56 02 c0       	mov    ds:0xc00256ac,eax
c0018553:	75 01                	jne    c0018556 <enableIRQs()+0xe>
c0018555:	fb                   	sti    
c0018556:	c3                   	ret    

c0018557 <lockScheduler()>:
c0018557:	eb dc                	jmp    c0018535 <disableIRQs()>

c0018559 <unlockScheduler()>:
c0018559:	eb ed                	jmp    c0018548 <enableIRQs()>

c001855b <userModeEntryPoint(void*)>:
c001855b:	83 ec 0c             	sub    esp,0xc
c001855e:	e8 f6 ff ff ff       	call   c0018559 <unlockScheduler()>
c0018563:	fb                   	sti    
c0018564:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018569:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001856c:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018576:	83 c4 0c             	add    esp,0xc
c0018579:	e9 68 7c fe ff       	jmp    c00001e6 <goToUsermode>

c001857e <lockStuff()>:
c001857e:	e8 b2 ff ff ff       	call   c0018535 <disableIRQs()>
c0018583:	a1 a8 56 02 c0       	mov    eax,ds:0xc00256a8
c0018588:	40                   	inc    eax
c0018589:	a3 a8 56 02 c0       	mov    ds:0xc00256a8,eax
c001858e:	c3                   	ret    

c001858f <taskStartupFunction>:
c001858f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018594:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018597:	c3                   	ret    

c0018598 <updateTimeUsed()>:
c0018598:	57                   	push   edi
c0018599:	56                   	push   esi
c001859a:	53                   	push   ebx
c001859b:	e8 42 be ff ff       	call   c00143e2 <thisCPU()>
c00185a0:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00185a7:	74 49                	je     c00185f2 <updateTimeUsed()+0x5a>
c00185a9:	0f 31                	rdtsc  
c00185ab:	89 c1                	mov    ecx,eax
c00185ad:	a3 e8 56 02 c0       	mov    ds:0xc00256e8,eax
c00185b2:	2b 0d d8 56 02 c0    	sub    ecx,DWORD PTR ds:0xc00256d8
c00185b8:	a3 d8 56 02 c0       	mov    ds:0xc00256d8,eax
c00185bd:	89 0d e0 56 02 c0    	mov    DWORD PTR ds:0xc00256e0,ecx
c00185c3:	89 d3                	mov    ebx,edx
c00185c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185ca:	89 15 ec 56 02 c0    	mov    DWORD PTR ds:0xc00256ec,edx
c00185d0:	1b 1d dc 56 02 c0    	sbb    ebx,DWORD PTR ds:0xc00256dc
c00185d6:	89 15 dc 56 02 c0    	mov    DWORD PTR ds:0xc00256dc,edx
c00185dc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00185df:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00185e2:	01 f1                	add    ecx,esi
c00185e4:	89 1d e4 56 02 c0    	mov    DWORD PTR ds:0xc00256e4,ebx
c00185ea:	11 fb                	adc    ebx,edi
c00185ec:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00185ef:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00185f2:	5b                   	pop    ebx
c00185f3:	5e                   	pop    esi
c00185f4:	5f                   	pop    edi
c00185f5:	c3                   	ret    

c00185f6 <switchToThread(ThreadControlBlock*)>:
c00185f6:	53                   	push   ebx
c00185f7:	83 ec 08             	sub    esp,0x8
c00185fa:	a1 a8 56 02 c0       	mov    eax,ds:0xc00256a8
c00185ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018603:	85 c0                	test   eax,eax
c0018605:	75 36                	jne    c001863d <switchToThread(ThreadControlBlock*)+0x47>
c0018607:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c001860a:	80 fa ff             	cmp    dl,0xff
c001860d:	74 2a                	je     c0018639 <switchToThread(ThreadControlBlock*)+0x43>
c001860f:	81 e2 ff 00 00 00    	and    edx,0xff
c0018615:	b8 84 03 00 00       	mov    eax,0x384
c001861a:	29 d0                	sub    eax,edx
c001861c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001861f:	c1 e0 10             	shl    eax,0x10
c0018622:	01 c8                	add    eax,ecx
c0018624:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018627:	e8 6c ff ff ff       	call   c0018598 <updateTimeUsed()>
c001862c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018630:	83 c4 08             	add    esp,0x8
c0018633:	5b                   	pop    ebx
c0018634:	e9 e6 7b fe ff       	jmp    c000021f <switchToThreadASM>
c0018639:	31 c0                	xor    eax,eax
c001863b:	eb e7                	jmp    c0018624 <switchToThread(ThreadControlBlock*)+0x2e>
c001863d:	c7 05 a4 56 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00256a4,0x1
c0018647:	83 c4 08             	add    esp,0x8
c001864a:	5b                   	pop    ebx
c001864b:	c3                   	ret    

c001864c <Semaphore::Semaphore(int)>:
c001864c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018654:	89 10                	mov    DWORD PTR [eax],edx
c0018656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001865a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018665:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001866c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018670:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018677:	90                   	nop
c0018678:	c3                   	ret    
c0018679:	90                   	nop

c001867a <Mutex::Mutex()>:
c001867a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001867e:	6a 01                	push   0x1
c0018680:	50                   	push   eax
c0018681:	e8 c6 ff ff ff       	call   c001864c <Semaphore::Semaphore(int)>
c0018686:	83 c4 08             	add    esp,0x8
c0018689:	90                   	nop
c001868a:	c3                   	ret    
c001868b:	90                   	nop

c001868c <Process::createThread(void (*)(void*), void*, int)>:
c001868c:	55                   	push   ebp
c001868d:	31 c9                	xor    ecx,ecx
c001868f:	57                   	push   edi
c0018690:	56                   	push   esi
c0018691:	53                   	push   ebx
c0018692:	83 ec 1c             	sub    esp,0x1c
c0018695:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018699:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c00186a0:	89 f2                	mov    edx,esi
c00186a2:	31 c0                	xor    eax,eax
c00186a4:	66 89 d0             	mov    ax,dx
c00186a7:	83 e2 01             	and    edx,0x1
c00186aa:	74 14                	je     c00186c0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c00186ac:	d1 f8                	sar    eax,1
c00186ae:	41                   	inc    ecx
c00186af:	89 c2                	mov    edx,eax
c00186b1:	83 f9 10             	cmp    ecx,0x10
c00186b4:	75 ec                	jne    c00186a2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c00186b6:	83 c4 1c             	add    esp,0x1c
c00186b9:	31 c0                	xor    eax,eax
c00186bb:	5b                   	pop    ebx
c00186bc:	5e                   	pop    esi
c00186bd:	5f                   	pop    edi
c00186be:	5d                   	pop    ebp
c00186bf:	c3                   	ret    
c00186c0:	b8 01 00 00 00       	mov    eax,0x1
c00186c5:	d3 e0                	shl    eax,cl
c00186c7:	09 c6                	or     esi,eax
c00186c9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00186cf:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c00186d6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00186d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00186dc:	89 f0                	mov    eax,esi
c00186de:	c1 e0 05             	shl    eax,0x5
c00186e1:	01 c6                	add    esi,eax
c00186e3:	8d 04 33             	lea    eax,[ebx+esi*1]
c00186e6:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00186ec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00186f0:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00186f6:	89 ca                	mov    edx,ecx
c00186f8:	f7 da                	neg    edx
c00186fa:	c1 e2 15             	shl    edx,0x15
c00186fd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018703:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018709:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001870f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018715:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018719:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001871f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018723:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001872d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018733:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001873d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018747:	52                   	push   edx
c0018748:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001874f:	52                   	push   edx
c0018750:	50                   	push   eax
c0018751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018755:	68 c8 56 02 c0       	push   0xc00256c8
c001875a:	e8 63 70 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001875f:	83 c4 10             	add    esp,0x10
c0018762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018766:	83 c4 1c             	add    esp,0x1c
c0018769:	5b                   	pop    ebx
c001876a:	5e                   	pop    esi
c001876b:	5f                   	pop    edi
c001876c:	5d                   	pop    ebp
c001876d:	c3                   	ret    

c001876e <Process::createUserThread()>:
c001876e:	83 ec 0c             	sub    esp,0xc
c0018771:	68 80 00 00 00       	push   0x80
c0018776:	6a 00                	push   0x0
c0018778:	68 5b 85 01 c0       	push   0xc001855b
c001877d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018781:	50                   	push   eax
c0018782:	e8 05 ff ff ff       	call   c001868c <Process::createThread(void (*)(void*), void*, int)>
c0018787:	83 c4 1c             	add    esp,0x1c
c001878a:	c3                   	ret    

c001878b <setupMultitasking(void (*)())>:
c001878b:	56                   	push   esi
c001878c:	53                   	push   ebx
c001878d:	51                   	push   ecx
c001878e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018792:	eb 10                	jmp    c00187a4 <setupMultitasking(void (*)())+0x19>
c0018794:	83 ec 0c             	sub    esp,0xc
c0018797:	68 c8 56 02 c0       	push   0xc00256c8
c001879c:	e8 73 6f 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	83 ec 0c             	sub    esp,0xc
c00187a7:	68 c8 56 02 c0       	push   0xc00256c8
c00187ac:	e8 47 6f 00 00       	call   c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	84 c0                	test   al,al
c00187b6:	74 dc                	je     c0018794 <setupMultitasking(void (*)())+0x9>
c00187b8:	83 ec 0c             	sub    esp,0xc
c00187bb:	68 3b 07 00 00       	push   0x73b
c00187c0:	e8 5f 68 ff ff       	call   c000f024 <operator new(unsigned long)>
c00187c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00187cc:	6a 00                	push   0x0
c00187ce:	68 36 29 02 c0       	push   0xc0022936
c00187d3:	89 c3                	mov    ebx,eax
c00187d5:	6a 01                	push   0x1
c00187d7:	50                   	push   eax
c00187d8:	e8 d1 fb ff ff       	call   c00183ae <Process::Process(bool, char const*, Process*, char**)>
c00187dd:	83 c4 18             	add    esp,0x18
c00187e0:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c00187e6:	89 1d d4 56 02 c0    	mov    DWORD PTR ds:0xc00256d4,ebx
c00187ec:	50                   	push   eax
c00187ed:	68 58 2a 02 c0       	push   0xc0022a58
c00187f2:	e8 62 69 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00187f7:	5a                   	pop    edx
c00187f8:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c00187fe:	51                   	push   ecx
c00187ff:	e8 85 4a ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c0018804:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c001880b:	83 c8 01             	or     eax,0x1
c001880e:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018815:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001881b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001881e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018828:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001882e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018838:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018842:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018848:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001884e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018858:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001885e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018868:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018872:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018878:	58                   	pop    eax
c0018879:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001887f:	5a                   	pop    edx
c0018880:	68 32 29 02 c0       	push   0xc0022932
c0018885:	50                   	push   eax
c0018886:	e8 1c 7e fe ff       	call   c00006a7 <strcpy>
c001888b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018892:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018896:	83 c4 14             	add    esp,0x14
c0018899:	5b                   	pop    ebx
c001889a:	5e                   	pop    esi
c001889b:	e9 71 79 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c00188a0 <schedule()>:
c00188a0:	a1 a8 56 02 c0       	mov    eax,ds:0xc00256a8
c00188a5:	85 c0                	test   eax,eax
c00188a7:	74 0b                	je     c00188b4 <schedule()+0x14>
c00188a9:	c7 05 a4 56 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00256a4,0x1
c00188b3:	c3                   	ret    
c00188b4:	53                   	push   ebx
c00188b5:	83 ec 14             	sub    esp,0x14
c00188b8:	68 c8 56 02 c0       	push   0xc00256c8
c00188bd:	e8 36 6e 00 00       	call   c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00188c2:	83 c4 10             	add    esp,0x10
c00188c5:	84 c0                	test   al,al
c00188c7:	75 38                	jne    c0018901 <schedule()+0x61>
c00188c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00188d1:	4a                   	dec    edx
c00188d2:	74 32                	je     c0018906 <schedule()+0x66>
c00188d4:	83 ec 0c             	sub    esp,0xc
c00188d7:	68 c8 56 02 c0       	push   0xc00256c8
c00188dc:	e8 0f 6e 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00188e1:	89 c3                	mov    ebx,eax
c00188e3:	c7 04 24 c8 56 02 c0 	mov    DWORD PTR [esp],0xc00256c8
c00188ea:	e8 25 6e 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00188ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00188f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188f9:	e8 f8 fc ff ff       	call   c00185f6 <switchToThread(ThreadControlBlock*)>
c00188fe:	83 c4 10             	add    esp,0x10
c0018901:	83 c4 08             	add    esp,0x8
c0018904:	5b                   	pop    ebx
c0018905:	c3                   	ret    
c0018906:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001890d:	51                   	push   ecx
c001890e:	51                   	push   ecx
c001890f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018915:	53                   	push   ebx
c0018916:	68 c8 56 02 c0       	push   0xc00256c8
c001891b:	e8 a2 6e 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018920:	83 c4 10             	add    esp,0x10
c0018923:	eb af                	jmp    c00188d4 <schedule()+0x34>

c0018925 <unlockStuff()>:
c0018925:	a1 a8 56 02 c0       	mov    eax,ds:0xc00256a8
c001892a:	48                   	dec    eax
c001892b:	a3 a8 56 02 c0       	mov    ds:0xc00256a8,eax
c0018930:	75 09                	jne    c001893b <unlockStuff()+0x16>
c0018932:	a1 a4 56 02 c0       	mov    eax,ds:0xc00256a4
c0018937:	85 c0                	test   eax,eax
c0018939:	75 05                	jne    c0018940 <unlockStuff()+0x1b>
c001893b:	e9 08 fc ff ff       	jmp    c0018548 <enableIRQs()>
c0018940:	83 ec 0c             	sub    esp,0xc
c0018943:	c7 05 a4 56 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00256a4,0x0
c001894d:	e8 4e ff ff ff       	call   c00188a0 <schedule()>
c0018952:	83 c4 0c             	add    esp,0xc
c0018955:	e9 ee fb ff ff       	jmp    c0018548 <enableIRQs()>

c001895a <Semaphore::tryAcquire()>:
c001895a:	83 ec 0c             	sub    esp,0xc
c001895d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018961:	e8 18 fc ff ff       	call   c001857e <lockStuff()>
c0018966:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018969:	3b 02                	cmp    eax,DWORD PTR [edx]
c001896b:	7c 0b                	jl     c0018978 <Semaphore::tryAcquire()+0x1e>
c001896d:	e8 b3 ff ff ff       	call   c0018925 <unlockStuff()>
c0018972:	31 c0                	xor    eax,eax
c0018974:	83 c4 0c             	add    esp,0xc
c0018977:	c3                   	ret    
c0018978:	40                   	inc    eax
c0018979:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001897c:	e8 a4 ff ff ff       	call   c0018925 <unlockStuff()>
c0018981:	b0 01                	mov    al,0x1
c0018983:	83 c4 0c             	add    esp,0xc
c0018986:	c3                   	ret    
c0018987:	90                   	nop

c0018988 <Semaphore::assertLocked(char const*)>:
c0018988:	83 ec 0c             	sub    esp,0xc
c001898b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001898f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018993:	e8 e6 fb ff ff       	call   c001857e <lockStuff()>
c0018998:	8b 02                	mov    eax,DWORD PTR [edx]
c001899a:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c001899d:	7c 05                	jl     c00189a4 <Semaphore::assertLocked(char const*)+0x1c>
c001899f:	83 c4 0c             	add    esp,0xc
c00189a2:	eb 81                	jmp    c0018925 <unlockStuff()>
c00189a4:	83 ec 0c             	sub    esp,0xc
c00189a7:	51                   	push   ecx
c00189a8:	e8 a1 cb ff ff       	call   c001554e <Krnl::panic(char const*)>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	83 c4 0c             	add    esp,0xc
c00189b3:	e9 6d ff ff ff       	jmp    c0018925 <unlockStuff()>

c00189b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00189b8:	83 ec 0c             	sub    esp,0xc
c00189bb:	e8 82 fb ff ff       	call   c0018542 <getIRQNestingLevel()>
c00189c0:	52                   	push   edx
c00189c1:	52                   	push   edx
c00189c2:	50                   	push   eax
c00189c3:	68 8c 2a 02 c0       	push   0xc0022a8c
c00189c8:	e8 8c 67 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00189cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00189d9:	e8 c2 fe ff ff       	call   c00188a0 <schedule()>
c00189de:	e8 76 fb ff ff       	call   c0018559 <unlockScheduler()>
c00189e3:	e8 5a fb ff ff       	call   c0018542 <getIRQNestingLevel()>
c00189e8:	59                   	pop    ecx
c00189e9:	5a                   	pop    edx
c00189ea:	50                   	push   eax
c00189eb:	68 c0 2a 02 c0       	push   0xc0022ac0
c00189f0:	e8 64 67 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00189f5:	83 c4 1c             	add    esp,0x1c
c00189f8:	c3                   	ret    

c00189f9 <blockTask(TaskState)>:
c00189f9:	83 ec 0c             	sub    esp,0xc
c00189fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a00:	e8 52 fb ff ff       	call   c0018557 <lockScheduler()>
c0018a05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a0a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018a0d:	e8 8e fe ff ff       	call   c00188a0 <schedule()>
c0018a12:	83 c4 0c             	add    esp,0xc
c0018a15:	e9 3f fb ff ff       	jmp    c0018559 <unlockScheduler()>

c0018a1a <waitTask(int, int*, int)>:
c0018a1a:	83 ec 18             	sub    esp,0x18
c0018a1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a26:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018a29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a32:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018a35:	6a 07                	push   0x7
c0018a37:	e8 bd ff ff ff       	call   c00189f9 <blockTask(TaskState)>
c0018a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a41:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018a44:	83 c4 10             	add    esp,0x10
c0018a47:	85 d2                	test   edx,edx
c0018a49:	74 0a                	je     c0018a55 <waitTask(int, int*, int)+0x3b>
c0018a4b:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018a4e:	89 02                	mov    DWORD PTR [edx],eax
c0018a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a55:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018a58:	83 c4 0c             	add    esp,0xc
c0018a5b:	c3                   	ret    

c0018a5c <nanoSleepUntil(unsigned long long)>:
c0018a5c:	53                   	push   ebx
c0018a5d:	83 ec 08             	sub    esp,0x8
c0018a60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018a68:	3b 0d f0 48 02 c0    	cmp    ecx,DWORD PTR ds:0xc00248f0
c0018a6e:	89 d8                	mov    eax,ebx
c0018a70:	1b 05 f4 48 02 c0    	sbb    eax,DWORD PTR ds:0xc00248f4
c0018a76:	73 05                	jae    c0018a7d <nanoSleepUntil(unsigned long long)+0x21>
c0018a78:	83 c4 08             	add    esp,0x8
c0018a7b:	5b                   	pop    ebx
c0018a7c:	c3                   	ret    
c0018a7d:	e8 fc fa ff ff       	call   c001857e <lockStuff()>
c0018a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a87:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018a8a:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018a8d:	51                   	push   ecx
c0018a8e:	51                   	push   ecx
c0018a8f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018a95:	53                   	push   ebx
c0018a96:	68 bc 56 02 c0       	push   0xc00256bc
c0018a9b:	e8 22 6d 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018aa0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018aa7:	e8 4d ff ff ff       	call   c00189f9 <blockTask(TaskState)>
c0018aac:	83 c4 18             	add    esp,0x18
c0018aaf:	5b                   	pop    ebx
c0018ab0:	e9 70 fe ff ff       	jmp    c0018925 <unlockStuff()>

c0018ab5 <nanoSleep(unsigned long long)>:
c0018ab5:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c0018aba:	8b 15 f4 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248f4
c0018ac0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018ac4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018ac8:	eb 92                	jmp    c0018a5c <nanoSleepUntil(unsigned long long)>

c0018aca <sleep(unsigned long long)>:
c0018aca:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018acf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018ad7:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018adb:	01 ca                	add    edx,ecx
c0018add:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ae1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ae5:	eb ce                	jmp    c0018ab5 <nanoSleep(unsigned long long)>
c0018ae7:	90                   	nop

c0018ae8 <Semaphore::acquire()>:
c0018ae8:	83 ec 0c             	sub    esp,0xc
c0018aeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018aef:	e8 8a fa ff ff       	call   c001857e <lockStuff()>
c0018af4:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018af7:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018af9:	7d 0c                	jge    c0018b07 <Semaphore::acquire()+0x1f>
c0018afb:	40                   	inc    eax
c0018afc:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018aff:	83 c4 0c             	add    esp,0xc
c0018b02:	e9 1e fe ff ff       	jmp    c0018925 <unlockStuff()>
c0018b07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b0c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018b13:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018b16:	85 c0                	test   eax,eax
c0018b18:	74 29                	je     c0018b43 <Semaphore::acquire()+0x5b>
c0018b1a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018b1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018b23:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b2b:	83 ec 0c             	sub    esp,0xc
c0018b2e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018b31:	6a 05                	push   0x5
c0018b33:	e8 c1 fe ff ff       	call   c00189f9 <blockTask(TaskState)>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	83 c4 0c             	add    esp,0xc
c0018b3e:	e9 e2 fd ff ff       	jmp    c0018925 <unlockStuff()>
c0018b43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b48:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018b4b:	eb d9                	jmp    c0018b26 <Semaphore::acquire()+0x3e>

c0018b4d <taskReturned>:
c0018b4d:	83 ec 18             	sub    esp,0x18
c0018b50:	68 f4 2a 02 c0       	push   0xc0022af4
c0018b55:	e8 f4 c9 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0018b5a:	83 c4 10             	add    esp,0x10
c0018b5d:	83 ec 0c             	sub    esp,0xc
c0018b60:	6a 02                	push   0x2
c0018b62:	e8 92 fe ff ff       	call   c00189f9 <blockTask(TaskState)>
c0018b67:	e8 eb f9 ff ff       	call   c0018557 <lockScheduler()>
c0018b6c:	e8 2f fd ff ff       	call   c00188a0 <schedule()>
c0018b71:	e8 e3 f9 ff ff       	call   c0018559 <unlockScheduler()>
c0018b76:	83 c4 10             	add    esp,0x10
c0018b79:	eb e2                	jmp    c0018b5d <taskReturned+0x10>

c0018b7b <unblockTask(ThreadControlBlock*)>:
c0018b7b:	53                   	push   ebx
c0018b7c:	83 ec 08             	sub    esp,0x8
c0018b7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b83:	e8 cf f9 ff ff       	call   c0018557 <lockScheduler()>
c0018b88:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018b8b:	85 c0                	test   eax,eax
c0018b8d:	74 5b                	je     c0018bea <unblockTask(ThreadControlBlock*)+0x6f>
c0018b8f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018b92:	48                   	dec    eax
c0018b93:	74 30                	je     c0018bc5 <unblockTask(ThreadControlBlock*)+0x4a>
c0018b95:	83 ec 0c             	sub    esp,0xc
c0018b98:	68 c8 56 02 c0       	push   0xc00256c8
c0018b9d:	e8 4e 6b 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ba2:	83 c4 10             	add    esp,0x10
c0018ba5:	85 c0                	test   eax,eax
c0018ba7:	75 16                	jne    c0018bbf <unblockTask(ThreadControlBlock*)+0x44>
c0018ba9:	eb 64                	jmp    c0018c0f <unblockTask(ThreadControlBlock*)+0x94>
c0018bab:	52                   	push   edx
c0018bac:	52                   	push   edx
c0018bad:	50                   	push   eax
c0018bae:	68 c8 56 02 c0       	push   0xc00256c8
c0018bb3:	e8 48 6e 00 00       	call   c001fa00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018bb8:	83 c4 10             	add    esp,0x10
c0018bbb:	85 c0                	test   eax,eax
c0018bbd:	74 50                	je     c0018c0f <unblockTask(ThreadControlBlock*)+0x94>
c0018bbf:	39 c3                	cmp    ebx,eax
c0018bc1:	75 e8                	jne    c0018bab <unblockTask(ThreadControlBlock*)+0x30>
c0018bc3:	eb 1c                	jmp    c0018be1 <unblockTask(ThreadControlBlock*)+0x66>
c0018bc5:	83 ec 0c             	sub    esp,0xc
c0018bc8:	68 e4 2b 02 c0       	push   0xc0022be4
c0018bcd:	e8 87 65 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018bd2:	c7 04 24 70 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b70
c0018bd9:	e8 7b 65 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018bde:	83 c4 10             	add    esp,0x10
c0018be1:	83 c4 08             	add    esp,0x8
c0018be4:	5b                   	pop    ebx
c0018be5:	e9 6f f9 ff ff       	jmp    c0018559 <unlockScheduler()>
c0018bea:	83 ec 0c             	sub    esp,0xc
c0018bed:	68 28 2b 02 c0       	push   0xc0022b28
c0018bf2:	e8 62 65 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018bf7:	c7 04 24 70 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b70
c0018bfe:	e8 56 65 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018c03:	83 c4 10             	add    esp,0x10
c0018c06:	83 c4 08             	add    esp,0x8
c0018c09:	5b                   	pop    ebx
c0018c0a:	e9 4a f9 ff ff       	jmp    c0018559 <unlockScheduler()>
c0018c0f:	50                   	push   eax
c0018c10:	50                   	push   eax
c0018c11:	53                   	push   ebx
c0018c12:	68 c8 56 02 c0       	push   0xc00256c8
c0018c17:	e8 a6 6b 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c1c:	83 c4 10             	add    esp,0x10
c0018c1f:	83 c4 08             	add    esp,0x8
c0018c22:	5b                   	pop    ebx
c0018c23:	e9 31 f9 ff ff       	jmp    c0018559 <unlockScheduler()>

c0018c28 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018c28:	55                   	push   ebp
c0018c29:	57                   	push   edi
c0018c2a:	56                   	push   esi
c0018c2b:	53                   	push   ebx
c0018c2c:	83 ec 1c             	sub    esp,0x1c
c0018c2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c33:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018c36:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0018c3c:	85 ed                	test   ebp,ebp
c0018c3e:	7e 21                	jle    c0018c61 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0018c40:	31 f6                	xor    esi,esi
c0018c42:	83 ec 0c             	sub    esp,0xc
c0018c45:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0018c4c:	46                   	inc    esi
c0018c4d:	57                   	push   edi
c0018c4e:	e8 e4 32 ff ff       	call   c000bf37 <free>
c0018c53:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018c56:	83 c4 10             	add    esp,0x10
c0018c59:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018c5f:	7f e1                	jg     c0018c42 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018c61:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018c6b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018c70:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018c73:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018c76:	d3 c0                	rol    eax,cl
c0018c78:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0018c7f:	21 c1                	and    ecx,eax
c0018c81:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0018c88:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018c8b:	89 f7                	mov    edi,esi
c0018c8d:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018c95:	0f 85 4f 01 00 00    	jne    c0018dea <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0018c9b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018ca1:	85 c0                	test   eax,eax
c0018ca3:	0f 84 aa 00 00 00    	je     c0018d53 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0018ca9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018cac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018cb0:	31 c9                	xor    ecx,ecx
c0018cb2:	eb 10                	jmp    c0018cc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0018cb4:	41                   	inc    ecx
c0018cb5:	83 f9 10             	cmp    ecx,0x10
c0018cb8:	0f 84 95 00 00 00    	je     c0018d53 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0018cbe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018cc4:	31 d2                	xor    edx,edx
c0018cc6:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c0018ccd:	d3 fa                	sar    edx,cl
c0018ccf:	83 e2 01             	and    edx,0x1
c0018cd2:	74 e0                	je     c0018cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018cd4:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0018cd7:	89 d5                	mov    ebp,edx
c0018cd9:	c1 e5 05             	shl    ebp,0x5
c0018cdc:	01 ea                	add    edx,ebp
c0018cde:	01 d0                	add    eax,edx
c0018ce0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018ce6:	83 fd 07             	cmp    ebp,0x7
c0018ce9:	75 c9                	jne    c0018cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018ceb:	05 40 02 00 00       	add    eax,0x240
c0018cf0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018cf3:	83 fd ff             	cmp    ebp,0xffffffff
c0018cf6:	0f 8c 07 01 00 00    	jl     c0018e03 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c0018cfc:	0f 84 b4 01 00 00    	je     c0018eb6 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0018d02:	85 ed                	test   ebp,ebp
c0018d04:	0f 84 9b 01 00 00    	je     c0018ea5 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0018d0a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018d0c:	75 a6                	jne    c0018cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018d0e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018d14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d18:	01 d0                	add    eax,edx
c0018d1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018d1e:	83 ec 0c             	sub    esp,0xc
c0018d21:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018d27:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018d2a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018d30:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018d37:	50                   	push   eax
c0018d38:	e8 3e fe ff ff       	call   c0018b7b <unblockTask(ThreadControlBlock*)>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d44:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018d47:	41                   	inc    ecx
c0018d48:	89 f7                	mov    edi,esi
c0018d4a:	83 f9 10             	cmp    ecx,0x10
c0018d4d:	0f 85 6b ff ff ff    	jne    c0018cbe <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0018d53:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018d59:	85 c0                	test   eax,eax
c0018d5b:	74 5d                	je     c0018dba <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0018d5d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018d63:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018d69:	74 4f                	je     c0018dba <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0018d6b:	83 ec 0c             	sub    esp,0xc
c0018d6e:	68 c8 56 02 c0       	push   0xc00256c8
c0018d73:	e8 78 69 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d78:	c7 04 24 c8 56 02 c0 	mov    DWORD PTR [esp],0xc00256c8
c0018d7f:	89 c7                	mov    edi,eax
c0018d81:	e8 72 69 00 00       	call   c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d86:	83 c4 10             	add    esp,0x10
c0018d89:	84 c0                	test   al,al
c0018d8b:	0f 84 e2 00 00 00    	je     c0018e73 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0018d91:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018d94:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018d9a:	85 d2                	test   edx,edx
c0018d9c:	74 0f                	je     c0018dad <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0018d9e:	83 ec 0c             	sub    esp,0xc
c0018da1:	8b 02                	mov    eax,DWORD PTR [edx]
c0018da3:	52                   	push   edx
c0018da4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018da7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018db7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018dba:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018dc0:	85 db                	test   ebx,ebx
c0018dc2:	74 16                	je     c0018dda <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	53                   	push   ebx
c0018dc8:	e8 d1 58 ff ff       	call   c000e69e <VAS::~VAS()>
c0018dcd:	5a                   	pop    edx
c0018dce:	59                   	pop    ecx
c0018dcf:	6a 10                	push   0x10
c0018dd1:	53                   	push   ebx
c0018dd2:	e8 5c 62 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0018dd7:	83 c4 10             	add    esp,0x10
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	68 3d 29 02 c0       	push   0xc002293d
c0018de2:	e8 72 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	50                   	push   eax
c0018deb:	50                   	push   eax
c0018dec:	68 3b 07 00 00       	push   0x73b
c0018df1:	68 4b 29 02 c0       	push   0xc002294b
c0018df6:	e8 5e 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018dfb:	83 c4 2c             	add    esp,0x2c
c0018dfe:	5b                   	pop    ebx
c0018dff:	5e                   	pop    esi
c0018e00:	5f                   	pop    edi
c0018e01:	5d                   	pop    ebp
c0018e02:	c3                   	ret    
c0018e03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e07:	83 ec 0c             	sub    esp,0xc
c0018e0a:	68 28 2c 02 c0       	push   0xc0022c28
c0018e0f:	e8 3a c7 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0018e14:	83 c4 10             	add    esp,0x10
c0018e17:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018e1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e1e:	89 f7                	mov    edi,esi
c0018e20:	e9 8f fe ff ff       	jmp    c0018cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018e25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018e2b:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018e31:	75 1c                	jne    c0018e4f <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018e33:	83 ec 0c             	sub    esp,0xc
c0018e36:	68 90 2c 02 c0       	push   0xc0022c90
c0018e3b:	e8 19 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018e40:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e47:	e8 ad fb ff ff       	call   c00189f9 <blockTask(TaskState)>
c0018e4c:	83 c4 10             	add    esp,0x10
c0018e4f:	55                   	push   ebp
c0018e50:	55                   	push   ebp
c0018e51:	56                   	push   esi
c0018e52:	68 c8 56 02 c0       	push   0xc00256c8
c0018e57:	e8 66 69 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e5c:	c7 04 24 c8 56 02 c0 	mov    DWORD PTR [esp],0xc00256c8
c0018e63:	e8 88 68 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e68:	83 c4 10             	add    esp,0x10
c0018e6b:	39 f8                	cmp    eax,edi
c0018e6d:	0f 84 1e ff ff ff    	je     c0018d91 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0018e73:	83 ec 0c             	sub    esp,0xc
c0018e76:	68 c8 56 02 c0       	push   0xc00256c8
c0018e7b:	e8 70 68 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e80:	89 c6                	mov    esi,eax
c0018e82:	c7 04 24 c8 56 02 c0 	mov    DWORD PTR [esp],0xc00256c8
c0018e89:	e8 86 68 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e8e:	83 c4 10             	add    esp,0x10
c0018e91:	39 f3                	cmp    ebx,esi
c0018e93:	74 ba                	je     c0018e4f <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018e95:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018e98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018e9b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018ea1:	75 ac                	jne    c0018e4f <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018ea3:	eb 80                	jmp    c0018e25 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0018ea5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ea9:	83 ec 0c             	sub    esp,0xc
c0018eac:	68 5c 2c 02 c0       	push   0xc0022c5c
c0018eb1:	e9 59 ff ff ff       	jmp    c0018e0f <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c0018eb6:	8b 36                	mov    esi,DWORD PTR [esi]
c0018eb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ebc:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018ebf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ec2:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018ec8:	01 d7                	add    edi,edx
c0018eca:	89 f8                	mov    eax,edi
c0018ecc:	e9 49 fe ff ff       	jmp    c0018d1a <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c0018ed1 <cleanerTaskFunction(void*)>:
c0018ed1:	53                   	push   ebx
c0018ed2:	83 ec 08             	sub    esp,0x8
c0018ed5:	e8 7f f6 ff ff       	call   c0018559 <unlockScheduler()>
c0018eda:	e8 78 f6 ff ff       	call   c0018557 <lockScheduler()>
c0018edf:	80 3d 8c 56 02 c0 00 	cmp    BYTE PTR ds:0xc002568c,0x0
c0018ee6:	0f 85 8e 00 00 00    	jne    c0018f7a <cleanerTaskFunction(void*)+0xa9>
c0018eec:	83 ec 0c             	sub    esp,0xc
c0018eef:	6a 02                	push   0x2
c0018ef1:	e8 c2 fa ff ff       	call   c00189b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ef6:	83 c4 10             	add    esp,0x10
c0018ef9:	c6 05 8c 56 02 c0 00 	mov    BYTE PTR ds:0xc002568c,0x0
c0018f00:	e8 79 f6 ff ff       	call   c001857e <lockStuff()>
c0018f05:	e8 4d f6 ff ff       	call   c0018557 <lockScheduler()>
c0018f0a:	83 ec 0c             	sub    esp,0xc
c0018f0d:	68 b0 56 02 c0       	push   0xc00256b0
c0018f12:	e8 e1 67 00 00       	call   c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f17:	83 c4 10             	add    esp,0x10
c0018f1a:	84 c0                	test   al,al
c0018f1c:	75 40                	jne    c0018f5e <cleanerTaskFunction(void*)+0x8d>
c0018f1e:	83 ec 0c             	sub    esp,0xc
c0018f21:	68 b0 56 02 c0       	push   0xc00256b0
c0018f26:	e8 c5 67 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f2b:	89 c3                	mov    ebx,eax
c0018f2d:	c7 04 24 b0 56 02 c0 	mov    DWORD PTR [esp],0xc00256b0
c0018f34:	e8 db 67 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f39:	c7 04 24 61 29 02 c0 	mov    DWORD PTR [esp],0xc0022961
c0018f40:	e8 14 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018f45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f48:	e8 db fc ff ff       	call   c0018c28 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018f4d:	c7 04 24 7a 29 02 c0 	mov    DWORD PTR [esp],0xc002297a
c0018f54:	e8 00 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018f59:	83 c4 10             	add    esp,0x10
c0018f5c:	eb ac                	jmp    c0018f0a <cleanerTaskFunction(void*)+0x39>
c0018f5e:	e8 f6 f5 ff ff       	call   c0018559 <unlockScheduler()>
c0018f63:	e8 bd f9 ff ff       	call   c0018925 <unlockStuff()>
c0018f68:	e8 ea f5 ff ff       	call   c0018557 <lockScheduler()>
c0018f6d:	80 3d 8c 56 02 c0 00 	cmp    BYTE PTR ds:0xc002568c,0x0
c0018f74:	0f 84 72 ff ff ff    	je     c0018eec <cleanerTaskFunction(void*)+0x1b>
c0018f7a:	e8 da f5 ff ff       	call   c0018559 <unlockScheduler()>
c0018f7f:	e9 75 ff ff ff       	jmp    c0018ef9 <cleanerTaskFunction(void*)+0x28>

c0018f84 <terminateTask(int)>:
c0018f84:	83 ec 14             	sub    esp,0x14
c0018f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f8f:	83 c0 0c             	add    eax,0xc
c0018f92:	50                   	push   eax
c0018f93:	68 b8 2c 02 c0       	push   0xc0022cb8
c0018f98:	e8 bc 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018f9d:	e8 dc f5 ff ff       	call   c001857e <lockStuff()>
c0018fa2:	e8 b0 f5 ff ff       	call   c0018557 <lockScheduler()>
c0018fa7:	c7 04 24 8d 29 02 c0 	mov    DWORD PTR [esp],0xc002298d
c0018fae:	e8 a6 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018fb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018fbc:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fc4:	59                   	pop    ecx
c0018fc5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018fc8:	5a                   	pop    edx
c0018fc9:	50                   	push   eax
c0018fca:	68 b0 56 02 c0       	push   0xc00256b0
c0018fcf:	e8 ee 67 00 00       	call   c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fd9:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018fe0:	c7 04 24 a7 29 02 c0 	mov    DWORD PTR [esp],0xc00229a7
c0018fe7:	e8 6d 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018fec:	8b 0d 88 56 02 c0    	mov    ecx,DWORD PTR ds:0xc0025688
c0018ff2:	83 c4 10             	add    esp,0x10
c0018ff5:	85 c9                	test   ecx,ecx
c0018ff7:	74 5b                	je     c0019054 <terminateTask(int)+0xd0>
c0018ff9:	83 ec 0c             	sub    esp,0xc
c0018ffc:	68 c1 29 02 c0       	push   0xc00229c1
c0019001:	e8 53 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019006:	58                   	pop    eax
c0019007:	8b 15 88 56 02 c0    	mov    edx,DWORD PTR ds:0xc0025688
c001900d:	52                   	push   edx
c001900e:	c6 05 8c 56 02 c0 01 	mov    BYTE PTR ds:0xc002568c,0x1
c0019015:	e8 61 fb ff ff       	call   c0018b7b <unblockTask(ThreadControlBlock*)>
c001901a:	c7 04 24 db 29 02 c0 	mov    DWORD PTR [esp],0xc00229db
c0019021:	e8 33 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019026:	83 c4 10             	add    esp,0x10
c0019029:	e8 2b f5 ff ff       	call   c0018559 <unlockScheduler()>
c001902e:	e8 f2 f8 ff ff       	call   c0018925 <unlockStuff()>
c0019033:	83 ec 0c             	sub    esp,0xc
c0019036:	68 13 2a 02 c0       	push   0xc0022a13
c001903b:	e8 19 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019040:	83 c4 10             	add    esp,0x10
c0019043:	e8 0f f5 ff ff       	call   c0018557 <lockScheduler()>
c0019048:	e8 53 f8 ff ff       	call   c00188a0 <schedule()>
c001904d:	e8 07 f5 ff ff       	call   c0018559 <unlockScheduler()>
c0019052:	eb ef                	jmp    c0019043 <terminateTask(int)+0xbf>
c0019054:	83 ec 0c             	sub    esp,0xc
c0019057:	68 f5 29 02 c0       	push   0xc00229f5
c001905c:	e8 f8 60 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	eb c3                	jmp    c0019029 <terminateTask(int)+0xa5>

c0019066 <Thr::terminateFromIRQ(int)>:
c0019066:	83 ec 18             	sub    esp,0x18
c0019069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001906d:	50                   	push   eax
c001906e:	e8 11 ff ff ff       	call   c0018f84 <terminateTask(int)>
c0019073:	90                   	nop

c0019074 <Semaphore::release()>:
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001907b:	e8 fe f4 ff ff       	call   c001857e <lockStuff()>
c0019080:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019083:	85 c0                	test   eax,eax
c0019085:	74 1a                	je     c00190a1 <Semaphore::release()+0x2d>
c0019087:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001908a:	83 ec 0c             	sub    esp,0xc
c001908d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019090:	50                   	push   eax
c0019091:	e8 e5 fa ff ff       	call   c0018b7b <unblockTask(ThreadControlBlock*)>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	83 c4 0c             	add    esp,0xc
c001909c:	e9 84 f8 ff ff       	jmp    c0018925 <unlockStuff()>
c00190a1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00190a4:	48                   	dec    eax
c00190a5:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00190a8:	83 c4 0c             	add    esp,0xc
c00190ab:	e9 75 f8 ff ff       	jmp    c0018925 <unlockStuff()>

c00190b0 <__static_initialization_and_destruction_0(int, int)>:
c00190b0:	83 ec 0c             	sub    esp,0xc
c00190b3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00190b8:	0f 85 88 00 00 00    	jne    c0019146 <__static_initialization_and_destruction_0(int, int)+0x96>
c00190be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00190c6:	75 7e                	jne    c0019146 <__static_initialization_and_destruction_0(int, int)+0x96>
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	68 c8 56 02 c0       	push   0xc00256c8
c00190d0:	e8 d3 68 00 00       	call   c001f9a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	83 ec 04             	sub    esp,0x4
c00190db:	68 9c 36 02 c0       	push   0xc002369c
c00190e0:	68 c8 56 02 c0       	push   0xc00256c8
c00190e5:	68 68 f9 01 c0       	push   0xc001f968
c00190ea:	e8 c0 5e ff ff       	call   c000efaf <__cxa_atexit>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	83 ec 0c             	sub    esp,0xc
c00190f5:	68 bc 56 02 c0       	push   0xc00256bc
c00190fa:	e8 a9 68 00 00       	call   c001f9a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00190ff:	83 c4 10             	add    esp,0x10
c0019102:	83 ec 04             	sub    esp,0x4
c0019105:	68 9c 36 02 c0       	push   0xc002369c
c001910a:	68 bc 56 02 c0       	push   0xc00256bc
c001910f:	68 68 f9 01 c0       	push   0xc001f968
c0019114:	e8 96 5e ff ff       	call   c000efaf <__cxa_atexit>
c0019119:	83 c4 10             	add    esp,0x10
c001911c:	83 ec 0c             	sub    esp,0xc
c001911f:	68 b0 56 02 c0       	push   0xc00256b0
c0019124:	e8 7f 68 00 00       	call   c001f9a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019129:	83 c4 10             	add    esp,0x10
c001912c:	83 ec 04             	sub    esp,0x4
c001912f:	68 9c 36 02 c0       	push   0xc002369c
c0019134:	68 b0 56 02 c0       	push   0xc00256b0
c0019139:	68 68 f9 01 c0       	push   0xc001f968
c001913e:	e8 6c 5e ff ff       	call   c000efaf <__cxa_atexit>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	90                   	nop
c0019147:	83 c4 0c             	add    esp,0xc
c001914a:	c3                   	ret    

c001914b <_GLOBAL__sub_I_kernelProcess>:
c001914b:	83 ec 0c             	sub    esp,0xc
c001914e:	83 ec 08             	sub    esp,0x8
c0019151:	68 ff ff 00 00       	push   0xffff
c0019156:	6a 01                	push   0x1
c0019158:	e8 53 ff ff ff       	call   c00190b0 <__static_initialization_and_destruction_0(int, int)>
c001915d:	83 c4 10             	add    esp,0x10
c0019160:	83 c4 0c             	add    esp,0xc
c0019163:	c3                   	ret    

c0019164 <Vm::vm8086EntryPoint(void*)>:
c0019164:	83 ec 0c             	sub    esp,0xc
c0019167:	e8 ed f3 ff ff       	call   c0018559 <unlockScheduler()>
c001916c:	fb                   	sti    
c001916d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019172:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019176:	52                   	push   edx
c0019177:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001917b:	52                   	push   edx
c001917c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019180:	52                   	push   edx
c0019181:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019185:	50                   	push   eax
c0019186:	e8 2a 70 fe ff       	call   c00001b5 <goToVM86>
c001918b:	83 c4 1c             	add    esp,0x1c
c001918e:	c3                   	ret    

c001918f <Vm::inbv(unsigned short)>:
c001918f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019193:	ec                   	in     al,dx
c0019194:	c3                   	ret    

c0019195 <Vm::outbv(unsigned short, unsigned char)>:
c0019195:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019199:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001919d:	ee                   	out    dx,al
c001919e:	c3                   	ret    

c001919f <Vm::realToLinear(unsigned short, unsigned short)>:
c001919f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00191a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00191a9:	c1 e0 04             	shl    eax,0x4
c00191ac:	01 d0                	add    eax,edx
c00191ae:	c3                   	ret    

c00191af <Vm::getSegment(unsigned int)>:
c00191af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191b3:	c1 e8 10             	shr    eax,0x10
c00191b6:	c3                   	ret    

c00191b7 <Vm::getOffset(unsigned int)>:
c00191b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191bb:	c3                   	ret    

c00191bc <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00191bc:	55                   	push   ebp
c00191bd:	57                   	push   edi
c00191be:	56                   	push   esi
c00191bf:	53                   	push   ebx
c00191c0:	83 ec 2c             	sub    esp,0x2c
c00191c3:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00191c7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00191cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00191cf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00191d3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00191d7:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00191db:	e8 77 f3 ff ff       	call   c0018557 <lockScheduler()>
c00191e0:	68 80 00 00 00       	push   0x80
c00191e5:	6a 00                	push   0x0
c00191e7:	68 64 91 01 c0       	push   0xc0019164
c00191ec:	55                   	push   ebp
c00191ed:	e8 9a f4 ff ff       	call   c001868c <Process::createThread(void (*)(void*), void*, int)>
c00191f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191f6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00191fa:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00191fe:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0019202:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0019206:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001920a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019211:	e8 0e 5e ff ff       	call   c000f024 <operator new(unsigned long)>
c0019216:	83 c4 0c             	add    esp,0xc
c0019219:	55                   	push   ebp
c001921a:	89 c3                	mov    ebx,eax
c001921c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019220:	50                   	push   eax
c0019221:	e8 6a 64 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0019226:	83 c4 0c             	add    esp,0xc
c0019229:	8d 44 24 17          	lea    eax,[esp+0x17]
c001922d:	50                   	push   eax
c001922e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019232:	50                   	push   eax
c0019233:	53                   	push   ebx
c0019234:	e8 67 67 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0019239:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	84 d2                	test   dl,dl
c0019242:	74 1c                	je     c0019260 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019244:	83 ec 0c             	sub    esp,0xc
c0019247:	68 d7 2c 02 c0       	push   0xc0022cd7
c001924c:	e8 fd c2 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0019251:	e8 03 f3 ff ff       	call   c0018559 <unlockScheduler()>
c0019256:	83 c4 10             	add    esp,0x10
c0019259:	31 d2                	xor    edx,edx
c001925b:	e9 81 00 00 00       	jmp    c00192e1 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019260:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019264:	51                   	push   ecx
c0019265:	51                   	push   ecx
c0019266:	6a 01                	push   0x1
c0019268:	53                   	push   ebx
c0019269:	e8 86 64 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001926e:	83 c4 10             	add    esp,0x10
c0019271:	85 c0                	test   eax,eax
c0019273:	74 1b                	je     c0019290 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019275:	83 ec 0c             	sub    esp,0xc
c0019278:	68 f0 2c 02 c0       	push   0xc0022cf0
c001927d:	e8 cc c2 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0019282:	e8 d2 f2 ff ff       	call   c0018559 <unlockScheduler()>
c0019287:	83 c4 10             	add    esp,0x10
c001928a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001928e:	eb 51                	jmp    c00192e1 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019290:	83 ec 0c             	sub    esp,0xc
c0019293:	0f b7 ff             	movzx  edi,di
c0019296:	6a 07                	push   0x7
c0019298:	68 00 01 00 00       	push   0x100
c001929d:	6a 00                	push   0x0
c001929f:	6a 00                	push   0x0
c00192a1:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00192a7:	e8 50 58 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00192ac:	83 c4 18             	add    esp,0x18
c00192af:	0f b7 f6             	movzx  esi,si
c00192b2:	57                   	push   edi
c00192b3:	56                   	push   esi
c00192b4:	e8 e6 fe ff ff       	call   c001919f <Vm::realToLinear(unsigned short, unsigned short)>
c00192b9:	5a                   	pop    edx
c00192ba:	8b 13                	mov    edx,DWORD PTR [ebx]
c00192bc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00192c0:	51                   	push   ecx
c00192c1:	50                   	push   eax
c00192c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192ca:	53                   	push   ebx
c00192cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00192ce:	83 c4 14             	add    esp,0x14
c00192d1:	53                   	push   ebx
c00192d2:	e8 7b 64 ff ff       	call   c000f752 <File::close()>
c00192d7:	e8 7d f2 ff ff       	call   c0018559 <unlockScheduler()>
c00192dc:	83 c4 10             	add    esp,0x10
c00192df:	b2 01                	mov    dl,0x1
c00192e1:	83 c4 2c             	add    esp,0x2c
c00192e4:	88 d0                	mov    al,dl
c00192e6:	5b                   	pop    ebx
c00192e7:	5e                   	pop    esi
c00192e8:	5f                   	pop    edi
c00192e9:	5d                   	pop    ebp
c00192ea:	c3                   	ret    

c00192eb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00192eb:	57                   	push   edi
c00192ec:	56                   	push   esi
c00192ed:	53                   	push   ebx
c00192ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00192f6:	83 e8 06             	sub    eax,0x6
c00192f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00192fd:	0f b7 c0             	movzx  eax,ax
c0019300:	50                   	push   eax
c0019301:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019306:	50                   	push   eax
c0019307:	e8 93 fe ff ff       	call   c001919f <Vm::realToLinear(unsigned short, unsigned short)>
c001930c:	5a                   	pop    edx
c001930d:	5e                   	pop    esi
c001930e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019311:	8d 56 fa             	lea    edx,[esi-0x6]
c0019314:	81 e2 ff ff 00 00    	and    edx,0xffff
c001931a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001931d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019320:	83 c2 02             	add    edx,0x2
c0019323:	66 89 10             	mov    WORD PTR [eax],dx
c0019326:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019329:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001932d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019330:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019334:	89 d6                	mov    esi,edx
c0019336:	66 81 e6 ff fd       	and    si,0xfdff
c001933b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019341:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019345:	74 07                	je     c001934e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019347:	89 d6                	mov    esi,edx
c0019349:	66 81 ce 00 02       	or     si,0x200
c001934e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019352:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019357:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001935b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019363:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019366:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001936e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019371:	5b                   	pop    ebx
c0019372:	5e                   	pop    esi
c0019373:	5f                   	pop    edi
c0019374:	c3                   	ret    

c0019375 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019375:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001937a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001937f:	c1 e0 04             	shl    eax,0x4
c0019382:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019385:	c3                   	ret    

c0019386 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019386:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001938b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019390:	c1 e0 04             	shl    eax,0x4
c0019393:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019397:	c3                   	ret    

c0019398 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019398:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001939d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193a2:	c1 e0 04             	shl    eax,0x4
c00193a5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00193a8:	c3                   	ret    

c00193a9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00193a9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193ae:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193b3:	c1 e0 04             	shl    eax,0x4
c00193b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193ba:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00193bd:	c3                   	ret    

c00193be <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00193be:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193c8:	c1 e0 04             	shl    eax,0x4
c00193cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193cf:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00193d3:	c3                   	ret    

c00193d4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00193d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193d9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00193de:	c1 e0 04             	shl    eax,0x4
c00193e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193e5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00193e8:	c3                   	ret    

c00193e9 <Vm::faultHandler(regs*)>:
c00193e9:	55                   	push   ebp
c00193ea:	57                   	push   edi
c00193eb:	56                   	push   esi
c00193ec:	53                   	push   ebx
c00193ed:	83 ec 1c             	sub    esp,0x1c
c00193f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00193f4:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00193f8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193fb:	52                   	push   edx
c00193fc:	0f b7 f0             	movzx  esi,ax
c00193ff:	0f b7 c0             	movzx  eax,ax
c0019402:	50                   	push   eax
c0019403:	e8 97 fd ff ff       	call   c001919f <Vm::realToLinear(unsigned short, unsigned short)>
c0019408:	5a                   	pop    edx
c0019409:	89 c7                	mov    edi,eax
c001940b:	59                   	pop    ecx
c001940c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001940f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019413:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019416:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001941b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001941f:	0f b7 c5             	movzx  eax,bp
c0019422:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019426:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001942a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001942e:	e8 6c fd ff ff       	call   c001919f <Vm::realToLinear(unsigned short, unsigned short)>
c0019433:	5a                   	pop    edx
c0019434:	59                   	pop    ecx
c0019435:	b1 06                	mov    cl,0x6
c0019437:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001943c:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019441:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019444:	80 fa 9d             	cmp    dl,0x9d
c0019447:	0f 84 1d 02 00 00    	je     c001966a <Vm::faultHandler(regs*)+0x281>
c001944d:	0f 87 8e 00 00 00    	ja     c00194e1 <Vm::faultHandler(regs*)+0xf8>
c0019453:	80 fa 66             	cmp    dl,0x66
c0019456:	0f 84 89 01 00 00    	je     c00195e5 <Vm::faultHandler(regs*)+0x1fc>
c001945c:	77 44                	ja     c00194a2 <Vm::faultHandler(regs*)+0xb9>
c001945e:	80 fa 36             	cmp    dl,0x36
c0019461:	0f 84 74 01 00 00    	je     c00195db <Vm::faultHandler(regs*)+0x1f2>
c0019467:	77 1a                	ja     c0019483 <Vm::faultHandler(regs*)+0x9a>
c0019469:	80 fa 26             	cmp    dl,0x26
c001946c:	0f 84 4b 01 00 00    	je     c00195bd <Vm::faultHandler(regs*)+0x1d4>
c0019472:	80 fa 2e             	cmp    dl,0x2e
c0019475:	0f 85 4a 05 00 00    	jne    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c001947b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001947e:	31 c9                	xor    ecx,ecx
c0019480:	47                   	inc    edi
c0019481:	eb be                	jmp    c0019441 <Vm::faultHandler(regs*)+0x58>
c0019483:	80 fa 64             	cmp    dl,0x64
c0019486:	0f 84 3b 01 00 00    	je     c00195c7 <Vm::faultHandler(regs*)+0x1de>
c001948c:	0f 87 3f 01 00 00    	ja     c00195d1 <Vm::faultHandler(regs*)+0x1e8>
c0019492:	80 fa 3e             	cmp    dl,0x3e
c0019495:	0f 85 2a 05 00 00    	jne    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c001949b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001949e:	b1 01                	mov    cl,0x1
c00194a0:	eb de                	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00194a2:	80 fa 6d             	cmp    dl,0x6d
c00194a5:	0f 84 bf 02 00 00    	je     c001976a <Vm::faultHandler(regs*)+0x381>
c00194ab:	77 17                	ja     c00194c4 <Vm::faultHandler(regs*)+0xdb>
c00194ad:	80 fa 67             	cmp    dl,0x67
c00194b0:	0f 84 3c 01 00 00    	je     c00195f2 <Vm::faultHandler(regs*)+0x209>
c00194b6:	80 fa 6c             	cmp    dl,0x6c
c00194b9:	0f 84 5d 02 00 00    	je     c001971c <Vm::faultHandler(regs*)+0x333>
c00194bf:	e9 01 05 00 00       	jmp    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c00194c4:	80 fa 6f             	cmp    dl,0x6f
c00194c7:	0f 84 8b 03 00 00    	je     c0019858 <Vm::faultHandler(regs*)+0x46f>
c00194cd:	0f 82 0f 03 00 00    	jb     c00197e2 <Vm::faultHandler(regs*)+0x3f9>
c00194d3:	80 fa 9c             	cmp    dl,0x9c
c00194d6:	0f 84 23 01 00 00    	je     c00195ff <Vm::faultHandler(regs*)+0x216>
c00194dc:	e9 e4 04 00 00       	jmp    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c00194e1:	80 fa ec             	cmp    dl,0xec
c00194e4:	0f 84 7f 04 00 00    	je     c0019969 <Vm::faultHandler(regs*)+0x580>
c00194ea:	77 7b                	ja     c0019567 <Vm::faultHandler(regs*)+0x17e>
c00194ec:	80 fa e4             	cmp    dl,0xe4
c00194ef:	0f 84 fe 03 00 00    	je     c00198f3 <Vm::faultHandler(regs*)+0x50a>
c00194f5:	77 53                	ja     c001954a <Vm::faultHandler(regs*)+0x161>
c00194f7:	80 fa cd             	cmp    dl,0xcd
c00194fa:	0f 84 cd 01 00 00    	je     c00196cd <Vm::faultHandler(regs*)+0x2e4>
c0019500:	80 fa cf             	cmp    dl,0xcf
c0019503:	0f 85 bc 04 00 00    	jne    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c0019509:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001950c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001950f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019513:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019516:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001951a:	81 ca 00 02 02 00    	or     edx,0x20200
c0019520:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019523:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019527:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001952d:	66 c1 e8 09          	shr    ax,0x9
c0019531:	83 e0 01             	and    eax,0x1
c0019534:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019537:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001953a:	83 c0 06             	add    eax,0x6
c001953d:	25 ff ff 00 00       	and    eax,0xffff
c0019542:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019545:	e9 77 04 00 00       	jmp    c00199c1 <Vm::faultHandler(regs*)+0x5d8>
c001954a:	80 fa e6             	cmp    dl,0xe6
c001954d:	0f 84 ea 03 00 00    	je     c001993d <Vm::faultHandler(regs*)+0x554>
c0019553:	0f 82 b6 03 00 00    	jb     c001990f <Vm::faultHandler(regs*)+0x526>
c0019559:	80 fa e7             	cmp    dl,0xe7
c001955c:	0f 84 f2 03 00 00    	je     c0019954 <Vm::faultHandler(regs*)+0x56b>
c0019562:	e9 5e 04 00 00       	jmp    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c0019567:	80 fa ef             	cmp    dl,0xef
c001956a:	0f 84 3c 04 00 00    	je     c00199ac <Vm::faultHandler(regs*)+0x5c3>
c0019570:	77 28                	ja     c001959a <Vm::faultHandler(regs*)+0x1b1>
c0019572:	80 fa ed             	cmp    dl,0xed
c0019575:	0f 84 0a 04 00 00    	je     c0019985 <Vm::faultHandler(regs*)+0x59c>
c001957b:	80 fa ee             	cmp    dl,0xee
c001957e:	0f 85 41 04 00 00    	jne    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c0019584:	50                   	push   eax
c0019585:	50                   	push   eax
c0019586:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001958a:	50                   	push   eax
c001958b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001958f:	50                   	push   eax
c0019590:	e8 00 fc ff ff       	call   c0019195 <Vm::outbv(unsigned short, unsigned char)>
c0019595:	e9 0a 04 00 00       	jmp    c00199a4 <Vm::faultHandler(regs*)+0x5bb>
c001959a:	80 fa fa             	cmp    dl,0xfa
c001959d:	0f 84 5d 01 00 00    	je     c0019700 <Vm::faultHandler(regs*)+0x317>
c00195a3:	80 fa fb             	cmp    dl,0xfb
c00195a6:	0f 84 62 01 00 00    	je     c001970e <Vm::faultHandler(regs*)+0x325>
c00195ac:	80 fa f3             	cmp    dl,0xf3
c00195af:	0f 85 10 04 00 00    	jne    c00199c5 <Vm::faultHandler(regs*)+0x5dc>
c00195b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195b8:	e9 c3 fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195c0:	b1 02                	mov    cl,0x2
c00195c2:	e9 b9 fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195ca:	b1 03                	mov    cl,0x3
c00195cc:	e9 af fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195d4:	b1 04                	mov    cl,0x4
c00195d6:	e9 a5 fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195de:	b1 05                	mov    cl,0x5
c00195e0:	e9 9b fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195e8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00195ed:	e9 8e fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195f5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00195fa:	e9 81 fe ff ff       	jmp    c0019480 <Vm::faultHandler(regs*)+0x97>
c00195ff:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019602:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019606:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001960b:	74 30                	je     c001963d <Vm::faultHandler(regs*)+0x254>
c001960d:	83 e9 04             	sub    ecx,0x4
c0019610:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019616:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001961c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001961f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019622:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019628:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001962c:	0f 84 8c 03 00 00    	je     c00199be <Vm::faultHandler(regs*)+0x5d5>
c0019632:	80 ce 02             	or     dh,0x2
c0019635:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019638:	e9 81 03 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c001963d:	83 e9 02             	sub    ecx,0x2
c0019640:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019646:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019649:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001964d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019653:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019657:	74 05                	je     c001965e <Vm::faultHandler(regs*)+0x275>
c0019659:	80 ce 02             	or     dh,0x2
c001965c:	eb 03                	jmp    c0019661 <Vm::faultHandler(regs*)+0x278>
c001965e:	80 e6 fd             	and    dh,0xfd
c0019661:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019665:	e9 54 03 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c001966a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001966f:	74 2a                	je     c001969b <Vm::faultHandler(regs*)+0x2b2>
c0019671:	8b 10                	mov    edx,DWORD PTR [eax]
c0019673:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019679:	81 ca 00 02 02 00    	or     edx,0x20200
c001967f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019682:	8b 00                	mov    eax,DWORD PTR [eax]
c0019684:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001968a:	c1 e8 09             	shr    eax,0x9
c001968d:	83 e0 01             	and    eax,0x1
c0019690:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019693:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019696:	83 c0 04             	add    eax,0x4
c0019699:	eb 25                	jmp    c00196c0 <Vm::faultHandler(regs*)+0x2d7>
c001969b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001969e:	81 ca 00 02 02 00    	or     edx,0x20200
c00196a4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00196a7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00196aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00196b0:	66 c1 e8 09          	shr    ax,0x9
c00196b4:	83 e0 01             	and    eax,0x1
c00196b7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00196ba:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196bd:	83 c0 02             	add    eax,0x2
c00196c0:	25 ff ff 00 00       	and    eax,0xffff
c00196c5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00196c8:	e9 f1 02 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c00196cd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00196d1:	3c ff                	cmp    al,0xff
c00196d3:	75 10                	jne    c00196e5 <Vm::faultHandler(regs*)+0x2fc>
c00196d5:	83 ec 0c             	sub    esp,0xc
c00196d8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00196db:	e8 86 f9 ff ff       	call   c0019066 <Thr::terminateFromIRQ(int)>
c00196e0:	e9 c2 02 00 00       	jmp    c00199a7 <Vm::faultHandler(regs*)+0x5be>
c00196e5:	83 ec 0c             	sub    esp,0xc
c00196e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00196ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196f0:	57                   	push   edi
c00196f1:	50                   	push   eax
c00196f2:	53                   	push   ebx
c00196f3:	e8 f3 fb ff ff       	call   c00192eb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00196f8:	83 c4 20             	add    esp,0x20
c00196fb:	e9 c1 02 00 00       	jmp    c00199c1 <Vm::faultHandler(regs*)+0x5d8>
c0019700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019705:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019709:	e9 b0 02 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c001970e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019713:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019717:	e9 a2 02 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c001971c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019721:	74 0d                	je     c0019730 <Vm::faultHandler(regs*)+0x347>
c0019723:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001972a:	0f 87 e9 02 00 00    	ja     c0019a19 <Vm::faultHandler(regs*)+0x630>
c0019730:	83 ec 0c             	sub    esp,0xc
c0019733:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019736:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001973a:	50                   	push   eax
c001973b:	e8 4f fa ff ff       	call   c001918f <Vm::inbv(unsigned short)>
c0019740:	83 c4 0c             	add    esp,0xc
c0019743:	0f b6 c0             	movzx  eax,al
c0019746:	50                   	push   eax
c0019747:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001974b:	0f b7 c9             	movzx  ecx,cx
c001974e:	50                   	push   eax
c001974f:	51                   	push   ecx
c0019750:	e8 54 fc ff ff       	call   c00193a9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019755:	83 c4 10             	add    esp,0x10
c0019758:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001975b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001975f:	74 03                	je     c0019764 <Vm::faultHandler(regs*)+0x37b>
c0019761:	48                   	dec    eax
c0019762:	eb 01                	jmp    c0019765 <Vm::faultHandler(regs*)+0x37c>
c0019764:	40                   	inc    eax
c0019765:	0f b7 c0             	movzx  eax,ax
c0019768:	eb 70                	jmp    c00197da <Vm::faultHandler(regs*)+0x3f1>
c001976a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001976d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019770:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019775:	74 0c                	je     c0019783 <Vm::faultHandler(regs*)+0x39a>
c0019777:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001977d:	0f 87 96 02 00 00    	ja     c0019a19 <Vm::faultHandler(regs*)+0x630>
c0019783:	0f b7 c9             	movzx  ecx,cx
c0019786:	0f b7 f6             	movzx  esi,si
c0019789:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001978c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019791:	74 20                	je     c00197b3 <Vm::faultHandler(regs*)+0x3ca>
c0019793:	ed                   	in     eax,dx
c0019794:	55                   	push   ebp
c0019795:	50                   	push   eax
c0019796:	51                   	push   ecx
c0019797:	56                   	push   esi
c0019798:	e8 37 fc ff ff       	call   c00193d4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001979d:	83 c4 10             	add    esp,0x10
c00197a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00197a3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197a7:	74 05                	je     c00197ae <Vm::faultHandler(regs*)+0x3c5>
c00197a9:	83 e8 04             	sub    eax,0x4
c00197ac:	eb 27                	jmp    c00197d5 <Vm::faultHandler(regs*)+0x3ec>
c00197ae:	83 c0 04             	add    eax,0x4
c00197b1:	eb 22                	jmp    c00197d5 <Vm::faultHandler(regs*)+0x3ec>
c00197b3:	66 ed                	in     ax,dx
c00197b5:	0f b7 c0             	movzx  eax,ax
c00197b8:	57                   	push   edi
c00197b9:	50                   	push   eax
c00197ba:	51                   	push   ecx
c00197bb:	56                   	push   esi
c00197bc:	e8 fd fb ff ff       	call   c00193be <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00197c1:	83 c4 10             	add    esp,0x10
c00197c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00197c7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197cb:	74 05                	je     c00197d2 <Vm::faultHandler(regs*)+0x3e9>
c00197cd:	83 e8 02             	sub    eax,0x2
c00197d0:	eb 03                	jmp    c00197d5 <Vm::faultHandler(regs*)+0x3ec>
c00197d2:	83 c0 02             	add    eax,0x2
c00197d5:	25 ff ff 00 00       	and    eax,0xffff
c00197da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00197dd:	e9 dc 01 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c00197e2:	49                   	dec    ecx
c00197e3:	80 f9 05             	cmp    cl,0x5
c00197e6:	77 24                	ja     c001980c <Vm::faultHandler(regs*)+0x423>
c00197e8:	0f b6 c9             	movzx  ecx,cl
c00197eb:	ff 24 8d 38 2d 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd2c8]
c00197f2:	0f b7 f5             	movzx  esi,bp
c00197f5:	eb 15                	jmp    c001980c <Vm::faultHandler(regs*)+0x423>
c00197f7:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c00197fb:	eb 0f                	jmp    c001980c <Vm::faultHandler(regs*)+0x423>
c00197fd:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019801:	eb 09                	jmp    c001980c <Vm::faultHandler(regs*)+0x423>
c0019803:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019807:	eb 03                	jmp    c001980c <Vm::faultHandler(regs*)+0x423>
c0019809:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001980c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001980f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019814:	74 0b                	je     c0019821 <Vm::faultHandler(regs*)+0x438>
c0019816:	3d ff ff 00 00       	cmp    eax,0xffff
c001981b:	0f 87 f8 01 00 00    	ja     c0019a19 <Vm::faultHandler(regs*)+0x630>
c0019821:	52                   	push   edx
c0019822:	52                   	push   edx
c0019823:	0f b7 c0             	movzx  eax,ax
c0019826:	50                   	push   eax
c0019827:	56                   	push   esi
c0019828:	e8 48 fb ff ff       	call   c0019375 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001982d:	59                   	pop    ecx
c001982e:	5e                   	pop    esi
c001982f:	0f b6 c0             	movzx  eax,al
c0019832:	50                   	push   eax
c0019833:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019837:	50                   	push   eax
c0019838:	e8 58 f9 ff ff       	call   c0019195 <Vm::outbv(unsigned short, unsigned char)>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019843:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019847:	74 03                	je     c001984c <Vm::faultHandler(regs*)+0x463>
c0019849:	48                   	dec    eax
c001984a:	eb 01                	jmp    c001984d <Vm::faultHandler(regs*)+0x464>
c001984c:	40                   	inc    eax
c001984d:	0f b7 c0             	movzx  eax,ax
c0019850:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019853:	e9 66 01 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c0019858:	49                   	dec    ecx
c0019859:	80 f9 05             	cmp    cl,0x5
c001985c:	77 1f                	ja     c001987d <Vm::faultHandler(regs*)+0x494>
c001985e:	0f b6 c9             	movzx  ecx,cl
c0019861:	ff 24 8d 50 2d 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd2b0]
c0019868:	89 ee                	mov    esi,ebp
c001986a:	eb 11                	jmp    c001987d <Vm::faultHandler(regs*)+0x494>
c001986c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001986f:	eb 0c                	jmp    c001987d <Vm::faultHandler(regs*)+0x494>
c0019871:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019874:	eb 07                	jmp    c001987d <Vm::faultHandler(regs*)+0x494>
c0019876:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019879:	eb 02                	jmp    c001987d <Vm::faultHandler(regs*)+0x494>
c001987b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001987d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019880:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019885:	74 0c                	je     c0019893 <Vm::faultHandler(regs*)+0x4aa>
c0019887:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001988d:	0f 87 86 01 00 00    	ja     c0019a19 <Vm::faultHandler(regs*)+0x630>
c0019893:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019896:	0f b7 d6             	movzx  edx,si
c0019899:	81 e7 00 04 00 00    	and    edi,0x400
c001989f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00198a2:	0f b7 c1             	movzx  eax,cx
c00198a5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198aa:	74 1d                	je     c00198c9 <Vm::faultHandler(regs*)+0x4e0>
c00198ac:	55                   	push   ebp
c00198ad:	55                   	push   ebp
c00198ae:	50                   	push   eax
c00198af:	52                   	push   edx
c00198b0:	e8 e3 fa ff ff       	call   c0019398 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	89 f2                	mov    edx,esi
c00198ba:	ef                   	out    dx,eax
c00198bb:	85 ff                	test   edi,edi
c00198bd:	74 05                	je     c00198c4 <Vm::faultHandler(regs*)+0x4db>
c00198bf:	83 e9 04             	sub    ecx,0x4
c00198c2:	eb 21                	jmp    c00198e5 <Vm::faultHandler(regs*)+0x4fc>
c00198c4:	83 c1 04             	add    ecx,0x4
c00198c7:	eb 1c                	jmp    c00198e5 <Vm::faultHandler(regs*)+0x4fc>
c00198c9:	55                   	push   ebp
c00198ca:	55                   	push   ebp
c00198cb:	50                   	push   eax
c00198cc:	52                   	push   edx
c00198cd:	e8 b4 fa ff ff       	call   c0019386 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	89 f2                	mov    edx,esi
c00198d7:	66 ef                	out    dx,ax
c00198d9:	85 ff                	test   edi,edi
c00198db:	74 05                	je     c00198e2 <Vm::faultHandler(regs*)+0x4f9>
c00198dd:	83 e9 02             	sub    ecx,0x2
c00198e0:	eb 03                	jmp    c00198e5 <Vm::faultHandler(regs*)+0x4fc>
c00198e2:	83 c1 02             	add    ecx,0x2
c00198e5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198eb:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00198ee:	e9 cb 00 00 00       	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c00198f3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00198fa:	83 ec 0c             	sub    esp,0xc
c00198fd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019901:	50                   	push   eax
c0019902:	e8 88 f8 ff ff       	call   c001918f <Vm::inbv(unsigned short)>
c0019907:	0f b6 c0             	movzx  eax,al
c001990a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001990d:	eb 3f                	jmp    c001994e <Vm::faultHandler(regs*)+0x565>
c001990f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019914:	74 07                	je     c001991d <Vm::faultHandler(regs*)+0x534>
c0019916:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001991a:	ed                   	in     eax,dx
c001991b:	eb 14                	jmp    c0019931 <Vm::faultHandler(regs*)+0x548>
c001991d:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019920:	66 31 c9             	xor    cx,cx
c0019923:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019926:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001992a:	66 ed                	in     ax,dx
c001992c:	0f b7 c0             	movzx  eax,ax
c001992f:	09 c8                	or     eax,ecx
c0019931:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019934:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019938:	e9 84 00 00 00       	jmp    c00199c1 <Vm::faultHandler(regs*)+0x5d8>
c001993d:	52                   	push   edx
c001993e:	52                   	push   edx
c001993f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019943:	50                   	push   eax
c0019944:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019948:	50                   	push   eax
c0019949:	e8 47 f8 ff ff       	call   c0019195 <Vm::outbv(unsigned short, unsigned char)>
c001994e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019952:	eb 53                	jmp    c00199a7 <Vm::faultHandler(regs*)+0x5be>
c0019954:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019957:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001995b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019960:	74 03                	je     c0019965 <Vm::faultHandler(regs*)+0x57c>
c0019962:	ef                   	out    dx,eax
c0019963:	eb cf                	jmp    c0019934 <Vm::faultHandler(regs*)+0x54b>
c0019965:	66 ef                	out    dx,ax
c0019967:	eb cb                	jmp    c0019934 <Vm::faultHandler(regs*)+0x54b>
c0019969:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019970:	83 ec 0c             	sub    esp,0xc
c0019973:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019977:	50                   	push   eax
c0019978:	e8 12 f8 ff ff       	call   c001918f <Vm::inbv(unsigned short)>
c001997d:	0f b6 c0             	movzx  eax,al
c0019980:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019983:	eb 1f                	jmp    c00199a4 <Vm::faultHandler(regs*)+0x5bb>
c0019985:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019988:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001998d:	74 03                	je     c0019992 <Vm::faultHandler(regs*)+0x5a9>
c001998f:	ed                   	in     eax,dx
c0019990:	eb 0d                	jmp    c001999f <Vm::faultHandler(regs*)+0x5b6>
c0019992:	66 ed                	in     ax,dx
c0019994:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019997:	66 31 d2             	xor    dx,dx
c001999a:	0f b7 c0             	movzx  eax,ax
c001999d:	09 d0                	or     eax,edx
c001999f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00199a2:	eb 1a                	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c00199a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199a7:	83 c4 10             	add    esp,0x10
c00199aa:	eb 15                	jmp    c00199c1 <Vm::faultHandler(regs*)+0x5d8>
c00199ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00199af:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199b2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199b7:	74 03                	je     c00199bc <Vm::faultHandler(regs*)+0x5d3>
c00199b9:	ef                   	out    dx,eax
c00199ba:	eb 02                	jmp    c00199be <Vm::faultHandler(regs*)+0x5d5>
c00199bc:	66 ef                	out    dx,ax
c00199be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199c1:	b0 01                	mov    al,0x1
c00199c3:	eb 56                	jmp    c0019a1b <Vm::faultHandler(regs*)+0x632>
c00199c5:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c00199c9:	50                   	push   eax
c00199ca:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c00199ce:	50                   	push   eax
c00199cf:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c00199d3:	50                   	push   eax
c00199d4:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c00199d8:	50                   	push   eax
c00199d9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00199dd:	50                   	push   eax
c00199de:	52                   	push   edx
c00199df:	52                   	push   edx
c00199e0:	68 09 2d 02 c0       	push   0xc0022d09
c00199e5:	e8 6f 57 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00199ea:	83 c4 20             	add    esp,0x20
c00199ed:	83 ec 0c             	sub    esp,0xc
c00199f0:	6a 60                	push   0x60
c00199f2:	e8 98 f7 ff ff       	call   c001918f <Vm::inbv(unsigned short)>
c00199f7:	83 c4 10             	add    esp,0x10
c00199fa:	3c 1c                	cmp    al,0x1c
c00199fc:	74 04                	je     c0019a02 <Vm::faultHandler(regs*)+0x619>
c00199fe:	3c 5a                	cmp    al,0x5a
c0019a00:	75 eb                	jne    c00199ed <Vm::faultHandler(regs*)+0x604>
c0019a02:	3c 1c                	cmp    al,0x1c
c0019a04:	74 04                	je     c0019a0a <Vm::faultHandler(regs*)+0x621>
c0019a06:	3c 5a                	cmp    al,0x5a
c0019a08:	75 0f                	jne    c0019a19 <Vm::faultHandler(regs*)+0x630>
c0019a0a:	83 ec 0c             	sub    esp,0xc
c0019a0d:	6a 60                	push   0x60
c0019a0f:	e8 7b f7 ff ff       	call   c001918f <Vm::inbv(unsigned short)>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	eb e9                	jmp    c0019a02 <Vm::faultHandler(regs*)+0x619>
c0019a19:	31 c0                	xor    eax,eax
c0019a1b:	83 c4 1c             	add    esp,0x1c
c0019a1e:	5b                   	pop    ebx
c0019a1f:	5e                   	pop    esi
c0019a20:	5f                   	pop    edi
c0019a21:	5d                   	pop    ebp
c0019a22:	c3                   	ret    
c0019a23:	90                   	nop

c0019a24 <FAT::getName()>:
c0019a24:	b8 68 2d 02 c0       	mov    eax,0xc0022d68
c0019a29:	c3                   	ret    

c0019a2a <FAT::tell(void*, unsigned long long*)>:
c0019a2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a2f:	75 06                	jne    c0019a37 <FAT::tell(void*, unsigned long long*)+0xd>
c0019a31:	b8 04 00 00 00       	mov    eax,0x4
c0019a36:	c3                   	ret    
c0019a37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a3c:	75 06                	jne    c0019a44 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019a3e:	b8 04 00 00 00       	mov    eax,0x4
c0019a43:	c3                   	ret    
c0019a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a48:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019a4b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019a4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a52:	89 01                	mov    DWORD PTR [ecx],eax
c0019a54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a57:	b8 00 00 00 00       	mov    eax,0x0
c0019a5c:	c3                   	ret    
c0019a5d:	90                   	nop

c0019a5e <FAT::stat(void*, unsigned long long*)>:
c0019a5e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a63:	75 06                	jne    c0019a6b <FAT::stat(void*, unsigned long long*)+0xd>
c0019a65:	b8 04 00 00 00       	mov    eax,0x4
c0019a6a:	c3                   	ret    
c0019a6b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a70:	75 06                	jne    c0019a78 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019a72:	b8 04 00 00 00       	mov    eax,0x4
c0019a77:	c3                   	ret    
c0019a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a7c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019a7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019a82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a86:	89 01                	mov    DWORD PTR [ecx],eax
c0019a88:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a8b:	b8 00 00 00 00       	mov    eax,0x0
c0019a90:	c3                   	ret    
c0019a91:	90                   	nop

c0019a92 <FAT::~FAT()>:
c0019a92:	83 ec 0c             	sub    esp,0xc
c0019a95:	ba ec 2d 02 c0       	mov    edx,0xc0022dec
c0019a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a9e:	89 10                	mov    DWORD PTR [eax],edx
c0019aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa4:	83 ec 0c             	sub    esp,0xc
c0019aa7:	50                   	push   eax
c0019aa8:	e8 dd 59 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	90                   	nop
c0019ab1:	83 c4 0c             	add    esp,0xc
c0019ab4:	c3                   	ret    
c0019ab5:	90                   	nop

c0019ab6 <FAT::~FAT()>:
c0019ab6:	83 ec 0c             	sub    esp,0xc
c0019ab9:	83 ec 0c             	sub    esp,0xc
c0019abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ac0:	e8 cd ff ff ff       	call   c0019a92 <FAT::~FAT()>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	83 ec 08             	sub    esp,0x8
c0019acb:	6a 08                	push   0x8
c0019acd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ad1:	e8 5d 55 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0019ad6:	83 c4 10             	add    esp,0x10
c0019ad9:	83 c4 0c             	add    esp,0xc
c0019adc:	c3                   	ret    
c0019add:	90                   	nop

c0019ade <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019ade:	83 ec 1c             	sub    esp,0x1c
c0019ae1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019ae8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019aed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019af1:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019af8:	83 f8 ff             	cmp    eax,0xffffffff
c0019afb:	75 34                	jne    c0019b31 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019afd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b01:	88 c2                	mov    dl,al
c0019b03:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019b08:	01 d0                	add    eax,edx
c0019b0a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019b0e:	8b 15 00 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025700
c0019b14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b18:	89 14 85 20 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda8e0],edx
c0019b1f:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019b24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019b28:	89 14 85 a0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda860],edx
c0019b2f:	eb 17                	jmp    c0019b48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019b31:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b35:	88 c2                	mov    dl,al
c0019b37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b3b:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019b42:	01 d0                	add    eax,edx
c0019b44:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019b48:	83 ec 04             	sub    esp,0x4
c0019b4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019b4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019b53:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019b57:	50                   	push   eax
c0019b58:	e8 be ce fe ff       	call   c0006a1b <f_getlabel>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019b69:	75 07                	jne    c0019b72 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019b6b:	b8 00 00 00 00       	mov    eax,0x0
c0019b70:	eb 05                	jmp    c0019b77 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019b72:	b8 01 00 00 00       	mov    eax,0x1
c0019b77:	83 c4 1c             	add    esp,0x1c
c0019b7a:	c3                   	ret    
c0019b7b:	90                   	nop

c0019b7c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019b7c:	57                   	push   edi
c0019b7d:	83 ec 58             	sub    esp,0x58
c0019b80:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019b88:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b8c:	b8 00 00 00 00       	mov    eax,0x0
c0019b91:	b9 0f 00 00 00       	mov    ecx,0xf
c0019b96:	fc                   	cld    
c0019b97:	89 d7                	mov    edi,edx
c0019b99:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019b9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019b9f:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019ba6:	83 f8 ff             	cmp    eax,0xffffffff
c0019ba9:	75 34                	jne    c0019bdf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019bab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019baf:	88 c2                	mov    dl,al
c0019bb1:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019bb6:	01 d0                	add    eax,edx
c0019bb8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bbc:	8b 15 00 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025700
c0019bc2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019bc6:	89 14 85 20 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda8e0],edx
c0019bcd:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019bd2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019bd6:	89 14 85 a0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda860],edx
c0019bdd:	eb 17                	jmp    c0019bf6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019bdf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019be3:	88 c2                	mov    dl,al
c0019be5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019be9:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019bf0:	01 d0                	add    eax,edx
c0019bf2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bf6:	83 ec 08             	sub    esp,0x8
c0019bf9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019bfd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c01:	50                   	push   eax
c0019c02:	e8 57 6b fe ff       	call   c000075e <strcat>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	83 ec 0c             	sub    esp,0xc
c0019c0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c11:	50                   	push   eax
c0019c12:	e8 f8 cf fe ff       	call   c0006c0f <f_setlabel>
c0019c17:	83 c4 10             	add    esp,0x10
c0019c1a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019c1e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019c23:	75 07                	jne    c0019c2c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019c25:	b8 00 00 00 00       	mov    eax,0x0
c0019c2a:	eb 05                	jmp    c0019c31 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019c2c:	b8 01 00 00 00       	mov    eax,0x1
c0019c31:	83 c4 58             	add    esp,0x58
c0019c34:	5f                   	pop    edi
c0019c35:	c3                   	ret    

c0019c36 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019c36:	83 ec 2c             	sub    esp,0x2c
c0019c39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019c41:	83 ec 08             	sub    esp,0x8
c0019c44:	68 8c 2d 02 c0       	push   0xc0022d8c
c0019c49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c4d:	e8 a6 6a fe ff       	call   c00006f8 <strcmp>
c0019c52:	83 c4 10             	add    esp,0x10
c0019c55:	85 c0                	test   eax,eax
c0019c57:	0f 94 c0             	sete   al
c0019c5a:	84 c0                	test   al,al
c0019c5c:	74 0d                	je     c0019c6b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019c5e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019c66:	e9 a6 00 00 00       	jmp    c0019d11 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019c6b:	83 ec 08             	sub    esp,0x8
c0019c6e:	68 7e 2d 02 c0       	push   0xc0022d7e
c0019c73:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c77:	e8 7c 6a fe ff       	call   c00006f8 <strcmp>
c0019c7c:	83 c4 10             	add    esp,0x10
c0019c7f:	85 c0                	test   eax,eax
c0019c81:	0f 94 c0             	sete   al
c0019c84:	84 c0                	test   al,al
c0019c86:	74 0a                	je     c0019c92 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019c88:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019c90:	eb 7f                	jmp    c0019d11 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019c92:	83 ec 08             	sub    esp,0x8
c0019c95:	68 84 2d 02 c0       	push   0xc0022d84
c0019c9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c9e:	e8 55 6a fe ff       	call   c00006f8 <strcmp>
c0019ca3:	83 c4 10             	add    esp,0x10
c0019ca6:	85 c0                	test   eax,eax
c0019ca8:	0f 94 c0             	sete   al
c0019cab:	84 c0                	test   al,al
c0019cad:	74 0a                	je     c0019cb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019caf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019cb7:	eb 58                	jmp    c0019d11 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019cb9:	83 ec 08             	sub    esp,0x8
c0019cbc:	68 6c 00 02 c0       	push   0xc002006c
c0019cc1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019cc5:	e8 2e 6a fe ff       	call   c00006f8 <strcmp>
c0019cca:	83 c4 10             	add    esp,0x10
c0019ccd:	85 c0                	test   eax,eax
c0019ccf:	0f 94 c0             	sete   al
c0019cd2:	84 c0                	test   al,al
c0019cd4:	74 0a                	je     c0019ce0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019cd6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019cde:	eb 31                	jmp    c0019d11 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019ce0:	83 ec 08             	sub    esp,0x8
c0019ce3:	68 8a 2d 02 c0       	push   0xc0022d8a
c0019ce8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019cec:	e8 07 6a fe ff       	call   c00006f8 <strcmp>
c0019cf1:	83 c4 10             	add    esp,0x10
c0019cf4:	85 c0                	test   eax,eax
c0019cf6:	0f 94 c0             	sete   al
c0019cf9:	84 c0                	test   al,al
c0019cfb:	74 0a                	je     c0019d07 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019cfd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019d05:	eb 0a                	jmp    c0019d11 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019d07:	b8 08 00 00 00       	mov    eax,0x8
c0019d0c:	e9 04 01 00 00       	jmp    c0019e15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019d11:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019d18:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019d1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d21:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019d28:	83 f8 ff             	cmp    eax,0xffffffff
c0019d2b:	75 34                	jne    c0019d61 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019d2d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d31:	88 c2                	mov    dl,al
c0019d33:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019d38:	01 d0                	add    eax,edx
c0019d3a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d3e:	8b 15 00 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025700
c0019d44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d48:	89 14 85 20 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda8e0],edx
c0019d4f:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019d54:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019d58:	89 14 85 a0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda860],edx
c0019d5f:	eb 17                	jmp    c0019d78 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019d61:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d65:	88 c2                	mov    dl,al
c0019d67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d6b:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019d72:	01 d0                	add    eax,edx
c0019d74:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d7c:	88 04 24             	mov    BYTE PTR [esp],al
c0019d7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d87:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019d8f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019d94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	68 00 20 00 00       	push   0x2000
c0019da4:	e8 7e 21 ff ff       	call   c000bf27 <malloc>
c0019da9:	83 c4 10             	add    esp,0x10
c0019dac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019db0:	68 00 20 00 00       	push   0x2000
c0019db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019db9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019dbd:	50                   	push   eax
c0019dbe:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019dc2:	50                   	push   eax
c0019dc3:	e8 92 d2 fe ff       	call   c000705a <f_mkfs>
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dcf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019dd4:	75 07                	jne    c0019ddd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019dd6:	b8 00 00 00 00       	mov    eax,0x0
c0019ddb:	eb 38                	jmp    c0019e15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019ddd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019de2:	75 17                	jne    c0019dfb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019de4:	83 ec 0c             	sub    esp,0xc
c0019de7:	68 bc 2d 02 c0       	push   0xc0022dbc
c0019dec:	e8 68 53 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019df1:	83 c4 10             	add    esp,0x10
c0019df4:	b8 09 00 00 00       	mov    eax,0x9
c0019df9:	eb 1a                	jmp    c0019e15 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dff:	83 ec 08             	sub    esp,0x8
c0019e02:	50                   	push   eax
c0019e03:	68 90 2d 02 c0       	push   0xc0022d90
c0019e08:	e8 4c 53 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	b8 01 00 00 00       	mov    eax,0x1
c0019e15:	83 c4 2c             	add    esp,0x2c
c0019e18:	c3                   	ret    
c0019e19:	90                   	nop

c0019e1a <FAT::tryMount(LogicalDisk*, int)>:
c0019e1a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019e20:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019e25:	83 f8 14             	cmp    eax,0x14
c0019e28:	75 17                	jne    c0019e41 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019e2a:	83 ec 0c             	sub    esp,0xc
c0019e2d:	68 a2 2d 02 c0       	push   0xc0022da2
c0019e32:	e8 17 b7 ff ff       	call   c001554e <Krnl::panic(char const*)>
c0019e37:	83 c4 10             	add    esp,0x10
c0019e3a:	b0 00                	mov    al,0x0
c0019e3c:	e9 d7 01 00 00       	jmp    c001a018 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019e41:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019e48:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019e4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019e54:	3d 00 02 00 00       	cmp    eax,0x200
c0019e59:	74 07                	je     c0019e62 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019e5b:	b0 00                	mov    al,0x0
c0019e5d:	e9 b6 01 00 00       	jmp    c001a018 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019e62:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019e6a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019e71:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c0019e78:	83 f8 ff             	cmp    eax,0xffffffff
c0019e7b:	74 07                	je     c0019e84 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019e7d:	b0 01                	mov    al,0x1
c0019e7f:	e9 94 01 00 00       	jmp    c001a018 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019e84:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019e8e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019e96:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019e9d:	88 c2                	mov    dl,al
c0019e9f:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019ea4:	01 d0                	add    eax,edx
c0019ea6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019ead:	8b 15 00 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025700
c0019eb3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019eba:	89 14 85 20 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda8e0],edx
c0019ec1:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c0019ec6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019ecd:	89 14 85 a0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda860],edx
c0019ed4:	83 ec 0c             	sub    esp,0xc
c0019ed7:	68 54 02 00 00       	push   0x254
c0019edc:	e8 46 20 ff ff       	call   c000bf27 <malloc>
c0019ee1:	83 c4 10             	add    esp,0x10
c0019ee4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019eeb:	83 ec 04             	sub    esp,0x4
c0019eee:	6a 00                	push   0x0
c0019ef0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019ef7:	50                   	push   eax
c0019ef8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019eff:	e8 45 ad fe ff       	call   c0004c49 <f_mount>
c0019f04:	83 c4 10             	add    esp,0x10
c0019f07:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019f0e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019f16:	74 19                	je     c0019f31 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019f22:	e8 20 20 ff ff       	call   c000bf47 <rfree>
c0019f27:	83 c4 10             	add    esp,0x10
c0019f2a:	b0 00                	mov    al,0x0
c0019f2c:	e9 e7 00 00 00       	jmp    c001a018 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019f31:	83 ec 04             	sub    esp,0x4
c0019f34:	68 00 01 00 00       	push   0x100
c0019f39:	6a 00                	push   0x0
c0019f3b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019f42:	50                   	push   eax
c0019f43:	e8 c0 66 fe ff       	call   c0000608 <memset>
c0019f48:	83 c4 10             	add    esp,0x10
c0019f4b:	83 ec 08             	sub    esp,0x8
c0019f4e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019f55:	50                   	push   eax
c0019f56:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019f5d:	50                   	push   eax
c0019f5e:	e8 fb 67 fe ff       	call   c000075e <strcat>
c0019f63:	83 c4 10             	add    esp,0x10
c0019f66:	83 ec 08             	sub    esp,0x8
c0019f69:	68 b0 2d 02 c0       	push   0xc0022db0
c0019f6e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019f75:	50                   	push   eax
c0019f76:	e8 e3 67 fe ff       	call   c000075e <strcat>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	83 ec 04             	sub    esp,0x4
c0019f81:	6a 01                	push   0x1
c0019f83:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019f8a:	50                   	push   eax
c0019f8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f8f:	50                   	push   eax
c0019f90:	e8 16 ad fe ff       	call   c0004cab <f_open>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019f9f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019fa6:	85 c0                	test   eax,eax
c0019fa8:	74 0a                	je     c0019fb4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019faa:	78 2d                	js     c0019fd9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019fac:	83 e8 04             	sub    eax,0x4
c0019faf:	83 f8 01             	cmp    eax,0x1
c0019fb2:	77 25                	ja     c0019fd9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019fb4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019fbc:	83 ec 0c             	sub    esp,0xc
c0019fbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019fc3:	50                   	push   eax
c0019fc4:	e8 34 b8 fe ff       	call   c00057fd <f_close>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	90                   	nop
c0019fcd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019fd5:	74 3a                	je     c001a011 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019fd7:	eb 2d                	jmp    c001a006 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019fd9:	83 ec 0c             	sub    esp,0xc
c0019fdc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019fe3:	e8 5f 1f ff ff       	call   c000bf47 <rfree>
c0019fe8:	83 c4 10             	add    esp,0x10
c0019feb:	83 ec 04             	sub    esp,0x4
c0019fee:	6a 00                	push   0x0
c0019ff0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019ff7:	50                   	push   eax
c0019ff8:	6a 00                	push   0x0
c0019ffa:	e8 4a ac fe ff       	call   c0004c49 <f_mount>
c0019fff:	83 c4 10             	add    esp,0x10
c001a002:	b0 00                	mov    al,0x0
c001a004:	eb 12                	jmp    c001a018 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a006:	a1 00 57 02 c0       	mov    eax,ds:0xc0025700
c001a00b:	40                   	inc    eax
c001a00c:	a3 00 57 02 c0       	mov    ds:0xc0025700,eax
c001a011:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a018:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a01e:	c3                   	ret    
c001a01f:	90                   	nop

c001a020 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a020:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a026:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a02e:	74 0a                	je     c001a03a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a030:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a038:	75 0a                	jne    c001a044 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a03a:	b8 04 00 00 00       	mov    eax,0x4
c001a03f:	e9 dd 00 00 00       	jmp    c001a121 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a044:	83 ec 08             	sub    esp,0x8
c001a047:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a04e:	50                   	push   eax
c001a04f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a056:	e8 5a bd fe ff       	call   c0005db5 <f_readdir>
c001a05b:	83 c4 10             	add    esp,0x10
c001a05e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a065:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a06b:	83 ec 0c             	sub    esp,0xc
c001a06e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a075:	83 c0 1a             	add    eax,0x1a
c001a078:	50                   	push   eax
c001a079:	e8 a7 65 fe ff       	call   c0000625 <strlen>
c001a07e:	83 c4 10             	add    esp,0x10
c001a081:	ba 00 00 00 00       	mov    edx,0x0
c001a086:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a08a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a08e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a095:	25 ff 00 00 00       	and    eax,0xff
c001a09a:	83 e0 10             	and    eax,0x10
c001a09d:	74 07                	je     c001a0a6 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a09f:	b8 02 00 00 00       	mov    eax,0x2
c001a0a4:	eb 05                	jmp    c001a0ab <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a0a6:	b8 01 00 00 00       	mov    eax,0x1
c001a0ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0af:	83 ec 08             	sub    esp,0x8
c001a0b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a0b9:	83 c0 1a             	add    eax,0x1a
c001a0bc:	50                   	push   eax
c001a0bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a0c1:	83 c0 10             	add    eax,0x10
c001a0c4:	50                   	push   eax
c001a0c5:	e8 dd 65 fe ff       	call   c00006a7 <strcpy>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	83 ec 04             	sub    esp,0x4
c001a0d0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a0d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0db:	50                   	push   eax
c001a0dc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a0e3:	e8 ea 64 fe ff       	call   c00005d2 <memcpy>
c001a0e8:	83 c4 10             	add    esp,0x10
c001a0eb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a0f2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a0f8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a0ff:	84 c0                	test   al,al
c001a101:	75 07                	jne    c001a10a <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a103:	b8 07 00 00 00       	mov    eax,0x7
c001a108:	eb 17                	jmp    c001a121 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a10a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a111:	85 c0                	test   eax,eax
c001a113:	75 07                	jne    c001a11c <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a115:	b8 00 00 00 00       	mov    eax,0x0
c001a11a:	eb 05                	jmp    c001a121 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a11c:	b8 01 00 00 00       	mov    eax,0x1
c001a121:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a127:	c3                   	ret    

c001a128 <FAT::read(void*, unsigned long, void*, int*)>:
c001a128:	83 ec 1c             	sub    esp,0x1c
c001a12b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a130:	74 07                	je     c001a139 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a132:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a137:	75 07                	jne    c001a140 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a139:	b8 04 00 00 00       	mov    eax,0x4
c001a13e:	eb 3d                	jmp    c001a17d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a140:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a144:	50                   	push   eax
c001a145:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a149:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a14d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a151:	e8 91 af fe ff       	call   c00050e7 <f_read>
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a15d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a161:	89 c2                	mov    edx,eax
c001a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a167:	89 10                	mov    DWORD PTR [eax],edx
c001a169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a16d:	85 c0                	test   eax,eax
c001a16f:	75 07                	jne    c001a178 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a171:	b8 00 00 00 00       	mov    eax,0x0
c001a176:	eb 05                	jmp    c001a17d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a178:	b8 01 00 00 00       	mov    eax,0x1
c001a17d:	83 c4 1c             	add    esp,0x1c
c001a180:	c3                   	ret    
c001a181:	90                   	nop

c001a182 <FAT::write(void*, unsigned long, void*, int*)>:
c001a182:	83 ec 1c             	sub    esp,0x1c
c001a185:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a18a:	74 07                	je     c001a193 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a18c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a191:	75 07                	jne    c001a19a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a193:	b8 04 00 00 00       	mov    eax,0x4
c001a198:	eb 3d                	jmp    c001a1d7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a19a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a19e:	50                   	push   eax
c001a19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a1a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1ab:	e8 b7 b1 fe ff       	call   c0005367 <f_write>
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1bb:	89 c2                	mov    edx,eax
c001a1bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1c1:	89 10                	mov    DWORD PTR [eax],edx
c001a1c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1c7:	85 c0                	test   eax,eax
c001a1c9:	75 07                	jne    c001a1d2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a1cb:	b8 00 00 00 00       	mov    eax,0x0
c001a1d0:	eb 05                	jmp    c001a1d7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a1d2:	b8 01 00 00 00       	mov    eax,0x1
c001a1d7:	83 c4 1c             	add    esp,0x1c
c001a1da:	c3                   	ret    
c001a1db:	90                   	nop

c001a1dc <FAT::close(void*)>:
c001a1dc:	83 ec 1c             	sub    esp,0x1c
c001a1df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a1e4:	75 07                	jne    c001a1ed <FAT::close(void*)+0x11>
c001a1e6:	b8 04 00 00 00       	mov    eax,0x4
c001a1eb:	eb 36                	jmp    c001a223 <FAT::close(void*)+0x47>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1f4:	e8 04 b6 fe ff       	call   c00057fd <f_close>
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a200:	83 ec 0c             	sub    esp,0xc
c001a203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a207:	e8 2b 1d ff ff       	call   c000bf37 <free>
c001a20c:	83 c4 10             	add    esp,0x10
c001a20f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a213:	85 c0                	test   eax,eax
c001a215:	75 07                	jne    c001a21e <FAT::close(void*)+0x42>
c001a217:	b8 00 00 00 00       	mov    eax,0x0
c001a21c:	eb 05                	jmp    c001a223 <FAT::close(void*)+0x47>
c001a21e:	b8 01 00 00 00       	mov    eax,0x1
c001a223:	83 c4 1c             	add    esp,0x1c
c001a226:	c3                   	ret    
c001a227:	90                   	nop

c001a228 <FAT::closeDir(void*)>:
c001a228:	83 ec 1c             	sub    esp,0x1c
c001a22b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a230:	75 07                	jne    c001a239 <FAT::closeDir(void*)+0x11>
c001a232:	b8 04 00 00 00       	mov    eax,0x4
c001a237:	eb 36                	jmp    c001a26f <FAT::closeDir(void*)+0x47>
c001a239:	83 ec 0c             	sub    esp,0xc
c001a23c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a240:	e8 4e bb fe ff       	call   c0005d93 <f_closedir>
c001a245:	83 c4 10             	add    esp,0x10
c001a248:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a253:	e8 df 1c ff ff       	call   c000bf37 <free>
c001a258:	83 c4 10             	add    esp,0x10
c001a25b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a25f:	85 c0                	test   eax,eax
c001a261:	75 07                	jne    c001a26a <FAT::closeDir(void*)+0x42>
c001a263:	b8 00 00 00 00       	mov    eax,0x0
c001a268:	eb 05                	jmp    c001a26f <FAT::closeDir(void*)+0x47>
c001a26a:	b8 01 00 00 00       	mov    eax,0x1
c001a26f:	83 c4 1c             	add    esp,0x1c
c001a272:	c3                   	ret    
c001a273:	90                   	nop

c001a274 <FAT::seek(void*, unsigned long long)>:
c001a274:	83 ec 2c             	sub    esp,0x2c
c001a277:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a27b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a27f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a287:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a28c:	75 07                	jne    c001a295 <FAT::seek(void*, unsigned long long)+0x21>
c001a28e:	b8 04 00 00 00       	mov    eax,0x4
c001a293:	eb 2f                	jmp    c001a2c4 <FAT::seek(void*, unsigned long long)+0x50>
c001a295:	83 ec 04             	sub    esp,0x4
c001a298:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a29c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a2a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a2a4:	e8 83 b5 fe ff       	call   c000582c <f_lseek>
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2b4:	85 c0                	test   eax,eax
c001a2b6:	75 07                	jne    c001a2bf <FAT::seek(void*, unsigned long long)+0x4b>
c001a2b8:	b8 00 00 00 00       	mov    eax,0x0
c001a2bd:	eb 05                	jmp    c001a2c4 <FAT::seek(void*, unsigned long long)+0x50>
c001a2bf:	b8 01 00 00 00       	mov    eax,0x1
c001a2c4:	83 c4 2c             	add    esp,0x2c
c001a2c7:	c3                   	ret    

c001a2c8 <fatWrapperReadDisk>:
c001a2c8:	83 ec 1c             	sub    esp,0x1c
c001a2cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a2d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2e2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a2e6:	25 ff 00 00 00       	and    eax,0xff
c001a2eb:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c001a2f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2fd:	52                   	push   edx
c001a2fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a302:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a306:	50                   	push   eax
c001a307:	e8 6e 80 ff ff       	call   c001237a <LogicalDisk::read(unsigned long long, int, void*)>
c001a30c:	83 c4 20             	add    esp,0x20
c001a30f:	83 c4 1c             	add    esp,0x1c
c001a312:	c3                   	ret    

c001a313 <fatWrapperWriteDisk>:
c001a313:	83 ec 1c             	sub    esp,0x1c
c001a316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a31a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a31e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a322:	89 04 24             	mov    DWORD PTR [esp],eax
c001a325:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a329:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a32d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a331:	25 ff 00 00 00       	and    eax,0xff
c001a336:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c001a33d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a341:	83 ec 0c             	sub    esp,0xc
c001a344:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a348:	52                   	push   edx
c001a349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a34d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a351:	50                   	push   eax
c001a352:	e8 8f 80 ff ff       	call   c00123e6 <LogicalDisk::write(unsigned long long, int, void*)>
c001a357:	83 c4 20             	add    esp,0x20
c001a35a:	83 c4 1c             	add    esp,0x1c
c001a35d:	c3                   	ret    

c001a35e <fatWrapperIoctl>:
c001a35e:	53                   	push   ebx
c001a35f:	83 ec 28             	sub    esp,0x28
c001a362:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a366:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a36a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a36e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a372:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a377:	75 35                	jne    c001a3ae <fatWrapperIoctl+0x50>
c001a379:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a37d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a381:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a385:	25 ff 00 00 00       	and    eax,0xff
c001a38a:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c001a391:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a397:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a39d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3a1:	66 89 02             	mov    WORD PTR [edx],ax
c001a3a4:	b8 00 00 00 00       	mov    eax,0x0
c001a3a9:	e9 bb 00 00 00       	jmp    c001a469 <fatWrapperIoctl+0x10b>
c001a3ae:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a3b3:	75 73                	jne    c001a428 <fatWrapperIoctl+0xca>
c001a3b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3bd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a3c1:	25 ff 00 00 00       	and    eax,0xff
c001a3c6:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c001a3cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a3d3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a3d9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a3df:	89 c8                	mov    eax,ecx
c001a3e1:	89 da                	mov    edx,ebx
c001a3e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a3e7:	c1 e0 0a             	shl    eax,0xa
c001a3ea:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a3ee:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a3f4:	8b 0c 8d 80 48 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb780]
c001a3fb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a401:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a407:	89 cb                	mov    ebx,ecx
c001a409:	c1 fb 1f             	sar    ebx,0x1f
c001a40c:	53                   	push   ebx
c001a40d:	51                   	push   ecx
c001a40e:	52                   	push   edx
c001a40f:	50                   	push   eax
c001a410:	e8 07 4c 00 00       	call   c001f01c <__udivdi3>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a41c:	89 01                	mov    DWORD PTR [ecx],eax
c001a41e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a421:	b8 00 00 00 00       	mov    eax,0x0
c001a426:	eb 41                	jmp    c001a469 <fatWrapperIoctl+0x10b>
c001a428:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a42d:	75 07                	jne    c001a436 <fatWrapperIoctl+0xd8>
c001a42f:	b8 00 00 00 00       	mov    eax,0x0
c001a434:	eb 33                	jmp    c001a469 <fatWrapperIoctl+0x10b>
c001a436:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a43b:	75 19                	jne    c001a456 <fatWrapperIoctl+0xf8>
c001a43d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a441:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a445:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a449:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a44f:	b8 00 00 00 00       	mov    eax,0x0
c001a454:	eb 13                	jmp    c001a469 <fatWrapperIoctl+0x10b>
c001a456:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a45b:	75 07                	jne    c001a464 <fatWrapperIoctl+0x106>
c001a45d:	b8 00 00 00 00       	mov    eax,0x0
c001a462:	eb 05                	jmp    c001a469 <fatWrapperIoctl+0x10b>
c001a464:	b8 04 00 00 00       	mov    eax,0x4
c001a469:	83 c4 28             	add    esp,0x28
c001a46c:	5b                   	pop    ebx
c001a46d:	c3                   	ret    

c001a46e <FAT::FAT()>:
c001a46e:	83 ec 1c             	sub    esp,0x1c
c001a471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a475:	83 ec 0c             	sub    esp,0xc
c001a478:	50                   	push   eax
c001a479:	e8 e8 4f ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001a47e:	83 c4 10             	add    esp,0x10
c001a481:	ba ec 2d 02 c0       	mov    edx,0xc0022dec
c001a486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a48a:	89 10                	mov    DWORD PTR [eax],edx
c001a48c:	c7 05 00 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025700,0x0
c001a496:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a49e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a4a3:	7f 15                	jg     c001a4ba <FAT::FAT()+0x4c>
c001a4a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4a9:	c7 04 85 20 57 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda8e0],0xffffffff
c001a4b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a4b8:	eb e4                	jmp    c001a49e <FAT::FAT()+0x30>
c001a4ba:	90                   	nop
c001a4bb:	83 c4 1c             	add    esp,0x1c
c001a4be:	c3                   	ret    
c001a4bf:	90                   	nop

c001a4c0 <FAT::fixFilepath(char*)>:
c001a4c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a4c6:	3c 40                	cmp    al,0x40
c001a4c8:	7e 2c                	jle    c001a4f6 <FAT::fixFilepath(char*)+0x36>
c001a4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a4d0:	83 e8 41             	sub    eax,0x41
c001a4d3:	88 c2                	mov    dl,al
c001a4d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4d9:	88 10                	mov    BYTE PTR [eax],dl
c001a4db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4df:	8a 00                	mov    al,BYTE PTR [eax]
c001a4e1:	0f be c0             	movsx  eax,al
c001a4e4:	8b 04 85 20 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda8e0]
c001a4eb:	83 c0 30             	add    eax,0x30
c001a4ee:	88 c2                	mov    dl,al
c001a4f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4f4:	88 10                	mov    BYTE PTR [eax],dl
c001a4f6:	90                   	nop
c001a4f7:	c3                   	ret    

c001a4f8 <FAT::open(char const*, void**, FileOpenMode)>:
c001a4f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a506:	74 0a                	je     c001a512 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a508:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a510:	75 0a                	jne    c001a51c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a512:	b8 04 00 00 00       	mov    eax,0x4
c001a517:	e9 00 01 00 00       	jmp    c001a61c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a51c:	83 ec 08             	sub    esp,0x8
c001a51f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a526:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a52a:	50                   	push   eax
c001a52b:	e8 77 61 fe ff       	call   c00006a7 <strcpy>
c001a530:	83 c4 10             	add    esp,0x10
c001a533:	83 ec 08             	sub    esp,0x8
c001a536:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a53a:	50                   	push   eax
c001a53b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a542:	e8 79 ff ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a547:	83 c4 10             	add    esp,0x10
c001a54a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a552:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a559:	83 e0 01             	and    eax,0x1
c001a55c:	74 08                	je     c001a566 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a55e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a566:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a56d:	83 e0 04             	and    eax,0x4
c001a570:	74 10                	je     c001a582 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a572:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a57a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a582:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a589:	83 e0 02             	and    eax,0x2
c001a58c:	74 08                	je     c001a596 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a58e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a596:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a59d:	83 e0 08             	and    eax,0x8
c001a5a0:	74 08                	je     c001a5aa <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a5a2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a5aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a5b1:	83 e0 10             	and    eax,0x10
c001a5b4:	74 08                	je     c001a5be <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a5b6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	68 50 02 00 00       	push   0x250
c001a5c6:	e8 5c 19 ff ff       	call   c000bf27 <malloc>
c001a5cb:	83 c4 10             	add    esp,0x10
c001a5ce:	89 c2                	mov    edx,eax
c001a5d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5d7:	89 10                	mov    DWORD PTR [eax],edx
c001a5d9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a5e0:	31 d2                	xor    edx,edx
c001a5e2:	88 c2                	mov    dl,al
c001a5e4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5ed:	83 ec 04             	sub    esp,0x4
c001a5f0:	52                   	push   edx
c001a5f1:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a5f5:	52                   	push   edx
c001a5f6:	50                   	push   eax
c001a5f7:	e8 af a6 fe ff       	call   c0004cab <f_open>
c001a5fc:	83 c4 10             	add    esp,0x10
c001a5ff:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a606:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a60e:	74 07                	je     c001a617 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001a610:	b8 01 00 00 00       	mov    eax,0x1
c001a615:	eb 05                	jmp    c001a61c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a617:	b8 00 00 00 00       	mov    eax,0x0
c001a61c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a622:	c3                   	ret    
c001a623:	90                   	nop

c001a624 <FAT::openDir(char const*, void**)>:
c001a624:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a62a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a632:	74 0a                	je     c001a63e <FAT::openDir(char const*, void**)+0x1a>
c001a634:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a63c:	75 07                	jne    c001a645 <FAT::openDir(char const*, void**)+0x21>
c001a63e:	b8 04 00 00 00       	mov    eax,0x4
c001a643:	eb 7d                	jmp    c001a6c2 <FAT::openDir(char const*, void**)+0x9e>
c001a645:	83 ec 08             	sub    esp,0x8
c001a648:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a64f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a653:	50                   	push   eax
c001a654:	e8 4e 60 fe ff       	call   c00006a7 <strcpy>
c001a659:	83 c4 10             	add    esp,0x10
c001a65c:	83 ec 08             	sub    esp,0x8
c001a65f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a663:	50                   	push   eax
c001a664:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a66b:	e8 50 fe ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a670:	83 c4 10             	add    esp,0x10
c001a673:	83 ec 0c             	sub    esp,0xc
c001a676:	6a 4c                	push   0x4c
c001a678:	e8 aa 18 ff ff       	call   c000bf27 <malloc>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	89 c2                	mov    edx,eax
c001a682:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a689:	89 10                	mov    DWORD PTR [eax],edx
c001a68b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a692:	8b 00                	mov    eax,DWORD PTR [eax]
c001a694:	83 ec 08             	sub    esp,0x8
c001a697:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a69b:	52                   	push   edx
c001a69c:	50                   	push   eax
c001a69d:	e8 ef b5 fe ff       	call   c0005c91 <f_opendir>
c001a6a2:	83 c4 10             	add    esp,0x10
c001a6a5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a6ac:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a6b4:	74 07                	je     c001a6bd <FAT::openDir(char const*, void**)+0x99>
c001a6b6:	b8 01 00 00 00       	mov    eax,0x1
c001a6bb:	eb 05                	jmp    c001a6c2 <FAT::openDir(char const*, void**)+0x9e>
c001a6bd:	b8 00 00 00 00       	mov    eax,0x0
c001a6c2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6c8:	c3                   	ret    
c001a6c9:	90                   	nop

c001a6ca <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a6ca:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a6d0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a6d8:	75 0a                	jne    c001a6e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a6da:	b8 04 00 00 00       	mov    eax,0x4
c001a6df:	e9 cb 00 00 00       	jmp    c001a7af <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a6e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a6ec:	75 0a                	jne    c001a6f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a6ee:	b8 04 00 00 00       	mov    eax,0x4
c001a6f3:	e9 b7 00 00 00       	jmp    c001a7af <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a6f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a700:	75 0a                	jne    c001a70c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a702:	b8 04 00 00 00       	mov    eax,0x4
c001a707:	e9 a3 00 00 00       	jmp    c001a7af <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a70c:	83 ec 08             	sub    esp,0x8
c001a70f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a716:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a71d:	50                   	push   eax
c001a71e:	e8 84 5f fe ff       	call   c00006a7 <strcpy>
c001a723:	83 c4 10             	add    esp,0x10
c001a726:	83 ec 08             	sub    esp,0x8
c001a729:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a730:	50                   	push   eax
c001a731:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a738:	e8 83 fd ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	83 ec 08             	sub    esp,0x8
c001a743:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a747:	50                   	push   eax
c001a748:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a74f:	50                   	push   eax
c001a750:	e8 fb b6 fe ff       	call   c0005e50 <f_stat>
c001a755:	83 c4 10             	add    esp,0x10
c001a758:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a75f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a766:	85 c0                	test   eax,eax
c001a768:	74 07                	je     c001a771 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001a76a:	83 f8 04             	cmp    eax,0x4
c001a76d:	74 34                	je     c001a7a3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001a76f:	eb 39                	jmp    c001a7aa <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a771:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a775:	25 ff 00 00 00       	and    eax,0xff
c001a77a:	83 e0 10             	and    eax,0x10
c001a77d:	0f 95 c2             	setne  dl
c001a780:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a787:	88 10                	mov    BYTE PTR [eax],dl
c001a789:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a78c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a790:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a797:	89 01                	mov    DWORD PTR [ecx],eax
c001a799:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a79c:	b8 00 00 00 00       	mov    eax,0x0
c001a7a1:	eb 0c                	jmp    c001a7af <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a7a3:	b8 02 00 00 00       	mov    eax,0x2
c001a7a8:	eb 05                	jmp    c001a7af <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a7aa:	b8 01 00 00 00       	mov    eax,0x1
c001a7af:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a7b5:	c3                   	ret    

c001a7b6 <FAT::unlink(char const*)>:
c001a7b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7bc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7c4:	75 07                	jne    c001a7cd <FAT::unlink(char const*)+0x17>
c001a7c6:	b8 04 00 00 00       	mov    eax,0x4
c001a7cb:	eb 5c                	jmp    c001a829 <FAT::unlink(char const*)+0x73>
c001a7cd:	83 ec 08             	sub    esp,0x8
c001a7d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7db:	50                   	push   eax
c001a7dc:	e8 c6 5e fe ff       	call   c00006a7 <strcpy>
c001a7e1:	83 c4 10             	add    esp,0x10
c001a7e4:	83 ec 08             	sub    esp,0x8
c001a7e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7eb:	50                   	push   eax
c001a7ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7f3:	e8 c8 fc ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	83 ec 0c             	sub    esp,0xc
c001a7fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a802:	50                   	push   eax
c001a803:	e8 b7 b9 fe ff       	call   c00061bf <f_unlink>
c001a808:	83 c4 10             	add    esp,0x10
c001a80b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a812:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a819:	85 c0                	test   eax,eax
c001a81b:	75 07                	jne    c001a824 <FAT::unlink(char const*)+0x6e>
c001a81d:	b8 00 00 00 00       	mov    eax,0x0
c001a822:	eb 05                	jmp    c001a829 <FAT::unlink(char const*)+0x73>
c001a824:	b8 01 00 00 00       	mov    eax,0x1
c001a829:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a82f:	c3                   	ret    

c001a830 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a830:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a836:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a83d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a844:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a84c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a854:	75 0a                	jne    c001a860 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a856:	b8 04 00 00 00       	mov    eax,0x4
c001a85b:	e9 43 01 00 00       	jmp    c001a9a3 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001a860:	83 ec 08             	sub    esp,0x8
c001a863:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a86a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a86e:	50                   	push   eax
c001a86f:	e8 33 5e fe ff       	call   c00006a7 <strcpy>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	83 ec 08             	sub    esp,0x8
c001a87a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a87e:	50                   	push   eax
c001a87f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a886:	e8 35 fc ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a88b:	83 c4 10             	add    esp,0x10
c001a88e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a896:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a89e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a8a2:	25 ff 00 00 00       	and    eax,0xff
c001a8a7:	83 e0 01             	and    eax,0x1
c001a8aa:	74 08                	je     c001a8b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001a8ac:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a8b4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a8b8:	25 ff 00 00 00       	and    eax,0xff
c001a8bd:	83 e0 02             	and    eax,0x2
c001a8c0:	74 08                	je     c001a8ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001a8c2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a8ca:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a8ce:	25 ff 00 00 00       	and    eax,0xff
c001a8d3:	83 e0 04             	and    eax,0x4
c001a8d6:	74 08                	je     c001a8e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001a8d8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a8e0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a8e4:	25 ff 00 00 00       	and    eax,0xff
c001a8e9:	83 e0 08             	and    eax,0x8
c001a8ec:	74 08                	je     c001a8f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001a8ee:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a8f6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8fa:	25 ff 00 00 00       	and    eax,0xff
c001a8ff:	83 e0 01             	and    eax,0x1
c001a902:	74 08                	je     c001a90c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001a904:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a90c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a910:	25 ff 00 00 00       	and    eax,0xff
c001a915:	83 e0 02             	and    eax,0x2
c001a918:	74 08                	je     c001a922 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001a91a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a922:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a926:	25 ff 00 00 00       	and    eax,0xff
c001a92b:	83 e0 04             	and    eax,0x4
c001a92e:	74 08                	je     c001a938 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001a930:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a938:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a93c:	25 ff 00 00 00       	and    eax,0xff
c001a941:	83 e0 08             	and    eax,0x8
c001a944:	74 08                	je     c001a94e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001a946:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a94e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a955:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a95c:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a963:	31 d2                	xor    edx,edx
c001a965:	88 c2                	mov    dl,al
c001a967:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a96e:	25 ff 00 00 00       	and    eax,0xff
c001a973:	83 ec 04             	sub    esp,0x4
c001a976:	52                   	push   edx
c001a977:	50                   	push   eax
c001a978:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a97c:	50                   	push   eax
c001a97d:	e8 dd be fe ff       	call   c000685f <f_chmod>
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a98c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a993:	85 c0                	test   eax,eax
c001a995:	75 07                	jne    c001a99e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001a997:	b8 00 00 00 00       	mov    eax,0x0
c001a99c:	eb 05                	jmp    c001a9a3 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001a99e:	b8 01 00 00 00       	mov    eax,0x1
c001a9a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a9a9:	c3                   	ret    

c001a9aa <FAT::rename(char const*, char const*)>:
c001a9aa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a9b0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a9b8:	74 0a                	je     c001a9c4 <FAT::rename(char const*, char const*)+0x1a>
c001a9ba:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a9c2:	75 0a                	jne    c001a9ce <FAT::rename(char const*, char const*)+0x24>
c001a9c4:	b8 04 00 00 00       	mov    eax,0x4
c001a9c9:	e9 98 00 00 00       	jmp    c001aa66 <FAT::rename(char const*, char const*)+0xbc>
c001a9ce:	83 ec 08             	sub    esp,0x8
c001a9d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9d8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a9df:	50                   	push   eax
c001a9e0:	e8 c2 5c fe ff       	call   c00006a7 <strcpy>
c001a9e5:	83 c4 10             	add    esp,0x10
c001a9e8:	83 ec 08             	sub    esp,0x8
c001a9eb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a9f2:	50                   	push   eax
c001a9f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9fa:	e8 c1 fa ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a9ff:	83 c4 10             	add    esp,0x10
c001aa02:	83 ec 08             	sub    esp,0x8
c001aa05:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aa0c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa10:	50                   	push   eax
c001aa11:	e8 91 5c fe ff       	call   c00006a7 <strcpy>
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	83 ec 08             	sub    esp,0x8
c001aa1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa20:	50                   	push   eax
c001aa21:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa28:	e8 93 fa ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	83 ec 08             	sub    esp,0x8
c001aa33:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa37:	50                   	push   eax
c001aa38:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa3f:	50                   	push   eax
c001aa40:	e8 27 bb fe ff       	call   c000656c <f_rename>
c001aa45:	83 c4 10             	add    esp,0x10
c001aa48:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aa4f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aa56:	85 c0                	test   eax,eax
c001aa58:	75 07                	jne    c001aa61 <FAT::rename(char const*, char const*)+0xb7>
c001aa5a:	b8 00 00 00 00       	mov    eax,0x0
c001aa5f:	eb 05                	jmp    c001aa66 <FAT::rename(char const*, char const*)+0xbc>
c001aa61:	b8 01 00 00 00       	mov    eax,0x1
c001aa66:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aa6c:	c3                   	ret    
c001aa6d:	90                   	nop

c001aa6e <FAT::mkdir(char const*)>:
c001aa6e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa74:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa7c:	75 07                	jne    c001aa85 <FAT::mkdir(char const*)+0x17>
c001aa7e:	b8 04 00 00 00       	mov    eax,0x4
c001aa83:	eb 5c                	jmp    c001aae1 <FAT::mkdir(char const*)+0x73>
c001aa85:	83 ec 08             	sub    esp,0x8
c001aa88:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa93:	50                   	push   eax
c001aa94:	e8 0e 5c fe ff       	call   c00006a7 <strcpy>
c001aa99:	83 c4 10             	add    esp,0x10
c001aa9c:	83 ec 08             	sub    esp,0x8
c001aa9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaa3:	50                   	push   eax
c001aaa4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aaab:	e8 10 fa ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001aab0:	83 c4 10             	add    esp,0x10
c001aab3:	83 ec 0c             	sub    esp,0xc
c001aab6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aaba:	50                   	push   eax
c001aabb:	e8 80 b8 fe ff       	call   c0006340 <f_mkdir>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aaca:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aad1:	85 c0                	test   eax,eax
c001aad3:	75 07                	jne    c001aadc <FAT::mkdir(char const*)+0x6e>
c001aad5:	b8 00 00 00 00       	mov    eax,0x0
c001aada:	eb 05                	jmp    c001aae1 <FAT::mkdir(char const*)+0x73>
c001aadc:	b8 01 00 00 00       	mov    eax,0x1
c001aae1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aae7:	c3                   	ret    

c001aae8 <FAT::exists(char const*)>:
c001aae8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aaee:	83 ec 08             	sub    esp,0x8
c001aaf1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aaf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aafc:	50                   	push   eax
c001aafd:	e8 a5 5b fe ff       	call   c00006a7 <strcpy>
c001ab02:	83 c4 10             	add    esp,0x10
c001ab05:	83 ec 08             	sub    esp,0x8
c001ab08:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab0c:	50                   	push   eax
c001ab0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab14:	e8 a7 f9 ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001ab19:	83 c4 10             	add    esp,0x10
c001ab1c:	83 ec 08             	sub    esp,0x8
c001ab1f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ab26:	50                   	push   eax
c001ab27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab2b:	50                   	push   eax
c001ab2c:	e8 1f b3 fe ff       	call   c0005e50 <f_stat>
c001ab31:	83 c4 10             	add    esp,0x10
c001ab34:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab3b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab42:	85 c0                	test   eax,eax
c001ab44:	75 04                	jne    c001ab4a <FAT::exists(char const*)+0x62>
c001ab46:	b0 01                	mov    al,0x1
c001ab48:	eb 02                	jmp    c001ab4c <FAT::exists(char const*)+0x64>
c001ab4a:	b0 00                	mov    al,0x0
c001ab4c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab52:	c3                   	ret    
c001ab53:	90                   	nop

c001ab54 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ab54:	b8 08 00 00 00       	mov    eax,0x8
c001ab59:	c3                   	ret    

c001ab5a <ISO9660::seek(void*, unsigned long long)>:
c001ab5a:	53                   	push   ebx
c001ab5b:	b8 04 00 00 00       	mov    eax,0x4
c001ab60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ab6c:	85 d2                	test   edx,edx
c001ab6e:	74 17                	je     c001ab87 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ab70:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ab73:	89 c8                	mov    eax,ecx
c001ab75:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ab78:	b8 01 00 00 00       	mov    eax,0x1
c001ab7d:	73 08                	jae    c001ab87 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ab7f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ab82:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ab85:	31 c0                	xor    eax,eax
c001ab87:	5b                   	pop    ebx
c001ab88:	c3                   	ret    
c001ab89:	90                   	nop

c001ab8a <ISO9660::tell(void*, unsigned long long*)>:
c001ab8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab92:	85 d2                	test   edx,edx
c001ab94:	74 12                	je     c001aba8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ab96:	85 c0                	test   eax,eax
c001ab98:	74 0e                	je     c001aba8 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ab9a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab9d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001aba0:	89 10                	mov    DWORD PTR [eax],edx
c001aba2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001aba5:	31 c0                	xor    eax,eax
c001aba7:	c3                   	ret    
c001aba8:	b8 04 00 00 00       	mov    eax,0x4
c001abad:	c3                   	ret    

c001abae <ISO9660::getName()>:
c001abae:	b8 48 2e 02 c0       	mov    eax,0xc0022e48
c001abb3:	c3                   	ret    

c001abb4 <ISO9660::stat(void*, unsigned long long*)>:
c001abb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001abb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abbc:	85 d2                	test   edx,edx
c001abbe:	74 12                	je     c001abd2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001abc0:	85 c0                	test   eax,eax
c001abc2:	74 0e                	je     c001abd2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001abc4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001abc7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001abca:	89 10                	mov    DWORD PTR [eax],edx
c001abcc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001abcf:	31 c0                	xor    eax,eax
c001abd1:	c3                   	ret    
c001abd2:	b8 04 00 00 00       	mov    eax,0x4
c001abd7:	c3                   	ret    

c001abd8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001abd8:	b8 01 00 00 00       	mov    eax,0x1
c001abdd:	c3                   	ret    

c001abde <ISO9660::unlink(char const*)>:
c001abde:	b8 01 00 00 00       	mov    eax,0x1
c001abe3:	c3                   	ret    

c001abe4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001abe4:	b8 01 00 00 00       	mov    eax,0x1
c001abe9:	c3                   	ret    

c001abea <ISO9660::rename(char const*, char const*)>:
c001abea:	b8 01 00 00 00       	mov    eax,0x1
c001abef:	c3                   	ret    

c001abf0 <ISO9660::mkdir(char const*)>:
c001abf0:	b8 01 00 00 00       	mov    eax,0x1
c001abf5:	c3                   	ret    

c001abf6 <ISO9660::close(void*)>:
c001abf6:	83 ec 0c             	sub    esp,0xc
c001abf9:	b8 04 00 00 00       	mov    eax,0x4
c001abfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac02:	85 d2                	test   edx,edx
c001ac04:	74 0e                	je     c001ac14 <ISO9660::close(void*)+0x1e>
c001ac06:	83 ec 0c             	sub    esp,0xc
c001ac09:	52                   	push   edx
c001ac0a:	e8 28 13 ff ff       	call   c000bf37 <free>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	31 c0                	xor    eax,eax
c001ac14:	83 c4 0c             	add    esp,0xc
c001ac17:	c3                   	ret    

c001ac18 <ISO9660::closeDir(void*)>:
c001ac18:	83 ec 0c             	sub    esp,0xc
c001ac1b:	b8 04 00 00 00       	mov    eax,0x4
c001ac20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac24:	85 d2                	test   edx,edx
c001ac26:	74 0e                	je     c001ac36 <ISO9660::closeDir(void*)+0x1e>
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	52                   	push   edx
c001ac2c:	e8 06 13 ff ff       	call   c000bf37 <free>
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	31 c0                	xor    eax,eax
c001ac36:	83 c4 0c             	add    esp,0xc
c001ac39:	c3                   	ret    

c001ac3a <ISO9660::~ISO9660()>:
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	ba 9c 2e 02 c0       	mov    edx,0xc0022e9c
c001ac42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac46:	89 10                	mov    DWORD PTR [eax],edx
c001ac48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	50                   	push   eax
c001ac50:	e8 35 48 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	90                   	nop
c001ac59:	83 c4 0c             	add    esp,0xc
c001ac5c:	c3                   	ret    
c001ac5d:	90                   	nop

c001ac5e <ISO9660::~ISO9660()>:
c001ac5e:	83 ec 0c             	sub    esp,0xc
c001ac61:	83 ec 0c             	sub    esp,0xc
c001ac64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac68:	e8 cd ff ff ff       	call   c001ac3a <ISO9660::~ISO9660()>
c001ac6d:	83 c4 10             	add    esp,0x10
c001ac70:	83 ec 08             	sub    esp,0x8
c001ac73:	6a 08                	push   0x8
c001ac75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac79:	e8 b5 43 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ac7e:	83 c4 10             	add    esp,0x10
c001ac81:	83 c4 0c             	add    esp,0xc
c001ac84:	c3                   	ret    

c001ac85 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ac85:	55                   	push   ebp
c001ac86:	31 c9                	xor    ecx,ecx
c001ac88:	57                   	push   edi
c001ac89:	56                   	push   esi
c001ac8a:	53                   	push   ebx
c001ac8b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ac8f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ac93:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ac97:	89 eb                	mov    ebx,ebp
c001ac99:	39 ce                	cmp    esi,ecx
c001ac9b:	7e 17                	jle    c001acb4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ac9d:	31 d2                	xor    edx,edx
c001ac9f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001aca3:	7d 13                	jge    c001acb8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001aca5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aca9:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001acac:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001acaf:	75 0d                	jne    c001acbe <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001acb1:	42                   	inc    edx
c001acb2:	eb eb                	jmp    c001ac9f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001acb4:	31 c0                	xor    eax,eax
c001acb6:	eb 0a                	jmp    c001acc2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001acb8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001acbc:	eb 04                	jmp    c001acc2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001acbe:	41                   	inc    ecx
c001acbf:	43                   	inc    ebx
c001acc0:	eb d7                	jmp    c001ac99 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001acc2:	5b                   	pop    ebx
c001acc3:	5e                   	pop    esi
c001acc4:	5f                   	pop    edi
c001acc5:	5d                   	pop    ebp
c001acc6:	c3                   	ret    

c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001acc7:	56                   	push   esi
c001acc8:	53                   	push   ebx
c001acc9:	52                   	push   edx
c001acca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001acd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acd6:	39 0d 00 58 02 c0    	cmp    DWORD PTR ds:0xc0025800,ecx
c001acdc:	75 08                	jne    c001ace6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001acde:	38 05 a8 3c 02 c0    	cmp    BYTE PTR ds:0xc0023ca8,al
c001ace4:	74 2b                	je     c001ad11 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ace6:	83 ec 0c             	sub    esp,0xc
c001ace9:	31 db                	xor    ebx,ebx
c001aceb:	a2 a8 3c 02 c0       	mov    ds:0xc0023ca8,al
c001acf0:	89 0d 00 58 02 c0    	mov    DWORD PTR ds:0xc0025800,ecx
c001acf6:	68 20 58 02 c0       	push   0xc0025820
c001acfb:	6a 01                	push   0x1
c001acfd:	53                   	push   ebx
c001acfe:	0f be c0             	movsx  eax,al
c001ad01:	51                   	push   ecx
c001ad02:	ff 34 85 7c 47 02 c0 	push   DWORD PTR [eax*4-0x3ffdb884]
c001ad09:	e8 6c 76 ff ff       	call   c001237a <LogicalDisk::read(unsigned long long, int, void*)>
c001ad0e:	83 c4 20             	add    esp,0x20
c001ad11:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ad19:	c7 44 24 14 20 58 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025820
c001ad21:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ad25:	58                   	pop    eax
c001ad26:	5b                   	pop    ebx
c001ad27:	5e                   	pop    esi
c001ad28:	e9 a5 58 fe ff       	jmp    c00005d2 <memcpy>
c001ad2d:	90                   	nop

c001ad2e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ad2e:	81 ec 10 08 00 00    	sub    esp,0x810
c001ad34:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ad3b:	83 c0 41             	add    eax,0x41
c001ad3e:	0f be c0             	movsx  eax,al
c001ad41:	50                   	push   eax
c001ad42:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad46:	50                   	push   eax
c001ad47:	6a 10                	push   0x10
c001ad49:	e8 79 ff ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ad4e:	83 c4 10             	add    esp,0x10
c001ad51:	31 c0                	xor    eax,eax
c001ad53:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ad58:	75 1d                	jne    c001ad77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ad5a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ad5f:	75 16                	jne    c001ad77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ad61:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ad66:	75 0f                	jne    c001ad77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ad68:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ad6d:	75 08                	jne    c001ad77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ad6f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ad74:	0f 94 c0             	sete   al
c001ad77:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ad7d:	c3                   	ret    

c001ad7e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ad7e:	55                   	push   ebp
c001ad7f:	57                   	push   edi
c001ad80:	56                   	push   esi
c001ad81:	53                   	push   ebx
c001ad82:	81 ec 34 08 00 00    	sub    esp,0x834
c001ad88:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001ad8f:	55                   	push   ebp
c001ad90:	68 63 2e 02 c0       	push   0xc0022e63
c001ad95:	e8 bf 43 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ad9a:	83 c4 10             	add    esp,0x10
c001ad9d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001ada5:	0f 84 06 02 00 00    	je     c001afb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001adab:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001adb3:	0f 84 f8 01 00 00    	je     c001afb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001adb9:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001adc0:	b8 01 00 00 00       	mov    eax,0x1
c001adc5:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001adc9:	0f 85 e7 01 00 00    	jne    c001afb6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001adcf:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001add2:	31 d2                	xor    edx,edx
c001add4:	89 e9                	mov    ecx,ebp
c001add6:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001add9:	01 f1                	add    ecx,esi
c001addb:	89 d3                	mov    ebx,edx
c001addd:	11 fb                	adc    ebx,edi
c001addf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ade3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ade7:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001adee:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001adf1:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001adf4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001adf8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001adfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ae00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ae04:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ae08:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001ae0c:	72 19                	jb     c001ae27 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001ae0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ae12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae1a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ae1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae25:	eb 13                	jmp    c001ae3a <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001ae27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae2f:	29 f0                	sub    eax,esi
c001ae31:	19 fa                	sbb    edx,edi
c001ae33:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ae3a:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001ae41:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ae44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae46:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ae4a:	c1 e0 0b             	shl    eax,0xb
c001ae4d:	53                   	push   ebx
c001ae4e:	01 c6                	add    esi,eax
c001ae50:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ae57:	11 d7                	adc    edi,edx
c001ae59:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001ae5d:	50                   	push   eax
c001ae5e:	89 fa                	mov    edx,edi
c001ae60:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ae64:	50                   	push   eax
c001ae65:	89 f0                	mov    eax,esi
c001ae67:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ae6b:	50                   	push   eax
c001ae6c:	e8 56 fe ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ae71:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ae78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae7c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ae80:	83 c4 10             	add    esp,0x10
c001ae83:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ae86:	b8 00 08 00 00       	mov    eax,0x800
c001ae8b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ae91:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ae95:	29 d0                	sub    eax,edx
c001ae97:	39 c1                	cmp    ecx,eax
c001ae99:	83 db 00             	sbb    ebx,0x0
c001ae9c:	7d 19                	jge    c001aeb7 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001ae9e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aea3:	75 16                	jne    c001aebb <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001aea5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aeac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aeb2:	e9 f6 00 00 00       	jmp    c001afad <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001aeb7:	89 c5                	mov    ebp,eax
c001aeb9:	eb 03                	jmp    c001aebe <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001aebb:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001aebe:	51                   	push   ecx
c001aebf:	55                   	push   ebp
c001aec0:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001aec4:	50                   	push   eax
c001aec5:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001aecc:	e8 01 57 fe ff       	call   c00005d2 <memcpy>
c001aed1:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001aed8:	01 e8                	add    eax,ebp
c001aeda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aede:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aee2:	89 e8                	mov    eax,ebp
c001aee4:	99                   	cdq    
c001aee5:	01 ee                	add    esi,ebp
c001aee7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aeeb:	11 d7                	adc    edi,edx
c001aeed:	29 e9                	sub    ecx,ebp
c001aeef:	19 d3                	sbb    ebx,edx
c001aef1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001aef5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	b8 ff 07 00 00       	mov    eax,0x7ff
c001af01:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001af04:	b8 00 00 00 00       	mov    eax,0x0
c001af09:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001af0d:	7d 3f                	jge    c001af4e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001af0f:	52                   	push   edx
c001af10:	89 fa                	mov    edx,edi
c001af12:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001af19:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001af1d:	50                   	push   eax
c001af1e:	89 f0                	mov    eax,esi
c001af20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af24:	0f ac d0 0b          	shrd   eax,edx,0xb
c001af28:	50                   	push   eax
c001af29:	e8 99 fd ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001af2e:	81 c6 00 08 00 00    	add    esi,0x800
c001af34:	83 d7 00             	adc    edi,0x0
c001af37:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001af3f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001af47:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001af4c:	eb ab                	jmp    c001aef9 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001af4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af52:	0b 04 24             	or     eax,DWORD PTR [esp]
c001af55:	74 34                	je     c001af8b <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001af57:	50                   	push   eax
c001af58:	89 fa                	mov    edx,edi
c001af5a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001af61:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001af65:	50                   	push   eax
c001af66:	89 f0                	mov    eax,esi
c001af68:	0f ac d0 0b          	shrd   eax,edx,0xb
c001af6c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001af70:	55                   	push   ebp
c001af71:	50                   	push   eax
c001af72:	e8 50 fd ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001af77:	83 c4 0c             	add    esp,0xc
c001af7a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001af7e:	55                   	push   ebp
c001af7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af83:	e8 4a 56 fe ff       	call   c00005d2 <memcpy>
c001af88:	83 c4 10             	add    esp,0x10
c001af8b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001af92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af9a:	89 38                	mov    DWORD PTR [eax],edi
c001af9c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001afa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afa7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001afaa:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001afad:	31 c0                	xor    eax,eax
c001afaf:	eb 05                	jmp    c001afb6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001afb1:	b8 04 00 00 00       	mov    eax,0x4
c001afb6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001afbc:	5b                   	pop    ebx
c001afbd:	5e                   	pop    esi
c001afbe:	5f                   	pop    edi
c001afbf:	5d                   	pop    ebp
c001afc0:	c3                   	ret    
c001afc1:	90                   	nop

c001afc2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001afc2:	55                   	push   ebp
c001afc3:	57                   	push   edi
c001afc4:	56                   	push   esi
c001afc5:	53                   	push   ebx
c001afc6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001afcc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001afd3:	85 f6                	test   esi,esi
c001afd5:	0f 84 62 02 00 00    	je     c001b23d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001afdb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001afe3:	0f 84 54 02 00 00    	je     c001b23d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001afe9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001afec:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001afef:	75 0a                	jne    c001affb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001aff1:	b8 07 00 00 00       	mov    eax,0x7
c001aff6:	e9 47 02 00 00       	jmp    c001b242 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001affb:	50                   	push   eax
c001affc:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b000:	50                   	push   eax
c001b001:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b008:	53                   	push   ebx
c001b009:	8b 06                	mov    eax,DWORD PTR [esi]
c001b00b:	c1 e0 0b             	shl    eax,0xb
c001b00e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b011:	c1 e8 0b             	shr    eax,0xb
c001b014:	50                   	push   eax
c001b015:	e8 ad fc ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b01a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	89 c1                	mov    ecx,eax
c001b022:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b025:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b02b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b02e:	84 db                	test   bl,bl
c001b030:	0f 85 90 00 00 00    	jne    c001b0c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b036:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b03c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b042:	29 c7                	sub    edi,eax
c001b044:	89 fb                	mov    ebx,edi
c001b046:	c1 fb 1f             	sar    ebx,0x1f
c001b049:	01 f8                	add    eax,edi
c001b04b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b04f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b052:	11 da                	adc    edx,ebx
c001b054:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b057:	89 04 24             	mov    DWORD PTR [esp],eax
c001b05a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b05e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b061:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b064:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b067:	89 d8                	mov    eax,ebx
c001b069:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b06d:	ba 00 00 00 00       	mov    edx,0x0
c001b072:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b076:	b8 00 00 00 00       	mov    eax,0x0
c001b07b:	73 0b                	jae    c001b088 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b07d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b080:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b084:	29 f8                	sub    eax,edi
c001b086:	19 da                	sbb    edx,ebx
c001b088:	89 d3                	mov    ebx,edx
c001b08a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b08d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b090:	09 c3                	or     ebx,eax
c001b092:	0f 84 59 ff ff ff    	je     c001aff1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b098:	55                   	push   ebp
c001b099:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b09d:	50                   	push   eax
c001b09e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b0a5:	53                   	push   ebx
c001b0a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0a8:	c1 e0 0b             	shl    eax,0xb
c001b0ab:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b0af:	c1 e8 0b             	shr    eax,0xb
c001b0b2:	50                   	push   eax
c001b0b3:	e8 0f fc ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b0b8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b0bb:	83 c4 10             	add    esp,0x10
c001b0be:	25 ff 07 00 00       	and    eax,0x7ff
c001b0c3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b0c6:	57                   	push   edi
c001b0c7:	6a 28                	push   0x28
c001b0c9:	6a 00                	push   0x0
c001b0cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0cf:	50                   	push   eax
c001b0d0:	e8 33 55 fe ff       	call   c0000608 <memset>
c001b0d5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b0d8:	31 d2                	xor    edx,edx
c001b0da:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b0e0:	89 f8                	mov    eax,edi
c001b0e2:	83 c0 21             	add    eax,0x21
c001b0e5:	83 d2 00             	adc    edx,0x0
c001b0e8:	89 c7                	mov    edi,eax
c001b0ea:	89 d5                	mov    ebp,edx
c001b0ec:	83 c4 10             	add    esp,0x10
c001b0ef:	31 c9                	xor    ecx,ecx
c001b0f1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b0f8:	83 f9 28             	cmp    ecx,0x28
c001b0fb:	0f 94 c2             	sete   dl
c001b0fe:	88 04 24             	mov    BYTE PTR [esp],al
c001b101:	88 d0                	mov    al,dl
c001b103:	ba ff 07 00 00       	mov    edx,0x7ff
c001b108:	39 fa                	cmp    edx,edi
c001b10a:	ba 00 00 00 00       	mov    edx,0x0
c001b10f:	19 ea                	sbb    edx,ebp
c001b111:	0f 92 c2             	setb   dl
c001b114:	09 c2                	or     edx,eax
c001b116:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b11a:	0f 94 c0             	sete   al
c001b11d:	08 d0                	or     al,dl
c001b11f:	75 16                	jne    c001b137 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b121:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b125:	74 10                	je     c001b137 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b127:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b12a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b12e:	41                   	inc    ecx
c001b12f:	83 c7 01             	add    edi,0x1
c001b132:	83 d5 00             	adc    ebp,0x0
c001b135:	eb ba                	jmp    c001b0f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b137:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b145:	57                   	push   edi
c001b146:	e8 da 54 fe ff       	call   c0000625 <strlen>
c001b14b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b14f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b152:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b159:	25 ff 07 00 00       	and    eax,0x7ff
c001b15e:	01 c8                	add    eax,ecx
c001b160:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b168:	5a                   	pop    edx
c001b169:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b170:	59                   	pop    ecx
c001b171:	0f 95 c0             	setne  al
c001b174:	0f b6 c0             	movzx  eax,al
c001b177:	40                   	inc    eax
c001b178:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b17c:	57                   	push   edi
c001b17d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b181:	50                   	push   eax
c001b182:	e8 20 55 fe ff       	call   c00006a7 <strcpy>
c001b187:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b18b:	83 c4 10             	add    esp,0x10
c001b18e:	84 c0                	test   al,al
c001b190:	75 21                	jne    c001b1b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b192:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b19a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b1a2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b1aa:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b1b1:	eb 28                	jmp    c001b1db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b1b3:	fe c8                	dec    al
c001b1b5:	75 24                	jne    c001b1db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b1b7:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b1bf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b1c7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b1cf:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b1d6:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b1db:	50                   	push   eax
c001b1dc:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b1e3:	0f b6 fb             	movzx  edi,bl
c001b1e6:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b1ea:	31 db                	xor    ebx,ebx
c001b1ec:	50                   	push   eax
c001b1ed:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b1f4:	e8 d9 53 fe ff       	call   c00005d2 <memcpy>
c001b1f9:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b200:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b206:	89 f9                	mov    ecx,edi
c001b208:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b20b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b20e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b211:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b214:	83 c4 10             	add    esp,0x10
c001b217:	39 c7                	cmp    edi,eax
c001b219:	89 df                	mov    edi,ebx
c001b21b:	19 d7                	sbb    edi,edx
c001b21d:	72 10                	jb     c001b22f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b21f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b226:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b22d:	eb 0a                	jmp    c001b239 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b22f:	29 c8                	sub    eax,ecx
c001b231:	19 da                	sbb    edx,ebx
c001b233:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b236:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b239:	31 c0                	xor    eax,eax
c001b23b:	eb 05                	jmp    c001b242 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b23d:	b8 04 00 00 00       	mov    eax,0x4
c001b242:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b248:	5b                   	pop    ebx
c001b249:	5e                   	pop    esi
c001b24a:	5f                   	pop    edi
c001b24b:	5d                   	pop    ebp
c001b24c:	c3                   	ret    

c001b24d <readRoot(unsigned int*, unsigned int*, char)>:
c001b24d:	81 ec 40 08 00 00    	sub    esp,0x840
c001b253:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b25b:	50                   	push   eax
c001b25c:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b260:	50                   	push   eax
c001b261:	6a 10                	push   0x10
c001b263:	e8 5f fa ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b268:	83 c4 0c             	add    esp,0xc
c001b26b:	6a 22                	push   0x22
c001b26d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b274:	50                   	push   eax
c001b275:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b279:	50                   	push   eax
c001b27a:	e8 53 53 fe ff       	call   c00005d2 <memcpy>
c001b27f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b286:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b28a:	89 10                	mov    DWORD PTR [eax],edx
c001b28c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b293:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b297:	89 10                	mov    DWORD PTR [eax],edx
c001b299:	b0 01                	mov    al,0x1
c001b29b:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b2a1:	c3                   	ret    

c001b2a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b2a2:	55                   	push   ebp
c001b2a3:	57                   	push   edi
c001b2a4:	56                   	push   esi
c001b2a5:	53                   	push   ebx
c001b2a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b2ac:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b2b3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b2ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2be:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b2c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b2c6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b2ca:	75 03                	jne    c001b2cf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b2cc:	83 c3 02             	add    ebx,0x2
c001b2cf:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b2d2:	75 03                	jne    c001b2d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b2d4:	43                   	inc    ebx
c001b2d5:	eb f8                	jmp    c001b2cf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b2d7:	51                   	push   ecx
c001b2d8:	68 00 01 00 00       	push   0x100
c001b2dd:	6a 00                	push   0x0
c001b2df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2e3:	50                   	push   eax
c001b2e4:	e8 1f 53 fe ff       	call   c0000608 <memset>
c001b2e9:	83 c4 10             	add    esp,0x10
c001b2ec:	31 d2                	xor    edx,edx
c001b2ee:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b2f1:	84 c0                	test   al,al
c001b2f3:	74 21                	je     c001b316 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b2f5:	3c 2f                	cmp    al,0x2f
c001b2f7:	75 0b                	jne    c001b304 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b2f9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b2fd:	bd 01 00 00 00       	mov    ebp,0x1
c001b302:	eb 14                	jmp    c001b318 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b304:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b307:	80 f9 19             	cmp    cl,0x19
c001b30a:	77 03                	ja     c001b30f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b30c:	83 e8 20             	sub    eax,0x20
c001b30f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b313:	42                   	inc    edx
c001b314:	eb d8                	jmp    c001b2ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b316:	31 ed                	xor    ebp,ebp
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b322:	e8 00 0c ff ff       	call   c000bf27 <malloc>
c001b327:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b32e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b334:	89 c6                	mov    esi,eax
c001b336:	c1 ef 0b             	shr    edi,0xb
c001b339:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b340:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b34c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b350:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b357:	74 28                	je     c001b381 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b359:	52                   	push   edx
c001b35a:	57                   	push   edi
c001b35b:	50                   	push   eax
c001b35c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b360:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b367:	e8 5b f9 ff ff       	call   c001acc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b36c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b370:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b377:	05 00 08 00 00       	add    eax,0x800
c001b37c:	83 c4 10             	add    esp,0x10
c001b37f:	eb cb                	jmp    c001b34c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b381:	83 ec 0c             	sub    esp,0xc
c001b384:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b388:	57                   	push   edi
c001b389:	e8 97 52 fe ff       	call   c0000625 <strlen>
c001b38e:	50                   	push   eax
c001b38f:	57                   	push   edi
c001b390:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b397:	56                   	push   esi
c001b398:	e8 e8 f8 ff ff       	call   c001ac85 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b39d:	83 c4 20             	add    esp,0x20
c001b3a0:	85 c0                	test   eax,eax
c001b3a2:	75 13                	jne    c001b3b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	56                   	push   esi
c001b3a8:	e8 8a 0b ff ff       	call   c000bf37 <free>
c001b3ad:	83 c4 10             	add    esp,0x10
c001b3b0:	31 c0                	xor    eax,eax
c001b3b2:	e9 b3 00 00 00       	jmp    c001b46a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b3b7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b3bb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b3bf:	c1 e7 08             	shl    edi,0x8
c001b3c2:	c1 e2 10             	shl    edx,0x10
c001b3c5:	09 d7                	or     edi,edx
c001b3c7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b3cb:	09 d7                	or     edi,edx
c001b3cd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b3d1:	c1 e2 18             	shl    edx,0x18
c001b3d4:	09 d7                	or     edi,edx
c001b3d6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b3da:	89 d1                	mov    ecx,edx
c001b3dc:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b3e0:	c1 e1 08             	shl    ecx,0x8
c001b3e3:	c1 e2 10             	shl    edx,0x10
c001b3e6:	09 ca                	or     edx,ecx
c001b3e8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b3ec:	09 ca                	or     edx,ecx
c001b3ee:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b3f2:	c1 e1 18             	shl    ecx,0x18
c001b3f5:	09 ca                	or     edx,ecx
c001b3f7:	89 e9                	mov    ecx,ebp
c001b3f9:	84 c9                	test   cl,cl
c001b3fb:	74 3c                	je     c001b439 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b3fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b401:	83 ec 0c             	sub    esp,0xc
c001b404:	56                   	push   esi
c001b405:	e8 2d 0b ff ff       	call   c000bf37 <free>
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b414:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b419:	50                   	push   eax
c001b41a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b421:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b428:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b42c:	52                   	push   edx
c001b42d:	57                   	push   edi
c001b42e:	53                   	push   ebx
c001b42f:	e8 6e fe ff ff       	call   c001b2a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b434:	83 c4 20             	add    esp,0x20
c001b437:	eb 31                	jmp    c001b46a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b439:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b440:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b443:	d0 e8                	shr    al,1
c001b445:	83 ec 0c             	sub    esp,0xc
c001b448:	89 3b                	mov    DWORD PTR [ebx],edi
c001b44a:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b451:	83 e0 01             	and    eax,0x1
c001b454:	89 13                	mov    DWORD PTR [ebx],edx
c001b456:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b45d:	89 03                	mov    DWORD PTR [ebx],eax
c001b45f:	56                   	push   esi
c001b460:	e8 d2 0a ff ff       	call   c000bf37 <free>
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	b0 01                	mov    al,0x1
c001b46a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b470:	5b                   	pop    ebx
c001b471:	5e                   	pop    esi
c001b472:	5f                   	pop    edi
c001b473:	5d                   	pop    ebp
c001b474:	c3                   	ret    

c001b475 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b475:	55                   	push   ebp
c001b476:	57                   	push   edi
c001b477:	56                   	push   esi
c001b478:	53                   	push   ebx
c001b479:	83 ec 20             	sub    esp,0x20
c001b47c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b480:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b484:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b489:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b48d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b495:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b49d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b4a3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b4a9:	57                   	push   edi
c001b4aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4ae:	50                   	push   eax
c001b4af:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4b3:	50                   	push   eax
c001b4b4:	e8 94 fd ff ff       	call   c001b24d <readRoot(unsigned int*, unsigned int*, char)>
c001b4b9:	5a                   	pop    edx
c001b4ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b4be:	e8 62 51 fe ff       	call   c0000625 <strlen>
c001b4c3:	83 c4 10             	add    esp,0x10
c001b4c6:	83 f8 03             	cmp    eax,0x3
c001b4c9:	77 17                	ja     c001b4e2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b4cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4cf:	89 03                	mov    DWORD PTR [ebx],eax
c001b4d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4d5:	89 06                	mov    DWORD PTR [esi],eax
c001b4d7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b4de:	b0 01                	mov    al,0x1
c001b4e0:	eb 19                	jmp    c001b4fb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b4e2:	50                   	push   eax
c001b4e3:	55                   	push   ebp
c001b4e4:	57                   	push   edi
c001b4e5:	56                   	push   esi
c001b4e6:	53                   	push   ebx
c001b4e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4f3:	e8 aa fd ff ff       	call   c001b2a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b4f8:	83 c4 20             	add    esp,0x20
c001b4fb:	83 c4 1c             	add    esp,0x1c
c001b4fe:	5b                   	pop    ebx
c001b4ff:	5e                   	pop    esi
c001b500:	5f                   	pop    edi
c001b501:	5d                   	pop    ebp
c001b502:	c3                   	ret    
c001b503:	90                   	nop

c001b504 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b504:	57                   	push   edi
c001b505:	56                   	push   esi
c001b506:	53                   	push   ebx
c001b507:	83 ec 10             	sub    esp,0x10
c001b50a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b50e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b512:	85 f6                	test   esi,esi
c001b514:	74 7b                	je     c001b591 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b516:	85 ff                	test   edi,edi
c001b518:	74 77                	je     c001b591 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b51a:	83 ec 0c             	sub    esp,0xc
c001b51d:	6a 1c                	push   0x1c
c001b51f:	e8 03 0a ff ff       	call   c000bf27 <malloc>
c001b524:	89 07                	mov    DWORD PTR [edi],eax
c001b526:	89 c3                	mov    ebx,eax
c001b528:	58                   	pop    eax
c001b529:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b52d:	50                   	push   eax
c001b52e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b531:	50                   	push   eax
c001b532:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b536:	50                   	push   eax
c001b537:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b53b:	50                   	push   eax
c001b53c:	56                   	push   esi
c001b53d:	e8 33 ff ff ff       	call   c001b475 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b542:	83 c4 20             	add    esp,0x20
c001b545:	84 c0                	test   al,al
c001b547:	74 07                	je     c001b550 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b549:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b54e:	74 0b                	je     c001b55b <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b550:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b554:	b8 01 00 00 00       	mov    eax,0x1
c001b559:	eb 3b                	jmp    c001b596 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b55f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b563:	89 03                	mov    DWORD PTR [ebx],eax
c001b565:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b56c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b570:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b577:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b57e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b581:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b588:	8a 06                	mov    al,BYTE PTR [esi]
c001b58a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b58d:	31 c0                	xor    eax,eax
c001b58f:	eb 05                	jmp    c001b596 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b591:	b8 04 00 00 00       	mov    eax,0x4
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	5b                   	pop    ebx
c001b59a:	5e                   	pop    esi
c001b59b:	5f                   	pop    edi
c001b59c:	c3                   	ret    
c001b59d:	90                   	nop

c001b59e <ISO9660::exists(char const*)>:
c001b59e:	83 ec 28             	sub    esp,0x28
c001b5a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5a9:	52                   	push   edx
c001b5aa:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b5ad:	52                   	push   edx
c001b5ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b5b2:	52                   	push   edx
c001b5b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b5b7:	52                   	push   edx
c001b5b8:	50                   	push   eax
c001b5b9:	e8 b7 fe ff ff       	call   c001b475 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b5be:	83 c4 3c             	add    esp,0x3c
c001b5c1:	c3                   	ret    

c001b5c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b5c2:	56                   	push   esi
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 14             	sub    esp,0x14
c001b5c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b5cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b5cf:	85 db                	test   ebx,ebx
c001b5d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b5d5:	0f 94 c2             	sete   dl
c001b5d8:	85 f6                	test   esi,esi
c001b5da:	0f 94 c0             	sete   al
c001b5dd:	08 c2                	or     dl,al
c001b5df:	75 68                	jne    c001b649 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b5e1:	85 c9                	test   ecx,ecx
c001b5e3:	74 64                	je     c001b649 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b5e5:	83 ec 0c             	sub    esp,0xc
c001b5e8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b5eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b5f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b5f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5fc:	50                   	push   eax
c001b5fd:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b600:	50                   	push   eax
c001b601:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b605:	50                   	push   eax
c001b606:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b60a:	50                   	push   eax
c001b60b:	51                   	push   ecx
c001b60c:	e8 64 fe ff ff       	call   c001b475 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b611:	83 c4 20             	add    esp,0x20
c001b614:	ba 01 00 00 00       	mov    edx,0x1
c001b619:	84 c0                	test   al,al
c001b61b:	74 31                	je     c001b64e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b61d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b621:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b628:	89 03                	mov    DWORD PTR [ebx],eax
c001b62a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b62e:	85 c0                	test   eax,eax
c001b630:	ba 00 00 00 00       	mov    edx,0x0
c001b635:	0f 95 06             	setne  BYTE PTR [esi]
c001b638:	74 14                	je     c001b64e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b63a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b640:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b647:	eb 05                	jmp    c001b64e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b649:	ba 04 00 00 00       	mov    edx,0x4
c001b64e:	83 c4 14             	add    esp,0x14
c001b651:	89 d0                	mov    eax,edx
c001b653:	5b                   	pop    ebx
c001b654:	5e                   	pop    esi
c001b655:	c3                   	ret    

c001b656 <ISO9660::openDir(char const*, void**)>:
c001b656:	57                   	push   edi
c001b657:	56                   	push   esi
c001b658:	53                   	push   ebx
c001b659:	83 ec 10             	sub    esp,0x10
c001b65c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b660:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b664:	85 f6                	test   esi,esi
c001b666:	0f 84 95 00 00 00    	je     c001b701 <ISO9660::openDir(char const*, void**)+0xab>
c001b66c:	85 ff                	test   edi,edi
c001b66e:	0f 84 8d 00 00 00    	je     c001b701 <ISO9660::openDir(char const*, void**)+0xab>
c001b674:	83 ec 0c             	sub    esp,0xc
c001b677:	6a 1c                	push   0x1c
c001b679:	e8 a9 08 ff ff       	call   c000bf27 <malloc>
c001b67e:	89 07                	mov    DWORD PTR [edi],eax
c001b680:	89 c3                	mov    ebx,eax
c001b682:	59                   	pop    ecx
c001b683:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b687:	50                   	push   eax
c001b688:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b68b:	50                   	push   eax
c001b68c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b690:	50                   	push   eax
c001b691:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b695:	50                   	push   eax
c001b696:	56                   	push   esi
c001b697:	e8 d9 fd ff ff       	call   c001b475 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b69c:	83 c4 20             	add    esp,0x20
c001b69f:	84 c0                	test   al,al
c001b6a1:	74 07                	je     c001b6aa <ISO9660::openDir(char const*, void**)+0x54>
c001b6a3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b6a8:	75 21                	jne    c001b6cb <ISO9660::openDir(char const*, void**)+0x75>
c001b6aa:	52                   	push   edx
c001b6ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b6af:	0f b6 c0             	movzx  eax,al
c001b6b2:	50                   	push   eax
c001b6b3:	68 76 2e 02 c0       	push   0xc0022e76
c001b6b8:	e8 9c 3a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001b6bd:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	b8 01 00 00 00       	mov    eax,0x1
c001b6c9:	eb 3b                	jmp    c001b706 <ISO9660::openDir(char const*, void**)+0xb0>
c001b6cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6cf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b6d3:	89 03                	mov    DWORD PTR [ebx],eax
c001b6d5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b6dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b6e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b6ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b6f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b6f8:	8a 06                	mov    al,BYTE PTR [esi]
c001b6fa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b6fd:	31 c0                	xor    eax,eax
c001b6ff:	eb 05                	jmp    c001b706 <ISO9660::openDir(char const*, void**)+0xb0>
c001b701:	b8 04 00 00 00       	mov    eax,0x4
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	5b                   	pop    ebx
c001b70a:	5e                   	pop    esi
c001b70b:	5f                   	pop    edi
c001b70c:	c3                   	ret    
c001b70d:	90                   	nop

c001b70e <ISO9660::ISO9660()>:
c001b70e:	83 ec 0c             	sub    esp,0xc
c001b711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b715:	83 ec 0c             	sub    esp,0xc
c001b718:	50                   	push   eax
c001b719:	e8 48 3d ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001b71e:	83 c4 10             	add    esp,0x10
c001b721:	ba 9c 2e 02 c0       	mov    edx,0xc0022e9c
c001b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72a:	89 10                	mov    DWORD PTR [eax],edx
c001b72c:	90                   	nop
c001b72d:	83 c4 0c             	add    esp,0xc
c001b730:	c3                   	ret    
c001b731:	90                   	nop

c001b732 <SoundChannel::~SoundChannel()>:
c001b732:	83 ec 0c             	sub    esp,0xc
c001b735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b739:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b73c:	83 ec 0c             	sub    esp,0xc
c001b73f:	50                   	push   eax
c001b740:	e8 f2 07 ff ff       	call   c000bf37 <free>
c001b745:	83 c4 10             	add    esp,0x10
c001b748:	90                   	nop
c001b749:	83 c4 0c             	add    esp,0xc
c001b74c:	c3                   	ret    
c001b74d:	90                   	nop

c001b74e <SoundChannel::setSpeed(float)>:
c001b74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b752:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b756:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b759:	c3                   	ret    

c001b75a <SoundChannel::getSpeed()>:
c001b75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b75e:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b761:	c3                   	ret    

c001b762 <SoundChannel::setVolume(int)>:
c001b762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b766:	83 f8 64             	cmp    eax,0x64
c001b769:	7e 05                	jle    c001b770 <SoundChannel::setVolume(int)+0xe>
c001b76b:	b8 64 00 00 00       	mov    eax,0x64
c001b770:	85 c0                	test   eax,eax
c001b772:	79 02                	jns    c001b776 <SoundChannel::setVolume(int)+0x14>
c001b774:	31 c0                	xor    eax,eax
c001b776:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b77a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001b77d:	c3                   	ret    

c001b77e <SoundChannel::getVolume()>:
c001b77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b782:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b785:	c3                   	ret    

c001b786 <SoundChannel::pause()>:
c001b786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b78a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001b78e:	c3                   	ret    
c001b78f:	90                   	nop

c001b790 <SoundChannel::SoundChannel(int, int, int, int)>:
c001b790:	83 ec 1c             	sub    esp,0x1c
c001b793:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b797:	e8 ea ff ff ff       	call   c001b786 <SoundChannel::pause()>
c001b79c:	83 c4 04             	add    esp,0x4
c001b79f:	6a 50                	push   0x50
c001b7a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b7a5:	e8 b8 ff ff ff       	call   c001b762 <SoundChannel::setVolume(int)>
c001b7aa:	83 c4 08             	add    esp,0x8
c001b7ad:	d9 e8                	fld1   
c001b7af:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001b7b3:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b7b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b7ba:	e8 8f ff ff ff       	call   c001b74e <SoundChannel::setSpeed(float)>
c001b7bf:	83 c4 08             	add    esp,0x8
c001b7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b7ca:	89 10                	mov    DWORD PTR [eax],edx
c001b7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b7d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b7d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7db:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b7df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b7e2:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b7e7:	75 26                	jne    c001b80f <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001b7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ed:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b7f6:	0f af c2             	imul   eax,edx
c001b7f9:	89 c2                	mov    edx,eax
c001b7fb:	c1 fa 1f             	sar    edx,0x1f
c001b7fe:	83 e2 03             	and    edx,0x3
c001b801:	01 d0                	add    eax,edx
c001b803:	c1 f8 02             	sar    eax,0x2
c001b806:	05 a0 0f 00 00       	add    eax,0xfa0
c001b80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b813:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b817:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b81e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b829:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b837:	c1 e0 02             	shl    eax,0x2
c001b83a:	83 ec 0c             	sub    esp,0xc
c001b83d:	50                   	push   eax
c001b83e:	e8 e4 06 ff ff       	call   c000bf27 <malloc>
c001b843:	83 c4 10             	add    esp,0x10
c001b846:	89 c2                	mov    edx,eax
c001b848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b84f:	83 ec 04             	sub    esp,0x4
c001b852:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b856:	50                   	push   eax
c001b857:	6a 01                	push   0x1
c001b859:	6a 04                	push   0x4
c001b85b:	e8 d0 cf fe ff       	call   c0008830 <src_new>
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	89 c2                	mov    edx,eax
c001b865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b869:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b86c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b870:	85 c0                	test   eax,eax
c001b872:	74 10                	je     c001b884 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001b874:	83 ec 0c             	sub    esp,0xc
c001b877:	68 f8 2e 02 c0       	push   0xc0022ef8
c001b87c:	e8 cd 9c ff ff       	call   c001554e <Krnl::panic(char const*)>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	90                   	nop
c001b885:	83 c4 1c             	add    esp,0x1c
c001b888:	c3                   	ret    
c001b889:	90                   	nop

c001b88a <SoundChannel::play()>:
c001b88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b88e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <SoundChannel::paused()>:
c001b894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b898:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b89b:	c3                   	ret    

c001b89c <SoundChannel::getSampleRate()>:
c001b89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8a2:	c3                   	ret    
c001b8a3:	90                   	nop

c001b8a4 <SoundChannel::getBits()>:
c001b8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b8ab:	c3                   	ret    

c001b8ac <SoundChannel::getBufferUsed()>:
c001b8ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8b0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b8b3:	c3                   	ret    

c001b8b4 <SoundChannel::getBufferSize()>:
c001b8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b8bb:	c3                   	ret    

c001b8bc <SoundChannel::unbuffer(float*, int, int)>:
c001b8bc:	53                   	push   ebx
c001b8bd:	83 ec 40             	sub    esp,0x40
c001b8c0:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b8c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b8cc:	db 03                	fild   DWORD PTR [ebx]
c001b8ce:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b8d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b8d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8d9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b8dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8e0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b8e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b8e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b8ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8f4:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b8f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b8fb:	50                   	push   eax
c001b8fc:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b8ff:	e8 e6 cb fe ff       	call   c00084ea <src_process>
c001b904:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b908:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b90b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b90e:	83 c4 0c             	add    esp,0xc
c001b911:	29 d0                	sub    eax,edx
c001b913:	c1 e0 02             	shl    eax,0x2
c001b916:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b919:	50                   	push   eax
c001b91a:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b91d:	50                   	push   eax
c001b91e:	51                   	push   ecx
c001b91f:	e8 76 4c fe ff       	call   c000059a <memmove>
c001b924:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b928:	83 c4 48             	add    esp,0x48
c001b92b:	5b                   	pop    ebx
c001b92c:	c3                   	ret    
c001b92d:	90                   	nop

c001b92e <SoundChannel::buffer8(unsigned char*, int)>:
c001b92e:	53                   	push   ebx
c001b92f:	31 c0                	xor    eax,eax
c001b931:	83 ec 08             	sub    esp,0x8
c001b934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b938:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b93b:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b93e:	74 35                	je     c001b975 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b940:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b944:	7d 2f                	jge    c001b975 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b946:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b94a:	d9 05 14 2f 02 c0    	fld    DWORD PTR ds:0xc0022f14
c001b950:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b954:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b959:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b95c:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b960:	40                   	inc    eax
c001b961:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b964:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b967:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b96a:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b96d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b970:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b973:	eb c9                	jmp    c001b93e <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b975:	83 c4 08             	add    esp,0x8
c001b978:	5b                   	pop    ebx
c001b979:	c3                   	ret    

c001b97a <SoundDevice::SoundDevice(char const*)>:
c001b97a:	83 ec 1c             	sub    esp,0x1c
c001b97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b981:	83 ec 08             	sub    esp,0x8
c001b984:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b988:	50                   	push   eax
c001b989:	e8 d0 4d ff ff       	call   c001075e <Device::Device(char const*)>
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	ba 20 2f 02 c0       	mov    edx,0xc0022f20
c001b996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b99a:	89 10                	mov    DWORD PTR [eax],edx
c001b99c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b9b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b9c5:	7f 19                	jg     c001b9e0 <SoundDevice::SoundDevice(char const*)+0x66>
c001b9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9cf:	83 c2 54             	add    edx,0x54
c001b9d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b9da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b9de:	eb e0                	jmp    c001b9c0 <SoundDevice::SoundDevice(char const*)+0x46>
c001b9e0:	90                   	nop
c001b9e1:	83 c4 1c             	add    esp,0x1c
c001b9e4:	c3                   	ret    
c001b9e5:	90                   	nop

c001b9e6 <SoundDevice::~SoundDevice()>:
c001b9e6:	53                   	push   ebx
c001b9e7:	83 ec 18             	sub    esp,0x18
c001b9ea:	ba 20 2f 02 c0       	mov    edx,0xc0022f20
c001b9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9f3:	89 10                	mov    DWORD PTR [eax],edx
c001b9f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ba02:	7f 46                	jg     c001ba4a <SoundDevice::~SoundDevice()+0x64>
c001ba04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba0c:	83 c2 54             	add    edx,0x54
c001ba0f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ba13:	85 c0                	test   eax,eax
c001ba15:	74 2d                	je     c001ba44 <SoundDevice::~SoundDevice()+0x5e>
c001ba17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba1f:	83 c2 54             	add    edx,0x54
c001ba22:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ba26:	85 db                	test   ebx,ebx
c001ba28:	74 1a                	je     c001ba44 <SoundDevice::~SoundDevice()+0x5e>
c001ba2a:	83 ec 0c             	sub    esp,0xc
c001ba2d:	53                   	push   ebx
c001ba2e:	e8 ff fc ff ff       	call   c001b732 <SoundChannel::~SoundChannel()>
c001ba33:	83 c4 10             	add    esp,0x10
c001ba36:	83 ec 08             	sub    esp,0x8
c001ba39:	6a 2c                	push   0x2c
c001ba3b:	53                   	push   ebx
c001ba3c:	e8 f2 35 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ba41:	83 c4 10             	add    esp,0x10
c001ba44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ba48:	eb b3                	jmp    c001b9fd <SoundDevice::~SoundDevice()+0x17>
c001ba4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba4e:	83 ec 0c             	sub    esp,0xc
c001ba51:	50                   	push   eax
c001ba52:	e8 bd 49 ff ff       	call   c0010414 <Device::~Device()>
c001ba57:	83 c4 10             	add    esp,0x10
c001ba5a:	90                   	nop
c001ba5b:	83 c4 18             	add    esp,0x18
c001ba5e:	5b                   	pop    ebx
c001ba5f:	c3                   	ret    

c001ba60 <SoundDevice::~SoundDevice()>:
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	83 ec 0c             	sub    esp,0xc
c001ba66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba6a:	e8 77 ff ff ff       	call   c001b9e6 <SoundDevice::~SoundDevice()>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	83 ec 08             	sub    esp,0x8
c001ba75:	68 e4 01 00 00       	push   0x1e4
c001ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba7e:	e8 b0 35 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	83 c4 0c             	add    esp,0xc
c001ba89:	c3                   	ret    

c001ba8a <SoundDevice::getFreeChannelNum()>:
c001ba8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba8e:	31 c0                	xor    eax,eax
c001ba90:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ba98:	74 09                	je     c001baa3 <SoundDevice::getFreeChannelNum()+0x19>
c001ba9a:	40                   	inc    eax
c001ba9b:	83 f8 20             	cmp    eax,0x20
c001ba9e:	75 f0                	jne    c001ba90 <SoundDevice::getFreeChannelNum()+0x6>
c001baa0:	83 c8 ff             	or     eax,0xffffffff
c001baa3:	c3                   	ret    

c001baa4 <SoundDevice::addChannel(SoundChannel*)>:
c001baa4:	56                   	push   esi
c001baa5:	53                   	push   ebx
c001baa6:	51                   	push   ecx
c001baa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001baaf:	53                   	push   ebx
c001bab0:	e8 d5 ff ff ff       	call   c001ba8a <SoundDevice::getFreeChannelNum()>
c001bab5:	5a                   	pop    edx
c001bab6:	83 f8 ff             	cmp    eax,0xffffffff
c001bab9:	74 51                	je     c001bb0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001babb:	85 f6                	test   esi,esi
c001babd:	74 4d                	je     c001bb0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001babf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bac6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bacd:	75 30                	jne    c001baff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bacf:	83 ec 0c             	sub    esp,0xc
c001bad2:	56                   	push   esi
c001bad3:	e8 c4 fd ff ff       	call   c001b89c <SoundChannel::getSampleRate()>
c001bad8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bade:	89 34 24             	mov    DWORD PTR [esp],esi
c001bae1:	e8 be fd ff ff       	call   c001b8a4 <SoundChannel::getBits()>
c001bae6:	83 c4 0c             	add    esp,0xc
c001bae9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001baef:	8b 13                	mov    edx,DWORD PTR [ebx]
c001baf1:	50                   	push   eax
c001baf2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001baf8:	53                   	push   ebx
c001baf9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bb05:	b8 01 00 00 00       	mov    eax,0x1
c001bb0a:	eb 03                	jmp    c001bb0f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bb0c:	83 c8 ff             	or     eax,0xffffffff
c001bb0f:	5a                   	pop    edx
c001bb10:	5b                   	pop    ebx
c001bb11:	5e                   	pop    esi
c001bb12:	c3                   	ret    
c001bb13:	90                   	nop

c001bb14 <SoundDevice::removeChannel(int)>:
c001bb14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb1c:	83 fa 1f             	cmp    edx,0x1f
c001bb1f:	77 23                	ja     c001bb44 <SoundDevice::removeChannel(int)+0x30>
c001bb21:	8d 14 90             	lea    edx,[eax+edx*4]
c001bb24:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bb2b:	74 17                	je     c001bb44 <SoundDevice::removeChannel(int)+0x30>
c001bb2d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bb37:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bb3d:	75 05                	jne    c001bb44 <SoundDevice::removeChannel(int)+0x30>
c001bb3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb41:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bb44:	c3                   	ret    
c001bb45:	90                   	nop

c001bb46 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bb46:	56                   	push   esi
c001bb47:	53                   	push   ebx
c001bb48:	31 db                	xor    ebx,ebx
c001bb4a:	83 ec 14             	sub    esp,0x14
c001bb4d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bb51:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bb55:	7d 55                	jge    c001bbac <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bb57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb5b:	d9 e8                	fld1   
c001bb5d:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bb60:	d8 0d 50 2f 02 c0    	fmul   DWORD PTR ds:0xc0022f50
c001bb66:	d8 0d 54 2f 02 c0    	fmul   DWORD PTR ds:0xc0022f54
c001bb6c:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bb70:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bb74:	d8 15 58 2f 02 c0    	fcom   DWORD PTR ds:0xc0022f58
c001bb7a:	df e0                	fnstsw ax
c001bb7c:	9e                   	sahf   
c001bb7d:	72 08                	jb     c001bb87 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bb7f:	dd d8                	fstp   st(0)
c001bb81:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bb85:	eb 22                	jmp    c001bba9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bb87:	d9 ee                	fldz   
c001bb89:	d8 d9                	fcomp  st(1)
c001bb8b:	df e0                	fnstsw ax
c001bb8d:	9e                   	sahf   
c001bb8e:	72 08                	jb     c001bb98 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bb90:	dd d8                	fstp   st(0)
c001bb92:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bb96:	eb 11                	jmp    c001bba9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bb98:	83 ec 10             	sub    esp,0x10
c001bb9b:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bb9e:	e8 c9 36 00 00       	call   c001f26c <lrintf>
c001bba3:	83 c4 10             	add    esp,0x10
c001bba6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bba9:	43                   	inc    ebx
c001bbaa:	eb a5                	jmp    c001bb51 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bbac:	83 c4 14             	add    esp,0x14
c001bbaf:	5b                   	pop    ebx
c001bbb0:	5e                   	pop    esi
c001bbb1:	c3                   	ret    

c001bbb2 <SoundDevice::getAudio(int, float*, float*)>:
c001bbb2:	55                   	push   ebp
c001bbb3:	57                   	push   edi
c001bbb4:	56                   	push   esi
c001bbb5:	53                   	push   ebx
c001bbb6:	31 db                	xor    ebx,ebx
c001bbb8:	83 ec 20             	sub    esp,0x20
c001bbbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbbf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bbc3:	c1 e0 02             	shl    eax,0x2
c001bbc6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bbca:	50                   	push   eax
c001bbcb:	6a 00                	push   0x0
c001bbcd:	55                   	push   ebp
c001bbce:	e8 35 4a fe ff       	call   c0000608 <memset>
c001bbd3:	83 c4 10             	add    esp,0x10
c001bbd6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bbda:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001bbe1:	85 c0                	test   eax,eax
c001bbe3:	0f 84 8c 00 00 00    	je     c001bc75 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bbe9:	83 ec 0c             	sub    esp,0xc
c001bbec:	50                   	push   eax
c001bbed:	e8 a2 fc ff ff       	call   c001b894 <SoundChannel::paused()>
c001bbf2:	83 c4 10             	add    esp,0x10
c001bbf5:	84 c0                	test   al,al
c001bbf7:	75 7c                	jne    c001bc75 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bbf9:	83 ec 0c             	sub    esp,0xc
c001bbfc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bc03:	e8 76 fb ff ff       	call   c001b77e <SoundChannel::getVolume()>
c001bc08:	83 c4 10             	add    esp,0x10
c001bc0b:	85 c0                	test   eax,eax
c001bc0d:	74 66                	je     c001bc75 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bc0f:	83 ec 0c             	sub    esp,0xc
c001bc12:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bc19:	e8 60 fb ff ff       	call   c001b77e <SoundChannel::getVolume()>
c001bc1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bc22:	d9 05 5c 2f 02 c0    	fld    DWORD PTR ds:0xc0022f5c
c001bc28:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001bc2c:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001bc30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001bc34:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001bc3a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001bc3e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bc45:	e8 72 fc ff ff       	call   c001b8bc <SoundChannel::unbuffer(float*, int, int)>
c001bc4a:	83 c4 20             	add    esp,0x20
c001bc4d:	31 d2                	xor    edx,edx
c001bc4f:	39 c2                	cmp    edx,eax
c001bc51:	7d 1c                	jge    c001bc6f <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001bc53:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001bc57:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bc5b:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001bc5e:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001bc64:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001bc68:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001bc6c:	42                   	inc    edx
c001bc6d:	eb e0                	jmp    c001bc4f <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001bc6f:	39 c7                	cmp    edi,eax
c001bc71:	7e 02                	jle    c001bc75 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bc73:	89 c7                	mov    edi,eax
c001bc75:	43                   	inc    ebx
c001bc76:	83 fb 20             	cmp    ebx,0x20
c001bc79:	0f 85 5b ff ff ff    	jne    c001bbda <SoundDevice::getAudio(int, float*, float*)+0x28>
c001bc7f:	83 c4 1c             	add    esp,0x1c
c001bc82:	89 f8                	mov    eax,edi
c001bc84:	5b                   	pop    ebx
c001bc85:	5e                   	pop    esi
c001bc86:	5f                   	pop    edi
c001bc87:	5d                   	pop    ebp
c001bc88:	c3                   	ret    
c001bc89:	90                   	nop

c001bc8a <PCI::open(int, int, void*)>:
c001bc8a:	83 ec 18             	sub    esp,0x18
c001bc8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc91:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc93:	50                   	push   eax
c001bc94:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bc97:	31 c0                	xor    eax,eax
c001bc99:	83 c4 1c             	add    esp,0x1c
c001bc9c:	c3                   	ret    
c001bc9d:	90                   	nop

c001bc9e <PCI::close(int, int, void*)>:
c001bc9e:	31 c0                	xor    eax,eax
c001bca0:	c3                   	ret    
c001bca1:	90                   	nop

c001bca2 <PCI::PCI()>:
c001bca2:	83 ec 0c             	sub    esp,0xc
c001bca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca9:	83 ec 08             	sub    esp,0x8
c001bcac:	68 60 2f 02 c0       	push   0xc0022f60
c001bcb1:	50                   	push   eax
c001bcb2:	e8 31 41 ff ff       	call   c000fde8 <Bus::Bus(char const*)>
c001bcb7:	83 c4 10             	add    esp,0x10
c001bcba:	ba 0c 30 02 c0       	mov    edx,0xc002300c
c001bcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc3:	89 10                	mov    DWORD PTR [eax],edx
c001bcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bccf:	31 d2                	xor    edx,edx
c001bcd1:	88 c2                	mov    dl,al
c001bcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd7:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bce8:	31 d2                	xor    edx,edx
c001bcea:	88 c2                	mov    dl,al
c001bcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf0:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bcff:	8d 50 01             	lea    edx,[eax+0x1]
c001bd02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bd06:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bd0c:	31 d2                	xor    edx,edx
c001bd0e:	88 c2                	mov    dl,al
c001bd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd14:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bd18:	83 c9 c0             	or     ecx,0xffffffc0
c001bd1b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bd1f:	90                   	nop
c001bd20:	83 c4 0c             	add    esp,0xc
c001bd23:	c3                   	ret    

c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bd24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bd28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd2d:	c1 e0 10             	shl    eax,0x10
c001bd30:	89 ca                	mov    edx,ecx
c001bd32:	81 e2 fc 00 00 00    	and    edx,0xfc
c001bd38:	09 d0                	or     eax,edx
c001bd3a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bd3f:	c1 e2 08             	shl    edx,0x8
c001bd42:	09 d0                	or     eax,edx
c001bd44:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001bd49:	c1 e2 0b             	shl    edx,0xb
c001bd4c:	09 d0                	or     eax,edx
c001bd4e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd53:	0d 00 00 00 80       	or     eax,0x80000000
c001bd58:	ef                   	out    dx,eax
c001bd59:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd5e:	ed                   	in     eax,dx
c001bd5f:	83 e1 02             	and    ecx,0x2
c001bd62:	0f b6 c9             	movzx  ecx,cl
c001bd65:	c1 e1 03             	shl    ecx,0x3
c001bd68:	d3 e8                	shr    eax,cl
c001bd6a:	c3                   	ret    
c001bd6b:	90                   	nop

c001bd6c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bd6c:	6a 00                	push   0x0
c001bd6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd73:	50                   	push   eax
c001bd74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd79:	50                   	push   eax
c001bd7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd7f:	50                   	push   eax
c001bd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd84:	e8 9b ff ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd89:	83 c4 14             	add    esp,0x14
c001bd8c:	c3                   	ret    
c001bd8d:	90                   	nop

c001bd8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bd8e:	6a 0e                	push   0xe
c001bd90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd95:	50                   	push   eax
c001bd96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd9b:	50                   	push   eax
c001bd9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bda1:	50                   	push   eax
c001bda2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bda6:	e8 79 ff ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bdab:	83 c4 14             	add    esp,0x14
c001bdae:	0f b6 c0             	movzx  eax,al
c001bdb1:	c3                   	ret    

c001bdb2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bdb2:	55                   	push   ebp
c001bdb3:	57                   	push   edi
c001bdb4:	56                   	push   esi
c001bdb5:	53                   	push   ebx
c001bdb6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bdbb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bdc0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001bdc5:	6a 0a                	push   0xa
c001bdc7:	56                   	push   esi
c001bdc8:	55                   	push   ebp
c001bdc9:	57                   	push   edi
c001bdca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bdce:	e8 51 ff ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bdd3:	6a 0a                	push   0xa
c001bdd5:	89 c3                	mov    ebx,eax
c001bdd7:	56                   	push   esi
c001bdd8:	55                   	push   ebp
c001bdd9:	57                   	push   edi
c001bdda:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001bdde:	e8 41 ff ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bde3:	83 c4 28             	add    esp,0x28
c001bde6:	0f b6 db             	movzx  ebx,bl
c001bde9:	25 00 ff 00 00       	and    eax,0xff00
c001bdee:	09 d8                	or     eax,ebx
c001bdf0:	5b                   	pop    ebx
c001bdf1:	5e                   	pop    esi
c001bdf2:	5f                   	pop    edi
c001bdf3:	5d                   	pop    ebp
c001bdf4:	c3                   	ret    
c001bdf5:	90                   	nop

c001bdf6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bdf6:	6a 08                	push   0x8
c001bdf8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bdfd:	50                   	push   eax
c001bdfe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be03:	50                   	push   eax
c001be04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be09:	50                   	push   eax
c001be0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be0e:	e8 11 ff ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be13:	83 c4 14             	add    esp,0x14
c001be16:	0f b6 c4             	movzx  eax,ah
c001be19:	c3                   	ret    

c001be1a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001be1a:	6a 08                	push   0x8
c001be1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be21:	50                   	push   eax
c001be22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be27:	50                   	push   eax
c001be28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be2d:	50                   	push   eax
c001be2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be32:	e8 ed fe ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be37:	83 c4 14             	add    esp,0x14
c001be3a:	c3                   	ret    
c001be3b:	90                   	nop

c001be3c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001be3c:	6a 3c                	push   0x3c
c001be3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be43:	50                   	push   eax
c001be44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be49:	50                   	push   eax
c001be4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be4f:	50                   	push   eax
c001be50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be54:	e8 cb fe ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be59:	83 c4 14             	add    esp,0x14
c001be5c:	c3                   	ret    
c001be5d:	90                   	nop

c001be5e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001be5e:	6a 18                	push   0x18
c001be60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be65:	50                   	push   eax
c001be66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be6b:	50                   	push   eax
c001be6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001be71:	50                   	push   eax
c001be72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be76:	e8 a9 fe ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be7b:	83 c4 14             	add    esp,0x14
c001be7e:	0f b6 c4             	movzx  eax,ah
c001be81:	c3                   	ret    

c001be82 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001be82:	55                   	push   ebp
c001be83:	57                   	push   edi
c001be84:	56                   	push   esi
c001be85:	53                   	push   ebx
c001be86:	50                   	push   eax
c001be87:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001be8b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001be90:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001be97:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001be9c:	8d 43 12             	lea    eax,[ebx+0x12]
c001be9f:	83 c3 10             	add    ebx,0x10
c001bea2:	0f b6 c0             	movzx  eax,al
c001bea5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001beaa:	50                   	push   eax
c001beab:	51                   	push   ecx
c001beac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001beb0:	57                   	push   edi
c001beb1:	55                   	push   ebp
c001beb2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001beb6:	e8 69 fe ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bebb:	0f b6 db             	movzx  ebx,bl
c001bebe:	53                   	push   ebx
c001bebf:	89 c6                	mov    esi,eax
c001bec1:	c1 e6 10             	shl    esi,0x10
c001bec4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bec8:	51                   	push   ecx
c001bec9:	57                   	push   edi
c001beca:	55                   	push   ebp
c001becb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001becf:	e8 50 fe ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bed4:	83 c4 2c             	add    esp,0x2c
c001bed7:	0f b7 c0             	movzx  eax,ax
c001beda:	5b                   	pop    ebx
c001bedb:	09 f0                	or     eax,esi
c001bedd:	5e                   	pop    esi
c001bede:	5f                   	pop    edi
c001bedf:	5d                   	pop    ebp
c001bee0:	c3                   	ret    
c001bee1:	90                   	nop

c001bee2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bee2:	53                   	push   ebx
c001bee3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bee8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001beed:	c1 e1 10             	shl    ecx,0x10
c001bef0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bef4:	25 fc 00 00 00       	and    eax,0xfc
c001bef9:	09 c1                	or     ecx,eax
c001befb:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bf00:	c1 e0 08             	shl    eax,0x8
c001bf03:	09 c1                	or     ecx,eax
c001bf05:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bf0a:	c1 e0 0b             	shl    eax,0xb
c001bf0d:	09 c1                	or     ecx,eax
c001bf0f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bf15:	89 c8                	mov    eax,ecx
c001bf17:	ef                   	out    dx,eax
c001bf18:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bf1d:	ed                   	in     eax,dx
c001bf1e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001bf23:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001bf28:	74 0a                	je     c001bf34 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001bf2a:	0f b7 d8             	movzx  ebx,ax
c001bf2d:	89 d0                	mov    eax,edx
c001bf2f:	c1 e0 10             	shl    eax,0x10
c001bf32:	eb 05                	jmp    c001bf39 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001bf34:	66 31 c0             	xor    ax,ax
c001bf37:	89 d3                	mov    ebx,edx
c001bf39:	09 c3                	or     ebx,eax
c001bf3b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bf40:	89 c8                	mov    eax,ecx
c001bf42:	ef                   	out    dx,eax
c001bf43:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bf48:	89 d8                	mov    eax,ebx
c001bf4a:	ef                   	out    dx,eax
c001bf4b:	5b                   	pop    ebx
c001bf4c:	c3                   	ret    
c001bf4d:	90                   	nop

c001bf4e <PCI::checkBus(unsigned char)>:
c001bf4e:	56                   	push   esi
c001bf4f:	31 f6                	xor    esi,esi
c001bf51:	53                   	push   ebx
c001bf52:	51                   	push   ecx
c001bf53:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001bf57:	52                   	push   edx
c001bf58:	56                   	push   esi
c001bf59:	46                   	inc    esi
c001bf5a:	0f b6 c3             	movzx  eax,bl
c001bf5d:	50                   	push   eax
c001bf5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf62:	e8 4d 03 00 00       	call   c001c2b4 <PCI::checkDevice(unsigned char, unsigned char)>
c001bf67:	83 c4 10             	add    esp,0x10
c001bf6a:	83 fe 20             	cmp    esi,0x20
c001bf6d:	75 e8                	jne    c001bf57 <PCI::checkBus(unsigned char)+0x9>
c001bf6f:	58                   	pop    eax
c001bf70:	5b                   	pop    ebx
c001bf71:	5e                   	pop    esi
c001bf72:	c3                   	ret    
c001bf73:	90                   	nop

c001bf74 <PCI::foundDevice(PCIDeviceInfo)>:
c001bf74:	55                   	push   ebp
c001bf75:	57                   	push   edi
c001bf76:	56                   	push   esi
c001bf77:	53                   	push   ebx
c001bf78:	83 ec 1c             	sub    esp,0x1c
c001bf7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf7f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001bf85:	0f 84 51 01 00 00    	je     c001c0dc <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001bf8b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf8f:	66 81 f9 06 04       	cmp    cx,0x406
c001bf94:	75 2c                	jne    c001bfc2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001bf96:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001bf9b:	50                   	push   eax
c001bf9c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001bfa1:	50                   	push   eax
c001bfa2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001bfa7:	50                   	push   eax
c001bfa8:	56                   	push   esi
c001bfa9:	e8 b0 fe ff ff       	call   c001be5e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001bfae:	0f b6 c0             	movzx  eax,al
c001bfb1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bfb5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001bfb9:	83 c4 2c             	add    esp,0x2c
c001bfbc:	5b                   	pop    ebx
c001bfbd:	5e                   	pop    esi
c001bfbe:	5f                   	pop    edi
c001bfbf:	5d                   	pop    ebp
c001bfc0:	eb 8c                	jmp    c001bf4e <PCI::checkBus(unsigned char)>
c001bfc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bfc6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001bfcc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bfd0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001bfd4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001bfd8:	88 d3                	mov    bl,dl
c001bfda:	85 c0                	test   eax,eax
c001bfdc:	74 33                	je     c001c011 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001bfde:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bfe1:	85 d2                	test   edx,edx
c001bfe3:	74 28                	je     c001c00d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bfe5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001bfeb:	31 ef                	xor    edi,ebp
c001bfed:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001bff3:	75 18                	jne    c001c00d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bff5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bff9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001bfff:	75 0c                	jne    c001c00d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c001:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c007:	0f 84 cf 00 00 00    	je     c001c0dc <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c00d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c00f:	eb c9                	jmp    c001bfda <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c011:	66 81 f9 01 06       	cmp    cx,0x601
c001c016:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c01a:	75 18                	jne    c001c034 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	68 58 01 00 00       	push   0x158
c001c024:	e8 fb 2f ff ff       	call   c000f024 <operator new(unsigned long)>
c001c029:	59                   	pop    ecx
c001c02a:	89 c5                	mov    ebp,eax
c001c02c:	5f                   	pop    edi
c001c02d:	68 68 2f 02 c0       	push   0xc0022f68
c001c032:	eb 7d                	jmp    c001c0b1 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c034:	66 81 f9 01 01       	cmp    cx,0x101
c001c039:	75 60                	jne    c001c09b <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c03b:	83 ec 0c             	sub    esp,0xc
c001c03e:	68 70 02 00 00       	push   0x270
c001c043:	e8 dc 2f ff ff       	call   c000f024 <operator new(unsigned long)>
c001c048:	89 04 24             	mov    DWORD PTR [esp],eax
c001c04b:	89 c5                	mov    ebp,eax
c001c04d:	e8 26 03 00 00       	call   c001c378 <IDE::IDE()>
c001c052:	58                   	pop    eax
c001c053:	5a                   	pop    edx
c001c054:	55                   	push   ebp
c001c055:	56                   	push   esi
c001c056:	e8 13 45 ff ff       	call   c001056e <Device::addChild(Device*)>
c001c05b:	83 ec 1c             	sub    esp,0x1c
c001c05e:	b9 09 00 00 00       	mov    ecx,0x9
c001c063:	fc                   	cld    
c001c064:	89 e7                	mov    edi,esp
c001c066:	89 de                	mov    esi,ebx
c001c068:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c06a:	55                   	push   ebp
c001c06b:	e8 dc 43 ff ff       	call   c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001c070:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c073:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c077:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c07f:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c087:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c08f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c092:	83 c4 4c             	add    esp,0x4c
c001c095:	5b                   	pop    ebx
c001c096:	5e                   	pop    esi
c001c097:	5f                   	pop    edi
c001c098:	5d                   	pop    ebp
c001c099:	ff e0                	jmp    eax
c001c09b:	83 ec 0c             	sub    esp,0xc
c001c09e:	68 58 01 00 00       	push   0x158
c001c0a3:	e8 7c 2f ff ff       	call   c000f024 <operator new(unsigned long)>
c001c0a8:	59                   	pop    ecx
c001c0a9:	89 c5                	mov    ebp,eax
c001c0ab:	5f                   	pop    edi
c001c0ac:	68 87 2f 02 c0       	push   0xc0022f87
c001c0b1:	55                   	push   ebp
c001c0b2:	e8 a3 47 ff ff       	call   c001085a <DriverlessDevice::DriverlessDevice(char const*)>
c001c0b7:	58                   	pop    eax
c001c0b8:	5a                   	pop    edx
c001c0b9:	55                   	push   ebp
c001c0ba:	56                   	push   esi
c001c0bb:	e8 ae 44 ff ff       	call   c001056e <Device::addChild(Device*)>
c001c0c0:	b9 09 00 00 00       	mov    ecx,0x9
c001c0c5:	fc                   	cld    
c001c0c6:	89 df                	mov    edi,ebx
c001c0c8:	89 de                	mov    esi,ebx
c001c0ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c0cc:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c0d0:	83 c4 2c             	add    esp,0x2c
c001c0d3:	5b                   	pop    ebx
c001c0d4:	5e                   	pop    esi
c001c0d5:	5f                   	pop    edi
c001c0d6:	5d                   	pop    ebp
c001c0d7:	e9 70 43 ff ff       	jmp    c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001c0dc:	83 c4 1c             	add    esp,0x1c
c001c0df:	5b                   	pop    ebx
c001c0e0:	5e                   	pop    esi
c001c0e1:	5f                   	pop    edi
c001c0e2:	5d                   	pop    ebp
c001c0e3:	c3                   	ret    

c001c0e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c0e4:	55                   	push   ebp
c001c0e5:	57                   	push   edi
c001c0e6:	56                   	push   esi
c001c0e7:	53                   	push   ebx
c001c0e8:	83 ec 5c             	sub    esp,0x5c
c001c0eb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c0ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0f3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c0f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0fb:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c103:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c108:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c10d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c112:	6a 0c                	push   0xc
c001c114:	55                   	push   ebp
c001c115:	53                   	push   ebx
c001c116:	57                   	push   edi
c001c117:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c11e:	e8 01 fc ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c123:	83 c4 0c             	add    esp,0xc
c001c126:	6a 00                	push   0x0
c001c128:	68 a1 2f 02 c0       	push   0xc0022fa1
c001c12d:	e8 27 30 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c132:	55                   	push   ebp
c001c133:	53                   	push   ebx
c001c134:	57                   	push   edi
c001c135:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c13c:	e8 71 fc ff ff       	call   c001bdb2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c141:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c146:	83 c4 20             	add    esp,0x20
c001c149:	55                   	push   ebp
c001c14a:	53                   	push   ebx
c001c14b:	57                   	push   edi
c001c14c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c150:	e8 e7 fc ff ff       	call   c001be3c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c155:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c15c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c160:	55                   	push   ebp
c001c161:	53                   	push   ebx
c001c162:	57                   	push   edi
c001c163:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c16a:	e8 b5 fb ff ff       	call   c001bd24 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c16f:	0f b6 c4             	movzx  eax,ah
c001c172:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c176:	83 c4 18             	add    esp,0x18
c001c179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c17d:	68 b5 2f 02 c0       	push   0xc0022fb5
c001c182:	e8 d2 2f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c187:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c18b:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c18f:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c19d:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c1a4:	74 6c                	je     c001c212 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c1a6:	31 f6                	xor    esi,esi
c001c1a8:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c001c1ae:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c1b4:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c1ba:	7e 56                	jle    c001c212 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c1bc:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c1bf:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c1c6:	39 cb                	cmp    ebx,ecx
c001c1c8:	75 45                	jne    c001c20f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c1ca:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c1d1:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c1d5:	75 38                	jne    c001c20f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c1d7:	83 ec 0c             	sub    esp,0xc
c001c1da:	68 c4 2f 02 c0       	push   0xc0022fc4
c001c1df:	e8 75 2f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c1e4:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c001c1ea:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c1f0:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c1f8:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c1fc:	52                   	push   edx
c001c1fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c201:	53                   	push   ebx
c001c202:	68 e9 2f 02 c0       	push   0xc0022fe9
c001c207:	e8 4d 2f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c20c:	83 c4 20             	add    esp,0x20
c001c20f:	46                   	inc    esi
c001c210:	eb 96                	jmp    c001c1a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c212:	31 d2                	xor    edx,edx
c001c214:	83 ec 0c             	sub    esp,0xc
c001c217:	55                   	push   ebp
c001c218:	53                   	push   ebx
c001c219:	57                   	push   edi
c001c21a:	52                   	push   edx
c001c21b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c21f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c226:	e8 57 fc ff ff       	call   c001be82 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c22b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c22f:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c233:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c237:	42                   	inc    edx
c001c238:	83 c4 20             	add    esp,0x20
c001c23b:	83 fa 06             	cmp    edx,0x6
c001c23e:	75 d4                	jne    c001c214 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c240:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c244:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c248:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c24c:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c250:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c254:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c258:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c25d:	86 e0                	xchg   al,ah
c001c25f:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c264:	55                   	push   ebp
c001c265:	53                   	push   ebx
c001c266:	57                   	push   edi
c001c267:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c26b:	e8 86 fb ff ff       	call   c001bdf6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c270:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c274:	55                   	push   ebp
c001c275:	53                   	push   ebx
c001c276:	57                   	push   edi
c001c277:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c27e:	e8 e9 fa ff ff       	call   c001bd6c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c283:	83 ec 0c             	sub    esp,0xc
c001c286:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c28b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c28f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c293:	b9 09 00 00 00       	mov    ecx,0x9
c001c298:	fc                   	cld    
c001c299:	89 e7                	mov    edi,esp
c001c29b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c29d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c2a4:	e8 cb fc ff ff       	call   c001bf74 <PCI::foundDevice(PCIDeviceInfo)>
c001c2a9:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c2af:	5b                   	pop    ebx
c001c2b0:	5e                   	pop    esi
c001c2b1:	5f                   	pop    edi
c001c2b2:	5d                   	pop    ebp
c001c2b3:	c3                   	ret    

c001c2b4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c2b4:	55                   	push   ebp
c001c2b5:	57                   	push   edi
c001c2b6:	56                   	push   esi
c001c2b7:	53                   	push   ebx
c001c2b8:	83 ec 0c             	sub    esp,0xc
c001c2bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c2c0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c2c4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c2c9:	6a 00                	push   0x0
c001c2cb:	56                   	push   esi
c001c2cc:	57                   	push   edi
c001c2cd:	55                   	push   ebp
c001c2ce:	e8 99 fa ff ff       	call   c001bd6c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c2d3:	6a 00                	push   0x0
c001c2d5:	56                   	push   esi
c001c2d6:	57                   	push   edi
c001c2d7:	55                   	push   ebp
c001c2d8:	e8 07 fe ff ff       	call   c001c0e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c2dd:	83 c4 20             	add    esp,0x20
c001c2e0:	6a 00                	push   0x0
c001c2e2:	56                   	push   esi
c001c2e3:	57                   	push   edi
c001c2e4:	55                   	push   ebp
c001c2e5:	e8 a4 fa ff ff       	call   c001bd8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c2ea:	83 c4 10             	add    esp,0x10
c001c2ed:	84 c0                	test   al,al
c001c2ef:	79 27                	jns    c001c318 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c2f1:	bb 01 00 00 00       	mov    ebx,0x1
c001c2f6:	53                   	push   ebx
c001c2f7:	56                   	push   esi
c001c2f8:	57                   	push   edi
c001c2f9:	55                   	push   ebp
c001c2fa:	e8 6d fa ff ff       	call   c001bd6c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	66 40                	inc    ax
c001c304:	74 0c                	je     c001c312 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c306:	53                   	push   ebx
c001c307:	56                   	push   esi
c001c308:	57                   	push   edi
c001c309:	55                   	push   ebp
c001c30a:	e8 d5 fd ff ff       	call   c001c0e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c30f:	83 c4 10             	add    esp,0x10
c001c312:	43                   	inc    ebx
c001c313:	83 fb 08             	cmp    ebx,0x8
c001c316:	75 de                	jne    c001c2f6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c318:	83 c4 0c             	add    esp,0xc
c001c31b:	5b                   	pop    ebx
c001c31c:	5e                   	pop    esi
c001c31d:	5f                   	pop    edi
c001c31e:	5d                   	pop    ebp
c001c31f:	c3                   	ret    

c001c320 <PCI::detect()>:
c001c320:	56                   	push   esi
c001c321:	53                   	push   ebx
c001c322:	53                   	push   ebx
c001c323:	31 db                	xor    ebx,ebx
c001c325:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c329:	6a 00                	push   0x0
c001c32b:	6a 00                	push   0x0
c001c32d:	6a 00                	push   0x0
c001c32f:	56                   	push   esi
c001c330:	e8 59 fa ff ff       	call   c001bd8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c335:	83 c4 10             	add    esp,0x10
c001c338:	a8 80                	test   al,0x80
c001c33a:	75 21                	jne    c001c35d <PCI::detect()+0x3d>
c001c33c:	51                   	push   ecx
c001c33d:	51                   	push   ecx
c001c33e:	6a 00                	push   0x0
c001c340:	56                   	push   esi
c001c341:	e8 08 fc ff ff       	call   c001bf4e <PCI::checkBus(unsigned char)>
c001c346:	83 c4 10             	add    esp,0x10
c001c349:	eb 24                	jmp    c001c36f <PCI::detect()+0x4f>
c001c34b:	52                   	push   edx
c001c34c:	52                   	push   edx
c001c34d:	53                   	push   ebx
c001c34e:	43                   	inc    ebx
c001c34f:	56                   	push   esi
c001c350:	e8 f9 fb ff ff       	call   c001bf4e <PCI::checkBus(unsigned char)>
c001c355:	83 c4 10             	add    esp,0x10
c001c358:	83 fb 08             	cmp    ebx,0x8
c001c35b:	74 12                	je     c001c36f <PCI::detect()+0x4f>
c001c35d:	53                   	push   ebx
c001c35e:	6a 00                	push   0x0
c001c360:	6a 00                	push   0x0
c001c362:	56                   	push   esi
c001c363:	e8 04 fa ff ff       	call   c001bd6c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c368:	83 c4 10             	add    esp,0x10
c001c36b:	66 40                	inc    ax
c001c36d:	74 dc                	je     c001c34b <PCI::detect()+0x2b>
c001c36f:	58                   	pop    eax
c001c370:	5b                   	pop    ebx
c001c371:	5e                   	pop    esi
c001c372:	c3                   	ret    
c001c373:	90                   	nop

c001c374 <IDE::close(int, int, void*)>:
c001c374:	83 c8 ff             	or     eax,0xffffffff
c001c377:	c3                   	ret    

c001c378 <IDE::IDE()>:
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37f:	83 ec 08             	sub    esp,0x8
c001c382:	68 30 30 02 c0       	push   0xc0023030
c001c387:	50                   	push   eax
c001c388:	e8 63 45 ff ff       	call   c00108f0 <HardDiskController::HardDiskController(char const*)>
c001c38d:	83 c4 10             	add    esp,0x10
c001c390:	ba 70 32 02 c0       	mov    edx,0xc0023270
c001c395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c399:	89 10                	mov    DWORD PTR [eax],edx
c001c39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c3a6:	90                   	nop
c001c3a7:	83 c4 0c             	add    esp,0xc
c001c3aa:	c3                   	ret    
c001c3ab:	90                   	nop

c001c3ac <IDE::prepareInterrupt(unsigned char)>:
c001c3ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3b5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c3bd:	c3                   	ret    

c001c3be <selectDrive(unsigned char, unsigned char)>:
c001c3be:	c3                   	ret    
c001c3bf:	90                   	nop

c001c3c0 <IDE::getBase(unsigned char)>:
c001c3c0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c3c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3c9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c3d1:	c3                   	ret    

c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c3d2:	55                   	push   ebp
c001c3d3:	57                   	push   edi
c001c3d4:	56                   	push   esi
c001c3d5:	53                   	push   ebx
c001c3d6:	83 ec 1c             	sub    esp,0x1c
c001c3d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c3dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c3e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c3e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c3e9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c3ec:	80 f9 03             	cmp    cl,0x3
c001c3ef:	77 51                	ja     c001c442 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c3f1:	0f b6 f2             	movzx  esi,dl
c001c3f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3f8:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c3fb:	0f b6 db             	movzx  ebx,bl
c001c3fe:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c402:	83 ca 80             	or     edx,0xffffff80
c001c405:	0f b6 d2             	movzx  edx,dl
c001c408:	52                   	push   edx
c001c409:	6a 0c                	push   0xc
c001c40b:	56                   	push   esi
c001c40c:	57                   	push   edi
c001c40d:	e8 c0 ff ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c412:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c417:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c41b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c41f:	ee                   	out    dx,al
c001c420:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c425:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c429:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c42d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c431:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c439:	83 c4 2c             	add    esp,0x2c
c001c43c:	5b                   	pop    ebx
c001c43d:	5e                   	pop    esi
c001c43e:	5f                   	pop    edi
c001c43f:	5d                   	pop    ebp
c001c440:	eb 90                	jmp    c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c442:	80 fb 07             	cmp    bl,0x7
c001c445:	77 12                	ja     c001c459 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c447:	0f b6 d2             	movzx  edx,dl
c001c44a:	0f b6 db             	movzx  ebx,bl
c001c44d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c455:	89 da                	mov    edx,ebx
c001c457:	eb 2f                	jmp    c001c488 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c459:	80 fb 0d             	cmp    bl,0xd
c001c45c:	77 13                	ja     c001c471 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c45e:	0f b6 d2             	movzx  edx,dl
c001c461:	0f b6 db             	movzx  ebx,bl
c001c464:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c46b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c46f:	eb 17                	jmp    c001c488 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c471:	80 fb 15             	cmp    bl,0x15
c001c474:	77 13                	ja     c001c489 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c476:	0f b6 d2             	movzx  edx,dl
c001c479:	0f b6 db             	movzx  ebx,bl
c001c47c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c484:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c488:	ee                   	out    dx,al
c001c489:	83 c4 1c             	add    esp,0x1c
c001c48c:	5b                   	pop    ebx
c001c48d:	5e                   	pop    esi
c001c48e:	5f                   	pop    edi
c001c48f:	5d                   	pop    ebp
c001c490:	c3                   	ret    
c001c491:	90                   	nop

c001c492 <IDE::read(unsigned char, unsigned char)>:
c001c492:	55                   	push   ebp
c001c493:	57                   	push   edi
c001c494:	56                   	push   esi
c001c495:	53                   	push   ebx
c001c496:	83 ec 1c             	sub    esp,0x1c
c001c499:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c49d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c4a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c4a5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c4a8:	3c 03                	cmp    al,0x3
c001c4aa:	77 43                	ja     c001c4ef <IDE::read(unsigned char, unsigned char)+0x5d>
c001c4ac:	0f b6 f2             	movzx  esi,dl
c001c4af:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c4b2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c4b6:	83 c8 80             	or     eax,0xffffff80
c001c4b9:	0f b6 c0             	movzx  eax,al
c001c4bc:	50                   	push   eax
c001c4bd:	6a 0c                	push   0xc
c001c4bf:	56                   	push   esi
c001c4c0:	57                   	push   edi
c001c4c1:	e8 0c ff ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4c6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c4cb:	0f b6 c3             	movzx  eax,bl
c001c4ce:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c4d2:	ec                   	in     al,dx
c001c4d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c4d8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c4dc:	52                   	push   edx
c001c4dd:	6a 0c                	push   0xc
c001c4df:	56                   	push   esi
c001c4e0:	57                   	push   edi
c001c4e1:	e8 ec fe ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4e6:	83 c4 20             	add    esp,0x20
c001c4e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c4ed:	eb 49                	jmp    c001c538 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c4ef:	80 fb 07             	cmp    bl,0x7
c001c4f2:	77 12                	ja     c001c506 <IDE::read(unsigned char, unsigned char)+0x74>
c001c4f4:	0f b6 d2             	movzx  edx,dl
c001c4f7:	0f b6 c3             	movzx  eax,bl
c001c4fa:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c502:	89 c2                	mov    edx,eax
c001c504:	eb 31                	jmp    c001c537 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c506:	80 fb 0d             	cmp    bl,0xd
c001c509:	77 13                	ja     c001c51e <IDE::read(unsigned char, unsigned char)+0x8c>
c001c50b:	0f b6 d2             	movzx  edx,dl
c001c50e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c515:	0f b6 d3             	movzx  edx,bl
c001c518:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c51c:	eb 19                	jmp    c001c537 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c51e:	31 c0                	xor    eax,eax
c001c520:	80 fb 15             	cmp    bl,0x15
c001c523:	77 13                	ja     c001c538 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c525:	0f b6 d2             	movzx  edx,dl
c001c528:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c530:	0f b6 d3             	movzx  edx,bl
c001c533:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c537:	ec                   	in     al,dx
c001c538:	83 c4 1c             	add    esp,0x1c
c001c53b:	5b                   	pop    ebx
c001c53c:	5e                   	pop    esi
c001c53d:	5f                   	pop    edi
c001c53e:	5d                   	pop    ebp
c001c53f:	c3                   	ret    

c001c540 <IDE::waitInterrupt(unsigned char)>:
c001c540:	57                   	push   edi
c001c541:	56                   	push   esi
c001c542:	31 f6                	xor    esi,esi
c001c544:	53                   	push   ebx
c001c545:	83 ec 10             	sub    esp,0x10
c001c548:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c54c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c550:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c554:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c559:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c560:	84 db                	test   bl,bl
c001c562:	75 37                	jne    c001c59b <IDE::waitInterrupt(unsigned char)+0x5b>
c001c564:	52                   	push   edx
c001c565:	6a 0c                	push   0xc
c001c567:	50                   	push   eax
c001c568:	57                   	push   edi
c001c569:	e8 24 ff ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	a8 01                	test   al,0x1
c001c573:	75 2e                	jne    c001c5a3 <IDE::waitInterrupt(unsigned char)+0x63>
c001c575:	f7 c6 04 00 00 00    	test   esi,0x4
c001c57b:	75 16                	jne    c001c593 <IDE::waitInterrupt(unsigned char)+0x53>
c001c57d:	83 fe 32             	cmp    esi,0x32
c001c580:	7e 11                	jle    c001c593 <IDE::waitInterrupt(unsigned char)+0x53>
c001c582:	50                   	push   eax
c001c583:	50                   	push   eax
c001c584:	6a 00                	push   0x0
c001c586:	68 80 96 98 00       	push   0x989680
c001c58b:	e8 25 c5 ff ff       	call   c0018ab5 <nanoSleep(unsigned long long)>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	83 fe 3c             	cmp    esi,0x3c
c001c596:	74 0b                	je     c001c5a3 <IDE::waitInterrupt(unsigned char)+0x63>
c001c598:	46                   	inc    esi
c001c599:	eb b9                	jmp    c001c554 <IDE::waitInterrupt(unsigned char)+0x14>
c001c59b:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	88 d8                	mov    al,bl
c001c5a8:	5b                   	pop    ebx
c001c5a9:	5e                   	pop    esi
c001c5aa:	5f                   	pop    edi
c001c5ab:	c3                   	ret    

c001c5ac <ideChannel0IRQHandler(regs*, void*)>:
c001c5ac:	83 ec 10             	sub    esp,0x10
c001c5af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5b3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c5ba:	6a 07                	push   0x7
c001c5bc:	6a 00                	push   0x0
c001c5be:	50                   	push   eax
c001c5bf:	e8 ce fe ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001c5c4:	83 c4 1c             	add    esp,0x1c
c001c5c7:	c3                   	ret    

c001c5c8 <ideChannel1IRQHandler(regs*, void*)>:
c001c5c8:	83 ec 10             	sub    esp,0x10
c001c5cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5cf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c5d6:	6a 07                	push   0x7
c001c5d8:	6a 01                	push   0x1
c001c5da:	50                   	push   eax
c001c5db:	e8 b2 fe ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001c5e0:	83 c4 1c             	add    esp,0x1c
c001c5e3:	c3                   	ret    

c001c5e4 <IDE::enableIRQs(unsigned char, bool)>:
c001c5e4:	57                   	push   edi
c001c5e5:	56                   	push   esi
c001c5e6:	be 04 00 00 00       	mov    esi,0x4
c001c5eb:	53                   	push   ebx
c001c5ec:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c5f1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c5f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5fa:	0f 94 c0             	sete   al
c001c5fd:	01 c0                	add    eax,eax
c001c5ff:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c606:	0f b6 c0             	movzx  eax,al
c001c609:	50                   	push   eax
c001c60a:	6a 0c                	push   0xc
c001c60c:	57                   	push   edi
c001c60d:	53                   	push   ebx
c001c60e:	e8 bf fd ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c613:	83 c4 10             	add    esp,0x10
c001c616:	50                   	push   eax
c001c617:	6a 0c                	push   0xc
c001c619:	57                   	push   edi
c001c61a:	53                   	push   ebx
c001c61b:	e8 72 fe ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001c620:	83 c4 10             	add    esp,0x10
c001c623:	4e                   	dec    esi
c001c624:	75 f0                	jne    c001c616 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c626:	5b                   	pop    ebx
c001c627:	5e                   	pop    esi
c001c628:	5f                   	pop    edi
c001c629:	c3                   	ret    

c001c62a <IDE::open(int, int, void*)>:
c001c62a:	55                   	push   ebp
c001c62b:	57                   	push   edi
c001c62c:	56                   	push   esi
c001c62d:	53                   	push   ebx
c001c62e:	83 ec 1c             	sub    esp,0x1c
c001c631:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c635:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c63e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c647:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c64e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c655:	0f 85 b2 02 00 00    	jne    c001c90d <IDE::open(int, int, void*)+0x2e3>
c001c65b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c661:	88 04 24             	mov    BYTE PTR [esp],al
c001c664:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c667:	83 e0 7f             	and    eax,0x7f
c001c66a:	83 f8 05             	cmp    eax,0x5
c001c66d:	74 05                	je     c001c674 <IDE::open(int, int, void*)+0x4a>
c001c66f:	83 f8 0f             	cmp    eax,0xf
c001c672:	75 32                	jne    c001c6a6 <IDE::open(int, int, void*)+0x7c>
c001c674:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c67a:	83 e0 fc             	and    eax,0xfffffffc
c001c67d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c684:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c68a:	83 e0 fc             	and    eax,0xfffffffc
c001c68d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c694:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c69a:	83 e0 fc             	and    eax,0xfffffffc
c001c69d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c6a4:	eb 14                	jmp    c001c6ba <IDE::open(int, int, void*)+0x90>
c001c6a6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c6b0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c6ba:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c6c1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c6c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6cc:	89 c6                	mov    esi,eax
c001c6ce:	89 e8                	mov    eax,ebp
c001c6d0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c6d5:	c1 e6 10             	shl    esi,0x10
c001c6d8:	89 fa                	mov    edx,edi
c001c6da:	c1 e0 0b             	shl    eax,0xb
c001c6dd:	09 f0                	or     eax,esi
c001c6df:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c6e6:	c1 e6 08             	shl    esi,0x8
c001c6e9:	09 c6                	or     esi,eax
c001c6eb:	89 f0                	mov    eax,esi
c001c6ed:	0d 08 00 00 80       	or     eax,0x80000008
c001c6f2:	ef                   	out    dx,eax
c001c6f3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c6f8:	89 ca                	mov    edx,ecx
c001c6fa:	ed                   	in     eax,dx
c001c6fb:	c1 e8 10             	shr    eax,0x10
c001c6fe:	3d ff ff 00 00       	cmp    eax,0xffff
c001c703:	0f 84 f3 00 00 00    	je     c001c7fc <IDE::open(int, int, void*)+0x1d2>
c001c709:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c70f:	89 fa                	mov    edx,edi
c001c711:	89 f0                	mov    eax,esi
c001c713:	ef                   	out    dx,eax
c001c714:	b0 fe                	mov    al,0xfe
c001c716:	89 ca                	mov    edx,ecx
c001c718:	ee                   	out    dx,al
c001c719:	89 f0                	mov    eax,esi
c001c71b:	89 fa                	mov    edx,edi
c001c71d:	ef                   	out    dx,eax
c001c71e:	89 ca                	mov    edx,ecx
c001c720:	ed                   	in     eax,dx
c001c721:	3c fe                	cmp    al,0xfe
c001c723:	0f 85 a9 00 00 00    	jne    c001c7d2 <IDE::open(int, int, void*)+0x1a8>
c001c729:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c001c72f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c736:	74 33                	je     c001c76b <IDE::open(int, int, void*)+0x141>
c001c738:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c73e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c742:	40                   	inc    eax
c001c743:	83 ec 0c             	sub    esp,0xc
c001c746:	0f b6 c0             	movzx  eax,al
c001c749:	50                   	push   eax
c001c74a:	55                   	push   ebp
c001c74b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c74f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c755:	51                   	push   ecx
c001c756:	e8 1d 72 ff ff       	call   c0013978 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c75b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c760:	83 c4 1c             	add    esp,0x1c
c001c763:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c769:	eb 0a                	jmp    c001c775 <IDE::open(int, int, void*)+0x14b>
c001c76b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c775:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c77c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c783:	c1 e1 10             	shl    ecx,0x10
c001c786:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c78b:	c1 e0 08             	shl    eax,0x8
c001c78e:	89 fa                	mov    edx,edi
c001c790:	09 c1                	or     ecx,eax
c001c792:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c799:	c1 e0 0b             	shl    eax,0xb
c001c79c:	09 c1                	or     ecx,eax
c001c79e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c7a4:	89 c8                	mov    eax,ecx
c001c7a6:	ef                   	out    dx,eax
c001c7a7:	be fc 0c 00 00       	mov    esi,0xcfc
c001c7ac:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c7b2:	89 f2                	mov    edx,esi
c001c7b4:	ee                   	out    dx,al
c001c7b5:	89 c8                	mov    eax,ecx
c001c7b7:	89 fa                	mov    edx,edi
c001c7b9:	ef                   	out    dx,eax
c001c7ba:	89 f2                	mov    edx,esi
c001c7bc:	ed                   	in     eax,dx
c001c7bd:	0f b6 c0             	movzx  eax,al
c001c7c0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c7c6:	74 44                	je     c001c80c <IDE::open(int, int, void*)+0x1e2>
c001c7c8:	83 ec 0c             	sub    esp,0xc
c001c7cb:	68 48 30 02 c0       	push   0xc0023048
c001c7d0:	eb 32                	jmp    c001c804 <IDE::open(int, int, void*)+0x1da>
c001c7d2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c7db:	75 15                	jne    c001c7f2 <IDE::open(int, int, void*)+0x1c8>
c001c7dd:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001c7e1:	74 06                	je     c001c7e9 <IDE::open(int, int, void*)+0x1bf>
c001c7e3:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001c7e7:	75 09                	jne    c001c7f2 <IDE::open(int, int, void*)+0x1c8>
c001c7e9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c7f0:	eb 1a                	jmp    c001c80c <IDE::open(int, int, void*)+0x1e2>
c001c7f2:	83 ec 0c             	sub    esp,0xc
c001c7f5:	68 50 30 02 c0       	push   0xc0023050
c001c7fa:	eb 08                	jmp    c001c804 <IDE::open(int, int, void*)+0x1da>
c001c7fc:	83 ec 0c             	sub    esp,0xc
c001c7ff:	68 81 30 02 c0       	push   0xc0023081
c001c804:	e8 45 8d ff ff       	call   c001554e <Krnl::panic(char const*)>
c001c809:	83 c4 10             	add    esp,0x10
c001c80c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c813:	79 1a                	jns    c001c82f <IDE::open(int, int, void*)+0x205>
c001c815:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c81b:	83 e0 fc             	and    eax,0xfffffffc
c001c81e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c825:	83 c0 08             	add    eax,0x8
c001c828:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c82f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c835:	89 c2                	mov    edx,eax
c001c837:	83 e2 0f             	and    edx,0xf
c001c83a:	66 83 fa 08          	cmp    dx,0x8
c001c83e:	75 0a                	jne    c001c84a <IDE::open(int, int, void*)+0x220>
c001c840:	83 e8 02             	sub    eax,0x2
c001c843:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c84a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c850:	89 c2                	mov    edx,eax
c001c852:	83 e2 0f             	and    edx,0xf
c001c855:	66 83 fa 08          	cmp    dx,0x8
c001c859:	75 0a                	jne    c001c865 <IDE::open(int, int, void*)+0x23b>
c001c85b:	83 e8 02             	sub    eax,0x2
c001c85e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c865:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c86c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c873:	89 d0                	mov    eax,edx
c001c875:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c878:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c87c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c880:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c883:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c888:	0f b6 c9             	movzx  ecx,cl
c001c88b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c892:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c895:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c899:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c89d:	8d 50 02             	lea    edx,[eax+0x2]
c001c8a0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c8a5:	0f b6 d2             	movzx  edx,dl
c001c8a8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c8ae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c8b1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c8b5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c8b9:	8d 48 03             	lea    ecx,[eax+0x3]
c001c8bc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c8c1:	0f b6 c9             	movzx  ecx,cl
c001c8c4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c8ca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c8cd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c8d1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c8d5:	8d 50 04             	lea    edx,[eax+0x4]
c001c8d8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c8de:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c8e3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c8ea:	66 85 f6             	test   si,si
c001c8ed:	74 3e                	je     c001c92d <IDE::open(int, int, void*)+0x303>
c001c8ef:	0f b6 d2             	movzx  edx,dl
c001c8f2:	83 c0 05             	add    eax,0x5
c001c8f5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c8f8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c8fc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c900:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c906:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c90b:	eb 20                	jmp    c001c92d <IDE::open(int, int, void*)+0x303>
c001c90d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c917:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c921:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c928:	e9 02 ff ff ff       	jmp    c001c82f <IDE::open(int, int, void*)+0x205>
c001c92d:	52                   	push   edx
c001c92e:	52                   	push   edx
c001c92f:	6a 00                	push   0x0
c001c931:	53                   	push   ebx
c001c932:	e8 75 fa ff ff       	call   c001c3ac <IDE::prepareInterrupt(unsigned char)>
c001c937:	59                   	pop    ecx
c001c938:	5e                   	pop    esi
c001c939:	6a 01                	push   0x1
c001c93b:	53                   	push   ebx
c001c93c:	e8 6b fa ff ff       	call   c001c3ac <IDE::prepareInterrupt(unsigned char)>
c001c941:	83 c4 0c             	add    esp,0xc
c001c944:	6a 00                	push   0x0
c001c946:	6a 00                	push   0x0
c001c948:	53                   	push   ebx
c001c949:	e8 96 fc ff ff       	call   c001c5e4 <IDE::enableIRQs(unsigned char, bool)>
c001c94e:	83 c4 0c             	add    esp,0xc
c001c951:	6a 00                	push   0x0
c001c953:	6a 01                	push   0x1
c001c955:	53                   	push   ebx
c001c956:	e8 89 fc ff ff       	call   c001c5e4 <IDE::enableIRQs(unsigned char, bool)>
c001c95b:	83 c4 10             	add    esp,0x10
c001c95e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c965:	74 40                	je     c001c9a7 <IDE::open(int, int, void*)+0x37d>
c001c967:	83 ec 0c             	sub    esp,0xc
c001c96a:	68 ab 30 02 c0       	push   0xc00230ab
c001c96f:	e8 e5 27 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c977:	6a 01                	push   0x1
c001c979:	68 ac c5 01 c0       	push   0xc001c5ac
c001c97e:	6a 0e                	push   0xe
c001c980:	53                   	push   ebx
c001c981:	e8 3c 3b ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c986:	83 c4 14             	add    esp,0x14
c001c989:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c98f:	53                   	push   ebx
c001c990:	6a 01                	push   0x1
c001c992:	68 c8 c5 01 c0       	push   0xc001c5c8
c001c997:	6a 0f                	push   0xf
c001c999:	53                   	push   ebx
c001c99a:	e8 23 3b ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c99f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c9a5:	eb 4a                	jmp    c001c9f1 <IDE::open(int, int, void*)+0x3c7>
c001c9a7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c9b1:	50                   	push   eax
c001c9b2:	6a 0f                	push   0xf
c001c9b4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c9ba:	68 c7 30 02 c0       	push   0xc00230c7
c001c9bf:	e8 95 27 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c9c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9c7:	6a 00                	push   0x0
c001c9c9:	68 ac c5 01 c0       	push   0xc001c5ac
c001c9ce:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c9d4:	53                   	push   ebx
c001c9d5:	e8 e8 3a ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c9da:	83 c4 14             	add    esp,0x14
c001c9dd:	53                   	push   ebx
c001c9de:	6a 00                	push   0x0
c001c9e0:	68 c8 c5 01 c0       	push   0xc001c5c8
c001c9e5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c9eb:	53                   	push   ebx
c001c9ec:	e8 d1 3a ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c9f1:	83 c4 20             	add    esp,0x20
c001c9f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9f6:	83 ec 0c             	sub    esp,0xc
c001c9f9:	53                   	push   ebx
c001c9fa:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c9fd:	83 c4 0c             	add    esp,0xc
c001ca00:	6a 07                	push   0x7
c001ca02:	6a 00                	push   0x0
c001ca04:	53                   	push   ebx
c001ca05:	e8 88 fa ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001ca0a:	83 c4 0c             	add    esp,0xc
c001ca0d:	6a 07                	push   0x7
c001ca0f:	6a 01                	push   0x1
c001ca11:	53                   	push   ebx
c001ca12:	e8 7b fa ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001ca17:	83 c4 0c             	add    esp,0xc
c001ca1a:	6a 01                	push   0x1
c001ca1c:	6a 00                	push   0x0
c001ca1e:	53                   	push   ebx
c001ca1f:	e8 c0 fb ff ff       	call   c001c5e4 <IDE::enableIRQs(unsigned char, bool)>
c001ca24:	83 c4 0c             	add    esp,0xc
c001ca27:	6a 01                	push   0x1
c001ca29:	6a 01                	push   0x1
c001ca2b:	53                   	push   ebx
c001ca2c:	e8 b3 fb ff ff       	call   c001c5e4 <IDE::enableIRQs(unsigned char, bool)>
c001ca31:	83 c4 2c             	add    esp,0x2c
c001ca34:	31 c0                	xor    eax,eax
c001ca36:	5b                   	pop    ebx
c001ca37:	5e                   	pop    esi
c001ca38:	5f                   	pop    edi
c001ca39:	5d                   	pop    ebp
c001ca3a:	c3                   	ret    
c001ca3b:	90                   	nop

c001ca3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ca3c:	55                   	push   ebp
c001ca3d:	57                   	push   edi
c001ca3e:	56                   	push   esi
c001ca3f:	53                   	push   ebx
c001ca40:	83 ec 1c             	sub    esp,0x1c
c001ca43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ca47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ca53:	8d 50 f8             	lea    edx,[eax-0x8]
c001ca56:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ca5a:	80 fa 03             	cmp    dl,0x3
c001ca5d:	77 5d                	ja     c001cabc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ca5f:	0f b6 db             	movzx  ebx,bl
c001ca62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca6a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ca6d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ca71:	83 ca 80             	or     edx,0xffffff80
c001ca74:	0f b6 d2             	movzx  edx,dl
c001ca77:	52                   	push   edx
c001ca78:	6a 0c                	push   0xc
c001ca7a:	53                   	push   ebx
c001ca7b:	56                   	push   esi
c001ca7c:	e8 51 f9 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca85:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ca8a:	0f b6 c0             	movzx  eax,al
c001ca8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca91:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ca95:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ca97:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ca9c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001caa0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001caa4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001caa8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cab0:	83 c4 2c             	add    esp,0x2c
c001cab3:	5b                   	pop    ebx
c001cab4:	5e                   	pop    esi
c001cab5:	5f                   	pop    edi
c001cab6:	5d                   	pop    ebp
c001cab7:	e9 16 f9 ff ff       	jmp    c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cabc:	3c 07                	cmp    al,0x7
c001cabe:	77 10                	ja     c001cad0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cac0:	0f b6 db             	movzx  ebx,bl
c001cac3:	0f b6 d0             	movzx  edx,al
c001cac6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cace:	eb 2d                	jmp    c001cafd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cad0:	3c 0d                	cmp    al,0xd
c001cad2:	77 13                	ja     c001cae7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cad4:	0f b6 db             	movzx  ebx,bl
c001cad7:	0f b6 c0             	movzx  eax,al
c001cada:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cae1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cae5:	eb 16                	jmp    c001cafd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cae7:	3c 15                	cmp    al,0x15
c001cae9:	77 14                	ja     c001caff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001caeb:	0f b6 db             	movzx  ebx,bl
c001caee:	0f b6 c0             	movzx  eax,al
c001caf1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001caf9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cafd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001caff:	83 c4 1c             	add    esp,0x1c
c001cb02:	5b                   	pop    ebx
c001cb03:	5e                   	pop    esi
c001cb04:	5f                   	pop    edi
c001cb05:	5d                   	pop    ebp
c001cb06:	c3                   	ret    
c001cb07:	90                   	nop

c001cb08 <IDE::detect()>:
c001cb08:	55                   	push   ebp
c001cb09:	57                   	push   edi
c001cb0a:	56                   	push   esi
c001cb0b:	53                   	push   ebx
c001cb0c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cb12:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cb19:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cb20:	0f 85 c0 02 00 00    	jne    c001cde6 <IDE::detect()+0x2de>
c001cb26:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cb2d:	31 f6                	xor    esi,esi
c001cb2f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cb37:	31 ed                	xor    ebp,ebp
c001cb39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3d:	c1 e0 06             	shl    eax,0x6
c001cb40:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cb48:	89 e8                	mov    eax,ebp
c001cb4a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cb4e:	c1 e0 04             	shl    eax,0x4
c001cb51:	83 c8 a0             	or     eax,0xffffffa0
c001cb54:	0f b6 c0             	movzx  eax,al
c001cb57:	50                   	push   eax
c001cb58:	6a 06                	push   0x6
c001cb5a:	56                   	push   esi
c001cb5b:	53                   	push   ebx
c001cb5c:	e8 71 f8 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb61:	83 c4 0c             	add    esp,0xc
c001cb64:	6a 0c                	push   0xc
c001cb66:	56                   	push   esi
c001cb67:	53                   	push   ebx
c001cb68:	e8 25 f9 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cb6d:	83 c4 0c             	add    esp,0xc
c001cb70:	6a 0c                	push   0xc
c001cb72:	56                   	push   esi
c001cb73:	53                   	push   ebx
c001cb74:	e8 19 f9 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cb79:	83 c4 0c             	add    esp,0xc
c001cb7c:	6a 0c                	push   0xc
c001cb7e:	56                   	push   esi
c001cb7f:	53                   	push   ebx
c001cb80:	e8 0d f9 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cb85:	83 c4 0c             	add    esp,0xc
c001cb88:	6a 0c                	push   0xc
c001cb8a:	56                   	push   esi
c001cb8b:	53                   	push   ebx
c001cb8c:	e8 01 f9 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cb91:	68 ec 00 00 00       	push   0xec
c001cb96:	6a 07                	push   0x7
c001cb98:	56                   	push   esi
c001cb99:	53                   	push   ebx
c001cb9a:	e8 33 f8 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb9f:	83 c4 1c             	add    esp,0x1c
c001cba2:	6a 0c                	push   0xc
c001cba4:	56                   	push   esi
c001cba5:	53                   	push   ebx
c001cba6:	e8 e7 f8 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cbab:	83 c4 0c             	add    esp,0xc
c001cbae:	6a 0c                	push   0xc
c001cbb0:	56                   	push   esi
c001cbb1:	53                   	push   ebx
c001cbb2:	e8 db f8 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cbb7:	83 c4 0c             	add    esp,0xc
c001cbba:	6a 0c                	push   0xc
c001cbbc:	56                   	push   esi
c001cbbd:	53                   	push   ebx
c001cbbe:	e8 cf f8 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	6a 0c                	push   0xc
c001cbc8:	56                   	push   esi
c001cbc9:	53                   	push   ebx
c001cbca:	e8 c3 f8 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cbcf:	83 c4 0c             	add    esp,0xc
c001cbd2:	6a 0c                	push   0xc
c001cbd4:	56                   	push   esi
c001cbd5:	53                   	push   ebx
c001cbd6:	e8 b7 f8 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cbdb:	83 c4 10             	add    esp,0x10
c001cbde:	84 c0                	test   al,al
c001cbe0:	0f 84 8b 01 00 00    	je     c001cd71 <IDE::detect()+0x269>
c001cbe6:	31 ff                	xor    edi,edi
c001cbe8:	50                   	push   eax
c001cbe9:	6a 0c                	push   0xc
c001cbeb:	56                   	push   esi
c001cbec:	53                   	push   ebx
c001cbed:	e8 a0 f8 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	a8 01                	test   al,0x1
c001cbf7:	0f 85 8e 01 00 00    	jne    c001cd8b <IDE::detect()+0x283>
c001cbfd:	84 c0                	test   al,al
c001cbff:	78 04                	js     c001cc05 <IDE::detect()+0xfd>
c001cc01:	a8 08                	test   al,0x8
c001cc03:	75 27                	jne    c001cc2c <IDE::detect()+0x124>
c001cc05:	47                   	inc    edi
c001cc06:	81 ff 17 01 00 00    	cmp    edi,0x117
c001cc0c:	7e da                	jle    c001cbe8 <IDE::detect()+0xe0>
c001cc0e:	50                   	push   eax
c001cc0f:	50                   	push   eax
c001cc10:	6a 00                	push   0x0
c001cc12:	68 40 4b 4c 00       	push   0x4c4b40
c001cc17:	e8 99 be ff ff       	call   c0018ab5 <nanoSleep(unsigned long long)>
c001cc1c:	83 c4 10             	add    esp,0x10
c001cc1f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001cc25:	75 c1                	jne    c001cbe8 <IDE::detect()+0xe0>
c001cc27:	e9 5f 01 00 00       	jmp    c001cd8b <IDE::detect()+0x283>
c001cc2c:	31 c9                	xor    ecx,ecx
c001cc2e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001cc32:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	68 80 00 00 00       	push   0x80
c001cc3e:	57                   	push   edi
c001cc3f:	6a 00                	push   0x0
c001cc41:	56                   	push   esi
c001cc42:	53                   	push   ebx
c001cc43:	e8 f4 fd ff ff       	call   c001ca3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cc48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc4c:	c1 e0 06             	shl    eax,0x6
c001cc4f:	01 d8                	add    eax,ebx
c001cc51:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001cc56:	89 d1                	mov    ecx,edx
c001cc58:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001cc5f:	89 f2                	mov    edx,esi
c001cc61:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001cc68:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001cc6e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001cc72:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001cc78:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc7c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001cc83:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001cc8b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001cc92:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001cc9a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001cca0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001cca7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ccad:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ccb1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ccb5:	83 c4 20             	add    esp,0x20
c001ccb8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ccbb:	83 c7 02             	add    edi,0x2
c001ccbe:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001ccc4:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ccc7:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001cccd:	83 c0 02             	add    eax,0x2
c001ccd0:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001ccd4:	75 e2                	jne    c001ccb8 <IDE::detect()+0x1b0>
c001ccd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccda:	c1 e0 06             	shl    eax,0x6
c001ccdd:	01 d8                	add    eax,ebx
c001ccdf:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cce5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ccec:	66 c1 ea 09          	shr    dx,0x9
c001ccf0:	83 e2 01             	and    edx,0x1
c001ccf3:	84 c9                	test   cl,cl
c001ccf5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ccfb:	75 2f                	jne    c001cd2c <IDE::detect()+0x224>
c001ccfd:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001cd03:	85 c0                	test   eax,eax
c001cd05:	74 66                	je     c001cd6d <IDE::detect()+0x265>
c001cd07:	50                   	push   eax
c001cd08:	55                   	push   ebp
c001cd09:	56                   	push   esi
c001cd0a:	68 e3 30 02 c0       	push   0xc00230e3
c001cd0f:	e8 45 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd14:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cd1b:	e8 04 23 ff ff       	call   c000f024 <operator new(unsigned long)>
c001cd20:	89 c7                	mov    edi,eax
c001cd22:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd25:	e8 f4 02 00 00       	call   c001d01e <ATA::ATA()>
c001cd2a:	eb 28                	jmp    c001cd54 <IDE::detect()+0x24c>
c001cd2c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cd32:	55                   	push   ebp
c001cd33:	56                   	push   esi
c001cd34:	68 12 31 02 c0       	push   0xc0023112
c001cd39:	e8 1b 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd3e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cd45:	e8 da 22 ff ff       	call   c000f024 <operator new(unsigned long)>
c001cd4a:	89 c7                	mov    edi,eax
c001cd4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd4f:	e8 1e 09 00 00       	call   c001d672 <ATAPI::ATAPI()>
c001cd54:	5a                   	pop    edx
c001cd55:	59                   	pop    ecx
c001cd56:	57                   	push   edi
c001cd57:	53                   	push   ebx
c001cd58:	e8 11 38 ff ff       	call   c001056e <Device::addChild(Device*)>
c001cd5d:	8b 07                	mov    eax,DWORD PTR [edi]
c001cd5f:	53                   	push   ebx
c001cd60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd64:	6a 00                	push   0x0
c001cd66:	57                   	push   edi
c001cd67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd6a:	83 c4 20             	add    esp,0x20
c001cd6d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001cd71:	4d                   	dec    ebp
c001cd72:	74 0a                	je     c001cd7e <IDE::detect()+0x276>
c001cd74:	bd 01 00 00 00       	mov    ebp,0x1
c001cd79:	e9 bb fd ff ff       	jmp    c001cb39 <IDE::detect()+0x31>
c001cd7e:	4e                   	dec    esi
c001cd7f:	74 65                	je     c001cde6 <IDE::detect()+0x2de>
c001cd81:	be 01 00 00 00       	mov    esi,0x1
c001cd86:	e9 ac fd ff ff       	jmp    c001cb37 <IDE::detect()+0x2f>
c001cd8b:	50                   	push   eax
c001cd8c:	6a 04                	push   0x4
c001cd8e:	56                   	push   esi
c001cd8f:	53                   	push   ebx
c001cd90:	e8 fd f6 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cd95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cd99:	83 c4 0c             	add    esp,0xc
c001cd9c:	6a 05                	push   0x5
c001cd9e:	56                   	push   esi
c001cd9f:	53                   	push   ebx
c001cda0:	e8 ed f6 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cda5:	83 c4 10             	add    esp,0x10
c001cda8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001cdac:	80 fa 14             	cmp    dl,0x14
c001cdaf:	74 2f                	je     c001cde0 <IDE::detect()+0x2d8>
c001cdb1:	80 fa 69             	cmp    dl,0x69
c001cdb4:	75 bb                	jne    c001cd71 <IDE::detect()+0x269>
c001cdb6:	3c 96                	cmp    al,0x96
c001cdb8:	75 b7                	jne    c001cd71 <IDE::detect()+0x269>
c001cdba:	68 a1 00 00 00       	push   0xa1
c001cdbf:	6a 07                	push   0x7
c001cdc1:	56                   	push   esi
c001cdc2:	53                   	push   ebx
c001cdc3:	e8 0a f6 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc8:	5f                   	pop    edi
c001cdc9:	58                   	pop    eax
c001cdca:	6a 00                	push   0x0
c001cdcc:	68 40 42 0f 00       	push   0xf4240
c001cdd1:	e8 df bc ff ff       	call   c0018ab5 <nanoSleep(unsigned long long)>
c001cdd6:	83 c4 10             	add    esp,0x10
c001cdd9:	b1 01                	mov    cl,0x1
c001cddb:	e9 4e fe ff ff       	jmp    c001cc2e <IDE::detect()+0x126>
c001cde0:	3c eb                	cmp    al,0xeb
c001cde2:	75 cd                	jne    c001cdb1 <IDE::detect()+0x2a9>
c001cde4:	eb d4                	jmp    c001cdba <IDE::detect()+0x2b2>
c001cde6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cdec:	5b                   	pop    ebx
c001cded:	5e                   	pop    esi
c001cdee:	5f                   	pop    edi
c001cdef:	5d                   	pop    ebp
c001cdf0:	c3                   	ret    
c001cdf1:	90                   	nop

c001cdf2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001cdf2:	55                   	push   ebp
c001cdf3:	57                   	push   edi
c001cdf4:	56                   	push   esi
c001cdf5:	53                   	push   ebx
c001cdf6:	83 ec 1c             	sub    esp,0x1c
c001cdf9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cdfd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ce01:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ce05:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ce09:	88 c3                	mov    bl,al
c001ce0b:	84 c0                	test   al,al
c001ce0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce11:	0f 84 67 01 00 00    	je     c001cf7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001ce17:	83 ec 0c             	sub    esp,0xc
c001ce1a:	68 43 31 02 c0       	push   0xc0023143
c001ce1f:	e8 35 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce24:	83 c4 10             	add    esp,0x10
c001ce27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce2b:	3c 01                	cmp    al,0x1
c001ce2d:	75 17                	jne    c001ce46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001ce2f:	83 ec 0c             	sub    esp,0xc
c001ce32:	b3 13                	mov    bl,0x13
c001ce34:	68 4f 31 02 c0       	push   0xc002314f
c001ce39:	e8 1b 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce3e:	83 c4 10             	add    esp,0x10
c001ce41:	e9 25 01 00 00       	jmp    c001cf6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001ce46:	3c 02                	cmp    al,0x2
c001ce48:	0f 85 ef 00 00 00    	jne    c001cf3d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001ce4e:	01 f6                	add    esi,esi
c001ce50:	52                   	push   edx
c001ce51:	09 ee                	or     esi,ebp
c001ce53:	6a 01                	push   0x1
c001ce55:	89 f0                	mov    eax,esi
c001ce57:	0f b6 f0             	movzx  esi,al
c001ce5a:	c1 e6 06             	shl    esi,0x6
c001ce5d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ce65:	50                   	push   eax
c001ce66:	57                   	push   edi
c001ce67:	e8 26 f6 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001ce6c:	83 c4 10             	add    esp,0x10
c001ce6f:	89 c6                	mov    esi,eax
c001ce71:	a8 01                	test   al,0x1
c001ce73:	74 12                	je     c001ce87 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001ce75:	83 ec 0c             	sub    esp,0xc
c001ce78:	b3 07                	mov    bl,0x7
c001ce7a:	68 64 31 02 c0       	push   0xc0023164
c001ce7f:	e8 d5 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce84:	83 c4 10             	add    esp,0x10
c001ce87:	f7 c6 02 00 00 00    	test   esi,0x2
c001ce8d:	74 12                	je     c001cea1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001ce8f:	83 ec 0c             	sub    esp,0xc
c001ce92:	b3 03                	mov    bl,0x3
c001ce94:	68 82 31 02 c0       	push   0xc0023182
c001ce99:	e8 bb 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce9e:	83 c4 10             	add    esp,0x10
c001cea1:	f7 c6 04 00 00 00    	test   esi,0x4
c001cea7:	74 12                	je     c001cebb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001cea9:	83 ec 0c             	sub    esp,0xc
c001ceac:	b3 14                	mov    bl,0x14
c001ceae:	68 a2 31 02 c0       	push   0xc00231a2
c001ceb3:	e8 a1 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	f7 c6 08 00 00 00    	test   esi,0x8
c001cec1:	74 12                	je     c001ced5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001cec3:	83 ec 0c             	sub    esp,0xc
c001cec6:	b3 03                	mov    bl,0x3
c001cec8:	68 82 31 02 c0       	push   0xc0023182
c001cecd:	e8 87 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ced2:	83 c4 10             	add    esp,0x10
c001ced5:	f7 c6 10 00 00 00    	test   esi,0x10
c001cedb:	74 12                	je     c001ceef <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001cedd:	83 ec 0c             	sub    esp,0xc
c001cee0:	b3 15                	mov    bl,0x15
c001cee2:	68 ba 31 02 c0       	push   0xc00231ba
c001cee7:	e8 6d 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	f7 c6 20 00 00 00    	test   esi,0x20
c001cef5:	74 12                	je     c001cf09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001cef7:	83 ec 0c             	sub    esp,0xc
c001cefa:	b3 03                	mov    bl,0x3
c001cefc:	68 82 31 02 c0       	push   0xc0023182
c001cf01:	e8 53 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	f7 c6 40 00 00 00    	test   esi,0x40
c001cf0f:	74 12                	je     c001cf23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	b3 16                	mov    bl,0x16
c001cf16:	68 d4 31 02 c0       	push   0xc00231d4
c001cf1b:	e8 39 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cf20:	83 c4 10             	add    esp,0x10
c001cf23:	89 f0                	mov    eax,esi
c001cf25:	84 c0                	test   al,al
c001cf27:	79 42                	jns    c001cf6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cf29:	83 ec 0c             	sub    esp,0xc
c001cf2c:	b3 0d                	mov    bl,0xd
c001cf2e:	68 f5 31 02 c0       	push   0xc00231f5
c001cf33:	e8 21 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cf38:	83 c4 10             	add    esp,0x10
c001cf3b:	eb 2e                	jmp    c001cf6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cf3d:	3c 03                	cmp    al,0x3
c001cf3f:	75 14                	jne    c001cf55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001cf41:	83 ec 0c             	sub    esp,0xc
c001cf44:	b3 17                	mov    bl,0x17
c001cf46:	68 09 32 02 c0       	push   0xc0023209
c001cf4b:	e8 09 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cf50:	83 c4 10             	add    esp,0x10
c001cf53:	eb 16                	jmp    c001cf6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cf55:	3c 04                	cmp    al,0x4
c001cf57:	75 12                	jne    c001cf6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cf59:	83 ec 0c             	sub    esp,0xc
c001cf5c:	b3 08                	mov    bl,0x8
c001cf5e:	68 1f 32 02 c0       	push   0xc002321f
c001cf63:	e8 f1 21 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cf68:	83 c4 10             	add    esp,0x10
c001cf6b:	50                   	push   eax
c001cf6c:	50                   	push   eax
c001cf6d:	0f b6 c3             	movzx  eax,bl
c001cf70:	50                   	push   eax
c001cf71:	68 37 32 02 c0       	push   0xc0023237
c001cf76:	e8 de 21 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cf7b:	83 c4 10             	add    esp,0x10
c001cf7e:	83 c4 1c             	add    esp,0x1c
c001cf81:	88 d8                	mov    al,bl
c001cf83:	5b                   	pop    ebx
c001cf84:	5e                   	pop    esi
c001cf85:	5f                   	pop    edi
c001cf86:	5d                   	pop    ebp
c001cf87:	c3                   	ret    

c001cf88 <IDE::polling(unsigned char, unsigned int)>:
c001cf88:	55                   	push   ebp
c001cf89:	bd 04 00 00 00       	mov    ebp,0x4
c001cf8e:	57                   	push   edi
c001cf8f:	56                   	push   esi
c001cf90:	53                   	push   ebx
c001cf91:	83 ec 0c             	sub    esp,0xc
c001cf94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf98:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001cf9c:	52                   	push   edx
c001cf9d:	6a 0c                	push   0xc
c001cf9f:	0f b6 f3             	movzx  esi,bl
c001cfa2:	56                   	push   esi
c001cfa3:	57                   	push   edi
c001cfa4:	e8 e9 f4 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cfa9:	83 c4 10             	add    esp,0x10
c001cfac:	4d                   	dec    ebp
c001cfad:	75 ed                	jne    c001cf9c <IDE::polling(unsigned char, unsigned int)+0x14>
c001cfaf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cfb4:	50                   	push   eax
c001cfb5:	6a 0c                	push   0xc
c001cfb7:	56                   	push   esi
c001cfb8:	57                   	push   edi
c001cfb9:	e8 d4 f4 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001cfbe:	83 c4 10             	add    esp,0x10
c001cfc1:	a8 01                	test   al,0x1
c001cfc3:	74 12                	je     c001cfd7 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001cfc5:	83 ec 0c             	sub    esp,0xc
c001cfc8:	68 51 32 02 c0       	push   0xc0023251
c001cfcd:	e8 87 21 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cfd2:	83 c4 10             	add    esp,0x10
c001cfd5:	eb 17                	jmp    c001cfee <IDE::polling(unsigned char, unsigned int)+0x66>
c001cfd7:	a8 20                	test   al,0x20
c001cfd9:	75 0f                	jne    c001cfea <IDE::polling(unsigned char, unsigned int)+0x62>
c001cfdb:	4b                   	dec    ebx
c001cfdc:	74 10                	je     c001cfee <IDE::polling(unsigned char, unsigned int)+0x66>
c001cfde:	84 c0                	test   al,al
c001cfe0:	78 d2                	js     c001cfb4 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001cfe2:	a8 08                	test   al,0x8
c001cfe4:	74 ce                	je     c001cfb4 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001cfe6:	31 c0                	xor    eax,eax
c001cfe8:	eb 06                	jmp    c001cff0 <IDE::polling(unsigned char, unsigned int)+0x68>
c001cfea:	b0 01                	mov    al,0x1
c001cfec:	eb 02                	jmp    c001cff0 <IDE::polling(unsigned char, unsigned int)+0x68>
c001cfee:	b0 02                	mov    al,0x2
c001cff0:	83 c4 0c             	add    esp,0xc
c001cff3:	5b                   	pop    ebx
c001cff4:	5e                   	pop    esi
c001cff5:	5f                   	pop    edi
c001cff6:	5d                   	pop    ebp
c001cff7:	c3                   	ret    

c001cff8 <ATA::close(int, int, void*)>:
c001cff8:	83 ec 0c             	sub    esp,0xc
c001cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d005:	85 c0                	test   eax,eax
c001d007:	74 0c                	je     c001d015 <ATA::close(int, int, void*)+0x1d>
c001d009:	83 ec 0c             	sub    esp,0xc
c001d00c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d00e:	50                   	push   eax
c001d00f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d012:	83 c4 10             	add    esp,0x10
c001d015:	31 c0                	xor    eax,eax
c001d017:	83 c4 0c             	add    esp,0xc
c001d01a:	c3                   	ret    
c001d01b:	90                   	nop

c001d01c <ATA::powerSaving(PowerSavingLevel)>:
c001d01c:	c3                   	ret    
c001d01d:	90                   	nop

c001d01e <ATA::ATA()>:
c001d01e:	83 ec 0c             	sub    esp,0xc
c001d021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d025:	83 ec 04             	sub    esp,0x4
c001d028:	68 00 02 00 00       	push   0x200
c001d02d:	68 94 32 02 c0       	push   0xc0023294
c001d032:	50                   	push   eax
c001d033:	e8 3c 39 ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d038:	83 c4 10             	add    esp,0x10
c001d03b:	ba c0 32 02 c0       	mov    edx,0xc00232c0
c001d040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d044:	89 10                	mov    DWORD PTR [eax],edx
c001d046:	90                   	nop
c001d047:	83 c4 0c             	add    esp,0xc
c001d04a:	c3                   	ret    
c001d04b:	90                   	nop

c001d04c <ATA::flush(bool)>:
c001d04c:	53                   	push   ebx
c001d04d:	83 ec 08             	sub    esp,0x8
c001d050:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d055:	19 c0                	sbb    eax,eax
c001d057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d05b:	83 e0 fd             	and    eax,0xfffffffd
c001d05e:	05 ea 00 00 00       	add    eax,0xea
c001d063:	50                   	push   eax
c001d064:	6a 07                	push   0x7
c001d066:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d06d:	50                   	push   eax
c001d06e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d074:	e8 59 f3 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d079:	83 c4 0c             	add    esp,0xc
c001d07c:	6a 00                	push   0x0
c001d07e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d085:	50                   	push   eax
c001d086:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d08c:	e8 f7 fe ff ff       	call   c001cf88 <IDE::polling(unsigned char, unsigned int)>
c001d091:	83 c4 18             	add    esp,0x18
c001d094:	5b                   	pop    ebx
c001d095:	c3                   	ret    

c001d096 <ATA::readyForCommand()>:
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	31 db                	xor    ebx,ebx
c001d09a:	50                   	push   eax
c001d09b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d09f:	50                   	push   eax
c001d0a0:	6a 0c                	push   0xc
c001d0a2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d0a9:	50                   	push   eax
c001d0aa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d0b0:	e8 dd f3 ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001d0b5:	83 c4 10             	add    esp,0x10
c001d0b8:	a8 88                	test   al,0x88
c001d0ba:	74 23                	je     c001d0df <ATA::readyForCommand()+0x49>
c001d0bc:	43                   	inc    ebx
c001d0bd:	83 fb 63             	cmp    ebx,0x63
c001d0c0:	7e dd                	jle    c001d09f <ATA::readyForCommand()+0x9>
c001d0c2:	51                   	push   ecx
c001d0c3:	51                   	push   ecx
c001d0c4:	6a 00                	push   0x0
c001d0c6:	68 40 42 0f 00       	push   0xf4240
c001d0cb:	e8 e5 b9 ff ff       	call   c0018ab5 <nanoSleep(unsigned long long)>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d0d9:	75 c4                	jne    c001d09f <ATA::readyForCommand()+0x9>
c001d0db:	31 c0                	xor    eax,eax
c001d0dd:	eb 02                	jmp    c001d0e1 <ATA::readyForCommand()+0x4b>
c001d0df:	b0 01                	mov    al,0x1
c001d0e1:	5a                   	pop    edx
c001d0e2:	5b                   	pop    ebx
c001d0e3:	5e                   	pop    esi
c001d0e4:	c3                   	ret    
c001d0e5:	90                   	nop

c001d0e6 <ATA::access(unsigned long long, int, void*, bool)>:
c001d0e6:	55                   	push   ebp
c001d0e7:	57                   	push   edi
c001d0e8:	56                   	push   esi
c001d0e9:	53                   	push   ebx
c001d0ea:	83 ec 2c             	sub    esp,0x2c
c001d0ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d0f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d0f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0f8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d0fc:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d0ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d103:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d107:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d10d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d111:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d117:	c1 e0 06             	shl    eax,0x6
c001d11a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d11e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d126:	74 5d                	je     c001d185 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d128:	89 fa                	mov    edx,edi
c001d12a:	89 f0                	mov    eax,esi
c001d12c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d130:	c1 ea 1c             	shr    edx,0x1c
c001d133:	89 d1                	mov    ecx,edx
c001d135:	09 c1                	or     ecx,eax
c001d137:	74 25                	je     c001d15e <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d139:	31 ed                	xor    ebp,ebp
c001d13b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d142:	89 fa                	mov    edx,edi
c001d144:	89 f0                	mov    eax,esi
c001d146:	0f ad d0             	shrd   eax,edx,cl
c001d149:	d3 ea                	shr    edx,cl
c001d14b:	f6 c1 20             	test   cl,0x20
c001d14e:	74 02                	je     c001d152 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d150:	89 d0                	mov    eax,edx
c001d152:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d156:	45                   	inc    ebp
c001d157:	83 fd 06             	cmp    ebp,0x6
c001d15a:	75 df                	jne    c001d13b <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d15c:	eb 73                	jmp    c001d1d1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d15e:	89 f0                	mov    eax,esi
c001d160:	89 fa                	mov    edx,edi
c001d162:	0f ac d0 10          	shrd   eax,edx,0x10
c001d166:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d16b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d16f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d176:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d17b:	c1 ee 18             	shr    esi,0x18
c001d17e:	bf 01 00 00 00       	mov    edi,0x1
c001d183:	eb 53                	jmp    c001d1d8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d185:	6a 00                	push   0x0
c001d187:	6a 3f                	push   0x3f
c001d189:	57                   	push   edi
c001d18a:	56                   	push   esi
c001d18b:	e8 8c 1f 00 00       	call   c001f11c <__umoddi3>
c001d190:	83 c4 10             	add    esp,0x10
c001d193:	40                   	inc    eax
c001d194:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d198:	6a 00                	push   0x0
c001d19a:	68 f0 03 00 00       	push   0x3f0
c001d19f:	57                   	push   edi
c001d1a0:	56                   	push   esi
c001d1a1:	e8 76 1e 00 00       	call   c001f01c <__udivdi3>
c001d1a6:	83 c4 10             	add    esp,0x10
c001d1a9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d1ae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d1b5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d1ba:	6a 00                	push   0x0
c001d1bc:	6a 3f                	push   0x3f
c001d1be:	57                   	push   edi
c001d1bf:	31 ff                	xor    edi,edi
c001d1c1:	56                   	push   esi
c001d1c2:	e8 55 1e 00 00       	call   c001f01c <__udivdi3>
c001d1c7:	89 c6                	mov    esi,eax
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	83 e6 0f             	and    esi,0xf
c001d1cf:	eb 07                	jmp    c001d1d8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d1d1:	31 f6                	xor    esi,esi
c001d1d3:	bf 02 00 00 00       	mov    edi,0x2
c001d1d8:	50                   	push   eax
c001d1d9:	6a 00                	push   0x0
c001d1db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1e2:	50                   	push   eax
c001d1e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d1e7:	e8 f8 f3 ff ff       	call   c001c5e4 <IDE::enableIRQs(unsigned char, bool)>
c001d1ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1ef:	e8 a2 fe ff ff       	call   c001d096 <ATA::readyForCommand()>
c001d1f4:	83 c4 10             	add    esp,0x10
c001d1f7:	84 c0                	test   al,al
c001d1f9:	75 0a                	jne    c001d205 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d1fb:	be 01 00 00 00       	mov    esi,0x1
c001d200:	e9 79 02 00 00       	jmp    c001d47e <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d205:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d20b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d211:	c1 e0 04             	shl    eax,0x4
c001d214:	09 c6                	or     esi,eax
c001d216:	89 f8                	mov    eax,edi
c001d218:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d21f:	84 c0                	test   al,al
c001d221:	75 05                	jne    c001d228 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d223:	83 ce a0             	or     esi,0xffffffa0
c001d226:	eb 03                	jmp    c001d22b <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d228:	83 ce e0             	or     esi,0xffffffe0
c001d22b:	89 f0                	mov    eax,esi
c001d22d:	0f b6 f0             	movzx  esi,al
c001d230:	56                   	push   esi
c001d231:	6a 06                	push   0x6
c001d233:	51                   	push   ecx
c001d234:	52                   	push   edx
c001d235:	e8 98 f1 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	6a 00                	push   0x0
c001d23f:	6a 01                	push   0x1
c001d241:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d248:	50                   	push   eax
c001d249:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d24f:	e8 7e f1 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d254:	89 f8                	mov    eax,edi
c001d256:	83 c4 10             	add    esp,0x10
c001d259:	3c 02                	cmp    al,0x2
c001d25b:	75 6e                	jne    c001d2cb <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d25d:	6a 00                	push   0x0
c001d25f:	6a 08                	push   0x8
c001d261:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d268:	50                   	push   eax
c001d269:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d26f:	e8 5e f1 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d274:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d279:	50                   	push   eax
c001d27a:	6a 09                	push   0x9
c001d27c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d283:	50                   	push   eax
c001d284:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d28a:	e8 43 f1 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d28f:	83 c4 20             	add    esp,0x20
c001d292:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d297:	50                   	push   eax
c001d298:	6a 0a                	push   0xa
c001d29a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2a1:	50                   	push   eax
c001d2a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2a8:	e8 25 f1 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ad:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d2b2:	50                   	push   eax
c001d2b3:	6a 0b                	push   0xb
c001d2b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2bc:	50                   	push   eax
c001d2bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2c3:	e8 0a f1 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2c8:	83 c4 20             	add    esp,0x20
c001d2cb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d2d0:	50                   	push   eax
c001d2d1:	6a 02                	push   0x2
c001d2d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2da:	50                   	push   eax
c001d2db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2e1:	e8 ec f0 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2e6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d2eb:	50                   	push   eax
c001d2ec:	6a 03                	push   0x3
c001d2ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2f5:	50                   	push   eax
c001d2f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2fc:	e8 d1 f0 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d301:	83 c4 20             	add    esp,0x20
c001d304:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d309:	50                   	push   eax
c001d30a:	6a 04                	push   0x4
c001d30c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d313:	50                   	push   eax
c001d314:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d31a:	e8 b3 f0 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d31f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d324:	50                   	push   eax
c001d325:	6a 05                	push   0x5
c001d327:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d32e:	50                   	push   eax
c001d32f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d335:	e8 98 f0 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d33a:	83 c4 20             	add    esp,0x20
c001d33d:	89 f8                	mov    eax,edi
c001d33f:	3c 02                	cmp    al,0x2
c001d341:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d346:	75 06                	jne    c001d34e <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d348:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d34c:	75 40                	jne    c001d38e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d34e:	89 f8                	mov    eax,edi
c001d350:	3c 02                	cmp    al,0x2
c001d352:	0f 95 c1             	setne  cl
c001d355:	74 0b                	je     c001d362 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d357:	b8 30 00 00 00       	mov    eax,0x30
c001d35c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d360:	75 31                	jne    c001d393 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d362:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d365:	83 f2 01             	xor    edx,0x1
c001d368:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d36d:	74 09                	je     c001d378 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d36f:	b8 24 00 00 00       	mov    eax,0x24
c001d374:	84 d2                	test   dl,dl
c001d376:	75 1b                	jne    c001d393 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d378:	84 c9                	test   cl,cl
c001d37a:	0f 84 7b fe ff ff    	je     c001d1fb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d380:	b8 20 00 00 00       	mov    eax,0x20
c001d385:	84 d2                	test   dl,dl
c001d387:	75 0a                	jne    c001d393 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d389:	e9 6d fe ff ff       	jmp    c001d1fb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d38e:	b8 34 00 00 00       	mov    eax,0x34
c001d393:	50                   	push   eax
c001d394:	6a 07                	push   0x7
c001d396:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d39d:	50                   	push   eax
c001d39e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3a4:	e8 29 f0 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3a9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d3ad:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d3b1:	83 c4 10             	add    esp,0x10
c001d3b4:	85 f6                	test   esi,esi
c001d3b6:	0f 84 a9 00 00 00    	je     c001d465 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d3bc:	50                   	push   eax
c001d3bd:	6a 01                	push   0x1
c001d3bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3c6:	50                   	push   eax
c001d3c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3cd:	e8 b6 fb ff ff       	call   c001cf88 <IDE::polling(unsigned char, unsigned int)>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d3db:	84 c0                	test   al,al
c001d3dd:	74 1d                	je     c001d3fc <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d3df:	0f b6 f0             	movzx  esi,al
c001d3e2:	56                   	push   esi
c001d3e3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d3ea:	0f b6 d2             	movzx  edx,dl
c001d3ed:	50                   	push   eax
c001d3ee:	52                   	push   edx
c001d3ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3f5:	e8 f8 f9 ff ff       	call   c001cdf2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d3fa:	eb 7f                	jmp    c001d47b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d3fc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d401:	74 41                	je     c001d444 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d403:	31 c9                	xor    ecx,ecx
c001d405:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d409:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d40d:	50                   	push   eax
c001d40e:	50                   	push   eax
c001d40f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d416:	50                   	push   eax
c001d417:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d41d:	e8 9e ef ff ff       	call   c001c3c0 <IDE::getBase(unsigned char)>
c001d422:	89 c2                	mov    edx,eax
c001d424:	89 e8                	mov    eax,ebp
c001d426:	66 ef                	out    dx,ax
c001d428:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	41                   	inc    ecx
c001d430:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d436:	75 cd                	jne    c001d405 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d438:	4e                   	dec    esi
c001d439:	81 c7 00 02 00 00    	add    edi,0x200
c001d43f:	e9 70 ff ff ff       	jmp    c001d3b4 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d444:	51                   	push   ecx
c001d445:	51                   	push   ecx
c001d446:	0f b6 d2             	movzx  edx,dl
c001d449:	52                   	push   edx
c001d44a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d450:	e8 6b ef ff ff       	call   c001c3c0 <IDE::getBase(unsigned char)>
c001d455:	b9 00 01 00 00       	mov    ecx,0x100
c001d45a:	89 c2                	mov    edx,eax
c001d45c:	fc                   	cld    
c001d45d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d460:	83 c4 10             	add    esp,0x10
c001d463:	eb d3                	jmp    c001d438 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d465:	31 f6                	xor    esi,esi
c001d467:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d46b:	74 11                	je     c001d47e <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d46d:	50                   	push   eax
c001d46e:	50                   	push   eax
c001d46f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d474:	50                   	push   eax
c001d475:	53                   	push   ebx
c001d476:	e8 d1 fb ff ff       	call   c001d04c <ATA::flush(bool)>
c001d47b:	83 c4 10             	add    esp,0x10
c001d47e:	83 c4 2c             	add    esp,0x2c
c001d481:	89 f0                	mov    eax,esi
c001d483:	5b                   	pop    ebx
c001d484:	5e                   	pop    esi
c001d485:	5f                   	pop    edi
c001d486:	5d                   	pop    ebp
c001d487:	c3                   	ret    

c001d488 <ATA::read(unsigned long long, int, void*)>:
c001d488:	57                   	push   edi
c001d489:	b8 04 00 00 00       	mov    eax,0x4
c001d48e:	56                   	push   esi
c001d48f:	53                   	push   ebx
c001d490:	83 ec 10             	sub    esp,0x10
c001d493:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d497:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d49b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d49f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d4a3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d4a6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d4ac:	77 3b                	ja     c001d4e9 <ATA::read(unsigned long long, int, void*)+0x61>
c001d4ae:	b8 06 00 00 00       	mov    eax,0x6
c001d4b3:	85 d2                	test   edx,edx
c001d4b5:	74 32                	je     c001d4e9 <ATA::read(unsigned long long, int, void*)+0x61>
c001d4b7:	50                   	push   eax
c001d4b8:	50                   	push   eax
c001d4b9:	6a 00                	push   0x0
c001d4bb:	52                   	push   edx
c001d4bc:	53                   	push   ebx
c001d4bd:	57                   	push   edi
c001d4be:	56                   	push   esi
c001d4bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4c3:	e8 1e fc ff ff       	call   c001d0e6 <ATA::access(unsigned long long, int, void*, bool)>
c001d4c8:	83 c4 20             	add    esp,0x20
c001d4cb:	85 c0                	test   eax,eax
c001d4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4d1:	75 11                	jne    c001d4e4 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d4d3:	01 1d 24 60 02 c0    	add    DWORD PTR ds:0xc0026024,ebx
c001d4d9:	e8 52 fa fe ff       	call   c000cf30 <VgaText::updateDiskUsage()>
c001d4de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e2:	eb 05                	jmp    c001d4e9 <ATA::read(unsigned long long, int, void*)+0x61>
c001d4e4:	b8 01 00 00 00       	mov    eax,0x1
c001d4e9:	83 c4 10             	add    esp,0x10
c001d4ec:	5b                   	pop    ebx
c001d4ed:	5e                   	pop    esi
c001d4ee:	5f                   	pop    edi
c001d4ef:	c3                   	ret    

c001d4f0 <ATA::write(unsigned long long, int, void*)>:
c001d4f0:	57                   	push   edi
c001d4f1:	b8 04 00 00 00       	mov    eax,0x4
c001d4f6:	56                   	push   esi
c001d4f7:	53                   	push   ebx
c001d4f8:	83 ec 10             	sub    esp,0x10
c001d4fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d4ff:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d503:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d507:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d50b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d50e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d514:	77 3b                	ja     c001d551 <ATA::write(unsigned long long, int, void*)+0x61>
c001d516:	b8 06 00 00 00       	mov    eax,0x6
c001d51b:	85 d2                	test   edx,edx
c001d51d:	74 32                	je     c001d551 <ATA::write(unsigned long long, int, void*)+0x61>
c001d51f:	50                   	push   eax
c001d520:	50                   	push   eax
c001d521:	6a 01                	push   0x1
c001d523:	52                   	push   edx
c001d524:	53                   	push   ebx
c001d525:	57                   	push   edi
c001d526:	56                   	push   esi
c001d527:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d52b:	e8 b6 fb ff ff       	call   c001d0e6 <ATA::access(unsigned long long, int, void*, bool)>
c001d530:	83 c4 20             	add    esp,0x20
c001d533:	85 c0                	test   eax,eax
c001d535:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d539:	75 11                	jne    c001d54c <ATA::write(unsigned long long, int, void*)+0x5c>
c001d53b:	01 1d 20 60 02 c0    	add    DWORD PTR ds:0xc0026020,ebx
c001d541:	e8 ea f9 fe ff       	call   c000cf30 <VgaText::updateDiskUsage()>
c001d546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d54a:	eb 05                	jmp    c001d551 <ATA::write(unsigned long long, int, void*)+0x61>
c001d54c:	b8 01 00 00 00       	mov    eax,0x1
c001d551:	83 c4 10             	add    esp,0x10
c001d554:	5b                   	pop    ebx
c001d555:	5e                   	pop    esi
c001d556:	5f                   	pop    edi
c001d557:	c3                   	ret    

c001d558 <ATA::detectCHS()>:
c001d558:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d55c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d562:	c1 e0 06             	shl    eax,0x6
c001d565:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d56b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d575:	c7 44 24 04 a3 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232a3
c001d57d:	e9 cc 7f ff ff       	jmp    c001554e <Krnl::panic(char const*)>

c001d582 <ATA::open(int, int, void*)>:
c001d582:	53                   	push   ebx
c001d583:	83 ec 08             	sub    esp,0x8
c001d586:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d58a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d58e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d592:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d598:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d59e:	c1 e0 06             	shl    eax,0x6
c001d5a1:	01 d0                	add    eax,edx
c001d5a3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d5aa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d5b0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d5b7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5c1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d5c7:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d5ce:	75 0c                	jne    c001d5dc <ATA::open(int, int, void*)+0x5a>
c001d5d0:	83 ec 0c             	sub    esp,0xc
c001d5d3:	53                   	push   ebx
c001d5d4:	e8 7f ff ff ff       	call   c001d558 <ATA::detectCHS()>
c001d5d9:	83 c4 10             	add    esp,0x10
c001d5dc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d5e2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d5e8:	c1 e0 06             	shl    eax,0x6
c001d5eb:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d5f2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5fc:	d1 e8                	shr    eax,1
c001d5fe:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d604:	6a 04                	push   0x4
c001d606:	6a 0c                	push   0xc
c001d608:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d60f:	50                   	push   eax
c001d610:	52                   	push   edx
c001d611:	e8 bc ed ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d616:	90                   	nop
c001d617:	90                   	nop
c001d618:	6a 00                	push   0x0
c001d61a:	6a 0c                	push   0xc
c001d61c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d623:	50                   	push   eax
c001d624:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d62a:	e8 a3 ed ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d62f:	83 c4 14             	add    esp,0x14
c001d632:	53                   	push   ebx
c001d633:	e8 a4 33 ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001d638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d63b:	e8 3e 4f ff ff       	call   c001257e <createPartitionsForDisk(PhysicalDisk*)>
c001d640:	83 c4 18             	add    esp,0x18
c001d643:	31 c0                	xor    eax,eax
c001d645:	5b                   	pop    ebx
c001d646:	c3                   	ret    
c001d647:	90                   	nop

c001d648 <ATAPI::write(unsigned long long, int, void*)>:
c001d648:	b8 03 00 00 00       	mov    eax,0x3
c001d64d:	c3                   	ret    

c001d64e <ATAPI::close(int, int, void*)>:
c001d64e:	83 ec 0c             	sub    esp,0xc
c001d651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d655:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d65b:	85 c0                	test   eax,eax
c001d65d:	74 0c                	je     c001d66b <ATAPI::close(int, int, void*)+0x1d>
c001d65f:	83 ec 0c             	sub    esp,0xc
c001d662:	8b 10                	mov    edx,DWORD PTR [eax]
c001d664:	50                   	push   eax
c001d665:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	31 c0                	xor    eax,eax
c001d66d:	83 c4 0c             	add    esp,0xc
c001d670:	c3                   	ret    
c001d671:	90                   	nop

c001d672 <ATAPI::ATAPI()>:
c001d672:	83 ec 0c             	sub    esp,0xc
c001d675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d679:	83 ec 04             	sub    esp,0x4
c001d67c:	68 00 08 00 00       	push   0x800
c001d681:	68 ec 32 02 c0       	push   0xc00232ec
c001d686:	50                   	push   eax
c001d687:	e8 e8 32 ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	ba 2c 33 02 c0       	mov    edx,0xc002332c
c001d694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d698:	89 10                	mov    DWORD PTR [eax],edx
c001d69a:	90                   	nop
c001d69b:	83 c4 0c             	add    esp,0xc
c001d69e:	c3                   	ret    
c001d69f:	90                   	nop

c001d6a0 <ATAPI::readyForCommand()>:
c001d6a0:	56                   	push   esi
c001d6a1:	53                   	push   ebx
c001d6a2:	31 db                	xor    ebx,ebx
c001d6a4:	50                   	push   eax
c001d6a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6a9:	50                   	push   eax
c001d6aa:	6a 0c                	push   0xc
c001d6ac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d6b3:	50                   	push   eax
c001d6b4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6ba:	e8 d3 ed ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	a8 88                	test   al,0x88
c001d6c4:	74 23                	je     c001d6e9 <ATAPI::readyForCommand()+0x49>
c001d6c6:	43                   	inc    ebx
c001d6c7:	83 fb 63             	cmp    ebx,0x63
c001d6ca:	7e dd                	jle    c001d6a9 <ATAPI::readyForCommand()+0x9>
c001d6cc:	51                   	push   ecx
c001d6cd:	51                   	push   ecx
c001d6ce:	6a 00                	push   0x0
c001d6d0:	68 40 42 0f 00       	push   0xf4240
c001d6d5:	e8 db b3 ff ff       	call   c0018ab5 <nanoSleep(unsigned long long)>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d6e3:	75 c4                	jne    c001d6a9 <ATAPI::readyForCommand()+0x9>
c001d6e5:	31 c0                	xor    eax,eax
c001d6e7:	eb 02                	jmp    c001d6eb <ATAPI::readyForCommand()+0x4b>
c001d6e9:	b0 01                	mov    al,0x1
c001d6eb:	5a                   	pop    edx
c001d6ec:	5b                   	pop    ebx
c001d6ed:	5e                   	pop    esi
c001d6ee:	c3                   	ret    
c001d6ef:	90                   	nop

c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6f0:	55                   	push   ebp
c001d6f1:	57                   	push   edi
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	83 ec 20             	sub    esp,0x20
c001d6f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6fb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d6ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d703:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d707:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d70b:	6a 01                	push   0x1
c001d70d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d714:	50                   	push   eax
c001d715:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71b:	e8 c4 ee ff ff       	call   c001c5e4 <IDE::enableIRQs(unsigned char, bool)>
c001d720:	5e                   	pop    esi
c001d721:	58                   	pop    eax
c001d722:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d729:	50                   	push   eax
c001d72a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d730:	e8 77 ec ff ff       	call   c001c3ac <IDE::prepareInterrupt(unsigned char)>
c001d735:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d738:	e8 63 ff ff ff       	call   c001d6a0 <ATAPI::readyForCommand()>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	84 c0                	test   al,al
c001d742:	75 0a                	jne    c001d74e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d744:	bb 01 00 00 00       	mov    ebx,0x1
c001d749:	e9 57 02 00 00       	jmp    c001d9a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d74e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d754:	c1 e0 04             	shl    eax,0x4
c001d757:	0f b6 c0             	movzx  eax,al
c001d75a:	50                   	push   eax
c001d75b:	6a 06                	push   0x6
c001d75d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d764:	50                   	push   eax
c001d765:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d76b:	e8 62 ec ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d770:	6a 00                	push   0x0
c001d772:	6a 01                	push   0x1
c001d774:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d77b:	50                   	push   eax
c001d77c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d782:	e8 4b ec ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d787:	83 c4 20             	add    esp,0x20
c001d78a:	0f b6 c3             	movzx  eax,bl
c001d78d:	50                   	push   eax
c001d78e:	6a 04                	push   0x4
c001d790:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d797:	50                   	push   eax
c001d798:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d79e:	0f b6 df             	movzx  ebx,bh
c001d7a1:	e8 2c ec ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7a6:	53                   	push   ebx
c001d7a7:	6a 05                	push   0x5
c001d7a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7b0:	50                   	push   eax
c001d7b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7b7:	e8 16 ec ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7bc:	83 c4 20             	add    esp,0x20
c001d7bf:	68 a0 00 00 00       	push   0xa0
c001d7c4:	6a 07                	push   0x7
c001d7c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7cd:	50                   	push   eax
c001d7ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7d4:	e8 f9 eb ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d9:	83 c4 0c             	add    esp,0xc
c001d7dc:	6a 01                	push   0x1
c001d7de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7e5:	50                   	push   eax
c001d7e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7ec:	e8 97 f7 ff ff       	call   c001cf88 <IDE::polling(unsigned char, unsigned int)>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d7fa:	84 c0                	test   al,al
c001d7fc:	74 23                	je     c001d821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d7fe:	0f b6 d8             	movzx  ebx,al
c001d801:	53                   	push   ebx
c001d802:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d809:	0f b6 d2             	movzx  edx,dl
c001d80c:	50                   	push   eax
c001d80d:	52                   	push   edx
c001d80e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d814:	e8 d9 f5 ff ff       	call   c001cdf2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d819:	83 c4 10             	add    esp,0x10
c001d81c:	e9 84 01 00 00       	jmp    c001d9a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d821:	53                   	push   ebx
c001d822:	53                   	push   ebx
c001d823:	0f b6 d2             	movzx  edx,dl
c001d826:	52                   	push   edx
c001d827:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d82d:	e8 8e eb ff ff       	call   c001c3c0 <IDE::getBase(unsigned char)>
c001d832:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d836:	b9 06 00 00 00       	mov    ecx,0x6
c001d83b:	89 c2                	mov    edx,eax
c001d83d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d840:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d844:	83 c4 10             	add    esp,0x10
c001d847:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d84d:	85 db                	test   ebx,ebx
c001d84f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d856:	0f 84 ec 00 00 00    	je     c001d948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d85c:	51                   	push   ecx
c001d85d:	51                   	push   ecx
c001d85e:	52                   	push   edx
c001d85f:	50                   	push   eax
c001d860:	e8 db ec ff ff       	call   c001c540 <IDE::waitInterrupt(unsigned char)>
c001d865:	83 c4 10             	add    esp,0x10
c001d868:	84 c0                	test   al,al
c001d86a:	0f 84 d4 fe ff ff    	je     c001d744 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d870:	56                   	push   esi
c001d871:	56                   	push   esi
c001d872:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d879:	50                   	push   eax
c001d87a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d880:	e8 27 eb ff ff       	call   c001c3ac <IDE::prepareInterrupt(unsigned char)>
c001d885:	83 c4 0c             	add    esp,0xc
c001d888:	6a 04                	push   0x4
c001d88a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d891:	50                   	push   eax
c001d892:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d898:	e8 f5 eb ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001d89d:	83 c4 0c             	add    esp,0xc
c001d8a0:	6a 05                	push   0x5
c001d8a2:	89 c6                	mov    esi,eax
c001d8a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8ab:	50                   	push   eax
c001d8ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8b2:	e8 db eb ff ff       	call   c001c492 <IDE::read(unsigned char, unsigned char)>
c001d8b7:	89 f1                	mov    ecx,esi
c001d8b9:	0f b6 c0             	movzx  eax,al
c001d8bc:	c1 e0 08             	shl    eax,0x8
c001d8bf:	0f b6 f1             	movzx  esi,cl
c001d8c2:	09 c6                	or     esi,eax
c001d8c4:	d1 fe                	sar    esi,1
c001d8c6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d8ca:	83 c4 10             	add    esp,0x10
c001d8cd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8d2:	74 41                	je     c001d915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d8d4:	31 c9                	xor    ecx,ecx
c001d8d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8dc:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d8e0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8e7:	75 0a                	jne    c001d8f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d8e9:	01 c9                	add    ecx,ecx
c001d8eb:	01 cd                	add    ebp,ecx
c001d8ed:	4b                   	dec    ebx
c001d8ee:	e9 54 ff ff ff       	jmp    c001d847 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d8f3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d8f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8fc:	51                   	push   ecx
c001d8fd:	51                   	push   ecx
c001d8fe:	52                   	push   edx
c001d8ff:	50                   	push   eax
c001d900:	e8 bb ea ff ff       	call   c001c3c0 <IDE::getBase(unsigned char)>
c001d905:	89 c2                	mov    edx,eax
c001d907:	89 f0                	mov    eax,esi
c001d909:	66 ef                	out    dx,ax
c001d90b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	41                   	inc    ecx
c001d913:	eb c1                	jmp    c001d8d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d915:	31 f6                	xor    esi,esi
c001d917:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d91d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d921:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d928:	75 06                	jne    c001d930 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d92a:	01 f6                	add    esi,esi
c001d92c:	01 f5                	add    ebp,esi
c001d92e:	eb bd                	jmp    c001d8ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d930:	51                   	push   ecx
c001d931:	51                   	push   ecx
c001d932:	52                   	push   edx
c001d933:	50                   	push   eax
c001d934:	e8 87 ea ff ff       	call   c001c3c0 <IDE::getBase(unsigned char)>
c001d939:	89 c2                	mov    edx,eax
c001d93b:	66 ed                	in     ax,dx
c001d93d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d942:	83 c4 10             	add    esp,0x10
c001d945:	46                   	inc    esi
c001d946:	eb cf                	jmp    c001d917 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d948:	51                   	push   ecx
c001d949:	51                   	push   ecx
c001d94a:	52                   	push   edx
c001d94b:	50                   	push   eax
c001d94c:	e8 ef eb ff ff       	call   c001c540 <IDE::waitInterrupt(unsigned char)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	84 c0                	test   al,al
c001d956:	0f 84 e8 fd ff ff    	je     c001d744 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d95c:	52                   	push   edx
c001d95d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d962:	52                   	push   edx
c001d963:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d96a:	50                   	push   eax
c001d96b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d971:	e8 36 ea ff ff       	call   c001c3ac <IDE::prepareInterrupt(unsigned char)>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	50                   	push   eax
c001d97a:	50                   	push   eax
c001d97b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d982:	50                   	push   eax
c001d983:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d989:	e8 32 ea ff ff       	call   c001c3c0 <IDE::getBase(unsigned char)>
c001d98e:	8d 50 07             	lea    edx,[eax+0x7]
c001d991:	ec                   	in     al,dx
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	a8 88                	test   al,0x88
c001d997:	74 0a                	je     c001d9a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d999:	4b                   	dec    ebx
c001d99a:	75 dd                	jne    c001d979 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d99c:	bb 02 00 00 00       	mov    ebx,0x2
c001d9a1:	eb 02                	jmp    c001d9a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d9a3:	31 db                	xor    ebx,ebx
c001d9a5:	83 c4 1c             	add    esp,0x1c
c001d9a8:	89 d8                	mov    eax,ebx
c001d9aa:	5b                   	pop    ebx
c001d9ab:	5e                   	pop    esi
c001d9ac:	5f                   	pop    edi
c001d9ad:	5d                   	pop    ebp
c001d9ae:	c3                   	ret    
c001d9af:	90                   	nop

c001d9b0 <ATAPI::diskRemoved()>:
c001d9b0:	83 ec 18             	sub    esp,0x18
c001d9b3:	68 f7 32 02 c0       	push   0xc00232f7
c001d9b8:	e8 9c 17 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d9c8:	83 c4 1c             	add    esp,0x1c
c001d9cb:	c3                   	ret    

c001d9cc <ATAPI::eject()>:
c001d9cc:	57                   	push   edi
c001d9cd:	b9 03 00 00 00       	mov    ecx,0x3
c001d9d2:	53                   	push   ebx
c001d9d3:	83 ec 14             	sub    esp,0x14
c001d9d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9da:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9de:	fc                   	cld    
c001d9df:	31 c0                	xor    eax,eax
c001d9e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d9e3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d9e8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d9ed:	50                   	push   eax
c001d9ee:	50                   	push   eax
c001d9ef:	6a 00                	push   0x0
c001d9f1:	6a 00                	push   0x0
c001d9f3:	6a 00                	push   0x0
c001d9f5:	6a 02                	push   0x2
c001d9f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9fb:	50                   	push   eax
c001d9fc:	53                   	push   ebx
c001d9fd:	e8 ee fc ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da02:	83 c4 14             	add    esp,0x14
c001da05:	53                   	push   ebx
c001da06:	e8 a5 ff ff ff       	call   c001d9b0 <ATAPI::diskRemoved()>
c001da0b:	83 c4 24             	add    esp,0x24
c001da0e:	5b                   	pop    ebx
c001da0f:	5f                   	pop    edi
c001da10:	c3                   	ret    
c001da11:	90                   	nop

c001da12 <ATAPI::diskInserted()>:
c001da12:	53                   	push   ebx
c001da13:	83 ec 14             	sub    esp,0x14
c001da16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001da1a:	68 0d 33 02 c0       	push   0xc002330d
c001da1f:	e8 35 17 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001da24:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001da2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da2e:	e8 a9 2f ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001da33:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001da37:	83 c4 18             	add    esp,0x18
c001da3a:	5b                   	pop    ebx
c001da3b:	e9 3e 4b ff ff       	jmp    c001257e <createPartitionsForDisk(PhysicalDisk*)>

c001da40 <ATAPI::detectMedia()>:
c001da40:	56                   	push   esi
c001da41:	53                   	push   ebx
c001da42:	83 ec 28             	sub    esp,0x28
c001da45:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da49:	6a 0c                	push   0xc
c001da4b:	6a 00                	push   0x0
c001da4d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da51:	56                   	push   esi
c001da52:	e8 b1 2b fe ff       	call   c0000608 <memset>
c001da57:	58                   	pop    eax
c001da58:	5a                   	pop    edx
c001da59:	6a 00                	push   0x0
c001da5b:	6a 00                	push   0x0
c001da5d:	6a 00                	push   0x0
c001da5f:	6a 00                	push   0x0
c001da61:	56                   	push   esi
c001da62:	53                   	push   ebx
c001da63:	e8 88 fc ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da68:	83 c4 1c             	add    esp,0x1c
c001da6b:	6a 0c                	push   0xc
c001da6d:	6a 00                	push   0x0
c001da6f:	56                   	push   esi
c001da70:	e8 93 2b fe ff       	call   c0000608 <memset>
c001da75:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da7a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da7f:	59                   	pop    ecx
c001da80:	58                   	pop    eax
c001da81:	6a 01                	push   0x1
c001da83:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da87:	50                   	push   eax
c001da88:	6a 00                	push   0x0
c001da8a:	6a 12                	push   0x12
c001da8c:	56                   	push   esi
c001da8d:	53                   	push   ebx
c001da8e:	e8 5d fc ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da93:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da97:	83 c4 20             	add    esp,0x20
c001da9a:	83 e0 7f             	and    eax,0x7f
c001da9d:	3c 70                	cmp    al,0x70
c001da9f:	74 15                	je     c001dab6 <ATAPI::detectMedia()+0x76>
c001daa1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daa8:	75 0c                	jne    c001dab6 <ATAPI::detectMedia()+0x76>
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	53                   	push   ebx
c001daae:	e8 5f ff ff ff       	call   c001da12 <ATAPI::diskInserted()>
c001dab3:	83 c4 10             	add    esp,0x10
c001dab6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001daba:	83 e0 0f             	and    eax,0xf
c001dabd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dac2:	75 18                	jne    c001dadc <ATAPI::detectMedia()+0x9c>
c001dac4:	3c 02                	cmp    al,0x2
c001dac6:	75 14                	jne    c001dadc <ATAPI::detectMedia()+0x9c>
c001dac8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dacf:	74 24                	je     c001daf5 <ATAPI::detectMedia()+0xb5>
c001dad1:	83 ec 0c             	sub    esp,0xc
c001dad4:	53                   	push   ebx
c001dad5:	e8 d6 fe ff ff       	call   c001d9b0 <ATAPI::diskRemoved()>
c001dada:	eb 16                	jmp    c001daf2 <ATAPI::detectMedia()+0xb2>
c001dadc:	84 c0                	test   al,al
c001dade:	75 15                	jne    c001daf5 <ATAPI::detectMedia()+0xb5>
c001dae0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dae7:	75 0c                	jne    c001daf5 <ATAPI::detectMedia()+0xb5>
c001dae9:	83 ec 0c             	sub    esp,0xc
c001daec:	53                   	push   ebx
c001daed:	e8 20 ff ff ff       	call   c001da12 <ATAPI::diskInserted()>
c001daf2:	83 c4 10             	add    esp,0x10
c001daf5:	83 c4 24             	add    esp,0x24
c001daf8:	5b                   	pop    ebx
c001daf9:	5e                   	pop    esi
c001dafa:	c3                   	ret    
c001dafb:	90                   	nop

c001dafc <ATAPI::open(int, int, void*)>:
c001dafc:	53                   	push   ebx
c001dafd:	83 ec 08             	sub    esp,0x8
c001db00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db0c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db12:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db18:	c1 e0 06             	shl    eax,0x6
c001db1b:	01 d0                	add    eax,edx
c001db1d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001db24:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db2a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db31:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db3b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db41:	6a 04                	push   0x4
c001db43:	6a 0c                	push   0xc
c001db45:	51                   	push   ecx
c001db46:	52                   	push   edx
c001db47:	e8 86 e8 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db4c:	90                   	nop
c001db4d:	90                   	nop
c001db4e:	6a 00                	push   0x0
c001db50:	6a 0c                	push   0xc
c001db52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db59:	50                   	push   eax
c001db5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db60:	e8 6d e8 ff ff       	call   c001c3d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db65:	83 c4 14             	add    esp,0x14
c001db68:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db6f:	53                   	push   ebx
c001db70:	e8 cb fe ff ff       	call   c001da40 <ATAPI::detectMedia()>
c001db75:	83 c4 18             	add    esp,0x18
c001db78:	31 c0                	xor    eax,eax
c001db7a:	5b                   	pop    ebx
c001db7b:	c3                   	ret    

c001db7c <ATAPI::read(unsigned long long, int, void*)>:
c001db7c:	55                   	push   ebp
c001db7d:	57                   	push   edi
c001db7e:	56                   	push   esi
c001db7f:	53                   	push   ebx
c001db80:	83 ec 1c             	sub    esp,0x1c
c001db83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db87:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db8b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db8f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db96:	74 3c                	je     c001dbd4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db98:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db9c:	b9 03 00 00 00       	mov    ecx,0x3
c001dba1:	fc                   	cld    
c001dba2:	31 c0                	xor    eax,eax
c001dba4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dba6:	0f ce                	bswap  esi
c001dba8:	89 e8                	mov    eax,ebp
c001dbaa:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dbaf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbb3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dbb7:	50                   	push   eax
c001dbb8:	50                   	push   eax
c001dbb9:	55                   	push   ebp
c001dbba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbbe:	c1 e5 0b             	shl    ebp,0xb
c001dbc1:	6a 00                	push   0x0
c001dbc3:	55                   	push   ebp
c001dbc4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbc8:	50                   	push   eax
c001dbc9:	53                   	push   ebx
c001dbca:	e8 21 fb ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbcf:	83 c4 20             	add    esp,0x20
c001dbd2:	eb 1a                	jmp    c001dbee <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbd4:	83 ec 0c             	sub    esp,0xc
c001dbd7:	53                   	push   ebx
c001dbd8:	e8 63 fe ff ff       	call   c001da40 <ATAPI::detectMedia()>
c001dbdd:	83 c4 10             	add    esp,0x10
c001dbe0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbe7:	75 af                	jne    c001db98 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbe9:	b8 02 00 00 00       	mov    eax,0x2
c001dbee:	83 c4 1c             	add    esp,0x1c
c001dbf1:	5b                   	pop    ebx
c001dbf2:	5e                   	pop    esi
c001dbf3:	5f                   	pop    edi
c001dbf4:	5d                   	pop    ebp
c001dbf5:	c3                   	ret    

c001dbf6 <AVX::open(int, int, void*)>:
c001dbf6:	83 ec 0c             	sub    esp,0xc
c001dbf9:	e8 9a 10 00 00       	call   c001ec98 <avxInit>
c001dbfe:	b8 00 00 00 00       	mov    eax,0x0
c001dc03:	83 c4 0c             	add    esp,0xc
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop

c001dc08 <AVX::close(int, int, void*)>:
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	e8 89 10 00 00       	call   c001ec99 <avxClose>
c001dc10:	b8 00 00 00 00       	mov    eax,0x0
c001dc15:	83 c4 0c             	add    esp,0xc
c001dc18:	c3                   	ret    
c001dc19:	90                   	nop

c001dc1a <AVX::available()>:
c001dc1a:	83 ec 0c             	sub    esp,0xc
c001dc1d:	e8 6e 10 00 00       	call   c001ec90 <avxDetect>
c001dc22:	85 c0                	test   eax,eax
c001dc24:	0f 95 c0             	setne  al
c001dc27:	83 c4 0c             	add    esp,0xc
c001dc2a:	c3                   	ret    
c001dc2b:	90                   	nop

c001dc2c <AVX::save(void*)>:
c001dc2c:	83 ec 0c             	sub    esp,0xc
c001dc2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc33:	83 ec 0c             	sub    esp,0xc
c001dc36:	50                   	push   eax
c001dc37:	e8 5a 10 00 00       	call   c001ec96 <avxSave>
c001dc3c:	83 c4 10             	add    esp,0x10
c001dc3f:	90                   	nop
c001dc40:	83 c4 0c             	add    esp,0xc
c001dc43:	c3                   	ret    

c001dc44 <AVX::load(void*)>:
c001dc44:	83 ec 0c             	sub    esp,0xc
c001dc47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc4b:	83 ec 0c             	sub    esp,0xc
c001dc4e:	50                   	push   eax
c001dc4f:	e8 43 10 00 00       	call   c001ec97 <avxLoad>
c001dc54:	83 c4 10             	add    esp,0x10
c001dc57:	90                   	nop
c001dc58:	83 c4 0c             	add    esp,0xc
c001dc5b:	c3                   	ret    

c001dc5c <AVX::AVX()>:
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc63:	83 ec 08             	sub    esp,0x8
c001dc66:	68 58 33 02 c0       	push   0xc0023358
c001dc6b:	50                   	push   eax
c001dc6c:	e8 e1 2d ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	ba 68 33 02 c0       	mov    edx,0xc0023368
c001dc79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7d:	89 10                	mov    DWORD PTR [eax],edx
c001dc7f:	90                   	nop
c001dc80:	83 c4 0c             	add    esp,0xc
c001dc83:	c3                   	ret    

c001dc84 <MMX::available()>:
c001dc84:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001dc89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001dc8f:	83 e0 20             	and    eax,0x20
c001dc92:	84 c0                	test   al,al
c001dc94:	0f 95 c0             	setne  al
c001dc97:	c3                   	ret    

c001dc98 <MMX::open(int, int, void*)>:
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	e8 6c 10 00 00       	call   c001ed0c <x87Init>
c001dca0:	b8 00 00 00 00       	mov    eax,0x0
c001dca5:	83 c4 0c             	add    esp,0xc
c001dca8:	c3                   	ret    
c001dca9:	90                   	nop

c001dcaa <MMX::close(int, int, void*)>:
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	e8 74 10 00 00       	call   c001ed26 <x87Close>
c001dcb2:	b8 00 00 00 00       	mov    eax,0x0
c001dcb7:	83 c4 0c             	add    esp,0xc
c001dcba:	c3                   	ret    
c001dcbb:	90                   	nop

c001dcbc <MMX::save(void*)>:
c001dcbc:	83 ec 0c             	sub    esp,0xc
c001dcbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcc3:	83 ec 0c             	sub    esp,0xc
c001dcc6:	50                   	push   eax
c001dcc7:	e8 35 10 00 00       	call   c001ed01 <x87Save>
c001dccc:	83 c4 10             	add    esp,0x10
c001dccf:	90                   	nop
c001dcd0:	83 c4 0c             	add    esp,0xc
c001dcd3:	c3                   	ret    

c001dcd4 <MMX::load(void*)>:
c001dcd4:	83 ec 0c             	sub    esp,0xc
c001dcd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcdb:	83 ec 0c             	sub    esp,0xc
c001dcde:	50                   	push   eax
c001dcdf:	e8 23 10 00 00       	call   c001ed07 <x87Load>
c001dce4:	83 c4 10             	add    esp,0x10
c001dce7:	90                   	nop
c001dce8:	83 c4 0c             	add    esp,0xc
c001dceb:	c3                   	ret    

c001dcec <MMX::MMX()>:
c001dcec:	83 ec 0c             	sub    esp,0xc
c001dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf3:	83 ec 08             	sub    esp,0x8
c001dcf6:	68 98 33 02 c0       	push   0xc0023398
c001dcfb:	50                   	push   eax
c001dcfc:	e8 51 2d ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001dd01:	83 c4 10             	add    esp,0x10
c001dd04:	ba a8 33 02 c0       	mov    edx,0xc00233a8
c001dd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0d:	89 10                	mov    DWORD PTR [eax],edx
c001dd0f:	90                   	nop
c001dd10:	83 c4 0c             	add    esp,0xc
c001dd13:	c3                   	ret    

c001dd14 <SSE::open(int, int, void*)>:
c001dd14:	83 ec 0c             	sub    esp,0xc
c001dd17:	e8 ab 0f 00 00       	call   c001ecc7 <sseInit>
c001dd1c:	b8 00 00 00 00       	mov    eax,0x0
c001dd21:	83 c4 0c             	add    esp,0xc
c001dd24:	c3                   	ret    
c001dd25:	90                   	nop

c001dd26 <SSE::close(int, int, void*)>:
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	e8 a9 0f 00 00       	call   c001ecd7 <sseClose>
c001dd2e:	b8 00 00 00 00       	mov    eax,0x0
c001dd33:	83 c4 0c             	add    esp,0xc
c001dd36:	c3                   	ret    
c001dd37:	90                   	nop

c001dd38 <SSE::available()>:
c001dd38:	83 ec 1c             	sub    esp,0x1c
c001dd3b:	e8 60 0f 00 00       	call   c001eca0 <sseDetect>
c001dd40:	85 c0                	test   eax,eax
c001dd42:	0f 95 c0             	setne  al
c001dd45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dd4d:	83 c4 1c             	add    esp,0x1c
c001dd50:	c3                   	ret    
c001dd51:	90                   	nop

c001dd52 <SSE::save(void*)>:
c001dd52:	83 ec 0c             	sub    esp,0xc
c001dd55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd59:	83 ec 0c             	sub    esp,0xc
c001dd5c:	50                   	push   eax
c001dd5d:	e8 59 0f 00 00       	call   c001ecbb <sseSave>
c001dd62:	83 c4 10             	add    esp,0x10
c001dd65:	90                   	nop
c001dd66:	83 c4 0c             	add    esp,0xc
c001dd69:	c3                   	ret    

c001dd6a <SSE::load(void*)>:
c001dd6a:	83 ec 0c             	sub    esp,0xc
c001dd6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd71:	83 ec 0c             	sub    esp,0xc
c001dd74:	50                   	push   eax
c001dd75:	e8 47 0f 00 00       	call   c001ecc1 <sseLoad>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	90                   	nop
c001dd7e:	83 c4 0c             	add    esp,0xc
c001dd81:	c3                   	ret    

c001dd82 <SSE::SSE()>:
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd89:	83 ec 08             	sub    esp,0x8
c001dd8c:	68 d8 33 02 c0       	push   0xc00233d8
c001dd91:	50                   	push   eax
c001dd92:	e8 bb 2c ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001dd97:	83 c4 10             	add    esp,0x10
c001dd9a:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c001dd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda3:	89 10                	mov    DWORD PTR [eax],edx
c001dda5:	90                   	nop
c001dda6:	83 c4 0c             	add    esp,0xc
c001dda9:	c3                   	ret    

c001ddaa <x87::open(int, int, void*)>:
c001ddaa:	83 ec 0c             	sub    esp,0xc
c001ddad:	e8 5a 0f 00 00       	call   c001ed0c <x87Init>
c001ddb2:	b8 00 00 00 00       	mov    eax,0x0
c001ddb7:	83 c4 0c             	add    esp,0xc
c001ddba:	c3                   	ret    
c001ddbb:	90                   	nop

c001ddbc <x87::close(int, int, void*)>:
c001ddbc:	83 ec 0c             	sub    esp,0xc
c001ddbf:	e8 62 0f 00 00       	call   c001ed26 <x87Close>
c001ddc4:	b8 00 00 00 00       	mov    eax,0x0
c001ddc9:	83 c4 0c             	add    esp,0xc
c001ddcc:	c3                   	ret    
c001ddcd:	90                   	nop

c001ddce <x87::available()>:
c001ddce:	83 ec 0c             	sub    esp,0xc
c001ddd1:	e8 10 0f 00 00       	call   c001ece6 <x87Detect>
c001ddd6:	85 c0                	test   eax,eax
c001ddd8:	0f 95 c0             	setne  al
c001dddb:	83 c4 0c             	add    esp,0xc
c001ddde:	c3                   	ret    
c001dddf:	90                   	nop

c001dde0 <x87::save(void*)>:
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dde7:	83 ec 0c             	sub    esp,0xc
c001ddea:	50                   	push   eax
c001ddeb:	e8 11 0f 00 00       	call   c001ed01 <x87Save>
c001ddf0:	83 c4 10             	add    esp,0x10
c001ddf3:	90                   	nop
c001ddf4:	83 c4 0c             	add    esp,0xc
c001ddf7:	c3                   	ret    

c001ddf8 <x87::load(void*)>:
c001ddf8:	83 ec 0c             	sub    esp,0xc
c001ddfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddff:	83 ec 0c             	sub    esp,0xc
c001de02:	50                   	push   eax
c001de03:	e8 ff 0e 00 00       	call   c001ed07 <x87Load>
c001de08:	83 c4 10             	add    esp,0x10
c001de0b:	90                   	nop
c001de0c:	83 c4 0c             	add    esp,0xc
c001de0f:	c3                   	ret    

c001de10 <x87::x87()>:
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de17:	83 ec 08             	sub    esp,0x8
c001de1a:	68 18 34 02 c0       	push   0xc0023418
c001de1f:	50                   	push   eax
c001de20:	e8 2d 2c ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	ba 28 34 02 c0       	mov    edx,0xc0023428
c001de2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de31:	89 10                	mov    DWORD PTR [eax],edx
c001de33:	90                   	nop
c001de34:	83 c4 0c             	add    esp,0xc
c001de37:	c3                   	ret    

c001de38 <APIC::disable()>:
c001de38:	90                   	nop
c001de39:	c3                   	ret    

c001de3a <APIC::close(int, int, void*)>:
c001de3a:	55                   	push   ebp
c001de3b:	89 e5                	mov    ebp,esp
c001de3d:	83 ec 08             	sub    esp,0x8
c001de40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de43:	8b 00                	mov    eax,DWORD PTR [eax]
c001de45:	83 c0 3c             	add    eax,0x3c
c001de48:	8b 00                	mov    eax,DWORD PTR [eax]
c001de4a:	83 ec 0c             	sub    esp,0xc
c001de4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de50:	ff d0                	call   eax
c001de52:	83 c4 10             	add    esp,0x10
c001de55:	b8 00 00 00 00       	mov    eax,0x0
c001de5a:	c9                   	leave  
c001de5b:	c3                   	ret    

c001de5c <IOAPIC::close(int, int, void*)>:
c001de5c:	b8 00 00 00 00       	mov    eax,0x0
c001de61:	c3                   	ret    

c001de62 <APIC::io_wait()>:
c001de62:	eb 00                	jmp    c001de64 <APIC::io_wait()+0x2>
c001de64:	eb 00                	jmp    c001de66 <APIC::io_wait()+0x4>
c001de66:	90                   	nop
c001de67:	c3                   	ret    

c001de68 <APIC::getBase()>:
c001de68:	55                   	push   ebp
c001de69:	89 e5                	mov    ebp,esp
c001de6b:	83 ec 18             	sub    esp,0x18
c001de6e:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001de73:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001de79:	83 e0 08             	and    eax,0x8
c001de7c:	84 c0                	test   al,al
c001de7e:	75 07                	jne    c001de87 <APIC::getBase()+0x1f>
c001de80:	b8 00 00 00 00       	mov    eax,0x0
c001de85:	eb 21                	jmp    c001dea8 <APIC::getBase()+0x40>
c001de87:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001de8c:	83 ec 08             	sub    esp,0x8
c001de8f:	6a 1b                	push   0x1b
c001de91:	50                   	push   eax
c001de92:	e8 2d d6 fe ff       	call   c000b4c4 <Computer::rdmsr(unsigned int)>
c001de97:	83 c4 10             	add    esp,0x10
c001de9a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001de9d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dea0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dea3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001dea8:	c9                   	leave  
c001dea9:	c3                   	ret    

c001deaa <APIC::eoi(unsigned char)>:
c001deaa:	55                   	push   ebp
c001deab:	89 e5                	mov    ebp,esp
c001dead:	83 ec 28             	sub    esp,0x28
c001deb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001deb3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001debc:	e8 a7 ff ff ff       	call   c001de68 <APIC::getBase()>
c001dec1:	83 c4 10             	add    esp,0x10
c001dec4:	05 b0 00 00 00       	add    eax,0xb0
c001dec9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001decc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001decf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ded5:	90                   	nop
c001ded6:	c9                   	leave  
c001ded7:	c3                   	ret    

c001ded8 <APIC::open(int, int, void*)>:
c001ded8:	55                   	push   ebp
c001ded9:	89 e5                	mov    ebp,esp
c001dedb:	57                   	push   edi
c001dedc:	56                   	push   esi
c001dedd:	53                   	push   ebx
c001dede:	83 ec 1c             	sub    esp,0x1c
c001dee1:	83 ec 0c             	sub    esp,0xc
c001dee4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dee7:	e8 7c ff ff ff       	call   c001de68 <APIC::getBase()>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	05 f0 00 00 00       	add    eax,0xf0
c001def4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001def7:	83 ec 0c             	sub    esp,0xc
c001defa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001defd:	e8 66 ff ff ff       	call   c001de68 <APIC::getBase()>
c001df02:	83 c4 10             	add    esp,0x10
c001df05:	89 c2                	mov    edx,eax
c001df07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df0a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001df10:	89 c7                	mov    edi,eax
c001df12:	81 e7 ff 00 00 00    	and    edi,0xff
c001df18:	89 d0                	mov    eax,edx
c001df1a:	ba 00 00 00 00       	mov    edx,0x0
c001df1f:	89 c1                	mov    ecx,eax
c001df21:	80 e5 ff             	and    ch,0xff
c001df24:	89 cb                	mov    ebx,ecx
c001df26:	89 d0                	mov    eax,edx
c001df28:	25 ff 00 00 00       	and    eax,0xff
c001df2d:	89 c6                	mov    esi,eax
c001df2f:	89 d8                	mov    eax,ebx
c001df31:	89 f2                	mov    edx,esi
c001df33:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001df36:	8d 5f 08             	lea    ebx,[edi+0x8]
c001df39:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001df3d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001df41:	83 e0 00             	and    eax,0x0
c001df44:	09 d0                	or     eax,edx
c001df46:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001df4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df4d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001df53:	8d 50 01             	lea    edx,[eax+0x1]
c001df56:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001df59:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001df5f:	31 d2                	xor    edx,edx
c001df61:	88 c2                	mov    dl,al
c001df63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df66:	83 c2 08             	add    edx,0x8
c001df69:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001df6d:	81 e1 ff 00 00 00    	and    ecx,0xff
c001df73:	81 c9 00 00 01 00    	or     ecx,0x10000
c001df79:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001df7d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001df80:	8b 00                	mov    eax,DWORD PTR [eax]
c001df82:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001df85:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001df8c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001df8f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df92:	89 10                	mov    DWORD PTR [eax],edx
c001df94:	b8 00 00 00 00       	mov    eax,0x0
c001df99:	8d 65 f4             	lea    esp,[ebp-0xc]
c001df9c:	5b                   	pop    ebx
c001df9d:	5e                   	pop    esi
c001df9e:	5f                   	pop    edi
c001df9f:	5d                   	pop    ebp
c001dfa0:	c3                   	ret    
c001dfa1:	90                   	nop

c001dfa2 <IOAPIC::IOAPIC()>:
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa9:	83 ec 08             	sub    esp,0x8
c001dfac:	68 58 34 02 c0       	push   0xc0023458
c001dfb1:	50                   	push   eax
c001dfb2:	e8 a7 27 ff ff       	call   c001075e <Device::Device(char const*)>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	ba 80 35 02 c0       	mov    edx,0xc0023580
c001dfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc3:	89 10                	mov    DWORD PTR [eax],edx
c001dfc5:	90                   	nop
c001dfc6:	83 c4 0c             	add    esp,0xc
c001dfc9:	c3                   	ret    

c001dfca <APIC::APIC()>:
c001dfca:	53                   	push   ebx
c001dfcb:	83 ec 18             	sub    esp,0x18
c001dfce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd2:	83 ec 08             	sub    esp,0x8
c001dfd5:	68 60 34 02 c0       	push   0xc0023460
c001dfda:	50                   	push   eax
c001dfdb:	e8 ca 2e ff ff       	call   c0010eaa <InterruptController::InterruptController(char const*)>
c001dfe0:	83 c4 10             	add    esp,0x10
c001dfe3:	ba 38 35 02 c0       	mov    edx,0xc0023538
c001dfe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfec:	89 10                	mov    DWORD PTR [eax],edx
c001dfee:	a0 80 60 02 c0       	mov    al,ds:0xc0026080
c001dff3:	83 f0 01             	xor    eax,0x1
c001dff6:	84 c0                	test   al,al
c001dff8:	0f 84 a2 00 00 00    	je     c001e0a0 <APIC::APIC()+0xd6>
c001dffe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e003:	a0 30 4b 02 c0       	mov    al,ds:0xc0024b30
c001e008:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e00c:	0f 83 87 00 00 00    	jae    c001e099 <APIC::APIC()+0xcf>
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	68 68 01 00 00       	push   0x168
c001e01a:	e8 05 10 ff ff       	call   c000f024 <operator new(unsigned long)>
c001e01f:	83 c4 10             	add    esp,0x10
c001e022:	89 c3                	mov    ebx,eax
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	53                   	push   ebx
c001e028:	e8 75 ff ff ff       	call   c001dfa2 <IOAPIC::IOAPIC()>
c001e02d:	83 c4 10             	add    esp,0x10
c001e030:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e034:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e038:	25 ff 00 00 00       	and    eax,0xff
c001e03d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e041:	89 14 85 60 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fa0],edx
c001e048:	a1 40 60 02 c0       	mov    eax,ds:0xc0026040
c001e04d:	40                   	inc    eax
c001e04e:	a3 40 60 02 c0       	mov    ds:0xc0026040,eax
c001e053:	a1 88 42 02 c0       	mov    eax,ds:0xc0024288
c001e058:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e05e:	83 ec 08             	sub    esp,0x8
c001e061:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e065:	50                   	push   eax
c001e066:	e8 03 25 ff ff       	call   c001056e <Device::addChild(Device*)>
c001e06b:	83 c4 10             	add    esp,0x10
c001e06e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e072:	8b 00                	mov    eax,DWORD PTR [eax]
c001e074:	83 c0 08             	add    eax,0x8
c001e077:	8b 10                	mov    edx,DWORD PTR [eax]
c001e079:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e07d:	25 ff 00 00 00       	and    eax,0xff
c001e082:	6a 00                	push   0x0
c001e084:	6a 00                	push   0x0
c001e086:	50                   	push   eax
c001e087:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e08b:	ff d2                	call   edx
c001e08d:	83 c4 10             	add    esp,0x10
c001e090:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e094:	e9 6a ff ff ff       	jmp    c001e003 <APIC::APIC()+0x39>
c001e099:	c6 05 80 60 02 c0 01 	mov    BYTE PTR ds:0xc0026080,0x1
c001e0a0:	90                   	nop
c001e0a1:	83 c4 18             	add    esp,0x18
c001e0a4:	5b                   	pop    ebx
c001e0a5:	c3                   	ret    

c001e0a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e0a6:	55                   	push   ebp
c001e0a7:	89 e5                	mov    ebp,esp
c001e0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e0b2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e0b5:	72 1d                	jb     c001e0d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0ba:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e0c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0c3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e0c9:	01 d0                	add    eax,edx
c001e0cb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e0ce:	73 04                	jae    c001e0d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e0d0:	b0 01                	mov    al,0x1
c001e0d2:	eb 02                	jmp    c001e0d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e0d4:	b0 00                	mov    al,0x0
c001e0d6:	5d                   	pop    ebp
c001e0d7:	c3                   	ret    

c001e0d8 <IOAPIC::read(int)>:
c001e0d8:	55                   	push   ebp
c001e0d9:	89 e5                	mov    ebp,esp
c001e0db:	83 ec 10             	sub    esp,0x10
c001e0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e0ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e0ed:	31 d2                	xor    edx,edx
c001e0ef:	88 c2                	mov    dl,al
c001e0f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e0f4:	89 10                	mov    DWORD PTR [eax],edx
c001e0f6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e0f9:	83 c0 10             	add    eax,0x10
c001e0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0fe:	c9                   	leave  
c001e0ff:	c3                   	ret    

c001e100 <IOAPIC::open(int, int, void*)>:
c001e100:	55                   	push   ebp
c001e101:	89 e5                	mov    ebp,esp
c001e103:	57                   	push   edi
c001e104:	56                   	push   esi
c001e105:	53                   	push   ebx
c001e106:	83 ec 0c             	sub    esp,0xc
c001e109:	83 ec 0c             	sub    esp,0xc
c001e10c:	68 8b 34 02 c0       	push   0xc002348b
c001e111:	e8 43 10 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e11c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e11f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e128:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e12e:	8b 14 85 60 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb4a0]
c001e135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e138:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e13e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e141:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e147:	8b 14 85 e0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb420]
c001e14e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e151:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e15a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e163:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e169:	89 c7                	mov    edi,eax
c001e16b:	81 e7 ff 00 00 00    	and    edi,0xff
c001e171:	89 d0                	mov    eax,edx
c001e173:	ba 00 00 00 00       	mov    edx,0x0
c001e178:	89 c1                	mov    ecx,eax
c001e17a:	80 e5 ff             	and    ch,0xff
c001e17d:	89 cb                	mov    ebx,ecx
c001e17f:	89 d0                	mov    eax,edx
c001e181:	25 ff 00 00 00       	and    eax,0xff
c001e186:	89 c6                	mov    esi,eax
c001e188:	89 d8                	mov    eax,ebx
c001e18a:	89 f2                	mov    edx,esi
c001e18c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e18f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e192:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e196:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e19a:	83 e0 00             	and    eax,0x0
c001e19d:	09 d0                	or     eax,edx
c001e19f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e1a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1a6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e1ac:	8d 50 01             	lea    edx,[eax+0x1]
c001e1af:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e1b2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e1b8:	31 d2                	xor    edx,edx
c001e1ba:	88 c2                	mov    dl,al
c001e1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1bf:	83 c2 08             	add    edx,0x8
c001e1c2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e1c6:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e1cc:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e1d2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1d6:	83 ec 08             	sub    esp,0x8
c001e1d9:	6a 01                	push   0x1
c001e1db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e1de:	e8 f5 fe ff ff       	call   c001e0d8 <IOAPIC::read(int)>
c001e1e3:	83 c4 10             	add    esp,0x10
c001e1e6:	c1 f8 10             	sar    eax,0x10
c001e1e9:	25 ff 00 00 00       	and    eax,0xff
c001e1ee:	8d 50 01             	lea    edx,[eax+0x1]
c001e1f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1f4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e1fa:	b8 00 00 00 00       	mov    eax,0x0
c001e1ff:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e202:	5b                   	pop    ebx
c001e203:	5e                   	pop    esi
c001e204:	5f                   	pop    edi
c001e205:	5d                   	pop    ebp
c001e206:	c3                   	ret    
c001e207:	90                   	nop

c001e208 <IOAPIC::write(int, int)>:
c001e208:	55                   	push   ebp
c001e209:	89 e5                	mov    ebp,esp
c001e20b:	83 ec 10             	sub    esp,0x10
c001e20e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e211:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e217:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e21a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e21d:	31 d2                	xor    edx,edx
c001e21f:	88 c2                	mov    dl,al
c001e221:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e224:	89 10                	mov    DWORD PTR [eax],edx
c001e226:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e229:	8d 50 10             	lea    edx,[eax+0x10]
c001e22c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e22f:	89 02                	mov    DWORD PTR [edx],eax
c001e231:	90                   	nop
c001e232:	c9                   	leave  
c001e233:	c3                   	ret    

c001e234 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e234:	55                   	push   ebp
c001e235:	89 e5                	mov    ebp,esp
c001e237:	83 ec 20             	sub    esp,0x20
c001e23a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e23d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e240:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e243:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e246:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e249:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e24c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e24f:	88 d0                	mov    al,dl
c001e251:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e254:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e257:	25 ff 00 00 00       	and    eax,0xff
c001e25c:	83 c0 08             	add    eax,0x8
c001e25f:	01 c0                	add    eax,eax
c001e261:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e264:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e267:	25 ff 00 00 00       	and    eax,0xff
c001e26c:	83 c0 08             	add    eax,0x8
c001e26f:	01 c0                	add    eax,eax
c001e271:	40                   	inc    eax
c001e272:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e275:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e278:	50                   	push   eax
c001e279:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e27c:	e8 57 fe ff ff       	call   c001e0d8 <IOAPIC::read(int)>
c001e281:	83 c4 08             	add    esp,0x8
c001e284:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e287:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e28e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e291:	c1 e0 18             	shl    eax,0x18
c001e294:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e297:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e29a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e29d:	52                   	push   edx
c001e29e:	50                   	push   eax
c001e29f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2a2:	e8 61 ff ff ff       	call   c001e208 <IOAPIC::write(int, int)>
c001e2a7:	83 c4 0c             	add    esp,0xc
c001e2aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e2ad:	50                   	push   eax
c001e2ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2b1:	e8 22 fe ff ff       	call   c001e0d8 <IOAPIC::read(int)>
c001e2b6:	83 c4 08             	add    esp,0x8
c001e2b9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e2bc:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e2c3:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e2ca:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e2d1:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e2d8:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e2db:	25 ff 00 00 00       	and    eax,0xff
c001e2e0:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e2e3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e2e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e2e9:	52                   	push   edx
c001e2ea:	50                   	push   eax
c001e2eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2ee:	e8 15 ff ff ff       	call   c001e208 <IOAPIC::write(int, int)>
c001e2f3:	83 c4 0c             	add    esp,0xc
c001e2f6:	90                   	nop
c001e2f7:	c9                   	leave  
c001e2f8:	c3                   	ret    
c001e2f9:	90                   	nop

c001e2fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e2fa:	55                   	push   ebp
c001e2fb:	89 e5                	mov    ebp,esp
c001e2fd:	56                   	push   esi
c001e2fe:	53                   	push   ebx
c001e2ff:	83 ec 20             	sub    esp,0x20
c001e302:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e305:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e308:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e30c:	74 2a                	je     c001e338 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e30e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e312:	7f 14                	jg     c001e328 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e314:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e317:	05 e0 39 02 c0       	add    eax,0xc00239e0
c001e31c:	8a 00                	mov    al,BYTE PTR [eax]
c001e31e:	25 ff 00 00 00       	and    eax,0xff
c001e323:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e326:	eb 10                	jmp    c001e338 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	68 9c 34 02 c0       	push   0xc002349c
c001e330:	e8 19 72 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001e335:	83 c4 10             	add    esp,0x10
c001e338:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e33c:	a1 40 60 02 c0       	mov    eax,ds:0xc0026040
c001e341:	83 ec 08             	sub    esp,0x8
c001e344:	50                   	push   eax
c001e345:	68 d4 34 02 c0       	push   0xc00234d4
c001e34a:	e8 0a 0e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e34f:	83 c4 10             	add    esp,0x10
c001e352:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e359:	a1 40 60 02 c0       	mov    eax,ds:0xc0026040
c001e35e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e361:	7d 64                	jge    c001e3c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e363:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e366:	8b 04 85 60 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9fa0]
c001e36d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e370:	83 ec 08             	sub    esp,0x8
c001e373:	52                   	push   edx
c001e374:	50                   	push   eax
c001e375:	e8 2c fd ff ff       	call   c001e0a6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e37a:	83 c4 10             	add    esp,0x10
c001e37d:	84 c0                	test   al,al
c001e37f:	74 41                	je     c001e3c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e381:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e384:	8b 1c 85 60 60 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9fa0]
c001e38b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e38e:	83 c0 20             	add    eax,0x20
c001e391:	89 c6                	mov    esi,eax
c001e393:	81 e6 ff 00 00 00    	and    esi,0xff
c001e399:	e8 41 60 ff ff       	call   c00143df <getCPUNumber()>
c001e39e:	89 c2                	mov    edx,eax
c001e3a0:	c1 fa 1f             	sar    edx,0x1f
c001e3a3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e3a6:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	56                   	push   esi
c001e3b0:	52                   	push   edx
c001e3b1:	50                   	push   eax
c001e3b2:	51                   	push   ecx
c001e3b3:	53                   	push   ebx
c001e3b4:	e8 7b fe ff ff       	call   c001e234 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e3b9:	83 c4 20             	add    esp,0x20
c001e3bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e3c0:	eb 05                	jmp    c001e3c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e3c2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e3c5:	eb 92                	jmp    c001e359 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e3c7:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e3ca:	83 f0 01             	xor    eax,0x1
c001e3cd:	84 c0                	test   al,al
c001e3cf:	74 10                	je     c001e3e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e3d1:	83 ec 0c             	sub    esp,0xc
c001e3d4:	68 eb 34 02 c0       	push   0xc00234eb
c001e3d9:	e8 70 71 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e3e5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e3ec:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e3f0:	7f 65                	jg     c001e457 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e3f8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e3ff:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e402:	01 ca                	add    edx,ecx
c001e404:	83 c2 54             	add    edx,0x54
c001e407:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e40b:	85 c0                	test   eax,eax
c001e40d:	75 43                	jne    c001e452 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e412:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e415:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e41c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e41f:	01 ca                	add    edx,ecx
c001e421:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e424:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e427:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e42b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e42e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e431:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e438:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e43b:	01 ca                	add    edx,ecx
c001e43d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e443:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e446:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e44a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e44d:	83 e8 20             	sub    eax,0x20
c001e450:	eb 1a                	jmp    c001e46c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e452:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e455:	eb 95                	jmp    c001e3ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e457:	83 ec 0c             	sub    esp,0xc
c001e45a:	68 f8 34 02 c0       	push   0xc00234f8
c001e45f:	e8 ea 70 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001e464:	83 c4 10             	add    esp,0x10
c001e467:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e46c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e46f:	5b                   	pop    ebx
c001e470:	5e                   	pop    esi
c001e471:	5d                   	pop    ebp
c001e472:	c3                   	ret    
c001e473:	90                   	nop

c001e474 <PIC::disable()>:
c001e474:	55                   	push   ebp
c001e475:	89 e5                	mov    ebp,esp
c001e477:	83 ec 10             	sub    esp,0x10
c001e47a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e480:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e484:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e487:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e48b:	ee                   	out    dx,al
c001e48c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e492:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e496:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e499:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e49d:	ee                   	out    dx,al
c001e49e:	90                   	nop
c001e49f:	c9                   	leave  
c001e4a0:	c3                   	ret    
c001e4a1:	90                   	nop

c001e4a2 <PIC::close(int, int, void*)>:
c001e4a2:	55                   	push   ebp
c001e4a3:	89 e5                	mov    ebp,esp
c001e4a5:	83 ec 08             	sub    esp,0x8
c001e4a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ad:	83 c0 3c             	add    eax,0x3c
c001e4b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4b2:	83 ec 0c             	sub    esp,0xc
c001e4b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4b8:	ff d0                	call   eax
c001e4ba:	83 c4 10             	add    esp,0x10
c001e4bd:	b8 00 00 00 00       	mov    eax,0x0
c001e4c2:	c9                   	leave  
c001e4c3:	c3                   	ret    

c001e4c4 <PIC::PIC()>:
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cb:	83 ec 08             	sub    esp,0x8
c001e4ce:	68 a4 35 02 c0       	push   0xc00235a4
c001e4d3:	50                   	push   eax
c001e4d4:	e8 d1 29 ff ff       	call   c0010eaa <InterruptController::InterruptController(char const*)>
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c001e4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e5:	89 10                	mov    DWORD PTR [eax],edx
c001e4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e4f1:	31 d2                	xor    edx,edx
c001e4f3:	88 c2                	mov    dl,al
c001e4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f9:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e504:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e50a:	31 d2                	xor    edx,edx
c001e50c:	88 c2                	mov    dl,al
c001e50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e512:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e51b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e521:	8d 50 01             	lea    edx,[eax+0x1]
c001e524:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e528:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e52e:	31 d2                	xor    edx,edx
c001e530:	88 c2                	mov    dl,al
c001e532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e536:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e53a:	83 e1 3f             	and    ecx,0x3f
c001e53d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e545:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e54b:	31 d2                	xor    edx,edx
c001e54d:	88 c2                	mov    dl,al
c001e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e553:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e55e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e564:	31 d2                	xor    edx,edx
c001e566:	88 c2                	mov    dl,al
c001e568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e56c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e575:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e57b:	8d 50 01             	lea    edx,[eax+0x1]
c001e57e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e582:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e588:	31 d2                	xor    edx,edx
c001e58a:	88 c2                	mov    dl,al
c001e58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e590:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e594:	83 e1 3f             	and    ecx,0x3f
c001e597:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e59b:	90                   	nop
c001e59c:	83 c4 0c             	add    esp,0xc
c001e59f:	c3                   	ret    

c001e5a0 <PIC::ioWait()>:
c001e5a0:	eb 00                	jmp    c001e5a2 <PIC::ioWait()+0x2>
c001e5a2:	eb 00                	jmp    c001e5a4 <PIC::ioWait()+0x4>
c001e5a4:	90                   	nop
c001e5a5:	c3                   	ret    

c001e5a6 <PIC::getIRQReg(int)>:
c001e5a6:	55                   	push   ebp
c001e5a7:	89 e5                	mov    ebp,esp
c001e5a9:	83 ec 10             	sub    esp,0x10
c001e5ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5af:	25 ff 00 00 00       	and    eax,0xff
c001e5b4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e5ba:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e5bd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e5c0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e5c4:	ee                   	out    dx,al
c001e5c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5c8:	25 ff 00 00 00       	and    eax,0xff
c001e5cd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e5d3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e5d6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e5d9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e5dd:	ee                   	out    dx,al
c001e5de:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e5e4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e5e8:	89 c2                	mov    edx,eax
c001e5ea:	ec                   	in     al,dx
c001e5eb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e5ee:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e5f1:	25 ff 00 00 00       	and    eax,0xff
c001e5f6:	c1 e0 08             	shl    eax,0x8
c001e5f9:	89 c1                	mov    ecx,eax
c001e5fb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e601:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e605:	89 c2                	mov    edx,eax
c001e607:	ec                   	in     al,dx
c001e608:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e60b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e60e:	25 ff 00 00 00       	and    eax,0xff
c001e613:	09 c8                	or     eax,ecx
c001e615:	c9                   	leave  
c001e616:	c3                   	ret    
c001e617:	90                   	nop

c001e618 <PIC::eoi(unsigned char)>:
c001e618:	55                   	push   ebp
c001e619:	89 e5                	mov    ebp,esp
c001e61b:	83 ec 14             	sub    esp,0x14
c001e61e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e621:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e624:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e628:	75 23                	jne    c001e64d <PIC::eoi(unsigned char)+0x35>
c001e62a:	6a 0b                	push   0xb
c001e62c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e62f:	e8 72 ff ff ff       	call   c001e5a6 <PIC::getIRQReg(int)>
c001e634:	83 c4 08             	add    esp,0x8
c001e637:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e63b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e63f:	25 ff ff 00 00       	and    eax,0xffff
c001e644:	25 80 00 00 00       	and    eax,0x80
c001e649:	85 c0                	test   eax,eax
c001e64b:	74 5f                	je     c001e6ac <PIC::eoi(unsigned char)+0x94>
c001e64d:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e651:	75 2d                	jne    c001e680 <PIC::eoi(unsigned char)+0x68>
c001e653:	6a 0b                	push   0xb
c001e655:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e658:	e8 49 ff ff ff       	call   c001e5a6 <PIC::getIRQReg(int)>
c001e65d:	83 c4 08             	add    esp,0x8
c001e660:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e664:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e667:	66 85 c0             	test   ax,ax
c001e66a:	78 14                	js     c001e680 <PIC::eoi(unsigned char)+0x68>
c001e66c:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e672:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e676:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e679:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e67d:	ee                   	out    dx,al
c001e67e:	eb 2d                	jmp    c001e6ad <PIC::eoi(unsigned char)+0x95>
c001e680:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e684:	76 12                	jbe    c001e698 <PIC::eoi(unsigned char)+0x80>
c001e686:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e68c:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e690:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e693:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e697:	ee                   	out    dx,al
c001e698:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e69e:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e6a2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e6a5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e6a9:	ee                   	out    dx,al
c001e6aa:	eb 01                	jmp    c001e6ad <PIC::eoi(unsigned char)+0x95>
c001e6ac:	90                   	nop
c001e6ad:	c9                   	leave  
c001e6ae:	c3                   	ret    
c001e6af:	90                   	nop

c001e6b0 <PIC::remap()>:
c001e6b0:	55                   	push   ebp
c001e6b1:	89 e5                	mov    ebp,esp
c001e6b3:	83 ec 48             	sub    esp,0x48
c001e6b6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e6bd:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e6c4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e6ca:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e6cd:	89 c2                	mov    edx,eax
c001e6cf:	ec                   	in     al,dx
c001e6d0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e6d3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e6d6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e6d9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e6df:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e6e2:	89 c2                	mov    edx,eax
c001e6e4:	ec                   	in     al,dx
c001e6e5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e6e8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e6eb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e6ee:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e6f4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e6f8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e6fb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e6fe:	ee                   	out    dx,al
c001e6ff:	83 ec 0c             	sub    esp,0xc
c001e702:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e705:	e8 96 fe ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e70a:	83 c4 10             	add    esp,0x10
c001e70d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e713:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e717:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e71a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e71d:	ee                   	out    dx,al
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e724:	e8 77 fe ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e729:	83 c4 10             	add    esp,0x10
c001e72c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e72f:	25 ff 00 00 00       	and    eax,0xff
c001e734:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e73a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e73d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e740:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e743:	ee                   	out    dx,al
c001e744:	83 ec 0c             	sub    esp,0xc
c001e747:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e74a:	e8 51 fe ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e74f:	83 c4 10             	add    esp,0x10
c001e752:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e755:	25 ff 00 00 00       	and    eax,0xff
c001e75a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e760:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e763:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e766:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e769:	ee                   	out    dx,al
c001e76a:	83 ec 0c             	sub    esp,0xc
c001e76d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e770:	e8 2b fe ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e775:	83 c4 10             	add    esp,0x10
c001e778:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e77e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e782:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e785:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e788:	ee                   	out    dx,al
c001e789:	83 ec 0c             	sub    esp,0xc
c001e78c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e78f:	e8 0c fe ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e79d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e7a1:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e7a4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e7a7:	ee                   	out    dx,al
c001e7a8:	83 ec 0c             	sub    esp,0xc
c001e7ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ae:	e8 ed fd ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e7b3:	83 c4 10             	add    esp,0x10
c001e7b6:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e7bc:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e7c0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e7c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e7c6:	ee                   	out    dx,al
c001e7c7:	83 ec 0c             	sub    esp,0xc
c001e7ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7cd:	e8 ce fd ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e7d2:	83 c4 10             	add    esp,0x10
c001e7d5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e7db:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e7df:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e7e2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e7e5:	ee                   	out    dx,al
c001e7e6:	83 ec 0c             	sub    esp,0xc
c001e7e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ec:	e8 af fd ff ff       	call   c001e5a0 <PIC::ioWait()>
c001e7f1:	83 c4 10             	add    esp,0x10
c001e7f4:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001e7f7:	25 ff 00 00 00       	and    eax,0xff
c001e7fc:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e802:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e805:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e808:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e80b:	ee                   	out    dx,al
c001e80c:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001e80f:	25 ff 00 00 00       	and    eax,0xff
c001e814:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e81a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e81d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e820:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e823:	ee                   	out    dx,al
c001e824:	90                   	nop
c001e825:	c9                   	leave  
c001e826:	c3                   	ret    
c001e827:	90                   	nop

c001e828 <PIC::open(int, int, void*)>:
c001e828:	55                   	push   ebp
c001e829:	89 e5                	mov    ebp,esp
c001e82b:	83 ec 18             	sub    esp,0x18
c001e82e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001e834:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001e838:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e83b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e83f:	ee                   	out    dx,al
c001e840:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001e846:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001e84a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e84d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e851:	ee                   	out    dx,al
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e858:	e8 53 fe ff ff       	call   c001e6b0 <PIC::remap()>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	b8 00 00 00 00       	mov    eax,0x0
c001e865:	c9                   	leave  
c001e866:	c3                   	ret    
c001e867:	90                   	nop

c001e868 <APICTimer::close(int, int, void*)>:
c001e868:	b8 00 00 00 00       	mov    eax,0x0
c001e86d:	c3                   	ret    

c001e86e <apicTimerHandler(regs*, void*)>:
c001e86e:	83 ec 0c             	sub    esp,0xc
c001e871:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e875:	8b 00                	mov    eax,DWORD PTR [eax]
c001e877:	89 c2                	mov    edx,eax
c001e879:	c1 fa 1f             	sar    edx,0x1f
c001e87c:	52                   	push   edx
c001e87d:	50                   	push   eax
c001e87e:	6a 00                	push   0x0
c001e880:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e885:	e8 92 07 00 00       	call   c001f01c <__udivdi3>
c001e88a:	83 c4 10             	add    esp,0x10
c001e88d:	83 ec 08             	sub    esp,0x8
c001e890:	52                   	push   edx
c001e891:	50                   	push   eax
c001e892:	e8 08 40 ff ff       	call   c001289f <timerHandler(unsigned long long)>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	90                   	nop
c001e89b:	83 c4 0c             	add    esp,0xc
c001e89e:	c3                   	ret    
c001e89f:	90                   	nop

c001e8a0 <APICTimer::write(int)>:
c001e8a0:	53                   	push   ebx
c001e8a1:	83 ec 28             	sub    esp,0x28
c001e8a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e8ac:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8b2:	e8 2b 5b ff ff       	call   c00143e2 <thisCPU()>
c001e8b7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e8bd:	83 ec 0c             	sub    esp,0xc
c001e8c0:	50                   	push   eax
c001e8c1:	e8 a2 f5 ff ff       	call   c001de68 <APIC::getBase()>
c001e8c6:	83 c4 10             	add    esp,0x10
c001e8c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e8cd:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c001e8d2:	8b 15 f4 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248f4
c001e8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e8e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e8e4:	05 e0 03 00 00       	add    eax,0x3e0
c001e8e9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e8ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e8f3:	05 80 03 00 00       	add    eax,0x380
c001e8f8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e8fe:	fb                   	sti    
c001e8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e907:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e90c:	83 d2 00             	adc    edx,0x0
c001e90f:	89 c1                	mov    ecx,eax
c001e911:	89 d3                	mov    ebx,edx
c001e913:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c001e918:	8b 15 f4 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248f4
c001e91e:	39 c8                	cmp    eax,ecx
c001e920:	89 d0                	mov    eax,edx
c001e922:	19 d8                	sbb    eax,ebx
c001e924:	73 02                	jae    c001e928 <APICTimer::write(int)+0x88>
c001e926:	eb d7                	jmp    c001e8ff <APICTimer::write(int)+0x5f>
c001e928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e92c:	05 20 03 00 00       	add    eax,0x320
c001e931:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e937:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e93b:	05 90 03 00 00       	add    eax,0x390
c001e940:	8b 00                	mov    eax,DWORD PTR [eax]
c001e942:	f7 d0                	not    eax
c001e944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e948:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e94c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e950:	ba 00 00 00 00       	mov    edx,0x0
c001e955:	f7 f3                	div    ebx
c001e957:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e95b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e95f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e965:	0d 00 00 02 00       	or     eax,0x20000
c001e96a:	89 c2                	mov    edx,eax
c001e96c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e970:	05 20 03 00 00       	add    eax,0x320
c001e975:	89 10                	mov    DWORD PTR [eax],edx
c001e977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e97b:	05 e0 03 00 00       	add    eax,0x3e0
c001e980:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e986:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e98a:	05 80 03 00 00       	add    eax,0x380
c001e98f:	89 c2                	mov    edx,eax
c001e991:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e995:	89 02                	mov    DWORD PTR [edx],eax
c001e997:	90                   	nop
c001e998:	83 c4 28             	add    esp,0x28
c001e99b:	5b                   	pop    ebx
c001e99c:	c3                   	ret    
c001e99d:	90                   	nop

c001e99e <APICTimer::open(int, int, void*)>:
c001e99e:	57                   	push   edi
c001e99f:	56                   	push   esi
c001e9a0:	53                   	push   ebx
c001e9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a7:	83 c0 24             	add    eax,0x24
c001e9aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ac:	83 ec 08             	sub    esp,0x8
c001e9af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9b7:	ff d0                	call   eax
c001e9b9:	83 c4 10             	add    esp,0x10
c001e9bc:	e8 21 5a ff ff       	call   c00143e2 <thisCPU()>
c001e9c1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	50                   	push   eax
c001e9cb:	e8 98 f4 ff ff       	call   c001de68 <APIC::getBase()>
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e9e3:	89 c7                	mov    edi,eax
c001e9e5:	81 e7 ff 00 00 00    	and    edi,0xff
c001e9eb:	89 d0                	mov    eax,edx
c001e9ed:	ba 00 00 00 00       	mov    edx,0x0
c001e9f2:	89 c1                	mov    ecx,eax
c001e9f4:	80 e5 ff             	and    ch,0xff
c001e9f7:	89 cb                	mov    ebx,ecx
c001e9f9:	89 d0                	mov    eax,edx
c001e9fb:	25 ff 00 00 00       	and    eax,0xff
c001ea00:	89 c6                	mov    esi,eax
c001ea02:	89 d8                	mov    eax,ebx
c001ea04:	89 f2                	mov    edx,esi
c001ea06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea0a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ea0d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ea11:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ea15:	83 e0 00             	and    eax,0x0
c001ea18:	09 d0                	or     eax,edx
c001ea1a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ea1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea22:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ea28:	8d 50 01             	lea    edx,[eax+0x1]
c001ea2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea2f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ea35:	31 d2                	xor    edx,edx
c001ea37:	88 c2                	mov    dl,al
c001ea39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3d:	83 c2 08             	add    edx,0x8
c001ea40:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ea44:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ea4a:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ea50:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ea62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea6a:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ea70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea74:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ea7a:	83 ec 0c             	sub    esp,0xc
c001ea7d:	51                   	push   ecx
c001ea7e:	6a 01                	push   0x1
c001ea80:	68 6e e8 01 c0       	push   0xc001e86e
c001ea85:	52                   	push   edx
c001ea86:	50                   	push   eax
c001ea87:	e8 36 1a ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea8c:	83 c4 20             	add    esp,0x20
c001ea8f:	89 c2                	mov    edx,eax
c001ea91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea95:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea9b:	b8 00 00 00 00       	mov    eax,0x0
c001eaa0:	5b                   	pop    ebx
c001eaa1:	5e                   	pop    esi
c001eaa2:	5f                   	pop    edi
c001eaa3:	c3                   	ret    

c001eaa4 <APICTimer::APICTimer()>:
c001eaa4:	83 ec 0c             	sub    esp,0xc
c001eaa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaab:	83 ec 08             	sub    esp,0x8
c001eaae:	68 10 36 02 c0       	push   0xc0023610
c001eab3:	50                   	push   eax
c001eab4:	e8 57 3d ff ff       	call   c0012810 <Timer::Timer(char const*)>
c001eab9:	83 c4 10             	add    esp,0x10
c001eabc:	ba 24 36 02 c0       	mov    edx,0xc0023624
c001eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac5:	89 10                	mov    DWORD PTR [eax],edx
c001eac7:	90                   	nop
c001eac8:	83 c4 0c             	add    esp,0xc
c001eacb:	c3                   	ret    

c001eacc <PIT::write(int)>:
c001eacc:	83 ec 10             	sub    esp,0x10
c001eacf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ead3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ead7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eadd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eae1:	a3 84 60 02 c0       	mov    ds:0xc0026084,eax
c001eae6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eaeb:	89 c2                	mov    edx,eax
c001eaed:	c1 fa 1f             	sar    edx,0x1f
c001eaf0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eaf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eaf8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eaff:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eb04:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eb08:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eb0d:	ee                   	out    dx,al
c001eb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb12:	25 ff 00 00 00       	and    eax,0xff
c001eb17:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eb1e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eb22:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eb26:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eb2b:	ee                   	out    dx,al
c001eb2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb30:	c1 f8 08             	sar    eax,0x8
c001eb33:	25 ff 00 00 00       	and    eax,0xff
c001eb38:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eb3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eb43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eb47:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eb4c:	ee                   	out    dx,al
c001eb4d:	90                   	nop
c001eb4e:	83 c4 10             	add    esp,0x10
c001eb51:	c3                   	ret    

c001eb52 <pitHandler(regs*, void*)>:
c001eb52:	83 ec 0c             	sub    esp,0xc
c001eb55:	a1 84 60 02 c0       	mov    eax,ds:0xc0026084
c001eb5a:	89 c2                	mov    edx,eax
c001eb5c:	c1 fa 1f             	sar    edx,0x1f
c001eb5f:	52                   	push   edx
c001eb60:	50                   	push   eax
c001eb61:	6a 00                	push   0x0
c001eb63:	68 00 ca 9a 3b       	push   0x3b9aca00
c001eb68:	e8 af 04 00 00       	call   c001f01c <__udivdi3>
c001eb6d:	83 c4 10             	add    esp,0x10
c001eb70:	83 ec 08             	sub    esp,0x8
c001eb73:	52                   	push   edx
c001eb74:	50                   	push   eax
c001eb75:	e8 25 3d ff ff       	call   c001289f <timerHandler(unsigned long long)>
c001eb7a:	83 c4 10             	add    esp,0x10
c001eb7d:	90                   	nop
c001eb7e:	83 c4 0c             	add    esp,0xc
c001eb81:	c3                   	ret    

c001eb82 <PIT::open(int, int, void*)>:
c001eb82:	83 ec 0c             	sub    esp,0xc
c001eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb89:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb8b:	83 c0 24             	add    eax,0x24
c001eb8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb90:	83 ec 08             	sub    esp,0x8
c001eb93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb9b:	ff d0                	call   eax
c001eb9d:	83 c4 10             	add    esp,0x10
c001eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba4:	83 ec 0c             	sub    esp,0xc
c001eba7:	6a 00                	push   0x0
c001eba9:	6a 01                	push   0x1
c001ebab:	68 52 eb 01 c0       	push   0xc001eb52
c001ebb0:	6a 00                	push   0x0
c001ebb2:	50                   	push   eax
c001ebb3:	e8 0a 19 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebb8:	83 c4 20             	add    esp,0x20
c001ebbb:	89 c2                	mov    edx,eax
c001ebbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ebc7:	b8 00 00 00 00       	mov    eax,0x0
c001ebcc:	83 c4 0c             	add    esp,0xc
c001ebcf:	c3                   	ret    

c001ebd0 <PIT::close(int, int, void*)>:
c001ebd0:	83 ec 0c             	sub    esp,0xc
c001ebd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ebe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe5:	6a 01                	push   0x1
c001ebe7:	68 52 eb 01 c0       	push   0xc001eb52
c001ebec:	6a 00                	push   0x0
c001ebee:	50                   	push   eax
c001ebef:	e8 2c 19 ff ff       	call   c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ebf4:	83 c4 10             	add    esp,0x10
c001ebf7:	b8 00 00 00 00       	mov    eax,0x0
c001ebfc:	83 c4 0c             	add    esp,0xc
c001ebff:	c3                   	ret    

c001ec00 <PIT::PIT()>:
c001ec00:	83 ec 0c             	sub    esp,0xc
c001ec03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec07:	83 ec 08             	sub    esp,0x8
c001ec0a:	68 4c 36 02 c0       	push   0xc002364c
c001ec0f:	50                   	push   eax
c001ec10:	e8 fb 3b ff ff       	call   c0012810 <Timer::Timer(char const*)>
c001ec15:	83 c4 10             	add    esp,0x10
c001ec18:	ba 74 36 02 c0       	mov    edx,0xc0023674
c001ec1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec21:	89 10                	mov    DWORD PTR [eax],edx
c001ec23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec2d:	31 d2                	xor    edx,edx
c001ec2f:	88 c2                	mov    dl,al
c001ec31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec35:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ec3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec46:	31 d2                	xor    edx,edx
c001ec48:	88 c2                	mov    dl,al
c001ec4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ec53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ec5d:	8d 50 01             	lea    edx,[eax+0x1]
c001ec60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec64:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ec6a:	31 d2                	xor    edx,edx
c001ec6c:	88 c2                	mov    dl,al
c001ec6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec72:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ec76:	83 e1 3f             	and    ecx,0x3f
c001ec79:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ec7d:	90                   	nop
c001ec7e:	83 c4 0c             	add    esp,0xc
c001ec81:	c3                   	ret    
c001ec82:	66 90                	xchg   ax,ax
c001ec84:	66 90                	xchg   ax,ax
c001ec86:	66 90                	xchg   ax,ax
c001ec88:	66 90                	xchg   ax,ax
c001ec8a:	66 90                	xchg   ax,ax
c001ec8c:	66 90                	xchg   ax,ax
c001ec8e:	66 90                	xchg   ax,ax

c001ec90 <avxDetect>:
c001ec90:	b8 00 00 00 00       	mov    eax,0x0
c001ec95:	c3                   	ret    

c001ec96 <avxSave>:
c001ec96:	c3                   	ret    

c001ec97 <avxLoad>:
c001ec97:	c3                   	ret    

c001ec98 <avxInit>:
c001ec98:	c3                   	ret    

c001ec99 <avxClose>:
c001ec99:	c3                   	ret    
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	66 90                	xchg   ax,ax
c001ec9e:	66 90                	xchg   ax,ax

c001eca0 <sseDetect>:
c001eca0:	b8 01 00 00 00       	mov    eax,0x1
c001eca5:	0f a2                	cpuid  
c001eca7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ecad:	74 06                	je     c001ecb5 <sseDetect.noSSE>
c001ecaf:	b8 01 00 00 00       	mov    eax,0x1
c001ecb4:	c3                   	ret    

c001ecb5 <sseDetect.noSSE>:
c001ecb5:	b8 00 00 00 00       	mov    eax,0x0
c001ecba:	c3                   	ret    

c001ecbb <sseSave>:
c001ecbb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001ecc0:	c3                   	ret    

c001ecc1 <sseLoad>:
c001ecc1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001ecc6:	c3                   	ret    

c001ecc7 <sseInit>:
c001ecc7:	e8 40 00 00 00       	call   c001ed0c <x87Init>
c001eccc:	0f 20 e0             	mov    eax,cr4
c001eccf:	66 0d 00 06          	or     ax,0x600
c001ecd3:	0f 22 e0             	mov    cr4,eax
c001ecd6:	c3                   	ret    

c001ecd7 <sseClose>:
c001ecd7:	c3                   	ret    
c001ecd8:	66 90                	xchg   ax,ax
c001ecda:	66 90                	xchg   ax,ax
c001ecdc:	66 90                	xchg   ax,ax
c001ecde:	66 90                	xchg   ax,ax

c001ece0 <value_37F>:
c001ece0:	7f 03                	jg     c001ece5 <value_37A+0x1>

c001ece2 <value_37E>:
c001ece2:	7e 03                	jle    c001ece7 <x87Detect+0x1>

c001ece4 <value_37A>:
c001ece4:	7a 03                	jp     c001ece9 <x87Detect+0x3>

c001ece6 <x87Detect>:
c001ece6:	b8 01 00 00 00       	mov    eax,0x1
c001eceb:	0f a2                	cpuid  
c001eced:	f7 c2 01 00 00 00    	test   edx,0x1
c001ecf3:	74 06                	je     c001ecfb <x87Detect.nox87>
c001ecf5:	b8 01 00 00 00       	mov    eax,0x1
c001ecfa:	c3                   	ret    

c001ecfb <x87Detect.nox87>:
c001ecfb:	b8 00 00 00 00       	mov    eax,0x0
c001ed00:	c3                   	ret    

c001ed01 <x87Save>:
c001ed01:	9b dd 74 24 08       	fsave  [esp+0x8]
c001ed06:	c3                   	ret    

c001ed07 <x87Load>:
c001ed07:	dd 64 24 08          	frstor [esp+0x8]
c001ed0b:	c3                   	ret    

c001ed0c <x87Init>:
c001ed0c:	9b db e3             	finit  
c001ed0f:	0f 20 c0             	mov    eax,cr0
c001ed12:	66 25 fb ff          	and    ax,0xfffb
c001ed16:	66 0d 22 00          	or     ax,0x22
c001ed1a:	0f 22 c0             	mov    cr0,eax
c001ed1d:	0f 06                	clts   
c001ed1f:	d9 2d e4 ec 01 c0    	fldcw  WORD PTR ds:0xc001ece4
c001ed25:	c3                   	ret    

c001ed26 <x87Close>:
c001ed26:	c3                   	ret    
c001ed27:	90                   	nop

c001ed28 <__do_global_ctors_aux>:
c001ed28:	a1 08 fe 01 c0       	mov    eax,ds:0xc001fe08
c001ed2d:	83 f8 ff             	cmp    eax,0xffffffff
c001ed30:	74 1a                	je     c001ed4c <__do_global_ctors_aux+0x24>
c001ed32:	55                   	push   ebp
c001ed33:	89 e5                	mov    ebp,esp
c001ed35:	53                   	push   ebx
c001ed36:	52                   	push   edx
c001ed37:	bb 08 fe 01 c0       	mov    ebx,0xc001fe08
c001ed3c:	ff d0                	call   eax
c001ed3e:	83 eb 04             	sub    ebx,0x4
c001ed41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed43:	83 f8 ff             	cmp    eax,0xffffffff
c001ed46:	75 f4                	jne    c001ed3c <__do_global_ctors_aux+0x14>
c001ed48:	58                   	pop    eax
c001ed49:	5b                   	pop    ebx
c001ed4a:	5d                   	pop    ebp
c001ed4b:	c3                   	ret    
c001ed4c:	c3                   	ret    
c001ed4d:	66 90                	xchg   ax,ax
c001ed4f:	90                   	nop

c001ed50 <__divdi3>:
c001ed50:	55                   	push   ebp
c001ed51:	57                   	push   edi
c001ed52:	56                   	push   esi
c001ed53:	53                   	push   ebx
c001ed54:	83 ec 1c             	sub    esp,0x1c
c001ed57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ed5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ed5f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ed62:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ed66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ed6e:	85 db                	test   ebx,ebx
c001ed70:	0f 88 8e 00 00 00    	js     c001ee04 <__divdi3+0xb4>
c001ed76:	89 dd                	mov    ebp,ebx
c001ed78:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ed80:	89 d3                	mov    ebx,edx
c001ed82:	85 d2                	test   edx,edx
c001ed84:	79 0d                	jns    c001ed93 <__divdi3+0x43>
c001ed86:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ed8a:	f7 d8                	neg    eax
c001ed8c:	83 d2 00             	adc    edx,0x0
c001ed8f:	f7 da                	neg    edx
c001ed91:	89 d3                	mov    ebx,edx
c001ed93:	89 c7                	mov    edi,eax
c001ed95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ed98:	85 db                	test   ebx,ebx
c001ed9a:	75 48                	jne    c001ede4 <__divdi3+0x94>
c001ed9c:	39 ef                	cmp    edi,ebp
c001ed9e:	76 24                	jbe    c001edc4 <__divdi3+0x74>
c001eda0:	89 ea                	mov    edx,ebp
c001eda2:	f7 f7                	div    edi
c001eda4:	89 c1                	mov    ecx,eax
c001eda6:	31 f6                	xor    esi,esi
c001eda8:	89 c8                	mov    eax,ecx
c001edaa:	89 f2                	mov    edx,esi
c001edac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001edb0:	85 c9                	test   ecx,ecx
c001edb2:	74 07                	je     c001edbb <__divdi3+0x6b>
c001edb4:	f7 d8                	neg    eax
c001edb6:	83 d2 00             	adc    edx,0x0
c001edb9:	f7 da                	neg    edx
c001edbb:	83 c4 1c             	add    esp,0x1c
c001edbe:	5b                   	pop    ebx
c001edbf:	5e                   	pop    esi
c001edc0:	5f                   	pop    edi
c001edc1:	5d                   	pop    ebp
c001edc2:	c3                   	ret    
c001edc3:	90                   	nop
c001edc4:	85 ff                	test   edi,edi
c001edc6:	75 0b                	jne    c001edd3 <__divdi3+0x83>
c001edc8:	b8 01 00 00 00       	mov    eax,0x1
c001edcd:	31 d2                	xor    edx,edx
c001edcf:	f7 f3                	div    ebx
c001edd1:	89 c7                	mov    edi,eax
c001edd3:	31 d2                	xor    edx,edx
c001edd5:	89 e8                	mov    eax,ebp
c001edd7:	f7 f7                	div    edi
c001edd9:	89 c6                	mov    esi,eax
c001eddb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001edde:	f7 f7                	div    edi
c001ede0:	89 c1                	mov    ecx,eax
c001ede2:	eb c4                	jmp    c001eda8 <__divdi3+0x58>
c001ede4:	39 eb                	cmp    ebx,ebp
c001ede6:	77 3c                	ja     c001ee24 <__divdi3+0xd4>
c001ede8:	0f bd f3             	bsr    esi,ebx
c001edeb:	83 f6 1f             	xor    esi,0x1f
c001edee:	75 40                	jne    c001ee30 <__divdi3+0xe0>
c001edf0:	39 eb                	cmp    ebx,ebp
c001edf2:	72 09                	jb     c001edfd <__divdi3+0xad>
c001edf4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001edf7:	0f 87 97 00 00 00    	ja     c001ee94 <__divdi3+0x144>
c001edfd:	b9 01 00 00 00       	mov    ecx,0x1
c001ee02:	eb a4                	jmp    c001eda8 <__divdi3+0x58>
c001ee04:	f7 d9                	neg    ecx
c001ee06:	83 d3 00             	adc    ebx,0x0
c001ee09:	f7 db                	neg    ebx
c001ee0b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee0e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee12:	89 dd                	mov    ebp,ebx
c001ee14:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ee1c:	e9 5f ff ff ff       	jmp    c001ed80 <__divdi3+0x30>
c001ee21:	8d 76 00             	lea    esi,[esi+0x0]
c001ee24:	31 f6                	xor    esi,esi
c001ee26:	31 c9                	xor    ecx,ecx
c001ee28:	e9 7b ff ff ff       	jmp    c001eda8 <__divdi3+0x58>
c001ee2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ee30:	b8 20 00 00 00       	mov    eax,0x20
c001ee35:	29 f0                	sub    eax,esi
c001ee37:	89 f1                	mov    ecx,esi
c001ee39:	d3 e3                	shl    ebx,cl
c001ee3b:	89 fa                	mov    edx,edi
c001ee3d:	88 c1                	mov    cl,al
c001ee3f:	d3 ea                	shr    edx,cl
c001ee41:	09 da                	or     edx,ebx
c001ee43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee47:	89 f1                	mov    ecx,esi
c001ee49:	d3 e7                	shl    edi,cl
c001ee4b:	89 eb                	mov    ebx,ebp
c001ee4d:	88 c1                	mov    cl,al
c001ee4f:	d3 eb                	shr    ebx,cl
c001ee51:	89 f1                	mov    ecx,esi
c001ee53:	d3 e5                	shl    ebp,cl
c001ee55:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ee58:	88 c1                	mov    cl,al
c001ee5a:	d3 ea                	shr    edx,cl
c001ee5c:	09 d5                	or     ebp,edx
c001ee5e:	89 e8                	mov    eax,ebp
c001ee60:	89 da                	mov    edx,ebx
c001ee62:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ee66:	89 d3                	mov    ebx,edx
c001ee68:	89 c5                	mov    ebp,eax
c001ee6a:	f7 e7                	mul    edi
c001ee6c:	39 d3                	cmp    ebx,edx
c001ee6e:	72 18                	jb     c001ee88 <__divdi3+0x138>
c001ee70:	74 0a                	je     c001ee7c <__divdi3+0x12c>
c001ee72:	89 e9                	mov    ecx,ebp
c001ee74:	31 f6                	xor    esi,esi
c001ee76:	e9 2d ff ff ff       	jmp    c001eda8 <__divdi3+0x58>
c001ee7b:	90                   	nop
c001ee7c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ee7f:	89 f1                	mov    ecx,esi
c001ee81:	d3 e7                	shl    edi,cl
c001ee83:	39 c7                	cmp    edi,eax
c001ee85:	73 eb                	jae    c001ee72 <__divdi3+0x122>
c001ee87:	90                   	nop
c001ee88:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ee8b:	31 f6                	xor    esi,esi
c001ee8d:	e9 16 ff ff ff       	jmp    c001eda8 <__divdi3+0x58>
c001ee92:	66 90                	xchg   ax,ax
c001ee94:	31 c9                	xor    ecx,ecx
c001ee96:	e9 0d ff ff ff       	jmp    c001eda8 <__divdi3+0x58>
c001ee9b:	90                   	nop

c001ee9c <__moddi3>:
c001ee9c:	55                   	push   ebp
c001ee9d:	57                   	push   edi
c001ee9e:	56                   	push   esi
c001ee9f:	53                   	push   ebx
c001eea0:	83 ec 2c             	sub    esp,0x2c
c001eea3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eea7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001eeab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001eeaf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eeb3:	85 db                	test   ebx,ebx
c001eeb5:	0f 88 85 00 00 00    	js     c001ef40 <__moddi3+0xa4>
c001eebb:	89 de                	mov    esi,ebx
c001eebd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001eec5:	89 d7                	mov    edi,edx
c001eec7:	85 d2                	test   edx,edx
c001eec9:	79 09                	jns    c001eed4 <__moddi3+0x38>
c001eecb:	f7 d8                	neg    eax
c001eecd:	83 d2 00             	adc    edx,0x0
c001eed0:	f7 da                	neg    edx
c001eed2:	89 d7                	mov    edi,edx
c001eed4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eed8:	89 cd                	mov    ebp,ecx
c001eeda:	85 ff                	test   edi,edi
c001eedc:	75 52                	jne    c001ef30 <__moddi3+0x94>
c001eede:	89 c3                	mov    ebx,eax
c001eee0:	39 f0                	cmp    eax,esi
c001eee2:	76 24                	jbe    c001ef08 <__moddi3+0x6c>
c001eee4:	89 c8                	mov    eax,ecx
c001eee6:	89 f2                	mov    edx,esi
c001eee8:	f7 f3                	div    ebx
c001eeea:	89 d6                	mov    esi,edx
c001eeec:	89 f0                	mov    eax,esi
c001eeee:	31 d2                	xor    edx,edx
c001eef0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eef4:	85 c9                	test   ecx,ecx
c001eef6:	74 07                	je     c001eeff <__moddi3+0x63>
c001eef8:	f7 d8                	neg    eax
c001eefa:	83 d2 00             	adc    edx,0x0
c001eefd:	f7 da                	neg    edx
c001eeff:	83 c4 2c             	add    esp,0x2c
c001ef02:	5b                   	pop    ebx
c001ef03:	5e                   	pop    esi
c001ef04:	5f                   	pop    edi
c001ef05:	5d                   	pop    ebp
c001ef06:	c3                   	ret    
c001ef07:	90                   	nop
c001ef08:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ef0c:	85 db                	test   ebx,ebx
c001ef0e:	75 0d                	jne    c001ef1d <__moddi3+0x81>
c001ef10:	b8 01 00 00 00       	mov    eax,0x1
c001ef15:	31 d2                	xor    edx,edx
c001ef17:	f7 f7                	div    edi
c001ef19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef1d:	89 f0                	mov    eax,esi
c001ef1f:	31 d2                	xor    edx,edx
c001ef21:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ef25:	f7 f7                	div    edi
c001ef27:	89 e8                	mov    eax,ebp
c001ef29:	f7 f7                	div    edi
c001ef2b:	89 d6                	mov    esi,edx
c001ef2d:	eb bd                	jmp    c001eeec <__moddi3+0x50>
c001ef2f:	90                   	nop
c001ef30:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ef34:	39 f7                	cmp    edi,esi
c001ef36:	76 20                	jbe    c001ef58 <__moddi3+0xbc>
c001ef38:	89 c8                	mov    eax,ecx
c001ef3a:	89 f2                	mov    edx,esi
c001ef3c:	eb b2                	jmp    c001eef0 <__moddi3+0x54>
c001ef3e:	66 90                	xchg   ax,ax
c001ef40:	f7 d9                	neg    ecx
c001ef42:	83 d3 00             	adc    ebx,0x0
c001ef45:	f7 db                	neg    ebx
c001ef47:	89 de                	mov    esi,ebx
c001ef49:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ef51:	e9 6f ff ff ff       	jmp    c001eec5 <__moddi3+0x29>
c001ef56:	66 90                	xchg   ax,ax
c001ef58:	0f bd c7             	bsr    eax,edi
c001ef5b:	83 f0 1f             	xor    eax,0x1f
c001ef5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ef62:	75 24                	jne    c001ef88 <__moddi3+0xec>
c001ef64:	39 f7                	cmp    edi,esi
c001ef66:	72 06                	jb     c001ef6e <__moddi3+0xd2>
c001ef68:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ef6c:	77 0c                	ja     c001ef7a <__moddi3+0xde>
c001ef6e:	89 e9                	mov    ecx,ebp
c001ef70:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ef74:	19 fe                	sbb    esi,edi
c001ef76:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ef7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef7e:	89 f2                	mov    edx,esi
c001ef80:	e9 6b ff ff ff       	jmp    c001eef0 <__moddi3+0x54>
c001ef85:	8d 76 00             	lea    esi,[esi+0x0]
c001ef88:	b8 20 00 00 00       	mov    eax,0x20
c001ef8d:	89 c2                	mov    edx,eax
c001ef8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ef93:	29 da                	sub    edx,ebx
c001ef95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ef99:	88 d9                	mov    cl,bl
c001ef9b:	d3 e7                	shl    edi,cl
c001ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efa1:	88 d1                	mov    cl,dl
c001efa3:	d3 e8                	shr    eax,cl
c001efa5:	09 c7                	or     edi,eax
c001efa7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001efab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001efaf:	89 d8                	mov    eax,ebx
c001efb1:	88 d9                	mov    cl,bl
c001efb3:	d3 e7                	shl    edi,cl
c001efb5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001efb9:	89 f3                	mov    ebx,esi
c001efbb:	88 d1                	mov    cl,dl
c001efbd:	d3 eb                	shr    ebx,cl
c001efbf:	89 c7                	mov    edi,eax
c001efc1:	88 c1                	mov    cl,al
c001efc3:	d3 e6                	shl    esi,cl
c001efc5:	89 e8                	mov    eax,ebp
c001efc7:	88 d1                	mov    cl,dl
c001efc9:	d3 e8                	shr    eax,cl
c001efcb:	09 f0                	or     eax,esi
c001efcd:	89 f9                	mov    ecx,edi
c001efcf:	d3 e5                	shl    ebp,cl
c001efd1:	89 da                	mov    edx,ebx
c001efd3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001efd7:	89 d3                	mov    ebx,edx
c001efd9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001efdd:	89 c6                	mov    esi,eax
c001efdf:	89 d1                	mov    ecx,edx
c001efe1:	39 d3                	cmp    ebx,edx
c001efe3:	72 27                	jb     c001f00c <__moddi3+0x170>
c001efe5:	74 21                	je     c001f008 <__moddi3+0x16c>
c001efe7:	29 f5                	sub    ebp,esi
c001efe9:	19 cb                	sbb    ebx,ecx
c001efeb:	89 de                	mov    esi,ebx
c001efed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001eff1:	d3 e6                	shl    esi,cl
c001eff3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001eff7:	89 f9                	mov    ecx,edi
c001eff9:	d3 ed                	shr    ebp,cl
c001effb:	09 ee                	or     esi,ebp
c001effd:	89 f0                	mov    eax,esi
c001efff:	d3 eb                	shr    ebx,cl
c001f001:	89 da                	mov    edx,ebx
c001f003:	e9 e8 fe ff ff       	jmp    c001eef0 <__moddi3+0x54>
c001f008:	39 c5                	cmp    ebp,eax
c001f00a:	73 db                	jae    c001efe7 <__moddi3+0x14b>
c001f00c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f010:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f014:	89 d1                	mov    ecx,edx
c001f016:	89 c6                	mov    esi,eax
c001f018:	eb cd                	jmp    c001efe7 <__moddi3+0x14b>
c001f01a:	66 90                	xchg   ax,ax

c001f01c <__udivdi3>:
c001f01c:	55                   	push   ebp
c001f01d:	57                   	push   edi
c001f01e:	56                   	push   esi
c001f01f:	53                   	push   ebx
c001f020:	83 ec 1c             	sub    esp,0x1c
c001f023:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f027:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f02b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f02f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f033:	85 d2                	test   edx,edx
c001f035:	75 41                	jne    c001f078 <__udivdi3+0x5c>
c001f037:	39 f7                	cmp    edi,esi
c001f039:	76 15                	jbe    c001f050 <__udivdi3+0x34>
c001f03b:	89 e8                	mov    eax,ebp
c001f03d:	89 f2                	mov    edx,esi
c001f03f:	f7 f7                	div    edi
c001f041:	31 db                	xor    ebx,ebx
c001f043:	89 da                	mov    edx,ebx
c001f045:	83 c4 1c             	add    esp,0x1c
c001f048:	5b                   	pop    ebx
c001f049:	5e                   	pop    esi
c001f04a:	5f                   	pop    edi
c001f04b:	5d                   	pop    ebp
c001f04c:	c3                   	ret    
c001f04d:	8d 76 00             	lea    esi,[esi+0x0]
c001f050:	89 f9                	mov    ecx,edi
c001f052:	85 ff                	test   edi,edi
c001f054:	75 0b                	jne    c001f061 <__udivdi3+0x45>
c001f056:	b8 01 00 00 00       	mov    eax,0x1
c001f05b:	31 d2                	xor    edx,edx
c001f05d:	f7 f7                	div    edi
c001f05f:	89 c1                	mov    ecx,eax
c001f061:	31 d2                	xor    edx,edx
c001f063:	89 f0                	mov    eax,esi
c001f065:	f7 f1                	div    ecx
c001f067:	89 c3                	mov    ebx,eax
c001f069:	89 e8                	mov    eax,ebp
c001f06b:	f7 f1                	div    ecx
c001f06d:	89 da                	mov    edx,ebx
c001f06f:	83 c4 1c             	add    esp,0x1c
c001f072:	5b                   	pop    ebx
c001f073:	5e                   	pop    esi
c001f074:	5f                   	pop    edi
c001f075:	5d                   	pop    ebp
c001f076:	c3                   	ret    
c001f077:	90                   	nop
c001f078:	39 f2                	cmp    edx,esi
c001f07a:	77 1c                	ja     c001f098 <__udivdi3+0x7c>
c001f07c:	0f bd da             	bsr    ebx,edx
c001f07f:	83 f3 1f             	xor    ebx,0x1f
c001f082:	75 24                	jne    c001f0a8 <__udivdi3+0x8c>
c001f084:	39 f2                	cmp    edx,esi
c001f086:	72 08                	jb     c001f090 <__udivdi3+0x74>
c001f088:	39 ef                	cmp    edi,ebp
c001f08a:	0f 87 84 00 00 00    	ja     c001f114 <__udivdi3+0xf8>
c001f090:	b8 01 00 00 00       	mov    eax,0x1
c001f095:	eb ac                	jmp    c001f043 <__udivdi3+0x27>
c001f097:	90                   	nop
c001f098:	31 db                	xor    ebx,ebx
c001f09a:	31 c0                	xor    eax,eax
c001f09c:	89 da                	mov    edx,ebx
c001f09e:	83 c4 1c             	add    esp,0x1c
c001f0a1:	5b                   	pop    ebx
c001f0a2:	5e                   	pop    esi
c001f0a3:	5f                   	pop    edi
c001f0a4:	5d                   	pop    ebp
c001f0a5:	c3                   	ret    
c001f0a6:	66 90                	xchg   ax,ax
c001f0a8:	b8 20 00 00 00       	mov    eax,0x20
c001f0ad:	29 d8                	sub    eax,ebx
c001f0af:	88 d9                	mov    cl,bl
c001f0b1:	d3 e2                	shl    edx,cl
c001f0b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f0b7:	89 fa                	mov    edx,edi
c001f0b9:	88 c1                	mov    cl,al
c001f0bb:	d3 ea                	shr    edx,cl
c001f0bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0c1:	09 d1                	or     ecx,edx
c001f0c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f0c7:	88 d9                	mov    cl,bl
c001f0c9:	d3 e7                	shl    edi,cl
c001f0cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0cf:	89 f7                	mov    edi,esi
c001f0d1:	88 c1                	mov    cl,al
c001f0d3:	d3 ef                	shr    edi,cl
c001f0d5:	88 d9                	mov    cl,bl
c001f0d7:	d3 e6                	shl    esi,cl
c001f0d9:	89 ea                	mov    edx,ebp
c001f0db:	88 c1                	mov    cl,al
c001f0dd:	d3 ea                	shr    edx,cl
c001f0df:	09 d6                	or     esi,edx
c001f0e1:	89 f0                	mov    eax,esi
c001f0e3:	89 fa                	mov    edx,edi
c001f0e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f0e9:	89 d7                	mov    edi,edx
c001f0eb:	89 c6                	mov    esi,eax
c001f0ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f0f1:	39 d7                	cmp    edi,edx
c001f0f3:	72 13                	jb     c001f108 <__udivdi3+0xec>
c001f0f5:	74 09                	je     c001f100 <__udivdi3+0xe4>
c001f0f7:	89 f0                	mov    eax,esi
c001f0f9:	31 db                	xor    ebx,ebx
c001f0fb:	e9 43 ff ff ff       	jmp    c001f043 <__udivdi3+0x27>
c001f100:	88 d9                	mov    cl,bl
c001f102:	d3 e5                	shl    ebp,cl
c001f104:	39 c5                	cmp    ebp,eax
c001f106:	73 ef                	jae    c001f0f7 <__udivdi3+0xdb>
c001f108:	8d 46 ff             	lea    eax,[esi-0x1]
c001f10b:	31 db                	xor    ebx,ebx
c001f10d:	e9 31 ff ff ff       	jmp    c001f043 <__udivdi3+0x27>
c001f112:	66 90                	xchg   ax,ax
c001f114:	31 c0                	xor    eax,eax
c001f116:	e9 28 ff ff ff       	jmp    c001f043 <__udivdi3+0x27>
c001f11b:	90                   	nop

c001f11c <__umoddi3>:
c001f11c:	55                   	push   ebp
c001f11d:	57                   	push   edi
c001f11e:	56                   	push   esi
c001f11f:	53                   	push   ebx
c001f120:	83 ec 1c             	sub    esp,0x1c
c001f123:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f127:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f12b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f12f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f133:	89 da                	mov    edx,ebx
c001f135:	85 c0                	test   eax,eax
c001f137:	75 37                	jne    c001f170 <__umoddi3+0x54>
c001f139:	39 df                	cmp    edi,ebx
c001f13b:	76 13                	jbe    c001f150 <__umoddi3+0x34>
c001f13d:	89 f0                	mov    eax,esi
c001f13f:	f7 f7                	div    edi
c001f141:	89 d0                	mov    eax,edx
c001f143:	31 d2                	xor    edx,edx
c001f145:	83 c4 1c             	add    esp,0x1c
c001f148:	5b                   	pop    ebx
c001f149:	5e                   	pop    esi
c001f14a:	5f                   	pop    edi
c001f14b:	5d                   	pop    ebp
c001f14c:	c3                   	ret    
c001f14d:	8d 76 00             	lea    esi,[esi+0x0]
c001f150:	89 fd                	mov    ebp,edi
c001f152:	85 ff                	test   edi,edi
c001f154:	75 0b                	jne    c001f161 <__umoddi3+0x45>
c001f156:	b8 01 00 00 00       	mov    eax,0x1
c001f15b:	31 d2                	xor    edx,edx
c001f15d:	f7 f7                	div    edi
c001f15f:	89 c5                	mov    ebp,eax
c001f161:	89 d8                	mov    eax,ebx
c001f163:	31 d2                	xor    edx,edx
c001f165:	f7 f5                	div    ebp
c001f167:	89 f0                	mov    eax,esi
c001f169:	f7 f5                	div    ebp
c001f16b:	89 d0                	mov    eax,edx
c001f16d:	eb d4                	jmp    c001f143 <__umoddi3+0x27>
c001f16f:	90                   	nop
c001f170:	89 f1                	mov    ecx,esi
c001f172:	39 d8                	cmp    eax,ebx
c001f174:	76 0a                	jbe    c001f180 <__umoddi3+0x64>
c001f176:	89 f0                	mov    eax,esi
c001f178:	83 c4 1c             	add    esp,0x1c
c001f17b:	5b                   	pop    ebx
c001f17c:	5e                   	pop    esi
c001f17d:	5f                   	pop    edi
c001f17e:	5d                   	pop    ebp
c001f17f:	c3                   	ret    
c001f180:	0f bd e8             	bsr    ebp,eax
c001f183:	83 f5 1f             	xor    ebp,0x1f
c001f186:	75 1c                	jne    c001f1a4 <__umoddi3+0x88>
c001f188:	39 d8                	cmp    eax,ebx
c001f18a:	72 04                	jb     c001f190 <__umoddi3+0x74>
c001f18c:	39 f7                	cmp    edi,esi
c001f18e:	77 08                	ja     c001f198 <__umoddi3+0x7c>
c001f190:	89 da                	mov    edx,ebx
c001f192:	29 fe                	sub    esi,edi
c001f194:	19 c2                	sbb    edx,eax
c001f196:	89 f1                	mov    ecx,esi
c001f198:	89 c8                	mov    eax,ecx
c001f19a:	83 c4 1c             	add    esp,0x1c
c001f19d:	5b                   	pop    ebx
c001f19e:	5e                   	pop    esi
c001f19f:	5f                   	pop    edi
c001f1a0:	5d                   	pop    ebp
c001f1a1:	c3                   	ret    
c001f1a2:	66 90                	xchg   ax,ax
c001f1a4:	ba 20 00 00 00       	mov    edx,0x20
c001f1a9:	29 ea                	sub    edx,ebp
c001f1ab:	89 e9                	mov    ecx,ebp
c001f1ad:	d3 e0                	shl    eax,cl
c001f1af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f1b3:	89 f8                	mov    eax,edi
c001f1b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f1b9:	88 d1                	mov    cl,dl
c001f1bb:	d3 e8                	shr    eax,cl
c001f1bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1c1:	09 c1                	or     ecx,eax
c001f1c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1c7:	89 e9                	mov    ecx,ebp
c001f1c9:	d3 e7                	shl    edi,cl
c001f1cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1cf:	89 d8                	mov    eax,ebx
c001f1d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f1d5:	88 d1                	mov    cl,dl
c001f1d7:	d3 e8                	shr    eax,cl
c001f1d9:	89 c7                	mov    edi,eax
c001f1db:	89 e9                	mov    ecx,ebp
c001f1dd:	d3 e3                	shl    ebx,cl
c001f1df:	89 f0                	mov    eax,esi
c001f1e1:	88 d1                	mov    cl,dl
c001f1e3:	d3 e8                	shr    eax,cl
c001f1e5:	09 d8                	or     eax,ebx
c001f1e7:	89 e9                	mov    ecx,ebp
c001f1e9:	d3 e6                	shl    esi,cl
c001f1eb:	89 f3                	mov    ebx,esi
c001f1ed:	89 fa                	mov    edx,edi
c001f1ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f1f3:	89 d1                	mov    ecx,edx
c001f1f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1f9:	89 c6                	mov    esi,eax
c001f1fb:	89 d7                	mov    edi,edx
c001f1fd:	39 d1                	cmp    ecx,edx
c001f1ff:	72 27                	jb     c001f228 <__umoddi3+0x10c>
c001f201:	74 21                	je     c001f224 <__umoddi3+0x108>
c001f203:	89 ca                	mov    edx,ecx
c001f205:	29 f3                	sub    ebx,esi
c001f207:	19 fa                	sbb    edx,edi
c001f209:	89 d0                	mov    eax,edx
c001f20b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f20f:	d3 e0                	shl    eax,cl
c001f211:	89 e9                	mov    ecx,ebp
c001f213:	d3 eb                	shr    ebx,cl
c001f215:	09 d8                	or     eax,ebx
c001f217:	d3 ea                	shr    edx,cl
c001f219:	83 c4 1c             	add    esp,0x1c
c001f21c:	5b                   	pop    ebx
c001f21d:	5e                   	pop    esi
c001f21e:	5f                   	pop    edi
c001f21f:	5d                   	pop    ebp
c001f220:	c3                   	ret    
c001f221:	8d 76 00             	lea    esi,[esi+0x0]
c001f224:	39 c3                	cmp    ebx,eax
c001f226:	73 db                	jae    c001f203 <__umoddi3+0xe7>
c001f228:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f22c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f230:	89 d7                	mov    edi,edx
c001f232:	89 c6                	mov    esi,eax
c001f234:	eb cd                	jmp    c001f203 <__umoddi3+0xe7>
c001f236:	66 90                	xchg   ax,ax
c001f238:	66 90                	xchg   ax,ax
c001f23a:	66 90                	xchg   ax,ax
c001f23c:	66 90                	xchg   ax,ax
c001f23e:	66 90                	xchg   ax,ax

c001f240 <fabs>:
c001f240:	83 ec 0c             	sub    esp,0xc
c001f243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f247:	89 04 24             	mov    DWORD PTR [esp],eax
c001f24a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f24e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f253:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f257:	dd 04 24             	fld    QWORD PTR [esp]
c001f25a:	83 c4 0c             	add    esp,0xc
c001f25d:	c3                   	ret    
c001f25e:	66 90                	xchg   ax,ax

c001f260 <lrint>:
c001f260:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f264:	83 ec 04             	sub    esp,0x4
c001f267:	db 1c 24             	fistp  DWORD PTR [esp]
c001f26a:	58                   	pop    eax
c001f26b:	c3                   	ret    

c001f26c <lrintf>:
c001f26c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f270:	83 ec 04             	sub    esp,0x4
c001f273:	db 1c 24             	fistp  DWORD PTR [esp]
c001f276:	58                   	pop    eax
c001f277:	c3                   	ret    

Disassembly of section .init:

c001f278 <_init>:
c001f278:	55                   	push   ebp
c001f279:	89 e5                	mov    ebp,esp
c001f27b:	e8 98 0e fe ff       	call   c0000118 <frame_dummy>
c001f280:	e8 a3 fa ff ff       	call   c001ed28 <__do_global_ctors_aux>
c001f285:	5d                   	pop    ebp
c001f286:	c3                   	ret    

Disassembly of section .fini:

c001f287 <_fini>:
c001f287:	55                   	push   ebp
c001f288:	89 e5                	mov    ebp,esp
c001f28a:	e8 19 0e fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f28f:	5d                   	pop    ebp
c001f290:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f292 <Computer::~Computer()>:
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	ba a4 0d 02 c0       	mov    edx,0xc0020da4
c001f29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29e:	89 10                	mov    DWORD PTR [eax],edx
c001f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	50                   	push   eax
c001f2a8:	e8 67 11 ff ff       	call   c0010414 <Device::~Device()>
c001f2ad:	83 c4 10             	add    esp,0x10
c001f2b0:	90                   	nop
c001f2b1:	83 c4 0c             	add    esp,0xc
c001f2b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f2b6 <Computer::~Computer()>:
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	83 ec 0c             	sub    esp,0xc
c001f2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c0:	e8 cd ff ff ff       	call   c001f292 <Computer::~Computer()>
c001f2c5:	83 c4 10             	add    esp,0x10
c001f2c8:	83 ec 08             	sub    esp,0x8
c001f2cb:	68 ec 01 00 00       	push   0x1ec
c001f2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2d4:	e8 5a fd fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	83 c4 0c             	add    esp,0xc
c001f2df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f2e0 <idleCommon()>:
c001f2e0:	83 ec 0c             	sub    esp,0xc
c001f2e3:	e8 6f 92 ff ff       	call   c0018557 <lockScheduler()>
c001f2e8:	e8 b3 95 ff ff       	call   c00188a0 <schedule()>
c001f2ed:	83 c4 0c             	add    esp,0xc
c001f2f0:	e9 64 92 ff ff       	jmp    c0018559 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f2f5 <CPU::readCR3()>:
c001f2f5:	83 ec 10             	sub    esp,0x10
c001f2f8:	0f 20 d8             	mov    eax,cr3
c001f2fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f307 <CPU::writeCR3(unsigned long)>:
c001f307:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f30b:	0f 22 d8             	mov    cr3,eax
c001f30e:	90                   	nop
c001f30f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f310 <LinkedList<UnixFile>::~LinkedList()>:
c001f310:	90                   	nop
c001f311:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f312 <LinkedList<UnixFile>::LinkedList()>:
c001f312:	83 ec 0c             	sub    esp,0xc
c001f315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f319:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f323:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f339:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f343:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f355:	83 ec 0c             	sub    esp,0xc
c001f358:	68 9d 10 02 c0       	push   0xc002109d
c001f35d:	e8 f7 fd fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f362:	83 c4 10             	add    esp,0x10
c001f365:	90                   	nop
c001f366:	83 c4 0c             	add    esp,0xc
c001f369:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f36a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f36a:	83 ec 0c             	sub    esp,0xc
c001f36d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f372:	75 10                	jne    c001f384 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f374:	83 ec 0c             	sub    esp,0xc
c001f377:	68 b8 10 02 c0       	push   0xc00210b8
c001f37c:	e8 cd 61 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f381:	83 c4 10             	add    esp,0x10
c001f384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f388:	8b 00                	mov    eax,DWORD PTR [eax]
c001f38a:	85 c0                	test   eax,eax
c001f38c:	74 34                	je     c001f3c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f395:	85 c0                	test   eax,eax
c001f397:	74 29                	je     c001f3c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f3a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f3a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f3af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f3b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3c0:	eb 65                	jmp    c001f427 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3c8:	85 c0                	test   eax,eax
c001f3ca:	75 4b                	jne    c001f417 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f3d3:	85 c0                	test   eax,eax
c001f3d5:	75 40                	jne    c001f417 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f3df:	89 10                	mov    DWORD PTR [eax],edx
c001f3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f3e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f3f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f401:	85 c0                	test   eax,eax
c001f403:	74 22                	je     c001f427 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f405:	83 ec 0c             	sub    esp,0xc
c001f408:	68 da 10 02 c0       	push   0xc00210da
c001f40d:	e8 3c 61 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f412:	83 c4 10             	add    esp,0x10
c001f415:	eb 10                	jmp    c001f427 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f417:	83 ec 0c             	sub    esp,0xc
c001f41a:	68 e4 10 02 c0       	push   0xc00210e4
c001f41f:	e8 2a 61 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f424:	83 c4 10             	add    esp,0x10
c001f427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f42e:	8d 50 01             	lea    edx,[eax+0x1]
c001f431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f435:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f438:	90                   	nop
c001f439:	83 c4 0c             	add    esp,0xc
c001f43c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f43e <LinkedList<UnixFile>::getFirstElement()>:
c001f43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f442:	8b 00                	mov    eax,DWORD PTR [eax]
c001f444:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f446 <LinkedList<UnixFile>::removeFirst()>:
c001f446:	83 ec 0c             	sub    esp,0xc
c001f449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f44d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f44f:	85 c0                	test   eax,eax
c001f451:	75 12                	jne    c001f465 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f453:	83 ec 0c             	sub    esp,0xc
c001f456:	68 f0 10 02 c0       	push   0xc00210f0
c001f45b:	e8 ee 60 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f460:	83 c4 10             	add    esp,0x10
c001f463:	eb 7e                	jmp    c001f4e3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f469:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f46c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f46f:	85 c0                	test   eax,eax
c001f471:	74 10                	je     c001f483 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f473:	83 ec 0c             	sub    esp,0xc
c001f476:	68 3b 11 02 c0       	push   0xc002113b
c001f47b:	e8 ce 60 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f480:	83 c4 10             	add    esp,0x10
c001f483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f487:	8b 00                	mov    eax,DWORD PTR [eax]
c001f489:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f48c:	85 c0                	test   eax,eax
c001f48e:	75 33                	jne    c001f4c3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f494:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4ac:	83 f8 01             	cmp    eax,0x1
c001f4af:	74 21                	je     c001f4d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f4b1:	83 ec 0c             	sub    esp,0xc
c001f4b4:	68 14 11 02 c0       	push   0xc0021114
c001f4b9:	e8 90 60 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f4be:	83 c4 10             	add    esp,0x10
c001f4c1:	eb 0f                	jmp    c001f4d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d0:	89 10                	mov    DWORD PTR [eax],edx
c001f4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4d9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4e3:	83 c4 0c             	add    esp,0xc
c001f4e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f4e8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f4e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f4f0 <DriverlessDevice::~DriverlessDevice()>:
c001f4f0:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c001f4f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f9:	89 10                	mov    DWORD PTR [eax],edx
c001f4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ff:	50                   	push   eax
c001f500:	e8 0f 0f ff ff       	call   c0010414 <Device::~Device()>
c001f505:	83 c4 04             	add    esp,0x4
c001f508:	90                   	nop
c001f509:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f50a <DriverlessDevice::~DriverlessDevice()>:
c001f50a:	83 ec 0c             	sub    esp,0xc
c001f50d:	83 ec 0c             	sub    esp,0xc
c001f510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f514:	e8 d7 ff ff ff       	call   c001f4f0 <DriverlessDevice::~DriverlessDevice()>
c001f519:	83 c4 10             	add    esp,0x10
c001f51c:	83 ec 08             	sub    esp,0x8
c001f51f:	68 58 01 00 00       	push   0x158
c001f524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f528:	e8 06 fb fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	83 c4 0c             	add    esp,0xc
c001f533:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f534 <LinkedList<Device>::addElement(Device*)>:
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f53c:	75 10                	jne    c001f54e <LinkedList<Device>::addElement(Device*)+0x1a>
c001f53e:	83 ec 0c             	sub    esp,0xc
c001f541:	68 b8 10 02 c0       	push   0xc00210b8
c001f546:	e8 03 60 ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f552:	8b 00                	mov    eax,DWORD PTR [eax]
c001f554:	85 c0                	test   eax,eax
c001f556:	74 3a                	je     c001f592 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f55f:	85 c0                	test   eax,eax
c001f561:	74 2f                	je     c001f592 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f56a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f56e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f57c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f583:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f586:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f590:	eb 68                	jmp    c001f5fa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f596:	8b 00                	mov    eax,DWORD PTR [eax]
c001f598:	85 c0                	test   eax,eax
c001f59a:	75 4e                	jne    c001f5ea <LinkedList<Device>::addElement(Device*)+0xb6>
c001f59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5a3:	85 c0                	test   eax,eax
c001f5a5:	75 43                	jne    c001f5ea <LinkedList<Device>::addElement(Device*)+0xb6>
c001f5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5af:	89 10                	mov    DWORD PTR [eax],edx
c001f5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5c3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5d4:	85 c0                	test   eax,eax
c001f5d6:	74 22                	je     c001f5fa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	68 da 10 02 c0       	push   0xc00210da
c001f5e0:	e8 69 5f ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f5e5:	83 c4 10             	add    esp,0x10
c001f5e8:	eb 10                	jmp    c001f5fa <LinkedList<Device>::addElement(Device*)+0xc6>
c001f5ea:	83 ec 0c             	sub    esp,0xc
c001f5ed:	68 e4 10 02 c0       	push   0xc00210e4
c001f5f2:	e8 57 5f ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f5f7:	83 c4 10             	add    esp,0x10
c001f5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f601:	8d 50 01             	lea    edx,[eax+0x1]
c001f604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f608:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f60b:	90                   	nop
c001f60c:	83 c4 0c             	add    esp,0xc
c001f60f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f610 <LinkedList<Device>::LinkedList()>:
c001f610:	83 ec 0c             	sub    esp,0xc
c001f613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f617:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f621:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f637:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f641:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f653:	83 ec 0c             	sub    esp,0xc
c001f656:	68 9d 10 02 c0       	push   0xc002109d
c001f65b:	e8 f9 fa fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	90                   	nop
c001f664:	83 c4 0c             	add    esp,0xc
c001f667:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f668 <CPU::readCR0()>:
c001f668:	83 ec 10             	sub    esp,0x10
c001f66b:	0f 20 c0             	mov    eax,cr0
c001f66e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f676:	83 c4 10             	add    esp,0x10
c001f679:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f67a <CPU::writeCR0(unsigned long)>:
c001f67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f67e:	0f 22 c0             	mov    cr0,eax
c001f681:	90                   	nop
c001f682:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f683 <CPU::readDR0()>:
c001f683:	83 ec 10             	sub    esp,0x10
c001f686:	0f 21 c0             	mov    eax,db0
c001f689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f68d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f691:	83 c4 10             	add    esp,0x10
c001f694:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f695 <CPU::readDR1()>:
c001f695:	83 ec 10             	sub    esp,0x10
c001f698:	0f 21 c8             	mov    eax,db1
c001f69b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f69f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6a3:	83 c4 10             	add    esp,0x10
c001f6a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f6a7 <CPU::readDR2()>:
c001f6a7:	83 ec 10             	sub    esp,0x10
c001f6aa:	0f 21 d0             	mov    eax,db2
c001f6ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b5:	83 c4 10             	add    esp,0x10
c001f6b8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f6b9 <CPU::readDR3()>:
c001f6b9:	83 ec 10             	sub    esp,0x10
c001f6bc:	0f 21 d8             	mov    eax,db3
c001f6bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6c7:	83 c4 10             	add    esp,0x10
c001f6ca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f6cb <CPU::readDR6()>:
c001f6cb:	83 ec 10             	sub    esp,0x10
c001f6ce:	0f 21 f0             	mov    eax,db6
c001f6d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6d9:	83 c4 10             	add    esp,0x10
c001f6dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f6dd <CPU::readDR7()>:
c001f6dd:	83 ec 10             	sub    esp,0x10
c001f6e0:	0f 21 f8             	mov    eax,db7
c001f6e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6eb:	83 c4 10             	add    esp,0x10
c001f6ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f6f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f6f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6fe:	85 c0                	test   eax,eax
c001f700:	75 0e                	jne    c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f706:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f709:	85 c0                	test   eax,eax
c001f70b:	75 03                	jne    c001f710 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f70d:	b0 01                	mov    al,0x1
c001f70f:	c3                   	ret    
c001f710:	b0 00                	mov    al,0x0
c001f712:	90                   	nop
c001f713:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f71d:	85 c0                	test   eax,eax
c001f71f:	75 15                	jne    c001f736 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f721:	83 ec 0c             	sub    esp,0xc
c001f724:	68 f0 10 02 c0       	push   0xc00210f0
c001f729:	e8 20 5e ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f72e:	83 c4 10             	add    esp,0x10
c001f731:	e9 88 00 00 00       	jmp    c001f7be <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f73d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f740:	85 c0                	test   eax,eax
c001f742:	0f 95 c0             	setne  al
c001f745:	84 c0                	test   al,al
c001f747:	74 10                	je     c001f759 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f749:	83 ec 0c             	sub    esp,0xc
c001f74c:	68 3b 11 02 c0       	push   0xc002113b
c001f751:	e8 f8 5d ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f756:	83 c4 10             	add    esp,0x10
c001f759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f75f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f762:	85 c0                	test   eax,eax
c001f764:	0f 94 c0             	sete   al
c001f767:	84 c0                	test   al,al
c001f769:	74 33                	je     c001f79e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f787:	83 f8 01             	cmp    eax,0x1
c001f78a:	74 21                	je     c001f7ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f78c:	83 ec 0c             	sub    esp,0xc
c001f78f:	68 14 11 02 c0       	push   0xc0021114
c001f794:	e8 b5 5d ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f799:	83 c4 10             	add    esp,0x10
c001f79c:	eb 0f                	jmp    c001f7ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ab:	89 10                	mov    DWORD PTR [eax],edx
c001f7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7b4:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7be:	83 c4 0c             	add    esp,0xc
c001f7c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7c2:	83 ec 0c             	sub    esp,0xc
c001f7c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7ca:	75 10                	jne    c001f7dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f7cc:	83 ec 0c             	sub    esp,0xc
c001f7cf:	68 b8 10 02 c0       	push   0xc00210b8
c001f7d4:	e8 75 5d ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f7d9:	83 c4 10             	add    esp,0x10
c001f7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e2:	85 c0                	test   eax,eax
c001f7e4:	74 34                	je     c001f81a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7ed:	85 c0                	test   eax,eax
c001f7ef:	74 29                	je     c001f81a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f807:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f811:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f818:	eb 65                	jmp    c001f87f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	8b 00                	mov    eax,DWORD PTR [eax]
c001f820:	85 c0                	test   eax,eax
c001f822:	75 4b                	jne    c001f86f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f828:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f82b:	85 c0                	test   eax,eax
c001f82d:	75 40                	jne    c001f86f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f833:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f837:	89 10                	mov    DWORD PTR [eax],edx
c001f839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f841:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f84b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f856:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f859:	85 c0                	test   eax,eax
c001f85b:	74 22                	je     c001f87f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f85d:	83 ec 0c             	sub    esp,0xc
c001f860:	68 da 10 02 c0       	push   0xc00210da
c001f865:	e8 e4 5c ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f86a:	83 c4 10             	add    esp,0x10
c001f86d:	eb 10                	jmp    c001f87f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f86f:	83 ec 0c             	sub    esp,0xc
c001f872:	68 e4 10 02 c0       	push   0xc00210e4
c001f877:	e8 d2 5c ff ff       	call   c001554e <Krnl::panic(char const*)>
c001f87c:	83 c4 10             	add    esp,0x10
c001f87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f883:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f886:	8d 50 01             	lea    edx,[eax+0x1]
c001f889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f890:	90                   	nop
c001f891:	83 c4 0c             	add    esp,0xc
c001f894:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f896 <ACPI::~ACPI()>:
c001f896:	83 ec 0c             	sub    esp,0xc
c001f899:	ba 44 1f 02 c0       	mov    edx,0xc0021f44
c001f89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a2:	89 10                	mov    DWORD PTR [eax],edx
c001f8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	50                   	push   eax
c001f8ac:	e8 63 0b ff ff       	call   c0010414 <Device::~Device()>
c001f8b1:	83 c4 10             	add    esp,0x10
c001f8b4:	90                   	nop
c001f8b5:	83 c4 0c             	add    esp,0xc
c001f8b8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8ba <ACPI::~ACPI()>:
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	83 ec 0c             	sub    esp,0xc
c001f8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c4:	e8 cd ff ff ff       	call   c001f896 <ACPI::~ACPI()>
c001f8c9:	83 c4 10             	add    esp,0x10
c001f8cc:	83 ec 08             	sub    esp,0x8
c001f8cf:	68 68 22 00 00       	push   0x2268
c001f8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d8:	e8 56 f7 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f8dd:	83 c4 10             	add    esp,0x10
c001f8e0:	83 c4 0c             	add    esp,0xc
c001f8e3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f8e4 <CPU::~CPU()>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	ba 34 23 02 c0       	mov    edx,0xc0022334
c001f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f0:	89 10                	mov    DWORD PTR [eax],edx
c001f8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f6:	83 ec 0c             	sub    esp,0xc
c001f8f9:	50                   	push   eax
c001f8fa:	e8 15 0b ff ff       	call   c0010414 <Device::~Device()>
c001f8ff:	83 c4 10             	add    esp,0x10
c001f902:	90                   	nop
c001f903:	83 c4 0c             	add    esp,0xc
c001f906:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f908 <CPU::~CPU()>:
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	83 ec 0c             	sub    esp,0xc
c001f90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f912:	e8 cd ff ff ff       	call   c001f8e4 <CPU::~CPU()>
c001f917:	83 c4 10             	add    esp,0x10
c001f91a:	83 ec 08             	sub    esp,0x8
c001f91d:	68 98 11 00 00       	push   0x1198
c001f922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f926:	e8 08 f7 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	83 c4 0c             	add    esp,0xc
c001f931:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f932 <CPU::readCR4()>:
c001f932:	83 ec 10             	sub    esp,0x10
c001f935:	0f 20 e0             	mov    eax,cr4
c001f938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f93c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f944 <CPU::writeDR7(unsigned long)>:
c001f944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f948:	0f 23 f8             	mov    db7,eax
c001f94b:	90                   	nop
c001f94c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f94d <CPU::writeCR4(unsigned long)>:
c001f94d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f951:	0f 22 e0             	mov    cr4,eax
c001f954:	90                   	nop
c001f955:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f956 <CPU::readCR2()>:
c001f956:	83 ec 10             	sub    esp,0x10
c001f959:	0f 20 d0             	mov    eax,cr2
c001f95c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f960:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f964:	83 c4 10             	add    esp,0x10
c001f967:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f968 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f968:	90                   	nop
c001f969:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f96a <ThreadControlBlock::ThreadControlBlock()>:
c001f96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f979:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f98b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f9a6:	90                   	nop
c001f9a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f9a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	68 9d 10 02 c0       	push   0xc002109d
c001f9f3:	e8 61 f7 fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f9f8:	83 c4 10             	add    esp,0x10
c001f9fb:	90                   	nop
c001f9fc:	83 c4 0c             	add    esp,0xc
c001f9ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa07:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fa08 <PCI::~PCI()>:
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	ba 0c 30 02 c0       	mov    edx,0xc002300c
c001fa10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa14:	89 10                	mov    DWORD PTR [eax],edx
c001fa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1a:	83 ec 0c             	sub    esp,0xc
c001fa1d:	50                   	push   eax
c001fa1e:	e8 fb 03 ff ff       	call   c000fe1e <Bus::~Bus()>
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	90                   	nop
c001fa27:	83 c4 0c             	add    esp,0xc
c001fa2a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fa2c <PCI::~PCI()>:
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	83 ec 0c             	sub    esp,0xc
c001fa32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa36:	e8 cd ff ff ff       	call   c001fa08 <PCI::~PCI()>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	83 ec 08             	sub    esp,0x8
c001fa41:	68 58 01 00 00       	push   0x158
c001fa46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa4a:	e8 e4 f5 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fa4f:	83 c4 10             	add    esp,0x10
c001fa52:	83 c4 0c             	add    esp,0xc
c001fa55:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fa56 <IDE::~IDE()>:
c001fa56:	83 ec 0c             	sub    esp,0xc
c001fa59:	ba 70 32 02 c0       	mov    edx,0xc0023270
c001fa5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa62:	89 10                	mov    DWORD PTR [eax],edx
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	50                   	push   eax
c001fa6c:	e8 b5 0e ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c001fa71:	83 c4 10             	add    esp,0x10
c001fa74:	90                   	nop
c001fa75:	83 c4 0c             	add    esp,0xc
c001fa78:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fa7a <IDE::~IDE()>:
c001fa7a:	83 ec 0c             	sub    esp,0xc
c001fa7d:	83 ec 0c             	sub    esp,0xc
c001fa80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa84:	e8 cd ff ff ff       	call   c001fa56 <IDE::~IDE()>
c001fa89:	83 c4 10             	add    esp,0x10
c001fa8c:	83 ec 08             	sub    esp,0x8
c001fa8f:	68 70 02 00 00       	push   0x270
c001fa94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa98:	e8 96 f5 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fa9d:	83 c4 10             	add    esp,0x10
c001faa0:	83 c4 0c             	add    esp,0xc
c001faa3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001faa4 <ATA::~ATA()>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	ba c0 32 02 c0       	mov    edx,0xc00232c0
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	89 10                	mov    DWORD PTR [eax],edx
c001fab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab6:	83 ec 0c             	sub    esp,0xc
c001fab9:	50                   	push   eax
c001faba:	e8 45 0f ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	90                   	nop
c001fac3:	83 c4 0c             	add    esp,0xc
c001fac6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fac8 <ATA::~ATA()>:
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fad2:	e8 cd ff ff ff       	call   c001faa4 <ATA::~ATA()>
c001fad7:	83 c4 10             	add    esp,0x10
c001fada:	83 ec 08             	sub    esp,0x8
c001fadd:	68 7c 01 00 00       	push   0x17c
c001fae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fae6:	e8 48 f5 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001faeb:	83 c4 10             	add    esp,0x10
c001faee:	83 c4 0c             	add    esp,0xc
c001faf1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001faf2 <ATAPI::~ATAPI()>:
c001faf2:	83 ec 0c             	sub    esp,0xc
c001faf5:	ba 2c 33 02 c0       	mov    edx,0xc002332c
c001fafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafe:	89 10                	mov    DWORD PTR [eax],edx
c001fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	50                   	push   eax
c001fb08:	e8 f7 0e ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001fb0d:	83 c4 10             	add    esp,0x10
c001fb10:	90                   	nop
c001fb11:	83 c4 0c             	add    esp,0xc
c001fb14:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fb16 <ATAPI::~ATAPI()>:
c001fb16:	83 ec 0c             	sub    esp,0xc
c001fb19:	83 ec 0c             	sub    esp,0xc
c001fb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb20:	e8 cd ff ff ff       	call   c001faf2 <ATAPI::~ATAPI()>
c001fb25:	83 c4 10             	add    esp,0x10
c001fb28:	83 ec 08             	sub    esp,0x8
c001fb2b:	68 80 01 00 00       	push   0x180
c001fb30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb34:	e8 fa f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fb39:	83 c4 10             	add    esp,0x10
c001fb3c:	83 c4 0c             	add    esp,0xc
c001fb3f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fb40 <AVX::~AVX()>:
c001fb40:	83 ec 0c             	sub    esp,0xc
c001fb43:	ba 68 33 02 c0       	mov    edx,0xc0023368
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	89 10                	mov    DWORD PTR [eax],edx
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	83 ec 0c             	sub    esp,0xc
c001fb55:	50                   	push   eax
c001fb56:	e8 2d 0f ff ff       	call   c0010a88 <FPU::~FPU()>
c001fb5b:	83 c4 10             	add    esp,0x10
c001fb5e:	90                   	nop
c001fb5f:	83 c4 0c             	add    esp,0xc
c001fb62:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001fb64 <AVX::~AVX()>:
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	83 ec 0c             	sub    esp,0xc
c001fb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb6e:	e8 cd ff ff ff       	call   c001fb40 <AVX::~AVX()>
c001fb73:	83 c4 10             	add    esp,0x10
c001fb76:	83 ec 08             	sub    esp,0x8
c001fb79:	68 58 01 00 00       	push   0x158
c001fb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb82:	e8 ac f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fb87:	83 c4 10             	add    esp,0x10
c001fb8a:	83 c4 0c             	add    esp,0xc
c001fb8d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fb8e <MMX::~MMX()>:
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	ba a8 33 02 c0       	mov    edx,0xc00233a8
c001fb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9a:	89 10                	mov    DWORD PTR [eax],edx
c001fb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	50                   	push   eax
c001fba4:	e8 df 0e ff ff       	call   c0010a88 <FPU::~FPU()>
c001fba9:	83 c4 10             	add    esp,0x10
c001fbac:	90                   	nop
c001fbad:	83 c4 0c             	add    esp,0xc
c001fbb0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001fbb2 <MMX::~MMX()>:
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	83 ec 0c             	sub    esp,0xc
c001fbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbbc:	e8 cd ff ff ff       	call   c001fb8e <MMX::~MMX()>
c001fbc1:	83 c4 10             	add    esp,0x10
c001fbc4:	83 ec 08             	sub    esp,0x8
c001fbc7:	68 58 01 00 00       	push   0x158
c001fbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd0:	e8 5e f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fbd5:	83 c4 10             	add    esp,0x10
c001fbd8:	83 c4 0c             	add    esp,0xc
c001fbdb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001fbdc <SSE::~SSE()>:
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c001fbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe8:	89 10                	mov    DWORD PTR [eax],edx
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	83 ec 0c             	sub    esp,0xc
c001fbf1:	50                   	push   eax
c001fbf2:	e8 91 0e ff ff       	call   c0010a88 <FPU::~FPU()>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	90                   	nop
c001fbfb:	83 c4 0c             	add    esp,0xc
c001fbfe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fc00 <SSE::~SSE()>:
c001fc00:	83 ec 0c             	sub    esp,0xc
c001fc03:	83 ec 0c             	sub    esp,0xc
c001fc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc0a:	e8 cd ff ff ff       	call   c001fbdc <SSE::~SSE()>
c001fc0f:	83 c4 10             	add    esp,0x10
c001fc12:	83 ec 08             	sub    esp,0x8
c001fc15:	68 58 01 00 00       	push   0x158
c001fc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc1e:	e8 10 f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fc23:	83 c4 10             	add    esp,0x10
c001fc26:	83 c4 0c             	add    esp,0xc
c001fc29:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001fc2a <x87::~x87()>:
c001fc2a:	83 ec 0c             	sub    esp,0xc
c001fc2d:	ba 28 34 02 c0       	mov    edx,0xc0023428
c001fc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc36:	89 10                	mov    DWORD PTR [eax],edx
c001fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	50                   	push   eax
c001fc40:	e8 43 0e ff ff       	call   c0010a88 <FPU::~FPU()>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	90                   	nop
c001fc49:	83 c4 0c             	add    esp,0xc
c001fc4c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fc4e <x87::~x87()>:
c001fc4e:	83 ec 0c             	sub    esp,0xc
c001fc51:	83 ec 0c             	sub    esp,0xc
c001fc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc58:	e8 cd ff ff ff       	call   c001fc2a <x87::~x87()>
c001fc5d:	83 c4 10             	add    esp,0x10
c001fc60:	83 ec 08             	sub    esp,0x8
c001fc63:	68 58 01 00 00       	push   0x158
c001fc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc6c:	e8 c2 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fc71:	83 c4 10             	add    esp,0x10
c001fc74:	83 c4 0c             	add    esp,0xc
c001fc77:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fc78 <IOAPIC::~IOAPIC()>:
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	ba 80 35 02 c0       	mov    edx,0xc0023580
c001fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc84:	89 10                	mov    DWORD PTR [eax],edx
c001fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8a:	83 ec 0c             	sub    esp,0xc
c001fc8d:	50                   	push   eax
c001fc8e:	e8 81 07 ff ff       	call   c0010414 <Device::~Device()>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	90                   	nop
c001fc97:	83 c4 0c             	add    esp,0xc
c001fc9a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fc9c <IOAPIC::~IOAPIC()>:
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	83 ec 0c             	sub    esp,0xc
c001fca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca6:	e8 cd ff ff ff       	call   c001fc78 <IOAPIC::~IOAPIC()>
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	83 ec 08             	sub    esp,0x8
c001fcb1:	68 68 01 00 00       	push   0x168
c001fcb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcba:	e8 74 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fcbf:	83 c4 10             	add    esp,0x10
c001fcc2:	83 c4 0c             	add    esp,0xc
c001fcc5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fcc6 <APIC::~APIC()>:
c001fcc6:	83 ec 0c             	sub    esp,0xc
c001fcc9:	ba 38 35 02 c0       	mov    edx,0xc0023538
c001fcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd2:	89 10                	mov    DWORD PTR [eax],edx
c001fcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	50                   	push   eax
c001fcdc:	e8 6f 12 ff ff       	call   c0010f50 <InterruptController::~InterruptController()>
c001fce1:	83 c4 10             	add    esp,0x10
c001fce4:	90                   	nop
c001fce5:	83 c4 0c             	add    esp,0xc
c001fce8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001fcea <APIC::~APIC()>:
c001fcea:	83 ec 0c             	sub    esp,0xc
c001fced:	83 ec 0c             	sub    esp,0xc
c001fcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf4:	e8 cd ff ff ff       	call   c001fcc6 <APIC::~APIC()>
c001fcf9:	83 c4 10             	add    esp,0x10
c001fcfc:	83 ec 08             	sub    esp,0x8
c001fcff:	68 58 21 00 00       	push   0x2158
c001fd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd08:	e8 26 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fd0d:	83 c4 10             	add    esp,0x10
c001fd10:	83 c4 0c             	add    esp,0xc
c001fd13:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fd14 <PIC::~PIC()>:
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	ba d0 35 02 c0       	mov    edx,0xc00235d0
c001fd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd20:	89 10                	mov    DWORD PTR [eax],edx
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	50                   	push   eax
c001fd2a:	e8 21 12 ff ff       	call   c0010f50 <InterruptController::~InterruptController()>
c001fd2f:	83 c4 10             	add    esp,0x10
c001fd32:	90                   	nop
c001fd33:	83 c4 0c             	add    esp,0xc
c001fd36:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001fd38 <PIC::~PIC()>:
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	83 ec 0c             	sub    esp,0xc
c001fd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd42:	e8 cd ff ff ff       	call   c001fd14 <PIC::~PIC()>
c001fd47:	83 c4 10             	add    esp,0x10
c001fd4a:	83 ec 08             	sub    esp,0x8
c001fd4d:	68 58 21 00 00       	push   0x2158
c001fd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd56:	e8 d8 f2 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fd5b:	83 c4 10             	add    esp,0x10
c001fd5e:	83 c4 0c             	add    esp,0xc
c001fd61:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd62 <APICTimer::~APICTimer()>:
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	ba 24 36 02 c0       	mov    edx,0xc0023624
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	89 10                	mov    DWORD PTR [eax],edx
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	50                   	push   eax
c001fd78:	e8 c9 2a ff ff       	call   c0012846 <Timer::~Timer()>
c001fd7d:	83 c4 10             	add    esp,0x10
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd86 <APICTimer::~APICTimer()>:
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	83 ec 0c             	sub    esp,0xc
c001fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd90:	e8 cd ff ff ff       	call   c001fd62 <APICTimer::~APICTimer()>
c001fd95:	83 c4 10             	add    esp,0x10
c001fd98:	83 ec 08             	sub    esp,0x8
c001fd9b:	68 60 01 00 00       	push   0x160
c001fda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda4:	e8 8a f2 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	83 c4 0c             	add    esp,0xc
c001fdaf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fdb0 <PIT::~PIT()>:
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	ba 74 36 02 c0       	mov    edx,0xc0023674
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	89 10                	mov    DWORD PTR [eax],edx
c001fdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	50                   	push   eax
c001fdc6:	e8 7b 2a ff ff       	call   c0012846 <Timer::~Timer()>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	90                   	nop
c001fdcf:	83 c4 0c             	add    esp,0xc
c001fdd2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdd4 <PIT::~PIT()>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	83 ec 0c             	sub    esp,0xc
c001fdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdde:	e8 cd ff ff ff       	call   c001fdb0 <PIT::~PIT()>
c001fde3:	83 c4 10             	add    esp,0x10
c001fde6:	83 ec 08             	sub    esp,0x8
c001fde9:	68 5c 01 00 00       	push   0x15c
c001fdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf2:	e8 3c f2 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	83 c4 0c             	add    esp,0xc
c001fdfd:	c3                   	ret    
