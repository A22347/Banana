
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 cc c2 00 00       	call   c000c2ec <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 f7 01 00       	call   c001f748 <_init>
c0000025:	c3                   	ret    
c0000026:	bb d2 02 02 c0       	mov    ebx,0xc00202d2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb dc 02 02 c0    	cmp    ebx,0xc00202dc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 8c 41 02 c0       	mov    eax,0xc002418c
c0000049:	3d 8c 41 02 c0       	cmp    eax,0xc002418c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 8c 41 02 c0       	push   0xc002418c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 8c 41 02 c0       	mov    eax,0xc002418c
c0000075:	2d 8c 41 02 c0       	sub    eax,0xc002418c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 8c 41 02 c0       	push   0xc002418c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 2c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002432c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e4 02 02 c0       	mov    ebx,0xc00202e4
c00000bb:	81 eb e0 02 02 c0    	sub    ebx,0xc00202e0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e0 02 02 c0       	mov    esi,0xc00202e0
c00000ca:	a1 30 43 02 c0       	mov    eax,ds:0xc0024330
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 30 43 02 c0       	mov    ds:0xc0024330,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 30 43 02 c0       	mov    eax,ds:0xc0024330
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 8c 41 02 c0       	push   0xc002418c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 2c 43 02 c0 01 	mov    BYTE PTR ds:0xc002432c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 34 43 02 c0       	push   0xc0024334
c000012c:	68 8c 41 02 c0       	push   0xc002418c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0000160:	8b 70 48             	mov    esi,DWORD PTR [eax+0x48]
c0000163:	89 35 07 02 00 c0    	mov    DWORD PTR ds:0xc0000207,esi
c0000169:	89 25 03 02 00 c0    	mov    DWORD PTR ds:0xc0000203,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf de 01 00 c0       	mov    edi,0xc00001de
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf de 01 00 c0       	mov    edi,0xc00001de
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf ee 01 00 c0       	mov    edi,0xc00001ee
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	c6 82 de 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe22],0x90
c000019c:	80 aa df 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe21],0xc0
c00001a3:	80 82 e0 01 00 c0 86 	add    BYTE PTR [edx-0x3ffffe20],0x86
c00001aa:	c6 82 ee 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe12],0x90
c00001b1:	80 aa ef 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe11],0xc0
c00001b8:	80 82 f0 01 00 c0 02 	add    BYTE PTR [edx-0x3ffffe10],0x2
c00001bf:	8b 60 10             	mov    esp,DWORD PTR [eax+0x10]
c00001c2:	5f                   	pop    edi
c00001c3:	5e                   	pop    esi
c00001c4:	5d                   	pop    ebp
c00001c5:	5b                   	pop    ebx
c00001c6:	5b                   	pop    ebx
c00001c7:	5a                   	pop    edx
c00001c8:	59                   	pop    ecx
c00001c9:	58                   	pop    eax
c00001ca:	8b 25 07 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000207
c00001d0:	e9 09 00 00 00       	jmp    c00001de <voodooXADD.helper>

c00001d5 <voodooXADD.finish>:
c00001d5:	8b 25 03 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000203
c00001db:	61                   	popa   
c00001dc:	c9                   	leave  
c00001dd:	c3                   	ret    

c00001de <voodooXADD.helper>:
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	e9 d2 ff ff ff       	jmp    c00001d5 <voodooXADD.finish>

c0000203 <voodooXADD.oldStack>:
c0000203:	00 00                	add    BYTE PTR [eax],al
	...

c0000207 <voodooXADD.newStack>:
c0000207:	00 00                	add    BYTE PTR [eax],al
	...

c000020b <doTPAUSE>:
c000020b:	fb                   	sti    
c000020c:	31 c0                	xor    eax,eax
c000020e:	31 d2                	xor    edx,edx
c0000210:	66 0f ae f0          	tpause eax
c0000214:	c3                   	ret    

c0000215 <hasLegacyFPU>:
c0000215:	0f 20 c2             	mov    edx,cr0
c0000218:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c000021e:	0f 22 c2             	mov    cr0,edx
c0000221:	db e3                	fninit 
c0000223:	dd 3d 38 02 00 c0    	fnstsw WORD PTR ds:0xc0000238
c0000229:	31 c0                	xor    eax,eax
c000022b:	66 81 3d 38 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000238,0x0
c0000234:	75 01                	jne    c0000237 <hasLegacyFPU.nofpu>

c0000236 <hasLegacyFPU.hasfpu>:
c0000236:	40                   	inc    eax

c0000237 <hasLegacyFPU.nofpu>:
c0000237:	c3                   	ret    

c0000238 <testword>:
c0000238:	aa                   	stos   BYTE PTR es:[edi],al
c0000239:	55                   	push   ebp

c000023a <is486>:
c000023a:	0f 09                	wbinvd 
c000023c:	31 c0                	xor    eax,eax
c000023e:	40                   	inc    eax
c000023f:	c3                   	ret    
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	31 c0                	xor    eax,eax
c000026f:	c3                   	ret    

c0000270 <goToVM86>:
c0000270:	fa                   	cli    
c0000271:	55                   	push   ebp
c0000272:	89 e5                	mov    ebp,esp
c0000274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000277:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000027a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000027d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000280:	25 ff ff 00 00       	and    eax,0xffff
c0000285:	81 e3 ff ff 00 00    	and    ebx,0xffff
c000028b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000291:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000297:	52                   	push   edx
c0000298:	51                   	push   ecx
c0000299:	68 02 02 02 00       	push   0x20202
c000029e:	53                   	push   ebx
c000029f:	50                   	push   eax
c00002a0:	cf                   	iret   

c00002a1 <goToUsermode>:
c00002a1:	fa                   	cli    
c00002a2:	55                   	push   ebp
c00002a3:	89 e5                	mov    ebp,esp
c00002a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002a8:	66 b8 23 00          	mov    ax,0x23
c00002ac:	66 8e d8             	mov    ds,ax
c00002af:	66 8e c0             	mov    es,ax
c00002b2:	66 8e e0             	mov    fs,ax
c00002b5:	66 8e e8             	mov    gs,ax
c00002b8:	89 e0                	mov    eax,esp
c00002ba:	68 23 00 00 00       	push   0x23
c00002bf:	50                   	push   eax
c00002c0:	68 02 02 00 00       	push   0x202
c00002c5:	68 1b 00 00 00       	push   0x1b
c00002ca:	53                   	push   ebx
c00002cb:	cf                   	iret   

c00002cc <switchToThreadASMFirstTime>:
c00002cc:	9c                   	pushf  
c00002cd:	fa                   	cli    
c00002ce:	50                   	push   eax
c00002cf:	53                   	push   ebx
c00002d0:	51                   	push   ecx
c00002d1:	52                   	push   edx
c00002d2:	56                   	push   esi
c00002d3:	57                   	push   edi
c00002d4:	55                   	push   ebp
c00002d5:	e9 11 00 00 00       	jmp    c00002eb <commonThreadSwitch>

c00002da <switchToThreadASM>:
c00002da:	9c                   	pushf  
c00002db:	50                   	push   eax
c00002dc:	53                   	push   ebx
c00002dd:	51                   	push   ecx
c00002de:	52                   	push   edx
c00002df:	56                   	push   esi
c00002e0:	57                   	push   edi
c00002e1:	55                   	push   ebp
c00002e2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002e8:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002eb <commonThreadSwitch>:
c00002eb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ef:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00002f7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002fa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002fd:	0f 20 d9             	mov    ecx,cr3
c0000300:	39 c8                	cmp    eax,ecx
c0000302:	74 03                	je     c0000307 <commonThreadSwitch.doneVAS>
c0000304:	0f 22 d8             	mov    cr3,eax

c0000307 <commonThreadSwitch.doneVAS>:
c0000307:	85 d2                	test   edx,edx
c0000309:	74 4e                	je     c0000359 <commonThreadSwitch.notFirstTime>
c000030b:	fa                   	cli    
c000030c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000030f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000314:	60                   	pusha  
c0000315:	e8 88 ec 00 00       	call   c000efa2 <mapVASFirstTime>
c000031a:	61                   	popa   
c000031b:	89 c4                	mov    esp,eax
c000031d:	56                   	push   esi
c000031e:	52                   	push   edx
c000031f:	e8 18 83 01 00       	call   c001863c <changeTSS>
c0000324:	5a                   	pop    edx
c0000325:	5e                   	pop    esi
c0000326:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000032d:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000333:	74 39                	je     c000036e <commonThreadSwitch.cameOffAFork>
c0000335:	5d                   	pop    ebp
c0000336:	5f                   	pop    edi
c0000337:	5e                   	pop    esi
c0000338:	59                   	pop    ecx
c0000339:	59                   	pop    ecx
c000033a:	5b                   	pop    ebx
c000033b:	58                   	pop    eax
c000033c:	81 c4 04 00 00 00    	add    esp,0x4
c0000342:	6a 02                	push   0x2
c0000344:	9d                   	popf   
c0000345:	52                   	push   edx
c0000346:	e8 1e 87 01 00       	call   c0018a69 <taskStartupFunction>
c000034b:	5a                   	pop    edx
c000034c:	50                   	push   eax
c000034d:	ff d2                	call   edx
c000034f:	e8 d3 8c 01 00       	call   c0019027 <taskReturned>
c0000354:	e9 fb ff ff ff       	jmp    c0000354 <commonThreadSwitch.doneVAS+0x4d>

c0000359 <commonThreadSwitch.notFirstTime>:
c0000359:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000035c:	56                   	push   esi
c000035d:	52                   	push   edx
c000035e:	e8 d9 82 01 00       	call   c001863c <changeTSS>
c0000363:	5a                   	pop    edx
c0000364:	5e                   	pop    esi
c0000365:	5d                   	pop    ebp
c0000366:	5f                   	pop    edi
c0000367:	5e                   	pop    esi
c0000368:	5a                   	pop    edx
c0000369:	59                   	pop    ecx
c000036a:	5b                   	pop    ebx
c000036b:	58                   	pop    eax
c000036c:	9d                   	popf   
c000036d:	c3                   	ret    

c000036e <commonThreadSwitch.cameOffAFork>:
c000036e:	31 c0                	xor    eax,eax
c0000370:	31 d2                	xor    edx,edx
c0000372:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000375:	e9 a2 02 00 00       	jmp    c000061c <offAForkJumpThingy>

c000037a <detectCPUID>:
c000037a:	9c                   	pushf  
c000037b:	9c                   	pushf  
c000037c:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000383:	9d                   	popf   
c0000384:	9c                   	pushf  
c0000385:	58                   	pop    eax
c0000386:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000389:	9d                   	popf   
c000038a:	25 00 00 20 00       	and    eax,0x200000
c000038f:	c3                   	ret    

c0000390 <asmQuickAcquireLock>:
c0000390:	55                   	push   ebp
c0000391:	89 e5                	mov    ebp,esp
c0000393:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000396 <asmQuickAcquireLock.retry>:
c0000396:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000039b:	72 02                	jb     c000039f <asmQuickAcquireLock.spin_with_pause>
c000039d:	fa                   	cli    
c000039e:	c3                   	ret    

c000039f <asmQuickAcquireLock.spin_with_pause>:
c000039f:	f3 90                	pause  
c00003a1:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003a7:	75 f6                	jne    c000039f <asmQuickAcquireLock.spin_with_pause>
c00003a9:	e9 e8 ff ff ff       	jmp    c0000396 <asmQuickAcquireLock.retry>

c00003ae <asmQuickReleaseLock>:
c00003ae:	55                   	push   ebp
c00003af:	89 e5                	mov    ebp,esp
c00003b1:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003b8:	5d                   	pop    ebp
c00003b9:	c3                   	ret    

c00003ba <asmAcquireLock>:
c00003ba:	55                   	push   ebp
c00003bb:	89 e5                	mov    ebp,esp
c00003bd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003c0 <asmAcquireLock.retry>:
c00003c0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c5:	72 05                	jb     c00003cc <asmAcquireLock.spin_with_pause>
c00003c7:	9c                   	pushf  
c00003c8:	58                   	pop    eax
c00003c9:	fa                   	cli    
c00003ca:	5d                   	pop    ebp
c00003cb:	c3                   	ret    

c00003cc <asmAcquireLock.spin_with_pause>:
c00003cc:	f3 90                	pause  
c00003ce:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d4:	75 f6                	jne    c00003cc <asmAcquireLock.spin_with_pause>
c00003d6:	e9 e5 ff ff ff       	jmp    c00003c0 <asmAcquireLock.retry>

c00003db <asmReleaseLock>:
c00003db:	55                   	push   ebp
c00003dc:	89 e5                	mov    ebp,esp
c00003de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003ea:	52                   	push   edx
c00003eb:	9d                   	popf   
c00003ec:	5d                   	pop    ebp
c00003ed:	c3                   	ret    

c00003ee <loadGDT>:
c00003ee:	0f 01 15 70 47 02 c0 	lgdtd  ds:0xc0024770
c00003f5:	66 b8 10 00          	mov    ax,0x10
c00003f9:	66 8e d8             	mov    ds,ax
c00003fc:	66 8e c0             	mov    es,ax
c00003ff:	66 8e e0             	mov    fs,ax
c0000402:	66 8e e8             	mov    gs,ax
c0000405:	66 8e d0             	mov    ss,ax
c0000408:	e9 00 00 00 00       	jmp    c000040d <flush2>

c000040d <flush2>:
c000040d:	c3                   	ret    

c000040e <isr0>:
c000040e:	fa                   	cli    
c000040f:	68 00 00 00 00       	push   0x0
c0000414:	68 00 00 00 00       	push   0x0
c0000419:	e9 a2 01 00 00       	jmp    c00005c0 <int_common_stub>

c000041e <isr1>:
c000041e:	fa                   	cli    
c000041f:	6a 00                	push   0x0
c0000421:	6a 01                	push   0x1
c0000423:	e9 98 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000428 <isr2>:
c0000428:	fa                   	cli    
c0000429:	6a 00                	push   0x0
c000042b:	6a 02                	push   0x2
c000042d:	e9 8e 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000432 <isr3>:
c0000432:	fa                   	cli    
c0000433:	6a 00                	push   0x0
c0000435:	6a 03                	push   0x3
c0000437:	e9 84 01 00 00       	jmp    c00005c0 <int_common_stub>

c000043c <isr4>:
c000043c:	fa                   	cli    
c000043d:	6a 00                	push   0x0
c000043f:	6a 04                	push   0x4
c0000441:	e9 7a 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000446 <isr5>:
c0000446:	fa                   	cli    
c0000447:	6a 00                	push   0x0
c0000449:	6a 05                	push   0x5
c000044b:	e9 70 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000450 <isr6>:
c0000450:	fa                   	cli    
c0000451:	6a 00                	push   0x0
c0000453:	6a 06                	push   0x6
c0000455:	e9 66 01 00 00       	jmp    c00005c0 <int_common_stub>

c000045a <isr7>:
c000045a:	fa                   	cli    
c000045b:	6a 00                	push   0x0
c000045d:	6a 07                	push   0x7
c000045f:	e9 5c 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000464 <isr8>:
c0000464:	fa                   	cli    
c0000465:	6a 08                	push   0x8
c0000467:	e9 54 01 00 00       	jmp    c00005c0 <int_common_stub>

c000046c <isr9>:
c000046c:	fa                   	cli    
c000046d:	6a 00                	push   0x0
c000046f:	6a 09                	push   0x9
c0000471:	e9 4a 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000476 <isr10>:
c0000476:	fa                   	cli    
c0000477:	6a 0a                	push   0xa
c0000479:	e9 42 01 00 00       	jmp    c00005c0 <int_common_stub>

c000047e <isr11>:
c000047e:	fa                   	cli    
c000047f:	6a 0b                	push   0xb
c0000481:	e9 3a 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000486 <isr12>:
c0000486:	fa                   	cli    
c0000487:	6a 0c                	push   0xc
c0000489:	e9 32 01 00 00       	jmp    c00005c0 <int_common_stub>

c000048e <isr13>:
c000048e:	fa                   	cli    
c000048f:	6a 0d                	push   0xd
c0000491:	e9 2a 01 00 00       	jmp    c00005c0 <int_common_stub>

c0000496 <isr14>:
c0000496:	fa                   	cli    
c0000497:	6a 0e                	push   0xe
c0000499:	e9 22 01 00 00       	jmp    c00005c0 <int_common_stub>

c000049e <isr15>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 0f                	push   0xf
c00004a3:	e9 18 01 00 00       	jmp    c00005c0 <int_common_stub>

c00004a8 <isr16>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 10                	push   0x10
c00004ad:	e9 0e 01 00 00       	jmp    c00005c0 <int_common_stub>

c00004b2 <isr17>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 11                	push   0x11
c00004b7:	e9 04 01 00 00       	jmp    c00005c0 <int_common_stub>

c00004bc <isr18>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 12                	push   0x12
c00004c1:	e9 fa 00 00 00       	jmp    c00005c0 <int_common_stub>

c00004c6 <isr96>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 60                	push   0x60
c00004cb:	e9 20 01 00 00       	jmp    c00005f0 <syscall_common_stub>

c00004d0 <irq0>:
c00004d0:	fa                   	cli    
c00004d1:	6a 00                	push   0x0
c00004d3:	6a 20                	push   0x20
c00004d5:	e9 e6 00 00 00       	jmp    c00005c0 <int_common_stub>

c00004da <irq1>:
c00004da:	fa                   	cli    
c00004db:	6a 00                	push   0x0
c00004dd:	6a 21                	push   0x21
c00004df:	e9 dc 00 00 00       	jmp    c00005c0 <int_common_stub>

c00004e4 <irq2>:
c00004e4:	fa                   	cli    
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 22                	push   0x22
c00004e9:	e9 d2 00 00 00       	jmp    c00005c0 <int_common_stub>

c00004ee <irq3>:
c00004ee:	fa                   	cli    
c00004ef:	6a 00                	push   0x0
c00004f1:	6a 23                	push   0x23
c00004f3:	e9 c8 00 00 00       	jmp    c00005c0 <int_common_stub>

c00004f8 <irq4>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 24                	push   0x24
c00004fd:	e9 be 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000502 <irq5>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 25                	push   0x25
c0000507:	e9 b4 00 00 00       	jmp    c00005c0 <int_common_stub>

c000050c <irq6>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 26                	push   0x26
c0000511:	e9 aa 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000516 <irq7>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 27                	push   0x27
c000051b:	e9 a0 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000520 <irq8>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 28                	push   0x28
c0000525:	e9 96 00 00 00       	jmp    c00005c0 <int_common_stub>

c000052a <irq9>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 29                	push   0x29
c000052f:	e9 8c 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000534 <irq10>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 2a                	push   0x2a
c0000539:	e9 82 00 00 00       	jmp    c00005c0 <int_common_stub>

c000053e <irq11>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 2b                	push   0x2b
c0000543:	e9 78 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000548 <irq12>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 2c                	push   0x2c
c000054d:	e9 6e 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000552 <irq13>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 2d                	push   0x2d
c0000557:	e9 64 00 00 00       	jmp    c00005c0 <int_common_stub>

c000055c <irq14>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 2e                	push   0x2e
c0000561:	e9 5a 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000566 <irq15>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2f                	push   0x2f
c000056b:	e9 50 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000570 <irq16>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 30                	push   0x30
c0000575:	e9 46 00 00 00       	jmp    c00005c0 <int_common_stub>

c000057a <irq17>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 31                	push   0x31
c000057f:	e9 3c 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000584 <irq18>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 32                	push   0x32
c0000589:	e9 32 00 00 00       	jmp    c00005c0 <int_common_stub>

c000058e <irq19>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 33                	push   0x33
c0000593:	e9 28 00 00 00       	jmp    c00005c0 <int_common_stub>

c0000598 <irq20>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 34                	push   0x34
c000059d:	e9 1e 00 00 00       	jmp    c00005c0 <int_common_stub>

c00005a2 <irq21>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 35                	push   0x35
c00005a7:	e9 14 00 00 00       	jmp    c00005c0 <int_common_stub>

c00005ac <irq22>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 36                	push   0x36
c00005b1:	e9 0a 00 00 00       	jmp    c00005c0 <int_common_stub>

c00005b6 <irq23>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 37                	push   0x37
c00005bb:	e9 00 00 00 00       	jmp    c00005c0 <int_common_stub>

c00005c0 <int_common_stub>:
c00005c0:	60                   	pusha  
c00005c1:	1e                   	push   ds
c00005c2:	06                   	push   es
c00005c3:	0f a0                	push   fs
c00005c5:	0f a8                	push   gs
c00005c7:	66 b8 10 00          	mov    ax,0x10
c00005cb:	66 8e d8             	mov    ds,ax
c00005ce:	66 8e c0             	mov    es,ax
c00005d1:	66 8e e0             	mov    fs,ax
c00005d4:	66 8e e8             	mov    gs,ax
c00005d7:	89 e1                	mov    ecx,esp
c00005d9:	51                   	push   ecx
c00005da:	b9 cb 0e 01 c0       	mov    ecx,0xc0010ecb
c00005df:	ff d1                	call   ecx
c00005e1:	59                   	pop    ecx
c00005e2:	0f a9                	pop    gs
c00005e4:	0f a1                	pop    fs
c00005e6:	07                   	pop    es
c00005e7:	1f                   	pop    ds
c00005e8:	61                   	popa   
c00005e9:	81 c4 08 00 00 00    	add    esp,0x8
c00005ef:	cf                   	iret   

c00005f0 <syscall_common_stub>:
c00005f0:	60                   	pusha  
c00005f1:	1e                   	push   ds
c00005f2:	06                   	push   es
c00005f3:	0f a0                	push   fs
c00005f5:	0f a8                	push   gs
c00005f7:	66 b8 10 00          	mov    ax,0x10
c00005fb:	66 8e d8             	mov    ds,ax
c00005fe:	66 8e c0             	mov    es,ax
c0000601:	66 8e e0             	mov    fs,ax
c0000604:	66 8e e8             	mov    gs,ax
c0000607:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000060d:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000610:	89 e1                	mov    ecx,esp
c0000612:	51                   	push   ecx
c0000613:	fb                   	sti    
c0000614:	b9 cb 0e 01 c0       	mov    ecx,0xc0010ecb
c0000619:	ff d1                	call   ecx
c000061b:	59                   	pop    ecx

c000061c <offAForkJumpThingy>:
c000061c:	0f a9                	pop    gs
c000061e:	0f a1                	pop    fs
c0000620:	07                   	pop    es
c0000621:	1f                   	pop    ds
c0000622:	61                   	popa   
c0000623:	81 c4 08 00 00 00    	add    esp,0x8
c0000629:	cf                   	iret   

c000062a <memcmp>:
c000062a:	56                   	push   esi
c000062b:	53                   	push   ebx
c000062c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000630:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000634:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000638:	01 d6                	add    esi,edx
c000063a:	39 f2                	cmp    edx,esi
c000063c:	74 0e                	je     c000064c <memcmp+0x22>
c000063e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000641:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000644:	38 c8                	cmp    al,cl
c0000646:	75 08                	jne    c0000650 <memcmp+0x26>
c0000648:	42                   	inc    edx
c0000649:	43                   	inc    ebx
c000064a:	eb ee                	jmp    c000063a <memcmp+0x10>
c000064c:	31 c0                	xor    eax,eax
c000064e:	eb 02                	jmp    c0000652 <memcmp+0x28>
c0000650:	29 c8                	sub    eax,ecx
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memmove>:
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000065b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000065f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000663:	39 c8                	cmp    eax,ecx
c0000665:	73 12                	jae    c0000679 <memmove+0x24>
c0000667:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000066a:	89 c3                	mov    ebx,eax
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 1a                	je     c000068a <memmove+0x35>
c0000670:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000672:	43                   	inc    ebx
c0000673:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memmove+0x17>
c0000679:	76 0f                	jbe    c000068a <memmove+0x35>
c000067b:	85 d2                	test   edx,edx
c000067d:	74 0b                	je     c000068a <memmove+0x35>
c000067f:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000683:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000687:	4a                   	dec    edx
c0000688:	eb f1                	jmp    c000067b <memmove+0x26>
c000068a:	5b                   	pop    ebx
c000068b:	5e                   	pop    esi
c000068c:	c3                   	ret    

c000068d <memcpy>:
c000068d:	57                   	push   edi
c000068e:	56                   	push   esi
c000068f:	53                   	push   ebx
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000698:	89 da                	mov    edx,ebx
c000069a:	89 d9                	mov    ecx,ebx
c000069c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006a0:	83 e2 fc             	and    edx,0xfffffffc
c00006a3:	c1 e9 02             	shr    ecx,0x2
c00006a6:	89 c7                	mov    edi,eax
c00006a8:	fc                   	cld    
c00006a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ab:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006ae:	01 c2                	add    edx,eax
c00006b0:	01 de                	add    esi,ebx
c00006b2:	39 f1                	cmp    ecx,esi
c00006b4:	74 09                	je     c00006bf <memcpy+0x32>
c00006b6:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006b8:	42                   	inc    edx
c00006b9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006bc:	41                   	inc    ecx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x25>
c00006bf:	5b                   	pop    ebx
c00006c0:	5e                   	pop    esi
c00006c1:	5f                   	pop    edi
c00006c2:	c3                   	ret    

c00006c3 <memset>:
c00006c3:	53                   	push   ebx
c00006c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cc:	01 c1                	add    ecx,eax
c00006ce:	89 c2                	mov    edx,eax
c00006d0:	39 ca                	cmp    edx,ecx
c00006d2:	74 0a                	je     c00006de <memset+0x1b>
c00006d4:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d8:	42                   	inc    edx
c00006d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dc:	eb f2                	jmp    c00006d0 <memset+0xd>
c00006de:	5b                   	pop    ebx
c00006df:	c3                   	ret    

c00006e0 <strlen>:
c00006e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e4:	31 c0                	xor    eax,eax
c00006e6:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006ea:	74 03                	je     c00006ef <strlen+0xf>
c00006ec:	40                   	inc    eax
c00006ed:	eb f7                	jmp    c00006e6 <strlen+0x6>
c00006ef:	c3                   	ret    

c00006f0 <strpbrk>:
c00006f0:	53                   	push   ebx
c00006f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f5:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f7:	84 c9                	test   cl,cl
c00006f9:	74 14                	je     c000070f <strpbrk+0x1f>
c00006fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006ff:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000701:	84 db                	test   bl,bl
c0000703:	74 07                	je     c000070c <strpbrk+0x1c>
c0000705:	38 cb                	cmp    bl,cl
c0000707:	74 08                	je     c0000711 <strpbrk+0x21>
c0000709:	42                   	inc    edx
c000070a:	eb f3                	jmp    c00006ff <strpbrk+0xf>
c000070c:	40                   	inc    eax
c000070d:	eb e6                	jmp    c00006f5 <strpbrk+0x5>
c000070f:	31 c0                	xor    eax,eax
c0000711:	5b                   	pop    ebx
c0000712:	c3                   	ret    

c0000713 <strtok>:
c0000713:	56                   	push   esi
c0000714:	53                   	push   ebx
c0000715:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071d:	85 db                	test   ebx,ebx
c000071f:	75 0e                	jne    c000072f <strtok+0x1c>
c0000721:	8b 1d 4c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002434c
c0000727:	85 db                	test   ebx,ebx
c0000729:	75 04                	jne    c000072f <strtok+0x1c>
c000072b:	31 db                	xor    ebx,ebx
c000072d:	eb 2e                	jmp    c000075d <strtok+0x4a>
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	e8 ba ff ff ff       	call   c00006f0 <strpbrk>
c0000736:	a3 4c 43 02 c0       	mov    ds:0xc002434c,eax
c000073b:	5a                   	pop    edx
c000073c:	a1 4c 43 02 c0       	mov    eax,ds:0xc002434c
c0000741:	59                   	pop    ecx
c0000742:	39 d8                	cmp    eax,ebx
c0000744:	75 07                	jne    c000074d <strtok+0x3a>
c0000746:	43                   	inc    ebx
c0000747:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074b:	eb e2                	jmp    c000072f <strtok+0x1c>
c000074d:	85 c0                	test   eax,eax
c000074f:	74 da                	je     c000072b <strtok+0x18>
c0000751:	8d 50 01             	lea    edx,[eax+0x1]
c0000754:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000757:	89 15 4c 43 02 c0    	mov    DWORD PTR ds:0xc002434c,edx
c000075d:	89 d8                	mov    eax,ebx
c000075f:	5b                   	pop    ebx
c0000760:	5e                   	pop    esi
c0000761:	c3                   	ret    

c0000762 <strcpy>:
c0000762:	53                   	push   ebx
c0000763:	31 d2                	xor    edx,edx
c0000765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000769:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076d:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000770:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000773:	84 c9                	test   cl,cl
c0000775:	74 06                	je     c000077d <strcpy+0x1b>
c0000777:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077a:	42                   	inc    edx
c000077b:	eb ec                	jmp    c0000769 <strcpy+0x7>
c000077d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000780:	5b                   	pop    ebx
c0000781:	c3                   	ret    

c0000782 <strncpy>:
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000788:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000790:	89 c3                	mov    ebx,eax
c0000792:	85 c9                	test   ecx,ecx
c0000794:	74 1a                	je     c00007b0 <strncpy+0x2e>
c0000796:	46                   	inc    esi
c0000797:	43                   	inc    ebx
c0000798:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079b:	49                   	dec    ecx
c000079c:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000079f:	84 d2                	test   dl,dl
c00007a1:	75 ef                	jne    c0000792 <strncpy+0x10>
c00007a3:	31 d2                	xor    edx,edx
c00007a5:	39 d1                	cmp    ecx,edx
c00007a7:	74 07                	je     c00007b0 <strncpy+0x2e>
c00007a9:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ad:	42                   	inc    edx
c00007ae:	eb f5                	jmp    c00007a5 <strncpy+0x23>
c00007b0:	5b                   	pop    ebx
c00007b1:	5e                   	pop    esi
c00007b2:	c3                   	ret    

c00007b3 <strcmp>:
c00007b3:	31 c9                	xor    ecx,ecx
c00007b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007bd:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c1:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c5:	38 d0                	cmp    al,dl
c00007c7:	75 08                	jne    c00007d1 <strcmp+0x1e>
c00007c9:	41                   	inc    ecx
c00007ca:	84 c0                	test   al,al
c00007cc:	75 e7                	jne    c00007b5 <strcmp+0x2>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	c3                   	ret    
c00007d1:	29 d0                	sub    eax,edx
c00007d3:	c3                   	ret    

c00007d4 <strchr>:
c00007d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d8:	8a 10                	mov    dl,BYTE PTR [eax]
c00007da:	84 d2                	test   dl,dl
c00007dc:	74 09                	je     c00007e7 <strchr+0x13>
c00007de:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e2:	74 05                	je     c00007e9 <strchr+0x15>
c00007e4:	40                   	inc    eax
c00007e5:	eb f1                	jmp    c00007d8 <strchr+0x4>
c00007e7:	31 c0                	xor    eax,eax
c00007e9:	c3                   	ret    

c00007ea <strncmp>:
c00007ea:	56                   	push   esi
c00007eb:	53                   	push   ebx
c00007ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f8:	01 d6                	add    esi,edx
c00007fa:	39 f2                	cmp    edx,esi
c00007fc:	74 12                	je     c0000810 <strncmp+0x26>
c00007fe:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000801:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000804:	38 c8                	cmp    al,cl
c0000806:	75 0c                	jne    c0000814 <strncmp+0x2a>
c0000808:	42                   	inc    edx
c0000809:	84 c0                	test   al,al
c000080b:	74 03                	je     c0000810 <strncmp+0x26>
c000080d:	43                   	inc    ebx
c000080e:	eb ea                	jmp    c00007fa <strncmp+0x10>
c0000810:	31 c0                	xor    eax,eax
c0000812:	eb 02                	jmp    c0000816 <strncmp+0x2c>
c0000814:	29 c8                	sub    eax,ecx
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    

c0000819 <strcat>:
c0000819:	53                   	push   ebx
c000081a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081e:	89 c1                	mov    ecx,eax
c0000820:	8d 51 01             	lea    edx,[ecx+0x1]
c0000823:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000827:	74 04                	je     c000082d <strcat+0x14>
c0000829:	89 d1                	mov    ecx,edx
c000082b:	eb f3                	jmp    c0000820 <strcat+0x7>
c000082d:	31 d2                	xor    edx,edx
c000082f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000833:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000836:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000839:	42                   	inc    edx
c000083a:	84 db                	test   bl,bl
c000083c:	75 f1                	jne    c000082f <strcat+0x16>
c000083e:	5b                   	pop    ebx
c000083f:	c3                   	ret    

c0000840 <strncat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084e:	89 c2                	mov    edx,eax
c0000850:	85 db                	test   ebx,ebx
c0000852:	74 23                	je     c0000877 <strncat+0x37>
c0000854:	8d 72 01             	lea    esi,[edx+0x1]
c0000857:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085b:	74 04                	je     c0000861 <strncat+0x21>
c000085d:	89 f2                	mov    edx,esi
c000085f:	eb f3                	jmp    c0000854 <strncat+0x14>
c0000861:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000864:	41                   	inc    ecx
c0000865:	42                   	inc    edx
c0000866:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000869:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086c:	84 db                	test   bl,bl
c000086e:	74 07                	je     c0000877 <strncat+0x37>
c0000870:	39 f1                	cmp    ecx,esi
c0000872:	75 f0                	jne    c0000864 <strncat+0x24>
c0000874:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000877:	5b                   	pop    ebx
c0000878:	5e                   	pop    esi
c0000879:	c3                   	ret    

c000087a <strstr>:
c000087a:	57                   	push   edi
c000087b:	56                   	push   esi
c000087c:	53                   	push   ebx
c000087d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000885:	57                   	push   edi
c0000886:	e8 55 fe ff ff       	call   c00006e0 <strlen>
c000088b:	59                   	pop    ecx
c000088c:	89 c6                	mov    esi,eax
c000088e:	85 c0                	test   eax,eax
c0000890:	74 1f                	je     c00008b1 <strstr+0x37>
c0000892:	53                   	push   ebx
c0000893:	e8 48 fe ff ff       	call   c00006e0 <strlen>
c0000898:	5a                   	pop    edx
c0000899:	39 f0                	cmp    eax,esi
c000089b:	72 12                	jb     c00008af <strstr+0x35>
c000089d:	56                   	push   esi
c000089e:	57                   	push   edi
c000089f:	53                   	push   ebx
c00008a0:	e8 85 fd ff ff       	call   c000062a <memcmp>
c00008a5:	83 c4 0c             	add    esp,0xc
c00008a8:	85 c0                	test   eax,eax
c00008aa:	74 05                	je     c00008b1 <strstr+0x37>
c00008ac:	43                   	inc    ebx
c00008ad:	eb e3                	jmp    c0000892 <strstr+0x18>
c00008af:	31 db                	xor    ebx,ebx
c00008b1:	89 d8                	mov    eax,ebx
c00008b3:	5b                   	pop    ebx
c00008b4:	5e                   	pop    esi
c00008b5:	5f                   	pop    edi
c00008b6:	c3                   	ret    

c00008b7 <toupper>:
c00008b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bb:	0f b6 d0             	movzx  edx,al
c00008be:	f6 82 00 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfd00],0x2
c00008c5:	74 03                	je     c00008ca <toupper+0x13>
c00008c7:	83 e8 20             	sub    eax,0x20
c00008ca:	c3                   	ret    

c00008cb <tolower>:
c00008cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008cf:	0f b6 d0             	movzx  edx,al
c00008d2:	f6 82 00 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfd00],0x1
c00008d9:	74 03                	je     c00008de <tolower+0x13>
c00008db:	83 c0 20             	add    eax,0x20
c00008de:	c3                   	ret    

c00008df <simple_strtoul>:
c00008df:	55                   	push   ebp
c00008e0:	57                   	push   edi
c00008e1:	56                   	push   esi
c00008e2:	53                   	push   ebx
c00008e3:	83 ec 08             	sub    esp,0x8
c00008e6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008ea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ee:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f1:	f6 82 00 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfd00],0x8
c00008f8:	74 03                	je     c00008fd <simple_strtoul+0x1e>
c00008fa:	41                   	inc    ecx
c00008fb:	eb f1                	jmp    c00008ee <simple_strtoul+0xf>
c00008fd:	80 fa 09             	cmp    dl,0x9
c0000900:	74 f8                	je     c00008fa <simple_strtoul+0x1b>
c0000902:	80 fa 2d             	cmp    dl,0x2d
c0000905:	75 0b                	jne    c0000912 <simple_strtoul+0x33>
c0000907:	41                   	inc    ecx
c0000908:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000910:	eb 0e                	jmp    c0000920 <simple_strtoul+0x41>
c0000912:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091a:	80 fa 2b             	cmp    dl,0x2b
c000091d:	75 01                	jne    c0000920 <simple_strtoul+0x41>
c000091f:	41                   	inc    ecx
c0000920:	85 f6                	test   esi,esi
c0000922:	75 22                	jne    c0000946 <simple_strtoul+0x67>
c0000924:	be 0a 00 00 00       	mov    esi,0xa
c0000929:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092c:	75 5a                	jne    c0000988 <simple_strtoul+0xa9>
c000092e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000932:	50                   	push   eax
c0000933:	e8 93 ff ff ff       	call   c00008cb <tolower>
c0000938:	5a                   	pop    edx
c0000939:	83 f8 78             	cmp    eax,0x78
c000093c:	74 03                	je     c0000941 <simple_strtoul+0x62>
c000093e:	41                   	inc    ecx
c000093f:	eb 16                	jmp    c0000957 <simple_strtoul+0x78>
c0000941:	83 c1 02             	add    ecx,0x2
c0000944:	eb 22                	jmp    c0000968 <simple_strtoul+0x89>
c0000946:	8d 46 fe             	lea    eax,[esi-0x2]
c0000949:	83 f8 22             	cmp    eax,0x22
c000094c:	0f 87 ab 00 00 00    	ja     c00009fd <simple_strtoul+0x11e>
c0000952:	83 fe 08             	cmp    esi,0x8
c0000955:	75 0c                	jne    c0000963 <simple_strtoul+0x84>
c0000957:	be 08 00 00 00       	mov    esi,0x8
c000095c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000095f:	75 27                	jne    c0000988 <simple_strtoul+0xa9>
c0000961:	eb 1f                	jmp    c0000982 <simple_strtoul+0xa3>
c0000963:	83 fe 10             	cmp    esi,0x10
c0000966:	75 20                	jne    c0000988 <simple_strtoul+0xa9>
c0000968:	be 10 00 00 00       	mov    esi,0x10
c000096d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000970:	75 16                	jne    c0000988 <simple_strtoul+0xa9>
c0000972:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000976:	50                   	push   eax
c0000977:	e8 4f ff ff ff       	call   c00008cb <tolower>
c000097c:	5d                   	pop    ebp
c000097d:	83 f8 78             	cmp    eax,0x78
c0000980:	74 03                	je     c0000985 <simple_strtoul+0xa6>
c0000982:	41                   	inc    ecx
c0000983:	eb 03                	jmp    c0000988 <simple_strtoul+0xa9>
c0000985:	83 c1 02             	add    ecx,0x2
c0000988:	31 ed                	xor    ebp,ebp
c000098a:	31 db                	xor    ebx,ebx
c000098c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000993:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000995:	84 d2                	test   dl,dl
c0000997:	74 27                	je     c00009c0 <simple_strtoul+0xe1>
c0000999:	0f b6 fa             	movzx  edi,dl
c000099c:	f6 87 00 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfd00],0x4
c00009a3:	74 05                	je     c00009aa <simple_strtoul+0xcb>
c00009a5:	83 ef 30             	sub    edi,0x30
c00009a8:	eb 22                	jmp    c00009cc <simple_strtoul+0xed>
c00009aa:	0f be d2             	movsx  edx,dl
c00009ad:	52                   	push   edx
c00009ae:	e8 04 ff ff ff       	call   c00008b7 <toupper>
c00009b3:	0f b6 d0             	movzx  edx,al
c00009b6:	5f                   	pop    edi
c00009b7:	f6 82 00 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfd00],0x1
c00009be:	75 09                	jne    c00009c9 <simple_strtoul+0xea>
c00009c0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c5:	75 2d                	jne    c00009f4 <simple_strtoul+0x115>
c00009c7:	eb 59                	jmp    c0000a22 <simple_strtoul+0x143>
c00009c9:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cc:	39 f7                	cmp    edi,esi
c00009ce:	73 f0                	jae    c00009c0 <simple_strtoul+0xe1>
c00009d0:	89 f8                	mov    eax,edi
c00009d2:	31 d2                	xor    edx,edx
c00009d4:	f7 d0                	not    eax
c00009d6:	f7 f6                	div    esi
c00009d8:	39 d8                	cmp    eax,ebx
c00009da:	72 0e                	jb     c00009ea <simple_strtoul+0x10b>
c00009dc:	0f af de             	imul   ebx,esi
c00009df:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e6:	01 fb                	add    ebx,edi
c00009e8:	eb 07                	jmp    c00009f1 <simple_strtoul+0x112>
c00009ea:	bd 01 00 00 00       	mov    ebp,0x1
c00009ef:	31 db                	xor    ebx,ebx
c00009f1:	41                   	inc    ecx
c00009f2:	eb 9f                	jmp    c0000993 <simple_strtoul+0xb4>
c00009f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f7:	09 d8                	or     eax,ebx
c00009f9:	75 21                	jne    c0000a1c <simple_strtoul+0x13d>
c00009fb:	eb 11                	jmp    c0000a0e <simple_strtoul+0x12f>
c00009fd:	31 db                	xor    ebx,ebx
c00009ff:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a04:	74 22                	je     c0000a28 <simple_strtoul+0x149>
c0000a06:	31 ed                	xor    ebp,ebp
c0000a08:	31 db                	xor    ebx,ebx
c0000a0a:	85 c9                	test   ecx,ecx
c0000a0c:	74 0e                	je     c0000a1c <simple_strtoul+0x13d>
c0000a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a16:	31 db                	xor    ebx,ebx
c0000a18:	89 38                	mov    DWORD PTR [eax],edi
c0000a1a:	eb 06                	jmp    c0000a22 <simple_strtoul+0x143>
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	89 08                	mov    DWORD PTR [eax],ecx
c0000a22:	4d                   	dec    ebp
c0000a23:	75 03                	jne    c0000a28 <simple_strtoul+0x149>
c0000a25:	83 cb ff             	or     ebx,0xffffffff
c0000a28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2d:	75 02                	jne    c0000a31 <simple_strtoul+0x152>
c0000a2f:	f7 db                	neg    ebx
c0000a31:	83 c4 08             	add    esp,0x8
c0000a34:	89 d8                	mov    eax,ebx
c0000a36:	5b                   	pop    ebx
c0000a37:	5e                   	pop    esi
c0000a38:	5f                   	pop    edi
c0000a39:	5d                   	pop    ebp
c0000a3a:	c3                   	ret    

c0000a3b <largebin_index>:
c0000a3b:	89 c2                	mov    edx,eax
c0000a3d:	c1 ea 08             	shr    edx,0x8
c0000a40:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a46:	77 10                	ja     c0000a58 <largebin_index+0x1d>
c0000a48:	0f bd d2             	bsr    edx,edx
c0000a4b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4e:	d3 e8                	shr    eax,cl
c0000a50:	83 e0 03             	and    eax,0x3
c0000a53:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a57:	c3                   	ret    
c0000a58:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5d:	c3                   	ret    

c0000a5e <malloc_init_state>:
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	53                   	push   ebx
c0000a62:	89 d1                	mov    ecx,edx
c0000a64:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a6a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a70:	83 c2 08             	add    edx,0x8
c0000a73:	39 da                	cmp    edx,ebx
c0000a75:	75 f3                	jne    c0000a6a <malloc_init_state+0xc>
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a83:	83 e2 03             	and    edx,0x3
c0000a86:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a90:	83 ca 48             	or     edx,0x48
c0000a93:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9d:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa7:	89 10                	mov    DWORD PTR [eax],edx
c0000aa9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ab0:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab3:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abd:	5b                   	pop    ebx
c0000abe:	c3                   	ret    

c0000abf <malloc_consolidate>:
c0000abf:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac1:	85 d2                	test   edx,edx
c0000ac3:	0f 84 d8 00 00 00    	je     c0000ba1 <malloc_consolidate+0xe2>
c0000ac9:	55                   	push   ebp
c0000aca:	83 e2 fd             	and    edx,0xfffffffd
c0000acd:	57                   	push   edi
c0000ace:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad1:	56                   	push   esi
c0000ad2:	89 c5                	mov    ebp,eax
c0000ad4:	53                   	push   ebx
c0000ad5:	83 ec 10             	sub    esp,0x10
c0000ad8:	89 10                	mov    DWORD PTR [eax],edx
c0000ada:	c1 ea 03             	shr    edx,0x3
c0000add:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ae1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	0f 84 98 00 00 00    	je     c0000b8c <malloc_consolidate+0xcd>
c0000af4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afe:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b01:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b05:	89 f9                	mov    ecx,edi
c0000b07:	83 e1 fe             	and    ecx,0xfffffffe
c0000b0a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b10:	83 e3 fc             	and    ebx,0xfffffffc
c0000b13:	83 e7 01             	and    edi,0x1
c0000b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b19:	75 14                	jne    c0000b2f <malloc_consolidate+0x70>
c0000b1b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1d:	29 fa                	sub    edx,edi
c0000b1f:	01 f9                	add    ecx,edi
c0000b21:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b24:	89 fb                	mov    ebx,edi
c0000b26:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b29:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b32:	74 40                	je     c0000b74 <malloc_consolidate+0xb5>
c0000b34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b37:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b3a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b41:	83 e7 01             	and    edi,0x1
c0000b44:	75 0e                	jne    c0000b54 <malloc_consolidate+0x95>
c0000b46:	01 d9                	add    ecx,ebx
c0000b48:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b51:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b54:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b57:	89 ce                	mov    esi,ecx
c0000b59:	83 ce 01             	or     esi,0x1
c0000b5c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b62:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b65:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b69:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b6c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b72:	eb 0c                	jmp    c0000b80 <malloc_consolidate+0xc1>
c0000b74:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b77:	83 c9 01             	or     ecx,0x1
c0000b7a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b84:	85 d2                	test   edx,edx
c0000b86:	0f 85 6f ff ff ff    	jne    c0000afb <malloc_consolidate+0x3c>
c0000b8c:	83 c5 04             	add    ebp,0x4
c0000b8f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b93:	0f 85 50 ff ff ff    	jne    c0000ae9 <malloc_consolidate+0x2a>
c0000b99:	83 c4 10             	add    esp,0x10
c0000b9c:	5b                   	pop    ebx
c0000b9d:	5e                   	pop    esi
c0000b9e:	5f                   	pop    edi
c0000b9f:	5d                   	pop    ebp
c0000ba0:	c3                   	ret    
c0000ba1:	e9 b8 fe ff ff       	jmp    c0000a5e <malloc_init_state>

c0000ba6 <dlfree>:
c0000ba6:	57                   	push   edi
c0000ba7:	56                   	push   esi
c0000ba8:	53                   	push   ebx
c0000ba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bad:	85 db                	test   ebx,ebx
c0000baf:	0f 84 e2 00 00 00    	je     c0000c97 <dlfree+0xf1>
c0000bb5:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb8:	8b 0d 60 43 02 c0    	mov    ecx,DWORD PTR ds:0xc0024360
c0000bbe:	89 f0                	mov    eax,esi
c0000bc0:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc3:	83 e0 fc             	and    eax,0xfffffffc
c0000bc6:	39 c1                	cmp    ecx,eax
c0000bc8:	72 24                	jb     c0000bee <dlfree+0x48>
c0000bca:	c1 e8 03             	shr    eax,0x3
c0000bcd:	83 c9 03             	or     ecx,0x3
c0000bd0:	83 e8 02             	sub    eax,0x2
c0000bd3:	89 0d 60 43 02 c0    	mov    DWORD PTR ds:0xc0024360,ecx
c0000bd9:	8b 0c 85 64 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc9c]
c0000be0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be2:	89 14 85 64 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc9c],edx
c0000be9:	e9 a9 00 00 00       	jmp    c0000c97 <dlfree+0xf1>
c0000bee:	83 e6 02             	and    esi,0x2
c0000bf1:	0f 85 a0 00 00 00    	jne    c0000c97 <dlfree+0xf1>
c0000bf7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfa:	83 c9 01             	or     ecx,0x1
c0000bfd:	89 0d 60 43 02 c0    	mov    DWORD PTR ds:0xc0024360,ecx
c0000c03:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c06:	83 e1 fc             	and    ecx,0xfffffffc
c0000c09:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0d:	75 13                	jne    c0000c22 <dlfree+0x7c>
c0000c0f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c12:	29 da                	sub    edx,ebx
c0000c14:	01 d8                	add    eax,ebx
c0000c16:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c19:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c22:	39 35 8c 43 02 c0    	cmp    DWORD PTR ds:0xc002438c,esi
c0000c28:	74 40                	je     c0000c6a <dlfree+0xc4>
c0000c2a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c31:	80 e3 01             	and    bl,0x1
c0000c34:	75 0e                	jne    c0000c44 <dlfree+0x9e>
c0000c36:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c39:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3c:	01 c8                	add    eax,ecx
c0000c3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c44:	8b 0d 9c 43 02 c0    	mov    ecx,DWORD PTR ds:0xc002439c
c0000c4a:	c7 42 0c 94 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024394
c0000c51:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c54:	89 15 9c 43 02 c0    	mov    DWORD PTR ds:0xc002439c,edx
c0000c5a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5d:	89 c1                	mov    ecx,eax
c0000c5f:	83 c9 01             	or     ecx,0x1
c0000c62:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c65:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c68:	eb 10                	jmp    c0000c7a <dlfree+0xd4>
c0000c6a:	01 c8                	add    eax,ecx
c0000c6c:	89 c1                	mov    ecx,eax
c0000c6e:	83 c9 01             	or     ecx,0x1
c0000c71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c74:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c0000c7a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7f:	76 16                	jbe    c0000c97 <dlfree+0xf1>
c0000c81:	f6 05 60 43 02 c0 02 	test   BYTE PTR ds:0xc0024360,0x2
c0000c88:	74 0d                	je     c0000c97 <dlfree+0xf1>
c0000c8a:	5b                   	pop    ebx
c0000c8b:	b8 60 43 02 c0       	mov    eax,0xc0024360
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	e9 28 fe ff ff       	jmp    c0000abf <malloc_consolidate>
c0000c97:	5b                   	pop    ebx
c0000c98:	5e                   	pop    esi
c0000c99:	5f                   	pop    edi
c0000c9a:	c3                   	ret    

c0000c9b <sYSMALLOc>:
c0000c9b:	55                   	push   ebp
c0000c9c:	57                   	push   edi
c0000c9d:	56                   	push   esi
c0000c9e:	53                   	push   ebx
c0000c9f:	89 d3                	mov    ebx,edx
c0000ca1:	83 ec 2c             	sub    esp,0x2c
c0000ca4:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000caa:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000cad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb1:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb8:	74 1f                	je     c0000cd9 <sYSMALLOc+0x3e>
c0000cba:	89 d0                	mov    eax,edx
c0000cbc:	e8 fe fd ff ff       	call   c0000abf <malloc_consolidate>
c0000cc1:	83 ec 0c             	sub    esp,0xc
c0000cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cc8:	83 e8 07             	sub    eax,0x7
c0000ccb:	50                   	push   eax
c0000ccc:	e8 33 02 00 00       	call   c0000f04 <dlmalloc>
c0000cd1:	83 c4 10             	add    esp,0x10
c0000cd4:	e9 23 02 00 00       	jmp    c0000efc <sYSMALLOc+0x261>
c0000cd9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ce0:	83 c0 10             	add    eax,0x10
c0000ce3:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce9:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000cec:	01 c2                	add    edx,eax
c0000cee:	83 e5 fc             	and    ebp,0xfffffffc
c0000cf1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cf5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cfc:	74 02                	je     c0000d00 <sYSMALLOc+0x65>
c0000cfe:	29 ea                	sub    edx,ebp
c0000d00:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d04:	f7 d9                	neg    ecx
c0000d06:	21 ca                	and    edx,ecx
c0000d08:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d0c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d10:	7f 07                	jg     c0000d19 <sYSMALLOc+0x7e>
c0000d12:	31 c0                	xor    eax,eax
c0000d14:	e9 e3 01 00 00       	jmp    c0000efc <sYSMALLOc+0x261>
c0000d19:	83 ec 0c             	sub    esp,0xc
c0000d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d20:	e8 0a b1 00 00       	call   c000be2f <sbrk>
c0000d25:	83 c4 10             	add    esp,0x10
c0000d28:	89 c6                	mov    esi,eax
c0000d2a:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2d:	74 e3                	je     c0000d12 <sYSMALLOc+0x77>
c0000d2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d33:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d36:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d3c:	39 c2                	cmp    edx,eax
c0000d3e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d44:	75 11                	jne    c0000d57 <sYSMALLOc+0xbc>
c0000d46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4a:	01 e8                	add    eax,ebp
c0000d4c:	83 c8 01             	or     eax,0x1
c0000d4f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d52:	e9 93 00 00 00       	jmp    c0000dea <sYSMALLOc+0x14f>
c0000d57:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d5d:	a8 01                	test   al,0x1
c0000d5f:	0f 84 73 01 00 00    	je     c0000ed8 <sYSMALLOc+0x23d>
c0000d65:	85 ed                	test   ebp,ebp
c0000d67:	74 12                	je     c0000d7b <sYSMALLOc+0xe0>
c0000d69:	39 f2                	cmp    edx,esi
c0000d6b:	76 0e                	jbe    c0000d7b <sYSMALLOc+0xe0>
c0000d6d:	83 e0 fe             	and    eax,0xfffffffe
c0000d70:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d76:	e9 5d 01 00 00       	jmp    c0000ed8 <sYSMALLOc+0x23d>
c0000d7b:	85 ed                	test   ebp,ebp
c0000d7d:	74 0c                	je     c0000d8b <sYSMALLOc+0xf0>
c0000d7f:	89 f0                	mov    eax,esi
c0000d81:	29 d0                	sub    eax,edx
c0000d83:	01 c1                	add    ecx,eax
c0000d85:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d8b:	89 f2                	mov    edx,esi
c0000d8d:	83 e2 07             	and    edx,0x7
c0000d90:	0f 84 b1 00 00 00    	je     c0000e47 <sYSMALLOc+0x1ac>
c0000d96:	b8 08 00 00 00       	mov    eax,0x8
c0000d9b:	29 d0                	sub    eax,edx
c0000d9d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000da0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000da4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000da8:	01 e8                	add    eax,ebp
c0000daa:	83 ec 0c             	sub    esp,0xc
c0000dad:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000db0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000db4:	01 f2                	add    edx,esi
c0000db6:	01 d1                	add    ecx,edx
c0000db8:	29 d0                	sub    eax,edx
c0000dba:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dbe:	01 c1                	add    ecx,eax
c0000dc0:	51                   	push   ecx
c0000dc1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dc5:	e8 65 b0 00 00       	call   c000be2f <sbrk>
c0000dca:	83 c4 10             	add    esp,0x10
c0000dcd:	83 f8 ff             	cmp    eax,0xffffffff
c0000dd0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dd4:	75 7c                	jne    c0000e52 <sYSMALLOc+0x1b7>
c0000dd6:	83 ec 0c             	sub    esp,0xc
c0000dd9:	6a 00                	push   0x0
c0000ddb:	e8 4f b0 00 00       	call   c000be2f <sbrk>
c0000de0:	83 c4 10             	add    esp,0x10
c0000de3:	31 c9                	xor    ecx,ecx
c0000de5:	83 f8 ff             	cmp    eax,0xffffffff
c0000de8:	75 7e                	jne    c0000e68 <sYSMALLOc+0x1cd>
c0000dea:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000df0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df6:	73 06                	jae    c0000dfe <sYSMALLOc+0x163>
c0000df8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfe:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e04:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e0a:	73 06                	jae    c0000e12 <sYSMALLOc+0x177>
c0000e0c:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e12:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e15:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e18:	83 e2 fc             	and    edx,0xfffffffc
c0000e1b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e1f:	0f 87 ed fe ff ff    	ja     c0000d12 <sYSMALLOc+0x77>
c0000e25:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e34:	89 fb                	mov    ebx,edi
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	83 c0 08             	add    eax,0x8
c0000e3c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e42:	e9 b5 00 00 00       	jmp    c0000efc <sYSMALLOc+0x261>
c0000e47:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e4b:	31 c0                	xor    eax,eax
c0000e4d:	e9 52 ff ff ff       	jmp    c0000da4 <sYSMALLOc+0x109>
c0000e52:	39 c6                	cmp    esi,eax
c0000e54:	76 12                	jbe    c0000e68 <sYSMALLOc+0x1cd>
c0000e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e5a:	01 f0                	add    eax,esi
c0000e5c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e63:	e9 7b ff ff ff       	jmp    c0000de3 <sYSMALLOc+0x148>
c0000e68:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e6c:	29 f0                	sub    eax,esi
c0000e6e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e71:	01 c8                	add    eax,ecx
c0000e73:	83 c8 01             	or     eax,0x1
c0000e76:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e79:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e7f:	85 ed                	test   ebp,ebp
c0000e81:	0f 84 63 ff ff ff    	je     c0000dea <sYSMALLOc+0x14f>
c0000e87:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e8a:	83 e0 f8             	and    eax,0xfffffff8
c0000e8d:	89 c2                	mov    edx,eax
c0000e8f:	83 ca 01             	or     edx,0x1
c0000e92:	83 f8 0f             	cmp    eax,0xf
c0000e95:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e98:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000ea0:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ea8:	0f 86 3c ff ff ff    	jbe    c0000dea <sYSMALLOc+0x14f>
c0000eae:	83 ec 0c             	sub    esp,0xc
c0000eb1:	83 c7 08             	add    edi,0x8
c0000eb4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eba:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ec4:	57                   	push   edi
c0000ec5:	e8 dc fc ff ff       	call   c0000ba6 <dlfree>
c0000eca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 12 ff ff ff       	jmp    c0000dea <sYSMALLOc+0x14f>
c0000ed8:	83 ec 0c             	sub    esp,0xc
c0000edb:	6a 00                	push   0x0
c0000edd:	e8 4d af 00 00       	call   c000be2f <sbrk>
c0000ee2:	89 c2                	mov    edx,eax
c0000ee4:	29 f2                	sub    edx,esi
c0000ee6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000eea:	83 c4 10             	add    esp,0x10
c0000eed:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ef3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ef7:	e9 e7 fe ff ff       	jmp    c0000de3 <sYSMALLOc+0x148>
c0000efc:	83 c4 2c             	add    esp,0x2c
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    

c0000f04 <dlmalloc>:
c0000f04:	55                   	push   ebp
c0000f05:	57                   	push   edi
c0000f06:	56                   	push   esi
c0000f07:	53                   	push   ebx
c0000f08:	83 ec 1c             	sub    esp,0x1c
c0000f0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0f:	83 f8 df             	cmp    eax,0xffffffdf
c0000f12:	0f 87 70 03 00 00    	ja     c0001288 <dlmalloc+0x384>
c0000f18:	83 c0 0b             	add    eax,0xb
c0000f1b:	be 10 00 00 00       	mov    esi,0x10
c0000f20:	83 f8 0f             	cmp    eax,0xf
c0000f23:	76 05                	jbe    c0000f2a <dlmalloc+0x26>
c0000f25:	83 e0 f8             	and    eax,0xfffffff8
c0000f28:	89 c6                	mov    esi,eax
c0000f2a:	8b 3d 60 43 02 c0    	mov    edi,DWORD PTR ds:0xc0024360
c0000f30:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f36:	75 17                	jne    c0000f4f <dlmalloc+0x4b>
c0000f38:	85 ff                	test   edi,edi
c0000f3a:	0f 85 05 03 00 00    	jne    c0001245 <dlmalloc+0x341>
c0000f40:	b8 60 43 02 c0       	mov    eax,0xc0024360
c0000f45:	e8 75 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000f4a:	e9 f6 02 00 00       	jmp    c0001245 <dlmalloc+0x341>
c0000f4f:	39 f7                	cmp    edi,esi
c0000f51:	72 1f                	jb     c0000f72 <dlmalloc+0x6e>
c0000f53:	89 f2                	mov    edx,esi
c0000f55:	c1 ea 03             	shr    edx,0x3
c0000f58:	83 ea 02             	sub    edx,0x2
c0000f5b:	8b 04 95 64 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc9c]
c0000f62:	85 c0                	test   eax,eax
c0000f64:	74 0c                	je     c0000f72 <dlmalloc+0x6e>
c0000f66:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f69:	89 0c 95 64 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc9c],ecx
c0000f70:	eb 30                	jmp    c0000fa2 <dlmalloc+0x9e>
c0000f72:	89 f0                	mov    eax,esi
c0000f74:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f7a:	77 2e                	ja     c0000faa <dlmalloc+0xa6>
c0000f7c:	c1 e8 03             	shr    eax,0x3
c0000f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f83:	8d 14 c5 94 43 02 c0 	lea    edx,[eax*8-0x3ffdbc6c]
c0000f8a:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f8d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f90:	39 c3                	cmp    ebx,eax
c0000f92:	74 2e                	je     c0000fc2 <dlmalloc+0xbe>
c0000f94:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f97:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fa2:	83 c0 08             	add    eax,0x8
c0000fa5:	e9 e0 02 00 00       	jmp    c000128a <dlmalloc+0x386>
c0000faa:	e8 8c fa ff ff       	call   c0000a3b <largebin_index>
c0000faf:	83 e7 02             	and    edi,0x2
c0000fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb6:	74 0a                	je     c0000fc2 <dlmalloc+0xbe>
c0000fb8:	b8 60 43 02 c0       	mov    eax,0xc0024360
c0000fbd:	e8 fd fa ff ff       	call   c0000abf <malloc_consolidate>
c0000fc2:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc9:	8b 1d a0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243a0
c0000fcf:	81 fb 94 43 02 c0    	cmp    ebx,0xc0024394
c0000fd5:	0f 84 13 01 00 00    	je     c00010ee <dlmalloc+0x1ea>
c0000fdb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fde:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fe1:	83 e7 fc             	and    edi,0xfffffffc
c0000fe4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fea:	77 4c                	ja     c0001038 <dlmalloc+0x134>
c0000fec:	3d 94 43 02 c0       	cmp    eax,0xc0024394
c0000ff1:	75 45                	jne    c0001038 <dlmalloc+0x134>
c0000ff3:	39 1d 90 43 02 c0    	cmp    DWORD PTR ds:0xc0024390,ebx
c0000ff9:	75 3d                	jne    c0001038 <dlmalloc+0x134>
c0000ffb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fff:	73 37                	jae    c0001038 <dlmalloc+0x134>
c0001001:	89 fa                	mov    edx,edi
c0001003:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001006:	29 f2                	sub    edx,esi
c0001008:	83 ce 01             	or     esi,0x1
c000100b:	89 d1                	mov    ecx,edx
c000100d:	a3 9c 43 02 c0       	mov    ds:0xc002439c,eax
c0001012:	83 c9 01             	or     ecx,0x1
c0001015:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c000101a:	a3 90 43 02 c0       	mov    ds:0xc0024390,eax
c000101f:	c7 40 08 94 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024394
c0001026:	c7 40 0c 94 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024394
c000102d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001030:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001033:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001036:	eb 15                	jmp    c000104d <dlmalloc+0x149>
c0001038:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c000103d:	39 fe                	cmp    esi,edi
c000103f:	c7 40 08 94 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024394
c0001046:	75 0d                	jne    c0001055 <dlmalloc+0x151>
c0001048:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000104d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001050:	e9 35 02 00 00       	jmp    c000128a <dlmalloc+0x386>
c0001055:	89 f8                	mov    eax,edi
c0001057:	81 ff ff 00 00 00    	cmp    edi,0xff
c000105d:	77 19                	ja     c0001078 <dlmalloc+0x174>
c000105f:	c1 e8 03             	shr    eax,0x3
c0001062:	8d 14 00             	lea    edx,[eax+eax*1]
c0001065:	83 c2 0d             	add    edx,0xd
c0001068:	8d 2c 95 58 43 02 c0 	lea    ebp,[edx*4-0x3ffdbca8]
c000106f:	8b 14 95 60 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbca0]
c0001076:	eb 46                	jmp    c00010be <dlmalloc+0x1ba>
c0001078:	e8 be f9 ff ff       	call   c0000a3b <largebin_index>
c000107d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001080:	83 c2 0d             	add    edx,0xd
c0001083:	8d 0c 95 60 43 02 c0 	lea    ecx,[edx*4-0x3ffdbca0]
c000108a:	8b 14 95 60 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbca0]
c0001091:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001094:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001098:	89 d5                	mov    ebp,edx
c000109a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109e:	74 1e                	je     c00010be <dlmalloc+0x1ba>
c00010a0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a6:	77 12                	ja     c00010ba <dlmalloc+0x1b6>
c00010a8:	83 cf 01             	or     edi,0x1
c00010ab:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010ae:	76 05                	jbe    c00010b5 <dlmalloc+0x1b1>
c00010b0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b3:	eb f6                	jmp    c00010ab <dlmalloc+0x1a7>
c00010b5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b8:	eb 04                	jmp    c00010be <dlmalloc+0x1ba>
c00010ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010be:	89 c7                	mov    edi,eax
c00010c0:	88 c1                	mov    cl,al
c00010c2:	c1 ff 05             	sar    edi,0x5
c00010c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c9:	bf 01 00 00 00       	mov    edi,0x1
c00010ce:	d3 e7                	shl    edi,cl
c00010d0:	89 f8                	mov    eax,edi
c00010d2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d6:	09 04 bd 94 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb96c],eax
c00010dd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010e0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e9:	e9 db fe ff ff       	jmp    c0000fc9 <dlmalloc+0xc5>
c00010ee:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f4:	76 78                	jbe    c000116e <dlmalloc+0x26a>
c00010f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010fa:	8d 04 c5 94 43 02 c0 	lea    eax,[eax*8-0x3ffdbc6c]
c0001101:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001104:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001107:	39 ca                	cmp    edx,ecx
c0001109:	74 63                	je     c000116e <dlmalloc+0x26a>
c000110b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001111:	83 e3 fc             	and    ebx,0xfffffffc
c0001114:	39 de                	cmp    esi,ebx
c0001116:	77 52                	ja     c000116a <dlmalloc+0x266>
c0001118:	89 df                	mov    edi,ebx
c000111a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000111d:	29 f7                	sub    edi,esi
c000111f:	01 d3                	add    ebx,edx
c0001121:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001124:	83 ff 0f             	cmp    edi,0xf
c0001127:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000112a:	8d 42 08             	lea    eax,[edx+0x8]
c000112d:	77 09                	ja     c0001138 <dlmalloc+0x234>
c000112f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001133:	e9 52 01 00 00       	jmp    c000128a <dlmalloc+0x386>
c0001138:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000113b:	83 ce 01             	or     esi,0x1
c000113e:	89 0d 9c 43 02 c0    	mov    DWORD PTR ds:0xc002439c,ecx
c0001144:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c000114a:	c7 41 08 94 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024394
c0001151:	c7 41 0c 94 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024394
c0001158:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000115b:	89 fa                	mov    edx,edi
c000115d:	83 ca 01             	or     edx,0x1
c0001160:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001163:	89 3b                	mov    DWORD PTR [ebx],edi
c0001165:	e9 20 01 00 00       	jmp    c000128a <dlmalloc+0x386>
c000116a:	89 c2                	mov    edx,eax
c000116c:	eb 99                	jmp    c0001107 <dlmalloc+0x203>
c000116e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001172:	b8 01 00 00 00       	mov    eax,0x1
c0001177:	41                   	inc    ecx
c0001178:	89 cb                	mov    ebx,ecx
c000117a:	c1 eb 05             	shr    ebx,0x5
c000117d:	8d 14 cd 8c 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc74]
c0001184:	d3 e0                	shl    eax,cl
c0001186:	8b 3c 9d 94 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb96c]
c000118d:	39 f8                	cmp    eax,edi
c000118f:	77 04                	ja     c0001195 <dlmalloc+0x291>
c0001191:	85 c0                	test   eax,eax
c0001193:	75 26                	jne    c00011bb <dlmalloc+0x2b7>
c0001195:	43                   	inc    ebx
c0001196:	83 fb 02             	cmp    ebx,0x2
c0001199:	0f 87 a6 00 00 00    	ja     c0001245 <dlmalloc+0x341>
c000119f:	8b 3c 9d 94 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb96c]
c00011a6:	85 ff                	test   edi,edi
c00011a8:	74 eb                	je     c0001195 <dlmalloc+0x291>
c00011aa:	89 d8                	mov    eax,ebx
c00011ac:	c1 e0 06             	shl    eax,0x6
c00011af:	8d 14 85 8c 43 02 c0 	lea    edx,[eax*4-0x3ffdbc74]
c00011b6:	b8 01 00 00 00       	mov    eax,0x1
c00011bb:	85 f8                	test   eax,edi
c00011bd:	75 07                	jne    c00011c6 <dlmalloc+0x2c2>
c00011bf:	83 c2 08             	add    edx,0x8
c00011c2:	01 c0                	add    eax,eax
c00011c4:	eb f5                	jmp    c00011bb <dlmalloc+0x2b7>
c00011c6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c9:	39 ca                	cmp    edx,ecx
c00011cb:	75 14                	jne    c00011e1 <dlmalloc+0x2dd>
c00011cd:	89 c1                	mov    ecx,eax
c00011cf:	83 c2 08             	add    edx,0x8
c00011d2:	f7 d1                	not    ecx
c00011d4:	21 cf                	and    edi,ecx
c00011d6:	01 c0                	add    eax,eax
c00011d8:	89 3c 9d 94 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb96c],edi
c00011df:	eb ac                	jmp    c000118d <dlmalloc+0x289>
c00011e1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e7:	83 e0 fc             	and    eax,0xfffffffc
c00011ea:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011ed:	89 c3                	mov    ebx,eax
c00011ef:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011f2:	29 f3                	sub    ebx,esi
c00011f4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f7:	83 fb 0f             	cmp    ebx,0xf
c00011fa:	8d 41 08             	lea    eax,[ecx+0x8]
c00011fd:	77 09                	ja     c0001208 <dlmalloc+0x304>
c00011ff:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001203:	e9 82 00 00 00       	jmp    c000128a <dlmalloc+0x386>
c0001208:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000120b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001211:	89 3d 9c 43 02 c0    	mov    DWORD PTR ds:0xc002439c,edi
c0001217:	89 3d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,edi
c000121d:	c7 47 08 94 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024394
c0001224:	c7 47 0c 94 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024394
c000122b:	77 06                	ja     c0001233 <dlmalloc+0x32f>
c000122d:	89 3d 90 43 02 c0    	mov    DWORD PTR ds:0xc0024390,edi
c0001233:	83 ce 01             	or     esi,0x1
c0001236:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001239:	89 d9                	mov    ecx,ebx
c000123b:	83 c9 01             	or     ecx,0x1
c000123e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001241:	89 1a                	mov    DWORD PTR [edx],ebx
c0001243:	eb 45                	jmp    c000128a <dlmalloc+0x386>
c0001245:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c000124a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000124d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001250:	83 e2 fc             	and    edx,0xfffffffc
c0001253:	39 d1                	cmp    ecx,edx
c0001255:	77 1e                	ja     c0001275 <dlmalloc+0x371>
c0001257:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000125a:	89 f3                	mov    ebx,esi
c000125c:	29 f2                	sub    edx,esi
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	83 ca 01             	or     edx,0x1
c0001264:	89 0d 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,ecx
c000126a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000126d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001270:	e9 2d fd ff ff       	jmp    c0000fa2 <dlmalloc+0x9e>
c0001275:	83 c4 1c             	add    esp,0x1c
c0001278:	89 f0                	mov    eax,esi
c000127a:	ba 60 43 02 c0       	mov    edx,0xc0024360
c000127f:	5b                   	pop    ebx
c0001280:	5e                   	pop    esi
c0001281:	5f                   	pop    edi
c0001282:	5d                   	pop    ebp
c0001283:	e9 13 fa ff ff       	jmp    c0000c9b <sYSMALLOc>
c0001288:	31 c0                	xor    eax,eax
c000128a:	83 c4 1c             	add    esp,0x1c
c000128d:	5b                   	pop    ebx
c000128e:	5e                   	pop    esi
c000128f:	5f                   	pop    edi
c0001290:	5d                   	pop    ebp
c0001291:	c3                   	ret    

c0001292 <iALLOc>:
c0001292:	55                   	push   ebp
c0001293:	89 c5                	mov    ebp,eax
c0001295:	57                   	push   edi
c0001296:	56                   	push   esi
c0001297:	53                   	push   ebx
c0001298:	83 ec 2c             	sub    esp,0x2c
c000129b:	83 3d 60 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024360,0x0
c00012a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012ae:	75 12                	jne    c00012c2 <iALLOc+0x30>
c00012b0:	b8 60 43 02 c0       	mov    eax,0xc0024360
c00012b5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b9:	e8 01 f8 ff ff       	call   c0000abf <malloc_consolidate>
c00012be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012c2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c7:	74 12                	je     c00012db <iALLOc+0x49>
c00012c9:	85 ed                	test   ebp,ebp
c00012cb:	0f 84 64 01 00 00    	je     c0001435 <iALLOc+0x1a3>
c00012d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d9:	eb 33                	jmp    c000130e <iALLOc+0x7c>
c00012db:	85 ed                	test   ebp,ebp
c00012dd:	75 14                	jne    c00012f3 <iALLOc+0x61>
c00012df:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e7:	83 c4 2c             	add    esp,0x2c
c00012ea:	5b                   	pop    ebx
c00012eb:	5e                   	pop    esi
c00012ec:	5f                   	pop    edi
c00012ed:	5d                   	pop    ebp
c00012ee:	e9 11 fc ff ff       	jmp    c0000f04 <dlmalloc>
c00012f3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012fa:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001302:	83 f8 0f             	cmp    eax,0xf
c0001305:	76 07                	jbe    c000130e <iALLOc+0x7c>
c0001307:	83 e0 f8             	and    eax,0xfffffff8
c000130a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001313:	75 09                	jne    c000131e <iALLOc+0x8c>
c0001315:	89 d0                	mov    eax,edx
c0001317:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000131a:	31 f6                	xor    esi,esi
c000131c:	eb 3b                	jmp    c0001359 <iALLOc+0xc7>
c000131e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001320:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001328:	83 c0 0b             	add    eax,0xb
c000132b:	83 f8 0f             	cmp    eax,0xf
c000132e:	76 07                	jbe    c0001337 <iALLOc+0xa5>
c0001330:	83 e0 f8             	and    eax,0xfffffff8
c0001333:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001337:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000133b:	0f af f5             	imul   esi,ebp
c000133e:	eb 25                	jmp    c0001365 <iALLOc+0xd3>
c0001340:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001342:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001345:	bb 10 00 00 00       	mov    ebx,0x10
c000134a:	83 f9 0f             	cmp    ecx,0xf
c000134d:	76 05                	jbe    c0001354 <iALLOc+0xc2>
c000134f:	83 e1 f8             	and    ecx,0xfffffff8
c0001352:	89 cb                	mov    ebx,ecx
c0001354:	01 de                	add    esi,ebx
c0001356:	83 c0 04             	add    eax,0x4
c0001359:	39 c7                	cmp    edi,eax
c000135b:	75 e3                	jne    c0001340 <iALLOc+0xae>
c000135d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001365:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001369:	83 ec 0c             	sub    esp,0xc
c000136c:	8b 1d b4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246b4
c0001372:	c7 05 b4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246b4,0x0
c000137c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001380:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001384:	50                   	push   eax
c0001385:	e8 7a fb ff ff       	call   c0000f04 <dlmalloc>
c000138a:	83 c4 10             	add    esp,0x10
c000138d:	89 1d b4 46 02 c0    	mov    DWORD PTR ds:0xc00246b4,ebx
c0001393:	85 c0                	test   eax,eax
c0001395:	0f 84 92 00 00 00    	je     c000142d <iALLOc+0x19b>
c000139b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139e:	8d 78 f8             	lea    edi,[eax-0x8]
c00013a1:	83 e3 fc             	and    ebx,0xfffffffc
c00013a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013ad:	74 1e                	je     c00013cd <iALLOc+0x13b>
c00013af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b3:	89 d9                	mov    ecx,ebx
c00013b5:	52                   	push   edx
c00013b6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013ba:	83 e9 04             	sub    ecx,0x4
c00013bd:	51                   	push   ecx
c00013be:	6a 00                	push   0x0
c00013c0:	50                   	push   eax
c00013c1:	e8 fd f2 ff ff       	call   c00006c3 <memset>
c00013c6:	83 c4 10             	add    esp,0x10
c00013c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d2:	75 14                	jne    c00013e8 <iALLOc+0x156>
c00013d4:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d7:	29 f3                	sub    ebx,esi
c00013d9:	83 cb 01             	or     ebx,0x1
c00013dc:	8d 48 08             	lea    ecx,[eax+0x8]
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e6:	89 f3                	mov    ebx,esi
c00013e8:	31 c0                	xor    eax,eax
c00013ea:	4d                   	dec    ebp
c00013eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ef:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013f2:	39 c5                	cmp    ebp,eax
c00013f4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f7:	74 2c                	je     c0001425 <iALLOc+0x193>
c00013f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013fd:	85 c9                	test   ecx,ecx
c00013ff:	75 15                	jne    c0001416 <iALLOc+0x184>
c0001401:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001404:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001407:	b9 10 00 00 00       	mov    ecx,0x10
c000140c:	83 fe 0f             	cmp    esi,0xf
c000140f:	76 05                	jbe    c0001416 <iALLOc+0x184>
c0001411:	83 e6 f8             	and    esi,0xfffffff8
c0001414:	89 f1                	mov    ecx,esi
c0001416:	89 ce                	mov    esi,ecx
c0001418:	29 cb                	sub    ebx,ecx
c000141a:	83 ce 01             	or     esi,0x1
c000141d:	40                   	inc    eax
c000141e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001421:	01 cf                	add    edi,ecx
c0001423:	eb c6                	jmp    c00013eb <iALLOc+0x159>
c0001425:	83 cb 01             	or     ebx,0x1
c0001428:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000142b:	eb 08                	jmp    c0001435 <iALLOc+0x1a3>
c000142d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001439:	83 c4 2c             	add    esp,0x2c
c000143c:	5b                   	pop    ebx
c000143d:	5e                   	pop    esi
c000143e:	5f                   	pop    edi
c000143f:	5d                   	pop    ebp
c0001440:	c3                   	ret    

c0001441 <dlrealloc>:
c0001441:	55                   	push   ebp
c0001442:	57                   	push   edi
c0001443:	56                   	push   esi
c0001444:	53                   	push   ebx
c0001445:	83 ec 1c             	sub    esp,0x1c
c0001448:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000144c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001450:	85 db                	test   ebx,ebx
c0001452:	75 10                	jne    c0001464 <dlrealloc+0x23>
c0001454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001458:	83 c4 1c             	add    esp,0x1c
c000145b:	5b                   	pop    ebx
c000145c:	5e                   	pop    esi
c000145d:	5f                   	pop    edi
c000145e:	5d                   	pop    ebp
c000145f:	e9 a0 fa ff ff       	jmp    c0000f04 <dlmalloc>
c0001464:	83 f8 df             	cmp    eax,0xffffffdf
c0001467:	76 07                	jbe    c0001470 <dlrealloc+0x2f>
c0001469:	31 db                	xor    ebx,ebx
c000146b:	e9 7c 01 00 00       	jmp    c00015ec <dlrealloc+0x1ab>
c0001470:	83 c0 0b             	add    eax,0xb
c0001473:	bf 10 00 00 00       	mov    edi,0x10
c0001478:	83 f8 0f             	cmp    eax,0xf
c000147b:	76 05                	jbe    c0001482 <dlrealloc+0x41>
c000147d:	83 e0 f8             	and    eax,0xfffffff8
c0001480:	89 c7                	mov    edi,eax
c0001482:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001485:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001488:	89 c6                	mov    esi,eax
c000148a:	83 e6 fc             	and    esi,0xfffffffc
c000148d:	a8 02                	test   al,0x2
c000148f:	75 d8                	jne    c0001469 <dlrealloc+0x28>
c0001491:	39 f7                	cmp    edi,esi
c0001493:	0f 86 15 01 00 00    	jbe    c00015ae <dlrealloc+0x16d>
c0001499:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000149d:	39 15 8c 43 02 c0    	cmp    DWORD PTR ds:0xc002438c,edx
c00014a3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014a6:	75 33                	jne    c00014db <dlrealloc+0x9a>
c00014a8:	83 e1 fc             	and    ecx,0xfffffffc
c00014ab:	01 f1                	add    ecx,esi
c00014ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014b1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b8:	77 49                	ja     c0001503 <dlrealloc+0xc2>
c00014ba:	83 e0 01             	and    eax,0x1
c00014bd:	01 fd                	add    ebp,edi
c00014bf:	09 f8                	or     eax,edi
c00014c1:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c8:	29 f8                	sub    eax,edi
c00014ca:	89 2d 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,ebp
c00014d0:	83 c8 01             	or     eax,0x1
c00014d3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d6:	e9 11 01 00 00       	jmp    c00015ec <dlrealloc+0x1ab>
c00014db:	89 c8                	mov    eax,ecx
c00014dd:	83 e0 fe             	and    eax,0xfffffffe
c00014e0:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e5:	75 1c                	jne    c0001503 <dlrealloc+0xc2>
c00014e7:	83 e1 fc             	and    ecx,0xfffffffc
c00014ea:	01 f1                	add    ecx,esi
c00014ec:	39 cf                	cmp    edi,ecx
c00014ee:	77 13                	ja     c0001503 <dlrealloc+0xc2>
c00014f0:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f6:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f9:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014fc:	89 ce                	mov    esi,ecx
c00014fe:	e9 ab 00 00 00       	jmp    c00015ae <dlrealloc+0x16d>
c0001503:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001507:	83 ec 0c             	sub    esp,0xc
c000150a:	8d 47 f9             	lea    eax,[edi-0x7]
c000150d:	50                   	push   eax
c000150e:	e8 f1 f9 ff ff       	call   c0000f04 <dlmalloc>
c0001513:	83 c4 10             	add    esp,0x10
c0001516:	89 c1                	mov    ecx,eax
c0001518:	85 c0                	test   eax,eax
c000151a:	0f 84 49 ff ff ff    	je     c0001469 <dlrealloc+0x28>
c0001520:	8d 40 f8             	lea    eax,[eax-0x8]
c0001523:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001527:	39 c2                	cmp    edx,eax
c0001529:	75 0a                	jne    c0001535 <dlrealloc+0xf4>
c000152b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152e:	83 e0 fc             	and    eax,0xfffffffc
c0001531:	01 c6                	add    esi,eax
c0001533:	eb 79                	jmp    c00015ae <dlrealloc+0x16d>
c0001535:	83 ee 04             	sub    esi,0x4
c0001538:	83 fe 27             	cmp    esi,0x27
c000153b:	76 16                	jbe    c0001553 <dlrealloc+0x112>
c000153d:	50                   	push   eax
c000153e:	56                   	push   esi
c000153f:	53                   	push   ebx
c0001540:	51                   	push   ecx
c0001541:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001545:	e8 43 f1 ff ff       	call   c000068d <memcpy>
c000154a:	83 c4 10             	add    esp,0x10
c000154d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001551:	eb 43                	jmp    c0001596 <dlrealloc+0x155>
c0001553:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001555:	83 fe 13             	cmp    esi,0x13
c0001558:	89 01                	mov    DWORD PTR [ecx],eax
c000155a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000155d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001560:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001563:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001566:	76 2e                	jbe    c0001596 <dlrealloc+0x155>
c0001568:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000156b:	83 fe 1b             	cmp    esi,0x1b
c000156e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001571:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001574:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001577:	76 1d                	jbe    c0001596 <dlrealloc+0x155>
c0001579:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000157c:	83 fe 23             	cmp    esi,0x23
c000157f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001582:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001585:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001588:	76 0c                	jbe    c0001596 <dlrealloc+0x155>
c000158a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000158d:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001590:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001593:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001596:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000159a:	83 ec 0c             	sub    esp,0xc
c000159d:	53                   	push   ebx
c000159e:	e8 03 f6 ff ff       	call   c0000ba6 <dlfree>
c00015a3:	83 c4 10             	add    esp,0x10
c00015a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015aa:	89 cb                	mov    ebx,ecx
c00015ac:	eb 3e                	jmp    c00015ec <dlrealloc+0x1ab>
c00015ae:	89 f2                	mov    edx,esi
c00015b0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b3:	29 fa                	sub    edx,edi
c00015b5:	83 e1 01             	and    ecx,0x1
c00015b8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015bc:	83 fa 0f             	cmp    edx,0xf
c00015bf:	77 0b                	ja     c00015cc <dlrealloc+0x18b>
c00015c1:	09 ce                	or     esi,ecx
c00015c3:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ca:	eb 20                	jmp    c00015ec <dlrealloc+0x1ab>
c00015cc:	01 fd                	add    ebp,edi
c00015ce:	83 ca 01             	or     edx,0x1
c00015d1:	09 cf                	or     edi,ecx
c00015d3:	83 ec 0c             	sub    esp,0xc
c00015d6:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015dc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e0:	83 c5 08             	add    ebp,0x8
c00015e3:	55                   	push   ebp
c00015e4:	e8 bd f5 ff ff       	call   c0000ba6 <dlfree>
c00015e9:	83 c4 10             	add    esp,0x10
c00015ec:	83 c4 1c             	add    esp,0x1c
c00015ef:	89 d8                	mov    eax,ebx
c00015f1:	5b                   	pop    ebx
c00015f2:	5e                   	pop    esi
c00015f3:	5f                   	pop    edi
c00015f4:	5d                   	pop    ebp
c00015f5:	c3                   	ret    

c00015f6 <dlmemalign>:
c00015f6:	55                   	push   ebp
c00015f7:	57                   	push   edi
c00015f8:	56                   	push   esi
c00015f9:	53                   	push   ebx
c00015fa:	83 ec 0c             	sub    esp,0xc
c00015fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001601:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001605:	83 fa 08             	cmp    edx,0x8
c0001608:	77 10                	ja     c000161a <dlmemalign+0x24>
c000160a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160e:	83 c4 0c             	add    esp,0xc
c0001611:	5b                   	pop    ebx
c0001612:	5e                   	pop    esi
c0001613:	5f                   	pop    edi
c0001614:	5d                   	pop    ebp
c0001615:	e9 ea f8 ff ff       	jmp    c0000f04 <dlmalloc>
c000161a:	bf 10 00 00 00       	mov    edi,0x10
c000161f:	83 fa 0f             	cmp    edx,0xf
c0001622:	76 13                	jbe    c0001637 <dlmemalign+0x41>
c0001624:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001627:	85 d1                	test   ecx,edx
c0001629:	75 04                	jne    c000162f <dlmemalign+0x39>
c000162b:	89 d7                	mov    edi,edx
c000162d:	eb 08                	jmp    c0001637 <dlmemalign+0x41>
c000162f:	39 d7                	cmp    edi,edx
c0001631:	73 04                	jae    c0001637 <dlmemalign+0x41>
c0001633:	01 ff                	add    edi,edi
c0001635:	eb f8                	jmp    c000162f <dlmemalign+0x39>
c0001637:	83 f8 df             	cmp    eax,0xffffffdf
c000163a:	76 07                	jbe    c0001643 <dlmemalign+0x4d>
c000163c:	31 c0                	xor    eax,eax
c000163e:	e9 ce 00 00 00       	jmp    c0001711 <dlmemalign+0x11b>
c0001643:	83 c0 0b             	add    eax,0xb
c0001646:	bd 10 00 00 00       	mov    ebp,0x10
c000164b:	83 f8 0f             	cmp    eax,0xf
c000164e:	76 05                	jbe    c0001655 <dlmemalign+0x5f>
c0001650:	83 e0 f8             	and    eax,0xfffffff8
c0001653:	89 c5                	mov    ebp,eax
c0001655:	83 ec 0c             	sub    esp,0xc
c0001658:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000165c:	50                   	push   eax
c000165d:	e8 a2 f8 ff ff       	call   c0000f04 <dlmalloc>
c0001662:	83 c4 10             	add    esp,0x10
c0001665:	89 c1                	mov    ecx,eax
c0001667:	85 c0                	test   eax,eax
c0001669:	74 d1                	je     c000163c <dlmemalign+0x46>
c000166b:	31 d2                	xor    edx,edx
c000166d:	8d 70 f8             	lea    esi,[eax-0x8]
c0001670:	f7 f7                	div    edi
c0001672:	85 d2                	test   edx,edx
c0001674:	74 62                	je     c00016d8 <dlmemalign+0xe2>
c0001676:	89 f8                	mov    eax,edi
c0001678:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000167c:	f7 d8                	neg    eax
c000167e:	21 c3                	and    ebx,eax
c0001680:	83 eb 08             	sub    ebx,0x8
c0001683:	89 d8                	mov    eax,ebx
c0001685:	29 f0                	sub    eax,esi
c0001687:	83 f8 0f             	cmp    eax,0xf
c000168a:	77 02                	ja     c000168e <dlmemalign+0x98>
c000168c:	01 fb                	add    ebx,edi
c000168e:	89 d8                	mov    eax,ebx
c0001690:	29 f0                	sub    eax,esi
c0001692:	89 c6                	mov    esi,eax
c0001694:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001697:	89 c2                	mov    edx,eax
c0001699:	83 e2 fc             	and    edx,0xfffffffc
c000169c:	29 f2                	sub    edx,esi
c000169e:	a8 02                	test   al,0x2
c00016a0:	74 10                	je     c00016b2 <dlmemalign+0xbc>
c00016a2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a5:	83 ca 02             	or     edx,0x2
c00016a8:	8d 43 08             	lea    eax,[ebx+0x8]
c00016ab:	89 33                	mov    DWORD PTR [ebx],esi
c00016ad:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016b0:	eb 5f                	jmp    c0001711 <dlmemalign+0x11b>
c00016b2:	89 d0                	mov    eax,edx
c00016b4:	83 ec 0c             	sub    esp,0xc
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016bd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016c2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c5:	83 e0 01             	and    eax,0x1
c00016c8:	09 f0                	or     eax,esi
c00016ca:	89 de                	mov    esi,ebx
c00016cc:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cf:	51                   	push   ecx
c00016d0:	e8 d1 f4 ff ff       	call   c0000ba6 <dlfree>
c00016d5:	83 c4 10             	add    esp,0x10
c00016d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016db:	a8 02                	test   al,0x2
c00016dd:	75 2f                	jne    c000170e <dlmemalign+0x118>
c00016df:	83 e0 fc             	and    eax,0xfffffffc
c00016e2:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e5:	39 c2                	cmp    edx,eax
c00016e7:	73 25                	jae    c000170e <dlmemalign+0x118>
c00016e9:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016ec:	29 e8                	sub    eax,ebp
c00016ee:	83 c8 01             	or     eax,0x1
c00016f1:	83 ec 0c             	sub    esp,0xc
c00016f4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016f7:	83 c2 08             	add    edx,0x8
c00016fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016fd:	83 e0 01             	and    eax,0x1
c0001700:	09 c5                	or     ebp,eax
c0001702:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001705:	52                   	push   edx
c0001706:	e8 9b f4 ff ff       	call   c0000ba6 <dlfree>
c000170b:	83 c4 10             	add    esp,0x10
c000170e:	8d 46 08             	lea    eax,[esi+0x8]
c0001711:	83 c4 0c             	add    esp,0xc
c0001714:	5b                   	pop    ebx
c0001715:	5e                   	pop    esi
c0001716:	5f                   	pop    edi
c0001717:	5d                   	pop    ebp
c0001718:	c3                   	ret    

c0001719 <dlcalloc>:
c0001719:	53                   	push   ebx
c000171a:	83 ec 14             	sub    esp,0x14
c000171d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001721:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001726:	50                   	push   eax
c0001727:	e8 d8 f7 ff ff       	call   c0000f04 <dlmalloc>
c000172c:	83 c4 10             	add    esp,0x10
c000172f:	89 c3                	mov    ebx,eax
c0001731:	85 c0                	test   eax,eax
c0001733:	74 77                	je     c00017ac <dlcalloc+0x93>
c0001735:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001738:	89 d0                	mov    eax,edx
c000173a:	83 e0 fc             	and    eax,0xfffffffc
c000173d:	80 e2 02             	and    dl,0x2
c0001740:	75 5a                	jne    c000179c <dlcalloc+0x83>
c0001742:	83 e8 04             	sub    eax,0x4
c0001745:	83 f8 27             	cmp    eax,0x27
c0001748:	76 03                	jbe    c000174d <dlcalloc+0x34>
c000174a:	51                   	push   ecx
c000174b:	eb 53                	jmp    c00017a0 <dlcalloc+0x87>
c000174d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001753:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000175a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001761:	83 f8 13             	cmp    eax,0x13
c0001764:	76 46                	jbe    c00017ac <dlcalloc+0x93>
c0001766:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000176d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001774:	83 f8 1b             	cmp    eax,0x1b
c0001777:	76 33                	jbe    c00017ac <dlcalloc+0x93>
c0001779:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001780:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001787:	83 f8 23             	cmp    eax,0x23
c000178a:	76 20                	jbe    c00017ac <dlcalloc+0x93>
c000178c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001793:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000179a:	eb 10                	jmp    c00017ac <dlcalloc+0x93>
c000179c:	83 e8 08             	sub    eax,0x8
c000179f:	52                   	push   edx
c00017a0:	50                   	push   eax
c00017a1:	6a 00                	push   0x0
c00017a3:	53                   	push   ebx
c00017a4:	e8 1a ef ff ff       	call   c00006c3 <memset>
c00017a9:	83 c4 10             	add    esp,0x10
c00017ac:	83 c4 08             	add    esp,0x8
c00017af:	89 d8                	mov    eax,ebx
c00017b1:	5b                   	pop    ebx
c00017b2:	c3                   	ret    

c00017b3 <dlcfree>:
c00017b3:	e9 ee f3 ff ff       	jmp    c0000ba6 <dlfree>

c00017b8 <dlindependent_calloc>:
c00017b8:	83 ec 28             	sub    esp,0x28
c00017bb:	b9 03 00 00 00       	mov    ecx,0x3
c00017c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017d4:	e8 b9 fa ff ff       	call   c0001292 <iALLOc>
c00017d9:	83 c4 2c             	add    esp,0x2c
c00017dc:	c3                   	ret    

c00017dd <dlindependent_comalloc>:
c00017dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e5:	31 c9                	xor    ecx,ecx
c00017e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017ef:	e9 9e fa ff ff       	jmp    c0001292 <iALLOc>

c00017f4 <dlvalloc>:
c00017f4:	83 ec 0c             	sub    esp,0xc
c00017f7:	83 3d 60 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024360,0x0
c00017fe:	75 0a                	jne    c000180a <dlvalloc+0x16>
c0001800:	b8 60 43 02 c0       	mov    eax,0xc0024360
c0001805:	e8 b5 f2 ff ff       	call   c0000abf <malloc_consolidate>
c000180a:	50                   	push   eax
c000180b:	50                   	push   eax
c000180c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001810:	ff 35 bc 46 02 c0    	push   DWORD PTR ds:0xc00246bc
c0001816:	e8 db fd ff ff       	call   c00015f6 <dlmemalign>
c000181b:	83 c4 1c             	add    esp,0x1c
c000181e:	c3                   	ret    

c000181f <dlpvalloc>:
c000181f:	83 ec 0c             	sub    esp,0xc
c0001822:	83 3d 60 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024360,0x0
c0001829:	75 0a                	jne    c0001835 <dlpvalloc+0x16>
c000182b:	b8 60 43 02 c0       	mov    eax,0xc0024360
c0001830:	e8 8a f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001835:	52                   	push   edx
c0001836:	a1 bc 46 02 c0       	mov    eax,ds:0xc00246bc
c000183b:	52                   	push   edx
c000183c:	89 c1                	mov    ecx,eax
c000183e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001842:	f7 d9                	neg    ecx
c0001844:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001848:	21 ca                	and    edx,ecx
c000184a:	52                   	push   edx
c000184b:	50                   	push   eax
c000184c:	e8 a5 fd ff ff       	call   c00015f6 <dlmemalign>
c0001851:	83 c4 1c             	add    esp,0x1c
c0001854:	c3                   	ret    

c0001855 <dlmalloc_trim>:
c0001855:	b8 60 43 02 c0       	mov    eax,0xc0024360
c000185a:	e8 60 f2 ff ff       	call   c0000abf <malloc_consolidate>
c000185f:	31 c0                	xor    eax,eax
c0001861:	c3                   	ret    

c0001862 <dlmalloc_usable_size>:
c0001862:	53                   	push   ebx
c0001863:	31 c0                	xor    eax,eax
c0001865:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001869:	85 c9                	test   ecx,ecx
c000186b:	74 24                	je     c0001891 <dlmalloc_usable_size+0x2f>
c000186d:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001870:	f6 c2 02             	test   dl,0x2
c0001873:	74 08                	je     c000187d <dlmalloc_usable_size+0x1b>
c0001875:	83 e2 fc             	and    edx,0xfffffffc
c0001878:	8d 42 f8             	lea    eax,[edx-0x8]
c000187b:	eb 14                	jmp    c0001891 <dlmalloc_usable_size+0x2f>
c000187d:	89 d3                	mov    ebx,edx
c000187f:	31 c0                	xor    eax,eax
c0001881:	83 e3 fe             	and    ebx,0xfffffffe
c0001884:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001889:	74 06                	je     c0001891 <dlmalloc_usable_size+0x2f>
c000188b:	83 e2 fc             	and    edx,0xfffffffc
c000188e:	8d 42 fc             	lea    eax,[edx-0x4]
c0001891:	5b                   	pop    ebx
c0001892:	c3                   	ret    

c0001893 <dlmallinfo>:
c0001893:	55                   	push   ebp
c0001894:	57                   	push   edi
c0001895:	56                   	push   esi
c0001896:	53                   	push   ebx
c0001897:	83 ec 08             	sub    esp,0x8
c000189a:	83 3d 8c 43 02 c0 00 	cmp    DWORD PTR ds:0xc002438c,0x0
c00018a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a5:	75 0a                	jne    c00018b1 <dlmallinfo+0x1e>
c00018a7:	b8 60 43 02 c0       	mov    eax,0xc0024360
c00018ac:	e8 0e f2 ff ff       	call   c0000abf <malloc_consolidate>
c00018b1:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c00018b6:	31 ed                	xor    ebp,ebp
c00018b8:	31 c9                	xor    ecx,ecx
c00018ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018bd:	83 e0 fc             	and    eax,0xfffffffc
c00018c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c4:	31 c0                	xor    eax,eax
c00018c6:	8b 14 85 64 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc9c]
c00018cd:	85 d2                	test   edx,edx
c00018cf:	74 0e                	je     c00018df <dlmallinfo+0x4c>
c00018d1:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d4:	45                   	inc    ebp
c00018d5:	83 e6 fc             	and    esi,0xfffffffc
c00018d8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018db:	01 f1                	add    ecx,esi
c00018dd:	eb ee                	jmp    c00018cd <dlmallinfo+0x3a>
c00018df:	40                   	inc    eax
c00018e0:	83 f8 0a             	cmp    eax,0xa
c00018e3:	75 e1                	jne    c00018c6 <dlmallinfo+0x33>
c00018e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e9:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f3:	b8 94 43 02 c0       	mov    eax,0xc0024394
c00018f8:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018fb:	39 f0                	cmp    eax,esi
c00018fd:	74 10                	je     c000190f <dlmallinfo+0x7c>
c00018ff:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001902:	ff 04 24             	inc    DWORD PTR [esp]
c0001905:	83 e7 fc             	and    edi,0xfffffffc
c0001908:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000190b:	01 fa                	add    edx,edi
c000190d:	eb ec                	jmp    c00018fb <dlmallinfo+0x68>
c000190f:	83 c0 08             	add    eax,0x8
c0001912:	3d 8c 46 02 c0       	cmp    eax,0xc002468c
c0001917:	75 df                	jne    c00018f8 <dlmallinfo+0x65>
c0001919:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000191e:	8b 35 b0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246b0
c0001924:	89 03                	mov    DWORD PTR [ebx],eax
c0001926:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001929:	29 d0                	sub    eax,edx
c000192b:	8b 35 c4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246c4
c0001931:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001934:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001937:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000193a:	8b 35 d4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246d4
c0001940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001944:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001947:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000194a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000194d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001950:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001953:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001956:	83 c4 08             	add    esp,0x8
c0001959:	89 d8                	mov    eax,ebx
c000195b:	5b                   	pop    ebx
c000195c:	5e                   	pop    esi
c000195d:	5f                   	pop    edi
c000195e:	5d                   	pop    ebp
c000195f:	c2 04 00             	ret    0x4

c0001962 <dlmalloc_stats>:
c0001962:	83 ec 30             	sub    esp,0x30
c0001965:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001969:	50                   	push   eax
c000196a:	e8 24 ff ff ff       	call   c0001893 <dlmallinfo>
c000196f:	83 c4 30             	add    esp,0x30
c0001972:	c3                   	ret    

c0001973 <dlmallopt>:
c0001973:	56                   	push   esi
c0001974:	b8 60 43 02 c0       	mov    eax,0xc0024360
c0001979:	53                   	push   ebx
c000197a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001982:	e8 38 f1 ff ff       	call   c0000abf <malloc_consolidate>
c0001987:	8d 46 04             	lea    eax,[esi+0x4]
c000198a:	83 f8 05             	cmp    eax,0x5
c000198d:	77 67                	ja     c00019f6 <dlmallopt+0x83>
c000198f:	ff 24 85 04 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbfc]
c0001996:	83 fb 50             	cmp    ebx,0x50
c0001999:	77 5b                	ja     c00019f6 <dlmallopt+0x83>
c000199b:	ba 08 00 00 00       	mov    edx,0x8
c00019a0:	85 db                	test   ebx,ebx
c00019a2:	74 12                	je     c00019b6 <dlmallopt+0x43>
c00019a4:	83 c3 0b             	add    ebx,0xb
c00019a7:	ba 10 00 00 00       	mov    edx,0x10
c00019ac:	83 fb 0f             	cmp    ebx,0xf
c00019af:	76 05                	jbe    c00019b6 <dlmallopt+0x43>
c00019b1:	89 da                	mov    edx,ebx
c00019b3:	83 e2 f8             	and    edx,0xfffffff8
c00019b6:	a1 60 43 02 c0       	mov    eax,ds:0xc0024360
c00019bb:	83 e0 03             	and    eax,0x3
c00019be:	09 d0                	or     eax,edx
c00019c0:	a3 60 43 02 c0       	mov    ds:0xc0024360,eax
c00019c5:	eb 31                	jmp    c00019f8 <dlmallopt+0x85>
c00019c7:	89 1d a4 46 02 c0    	mov    DWORD PTR ds:0xc00246a4,ebx
c00019cd:	eb 06                	jmp    c00019d5 <dlmallopt+0x62>
c00019cf:	89 1d a8 46 02 c0    	mov    DWORD PTR ds:0xc00246a8,ebx
c00019d5:	be 01 00 00 00       	mov    esi,0x1
c00019da:	eb 1c                	jmp    c00019f8 <dlmallopt+0x85>
c00019dc:	89 1d ac 46 02 c0    	mov    DWORD PTR ds:0xc00246ac,ebx
c00019e2:	eb f1                	jmp    c00019d5 <dlmallopt+0x62>
c00019e4:	31 f6                	xor    esi,esi
c00019e6:	85 db                	test   ebx,ebx
c00019e8:	75 0e                	jne    c00019f8 <dlmallopt+0x85>
c00019ea:	c7 05 b4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246b4,0x0
c00019f4:	eb df                	jmp    c00019d5 <dlmallopt+0x62>
c00019f6:	31 f6                	xor    esi,esi
c00019f8:	5b                   	pop    ebx
c00019f9:	89 f0                	mov    eax,esi
c00019fb:	5e                   	pop    esi
c00019fc:	c3                   	ret    

c00019fd <disk_status>:
c00019fd:	31 c0                	xor    eax,eax
c00019ff:	c3                   	ret    

c0001a00 <disk_initialize>:
c0001a00:	31 c0                	xor    eax,eax
c0001a02:	c3                   	ret    

c0001a03 <disk_read>:
c0001a03:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a08:	0f b6 04 85 80 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda380]
c0001a10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a14:	e9 89 8d 01 00       	jmp    c001a7a2 <fatWrapperReadDisk>

c0001a19 <disk_write>:
c0001a19:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1e:	0f b6 04 85 80 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda380]
c0001a26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a2a:	e9 be 8d 01 00       	jmp    c001a7ed <fatWrapperWriteDisk>

c0001a2f <disk_ioctl>:
c0001a2f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3d:	0f b6 04 85 80 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda380]
c0001a45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a49:	e9 ea 8d 01 00       	jmp    c001a838 <fatWrapperIoctl>

c0001a4e <ld_word>:
c0001a4e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a52:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a55:	c1 e2 08             	shl    edx,0x8
c0001a58:	09 d0                	or     eax,edx
c0001a5a:	c3                   	ret    

c0001a5b <ld_dword>:
c0001a5b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5f:	89 d1                	mov    ecx,edx
c0001a61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a65:	c1 e1 08             	shl    ecx,0x8
c0001a68:	09 ca                	or     edx,ecx
c0001a6a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6d:	c1 e2 08             	shl    edx,0x8
c0001a70:	09 d0                	or     eax,edx
c0001a72:	c3                   	ret    

c0001a73 <ld_qword>:
c0001a73:	57                   	push   edi
c0001a74:	56                   	push   esi
c0001a75:	53                   	push   ebx
c0001a76:	31 db                	xor    ebx,ebx
c0001a78:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a7b:	89 df                	mov    edi,ebx
c0001a7d:	89 ce                	mov    esi,ecx
c0001a7f:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a83:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a87:	c1 e6 08             	shl    esi,0x8
c0001a8a:	09 f2                	or     edx,esi
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a92:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a96:	c1 e6 08             	shl    esi,0x8
c0001a99:	09 f2                	or     edx,esi
c0001a9b:	89 d6                	mov    esi,edx
c0001a9d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aa1:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	89 fb                	mov    ebx,edi
c0001aaa:	09 f2                	or     edx,esi
c0001aac:	89 d1                	mov    ecx,edx
c0001aae:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab2:	89 da                	mov    edx,ebx
c0001ab4:	5b                   	pop    ebx
c0001ab5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ab8:	c1 e1 08             	shl    ecx,0x8
c0001abb:	5e                   	pop    esi
c0001abc:	09 c8                	or     eax,ecx
c0001abe:	5f                   	pop    edi
c0001abf:	c3                   	ret    

c0001ac0 <st_word>:
c0001ac0:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac3:	c3                   	ret    

c0001ac4 <st_dword>:
c0001ac4:	89 10                	mov    DWORD PTR [eax],edx
c0001ac6:	c3                   	ret    

c0001ac7 <st_qword>:
c0001ac7:	89 10                	mov    DWORD PTR [eax],edx
c0001ac9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001acc:	c3                   	ret    

c0001acd <mem_cpy>:
c0001acd:	85 c9                	test   ecx,ecx
c0001acf:	74 10                	je     c0001ae1 <mem_cpy+0x14>
c0001ad1:	57                   	push   edi
c0001ad2:	01 c1                	add    ecx,eax
c0001ad4:	56                   	push   esi
c0001ad5:	89 c7                	mov    edi,eax
c0001ad7:	89 d6                	mov    esi,edx
c0001ad9:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ada:	39 f9                	cmp    ecx,edi
c0001adc:	75 fb                	jne    c0001ad9 <mem_cpy+0xc>
c0001ade:	5e                   	pop    esi
c0001adf:	5f                   	pop    edi
c0001ae0:	c3                   	ret    
c0001ae1:	c3                   	ret    

c0001ae2 <mem_set>:
c0001ae2:	01 c1                	add    ecx,eax
c0001ae4:	40                   	inc    eax
c0001ae5:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae8:	39 c8                	cmp    eax,ecx
c0001aea:	75 f8                	jne    c0001ae4 <mem_set+0x2>
c0001aec:	c3                   	ret    

c0001aed <mem_cmp>:
c0001aed:	57                   	push   edi
c0001aee:	56                   	push   esi
c0001aef:	89 c6                	mov    esi,eax
c0001af1:	53                   	push   ebx
c0001af2:	46                   	inc    esi
c0001af3:	42                   	inc    edx
c0001af4:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af8:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001afc:	29 fb                	sub    ebx,edi
c0001afe:	89 cf                	mov    edi,ecx
c0001b00:	29 f7                	sub    edi,esi
c0001b02:	01 c7                	add    edi,eax
c0001b04:	74 04                	je     c0001b0a <mem_cmp+0x1d>
c0001b06:	85 db                	test   ebx,ebx
c0001b08:	74 e8                	je     c0001af2 <mem_cmp+0x5>
c0001b0a:	89 d8                	mov    eax,ebx
c0001b0c:	5b                   	pop    ebx
c0001b0d:	5e                   	pop    esi
c0001b0e:	5f                   	pop    edi
c0001b0f:	c3                   	ret    

c0001b10 <chk_chr>:
c0001b10:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b13:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b16:	74 07                	je     c0001b1f <chk_chr+0xf>
c0001b18:	39 d1                	cmp    ecx,edx
c0001b1a:	74 03                	je     c0001b1f <chk_chr+0xf>
c0001b1c:	40                   	inc    eax
c0001b1d:	eb f1                	jmp    c0001b10 <chk_chr>
c0001b1f:	89 c8                	mov    eax,ecx
c0001b21:	c3                   	ret    

c0001b22 <dbc_1st>:
c0001b22:	31 c0                	xor    eax,eax
c0001b24:	c3                   	ret    

c0001b25 <dbc_2nd>:
c0001b25:	31 c0                	xor    eax,eax
c0001b27:	c3                   	ret    

c0001b28 <tchar2uni>:
c0001b28:	57                   	push   edi
c0001b29:	89 c7                	mov    edi,eax
c0001b2b:	56                   	push   esi
c0001b2c:	53                   	push   ebx
c0001b2d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b31:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b34:	84 c9                	test   cl,cl
c0001b36:	78 0a                	js     c0001b42 <tchar2uni+0x1a>
c0001b38:	0f b6 d1             	movzx  edx,cl
c0001b3b:	89 f3                	mov    ebx,esi
c0001b3d:	e9 9f 00 00 00       	jmp    c0001be1 <tchar2uni+0xb9>
c0001b42:	88 ca                	mov    dl,cl
c0001b44:	83 e2 e0             	and    edx,0xffffffe0
c0001b47:	80 fa c0             	cmp    dl,0xc0
c0001b4a:	75 0c                	jne    c0001b58 <tchar2uni+0x30>
c0001b4c:	89 ca                	mov    edx,ecx
c0001b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0001b53:	83 e2 1f             	and    edx,0x1f
c0001b56:	eb 2e                	jmp    c0001b86 <tchar2uni+0x5e>
c0001b58:	88 ca                	mov    dl,cl
c0001b5a:	83 e2 f0             	and    edx,0xfffffff0
c0001b5d:	80 fa e0             	cmp    dl,0xe0
c0001b60:	75 0c                	jne    c0001b6e <tchar2uni+0x46>
c0001b62:	89 ca                	mov    edx,ecx
c0001b64:	b9 02 00 00 00       	mov    ecx,0x2
c0001b69:	83 e2 0f             	and    edx,0xf
c0001b6c:	eb 18                	jmp    c0001b86 <tchar2uni+0x5e>
c0001b6e:	88 ca                	mov    dl,cl
c0001b70:	83 e2 f8             	and    edx,0xfffffff8
c0001b73:	88 d0                	mov    al,dl
c0001b75:	83 ca ff             	or     edx,0xffffffff
c0001b78:	3c f0                	cmp    al,0xf0
c0001b7a:	75 6c                	jne    c0001be8 <tchar2uni+0xc0>
c0001b7c:	89 ca                	mov    edx,ecx
c0001b7e:	b9 03 00 00 00       	mov    ecx,0x3
c0001b83:	83 e2 07             	and    edx,0x7
c0001b86:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b8a:	46                   	inc    esi
c0001b8b:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8e:	88 c8                	mov    al,cl
c0001b90:	83 e0 c0             	and    eax,0xffffffc0
c0001b93:	3c 80                	cmp    al,0x80
c0001b95:	75 4e                	jne    c0001be5 <tchar2uni+0xbd>
c0001b97:	c1 e2 06             	shl    edx,0x6
c0001b9a:	83 e1 3f             	and    ecx,0x3f
c0001b9d:	09 ca                	or     edx,ecx
c0001b9f:	39 de                	cmp    esi,ebx
c0001ba1:	75 e7                	jne    c0001b8a <tchar2uni+0x62>
c0001ba3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001baf:	76 34                	jbe    c0001be5 <tchar2uni+0xbd>
c0001bb1:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bb4:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bba:	77 29                	ja     c0001be5 <tchar2uni+0xbd>
c0001bbc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bc2:	76 1d                	jbe    c0001be1 <tchar2uni+0xb9>
c0001bc4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bca:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bd0:	c1 e1 06             	shl    ecx,0x6
c0001bd3:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd9:	09 ca                	or     edx,ecx
c0001bdb:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001be1:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be3:	eb 03                	jmp    c0001be8 <tchar2uni+0xc0>
c0001be5:	83 ca ff             	or     edx,0xffffffff
c0001be8:	5b                   	pop    ebx
c0001be9:	89 d0                	mov    eax,edx
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    

c0001bee <put_utf>:
c0001bee:	53                   	push   ebx
c0001bef:	83 f8 7f             	cmp    eax,0x7f
c0001bf2:	89 c3                	mov    ebx,eax
c0001bf4:	b0 00                	mov    al,0x0
c0001bf6:	77 11                	ja     c0001c09 <put_utf+0x1b>
c0001bf8:	85 c9                	test   ecx,ecx
c0001bfa:	0f 84 e5 00 00 00    	je     c0001ce5 <put_utf+0xf7>
c0001c00:	88 1a                	mov    BYTE PTR [edx],bl
c0001c02:	b0 01                	mov    al,0x1
c0001c04:	e9 dc 00 00 00       	jmp    c0001ce5 <put_utf+0xf7>
c0001c09:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0f:	77 23                	ja     c0001c34 <put_utf+0x46>
c0001c11:	83 f9 01             	cmp    ecx,0x1
c0001c14:	0f 86 cb 00 00 00    	jbe    c0001ce5 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	83 e3 3f             	and    ebx,0x3f
c0001c1f:	c1 e8 06             	shr    eax,0x6
c0001c22:	83 cb 80             	or     ebx,0xffffff80
c0001c25:	83 c8 c0             	or     eax,0xffffffc0
c0001c28:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c2b:	88 02                	mov    BYTE PTR [edx],al
c0001c2d:	b0 02                	mov    al,0x2
c0001c2f:	e9 b1 00 00 00       	jmp    c0001ce5 <put_utf+0xf7>
c0001c34:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c3a:	77 40                	ja     c0001c7c <put_utf+0x8e>
c0001c3c:	83 f9 02             	cmp    ecx,0x2
c0001c3f:	0f 86 a0 00 00 00    	jbe    c0001ce5 <put_utf+0xf7>
c0001c45:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c4b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c51:	0f 86 8e 00 00 00    	jbe    c0001ce5 <put_utf+0xf7>
c0001c57:	89 d8                	mov    eax,ebx
c0001c59:	c1 e8 0c             	shr    eax,0xc
c0001c5c:	83 c8 e0             	or     eax,0xffffffe0
c0001c5f:	88 02                	mov    BYTE PTR [edx],al
c0001c61:	89 d8                	mov    eax,ebx
c0001c63:	c1 e8 06             	shr    eax,0x6
c0001c66:	83 e3 3f             	and    ebx,0x3f
c0001c69:	83 e0 3f             	and    eax,0x3f
c0001c6c:	83 cb 80             	or     ebx,0xffffff80
c0001c6f:	83 c8 80             	or     eax,0xffffff80
c0001c72:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c75:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c78:	b0 03                	mov    al,0x3
c0001c7a:	eb 69                	jmp    c0001ce5 <put_utf+0xf7>
c0001c7c:	83 f9 03             	cmp    ecx,0x3
c0001c7f:	76 64                	jbe    c0001ce5 <put_utf+0xf7>
c0001c81:	89 d9                	mov    ecx,ebx
c0001c83:	66 31 c9             	xor    cx,cx
c0001c86:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c8c:	0f b7 c3             	movzx  eax,bx
c0001c8f:	c1 e9 06             	shr    ecx,0x6
c0001c92:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c98:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c9e:	77 43                	ja     c0001ce3 <put_utf+0xf5>
c0001ca0:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca6:	77 3b                	ja     c0001ce3 <put_utf+0xf5>
c0001ca8:	09 cb                	or     ebx,ecx
c0001caa:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cb0:	89 d8                	mov    eax,ebx
c0001cb2:	c1 e8 12             	shr    eax,0x12
c0001cb5:	83 c8 f0             	or     eax,0xfffffff0
c0001cb8:	88 02                	mov    BYTE PTR [edx],al
c0001cba:	89 d8                	mov    eax,ebx
c0001cbc:	c1 e8 0c             	shr    eax,0xc
c0001cbf:	83 e0 3f             	and    eax,0x3f
c0001cc2:	83 c8 80             	or     eax,0xffffff80
c0001cc5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc8:	89 d8                	mov    eax,ebx
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 e3 3f             	and    ebx,0x3f
c0001cd0:	83 e0 3f             	and    eax,0x3f
c0001cd3:	83 cb 80             	or     ebx,0xffffff80
c0001cd6:	83 c8 80             	or     eax,0xffffff80
c0001cd9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cdc:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdf:	b0 04                	mov    al,0x4
c0001ce1:	eb 02                	jmp    c0001ce5 <put_utf+0xf7>
c0001ce3:	31 c0                	xor    eax,eax
c0001ce5:	5b                   	pop    ebx
c0001ce6:	c3                   	ret    

c0001ce7 <clst2sect>:
c0001ce7:	89 c1                	mov    ecx,eax
c0001ce9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cec:	83 ea 02             	sub    edx,0x2
c0001cef:	83 e8 02             	sub    eax,0x2
c0001cf2:	39 d0                	cmp    eax,edx
c0001cf4:	76 0d                	jbe    c0001d03 <clst2sect+0x1c>
c0001cf6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cfa:	f7 e2                	mul    edx
c0001cfc:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cff:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d02:	c3                   	ret    
c0001d03:	31 c0                	xor    eax,eax
c0001d05:	31 d2                	xor    edx,edx
c0001d07:	c3                   	ret    

c0001d08 <clmt_clust>:
c0001d08:	57                   	push   edi
c0001d09:	89 cf                	mov    edi,ecx
c0001d0b:	56                   	push   esi
c0001d0c:	89 d6                	mov    esi,edx
c0001d0e:	53                   	push   ebx
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d18:	c1 ef 09             	shr    edi,0x9
c0001d1b:	89 f2                	mov    edx,esi
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d26:	31 ff                	xor    edi,edi
c0001d28:	57                   	push   edi
c0001d29:	56                   	push   esi
c0001d2a:	51                   	push   ecx
c0001d2b:	52                   	push   edx
c0001d2c:	e8 bb d7 01 00       	call   c001f4ec <__udivdi3>
c0001d31:	83 c4 10             	add    esp,0x10
c0001d34:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d36:	85 d2                	test   edx,edx
c0001d38:	74 10                	je     c0001d4a <clmt_clust+0x42>
c0001d3a:	39 d0                	cmp    eax,edx
c0001d3c:	72 07                	jb     c0001d45 <clmt_clust+0x3d>
c0001d3e:	29 d0                	sub    eax,edx
c0001d40:	83 c3 08             	add    ebx,0x8
c0001d43:	eb ef                	jmp    c0001d34 <clmt_clust+0x2c>
c0001d45:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d48:	89 c2                	mov    edx,eax
c0001d4a:	5b                   	pop    ebx
c0001d4b:	89 d0                	mov    eax,edx
c0001d4d:	5e                   	pop    esi
c0001d4e:	5f                   	pop    edi
c0001d4f:	c3                   	ret    

c0001d50 <pick_lfn>:
c0001d50:	55                   	push   ebp
c0001d51:	57                   	push   edi
c0001d52:	56                   	push   esi
c0001d53:	89 d6                	mov    esi,edx
c0001d55:	53                   	push   ebx
c0001d56:	89 c3                	mov    ebx,eax
c0001d58:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d5b:	e8 ee fc ff ff       	call   c0001a4e <ld_word>
c0001d60:	66 85 c0             	test   ax,ax
c0001d63:	74 04                	je     c0001d69 <pick_lfn+0x19>
c0001d65:	31 c0                	xor    eax,eax
c0001d67:	eb 5c                	jmp    c0001dc5 <pick_lfn+0x75>
c0001d69:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d6c:	83 e1 bf             	and    ecx,0xffffffbf
c0001d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d74:	49                   	dec    ecx
c0001d75:	31 ff                	xor    edi,edi
c0001d77:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d7a:	0f b6 87 20 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfae0]
c0001d81:	01 f0                	add    eax,esi
c0001d83:	e8 c6 fc ff ff       	call   c0001a4e <ld_word>
c0001d88:	66 85 ed             	test   bp,bp
c0001d8b:	74 11                	je     c0001d9e <pick_lfn+0x4e>
c0001d8d:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d93:	77 d0                	ja     c0001d65 <pick_lfn+0x15>
c0001d95:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d99:	89 c5                	mov    ebp,eax
c0001d9b:	41                   	inc    ecx
c0001d9c:	eb 04                	jmp    c0001da2 <pick_lfn+0x52>
c0001d9e:	66 40                	inc    ax
c0001da0:	75 c3                	jne    c0001d65 <pick_lfn+0x15>
c0001da2:	47                   	inc    edi
c0001da3:	83 ff 0d             	cmp    edi,0xd
c0001da6:	75 d2                	jne    c0001d7a <pick_lfn+0x2a>
c0001da8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dab:	74 13                	je     c0001dc0 <pick_lfn+0x70>
c0001dad:	66 85 ed             	test   bp,bp
c0001db0:	74 0e                	je     c0001dc0 <pick_lfn+0x70>
c0001db2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db8:	77 ab                	ja     c0001d65 <pick_lfn+0x15>
c0001dba:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dc0:	b8 01 00 00 00       	mov    eax,0x1
c0001dc5:	5b                   	pop    ebx
c0001dc6:	5e                   	pop    esi
c0001dc7:	5f                   	pop    edi
c0001dc8:	5d                   	pop    ebp
c0001dc9:	c3                   	ret    

c0001dca <put_lfn>:
c0001dca:	55                   	push   ebp
c0001dcb:	31 ed                	xor    ebp,ebp
c0001dcd:	57                   	push   edi
c0001dce:	89 d7                	mov    edi,edx
c0001dd0:	56                   	push   esi
c0001dd1:	31 f6                	xor    esi,esi
c0001dd3:	53                   	push   ebx
c0001dd4:	83 ec 08             	sub    esp,0x8
c0001dd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de1:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001df0:	e8 cb fc ff ff       	call   c0001ac0 <st_word>
c0001df5:	0f b6 d9             	movzx  ebx,cl
c0001df8:	4b                   	dec    ebx
c0001df9:	6b db 0d             	imul   ebx,ebx,0xd
c0001dfc:	66 83 fe ff          	cmp    si,0xffff
c0001e00:	74 08                	je     c0001e0a <put_lfn+0x40>
c0001e02:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e05:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e09:	43                   	inc    ebx
c0001e0a:	0f b6 85 20 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfae0]
c0001e11:	0f b7 d6             	movzx  edx,si
c0001e14:	01 f8                	add    eax,edi
c0001e16:	e8 a5 fc ff ff       	call   c0001ac0 <st_word>
c0001e1b:	66 85 f6             	test   si,si
c0001e1e:	75 03                	jne    c0001e23 <put_lfn+0x59>
c0001e20:	83 ce ff             	or     esi,0xffffffff
c0001e23:	45                   	inc    ebp
c0001e24:	83 fd 0d             	cmp    ebp,0xd
c0001e27:	75 d3                	jne    c0001dfc <put_lfn+0x32>
c0001e29:	66 46                	inc    si
c0001e2b:	74 0a                	je     c0001e37 <put_lfn+0x6d>
c0001e2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e30:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e35:	75 09                	jne    c0001e40 <put_lfn+0x76>
c0001e37:	88 c8                	mov    al,cl
c0001e39:	83 c8 40             	or     eax,0x40
c0001e3c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e40:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e44:	88 07                	mov    BYTE PTR [edi],al
c0001e46:	83 c4 08             	add    esp,0x8
c0001e49:	5b                   	pop    ebx
c0001e4a:	5e                   	pop    esi
c0001e4b:	5f                   	pop    edi
c0001e4c:	5d                   	pop    ebp
c0001e4d:	c3                   	ret    

c0001e4e <gen_numname>:
c0001e4e:	57                   	push   edi
c0001e4f:	89 cf                	mov    edi,ecx
c0001e51:	56                   	push   esi
c0001e52:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e57:	53                   	push   ebx
c0001e58:	89 c6                	mov    esi,eax
c0001e5a:	83 ec 10             	sub    esp,0x10
c0001e5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e61:	e8 67 fc ff ff       	call   c0001acd <mem_cpy>
c0001e66:	83 fb 05             	cmp    ebx,0x5
c0001e69:	76 2d                	jbe    c0001e98 <gen_numname+0x4a>
c0001e6b:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6e:	66 85 c0             	test   ax,ax
c0001e71:	74 25                	je     c0001e98 <gen_numname+0x4a>
c0001e73:	83 c7 02             	add    edi,0x2
c0001e76:	ba 10 00 00 00       	mov    edx,0x10
c0001e7b:	89 c1                	mov    ecx,eax
c0001e7d:	01 db                	add    ebx,ebx
c0001e7f:	66 d1 e8             	shr    ax,1
c0001e82:	83 e1 01             	and    ecx,0x1
c0001e85:	01 cb                	add    ebx,ecx
c0001e87:	0f ba e3 10          	bt     ebx,0x10
c0001e8b:	73 06                	jae    c0001e93 <gen_numname+0x45>
c0001e8d:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e93:	4a                   	dec    edx
c0001e94:	75 e5                	jne    c0001e7b <gen_numname+0x2d>
c0001e96:	eb d3                	jmp    c0001e6b <gen_numname+0x1d>
c0001e98:	b8 07 00 00 00       	mov    eax,0x7
c0001e9d:	88 d9                	mov    cl,bl
c0001e9f:	83 e1 0f             	and    ecx,0xf
c0001ea2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea5:	80 fa 39             	cmp    dl,0x39
c0001ea8:	76 03                	jbe    c0001ead <gen_numname+0x5f>
c0001eaa:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ead:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eb0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb4:	89 da                	mov    edx,ebx
c0001eb6:	c1 ea 04             	shr    edx,0x4
c0001eb9:	83 fb 0f             	cmp    ebx,0xf
c0001ebc:	76 06                	jbe    c0001ec4 <gen_numname+0x76>
c0001ebe:	89 c8                	mov    eax,ecx
c0001ec0:	89 d3                	mov    ebx,edx
c0001ec2:	eb d9                	jmp    c0001e9d <gen_numname+0x4f>
c0001ec4:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec9:	31 d2                	xor    edx,edx
c0001ecb:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ece:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ed1:	39 ca                	cmp    edx,ecx
c0001ed3:	73 18                	jae    c0001eed <gen_numname+0x9f>
c0001ed5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed8:	3c 20                	cmp    al,0x20
c0001eda:	74 11                	je     c0001eed <gen_numname+0x9f>
c0001edc:	e8 41 fc ff ff       	call   c0001b22 <dbc_1st>
c0001ee1:	85 c0                	test   eax,eax
c0001ee3:	74 05                	je     c0001eea <gen_numname+0x9c>
c0001ee5:	39 d3                	cmp    ebx,edx
c0001ee7:	74 04                	je     c0001eed <gen_numname+0x9f>
c0001ee9:	42                   	inc    edx
c0001eea:	42                   	inc    edx
c0001eeb:	eb e1                	jmp    c0001ece <gen_numname+0x80>
c0001eed:	b0 20                	mov    al,0x20
c0001eef:	83 f9 07             	cmp    ecx,0x7
c0001ef2:	77 05                	ja     c0001ef9 <gen_numname+0xab>
c0001ef4:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef8:	41                   	inc    ecx
c0001ef9:	42                   	inc    edx
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f01:	76 ea                	jbe    c0001eed <gen_numname+0x9f>
c0001f03:	83 c4 10             	add    esp,0x10
c0001f06:	5b                   	pop    ebx
c0001f07:	5e                   	pop    esi
c0001f08:	5f                   	pop    edi
c0001f09:	c3                   	ret    

c0001f0a <sum_sfn>:
c0001f0a:	31 c9                	xor    ecx,ecx
c0001f0c:	31 d2                	xor    edx,edx
c0001f0e:	d0 ca                	ror    dl,1
c0001f10:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f13:	41                   	inc    ecx
c0001f14:	83 f9 0b             	cmp    ecx,0xb
c0001f17:	75 f5                	jne    c0001f0e <sum_sfn+0x4>
c0001f19:	88 d0                	mov    al,dl
c0001f1b:	c3                   	ret    

c0001f1c <xdir_sum>:
c0001f1c:	56                   	push   esi
c0001f1d:	31 c9                	xor    ecx,ecx
c0001f1f:	53                   	push   ebx
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f26:	43                   	inc    ebx
c0001f27:	c1 e3 05             	shl    ebx,0x5
c0001f2a:	83 fa 02             	cmp    edx,0x2
c0001f2d:	74 0b                	je     c0001f3a <xdir_sum+0x1e>
c0001f2f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f33:	66 d1 c9             	ror    cx,1
c0001f36:	01 f1                	add    ecx,esi
c0001f38:	eb 05                	jmp    c0001f3f <xdir_sum+0x23>
c0001f3a:	ba 03 00 00 00       	mov    edx,0x3
c0001f3f:	42                   	inc    edx
c0001f40:	39 d3                	cmp    ebx,edx
c0001f42:	77 e6                	ja     c0001f2a <xdir_sum+0xe>
c0001f44:	5b                   	pop    ebx
c0001f45:	89 c8                	mov    eax,ecx
c0001f47:	5e                   	pop    esi
c0001f48:	c3                   	ret    

c0001f49 <xsum32>:
c0001f49:	d1 ca                	ror    edx,1
c0001f4b:	0f b6 c0             	movzx  eax,al
c0001f4e:	01 d0                	add    eax,edx
c0001f50:	c3                   	ret    

c0001f51 <get_xfileinfo>:
c0001f51:	55                   	push   ebp
c0001f52:	31 c9                	xor    ecx,ecx
c0001f54:	57                   	push   edi
c0001f55:	bd 40 00 00 00       	mov    ebp,0x40
c0001f5a:	56                   	push   esi
c0001f5b:	31 ff                	xor    edi,edi
c0001f5d:	53                   	push   ebx
c0001f5e:	89 c6                	mov    esi,eax
c0001f60:	83 ec 0c             	sub    esp,0xc
c0001f63:	89 d3                	mov    ebx,edx
c0001f65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f6c:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f70:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f73:	76 6d                	jbe    c0001fe2 <get_xfileinfo+0x91>
c0001f75:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f7b:	76 0b                	jbe    c0001f88 <get_xfileinfo+0x37>
c0001f7d:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f81:	bf 01 00 00 00       	mov    edi,0x1
c0001f86:	eb 63                	jmp    c0001feb <get_xfileinfo+0x9a>
c0001f88:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8e:	75 03                	jne    c0001f93 <get_xfileinfo+0x42>
c0001f90:	83 c5 02             	add    ebp,0x2
c0001f93:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f96:	83 c5 02             	add    ebp,0x2
c0001f99:	e8 b0 fa ff ff       	call   c0001a4e <ld_word>
c0001f9e:	ff 04 24             	inc    DWORD PTR [esp]
c0001fa1:	66 85 c9             	test   cx,cx
c0001fa4:	75 0d                	jne    c0001fb3 <get_xfileinfo+0x62>
c0001fa6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fac:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fb1:	76 2b                	jbe    c0001fde <get_xfileinfo+0x8d>
c0001fb3:	c1 e1 10             	shl    ecx,0x10
c0001fb6:	ba ff 00 00 00       	mov    edx,0xff
c0001fbb:	29 fa                	sub    edx,edi
c0001fbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc5:	0f b7 c0             	movzx  eax,ax
c0001fc8:	09 c8                	or     eax,ecx
c0001fca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fce:	e8 1b fc ff ff       	call   c0001bee <put_utf>
c0001fd3:	84 c0                	test   al,al
c0001fd5:	74 a6                	je     c0001f7d <get_xfileinfo+0x2c>
c0001fd7:	0f b6 c0             	movzx  eax,al
c0001fda:	01 c7                	add    edi,eax
c0001fdc:	31 c0                	xor    eax,eax
c0001fde:	89 c1                	mov    ecx,eax
c0001fe0:	eb 8a                	jmp    c0001f6c <get_xfileinfo+0x1b>
c0001fe2:	85 ff                	test   edi,edi
c0001fe4:	74 97                	je     c0001f7d <get_xfileinfo+0x2c>
c0001fe6:	66 85 c9             	test   cx,cx
c0001fe9:	75 92                	jne    c0001f7d <get_xfileinfo+0x2c>
c0001feb:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ff0:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	31 c0                	xor    eax,eax
c0001ff9:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffc:	31 d2                	xor    edx,edx
c0001ffe:	80 e1 10             	and    cl,0x10
c0002001:	75 08                	jne    c000200b <get_xfileinfo+0xba>
c0002003:	8d 46 38             	lea    eax,[esi+0x38]
c0002006:	e8 68 fa ff ff       	call   c0001a73 <ld_qword>
c000200b:	89 03                	mov    DWORD PTR [ebx],eax
c000200d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002010:	8d 46 0c             	lea    eax,[esi+0xc]
c0002013:	e8 36 fa ff ff       	call   c0001a4e <ld_word>
c0002018:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000201c:	8d 46 0e             	lea    eax,[esi+0xe]
c000201f:	e8 2a fa ff ff       	call   c0001a4e <ld_word>
c0002024:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002028:	83 c4 0c             	add    esp,0xc
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	5d                   	pop    ebp
c000202f:	c3                   	ret    

c0002030 <get_ldnumber>:
c0002030:	57                   	push   edi
c0002031:	56                   	push   esi
c0002032:	53                   	push   ebx
c0002033:	83 cb ff             	or     ebx,0xffffffff
c0002036:	8b 10                	mov    edx,DWORD PTR [eax]
c0002038:	85 d2                	test   edx,edx
c000203a:	74 34                	je     c0002070 <get_ldnumber+0x40>
c000203c:	89 c7                	mov    edi,eax
c000203e:	89 d1                	mov    ecx,edx
c0002040:	41                   	inc    ecx
c0002041:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002044:	3c 1f                	cmp    al,0x1f
c0002046:	76 04                	jbe    c000204c <get_ldnumber+0x1c>
c0002048:	3c 3a                	cmp    al,0x3a
c000204a:	75 f4                	jne    c0002040 <get_ldnumber+0x10>
c000204c:	31 db                	xor    ebx,ebx
c000204e:	3c 3a                	cmp    al,0x3a
c0002050:	75 1e                	jne    c0002070 <get_ldnumber+0x40>
c0002052:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002055:	83 cb ff             	or     ebx,0xffffffff
c0002058:	8d 46 d0             	lea    eax,[esi-0x30]
c000205b:	3c 09                	cmp    al,0x9
c000205d:	77 11                	ja     c0002070 <get_ldnumber+0x40>
c000205f:	83 c2 02             	add    edx,0x2
c0002062:	39 d1                	cmp    ecx,edx
c0002064:	75 0a                	jne    c0002070 <get_ldnumber+0x40>
c0002066:	89 f0                	mov    eax,esi
c0002068:	89 0f                	mov    DWORD PTR [edi],ecx
c000206a:	0f be d8             	movsx  ebx,al
c000206d:	83 eb 30             	sub    ebx,0x30
c0002070:	89 d8                	mov    eax,ebx
c0002072:	5b                   	pop    ebx
c0002073:	5e                   	pop    esi
c0002074:	5f                   	pop    edi
c0002075:	c3                   	ret    

c0002076 <crc32>:
c0002076:	56                   	push   esi
c0002077:	89 d6                	mov    esi,edx
c0002079:	53                   	push   ebx
c000207a:	b2 01                	mov    dl,0x1
c000207c:	bb 08 00 00 00       	mov    ebx,0x8
c0002081:	89 f1                	mov    ecx,esi
c0002083:	84 d1                	test   cl,dl
c0002085:	0f 95 c1             	setne  cl
c0002088:	0f b6 c9             	movzx  ecx,cl
c000208b:	31 c1                	xor    ecx,eax
c000208d:	89 c8                	mov    eax,ecx
c000208f:	d1 e8                	shr    eax,1
c0002091:	80 e1 01             	and    cl,0x1
c0002094:	74 05                	je     c000209b <crc32+0x25>
c0002096:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209b:	01 d2                	add    edx,edx
c000209d:	4b                   	dec    ebx
c000209e:	75 e1                	jne    c0002081 <crc32+0xb>
c00020a0:	5b                   	pop    ebx
c00020a1:	5e                   	pop    esi
c00020a2:	c3                   	ret    

c00020a3 <test_gpt_header>:
c00020a3:	55                   	push   ebp
c00020a4:	b9 10 00 00 00       	mov    ecx,0x10
c00020a9:	57                   	push   edi
c00020aa:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00020af:	56                   	push   esi
c00020b0:	31 ff                	xor    edi,edi
c00020b2:	53                   	push   ebx
c00020b3:	89 c3                	mov    ebx,eax
c00020b5:	e8 33 fa ff ff       	call   c0001aed <mem_cmp>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	75 55                	jne    c0002113 <test_gpt_header+0x70>
c00020be:	89 c7                	mov    edi,eax
c00020c0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c5:	83 ce ff             	or     esi,0xffffffff
c00020c8:	31 d2                	xor    edx,edx
c00020ca:	83 fd 03             	cmp    ebp,0x3
c00020cd:	76 05                	jbe    c00020d4 <test_gpt_header+0x31>
c00020cf:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d4:	89 f0                	mov    eax,esi
c00020d6:	45                   	inc    ebp
c00020d7:	e8 9a ff ff ff       	call   c0002076 <crc32>
c00020dc:	83 fd 4c             	cmp    ebp,0x4c
c00020df:	89 c6                	mov    esi,eax
c00020e1:	75 e5                	jne    c00020c8 <test_gpt_header+0x25>
c00020e3:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e6:	e8 70 f9 ff ff       	call   c0001a5b <ld_dword>
c00020eb:	f7 d6                	not    esi
c00020ed:	39 c6                	cmp    esi,eax
c00020ef:	75 22                	jne    c0002113 <test_gpt_header+0x70>
c00020f1:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f4:	e8 62 f9 ff ff       	call   c0001a5b <ld_dword>
c00020f9:	83 c0 80             	add    eax,0xffffff80
c00020fc:	75 15                	jne    c0002113 <test_gpt_header+0x70>
c00020fe:	8d 43 50             	lea    eax,[ebx+0x50]
c0002101:	e8 55 f9 ff ff       	call   c0001a5b <ld_dword>
c0002106:	3d 80 00 00 00       	cmp    eax,0x80
c000210b:	0f 96 c0             	setbe  al
c000210e:	0f b6 c0             	movzx  eax,al
c0002111:	89 c7                	mov    edi,eax
c0002113:	5b                   	pop    ebx
c0002114:	89 f8                	mov    eax,edi
c0002116:	5e                   	pop    esi
c0002117:	5f                   	pop    edi
c0002118:	5d                   	pop    ebp
c0002119:	c3                   	ret    

c000211a <make_rand>:
c000211a:	56                   	push   esi
c000211b:	85 c0                	test   eax,eax
c000211d:	53                   	push   ebx
c000211e:	75 05                	jne    c0002125 <make_rand+0xb>
c0002120:	b8 01 00 00 00       	mov    eax,0x1
c0002125:	01 d1                	add    ecx,edx
c0002127:	bb 08 00 00 00       	mov    ebx,0x8
c000212c:	89 c6                	mov    esi,eax
c000212e:	d1 e8                	shr    eax,1
c0002130:	83 e6 01             	and    esi,0x1
c0002133:	85 f6                	test   esi,esi
c0002135:	74 05                	je     c000213c <make_rand+0x22>
c0002137:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213c:	4b                   	dec    ebx
c000213d:	75 ed                	jne    c000212c <make_rand+0x12>
c000213f:	42                   	inc    edx
c0002140:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002143:	39 ca                	cmp    edx,ecx
c0002145:	75 e0                	jne    c0002127 <make_rand+0xd>
c0002147:	5b                   	pop    ebx
c0002148:	5e                   	pop    esi
c0002149:	c3                   	ret    

c000214a <validate>:
c000214a:	56                   	push   esi
c000214b:	89 d6                	mov    esi,edx
c000214d:	53                   	push   ebx
c000214e:	85 c0                	test   eax,eax
c0002150:	51                   	push   ecx
c0002151:	75 09                	jne    c000215c <validate+0x12>
c0002153:	b8 09 00 00 00       	mov    eax,0x9
c0002158:	31 c9                	xor    ecx,ecx
c000215a:	eb 2f                	jmp    c000218b <validate+0x41>
c000215c:	89 c3                	mov    ebx,eax
c000215e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002160:	85 c0                	test   eax,eax
c0002162:	74 ef                	je     c0002153 <validate+0x9>
c0002164:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002167:	74 ea                	je     c0002153 <validate+0x9>
c0002169:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000216d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002171:	75 e0                	jne    c0002153 <validate+0x9>
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217a:	50                   	push   eax
c000217b:	e8 7d f8 ff ff       	call   c00019fd <disk_status>
c0002180:	83 c4 10             	add    esp,0x10
c0002183:	a8 01                	test   al,0x1
c0002185:	75 cc                	jne    c0002153 <validate+0x9>
c0002187:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002189:	31 c0                	xor    eax,eax
c000218b:	89 0e                	mov    DWORD PTR [esi],ecx
c000218d:	5a                   	pop    edx
c000218e:	5b                   	pop    ebx
c000218f:	5e                   	pop    esi
c0002190:	c3                   	ret    

c0002191 <sync_window>:
c0002191:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002195:	0f 84 85 00 00 00    	je     c0002220 <sync_window+0x8f>
c000219b:	55                   	push   ebp
c000219c:	8d 68 54             	lea    ebp,[eax+0x54]
c000219f:	57                   	push   edi
c00021a0:	56                   	push   esi
c00021a1:	53                   	push   ebx
c00021a2:	89 c3                	mov    ebx,eax
c00021a4:	83 ec 28             	sub    esp,0x28
c00021a7:	6a 01                	push   0x1
c00021a9:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021ac:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021af:	55                   	push   ebp
c00021b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b4:	50                   	push   eax
c00021b5:	e8 5f f8 ff ff       	call   c0001a19 <disk_write>
c00021ba:	83 c4 20             	add    esp,0x20
c00021bd:	ba 01 00 00 00       	mov    edx,0x1
c00021c2:	85 c0                	test   eax,eax
c00021c4:	75 50                	jne    c0002216 <sync_window+0x85>
c00021c6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c9:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021cc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d0:	89 c6                	mov    esi,eax
c00021d2:	31 ff                	xor    edi,edi
c00021d4:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021da:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021de:	89 d7                	mov    edi,edx
c00021e0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021eb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ef:	73 23                	jae    c0002214 <sync_window+0x83>
c00021f1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f5:	75 1d                	jne    c0002214 <sync_window+0x83>
c00021f7:	83 ec 0c             	sub    esp,0xc
c00021fa:	6a 01                	push   0x1
c00021fc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002200:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002204:	52                   	push   edx
c0002205:	50                   	push   eax
c0002206:	55                   	push   ebp
c0002207:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220b:	50                   	push   eax
c000220c:	e8 08 f8 ff ff       	call   c0001a19 <disk_write>
c0002211:	83 c4 20             	add    esp,0x20
c0002214:	31 d2                	xor    edx,edx
c0002216:	83 c4 1c             	add    esp,0x1c
c0002219:	89 d0                	mov    eax,edx
c000221b:	5b                   	pop    ebx
c000221c:	5e                   	pop    esi
c000221d:	5f                   	pop    edi
c000221e:	5d                   	pop    ebp
c000221f:	c3                   	ret    
c0002220:	31 d2                	xor    edx,edx
c0002222:	89 d0                	mov    eax,edx
c0002224:	c3                   	ret    

c0002225 <move_window>:
c0002225:	56                   	push   esi
c0002226:	53                   	push   ebx
c0002227:	89 c3                	mov    ebx,eax
c0002229:	83 ec 14             	sub    esp,0x14
c000222c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000222f:	75 07                	jne    c0002238 <move_window+0x13>
c0002231:	31 f6                	xor    esi,esi
c0002233:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002236:	74 59                	je     c0002291 <move_window+0x6c>
c0002238:	89 d8                	mov    eax,ebx
c000223a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002242:	e8 4a ff ff ff       	call   c0002191 <sync_window>
c0002247:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224b:	89 c6                	mov    esi,eax
c000224d:	85 c0                	test   eax,eax
c000224f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002253:	75 3c                	jne    c0002291 <move_window+0x6c>
c0002255:	83 ec 0c             	sub    esp,0xc
c0002258:	8d 43 54             	lea    eax,[ebx+0x54]
c000225b:	6a 01                	push   0x1
c000225d:	51                   	push   ecx
c000225e:	52                   	push   edx
c000225f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002263:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002267:	50                   	push   eax
c0002268:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226c:	50                   	push   eax
c000226d:	e8 91 f7 ff ff       	call   c0001a03 <disk_read>
c0002272:	83 c4 20             	add    esp,0x20
c0002275:	85 c0                	test   eax,eax
c0002277:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000227f:	74 0a                	je     c000228b <move_window+0x66>
c0002281:	83 ca ff             	or     edx,0xffffffff
c0002284:	be 01 00 00 00       	mov    esi,0x1
c0002289:	89 d1                	mov    ecx,edx
c000228b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000228e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002291:	83 c4 14             	add    esp,0x14
c0002294:	89 f0                	mov    eax,esi
c0002296:	5b                   	pop    ebx
c0002297:	5e                   	pop    esi
c0002298:	c3                   	ret    

c0002299 <check_fs>:
c0002299:	53                   	push   ebx
c000229a:	89 c3                	mov    ebx,eax
c000229c:	83 ec 08             	sub    esp,0x8
c000229f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a3:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022aa:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b1:	e8 6f ff ff ff       	call   c0002225 <move_window>
c00022b6:	ba 04 00 00 00       	mov    edx,0x4
c00022bb:	85 c0                	test   eax,eax
c00022bd:	0f 85 89 00 00 00    	jne    c000234c <check_fs+0xb3>
c00022c3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c9:	e8 80 f7 ff ff       	call   c0001a4e <ld_word>
c00022ce:	ba 03 00 00 00       	mov    edx,0x3
c00022d3:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d7:	75 73                	jne    c000234c <check_fs+0xb3>
c00022d9:	ba 40 05 02 c0       	mov    edx,0xc0020540
c00022de:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e1:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e6:	e8 02 f8 ff ff       	call   c0001aed <mem_cmp>
c00022eb:	ba 01 00 00 00       	mov    edx,0x1
c00022f0:	85 c0                	test   eax,eax
c00022f2:	74 58                	je     c000234c <check_fs+0xb3>
c00022f4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f7:	8d 50 18             	lea    edx,[eax+0x18]
c00022fa:	80 fa 01             	cmp    dl,0x1
c00022fd:	76 09                	jbe    c0002308 <check_fs+0x6f>
c00022ff:	ba 02 00 00 00       	mov    edx,0x2
c0002304:	3c eb                	cmp    al,0xeb
c0002306:	75 44                	jne    c000234c <check_fs+0xb3>
c0002308:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c000230d:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002313:	b9 03 00 00 00       	mov    ecx,0x3
c0002318:	e8 d0 f7 ff ff       	call   c0001aed <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 29                	je     c000234c <check_fs+0xb3>
c0002323:	ba 4c 05 02 c0       	mov    edx,0xc002054c
c0002328:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000232e:	b9 05 00 00 00       	mov    ecx,0x5
c0002333:	e8 b5 f7 ff ff       	call   c0001aed <mem_cmp>
c0002338:	31 d2                	xor    edx,edx
c000233a:	85 c0                	test   eax,eax
c000233c:	74 0e                	je     c000234c <check_fs+0xb3>
c000233e:	31 d2                	xor    edx,edx
c0002340:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002347:	0f 95 c2             	setne  dl
c000234a:	01 d2                	add    edx,edx
c000234c:	83 c4 08             	add    esp,0x8
c000234f:	89 d0                	mov    eax,edx
c0002351:	5b                   	pop    ebx
c0002352:	c3                   	ret    

c0002353 <find_volume>:
c0002353:	55                   	push   ebp
c0002354:	31 c9                	xor    ecx,ecx
c0002356:	57                   	push   edi
c0002357:	56                   	push   esi
c0002358:	89 d6                	mov    esi,edx
c000235a:	53                   	push   ebx
c000235b:	31 d2                	xor    edx,edx
c000235d:	83 ec 3c             	sub    esp,0x3c
c0002360:	89 c3                	mov    ebx,eax
c0002362:	e8 32 ff ff ff       	call   c0002299 <check_fs>
c0002367:	83 f8 02             	cmp    eax,0x2
c000236a:	74 0e                	je     c000237a <find_volume+0x27>
c000236c:	0f 87 56 01 00 00    	ja     c00024c8 <find_volume+0x175>
c0002372:	85 f6                	test   esi,esi
c0002374:	0f 84 4e 01 00 00    	je     c00024c8 <find_volume+0x175>
c000237a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002381:	0f 85 df 00 00 00    	jne    c0002466 <find_volume+0x113>
c0002387:	31 c9                	xor    ecx,ecx
c0002389:	ba 01 00 00 00       	mov    edx,0x1
c000238e:	89 d8                	mov    eax,ebx
c0002390:	e8 90 fe ff ff       	call   c0002225 <move_window>
c0002395:	85 c0                	test   eax,eax
c0002397:	74 0a                	je     c00023a3 <find_volume+0x50>
c0002399:	b8 04 00 00 00       	mov    eax,0x4
c000239e:	e9 25 01 00 00       	jmp    c00024c8 <find_volume+0x175>
c00023a3:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a6:	89 e8                	mov    eax,ebp
c00023a8:	e8 f6 fc ff ff       	call   c00020a3 <test_gpt_header>
c00023ad:	85 c0                	test   eax,eax
c00023af:	75 0a                	jne    c00023bb <find_volume+0x68>
c00023b1:	b8 03 00 00 00       	mov    eax,0x3
c00023b6:	e9 0d 01 00 00       	jmp    c00024c8 <find_volume+0x175>
c00023bb:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c1:	e8 95 f6 ff ff       	call   c0001a5b <ld_dword>
c00023c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ca:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d0:	e8 9e f6 ff ff       	call   c0001a73 <ld_qword>
c00023d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f5:	74 ba                	je     c00023b1 <find_volume+0x5e>
c00023f7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fb:	31 c9                	xor    ecx,ecx
c00023fd:	c1 e7 07             	shl    edi,0x7
c0002400:	89 d8                	mov    eax,ebx
c0002402:	89 fa                	mov    edx,edi
c0002404:	c1 ea 09             	shr    edx,0x9
c0002407:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240b:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000240f:	e8 11 fe ff ff       	call   c0002225 <move_window>
c0002414:	85 c0                	test   eax,eax
c0002416:	75 81                	jne    c0002399 <find_volume+0x46>
c0002418:	81 e7 80 01 00 00    	and    edi,0x180
c000241e:	b9 10 00 00 00       	mov    ecx,0x10
c0002423:	ba 30 05 02 c0       	mov    edx,0xc0020530
c0002428:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242c:	e8 bc f6 ff ff       	call   c0001aed <mem_cmp>
c0002431:	85 c0                	test   eax,eax
c0002433:	75 2b                	jne    c0002460 <find_volume+0x10d>
c0002435:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002439:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243d:	e8 31 f6 ff ff       	call   c0001a73 <ld_qword>
c0002442:	89 d1                	mov    ecx,edx
c0002444:	89 c2                	mov    edx,eax
c0002446:	89 d8                	mov    eax,ebx
c0002448:	e8 4c fe ff ff       	call   c0002299 <check_fs>
c000244d:	85 f6                	test   esi,esi
c000244f:	75 05                	jne    c0002456 <find_volume+0x103>
c0002451:	83 f8 01             	cmp    eax,0x1
c0002454:	76 72                	jbe    c00024c8 <find_volume+0x175>
c0002456:	85 f6                	test   esi,esi
c0002458:	74 06                	je     c0002460 <find_volume+0x10d>
c000245a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245e:	74 68                	je     c00024c8 <find_volume+0x175>
c0002460:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002464:	eb 87                	jmp    c00023ed <find_volume+0x9a>
c0002466:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002470:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002476:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247a:	89 cd                	mov    ebp,ecx
c000247c:	89 f8                	mov    eax,edi
c000247e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002482:	e8 d4 f5 ff ff       	call   c0001a5b <ld_dword>
c0002487:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248b:	83 c7 10             	add    edi,0x10
c000248e:	83 c1 04             	add    ecx,0x4
c0002491:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e2                	jne    c000247c <find_volume+0x129>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x150>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	b8 03 00 00 00       	mov    eax,0x3
c00024ac:	85 d2                	test   edx,edx
c00024ae:	74 09                	je     c00024b9 <find_volume+0x166>
c00024b0:	31 c9                	xor    ecx,ecx
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 e0 fd ff ff       	call   c0002299 <check_fs>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	75 0b                	jne    c00024c8 <find_volume+0x175>
c00024bd:	83 f8 01             	cmp    eax,0x1
c00024c0:	76 06                	jbe    c00024c8 <find_volume+0x175>
c00024c2:	47                   	inc    edi
c00024c3:	83 ff 03             	cmp    edi,0x3
c00024c6:	76 db                	jbe    c00024a3 <find_volume+0x150>
c00024c8:	83 c4 3c             	add    esp,0x3c
c00024cb:	5b                   	pop    ebx
c00024cc:	5e                   	pop    esi
c00024cd:	5f                   	pop    edi
c00024ce:	5d                   	pop    ebp
c00024cf:	c3                   	ret    

c00024d0 <mount_volume>:
c00024d0:	55                   	push   ebp
c00024d1:	57                   	push   edi
c00024d2:	89 cf                	mov    edi,ecx
c00024d4:	56                   	push   esi
c00024d5:	53                   	push   ebx
c00024d6:	bb 0b 00 00 00       	mov    ebx,0xb
c00024db:	83 ec 3c             	sub    esp,0x3c
c00024de:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e8:	e8 43 fb ff ff       	call   c0002030 <get_ldnumber>
c00024ed:	85 c0                	test   eax,eax
c00024ef:	0f 88 3b 05 00 00    	js     c0002a30 <mount_volume+0x560>
c00024f5:	8b 2c 85 00 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb900]
c00024fc:	89 c6                	mov    esi,eax
c00024fe:	bb 0c 00 00 00       	mov    ebx,0xc
c0002503:	85 ed                	test   ebp,ebp
c0002505:	0f 84 25 05 00 00    	je     c0002a30 <mount_volume+0x560>
c000250b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000250f:	83 e7 fe             	and    edi,0xfffffffe
c0002512:	89 2a                	mov    DWORD PTR [edx],ebp
c0002514:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002518:	74 32                	je     c000254c <mount_volume+0x7c>
c000251a:	83 ec 0c             	sub    esp,0xc
c000251d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002521:	50                   	push   eax
c0002522:	e8 d6 f4 ff ff       	call   c00019fd <disk_status>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	a8 01                	test   al,0x1
c000252c:	75 1e                	jne    c000254c <mount_volume+0x7c>
c000252e:	89 f9                	mov    ecx,edi
c0002530:	31 db                	xor    ebx,ebx
c0002532:	84 c9                	test   cl,cl
c0002534:	0f 84 f6 04 00 00    	je     c0002a30 <mount_volume+0x560>
c000253a:	a8 04                	test   al,0x4
c000253c:	0f 84 ee 04 00 00    	je     c0002a30 <mount_volume+0x560>
c0002542:	bb 0a 00 00 00       	mov    ebx,0xa
c0002547:	e9 e4 04 00 00       	jmp    c0002a30 <mount_volume+0x560>
c000254c:	83 ec 0c             	sub    esp,0xc
c000254f:	89 f0                	mov    eax,esi
c0002551:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002555:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002558:	0f b6 f0             	movzx  esi,al
c000255b:	56                   	push   esi
c000255c:	e8 9f f4 ff ff       	call   c0001a00 <disk_initialize>
c0002561:	bb 03 00 00 00       	mov    ebx,0x3
c0002566:	83 c4 10             	add    esp,0x10
c0002569:	a8 01                	test   al,0x1
c000256b:	0f 85 bf 04 00 00    	jne    c0002a30 <mount_volume+0x560>
c0002571:	89 f9                	mov    ecx,edi
c0002573:	84 c9                	test   cl,cl
c0002575:	74 04                	je     c000257b <mount_volume+0xab>
c0002577:	a8 04                	test   al,0x4
c0002579:	75 c7                	jne    c0002542 <mount_volume+0x72>
c000257b:	31 d2                	xor    edx,edx
c000257d:	89 e8                	mov    eax,ebp
c000257f:	e8 cf fd ff ff       	call   c0002353 <find_volume>
c0002584:	83 f8 04             	cmp    eax,0x4
c0002587:	75 0a                	jne    c0002593 <mount_volume+0xc3>
c0002589:	bb 01 00 00 00       	mov    ebx,0x1
c000258e:	e9 9d 04 00 00       	jmp    c0002a30 <mount_volume+0x560>
c0002593:	83 f8 01             	cmp    eax,0x1
c0002596:	76 0a                	jbe    c00025a2 <mount_volume+0xd2>
c0002598:	bb 0d 00 00 00       	mov    ebx,0xd
c000259d:	e9 8e 04 00 00       	jmp    c0002a30 <mount_volume+0x560>
c00025a2:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a5:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025b0:	75 17                	jne    c00025c9 <mount_volume+0xf9>
c00025b2:	b8 0b 00 00 00       	mov    eax,0xb
c00025b7:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025bc:	75 da                	jne    c0002598 <mount_volume+0xc8>
c00025be:	40                   	inc    eax
c00025bf:	83 f8 40             	cmp    eax,0x40
c00025c2:	75 f3                	jne    c00025b7 <mount_volume+0xe7>
c00025c4:	e9 5a 02 00 00       	jmp    c0002823 <mount_volume+0x353>
c00025c9:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025cc:	e8 7d f4 ff ff       	call   c0001a4e <ld_word>
c00025d1:	66 3d 00 02          	cmp    ax,0x200
c00025d5:	75 c1                	jne    c0002598 <mount_volume+0xc8>
c00025d7:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025da:	e8 6f f4 ff ff       	call   c0001a4e <ld_word>
c00025df:	0f b7 c0             	movzx  eax,ax
c00025e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 0c                	jne    c00025f6 <mount_volume+0x126>
c00025ea:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ed:	e8 69 f4 ff ff       	call   c0001a5b <ld_dword>
c00025f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025fa:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025fd:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002600:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002604:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002607:	48                   	dec    eax
c0002608:	3c 01                	cmp    al,0x1
c000260a:	77 8c                	ja     c0002598 <mount_volume+0xc8>
c000260c:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002610:	89 c3                	mov    ebx,eax
c0002612:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002616:	66 85 c0             	test   ax,ax
c0002619:	0f 84 79 ff ff ff    	je     c0002598 <mount_volume+0xc8>
c000261f:	8d 40 ff             	lea    eax,[eax-0x1]
c0002622:	85 d8                	test   eax,ebx
c0002624:	0f 85 6e ff ff ff    	jne    c0002598 <mount_volume+0xc8>
c000262a:	8d 45 65             	lea    eax,[ebp+0x65]
c000262d:	e8 1c f4 ff ff       	call   c0001a4e <ld_word>
c0002632:	89 c7                	mov    edi,eax
c0002634:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002638:	a8 0f                	test   al,0xf
c000263a:	0f 85 58 ff ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002640:	8d 45 67             	lea    eax,[ebp+0x67]
c0002643:	e8 06 f4 ff ff       	call   c0001a4e <ld_word>
c0002648:	0f b7 f0             	movzx  esi,ax
c000264b:	85 f6                	test   esi,esi
c000264d:	75 0a                	jne    c0002659 <mount_volume+0x189>
c000264f:	8d 45 74             	lea    eax,[ebp+0x74]
c0002652:	e8 04 f4 ff ff       	call   c0001a5b <ld_dword>
c0002657:	89 c6                	mov    esi,eax
c0002659:	8d 45 62             	lea    eax,[ebp+0x62]
c000265c:	e8 ed f3 ff ff       	call   c0001a4e <ld_word>
c0002661:	66 85 c0             	test   ax,ax
c0002664:	0f 84 2e ff ff ff    	je     c0002598 <mount_volume+0xc8>
c000266a:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000266f:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002674:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002678:	89 fa                	mov    edx,edi
c000267a:	66 c1 ea 04          	shr    dx,0x4
c000267e:	0f b7 d2             	movzx  edx,dx
c0002681:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002685:	0f b7 c8             	movzx  ecx,ax
c0002688:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000268b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000268f:	39 c6                	cmp    esi,eax
c0002691:	0f 82 01 ff ff ff    	jb     c0002598 <mount_volume+0xc8>
c0002697:	29 c6                	sub    esi,eax
c0002699:	31 d2                	xor    edx,edx
c000269b:	89 f0                	mov    eax,esi
c000269d:	f7 f3                	div    ebx
c000269f:	39 de                	cmp    esi,ebx
c00026a1:	0f 82 f1 fe ff ff    	jb     c0002598 <mount_volume+0xc8>
c00026a7:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026ac:	0f 87 e6 fe ff ff    	ja     c0002598 <mount_volume+0xc8>
c00026b2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b7:	0f 86 63 03 00 00    	jbe    c0002a20 <mount_volume+0x550>
c00026bd:	bb 03 00 00 00       	mov    ebx,0x3
c00026c2:	8d 70 02             	lea    esi,[eax+0x2]
c00026c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026d0:	89 c8                	mov    eax,ecx
c00026d2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d5:	31 d2                	xor    edx,edx
c00026d7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026db:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e3:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ee:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026f1:	31 d2                	xor    edx,edx
c00026f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fb:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026fe:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002701:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002704:	83 fb 03             	cmp    ebx,0x3
c0002707:	75 2b                	jne    c0002734 <mount_volume+0x264>
c0002709:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270c:	e8 3d f3 ff ff       	call   c0001a4e <ld_word>
c0002711:	66 09 c7             	or     di,ax
c0002714:	0f 85 7e fe ff ff    	jne    c0002598 <mount_volume+0xc8>
c000271a:	c1 e6 02             	shl    esi,0x2
c000271d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002723:	e8 33 f3 ff ff       	call   c0001a5b <ld_dword>
c0002728:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000272f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002732:	eb 30                	jmp    c0002764 <mount_volume+0x294>
c0002734:	66 85 ff             	test   di,di
c0002737:	0f 84 5b fe ff ff    	je     c0002598 <mount_volume+0xc8>
c000273d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002741:	31 d2                	xor    edx,edx
c0002743:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002747:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000274b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274e:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002751:	83 fb 02             	cmp    ebx,0x2
c0002754:	75 04                	jne    c000275a <mount_volume+0x28a>
c0002756:	01 f6                	add    esi,esi
c0002758:	eb 0a                	jmp    c0002764 <mount_volume+0x294>
c000275a:	8d 04 76             	lea    eax,[esi+esi*2]
c000275d:	83 e6 01             	and    esi,0x1
c0002760:	d1 e8                	shr    eax,1
c0002762:	01 c6                	add    esi,eax
c0002764:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000276a:	c1 ee 09             	shr    esi,0x9
c000276d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002771:	0f 87 21 fe ff ff    	ja     c0002598 <mount_volume+0xc8>
c0002777:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002785:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002789:	83 fb 03             	cmp    ebx,0x3
c000278c:	75 7a                	jne    c0002808 <mount_volume+0x338>
c000278e:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002794:	e8 b5 f2 ff ff       	call   c0001a4e <ld_word>
c0002799:	66 48                	dec    ax
c000279b:	75 6b                	jne    c0002808 <mount_volume+0x338>
c000279d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a5:	83 c2 01             	add    edx,0x1
c00027a8:	89 e8                	mov    eax,ebp
c00027aa:	83 d1 00             	adc    ecx,0x0
c00027ad:	e8 73 fa ff ff       	call   c0002225 <move_window>
c00027b2:	85 c0                	test   eax,eax
c00027b4:	75 52                	jne    c0002808 <mount_volume+0x338>
c00027b6:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ba:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027c0:	e8 89 f2 ff ff       	call   c0001a4e <ld_word>
c00027c5:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c9:	75 3d                	jne    c0002808 <mount_volume+0x338>
c00027cb:	8d 45 54             	lea    eax,[ebp+0x54]
c00027ce:	e8 88 f2 ff ff       	call   c0001a5b <ld_dword>
c00027d3:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d8:	75 2e                	jne    c0002808 <mount_volume+0x338>
c00027da:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027e0:	e8 76 f2 ff ff       	call   c0001a5b <ld_dword>
c00027e5:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ea:	75 1c                	jne    c0002808 <mount_volume+0x338>
c00027ec:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f2:	e8 64 f2 ff ff       	call   c0001a5b <ld_dword>
c00027f7:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027fa:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002800:	e8 56 f2 ff ff       	call   c0001a5b <ld_dword>
c0002805:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002808:	66 a1 e0 46 02 c0    	mov    ax,ds:0xc00246e0
c000280e:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002811:	40                   	inc    eax
c0002812:	31 db                	xor    ebx,ebx
c0002814:	66 a3 e0 46 02 c0    	mov    ds:0xc00246e0,ax
c000281a:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281e:	e9 0d 02 00 00       	jmp    c0002a30 <mount_volume+0x560>
c0002823:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002829:	e8 20 f2 ff ff       	call   c0001a4e <ld_word>
c000282e:	66 3d 00 01          	cmp    ax,0x100
c0002832:	0f 85 60 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002838:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000283f:	0f 85 53 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002845:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000284b:	e8 23 f2 ff ff       	call   c0001a73 <ld_qword>
c0002850:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002854:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000285a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000285e:	e8 f8 f1 ff ff       	call   c0001a5b <ld_dword>
c0002863:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002866:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286c:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000286f:	fe c8                	dec    al
c0002871:	0f 85 21 fd ff ff    	jne    c0002598 <mount_volume+0xc8>
c0002877:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287e:	bb 01 00 00 00       	mov    ebx,0x1
c0002883:	d3 e3                	shl    ebx,cl
c0002885:	66 85 db             	test   bx,bx
c0002888:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000288c:	0f 84 06 fd ff ff    	je     c0002598 <mount_volume+0xc8>
c0002892:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002898:	e8 be f1 ff ff       	call   c0001a5b <ld_dword>
c000289d:	89 c6                	mov    esi,eax
c000289f:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a4:	0f 87 ee fc ff ff    	ja     c0002598 <mount_volume+0xc8>
c00028aa:	8d 40 02             	lea    eax,[eax+0x2]
c00028ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b1:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b8:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c4:	e8 92 f1 ff ff       	call   c0001a5b <ld_dword>
c00028c9:	31 d2                	xor    edx,edx
c00028cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028cf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d7:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028da:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028dd:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e7:	e8 6f f1 ff ff       	call   c0001a5b <ld_dword>
c00028ec:	31 d2                	xor    edx,edx
c00028ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028fa:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fd:	0f b7 c3             	movzx  eax,bx
c0002900:	0f af f0             	imul   esi,eax
c0002903:	89 f0                	mov    eax,esi
c0002905:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002908:	31 d2                	xor    edx,edx
c000290a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000290e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002912:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002916:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000291a:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291e:	39 c1                	cmp    ecx,eax
c0002920:	89 df                	mov    edi,ebx
c0002922:	19 d7                	sbb    edi,edx
c0002924:	0f 82 6e fc ff ff    	jb     c0002598 <mount_volume+0xc8>
c000292a:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002930:	31 db                	xor    ebx,ebx
c0002932:	e8 24 f1 ff ff       	call   c0001a5b <ld_dword>
c0002937:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002941:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002949:	85 db                	test   ebx,ebx
c000294b:	75 39                	jne    c0002986 <mount_volume+0x4b6>
c000294d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002951:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002955:	0f 86 3d fc ff ff    	jbe    c0002598 <mount_volume+0xc8>
c000295b:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295e:	89 e8                	mov    eax,ebp
c0002960:	e8 82 f3 ff ff       	call   c0001ce7 <clst2sect>
c0002965:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002969:	31 ff                	xor    edi,edi
c000296b:	01 c6                	add    esi,eax
c000296d:	11 d7                	adc    edi,edx
c000296f:	89 e8                	mov    eax,ebp
c0002971:	89 f2                	mov    edx,esi
c0002973:	89 f9                	mov    ecx,edi
c0002975:	e8 ab f8 ff ff       	call   c0002225 <move_window>
c000297a:	85 c0                	test   eax,eax
c000297c:	0f 85 07 fc ff ff    	jne    c0002589 <mount_volume+0xb9>
c0002982:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002986:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000298b:	74 0b                	je     c0002998 <mount_volume+0x4c8>
c000298d:	83 c3 20             	add    ebx,0x20
c0002990:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002996:	eb b1                	jmp    c0002949 <mount_volume+0x479>
c0002998:	8d 75 54             	lea    esi,[ebp+0x54]
c000299b:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c000299f:	e8 b7 f0 ff ff       	call   c0001a5b <ld_dword>
c00029a4:	89 c3                	mov    ebx,eax
c00029a6:	83 f8 01             	cmp    eax,0x1
c00029a9:	0f 86 e9 fb ff ff    	jbe    c0002598 <mount_volume+0xc8>
c00029af:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b2:	0f 86 e0 fb ff ff    	jbe    c0002598 <mount_volume+0xc8>
c00029b8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029bc:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029bf:	0f af c2             	imul   eax,edx
c00029c2:	31 d2                	xor    edx,edx
c00029c4:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c7:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029ca:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029cd:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029d0:	89 da                	mov    edx,ebx
c00029d2:	31 c9                	xor    ecx,ecx
c00029d4:	c1 ea 07             	shr    edx,0x7
c00029d7:	89 e8                	mov    eax,ebp
c00029d9:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029dc:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029df:	e8 41 f8 ff ff       	call   c0002225 <move_window>
c00029e4:	85 c0                	test   eax,eax
c00029e6:	0f 85 9d fb ff ff    	jne    c0002589 <mount_volume+0xb9>
c00029ec:	89 d8                	mov    eax,ebx
c00029ee:	83 e0 7f             	and    eax,0x7f
c00029f1:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f4:	e8 62 f0 ff ff       	call   c0001a5b <ld_dword>
c00029f9:	83 f8 ff             	cmp    eax,0xffffffff
c00029fc:	74 0a                	je     c0002a08 <mount_volume+0x538>
c00029fe:	43                   	inc    ebx
c00029ff:	39 d8                	cmp    eax,ebx
c0002a01:	74 cd                	je     c00029d0 <mount_volume+0x500>
c0002a03:	e9 90 fb ff ff       	jmp    c0002598 <mount_volume+0xc8>
c0002a08:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a0f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a16:	bb 04 00 00 00       	mov    ebx,0x4
c0002a1b:	e9 e8 fd ff ff       	jmp    c0002808 <mount_volume+0x338>
c0002a20:	31 db                	xor    ebx,ebx
c0002a22:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a27:	0f 97 c3             	seta   bl
c0002a2a:	43                   	inc    ebx
c0002a2b:	e9 92 fc ff ff       	jmp    c00026c2 <mount_volume+0x1f2>
c0002a30:	83 c4 3c             	add    esp,0x3c
c0002a33:	89 d8                	mov    eax,ebx
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <find_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	57                   	push   edi
c0002a3c:	89 c7                	mov    edi,eax
c0002a3e:	56                   	push   esi
c0002a3f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a42:	53                   	push   ebx
c0002a43:	83 ec 1c             	sub    esp,0x1c
c0002a46:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a49:	83 e8 02             	sub    eax,0x2
c0002a4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a50:	39 f0                	cmp    eax,esi
c0002a52:	77 02                	ja     c0002a56 <find_bitmap+0x1c>
c0002a54:	31 f6                	xor    esi,esi
c0002a56:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a5a:	89 f3                	mov    ebx,esi
c0002a5c:	31 ed                	xor    ebp,ebp
c0002a5e:	89 da                	mov    edx,ebx
c0002a60:	31 c9                	xor    ecx,ecx
c0002a62:	c1 ea 0c             	shr    edx,0xc
c0002a65:	89 f8                	mov    eax,edi
c0002a67:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a6a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6d:	e8 b3 f7 ff ff       	call   c0002225 <move_window>
c0002a72:	85 c0                	test   eax,eax
c0002a74:	75 68                	jne    c0002ade <find_bitmap+0xa4>
c0002a76:	89 d9                	mov    ecx,ebx
c0002a78:	b8 01 00 00 00       	mov    eax,0x1
c0002a7d:	83 e1 07             	and    ecx,0x7
c0002a80:	89 da                	mov    edx,ebx
c0002a82:	d3 e0                	shl    eax,cl
c0002a84:	c1 ea 03             	shr    edx,0x3
c0002a87:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a8a:	83 e9 02             	sub    ecx,0x2
c0002a8d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a97:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a9b:	43                   	inc    ebx
c0002a9c:	21 c1                	and    ecx,eax
c0002a9e:	01 c0                	add    eax,eax
c0002aa0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa4:	77 09                	ja     c0002aaf <find_bitmap+0x75>
c0002aa6:	31 db                	xor    ebx,ebx
c0002aa8:	ba 00 02 00 00       	mov    edx,0x200
c0002aad:	31 c0                	xor    eax,eax
c0002aaf:	84 c9                	test   cl,cl
c0002ab1:	75 10                	jne    c0002ac3 <find_bitmap+0x89>
c0002ab3:	45                   	inc    ebp
c0002ab4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab8:	75 0f                	jne    c0002ac9 <find_bitmap+0x8f>
c0002aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abe:	83 c0 02             	add    eax,0x2
c0002ac1:	eb 22                	jmp    c0002ae5 <find_bitmap+0xab>
c0002ac3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac7:	31 ed                	xor    ebp,ebp
c0002ac9:	39 de                	cmp    esi,ebx
c0002acb:	74 16                	je     c0002ae3 <find_bitmap+0xa9>
c0002acd:	84 c0                	test   al,al
c0002acf:	75 c6                	jne    c0002a97 <find_bitmap+0x5d>
c0002ad1:	42                   	inc    edx
c0002ad2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad8:	77 84                	ja     c0002a5e <find_bitmap+0x24>
c0002ada:	b0 01                	mov    al,0x1
c0002adc:	eb b9                	jmp    c0002a97 <find_bitmap+0x5d>
c0002ade:	83 c8 ff             	or     eax,0xffffffff
c0002ae1:	eb 02                	jmp    c0002ae5 <find_bitmap+0xab>
c0002ae3:	31 c0                	xor    eax,eax
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	5b                   	pop    ebx
c0002ae9:	5e                   	pop    esi
c0002aea:	5f                   	pop    edi
c0002aeb:	5d                   	pop    ebp
c0002aec:	c3                   	ret    

c0002aed <change_bitmap>:
c0002aed:	55                   	push   ebp
c0002aee:	89 cd                	mov    ebp,ecx
c0002af0:	57                   	push   edi
c0002af1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af4:	56                   	push   esi
c0002af5:	89 c7                	mov    edi,eax
c0002af7:	53                   	push   ebx
c0002af8:	89 c8                	mov    eax,ecx
c0002afa:	83 ec 1c             	sub    esp,0x1c
c0002afd:	31 d2                	xor    edx,edx
c0002aff:	c1 e8 0c             	shr    eax,0xc
c0002b02:	89 ce                	mov    esi,ecx
c0002b04:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b07:	bb 01 00 00 00       	mov    ebx,0x1
c0002b0c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b0f:	83 e1 07             	and    ecx,0x7
c0002b12:	c1 ee 03             	shr    esi,0x3
c0002b15:	d3 e3                	shl    ebx,cl
c0002b17:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b1d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b21:	89 c1                	mov    ecx,eax
c0002b23:	89 d3                	mov    ebx,edx
c0002b25:	83 c1 01             	add    ecx,0x1
c0002b28:	83 d3 00             	adc    ebx,0x0
c0002b2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b2f:	89 d1                	mov    ecx,edx
c0002b31:	89 c2                	mov    edx,eax
c0002b33:	89 f8                	mov    eax,edi
c0002b35:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b39:	e8 e7 f6 ff ff       	call   c0002225 <move_window>
c0002b3e:	89 c1                	mov    ecx,eax
c0002b40:	85 c0                	test   eax,eax
c0002b42:	75 48                	jne    c0002b8c <change_bitmap+0x9f>
c0002b44:	31 d2                	xor    edx,edx
c0002b46:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b4a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4e:	0f 95 c2             	setne  dl
c0002b51:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b55:	74 3c                	je     c0002b93 <change_bitmap+0xa6>
c0002b57:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b5b:	4d                   	dec    ebp
c0002b5c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b60:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b64:	74 32                	je     c0002b98 <change_bitmap+0xab>
c0002b66:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b6a:	75 d8                	jne    c0002b44 <change_bitmap+0x57>
c0002b6c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b6f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b74:	89 c3                	mov    ebx,eax
c0002b76:	31 f6                	xor    esi,esi
c0002b78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b80:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b86:	74 99                	je     c0002b21 <change_bitmap+0x34>
c0002b88:	89 de                	mov    esi,ebx
c0002b8a:	eb b8                	jmp    c0002b44 <change_bitmap+0x57>
c0002b8c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b91:	eb 05                	jmp    c0002b98 <change_bitmap+0xab>
c0002b93:	b9 02 00 00 00       	mov    ecx,0x2
c0002b98:	83 c4 1c             	add    esp,0x1c
c0002b9b:	89 c8                	mov    eax,ecx
c0002b9d:	5b                   	pop    ebx
c0002b9e:	5e                   	pop    esi
c0002b9f:	5f                   	pop    edi
c0002ba0:	5d                   	pop    ebp
c0002ba1:	c3                   	ret    

c0002ba2 <put_fat>:
c0002ba2:	83 fa 01             	cmp    edx,0x1
c0002ba5:	0f 86 7b 01 00 00    	jbe    c0002d26 <put_fat+0x184>
c0002bab:	55                   	push   ebp
c0002bac:	57                   	push   edi
c0002bad:	89 cf                	mov    edi,ecx
c0002baf:	56                   	push   esi
c0002bb0:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb5:	53                   	push   ebx
c0002bb6:	89 c6                	mov    esi,eax
c0002bb8:	83 ec 1c             	sub    esp,0x1c
c0002bbb:	89 d3                	mov    ebx,edx
c0002bbd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc0:	0f 86 68 01 00 00    	jbe    c0002d2e <put_fat+0x18c>
c0002bc6:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc8:	3c 02                	cmp    al,0x2
c0002bca:	0f 84 c7 00 00 00    	je     c0002c97 <put_fat+0xf5>
c0002bd0:	77 09                	ja     c0002bdb <put_fat+0x39>
c0002bd2:	fe c8                	dec    al
c0002bd4:	74 17                	je     c0002bed <put_fat+0x4b>
c0002bd6:	e9 53 01 00 00       	jmp    c0002d2e <put_fat+0x18c>
c0002bdb:	b9 02 00 00 00       	mov    ecx,0x2
c0002be0:	3c 04                	cmp    al,0x4
c0002be2:	0f 86 e1 00 00 00    	jbe    c0002cc9 <put_fat+0x127>
c0002be8:	e9 41 01 00 00       	jmp    c0002d2e <put_fat+0x18c>
c0002bed:	89 d5                	mov    ebp,edx
c0002bef:	31 c9                	xor    ecx,ecx
c0002bf1:	d1 ed                	shr    ebp,1
c0002bf3:	89 f0                	mov    eax,esi
c0002bf5:	01 d5                	add    ebp,edx
c0002bf7:	89 ea                	mov    edx,ebp
c0002bf9:	c1 ea 09             	shr    edx,0x9
c0002bfc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bff:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c02:	e8 1e f6 ff ff       	call   c0002225 <move_window>
c0002c07:	89 c1                	mov    ecx,eax
c0002c09:	85 c0                	test   eax,eax
c0002c0b:	0f 85 1d 01 00 00    	jne    c0002d2e <put_fat+0x18c>
c0002c11:	8d 46 54             	lea    eax,[esi+0x54]
c0002c14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c18:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c1b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c25:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c29:	83 e3 01             	and    ebx,0x1
c0002c2c:	89 f8                	mov    eax,edi
c0002c2e:	74 0d                	je     c0002c3d <put_fat+0x9b>
c0002c30:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c33:	89 fa                	mov    edx,edi
c0002c35:	c1 e2 04             	shl    edx,0x4
c0002c38:	83 e0 0f             	and    eax,0xf
c0002c3b:	09 d0                	or     eax,edx
c0002c3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c41:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c44:	c1 ea 09             	shr    edx,0x9
c0002c47:	31 c9                	xor    ecx,ecx
c0002c49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c4c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c50:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c53:	89 f0                	mov    eax,esi
c0002c55:	e8 cb f5 ff ff       	call   c0002225 <move_window>
c0002c5a:	89 c1                	mov    ecx,eax
c0002c5c:	85 c0                	test   eax,eax
c0002c5e:	0f 85 ca 00 00 00    	jne    c0002d2e <put_fat+0x18c>
c0002c64:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c72:	85 db                	test   ebx,ebx
c0002c74:	74 07                	je     c0002c7d <put_fat+0xdb>
c0002c76:	c1 ef 04             	shr    edi,0x4
c0002c79:	89 fa                	mov    edx,edi
c0002c7b:	eb 0e                	jmp    c0002c8b <put_fat+0xe9>
c0002c7d:	c1 ef 08             	shr    edi,0x8
c0002c80:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c83:	83 e2 f0             	and    edx,0xfffffff0
c0002c86:	83 e7 0f             	and    edi,0xf
c0002c89:	09 fa                	or     edx,edi
c0002c8b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c92:	e9 97 00 00 00       	jmp    c0002d2e <put_fat+0x18c>
c0002c97:	c1 ea 08             	shr    edx,0x8
c0002c9a:	31 c9                	xor    ecx,ecx
c0002c9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c9f:	89 f0                	mov    eax,esi
c0002ca1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca4:	e8 7c f5 ff ff       	call   c0002225 <move_window>
c0002ca9:	89 c1                	mov    ecx,eax
c0002cab:	85 c0                	test   eax,eax
c0002cad:	75 7f                	jne    c0002d2e <put_fat+0x18c>
c0002caf:	01 db                	add    ebx,ebx
c0002cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb5:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cbb:	0f b7 d7             	movzx  edx,di
c0002cbe:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc2:	e8 f9 ed ff ff       	call   c0001ac0 <st_word>
c0002cc7:	eb 53                	jmp    c0002d1c <put_fat+0x17a>
c0002cc9:	c1 ea 07             	shr    edx,0x7
c0002ccc:	31 c9                	xor    ecx,ecx
c0002cce:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd1:	89 f0                	mov    eax,esi
c0002cd3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd6:	e8 4a f5 ff ff       	call   c0002225 <move_window>
c0002cdb:	89 c1                	mov    ecx,eax
c0002cdd:	85 c0                	test   eax,eax
c0002cdf:	75 4d                	jne    c0002d2e <put_fat+0x18c>
c0002ce1:	c1 e3 02             	shl    ebx,0x2
c0002ce4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ced:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cf1:	74 1c                	je     c0002d0f <put_fat+0x16d>
c0002cf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf7:	89 d8                	mov    eax,ebx
c0002cf9:	e8 5d ed ff ff       	call   c0001a5b <ld_dword>
c0002cfe:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d04:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d0d:	09 c7                	or     edi,eax
c0002d0f:	89 fa                	mov    edx,edi
c0002d11:	89 d8                	mov    eax,ebx
c0002d13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d17:	e8 a8 ed ff ff       	call   c0001ac4 <st_dword>
c0002d1c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d24:	eb 08                	jmp    c0002d2e <put_fat+0x18c>
c0002d26:	b9 02 00 00 00       	mov    ecx,0x2
c0002d2b:	89 c8                	mov    eax,ecx
c0002d2d:	c3                   	ret    
c0002d2e:	83 c4 1c             	add    esp,0x1c
c0002d31:	89 c8                	mov    eax,ecx
c0002d33:	5b                   	pop    ebx
c0002d34:	5e                   	pop    esi
c0002d35:	5f                   	pop    edi
c0002d36:	5d                   	pop    ebp
c0002d37:	c3                   	ret    

c0002d38 <fill_last_frag>:
c0002d38:	57                   	push   edi
c0002d39:	89 cf                	mov    edi,ecx
c0002d3b:	56                   	push   esi
c0002d3c:	89 d6                	mov    esi,edx
c0002d3e:	53                   	push   ebx
c0002d3f:	89 c3                	mov    ebx,eax
c0002d41:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d44:	85 c0                	test   eax,eax
c0002d46:	74 21                	je     c0002d69 <fill_last_frag+0x31>
c0002d48:	89 f9                	mov    ecx,edi
c0002d4a:	83 f8 01             	cmp    eax,0x1
c0002d4d:	76 05                	jbe    c0002d54 <fill_last_frag+0x1c>
c0002d4f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d52:	29 c1                	sub    ecx,eax
c0002d54:	8d 56 01             	lea    edx,[esi+0x1]
c0002d57:	29 c2                	sub    edx,eax
c0002d59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d5b:	e8 42 fe ff ff       	call   c0002ba2 <put_fat>
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 05                	jne    c0002d69 <fill_last_frag+0x31>
c0002d64:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d67:	eb d8                	jmp    c0002d41 <fill_last_frag+0x9>
c0002d69:	5b                   	pop    ebx
c0002d6a:	5e                   	pop    esi
c0002d6b:	5f                   	pop    edi
c0002d6c:	c3                   	ret    

c0002d6d <fill_first_frag>:
c0002d6d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d71:	75 2d                	jne    c0002da0 <fill_first_frag+0x33>
c0002d73:	57                   	push   edi
c0002d74:	56                   	push   esi
c0002d75:	53                   	push   ebx
c0002d76:	89 c3                	mov    ebx,eax
c0002d78:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d7b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7e:	01 d7                	add    edi,edx
c0002d80:	39 fa                	cmp    edx,edi
c0002d82:	74 14                	je     c0002d98 <fill_first_frag+0x2b>
c0002d84:	8d 72 01             	lea    esi,[edx+0x1]
c0002d87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d89:	89 f1                	mov    ecx,esi
c0002d8b:	e8 12 fe ff ff       	call   c0002ba2 <put_fat>
c0002d90:	89 f2                	mov    edx,esi
c0002d92:	85 c0                	test   eax,eax
c0002d94:	74 ea                	je     c0002d80 <fill_first_frag+0x13>
c0002d96:	eb 0b                	jmp    c0002da3 <fill_first_frag+0x36>
c0002d98:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d9c:	31 c0                	xor    eax,eax
c0002d9e:	eb 03                	jmp    c0002da3 <fill_first_frag+0x36>
c0002da0:	31 c0                	xor    eax,eax
c0002da2:	c3                   	ret    
c0002da3:	5b                   	pop    ebx
c0002da4:	5e                   	pop    esi
c0002da5:	5f                   	pop    edi
c0002da6:	c3                   	ret    

c0002da7 <get_fat>:
c0002da7:	83 fa 01             	cmp    edx,0x1
c0002daa:	0f 86 db 01 00 00    	jbe    c0002f8b <get_fat+0x1e4>
c0002db0:	55                   	push   ebp
c0002db1:	b9 01 00 00 00       	mov    ecx,0x1
c0002db6:	57                   	push   edi
c0002db7:	56                   	push   esi
c0002db8:	53                   	push   ebx
c0002db9:	83 ec 1c             	sub    esp,0x1c
c0002dbc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbe:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dc1:	0f 86 cc 01 00 00    	jbe    c0002f93 <get_fat+0x1ec>
c0002dc7:	89 c3                	mov    ebx,eax
c0002dc9:	8a 07                	mov    al,BYTE PTR [edi]
c0002dcb:	89 d6                	mov    esi,edx
c0002dcd:	3c 02                	cmp    al,0x2
c0002dcf:	0f 84 99 00 00 00    	je     c0002e6e <get_fat+0xc7>
c0002dd5:	77 09                	ja     c0002de0 <get_fat+0x39>
c0002dd7:	fe c8                	dec    al
c0002dd9:	74 1a                	je     c0002df5 <get_fat+0x4e>
c0002ddb:	e9 b3 01 00 00       	jmp    c0002f93 <get_fat+0x1ec>
c0002de0:	3c 03                	cmp    al,0x3
c0002de2:	0f 84 b5 00 00 00    	je     c0002e9d <get_fat+0xf6>
c0002de8:	3c 04                	cmp    al,0x4
c0002dea:	0f 84 e3 00 00 00    	je     c0002ed3 <get_fat+0x12c>
c0002df0:	e9 9e 01 00 00       	jmp    c0002f93 <get_fat+0x1ec>
c0002df5:	89 d3                	mov    ebx,edx
c0002df7:	31 c9                	xor    ecx,ecx
c0002df9:	d1 eb                	shr    ebx,1
c0002dfb:	89 f8                	mov    eax,edi
c0002dfd:	01 d3                	add    ebx,edx
c0002dff:	89 da                	mov    edx,ebx
c0002e01:	c1 ea 09             	shr    edx,0x9
c0002e04:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e07:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e0a:	e8 16 f4 ff ff       	call   c0002225 <move_window>
c0002e0f:	85 c0                	test   eax,eax
c0002e11:	74 08                	je     c0002e1b <get_fat+0x74>
c0002e13:	83 c9 ff             	or     ecx,0xffffffff
c0002e16:	e9 78 01 00 00       	jmp    c0002f93 <get_fat+0x1ec>
c0002e1b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1e:	31 c9                	xor    ecx,ecx
c0002e20:	89 ea                	mov    edx,ebp
c0002e22:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e28:	c1 ea 09             	shr    edx,0x9
c0002e2b:	89 f8                	mov    eax,edi
c0002e2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e30:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e34:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e37:	e8 e9 f3 ff ff       	call   c0002225 <move_window>
c0002e3c:	85 c0                	test   eax,eax
c0002e3e:	75 d3                	jne    c0002e13 <get_fat+0x6c>
c0002e40:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e46:	0f b6 c3             	movzx  eax,bl
c0002e49:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4e:	c1 e3 08             	shl    ebx,0x8
c0002e51:	09 c3                	or     ebx,eax
c0002e53:	89 d9                	mov    ecx,ebx
c0002e55:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e5b:	83 e6 01             	and    esi,0x1
c0002e5e:	0f 84 2f 01 00 00    	je     c0002f93 <get_fat+0x1ec>
c0002e64:	89 d9                	mov    ecx,ebx
c0002e66:	c1 e9 04             	shr    ecx,0x4
c0002e69:	e9 25 01 00 00       	jmp    c0002f93 <get_fat+0x1ec>
c0002e6e:	c1 ea 08             	shr    edx,0x8
c0002e71:	31 c9                	xor    ecx,ecx
c0002e73:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e76:	89 f8                	mov    eax,edi
c0002e78:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7b:	e8 a5 f3 ff ff       	call   c0002225 <move_window>
c0002e80:	85 c0                	test   eax,eax
c0002e82:	75 8f                	jne    c0002e13 <get_fat+0x6c>
c0002e84:	01 f6                	add    esi,esi
c0002e86:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e8c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e90:	e8 b9 eb ff ff       	call   c0001a4e <ld_word>
c0002e95:	0f b7 c8             	movzx  ecx,ax
c0002e98:	e9 f6 00 00 00       	jmp    c0002f93 <get_fat+0x1ec>
c0002e9d:	c1 ea 07             	shr    edx,0x7
c0002ea0:	31 c9                	xor    ecx,ecx
c0002ea2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eaa:	e8 76 f3 ff ff       	call   c0002225 <move_window>
c0002eaf:	85 c0                	test   eax,eax
c0002eb1:	0f 85 5c ff ff ff    	jne    c0002e13 <get_fat+0x6c>
c0002eb7:	c1 e6 02             	shl    esi,0x2
c0002eba:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec4:	e8 92 eb ff ff       	call   c0001a5b <ld_dword>
c0002ec9:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ece:	e9 b4 00 00 00       	jmp    c0002f87 <get_fat+0x1e0>
c0002ed3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed9:	89 d1                	mov    ecx,edx
c0002edb:	09 c1                	or     ecx,eax
c0002edd:	74 06                	je     c0002ee5 <get_fat+0x13e>
c0002edf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee3:	75 0f                	jne    c0002ef4 <get_fat+0x14d>
c0002ee5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eea:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eee:	0f 85 9f 00 00 00    	jne    c0002f93 <get_fat+0x1ec>
c0002ef4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef8:	89 f5                	mov    ebp,esi
c0002efa:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002eff:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f02:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f05:	80 f9 02             	cmp    cl,0x2
c0002f08:	75 35                	jne    c0002f3f <get_fat+0x198>
c0002f0a:	83 c0 ff             	add    eax,0xffffffff
c0002f0d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f12:	83 d2 ff             	adc    edx,0xffffffff
c0002f15:	31 db                	xor    ebx,ebx
c0002f17:	53                   	push   ebx
c0002f18:	51                   	push   ecx
c0002f19:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f1d:	c1 ea 09             	shr    edx,0x9
c0002f20:	52                   	push   edx
c0002f21:	50                   	push   eax
c0002f22:	e8 c5 c5 01 00       	call   c001f4ec <__udivdi3>
c0002f27:	83 c4 10             	add    esp,0x10
c0002f2a:	b9 01 00 00 00       	mov    ecx,0x1
c0002f2f:	39 c5                	cmp    ebp,eax
c0002f31:	77 60                	ja     c0002f93 <get_fat+0x1ec>
c0002f33:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f38:	74 59                	je     c0002f93 <get_fat+0x1ec>
c0002f3a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3d:	eb 54                	jmp    c0002f93 <get_fat+0x1ec>
c0002f3f:	80 f9 03             	cmp    cl,0x3
c0002f42:	75 05                	jne    c0002f49 <get_fat+0x1a2>
c0002f44:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f47:	77 f1                	ja     c0002f3a <get_fat+0x193>
c0002f49:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f52:	75 3f                	jne    c0002f93 <get_fat+0x1ec>
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	31 c9                	xor    ecx,ecx
c0002f58:	c1 ea 07             	shr    edx,0x7
c0002f5b:	89 f8                	mov    eax,edi
c0002f5d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f60:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f63:	e8 bd f2 ff ff       	call   c0002225 <move_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 a3 fe ff ff    	jne    c0002e13 <get_fat+0x6c>
c0002f70:	c1 e6 02             	shl    esi,0x2
c0002f73:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f79:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7d:	e8 d9 ea ff ff       	call   c0001a5b <ld_dword>
c0002f82:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f87:	89 c1                	mov    ecx,eax
c0002f89:	eb 08                	jmp    c0002f93 <get_fat+0x1ec>
c0002f8b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f90:	89 c8                	mov    eax,ecx
c0002f92:	c3                   	ret    
c0002f93:	83 c4 1c             	add    esp,0x1c
c0002f96:	89 c8                	mov    eax,ecx
c0002f98:	5b                   	pop    ebx
c0002f99:	5e                   	pop    esi
c0002f9a:	5f                   	pop    edi
c0002f9b:	5d                   	pop    ebp
c0002f9c:	c3                   	ret    

c0002f9d <dir_sdi>:
c0002f9d:	55                   	push   ebp
c0002f9e:	57                   	push   edi
c0002f9f:	56                   	push   esi
c0002fa0:	53                   	push   ebx
c0002fa1:	89 c3                	mov    ebx,eax
c0002fa3:	83 ec 1c             	sub    esp,0x1c
c0002fa6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa8:	31 c0                	xor    eax,eax
c0002faa:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fad:	0f 94 c0             	sete   al
c0002fb0:	48                   	dec    eax
c0002fb1:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb6:	05 00 00 00 10       	add    eax,0x10000000
c0002fbb:	39 d0                	cmp    eax,edx
c0002fbd:	77 0a                	ja     c0002fc9 <dir_sdi+0x2c>
c0002fbf:	b8 02 00 00 00       	mov    eax,0x2
c0002fc4:	e9 c4 00 00 00       	jmp    c000308d <dir_sdi+0xf0>
c0002fc9:	89 d6                	mov    esi,edx
c0002fcb:	f6 c2 1f             	test   dl,0x1f
c0002fce:	75 ef                	jne    c0002fbf <dir_sdi+0x22>
c0002fd0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd6:	85 c9                	test   ecx,ecx
c0002fd8:	75 2d                	jne    c0003007 <dir_sdi+0x6a>
c0002fda:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fdd:	77 1b                	ja     c0002ffa <dir_sdi+0x5d>
c0002fdf:	89 f2                	mov    edx,esi
c0002fe1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe5:	c1 ea 05             	shr    edx,0x5
c0002fe8:	39 c2                	cmp    edx,eax
c0002fea:	73 d3                	jae    c0002fbf <dir_sdi+0x22>
c0002fec:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fef:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff5:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff8:	eb 4b                	jmp    c0003045 <dir_sdi+0xa8>
c0002ffa:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003001:	85 c0                	test   eax,eax
c0003003:	74 da                	je     c0002fdf <dir_sdi+0x42>
c0003005:	89 c1                	mov    ecx,eax
c0003007:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000300b:	c1 e5 09             	shl    ebp,0x9
c000300e:	89 ca                	mov    edx,ecx
c0003010:	39 ee                	cmp    esi,ebp
c0003012:	72 1c                	jb     c0003030 <dir_sdi+0x93>
c0003014:	89 d8                	mov    eax,ebx
c0003016:	e8 8c fd ff ff       	call   c0002da7 <get_fat>
c000301b:	89 c1                	mov    ecx,eax
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	74 66                	je     c0003088 <dir_sdi+0xeb>
c0003022:	83 f8 01             	cmp    eax,0x1
c0003025:	76 98                	jbe    c0002fbf <dir_sdi+0x22>
c0003027:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000302a:	76 93                	jbe    c0002fbf <dir_sdi+0x22>
c000302c:	29 ee                	sub    esi,ebp
c000302e:	eb de                	jmp    c000300e <dir_sdi+0x71>
c0003030:	89 f8                	mov    eax,edi
c0003032:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003036:	e8 ac ec ff ff       	call   c0001ce7 <clst2sect>
c000303b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003042:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003045:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003048:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000304b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304e:	89 d1                	mov    ecx,edx
c0003050:	09 c1                	or     ecx,eax
c0003052:	0f 84 67 ff ff ff    	je     c0002fbf <dir_sdi+0x22>
c0003058:	89 f1                	mov    ecx,esi
c000305a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003062:	c1 e9 09             	shr    ecx,0x9
c0003065:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003069:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003071:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003077:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000307e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003081:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003084:	31 c0                	xor    eax,eax
c0003086:	eb 05                	jmp    c000308d <dir_sdi+0xf0>
c0003088:	b8 01 00 00 00       	mov    eax,0x1
c000308d:	83 c4 1c             	add    esp,0x1c
c0003090:	5b                   	pop    ebx
c0003091:	5e                   	pop    esi
c0003092:	5f                   	pop    edi
c0003093:	5d                   	pop    ebp
c0003094:	c3                   	ret    

c0003095 <create_chain>:
c0003095:	55                   	push   ebp
c0003096:	89 c5                	mov    ebp,eax
c0003098:	57                   	push   edi
c0003099:	56                   	push   esi
c000309a:	53                   	push   ebx
c000309b:	83 ec 1c             	sub    esp,0x1c
c000309e:	85 d2                	test   edx,edx
c00030a0:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a6:	75 0e                	jne    c00030b6 <create_chain+0x21>
c00030a8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030ab:	85 ff                	test   edi,edi
c00030ad:	74 39                	je     c00030e8 <create_chain+0x53>
c00030af:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b2:	77 39                	ja     c00030ed <create_chain+0x58>
c00030b4:	eb 32                	jmp    c00030e8 <create_chain+0x53>
c00030b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030ba:	e8 e8 fc ff ff       	call   c0002da7 <get_fat>
c00030bf:	89 c3                	mov    ebx,eax
c00030c1:	83 f8 01             	cmp    eax,0x1
c00030c4:	77 0a                	ja     c00030d0 <create_chain+0x3b>
c00030c6:	bb 01 00 00 00       	mov    ebx,0x1
c00030cb:	e9 bc 01 00 00       	jmp    c000328c <create_chain+0x1f7>
c00030d0:	83 f8 ff             	cmp    eax,0xffffffff
c00030d3:	0f 84 60 01 00 00    	je     c0003239 <create_chain+0x1a4>
c00030d9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030dc:	0f 87 aa 01 00 00    	ja     c000328c <create_chain+0x1f7>
c00030e2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e6:	eb 05                	jmp    c00030ed <create_chain+0x58>
c00030e8:	bf 01 00 00 00       	mov    edi,0x1
c00030ed:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030f1:	75 07                	jne    c00030fa <create_chain+0x65>
c00030f3:	31 db                	xor    ebx,ebx
c00030f5:	e9 92 01 00 00       	jmp    c000328c <create_chain+0x1f7>
c00030fa:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fd:	75 74                	jne    c0003173 <create_chain+0xde>
c00030ff:	b9 01 00 00 00       	mov    ecx,0x1
c0003104:	89 fa                	mov    edx,edi
c0003106:	89 f0                	mov    eax,esi
c0003108:	e8 2d f9 ff ff       	call   c0002a3a <find_bitmap>
c000310d:	89 c3                	mov    ebx,eax
c000310f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003112:	83 f8 fd             	cmp    eax,0xfffffffd
c0003115:	0f 87 71 01 00 00    	ja     c000328c <create_chain+0x1f7>
c000311b:	83 ec 0c             	sub    esp,0xc
c000311e:	b9 01 00 00 00       	mov    ecx,0x1
c0003123:	89 da                	mov    edx,ebx
c0003125:	89 f0                	mov    eax,esi
c0003127:	6a 01                	push   0x1
c0003129:	e8 bf f9 ff ff       	call   c0002aed <change_bitmap>
c000312e:	83 c4 10             	add    esp,0x10
c0003131:	83 f8 02             	cmp    eax,0x2
c0003134:	74 90                	je     c00030c6 <create_chain+0x31>
c0003136:	83 f8 01             	cmp    eax,0x1
c0003139:	0f 84 fa 00 00 00    	je     c0003239 <create_chain+0x1a4>
c000313f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003144:	75 09                	jne    c000314f <create_chain+0xba>
c0003146:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000314a:	e9 0e 01 00 00       	jmp    c000325d <create_chain+0x1c8>
c000314f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003153:	0f 85 e9 00 00 00    	jne    c0003242 <create_chain+0x1ad>
c0003159:	8d 57 01             	lea    edx,[edi+0x1]
c000315c:	39 da                	cmp    edx,ebx
c000315e:	0f 84 f9 00 00 00    	je     c000325d <create_chain+0x1c8>
c0003164:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003167:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000316b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316e:	e9 cf 00 00 00       	jmp    c0003242 <create_chain+0x1ad>
c0003173:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003177:	75 41                	jne    c00031ba <create_chain+0x125>
c0003179:	8d 5f 01             	lea    ebx,[edi+0x1]
c000317c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000317f:	77 05                	ja     c0003186 <create_chain+0xf1>
c0003181:	bb 02 00 00 00       	mov    ebx,0x2
c0003186:	89 da                	mov    edx,ebx
c0003188:	89 e8                	mov    eax,ebp
c000318a:	e8 18 fc ff ff       	call   c0002da7 <get_fat>
c000318f:	83 f8 01             	cmp    eax,0x1
c0003192:	0f 84 a6 00 00 00    	je     c000323e <create_chain+0x1a9>
c0003198:	83 f8 ff             	cmp    eax,0xffffffff
c000319b:	0f 84 9d 00 00 00    	je     c000323e <create_chain+0x1a9>
c00031a1:	85 c0                	test   eax,eax
c00031a3:	74 11                	je     c00031b6 <create_chain+0x121>
c00031a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a8:	83 f8 01             	cmp    eax,0x1
c00031ab:	76 0d                	jbe    c00031ba <create_chain+0x125>
c00031ad:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b0:	76 08                	jbe    c00031ba <create_chain+0x125>
c00031b2:	89 c7                	mov    edi,eax
c00031b4:	eb 04                	jmp    c00031ba <create_chain+0x125>
c00031b6:	85 db                	test   ebx,ebx
c00031b8:	75 36                	jne    c00031f0 <create_chain+0x15b>
c00031ba:	89 fb                	mov    ebx,edi
c00031bc:	43                   	inc    ebx
c00031bd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c0:	77 0e                	ja     c00031d0 <create_chain+0x13b>
c00031c2:	83 ff 01             	cmp    edi,0x1
c00031c5:	0f 86 28 ff ff ff    	jbe    c00030f3 <create_chain+0x5e>
c00031cb:	bb 02 00 00 00       	mov    ebx,0x2
c00031d0:	89 da                	mov    edx,ebx
c00031d2:	89 e8                	mov    eax,ebp
c00031d4:	e8 ce fb ff ff       	call   c0002da7 <get_fat>
c00031d9:	85 c0                	test   eax,eax
c00031db:	74 13                	je     c00031f0 <create_chain+0x15b>
c00031dd:	83 f8 01             	cmp    eax,0x1
c00031e0:	74 5c                	je     c000323e <create_chain+0x1a9>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	74 57                	je     c000323e <create_chain+0x1a9>
c00031e7:	39 fb                	cmp    ebx,edi
c00031e9:	75 d1                	jne    c00031bc <create_chain+0x127>
c00031eb:	e9 03 ff ff ff       	jmp    c00030f3 <create_chain+0x5e>
c00031f0:	83 c9 ff             	or     ecx,0xffffffff
c00031f3:	89 da                	mov    edx,ebx
c00031f5:	89 f0                	mov    eax,esi
c00031f7:	e8 a6 f9 ff ff       	call   c0002ba2 <put_fat>
c00031fc:	85 c0                	test   eax,eax
c00031fe:	75 14                	jne    c0003214 <create_chain+0x17f>
c0003200:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003205:	74 0d                	je     c0003214 <create_chain+0x17f>
c0003207:	89 d9                	mov    ecx,ebx
c0003209:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000320d:	89 f0                	mov    eax,esi
c000320f:	e8 8e f9 ff ff       	call   c0002ba2 <put_fat>
c0003214:	85 c0                	test   eax,eax
c0003216:	75 1a                	jne    c0003232 <create_chain+0x19d>
c0003218:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000321b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003221:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003224:	39 d0                	cmp    eax,edx
c0003226:	77 04                	ja     c000322c <create_chain+0x197>
c0003228:	48                   	dec    eax
c0003229:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003230:	eb 5a                	jmp    c000328c <create_chain+0x1f7>
c0003232:	48                   	dec    eax
c0003233:	0f 85 8d fe ff ff    	jne    c00030c6 <create_chain+0x31>
c0003239:	83 cb ff             	or     ebx,0xffffffff
c000323c:	eb 4e                	jmp    c000328c <create_chain+0x1f7>
c000323e:	89 c3                	mov    ebx,eax
c0003240:	eb 4a                	jmp    c000328c <create_chain+0x1f7>
c0003242:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003246:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003249:	41                   	inc    ecx
c000324a:	39 d9                	cmp    ecx,ebx
c000324c:	75 19                	jne    c0003267 <create_chain+0x1d2>
c000324e:	b9 02 00 00 00       	mov    ecx,0x2
c0003253:	85 d2                	test   edx,edx
c0003255:	74 03                	je     c000325a <create_chain+0x1c5>
c0003257:	8d 4a 01             	lea    ecx,[edx+0x1]
c000325a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000325d:	85 c0                	test   eax,eax
c000325f:	0f 85 61 fe ff ff    	jne    c00030c6 <create_chain+0x31>
c0003265:	eb b1                	jmp    c0003218 <create_chain+0x183>
c0003267:	85 d2                	test   edx,edx
c0003269:	75 07                	jne    c0003272 <create_chain+0x1dd>
c000326b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003272:	89 d9                	mov    ecx,ebx
c0003274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003278:	89 e8                	mov    eax,ebp
c000327a:	e8 b9 fa ff ff       	call   c0002d38 <fill_last_frag>
c000327f:	85 c0                	test   eax,eax
c0003281:	75 af                	jne    c0003232 <create_chain+0x19d>
c0003283:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000328a:	eb 8c                	jmp    c0003218 <create_chain+0x183>
c000328c:	83 c4 1c             	add    esp,0x1c
c000328f:	89 d8                	mov    eax,ebx
c0003291:	5b                   	pop    ebx
c0003292:	5e                   	pop    esi
c0003293:	5f                   	pop    edi
c0003294:	5d                   	pop    ebp
c0003295:	c3                   	ret    

c0003296 <remove_chain>:
c0003296:	55                   	push   ebp
c0003297:	57                   	push   edi
c0003298:	56                   	push   esi
c0003299:	53                   	push   ebx
c000329a:	83 ec 1c             	sub    esp,0x1c
c000329d:	83 fa 01             	cmp    edx,0x1
c00032a0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a6:	77 0a                	ja     c00032b2 <remove_chain+0x1c>
c00032a8:	b8 02 00 00 00       	mov    eax,0x2
c00032ad:	e9 24 01 00 00       	jmp    c00033d6 <remove_chain+0x140>
c00032b2:	89 d6                	mov    esi,edx
c00032b4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b7:	76 ef                	jbe    c00032a8 <remove_chain+0x12>
c00032b9:	89 c7                	mov    edi,eax
c00032bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c0:	75 06                	jne    c00032c8 <remove_chain+0x32>
c00032c2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c6:	eb 54                	jmp    c000331c <remove_chain+0x86>
c00032c8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032cb:	75 06                	jne    c00032d3 <remove_chain+0x3d>
c00032cd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d1:	74 ef                	je     c00032c2 <remove_chain+0x2c>
c00032d3:	83 c9 ff             	or     ecx,0xffffffff
c00032d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032da:	89 d8                	mov    eax,ebx
c00032dc:	e8 c1 f8 ff ff       	call   c0002ba2 <put_fat>
c00032e1:	85 c0                	test   eax,eax
c00032e3:	74 dd                	je     c00032c2 <remove_chain+0x2c>
c00032e5:	e9 ec 00 00 00       	jmp    c00033d6 <remove_chain+0x140>
c00032ea:	83 f8 01             	cmp    eax,0x1
c00032ed:	74 b9                	je     c00032a8 <remove_chain+0x12>
c00032ef:	83 f8 ff             	cmp    eax,0xffffffff
c00032f2:	74 6d                	je     c0003361 <remove_chain+0xcb>
c00032f4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f7:	75 6f                	jne    c0003368 <remove_chain+0xd2>
c00032f9:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ff:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003302:	39 d0                	cmp    eax,edx
c0003304:	73 08                	jae    c000330e <remove_chain+0x78>
c0003306:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000330a:	40                   	inc    eax
c000330b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003311:	39 e9                	cmp    ecx,ebp
c0003313:	75 64                	jne    c0003379 <remove_chain+0xe3>
c0003315:	89 ee                	mov    esi,ebp
c0003317:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000331a:	76 0f                	jbe    c000332b <remove_chain+0x95>
c000331c:	89 f2                	mov    edx,esi
c000331e:	89 f8                	mov    eax,edi
c0003320:	e8 82 fa ff ff       	call   c0002da7 <get_fat>
c0003325:	89 c5                	mov    ebp,eax
c0003327:	85 c0                	test   eax,eax
c0003329:	75 bf                	jne    c00032ea <remove_chain+0x54>
c000332b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332e:	0f 85 a0 00 00 00    	jne    c00033d4 <remove_chain+0x13e>
c0003334:	eb 6c                	jmp    c00033a2 <remove_chain+0x10c>
c0003336:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003339:	84 c0                	test   al,al
c000333b:	75 7d                	jne    c00033ba <remove_chain+0x124>
c000333d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003340:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003344:	0f 84 86 00 00 00    	je     c00033d0 <remove_chain+0x13a>
c000334a:	89 da                	mov    edx,ebx
c000334c:	89 f8                	mov    eax,edi
c000334e:	e8 54 fa ff ff       	call   c0002da7 <get_fat>
c0003353:	83 f8 01             	cmp    eax,0x1
c0003356:	0f 86 4c ff ff ff    	jbe    c00032a8 <remove_chain+0x12>
c000335c:	83 f8 ff             	cmp    eax,0xffffffff
c000335f:	75 4e                	jne    c00033af <remove_chain+0x119>
c0003361:	b8 01 00 00 00       	mov    eax,0x1
c0003366:	eb 6e                	jmp    c00033d6 <remove_chain+0x140>
c0003368:	31 c9                	xor    ecx,ecx
c000336a:	89 f2                	mov    edx,esi
c000336c:	89 d8                	mov    eax,ebx
c000336e:	e8 2f f8 ff ff       	call   c0002ba2 <put_fat>
c0003373:	85 c0                	test   eax,eax
c0003375:	74 82                	je     c00032f9 <remove_chain+0x63>
c0003377:	eb 5d                	jmp    c00033d6 <remove_chain+0x140>
c0003379:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000337c:	75 1b                	jne    c0003399 <remove_chain+0x103>
c000337e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003382:	83 ec 0c             	sub    esp,0xc
c0003385:	6a 00                	push   0x0
c0003387:	89 d8                	mov    eax,ebx
c0003389:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000338d:	e8 5b f7 ff ff       	call   c0002aed <change_bitmap>
c0003392:	83 c4 10             	add    esp,0x10
c0003395:	85 c0                	test   eax,eax
c0003397:	75 3d                	jne    c00033d6 <remove_chain+0x140>
c0003399:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000339d:	e9 73 ff ff ff       	jmp    c0003315 <remove_chain+0x7f>
c00033a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a7:	75 8d                	jne    c0003336 <remove_chain+0xa0>
c00033a9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033ad:	eb 25                	jmp    c00033d4 <remove_chain+0x13e>
c00033af:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b2:	89 c3                	mov    ebx,eax
c00033b4:	39 c2                	cmp    edx,eax
c00033b6:	74 88                	je     c0003340 <remove_chain+0xaa>
c00033b8:	eb 1a                	jmp    c00033d4 <remove_chain+0x13e>
c00033ba:	3c 03                	cmp    al,0x3
c00033bc:	75 16                	jne    c00033d4 <remove_chain+0x13e>
c00033be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	77 0d                	ja     c00033d4 <remove_chain+0x13e>
c00033c7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033ca:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033ce:	72 04                	jb     c00033d4 <remove_chain+0x13e>
c00033d0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d4:	31 c0                	xor    eax,eax
c00033d6:	83 c4 1c             	add    esp,0x1c
c00033d9:	5b                   	pop    ebx
c00033da:	5e                   	pop    esi
c00033db:	5f                   	pop    edi
c00033dc:	5d                   	pop    ebp
c00033dd:	c3                   	ret    

c00033de <dir_clear>:
c00033de:	55                   	push   ebp
c00033df:	57                   	push   edi
c00033e0:	56                   	push   esi
c00033e1:	89 c6                	mov    esi,eax
c00033e3:	53                   	push   ebx
c00033e4:	83 ec 1c             	sub    esp,0x1c
c00033e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033eb:	e8 a1 ed ff ff       	call   c0002191 <sync_window>
c00033f0:	85 c0                	test   eax,eax
c00033f2:	0f 85 de 00 00 00    	jne    c00034d6 <dir_clear+0xf8>
c00033f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033fc:	89 f0                	mov    eax,esi
c00033fe:	e8 e4 e8 ff ff       	call   c0001ce7 <clst2sect>
c0003403:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003406:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000340a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000340e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003411:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003414:	b9 00 02 00 00       	mov    ecx,0x200
c0003419:	31 d2                	xor    edx,edx
c000341b:	89 e8                	mov    eax,ebp
c000341d:	e8 c0 e6 ff ff       	call   c0001ae2 <mem_set>
c0003422:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003426:	c1 e3 09             	shl    ebx,0x9
c0003429:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342f:	76 1f                	jbe    c0003450 <dir_clear+0x72>
c0003431:	bb 00 80 00 00       	mov    ebx,0x8000
c0003436:	eb 18                	jmp    c0003450 <dir_clear+0x72>
c0003438:	83 ec 0c             	sub    esp,0xc
c000343b:	53                   	push   ebx
c000343c:	e8 f3 4d 00 00       	call   c0008234 <ff_memalloc>
c0003441:	83 c4 10             	add    esp,0x10
c0003444:	89 c7                	mov    edi,eax
c0003446:	85 c0                	test   eax,eax
c0003448:	0f 85 8f 00 00 00    	jne    c00034dd <dir_clear+0xff>
c000344e:	d1 eb                	shr    ebx,1
c0003450:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003456:	77 e0                	ja     c0003438 <dir_clear+0x5a>
c0003458:	31 db                	xor    ebx,ebx
c000345a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345e:	39 d8                	cmp    eax,ebx
c0003460:	76 66                	jbe    c00034c8 <dir_clear+0xea>
c0003462:	83 ec 0c             	sub    esp,0xc
c0003465:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003469:	6a 01                	push   0x1
c000346b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003473:	55                   	push   ebp
c0003474:	50                   	push   eax
c0003475:	e8 9f e5 ff ff       	call   c0001a19 <disk_write>
c000347a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003484:	83 c4 20             	add    esp,0x20
c0003487:	85 c0                	test   eax,eax
c0003489:	75 3d                	jne    c00034c8 <dir_clear+0xea>
c000348b:	43                   	inc    ebx
c000348c:	eb cc                	jmp    c000345a <dir_clear+0x7c>
c000348e:	83 ec 0c             	sub    esp,0xc
c0003491:	89 d8                	mov    eax,ebx
c0003493:	31 d2                	xor    edx,edx
c0003495:	55                   	push   ebp
c0003496:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000349a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349e:	52                   	push   edx
c000349f:	50                   	push   eax
c00034a0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a4:	57                   	push   edi
c00034a5:	50                   	push   eax
c00034a6:	e8 6e e5 ff ff       	call   c0001a19 <disk_write>
c00034ab:	83 c4 20             	add    esp,0x20
c00034ae:	85 c0                	test   eax,eax
c00034b0:	75 0a                	jne    c00034bc <dir_clear+0xde>
c00034b2:	01 eb                	add    ebx,ebp
c00034b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b8:	39 d8                	cmp    eax,ebx
c00034ba:	77 d2                	ja     c000348e <dir_clear+0xb0>
c00034bc:	83 ec 0c             	sub    esp,0xc
c00034bf:	57                   	push   edi
c00034c0:	e8 85 4d 00 00       	call   c000824a <ff_memfree>
c00034c5:	83 c4 10             	add    esp,0x10
c00034c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034cc:	39 d8                	cmp    eax,ebx
c00034ce:	0f 95 c0             	setne  al
c00034d1:	0f b6 c0             	movzx  eax,al
c00034d4:	eb 19                	jmp    c00034ef <dir_clear+0x111>
c00034d6:	b8 01 00 00 00       	mov    eax,0x1
c00034db:	eb 12                	jmp    c00034ef <dir_clear+0x111>
c00034dd:	89 d9                	mov    ecx,ebx
c00034df:	31 d2                	xor    edx,edx
c00034e1:	c1 eb 09             	shr    ebx,0x9
c00034e4:	e8 f9 e5 ff ff       	call   c0001ae2 <mem_set>
c00034e9:	89 dd                	mov    ebp,ebx
c00034eb:	31 db                	xor    ebx,ebx
c00034ed:	eb c5                	jmp    c00034b4 <dir_clear+0xd6>
c00034ef:	83 c4 1c             	add    esp,0x1c
c00034f2:	5b                   	pop    ebx
c00034f3:	5e                   	pop    esi
c00034f4:	5f                   	pop    edi
c00034f5:	5d                   	pop    ebp
c00034f6:	c3                   	ret    

c00034f7 <dir_next>:
c00034f7:	55                   	push   ebp
c00034f8:	57                   	push   edi
c00034f9:	56                   	push   esi
c00034fa:	53                   	push   ebx
c00034fb:	89 c3                	mov    ebx,eax
c00034fd:	83 ec 1c             	sub    esp,0x1c
c0003500:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003502:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003505:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003509:	8d 78 20             	lea    edi,[eax+0x20]
c000350c:	31 c0                	xor    eax,eax
c000350e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003512:	0f 94 c0             	sete   al
c0003515:	48                   	dec    eax
c0003516:	25 00 00 20 f0       	and    eax,0xf0200000
c000351b:	05 00 00 00 10       	add    eax,0x10000000
c0003520:	39 f8                	cmp    eax,edi
c0003522:	77 0e                	ja     c0003532 <dir_next+0x3b>
c0003524:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000352b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003532:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003535:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003538:	89 ce                	mov    esi,ecx
c000353a:	b8 04 00 00 00       	mov    eax,0x4
c000353f:	09 d6                	or     esi,edx
c0003541:	0f 84 da 00 00 00    	je     c0003621 <dir_next+0x12a>
c0003547:	89 f8                	mov    eax,edi
c0003549:	25 ff 01 00 00       	and    eax,0x1ff
c000354e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003552:	0f 85 b9 00 00 00    	jne    c0003611 <dir_next+0x11a>
c0003558:	83 c2 01             	add    edx,0x1
c000355b:	83 d1 00             	adc    ecx,0x0
c000355e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003561:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003564:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003567:	85 d2                	test   edx,edx
c0003569:	75 29                	jne    c0003594 <dir_next+0x9d>
c000356b:	89 fa                	mov    edx,edi
c000356d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003571:	c1 ea 05             	shr    edx,0x5
c0003574:	39 c2                	cmp    edx,eax
c0003576:	0f 82 95 00 00 00    	jb     c0003611 <dir_next+0x11a>
c000357c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003583:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000358a:	b8 04 00 00 00       	mov    eax,0x4
c000358f:	e9 8d 00 00 00       	jmp    c0003621 <dir_next+0x12a>
c0003594:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003598:	89 f9                	mov    ecx,edi
c000359a:	48                   	dec    eax
c000359b:	c1 e9 09             	shr    ecx,0x9
c000359e:	85 c8                	test   eax,ecx
c00035a0:	75 6f                	jne    c0003611 <dir_next+0x11a>
c00035a2:	89 d8                	mov    eax,ebx
c00035a4:	e8 fe f7 ff ff       	call   c0002da7 <get_fat>
c00035a9:	89 c6                	mov    esi,eax
c00035ab:	83 f8 01             	cmp    eax,0x1
c00035ae:	77 07                	ja     c00035b7 <dir_next+0xc0>
c00035b0:	b8 02 00 00 00       	mov    eax,0x2
c00035b5:	eb 6a                	jmp    c0003621 <dir_next+0x12a>
c00035b7:	83 f8 ff             	cmp    eax,0xffffffff
c00035ba:	75 07                	jne    c00035c3 <dir_next+0xcc>
c00035bc:	b8 01 00 00 00       	mov    eax,0x1
c00035c1:	eb 5e                	jmp    c0003621 <dir_next+0x12a>
c00035c3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c6:	77 37                	ja     c00035ff <dir_next+0x108>
c00035c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035cd:	74 ad                	je     c000357c <dir_next+0x85>
c00035cf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d2:	89 d8                	mov    eax,ebx
c00035d4:	e8 bc fa ff ff       	call   c0003095 <create_chain>
c00035d9:	89 c6                	mov    esi,eax
c00035db:	b8 07 00 00 00       	mov    eax,0x7
c00035e0:	85 f6                	test   esi,esi
c00035e2:	74 3d                	je     c0003621 <dir_next+0x12a>
c00035e4:	83 fe 01             	cmp    esi,0x1
c00035e7:	74 c7                	je     c00035b0 <dir_next+0xb9>
c00035e9:	83 fe ff             	cmp    esi,0xffffffff
c00035ec:	74 ce                	je     c00035bc <dir_next+0xc5>
c00035ee:	89 f2                	mov    edx,esi
c00035f0:	89 e8                	mov    eax,ebp
c00035f2:	e8 e7 fd ff ff       	call   c00033de <dir_clear>
c00035f7:	85 c0                	test   eax,eax
c00035f9:	75 c1                	jne    c00035bc <dir_next+0xc5>
c00035fb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003602:	89 f2                	mov    edx,esi
c0003604:	89 e8                	mov    eax,ebp
c0003606:	e8 dc e6 ff ff       	call   c0001ce7 <clst2sect>
c000360b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003615:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003618:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000361c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361f:	31 c0                	xor    eax,eax
c0003621:	83 c4 1c             	add    esp,0x1c
c0003624:	5b                   	pop    ebx
c0003625:	5e                   	pop    esi
c0003626:	5f                   	pop    edi
c0003627:	5d                   	pop    ebp
c0003628:	c3                   	ret    

c0003629 <load_xdir>:
c0003629:	55                   	push   ebp
c000362a:	57                   	push   edi
c000362b:	56                   	push   esi
c000362c:	89 c6                	mov    esi,eax
c000362e:	53                   	push   ebx
c000362f:	83 ec 1c             	sub    esp,0x1c
c0003632:	8b 00                	mov    eax,DWORD PTR [eax]
c0003634:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003637:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000363d:	e8 e3 eb ff ff       	call   c0002225 <move_window>
c0003642:	89 c3                	mov    ebx,eax
c0003644:	85 c0                	test   eax,eax
c0003646:	0f 85 0c 01 00 00    	jne    c0003758 <load_xdir+0x12f>
c000364c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003652:	0f 85 fb 00 00 00    	jne    c0003753 <load_xdir+0x12a>
c0003658:	89 f8                	mov    eax,edi
c000365a:	b9 20 00 00 00       	mov    ecx,0x20
c000365f:	e8 69 e4 ff ff       	call   c0001acd <mem_cpy>
c0003664:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003668:	40                   	inc    eax
c0003669:	c1 e0 05             	shl    eax,0x5
c000366c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003670:	83 e8 60             	sub    eax,0x60
c0003673:	3d 00 02 00 00       	cmp    eax,0x200
c0003678:	0f 87 d5 00 00 00    	ja     c0003753 <load_xdir+0x12a>
c000367e:	31 d2                	xor    edx,edx
c0003680:	89 f0                	mov    eax,esi
c0003682:	e8 70 fe ff ff       	call   c00034f7 <dir_next>
c0003687:	89 c3                	mov    ebx,eax
c0003689:	83 f8 04             	cmp    eax,0x4
c000368c:	0f 84 c1 00 00 00    	je     c0003753 <load_xdir+0x12a>
c0003692:	85 c0                	test   eax,eax
c0003694:	0f 85 be 00 00 00    	jne    c0003758 <load_xdir+0x12f>
c000369a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000369d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a2:	e8 7e eb ff ff       	call   c0002225 <move_window>
c00036a7:	89 c3                	mov    ebx,eax
c00036a9:	85 c0                	test   eax,eax
c00036ab:	0f 85 a7 00 00 00    	jne    c0003758 <load_xdir+0x12f>
c00036b1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b7:	0f 85 96 00 00 00    	jne    c0003753 <load_xdir+0x12a>
c00036bd:	8d 47 20             	lea    eax,[edi+0x20]
c00036c0:	b9 20 00 00 00       	mov    ecx,0x20
c00036c5:	e8 03 e4 ff ff       	call   c0001acd <mem_cpy>
c00036ca:	31 d2                	xor    edx,edx
c00036cc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d0:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d5:	83 c0 2c             	add    eax,0x2c
c00036d8:	f7 f1                	div    ecx
c00036da:	c1 e0 05             	shl    eax,0x5
c00036dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e1:	77 70                	ja     c0003753 <load_xdir+0x12a>
c00036e3:	bd 40 00 00 00       	mov    ebp,0x40
c00036e8:	31 d2                	xor    edx,edx
c00036ea:	89 f0                	mov    eax,esi
c00036ec:	e8 06 fe ff ff       	call   c00034f7 <dir_next>
c00036f1:	89 c3                	mov    ebx,eax
c00036f3:	83 f8 04             	cmp    eax,0x4
c00036f6:	74 5b                	je     c0003753 <load_xdir+0x12a>
c00036f8:	85 c0                	test   eax,eax
c00036fa:	75 5c                	jne    c0003758 <load_xdir+0x12f>
c00036fc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036ff:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003702:	8b 06                	mov    eax,DWORD PTR [esi]
c0003704:	e8 1c eb ff ff       	call   c0002225 <move_window>
c0003709:	89 c3                	mov    ebx,eax
c000370b:	85 c0                	test   eax,eax
c000370d:	75 49                	jne    c0003758 <load_xdir+0x12f>
c000370f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003712:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003715:	75 3c                	jne    c0003753 <load_xdir+0x12a>
c0003717:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000371d:	77 0d                	ja     c000372c <load_xdir+0x103>
c000371f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003722:	b9 20 00 00 00       	mov    ecx,0x20
c0003727:	e8 a1 e3 ff ff       	call   c0001acd <mem_cpy>
c000372c:	83 c5 20             	add    ebp,0x20
c000372f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003733:	77 b3                	ja     c00036e8 <load_xdir+0xbf>
c0003735:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000373b:	77 1b                	ja     c0003758 <load_xdir+0x12f>
c000373d:	89 f8                	mov    eax,edi
c000373f:	e8 d8 e7 ff ff       	call   c0001f1c <xdir_sum>
c0003744:	89 c1                	mov    ecx,eax
c0003746:	8d 47 02             	lea    eax,[edi+0x2]
c0003749:	e8 00 e3 ff ff       	call   c0001a4e <ld_word>
c000374e:	66 39 c1             	cmp    cx,ax
c0003751:	74 05                	je     c0003758 <load_xdir+0x12f>
c0003753:	bb 02 00 00 00       	mov    ebx,0x2
c0003758:	83 c4 1c             	add    esp,0x1c
c000375b:	89 d8                	mov    eax,ebx
c000375d:	5b                   	pop    ebx
c000375e:	5e                   	pop    esi
c000375f:	5f                   	pop    edi
c0003760:	5d                   	pop    ebp
c0003761:	c3                   	ret    

c0003762 <load_obj_xdir>:
c0003762:	53                   	push   ebx
c0003763:	89 c3                	mov    ebx,eax
c0003765:	83 ec 08             	sub    esp,0x8
c0003768:	8b 02                	mov    eax,DWORD PTR [edx]
c000376a:	89 03                	mov    DWORD PTR [ebx],eax
c000376c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003772:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003775:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003778:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003782:	30 c0                	xor    al,al
c0003784:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000378b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378e:	89 d8                	mov    eax,ebx
c0003790:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003793:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003796:	e8 02 f8 ff ff       	call   c0002f9d <dir_sdi>
c000379b:	85 c0                	test   eax,eax
c000379d:	75 0b                	jne    c00037aa <load_obj_xdir+0x48>
c000379f:	83 c4 08             	add    esp,0x8
c00037a2:	89 d8                	mov    eax,ebx
c00037a4:	5b                   	pop    ebx
c00037a5:	e9 7f fe ff ff       	jmp    c0003629 <load_xdir>
c00037aa:	83 c4 08             	add    esp,0x8
c00037ad:	5b                   	pop    ebx
c00037ae:	c3                   	ret    

c00037af <dir_read>:
c00037af:	55                   	push   ebp
c00037b0:	bd 04 00 00 00       	mov    ebp,0x4
c00037b5:	57                   	push   edi
c00037b6:	56                   	push   esi
c00037b7:	be ff ff ff ff       	mov    esi,0xffffffff
c00037bc:	53                   	push   ebx
c00037bd:	89 c3                	mov    ebx,eax
c00037bf:	83 ec 1c             	sub    esp,0x1c
c00037c2:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037cd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d3:	89 c8                	mov    eax,ecx
c00037d5:	09 d0                	or     eax,edx
c00037d7:	0f 84 25 01 00 00    	je     c0003902 <dir_read+0x153>
c00037dd:	89 f8                	mov    eax,edi
c00037df:	e8 41 ea ff ff       	call   c0002225 <move_window>
c00037e4:	89 c5                	mov    ebp,eax
c00037e6:	85 c0                	test   eax,eax
c00037e8:	0f 85 23 01 00 00    	jne    c0003911 <dir_read+0x162>
c00037ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f3:	84 c9                	test   cl,cl
c00037f5:	0f 84 11 01 00 00    	je     c000390c <dir_read+0x15d>
c00037fb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037fe:	75 48                	jne    c0003848 <dir_read+0x99>
c0003800:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003805:	74 10                	je     c0003817 <dir_read+0x68>
c0003807:	80 f9 83             	cmp    cl,0x83
c000380a:	0f 85 dd 00 00 00    	jne    c00038ed <dir_read+0x13e>
c0003810:	31 ed                	xor    ebp,ebp
c0003812:	e9 08 01 00 00       	jmp    c000391f <dir_read+0x170>
c0003817:	80 f9 85             	cmp    cl,0x85
c000381a:	0f 85 cd 00 00 00    	jne    c00038ed <dir_read+0x13e>
c0003820:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003823:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003826:	89 d8                	mov    eax,ebx
c0003828:	e8 fc fd ff ff       	call   c0003629 <load_xdir>
c000382d:	89 c5                	mov    ebp,eax
c000382f:	85 c0                	test   eax,eax
c0003831:	0f 85 da 00 00 00    	jne    c0003911 <dir_read+0x162>
c0003837:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000383a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000383d:	83 e0 3f             	and    eax,0x3f
c0003840:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003843:	e9 d7 00 00 00       	jmp    c000391f <dir_read+0x170>
c0003848:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000384b:	83 e0 3f             	and    eax,0x3f
c000384e:	80 f9 e5             	cmp    cl,0xe5
c0003851:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003855:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003858:	0f 84 8a 00 00 00    	je     c00038e8 <dir_read+0x139>
c000385e:	80 f9 2e             	cmp    cl,0x2e
c0003861:	0f 84 81 00 00 00    	je     c00038e8 <dir_read+0x139>
c0003867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000386b:	83 e0 1f             	and    eax,0x1f
c000386e:	83 f8 08             	cmp    eax,0x8
c0003871:	0f 94 c0             	sete   al
c0003874:	0f b6 c0             	movzx  eax,al
c0003877:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000387b:	75 6b                	jne    c00038e8 <dir_read+0x139>
c000387d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003882:	75 44                	jne    c00038c8 <dir_read+0x119>
c0003884:	f6 c1 40             	test   cl,0x40
c0003887:	74 12                	je     c000389b <dir_read+0xec>
c0003889:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000388c:	83 e1 bf             	and    ecx,0xffffffbf
c000388f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003893:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003896:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003899:	eb 06                	jmp    c00038a1 <dir_read+0xf2>
c000389b:	89 f0                	mov    eax,esi
c000389d:	38 c8                	cmp    al,cl
c000389f:	75 47                	jne    c00038e8 <dir_read+0x139>
c00038a1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a5:	be ff ff ff ff       	mov    esi,0xffffffff
c00038aa:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038ad:	75 3e                	jne    c00038ed <dir_read+0x13e>
c00038af:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b6:	e8 95 e4 ff ff       	call   c0001d50 <pick_lfn>
c00038bb:	85 c0                	test   eax,eax
c00038bd:	74 2e                	je     c00038ed <dir_read+0x13e>
c00038bf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c6:	eb 25                	jmp    c00038ed <dir_read+0x13e>
c00038c8:	89 f0                	mov    eax,esi
c00038ca:	84 c0                	test   al,al
c00038cc:	75 11                	jne    c00038df <dir_read+0x130>
c00038ce:	89 d0                	mov    eax,edx
c00038d0:	e8 35 e6 ff ff       	call   c0001f0a <sum_sfn>
c00038d5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d9:	0f 84 31 ff ff ff    	je     c0003810 <dir_read+0x61>
c00038df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e6:	eb 37                	jmp    c000391f <dir_read+0x170>
c00038e8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	89 d8                	mov    eax,ebx
c00038f1:	e8 01 fc ff ff       	call   c00034f7 <dir_next>
c00038f6:	89 c5                	mov    ebp,eax
c00038f8:	85 c0                	test   eax,eax
c00038fa:	0f 84 cd fe ff ff    	je     c00037cd <dir_read+0x1e>
c0003900:	eb 0f                	jmp    c0003911 <dir_read+0x162>
c0003902:	85 ed                	test   ebp,ebp
c0003904:	0f 84 06 ff ff ff    	je     c0003810 <dir_read+0x61>
c000390a:	eb 05                	jmp    c0003911 <dir_read+0x162>
c000390c:	bd 04 00 00 00       	mov    ebp,0x4
c0003911:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003918:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391f:	83 c4 1c             	add    esp,0x1c
c0003922:	89 e8                	mov    eax,ebp
c0003924:	5b                   	pop    ebx
c0003925:	5e                   	pop    esi
c0003926:	5f                   	pop    edi
c0003927:	5d                   	pop    ebp
c0003928:	c3                   	ret    

c0003929 <dir_alloc>:
c0003929:	55                   	push   ebp
c000392a:	89 d5                	mov    ebp,edx
c000392c:	57                   	push   edi
c000392d:	31 d2                	xor    edx,edx
c000392f:	56                   	push   esi
c0003930:	53                   	push   ebx
c0003931:	89 c3                	mov    ebx,eax
c0003933:	83 ec 0c             	sub    esp,0xc
c0003936:	8b 38                	mov    edi,DWORD PTR [eax]
c0003938:	e8 60 f6 ff ff       	call   c0002f9d <dir_sdi>
c000393d:	85 c0                	test   eax,eax
c000393f:	75 4e                	jne    c000398f <dir_alloc+0x66>
c0003941:	31 f6                	xor    esi,esi
c0003943:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003946:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003949:	89 f8                	mov    eax,edi
c000394b:	e8 d5 e8 ff ff       	call   c0002225 <move_window>
c0003950:	85 c0                	test   eax,eax
c0003952:	75 3b                	jne    c000398f <dir_alloc+0x66>
c0003954:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003957:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000395a:	8a 12                	mov    dl,BYTE PTR [edx]
c000395c:	75 07                	jne    c0003965 <dir_alloc+0x3c>
c000395e:	f7 d2                	not    edx
c0003960:	c0 ea 07             	shr    dl,0x7
c0003963:	eb 0d                	jmp    c0003972 <dir_alloc+0x49>
c0003965:	80 fa e5             	cmp    dl,0xe5
c0003968:	0f 94 c1             	sete   cl
c000396b:	84 d2                	test   dl,dl
c000396d:	0f 94 c2             	sete   dl
c0003970:	09 ca                	or     edx,ecx
c0003972:	84 d2                	test   dl,dl
c0003974:	74 07                	je     c000397d <dir_alloc+0x54>
c0003976:	46                   	inc    esi
c0003977:	39 ee                	cmp    esi,ebp
c0003979:	75 04                	jne    c000397f <dir_alloc+0x56>
c000397b:	eb 1c                	jmp    c0003999 <dir_alloc+0x70>
c000397d:	31 f6                	xor    esi,esi
c000397f:	ba 01 00 00 00       	mov    edx,0x1
c0003984:	89 d8                	mov    eax,ebx
c0003986:	e8 6c fb ff ff       	call   c00034f7 <dir_next>
c000398b:	85 c0                	test   eax,eax
c000398d:	74 b4                	je     c0003943 <dir_alloc+0x1a>
c000398f:	83 f8 04             	cmp    eax,0x4
c0003992:	75 05                	jne    c0003999 <dir_alloc+0x70>
c0003994:	b8 07 00 00 00       	mov    eax,0x7
c0003999:	83 c4 0c             	add    esp,0xc
c000399c:	5b                   	pop    ebx
c000399d:	5e                   	pop    esi
c000399e:	5f                   	pop    edi
c000399f:	5d                   	pop    ebp
c00039a0:	c3                   	ret    

c00039a1 <store_xdir>:
c00039a1:	55                   	push   ebp
c00039a2:	57                   	push   edi
c00039a3:	89 c7                	mov    edi,eax
c00039a5:	56                   	push   esi
c00039a6:	53                   	push   ebx
c00039a7:	83 ec 0c             	sub    esp,0xc
c00039aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00039ac:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039af:	89 e8                	mov    eax,ebp
c00039b1:	e8 66 e5 ff ff       	call   c0001f1c <xdir_sum>
c00039b6:	0f b7 d0             	movzx  edx,ax
c00039b9:	8d 45 02             	lea    eax,[ebp+0x2]
c00039bc:	e8 ff e0 ff ff       	call   c0001ac0 <st_word>
c00039c1:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c4:	89 f8                	mov    eax,edi
c00039c6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039ca:	e8 ce f5 ff ff       	call   c0002f9d <dir_sdi>
c00039cf:	89 c6                	mov    esi,eax
c00039d1:	85 f6                	test   esi,esi
c00039d3:	75 3d                	jne    c0003a12 <store_xdir+0x71>
c00039d5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039db:	8b 07                	mov    eax,DWORD PTR [edi]
c00039dd:	e8 43 e8 ff ff       	call   c0002225 <move_window>
c00039e2:	89 c6                	mov    esi,eax
c00039e4:	85 c0                	test   eax,eax
c00039e6:	75 2a                	jne    c0003a12 <store_xdir+0x71>
c00039e8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039eb:	b9 20 00 00 00       	mov    ecx,0x20
c00039f0:	89 ea                	mov    edx,ebp
c00039f2:	e8 d6 e0 ff ff       	call   c0001acd <mem_cpy>
c00039f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f9:	85 db                	test   ebx,ebx
c00039fb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039ff:	74 11                	je     c0003a12 <store_xdir+0x71>
c0003a01:	31 d2                	xor    edx,edx
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 ed fa ff ff       	call   c00034f7 <dir_next>
c0003a0a:	83 c5 20             	add    ebp,0x20
c0003a0d:	89 c6                	mov    esi,eax
c0003a0f:	4b                   	dec    ebx
c0003a10:	eb bf                	jmp    c00039d1 <store_xdir+0x30>
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	83 fe 02             	cmp    esi,0x2
c0003a17:	76 05                	jbe    c0003a1e <store_xdir+0x7d>
c0003a19:	b8 02 00 00 00       	mov    eax,0x2
c0003a1e:	83 c4 0c             	add    esp,0xc
c0003a21:	5b                   	pop    ebx
c0003a22:	5e                   	pop    esi
c0003a23:	5f                   	pop    edi
c0003a24:	5d                   	pop    ebp
c0003a25:	c3                   	ret    

c0003a26 <dir_remove>:
c0003a26:	57                   	push   edi
c0003a27:	56                   	push   esi
c0003a28:	53                   	push   ebx
c0003a29:	89 c3                	mov    ebx,eax
c0003a2b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a30:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a33:	83 fa ff             	cmp    edx,0xffffffff
c0003a36:	74 09                	je     c0003a41 <dir_remove+0x1b>
c0003a38:	e8 60 f5 ff ff       	call   c0002f9d <dir_sdi>
c0003a3d:	85 c0                	test   eax,eax
c0003a3f:	75 41                	jne    c0003a82 <dir_remove+0x5c>
c0003a41:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a44:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a47:	89 f0                	mov    eax,esi
c0003a49:	e8 d7 e7 ff ff       	call   c0002225 <move_window>
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	75 26                	jne    c0003a78 <dir_remove+0x52>
c0003a52:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a55:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a58:	75 05                	jne    c0003a5f <dir_remove+0x39>
c0003a5a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a5d:	eb 03                	jmp    c0003a62 <dir_remove+0x3c>
c0003a5f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a62:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a66:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a69:	73 17                	jae    c0003a82 <dir_remove+0x5c>
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	89 d8                	mov    eax,ebx
c0003a6f:	e8 83 fa ff ff       	call   c00034f7 <dir_next>
c0003a74:	85 c0                	test   eax,eax
c0003a76:	74 c9                	je     c0003a41 <dir_remove+0x1b>
c0003a78:	83 f8 04             	cmp    eax,0x4
c0003a7b:	75 05                	jne    c0003a82 <dir_remove+0x5c>
c0003a7d:	b8 02 00 00 00       	mov    eax,0x2
c0003a82:	5b                   	pop    ebx
c0003a83:	5e                   	pop    esi
c0003a84:	5f                   	pop    edi
c0003a85:	c3                   	ret    

c0003a86 <create_name>:
c0003a86:	55                   	push   ebp
c0003a87:	89 d5                	mov    ebp,edx
c0003a89:	57                   	push   edi
c0003a8a:	89 c7                	mov    edi,eax
c0003a8c:	56                   	push   esi
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	53                   	push   ebx
c0003a90:	83 ec 3c             	sub    esp,0x3c
c0003a93:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a99:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aa2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa6:	e8 7d e0 ff ff       	call   c0001b28 <tchar2uni>
c0003aab:	89 c3                	mov    ebx,eax
c0003aad:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab0:	75 0a                	jne    c0003abc <create_name+0x36>
c0003ab2:	b8 06 00 00 00       	mov    eax,0x6
c0003ab7:	e9 83 02 00 00       	jmp    c0003d3f <create_name+0x2b9>
c0003abc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac1:	76 0c                	jbe    c0003acf <create_name+0x49>
c0003ac3:	c1 e8 10             	shr    eax,0x10
c0003ac6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aca:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ace:	46                   	inc    esi
c0003acf:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	76 36                	jbe    c0003b0d <create_name+0x87>
c0003ad7:	66 83 fb 2f          	cmp    bx,0x2f
c0003adb:	74 30                	je     c0003b0d <create_name+0x87>
c0003add:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae1:	74 39                	je     c0003b1c <create_name+0x96>
c0003ae3:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae7:	77 11                	ja     c0003afa <create_name+0x74>
c0003ae9:	0f b7 d3             	movzx  edx,bx
c0003aec:	b8 52 05 02 c0       	mov    eax,0xc0020552
c0003af1:	e8 1a e0 ff ff       	call   c0001b10 <chk_chr>
c0003af6:	85 c0                	test   eax,eax
c0003af8:	75 b8                	jne    c0003ab2 <create_name+0x2c>
c0003afa:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b00:	77 b0                	ja     c0003ab2 <create_name+0x2c>
c0003b02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b06:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0a:	46                   	inc    esi
c0003b0b:	eb 95                	jmp    c0003aa2 <create_name+0x1c>
c0003b0d:	66 83 f8 1f          	cmp    ax,0x1f
c0003b11:	b3 04                	mov    bl,0x4
c0003b13:	76 19                	jbe    c0003b2e <create_name+0xa8>
c0003b15:	eb 05                	jmp    c0003b1c <create_name+0x96>
c0003b17:	40                   	inc    eax
c0003b18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b20:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b22:	80 fa 2f             	cmp    dl,0x2f
c0003b25:	74 f0                	je     c0003b17 <create_name+0x91>
c0003b27:	80 fa 5c             	cmp    dl,0x5c
c0003b2a:	74 eb                	je     c0003b17 <create_name+0x91>
c0003b2c:	31 db                	xor    ebx,ebx
c0003b2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b32:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b35:	85 f6                	test   esi,esi
c0003b37:	74 18                	je     c0003b51 <create_name+0xcb>
c0003b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b3d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b42:	66 83 f8 20          	cmp    ax,0x20
c0003b46:	74 06                	je     c0003b4e <create_name+0xc8>
c0003b48:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4c:	75 03                	jne    c0003b51 <create_name+0xcb>
c0003b4e:	4e                   	dec    esi
c0003b4f:	eb e4                	jmp    c0003b35 <create_name+0xaf>
c0003b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b55:	31 ed                	xor    ebp,ebp
c0003b57:	85 f6                	test   esi,esi
c0003b59:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5f:	0f 84 4d ff ff ff    	je     c0003ab2 <create_name+0x2c>
c0003b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b69:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b70:	66 83 f8 20          	cmp    ax,0x20
c0003b74:	75 04                	jne    c0003b7a <create_name+0xf4>
c0003b76:	89 d5                	mov    ebp,edx
c0003b78:	eb eb                	jmp    c0003b65 <create_name+0xdf>
c0003b7a:	85 ed                	test   ebp,ebp
c0003b7c:	75 06                	jne    c0003b84 <create_name+0xfe>
c0003b7e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b82:	75 08                	jne    c0003b8c <create_name+0x106>
c0003b84:	83 cb 03             	or     ebx,0x3
c0003b87:	eb 03                	jmp    c0003b8c <create_name+0x106>
c0003b89:	4e                   	dec    esi
c0003b8a:	74 0c                	je     c0003b98 <create_name+0x112>
c0003b8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b90:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b96:	75 f1                	jne    c0003b89 <create_name+0x103>
c0003b98:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9d:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba0:	ba 20 00 00 00       	mov    edx,0x20
c0003ba5:	e8 38 df ff ff       	call   c0001ae2 <mem_set>
c0003baa:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bb2:	31 c9                	xor    ecx,ecx
c0003bb4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bc4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc8:	66 85 ed             	test   bp,bp
c0003bcb:	0f 84 1f 01 00 00    	je     c0003cf0 <create_name+0x26a>
c0003bd1:	66 83 fd 20          	cmp    bp,0x20
c0003bd5:	74 0c                	je     c0003be3 <create_name+0x15d>
c0003bd7:	66 83 fd 2e          	cmp    bp,0x2e
c0003bdb:	75 0f                	jne    c0003bec <create_name+0x166>
c0003bdd:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003be1:	74 09                	je     c0003bec <create_name+0x166>
c0003be3:	83 cb 03             	or     ebx,0x3
c0003be6:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003bea:	eb cd                	jmp    c0003bb9 <create_name+0x133>
c0003bec:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003bf0:	73 06                	jae    c0003bf8 <create_name+0x172>
c0003bf2:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bf6:	75 3a                	jne    c0003c32 <create_name+0x1ac>
c0003bf8:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bfd:	75 08                	jne    c0003c07 <create_name+0x181>
c0003bff:	83 cb 03             	or     ebx,0x3
c0003c02:	e9 e9 00 00 00       	jmp    c0003cf0 <create_name+0x26a>
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	74 0d                	je     c0003c1a <create_name+0x194>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c14:	0f 87 d6 00 00 00    	ja     c0003cf0 <create_name+0x26a>
c0003c1a:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c1f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c23:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c2b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c30:	eb b4                	jmp    c0003be6 <create_name+0x160>
c0003c32:	66 83 fd 7f          	cmp    bp,0x7f
c0003c36:	76 68                	jbe    c0003ca0 <create_name+0x21a>
c0003c38:	88 da                	mov    dl,bl
c0003c3a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c3e:	83 ca 02             	or     edx,0x2
c0003c41:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c45:	50                   	push   eax
c0003c46:	50                   	push   eax
c0003c47:	68 b5 01 00 00       	push   0x1b5
c0003c4c:	55                   	push   ebp
c0003c4d:	e8 0f 46 00 00       	call   c0008261 <ff_uni2oem>
c0003c52:	83 c4 10             	add    esp,0x10
c0003c55:	89 c5                	mov    ebp,eax
c0003c57:	a8 80                	test   al,0x80
c0003c59:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c5d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c61:	74 0c                	je     c0003c6f <create_name+0x1e9>
c0003c63:	83 e5 7f             	and    ebp,0x7f
c0003c66:	0f b6 ad a0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb60]
c0003c6d:	eb 2a                	jmp    c0003c99 <create_name+0x213>
c0003c6f:	66 3d ff 00          	cmp    ax,0xff
c0003c73:	76 24                	jbe    c0003c99 <create_name+0x213>
c0003c75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c79:	48                   	dec    eax
c0003c7a:	39 c8                	cmp    eax,ecx
c0003c7c:	77 0c                	ja     c0003c8a <create_name+0x204>
c0003c7e:	83 cb 03             	or     ebx,0x3
c0003c81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c85:	e9 5c ff ff ff       	jmp    c0003be6 <create_name+0x160>
c0003c8a:	89 e8                	mov    eax,ebp
c0003c8c:	88 d3                	mov    bl,dl
c0003c8e:	66 c1 e8 08          	shr    ax,0x8
c0003c92:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c96:	41                   	inc    ecx
c0003c97:	eb 4b                	jmp    c0003ce4 <create_name+0x25e>
c0003c99:	66 85 ed             	test   bp,bp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	74 19                	je     c0003cb9 <create_name+0x233>
c0003ca0:	0f b7 d5             	movzx  edx,bp
c0003ca3:	b8 5b 05 02 c0       	mov    eax,0xc002055b
c0003ca8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cac:	e8 5f de ff ff       	call   c0001b10 <chk_chr>
c0003cb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cb5:	85 c0                	test   eax,eax
c0003cb7:	74 0a                	je     c0003cc3 <create_name+0x23d>
c0003cb9:	83 cb 03             	or     ebx,0x3
c0003cbc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cc1:	eb 21                	jmp    c0003ce4 <create_name+0x25e>
c0003cc3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cc6:	66 83 f8 19          	cmp    ax,0x19
c0003cca:	77 07                	ja     c0003cd3 <create_name+0x24d>
c0003ccc:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cd1:	eb 11                	jmp    c0003ce4 <create_name+0x25e>
c0003cd3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 08                	ja     c0003ce4 <create_name+0x25e>
c0003cdc:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003ce1:	83 ed 20             	sub    ebp,0x20
c0003ce4:	89 e8                	mov    eax,ebp
c0003ce6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cea:	41                   	inc    ecx
c0003ceb:	e9 f6 fe ff ff       	jmp    c0003be6 <create_name+0x160>
c0003cf0:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cf4:	75 04                	jne    c0003cfa <create_name+0x274>
c0003cf6:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cfa:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cff:	75 05                	jne    c0003d06 <create_name+0x280>
c0003d01:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d06:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0a:	83 e0 0c             	and    eax,0xc
c0003d0d:	3c 0c                	cmp    al,0xc
c0003d0f:	74 0b                	je     c0003d1c <create_name+0x296>
c0003d11:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d15:	83 e0 03             	and    eax,0x3
c0003d18:	3c 03                	cmp    al,0x3
c0003d1a:	75 05                	jne    c0003d21 <create_name+0x29b>
c0003d1c:	83 cb 02             	or     ebx,0x2
c0003d1f:	eb 19                	jmp    c0003d3a <create_name+0x2b4>
c0003d21:	f6 c3 02             	test   bl,0x2
c0003d24:	75 14                	jne    c0003d3a <create_name+0x2b4>
c0003d26:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d2b:	74 03                	je     c0003d30 <create_name+0x2aa>
c0003d2d:	83 cb 10             	or     ebx,0x10
c0003d30:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d35:	74 03                	je     c0003d3a <create_name+0x2b4>
c0003d37:	83 cb 08             	or     ebx,0x8
c0003d3a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d3d:	31 c0                	xor    eax,eax
c0003d3f:	83 c4 3c             	add    esp,0x3c
c0003d42:	5b                   	pop    ebx
c0003d43:	5e                   	pop    esi
c0003d44:	5f                   	pop    edi
c0003d45:	5d                   	pop    ebp
c0003d46:	c3                   	ret    

c0003d47 <xname_sum>:
c0003d47:	56                   	push   esi
c0003d48:	89 c6                	mov    esi,eax
c0003d4a:	53                   	push   ebx
c0003d4b:	31 db                	xor    ebx,ebx
c0003d4d:	51                   	push   ecx
c0003d4e:	83 c6 02             	add    esi,0x2
c0003d51:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d55:	66 85 c0             	test   ax,ax
c0003d58:	74 1f                	je     c0003d79 <xname_sum+0x32>
c0003d5a:	66 d1 cb             	ror    bx,1
c0003d5d:	83 ec 0c             	sub    esp,0xc
c0003d60:	50                   	push   eax
c0003d61:	e8 00 46 00 00       	call   c0008366 <ff_wtoupper>
c0003d66:	0f b6 d0             	movzx  edx,al
c0003d69:	01 d3                	add    ebx,edx
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	66 c1 e8 08          	shr    ax,0x8
c0003d72:	66 d1 cb             	ror    bx,1
c0003d75:	01 c3                	add    ebx,eax
c0003d77:	eb d5                	jmp    c0003d4e <xname_sum+0x7>
c0003d79:	5a                   	pop    edx
c0003d7a:	89 d8                	mov    eax,ebx
c0003d7c:	5b                   	pop    ebx
c0003d7d:	5e                   	pop    esi
c0003d7e:	c3                   	ret    

c0003d7f <create_xdir>:
c0003d7f:	55                   	push   ebp
c0003d80:	b9 40 00 00 00       	mov    ecx,0x40
c0003d85:	57                   	push   edi
c0003d86:	bd 01 00 00 00       	mov    ebp,0x1
c0003d8b:	56                   	push   esi
c0003d8c:	31 ff                	xor    edi,edi
c0003d8e:	53                   	push   ebx
c0003d8f:	89 c3                	mov    ebx,eax
c0003d91:	83 ec 1c             	sub    esp,0x1c
c0003d94:	be 40 00 00 00       	mov    esi,0x40
c0003d99:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d9d:	31 d2                	xor    edx,edx
c0003d9f:	e8 3e dd ff ff       	call   c0001ae2 <mem_set>
c0003da4:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003da7:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dab:	31 c9                	xor    ecx,ecx
c0003dad:	8d 46 01             	lea    eax,[esi+0x1]
c0003db0:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003db4:	83 c6 02             	add    esi,0x2
c0003db7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dbb:	66 85 ed             	test   bp,bp
c0003dbe:	74 12                	je     c0003dd2 <create_xdir+0x53>
c0003dc0:	0f b6 c1             	movzx  eax,cl
c0003dc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc7:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dcb:	66 83 fd 01          	cmp    bp,0x1
c0003dcf:	80 d9 ff             	sbb    cl,0xff
c0003dd2:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dd5:	83 c6 02             	add    esi,0x2
c0003dd8:	0f b7 d5             	movzx  edx,bp
c0003ddb:	e8 e0 dc ff ff       	call   c0001ac0 <st_word>
c0003de0:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003de6:	75 d3                	jne    c0003dbb <create_xdir+0x3c>
c0003de8:	8d 47 01             	lea    eax,[edi+0x1]
c0003deb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003def:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003df3:	0f b6 c1             	movzx  eax,cl
c0003df6:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dfb:	74 07                	je     c0003e04 <create_xdir+0x85>
c0003dfd:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e02:	eb a9                	jmp    c0003dad <create_xdir+0x2e>
c0003e04:	8d 47 02             	lea    eax,[edi+0x2]
c0003e07:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e0a:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e0d:	89 d0                	mov    eax,edx
c0003e0f:	e8 33 ff ff ff       	call   c0003d47 <xname_sum>
c0003e14:	83 c4 1c             	add    esp,0x1c
c0003e17:	0f b7 d0             	movzx  edx,ax
c0003e1a:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e1d:	5b                   	pop    ebx
c0003e1e:	5e                   	pop    esi
c0003e1f:	5f                   	pop    edi
c0003e20:	5d                   	pop    ebp
c0003e21:	e9 9a dc ff ff       	jmp    c0001ac0 <st_word>

c0003e26 <cmp_lfn>:
c0003e26:	55                   	push   ebp
c0003e27:	57                   	push   edi
c0003e28:	89 d7                	mov    edi,edx
c0003e2a:	56                   	push   esi
c0003e2b:	53                   	push   ebx
c0003e2c:	83 ec 1c             	sub    esp,0x1c
c0003e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e33:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e36:	e8 13 dc ff ff       	call   c0001a4e <ld_word>
c0003e3b:	66 85 c0             	test   ax,ax
c0003e3e:	74 07                	je     c0003e47 <cmp_lfn+0x21>
c0003e40:	31 c0                	xor    eax,eax
c0003e42:	e9 9a 00 00 00       	jmp    c0003ee1 <cmp_lfn+0xbb>
c0003e47:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e49:	bd 01 00 00 00       	mov    ebp,0x1
c0003e4e:	83 e3 3f             	and    ebx,0x3f
c0003e51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e59:	4b                   	dec    ebx
c0003e5a:	6b db 0d             	imul   ebx,ebx,0xd
c0003e5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e61:	0f b6 80 20 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfae0]
c0003e68:	01 f8                	add    eax,edi
c0003e6a:	e8 df db ff ff       	call   c0001a4e <ld_word>
c0003e6f:	66 85 ed             	test   bp,bp
c0003e72:	89 c6                	mov    esi,eax
c0003e74:	74 3c                	je     c0003eb2 <cmp_lfn+0x8c>
c0003e76:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e7c:	77 c2                	ja     c0003e40 <cmp_lfn+0x1a>
c0003e7e:	83 ec 0c             	sub    esp,0xc
c0003e81:	0f b7 c0             	movzx  eax,ax
c0003e84:	50                   	push   eax
c0003e85:	e8 dc 44 00 00       	call   c0008366 <ff_wtoupper>
c0003e8a:	89 c5                	mov    ebp,eax
c0003e8c:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e97:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e9e:	e8 c3 44 00 00       	call   c0008366 <ff_wtoupper>
c0003ea3:	83 c4 10             	add    esp,0x10
c0003ea6:	39 c5                	cmp    ebp,eax
c0003ea8:	75 96                	jne    c0003e40 <cmp_lfn+0x1a>
c0003eaa:	89 f5                	mov    ebp,esi
c0003eac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eb0:	eb 04                	jmp    c0003eb6 <cmp_lfn+0x90>
c0003eb2:	66 46                	inc    si
c0003eb4:	75 8a                	jne    c0003e40 <cmp_lfn+0x1a>
c0003eb6:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eba:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ebf:	75 9c                	jne    c0003e5d <cmp_lfn+0x37>
c0003ec1:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ec4:	74 16                	je     c0003edc <cmp_lfn+0xb6>
c0003ec6:	66 85 ed             	test   bp,bp
c0003ec9:	74 11                	je     c0003edc <cmp_lfn+0xb6>
c0003ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ecf:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ed4:	0f 94 c0             	sete   al
c0003ed7:	0f b6 c0             	movzx  eax,al
c0003eda:	eb 05                	jmp    c0003ee1 <cmp_lfn+0xbb>
c0003edc:	b8 01 00 00 00       	mov    eax,0x1
c0003ee1:	83 c4 1c             	add    esp,0x1c
c0003ee4:	5b                   	pop    ebx
c0003ee5:	5e                   	pop    esi
c0003ee6:	5f                   	pop    edi
c0003ee7:	5d                   	pop    ebp
c0003ee8:	c3                   	ret    

c0003ee9 <dir_find>:
c0003ee9:	55                   	push   ebp
c0003eea:	31 d2                	xor    edx,edx
c0003eec:	57                   	push   edi
c0003eed:	56                   	push   esi
c0003eee:	53                   	push   ebx
c0003eef:	89 c3                	mov    ebx,eax
c0003ef1:	83 ec 1c             	sub    esp,0x1c
c0003ef4:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ef6:	e8 a2 f0 ff ff       	call   c0002f9d <dir_sdi>
c0003efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0003efe:	85 c0                	test   eax,eax
c0003f00:	0f 85 9f 01 00 00    	jne    c00040a5 <dir_find+0x1bc>
c0003f06:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f09:	0f 85 8e 00 00 00    	jne    c0003f9d <dir_find+0xb4>
c0003f0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f12:	e8 30 fe ff ff       	call   c0003d47 <xname_sum>
c0003f17:	89 c5                	mov    ebp,eax
c0003f19:	31 d2                	xor    edx,edx
c0003f1b:	89 d8                	mov    eax,ebx
c0003f1d:	e8 8d f8 ff ff       	call   c00037af <dir_read>
c0003f22:	85 c0                	test   eax,eax
c0003f24:	0f 85 5f 01 00 00    	jne    c0004089 <dir_find+0x1a0>
c0003f2a:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f2d:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f30:	e8 19 db ff ff       	call   c0001a4e <ld_word>
c0003f35:	66 39 e8             	cmp    ax,bp
c0003f38:	75 df                	jne    c0003f19 <dir_find+0x30>
c0003f3a:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f3e:	31 ff                	xor    edi,edi
c0003f40:	ba 40 00 00 00       	mov    edx,0x40
c0003f45:	39 f9                	cmp    ecx,edi
c0003f47:	0f 84 4a 01 00 00    	je     c0004097 <dir_find+0x1ae>
c0003f4d:	f6 c2 1f             	test   dl,0x1f
c0003f50:	75 03                	jne    c0003f55 <dir_find+0x6c>
c0003f52:	83 c2 02             	add    edx,0x2
c0003f55:	89 d0                	mov    eax,edx
c0003f57:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f5b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f5e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f62:	e8 e7 da ff ff       	call   c0001a4e <ld_word>
c0003f67:	83 ec 0c             	sub    esp,0xc
c0003f6a:	0f b7 c0             	movzx  eax,ax
c0003f6d:	50                   	push   eax
c0003f6e:	e8 f3 43 00 00       	call   c0008366 <ff_wtoupper>
c0003f73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f77:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f7a:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f81:	e8 e0 43 00 00       	call   c0008366 <ff_wtoupper>
c0003f86:	83 c4 10             	add    esp,0x10
c0003f89:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f8d:	75 8a                	jne    c0003f19 <dir_find+0x30>
c0003f8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f93:	47                   	inc    edi
c0003f94:	83 c2 02             	add    edx,0x2
c0003f97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f9b:	eb a8                	jmp    c0003f45 <dir_find+0x5c>
c0003f9d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fa4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fae:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fb1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fb4:	89 f0                	mov    eax,esi
c0003fb6:	e8 6a e2 ff ff       	call   c0002225 <move_window>
c0003fbb:	85 c0                	test   eax,eax
c0003fbd:	0f 85 c6 00 00 00    	jne    c0004089 <dir_find+0x1a0>
c0003fc3:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fc6:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc9:	84 c9                	test   cl,cl
c0003fcb:	0f 84 bd 00 00 00    	je     c000408e <dir_find+0x1a5>
c0003fd1:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fd4:	88 d0                	mov    al,dl
c0003fd6:	83 e0 3f             	and    eax,0x3f
c0003fd9:	80 f9 e5             	cmp    cl,0xe5
c0003fdc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fdf:	0f 84 87 00 00 00    	je     c000406c <dir_find+0x183>
c0003fe5:	80 e2 08             	and    dl,0x8
c0003fe8:	74 06                	je     c0003ff0 <dir_find+0x107>
c0003fea:	3c 0f                	cmp    al,0xf
c0003fec:	75 7e                	jne    c000406c <dir_find+0x183>
c0003fee:	eb 04                	jmp    c0003ff4 <dir_find+0x10b>
c0003ff0:	3c 0f                	cmp    al,0xf
c0003ff2:	75 4c                	jne    c0004040 <dir_find+0x157>
c0003ff4:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003ff8:	75 7e                	jne    c0004078 <dir_find+0x18f>
c0003ffa:	f6 c1 40             	test   cl,0x40
c0003ffd:	74 12                	je     c0004011 <dir_find+0x128>
c0003fff:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004002:	83 e1 bf             	and    ecx,0xffffffbf
c0004005:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004009:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000400c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000400f:	eb 06                	jmp    c0004017 <dir_find+0x12e>
c0004011:	89 f8                	mov    eax,edi
c0004013:	38 c8                	cmp    al,cl
c0004015:	75 5c                	jne    c0004073 <dir_find+0x18a>
c0004017:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000401b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004020:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004023:	75 53                	jne    c0004078 <dir_find+0x18f>
c0004025:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004028:	89 ea                	mov    edx,ebp
c000402a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000402e:	e8 f3 fd ff ff       	call   c0003e26 <cmp_lfn>
c0004033:	85 c0                	test   eax,eax
c0004035:	74 41                	je     c0004078 <dir_find+0x18f>
c0004037:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000403b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000403e:	eb 38                	jmp    c0004078 <dir_find+0x18f>
c0004040:	89 f8                	mov    eax,edi
c0004042:	84 c0                	test   al,al
c0004044:	75 0d                	jne    c0004053 <dir_find+0x16a>
c0004046:	89 e8                	mov    eax,ebp
c0004048:	e8 bd de ff ff       	call   c0001f0a <sum_sfn>
c000404d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004051:	74 52                	je     c00040a5 <dir_find+0x1bc>
c0004053:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004057:	75 13                	jne    c000406c <dir_find+0x183>
c0004059:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000405c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004061:	89 e8                	mov    eax,ebp
c0004063:	e8 85 da ff ff       	call   c0001aed <mem_cmp>
c0004068:	85 c0                	test   eax,eax
c000406a:	74 39                	je     c00040a5 <dir_find+0x1bc>
c000406c:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004073:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004078:	31 d2                	xor    edx,edx
c000407a:	89 d8                	mov    eax,ebx
c000407c:	e8 76 f4 ff ff       	call   c00034f7 <dir_next>
c0004081:	85 c0                	test   eax,eax
c0004083:	0f 84 25 ff ff ff    	je     c0003fae <dir_find+0xc5>
c0004089:	89 04 24             	mov    DWORD PTR [esp],eax
c000408c:	eb 17                	jmp    c00040a5 <dir_find+0x1bc>
c000408e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004095:	eb 0e                	jmp    c00040a5 <dir_find+0x1bc>
c0004097:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000409a:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c000409f:	0f 85 74 fe ff ff    	jne    c0003f19 <dir_find+0x30>
c00040a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040a8:	83 c4 1c             	add    esp,0x1c
c00040ab:	5b                   	pop    ebx
c00040ac:	5e                   	pop    esi
c00040ad:	5f                   	pop    edi
c00040ae:	5d                   	pop    ebp
c00040af:	c3                   	ret    

c00040b0 <dir_register>:
c00040b0:	55                   	push   ebp
c00040b1:	57                   	push   edi
c00040b2:	56                   	push   esi
c00040b3:	be 06 00 00 00       	mov    esi,0x6
c00040b8:	53                   	push   ebx
c00040b9:	83 ec 6c             	sub    esp,0x6c
c00040bc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040c0:	0f 85 63 02 00 00    	jne    c0004329 <dir_register+0x279>
c00040c6:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040c8:	31 ff                	xor    edi,edi
c00040ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040cd:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040d2:	74 03                	je     c00040d7 <dir_register+0x27>
c00040d4:	47                   	inc    edi
c00040d5:	eb f6                	jmp    c00040cd <dir_register+0x1d>
c00040d7:	89 c3                	mov    ebx,eax
c00040d9:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040dd:	0f 85 e1 00 00 00    	jne    c00041c4 <dir_register+0x114>
c00040e3:	83 c7 0e             	add    edi,0xe
c00040e6:	b9 0f 00 00 00       	mov    ecx,0xf
c00040eb:	89 f8                	mov    eax,edi
c00040ed:	31 d2                	xor    edx,edx
c00040ef:	f7 f1                	div    ecx
c00040f1:	89 c7                	mov    edi,eax
c00040f3:	8d 50 02             	lea    edx,[eax+0x2]
c00040f6:	89 d8                	mov    eax,ebx
c00040f8:	e8 2c f8 ff ff       	call   c0003929 <dir_alloc>
c00040fd:	89 c6                	mov    esi,eax
c00040ff:	85 c0                	test   eax,eax
c0004101:	0f 85 22 02 00 00    	jne    c0004329 <dir_register+0x279>
c0004107:	81 c7 01 00 00 08    	add    edi,0x8000001
c000410d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004110:	c1 e7 05             	shl    edi,0x5
c0004113:	29 f8                	sub    eax,edi
c0004115:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004118:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000411b:	a8 04                	test   al,0x4
c000411d:	0f 84 91 00 00 00    	je     c00041b4 <dir_register+0x104>
c0004123:	83 e0 fb             	and    eax,0xfffffffb
c0004126:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004129:	89 d8                	mov    eax,ebx
c000412b:	e8 3d ec ff ff       	call   c0002d6d <fill_first_frag>
c0004130:	85 c0                	test   eax,eax
c0004132:	0f 85 ef 01 00 00    	jne    c0004327 <dir_register+0x277>
c0004138:	83 c9 ff             	or     ecx,0xffffffff
c000413b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000413e:	89 d8                	mov    eax,ebx
c0004140:	e8 f3 eb ff ff       	call   c0002d38 <fill_last_frag>
c0004145:	85 c0                	test   eax,eax
c0004147:	0f 85 da 01 00 00    	jne    c0004327 <dir_register+0x277>
c000414d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004151:	74 61                	je     c00041b4 <dir_register+0x104>
c0004153:	89 da                	mov    edx,ebx
c0004155:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004159:	e8 04 f6 ff ff       	call   c0003762 <load_obj_xdir>
c000415e:	85 c0                	test   eax,eax
c0004160:	0f 85 c1 01 00 00    	jne    c0004327 <dir_register+0x277>
c0004166:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000416a:	c1 e2 09             	shl    edx,0x9
c000416d:	31 c9                	xor    ecx,ecx
c000416f:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004172:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004175:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004178:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000417b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000417e:	83 c0 38             	add    eax,0x38
c0004181:	e8 41 d9 ff ff       	call   c0001ac7 <st_qword>
c0004186:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004189:	83 c0 28             	add    eax,0x28
c000418c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000418f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004192:	e8 30 d9 ff ff       	call   c0001ac7 <st_qword>
c0004197:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000419a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000419d:	83 c8 01             	or     eax,0x1
c00041a0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041a7:	e8 f5 f7 ff ff       	call   c00039a1 <store_xdir>
c00041ac:	85 c0                	test   eax,eax
c00041ae:	0f 85 73 01 00 00    	jne    c0004327 <dir_register+0x277>
c00041b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ba:	e8 c0 fb ff ff       	call   c0003d7f <create_xdir>
c00041bf:	e9 65 01 00 00       	jmp    c0004329 <dir_register+0x279>
c00041c4:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041c7:	b9 0c 00 00 00       	mov    ecx,0xc
c00041cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041d0:	89 c2                	mov    edx,eax
c00041d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d6:	e8 f2 d8 ff ff       	call   c0001acd <mem_cpy>
c00041db:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041e0:	74 58                	je     c000423a <dir_register+0x18a>
c00041e2:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041e6:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041ee:	83 ec 0c             	sub    esp,0xc
c00041f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041fc:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004200:	e8 49 dc ff ff       	call   c0001e4e <gen_numname>
c0004205:	89 d8                	mov    eax,ebx
c0004207:	e8 dd fc ff ff       	call   c0003ee9 <dir_find>
c000420c:	83 c4 10             	add    esp,0x10
c000420f:	89 c6                	mov    esi,eax
c0004211:	85 c0                	test   eax,eax
c0004213:	75 15                	jne    c000422a <dir_register+0x17a>
c0004215:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004219:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000421e:	75 ce                	jne    c00041ee <dir_register+0x13e>
c0004220:	be 07 00 00 00       	mov    esi,0x7
c0004225:	e9 ff 00 00 00       	jmp    c0004329 <dir_register+0x279>
c000422a:	83 f8 04             	cmp    eax,0x4
c000422d:	0f 85 f6 00 00 00    	jne    c0004329 <dir_register+0x279>
c0004233:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004237:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000423a:	b9 01 00 00 00       	mov    ecx,0x1
c000423f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004244:	74 0f                	je     c0004255 <dir_register+0x1a5>
c0004246:	b9 0d 00 00 00       	mov    ecx,0xd
c000424b:	8d 47 0c             	lea    eax,[edi+0xc]
c000424e:	31 d2                	xor    edx,edx
c0004250:	f7 f1                	div    ecx
c0004252:	8d 48 01             	lea    ecx,[eax+0x1]
c0004255:	89 ca                	mov    edx,ecx
c0004257:	89 d8                	mov    eax,ebx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	e8 c7 f6 ff ff       	call   c0003929 <dir_alloc>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 bd 00 00 00    	jne    c0004329 <dir_register+0x279>
c000426c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004270:	89 cf                	mov    edi,ecx
c0004272:	4f                   	dec    edi
c0004273:	74 6d                	je     c00042e2 <dir_register+0x232>
c0004275:	89 f8                	mov    eax,edi
c0004277:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000427a:	c1 e0 05             	shl    eax,0x5
c000427d:	29 c2                	sub    edx,eax
c000427f:	89 d8                	mov    eax,ebx
c0004281:	e8 17 ed ff ff       	call   c0002f9d <dir_sdi>
c0004286:	89 c6                	mov    esi,eax
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 99 00 00 00    	jne    c0004329 <dir_register+0x279>
c0004290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004294:	e8 71 dc ff ff       	call   c0001f0a <sum_sfn>
c0004299:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000429d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042a0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042a3:	89 e8                	mov    eax,ebp
c00042a5:	e8 7b df ff ff       	call   c0002225 <move_window>
c00042aa:	89 c6                	mov    esi,eax
c00042ac:	85 c0                	test   eax,eax
c00042ae:	75 79                	jne    c0004329 <dir_register+0x279>
c00042b0:	83 ec 0c             	sub    esp,0xc
c00042b3:	89 f8                	mov    eax,edi
c00042b5:	0f b6 c8             	movzx  ecx,al
c00042b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042c0:	52                   	push   edx
c00042c1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042c4:	e8 01 db ff ff       	call   c0001dca <put_lfn>
c00042c9:	31 d2                	xor    edx,edx
c00042cb:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042cf:	89 d8                	mov    eax,ebx
c00042d1:	e8 21 f2 ff ff       	call   c00034f7 <dir_next>
c00042d6:	83 c4 10             	add    esp,0x10
c00042d9:	89 c6                	mov    esi,eax
c00042db:	85 c0                	test   eax,eax
c00042dd:	75 4a                	jne    c0004329 <dir_register+0x279>
c00042df:	4f                   	dec    edi
c00042e0:	75 bb                	jne    c000429d <dir_register+0x1ed>
c00042e2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e8:	89 e8                	mov    eax,ebp
c00042ea:	e8 36 df ff ff       	call   c0002225 <move_window>
c00042ef:	89 c6                	mov    esi,eax
c00042f1:	85 c0                	test   eax,eax
c00042f3:	75 34                	jne    c0004329 <dir_register+0x279>
c00042f5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042f8:	b9 20 00 00 00       	mov    ecx,0x20
c00042fd:	31 d2                	xor    edx,edx
c00042ff:	e8 de d7 ff ff       	call   c0001ae2 <mem_set>
c0004304:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004307:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000430b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004310:	e8 b8 d7 ff ff       	call   c0001acd <mem_cpy>
c0004315:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004318:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000431b:	83 e0 18             	and    eax,0x18
c000431e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004321:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004325:	eb 02                	jmp    c0004329 <dir_register+0x279>
c0004327:	89 c6                	mov    esi,eax
c0004329:	83 c4 6c             	add    esp,0x6c
c000432c:	89 f0                	mov    eax,esi
c000432e:	5b                   	pop    ebx
c000432f:	5e                   	pop    esi
c0004330:	5f                   	pop    edi
c0004331:	5d                   	pop    ebp
c0004332:	c3                   	ret    

c0004333 <sync_fs>:
c0004333:	56                   	push   esi
c0004334:	53                   	push   ebx
c0004335:	53                   	push   ebx
c0004336:	89 c3                	mov    ebx,eax
c0004338:	e8 54 de ff ff       	call   c0002191 <sync_window>
c000433d:	85 c0                	test   eax,eax
c000433f:	0f 85 b1 00 00 00    	jne    c00043f6 <sync_fs+0xc3>
c0004345:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004348:	0f 85 8e 00 00 00    	jne    c00043dc <sync_fs+0xa9>
c000434e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004352:	0f 85 84 00 00 00    	jne    c00043dc <sync_fs+0xa9>
c0004358:	8d 73 54             	lea    esi,[ebx+0x54]
c000435b:	b9 00 02 00 00       	mov    ecx,0x200
c0004360:	31 d2                	xor    edx,edx
c0004362:	89 f0                	mov    eax,esi
c0004364:	e8 79 d7 ff ff       	call   c0001ae2 <mem_set>
c0004369:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000436f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004374:	e8 47 d7 ff ff       	call   c0001ac0 <st_word>
c0004379:	ba 52 52 61 41       	mov    edx,0x41615252
c000437e:	89 f0                	mov    eax,esi
c0004380:	e8 3f d7 ff ff       	call   c0001ac4 <st_dword>
c0004385:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000438b:	ba 72 72 41 61       	mov    edx,0x61417272
c0004390:	e8 2f d7 ff ff       	call   c0001ac4 <st_dword>
c0004395:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004398:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000439e:	e8 21 d7 ff ff       	call   c0001ac4 <st_dword>
c00043a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043a6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043ac:	e8 13 d7 ff ff       	call   c0001ac4 <st_dword>
c00043b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043b4:	83 c0 01             	add    eax,0x1
c00043b7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ba:	83 d2 00             	adc    edx,0x0
c00043bd:	83 ec 0c             	sub    esp,0xc
c00043c0:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043c3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043c6:	6a 01                	push   0x1
c00043c8:	52                   	push   edx
c00043c9:	50                   	push   eax
c00043ca:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ce:	56                   	push   esi
c00043cf:	50                   	push   eax
c00043d0:	e8 44 d6 ff ff       	call   c0001a19 <disk_write>
c00043d5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d9:	83 c4 20             	add    esp,0x20
c00043dc:	51                   	push   ecx
c00043dd:	6a 00                	push   0x0
c00043df:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e3:	6a 00                	push   0x0
c00043e5:	50                   	push   eax
c00043e6:	e8 44 d6 ff ff       	call   c0001a2f <disk_ioctl>
c00043eb:	83 c4 10             	add    esp,0x10
c00043ee:	85 c0                	test   eax,eax
c00043f0:	0f 95 c0             	setne  al
c00043f3:	0f b6 c0             	movzx  eax,al
c00043f6:	5a                   	pop    edx
c00043f7:	5b                   	pop    ebx
c00043f8:	5e                   	pop    esi
c00043f9:	c3                   	ret    

c00043fa <create_partition>:
c00043fa:	55                   	push   ebp
c00043fb:	57                   	push   edi
c00043fc:	56                   	push   esi
c00043fd:	53                   	push   ebx
c00043fe:	83 ec 60             	sub    esp,0x60
c0004401:	0f b6 c0             	movzx  eax,al
c0004404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004408:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000440c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004410:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004414:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004418:	50                   	push   eax
c0004419:	6a 01                	push   0x1
c000441b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000441f:	e8 0b d6 ff ff       	call   c0001a2f <disk_ioctl>
c0004424:	83 c4 10             	add    esp,0x10
c0004427:	85 c0                	test   eax,eax
c0004429:	74 0a                	je     c0004435 <create_partition+0x3b>
c000442b:	b8 01 00 00 00       	mov    eax,0x1
c0004430:	e9 73 05 00 00       	jmp    c00049a8 <create_partition+0x5ae>
c0004435:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004439:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000443d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004441:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004445:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000444a:	0f 86 ed 03 00 00    	jbe    c000483d <create_partition+0x443>
c0004450:	83 c0 df             	add    eax,0xffffffdf
c0004453:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000445b:	83 d2 ff             	adc    edx,0xffffffff
c000445e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004466:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000446a:	83 c0 bd             	add    eax,0xffffffbd
c000446d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004471:	83 d2 ff             	adc    edx,0xffffffff
c0004474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004478:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000447c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004483:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000448b:	be 22 00 00 00       	mov    esi,0x22
c0004490:	31 ff                	xor    edi,edi
c0004492:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000449a:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044a2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044aa:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044b4:	75 0e                	jne    c00044c4 <create_partition+0xca>
c00044b6:	b9 00 02 00 00       	mov    ecx,0x200
c00044bb:	31 d2                	xor    edx,edx
c00044bd:	89 d8                	mov    eax,ebx
c00044bf:	e8 1e d6 ff ff       	call   c0001ae2 <mem_set>
c00044c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044d0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044d3:	0f 84 23 01 00 00    	je     c00045fc <create_partition+0x202>
c00044d9:	89 f0                	mov    eax,esi
c00044db:	89 fa                	mov    edx,edi
c00044dd:	05 ff 07 00 00       	add    eax,0x7ff
c00044e2:	83 d2 00             	adc    edx,0x0
c00044e5:	89 c1                	mov    ecx,eax
c00044e7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044f1:	89 ce                	mov    esi,ecx
c00044f3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044f7:	89 d7                	mov    edi,edx
c00044f9:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044fd:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004501:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004504:	89 04 24             	mov    DWORD PTR [esp],eax
c0004507:	b8 64 00 00 00       	mov    eax,0x64
c000450c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000450f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004513:	b8 00 00 00 00       	mov    eax,0x0
c0004518:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000451c:	72 41                	jb     c000455f <create_partition+0x165>
c000451e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004526:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000452b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000452f:	01 c1                	add    ecx,eax
c0004531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004535:	f7 24 24             	mul    DWORD PTR [esp]
c0004538:	6a 00                	push   0x0
c000453a:	01 ca                	add    edx,ecx
c000453c:	6a 64                	push   0x64
c000453e:	52                   	push   edx
c000453f:	50                   	push   eax
c0004540:	e8 a7 af 01 00       	call   c001f4ec <__udivdi3>
c0004545:	83 c4 10             	add    esp,0x10
c0004548:	05 ff 07 00 00       	add    eax,0x7ff
c000454d:	83 d2 00             	adc    edx,0x0
c0004550:	89 c1                	mov    ecx,eax
c0004552:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004558:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000455c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000455f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004562:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004566:	01 f0                	add    eax,esi
c0004568:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000456c:	11 fa                	adc    edx,edi
c000456e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004572:	19 d1                	sbb    ecx,edx
c0004574:	73 2e                	jae    c00045a4 <create_partition+0x1aa>
c0004576:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000457a:	89 f8                	mov    eax,edi
c000457c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004580:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004587:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000458f:	73 6b                	jae    c00045fc <create_partition+0x202>
c0004591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004595:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004599:	29 f0                	sub    eax,esi
c000459b:	19 fa                	sbb    edx,edi
c000459d:	89 04 24             	mov    DWORD PTR [esp],eax
c00045a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045a8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045ab:	74 4f                	je     c00045fc <create_partition+0x202>
c00045ad:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045b0:	b9 10 00 00 00       	mov    ecx,0x10
c00045b5:	ba 30 05 02 c0       	mov    edx,0xc0020530
c00045ba:	e8 0e d5 ff ff       	call   c0001acd <mem_cpy>
c00045bf:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045c3:	b9 10 00 00 00       	mov    ecx,0x10
c00045c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045cc:	e8 49 db ff ff       	call   c000211a <make_rand>
c00045d1:	89 f2                	mov    edx,esi
c00045d3:	89 f9                	mov    ecx,edi
c00045d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045dd:	e8 e5 d4 ff ff       	call   c0001ac7 <st_qword>
c00045e2:	03 34 24             	add    esi,DWORD PTR [esp]
c00045e5:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e9:	89 f2                	mov    edx,esi
c00045eb:	89 f9                	mov    ecx,edi
c00045ed:	83 c2 ff             	add    edx,0xffffffff
c00045f0:	83 d1 ff             	adc    ecx,0xffffffff
c00045f3:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045f7:	e8 cb d4 ff ff       	call   c0001ac7 <st_qword>
c00045fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004600:	83 e8 80             	sub    eax,0xffffff80
c0004603:	89 c5                	mov    ebp,eax
c0004605:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004609:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000460f:	75 6b                	jne    c000467c <create_partition+0x282>
c0004611:	45                   	inc    ebp
c0004612:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004616:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000461b:	e8 56 da ff ff       	call   c0002076 <crc32>
c0004620:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004626:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000462a:	75 e5                	jne    c0004611 <create_partition+0x217>
c000462c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004630:	83 ec 0c             	sub    esp,0xc
c0004633:	c1 ed 09             	shr    ebp,0x9
c0004636:	31 d2                	xor    edx,edx
c0004638:	6a 01                	push   0x1
c000463a:	52                   	push   edx
c000463b:	8d 45 02             	lea    eax,[ebp+0x2]
c000463e:	50                   	push   eax
c000463f:	53                   	push   ebx
c0004640:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004644:	e8 d0 d3 ff ff       	call   c0001a19 <disk_write>
c0004649:	83 c4 20             	add    esp,0x20
c000464c:	85 c0                	test   eax,eax
c000464e:	0f 85 d7 fd ff ff    	jne    c000442b <create_partition+0x31>
c0004654:	83 ec 0c             	sub    esp,0xc
c0004657:	89 e8                	mov    eax,ebp
c0004659:	31 d2                	xor    edx,edx
c000465b:	6a 01                	push   0x1
c000465d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004661:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004665:	52                   	push   edx
c0004666:	50                   	push   eax
c0004667:	53                   	push   ebx
c0004668:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000466c:	e8 a8 d3 ff ff       	call   c0001a19 <disk_write>
c0004671:	83 c4 20             	add    esp,0x20
c0004674:	85 c0                	test   eax,eax
c0004676:	0f 85 af fd ff ff    	jne    c000442b <create_partition+0x31>
c000467c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004680:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004684:	3d 00 40 00 00       	cmp    eax,0x4000
c0004689:	74 0d                	je     c0004698 <create_partition+0x29e>
c000468b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000468f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004693:	e9 12 fe ff ff       	jmp    c00044aa <create_partition+0xb0>
c0004698:	31 d2                	xor    edx,edx
c000469a:	b9 00 02 00 00       	mov    ecx,0x200
c000469f:	89 d8                	mov    eax,ebx
c00046a1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046a4:	e8 39 d4 ff ff       	call   c0001ae2 <mem_set>
c00046a9:	b9 10 00 00 00       	mov    ecx,0x10
c00046ae:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00046b3:	89 d8                	mov    eax,ebx
c00046b5:	e8 13 d4 ff ff       	call   c0001acd <mem_cpy>
c00046ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046be:	f7 d2                	not    edx
c00046c0:	8d 43 58             	lea    eax,[ebx+0x58]
c00046c3:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c6:	e8 f9 d3 ff ff       	call   c0001ac4 <st_dword>
c00046cb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ce:	31 c9                	xor    ecx,ecx
c00046d0:	ba 01 00 00 00       	mov    edx,0x1
c00046d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d8:	e8 ea d3 ff ff       	call   c0001ac7 <st_qword>
c00046dd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046e5:	83 c2 ff             	add    edx,0xffffffff
c00046e8:	89 e8                	mov    eax,ebp
c00046ea:	83 d1 ff             	adc    ecx,0xffffffff
c00046ed:	e8 d5 d3 ff ff       	call   c0001ac7 <st_qword>
c00046f2:	31 c9                	xor    ecx,ecx
c00046f4:	8d 43 28             	lea    eax,[ebx+0x28]
c00046f7:	ba 22 00 00 00       	mov    edx,0x22
c00046fc:	e8 c6 d3 ff ff       	call   c0001ac7 <st_qword>
c0004701:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004705:	83 c2 de             	add    edx,0xffffffde
c0004708:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000470c:	83 d1 ff             	adc    ecx,0xffffffff
c000470f:	8d 43 30             	lea    eax,[ebx+0x30]
c0004712:	e8 b0 d3 ff ff       	call   c0001ac7 <st_qword>
c0004717:	8d 43 54             	lea    eax,[ebx+0x54]
c000471a:	ba 80 00 00 00       	mov    edx,0x80
c000471f:	31 f6                	xor    esi,esi
c0004721:	e8 9e d3 ff ff       	call   c0001ac4 <st_dword>
c0004726:	8d 43 50             	lea    eax,[ebx+0x50]
c0004729:	ba 80 00 00 00       	mov    edx,0x80
c000472e:	e8 91 d3 ff ff       	call   c0001ac4 <st_dword>
c0004733:	ba 02 00 00 00       	mov    edx,0x2
c0004738:	89 f8                	mov    eax,edi
c000473a:	e8 85 d3 ff ff       	call   c0001ac4 <st_dword>
c000473f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004742:	b9 10 00 00 00       	mov    ecx,0x10
c0004747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000474b:	e8 ca d9 ff ff       	call   c000211a <make_rand>
c0004750:	83 c8 ff             	or     eax,0xffffffff
c0004753:	46                   	inc    esi
c0004754:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004759:	e8 18 d9 ff ff       	call   c0002076 <crc32>
c000475e:	83 fe 5c             	cmp    esi,0x5c
c0004761:	75 f0                	jne    c0004753 <create_partition+0x359>
c0004763:	f7 d0                	not    eax
c0004765:	8d 73 10             	lea    esi,[ebx+0x10]
c0004768:	89 c2                	mov    edx,eax
c000476a:	89 f0                	mov    eax,esi
c000476c:	e8 53 d3 ff ff       	call   c0001ac4 <st_dword>
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	6a 01                	push   0x1
c0004776:	6a 00                	push   0x0
c0004778:	6a 01                	push   0x1
c000477a:	53                   	push   ebx
c000477b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000477f:	e8 95 d2 ff ff       	call   c0001a19 <disk_write>
c0004784:	83 c4 20             	add    esp,0x20
c0004787:	85 c0                	test   eax,eax
c0004789:	0f 85 9c fc ff ff    	jne    c000442b <create_partition+0x31>
c000478f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004793:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004797:	83 c2 ff             	add    edx,0xffffffff
c000479a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000479d:	83 d1 ff             	adc    ecx,0xffffffff
c00047a0:	e8 22 d3 ff ff       	call   c0001ac7 <st_qword>
c00047a5:	ba 01 00 00 00       	mov    edx,0x1
c00047aa:	31 c9                	xor    ecx,ecx
c00047ac:	89 e8                	mov    eax,ebp
c00047ae:	e8 14 d3 ff ff       	call   c0001ac7 <st_qword>
c00047b3:	89 f8                	mov    eax,edi
c00047b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047bd:	e8 05 d3 ff ff       	call   c0001ac7 <st_qword>
c00047c2:	89 f0                	mov    eax,esi
c00047c4:	31 d2                	xor    edx,edx
c00047c6:	31 ff                	xor    edi,edi
c00047c8:	e8 f7 d2 ff ff       	call   c0001ac4 <st_dword>
c00047cd:	83 c8 ff             	or     eax,0xffffffff
c00047d0:	47                   	inc    edi
c00047d1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047d6:	e8 9b d8 ff ff       	call   c0002076 <crc32>
c00047db:	83 ff 5c             	cmp    edi,0x5c
c00047de:	75 f0                	jne    c00047d0 <create_partition+0x3d6>
c00047e0:	f7 d0                	not    eax
c00047e2:	89 c2                	mov    edx,eax
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	e8 d9 d2 ff ff       	call   c0001ac4 <st_dword>
c00047eb:	83 ec 0c             	sub    esp,0xc
c00047ee:	6a 01                	push   0x1
c00047f0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047f4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047f8:	83 c0 ff             	add    eax,0xffffffff
c00047fb:	83 d2 ff             	adc    edx,0xffffffff
c00047fe:	52                   	push   edx
c00047ff:	50                   	push   eax
c0004800:	53                   	push   ebx
c0004801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004805:	e8 0f d2 ff ff       	call   c0001a19 <disk_write>
c000480a:	83 c4 20             	add    esp,0x20
c000480d:	85 c0                	test   eax,eax
c000480f:	0f 85 16 fc ff ff    	jne    c000442b <create_partition+0x31>
c0004815:	31 d2                	xor    edx,edx
c0004817:	89 d8                	mov    eax,ebx
c0004819:	b9 00 02 00 00       	mov    ecx,0x200
c000481e:	e8 bf d2 ff ff       	call   c0001ae2 <mem_set>
c0004823:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004829:	b9 10 00 00 00       	mov    ecx,0x10
c000482e:	ba 30 04 02 c0       	mov    edx,0xc0020430
c0004833:	e8 95 d2 ff ff       	call   c0001acd <mem_cpy>
c0004838:	e9 3d 01 00 00       	jmp    c000497a <create_partition+0x580>
c000483d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004841:	b9 05 00 00 00       	mov    ecx,0x5
c0004846:	89 04 24             	mov    DWORD PTR [esp],eax
c0004849:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c000484e:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004853:	31 d2                	xor    edx,edx
c0004855:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004858:	f7 f6                	div    esi
c000485a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000485f:	76 0c                	jbe    c000486d <create_partition+0x473>
c0004861:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c0004865:	49                   	dec    ecx
c0004866:	75 e6                	jne    c000484e <create_partition+0x454>
c0004868:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c000486d:	b9 00 02 00 00       	mov    ecx,0x200
c0004872:	31 d2                	xor    edx,edx
c0004874:	89 d8                	mov    eax,ebx
c0004876:	bd 3f 00 00 00       	mov    ebp,0x3f
c000487b:	e8 62 d2 ff ff       	call   c0001ae2 <mem_set>
c0004880:	b9 64 00 00 00       	mov    ecx,0x64
c0004885:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004888:	31 d2                	xor    edx,edx
c000488a:	f7 f1                	div    ecx
c000488c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004890:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c0004896:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000489e:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00048a3:	0f 96 c2             	setbe  dl
c00048a6:	85 ed                	test   ebp,ebp
c00048a8:	0f 95 c0             	setne  al
c00048ab:	84 c2                	test   dl,al
c00048ad:	0f 84 c7 00 00 00    	je     c000497a <create_partition+0x580>
c00048b3:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048b6:	0f 83 be 00 00 00    	jae    c000497a <create_partition+0x580>
c00048bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048c4:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048c7:	83 fe 64             	cmp    esi,0x64
c00048ca:	77 0c                	ja     c00048d8 <create_partition+0x4de>
c00048cc:	74 07                	je     c00048d5 <create_partition+0x4db>
c00048ce:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048d3:	eb 03                	jmp    c00048d8 <create_partition+0x4de>
c00048d5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048d8:	89 e8                	mov    eax,ebp
c00048da:	01 f0                	add    eax,esi
c00048dc:	72 05                	jb     c00048e3 <create_partition+0x4e9>
c00048de:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048e1:	76 07                	jbe    c00048ea <create_partition+0x4f0>
c00048e3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048e6:	29 ee                	sub    esi,ebp
c00048e8:	eb 08                	jmp    c00048f2 <create_partition+0x4f8>
c00048ea:	85 f6                	test   esi,esi
c00048ec:	0f 84 88 00 00 00    	je     c000497a <create_partition+0x580>
c00048f2:	89 c8                	mov    eax,ecx
c00048f4:	89 ea                	mov    edx,ebp
c00048f6:	e8 c9 d1 ff ff       	call   c0001ac4 <st_dword>
c00048fb:	89 f2                	mov    edx,esi
c00048fd:	bf 3f 00 00 00       	mov    edi,0x3f
c0004902:	8d 41 04             	lea    eax,[ecx+0x4]
c0004905:	e8 ba d1 ff ff       	call   c0001ac4 <st_dword>
c000490a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000490e:	31 d2                	xor    edx,edx
c0004910:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004914:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004917:	83 c1 10             	add    ecx,0x10
c000491a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000491f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004923:	89 e8                	mov    eax,ebp
c0004925:	f7 f7                	div    edi
c0004927:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000492b:	31 d2                	xor    edx,edx
c000492d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004931:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004934:	89 c2                	mov    edx,eax
c0004936:	c1 ea 02             	shr    edx,0x2
c0004939:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000493d:	47                   	inc    edi
c000493e:	01 f5                	add    ebp,esi
c0004940:	83 e2 c0             	and    edx,0xffffffc0
c0004943:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004946:	09 fa                	or     edx,edi
c0004948:	8d 45 ff             	lea    eax,[ebp-0x1]
c000494b:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c000494e:	bf 3f 00 00 00       	mov    edi,0x3f
c0004953:	31 d2                	xor    edx,edx
c0004955:	f7 f7                	div    edi
c0004957:	89 d6                	mov    esi,edx
c0004959:	31 d2                	xor    edx,edx
c000495b:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000495f:	89 c7                	mov    edi,eax
c0004961:	46                   	inc    esi
c0004962:	c1 ef 02             	shr    edi,0x2
c0004965:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c0004968:	83 e7 c0             	and    edi,0xffffffc0
c000496b:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c000496e:	09 fe                	or     esi,edi
c0004970:	89 f2                	mov    edx,esi
c0004972:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c0004975:	e9 24 ff ff ff       	jmp    c000489e <create_partition+0x4a4>
c000497a:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004980:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004985:	e8 36 d1 ff ff       	call   c0001ac0 <st_word>
c000498a:	83 ec 0c             	sub    esp,0xc
c000498d:	6a 01                	push   0x1
c000498f:	6a 00                	push   0x0
c0004991:	6a 00                	push   0x0
c0004993:	53                   	push   ebx
c0004994:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004998:	e8 7c d0 ff ff       	call   c0001a19 <disk_write>
c000499d:	83 c4 20             	add    esp,0x20
c00049a0:	85 c0                	test   eax,eax
c00049a2:	0f 95 c0             	setne  al
c00049a5:	0f b6 c0             	movzx  eax,al
c00049a8:	83 c4 5c             	add    esp,0x5c
c00049ab:	5b                   	pop    ebx
c00049ac:	5e                   	pop    esi
c00049ad:	5f                   	pop    edi
c00049ae:	5d                   	pop    ebp
c00049af:	c3                   	ret    

c00049b0 <get_fileinfo>:
c00049b0:	55                   	push   ebp
c00049b1:	57                   	push   edi
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 1c             	sub    esp,0x1c
c00049b7:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b9:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049bd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049c4:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049c7:	0f 84 dc 01 00 00    	je     c0004ba9 <get_fileinfo+0x1f9>
c00049cd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049d0:	75 0f                	jne    c00049e1 <get_fileinfo+0x31>
c00049d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049d5:	83 c4 1c             	add    esp,0x1c
c00049d8:	5b                   	pop    ebx
c00049d9:	5e                   	pop    esi
c00049da:	5f                   	pop    edi
c00049db:	5d                   	pop    ebp
c00049dc:	e9 70 d5 ff ff       	jmp    c0001f51 <get_xfileinfo>
c00049e1:	89 d3                	mov    ebx,edx
c00049e3:	89 c6                	mov    esi,eax
c00049e5:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e9:	74 6a                	je     c0004a55 <get_fileinfo+0xa5>
c00049eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049f3:	31 ed                	xor    ebp,ebp
c00049f5:	31 ff                	xor    edi,edi
c00049f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a02:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a06:	66 85 d2             	test   dx,dx
c0004a09:	74 3e                	je     c0004a49 <get_fileinfo+0x99>
c0004a0b:	66 85 ed             	test   bp,bp
c0004a0e:	75 0c                	jne    c0004a1c <get_fileinfo+0x6c>
c0004a10:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a16:	66 3d ff 07          	cmp    ax,0x7ff
c0004a1a:	76 22                	jbe    c0004a3e <get_fileinfo+0x8e>
c0004a1c:	89 e8                	mov    eax,ebp
c0004a1e:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a23:	c1 e0 10             	shl    eax,0x10
c0004a26:	29 f9                	sub    ecx,edi
c0004a28:	09 d0                	or     eax,edx
c0004a2a:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a2e:	e8 bb d1 ff ff       	call   c0001bee <put_utf>
c0004a33:	84 c0                	test   al,al
c0004a35:	74 10                	je     c0004a47 <get_fileinfo+0x97>
c0004a37:	0f b6 c0             	movzx  eax,al
c0004a3a:	01 c7                	add    edi,eax
c0004a3c:	31 d2                	xor    edx,edx
c0004a3e:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a43:	89 d5                	mov    ebp,edx
c0004a45:	eb b0                	jmp    c00049f7 <get_fileinfo+0x47>
c0004a47:	31 ff                	xor    edi,edi
c0004a49:	66 85 ed             	test   bp,bp
c0004a4c:	74 02                	je     c0004a50 <get_fileinfo+0xa0>
c0004a4e:	31 ff                	xor    edi,edi
c0004a50:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a55:	31 ff                	xor    edi,edi
c0004a57:	31 c9                	xor    ecx,ecx
c0004a59:	83 f9 0a             	cmp    ecx,0xa
c0004a5c:	0f 87 ad 00 00 00    	ja     c0004b0f <get_fileinfo+0x15f>
c0004a62:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a65:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a68:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a6c:	66 83 fa 20          	cmp    dx,0x20
c0004a70:	0f 84 92 00 00 00    	je     c0004b08 <get_fileinfo+0x158>
c0004a76:	66 83 fa 05          	cmp    dx,0x5
c0004a7a:	75 05                	jne    c0004a81 <get_fileinfo+0xd1>
c0004a7c:	ba e5 00 00 00       	mov    edx,0xe5
c0004a81:	83 fd 09             	cmp    ebp,0x9
c0004a84:	75 0b                	jne    c0004a91 <get_fileinfo+0xe1>
c0004a86:	83 ff 0b             	cmp    edi,0xb
c0004a89:	77 06                	ja     c0004a91 <get_fileinfo+0xe1>
c0004a8b:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a90:	47                   	inc    edi
c0004a91:	0f b7 c2             	movzx  eax,dx
c0004a94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a98:	e8 85 d0 ff ff       	call   c0001b22 <dbc_1st>
c0004a9d:	85 c0                	test   eax,eax
c0004a9f:	74 2f                	je     c0004ad0 <get_fileinfo+0x120>
c0004aa1:	83 fd 08             	cmp    ebp,0x8
c0004aa4:	74 2a                	je     c0004ad0 <get_fileinfo+0x120>
c0004aa6:	83 fd 0b             	cmp    ebp,0xb
c0004aa9:	74 25                	je     c0004ad0 <get_fileinfo+0x120>
c0004aab:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aae:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ab2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ab6:	e8 6a d0 ff ff       	call   c0001b25 <dbc_2nd>
c0004abb:	85 c0                	test   eax,eax
c0004abd:	74 11                	je     c0004ad0 <get_fileinfo+0x120>
c0004abf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac3:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ac6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004acb:	c1 e2 08             	shl    edx,0x8
c0004ace:	09 c2                	or     edx,eax
c0004ad0:	50                   	push   eax
c0004ad1:	50                   	push   eax
c0004ad2:	68 b5 01 00 00       	push   0x1b5
c0004ad7:	0f b7 d2             	movzx  edx,dx
c0004ada:	52                   	push   edx
c0004adb:	e8 17 38 00 00       	call   c00082f7 <ff_oem2uni>
c0004ae0:	83 c4 10             	add    esp,0x10
c0004ae3:	66 85 c0             	test   ax,ax
c0004ae6:	75 04                	jne    c0004aec <get_fileinfo+0x13c>
c0004ae8:	31 ff                	xor    edi,edi
c0004aea:	eb 23                	jmp    c0004b0f <get_fileinfo+0x15f>
c0004aec:	b9 0c 00 00 00       	mov    ecx,0xc
c0004af1:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004af5:	29 f9                	sub    ecx,edi
c0004af7:	0f b7 c0             	movzx  eax,ax
c0004afa:	e8 ef d0 ff ff       	call   c0001bee <put_utf>
c0004aff:	84 c0                	test   al,al
c0004b01:	74 e5                	je     c0004ae8 <get_fileinfo+0x138>
c0004b03:	0f b6 c0             	movzx  eax,al
c0004b06:	01 c7                	add    edi,eax
c0004b08:	89 e9                	mov    ecx,ebp
c0004b0a:	e9 4a ff ff ff       	jmp    c0004a59 <get_fileinfo+0xa9>
c0004b0f:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b14:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b18:	75 54                	jne    c0004b6e <get_fileinfo+0x1be>
c0004b1a:	85 ff                	test   edi,edi
c0004b1c:	75 0b                	jne    c0004b29 <get_fileinfo+0x179>
c0004b1e:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b22:	ba 01 00 00 00       	mov    edx,0x1
c0004b27:	eb 33                	jmp    c0004b5c <get_fileinfo+0x1ac>
c0004b29:	b1 08                	mov    cl,0x8
c0004b2b:	31 d2                	xor    edx,edx
c0004b2d:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b33:	84 c0                	test   al,al
c0004b35:	74 25                	je     c0004b5c <get_fileinfo+0x1ac>
c0004b37:	66 83 f8 2e          	cmp    ax,0x2e
c0004b3b:	74 16                	je     c0004b53 <get_fileinfo+0x1a3>
c0004b3d:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b40:	66 83 ff 19          	cmp    di,0x19
c0004b44:	77 0f                	ja     c0004b55 <get_fileinfo+0x1a5>
c0004b46:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b49:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b4c:	74 07                	je     c0004b55 <get_fileinfo+0x1a5>
c0004b4e:	83 c0 20             	add    eax,0x20
c0004b51:	eb 02                	jmp    c0004b55 <get_fileinfo+0x1a5>
c0004b53:	b1 10                	mov    cl,0x10
c0004b55:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b59:	42                   	inc    edx
c0004b5a:	eb d1                	jmp    c0004b2d <get_fileinfo+0x17d>
c0004b5c:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b61:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b64:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b68:	75 04                	jne    c0004b6e <get_fileinfo+0x1be>
c0004b6a:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b74:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b7a:	83 c0 1c             	add    eax,0x1c
c0004b7d:	e8 d9 ce ff ff       	call   c0001a5b <ld_dword>
c0004b82:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b89:	89 03                	mov    DWORD PTR [ebx],eax
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 16             	add    eax,0x16
c0004b91:	e8 b8 ce ff ff       	call   c0001a4e <ld_word>
c0004b96:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b9a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9d:	83 c0 18             	add    eax,0x18
c0004ba0:	e8 a9 ce ff ff       	call   c0001a4e <ld_word>
c0004ba5:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba9:	83 c4 1c             	add    esp,0x1c
c0004bac:	5b                   	pop    ebx
c0004bad:	5e                   	pop    esi
c0004bae:	5f                   	pop    edi
c0004baf:	5d                   	pop    ebp
c0004bb0:	c3                   	ret    

c0004bb1 <ld_clust.isra.0>:
c0004bb1:	56                   	push   esi
c0004bb2:	89 c6                	mov    esi,eax
c0004bb4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bb7:	53                   	push   ebx
c0004bb8:	89 d3                	mov    ebx,edx
c0004bba:	e8 8f ce ff ff       	call   c0001a4e <ld_word>
c0004bbf:	0f b7 c8             	movzx  ecx,ax
c0004bc2:	89 f0                	mov    eax,esi
c0004bc4:	3c 03                	cmp    al,0x3
c0004bc6:	75 0d                	jne    c0004bd5 <ld_clust.isra.0+0x24>
c0004bc8:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bcb:	e8 7e ce ff ff       	call   c0001a4e <ld_word>
c0004bd0:	c1 e0 10             	shl    eax,0x10
c0004bd3:	09 c1                	or     ecx,eax
c0004bd5:	5b                   	pop    ebx
c0004bd6:	89 c8                	mov    eax,ecx
c0004bd8:	5e                   	pop    esi
c0004bd9:	c3                   	ret    

c0004bda <st_clust.isra.1>:
c0004bda:	56                   	push   esi
c0004bdb:	89 c6                	mov    esi,eax
c0004bdd:	53                   	push   ebx
c0004bde:	89 d3                	mov    ebx,edx
c0004be0:	0f b7 d1             	movzx  edx,cx
c0004be3:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004be6:	e8 d5 ce ff ff       	call   c0001ac0 <st_word>
c0004beb:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bee:	75 0f                	jne    c0004bff <st_clust.isra.1+0x25>
c0004bf0:	c1 e9 10             	shr    ecx,0x10
c0004bf3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bf6:	89 ca                	mov    edx,ecx
c0004bf8:	5b                   	pop    ebx
c0004bf9:	5e                   	pop    esi
c0004bfa:	e9 c1 ce ff ff       	jmp    c0001ac0 <st_word>
c0004bff:	5b                   	pop    ebx
c0004c00:	5e                   	pop    esi
c0004c01:	c3                   	ret    

c0004c02 <init_alloc_info.isra.2>:
c0004c02:	56                   	push   esi
c0004c03:	89 c6                	mov    esi,eax
c0004c05:	53                   	push   ebx
c0004c06:	89 d3                	mov    ebx,edx
c0004c08:	51                   	push   ecx
c0004c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c0b:	83 c0 34             	add    eax,0x34
c0004c0e:	e8 48 ce ff ff       	call   c0001a5b <ld_dword>
c0004c13:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c16:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c18:	83 c0 38             	add    eax,0x38
c0004c1b:	e8 53 ce ff ff       	call   c0001a73 <ld_qword>
c0004c20:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c23:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c26:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c28:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c2b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c32:	83 e0 02             	and    eax,0x2
c0004c35:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c38:	5b                   	pop    ebx
c0004c39:	5b                   	pop    ebx
c0004c3a:	5e                   	pop    esi
c0004c3b:	c3                   	ret    

c0004c3c <follow_path>:
c0004c3c:	56                   	push   esi
c0004c3d:	53                   	push   ebx
c0004c3e:	89 c3                	mov    ebx,eax
c0004c40:	83 ec 14             	sub    esp,0x14
c0004c43:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c4d:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c4f:	80 fa 2f             	cmp    dl,0x2f
c0004c52:	75 07                	jne    c0004c5b <follow_path+0x1f>
c0004c54:	40                   	inc    eax
c0004c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c59:	eb ee                	jmp    c0004c49 <follow_path+0xd>
c0004c5b:	80 fa 5c             	cmp    dl,0x5c
c0004c5e:	74 f4                	je     c0004c54 <follow_path+0x18>
c0004c60:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c67:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c6e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c71:	77 52                	ja     c0004cc5 <follow_path+0x89>
c0004c73:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c77:	31 d2                	xor    edx,edx
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 1d e3 ff ff       	call   c0002f9d <dir_sdi>
c0004c80:	eb 7c                	jmp    c0004cfe <follow_path+0xc2>
c0004c82:	89 d8                	mov    eax,ebx
c0004c84:	e8 60 f2 ff ff       	call   c0003ee9 <dir_find>
c0004c89:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c8c:	85 c0                	test   eax,eax
c0004c8e:	75 46                	jne    c0004cd6 <follow_path+0x9a>
c0004c90:	80 e2 04             	and    dl,0x4
c0004c93:	75 69                	jne    c0004cfe <follow_path+0xc2>
c0004c95:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c99:	74 5e                	je     c0004cf9 <follow_path+0xbd>
c0004c9b:	8a 06                	mov    al,BYTE PTR [esi]
c0004c9d:	3c 04                	cmp    al,0x4
c0004c9f:	75 41                	jne    c0004ce2 <follow_path+0xa6>
c0004ca1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ca4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ca8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cab:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cae:	30 c0                	xor    al,al
c0004cb0:	09 d0                	or     eax,edx
c0004cb2:	89 da                	mov    edx,ebx
c0004cb4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cb7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cba:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cbd:	8d 46 10             	lea    eax,[esi+0x10]
c0004cc0:	e8 3d ff ff ff       	call   c0004c02 <init_alloc_info.isra.2>
c0004cc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc9:	89 d8                	mov    eax,ebx
c0004ccb:	e8 b6 ed ff ff       	call   c0003a86 <create_name>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 ae                	je     c0004c82 <follow_path+0x46>
c0004cd4:	eb 28                	jmp    c0004cfe <follow_path+0xc2>
c0004cd6:	83 f8 04             	cmp    eax,0x4
c0004cd9:	75 23                	jne    c0004cfe <follow_path+0xc2>
c0004cdb:	80 e2 04             	and    dl,0x4
c0004cde:	74 19                	je     c0004cf9 <follow_path+0xbd>
c0004ce0:	eb 1c                	jmp    c0004cfe <follow_path+0xc2>
c0004ce2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ceb:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cef:	e8 bd fe ff ff       	call   c0004bb1 <ld_clust.isra.0>
c0004cf4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cf7:	eb cc                	jmp    c0004cc5 <follow_path+0x89>
c0004cf9:	b8 05 00 00 00       	mov    eax,0x5
c0004cfe:	83 c4 14             	add    esp,0x14
c0004d01:	5b                   	pop    ebx
c0004d02:	5e                   	pop    esi
c0004d03:	c3                   	ret    

c0004d04 <f_mount>:
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 18             	sub    esp,0x18
c0004d08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d0c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d18:	e8 13 d3 ff ff       	call   c0002030 <get_ldnumber>
c0004d1d:	89 c2                	mov    edx,eax
c0004d1f:	b8 0b 00 00 00       	mov    eax,0xb
c0004d24:	85 d2                	test   edx,edx
c0004d26:	78 39                	js     c0004d61 <f_mount+0x5d>
c0004d28:	8b 04 95 00 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb900]
c0004d2f:	85 c0                	test   eax,eax
c0004d31:	74 03                	je     c0004d36 <f_mount+0x32>
c0004d33:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3a:	85 c0                	test   eax,eax
c0004d3c:	74 03                	je     c0004d41 <f_mount+0x3d>
c0004d3e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d45:	89 04 95 00 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb900],eax
c0004d4c:	31 c0                	xor    eax,eax
c0004d4e:	84 db                	test   bl,bl
c0004d50:	74 0f                	je     c0004d61 <f_mount+0x5d>
c0004d52:	31 c9                	xor    ecx,ecx
c0004d54:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d5c:	e8 6f d7 ff ff       	call   c00024d0 <mount_volume>
c0004d61:	83 c4 18             	add    esp,0x18
c0004d64:	5b                   	pop    ebx
c0004d65:	c3                   	ret    

c0004d66 <f_open>:
c0004d66:	55                   	push   ebp
c0004d67:	bd 09 00 00 00       	mov    ebp,0x9
c0004d6c:	57                   	push   edi
c0004d6d:	56                   	push   esi
c0004d6e:	53                   	push   ebx
c0004d6f:	83 ec 7c             	sub    esp,0x7c
c0004d72:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d79:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d80:	85 db                	test   ebx,ebx
c0004d82:	0f 84 10 04 00 00    	je     c0005198 <f_open+0x432>
c0004d88:	89 fe                	mov    esi,edi
c0004d8a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8e:	83 e6 3f             	and    esi,0x3f
c0004d91:	89 f0                	mov    eax,esi
c0004d93:	0f b6 c8             	movzx  ecx,al
c0004d96:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d9d:	e8 2e d7 ff ff       	call   c00024d0 <mount_volume>
c0004da2:	89 c5                	mov    ebp,eax
c0004da4:	85 c0                	test   eax,eax
c0004da6:	0f 85 e6 03 00 00    	jne    c0005192 <f_open+0x42c>
c0004dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db0:	83 ec 0c             	sub    esp,0xc
c0004db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004db7:	bd 11 00 00 00       	mov    ebp,0x11
c0004dbc:	68 60 04 00 00       	push   0x460
c0004dc1:	e8 6e 34 00 00       	call   c0008234 <ff_memalloc>
c0004dc6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dca:	83 c4 10             	add    esp,0x10
c0004dcd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dd2:	0f 84 c0 03 00 00    	je     c0005198 <f_open+0x432>
c0004dd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004de6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dec:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004df3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df7:	e8 40 fe ff ff       	call   c0004c3c <follow_path>
c0004dfc:	89 c5                	mov    ebp,eax
c0004dfe:	85 c0                	test   eax,eax
c0004e00:	75 0c                	jne    c0004e0e <f_open+0xa8>
c0004e02:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e07:	79 05                	jns    c0004e0e <f_open+0xa8>
c0004e09:	bd 06 00 00 00       	mov    ebp,0x6
c0004e0e:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e14:	0f 84 84 01 00 00    	je     c0004f9e <f_open+0x238>
c0004e1a:	85 ed                	test   ebp,ebp
c0004e1c:	74 20                	je     c0004e3e <f_open+0xd8>
c0004e1e:	83 fd 04             	cmp    ebp,0x4
c0004e21:	0f 85 58 03 00 00    	jne    c000517f <f_open+0x419>
c0004e27:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e2b:	83 ce 08             	or     esi,0x8
c0004e2e:	e8 7d f2 ff ff       	call   c00040b0 <dir_register>
c0004e33:	89 c5                	mov    ebp,eax
c0004e35:	85 c0                	test   eax,eax
c0004e37:	74 2f                	je     c0004e68 <f_open+0x102>
c0004e39:	e9 41 03 00 00       	jmp    c000517f <f_open+0x419>
c0004e3e:	bd 07 00 00 00       	mov    ebp,0x7
c0004e43:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e48:	0f 85 31 03 00 00    	jne    c000517f <f_open+0x419>
c0004e4e:	bd 08 00 00 00       	mov    ebp,0x8
c0004e53:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e59:	0f 85 20 03 00 00    	jne    c000517f <f_open+0x419>
c0004e5f:	83 e7 08             	and    edi,0x8
c0004e62:	0f 84 65 01 00 00    	je     c0004fcd <f_open+0x267>
c0004e68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e6c:	8a 02                	mov    al,BYTE PTR [edx]
c0004e6e:	3c 04                	cmp    al,0x4
c0004e70:	0f 85 97 00 00 00    	jne    c0004f0d <f_open+0x1a7>
c0004e76:	8d 42 10             	lea    eax,[edx+0x10]
c0004e79:	89 13                	mov    DWORD PTR [ebx],edx
c0004e7b:	89 da                	mov    edx,ebx
c0004e7d:	e8 80 fd ff ff       	call   c0004c02 <init_alloc_info.isra.2>
c0004e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e86:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	83 c0 02             	add    eax,0x2
c0004e8e:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e93:	e8 4a cc ff ff       	call   c0001ae2 <mem_set>
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9f:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea4:	83 c0 26             	add    eax,0x26
c0004ea7:	31 d2                	xor    edx,edx
c0004ea9:	e8 34 cc ff ff       	call   c0001ae2 <mem_set>
c0004eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eb5:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb9:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ebe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec1:	83 c0 08             	add    eax,0x8
c0004ec4:	e8 fb cb ff ff       	call   c0001ac4 <st_dword>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed0:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ed4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ed8:	e8 c4 ea ff ff       	call   c00039a1 <store_xdir>
c0004edd:	89 c5                	mov    ebp,eax
c0004edf:	85 c0                	test   eax,eax
c0004ee1:	0f 85 98 02 00 00    	jne    c000517f <f_open+0x419>
c0004ee7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eea:	85 d2                	test   edx,edx
c0004eec:	0f 84 db 00 00 00    	je     c0004fcd <f_open+0x267>
c0004ef2:	31 c9                	xor    ecx,ecx
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 9b e3 ff ff       	call   c0003296 <remove_chain>
c0004efb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eff:	89 c5                	mov    ebp,eax
c0004f01:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f04:	48                   	dec    eax
c0004f05:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f08:	e9 b8 00 00 00       	jmp    c0004fc5 <f_open+0x25f>
c0004f0d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f11:	89 ea                	mov    edx,ebp
c0004f13:	e8 99 fc ff ff       	call   c0004bb1 <ld_clust.isra.0>
c0004f18:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f1d:	89 c7                	mov    edi,eax
c0004f1f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f22:	e8 9d cb ff ff       	call   c0001ac4 <st_dword>
c0004f27:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f2b:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f2f:	31 c9                	xor    ecx,ecx
c0004f31:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f39:	e8 9c fc ff ff       	call   c0004bda <st_clust.isra.1>
c0004f3e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f42:	83 c0 1c             	add    eax,0x1c
c0004f45:	31 d2                	xor    edx,edx
c0004f47:	e8 78 cb ff ff       	call   c0001ac4 <st_dword>
c0004f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f50:	85 ff                	test   edi,edi
c0004f52:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f56:	74 75                	je     c0004fcd <f_open+0x267>
c0004f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5c:	31 c9                	xor    ecx,ecx
c0004f5e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f61:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f70:	89 fa                	mov    edx,edi
c0004f72:	e8 1f e3 ff ff       	call   c0003296 <remove_chain>
c0004f77:	89 c5                	mov    ebp,eax
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	0f 85 fe 01 00 00    	jne    c000517f <f_open+0x419>
c0004f81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8d:	4f                   	dec    edi
c0004f8e:	e8 92 d2 ff ff       	call   c0002225 <move_window>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f99:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f9c:	eb 27                	jmp    c0004fc5 <f_open+0x25f>
c0004f9e:	85 ed                	test   ebp,ebp
c0004fa0:	0f 85 d9 01 00 00    	jne    c000517f <f_open+0x419>
c0004fa6:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004faa:	bd 04 00 00 00       	mov    ebp,0x4
c0004faf:	a8 10                	test   al,0x10
c0004fb1:	0f 85 c8 01 00 00    	jne    c000517f <f_open+0x419>
c0004fb7:	83 e7 02             	and    edi,0x2
c0004fba:	74 11                	je     c0004fcd <f_open+0x267>
c0004fbc:	bd 07 00 00 00       	mov    ebp,0x7
c0004fc1:	a8 01                	test   al,0x1
c0004fc3:	eb 02                	jmp    c0004fc7 <f_open+0x261>
c0004fc5:	85 ed                	test   ebp,ebp
c0004fc7:	0f 85 b2 01 00 00    	jne    c000517f <f_open+0x419>
c0004fcd:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fd3:	74 03                	je     c0004fd8 <f_open+0x272>
c0004fd5:	83 ce 40             	or     esi,0x40
c0004fd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fdc:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fdf:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fe2:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fe5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fec:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fef:	8a 02                	mov    al,BYTE PTR [edx]
c0004ff1:	3c 04                	cmp    al,0x4
c0004ff3:	75 2a                	jne    c000501f <f_open+0x2b9>
c0004ff5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ffc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005000:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005005:	30 c0                	xor    al,al
c0005007:	09 c8                	or     eax,ecx
c0005009:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000500c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005010:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005013:	8d 42 10             	lea    eax,[edx+0x10]
c0005016:	89 da                	mov    edx,ebx
c0005018:	e8 e5 fb ff ff       	call   c0004c02 <init_alloc_info.isra.2>
c000501d:	eb 1c                	jmp    c000503b <f_open+0x2d5>
c000501f:	89 fa                	mov    edx,edi
c0005021:	e8 8b fb ff ff       	call   c0004bb1 <ld_clust.isra.0>
c0005026:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005029:	8d 47 1c             	lea    eax,[edi+0x1c]
c000502c:	e8 2a ca ff ff       	call   c0001a5b <ld_dword>
c0005031:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005038:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000503b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000503f:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005046:	89 03                	mov    DWORD PTR [ebx],eax
c0005048:	31 d2                	xor    edx,edx
c000504a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000504e:	b9 00 02 00 00       	mov    ecx,0x200
c0005053:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005057:	89 f0                	mov    eax,esi
c0005059:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000505c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005060:	8d 43 50             	lea    eax,[ebx+0x50]
c0005063:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000506a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005071:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005078:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000507f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005083:	e8 5a ca ff ff       	call   c0001ae2 <mem_set>
c0005088:	83 e6 20             	and    esi,0x20
c000508b:	75 07                	jne    c0005094 <f_open+0x32e>
c000508d:	31 ed                	xor    ebp,ebp
c000508f:	e9 eb 00 00 00       	jmp    c000517f <f_open+0x419>
c0005094:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005097:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000509a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050aa:	74 e1                	je     c000508d <f_open+0x327>
c00050ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050b4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050be:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050c1:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050c5:	c1 e5 09             	shl    ebp,0x9
c00050c8:	31 ff                	xor    edi,edi
c00050ca:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ce:	89 f8                	mov    eax,edi
c00050d0:	89 ee                	mov    esi,ebp
c00050d2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050d6:	73 22                	jae    c00050fa <f_open+0x394>
c00050d8:	89 d8                	mov    eax,ebx
c00050da:	e8 c8 dc ff ff       	call   c0002da7 <get_fat>
c00050df:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050e3:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050e7:	89 c2                	mov    edx,eax
c00050e9:	83 f8 01             	cmp    eax,0x1
c00050ec:	76 10                	jbe    c00050fe <f_open+0x398>
c00050ee:	83 f8 ff             	cmp    eax,0xffffffff
c00050f1:	75 d5                	jne    c00050c8 <f_open+0x362>
c00050f3:	bd 01 00 00 00       	mov    ebp,0x1
c00050f8:	eb 09                	jmp    c0005103 <f_open+0x39d>
c00050fa:	31 ed                	xor    ebp,ebp
c00050fc:	eb 05                	jmp    c0005103 <f_open+0x39d>
c00050fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005103:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005106:	85 ed                	test   ebp,ebp
c0005108:	75 75                	jne    c000517f <f_open+0x419>
c000510a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000510e:	25 ff 01 00 00       	and    eax,0x1ff
c0005113:	0f 84 74 ff ff ff    	je     c000508d <f_open+0x327>
c0005119:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000511d:	bd 02 00 00 00       	mov    ebp,0x2
c0005122:	89 c8                	mov    eax,ecx
c0005124:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005128:	e8 ba cb ff ff       	call   c0001ce7 <clst2sect>
c000512d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005131:	89 d7                	mov    edi,edx
c0005133:	09 c7                	or     edi,eax
c0005135:	74 48                	je     c000517f <f_open+0x419>
c0005137:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000513b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000513f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005143:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005147:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000514f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005153:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005157:	83 ec 0c             	sub    esp,0xc
c000515a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000515d:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005160:	6a 01                	push   0x1
c0005162:	52                   	push   edx
c0005163:	50                   	push   eax
c0005164:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005168:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000516c:	50                   	push   eax
c000516d:	e8 91 c8 ff ff       	call   c0001a03 <disk_read>
c0005172:	83 c4 20             	add    esp,0x20
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 95 c0             	setne  al
c000517a:	0f b6 c0             	movzx  eax,al
c000517d:	89 c5                	mov    ebp,eax
c000517f:	83 ec 0c             	sub    esp,0xc
c0005182:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005186:	e8 bf 30 00 00       	call   c000824a <ff_memfree>
c000518b:	83 c4 10             	add    esp,0x10
c000518e:	85 ed                	test   ebp,ebp
c0005190:	74 06                	je     c0005198 <f_open+0x432>
c0005192:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005198:	83 c4 7c             	add    esp,0x7c
c000519b:	89 e8                	mov    eax,ebp
c000519d:	5b                   	pop    ebx
c000519e:	5e                   	pop    esi
c000519f:	5f                   	pop    edi
c00051a0:	5d                   	pop    ebp
c00051a1:	c3                   	ret    

c00051a2 <f_read>:
c00051a2:	55                   	push   ebp
c00051a3:	57                   	push   edi
c00051a4:	56                   	push   esi
c00051a5:	53                   	push   ebx
c00051a6:	83 ec 2c             	sub    esp,0x2c
c00051a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051ad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051b1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051bb:	89 d8                	mov    eax,ebx
c00051bd:	e8 88 cf ff ff       	call   c000214a <validate>
c00051c2:	89 c5                	mov    ebp,eax
c00051c4:	85 c0                	test   eax,eax
c00051c6:	0f 85 4c 02 00 00    	jne    c0005418 <f_read+0x276>
c00051cc:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051d0:	85 ed                	test   ebp,ebp
c00051d2:	0f 85 40 02 00 00    	jne    c0005418 <f_read+0x276>
c00051d8:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051dc:	0f 84 31 02 00 00    	je     c0005413 <f_read+0x271>
c00051e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051e5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051e8:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051eb:	bf 00 00 00 00       	mov    edi,0x0
c00051f0:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051f3:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051f7:	89 d1                	mov    ecx,edx
c00051f9:	19 f9                	sbb    ecx,edi
c00051fb:	0f 83 cf 00 00 00    	jae    c00052d0 <f_read+0x12e>
c0005201:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005205:	e9 c6 00 00 00       	jmp    c00052d0 <f_read+0x12e>
c000520a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000520d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005210:	89 d0                	mov    eax,edx
c0005212:	25 ff 01 00 00       	and    eax,0x1ff
c0005217:	0f 85 c9 01 00 00    	jne    c00053e6 <f_read+0x244>
c000521d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005221:	89 d6                	mov    esi,edx
c0005223:	89 cf                	mov    edi,ecx
c0005225:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005229:	0f ac fe 09          	shrd   esi,edi,0x9
c000522d:	48                   	dec    eax
c000522e:	21 f0                	and    eax,esi
c0005230:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005234:	0f 84 a6 00 00 00    	je     c00052e0 <f_read+0x13e>
c000523a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000523e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005241:	89 c8                	mov    eax,ecx
c0005243:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005246:	e8 9c ca ff ff       	call   c0001ce7 <clst2sect>
c000524b:	89 d7                	mov    edi,edx
c000524d:	09 c7                	or     edi,eax
c000524f:	0f 84 b4 00 00 00    	je     c0005309 <f_read+0x167>
c0005255:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005259:	31 ff                	xor    edi,edi
c000525b:	01 c6                	add    esi,eax
c000525d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005260:	11 d7                	adc    edi,edx
c0005262:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000526a:	0f 86 fd 00 00 00    	jbe    c000536d <f_read+0x1cb>
c0005270:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005278:	c1 e8 09             	shr    eax,0x9
c000527b:	89 04 24             	mov    DWORD PTR [esp],eax
c000527e:	03 14 24             	add    edx,DWORD PTR [esp]
c0005281:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005285:	39 c2                	cmp    edx,eax
c0005287:	76 07                	jbe    c0005290 <f_read+0xee>
c0005289:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000528d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005290:	83 ec 0c             	sub    esp,0xc
c0005293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005297:	57                   	push   edi
c0005298:	56                   	push   esi
c0005299:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 5c c7 ff ff       	call   c0001a03 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	75 6e                	jne    c000531c <f_read+0x17a>
c00052ae:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052b2:	78 7e                	js     c0005332 <f_read+0x190>
c00052b4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052b7:	c1 e6 09             	shl    esi,0x9
c00052ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052be:	31 ff                	xor    edi,edi
c00052c0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052c4:	01 30                	add    DWORD PTR [eax],esi
c00052c6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052ca:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052cd:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052d0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052d5:	0f 85 2f ff ff ff    	jne    c000520a <f_read+0x68>
c00052db:	e9 38 01 00 00       	jmp    c0005418 <f_read+0x276>
c00052e0:	89 c8                	mov    eax,ecx
c00052e2:	09 d0                	or     eax,edx
c00052e4:	75 05                	jne    c00052eb <f_read+0x149>
c00052e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e9:	eb 19                	jmp    c0005304 <f_read+0x162>
c00052eb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ef:	74 09                	je     c00052fa <f_read+0x158>
c00052f1:	89 d8                	mov    eax,ebx
c00052f3:	e8 10 ca ff ff       	call   c0001d08 <clmt_clust>
c00052f8:	eb 0a                	jmp    c0005304 <f_read+0x162>
c00052fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052fd:	89 d8                	mov    eax,ebx
c00052ff:	e8 a3 da ff ff       	call   c0002da7 <get_fat>
c0005304:	83 f8 01             	cmp    eax,0x1
c0005307:	77 0e                	ja     c0005317 <f_read+0x175>
c0005309:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000530d:	bd 02 00 00 00       	mov    ebp,0x2
c0005312:	e9 01 01 00 00       	jmp    c0005418 <f_read+0x276>
c0005317:	83 f8 ff             	cmp    eax,0xffffffff
c000531a:	75 0e                	jne    c000532a <f_read+0x188>
c000531c:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005320:	bd 01 00 00 00       	mov    ebp,0x1
c0005325:	e9 ee 00 00 00       	jmp    c0005418 <f_read+0x276>
c000532a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000532d:	e9 08 ff ff ff       	jmp    c000523a <f_read+0x98>
c0005332:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005335:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005338:	29 f0                	sub    eax,esi
c000533a:	19 fa                	sbb    edx,edi
c000533c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000533f:	89 d7                	mov    edi,edx
c0005341:	ba 00 00 00 00       	mov    edx,0x0
c0005346:	89 f9                	mov    ecx,edi
c0005348:	19 d1                	sbb    ecx,edx
c000534a:	0f 83 64 ff ff ff    	jae    c00052b4 <f_read+0x112>
c0005350:	89 c7                	mov    edi,eax
c0005352:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005356:	c1 e7 09             	shl    edi,0x9
c0005359:	8d 53 50             	lea    edx,[ebx+0x50]
c000535c:	01 f8                	add    eax,edi
c000535e:	b9 00 02 00 00       	mov    ecx,0x200
c0005363:	e8 65 c7 ff ff       	call   c0001acd <mem_cpy>
c0005368:	e9 47 ff ff ff       	jmp    c00052b4 <f_read+0x112>
c000536d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005370:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005377:	89 04 24             	mov    DWORD PTR [esp],eax
c000537a:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000537e:	75 05                	jne    c0005385 <f_read+0x1e3>
c0005380:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005383:	74 5b                	je     c00053e0 <f_read+0x23e>
c0005385:	8d 43 50             	lea    eax,[ebx+0x50]
c0005388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000538c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005390:	79 2a                	jns    c00053bc <f_read+0x21a>
c0005392:	83 ec 0c             	sub    esp,0xc
c0005395:	6a 01                	push   0x1
c0005397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000539b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000539f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053a7:	50                   	push   eax
c00053a8:	e8 6c c6 ff ff       	call   c0001a19 <disk_write>
c00053ad:	83 c4 20             	add    esp,0x20
c00053b0:	85 c0                	test   eax,eax
c00053b2:	0f 85 64 ff ff ff    	jne    c000531c <f_read+0x17a>
c00053b8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053bc:	83 ec 0c             	sub    esp,0xc
c00053bf:	6a 01                	push   0x1
c00053c1:	57                   	push   edi
c00053c2:	56                   	push   esi
c00053c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053cb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053cf:	50                   	push   eax
c00053d0:	e8 2e c6 ff ff       	call   c0001a03 <disk_read>
c00053d5:	83 c4 20             	add    esp,0x20
c00053d8:	85 c0                	test   eax,eax
c00053da:	0f 85 3c ff ff ff    	jne    c000531c <f_read+0x17a>
c00053e0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053e3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053e6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e9:	ba 00 02 00 00       	mov    edx,0x200
c00053ee:	25 ff 01 00 00       	and    eax,0x1ff
c00053f3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053f7:	29 c2                	sub    edx,eax
c00053f9:	39 d6                	cmp    esi,edx
c00053fb:	76 02                	jbe    c00053ff <f_read+0x25d>
c00053fd:	89 d6                	mov    esi,edx
c00053ff:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005403:	89 f1                	mov    ecx,esi
c0005405:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005409:	e8 bf c6 ff ff       	call   c0001acd <mem_cpy>
c000540e:	e9 a7 fe ff ff       	jmp    c00052ba <f_read+0x118>
c0005413:	bd 07 00 00 00       	mov    ebp,0x7
c0005418:	83 c4 2c             	add    esp,0x2c
c000541b:	89 e8                	mov    eax,ebp
c000541d:	5b                   	pop    ebx
c000541e:	5e                   	pop    esi
c000541f:	5f                   	pop    edi
c0005420:	5d                   	pop    ebp
c0005421:	c3                   	ret    

c0005422 <f_write>:
c0005422:	55                   	push   ebp
c0005423:	57                   	push   edi
c0005424:	56                   	push   esi
c0005425:	53                   	push   ebx
c0005426:	83 ec 2c             	sub    esp,0x2c
c0005429:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000542d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005431:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005435:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000543b:	89 d8                	mov    eax,ebx
c000543d:	e8 08 cd ff ff       	call   c000214a <validate>
c0005442:	89 c5                	mov    ebp,eax
c0005444:	85 c0                	test   eax,eax
c0005446:	0f 85 86 02 00 00    	jne    c00056d2 <f_write+0x2b0>
c000544c:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005450:	85 ed                	test   ebp,ebp
c0005452:	0f 85 7a 02 00 00    	jne    c00056d2 <f_write+0x2b0>
c0005458:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000545c:	0f 84 6b 02 00 00    	je     c00056cd <f_write+0x2ab>
c0005462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005466:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005469:	0f 84 43 01 00 00    	je     c00055b2 <f_write+0x190>
c000546f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005472:	89 c1                	mov    ecx,eax
c0005474:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005478:	0f 83 34 01 00 00    	jae    c00055b2 <f_write+0x190>
c000547e:	f7 d0                	not    eax
c0005480:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005484:	e9 29 01 00 00       	jmp    c00055b2 <f_write+0x190>
c0005489:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000548c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000548f:	89 d0                	mov    eax,edx
c0005491:	25 ff 01 00 00       	and    eax,0x1ff
c0005496:	0f 85 00 02 00 00    	jne    c000569c <f_write+0x27a>
c000549c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054a0:	89 d6                	mov    esi,edx
c00054a2:	89 cf                	mov    edi,ecx
c00054a4:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054a8:	0f ac fe 09          	shrd   esi,edi,0x9
c00054ac:	48                   	dec    eax
c00054ad:	21 f0                	and    eax,esi
c00054af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b3:	0f 84 06 01 00 00    	je     c00055bf <f_write+0x19d>
c00054b9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bd:	0f 88 6e 01 00 00    	js     c0005631 <f_write+0x20f>
c00054c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ca:	89 c8                	mov    eax,ecx
c00054cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054d0:	e8 12 c8 ff ff       	call   c0001ce7 <clst2sect>
c00054d5:	89 d1                	mov    ecx,edx
c00054d7:	09 c1                	or     ecx,eax
c00054d9:	0f 84 1c 01 00 00    	je     c00055fb <f_write+0x1d9>
c00054df:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054e3:	31 ff                	xor    edi,edi
c00054e5:	01 c6                	add    esi,eax
c00054e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054eb:	11 d7                	adc    edi,edx
c00054ed:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054f5:	0f 86 63 01 00 00    	jbe    c000565e <f_write+0x23c>
c00054fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005503:	c1 e8 09             	shr    eax,0x9
c0005506:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000550a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000550e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005512:	39 c2                	cmp    edx,eax
c0005514:	76 08                	jbe    c000551e <f_write+0xfc>
c0005516:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	83 ec 0c             	sub    esp,0xc
c0005521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005525:	57                   	push   edi
c0005526:	56                   	push   esi
c0005527:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000552b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000552f:	50                   	push   eax
c0005530:	e8 e4 c4 ff ff       	call   c0001a19 <disk_write>
c0005535:	83 c4 20             	add    esp,0x20
c0005538:	85 c0                	test   eax,eax
c000553a:	0f 85 ce 00 00 00    	jne    c000560e <f_write+0x1ec>
c0005540:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005543:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005546:	29 f0                	sub    eax,esi
c0005548:	19 fa                	sbb    edx,edi
c000554a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000554e:	89 d7                	mov    edi,edx
c0005550:	ba 00 00 00 00       	mov    edx,0x0
c0005555:	89 f9                	mov    ecx,edi
c0005557:	19 d1                	sbb    ecx,edx
c0005559:	73 1c                	jae    c0005577 <f_write+0x155>
c000555b:	89 c7                	mov    edi,eax
c000555d:	b9 00 02 00 00       	mov    ecx,0x200
c0005562:	c1 e7 09             	shl    edi,0x9
c0005565:	8d 43 50             	lea    eax,[ebx+0x50]
c0005568:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000556c:	89 fa                	mov    edx,edi
c000556e:	e8 5a c5 ff ff       	call   c0001acd <mem_cpy>
c0005573:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005577:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000557b:	c1 e6 09             	shl    esi,0x9
c000557e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005582:	31 ff                	xor    edi,edi
c0005584:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005588:	01 30                	add    DWORD PTR [eax],esi
c000558a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000558e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005591:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005594:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005597:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000559a:	89 c1                	mov    ecx,eax
c000559c:	39 f2                	cmp    edx,esi
c000559e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055a1:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055a4:	19 f9                	sbb    ecx,edi
c00055a6:	73 04                	jae    c00055ac <f_write+0x18a>
c00055a8:	89 f2                	mov    edx,esi
c00055aa:	89 f8                	mov    eax,edi
c00055ac:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055af:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055b2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055b7:	0f 85 cc fe ff ff    	jne    c0005489 <f_write+0x67>
c00055bd:	eb 2e                	jmp    c00055ed <f_write+0x1cb>
c00055bf:	89 c8                	mov    eax,ecx
c00055c1:	09 d0                	or     eax,edx
c00055c3:	75 0b                	jne    c00055d0 <f_write+0x1ae>
c00055c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055c8:	31 d2                	xor    edx,edx
c00055ca:	85 c0                	test   eax,eax
c00055cc:	75 28                	jne    c00055f6 <f_write+0x1d4>
c00055ce:	eb 12                	jmp    c00055e2 <f_write+0x1c0>
c00055d0:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055d4:	74 09                	je     c00055df <f_write+0x1bd>
c00055d6:	89 d8                	mov    eax,ebx
c00055d8:	e8 2b c7 ff ff       	call   c0001d08 <clmt_clust>
c00055dd:	eb 0a                	jmp    c00055e9 <f_write+0x1c7>
c00055df:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e2:	89 d8                	mov    eax,ebx
c00055e4:	e8 ac da ff ff       	call   c0003095 <create_chain>
c00055e9:	85 c0                	test   eax,eax
c00055eb:	75 09                	jne    c00055f6 <f_write+0x1d4>
c00055ed:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055f1:	e9 dc 00 00 00       	jmp    c00056d2 <f_write+0x2b0>
c00055f6:	83 f8 01             	cmp    eax,0x1
c00055f9:	75 0e                	jne    c0005609 <f_write+0x1e7>
c00055fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055ff:	bd 02 00 00 00       	mov    ebp,0x2
c0005604:	e9 c9 00 00 00       	jmp    c00056d2 <f_write+0x2b0>
c0005609:	83 f8 ff             	cmp    eax,0xffffffff
c000560c:	75 0e                	jne    c000561c <f_write+0x1fa>
c000560e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005612:	bd 01 00 00 00       	mov    ebp,0x1
c0005617:	e9 b6 00 00 00       	jmp    c00056d2 <f_write+0x2b0>
c000561c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000561f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005623:	0f 85 90 fe ff ff    	jne    c00054b9 <f_write+0x97>
c0005629:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000562c:	e9 88 fe ff ff       	jmp    c00054b9 <f_write+0x97>
c0005631:	83 ec 0c             	sub    esp,0xc
c0005634:	8d 43 50             	lea    eax,[ebx+0x50]
c0005637:	6a 01                	push   0x1
c0005639:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000563c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000563f:	50                   	push   eax
c0005640:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005644:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005648:	50                   	push   eax
c0005649:	e8 cb c3 ff ff       	call   c0001a19 <disk_write>
c000564e:	83 c4 20             	add    esp,0x20
c0005651:	85 c0                	test   eax,eax
c0005653:	75 b9                	jne    c000560e <f_write+0x1ec>
c0005655:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005659:	e9 65 fe ff ff       	jmp    c00054c3 <f_write+0xa1>
c000565e:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005661:	75 05                	jne    c0005668 <f_write+0x246>
c0005663:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005666:	74 2e                	je     c0005696 <f_write+0x274>
c0005668:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000566b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000566e:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005671:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005674:	73 20                	jae    c0005696 <f_write+0x274>
c0005676:	83 ec 0c             	sub    esp,0xc
c0005679:	8d 43 50             	lea    eax,[ebx+0x50]
c000567c:	6a 01                	push   0x1
c000567e:	57                   	push   edi
c000567f:	56                   	push   esi
c0005680:	50                   	push   eax
c0005681:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005685:	50                   	push   eax
c0005686:	e8 78 c3 ff ff       	call   c0001a03 <disk_read>
c000568b:	83 c4 20             	add    esp,0x20
c000568e:	85 c0                	test   eax,eax
c0005690:	0f 85 78 ff ff ff    	jne    c000560e <f_write+0x1ec>
c0005696:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005699:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000569c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569f:	ba 00 02 00 00       	mov    edx,0x200
c00056a4:	25 ff 01 00 00       	and    eax,0x1ff
c00056a9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056ad:	29 c2                	sub    edx,eax
c00056af:	39 d6                	cmp    esi,edx
c00056b1:	76 02                	jbe    c00056b5 <f_write+0x293>
c00056b3:	89 d6                	mov    esi,edx
c00056b5:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b9:	89 f1                	mov    ecx,esi
c00056bb:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056bf:	e8 09 c4 ff ff       	call   c0001acd <mem_cpy>
c00056c4:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056c8:	e9 b1 fe ff ff       	jmp    c000557e <f_write+0x15c>
c00056cd:	bd 07 00 00 00       	mov    ebp,0x7
c00056d2:	83 c4 2c             	add    esp,0x2c
c00056d5:	89 e8                	mov    eax,ebp
c00056d7:	5b                   	pop    ebx
c00056d8:	5e                   	pop    esi
c00056d9:	5f                   	pop    edi
c00056da:	5d                   	pop    ebp
c00056db:	c3                   	ret    

c00056dc <f_sync>:
c00056dc:	56                   	push   esi
c00056dd:	53                   	push   ebx
c00056de:	83 ec 64             	sub    esp,0x64
c00056e1:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056e5:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e9:	89 d8                	mov    eax,ebx
c00056eb:	e8 5a ca ff ff       	call   c000214a <validate>
c00056f0:	85 c0                	test   eax,eax
c00056f2:	0f 85 ba 01 00 00    	jne    c00058b2 <f_sync+0x1d6>
c00056f8:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056fb:	f6 c2 40             	test   dl,0x40
c00056fe:	0f 84 ae 01 00 00    	je     c00058b2 <f_sync+0x1d6>
c0005704:	84 d2                	test   dl,dl
c0005706:	79 33                	jns    c000573b <f_sync+0x5f>
c0005708:	83 ec 0c             	sub    esp,0xc
c000570b:	8d 43 50             	lea    eax,[ebx+0x50]
c000570e:	6a 01                	push   0x1
c0005710:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005713:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005716:	50                   	push   eax
c0005717:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000571b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000571f:	50                   	push   eax
c0005720:	e8 f4 c2 ff ff       	call   c0001a19 <disk_write>
c0005725:	89 c2                	mov    edx,eax
c0005727:	83 c4 20             	add    esp,0x20
c000572a:	b8 01 00 00 00       	mov    eax,0x1
c000572f:	85 d2                	test   edx,edx
c0005731:	0f 85 7b 01 00 00    	jne    c00058b2 <f_sync+0x1d6>
c0005737:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000573b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000573f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005742:	0f 85 11 01 00 00    	jne    c0005859 <f_sync+0x17d>
c0005748:	89 d8                	mov    eax,ebx
c000574a:	e8 1e d6 ff ff       	call   c0002d6d <fill_first_frag>
c000574f:	85 c0                	test   eax,eax
c0005751:	0f 85 5b 01 00 00    	jne    c00058b2 <f_sync+0x1d6>
c0005757:	83 c9 ff             	or     ecx,0xffffffff
c000575a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000575d:	89 d8                	mov    eax,ebx
c000575f:	e8 d4 d5 ff ff       	call   c0002d38 <fill_last_frag>
c0005764:	85 c0                	test   eax,eax
c0005766:	0f 85 46 01 00 00    	jne    c00058b2 <f_sync+0x1d6>
c000576c:	83 ec 0c             	sub    esp,0xc
c000576f:	68 60 04 00 00       	push   0x460
c0005774:	e8 bb 2a 00 00       	call   c0008234 <ff_memalloc>
c0005779:	89 c6                	mov    esi,eax
c000577b:	83 c4 10             	add    esp,0x10
c000577e:	b8 11 00 00 00       	mov    eax,0x11
c0005783:	85 f6                	test   esi,esi
c0005785:	0f 84 27 01 00 00    	je     c00058b2 <f_sync+0x1d6>
c000578b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005795:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005798:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000579b:	89 da                	mov    edx,ebx
c000579d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057a1:	e8 bc df ff ff       	call   c0003762 <load_obj_xdir>
c00057a6:	85 c0                	test   eax,eax
c00057a8:	0f 85 95 00 00 00    	jne    c0005843 <f_sync+0x167>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057b5:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b9:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057bc:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057bf:	83 ca 01             	or     edx,0x1
c00057c2:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057cb:	83 c0 34             	add    eax,0x34
c00057ce:	e8 f1 c2 ff ff       	call   c0001ac4 <st_dword>
c00057d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057da:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057dd:	83 c0 38             	add    eax,0x38
c00057e0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e3:	e8 df c2 ff ff       	call   c0001ac7 <st_qword>
c00057e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ef:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f2:	83 c0 28             	add    eax,0x28
c00057f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f8:	e8 ca c2 ff ff       	call   c0001ac7 <st_qword>
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005804:	ba 00 00 21 50       	mov    edx,0x50210000
c0005809:	83 c0 0c             	add    eax,0xc
c000580c:	e8 b3 c2 ff ff       	call   c0001ac4 <st_dword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005818:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000581c:	31 d2                	xor    edx,edx
c000581e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005821:	83 c0 10             	add    eax,0x10
c0005824:	e8 9b c2 ff ff       	call   c0001ac4 <st_dword>
c0005829:	8d 44 24 14          	lea    eax,[esp+0x14]
c000582d:	e8 6f e1 ff ff       	call   c00039a1 <store_xdir>
c0005832:	85 c0                	test   eax,eax
c0005834:	75 0d                	jne    c0005843 <f_sync+0x167>
c0005836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000583a:	e8 f4 ea ff ff       	call   c0004333 <sync_fs>
c000583f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005843:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005847:	83 ec 0c             	sub    esp,0xc
c000584a:	56                   	push   esi
c000584b:	e8 fa 29 00 00       	call   c000824a <ff_memfree>
c0005850:	83 c4 10             	add    esp,0x10
c0005853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005857:	eb 59                	jmp    c00058b2 <f_sync+0x1d6>
c0005859:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000585c:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000585f:	e8 c1 c9 ff ff       	call   c0002225 <move_window>
c0005864:	85 c0                	test   eax,eax
c0005866:	75 4a                	jne    c00058b2 <f_sync+0x1d6>
c0005868:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000586b:	89 f2                	mov    edx,esi
c000586d:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005871:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005874:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005876:	e8 5f f3 ff ff       	call   c0004bda <st_clust.isra.1>
c000587b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587e:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005881:	e8 3e c2 ff ff       	call   c0001ac4 <st_dword>
c0005886:	8d 46 16             	lea    eax,[esi+0x16]
c0005889:	ba 00 00 21 50       	mov    edx,0x50210000
c000588e:	e8 31 c2 ff ff       	call   c0001ac4 <st_dword>
c0005893:	8d 46 12             	lea    eax,[esi+0x12]
c0005896:	31 d2                	xor    edx,edx
c0005898:	e8 23 c2 ff ff       	call   c0001ac0 <st_word>
c000589d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a9:	e8 85 ea ff ff       	call   c0004333 <sync_fs>
c00058ae:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058b2:	83 c4 64             	add    esp,0x64
c00058b5:	5b                   	pop    ebx
c00058b6:	5e                   	pop    esi
c00058b7:	c3                   	ret    

c00058b8 <f_close>:
c00058b8:	53                   	push   ebx
c00058b9:	83 ec 24             	sub    esp,0x24
c00058bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058c0:	53                   	push   ebx
c00058c1:	e8 16 fe ff ff       	call   c00056dc <f_sync>
c00058c6:	83 c4 10             	add    esp,0x10
c00058c9:	85 c0                	test   eax,eax
c00058cb:	75 15                	jne    c00058e2 <f_close+0x2a>
c00058cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058d1:	89 d8                	mov    eax,ebx
c00058d3:	e8 72 c8 ff ff       	call   c000214a <validate>
c00058d8:	85 c0                	test   eax,eax
c00058da:	75 06                	jne    c00058e2 <f_close+0x2a>
c00058dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058e2:	83 c4 18             	add    esp,0x18
c00058e5:	5b                   	pop    ebx
c00058e6:	c3                   	ret    

c00058e7 <f_lseek>:
c00058e7:	55                   	push   ebp
c00058e8:	57                   	push   edi
c00058e9:	56                   	push   esi
c00058ea:	53                   	push   ebx
c00058eb:	83 ec 3c             	sub    esp,0x3c
c00058ee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058f2:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058f6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00058fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005901:	89 d8                	mov    eax,ebx
c0005903:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005907:	e8 3e c8 ff ff       	call   c000214a <validate>
c000590c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005910:	85 c0                	test   eax,eax
c0005912:	0f 85 28 04 00 00    	jne    c0005d40 <f_lseek+0x459>
c0005918:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000591c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 85 18 04 00 00    	jne    c0005d40 <f_lseek+0x459>
c0005928:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000592c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000592f:	74 0c                	je     c000593d <f_lseek+0x56>
c0005931:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005934:	85 c0                	test   eax,eax
c0005936:	75 1f                	jne    c0005957 <f_lseek+0x70>
c0005938:	e9 8b 01 00 00       	jmp    c0005ac8 <f_lseek+0x1e1>
c000593d:	83 c9 ff             	or     ecx,0xffffffff
c0005940:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005943:	89 d8                	mov    eax,ebx
c0005945:	e8 ee d3 ff ff       	call   c0002d38 <fill_last_frag>
c000594a:	85 c0                	test   eax,eax
c000594c:	74 e3                	je     c0005931 <f_lseek+0x4a>
c000594e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005952:	e9 e9 03 00 00       	jmp    c0005d40 <f_lseek+0x459>
c0005957:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000595c:	0f 85 ac 00 00 00    	jne    c0005a0e <f_lseek+0x127>
c0005962:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005966:	0f 85 a2 00 00 00    	jne    c0005a0e <f_lseek+0x127>
c000596c:	8d 78 04             	lea    edi,[eax+0x4]
c000596f:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005972:	8b 00                	mov    eax,DWORD PTR [eax]
c0005974:	be 02 00 00 00       	mov    esi,0x2
c0005979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000597d:	85 ed                	test   ebp,ebp
c000597f:	74 73                	je     c00059f4 <f_lseek+0x10d>
c0005981:	89 e9                	mov    ecx,ebp
c0005983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000598a:	89 ca                	mov    edx,ecx
c000598c:	89 d8                	mov    eax,ebx
c000598e:	ff 04 24             	inc    DWORD PTR [esp]
c0005991:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005995:	e8 0d d4 ff ff       	call   c0002da7 <get_fat>
c000599a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000599e:	83 f8 01             	cmp    eax,0x1
c00059a1:	77 11                	ja     c00059b4 <f_lseek+0xcd>
c00059a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059a7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059af:	e9 8c 03 00 00       	jmp    c0005d40 <f_lseek+0x459>
c00059b4:	83 f8 ff             	cmp    eax,0xffffffff
c00059b7:	75 11                	jne    c00059ca <f_lseek+0xe3>
c00059b9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059bd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059c5:	e9 76 03 00 00       	jmp    c0005d40 <f_lseek+0x459>
c00059ca:	8d 51 01             	lea    edx,[ecx+0x1]
c00059cd:	89 c1                	mov    ecx,eax
c00059cf:	39 c2                	cmp    edx,eax
c00059d1:	74 b7                	je     c000598a <f_lseek+0xa3>
c00059d3:	83 c6 02             	add    esi,0x2
c00059d6:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059da:	72 0b                	jb     c00059e7 <f_lseek+0x100>
c00059dc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059df:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059e2:	89 0f                	mov    DWORD PTR [edi],ecx
c00059e4:	83 c7 08             	add    edi,0x8
c00059e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059eb:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059ee:	76 04                	jbe    c00059f4 <f_lseek+0x10d>
c00059f0:	89 c5                	mov    ebp,eax
c00059f2:	eb 8d                	jmp    c0005981 <f_lseek+0x9a>
c00059f4:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059f7:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059fb:	89 30                	mov    DWORD PTR [eax],esi
c00059fd:	0f 87 35 03 00 00    	ja     c0005d38 <f_lseek+0x451>
c0005a03:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a09:	e9 32 03 00 00       	jmp    c0005d40 <f_lseek+0x459>
c0005a0e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a11:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a14:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a1b:	19 f8                	sbb    eax,edi
c0005a1d:	73 07                	jae    c0005a26 <f_lseek+0x13f>
c0005a1f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a22:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a26:	89 f8                	mov    eax,edi
c0005a28:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a2b:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a2e:	09 f0                	or     eax,esi
c0005a30:	0f 84 0a 03 00 00    	je     c0005d40 <f_lseek+0x459>
c0005a36:	89 f0                	mov    eax,esi
c0005a38:	89 fa                	mov    edx,edi
c0005a3a:	83 c0 ff             	add    eax,0xffffffff
c0005a3d:	83 d2 ff             	adc    edx,0xffffffff
c0005a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a43:	89 d1                	mov    ecx,edx
c0005a45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a49:	89 c2                	mov    edx,eax
c0005a4b:	89 d8                	mov    eax,ebx
c0005a4d:	e8 b6 c2 ff ff       	call   c0001d08 <clmt_clust>
c0005a52:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a56:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a59:	89 c2                	mov    edx,eax
c0005a5b:	89 c8                	mov    eax,ecx
c0005a5d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a61:	e8 81 c2 ff ff       	call   c0001ce7 <clst2sect>
c0005a66:	89 d1                	mov    ecx,edx
c0005a68:	09 c1                	or     ecx,eax
c0005a6a:	0f 84 33 ff ff ff    	je     c00059a3 <f_lseek+0xbc>
c0005a70:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a76:	0f 84 c4 02 00 00    	je     c0005d40 <f_lseek+0x459>
c0005a7c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a80:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a84:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a87:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a8b:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a8f:	4d                   	dec    ebp
c0005a90:	31 ff                	xor    edi,edi
c0005a92:	21 ee                	and    esi,ebp
c0005a94:	01 c6                	add    esi,eax
c0005a96:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a99:	11 d7                	adc    edi,edx
c0005a9b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a9e:	39 fa                	cmp    edx,edi
c0005aa0:	75 08                	jne    c0005aaa <f_lseek+0x1c3>
c0005aa2:	39 f0                	cmp    eax,esi
c0005aa4:	0f 84 96 02 00 00    	je     c0005d40 <f_lseek+0x459>
c0005aaa:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab1:	0f 89 58 02 00 00    	jns    c0005d0f <f_lseek+0x428>
c0005ab7:	83 ec 0c             	sub    esp,0xc
c0005aba:	6a 01                	push   0x1
c0005abc:	52                   	push   edx
c0005abd:	50                   	push   eax
c0005abe:	55                   	push   ebp
c0005abf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac3:	e9 32 02 00 00       	jmp    c0005cfa <f_lseek+0x413>
c0005ac8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005acc:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005acf:	74 16                	je     c0005ae7 <f_lseek+0x200>
c0005ad1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ad6:	76 0f                	jbe    c0005ae7 <f_lseek+0x200>
c0005ad8:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005adf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ae7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005aed:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af0:	89 c7                	mov    edi,eax
c0005af2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005af6:	73 0d                	jae    c0005b05 <f_lseek+0x21e>
c0005af8:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005afc:	75 07                	jne    c0005b05 <f_lseek+0x21e>
c0005afe:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b05:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b0f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b16:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b1d:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b20:	75 09                	jne    c0005b2b <f_lseek+0x244>
c0005b22:	31 f6                	xor    esi,esi
c0005b24:	31 ff                	xor    edi,edi
c0005b26:	e9 87 01 00 00       	jmp    c0005cb2 <f_lseek+0x3cb>
c0005b2b:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b2f:	c1 e1 09             	shl    ecx,0x9
c0005b32:	89 d7                	mov    edi,edx
c0005b34:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b38:	09 c7                	or     edi,eax
c0005b3a:	74 6b                	je     c0005ba7 <f_lseek+0x2c0>
c0005b3c:	83 c0 ff             	add    eax,0xffffffff
c0005b3f:	89 cf                	mov    edi,ecx
c0005b41:	83 d2 ff             	adc    edx,0xffffffff
c0005b44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b4f:	83 c0 ff             	add    eax,0xffffffff
c0005b52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b56:	83 d2 ff             	adc    edx,0xffffffff
c0005b59:	31 ed                	xor    ebp,ebp
c0005b5b:	55                   	push   ebp
c0005b5c:	51                   	push   ecx
c0005b5d:	52                   	push   edx
c0005b5e:	50                   	push   eax
c0005b5f:	e8 88 99 01 00       	call   c001f4ec <__udivdi3>
c0005b64:	83 c4 10             	add    esp,0x10
c0005b67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b6b:	89 d6                	mov    esi,edx
c0005b6d:	55                   	push   ebp
c0005b6e:	57                   	push   edi
c0005b6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b77:	e8 70 99 01 00       	call   c001f4ec <__udivdi3>
c0005b7c:	83 c4 10             	add    esp,0x10
c0005b7f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b83:	19 d6                	sbb    esi,edx
c0005b85:	72 20                	jb     c0005ba7 <f_lseek+0x2c0>
c0005b87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b8f:	f7 d9                	neg    ecx
c0005b91:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b95:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b98:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b9b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b9e:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ba2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ba5:	eb 28                	jmp    c0005bcf <f_lseek+0x2e8>
c0005ba7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baa:	85 c0                	test   eax,eax
c0005bac:	75 1e                	jne    c0005bcc <f_lseek+0x2e5>
c0005bae:	31 d2                	xor    edx,edx
c0005bb0:	89 d8                	mov    eax,ebx
c0005bb2:	e8 de d4 ff ff       	call   c0003095 <create_chain>
c0005bb7:	83 f8 01             	cmp    eax,0x1
c0005bba:	0f 84 e3 fd ff ff    	je     c00059a3 <f_lseek+0xbc>
c0005bc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc3:	0f 84 f0 fd ff ff    	je     c00059b9 <f_lseek+0xd2>
c0005bc9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bcc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bcf:	85 c0                	test   eax,eax
c0005bd1:	0f 84 4b ff ff ff    	je     c0005b22 <f_lseek+0x23b>
c0005bd7:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bdb:	31 ff                	xor    edi,edi
c0005bdd:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005be0:	89 fd                	mov    ebp,edi
c0005be2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005be6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bec:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005bf0:	73 7d                	jae    c0005c6f <f_lseek+0x388>
c0005bf2:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bf5:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf9:	01 d6                	add    esi,edx
c0005bfb:	11 cf                	adc    edi,ecx
c0005bfd:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005c00:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005c03:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c06:	f6 c2 02             	test   dl,0x2
c0005c09:	74 25                	je     c0005c30 <f_lseek+0x349>
c0005c0b:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c0e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c11:	19 f9                	sbb    ecx,edi
c0005c13:	73 0c                	jae    c0005c21 <f_lseek+0x33a>
c0005c15:	83 ca 40             	or     edx,0x40
c0005c18:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c1b:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c1e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c21:	89 c2                	mov    edx,eax
c0005c23:	89 d8                	mov    eax,ebx
c0005c25:	e8 6b d4 ff ff       	call   c0003095 <create_chain>
c0005c2a:	85 c0                	test   eax,eax
c0005c2c:	75 0b                	jne    c0005c39 <f_lseek+0x352>
c0005c2e:	eb 30                	jmp    c0005c60 <f_lseek+0x379>
c0005c30:	89 c2                	mov    edx,eax
c0005c32:	89 d8                	mov    eax,ebx
c0005c34:	e8 6e d1 ff ff       	call   c0002da7 <get_fat>
c0005c39:	83 f8 ff             	cmp    eax,0xffffffff
c0005c3c:	0f 84 77 fd ff ff    	je     c00059b9 <f_lseek+0xd2>
c0005c42:	83 f8 01             	cmp    eax,0x1
c0005c45:	0f 86 58 fd ff ff    	jbe    c00059a3 <f_lseek+0xbc>
c0005c4b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c4f:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c52:	0f 86 4b fd ff ff    	jbe    c00059a3 <f_lseek+0xbc>
c0005c58:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c5b:	e9 77 ff ff ff       	jmp    c0005bd7 <f_lseek+0x2f0>
c0005c60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c6f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c72:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c76:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c79:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c7c:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c7f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c85:	0f 84 97 fe ff ff    	je     c0005b22 <f_lseek+0x23b>
c0005c8b:	89 c2                	mov    edx,eax
c0005c8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c91:	e8 51 c0 ff ff       	call   c0001ce7 <clst2sect>
c0005c96:	89 d7                	mov    edi,edx
c0005c98:	09 c7                	or     edi,eax
c0005c9a:	0f 84 03 fd ff ff    	je     c00059a3 <f_lseek+0xbc>
c0005ca0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ca4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca7:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cab:	c1 ef 09             	shr    edi,0x9
c0005cae:	01 c6                	add    esi,eax
c0005cb0:	11 d7                	adc    edi,edx
c0005cb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cb5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cb8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cbb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cbe:	19 d1                	sbb    ecx,edx
c0005cc0:	73 0a                	jae    c0005ccc <f_lseek+0x3e5>
c0005cc2:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cc6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc9:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ccc:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cd1:	74 6d                	je     c0005d40 <f_lseek+0x459>
c0005cd3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd9:	39 fa                	cmp    edx,edi
c0005cdb:	75 04                	jne    c0005ce1 <f_lseek+0x3fa>
c0005cdd:	39 f0                	cmp    eax,esi
c0005cdf:	74 5f                	je     c0005d40 <f_lseek+0x459>
c0005ce1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce8:	79 25                	jns    c0005d0f <f_lseek+0x428>
c0005cea:	83 ec 0c             	sub    esp,0xc
c0005ced:	6a 01                	push   0x1
c0005cef:	52                   	push   edx
c0005cf0:	50                   	push   eax
c0005cf1:	55                   	push   ebp
c0005cf2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cf6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cfa:	50                   	push   eax
c0005cfb:	e8 19 bd ff ff       	call   c0001a19 <disk_write>
c0005d00:	83 c4 20             	add    esp,0x20
c0005d03:	85 c0                	test   eax,eax
c0005d05:	0f 85 ae fc ff ff    	jne    c00059b9 <f_lseek+0xd2>
c0005d0b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d0f:	83 ec 0c             	sub    esp,0xc
c0005d12:	6a 01                	push   0x1
c0005d14:	57                   	push   edi
c0005d15:	56                   	push   esi
c0005d16:	55                   	push   ebp
c0005d17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d1b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d1f:	50                   	push   eax
c0005d20:	e8 de bc ff ff       	call   c0001a03 <disk_read>
c0005d25:	83 c4 20             	add    esp,0x20
c0005d28:	85 c0                	test   eax,eax
c0005d2a:	0f 85 89 fc ff ff    	jne    c00059b9 <f_lseek+0xd2>
c0005d30:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d33:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d36:	eb 08                	jmp    c0005d40 <f_lseek+0x459>
c0005d38:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d44:	83 c4 3c             	add    esp,0x3c
c0005d47:	5b                   	pop    ebx
c0005d48:	5e                   	pop    esi
c0005d49:	5f                   	pop    edi
c0005d4a:	5d                   	pop    ebp
c0005d4b:	c3                   	ret    

c0005d4c <f_opendir>:
c0005d4c:	56                   	push   esi
c0005d4d:	b8 09 00 00 00       	mov    eax,0x9
c0005d52:	53                   	push   ebx
c0005d53:	83 ec 24             	sub    esp,0x24
c0005d56:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d5a:	85 db                	test   ebx,ebx
c0005d5c:	0f 84 e6 00 00 00    	je     c0005e48 <f_opendir+0xfc>
c0005d62:	31 c9                	xor    ecx,ecx
c0005d64:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d68:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d6c:	e8 5f c7 ff ff       	call   c00024d0 <mount_volume>
c0005d71:	85 c0                	test   eax,eax
c0005d73:	0f 85 c9 00 00 00    	jne    c0005e42 <f_opendir+0xf6>
c0005d79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d7d:	83 ec 0c             	sub    esp,0xc
c0005d80:	89 03                	mov    DWORD PTR [ebx],eax
c0005d82:	68 60 04 00 00       	push   0x460
c0005d87:	e8 a8 24 00 00       	call   c0008234 <ff_memalloc>
c0005d8c:	89 c6                	mov    esi,eax
c0005d8e:	83 c4 10             	add    esp,0x10
c0005d91:	b8 11 00 00 00       	mov    eax,0x11
c0005d96:	85 f6                	test   esi,esi
c0005d98:	0f 84 aa 00 00 00    	je     c0005e48 <f_opendir+0xfc>
c0005d9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005da8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005db2:	89 d8                	mov    eax,ebx
c0005db4:	e8 83 ee ff ff       	call   c0004c3c <follow_path>
c0005db9:	85 c0                	test   eax,eax
c0005dbb:	75 61                	jne    c0005e1e <f_opendir+0xd2>
c0005dbd:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dc1:	78 46                	js     c0005e09 <f_opendir+0xbd>
c0005dc3:	b8 05 00 00 00       	mov    eax,0x5
c0005dc8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dcc:	74 50                	je     c0005e1e <f_opendir+0xd2>
c0005dce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dd2:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dd4:	3c 04                	cmp    al,0x4
c0005dd6:	75 26                	jne    c0005dfe <f_opendir+0xb2>
c0005dd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ddb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dde:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005de1:	30 d2                	xor    dl,dl
c0005de3:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005de7:	09 c2                	or     edx,eax
c0005de9:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005dec:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005df2:	89 da                	mov    edx,ebx
c0005df4:	8d 41 10             	lea    eax,[ecx+0x10]
c0005df7:	e8 06 ee ff ff       	call   c0004c02 <init_alloc_info.isra.2>
c0005dfc:	eb 0b                	jmp    c0005e09 <f_opendir+0xbd>
c0005dfe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e01:	e8 ab ed ff ff       	call   c0004bb1 <ld_clust.isra.0>
c0005e06:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0d:	31 d2                	xor    edx,edx
c0005e0f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e13:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e17:	89 d8                	mov    eax,ebx
c0005e19:	e8 7f d1 ff ff       	call   c0002f9d <dir_sdi>
c0005e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e22:	83 ec 0c             	sub    esp,0xc
c0005e25:	56                   	push   esi
c0005e26:	e8 1f 24 00 00       	call   c000824a <ff_memfree>
c0005e2b:	83 c4 10             	add    esp,0x10
c0005e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e32:	83 f8 04             	cmp    eax,0x4
c0005e35:	74 06                	je     c0005e3d <f_opendir+0xf1>
c0005e37:	85 c0                	test   eax,eax
c0005e39:	74 0d                	je     c0005e48 <f_opendir+0xfc>
c0005e3b:	eb 05                	jmp    c0005e42 <f_opendir+0xf6>
c0005e3d:	b8 05 00 00 00       	mov    eax,0x5
c0005e42:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e48:	83 c4 24             	add    esp,0x24
c0005e4b:	5b                   	pop    ebx
c0005e4c:	5e                   	pop    esi
c0005e4d:	c3                   	ret    

c0005e4e <f_closedir>:
c0005e4e:	53                   	push   ebx
c0005e4f:	83 ec 18             	sub    esp,0x18
c0005e52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e56:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e5a:	89 d8                	mov    eax,ebx
c0005e5c:	e8 e9 c2 ff ff       	call   c000214a <validate>
c0005e61:	85 c0                	test   eax,eax
c0005e63:	75 06                	jne    c0005e6b <f_closedir+0x1d>
c0005e65:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e6b:	83 c4 18             	add    esp,0x18
c0005e6e:	5b                   	pop    ebx
c0005e6f:	c3                   	ret    

c0005e70 <f_readdir>:
c0005e70:	57                   	push   edi
c0005e71:	56                   	push   esi
c0005e72:	53                   	push   ebx
c0005e73:	83 ec 20             	sub    esp,0x20
c0005e76:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e7a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e7e:	89 d8                	mov    eax,ebx
c0005e80:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e84:	e8 c1 c2 ff ff       	call   c000214a <validate>
c0005e89:	85 c0                	test   eax,eax
c0005e8b:	75 77                	jne    c0005f04 <f_readdir+0x94>
c0005e8d:	85 ff                	test   edi,edi
c0005e8f:	75 0b                	jne    c0005e9c <f_readdir+0x2c>
c0005e91:	31 d2                	xor    edx,edx
c0005e93:	89 d8                	mov    eax,ebx
c0005e95:	e8 03 d1 ff ff       	call   c0002f9d <dir_sdi>
c0005e9a:	eb 68                	jmp    c0005f04 <f_readdir+0x94>
c0005e9c:	83 ec 0c             	sub    esp,0xc
c0005e9f:	68 60 04 00 00       	push   0x460
c0005ea4:	e8 8b 23 00 00       	call   c0008234 <ff_memalloc>
c0005ea9:	89 c6                	mov    esi,eax
c0005eab:	83 c4 10             	add    esp,0x10
c0005eae:	b8 11 00 00 00       	mov    eax,0x11
c0005eb3:	85 f6                	test   esi,esi
c0005eb5:	74 4d                	je     c0005f04 <f_readdir+0x94>
c0005eb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ebb:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ec1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ec4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ec7:	31 d2                	xor    edx,edx
c0005ec9:	89 d8                	mov    eax,ebx
c0005ecb:	e8 df d8 ff ff       	call   c00037af <dir_read>
c0005ed0:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ed5:	75 19                	jne    c0005ef0 <f_readdir+0x80>
c0005ed7:	89 fa                	mov    edx,edi
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 d0 ea ff ff       	call   c00049b0 <get_fileinfo>
c0005ee0:	31 d2                	xor    edx,edx
c0005ee2:	89 d8                	mov    eax,ebx
c0005ee4:	e8 0e d6 ff ff       	call   c00034f7 <dir_next>
c0005ee9:	83 f8 04             	cmp    eax,0x4
c0005eec:	75 02                	jne    c0005ef0 <f_readdir+0x80>
c0005eee:	31 c0                	xor    eax,eax
c0005ef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	56                   	push   esi
c0005ef8:	e8 4d 23 00 00       	call   c000824a <ff_memfree>
c0005efd:	83 c4 10             	add    esp,0x10
c0005f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f04:	83 c4 20             	add    esp,0x20
c0005f07:	5b                   	pop    ebx
c0005f08:	5e                   	pop    esi
c0005f09:	5f                   	pop    edi
c0005f0a:	c3                   	ret    

c0005f0b <f_stat>:
c0005f0b:	57                   	push   edi
c0005f0c:	31 c9                	xor    ecx,ecx
c0005f0e:	56                   	push   esi
c0005f0f:	53                   	push   ebx
c0005f10:	83 ec 50             	sub    esp,0x50
c0005f13:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f17:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f1b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f1f:	e8 ac c5 ff ff       	call   c00024d0 <mount_volume>
c0005f24:	89 c3                	mov    ebx,eax
c0005f26:	85 c0                	test   eax,eax
c0005f28:	75 67                	jne    c0005f91 <f_stat+0x86>
c0005f2a:	83 ec 0c             	sub    esp,0xc
c0005f2d:	bb 11 00 00 00       	mov    ebx,0x11
c0005f32:	68 60 04 00 00       	push   0x460
c0005f37:	e8 f8 22 00 00       	call   c0008234 <ff_memalloc>
c0005f3c:	83 c4 10             	add    esp,0x10
c0005f3f:	89 c6                	mov    esi,eax
c0005f41:	85 c0                	test   eax,eax
c0005f43:	74 4c                	je     c0005f91 <f_stat+0x86>
c0005f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f49:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f4f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f55:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f59:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f5d:	e8 da ec ff ff       	call   c0004c3c <follow_path>
c0005f62:	89 c3                	mov    ebx,eax
c0005f64:	85 c0                	test   eax,eax
c0005f66:	75 1d                	jne    c0005f85 <f_stat+0x7a>
c0005f68:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f6d:	78 11                	js     c0005f80 <f_stat+0x75>
c0005f6f:	85 ff                	test   edi,edi
c0005f71:	74 12                	je     c0005f85 <f_stat+0x7a>
c0005f73:	89 fa                	mov    edx,edi
c0005f75:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f79:	e8 32 ea ff ff       	call   c00049b0 <get_fileinfo>
c0005f7e:	eb 05                	jmp    c0005f85 <f_stat+0x7a>
c0005f80:	bb 06 00 00 00       	mov    ebx,0x6
c0005f85:	83 ec 0c             	sub    esp,0xc
c0005f88:	56                   	push   esi
c0005f89:	e8 bc 22 00 00       	call   c000824a <ff_memfree>
c0005f8e:	83 c4 10             	add    esp,0x10
c0005f91:	83 c4 50             	add    esp,0x50
c0005f94:	89 d8                	mov    eax,ebx
c0005f96:	5b                   	pop    ebx
c0005f97:	5e                   	pop    esi
c0005f98:	5f                   	pop    edi
c0005f99:	c3                   	ret    

c0005f9a <f_getfree>:
c0005f9a:	55                   	push   ebp
c0005f9b:	31 c9                	xor    ecx,ecx
c0005f9d:	57                   	push   edi
c0005f9e:	56                   	push   esi
c0005f9f:	53                   	push   ebx
c0005fa0:	83 ec 5c             	sub    esp,0x5c
c0005fa3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fab:	e8 20 c5 ff ff       	call   c00024d0 <mount_volume>
c0005fb0:	89 c5                	mov    ebp,eax
c0005fb2:	85 c0                	test   eax,eax
c0005fb4:	0f 85 be 01 00 00    	jne    c0006178 <f_getfree+0x1de>
c0005fba:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	89 02                	mov    DWORD PTR [edx],eax
c0005fc4:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fc7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fca:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fce:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fd1:	39 f2                	cmp    edx,esi
c0005fd3:	77 0b                	ja     c0005fe0 <f_getfree+0x46>
c0005fd5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd9:	89 10                	mov    DWORD PTR [eax],edx
c0005fdb:	e9 98 01 00 00       	jmp    c0006178 <f_getfree+0x1de>
c0005fe0:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fe2:	80 fa 01             	cmp    dl,0x1
c0005fe5:	75 3a                	jne    c0006021 <f_getfree+0x87>
c0005fe7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005feb:	be 02 00 00 00       	mov    esi,0x2
c0005ff0:	31 db                	xor    ebx,ebx
c0005ff2:	89 f2                	mov    edx,esi
c0005ff4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005ff8:	e8 aa cd ff ff       	call   c0002da7 <get_fat>
c0005ffd:	83 f8 ff             	cmp    eax,0xffffffff
c0006000:	0f 84 51 01 00 00    	je     c0006157 <f_getfree+0x1bd>
c0006006:	83 f8 01             	cmp    eax,0x1
c0006009:	0f 84 4f 01 00 00    	je     c000615e <f_getfree+0x1c4>
c000600f:	83 d3 00             	adc    ebx,0x0
c0006012:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006016:	46                   	inc    esi
c0006017:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000601a:	77 d6                	ja     c0005ff2 <f_getfree+0x58>
c000601c:	e9 46 01 00 00       	jmp    c0006167 <f_getfree+0x1cd>
c0006021:	80 fa 04             	cmp    dl,0x4
c0006024:	0f 85 94 00 00 00    	jne    c00060be <f_getfree+0x124>
c000602a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000602d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006030:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006034:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006038:	31 ff                	xor    edi,edi
c000603a:	31 db                	xor    ebx,ebx
c000603c:	85 ff                	test   edi,edi
c000603e:	75 3f                	jne    c000607f <f_getfree+0xe5>
c0006040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006044:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006048:	83 c0 01             	add    eax,0x1
c000604b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000604f:	83 d2 00             	adc    edx,0x0
c0006052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000605a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000605e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006062:	e8 be c1 ff ff       	call   c0002225 <move_window>
c0006067:	85 c0                	test   eax,eax
c0006069:	0f 85 f6 00 00 00    	jne    c0006165 <f_getfree+0x1cb>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000607b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000607f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006083:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006087:	88 c2                	mov    dl,al
c0006089:	b8 08 00 00 00       	mov    eax,0x8
c000608e:	29 f0                	sub    eax,esi
c0006090:	89 c1                	mov    ecx,eax
c0006092:	01 f1                	add    ecx,esi
c0006094:	74 18                	je     c00060ae <f_getfree+0x114>
c0006096:	85 f6                	test   esi,esi
c0006098:	74 14                	je     c00060ae <f_getfree+0x114>
c000609a:	88 d1                	mov    cl,dl
c000609c:	83 e1 01             	and    ecx,0x1
c000609f:	80 f9 01             	cmp    cl,0x1
c00060a2:	88 d1                	mov    cl,dl
c00060a4:	83 d3 00             	adc    ebx,0x0
c00060a7:	4e                   	dec    esi
c00060a8:	d0 e9                	shr    cl,1
c00060aa:	88 ca                	mov    dl,cl
c00060ac:	eb e2                	jmp    c0006090 <f_getfree+0xf6>
c00060ae:	47                   	inc    edi
c00060af:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060b5:	85 f6                	test   esi,esi
c00060b7:	75 83                	jne    c000603c <f_getfree+0xa2>
c00060b9:	e9 a9 00 00 00       	jmp    c0006167 <f_getfree+0x1cd>
c00060be:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060c1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060cc:	31 db                	xor    ebx,ebx
c00060ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060d3:	75 1b                	jne    c00060f0 <f_getfree+0x156>
c00060d5:	89 d6                	mov    esi,edx
c00060d7:	89 cf                	mov    edi,ecx
c00060d9:	83 c6 01             	add    esi,0x1
c00060dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e0:	83 d7 00             	adc    edi,0x0
c00060e3:	e8 3d c1 ff ff       	call   c0002225 <move_window>
c00060e8:	85 c0                	test   eax,eax
c00060ea:	75 79                	jne    c0006165 <f_getfree+0x1cb>
c00060ec:	89 f2                	mov    edx,esi
c00060ee:	89 f9                	mov    ecx,edi
c00060f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060fc:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006100:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006104:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	75 15                	jne    c0006122 <f_getfree+0x188>
c000610d:	e8 3c b9 ff ff       	call   c0001a4e <ld_word>
c0006112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006116:	66 83 f8 01          	cmp    ax,0x1
c000611a:	83 d3 00             	adc    ebx,0x0
c000611d:	83 c6 02             	add    esi,0x2
c0006120:	eb 17                	jmp    c0006139 <f_getfree+0x19f>
c0006122:	e8 34 b9 ff ff       	call   c0001a5b <ld_dword>
c0006127:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006143:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006147:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000614b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000614f:	0f 85 79 ff ff ff    	jne    c00060ce <f_getfree+0x134>
c0006155:	eb 10                	jmp    c0006167 <f_getfree+0x1cd>
c0006157:	bd 01 00 00 00       	mov    ebp,0x1
c000615c:	eb 09                	jmp    c0006167 <f_getfree+0x1cd>
c000615e:	bd 02 00 00 00       	mov    ebp,0x2
c0006163:	eb 02                	jmp    c0006167 <f_getfree+0x1cd>
c0006165:	89 c5                	mov    ebp,eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006175:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006178:	83 c4 5c             	add    esp,0x5c
c000617b:	89 e8                	mov    eax,ebp
c000617d:	5b                   	pop    ebx
c000617e:	5e                   	pop    esi
c000617f:	5f                   	pop    edi
c0006180:	5d                   	pop    ebp
c0006181:	c3                   	ret    

c0006182 <f_truncate>:
c0006182:	56                   	push   esi
c0006183:	53                   	push   ebx
c0006184:	83 ec 14             	sub    esp,0x14
c0006187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 b4 bf ff ff       	call   c000214a <validate>
c0006196:	89 c6                	mov    esi,eax
c0006198:	85 c0                	test   eax,eax
c000619a:	0f 85 d2 00 00 00    	jne    c0006272 <f_truncate+0xf0>
c00061a0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a4:	85 f6                	test   esi,esi
c00061a6:	0f 85 c6 00 00 00    	jne    c0006272 <f_truncate+0xf0>
c00061ac:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b0:	0f 84 b7 00 00 00    	je     c000626d <f_truncate+0xeb>
c00061b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061bc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061bf:	89 d1                	mov    ecx,edx
c00061c1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c4:	0f 83 a8 00 00 00    	jae    c0006272 <f_truncate+0xf0>
c00061ca:	09 c2                	or     edx,eax
c00061cc:	75 15                	jne    c00061e3 <f_truncate+0x61>
c00061ce:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d1:	31 c9                	xor    ecx,ecx
c00061d3:	89 d8                	mov    eax,ebx
c00061d5:	e8 bc d0 ff ff       	call   c0003296 <remove_chain>
c00061da:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e1:	eb 35                	jmp    c0006218 <f_truncate+0x96>
c00061e3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e6:	89 d8                	mov    eax,ebx
c00061e8:	e8 ba cb ff ff       	call   c0002da7 <get_fat>
c00061ed:	89 c2                	mov    edx,eax
c00061ef:	b8 01 00 00 00       	mov    eax,0x1
c00061f4:	83 fa ff             	cmp    edx,0xffffffff
c00061f7:	74 1f                	je     c0006218 <f_truncate+0x96>
c00061f9:	b8 02 00 00 00       	mov    eax,0x2
c00061fe:	83 fa 01             	cmp    edx,0x1
c0006201:	74 15                	je     c0006218 <f_truncate+0x96>
c0006203:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006207:	31 c0                	xor    eax,eax
c0006209:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620c:	76 0a                	jbe    c0006218 <f_truncate+0x96>
c000620e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006211:	89 d8                	mov    eax,ebx
c0006213:	e8 7e d0 ff ff       	call   c0003296 <remove_chain>
c0006218:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006221:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006224:	83 ca 40             	or     edx,0x40
c0006227:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000622a:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000622d:	85 c0                	test   eax,eax
c000622f:	75 35                	jne    c0006266 <f_truncate+0xe4>
c0006231:	84 d2                	test   dl,dl
c0006233:	79 3d                	jns    c0006272 <f_truncate+0xf0>
c0006235:	83 ec 0c             	sub    esp,0xc
c0006238:	8d 43 50             	lea    eax,[ebx+0x50]
c000623b:	6a 01                	push   0x1
c000623d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006240:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006243:	50                   	push   eax
c0006244:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006248:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624c:	50                   	push   eax
c000624d:	e8 c7 b7 ff ff       	call   c0001a19 <disk_write>
c0006252:	83 c4 20             	add    esp,0x20
c0006255:	85 c0                	test   eax,eax
c0006257:	75 08                	jne    c0006261 <f_truncate+0xdf>
c0006259:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625d:	31 f6                	xor    esi,esi
c000625f:	eb 11                	jmp    c0006272 <f_truncate+0xf0>
c0006261:	b8 01 00 00 00       	mov    eax,0x1
c0006266:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006269:	89 c6                	mov    esi,eax
c000626b:	eb 05                	jmp    c0006272 <f_truncate+0xf0>
c000626d:	be 07 00 00 00       	mov    esi,0x7
c0006272:	83 c4 14             	add    esp,0x14
c0006275:	89 f0                	mov    eax,esi
c0006277:	5b                   	pop    ebx
c0006278:	5e                   	pop    esi
c0006279:	c3                   	ret    

c000627a <f_unlink>:
c000627a:	56                   	push   esi
c000627b:	b9 02 00 00 00       	mov    ecx,0x2
c0006280:	53                   	push   ebx
c0006281:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006287:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006292:	e8 39 c2 ff ff       	call   c00024d0 <mount_volume>
c0006297:	85 c0                	test   eax,eax
c0006299:	0f 85 53 01 00 00    	jne    c00063f2 <f_unlink+0x178>
c000629f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062aa:	68 60 04 00 00       	push   0x460
c00062af:	e8 80 1f 00 00       	call   c0008234 <ff_memalloc>
c00062b4:	89 c3                	mov    ebx,eax
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	b8 11 00 00 00       	mov    eax,0x11
c00062be:	85 db                	test   ebx,ebx
c00062c0:	0f 84 2c 01 00 00    	je     c00063f2 <f_unlink+0x178>
c00062c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ca:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062dd:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e1:	e8 56 e9 ff ff       	call   c0004c3c <follow_path>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 f0 00 00 00    	jne    c00063de <f_unlink+0x164>
c00062ee:	b8 06 00 00 00       	mov    eax,0x6
c00062f3:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fb:	0f 88 dd 00 00 00    	js     c00063de <f_unlink+0x164>
c0006301:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006306:	74 0a                	je     c0006312 <f_unlink+0x98>
c0006308:	b8 07 00 00 00       	mov    eax,0x7
c000630d:	e9 cc 00 00 00       	jmp    c00063de <f_unlink+0x164>
c0006312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006316:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631a:	8a 02                	mov    al,BYTE PTR [edx]
c000631c:	3c 04                	cmp    al,0x4
c000631e:	75 12                	jne    c0006332 <f_unlink+0xb8>
c0006320:	8d 42 10             	lea    eax,[edx+0x10]
c0006323:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006327:	e8 d6 e8 ff ff       	call   c0004c02 <init_alloc_info.isra.2>
c000632c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006330:	eb 0e                	jmp    c0006340 <f_unlink+0xc6>
c0006332:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006339:	e8 73 e8 ff ff       	call   c0004bb1 <ld_clust.isra.0>
c000633e:	89 c6                	mov    esi,eax
c0006340:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006345:	75 20                	jne    c0006367 <f_unlink+0xed>
c0006347:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634b:	e8 d6 d6 ff ff       	call   c0003a26 <dir_remove>
c0006350:	85 c0                	test   eax,eax
c0006352:	75 7d                	jne    c00063d1 <f_unlink+0x157>
c0006354:	85 f6                	test   esi,esi
c0006356:	74 79                	je     c00063d1 <f_unlink+0x157>
c0006358:	31 c9                	xor    ecx,ecx
c000635a:	89 f2                	mov    edx,esi
c000635c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006360:	e8 31 cf ff ff       	call   c0003296 <remove_chain>
c0006365:	eb 6a                	jmp    c00063d1 <f_unlink+0x157>
c0006367:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636b:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006372:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006379:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637c:	75 21                	jne    c000639f <f_unlink+0x125>
c000637e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006382:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006386:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006391:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006398:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000639f:	31 d2                	xor    edx,edx
c00063a1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063a8:	e8 f0 cb ff ff       	call   c0002f9d <dir_sdi>
c00063ad:	85 c0                	test   eax,eax
c00063af:	75 2d                	jne    c00063de <f_unlink+0x164>
c00063b1:	31 d2                	xor    edx,edx
c00063b3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ba:	e8 f0 d3 ff ff       	call   c00037af <dir_read>
c00063bf:	85 c0                	test   eax,eax
c00063c1:	0f 84 41 ff ff ff    	je     c0006308 <f_unlink+0x8e>
c00063c7:	83 f8 04             	cmp    eax,0x4
c00063ca:	75 12                	jne    c00063de <f_unlink+0x164>
c00063cc:	e9 76 ff ff ff       	jmp    c0006347 <f_unlink+0xcd>
c00063d1:	85 c0                	test   eax,eax
c00063d3:	75 09                	jne    c00063de <f_unlink+0x164>
c00063d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d9:	e8 55 df ff ff       	call   c0004333 <sync_fs>
c00063de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e2:	83 ec 0c             	sub    esp,0xc
c00063e5:	53                   	push   ebx
c00063e6:	e8 5f 1e 00 00       	call   c000824a <ff_memfree>
c00063eb:	83 c4 10             	add    esp,0x10
c00063ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f2:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063f8:	5b                   	pop    ebx
c00063f9:	5e                   	pop    esi
c00063fa:	c3                   	ret    

c00063fb <f_mkdir>:
c00063fb:	57                   	push   edi
c00063fc:	b9 02 00 00 00       	mov    ecx,0x2
c0006401:	56                   	push   esi
c0006402:	53                   	push   ebx
c0006403:	83 c4 80             	add    esp,0xffffff80
c0006406:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006411:	e8 ba c0 ff ff       	call   c00024d0 <mount_volume>
c0006416:	89 c3                	mov    ebx,eax
c0006418:	85 c0                	test   eax,eax
c000641a:	0f 85 fe 01 00 00    	jne    c000661e <f_mkdir+0x223>
c0006420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000642b:	bb 11 00 00 00       	mov    ebx,0x11
c0006430:	68 60 04 00 00       	push   0x460
c0006435:	e8 fa 1d 00 00       	call   c0008234 <ff_memalloc>
c000643a:	83 c4 10             	add    esp,0x10
c000643d:	89 c7                	mov    edi,eax
c000643f:	85 c0                	test   eax,eax
c0006441:	0f 84 d7 01 00 00    	je     c000661e <f_mkdir+0x223>
c0006447:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644b:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006451:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006454:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006457:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000645e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006462:	e8 d5 e7 ff ff       	call   c0004c3c <follow_path>
c0006467:	89 c3                	mov    ebx,eax
c0006469:	85 c0                	test   eax,eax
c000646b:	74 3e                	je     c00064ab <f_mkdir+0xb0>
c000646d:	83 f8 04             	cmp    eax,0x4
c0006470:	75 3e                	jne    c00064b0 <f_mkdir+0xb5>
c0006472:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006476:	31 d2                	xor    edx,edx
c0006478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000647c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006480:	e8 10 cc ff ff       	call   c0003095 <create_chain>
c0006485:	89 c6                	mov    esi,eax
c0006487:	85 c0                	test   eax,eax
c0006489:	74 0c                	je     c0006497 <f_mkdir+0x9c>
c000648b:	bb 02 00 00 00       	mov    ebx,0x2
c0006490:	83 f8 01             	cmp    eax,0x1
c0006493:	74 07                	je     c000649c <f_mkdir+0xa1>
c0006495:	eb 2a                	jmp    c00064c1 <f_mkdir+0xc6>
c0006497:	bb 07 00 00 00       	mov    ebx,0x7
c000649c:	31 c9                	xor    ecx,ecx
c000649e:	89 f2                	mov    edx,esi
c00064a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a4:	e8 ed cd ff ff       	call   c0003296 <remove_chain>
c00064a9:	eb 05                	jmp    c00064b0 <f_mkdir+0xb5>
c00064ab:	bb 08 00 00 00       	mov    ebx,0x8
c00064b0:	83 ec 0c             	sub    esp,0xc
c00064b3:	57                   	push   edi
c00064b4:	e8 91 1d 00 00       	call   c000824a <ff_memfree>
c00064b9:	83 c4 10             	add    esp,0x10
c00064bc:	e9 5d 01 00 00       	jmp    c000661e <f_mkdir+0x223>
c00064c1:	bb 01 00 00 00       	mov    ebx,0x1
c00064c6:	83 f8 ff             	cmp    eax,0xffffffff
c00064c9:	74 d1                	je     c000649c <f_mkdir+0xa1>
c00064cb:	89 f2                	mov    edx,esi
c00064cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d1:	e8 08 cf ff ff       	call   c00033de <dir_clear>
c00064d6:	89 c3                	mov    ebx,eax
c00064d8:	85 c0                	test   eax,eax
c00064da:	75 c0                	jne    c000649c <f_mkdir+0xa1>
c00064dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e3:	74 69                	je     c000654e <f_mkdir+0x153>
c00064e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ea:	83 c0 54             	add    eax,0x54
c00064ed:	ba 20 00 00 00       	mov    edx,0x20
c00064f2:	e8 eb b5 ff ff       	call   c0001ae2 <mem_set>
c00064f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fb:	83 c0 6a             	add    eax,0x6a
c00064fe:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006502:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0006506:	ba 00 00 21 50       	mov    edx,0x50210000
c000650b:	e8 b4 b5 ff ff       	call   c0001ac4 <st_dword>
c0006510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006514:	89 f1                	mov    ecx,esi
c0006516:	8d 50 54             	lea    edx,[eax+0x54]
c0006519:	e8 bc e6 ff ff       	call   c0004bda <st_clust.isra.1>
c000651e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006522:	b9 20 00 00 00       	mov    ecx,0x20
c0006527:	8d 50 54             	lea    edx,[eax+0x54]
c000652a:	83 c0 74             	add    eax,0x74
c000652d:	e8 9b b5 ff ff       	call   c0001acd <mem_cpy>
c0006532:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006536:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653a:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000653e:	8d 50 74             	lea    edx,[eax+0x74]
c0006541:	e8 94 e6 ff ff       	call   c0004bda <st_clust.isra.1>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000654e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006552:	e8 59 db ff ff       	call   c00040b0 <dir_register>
c0006557:	89 c3                	mov    ebx,eax
c0006559:	85 c0                	test   eax,eax
c000655b:	0f 85 3b ff ff ff    	jne    c000649c <f_mkdir+0xa1>
c0006561:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006565:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006568:	75 74                	jne    c00065de <f_mkdir+0x1e3>
c000656a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000656d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006572:	83 c0 0c             	add    eax,0xc
c0006575:	e8 4a b5 ff ff       	call   c0001ac4 <st_dword>
c000657a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006581:	89 f2                	mov    edx,esi
c0006583:	83 c0 34             	add    eax,0x34
c0006586:	e8 39 b5 ff ff       	call   c0001ac4 <st_dword>
c000658b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006593:	c1 e2 09             	shl    edx,0x9
c0006596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006599:	83 c0 38             	add    eax,0x38
c000659c:	e8 23 b5 ff ff       	call   c0001ac4 <st_dword>
c00065a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a5:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a9:	c1 e2 09             	shl    edx,0x9
c00065ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065af:	83 c0 28             	add    eax,0x28
c00065b2:	e8 0d b5 ff ff       	call   c0001ac4 <st_dword>
c00065b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065be:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c5:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065cd:	e8 cf d3 ff ff       	call   c00039a1 <store_xdir>
c00065d2:	89 c3                	mov    ebx,eax
c00065d4:	85 c0                	test   eax,eax
c00065d6:	0f 85 d4 fe ff ff    	jne    c00064b0 <f_mkdir+0xb5>
c00065dc:	eb 30                	jmp    c000660e <f_mkdir+0x213>
c00065de:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e2:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e7:	83 c0 16             	add    eax,0x16
c00065ea:	e8 d5 b4 ff ff       	call   c0001ac4 <st_dword>
c00065ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f3:	89 f1                	mov    ecx,esi
c00065f5:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f9:	e8 dc e5 ff ff       	call   c0004bda <st_clust.isra.1>
c00065fe:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006602:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000660e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006612:	e8 1c dd ff ff       	call   c0004333 <sync_fs>
c0006617:	89 c3                	mov    ebx,eax
c0006619:	e9 92 fe ff ff       	jmp    c00064b0 <f_mkdir+0xb5>
c000661e:	83 ec 80             	sub    esp,0xffffff80
c0006621:	89 d8                	mov    eax,ebx
c0006623:	5b                   	pop    ebx
c0006624:	5e                   	pop    esi
c0006625:	5f                   	pop    edi
c0006626:	c3                   	ret    

c0006627 <f_rename>:
c0006627:	55                   	push   ebp
c0006628:	57                   	push   edi
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006631:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006638:	e8 f3 b9 ff ff       	call   c0002030 <get_ldnumber>
c000663d:	b9 02 00 00 00       	mov    ecx,0x2
c0006642:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006646:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000664d:	e8 7e be ff ff       	call   c00024d0 <mount_volume>
c0006652:	85 c0                	test   eax,eax
c0006654:	0f 85 b5 02 00 00    	jne    c000690f <f_rename+0x2e8>
c000665a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000665e:	83 ec 0c             	sub    esp,0xc
c0006661:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006665:	68 60 04 00 00       	push   0x460
c000666a:	e8 c5 1b 00 00       	call   c0008234 <ff_memalloc>
c000666f:	89 c3                	mov    ebx,eax
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	b8 11 00 00 00       	mov    eax,0x11
c0006679:	85 db                	test   ebx,ebx
c000667b:	0f 84 8e 02 00 00    	je     c000690f <f_rename+0x2e8>
c0006681:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006685:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000668e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006691:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006698:	8d 44 24 58          	lea    eax,[esp+0x58]
c000669c:	e8 9b e5 ff ff       	call   c0004c3c <follow_path>
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 85 52 02 00 00    	jne    c00068fb <f_rename+0x2d4>
c00066a9:	b8 06 00 00 00       	mov    eax,0x6
c00066ae:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b6:	0f 85 3f 02 00 00    	jne    c00068fb <f_rename+0x2d4>
c00066bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c3:	0f 85 05 01 00 00    	jne    c00067ce <f_rename+0x1a7>
c00066c9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066cc:	b9 40 00 00 00       	mov    ecx,0x40
c00066d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d5:	e8 f3 b3 ff ff       	call   c0001acd <mem_cpy>
c00066da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ea:	e8 de b3 ff ff       	call   c0001acd <mem_cpy>
c00066ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fd:	e8 3a e5 ff ff       	call   c0004c3c <follow_path>
c0006702:	85 c0                	test   eax,eax
c0006704:	75 29                	jne    c000672f <f_rename+0x108>
c0006706:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006711:	74 0a                	je     c000671d <f_rename+0xf6>
c0006713:	b8 08 00 00 00       	mov    eax,0x8
c0006718:	e9 de 01 00 00       	jmp    c00068fb <f_rename+0x2d4>
c000671d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006724:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672b:	75 e6                	jne    c0006713 <f_rename+0xec>
c000672d:	eb 09                	jmp    c0006738 <f_rename+0x111>
c000672f:	83 f8 04             	cmp    eax,0x4
c0006732:	0f 85 c3 01 00 00    	jne    c00068fb <f_rename+0x2d4>
c0006738:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673f:	e8 6c d9 ff ff       	call   c00040b0 <dir_register>
c0006744:	85 c0                	test   eax,eax
c0006746:	0f 85 af 01 00 00    	jne    c00068fb <f_rename+0x2d4>
c000674c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006750:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006753:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006756:	89 c5                	mov    ebp,eax
c0006758:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000675f:	8d 46 24             	lea    eax,[esi+0x24]
c0006762:	e8 e7 b2 ff ff       	call   c0001a4e <ld_word>
c0006767:	b9 40 00 00 00       	mov    ecx,0x40
c000676c:	89 c7                	mov    edi,eax
c000676e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006772:	89 f0                	mov    eax,esi
c0006774:	e8 54 b3 ff ff       	call   c0001acd <mem_cpy>
c0006779:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000677d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006780:	89 e9                	mov    ecx,ebp
c0006782:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006785:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006790:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006793:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006796:	83 c0 24             	add    eax,0x24
c0006799:	0f b7 d7             	movzx  edx,di
c000679c:	e8 1f b3 ff ff       	call   c0001ac0 <st_word>
c00067a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a8:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ab:	a8 10                	test   al,0x10
c00067ad:	75 06                	jne    c00067b5 <f_rename+0x18e>
c00067af:	83 c8 20             	or     eax,0x20
c00067b2:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067bc:	e8 e0 d1 ff ff       	call   c00039a1 <store_xdir>
c00067c1:	85 c0                	test   eax,eax
c00067c3:	0f 84 1c 01 00 00    	je     c00068e5 <f_rename+0x2be>
c00067c9:	e9 2d 01 00 00       	jmp    c00068fb <f_rename+0x2d4>
c00067ce:	b9 20 00 00 00       	mov    ecx,0x20
c00067d3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067de:	e8 ea b2 ff ff       	call   c0001acd <mem_cpy>
c00067e3:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067e8:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067ec:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f3:	e8 d5 b2 ff ff       	call   c0001acd <mem_cpy>
c00067f8:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067ff:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006806:	e8 31 e4 ff ff       	call   c0004c3c <follow_path>
c000680b:	85 c0                	test   eax,eax
c000680d:	75 27                	jne    c0006836 <f_rename+0x20f>
c000680f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006813:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681a:	0f 85 f3 fe ff ff    	jne    c0006713 <f_rename+0xec>
c0006820:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006827:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000682e:	0f 85 df fe ff ff    	jne    c0006713 <f_rename+0xec>
c0006834:	eb 09                	jmp    c000683f <f_rename+0x218>
c0006836:	83 f8 04             	cmp    eax,0x4
c0006839:	0f 85 bc 00 00 00    	jne    c00068fb <f_rename+0x2d4>
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 65 d8 ff ff       	call   c00040b0 <dir_register>
c000684b:	85 c0                	test   eax,eax
c000684d:	0f 85 a8 00 00 00    	jne    c00068fb <f_rename+0x2d4>
c0006853:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685a:	b9 13 00 00 00       	mov    ecx,0x13
c000685f:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	e8 62 b2 ff ff       	call   c0001acd <mem_cpy>
c000686b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c000686f:	a8 10                	test   al,0x10
c0006871:	75 03                	jne    c0006876 <f_rename+0x24f>
c0006873:	83 c8 20             	or     eax,0x20
c0006876:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006881:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006885:	74 5e                	je     c00068e5 <f_rename+0x2be>
c0006887:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000688e:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006892:	74 51                	je     c00068e5 <f_rename+0x2be>
c0006894:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006898:	89 f2                	mov    edx,esi
c000689a:	8a 07                	mov    al,BYTE PTR [edi]
c000689c:	e8 10 e3 ff ff       	call   c0004bb1 <ld_clust.isra.0>
c00068a1:	89 c2                	mov    edx,eax
c00068a3:	89 f8                	mov    eax,edi
c00068a5:	e8 3d b4 ff ff       	call   c0001ce7 <clst2sect>
c00068aa:	89 c6                	mov    esi,eax
c00068ac:	89 d1                	mov    ecx,edx
c00068ae:	b8 02 00 00 00       	mov    eax,0x2
c00068b3:	09 f2                	or     edx,esi
c00068b5:	74 44                	je     c00068fb <f_rename+0x2d4>
c00068b7:	89 f2                	mov    edx,esi
c00068b9:	89 f8                	mov    eax,edi
c00068bb:	e8 65 b9 ff ff       	call   c0002225 <move_window>
c00068c0:	85 c0                	test   eax,eax
c00068c2:	75 37                	jne    c00068fb <f_rename+0x2d4>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068cc:	75 17                	jne    c00068e5 <f_rename+0x2be>
c00068ce:	8d 50 74             	lea    edx,[eax+0x74]
c00068d1:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068d8:	e8 fd e2 ff ff       	call   c0004bda <st_clust.isra.1>
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e9:	e8 38 d1 ff ff       	call   c0003a26 <dir_remove>
c00068ee:	85 c0                	test   eax,eax
c00068f0:	75 09                	jne    c00068fb <f_rename+0x2d4>
c00068f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f6:	e8 38 da ff ff       	call   c0004333 <sync_fs>
c00068fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068ff:	83 ec 0c             	sub    esp,0xc
c0006902:	53                   	push   ebx
c0006903:	e8 42 19 00 00       	call   c000824a <ff_memfree>
c0006908:	83 c4 10             	add    esp,0x10
c000690b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000690f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006915:	5b                   	pop    ebx
c0006916:	5e                   	pop    esi
c0006917:	5f                   	pop    edi
c0006918:	5d                   	pop    ebp
c0006919:	c3                   	ret    

c000691a <f_chmod>:
c000691a:	57                   	push   edi
c000691b:	b9 02 00 00 00       	mov    ecx,0x2
c0006920:	56                   	push   esi
c0006921:	53                   	push   ebx
c0006922:	83 ec 60             	sub    esp,0x60
c0006925:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006929:	8d 44 24 70          	lea    eax,[esp+0x70]
c000692d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006931:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006935:	e8 96 bb ff ff       	call   c00024d0 <mount_volume>
c000693a:	85 c0                	test   eax,eax
c000693c:	0f 85 af 00 00 00    	jne    c00069f1 <f_chmod+0xd7>
c0006942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006946:	83 ec 0c             	sub    esp,0xc
c0006949:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000694d:	68 60 04 00 00       	push   0x460
c0006952:	e8 dd 18 00 00       	call   c0008234 <ff_memalloc>
c0006957:	89 c6                	mov    esi,eax
c0006959:	83 c4 10             	add    esp,0x10
c000695c:	b8 11 00 00 00       	mov    eax,0x11
c0006961:	85 f6                	test   esi,esi
c0006963:	0f 84 88 00 00 00    	je     c00069f1 <f_chmod+0xd7>
c0006969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000696d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006973:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006976:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006979:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000697d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006981:	e8 b6 e2 ff ff       	call   c0004c3c <follow_path>
c0006986:	85 c0                	test   eax,eax
c0006988:	75 53                	jne    c00069dd <f_chmod+0xc3>
c000698a:	b8 06 00 00 00       	mov    eax,0x6
c000698f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006994:	75 47                	jne    c00069dd <f_chmod+0xc3>
c0006996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699a:	89 f9                	mov    ecx,edi
c000699c:	83 e1 27             	and    ecx,0x27
c000699f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a2:	75 1d                	jne    c00069c1 <f_chmod+0xa7>
c00069a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069a7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069aa:	21 cb                	and    ebx,ecx
c00069ac:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069af:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b6:	e8 e6 cf ff ff       	call   c00039a1 <store_xdir>
c00069bb:	85 c0                	test   eax,eax
c00069bd:	75 1e                	jne    c00069dd <f_chmod+0xc3>
c00069bf:	eb 13                	jmp    c00069d4 <f_chmod+0xba>
c00069c1:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c5:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c8:	21 cb                	and    ebx,ecx
c00069ca:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cd:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d8:	e8 56 d9 ff ff       	call   c0004333 <sync_fs>
c00069dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e1:	83 ec 0c             	sub    esp,0xc
c00069e4:	56                   	push   esi
c00069e5:	e8 60 18 00 00       	call   c000824a <ff_memfree>
c00069ea:	83 c4 10             	add    esp,0x10
c00069ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f1:	83 c4 60             	add    esp,0x60
c00069f4:	5b                   	pop    ebx
c00069f5:	5e                   	pop    esi
c00069f6:	5f                   	pop    edi
c00069f7:	c3                   	ret    

c00069f8 <f_utime>:
c00069f8:	56                   	push   esi
c00069f9:	b9 02 00 00 00       	mov    ecx,0x2
c00069fe:	53                   	push   ebx
c00069ff:	83 ec 64             	sub    esp,0x64
c0006a02:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a06:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a0a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0e:	e8 bd ba ff ff       	call   c00024d0 <mount_volume>
c0006a13:	85 c0                	test   eax,eax
c0006a15:	0f 85 b5 00 00 00    	jne    c0006ad0 <f_utime+0xd8>
c0006a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a1f:	83 ec 0c             	sub    esp,0xc
c0006a22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a26:	68 60 04 00 00       	push   0x460
c0006a2b:	e8 04 18 00 00       	call   c0008234 <ff_memalloc>
c0006a30:	89 c3                	mov    ebx,eax
c0006a32:	83 c4 10             	add    esp,0x10
c0006a35:	b8 11 00 00 00       	mov    eax,0x11
c0006a3a:	85 db                	test   ebx,ebx
c0006a3c:	0f 84 8e 00 00 00    	je     c0006ad0 <f_utime+0xd8>
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a4f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a52:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5a:	e8 dd e1 ff ff       	call   c0004c3c <follow_path>
c0006a5f:	85 c0                	test   eax,eax
c0006a61:	75 59                	jne    c0006abc <f_utime+0xc4>
c0006a63:	b8 06 00 00 00       	mov    eax,0x6
c0006a68:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a6d:	75 4d                	jne    c0006abc <f_utime+0xc4>
c0006a6f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7b:	c1 e2 10             	shl    edx,0x10
c0006a7e:	09 ca                	or     edx,ecx
c0006a80:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a83:	75 1a                	jne    c0006a9f <f_utime+0xa7>
c0006a85:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a88:	83 c0 0c             	add    eax,0xc
c0006a8b:	e8 34 b0 ff ff       	call   c0001ac4 <st_dword>
c0006a90:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a94:	e8 08 cf ff ff       	call   c00039a1 <store_xdir>
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	75 1f                	jne    c0006abc <f_utime+0xc4>
c0006a9d:	eb 14                	jmp    c0006ab3 <f_utime+0xbb>
c0006a9f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa3:	83 c0 16             	add    eax,0x16
c0006aa6:	e8 19 b0 ff ff       	call   c0001ac4 <st_dword>
c0006aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aaf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab7:	e8 77 d8 ff ff       	call   c0004333 <sync_fs>
c0006abc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac0:	83 ec 0c             	sub    esp,0xc
c0006ac3:	53                   	push   ebx
c0006ac4:	e8 81 17 00 00       	call   c000824a <ff_memfree>
c0006ac9:	83 c4 10             	add    esp,0x10
c0006acc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad0:	83 c4 64             	add    esp,0x64
c0006ad3:	5b                   	pop    ebx
c0006ad4:	5e                   	pop    esi
c0006ad5:	c3                   	ret    

c0006ad6 <f_getlabel>:
c0006ad6:	55                   	push   ebp
c0006ad7:	31 c9                	xor    ecx,ecx
c0006ad9:	57                   	push   edi
c0006ada:	56                   	push   esi
c0006adb:	53                   	push   ebx
c0006adc:	83 ec 6c             	sub    esp,0x6c
c0006adf:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aea:	e8 e1 b9 ff ff       	call   c00024d0 <mount_volume>
c0006aef:	89 c3                	mov    ebx,eax
c0006af1:	85 c0                	test   eax,eax
c0006af3:	0f 85 73 01 00 00    	jne    c0006c6c <f_getlabel+0x196>
c0006af9:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b01:	0f 84 65 01 00 00    	je     c0006c6c <f_getlabel+0x196>
c0006b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0b:	31 d2                	xor    edx,edx
c0006b0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b11:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	e8 7b c4 ff ff       	call   c0002f9d <dir_sdi>
c0006b22:	89 c3                	mov    ebx,eax
c0006b24:	85 c0                	test   eax,eax
c0006b26:	0f 85 2f 01 00 00    	jne    c0006c5b <f_getlabel+0x185>
c0006b2c:	ba 01 00 00 00       	mov    edx,0x1
c0006b31:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b35:	e8 75 cc ff ff       	call   c00037af <dir_read>
c0006b3a:	89 c3                	mov    ebx,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x185>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x80>
c0006b4d:	31 f6                	xor    esi,esi
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x148>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 f6                	xor    esi,esi
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xdd>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 db ae ff ff       	call   c0001a4e <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xaf>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd7>
c0006b85:	89 e9                	mov    ecx,ebp
c0006b87:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8e:	c1 e1 10             	shl    ecx,0x10
c0006b91:	01 f2                	add    edx,esi
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 4c b0 ff ff       	call   c0001bee <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xdb>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c6                	add    esi,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x86>
c0006bb1:	31 f6                	xor    esi,esi
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe4>
c0006bb8:	31 f6                	xor    esi,esi
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bc5:	e9 a2 00 00 00       	jmp    c0006c6c <f_getlabel+0x196>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x10a>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	50                   	push   eax
c0006be1:	50                   	push   eax
c0006be2:	68 b5 01 00 00       	push   0x1b5
c0006be7:	0f b7 d2             	movzx  edx,dx
c0006bea:	52                   	push   edx
c0006beb:	e8 07 17 00 00       	call   c00082f7 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x168>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	b9 04 00 00 00       	mov    ecx,0x4
c0006c04:	01 f2                	add    edx,esi
c0006c06:	0f b7 c0             	movzx  eax,ax
c0006c09:	e8 e0 af ff ff       	call   c0001bee <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x168>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c6                	add    esi,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x16a>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 ea ae ff ff       	call   c0001b22 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x10a>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf4>
c0006c3e:	31 f6                	xor    esi,esi
c0006c40:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c47:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c4a:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c51:	74 19                	je     c0006c6c <f_getlabel+0x196>
c0006c53:	4e                   	dec    esi
c0006c54:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x171>
c0006c59:	eb 11                	jmp    c0006c6c <f_getlabel+0x196>
c0006c5b:	83 fb 04             	cmp    ebx,0x4
c0006c5e:	75 0c                	jne    c0006c6c <f_getlabel+0x196>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	31 db                	xor    ebx,ebx
c0006c69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6c:	85 db                	test   ebx,ebx
c0006c6e:	75 50                	jne    c0006cc0 <f_getlabel+0x1ea>
c0006c70:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c78:	74 46                	je     c0006cc0 <f_getlabel+0x1ea>
c0006c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c81:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c84:	e8 9c b5 ff ff       	call   c0002225 <move_window>
c0006c89:	89 c3                	mov    ebx,eax
c0006c8b:	85 c0                	test   eax,eax
c0006c8d:	75 31                	jne    c0006cc0 <f_getlabel+0x1ea>
c0006c8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c93:	b8 43 00 00 00       	mov    eax,0x43
c0006c98:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c9a:	80 f9 03             	cmp    cl,0x3
c0006c9d:	74 0f                	je     c0006cae <f_getlabel+0x1d8>
c0006c9f:	31 c0                	xor    eax,eax
c0006ca1:	80 f9 04             	cmp    cl,0x4
c0006ca4:	0f 94 c0             	sete   al
c0006ca7:	48                   	dec    eax
c0006ca8:	83 e0 c3             	and    eax,0xffffffc3
c0006cab:	83 c0 64             	add    eax,0x64
c0006cae:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cb2:	e8 a4 ad ff ff       	call   c0001a5b <ld_dword>
c0006cb7:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cbe:	89 07                	mov    DWORD PTR [edi],eax
c0006cc0:	83 c4 6c             	add    esp,0x6c
c0006cc3:	89 d8                	mov    eax,ebx
c0006cc5:	5b                   	pop    ebx
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	5d                   	pop    ebp
c0006cc9:	c3                   	ret    

c0006cca <f_setlabel>:
c0006cca:	56                   	push   esi
c0006ccb:	b9 02 00 00 00       	mov    ecx,0x2
c0006cd0:	53                   	push   ebx
c0006cd1:	83 ec 74             	sub    esp,0x74
c0006cd4:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdf:	e8 ec b7 ff ff       	call   c00024d0 <mount_volume>
c0006ce4:	89 c6                	mov    esi,eax
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	0f 85 41 02 00 00    	jne    c0006f2f <f_setlabel+0x265>
c0006cee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf5:	0f 85 8e 00 00 00    	jne    c0006d89 <f_setlabel+0xbf>
c0006cfb:	b9 16 00 00 00       	mov    ecx,0x16
c0006d00:	31 d2                	xor    edx,edx
c0006d02:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d06:	31 db                	xor    ebx,ebx
c0006d08:	e8 d5 ad ff ff       	call   c0001ae2 <mem_set>
c0006d0d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d14:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d17:	0f 86 0a 01 00 00    	jbe    c0006e27 <f_setlabel+0x15d>
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 ff ad ff ff       	call   c0001b28 <tchar2uni>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d30:	76 2a                	jbe    c0006d5c <f_setlabel+0x92>
c0006d32:	83 f8 ff             	cmp    eax,0xffffffff
c0006d35:	74 05                	je     c0006d3c <f_setlabel+0x72>
c0006d37:	83 fb 09             	cmp    ebx,0x9
c0006d3a:	76 0a                	jbe    c0006d46 <f_setlabel+0x7c>
c0006d3c:	be 06 00 00 00       	mov    esi,0x6
c0006d41:	e9 e9 01 00 00       	jmp    c0006f2f <f_setlabel+0x265>
c0006d46:	89 c2                	mov    edx,eax
c0006d48:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4c:	c1 ea 10             	shr    edx,0x10
c0006d4f:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d52:	01 c8                	add    eax,ecx
c0006d54:	43                   	inc    ebx
c0006d55:	e8 66 ad ff ff       	call   c0001ac0 <st_word>
c0006d5a:	eb 04                	jmp    c0006d60 <f_setlabel+0x96>
c0006d5c:	85 c0                	test   eax,eax
c0006d5e:	74 dc                	je     c0006d3c <f_setlabel+0x72>
c0006d60:	89 f2                	mov    edx,esi
c0006d62:	b8 77 04 02 c0       	mov    eax,0xc0020477
c0006d67:	e8 a4 ad ff ff       	call   c0001b10 <chk_chr>
c0006d6c:	85 c0                	test   eax,eax
c0006d6e:	75 cc                	jne    c0006d3c <f_setlabel+0x72>
c0006d70:	83 fb 0a             	cmp    ebx,0xa
c0006d73:	77 c7                	ja     c0006d3c <f_setlabel+0x72>
c0006d75:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d78:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7c:	0f b7 d6             	movzx  edx,si
c0006d7f:	01 c8                	add    eax,ecx
c0006d81:	43                   	inc    ebx
c0006d82:	e8 39 ad ff ff       	call   c0001ac0 <st_word>
c0006d87:	eb 84                	jmp    c0006d0d <f_setlabel+0x43>
c0006d89:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8e:	ba 20 00 00 00       	mov    edx,0x20
c0006d93:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d97:	31 db                	xor    ebx,ebx
c0006d99:	e8 44 ad ff ff       	call   c0001ae2 <mem_set>
c0006d9e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da5:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da8:	76 60                	jbe    c0006e0a <f_setlabel+0x140>
c0006daa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006db1:	e8 72 ad ff ff       	call   c0001b28 <tchar2uni>
c0006db6:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dbb:	0f 87 7b ff ff ff    	ja     c0006d3c <f_setlabel+0x72>
c0006dc1:	83 ec 0c             	sub    esp,0xc
c0006dc4:	50                   	push   eax
c0006dc5:	e8 9c 15 00 00       	call   c0008366 <ff_wtoupper>
c0006dca:	5a                   	pop    edx
c0006dcb:	59                   	pop    ecx
c0006dcc:	68 b5 01 00 00       	push   0x1b5
c0006dd1:	50                   	push   eax
c0006dd2:	e8 8a 14 00 00       	call   c0008261 <ff_uni2oem>
c0006dd7:	83 c4 10             	add    esp,0x10
c0006dda:	89 c6                	mov    esi,eax
c0006ddc:	66 85 c0             	test   ax,ax
c0006ddf:	0f 84 57 ff ff ff    	je     c0006d3c <f_setlabel+0x72>
c0006de5:	0f b7 d0             	movzx  edx,ax
c0006de8:	b8 70 04 02 c0       	mov    eax,0xc0020470
c0006ded:	e8 1e ad ff ff       	call   c0001b10 <chk_chr>
c0006df2:	85 c0                	test   eax,eax
c0006df4:	0f 85 42 ff ff ff    	jne    c0006d3c <f_setlabel+0x72>
c0006dfa:	66 81 fe ff 00       	cmp    si,0xff
c0006dff:	0f 87 14 01 00 00    	ja     c0006f19 <f_setlabel+0x24f>
c0006e05:	e9 fa 00 00 00       	jmp    c0006f04 <f_setlabel+0x23a>
c0006e0a:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0f:	0f 84 27 ff ff ff    	je     c0006d3c <f_setlabel+0x72>
c0006e15:	85 db                	test   ebx,ebx
c0006e17:	74 0e                	je     c0006e27 <f_setlabel+0x15d>
c0006e19:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1c:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e21:	75 04                	jne    c0006e27 <f_setlabel+0x15d>
c0006e23:	89 c3                	mov    ebx,eax
c0006e25:	eb ee                	jmp    c0006e15 <f_setlabel+0x14b>
c0006e27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e2b:	31 d2                	xor    edx,edx
c0006e2d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e31:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e35:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e3d:	e8 5b c1 ff ff       	call   c0002f9d <dir_sdi>
c0006e42:	89 c6                	mov    esi,eax
c0006e44:	85 c0                	test   eax,eax
c0006e46:	0f 85 e3 00 00 00    	jne    c0006f2f <f_setlabel+0x265>
c0006e4c:	ba 01 00 00 00       	mov    edx,0x1
c0006e51:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e55:	e8 55 c9 ff ff       	call   c00037af <dir_read>
c0006e5a:	85 c0                	test   eax,eax
c0006e5c:	75 21                	jne    c0006e7f <f_setlabel+0x1b5>
c0006e5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e62:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e66:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e69:	74 5d                	je     c0006ec8 <f_setlabel+0x1fe>
c0006e6b:	85 db                	test   ebx,ebx
c0006e6d:	74 0b                	je     c0006e7a <f_setlabel+0x1b0>
c0006e6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e74:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e78:	eb 70                	jmp    c0006eea <f_setlabel+0x220>
c0006e7a:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7d:	eb 70                	jmp    c0006eef <f_setlabel+0x225>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 7c                	jne    c0006f00 <f_setlabel+0x236>
c0006e84:	85 db                	test   ebx,ebx
c0006e86:	0f 84 a3 00 00 00    	je     c0006f2f <f_setlabel+0x265>
c0006e8c:	ba 01 00 00 00       	mov    edx,0x1
c0006e91:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e95:	e8 8f ca ff ff       	call   c0003929 <dir_alloc>
c0006e9a:	89 c6                	mov    esi,eax
c0006e9c:	85 c0                	test   eax,eax
c0006e9e:	0f 85 8b 00 00 00    	jne    c0006f2f <f_setlabel+0x265>
c0006ea4:	31 d2                	xor    edx,edx
c0006ea6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eaa:	b9 20 00 00 00       	mov    ecx,0x20
c0006eaf:	e8 2e ac ff ff       	call   c0001ae2 <mem_set>
c0006eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	75 18                	jne    c0006ed9 <f_setlabel+0x20f>
c0006ec1:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec8:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ecb:	b9 16 00 00 00       	mov    ecx,0x16
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	83 c0 02             	add    eax,0x2
c0006ed7:	eb 9b                	jmp    c0006e74 <f_setlabel+0x1aa>
c0006ed9:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eea:	e8 de ab ff ff       	call   c0001acd <mem_cpy>
c0006eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efb:	e8 33 d4 ff ff       	call   c0004333 <sync_fs>
c0006f00:	89 c6                	mov    esi,eax
c0006f02:	eb 2b                	jmp    c0006f2f <f_setlabel+0x265>
c0006f04:	83 fb 0a             	cmp    ebx,0xa
c0006f07:	0f 87 2f fe ff ff    	ja     c0006d3c <f_setlabel+0x72>
c0006f0d:	89 f0                	mov    eax,esi
c0006f0f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f13:	43                   	inc    ebx
c0006f14:	e9 85 fe ff ff       	jmp    c0006d9e <f_setlabel+0xd4>
c0006f19:	83 fb 09             	cmp    ebx,0x9
c0006f1c:	0f 87 1a fe ff ff    	ja     c0006d3c <f_setlabel+0x72>
c0006f22:	89 f0                	mov    eax,esi
c0006f24:	66 c1 e8 08          	shr    ax,0x8
c0006f28:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2c:	43                   	inc    ebx
c0006f2d:	eb de                	jmp    c0006f0d <f_setlabel+0x243>
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	89 f0                	mov    eax,esi
c0006f34:	5b                   	pop    ebx
c0006f35:	5e                   	pop    esi
c0006f36:	c3                   	ret    

c0006f37 <f_forward>:
c0006f37:	55                   	push   ebp
c0006f38:	57                   	push   edi
c0006f39:	56                   	push   esi
c0006f3a:	53                   	push   ebx
c0006f3b:	83 ec 2c             	sub    esp,0x2c
c0006f3e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f42:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f46:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f50:	89 d8                	mov    eax,ebx
c0006f52:	e8 f3 b1 ff ff       	call   c000214a <validate>
c0006f57:	89 c5                	mov    ebp,eax
c0006f59:	85 c0                	test   eax,eax
c0006f5b:	0f 85 aa 01 00 00    	jne    c000710b <f_forward+0x1d4>
c0006f61:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f65:	85 ed                	test   ebp,ebp
c0006f67:	0f 85 9e 01 00 00    	jne    c000710b <f_forward+0x1d4>
c0006f6d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f71:	0f 84 8f 01 00 00    	je     c0007106 <f_forward+0x1cf>
c0006f77:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f7a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f80:	bf 00 00 00 00       	mov    edi,0x0
c0006f85:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f88:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8c:	89 d1                	mov    ecx,edx
c0006f8e:	19 f9                	sbb    ecx,edi
c0006f90:	0f 83 cf 00 00 00    	jae    c0007065 <f_forward+0x12e>
c0006f96:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f9a:	e9 c6 00 00 00       	jmp    c0007065 <f_forward+0x12e>
c0006f9f:	50                   	push   eax
c0006fa0:	50                   	push   eax
c0006fa1:	6a 00                	push   0x0
c0006fa3:	6a 00                	push   0x0
c0006fa5:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa9:	83 c4 10             	add    esp,0x10
c0006fac:	85 c0                	test   eax,eax
c0006fae:	0f 84 57 01 00 00    	je     c000710b <f_forward+0x1d4>
c0006fb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fbb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbe:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc2:	89 d7                	mov    edi,edx
c0006fc4:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc7:	89 c6                	mov    esi,eax
c0006fc9:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcd:	21 ce                	and    esi,ecx
c0006fcf:	89 c1                	mov    ecx,eax
c0006fd1:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd7:	0f 84 98 00 00 00    	je     c0007075 <f_forward+0x13e>
c0006fdd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fe1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe4:	89 c8                	mov    eax,ecx
c0006fe6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fea:	e8 f8 ac ff ff       	call   c0001ce7 <clst2sect>
c0006fef:	89 d7                	mov    edi,edx
c0006ff1:	09 c7                	or     edi,eax
c0006ff3:	0f 84 9e 00 00 00    	je     c0007097 <f_forward+0x160>
c0006ff9:	31 ff                	xor    edi,edi
c0006ffb:	01 c6                	add    esi,eax
c0006ffd:	11 d7                	adc    edi,edx
c0006fff:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007002:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007005:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007009:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000700c:	39 fa                	cmp    edx,edi
c000700e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007012:	0f 85 a2 00 00 00    	jne    c00070ba <f_forward+0x183>
c0007018:	39 f0                	cmp    eax,esi
c000701a:	0f 85 9a 00 00 00    	jne    c00070ba <f_forward+0x183>
c0007020:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007023:	ba 00 02 00 00       	mov    edx,0x200
c0007028:	25 ff 01 00 00       	and    eax,0x1ff
c000702d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007031:	29 c2                	sub    edx,eax
c0007033:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007036:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007039:	39 d1                	cmp    ecx,edx
c000703b:	76 02                	jbe    c000703f <f_forward+0x108>
c000703d:	89 d1                	mov    ecx,edx
c000703f:	52                   	push   edx
c0007040:	8d 73 50             	lea    esi,[ebx+0x50]
c0007043:	52                   	push   edx
c0007044:	01 c6                	add    esi,eax
c0007046:	51                   	push   ecx
c0007047:	56                   	push   esi
c0007048:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704c:	83 c4 10             	add    esp,0x10
c000704f:	85 c0                	test   eax,eax
c0007051:	74 44                	je     c0007097 <f_forward+0x160>
c0007053:	31 ff                	xor    edi,edi
c0007055:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007058:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000705b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705f:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007063:	01 07                	add    DWORD PTR [edi],eax
c0007065:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000706a:	0f 85 2f ff ff ff    	jne    c0006f9f <f_forward+0x68>
c0007070:	e9 96 00 00 00       	jmp    c000710b <f_forward+0x1d4>
c0007075:	85 f6                	test   esi,esi
c0007077:	0f 85 60 ff ff ff    	jne    c0006fdd <f_forward+0xa6>
c000707d:	89 d7                	mov    edi,edx
c000707f:	09 c7                	or     edi,eax
c0007081:	75 05                	jne    c0007088 <f_forward+0x151>
c0007083:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007086:	eb 0a                	jmp    c0007092 <f_forward+0x15b>
c0007088:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000708b:	89 d8                	mov    eax,ebx
c000708d:	e8 15 bd ff ff       	call   c0002da7 <get_fat>
c0007092:	83 f8 01             	cmp    eax,0x1
c0007095:	77 0b                	ja     c00070a2 <f_forward+0x16b>
c0007097:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000709b:	bd 02 00 00 00       	mov    ebp,0x2
c00070a0:	eb 69                	jmp    c000710b <f_forward+0x1d4>
c00070a2:	83 f8 ff             	cmp    eax,0xffffffff
c00070a5:	75 0b                	jne    c00070b2 <f_forward+0x17b>
c00070a7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070ab:	bd 01 00 00 00       	mov    ebp,0x1
c00070b0:	eb 59                	jmp    c000710b <f_forward+0x1d4>
c00070b2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b5:	e9 23 ff ff ff       	jmp    c0006fdd <f_forward+0xa6>
c00070ba:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070be:	79 20                	jns    c00070e0 <f_forward+0x1a9>
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	6a 01                	push   0x1
c00070c5:	52                   	push   edx
c00070c6:	50                   	push   eax
c00070c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070cb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cf:	50                   	push   eax
c00070d0:	e8 44 a9 ff ff       	call   c0001a19 <disk_write>
c00070d5:	83 c4 20             	add    esp,0x20
c00070d8:	85 c0                	test   eax,eax
c00070da:	75 cb                	jne    c00070a7 <f_forward+0x170>
c00070dc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070e0:	83 ec 0c             	sub    esp,0xc
c00070e3:	6a 01                	push   0x1
c00070e5:	57                   	push   edi
c00070e6:	56                   	push   esi
c00070e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f3:	50                   	push   eax
c00070f4:	e8 0a a9 ff ff       	call   c0001a03 <disk_read>
c00070f9:	83 c4 20             	add    esp,0x20
c00070fc:	85 c0                	test   eax,eax
c00070fe:	0f 84 1c ff ff ff    	je     c0007020 <f_forward+0xe9>
c0007104:	eb a1                	jmp    c00070a7 <f_forward+0x170>
c0007106:	bd 07 00 00 00       	mov    ebp,0x7
c000710b:	83 c4 2c             	add    esp,0x2c
c000710e:	89 e8                	mov    eax,ebp
c0007110:	5b                   	pop    ebx
c0007111:	5e                   	pop    esi
c0007112:	5f                   	pop    edi
c0007113:	5d                   	pop    ebp
c0007114:	c3                   	ret    

c0007115 <f_mkfs>:
c0007115:	55                   	push   ebp
c0007116:	57                   	push   edi
c0007117:	56                   	push   esi
c0007118:	53                   	push   ebx
c0007119:	bb 0b 00 00 00       	mov    ebx,0xb
c000711e:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007124:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000712b:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007132:	e8 f9 ae ff ff       	call   c0002030 <get_ldnumber>
c0007137:	85 c0                	test   eax,eax
c0007139:	0f 88 e8 10 00 00    	js     c0008227 <f_mkfs+0x1112>
c000713f:	8b 14 85 00 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb900]
c0007146:	85 d2                	test   edx,edx
c0007148:	74 03                	je     c000714d <f_mkfs+0x38>
c000714a:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714d:	85 f6                	test   esi,esi
c000714f:	75 05                	jne    c0007156 <f_mkfs+0x41>
c0007151:	be 60 04 02 c0       	mov    esi,0xc0020460
c0007156:	0f b6 c0             	movzx  eax,al
c0007159:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000715d:	83 ec 0c             	sub    esp,0xc
c0007160:	bb 03 00 00 00       	mov    ebx,0x3
c0007165:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007169:	e8 92 a8 ff ff       	call   c0001a00 <disk_initialize>
c000716e:	83 c4 10             	add    esp,0x10
c0007171:	a8 01                	test   al,0x1
c0007173:	0f 85 ae 10 00 00    	jne    c0008227 <f_mkfs+0x1112>
c0007179:	bb 0a 00 00 00       	mov    ebx,0xa
c000717e:	a8 04                	test   al,0x4
c0007180:	0f 85 a1 10 00 00    	jne    c0008227 <f_mkfs+0x1112>
c0007186:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007189:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718d:	85 c0                	test   eax,eax
c000718f:	75 20                	jne    c00071b1 <f_mkfs+0x9c>
c0007191:	51                   	push   ecx
c0007192:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007196:	50                   	push   eax
c0007197:	6a 03                	push   0x3
c0007199:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719d:	e8 8d a8 ff ff       	call   c0001a2f <disk_ioctl>
c00071a2:	83 c4 10             	add    esp,0x10
c00071a5:	85 c0                	test   eax,eax
c00071a7:	74 08                	je     c00071b1 <f_mkfs+0x9c>
c00071a9:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071b1:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b5:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b8:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bd:	77 04                	ja     c00071c3 <f_mkfs+0xae>
c00071bf:	85 c2                	test   edx,eax
c00071c1:	74 08                	je     c00071cb <f_mkfs+0xb6>
c00071c3:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071cb:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071ce:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071d2:	48                   	dec    eax
c00071d3:	3c 01                	cmp    al,0x1
c00071d5:	76 05                	jbe    c00071dc <f_mkfs+0xc7>
c00071d7:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071dc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e3:	48                   	dec    eax
c00071e4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e9:	77 07                	ja     c00071f2 <f_mkfs+0xdd>
c00071eb:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071f0:	74 08                	je     c00071fa <f_mkfs+0xe5>
c00071f2:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071fa:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fd:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007203:	77 07                	ja     c000720c <f_mkfs+0xf7>
c0007205:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007208:	85 d8                	test   eax,ebx
c000720a:	74 02                	je     c000720e <f_mkfs+0xf9>
c000720c:	31 db                	xor    ebx,ebx
c000720e:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007219:	77 0a                	ja     c0007225 <f_mkfs+0x110>
c000721b:	bb 11 00 00 00       	mov    ebx,0x11
c0007220:	e9 02 10 00 00       	jmp    c0008227 <f_mkfs+0x1112>
c0007225:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722c:	8b 36                	mov    esi,DWORD PTR [esi]
c000722e:	85 ed                	test   ebp,ebp
c0007230:	75 1e                	jne    c0007250 <f_mkfs+0x13b>
c0007232:	83 ec 0c             	sub    esp,0xc
c0007235:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723c:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007241:	50                   	push   eax
c0007242:	e8 ed 0f 00 00       	call   c0008234 <ff_memalloc>
c0007247:	83 c4 10             	add    esp,0x10
c000724a:	89 c5                	mov    ebp,eax
c000724c:	85 c0                	test   eax,eax
c000724e:	74 cb                	je     c000721b <f_mkfs+0x106>
c0007250:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007258:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007260:	52                   	push   edx
c0007261:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007265:	50                   	push   eax
c0007266:	6a 01                	push   0x1
c0007268:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726c:	e8 be a7 ff ff       	call   c0001a2f <disk_ioctl>
c0007271:	83 c4 10             	add    esp,0x10
c0007274:	85 c0                	test   eax,eax
c0007276:	0f 85 46 0f 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c000727c:	89 f1                	mov    ecx,esi
c000727e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007286:	83 e1 0f             	and    ecx,0xf
c0007289:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007291:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007295:	83 e6 08             	and    esi,0x8
c0007298:	75 56                	jne    c00072f0 <f_mkfs+0x1db>
c000729a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a2:	83 ff 00             	cmp    edi,0x0
c00072a5:	76 20                	jbe    c00072c7 <f_mkfs+0x1b2>
c00072a7:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072ac:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b2:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072ba:	83 d7 ff             	adc    edi,0xffffffff
c00072bd:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072c1:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c5:	eb 21                	jmp    c00072e8 <f_mkfs+0x1d3>
c00072c7:	ba 3f 00 00 00       	mov    edx,0x3f
c00072cc:	39 f2                	cmp    edx,esi
c00072ce:	19 f8                	sbb    eax,edi
c00072d0:	73 1e                	jae    c00072f0 <f_mkfs+0x1db>
c00072d2:	83 c6 c1             	add    esi,0xffffffc1
c00072d5:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072dd:	83 d7 ff             	adc    edi,0xffffffff
c00072e0:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e4:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072f0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00072fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	31 c0                	xor    eax,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	89 c7                	mov    edi,eax
c000730b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730f:	0f 83 c1 0a 00 00    	jae    c0007dd6 <f_mkfs+0xcc1>
c0007315:	89 df                	mov    edi,ebx
c0007317:	c1 ef 09             	shr    edi,0x9
c000731a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731e:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007325:	c1 ef 09             	shr    edi,0x9
c0007328:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732d:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007331:	74 29                	je     c000735c <f_mkfs+0x247>
c0007333:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007338:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000733e:	0f 97 c2             	seta   dl
c0007341:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007344:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007348:	0f 92 c0             	setb   al
c000734b:	08 c2                	or     dl,al
c000734d:	75 5b                	jne    c00073aa <f_mkfs+0x295>
c000734f:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007353:	83 e0 07             	and    eax,0x7
c0007356:	3c 04                	cmp    al,0x4
c0007358:	74 50                	je     c00073aa <f_mkfs+0x295>
c000735a:	eb 1b                	jmp    c0007377 <f_mkfs+0x262>
c000735c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007361:	0f 87 6f 0a 00 00    	ja     c0007dd6 <f_mkfs+0xcc1>
c0007367:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736d:	76 08                	jbe    c0007377 <f_mkfs+0x262>
c000736f:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007377:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000737b:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737f:	83 e0 01             	and    eax,0x1
c0007382:	80 e1 02             	and    cl,0x2
c0007385:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007389:	74 0d                	je     c0007398 <f_mkfs+0x283>
c000738b:	84 c0                	test   al,al
c000738d:	0f 84 4f 09 00 00    	je     c0007ce2 <f_mkfs+0xbcd>
c0007393:	e9 0e 08 00 00       	jmp    c0007ba6 <f_mkfs+0xa91>
c0007398:	bb 13 00 00 00       	mov    ebx,0x13
c000739d:	84 c0                	test   al,al
c000739f:	0f 85 01 08 00 00    	jne    c0007ba6 <f_mkfs+0xa91>
c00073a5:	e9 35 0e 00 00       	jmp    c00081df <f_mkfs+0x10ca>
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	31 c0                	xor    eax,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	89 c7                	mov    edi,eax
c00073b6:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ba:	0f 83 16 0a 00 00    	jae    c0007dd6 <f_mkfs+0xcc1>
c00073c0:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c6:	77 39                	ja     c0007401 <f_mkfs+0x2ec>
c00073c8:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cd:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073dc:	73 08                	jae    c00073e6 <f_mkfs+0x2d1>
c00073de:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e6:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073eb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ee:	b8 00 00 00 00       	mov    eax,0x0
c00073f3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f7:	73 08                	jae    c0007401 <f_mkfs+0x2ec>
c00073f9:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007405:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007409:	83 c0 20             	add    eax,0x20
c000740c:	83 d2 00             	adc    edx,0x0
c000740f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007413:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007417:	31 d2                	xor    edx,edx
c0007419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000741d:	52                   	push   edx
c000741e:	50                   	push   eax
c000741f:	31 ff                	xor    edi,edi
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 be 80 01 00       	call   c001f4ec <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	89 fb                	mov    ebx,edi
c0007444:	83 c1 ff             	add    ecx,0xffffffff
c0007447:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000744b:	83 d3 ff             	adc    ebx,0xffffffff
c000744e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007452:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007456:	31 d2                	xor    edx,edx
c0007458:	01 c8                	add    eax,ecx
c000745a:	11 da                	adc    edx,ebx
c000745c:	89 c1                	mov    ecx,eax
c000745e:	f7 de                	neg    esi
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	21 f1                	and    ecx,esi
c0007465:	f7 df                	neg    edi
c0007467:	89 d0                	mov    eax,edx
c0007469:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000746d:	21 f8                	and    eax,edi
c000746f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007473:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007477:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000747b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007483:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007487:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000748a:	0f ac d0 01          	shrd   eax,edx,0x1
c000748e:	d1 ea                	shr    edx,1
c0007490:	89 df                	mov    edi,ebx
c0007492:	39 c1                	cmp    ecx,eax
c0007494:	19 d7                	sbb    edi,edx
c0007496:	0f 83 3a 09 00 00    	jae    c0007dd6 <f_mkfs+0xcc1>
c000749c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a0:	31 d2                	xor    edx,edx
c00074a2:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074aa:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074b1:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b5:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074c1:	83 f8 0f             	cmp    eax,0xf
c00074c4:	0f 86 0c 09 00 00    	jbe    c0007dd6 <f_mkfs+0xcc1>
c00074ca:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d2:	0f 87 fe 08 00 00    	ja     c0007dd6 <f_mkfs+0xcc1>
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	31 d2                	xor    edx,edx
c00074de:	83 c0 07             	add    eax,0x7
c00074e1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e9:	c1 e8 03             	shr    eax,0x3
c00074ec:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074f4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074fc:	c1 e0 09             	shl    eax,0x9
c00074ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007506:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000750a:	48                   	dec    eax
c000750b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750f:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007513:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007517:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007526:	31 d2                	xor    edx,edx
c0007528:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007531:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007535:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007539:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000753d:	31 ff                	xor    edi,edi
c000753f:	31 f6                	xor    esi,esi
c0007541:	31 db                	xor    ebx,ebx
c0007543:	85 ff                	test   edi,edi
c0007545:	74 05                	je     c000754c <f_mkfs+0x437>
c0007547:	4f                   	dec    edi
c0007548:	74 44                	je     c000758e <f_mkfs+0x479>
c000754a:	eb 4f                	jmp    c000759b <f_mkfs+0x486>
c000754c:	83 ec 0c             	sub    esp,0xc
c000754f:	0f b7 c3             	movzx  eax,bx
c0007552:	50                   	push   eax
c0007553:	e8 0e 0e 00 00       	call   c0008366 <ff_wtoupper>
c0007558:	83 c4 10             	add    esp,0x10
c000755b:	89 c1                	mov    ecx,eax
c000755d:	66 39 c3             	cmp    bx,ax
c0007560:	8d 53 01             	lea    edx,[ebx+0x1]
c0007563:	75 3e                	jne    c00075a3 <f_mkfs+0x48e>
c0007565:	be 01 00 00 00       	mov    esi,0x1
c000756a:	89 df                	mov    edi,ebx
c000756c:	66 01 f7             	add    di,si
c000756f:	75 07                	jne    c0007578 <f_mkfs+0x463>
c0007571:	83 fe 7f             	cmp    esi,0x7f
c0007574:	77 31                	ja     c00075a7 <f_mkfs+0x492>
c0007576:	eb 16                	jmp    c000758e <f_mkfs+0x479>
c0007578:	83 ec 0c             	sub    esp,0xc
c000757b:	0f b7 ff             	movzx  edi,di
c000757e:	57                   	push   edi
c000757f:	e8 e2 0d 00 00       	call   c0008366 <ff_wtoupper>
c0007584:	83 c4 10             	add    esp,0x10
c0007587:	39 c7                	cmp    edi,eax
c0007589:	75 e6                	jne    c0007571 <f_mkfs+0x45c>
c000758b:	46                   	inc    esi
c000758c:	eb dc                	jmp    c000756a <f_mkfs+0x455>
c000758e:	31 c0                	xor    eax,eax
c0007590:	4e                   	dec    esi
c0007591:	0f 95 c0             	setne  al
c0007594:	89 d9                	mov    ecx,ebx
c0007596:	89 c7                	mov    edi,eax
c0007598:	43                   	inc    ebx
c0007599:	eb 14                	jmp    c00075af <f_mkfs+0x49a>
c000759b:	89 f1                	mov    ecx,esi
c000759d:	01 f3                	add    ebx,esi
c000759f:	31 ff                	xor    edi,edi
c00075a1:	eb 0c                	jmp    c00075af <f_mkfs+0x49a>
c00075a3:	89 d3                	mov    ebx,edx
c00075a5:	eb 08                	jmp    c00075af <f_mkfs+0x49a>
c00075a7:	bf 02 00 00 00       	mov    edi,0x2
c00075ac:	83 c9 ff             	or     ecx,0xffffffff
c00075af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b2:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ba:	0f b6 c1             	movzx  eax,cl
c00075bd:	e8 87 a9 ff ff       	call   c0001f49 <xsum32>
c00075c2:	66 c1 e9 08          	shr    cx,0x8
c00075c6:	89 c2                	mov    edx,eax
c00075c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cb:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075cf:	0f b7 c1             	movzx  eax,cx
c00075d2:	e8 72 a9 ff ff       	call   c0001f49 <xsum32>
c00075d7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075dc:	66 85 db             	test   bx,bx
c00075df:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e3:	74 1f                	je     c0007604 <f_mkfs+0x4ef>
c00075e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ef:	83 c0 02             	add    eax,0x2
c00075f2:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f8:	39 c2                	cmp    edx,eax
c00075fa:	74 08                	je     c0007604 <f_mkfs+0x4ef>
c00075fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ff:	e9 3f ff ff ff       	jmp    c0007543 <f_mkfs+0x42e>
c0007604:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007607:	83 ec 0c             	sub    esp,0xc
c000760a:	05 01 02 00 00       	add    eax,0x201
c000760f:	c1 e8 09             	shr    eax,0x9
c0007612:	50                   	push   eax
c0007613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000761b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000761f:	55                   	push   ebp
c0007620:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007624:	e8 f0 a3 ff ff       	call   c0001a19 <disk_write>
c0007629:	83 c4 20             	add    esp,0x20
c000762c:	85 c0                	test   eax,eax
c000762e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007631:	0f 85 8b 0b 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007637:	89 d0                	mov    eax,edx
c0007639:	31 d2                	xor    edx,edx
c000763b:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c000763f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007643:	66 85 db             	test   bx,bx
c0007646:	74 04                	je     c000764c <f_mkfs+0x537>
c0007648:	31 c0                	xor    eax,eax
c000764a:	eb b0                	jmp    c00075fc <f_mkfs+0x4e7>
c000764c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007650:	31 d2                	xor    edx,edx
c0007652:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007656:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000765a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000765e:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007665:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007669:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007673:	8d 70 01             	lea    esi,[eax+0x1]
c0007676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000767e:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007689:	c1 eb 09             	shr    ebx,0x9
c000768c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007690:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007694:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769b:	31 d2                	xor    edx,edx
c000769d:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a5:	89 c1                	mov    ecx,eax
c00076a7:	89 e8                	mov    eax,ebp
c00076a9:	e8 34 a4 ff ff       	call   c0001ae2 <mem_set>
c00076ae:	31 c0                	xor    eax,eax
c00076b0:	83 fe 07             	cmp    esi,0x7
c00076b3:	76 10                	jbe    c00076c5 <f_mkfs+0x5b0>
c00076b5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b8:	76 0b                	jbe    c00076c5 <f_mkfs+0x5b0>
c00076ba:	40                   	inc    eax
c00076bb:	83 ee 08             	sub    esi,0x8
c00076be:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c3:	eb eb                	jmp    c00076b0 <f_mkfs+0x59b>
c00076c5:	b2 01                	mov    dl,0x1
c00076c7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cb:	85 f6                	test   esi,esi
c00076cd:	74 0c                	je     c00076db <f_mkfs+0x5c6>
c00076cf:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d2:	76 07                	jbe    c00076db <f_mkfs+0x5c6>
c00076d4:	08 11                	or     BYTE PTR [ecx],dl
c00076d6:	4e                   	dec    esi
c00076d7:	01 d2                	add    edx,edx
c00076d9:	eb f0                	jmp    c00076cb <f_mkfs+0x5b6>
c00076db:	89 df                	mov    edi,ebx
c00076dd:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e1:	76 04                	jbe    c00076e7 <f_mkfs+0x5d2>
c00076e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	57                   	push   edi
c00076eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f3:	55                   	push   ebp
c00076f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f8:	e8 1c a3 ff ff       	call   c0001a19 <disk_write>
c00076fd:	83 c4 20             	add    esp,0x20
c0007700:	85 c0                	test   eax,eax
c0007702:	0f 85 ba 0a 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007708:	31 d2                	xor    edx,edx
c000770a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007712:	29 fb                	sub    ebx,edi
c0007714:	0f 85 7a ff ff ff    	jne    c0007694 <f_mkfs+0x57f>
c000771a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007726:	31 f6                	xor    esi,esi
c0007728:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000772c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772f:	31 d2                	xor    edx,edx
c0007731:	89 e8                	mov    eax,ebp
c0007733:	e8 aa a3 ff ff       	call   c0001ae2 <mem_set>
c0007738:	31 c9                	xor    ecx,ecx
c000773a:	85 db                	test   ebx,ebx
c000773c:	75 40                	jne    c000777e <f_mkfs+0x669>
c000773e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007743:	89 e8                	mov    eax,ebp
c0007745:	e8 7a a3 ff ff       	call   c0001ac4 <st_dword>
c000774a:	8d 45 04             	lea    eax,[ebp+0x4]
c000774d:	83 ca ff             	or     edx,0xffffffff
c0007750:	bb 02 00 00 00       	mov    ebx,0x2
c0007755:	e8 6a a3 ff ff       	call   c0001ac4 <st_dword>
c000775a:	b9 08 00 00 00       	mov    ecx,0x8
c000775f:	eb 1d                	jmp    c000777e <f_mkfs+0x669>
c0007761:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007764:	76 3b                	jbe    c00077a1 <f_mkfs+0x68c>
c0007766:	43                   	inc    ebx
c0007767:	83 fe 01             	cmp    esi,0x1
c000776a:	89 da                	mov    edx,ebx
c000776c:	77 03                	ja     c0007771 <f_mkfs+0x65c>
c000776e:	83 ca ff             	or     edx,0xffffffff
c0007771:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007775:	4e                   	dec    esi
c0007776:	e8 49 a3 ff ff       	call   c0001ac4 <st_dword>
c000777b:	83 c1 04             	add    ecx,0x4
c000777e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007782:	85 f6                	test   esi,esi
c0007784:	75 db                	jne    c0007761 <f_mkfs+0x64c>
c0007786:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778b:	77 14                	ja     c00077a1 <f_mkfs+0x68c>
c000778d:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007794:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007798:	85 f6                	test   esi,esi
c000779a:	74 05                	je     c00077a1 <f_mkfs+0x68c>
c000779c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000779f:	77 dd                	ja     c000777e <f_mkfs+0x669>
c00077a1:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a9:	39 cf                	cmp    edi,ecx
c00077ab:	76 02                	jbe    c00077af <f_mkfs+0x69a>
c00077ad:	89 cf                	mov    edi,ecx
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	57                   	push   edi
c00077b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077bb:	55                   	push   ebp
c00077bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c0:	e8 54 a2 ff ff       	call   c0001a19 <disk_write>
c00077c5:	83 c4 20             	add    esp,0x20
c00077c8:	85 c0                	test   eax,eax
c00077ca:	0f 85 f2 09 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c00077d0:	31 d2                	xor    edx,edx
c00077d2:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077d6:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077da:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077de:	0f 85 48 ff ff ff    	jne    c000772c <f_mkfs+0x617>
c00077e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e7:	31 d2                	xor    edx,edx
c00077e9:	89 e8                	mov    eax,ebp
c00077eb:	31 ff                	xor    edi,edi
c00077ed:	e8 f0 a2 ff ff       	call   c0001ae2 <mem_set>
c00077f2:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f5:	ba 02 00 00 00       	mov    edx,0x2
c00077fa:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077fe:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007802:	e8 bd a2 ff ff       	call   c0001ac4 <st_dword>
c0007807:	8d 45 38             	lea    eax,[ebp+0x38]
c000780a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780e:	e8 b1 a2 ff ff       	call   c0001ac4 <st_dword>
c0007813:	8d 45 44             	lea    eax,[ebp+0x44]
c0007816:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781e:	e8 a1 a2 ff ff       	call   c0001ac4 <st_dword>
c0007823:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007827:	8d 45 54             	lea    eax,[ebp+0x54]
c000782a:	83 c2 02             	add    edx,0x2
c000782d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007831:	e8 8e a2 ff ff       	call   c0001ac4 <st_dword>
c0007836:	8d 45 58             	lea    eax,[ebp+0x58]
c0007839:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007841:	e8 7e a2 ff ff       	call   c0001ac4 <st_dword>
c0007846:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784a:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000784f:	89 c6                	mov    esi,eax
c0007851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007855:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007859:	89 04 24             	mov    DWORD PTR [esp],eax
c000785c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007860:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007863:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007867:	39 cb                	cmp    ebx,ecx
c0007869:	76 02                	jbe    c000786d <f_mkfs+0x758>
c000786b:	89 cb                	mov    ebx,ecx
c000786d:	83 ec 0c             	sub    esp,0xc
c0007870:	53                   	push   ebx
c0007871:	57                   	push   edi
c0007872:	56                   	push   esi
c0007873:	55                   	push   ebp
c0007874:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007878:	e8 9c a1 ff ff       	call   c0001a19 <disk_write>
c000787d:	83 c4 20             	add    esp,0x20
c0007880:	85 c0                	test   eax,eax
c0007882:	0f 85 3a 09 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007888:	31 d2                	xor    edx,edx
c000788a:	b9 00 02 00 00       	mov    ecx,0x200
c000788f:	89 e8                	mov    eax,ebp
c0007891:	e8 4c a2 ff ff       	call   c0001ae2 <mem_set>
c0007896:	31 d2                	xor    edx,edx
c0007898:	01 de                	add    esi,ebx
c000789a:	11 d7                	adc    edi,edx
c000789c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000789f:	75 bf                	jne    c0007860 <f_mkfs+0x74b>
c00078a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b1:	b9 00 02 00 00       	mov    ecx,0x200
c00078b6:	31 d2                	xor    edx,edx
c00078b8:	89 e8                	mov    eax,ebp
c00078ba:	e8 23 a2 ff ff       	call   c0001ae2 <mem_set>
c00078bf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c4:	ba 40 05 02 c0       	mov    edx,0xc0020540
c00078c9:	89 e8                	mov    eax,ebp
c00078cb:	e8 fd a1 ff ff       	call   c0001acd <mem_cpy>
c00078d0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078db:	e8 e7 a1 ff ff       	call   c0001ac7 <st_qword>
c00078e0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078eb:	e8 d7 a1 ff ff       	call   c0001ac7 <st_qword>
c00078f0:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f3:	ba 20 00 00 00       	mov    edx,0x20
c00078f8:	e8 c7 a1 ff ff       	call   c0001ac4 <st_dword>
c00078fd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007901:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007905:	e8 ba a1 ff ff       	call   c0001ac4 <st_dword>
c000790a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007912:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007916:	e8 a9 a1 ff ff       	call   c0001ac4 <st_dword>
c000791b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007922:	e8 9d a1 ff ff       	call   c0001ac4 <st_dword>
c0007927:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000792b:	8d 50 02             	lea    edx,[eax+0x2]
c000792e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007931:	e8 8e a1 ff ff       	call   c0001ac4 <st_dword>
c0007936:	8d 45 64             	lea    eax,[ebp+0x64]
c0007939:	ba 00 00 21 50       	mov    edx,0x50210000
c000793e:	e8 81 a1 ff ff       	call   c0001ac4 <st_dword>
c0007943:	8d 45 68             	lea    eax,[ebp+0x68]
c0007946:	ba 00 01 00 00       	mov    edx,0x100
c000794b:	e8 70 a1 ff ff       	call   c0001ac0 <st_word>
c0007950:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007954:	b8 0a 00 00 00       	mov    eax,0xa
c0007959:	48                   	dec    eax
c000795a:	74 05                	je     c0007961 <f_mkfs+0x84c>
c000795c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000795f:	eb f8                	jmp    c0007959 <f_mkfs+0x844>
c0007961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007965:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007969:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007971:	74 05                	je     c0007978 <f_mkfs+0x863>
c0007973:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007976:	eb f5                	jmp    c000796d <f_mkfs+0x858>
c0007978:	8d 45 78             	lea    eax,[ebp+0x78]
c000797b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007980:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007986:	31 db                	xor    ebx,ebx
c0007988:	e8 33 a1 ff ff       	call   c0001ac0 <st_word>
c000798d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007993:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007998:	89 04 24             	mov    DWORD PTR [esp],eax
c000799b:	e8 20 a1 ff ff       	call   c0001ac0 <st_word>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a5:	83 f8 01             	cmp    eax,0x1
c00079a8:	76 13                	jbe    c00079bd <f_mkfs+0x8a8>
c00079aa:	83 f9 70             	cmp    ecx,0x70
c00079ad:	74 0e                	je     c00079bd <f_mkfs+0x8a8>
c00079af:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b4:	89 da                	mov    edx,ebx
c00079b6:	e8 8e a5 ff ff       	call   c0001f49 <xsum32>
c00079bb:	89 c3                	mov    ebx,eax
c00079bd:	41                   	inc    ecx
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 dc                	jne    c00079a2 <f_mkfs+0x88d>
c00079c6:	89 f0                	mov    eax,esi
c00079c8:	89 fa                	mov    edx,edi
c00079ca:	83 c0 01             	add    eax,0x1
c00079cd:	83 d2 00             	adc    edx,0x0
c00079d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	6a 01                	push   0x1
c00079dd:	57                   	push   edi
c00079de:	56                   	push   esi
c00079df:	55                   	push   ebp
c00079e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e4:	e8 30 a0 ff ff       	call   c0001a19 <disk_write>
c00079e9:	83 c4 20             	add    esp,0x20
c00079ec:	85 c0                	test   eax,eax
c00079ee:	0f 85 ce 07 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c00079f4:	31 d2                	xor    edx,edx
c00079f6:	b9 00 02 00 00       	mov    ecx,0x200
c00079fb:	89 e8                	mov    eax,ebp
c00079fd:	e8 e0 a0 ff ff       	call   c0001ae2 <mem_set>
c0007a02:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0a:	e8 b1 a0 ff ff       	call   c0001ac0 <st_word>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	83 c0 09             	add    eax,0x9
c0007a14:	89 fa                	mov    edx,edi
c0007a16:	83 d2 00             	adc    edx,0x0
c0007a19:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a20:	31 c9                	xor    ecx,ecx
c0007a22:	41                   	inc    ecx
c0007a23:	89 da                	mov    edx,ebx
c0007a25:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2a:	e8 1a a5 ff ff       	call   c0001f49 <xsum32>
c0007a2f:	89 c3                	mov    ebx,eax
c0007a31:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a37:	75 e9                	jne    c0007a22 <f_mkfs+0x90d>
c0007a39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a41:	83 c0 01             	add    eax,0x1
c0007a44:	83 d2 00             	adc    edx,0x0
c0007a47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a4f:	83 ec 0c             	sub    esp,0xc
c0007a52:	6a 01                	push   0x1
c0007a54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5c:	55                   	push   ebp
c0007a5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a61:	e8 b3 9f ff ff       	call   c0001a19 <disk_write>
c0007a66:	83 c4 20             	add    esp,0x20
c0007a69:	85 c0                	test   eax,eax
c0007a6b:	0f 85 51 07 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a75:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a79:	75 09                	jne    c0007a84 <f_mkfs+0x96f>
c0007a7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a82:	74 12                	je     c0007a96 <f_mkfs+0x981>
c0007a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a94:	eb 8a                	jmp    c0007a20 <f_mkfs+0x90b>
c0007a96:	31 d2                	xor    edx,edx
c0007a98:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9d:	89 e8                	mov    eax,ebp
c0007a9f:	e8 3e a0 ff ff       	call   c0001ae2 <mem_set>
c0007aa4:	83 c6 0b             	add    esi,0xb
c0007aa7:	83 d7 00             	adc    edi,0x0
c0007aaa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aae:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab2:	31 c9                	xor    ecx,ecx
c0007ab4:	41                   	inc    ecx
c0007ab5:	89 da                	mov    edx,ebx
c0007ab7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abc:	e8 88 a4 ff ff       	call   c0001f49 <xsum32>
c0007ac1:	89 c3                	mov    ebx,eax
c0007ac3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac9:	75 e9                	jne    c0007ab4 <f_mkfs+0x99f>
c0007acb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ace:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad2:	83 c6 01             	add    esi,0x1
c0007ad5:	83 d7 00             	adc    edi,0x0
c0007ad8:	83 ec 0c             	sub    esp,0xc
c0007adb:	6a 01                	push   0x1
c0007add:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae5:	55                   	push   ebp
c0007ae6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aea:	e8 2a 9f ff ff       	call   c0001a19 <disk_write>
c0007aef:	83 c4 20             	add    esp,0x20
c0007af2:	85 c0                	test   eax,eax
c0007af4:	0f 85 c8 06 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007afa:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007afe:	75 06                	jne    c0007b06 <f_mkfs+0x9f1>
c0007b00:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b04:	74 09                	je     c0007b0f <f_mkfs+0x9fa>
c0007b06:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b09:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0d:	eb a3                	jmp    c0007ab2 <f_mkfs+0x99d>
c0007b0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b13:	89 da                	mov    edx,ebx
c0007b15:	01 e8                	add    eax,ebp
c0007b17:	e8 a8 9f ff ff       	call   c0001ac4 <st_dword>
c0007b1c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b21:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b29:	75 e4                	jne    c0007b0f <f_mkfs+0x9fa>
c0007b2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b32:	83 c6 02             	add    esi,0x2
c0007b35:	83 d7 00             	adc    edi,0x0
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	6a 01                	push   0x1
c0007b3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b45:	55                   	push   ebp
c0007b46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4a:	e8 ca 9e ff ff       	call   c0001a19 <disk_write>
c0007b4f:	83 c4 20             	add    esp,0x20
c0007b52:	85 c0                	test   eax,eax
c0007b54:	0f 85 68 06 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007b5a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b5f:	74 0d                	je     c0007b6e <f_mkfs+0xa59>
c0007b61:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b69:	e9 43 fd ff ff       	jmp    c00078b1 <f_mkfs+0x79c>
c0007b6e:	b1 07                	mov    cl,0x7
c0007b70:	e9 e3 05 00 00       	jmp    c0008158 <f_mkfs+0x1043>
c0007b75:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7a:	0f 85 4f 02 00 00    	jne    c0007dcf <f_mkfs+0xcba>
c0007b80:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b85:	0f 86 22 02 00 00    	jbe    c0007dad <f_mkfs+0xc98>
c0007b8b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b90:	0f 85 81 06 00 00    	jne    c0008217 <f_mkfs+0x1102>
c0007b96:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9d:	83 f8 40             	cmp    eax,0x40
c0007ba0:	0f 87 51 06 00 00    	ja     c00081f7 <f_mkfs+0x10e2>
c0007ba6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007baa:	85 ff                	test   edi,edi
c0007bac:	75 1c                	jne    c0007bca <f_mkfs+0xab5>
c0007bae:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb1:	ba 40 04 02 c0       	mov    edx,0xc0020440
c0007bb6:	c1 e9 0c             	shr    ecx,0xc
c0007bb9:	bf 01 00 00 00       	mov    edi,0x1
c0007bbe:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc1:	66 85 c0             	test   ax,ax
c0007bc4:	0f 85 95 01 00 00    	jne    c0007d5f <f_mkfs+0xc4a>
c0007bca:	31 d2                	xor    edx,edx
c0007bcc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bcf:	f7 f7                	div    edi
c0007bd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd6:	0f 86 95 01 00 00    	jbe    c0007d71 <f_mkfs+0xc5c>
c0007bdc:	83 c0 02             	add    eax,0x2
c0007bdf:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be4:	01 c0                	add    eax,eax
c0007be6:	05 ff 01 00 00       	add    eax,0x1ff
c0007beb:	be 01 00 00 00       	mov    esi,0x1
c0007bf0:	c1 e8 09             	shr    eax,0x9
c0007bf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfb:	c1 e0 05             	shl    eax,0x5
c0007bfe:	c1 e8 09             	shr    eax,0x9
c0007c01:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c05:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c0a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c0e:	89 f0                	mov    eax,esi
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c1e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c22:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c26:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c2f:	31 d2                	xor    edx,edx
c0007c31:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c35:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c39:	31 db                	xor    ebx,ebx
c0007c3b:	01 c8                	add    eax,ecx
c0007c3d:	11 da                	adc    edx,ebx
c0007c3f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c43:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c47:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c4b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c4f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c53:	f7 da                	neg    edx
c0007c55:	21 d1                	and    ecx,edx
c0007c57:	29 d9                	sub    ecx,ebx
c0007c59:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5e:	0f 85 20 01 00 00    	jne    c0007d84 <f_mkfs+0xc6f>
c0007c64:	31 db                	xor    ebx,ebx
c0007c66:	01 ce                	add    esi,ecx
c0007c68:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c70:	89 f8                	mov    eax,edi
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	c1 e0 04             	shl    eax,0x4
c0007c77:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c7f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c83:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c87:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8e:	19 d3                	sbb    ebx,edx
c0007c90:	0f 82 40 01 00 00    	jb     c0007dd6 <f_mkfs+0xcc1>
c0007c96:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9d:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007ca2:	89 c8                	mov    eax,ecx
c0007ca4:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007ca8:	29 f0                	sub    eax,esi
c0007caa:	29 d0                	sub    eax,edx
c0007cac:	31 d2                	xor    edx,edx
c0007cae:	f7 f7                	div    edi
c0007cb0:	89 c3                	mov    ebx,eax
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	0f 85 b8 fe ff ff    	jne    c0007b75 <f_mkfs+0xa60>
c0007cbd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc2:	0f 87 1d 01 00 00    	ja     c0007de5 <f_mkfs+0xcd0>
c0007cc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccd:	0f 85 03 01 00 00    	jne    c0007dd6 <f_mkfs+0xcc1>
c0007cd3:	83 ff 01             	cmp    edi,0x1
c0007cd6:	0f 86 fa 00 00 00    	jbe    c0007dd6 <f_mkfs+0xcc1>
c0007cdc:	d1 ef                	shr    edi,1
c0007cde:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce9:	85 db                	test   ebx,ebx
c0007ceb:	75 2d                	jne    c0007d1a <f_mkfs+0xc05>
c0007ced:	89 cb                	mov    ebx,ecx
c0007cef:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0007cf4:	c1 eb 11             	shr    ebx,0x11
c0007cf7:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cff:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d02:	66 85 c0             	test   ax,ax
c0007d05:	74 11                	je     c0007d18 <f_mkfs+0xc03>
c0007d07:	83 c2 02             	add    edx,0x2
c0007d0a:	39 d8                	cmp    eax,ebx
c0007d0c:	77 0a                	ja     c0007d18 <f_mkfs+0xc03>
c0007d0e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d12:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d16:	eb e7                	jmp    c0007cff <f_mkfs+0xbea>
c0007d18:	31 db                	xor    ebx,ebx
c0007d1a:	31 d2                	xor    edx,edx
c0007d1c:	89 c8                	mov    eax,ecx
c0007d1e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d22:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d29:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2e:	c1 ea 09             	shr    edx,0x9
c0007d31:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d36:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3a:	0f 87 96 00 00 00    	ja     c0007dd6 <f_mkfs+0xcc1>
c0007d40:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d44:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d50:	be 20 00 00 00       	mov    esi,0x20
c0007d55:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5a:	e9 a6 fe ff ff       	jmp    c0007c05 <f_mkfs+0xaf0>
c0007d5f:	83 c2 02             	add    edx,0x2
c0007d62:	39 c8                	cmp    eax,ecx
c0007d64:	0f 87 60 fe ff ff    	ja     c0007bca <f_mkfs+0xab5>
c0007d6a:	01 ff                	add    edi,edi
c0007d6c:	e9 4d fe ff ff       	jmp    c0007bbe <f_mkfs+0xaa9>
c0007d71:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d74:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d79:	40                   	inc    eax
c0007d7a:	d1 e8                	shr    eax,1
c0007d7c:	83 c0 03             	add    eax,0x3
c0007d7f:	e9 62 fe ff ff       	jmp    c0007be6 <f_mkfs+0xad1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	89 c8                	mov    eax,ecx
c0007d88:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d8c:	85 d2                	test   edx,edx
c0007d8e:	74 0c                	je     c0007d9c <f_mkfs+0xc87>
c0007d90:	49                   	dec    ecx
c0007d91:	46                   	inc    esi
c0007d92:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d97:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9c:	89 c8                	mov    eax,ecx
c0007d9e:	31 d2                	xor    edx,edx
c0007da0:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007da4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da8:	e9 c3 fe ff ff       	jmp    c0007c70 <f_mkfs+0xb5b>
c0007dad:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db2:	77 31                	ja     c0007de5 <f_mkfs+0xcd0>
c0007db4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db9:	75 1b                	jne    c0007dd6 <f_mkfs+0xcc1>
c0007dbb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc7:	0f 86 d9 fd ff ff    	jbe    c0007ba6 <f_mkfs+0xa91>
c0007dcd:	eb 07                	jmp    c0007dd6 <f_mkfs+0xcc1>
c0007dcf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd4:	76 0a                	jbe    c0007de0 <f_mkfs+0xccb>
c0007dd6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddb:	e9 ff 03 00 00       	jmp    c00081df <f_mkfs+0x10ca>
c0007de0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de5:	31 d2                	xor    edx,edx
c0007de7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dec:	89 e8                	mov    eax,ebp
c0007dee:	e8 ef 9c ff ff       	call   c0001ae2 <mem_set>
c0007df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df8:	ba 62 05 02 c0       	mov    edx,0xc0020562
c0007dfd:	89 e8                	mov    eax,ebp
c0007dff:	e8 c9 9c ff ff       	call   c0001acd <mem_cpy>
c0007e04:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e07:	ba 00 02 00 00       	mov    edx,0x200
c0007e0c:	e8 af 9c ff ff       	call   c0001ac0 <st_word>
c0007e11:	89 f8                	mov    eax,edi
c0007e13:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e19:	0f b7 d6             	movzx  edx,si
c0007e1c:	e8 9f 9c ff ff       	call   c0001ac0 <st_word>
c0007e21:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e25:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e28:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2d:	75 08                	jne    c0007e37 <f_mkfs+0xd22>
c0007e2f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e37:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3e:	e8 7d 9c ff ff       	call   c0001ac0 <st_word>
c0007e43:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e48:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4c:	39 d0                	cmp    eax,edx
c0007e4e:	b8 00 00 00 00       	mov    eax,0x0
c0007e53:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e57:	72 0a                	jb     c0007e63 <f_mkfs+0xd4e>
c0007e59:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5c:	e8 5f 9c ff ff       	call   c0001ac0 <st_word>
c0007e61:	eb 08                	jmp    c0007e6b <f_mkfs+0xd56>
c0007e63:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e66:	e8 59 9c ff ff       	call   c0001ac4 <st_dword>
c0007e6b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e73:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e77:	e8 44 9c ff ff       	call   c0001ac0 <st_word>
c0007e7c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e7f:	ba ff 00 00 00       	mov    edx,0xff
c0007e84:	e8 37 9c ff ff       	call   c0001ac0 <st_word>
c0007e89:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e90:	e8 2f 9c ff ff       	call   c0001ac4 <st_dword>
c0007e95:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9a:	75 57                	jne    c0007ef3 <f_mkfs+0xdde>
c0007e9c:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e9f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea4:	e8 1b 9c ff ff       	call   c0001ac4 <st_dword>
c0007ea9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eac:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb0:	e8 0f 9c ff ff       	call   c0001ac4 <st_dword>
c0007eb5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb8:	ba 02 00 00 00       	mov    edx,0x2
c0007ebd:	e8 02 9c ff ff       	call   c0001ac4 <st_dword>
c0007ec2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec5:	ba 01 00 00 00       	mov    edx,0x1
c0007eca:	e8 f1 9b ff ff       	call   c0001ac0 <st_word>
c0007ecf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed2:	ba 06 00 00 00       	mov    edx,0x6
c0007ed7:	e8 e4 9b ff ff       	call   c0001ac0 <st_word>
c0007edc:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee7:	b9 13 00 00 00       	mov    ecx,0x13
c0007eec:	ba 6e 05 02 c0       	mov    edx,0xc002056e
c0007ef1:	eb 2f                	jmp    c0007f22 <f_mkfs+0xe0d>
c0007ef3:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef6:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efb:	e8 c4 9b ff ff       	call   c0001ac4 <st_dword>
c0007f00:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f03:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f08:	e8 b3 9b ff ff       	call   c0001ac0 <st_word>
c0007f0d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f11:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f15:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f18:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1d:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007f22:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f28:	e8 a0 9b ff ff       	call   c0001acd <mem_cpy>
c0007f2d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f32:	89 f0                	mov    eax,esi
c0007f34:	e8 87 9b ff ff       	call   c0001ac0 <st_word>
c0007f39:	83 ec 0c             	sub    esp,0xc
c0007f3c:	6a 01                	push   0x1
c0007f3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f46:	55                   	push   ebp
c0007f47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4b:	e8 c9 9a ff ff       	call   c0001a19 <disk_write>
c0007f50:	83 c4 20             	add    esp,0x20
c0007f53:	85 c0                	test   eax,eax
c0007f55:	0f 85 67 02 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0007f5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f60:	0f 85 b7 00 00 00    	jne    c000801d <f_mkfs+0xf08>
c0007f66:	83 ec 0c             	sub    esp,0xc
c0007f69:	6a 01                	push   0x1
c0007f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f73:	83 c0 06             	add    eax,0x6
c0007f76:	83 d2 00             	adc    edx,0x0
c0007f79:	52                   	push   edx
c0007f7a:	50                   	push   eax
c0007f7b:	55                   	push   ebp
c0007f7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f80:	e8 94 9a ff ff       	call   c0001a19 <disk_write>
c0007f85:	83 c4 20             	add    esp,0x20
c0007f88:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8d:	31 d2                	xor    edx,edx
c0007f8f:	89 e8                	mov    eax,ebp
c0007f91:	e8 4c 9b ff ff       	call   c0001ae2 <mem_set>
c0007f96:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9b:	89 e8                	mov    eax,ebp
c0007f9d:	e8 22 9b ff ff       	call   c0001ac4 <st_dword>
c0007fa2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fad:	e8 12 9b ff ff       	call   c0001ac4 <st_dword>
c0007fb2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbb:	e8 04 9b ff ff       	call   c0001ac4 <st_dword>
c0007fc0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc6:	ba 02 00 00 00       	mov    edx,0x2
c0007fcb:	e8 f4 9a ff ff       	call   c0001ac4 <st_dword>
c0007fd0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd5:	89 f0                	mov    eax,esi
c0007fd7:	e8 e4 9a ff ff       	call   c0001ac0 <st_word>
c0007fdc:	83 ec 0c             	sub    esp,0xc
c0007fdf:	6a 01                	push   0x1
c0007fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe9:	83 c0 07             	add    eax,0x7
c0007fec:	83 d2 00             	adc    edx,0x0
c0007fef:	52                   	push   edx
c0007ff0:	50                   	push   eax
c0007ff1:	55                   	push   ebp
c0007ff2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff6:	e8 1e 9a ff ff       	call   c0001a19 <disk_write>
c0007ffb:	83 c4 14             	add    esp,0x14
c0007ffe:	6a 01                	push   0x1
c0008000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008004:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008008:	83 c0 01             	add    eax,0x1
c000800b:	83 d2 00             	adc    edx,0x0
c000800e:	52                   	push   edx
c000800f:	50                   	push   eax
c0008010:	55                   	push   ebp
c0008011:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008015:	e8 ff 99 ff ff       	call   c0001a19 <disk_write>
c000801a:	83 c4 20             	add    esp,0x20
c000801d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008024:	31 d2                	xor    edx,edx
c0008026:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802c:	31 db                	xor    ebx,ebx
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 ad 9a ff ff       	call   c0001ae2 <mem_set>
c0008035:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000803c:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008041:	0f 94 c3             	sete   bl
c0008044:	4b                   	dec    ebx
c0008045:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008051:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008056:	75 21                	jne    c0008079 <f_mkfs+0xf64>
c0008058:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 60 9a ff ff       	call   c0001ac4 <st_dword>
c0008064:	8d 45 04             	lea    eax,[ebp+0x4]
c0008067:	83 ca ff             	or     edx,0xffffffff
c000806a:	e8 55 9a ff ff       	call   c0001ac4 <st_dword>
c000806f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008072:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008077:	eb 04                	jmp    c000807d <f_mkfs+0xf68>
c0008079:	89 da                	mov    edx,ebx
c000807b:	89 e8                	mov    eax,ebp
c000807d:	e8 42 9a ff ff       	call   c0001ac4 <st_dword>
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008092:	39 ce                	cmp    esi,ecx
c0008094:	76 02                	jbe    c0008098 <f_mkfs+0xf83>
c0008096:	89 ce                	mov    esi,ecx
c0008098:	83 ec 0c             	sub    esp,0xc
c000809b:	56                   	push   esi
c000809c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a4:	55                   	push   ebp
c00080a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a9:	e8 6b 99 ff ff       	call   c0001a19 <disk_write>
c00080ae:	83 c4 20             	add    esp,0x20
c00080b1:	85 c0                	test   eax,eax
c00080b3:	0f 85 09 01 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c00080b9:	31 d2                	xor    edx,edx
c00080bb:	b9 00 02 00 00       	mov    ecx,0x200
c00080c0:	89 e8                	mov    eax,ebp
c00080c2:	e8 1b 9a ff ff       	call   c0001ae2 <mem_set>
c00080c7:	31 d2                	xor    edx,edx
c00080c9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d5:	75 b3                	jne    c000808a <f_mkfs+0xf75>
c00080d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e1:	40                   	inc    eax
c00080e2:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080e6:	0f 87 65 ff ff ff    	ja     c0008051 <f_mkfs+0xf3c>
c00080ec:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f1:	74 04                	je     c00080f7 <f_mkfs+0xfe2>
c00080f3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080f7:	89 fb                	mov    ebx,edi
c00080f9:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080fd:	76 04                	jbe    c0008103 <f_mkfs+0xfee>
c00080ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	53                   	push   ebx
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810f:	55                   	push   ebp
c0008110:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008114:	e8 00 99 ff ff       	call   c0001a19 <disk_write>
c0008119:	83 c4 20             	add    esp,0x20
c000811c:	85 c0                	test   eax,eax
c000811e:	0f 85 9e 00 00 00    	jne    c00081c2 <f_mkfs+0x10ad>
c0008124:	31 d2                	xor    edx,edx
c0008126:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812e:	29 df                	sub    edi,ebx
c0008130:	75 c5                	jne    c00080f7 <f_mkfs+0xfe2>
c0008132:	b1 0c                	mov    cl,0xc
c0008134:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008139:	74 1d                	je     c0008158 <f_mkfs+0x1043>
c000813b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008140:	b1 06                	mov    cl,0x6
c0008142:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008146:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814a:	72 0c                	jb     c0008158 <f_mkfs+0x1043>
c000814c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008151:	0f 94 c1             	sete   cl
c0008154:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008158:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815d:	75 4c                	jne    c00081ab <f_mkfs+0x1096>
c000815f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008163:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008167:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008175:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008180:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818b:	83 ec 0c             	sub    esp,0xc
c000818e:	0f b6 c9             	movzx  ecx,cl
c0008191:	55                   	push   ebp
c0008192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008196:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819d:	e8 58 c2 ff ff       	call   c00043fa <create_partition>
c00081a2:	83 c4 10             	add    esp,0x10
c00081a5:	89 c3                	mov    ebx,eax
c00081a7:	85 c0                	test   eax,eax
c00081a9:	75 34                	jne    c00081df <f_mkfs+0x10ca>
c00081ab:	50                   	push   eax
c00081ac:	31 db                	xor    ebx,ebx
c00081ae:	6a 00                	push   0x0
c00081b0:	6a 00                	push   0x0
c00081b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b6:	e8 74 98 ff ff       	call   c0001a2f <disk_ioctl>
c00081bb:	83 c4 10             	add    esp,0x10
c00081be:	85 c0                	test   eax,eax
c00081c0:	74 1d                	je     c00081df <f_mkfs+0x10ca>
c00081c2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081ca:	75 0c                	jne    c00081d8 <f_mkfs+0x10c3>
c00081cc:	83 ec 0c             	sub    esp,0xc
c00081cf:	55                   	push   ebp
c00081d0:	e8 75 00 00 00       	call   c000824a <ff_memfree>
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	bb 01 00 00 00       	mov    ebx,0x1
c00081dd:	eb 48                	jmp    c0008227 <f_mkfs+0x1112>
c00081df:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e7:	75 3e                	jne    c0008227 <f_mkfs+0x1112>
c00081e9:	83 ec 0c             	sub    esp,0xc
c00081ec:	55                   	push   ebp
c00081ed:	e8 58 00 00 00       	call   c000824a <ff_memfree>
c00081f2:	83 c4 10             	add    esp,0x10
c00081f5:	eb 30                	jmp    c0008227 <f_mkfs+0x1112>
c00081f7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fc:	0f 85 eb fa ff ff    	jne    c0007ced <f_mkfs+0xbd8>
c0008202:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008206:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820c:	0f 86 b8 f9 ff ff    	jbe    c0007bca <f_mkfs+0xab5>
c0008212:	e9 bf fb ff ff       	jmp    c0007dd6 <f_mkfs+0xcc1>
c0008217:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821c:	0f 85 c0 fa ff ff    	jne    c0007ce2 <f_mkfs+0xbcd>
c0008222:	e9 af fb ff ff       	jmp    c0007dd6 <f_mkfs+0xcc1>
c0008227:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822d:	89 d8                	mov    eax,ebx
c000822f:	5b                   	pop    ebx
c0008230:	5e                   	pop    esi
c0008231:	5f                   	pop    edi
c0008232:	5d                   	pop    ebp
c0008233:	c3                   	ret    

c0008234 <ff_memalloc>:
c0008234:	83 ec 0c             	sub    esp,0xc
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823e:	e8 9e 3d 00 00       	call   c000bfe1 <malloc>
c0008243:	83 c4 10             	add    esp,0x10
c0008246:	83 c4 0c             	add    esp,0xc
c0008249:	c3                   	ret    

c000824a <ff_memfree>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 98 3d 00 00       	call   c000bff1 <free>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	90                   	nop
c000825d:	83 c4 0c             	add    esp,0xc
c0008260:	c3                   	ret    

c0008261 <ff_uni2oem>:
c0008261:	83 ec 14             	sub    esp,0x14
c0008264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008268:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008273:	c7 44 24 0c a0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208a0
c000827b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008280:	77 0b                	ja     c000828d <ff_uni2oem+0x2c>
c0008282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008286:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828b:	eb 61                	jmp    c00082ee <ff_uni2oem+0x8d>
c000828d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008295:	77 57                	ja     c00082ee <ff_uni2oem+0x8d>
c0008297:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829d:	75 4f                	jne    c00082ee <ff_uni2oem+0x8d>
c000829f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a6:	eb 0b                	jmp    c00082b3 <ff_uni2oem+0x52>
c00082a8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ad:	40                   	inc    eax
c00082ae:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b9:	77 21                	ja     c00082dc <ff_uni2oem+0x7b>
c00082bb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082c0:	25 ff ff 00 00       	and    eax,0xffff
c00082c5:	8d 14 00             	lea    edx,[eax+eax*1]
c00082c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082cc:	01 d0                	add    eax,edx
c00082ce:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082d1:	25 ff ff 00 00       	and    eax,0xffff
c00082d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082da:	75 cc                	jne    c00082a8 <ff_uni2oem+0x47>
c00082dc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082e1:	83 e8 80             	sub    eax,0xffffff80
c00082e4:	25 ff 00 00 00       	and    eax,0xff
c00082e9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ee:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f3:	83 c4 14             	add    esp,0x14
c00082f6:	c3                   	ret    

c00082f7 <ff_oem2uni>:
c00082f7:	83 ec 18             	sub    esp,0x18
c00082fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008302:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008307:	66 89 04 24          	mov    WORD PTR [esp],ax
c000830b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008312:	c7 44 24 10 a0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208a0
c000831a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008320:	77 0b                	ja     c000832d <ff_oem2uni+0x36>
c0008322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008326:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000832b:	eb 30                	jmp    c000835d <ff_oem2uni+0x66>
c000832d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008333:	75 28                	jne    c000835d <ff_oem2uni+0x66>
c0008335:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000833c:	77 1f                	ja     c000835d <ff_oem2uni+0x66>
c000833e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008342:	25 ff ff 00 00       	and    eax,0xffff
c0008347:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000834c:	8d 14 00             	lea    edx,[eax+eax*1]
c000834f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008353:	01 d0                	add    eax,edx
c0008355:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008358:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000835d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008362:	83 c4 18             	add    esp,0x18
c0008365:	c3                   	ret    

c0008366 <ff_wtoupper>:
c0008366:	83 ec 10             	sub    esp,0x10
c0008369:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008371:	0f 87 62 01 00 00    	ja     c00084d9 <ff_wtoupper+0x173>
c0008377:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000837b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008380:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008387:	77 07                	ja     c0008390 <ff_wtoupper+0x2a>
c0008389:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c000838e:	eb 05                	jmp    c0008395 <ff_wtoupper+0x2f>
c0008390:	b8 e0 05 02 c0       	mov    eax,0xc00205e0
c0008395:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008399:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000839d:	8d 50 02             	lea    edx,[eax+0x2]
c00083a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ac:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b2:	0f 84 13 01 00 00    	je     c00084cb <ff_wtoupper+0x165>
c00083b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083bd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c2:	0f 82 03 01 00 00    	jb     c00084cb <ff_wtoupper+0x165>
c00083c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cc:	8d 50 02             	lea    edx,[eax+0x2]
c00083cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083d3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083d6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083db:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e0:	66 c1 e8 08          	shr    ax,0x8
c00083e4:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e9:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f5:	31 d2                	xor    edx,edx
c00083f7:	66 89 c2             	mov    dx,ax
c00083fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083fe:	31 c9                	xor    ecx,ecx
c0008400:	66 89 c1             	mov    cx,ax
c0008403:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008408:	25 ff ff 00 00       	and    eax,0xffff
c000840d:	01 c8                	add    eax,ecx
c000840f:	39 c2                	cmp    edx,eax
c0008411:	0f 8d 92 00 00 00    	jge    c00084a9 <ff_wtoupper+0x143>
c0008417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000841b:	25 ff ff 00 00       	and    eax,0xffff
c0008420:	83 f8 08             	cmp    eax,0x8
c0008423:	0f 87 a1 00 00 00    	ja     c00084ca <ff_wtoupper+0x164>
c0008429:	8b 04 85 a0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa60]
c0008430:	ff e0                	jmp    eax
c0008432:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008437:	31 d2                	xor    edx,edx
c0008439:	66 89 c2             	mov    dx,ax
c000843c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008440:	25 ff ff 00 00       	and    eax,0xffff
c0008445:	29 c2                	sub    edx,eax
c0008447:	89 d0                	mov    eax,edx
c0008449:	8d 14 00             	lea    edx,[eax+eax*1]
c000844c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008450:	01 d0                	add    eax,edx
c0008452:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008455:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000845a:	eb 4b                	jmp    c00084a7 <ff_wtoupper+0x141>
c000845c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008461:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008465:	83 e0 01             	and    eax,0x1
c0008468:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000846d:	eb 38                	jmp    c00084a7 <ff_wtoupper+0x141>
c000846f:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008475:	eb 30                	jmp    c00084a7 <ff_wtoupper+0x141>
c0008477:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000847d:	eb 28                	jmp    c00084a7 <ff_wtoupper+0x141>
c000847f:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008485:	eb 20                	jmp    c00084a7 <ff_wtoupper+0x141>
c0008487:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000848d:	eb 18                	jmp    c00084a7 <ff_wtoupper+0x141>
c000848f:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008495:	eb 10                	jmp    c00084a7 <ff_wtoupper+0x141>
c0008497:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000849d:	eb 08                	jmp    c00084a7 <ff_wtoupper+0x141>
c000849f:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084a6:	90                   	nop
c00084a7:	eb 21                	jmp    c00084ca <ff_wtoupper+0x164>
c00084a9:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084af:	0f 85 e4 fe ff ff    	jne    c0008399 <ff_wtoupper+0x33>
c00084b5:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084ba:	25 ff ff 00 00       	and    eax,0xffff
c00084bf:	01 c0                	add    eax,eax
c00084c1:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084c5:	e9 cf fe ff ff       	jmp    c0008399 <ff_wtoupper+0x33>
c00084ca:	90                   	nop
c00084cb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084d0:	25 ff ff 00 00       	and    eax,0xffff
c00084d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	c3                   	ret    

c00084e1 <is_bad_src_ratio>:
c00084e1:	83 ec 0c             	sub    esp,0xc
c00084e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00084eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084f3:	dd 04 24             	fld    QWORD PTR [esp]
c00084f6:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c00084fc:	de d9                	fcompp 
c00084fe:	df e0                	fnstsw ax
c0008500:	f6 c4 45             	test   ah,0x45
c0008503:	74 10                	je     c0008515 <is_bad_src_ratio+0x34>
c0008505:	dd 04 24             	fld    QWORD PTR [esp]
c0008508:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c000850e:	df e0                	fnstsw ax
c0008510:	f6 c4 45             	test   ah,0x45
c0008513:	75 07                	jne    c000851c <is_bad_src_ratio+0x3b>
c0008515:	b8 01 00 00 00       	mov    eax,0x1
c000851a:	eb 05                	jmp    c0008521 <is_bad_src_ratio+0x40>
c000851c:	b8 00 00 00 00       	mov    eax,0x0
c0008521:	83 c4 0c             	add    esp,0xc
c0008524:	c3                   	ret    

c0008525 <psrc_set_converter>:
c0008525:	56                   	push   esi
c0008526:	89 d6                	mov    esi,edx
c0008528:	53                   	push   ebx
c0008529:	89 c3                	mov    ebx,eax
c000852b:	83 ec 0c             	sub    esp,0xc
c000852e:	52                   	push   edx
c000852f:	50                   	push   eax
c0008530:	e8 21 24 00 00       	call   c000a956 <sinc_set_converter>
c0008535:	83 c4 10             	add    esp,0x10
c0008538:	85 c0                	test   eax,eax
c000853a:	74 25                	je     c0008561 <psrc_set_converter+0x3c>
c000853c:	50                   	push   eax
c000853d:	50                   	push   eax
c000853e:	56                   	push   esi
c000853f:	53                   	push   ebx
c0008540:	e8 1c 28 00 00       	call   c000ad61 <zoh_set_converter>
c0008545:	83 c4 10             	add    esp,0x10
c0008548:	85 c0                	test   eax,eax
c000854a:	74 15                	je     c0008561 <psrc_set_converter+0x3c>
c000854c:	51                   	push   ecx
c000854d:	51                   	push   ecx
c000854e:	56                   	push   esi
c000854f:	53                   	push   ebx
c0008550:	e8 0c 0a 00 00       	call   c0008f61 <linear_set_converter>
c0008555:	83 c4 10             	add    esp,0x10
c0008558:	ba 0a 00 00 00       	mov    edx,0xa
c000855d:	85 c0                	test   eax,eax
c000855f:	75 02                	jne    c0008563 <psrc_set_converter+0x3e>
c0008561:	31 d2                	xor    edx,edx
c0008563:	89 d0                	mov    eax,edx
c0008565:	5a                   	pop    edx
c0008566:	5b                   	pop    ebx
c0008567:	5e                   	pop    esi
c0008568:	c3                   	ret    

c0008569 <src_delete>:
c0008569:	53                   	push   ebx
c000856a:	83 ec 08             	sub    esp,0x8
c000856d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008571:	85 db                	test   ebx,ebx
c0008573:	74 29                	je     c000859e <src_delete+0x35>
c0008575:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008578:	85 c0                	test   eax,eax
c000857a:	74 0c                	je     c0008588 <src_delete+0x1f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 6c 3a 00 00       	call   c000bff1 <free>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	50                   	push   eax
c0008589:	6a 3c                	push   0x3c
c000858b:	6a 00                	push   0x0
c000858d:	53                   	push   ebx
c000858e:	e8 30 81 ff ff       	call   c00006c3 <memset>
c0008593:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008596:	e8 56 3a 00 00       	call   c000bff1 <free>
c000859b:	83 c4 10             	add    esp,0x10
c000859e:	83 c4 08             	add    esp,0x8
c00085a1:	31 c0                	xor    eax,eax
c00085a3:	5b                   	pop    ebx
c00085a4:	c3                   	ret    

c00085a5 <src_process>:
c00085a5:	56                   	push   esi
c00085a6:	53                   	push   ebx
c00085a7:	53                   	push   ebx
c00085a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085b0:	85 f6                	test   esi,esi
c00085b2:	0f 84 e2 00 00 00    	je     c000869a <src_process+0xf5>
c00085b8:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085bc:	0f 84 df 00 00 00    	je     c00086a1 <src_process+0xfc>
c00085c2:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085c6:	0f 84 d5 00 00 00    	je     c00086a1 <src_process+0xfc>
c00085cc:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085d3:	0f 85 cf 00 00 00    	jne    c00086a8 <src_process+0x103>
c00085d9:	85 db                	test   ebx,ebx
c00085db:	0f 84 ce 00 00 00    	je     c00086af <src_process+0x10a>
c00085e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085e4:	0f 84 cc 00 00 00    	je     c00086b6 <src_process+0x111>
c00085ea:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085ee:	0f 84 c2 00 00 00    	je     c00086b6 <src_process+0x111>
c00085f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085fa:	e8 e2 fe ff ff       	call   c00084e1 <is_bad_src_ratio>
c00085ff:	5a                   	pop    edx
c0008600:	85 c0                	test   eax,eax
c0008602:	59                   	pop    ecx
c0008603:	0f 85 b4 00 00 00    	jne    c00086bd <src_process+0x118>
c0008609:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000860d:	79 07                	jns    c0008616 <src_process+0x71>
c000860f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008616:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000861a:	79 07                	jns    c0008623 <src_process+0x7e>
c000861c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008623:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008625:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008628:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000862b:	39 ca                	cmp    edx,ecx
c000862d:	73 0b                	jae    c000863a <src_process+0x95>
c000862f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008633:	8d 04 82             	lea    eax,[edx+eax*4]
c0008636:	39 c1                	cmp    ecx,eax
c0008638:	eb 09                	jmp    c0008643 <src_process+0x9e>
c000863a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000863e:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008641:	39 c2                	cmp    edx,eax
c0008643:	72 7f                	jb     c00086c4 <src_process+0x11f>
c0008645:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000864c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008653:	d9 05 80 0e 02 c0    	fld    DWORD PTR ds:0xc0020e80
c0008659:	dc 1e                	fcomp  QWORD PTR [esi]
c000865b:	df e0                	fnstsw ax
c000865d:	9e                   	sahf   
c000865e:	76 05                	jbe    c0008665 <src_process+0xc0>
c0008660:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008663:	dd 1e                	fstp   QWORD PTR [esi]
c0008665:	dd 06                	fld    QWORD PTR [esi]
c0008667:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c000866a:	83 ec 10             	sub    esp,0x10
c000866d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008670:	e8 9b 70 01 00       	call   c001f710 <fabs>
c0008675:	83 c4 10             	add    esp,0x10
c0008678:	dd 05 70 0e 02 c0    	fld    QWORD PTR ds:0xc0020e70
c000867e:	de d9                	fcompp 
c0008680:	df e0                	fnstsw ax
c0008682:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008686:	9e                   	sahf   
c0008687:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000868b:	76 05                	jbe    c0008692 <src_process+0xed>
c000868d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008690:	eb 03                	jmp    c0008695 <src_process+0xf0>
c0008692:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008695:	59                   	pop    ecx
c0008696:	5b                   	pop    ebx
c0008697:	5e                   	pop    esi
c0008698:	ff e0                	jmp    eax
c000869a:	b8 02 00 00 00       	mov    eax,0x2
c000869f:	eb 28                	jmp    c00086c9 <src_process+0x124>
c00086a1:	b8 07 00 00 00       	mov    eax,0x7
c00086a6:	eb 21                	jmp    c00086c9 <src_process+0x124>
c00086a8:	b8 12 00 00 00       	mov    eax,0x12
c00086ad:	eb 1a                	jmp    c00086c9 <src_process+0x124>
c00086af:	b8 03 00 00 00       	mov    eax,0x3
c00086b4:	eb 13                	jmp    c00086c9 <src_process+0x124>
c00086b6:	b8 04 00 00 00       	mov    eax,0x4
c00086bb:	eb 0c                	jmp    c00086c9 <src_process+0x124>
c00086bd:	b8 06 00 00 00       	mov    eax,0x6
c00086c2:	eb 05                	jmp    c00086c9 <src_process+0x124>
c00086c4:	b8 10 00 00 00       	mov    eax,0x10
c00086c9:	5a                   	pop    edx
c00086ca:	5b                   	pop    ebx
c00086cb:	5e                   	pop    esi
c00086cc:	c3                   	ret    

c00086cd <src_callback_read>:
c00086cd:	55                   	push   ebp
c00086ce:	57                   	push   edi
c00086cf:	56                   	push   esi
c00086d0:	53                   	push   ebx
c00086d1:	83 ec 4c             	sub    esp,0x4c
c00086d4:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086d8:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086dc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086e0:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086e4:	85 ff                	test   edi,edi
c00086e6:	0f 8e 36 01 00 00    	jle    c0008822 <src_callback_read+0x155>
c00086ec:	85 db                	test   ebx,ebx
c00086ee:	0f 84 2e 01 00 00    	je     c0008822 <src_callback_read+0x155>
c00086f4:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086fb:	74 0c                	je     c0008709 <src_callback_read+0x3c>
c00086fd:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008704:	e9 19 01 00 00       	jmp    c0008822 <src_callback_read+0x155>
c0008709:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000870d:	75 0c                	jne    c000871b <src_callback_read+0x4e>
c000870f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008716:	e9 07 01 00 00       	jmp    c0008822 <src_callback_read+0x155>
c000871b:	51                   	push   ecx
c000871c:	6a 24                	push   0x24
c000871e:	6a 00                	push   0x0
c0008720:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008724:	50                   	push   eax
c0008725:	e8 99 7f ff ff       	call   c00006c3 <memset>
c000872a:	5e                   	pop    esi
c000872b:	5d                   	pop    ebp
c000872c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008734:	e8 a8 fd ff ff       	call   c00084e1 <is_bad_src_ratio>
c0008739:	83 c4 10             	add    esp,0x10
c000873c:	85 c0                	test   eax,eax
c000873e:	74 0c                	je     c000874c <src_callback_read+0x7f>
c0008740:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008747:	e9 d6 00 00 00       	jmp    c0008822 <src_callback_read+0x155>
c000874c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008750:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008754:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008758:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000875c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000875f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008763:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008766:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000876a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000876e:	31 f6                	xor    esi,esi
c0008770:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008775:	75 30                	jne    c00087a7 <src_callback_read+0xda>
c0008777:	8d 44 24 14          	lea    eax,[esp+0x14]
c000877b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000877f:	52                   	push   edx
c0008780:	52                   	push   edx
c0008781:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008785:	50                   	push   eax
c0008786:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008789:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000878c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008790:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008794:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008798:	83 c4 10             	add    esp,0x10
c000879b:	85 c0                	test   eax,eax
c000879d:	75 08                	jne    c00087a7 <src_callback_read+0xda>
c000879f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087a7:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087ae:	50                   	push   eax
c00087af:	50                   	push   eax
c00087b0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087b4:	50                   	push   eax
c00087b5:	53                   	push   ebx
c00087b6:	e8 ea fd ff ff       	call   c00085a5 <src_process>
c00087bb:	83 c4 10             	add    esp,0x10
c00087be:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087c5:	85 c0                	test   eax,eax
c00087c7:	75 42                	jne    c000880b <src_callback_read+0x13e>
c00087c9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087cd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087d0:	89 e9                	mov    ecx,ebp
c00087d2:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087d6:	0f af ca             	imul   ecx,edx
c00087d9:	c1 e1 02             	shl    ecx,0x2
c00087dc:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087e0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087e4:	0f af d1             	imul   edx,ecx
c00087e7:	c1 e2 02             	shl    edx,0x2
c00087ea:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087ee:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087f2:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087f5:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087fa:	75 04                	jne    c0008800 <src_callback_read+0x133>
c00087fc:	85 c9                	test   ecx,ecx
c00087fe:	74 0b                	je     c000880b <src_callback_read+0x13e>
c0008800:	39 d7                	cmp    edi,edx
c0008802:	7e 09                	jle    c000880d <src_callback_read+0x140>
c0008804:	89 d6                	mov    esi,edx
c0008806:	e9 65 ff ff ff       	jmp    c0008770 <src_callback_read+0xa3>
c000880b:	89 f2                	mov    edx,esi
c000880d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008811:	85 c0                	test   eax,eax
c0008813:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008816:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000881a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000881d:	74 05                	je     c0008824 <src_callback_read+0x157>
c000881f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008822:	31 d2                	xor    edx,edx
c0008824:	83 c4 4c             	add    esp,0x4c
c0008827:	89 d0                	mov    eax,edx
c0008829:	5b                   	pop    ebx
c000882a:	5e                   	pop    esi
c000882b:	5f                   	pop    edi
c000882c:	5d                   	pop    ebp
c000882d:	c3                   	ret    

c000882e <src_set_ratio>:
c000882e:	53                   	push   ebx
c000882f:	b8 02 00 00 00       	mov    eax,0x2
c0008834:	83 ec 08             	sub    esp,0x8
c0008837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000883f:	85 db                	test   ebx,ebx
c0008841:	74 33                	je     c0008876 <src_set_ratio+0x48>
c0008843:	b8 07 00 00 00       	mov    eax,0x7
c0008848:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000884c:	74 2c                	je     c000887a <src_set_ratio+0x4c>
c000884e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008852:	74 2a                	je     c000887e <src_set_ratio+0x50>
c0008854:	50                   	push   eax
c0008855:	50                   	push   eax
c0008856:	dd 14 24             	fst    QWORD PTR [esp]
c0008859:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000885d:	e8 7f fc ff ff       	call   c00084e1 <is_bad_src_ratio>
c0008862:	5a                   	pop    edx
c0008863:	59                   	pop    ecx
c0008864:	85 c0                	test   eax,eax
c0008866:	75 07                	jne    c000886f <src_set_ratio+0x41>
c0008868:	dd 04 24             	fld    QWORD PTR [esp]
c000886b:	dd 1b                	fstp   QWORD PTR [ebx]
c000886d:	eb 11                	jmp    c0008880 <src_set_ratio+0x52>
c000886f:	b8 06 00 00 00       	mov    eax,0x6
c0008874:	eb 0a                	jmp    c0008880 <src_set_ratio+0x52>
c0008876:	dd d8                	fstp   st(0)
c0008878:	eb 06                	jmp    c0008880 <src_set_ratio+0x52>
c000887a:	dd d8                	fstp   st(0)
c000887c:	eb 02                	jmp    c0008880 <src_set_ratio+0x52>
c000887e:	dd d8                	fstp   st(0)
c0008880:	83 c4 08             	add    esp,0x8
c0008883:	5b                   	pop    ebx
c0008884:	c3                   	ret    

c0008885 <src_get_channels>:
c0008885:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008889:	b8 02 00 00 00       	mov    eax,0x2
c000888e:	85 d2                	test   edx,edx
c0008890:	74 14                	je     c00088a6 <src_get_channels+0x21>
c0008892:	b8 07 00 00 00       	mov    eax,0x7
c0008897:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000889b:	74 09                	je     c00088a6 <src_get_channels+0x21>
c000889d:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088a1:	74 03                	je     c00088a6 <src_get_channels+0x21>
c00088a3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088a6:	c3                   	ret    

c00088a7 <src_reset>:
c00088a7:	53                   	push   ebx
c00088a8:	b8 02 00 00 00       	mov    eax,0x2
c00088ad:	83 ec 08             	sub    esp,0x8
c00088b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088b4:	85 db                	test   ebx,ebx
c00088b6:	74 2e                	je     c00088e6 <src_reset+0x3f>
c00088b8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088bb:	85 c0                	test   eax,eax
c00088bd:	74 09                	je     c00088c8 <src_reset+0x21>
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	ff d0                	call   eax
c00088c5:	83 c4 10             	add    esp,0x10
c00088c8:	d9 ee                	fldz   
c00088ca:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088d1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088d8:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088db:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088e2:	31 c0                	xor    eax,eax
c00088e4:	dd 1b                	fstp   QWORD PTR [ebx]
c00088e6:	83 c4 08             	add    esp,0x8
c00088e9:	5b                   	pop    ebx
c00088ea:	c3                   	ret    

c00088eb <src_new>:
c00088eb:	57                   	push   edi
c00088ec:	56                   	push   esi
c00088ed:	53                   	push   ebx
c00088ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088f6:	85 f6                	test   esi,esi
c00088f8:	74 73                	je     c000896d <src_new+0x82>
c00088fa:	85 ff                	test   edi,edi
c00088fc:	7f 08                	jg     c0008906 <src_new+0x1b>
c00088fe:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008904:	eb 1e                	jmp    c0008924 <src_new+0x39>
c0008906:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000890c:	50                   	push   eax
c000890d:	50                   	push   eax
c000890e:	6a 3c                	push   0x3c
c0008910:	6a 01                	push   0x1
c0008912:	e8 fa 36 00 00       	call   c000c011 <calloc>
c0008917:	83 c4 10             	add    esp,0x10
c000891a:	89 c3                	mov    ebx,eax
c000891c:	85 c0                	test   eax,eax
c000891e:	75 10                	jne    c0008930 <src_new+0x45>
c0008920:	85 f6                	test   esi,esi
c0008922:	75 04                	jne    c0008928 <src_new+0x3d>
c0008924:	31 db                	xor    ebx,ebx
c0008926:	eb 4b                	jmp    c0008973 <src_new+0x88>
c0008928:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000892e:	eb 43                	jmp    c0008973 <src_new+0x88>
c0008930:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008933:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000893a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000893e:	e8 e2 fb ff ff       	call   c0008525 <psrc_set_converter>
c0008943:	85 c0                	test   eax,eax
c0008945:	74 18                	je     c000895f <src_new+0x74>
c0008947:	85 f6                	test   esi,esi
c0008949:	74 06                	je     c0008951 <src_new+0x66>
c000894b:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008951:	83 ec 0c             	sub    esp,0xc
c0008954:	53                   	push   ebx
c0008955:	31 db                	xor    ebx,ebx
c0008957:	e8 95 36 00 00       	call   c000bff1 <free>
c000895c:	83 c4 10             	add    esp,0x10
c000895f:	83 ec 0c             	sub    esp,0xc
c0008962:	53                   	push   ebx
c0008963:	e8 3f ff ff ff       	call   c00088a7 <src_reset>
c0008968:	83 c4 10             	add    esp,0x10
c000896b:	eb 06                	jmp    c0008973 <src_new+0x88>
c000896d:	85 ff                	test   edi,edi
c000896f:	7f 9b                	jg     c000890c <src_new+0x21>
c0008971:	eb b1                	jmp    c0008924 <src_new+0x39>
c0008973:	89 d8                	mov    eax,ebx
c0008975:	5b                   	pop    ebx
c0008976:	5e                   	pop    esi
c0008977:	5f                   	pop    edi
c0008978:	c3                   	ret    

c0008979 <src_callback_new>:
c0008979:	56                   	push   esi
c000897a:	53                   	push   ebx
c000897b:	53                   	push   ebx
c000897c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008984:	85 f6                	test   esi,esi
c0008986:	75 0e                	jne    c0008996 <src_callback_new+0x1d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	85 c0                	test   eax,eax
c000898c:	74 47                	je     c00089d5 <src_callback_new+0x5c>
c000898e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008994:	eb 3f                	jmp    c00089d5 <src_callback_new+0x5c>
c0008996:	85 c0                	test   eax,eax
c0008998:	74 06                	je     c00089a0 <src_callback_new+0x27>
c000899a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089a0:	51                   	push   ecx
c00089a1:	50                   	push   eax
c00089a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089aa:	e8 3c ff ff ff       	call   c00088eb <src_new>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	89 c3                	mov    ebx,eax
c00089b4:	85 c0                	test   eax,eax
c00089b6:	74 1d                	je     c00089d5 <src_callback_new+0x5c>
c00089b8:	83 ec 0c             	sub    esp,0xc
c00089bb:	50                   	push   eax
c00089bc:	e8 e6 fe ff ff       	call   c00088a7 <src_reset>
c00089c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089cc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089cf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	5a                   	pop    edx
c00089d6:	89 d8                	mov    eax,ebx
c00089d8:	5b                   	pop    ebx
c00089d9:	5e                   	pop    esi
c00089da:	c3                   	ret    

c00089db <src_get_name>:
c00089db:	53                   	push   ebx
c00089dc:	83 ec 14             	sub    esp,0x14
c00089df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089e3:	53                   	push   ebx
c00089e4:	e8 47 1f 00 00       	call   c000a930 <sinc_get_name>
c00089e9:	83 c4 10             	add    esp,0x10
c00089ec:	85 c0                	test   eax,eax
c00089ee:	75 1d                	jne    c0008a0d <src_get_name+0x32>
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 4a 23 00 00       	call   c000ad43 <zoh_get_name>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	85 c0                	test   eax,eax
c00089fe:	75 0d                	jne    c0008a0d <src_get_name+0x32>
c0008a00:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	e9 36 05 00 00       	jmp    c0008f43 <linear_get_name>
c0008a0d:	83 c4 08             	add    esp,0x8
c0008a10:	5b                   	pop    ebx
c0008a11:	c3                   	ret    

c0008a12 <src_get_description>:
c0008a12:	53                   	push   ebx
c0008a13:	83 ec 14             	sub    esp,0x14
c0008a16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a1a:	53                   	push   ebx
c0008a1b:	e8 23 1f 00 00       	call   c000a943 <sinc_get_description>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	85 c0                	test   eax,eax
c0008a25:	75 1d                	jne    c0008a44 <src_get_description+0x32>
c0008a27:	83 ec 0c             	sub    esp,0xc
c0008a2a:	53                   	push   ebx
c0008a2b:	e8 22 23 00 00       	call   c000ad52 <zoh_get_description>
c0008a30:	83 c4 10             	add    esp,0x10
c0008a33:	85 c0                	test   eax,eax
c0008a35:	75 0d                	jne    c0008a44 <src_get_description+0x32>
c0008a37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	e9 0e 05 00 00       	jmp    c0008f52 <linear_get_description>
c0008a44:	83 c4 08             	add    esp,0x8
c0008a47:	5b                   	pop    ebx
c0008a48:	c3                   	ret    

c0008a49 <src_get_version>:
c0008a49:	b8 a0 09 02 c0       	mov    eax,0xc00209a0
c0008a4e:	c3                   	ret    

c0008a4f <src_is_valid_ratio>:
c0008a4f:	50                   	push   eax
c0008a50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a58:	e8 84 fa ff ff       	call   c00084e1 <is_bad_src_ratio>
c0008a5d:	85 c0                	test   eax,eax
c0008a5f:	0f 94 c0             	sete   al
c0008a62:	0f b6 c0             	movzx  eax,al
c0008a65:	83 c4 0c             	add    esp,0xc
c0008a68:	c3                   	ret    

c0008a69 <src_error>:
c0008a69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a6d:	31 c0                	xor    eax,eax
c0008a6f:	85 d2                	test   edx,edx
c0008a71:	74 03                	je     c0008a76 <src_error+0xd>
c0008a73:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a76:	c3                   	ret    

c0008a77 <src_strerror>:
c0008a77:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a7b:	31 c0                	xor    eax,eax
c0008a7d:	83 fa 17             	cmp    edx,0x17
c0008a80:	77 07                	ja     c0008a89 <src_strerror+0x12>
c0008a82:	8b 04 95 00 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf200]
c0008a89:	c3                   	ret    

c0008a8a <src_simple>:
c0008a8a:	56                   	push   esi
c0008a8b:	53                   	push   ebx
c0008a8c:	83 ec 18             	sub    esp,0x18
c0008a8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a93:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a97:	50                   	push   eax
c0008a98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aa0:	e8 46 fe ff ff       	call   c00088eb <src_new>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	85 c0                	test   eax,eax
c0008aaa:	75 06                	jne    c0008ab2 <src_simple+0x28>
c0008aac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ab0:	eb 25                	jmp    c0008ad7 <src_simple+0x4d>
c0008ab2:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab9:	89 c3                	mov    ebx,eax
c0008abb:	50                   	push   eax
c0008abc:	50                   	push   eax
c0008abd:	56                   	push   esi
c0008abe:	53                   	push   ebx
c0008abf:	e8 e1 fa ff ff       	call   c00085a5 <src_process>
c0008ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ac7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008acb:	e8 99 fa ff ff       	call   c0008569 <src_delete>
c0008ad0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ad4:	83 c4 10             	add    esp,0x10
c0008ad7:	83 c4 14             	add    esp,0x14
c0008ada:	5b                   	pop    ebx
c0008adb:	5e                   	pop    esi
c0008adc:	c3                   	ret    

c0008add <src_short_to_float_array>:
c0008add:	83 ec 0c             	sub    esp,0xc
c0008ae0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ae4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008aec:	85 c0                	test   eax,eax
c0008aee:	74 0f                	je     c0008aff <src_short_to_float_array+0x22>
c0008af0:	48                   	dec    eax
c0008af1:	d9 05 84 0e 02 c0    	fld    DWORD PTR ds:0xc0020e84
c0008af7:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008afa:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008afd:	eb ed                	jmp    c0008aec <src_short_to_float_array+0xf>
c0008aff:	83 c4 0c             	add    esp,0xc
c0008b02:	c3                   	ret    

c0008b03 <src_float_to_short_array>:
c0008b03:	56                   	push   esi
c0008b04:	53                   	push   ebx
c0008b05:	52                   	push   edx
c0008b06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b0e:	85 db                	test   ebx,ebx
c0008b10:	74 51                	je     c0008b63 <src_float_to_short_array+0x60>
c0008b12:	4b                   	dec    ebx
c0008b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b17:	d9 05 88 0e 02 c0    	fld    DWORD PTR ds:0xc0020e88
c0008b1d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b20:	dc 15 78 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e78
c0008b26:	df e0                	fnstsw ax
c0008b28:	9e                   	sahf   
c0008b29:	72 0a                	jb     c0008b35 <src_float_to_short_array+0x32>
c0008b2b:	dd d8                	fstp   st(0)
c0008b2d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b33:	eb d9                	jmp    c0008b0e <src_float_to_short_array+0xb>
c0008b35:	d9 05 8c 0e 02 c0    	fld    DWORD PTR ds:0xc0020e8c
c0008b3b:	d8 d9                	fcomp  st(1)
c0008b3d:	df e0                	fnstsw ax
c0008b3f:	9e                   	sahf   
c0008b40:	72 0a                	jb     c0008b4c <src_float_to_short_array+0x49>
c0008b42:	dd d8                	fstp   st(0)
c0008b44:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b4a:	eb c2                	jmp    c0008b0e <src_float_to_short_array+0xb>
c0008b4c:	83 ec 10             	sub    esp,0x10
c0008b4f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b52:	e8 d9 6b 01 00       	call   c001f730 <lrint>
c0008b57:	83 c4 10             	add    esp,0x10
c0008b5a:	c1 f8 10             	sar    eax,0x10
c0008b5d:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b61:	eb ab                	jmp    c0008b0e <src_float_to_short_array+0xb>
c0008b63:	58                   	pop    eax
c0008b64:	5b                   	pop    ebx
c0008b65:	5e                   	pop    esi
c0008b66:	c3                   	ret    

c0008b67 <src_int_to_float_array>:
c0008b67:	83 ec 0c             	sub    esp,0xc
c0008b6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b76:	85 c0                	test   eax,eax
c0008b78:	74 0f                	je     c0008b89 <src_int_to_float_array+0x22>
c0008b7a:	48                   	dec    eax
c0008b7b:	d9 05 90 0e 02 c0    	fld    DWORD PTR ds:0xc0020e90
c0008b81:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b84:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b87:	eb ed                	jmp    c0008b76 <src_int_to_float_array+0xf>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	c3                   	ret    

c0008b8d <src_float_to_int_array>:
c0008b8d:	56                   	push   esi
c0008b8e:	53                   	push   ebx
c0008b8f:	52                   	push   edx
c0008b90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b98:	85 db                	test   ebx,ebx
c0008b9a:	74 4f                	je     c0008beb <src_float_to_int_array+0x5e>
c0008b9c:	4b                   	dec    ebx
c0008b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ba1:	d9 05 88 0e 02 c0    	fld    DWORD PTR ds:0xc0020e88
c0008ba7:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008baa:	dc 15 78 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e78
c0008bb0:	df e0                	fnstsw ax
c0008bb2:	9e                   	sahf   
c0008bb3:	72 0b                	jb     c0008bc0 <src_float_to_int_array+0x33>
c0008bb5:	dd d8                	fstp   st(0)
c0008bb7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bbe:	eb d8                	jmp    c0008b98 <src_float_to_int_array+0xb>
c0008bc0:	d9 05 8c 0e 02 c0    	fld    DWORD PTR ds:0xc0020e8c
c0008bc6:	d8 d9                	fcomp  st(1)
c0008bc8:	df e0                	fnstsw ax
c0008bca:	9e                   	sahf   
c0008bcb:	72 0b                	jb     c0008bd8 <src_float_to_int_array+0x4b>
c0008bcd:	dd d8                	fstp   st(0)
c0008bcf:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bd6:	eb c0                	jmp    c0008b98 <src_float_to_int_array+0xb>
c0008bd8:	83 ec 10             	sub    esp,0x10
c0008bdb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bde:	e8 4d 6b 01 00       	call   c001f730 <lrint>
c0008be3:	83 c4 10             	add    esp,0x10
c0008be6:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be9:	eb ad                	jmp    c0008b98 <src_float_to_int_array+0xb>
c0008beb:	58                   	pop    eax
c0008bec:	5b                   	pop    ebx
c0008bed:	5e                   	pop    esi
c0008bee:	c3                   	ret    

c0008bef <is_bad_src_ratio>:
c0008bef:	83 ec 0c             	sub    esp,0xc
c0008bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c01:	dd 04 24             	fld    QWORD PTR [esp]
c0008c04:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c0008c0a:	de d9                	fcompp 
c0008c0c:	df e0                	fnstsw ax
c0008c0e:	f6 c4 45             	test   ah,0x45
c0008c11:	74 10                	je     c0008c23 <is_bad_src_ratio+0x34>
c0008c13:	dd 04 24             	fld    QWORD PTR [esp]
c0008c16:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0008c1c:	df e0                	fnstsw ax
c0008c1e:	f6 c4 45             	test   ah,0x45
c0008c21:	75 07                	jne    c0008c2a <is_bad_src_ratio+0x3b>
c0008c23:	b8 01 00 00 00       	mov    eax,0x1
c0008c28:	eb 05                	jmp    c0008c2f <is_bad_src_ratio+0x40>
c0008c2a:	b8 00 00 00 00       	mov    eax,0x0
c0008c2f:	83 c4 0c             	add    esp,0xc
c0008c32:	c3                   	ret    

c0008c33 <fmod_one>:
c0008c33:	83 ec 2c             	sub    esp,0x2c
c0008c36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c46:	83 ec 08             	sub    esp,0x8
c0008c49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c51:	e8 da 6a 01 00       	call   c001f730 <lrint>
c0008c56:	83 c4 10             	add    esp,0x10
c0008c59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c5d:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c61:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c65:	de e1                	fsubrp st(1),st
c0008c67:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c6b:	d9 ee                	fldz   
c0008c6d:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c71:	df e0                	fnstsw ax
c0008c73:	f6 c4 45             	test   ah,0x45
c0008c76:	75 0a                	jne    c0008c82 <fmod_one+0x4f>
c0008c78:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7c:	d9 e8                	fld1   
c0008c7e:	de c1                	faddp  st(1),st
c0008c80:	eb 04                	jmp    c0008c86 <fmod_one+0x53>
c0008c82:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c86:	83 c4 2c             	add    esp,0x2c
c0008c89:	c3                   	ret    

c0008c8a <linear_vari_process>:
c0008c8a:	55                   	push   ebp
c0008c8b:	57                   	push   edi
c0008c8c:	56                   	push   esi
c0008c8d:	53                   	push   ebx
c0008c8e:	83 ec 2c             	sub    esp,0x2c
c0008c91:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c95:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c99:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ca1:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ca5:	0f 8e 5a 02 00 00    	jle    c0008f05 <linear_vari_process+0x27b>
c0008cab:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cae:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cb6:	85 db                	test   ebx,ebx
c0008cb8:	0f 84 47 02 00 00    	je     c0008f05 <linear_vari_process+0x27b>
c0008cbe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cc1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cc5:	74 19                	je     c0008ce0 <linear_vari_process+0x56>
c0008cc7:	31 d2                	xor    edx,edx
c0008cc9:	39 c2                	cmp    edx,eax
c0008ccb:	7d 0c                	jge    c0008cd9 <linear_vari_process+0x4f>
c0008ccd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ccf:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cd2:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008cd6:	42                   	inc    edx
c0008cd7:	eb f0                	jmp    c0008cc9 <linear_vari_process+0x3f>
c0008cd9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ce0:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ce3:	0f af d0             	imul   edx,eax
c0008ce6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce9:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ced:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008cf4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cf7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cfe:	dd 07                	fld    QWORD PTR [edi]
c0008d00:	dd 14 24             	fst    QWORD PTR [esp]
c0008d03:	50                   	push   eax
c0008d04:	50                   	push   eax
c0008d05:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d08:	e8 e2 fe ff ff       	call   c0008bef <is_bad_src_ratio>
c0008d0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d11:	5a                   	pop    edx
c0008d12:	59                   	pop    ecx
c0008d13:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d18:	0f 85 df 01 00 00    	jne    c0008efd <linear_vari_process+0x273>
c0008d1e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d21:	d9 e8                	fld1   
c0008d23:	d8 d1                	fcom   st(1)
c0008d25:	df e0                	fnstsw ax
c0008d27:	9e                   	sahf   
c0008d28:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d2c:	0f 86 97 00 00 00    	jbe    c0008dc9 <linear_vari_process+0x13f>
c0008d32:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d35:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d38:	0f 8d 8b 00 00 00    	jge    c0008dc9 <linear_vari_process+0x13f>
c0008d3e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d42:	d8 c1                	fadd   st,st(1)
c0008d44:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d47:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d4a:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d4d:	df e0                	fnstsw ax
c0008d4f:	9e                   	sahf   
c0008d50:	73 77                	jae    c0008dc9 <linear_vari_process+0x13f>
c0008d52:	85 d2                	test   edx,edx
c0008d54:	7e 36                	jle    c0008d8c <linear_vari_process+0x102>
c0008d56:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d5a:	dd 07                	fld    QWORD PTR [edi]
c0008d5c:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d5f:	83 ec 10             	sub    esp,0x10
c0008d62:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d65:	e8 a6 69 01 00       	call   c001f710 <fabs>
c0008d6a:	83 c4 10             	add    esp,0x10
c0008d6d:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c0008d73:	df e0                	fnstsw ax
c0008d75:	9e                   	sahf   
c0008d76:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d7a:	76 10                	jbe    c0008d8c <linear_vari_process+0x102>
c0008d7c:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d7f:	dc 27                	fsub   QWORD PTR [edi]
c0008d81:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d84:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d87:	dc 07                	fadd   QWORD PTR [edi]
c0008d89:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d8c:	31 c0                	xor    eax,eax
c0008d8e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d91:	7e 1f                	jle    c0008db2 <linear_vari_process+0x128>
c0008d93:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d95:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d98:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d9c:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008da0:	d8 e1                	fsub   st,st(1)
c0008da2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008da5:	40                   	inc    eax
c0008da6:	d8 ca                	fmul   st,st(2)
c0008da8:	de c1                	faddp  st(1),st
c0008daa:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dad:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008db0:	eb dc                	jmp    c0008d8e <linear_vari_process+0x104>
c0008db2:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008db6:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db9:	de c1                	faddp  st(1),st
c0008dbb:	e9 61 ff ff ff       	jmp    c0008d21 <linear_vari_process+0x97>
c0008dc0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dc4:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dc7:	de c1                	faddp  st(1),st
c0008dc9:	83 ec 10             	sub    esp,0x10
c0008dcc:	dd 14 24             	fst    QWORD PTR [esp]
c0008dcf:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dd3:	e8 5b fe ff ff       	call   c0008c33 <fmod_one>
c0008dd8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008ddb:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008ddf:	d8 e1                	fsub   st,st(1)
c0008de1:	d9 c9                	fxch   st(1)
c0008de3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dea:	e8 41 69 01 00       	call   c001f730 <lrint>
c0008def:	83 c4 10             	add    esp,0x10
c0008df2:	0f af e8             	imul   ebp,eax
c0008df5:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008df8:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008dfb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008dff:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e02:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e05:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e08:	0f 8d 95 00 00 00    	jge    c0008ea3 <linear_vari_process+0x219>
c0008e0e:	d9 c0                	fld    st(0)
c0008e10:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e13:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e17:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e1b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e1f:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e23:	de d9                	fcompp 
c0008e25:	df e0                	fnstsw ax
c0008e27:	9e                   	sahf   
c0008e28:	76 79                	jbe    c0008ea3 <linear_vari_process+0x219>
c0008e2a:	85 ed                	test   ebp,ebp
c0008e2c:	7e 36                	jle    c0008e64 <linear_vari_process+0x1da>
c0008e2e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e32:	dd 07                	fld    QWORD PTR [edi]
c0008e34:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e37:	83 ec 10             	sub    esp,0x10
c0008e3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e3d:	e8 ce 68 01 00       	call   c001f710 <fabs>
c0008e42:	83 c4 10             	add    esp,0x10
c0008e45:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c0008e4b:	df e0                	fnstsw ax
c0008e4d:	9e                   	sahf   
c0008e4e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e52:	76 10                	jbe    c0008e64 <linear_vari_process+0x1da>
c0008e54:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e57:	dc 27                	fsub   QWORD PTR [edi]
c0008e59:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e5c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e5f:	dc 07                	fadd   QWORD PTR [edi]
c0008e61:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e64:	31 c0                	xor    eax,eax
c0008e66:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e69:	39 c2                	cmp    edx,eax
c0008e6b:	0f 8e 4f ff ff ff    	jle    c0008dc0 <linear_vari_process+0x136>
c0008e71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e73:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e76:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e7a:	89 e9                	mov    ecx,ebp
c0008e7c:	29 d1                	sub    ecx,edx
c0008e7e:	01 c5                	add    ebp,eax
c0008e80:	89 ca                	mov    edx,ecx
c0008e82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e86:	01 c2                	add    edx,eax
c0008e88:	40                   	inc    eax
c0008e89:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e8c:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e8f:	d8 e1                	fsub   st,st(1)
c0008e91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e94:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e97:	d8 ca                	fmul   st,st(2)
c0008e99:	de c1                	faddp  st(1),st
c0008e9b:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e9e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008ea1:	eb c3                	jmp    c0008e66 <linear_vari_process+0x1dc>
c0008ea3:	39 d1                	cmp    ecx,edx
c0008ea5:	7d 13                	jge    c0008eba <linear_vari_process+0x230>
c0008ea7:	89 d0                	mov    eax,edx
c0008ea9:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008eac:	29 c8                	sub    eax,ecx
c0008eae:	99                   	cdq    
c0008eaf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eb6:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eba:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ebd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec0:	85 c0                	test   eax,eax
c0008ec2:	7f 1b                	jg     c0008edf <linear_vari_process+0x255>
c0008ec4:	dd 04 24             	fld    QWORD PTR [esp]
c0008ec7:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ecc:	99                   	cdq    
c0008ecd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ed3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ed6:	99                   	cdq    
c0008ed7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eda:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008edd:	eb 26                	jmp    c0008f05 <linear_vari_process+0x27b>
c0008edf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ee2:	31 d2                	xor    edx,edx
c0008ee4:	29 c8                	sub    eax,ecx
c0008ee6:	c1 e0 02             	shl    eax,0x2
c0008ee9:	39 d1                	cmp    ecx,edx
c0008eeb:	7e d7                	jle    c0008ec4 <linear_vari_process+0x23a>
c0008eed:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008eef:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008ef3:	83 c0 04             	add    eax,0x4
c0008ef6:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008efa:	42                   	inc    edx
c0008efb:	eb ec                	jmp    c0008ee9 <linear_vari_process+0x25f>
c0008efd:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f09:	83 c4 2c             	add    esp,0x2c
c0008f0c:	5b                   	pop    ebx
c0008f0d:	5e                   	pop    esi
c0008f0e:	5f                   	pop    edi
c0008f0f:	5d                   	pop    ebp
c0008f10:	c3                   	ret    

c0008f11 <linear_reset>:
c0008f11:	83 ec 0c             	sub    esp,0xc
c0008f14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f18:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f1b:	85 c0                	test   eax,eax
c0008f1d:	74 20                	je     c0008f3f <linear_reset+0x2e>
c0008f1f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f22:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f2c:	51                   	push   ecx
c0008f2d:	c1 e2 02             	shl    edx,0x2
c0008f30:	83 c0 1c             	add    eax,0x1c
c0008f33:	52                   	push   edx
c0008f34:	6a 00                	push   0x0
c0008f36:	50                   	push   eax
c0008f37:	e8 87 77 ff ff       	call   c00006c3 <memset>
c0008f3c:	83 c4 10             	add    esp,0x10
c0008f3f:	83 c4 0c             	add    esp,0xc
c0008f42:	c3                   	ret    

c0008f43 <linear_get_name>:
c0008f43:	31 c0                	xor    eax,eax
c0008f45:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f4a:	75 05                	jne    c0008f51 <linear_get_name+0xe>
c0008f4c:	b8 94 0e 02 c0       	mov    eax,0xc0020e94
c0008f51:	c3                   	ret    

c0008f52 <linear_get_description>:
c0008f52:	31 c0                	xor    eax,eax
c0008f54:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f59:	75 05                	jne    c0008f60 <linear_get_description+0xe>
c0008f5b:	b8 a8 0e 02 c0       	mov    eax,0xc0020ea8
c0008f60:	c3                   	ret    

c0008f61 <linear_set_converter>:
c0008f61:	53                   	push   ebx
c0008f62:	b8 0a 00 00 00       	mov    eax,0xa
c0008f67:	83 ec 08             	sub    esp,0x8
c0008f6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f6e:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f73:	75 6e                	jne    c0008fe3 <linear_set_converter+0x82>
c0008f75:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f78:	85 c0                	test   eax,eax
c0008f7a:	74 13                	je     c0008f8f <linear_set_converter+0x2e>
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	50                   	push   eax
c0008f80:	e8 6c 30 00 00       	call   c000bff1 <free>
c0008f85:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	50                   	push   eax
c0008f90:	50                   	push   eax
c0008f91:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f94:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f9b:	50                   	push   eax
c0008f9c:	6a 01                	push   0x1
c0008f9e:	e8 6e 30 00 00       	call   c000c011 <calloc>
c0008fa3:	89 c2                	mov    edx,eax
c0008fa5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	b8 01 00 00 00       	mov    eax,0x1
c0008fb0:	85 d2                	test   edx,edx
c0008fb2:	74 2f                	je     c0008fe3 <linear_set_converter+0x82>
c0008fb4:	83 ec 0c             	sub    esp,0xc
c0008fb7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fbd:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fc3:	c7 43 24 8a 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c8a
c0008fca:	c7 43 20 8a 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c8a
c0008fd1:	c7 43 28 11 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f11
c0008fd8:	53                   	push   ebx
c0008fd9:	e8 33 ff ff ff       	call   c0008f11 <linear_reset>
c0008fde:	83 c4 10             	add    esp,0x10
c0008fe1:	31 c0                	xor    eax,eax
c0008fe3:	83 c4 08             	add    esp,0x8
c0008fe6:	5b                   	pop    ebx
c0008fe7:	c3                   	ret    

c0008fe8 <is_bad_src_ratio>:
c0008fe8:	83 ec 0c             	sub    esp,0xc
c0008feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fef:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ff2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ffa:	dd 04 24             	fld    QWORD PTR [esp]
c0008ffd:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c0009003:	de d9                	fcompp 
c0009005:	df e0                	fnstsw ax
c0009007:	f6 c4 45             	test   ah,0x45
c000900a:	74 10                	je     c000901c <is_bad_src_ratio+0x34>
c000900c:	dd 04 24             	fld    QWORD PTR [esp]
c000900f:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0009015:	df e0                	fnstsw ax
c0009017:	f6 c4 45             	test   ah,0x45
c000901a:	75 07                	jne    c0009023 <is_bad_src_ratio+0x3b>
c000901c:	b8 01 00 00 00       	mov    eax,0x1
c0009021:	eb 05                	jmp    c0009028 <is_bad_src_ratio+0x40>
c0009023:	b8 00 00 00 00       	mov    eax,0x0
c0009028:	83 c4 0c             	add    esp,0xc
c000902b:	c3                   	ret    

c000902c <int_to_fp>:
c000902c:	c1 e0 0c             	shl    eax,0xc
c000902f:	c3                   	ret    

c0009030 <fp_to_int>:
c0009030:	c1 f8 0c             	sar    eax,0xc
c0009033:	c3                   	ret    

c0009034 <fp_fraction_part>:
c0009034:	25 ff 0f 00 00       	and    eax,0xfff
c0009039:	c3                   	ret    

c000903a <fp_to_double>:
c000903a:	83 ec 0c             	sub    esp,0xc
c000903d:	e8 f2 ff ff ff       	call   c0009034 <fp_fraction_part>
c0009042:	d9 05 68 10 02 c0    	fld    DWORD PTR ds:0xc0021068
c0009048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000904c:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009050:	83 c4 0c             	add    esp,0xc
c0009053:	c3                   	ret    

c0009054 <calc_output_single>:
c0009054:	55                   	push   ebp
c0009055:	57                   	push   edi
c0009056:	89 c7                	mov    edi,eax
c0009058:	56                   	push   esi
c0009059:	53                   	push   ebx
c000905a:	89 d3                	mov    ebx,edx
c000905c:	83 ec 24             	sub    esp,0x24
c000905f:	89 de                	mov    esi,ebx
c0009061:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009064:	e8 c3 ff ff ff       	call   c000902c <int_to_fp>
c0009069:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000906c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009070:	29 c8                	sub    eax,ecx
c0009072:	99                   	cdq    
c0009073:	f7 fb                	idiv   ebx
c0009075:	0f af f0             	imul   esi,eax
c0009078:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000907b:	01 ce                	add    esi,ecx
c000907d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009081:	29 c2                	sub    edx,eax
c0009083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000908a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009092:	8d 14 97             	lea    edx,[edi+edx*4]
c0009095:	89 f0                	mov    eax,esi
c0009097:	e8 9e ff ff ff       	call   c000903a <fp_to_double>
c000909c:	89 f0                	mov    eax,esi
c000909e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090a2:	e8 89 ff ff ff       	call   c0009030 <fp_to_int>
c00090a7:	83 c2 04             	add    edx,0x4
c00090aa:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090ae:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090b2:	d8 e1                	fsub   st,st(1)
c00090b4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090b8:	de c9                	fmulp  st(1),st
c00090ba:	de c1                	faddp  st(1),st
c00090bc:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090c2:	29 de                	sub    esi,ebx
c00090c4:	dc 04 24             	fadd   QWORD PTR [esp]
c00090c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090ca:	79 c9                	jns    c0009095 <calc_output_single+0x41>
c00090cc:	89 d8                	mov    eax,ebx
c00090ce:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090d2:	29 c8                	sub    eax,ecx
c00090d4:	89 c1                	mov    ecx,eax
c00090d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090da:	29 c8                	sub    eax,ecx
c00090dc:	99                   	cdq    
c00090dd:	f7 fb                	idiv   ebx
c00090df:	89 da                	mov    edx,ebx
c00090e1:	0f af d0             	imul   edx,eax
c00090e4:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090e8:	01 d1                	add    ecx,edx
c00090ea:	d9 ee                	fldz   
c00090ec:	8d 14 87             	lea    edx,[edi+eax*4]
c00090ef:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090f3:	89 c8                	mov    eax,ecx
c00090f5:	e8 40 ff ff ff       	call   c000903a <fp_to_double>
c00090fa:	89 c8                	mov    eax,ecx
c00090fc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009100:	e8 2b ff ff ff       	call   c0009030 <fp_to_int>
c0009105:	29 d9                	sub    ecx,ebx
c0009107:	83 ea 04             	sub    edx,0x4
c000910a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000910e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009112:	d8 e1                	fsub   st,st(1)
c0009114:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009118:	de c9                	fmulp  st(1),st
c000911a:	de c1                	faddp  st(1),st
c000911c:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009122:	85 c9                	test   ecx,ecx
c0009124:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009128:	de c1                	faddp  st(1),st
c000912a:	7f c3                	jg     c00090ef <calc_output_single+0x9b>
c000912c:	dd 04 24             	fld    QWORD PTR [esp]
c000912f:	de c1                	faddp  st(1),st
c0009131:	83 c4 24             	add    esp,0x24
c0009134:	5b                   	pop    ebx
c0009135:	5e                   	pop    esi
c0009136:	5f                   	pop    edi
c0009137:	5d                   	pop    ebp
c0009138:	c3                   	ret    

c0009139 <calc_output_stereo>:
c0009139:	55                   	push   ebp
c000913a:	57                   	push   edi
c000913b:	89 c7                	mov    edi,eax
c000913d:	56                   	push   esi
c000913e:	53                   	push   ebx
c000913f:	89 d3                	mov    ebx,edx
c0009141:	83 ec 44             	sub    esp,0x44
c0009144:	89 de                	mov    esi,ebx
c0009146:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009149:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000914d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009151:	e8 d6 fe ff ff       	call   c000902c <int_to_fp>
c0009156:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009159:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000915d:	29 c8                	sub    eax,ecx
c000915f:	99                   	cdq    
c0009160:	f7 fb                	idiv   ebx
c0009162:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009165:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000916d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009171:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009174:	0f af f0             	imul   esi,eax
c0009177:	0f af c2             	imul   eax,edx
c000917a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000917e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009182:	d9 ee                	fldz   
c0009184:	29 c2                	sub    edx,eax
c0009186:	01 ce                	add    esi,ecx
c0009188:	dd 1c 24             	fstp   QWORD PTR [esp]
c000918b:	8d 14 97             	lea    edx,[edi+edx*4]
c000918e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009196:	89 f0                	mov    eax,esi
c0009198:	e8 9d fe ff ff       	call   c000903a <fp_to_double>
c000919d:	89 f0                	mov    eax,esi
c000919f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091a3:	e8 88 fe ff ff       	call   c0009030 <fp_to_int>
c00091a8:	83 c2 08             	add    edx,0x8
c00091ab:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091af:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091b3:	d8 e1                	fsub   st,st(1)
c00091b5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b9:	de c9                	fmulp  st(1),st
c00091bb:	de c1                	faddp  st(1),st
c00091bd:	d9 c0                	fld    st(0)
c00091bf:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091c5:	dc 04 24             	fadd   QWORD PTR [esp]
c00091c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091cb:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091d1:	29 de                	sub    esi,ebx
c00091d3:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091db:	79 b9                	jns    c0009196 <calc_output_stereo+0x5d>
c00091dd:	89 d8                	mov    eax,ebx
c00091df:	29 c8                	sub    eax,ecx
c00091e1:	89 c1                	mov    ecx,eax
c00091e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e7:	29 c8                	sub    eax,ecx
c00091e9:	99                   	cdq    
c00091ea:	f7 fb                	idiv   ebx
c00091ec:	89 da                	mov    edx,ebx
c00091ee:	0f af d0             	imul   edx,eax
c00091f1:	40                   	inc    eax
c00091f2:	01 d1                	add    ecx,edx
c00091f4:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091fd:	d9 ee                	fldz   
c00091ff:	d9 ee                	fldz   
c0009201:	8d 14 87             	lea    edx,[edi+eax*4]
c0009204:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009208:	89 c8                	mov    eax,ecx
c000920a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000920e:	e8 27 fe ff ff       	call   c000903a <fp_to_double>
c0009213:	89 c8                	mov    eax,ecx
c0009215:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009219:	e8 12 fe ff ff       	call   c0009030 <fp_to_int>
c000921e:	29 d9                	sub    ecx,ebx
c0009220:	83 ea 08             	sub    edx,0x8
c0009223:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009227:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000922b:	d8 e1                	fsub   st,st(1)
c000922d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009231:	de c9                	fmulp  st(1),st
c0009233:	de c1                	faddp  st(1),st
c0009235:	d9 c0                	fld    st(0)
c0009237:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000923d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009241:	de c1                	faddp  st(1),st
c0009243:	d9 c9                	fxch   st(1)
c0009245:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000924b:	85 c9                	test   ecx,ecx
c000924d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009251:	de c1                	faddp  st(1),st
c0009253:	7f af                	jg     c0009204 <calc_output_stereo+0xcb>
c0009255:	dd 04 24             	fld    QWORD PTR [esp]
c0009258:	de c2                	faddp  st(2),st
c000925a:	d9 c9                	fxch   st(1)
c000925c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009260:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009264:	d9 18                	fstp   DWORD PTR [eax]
c0009266:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000926a:	de c1                	faddp  st(1),st
c000926c:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009270:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009273:	83 c4 44             	add    esp,0x44
c0009276:	5b                   	pop    ebx
c0009277:	5e                   	pop    esi
c0009278:	5f                   	pop    edi
c0009279:	5d                   	pop    ebp
c000927a:	c3                   	ret    

c000927b <calc_output_quad>:
c000927b:	55                   	push   ebp
c000927c:	57                   	push   edi
c000927d:	56                   	push   esi
c000927e:	89 c6                	mov    esi,eax
c0009280:	53                   	push   ebx
c0009281:	89 d3                	mov    ebx,edx
c0009283:	83 ec 5c             	sub    esp,0x5c
c0009286:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009289:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000928d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009291:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009294:	e8 93 fd ff ff       	call   c000902c <int_to_fp>
c0009299:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000929c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092a0:	29 c8                	sub    eax,ecx
c00092a2:	99                   	cdq    
c00092a3:	f7 fb                	idiv   ebx
c00092a5:	89 da                	mov    edx,ebx
c00092a7:	0f af d0             	imul   edx,eax
c00092aa:	01 ca                	add    edx,ecx
c00092ac:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092b0:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092b7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092ba:	0f af c2             	imul   eax,edx
c00092bd:	d9 ee                	fldz   
c00092bf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092c7:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092cb:	29 c2                	sub    edx,eax
c00092cd:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092d1:	8d 14 96             	lea    edx,[esi+edx*4]
c00092d4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092d8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	e8 55 fd ff ff       	call   c000903a <fp_to_double>
c00092e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e9:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ed:	e8 3e fd ff ff       	call   c0009030 <fp_to_int>
c00092f2:	83 c2 10             	add    edx,0x10
c00092f5:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f9:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092fd:	d8 e1                	fsub   st,st(1)
c00092ff:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009303:	de c9                	fmulp  st(1),st
c0009305:	de c1                	faddp  st(1),st
c0009307:	d9 c0                	fld    st(0)
c0009309:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000930f:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009313:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009317:	d9 c0                	fld    st(0)
c0009319:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000931f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009323:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009327:	d9 c0                	fld    st(0)
c0009329:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000932f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009333:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009337:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000933d:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009341:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009345:	de c1                	faddp  st(1),st
c0009347:	79 8f                	jns    c00092d8 <calc_output_quad+0x5d>
c0009349:	89 d8                	mov    eax,ebx
c000934b:	29 c8                	sub    eax,ecx
c000934d:	89 c1                	mov    ecx,eax
c000934f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009353:	29 c8                	sub    eax,ecx
c0009355:	99                   	cdq    
c0009356:	f7 fb                	idiv   ebx
c0009358:	89 da                	mov    edx,ebx
c000935a:	0f af d0             	imul   edx,eax
c000935d:	40                   	inc    eax
c000935e:	01 d1                	add    ecx,edx
c0009360:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009365:	d9 ee                	fldz   
c0009367:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000936b:	d9 ee                	fldz   
c000936d:	d9 ee                	fldz   
c000936f:	d9 ee                	fldz   
c0009371:	8d 14 86             	lea    edx,[esi+eax*4]
c0009374:	eb 0a                	jmp    c0009380 <calc_output_quad+0x105>
c0009376:	d9 cc                	fxch   st(4)
c0009378:	d9 ca                	fxch   st(2)
c000937a:	d9 c9                	fxch   st(1)
c000937c:	d9 cb                	fxch   st(3)
c000937e:	d9 c9                	fxch   st(1)
c0009380:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009384:	d9 c9                	fxch   st(1)
c0009386:	89 c8                	mov    eax,ecx
c0009388:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000938c:	d9 c9                	fxch   st(1)
c000938e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009392:	d9 c9                	fxch   st(1)
c0009394:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009398:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000939c:	e8 99 fc ff ff       	call   c000903a <fp_to_double>
c00093a1:	89 c8                	mov    eax,ecx
c00093a3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093a7:	e8 84 fc ff ff       	call   c0009030 <fp_to_int>
c00093ac:	29 d9                	sub    ecx,ebx
c00093ae:	83 ea 10             	sub    edx,0x10
c00093b1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093b5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b9:	d8 e1                	fsub   st,st(1)
c00093bb:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093bf:	de c9                	fmulp  st(1),st
c00093c1:	de c1                	faddp  st(1),st
c00093c3:	d9 c0                	fld    st(0)
c00093c5:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093cb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093cf:	de c1                	faddp  st(1),st
c00093d1:	d9 c1                	fld    st(1)
c00093d3:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093dd:	de c1                	faddp  st(1),st
c00093df:	d9 c2                	fld    st(2)
c00093e1:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093e7:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093eb:	de c1                	faddp  st(1),st
c00093ed:	d9 cb                	fxch   st(3)
c00093ef:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093f5:	85 c9                	test   ecx,ecx
c00093f7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093fb:	de c1                	faddp  st(1),st
c00093fd:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009401:	0f 8f 6f ff ff ff    	jg     c0009376 <calc_output_quad+0xfb>
c0009407:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000940b:	de c4                	faddp  st(4),st
c000940d:	d9 cb                	fxch   st(3)
c000940f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009412:	d9 1f                	fstp   DWORD PTR [edi]
c0009414:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009418:	de c2                	faddp  st(2),st
c000941a:	d9 c9                	fxch   st(1)
c000941c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000941f:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009422:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009426:	de c3                	faddp  st(3),st
c0009428:	d9 ca                	fxch   st(2)
c000942a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942d:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009430:	de c1                	faddp  st(1),st
c0009432:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009435:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009438:	83 c4 5c             	add    esp,0x5c
c000943b:	5b                   	pop    ebx
c000943c:	5e                   	pop    esi
c000943d:	5f                   	pop    edi
c000943e:	5d                   	pop    ebp
c000943f:	c3                   	ret    

c0009440 <calc_output_hex>:
c0009440:	55                   	push   ebp
c0009441:	57                   	push   edi
c0009442:	89 c7                	mov    edi,eax
c0009444:	56                   	push   esi
c0009445:	53                   	push   ebx
c0009446:	89 d3                	mov    ebx,edx
c0009448:	83 ec 7c             	sub    esp,0x7c
c000944b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000944e:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009455:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000945c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000945f:	e8 c8 fb ff ff       	call   c000902c <int_to_fp>
c0009464:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009467:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000946b:	29 c8                	sub    eax,ecx
c000946d:	99                   	cdq    
c000946e:	f7 fb                	idiv   ebx
c0009470:	89 da                	mov    edx,ebx
c0009472:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c000947a:	0f af d0             	imul   edx,eax
c000947d:	01 ca                	add    edx,ecx
c000947f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009487:	d9 ee                	fldz   
c0009489:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000948d:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009490:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009494:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009497:	0f af c2             	imul   eax,edx
c000949a:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c000949e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00094a2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094a6:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094aa:	29 c2                	sub    edx,eax
c00094ac:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094b0:	8d 14 97             	lea    edx,[edi+edx*4]
c00094b3:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094b7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	e8 76 fb ff ff       	call   c000903a <fp_to_double>
c00094c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c8:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094cc:	e8 5f fb ff ff       	call   c0009030 <fp_to_int>
c00094d1:	83 c2 18             	add    edx,0x18
c00094d4:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094d8:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094dc:	d8 e1                	fsub   st,st(1)
c00094de:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094e2:	de c9                	fmulp  st(1),st
c00094e4:	de c1                	faddp  st(1),st
c00094e6:	d9 c0                	fld    st(0)
c00094e8:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094ee:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094f2:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094f6:	d9 c0                	fld    st(0)
c00094f8:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094fe:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009502:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009506:	d9 c0                	fld    st(0)
c0009508:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000950e:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009512:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009516:	d9 c0                	fld    st(0)
c0009518:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000951e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009522:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009526:	d9 c0                	fld    st(0)
c0009528:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000952e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009532:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009536:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000953c:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009540:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009544:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009548:	0f 89 6d ff ff ff    	jns    c00094bb <calc_output_hex+0x7b>
c000954e:	89 d8                	mov    eax,ebx
c0009550:	29 c8                	sub    eax,ecx
c0009552:	89 c1                	mov    ecx,eax
c0009554:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009558:	29 c8                	sub    eax,ecx
c000955a:	99                   	cdq    
c000955b:	f7 fb                	idiv   ebx
c000955d:	89 da                	mov    edx,ebx
c000955f:	0f af d0             	imul   edx,eax
c0009562:	40                   	inc    eax
c0009563:	01 d1                	add    ecx,edx
c0009565:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000956a:	d9 ee                	fldz   
c000956c:	d9 ee                	fldz   
c000956e:	d9 ee                	fldz   
c0009570:	d9 ca                	fxch   st(2)
c0009572:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009576:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c000957a:	d9 ee                	fldz   
c000957c:	8d 14 87             	lea    edx,[edi+eax*4]
c000957f:	d9 ee                	fldz   
c0009581:	d9 ca                	fxch   st(2)
c0009583:	eb 0a                	jmp    c000958f <calc_output_hex+0x14f>
c0009585:	d9 c9                	fxch   st(1)
c0009587:	d9 cc                	fxch   st(4)
c0009589:	d9 cb                	fxch   st(3)
c000958b:	d9 ca                	fxch   st(2)
c000958d:	d9 c9                	fxch   st(1)
c000958f:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009593:	89 c8                	mov    eax,ecx
c0009595:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009599:	d9 ca                	fxch   st(2)
c000959b:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000959f:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095a3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095a7:	e8 8e fa ff ff       	call   c000903a <fp_to_double>
c00095ac:	89 c8                	mov    eax,ecx
c00095ae:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095b2:	e8 79 fa ff ff       	call   c0009030 <fp_to_int>
c00095b7:	29 d9                	sub    ecx,ebx
c00095b9:	83 ea 18             	sub    edx,0x18
c00095bc:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095c0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095c4:	d8 e1                	fsub   st,st(1)
c00095c6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095ca:	de c9                	fmulp  st(1),st
c00095cc:	de c1                	faddp  st(1),st
c00095ce:	d9 c0                	fld    st(0)
c00095d0:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095d6:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095da:	de c1                	faddp  st(1),st
c00095dc:	d9 c1                	fld    st(1)
c00095de:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095e4:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095e8:	de c1                	faddp  st(1),st
c00095ea:	d9 c2                	fld    st(2)
c00095ec:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095f2:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095fa:	d9 c2                	fld    st(2)
c00095fc:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009602:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009606:	de c1                	faddp  st(1),st
c0009608:	d9 c3                	fld    st(3)
c000960a:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009610:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009614:	de c1                	faddp  st(1),st
c0009616:	d9 cc                	fxch   st(4)
c0009618:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000961e:	85 c9                	test   ecx,ecx
c0009620:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009624:	de c1                	faddp  st(1),st
c0009626:	0f 8f 59 ff ff ff    	jg     c0009585 <calc_output_hex+0x145>
c000962c:	d9 cb                	fxch   st(3)
c000962e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009632:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009635:	d9 1e                	fstp   DWORD PTR [esi]
c0009637:	d9 c9                	fxch   st(1)
c0009639:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000963d:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009640:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009647:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000964b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964e:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009651:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009655:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009658:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c000965b:	d9 c9                	fxch   st(1)
c000965d:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009661:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009664:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009667:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000966b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966e:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009671:	83 c4 7c             	add    esp,0x7c
c0009674:	5b                   	pop    ebx
c0009675:	5e                   	pop    esi
c0009676:	5f                   	pop    edi
c0009677:	5d                   	pop    ebp
c0009678:	c3                   	ret    

c0009679 <sinc_reset>:
c0009679:	56                   	push   esi
c000967a:	53                   	push   ebx
c000967b:	51                   	push   ecx
c000967c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009680:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009683:	85 db                	test   ebx,ebx
c0009685:	74 51                	je     c00096d8 <sinc_reset+0x5f>
c0009687:	d9 ee                	fldz   
c0009689:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009690:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009697:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c000969a:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096a1:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096a7:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096aa:	52                   	push   edx
c00096ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096ae:	c1 e0 02             	shl    eax,0x2
c00096b1:	50                   	push   eax
c00096b2:	6a 00                	push   0x0
c00096b4:	56                   	push   esi
c00096b5:	e8 09 70 ff ff       	call   c00006c3 <memset>
c00096ba:	83 c4 0c             	add    esp,0xc
c00096bd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096c0:	c1 e0 02             	shl    eax,0x2
c00096c3:	50                   	push   eax
c00096c4:	68 aa 00 00 00       	push   0xaa
c00096c9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096cc:	8d 04 86             	lea    eax,[esi+eax*4]
c00096cf:	50                   	push   eax
c00096d0:	e8 ee 6f ff ff       	call   c00006c3 <memset>
c00096d5:	83 c4 10             	add    esp,0x10
c00096d8:	58                   	pop    eax
c00096d9:	5b                   	pop    ebx
c00096da:	5e                   	pop    esi
c00096db:	c3                   	ret    

c00096dc <calc_output_multi>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	8d 78 44             	lea    edi,[eax+0x44]
c00096e1:	56                   	push   esi
c00096e2:	89 c6                	mov    esi,eax
c00096e4:	53                   	push   ebx
c00096e5:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096eb:	83 ec 4c             	sub    esp,0x4c
c00096ee:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096f6:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096fd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009701:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009705:	e8 22 f9 ff ff       	call   c000902c <int_to_fp>
c000970a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000970e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009712:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009716:	99                   	cdq    
c0009717:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000971b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000971f:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009722:	0f af d0             	imul   edx,eax
c0009725:	0f af c3             	imul   eax,ebx
c0009728:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000972c:	29 c5                	sub    ebp,eax
c000972e:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009735:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009739:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000973d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009741:	52                   	push   edx
c0009742:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009746:	6a 00                	push   0x0
c0009748:	57                   	push   edi
c0009749:	e8 75 6f ff ff       	call   c00006c3 <memset>
c000974e:	83 c4 10             	add    esp,0x10
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	e8 e0 f8 ff ff       	call   c000903a <fp_to_double>
c000975a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000975e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009762:	e8 c9 f8 ff ff       	call   c0009030 <fp_to_int>
c0009767:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000976a:	89 d9                	mov    ecx,ebx
c000976c:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000976f:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009773:	d8 e1                	fsub   st,st(1)
c0009775:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009779:	de c9                	fmulp  st(1),st
c000977b:	de c1                	faddp  st(1),st
c000977d:	89 c8                	mov    eax,ecx
c000977f:	bd 08 00 00 00       	mov    ebp,0x8
c0009784:	99                   	cdq    
c0009785:	f7 fd                	idiv   ebp
c0009787:	4a                   	dec    edx
c0009788:	83 fa 06             	cmp    edx,0x6
c000978b:	77 07                	ja     c0009794 <calc_output_multi+0xb8>
c000978d:	ff 24 95 e0 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf120]
c0009794:	49                   	dec    ecx
c0009795:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009799:	d9 c0                	fld    st(0)
c000979b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097a2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097a5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a9:	dc 00                	fadd   QWORD PTR [eax]
c00097ab:	dd 18                	fstp   QWORD PTR [eax]
c00097ad:	49                   	dec    ecx
c00097ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097b2:	d9 c0                	fld    st(0)
c00097b4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097bb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097be:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c2:	dc 00                	fadd   QWORD PTR [eax]
c00097c4:	dd 18                	fstp   QWORD PTR [eax]
c00097c6:	49                   	dec    ecx
c00097c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097cb:	d9 c0                	fld    st(0)
c00097cd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097d7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097db:	dc 00                	fadd   QWORD PTR [eax]
c00097dd:	dd 18                	fstp   QWORD PTR [eax]
c00097df:	49                   	dec    ecx
c00097e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097e4:	d9 c0                	fld    st(0)
c00097e6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ed:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097f0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f4:	dc 00                	fadd   QWORD PTR [eax]
c00097f6:	dd 18                	fstp   QWORD PTR [eax]
c00097f8:	49                   	dec    ecx
c00097f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097fd:	d9 c0                	fld    st(0)
c00097ff:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009806:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009809:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000980d:	dc 00                	fadd   QWORD PTR [eax]
c000980f:	dd 18                	fstp   QWORD PTR [eax]
c0009811:	49                   	dec    ecx
c0009812:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009816:	d9 c0                	fld    st(0)
c0009818:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009822:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009826:	dc 00                	fadd   QWORD PTR [eax]
c0009828:	dd 18                	fstp   QWORD PTR [eax]
c000982a:	49                   	dec    ecx
c000982b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000982f:	d9 c0                	fld    st(0)
c0009831:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009838:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000983b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983f:	dc 00                	fadd   QWORD PTR [eax]
c0009841:	dd 18                	fstp   QWORD PTR [eax]
c0009843:	49                   	dec    ecx
c0009844:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009848:	d9 c0                	fld    st(0)
c000984a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009851:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009854:	85 c9                	test   ecx,ecx
c0009856:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000985a:	dc 00                	fadd   QWORD PTR [eax]
c000985c:	dd 18                	fstp   QWORD PTR [eax]
c000985e:	0f 8f 19 ff ff ff    	jg     c000977d <calc_output_multi+0xa1>
c0009864:	dd d8                	fstp   st(0)
c0009866:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000986a:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000986e:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009872:	0f 89 d9 fe ff ff    	jns    c0009751 <calc_output_multi+0x75>
c0009878:	89 d1                	mov    ecx,edx
c000987a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000987e:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009882:	29 c8                	sub    eax,ecx
c0009884:	99                   	cdq    
c0009885:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009889:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000988d:	0f af d0             	imul   edx,eax
c0009890:	40                   	inc    eax
c0009891:	01 d1                	add    ecx,edx
c0009893:	0f af c3             	imul   eax,ebx
c0009896:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009899:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000989d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098a1:	50                   	push   eax
c00098a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098a6:	6a 00                	push   0x0
c00098a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098ac:	e8 12 6e ff ff       	call   c00006c3 <memset>
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	e8 7d f7 ff ff       	call   c000903a <fp_to_double>
c00098bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098c1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098c5:	e8 66 f7 ff ff       	call   c0009030 <fp_to_int>
c00098ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098cd:	89 d9                	mov    ecx,ebx
c00098cf:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098d2:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098d6:	d8 e1                	fsub   st,st(1)
c00098d8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098dc:	de c9                	fmulp  st(1),st
c00098de:	de c1                	faddp  st(1),st
c00098e0:	89 c8                	mov    eax,ecx
c00098e2:	bd 08 00 00 00       	mov    ebp,0x8
c00098e7:	99                   	cdq    
c00098e8:	f7 fd                	idiv   ebp
c00098ea:	4a                   	dec    edx
c00098eb:	83 fa 06             	cmp    edx,0x6
c00098ee:	77 07                	ja     c00098f7 <calc_output_multi+0x21b>
c00098f0:	ff 24 95 fc 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf104]
c00098f7:	49                   	dec    ecx
c00098f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009907:	d9 c0                	fld    st(0)
c0009909:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000990d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009910:	dc 00                	fadd   QWORD PTR [eax]
c0009912:	dd 18                	fstp   QWORD PTR [eax]
c0009914:	49                   	dec    ecx
c0009915:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000991d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009924:	d9 c0                	fld    st(0)
c0009926:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000992a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000992d:	dc 00                	fadd   QWORD PTR [eax]
c000992f:	dd 18                	fstp   QWORD PTR [eax]
c0009931:	49                   	dec    ecx
c0009932:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009936:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000993a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009941:	d9 c0                	fld    st(0)
c0009943:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009947:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000994a:	dc 00                	fadd   QWORD PTR [eax]
c000994c:	dd 18                	fstp   QWORD PTR [eax]
c000994e:	49                   	dec    ecx
c000994f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009957:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000995e:	d9 c0                	fld    st(0)
c0009960:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009964:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009967:	dc 00                	fadd   QWORD PTR [eax]
c0009969:	dd 18                	fstp   QWORD PTR [eax]
c000996b:	49                   	dec    ecx
c000996c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009974:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000997b:	d9 c0                	fld    st(0)
c000997d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009981:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009984:	dc 00                	fadd   QWORD PTR [eax]
c0009986:	dd 18                	fstp   QWORD PTR [eax]
c0009988:	49                   	dec    ecx
c0009989:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000998d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009991:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009998:	d9 c0                	fld    st(0)
c000999a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000999e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099a1:	dc 00                	fadd   QWORD PTR [eax]
c00099a3:	dd 18                	fstp   QWORD PTR [eax]
c00099a5:	49                   	dec    ecx
c00099a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ae:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099b5:	d9 c0                	fld    st(0)
c00099b7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099bb:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099be:	dc 00                	fadd   QWORD PTR [eax]
c00099c0:	dd 18                	fstp   QWORD PTR [eax]
c00099c2:	49                   	dec    ecx
c00099c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	85 c9                	test   ecx,ecx
c00099cd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099d4:	d9 c0                	fld    st(0)
c00099d6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099da:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099dd:	dc 00                	fadd   QWORD PTR [eax]
c00099df:	dd 18                	fstp   QWORD PTR [eax]
c00099e1:	0f 8f f9 fe ff ff    	jg     c00098e0 <calc_output_multi+0x204>
c00099e7:	dd d8                	fstp   st(0)
c00099e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ed:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099f1:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099f5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099fa:	0f 8f b4 fe ff ff    	jg     c00098b4 <calc_output_multi+0x1d8>
c0009a00:	b9 08 00 00 00       	mov    ecx,0x8
c0009a05:	89 d8                	mov    eax,ebx
c0009a07:	99                   	cdq    
c0009a08:	f7 f9                	idiv   ecx
c0009a0a:	4a                   	dec    edx
c0009a0b:	83 fa 06             	cmp    edx,0x6
c0009a0e:	77 07                	ja     c0009a17 <calc_output_multi+0x33b>
c0009a10:	ff 24 95 18 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e8]
c0009a17:	4b                   	dec    ebx
c0009a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a1c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a1f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a22:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a26:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a2a:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2d:	4b                   	dec    ebx
c0009a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a32:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a35:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a38:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a3c:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a40:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a43:	4b                   	dec    ebx
c0009a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a48:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a4b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a52:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a56:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a59:	4b                   	dec    ebx
c0009a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a5e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a61:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a68:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a6c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a6f:	4b                   	dec    ebx
c0009a70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a74:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a77:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a7a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7e:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a82:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a85:	4b                   	dec    ebx
c0009a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a8a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a8d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a90:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a94:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a98:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a9b:	4b                   	dec    ebx
c0009a9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aa0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aa3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aa6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aaa:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aae:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ab1:	4b                   	dec    ebx
c0009ab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab6:	85 db                	test   ebx,ebx
c0009ab8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009abb:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009abe:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ac2:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ac6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac9:	0f 8f 36 ff ff ff    	jg     c0009a05 <calc_output_multi+0x329>
c0009acf:	83 c4 4c             	add    esp,0x4c
c0009ad2:	5b                   	pop    ebx
c0009ad3:	5e                   	pop    esi
c0009ad4:	5f                   	pop    edi
c0009ad5:	5d                   	pop    ebp
c0009ad6:	c3                   	ret    

c0009ad7 <double_to_fp>:
c0009ad7:	d9 05 6c 10 02 c0    	fld    DWORD PTR ds:0xc002106c
c0009add:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ae1:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009ae5:	e9 46 5c 01 00       	jmp    c001f730 <lrint>

c0009aea <fmod_one>:
c0009aea:	83 ec 2c             	sub    esp,0x2c
c0009aed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009af1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009afd:	83 ec 08             	sub    esp,0x8
c0009b00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b08:	e8 23 5c 01 00       	call   c001f730 <lrint>
c0009b0d:	83 c4 10             	add    esp,0x10
c0009b10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b14:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b18:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b1c:	de e1                	fsubrp st(1),st
c0009b1e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b22:	d9 ee                	fldz   
c0009b24:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b28:	df e0                	fnstsw ax
c0009b2a:	f6 c4 45             	test   ah,0x45
c0009b2d:	75 0a                	jne    c0009b39 <fmod_one+0x4f>
c0009b2f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b33:	d9 e8                	fld1   
c0009b35:	de c1                	faddp  st(1),st
c0009b37:	eb 04                	jmp    c0009b3d <fmod_one+0x53>
c0009b39:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b3d:	83 c4 2c             	add    esp,0x2c
c0009b40:	c3                   	ret    

c0009b41 <prepare_data>:
c0009b41:	55                   	push   ebp
c0009b42:	57                   	push   edi
c0009b43:	56                   	push   esi
c0009b44:	53                   	push   ebx
c0009b45:	83 ec 1c             	sub    esp,0x1c
c0009b48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b4c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b50:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b54:	0f 89 57 01 00 00    	jns    c0009cb1 <prepare_data+0x170>
c0009b5a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b60:	85 d2                	test   edx,edx
c0009b62:	75 0d                	jne    c0009b71 <prepare_data+0x30>
c0009b64:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b67:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b6a:	29 d0                	sub    eax,edx
c0009b6c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b6f:	eb 44                	jmp    c0009bb5 <prepare_data+0x74>
c0009b71:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b74:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b77:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b7a:	39 c1                	cmp    ecx,eax
c0009b7c:	7d 04                	jge    c0009b82 <prepare_data+0x41>
c0009b7e:	29 d0                	sub    eax,edx
c0009b80:	eb 2d                	jmp    c0009baf <prepare_data+0x6e>
c0009b82:	29 d7                	sub    edi,edx
c0009b84:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b8a:	01 f7                	add    edi,esi
c0009b8c:	29 f2                	sub    edx,esi
c0009b8e:	51                   	push   ecx
c0009b8f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b96:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b99:	51                   	push   ecx
c0009b9a:	52                   	push   edx
c0009b9b:	50                   	push   eax
c0009b9c:	e8 b4 6a ff ff       	call   c0000655 <memmove>
c0009ba1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ba4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ba7:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009baa:	29 f0                	sub    eax,esi
c0009bac:	83 c4 10             	add    esp,0x10
c0009baf:	29 f0                	sub    eax,esi
c0009bb1:	79 02                	jns    c0009bb5 <prepare_data+0x74>
c0009bb3:	31 c0                	xor    eax,eax
c0009bb5:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bb8:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bbb:	29 ef                	sub    edi,ebp
c0009bbd:	39 c7                	cmp    edi,eax
c0009bbf:	7e 02                	jle    c0009bc3 <prepare_data+0x82>
c0009bc1:	89 c7                	mov    edi,eax
c0009bc3:	89 f8                	mov    eax,edi
c0009bc5:	99                   	cdq    
c0009bc6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc9:	29 d7                	sub    edi,edx
c0009bcb:	b8 15 00 00 00       	mov    eax,0x15
c0009bd0:	0f 88 dd 00 00 00    	js     c0009cb3 <prepare_data+0x172>
c0009bd6:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd9:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bdc:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bdf:	0f 8f ce 00 00 00    	jg     c0009cb3 <prepare_data+0x172>
c0009be5:	50                   	push   eax
c0009be6:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bed:	50                   	push   eax
c0009bee:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009bf4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bfa:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bfd:	50                   	push   eax
c0009bfe:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c01:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c05:	50                   	push   eax
c0009c06:	e8 82 6a ff ff       	call   c000068d <memcpy>
c0009c0b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c0e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	01 fd                	add    ebp,edi
c0009c16:	01 f9                	add    ecx,edi
c0009c18:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c1b:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c1e:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c25:	0f 85 86 00 00 00    	jne    c0009cb1 <prepare_data+0x170>
c0009c2b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c2e:	89 e8                	mov    eax,ebp
c0009c30:	29 c8                	sub    eax,ecx
c0009c32:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c35:	39 f8                	cmp    eax,edi
c0009c37:	7d 78                	jge    c0009cb1 <prepare_data+0x170>
c0009c39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c3d:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c41:	74 6e                	je     c0009cb1 <prepare_data+0x170>
c0009c43:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c46:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c4a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c4d:	29 ef                	sub    edi,ebp
c0009c4f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c53:	7c 29                	jl     c0009c7e <prepare_data+0x13d>
c0009c55:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c58:	29 f1                	sub    ecx,esi
c0009c5a:	55                   	push   ebp
c0009c5b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c62:	50                   	push   eax
c0009c63:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c66:	50                   	push   eax
c0009c67:	52                   	push   edx
c0009c68:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c6c:	e8 e4 69 ff ff       	call   c0000655 <memmove>
c0009c71:	83 c4 10             	add    esp,0x10
c0009c74:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c77:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c81:	83 c6 05             	add    esi,0x5
c0009c84:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c87:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c8a:	78 07                	js     c0009c93 <prepare_data+0x152>
c0009c8c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c8f:	39 cf                	cmp    edi,ecx
c0009c91:	7e 04                	jle    c0009c97 <prepare_data+0x156>
c0009c93:	89 ce                	mov    esi,ecx
c0009c95:	29 c6                	sub    esi,eax
c0009c97:	51                   	push   ecx
c0009c98:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c9f:	51                   	push   ecx
c0009ca0:	8d 04 82             	lea    eax,[edx+eax*4]
c0009ca3:	6a 00                	push   0x0
c0009ca5:	50                   	push   eax
c0009ca6:	e8 18 6a ff ff       	call   c00006c3 <memset>
c0009cab:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cae:	83 c4 10             	add    esp,0x10
c0009cb1:	31 c0                	xor    eax,eax
c0009cb3:	83 c4 1c             	add    esp,0x1c
c0009cb6:	5b                   	pop    ebx
c0009cb7:	5e                   	pop    esi
c0009cb8:	5f                   	pop    edi
c0009cb9:	5d                   	pop    ebp
c0009cba:	c3                   	ret    

c0009cbb <sinc_multichan_vari_process>:
c0009cbb:	55                   	push   ebp
c0009cbc:	b8 05 00 00 00       	mov    eax,0x5
c0009cc1:	57                   	push   edi
c0009cc2:	56                   	push   esi
c0009cc3:	53                   	push   ebx
c0009cc4:	83 ec 3c             	sub    esp,0x3c
c0009cc7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ccb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ccf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cd2:	85 db                	test   ebx,ebx
c0009cd4:	0f 84 5b 02 00 00    	je     c0009f35 <sinc_multichan_vari_process+0x27a>
c0009cda:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cdd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ce0:	0f af d0             	imul   edx,eax
c0009ce3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ce6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009cea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009cf1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009cf4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cfb:	dd 06                	fld    QWORD PTR [esi]
c0009cfd:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d01:	55                   	push   ebp
c0009d02:	55                   	push   ebp
c0009d03:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d06:	e8 dd f2 ff ff       	call   c0008fe8 <is_bad_src_ratio>
c0009d0b:	89 c2                	mov    edx,eax
c0009d0d:	58                   	pop    eax
c0009d0e:	59                   	pop    ecx
c0009d0f:	b8 16 00 00 00       	mov    eax,0x16
c0009d14:	85 d2                	test   edx,edx
c0009d16:	0f 85 19 02 00 00    	jne    c0009f35 <sinc_multichan_vari_process+0x27a>
c0009d1c:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c0009d22:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d25:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d28:	dd 06                	fld    QWORD PTR [esi]
c0009d2a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d2d:	d8 d1                	fcom   st(1)
c0009d2f:	df e0                	fnstsw ax
c0009d31:	9e                   	sahf   
c0009d32:	76 0f                	jbe    c0009d43 <sinc_multichan_vari_process+0x88>
c0009d34:	dd d8                	fstp   st(0)
c0009d36:	d9 e8                	fld1   
c0009d38:	d8 d9                	fcomp  st(1)
c0009d3a:	df e0                	fnstsw ax
c0009d3c:	9e                   	sahf   
c0009d3d:	77 0f                	ja     c0009d4e <sinc_multichan_vari_process+0x93>
c0009d3f:	dd d8                	fstp   st(0)
c0009d41:	eb 11                	jmp    c0009d54 <sinc_multichan_vari_process+0x99>
c0009d43:	dd d9                	fstp   st(1)
c0009d45:	d9 e8                	fld1   
c0009d47:	d8 d9                	fcomp  st(1)
c0009d49:	df e0                	fnstsw ax
c0009d4b:	9e                   	sahf   
c0009d4c:	76 04                	jbe    c0009d52 <sinc_multichan_vari_process+0x97>
c0009d4e:	de f9                	fdivp  st(1),st
c0009d50:	eb 02                	jmp    c0009d54 <sinc_multichan_vari_process+0x99>
c0009d52:	dd d8                	fstp   st(0)
c0009d54:	83 ec 10             	sub    esp,0x10
c0009d57:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d5a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d5d:	e8 ce 59 01 00       	call   c001f730 <lrint>
c0009d62:	40                   	inc    eax
c0009d63:	0f af c5             	imul   eax,ebp
c0009d66:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d6d:	dd 14 24             	fst    QWORD PTR [esp]
c0009d70:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d74:	e8 71 fd ff ff       	call   c0009aea <fmod_one>
c0009d79:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d7c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d83:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d87:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d8b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d8f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d92:	e8 99 59 01 00       	call   c001f730 <lrint>
c0009d97:	d9 e8                	fld1   
c0009d99:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d9d:	0f af e8             	imul   ebp,eax
c0009da0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009da4:	01 e8                	add    eax,ebp
c0009da6:	99                   	cdq    
c0009da7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009daa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dad:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c0009db3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009db7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dba:	83 c4 10             	add    esp,0x10
c0009dbd:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dc0:	7d 4b                	jge    c0009e0d <sinc_multichan_vari_process+0x152>
c0009dc2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dc5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dc8:	01 c8                	add    eax,ecx
c0009dca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dcd:	99                   	cdq    
c0009dce:	f7 f9                	idiv   ecx
c0009dd0:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dd4:	7d 09                	jge    c0009ddf <sinc_multichan_vari_process+0x124>
c0009dd6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd9:	85 c0                	test   eax,eax
c0009ddb:	79 57                	jns    c0009e34 <sinc_multichan_vari_process+0x179>
c0009ddd:	eb 70                	jmp    c0009e4f <sinc_multichan_vari_process+0x194>
c0009ddf:	51                   	push   ecx
c0009de0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009de4:	57                   	push   edi
c0009de5:	53                   	push   ebx
c0009de6:	e8 56 fd ff ff       	call   c0009b41 <prepare_data>
c0009deb:	83 c4 10             	add    esp,0x10
c0009dee:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009df1:	85 c0                	test   eax,eax
c0009df3:	0f 85 3c 01 00 00    	jne    c0009f35 <sinc_multichan_vari_process+0x27a>
c0009df9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dfc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dff:	01 c8                	add    eax,ecx
c0009e01:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e04:	99                   	cdq    
c0009e05:	f7 f9                	idiv   ecx
c0009e07:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e0b:	7c c9                	jl     c0009dd6 <sinc_multichan_vari_process+0x11b>
c0009e0d:	dd 04 24             	fld    QWORD PTR [esp]
c0009e10:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e13:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e17:	dd 1e                	fstp   QWORD PTR [esi]
c0009e19:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e1c:	99                   	cdq    
c0009e1d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e20:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e23:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e26:	99                   	cdq    
c0009e27:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e2a:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e2d:	31 c0                	xor    eax,eax
c0009e2f:	e9 01 01 00 00       	jmp    c0009f35 <sinc_multichan_vari_process+0x27a>
c0009e34:	dd 04 24             	fld    QWORD PTR [esp]
c0009e37:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e3e:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e42:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e46:	d9 c9                	fxch   st(1)
c0009e48:	de d9                	fcompp 
c0009e4a:	df e0                	fnstsw ax
c0009e4c:	9e                   	sahf   
c0009e4d:	73 be                	jae    c0009e0d <sinc_multichan_vari_process+0x152>
c0009e4f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e53:	7e 2f                	jle    c0009e84 <sinc_multichan_vari_process+0x1c9>
c0009e55:	dd 06                	fld    QWORD PTR [esi]
c0009e57:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e5a:	83 ec 10             	sub    esp,0x10
c0009e5d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e60:	e8 ab 58 01 00       	call   c001f710 <fabs>
c0009e65:	83 c4 10             	add    esp,0x10
c0009e68:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c0009e6e:	df e0                	fnstsw ax
c0009e70:	9e                   	sahf   
c0009e71:	76 11                	jbe    c0009e84 <sinc_multichan_vari_process+0x1c9>
c0009e73:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e76:	dc 26                	fsub   QWORD PTR [esi]
c0009e78:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e7b:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e7e:	dc 06                	fadd   QWORD PTR [esi]
c0009e80:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e84:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e87:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e8b:	d9 e8                	fld1   
c0009e8d:	d8 d9                	fcomp  st(1)
c0009e8f:	df e0                	fnstsw ax
c0009e91:	9e                   	sahf   
c0009e92:	77 04                	ja     c0009e98 <sinc_multichan_vari_process+0x1dd>
c0009e94:	dd d8                	fstp   st(0)
c0009e96:	d9 e8                	fld1   
c0009e98:	de c9                	fmulp  st(1),st
c0009e9a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e9e:	50                   	push   eax
c0009e9f:	50                   	push   eax
c0009ea0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea8:	e8 2a fc ff ff       	call   c0009ad7 <double_to_fp>
c0009ead:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009eb1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eb5:	89 c5                	mov    ebp,eax
c0009eb7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eba:	e8 18 fc ff ff       	call   c0009ad7 <double_to_fp>
c0009ebf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ec2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ec5:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ec8:	89 c1                	mov    ecx,eax
c0009eca:	52                   	push   edx
c0009ecb:	89 d8                	mov    eax,ebx
c0009ecd:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ed1:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ed4:	52                   	push   edx
c0009ed5:	52                   	push   edx
c0009ed6:	89 ea                	mov    edx,ebp
c0009ed8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009edb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ede:	e8 f9 f7 ff ff       	call   c00096dc <calc_output_multi>
c0009ee3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ee6:	d9 e8                	fld1   
c0009ee8:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009eec:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009eef:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009efd:	e8 e8 fb ff ff       	call   c0009aea <fmod_one>
c0009f02:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f05:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f0c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f10:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f14:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f18:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f1b:	e8 10 58 01 00       	call   c001f730 <lrint>
c0009f20:	0f af e8             	imul   ebp,eax
c0009f23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f27:	01 e8                	add    eax,ebp
c0009f29:	99                   	cdq    
c0009f2a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f2d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f30:	e9 82 fe ff ff       	jmp    c0009db7 <sinc_multichan_vari_process+0xfc>
c0009f35:	83 c4 3c             	add    esp,0x3c
c0009f38:	5b                   	pop    ebx
c0009f39:	5e                   	pop    esi
c0009f3a:	5f                   	pop    edi
c0009f3b:	5d                   	pop    ebp
c0009f3c:	c3                   	ret    

c0009f3d <sinc_hex_vari_process>:
c0009f3d:	55                   	push   ebp
c0009f3e:	b8 05 00 00 00       	mov    eax,0x5
c0009f43:	57                   	push   edi
c0009f44:	56                   	push   esi
c0009f45:	53                   	push   ebx
c0009f46:	83 ec 3c             	sub    esp,0x3c
c0009f49:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f4d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f51:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f54:	85 db                	test   ebx,ebx
c0009f56:	0f 84 56 02 00 00    	je     c000a1b2 <sinc_hex_vari_process+0x275>
c0009f5c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f5f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f62:	0f af d0             	imul   edx,eax
c0009f65:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f68:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f73:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f76:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f7d:	dd 06                	fld    QWORD PTR [esi]
c0009f7f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f83:	55                   	push   ebp
c0009f84:	55                   	push   ebp
c0009f85:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f88:	e8 5b f0 ff ff       	call   c0008fe8 <is_bad_src_ratio>
c0009f8d:	89 c2                	mov    edx,eax
c0009f8f:	58                   	pop    eax
c0009f90:	59                   	pop    ecx
c0009f91:	b8 16 00 00 00       	mov    eax,0x16
c0009f96:	85 d2                	test   edx,edx
c0009f98:	0f 85 14 02 00 00    	jne    c000a1b2 <sinc_hex_vari_process+0x275>
c0009f9e:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c0009fa4:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fa7:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009faa:	dd 06                	fld    QWORD PTR [esi]
c0009fac:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009faf:	d8 d1                	fcom   st(1)
c0009fb1:	df e0                	fnstsw ax
c0009fb3:	9e                   	sahf   
c0009fb4:	76 0f                	jbe    c0009fc5 <sinc_hex_vari_process+0x88>
c0009fb6:	dd d8                	fstp   st(0)
c0009fb8:	d9 e8                	fld1   
c0009fba:	d8 d9                	fcomp  st(1)
c0009fbc:	df e0                	fnstsw ax
c0009fbe:	9e                   	sahf   
c0009fbf:	77 0f                	ja     c0009fd0 <sinc_hex_vari_process+0x93>
c0009fc1:	dd d8                	fstp   st(0)
c0009fc3:	eb 11                	jmp    c0009fd6 <sinc_hex_vari_process+0x99>
c0009fc5:	dd d9                	fstp   st(1)
c0009fc7:	d9 e8                	fld1   
c0009fc9:	d8 d9                	fcomp  st(1)
c0009fcb:	df e0                	fnstsw ax
c0009fcd:	9e                   	sahf   
c0009fce:	76 04                	jbe    c0009fd4 <sinc_hex_vari_process+0x97>
c0009fd0:	de f9                	fdivp  st(1),st
c0009fd2:	eb 02                	jmp    c0009fd6 <sinc_hex_vari_process+0x99>
c0009fd4:	dd d8                	fstp   st(0)
c0009fd6:	83 ec 10             	sub    esp,0x10
c0009fd9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fdf:	e8 4c 57 01 00       	call   c001f730 <lrint>
c0009fe4:	40                   	inc    eax
c0009fe5:	0f af c5             	imul   eax,ebp
c0009fe8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009feb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fef:	dd 14 24             	fst    QWORD PTR [esp]
c0009ff2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff6:	e8 ef fa ff ff       	call   c0009aea <fmod_one>
c0009ffb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ffe:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a009:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a014:	e8 17 57 01 00       	call   c001f730 <lrint>
c000a019:	d9 e8                	fld1   
c000a01b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a01f:	0f af e8             	imul   ebp,eax
c000a022:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a026:	01 e8                	add    eax,ebp
c000a028:	99                   	cdq    
c000a029:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a02c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a02f:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a035:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a039:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a042:	7d 4b                	jge    c000a08f <sinc_hex_vari_process+0x152>
c000a044:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a047:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04a:	01 c8                	add    eax,ecx
c000a04c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a04f:	99                   	cdq    
c000a050:	f7 f9                	idiv   ecx
c000a052:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a056:	7d 09                	jge    c000a061 <sinc_hex_vari_process+0x124>
c000a058:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05b:	85 c0                	test   eax,eax
c000a05d:	79 57                	jns    c000a0b6 <sinc_hex_vari_process+0x179>
c000a05f:	eb 70                	jmp    c000a0d1 <sinc_hex_vari_process+0x194>
c000a061:	51                   	push   ecx
c000a062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a066:	57                   	push   edi
c000a067:	53                   	push   ebx
c000a068:	e8 d4 fa ff ff       	call   c0009b41 <prepare_data>
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a073:	85 c0                	test   eax,eax
c000a075:	0f 85 37 01 00 00    	jne    c000a1b2 <sinc_hex_vari_process+0x275>
c000a07b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a07e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a081:	01 c8                	add    eax,ecx
c000a083:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a086:	99                   	cdq    
c000a087:	f7 f9                	idiv   ecx
c000a089:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a08d:	7c c9                	jl     c000a058 <sinc_hex_vari_process+0x11b>
c000a08f:	dd 04 24             	fld    QWORD PTR [esp]
c000a092:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a095:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a099:	dd 1e                	fstp   QWORD PTR [esi]
c000a09b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a09e:	99                   	cdq    
c000a09f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a2:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0a8:	99                   	cdq    
c000a0a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0ac:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0af:	31 c0                	xor    eax,eax
c000a0b1:	e9 fc 00 00 00       	jmp    c000a1b2 <sinc_hex_vari_process+0x275>
c000a0b6:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b9:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0c0:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c4:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0c8:	d9 c9                	fxch   st(1)
c000a0ca:	de d9                	fcompp 
c000a0cc:	df e0                	fnstsw ax
c000a0ce:	9e                   	sahf   
c000a0cf:	73 be                	jae    c000a08f <sinc_hex_vari_process+0x152>
c000a0d1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d5:	7e 2f                	jle    c000a106 <sinc_hex_vari_process+0x1c9>
c000a0d7:	dd 06                	fld    QWORD PTR [esi]
c000a0d9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0dc:	83 ec 10             	sub    esp,0x10
c000a0df:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e2:	e8 29 56 01 00       	call   c001f710 <fabs>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a0f0:	df e0                	fnstsw ax
c000a0f2:	9e                   	sahf   
c000a0f3:	76 11                	jbe    c000a106 <sinc_hex_vari_process+0x1c9>
c000a0f5:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0f8:	dc 26                	fsub   QWORD PTR [esi]
c000a0fa:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0fd:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a100:	dc 06                	fadd   QWORD PTR [esi]
c000a102:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a106:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a109:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a10d:	d9 e8                	fld1   
c000a10f:	d8 d9                	fcomp  st(1)
c000a111:	df e0                	fnstsw ax
c000a113:	9e                   	sahf   
c000a114:	77 04                	ja     c000a11a <sinc_hex_vari_process+0x1dd>
c000a116:	dd d8                	fstp   st(0)
c000a118:	d9 e8                	fld1   
c000a11a:	de c9                	fmulp  st(1),st
c000a11c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a120:	50                   	push   eax
c000a121:	50                   	push   eax
c000a122:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a126:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12a:	e8 a8 f9 ff ff       	call   c0009ad7 <double_to_fp>
c000a12f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a133:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a137:	89 c5                	mov    ebp,eax
c000a139:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a13c:	e8 96 f9 ff ff       	call   c0009ad7 <double_to_fp>
c000a141:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a144:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a147:	83 c4 0c             	add    esp,0xc
c000a14a:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14d:	89 c1                	mov    ecx,eax
c000a14f:	52                   	push   edx
c000a150:	89 d8                	mov    eax,ebx
c000a152:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a156:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a159:	52                   	push   edx
c000a15a:	52                   	push   edx
c000a15b:	89 ea                	mov    edx,ebp
c000a15d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a160:	e8 db f2 ff ff       	call   c0009440 <calc_output_hex>
c000a165:	d9 e8                	fld1   
c000a167:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a16b:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a16f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a173:	dd 14 24             	fst    QWORD PTR [esp]
c000a176:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a17a:	e8 6b f9 ff ff       	call   c0009aea <fmod_one>
c000a17f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a182:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a185:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a189:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a18d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a191:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a195:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a198:	e8 93 55 01 00       	call   c001f730 <lrint>
c000a19d:	0f af e8             	imul   ebp,eax
c000a1a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1a4:	01 e8                	add    eax,ebp
c000a1a6:	99                   	cdq    
c000a1a7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1aa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1ad:	e9 87 fe ff ff       	jmp    c000a039 <sinc_hex_vari_process+0xfc>
c000a1b2:	83 c4 3c             	add    esp,0x3c
c000a1b5:	5b                   	pop    ebx
c000a1b6:	5e                   	pop    esi
c000a1b7:	5f                   	pop    edi
c000a1b8:	5d                   	pop    ebp
c000a1b9:	c3                   	ret    

c000a1ba <sinc_quad_vari_process>:
c000a1ba:	55                   	push   ebp
c000a1bb:	b8 05 00 00 00       	mov    eax,0x5
c000a1c0:	57                   	push   edi
c000a1c1:	56                   	push   esi
c000a1c2:	53                   	push   ebx
c000a1c3:	83 ec 3c             	sub    esp,0x3c
c000a1c6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1ca:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1ce:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1d1:	85 db                	test   ebx,ebx
c000a1d3:	0f 84 56 02 00 00    	je     c000a42f <sinc_quad_vari_process+0x275>
c000a1d9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1dc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1df:	0f af d0             	imul   edx,eax
c000a1e2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1e5:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1f0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1f3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1fa:	dd 06                	fld    QWORD PTR [esi]
c000a1fc:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a200:	55                   	push   ebp
c000a201:	55                   	push   ebp
c000a202:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a205:	e8 de ed ff ff       	call   c0008fe8 <is_bad_src_ratio>
c000a20a:	89 c2                	mov    edx,eax
c000a20c:	58                   	pop    eax
c000a20d:	59                   	pop    ecx
c000a20e:	b8 16 00 00 00       	mov    eax,0x16
c000a213:	85 d2                	test   edx,edx
c000a215:	0f 85 14 02 00 00    	jne    c000a42f <sinc_quad_vari_process+0x275>
c000a21b:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a221:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a224:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a227:	dd 06                	fld    QWORD PTR [esi]
c000a229:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a22c:	d8 d1                	fcom   st(1)
c000a22e:	df e0                	fnstsw ax
c000a230:	9e                   	sahf   
c000a231:	76 0f                	jbe    c000a242 <sinc_quad_vari_process+0x88>
c000a233:	dd d8                	fstp   st(0)
c000a235:	d9 e8                	fld1   
c000a237:	d8 d9                	fcomp  st(1)
c000a239:	df e0                	fnstsw ax
c000a23b:	9e                   	sahf   
c000a23c:	77 0f                	ja     c000a24d <sinc_quad_vari_process+0x93>
c000a23e:	dd d8                	fstp   st(0)
c000a240:	eb 11                	jmp    c000a253 <sinc_quad_vari_process+0x99>
c000a242:	dd d9                	fstp   st(1)
c000a244:	d9 e8                	fld1   
c000a246:	d8 d9                	fcomp  st(1)
c000a248:	df e0                	fnstsw ax
c000a24a:	9e                   	sahf   
c000a24b:	76 04                	jbe    c000a251 <sinc_quad_vari_process+0x97>
c000a24d:	de f9                	fdivp  st(1),st
c000a24f:	eb 02                	jmp    c000a253 <sinc_quad_vari_process+0x99>
c000a251:	dd d8                	fstp   st(0)
c000a253:	83 ec 10             	sub    esp,0x10
c000a256:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a259:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a25c:	e8 cf 54 01 00       	call   c001f730 <lrint>
c000a261:	40                   	inc    eax
c000a262:	0f af c5             	imul   eax,ebp
c000a265:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a268:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a26c:	dd 14 24             	fst    QWORD PTR [esp]
c000a26f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a273:	e8 72 f8 ff ff       	call   c0009aea <fmod_one>
c000a278:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a27b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a27e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a282:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a286:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a28a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a28e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a291:	e8 9a 54 01 00       	call   c001f730 <lrint>
c000a296:	d9 e8                	fld1   
c000a298:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a29c:	0f af e8             	imul   ebp,eax
c000a29f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a3:	01 e8                	add    eax,ebp
c000a2a5:	99                   	cdq    
c000a2a6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2ac:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a2b2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b9:	83 c4 10             	add    esp,0x10
c000a2bc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2bf:	7d 4b                	jge    c000a30c <sinc_quad_vari_process+0x152>
c000a2c1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2c4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2c7:	01 c8                	add    eax,ecx
c000a2c9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2cc:	99                   	cdq    
c000a2cd:	f7 f9                	idiv   ecx
c000a2cf:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2d3:	7d 09                	jge    c000a2de <sinc_quad_vari_process+0x124>
c000a2d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2d8:	85 c0                	test   eax,eax
c000a2da:	79 57                	jns    c000a333 <sinc_quad_vari_process+0x179>
c000a2dc:	eb 70                	jmp    c000a34e <sinc_quad_vari_process+0x194>
c000a2de:	51                   	push   ecx
c000a2df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2e3:	57                   	push   edi
c000a2e4:	53                   	push   ebx
c000a2e5:	e8 57 f8 ff ff       	call   c0009b41 <prepare_data>
c000a2ea:	83 c4 10             	add    esp,0x10
c000a2ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2f0:	85 c0                	test   eax,eax
c000a2f2:	0f 85 37 01 00 00    	jne    c000a42f <sinc_quad_vari_process+0x275>
c000a2f8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2fe:	01 c8                	add    eax,ecx
c000a300:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a303:	99                   	cdq    
c000a304:	f7 f9                	idiv   ecx
c000a306:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a30a:	7c c9                	jl     c000a2d5 <sinc_quad_vari_process+0x11b>
c000a30c:	dd 04 24             	fld    QWORD PTR [esp]
c000a30f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a312:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a316:	dd 1e                	fstp   QWORD PTR [esi]
c000a318:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a31b:	99                   	cdq    
c000a31c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a31f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a322:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a32c:	31 c0                	xor    eax,eax
c000a32e:	e9 fc 00 00 00       	jmp    c000a42f <sinc_quad_vari_process+0x275>
c000a333:	dd 04 24             	fld    QWORD PTR [esp]
c000a336:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a339:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a33d:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a341:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a345:	d9 c9                	fxch   st(1)
c000a347:	de d9                	fcompp 
c000a349:	df e0                	fnstsw ax
c000a34b:	9e                   	sahf   
c000a34c:	73 be                	jae    c000a30c <sinc_quad_vari_process+0x152>
c000a34e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a352:	7e 2f                	jle    c000a383 <sinc_quad_vari_process+0x1c9>
c000a354:	dd 06                	fld    QWORD PTR [esi]
c000a356:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a359:	83 ec 10             	sub    esp,0x10
c000a35c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a35f:	e8 ac 53 01 00       	call   c001f710 <fabs>
c000a364:	83 c4 10             	add    esp,0x10
c000a367:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a36d:	df e0                	fnstsw ax
c000a36f:	9e                   	sahf   
c000a370:	76 11                	jbe    c000a383 <sinc_quad_vari_process+0x1c9>
c000a372:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a375:	dc 26                	fsub   QWORD PTR [esi]
c000a377:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a37a:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a37d:	dc 06                	fadd   QWORD PTR [esi]
c000a37f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a383:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a386:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a38a:	d9 e8                	fld1   
c000a38c:	d8 d9                	fcomp  st(1)
c000a38e:	df e0                	fnstsw ax
c000a390:	9e                   	sahf   
c000a391:	77 04                	ja     c000a397 <sinc_quad_vari_process+0x1dd>
c000a393:	dd d8                	fstp   st(0)
c000a395:	d9 e8                	fld1   
c000a397:	de c9                	fmulp  st(1),st
c000a399:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a39d:	50                   	push   eax
c000a39e:	50                   	push   eax
c000a39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a7:	e8 2b f7 ff ff       	call   c0009ad7 <double_to_fp>
c000a3ac:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3b0:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3b4:	89 c5                	mov    ebp,eax
c000a3b6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b9:	e8 19 f7 ff ff       	call   c0009ad7 <double_to_fp>
c000a3be:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3c1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3c4:	83 c4 0c             	add    esp,0xc
c000a3c7:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3ca:	89 c1                	mov    ecx,eax
c000a3cc:	52                   	push   edx
c000a3cd:	89 d8                	mov    eax,ebx
c000a3cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3d3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3d6:	52                   	push   edx
c000a3d7:	52                   	push   edx
c000a3d8:	89 ea                	mov    edx,ebp
c000a3da:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3dd:	e8 99 ee ff ff       	call   c000927b <calc_output_quad>
c000a3e2:	d9 e8                	fld1   
c000a3e4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3e8:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3ec:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3f0:	dd 14 24             	fst    QWORD PTR [esp]
c000a3f3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3f7:	e8 ee f6 ff ff       	call   c0009aea <fmod_one>
c000a3fc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3ff:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a402:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a406:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a40e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a412:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a415:	e8 16 53 01 00       	call   c001f730 <lrint>
c000a41a:	0f af e8             	imul   ebp,eax
c000a41d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a421:	01 e8                	add    eax,ebp
c000a423:	99                   	cdq    
c000a424:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a427:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a42a:	e9 87 fe ff ff       	jmp    c000a2b6 <sinc_quad_vari_process+0xfc>
c000a42f:	83 c4 3c             	add    esp,0x3c
c000a432:	5b                   	pop    ebx
c000a433:	5e                   	pop    esi
c000a434:	5f                   	pop    edi
c000a435:	5d                   	pop    ebp
c000a436:	c3                   	ret    

c000a437 <sinc_stereo_vari_process>:
c000a437:	55                   	push   ebp
c000a438:	b8 05 00 00 00       	mov    eax,0x5
c000a43d:	57                   	push   edi
c000a43e:	56                   	push   esi
c000a43f:	53                   	push   ebx
c000a440:	83 ec 3c             	sub    esp,0x3c
c000a443:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a447:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a44b:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a44e:	85 db                	test   ebx,ebx
c000a450:	0f 84 56 02 00 00    	je     c000a6ac <sinc_stereo_vari_process+0x275>
c000a456:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a459:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a45c:	0f af d0             	imul   edx,eax
c000a45f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a462:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a466:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a46d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a470:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a477:	dd 06                	fld    QWORD PTR [esi]
c000a479:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a47d:	55                   	push   ebp
c000a47e:	55                   	push   ebp
c000a47f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a482:	e8 61 eb ff ff       	call   c0008fe8 <is_bad_src_ratio>
c000a487:	89 c2                	mov    edx,eax
c000a489:	58                   	pop    eax
c000a48a:	59                   	pop    ecx
c000a48b:	b8 16 00 00 00       	mov    eax,0x16
c000a490:	85 d2                	test   edx,edx
c000a492:	0f 85 14 02 00 00    	jne    c000a6ac <sinc_stereo_vari_process+0x275>
c000a498:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a49e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4a1:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4a4:	dd 06                	fld    QWORD PTR [esi]
c000a4a6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a9:	d8 d1                	fcom   st(1)
c000a4ab:	df e0                	fnstsw ax
c000a4ad:	9e                   	sahf   
c000a4ae:	76 0f                	jbe    c000a4bf <sinc_stereo_vari_process+0x88>
c000a4b0:	dd d8                	fstp   st(0)
c000a4b2:	d9 e8                	fld1   
c000a4b4:	d8 d9                	fcomp  st(1)
c000a4b6:	df e0                	fnstsw ax
c000a4b8:	9e                   	sahf   
c000a4b9:	77 0f                	ja     c000a4ca <sinc_stereo_vari_process+0x93>
c000a4bb:	dd d8                	fstp   st(0)
c000a4bd:	eb 11                	jmp    c000a4d0 <sinc_stereo_vari_process+0x99>
c000a4bf:	dd d9                	fstp   st(1)
c000a4c1:	d9 e8                	fld1   
c000a4c3:	d8 d9                	fcomp  st(1)
c000a4c5:	df e0                	fnstsw ax
c000a4c7:	9e                   	sahf   
c000a4c8:	76 04                	jbe    c000a4ce <sinc_stereo_vari_process+0x97>
c000a4ca:	de f9                	fdivp  st(1),st
c000a4cc:	eb 02                	jmp    c000a4d0 <sinc_stereo_vari_process+0x99>
c000a4ce:	dd d8                	fstp   st(0)
c000a4d0:	83 ec 10             	sub    esp,0x10
c000a4d3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d9:	e8 52 52 01 00       	call   c001f730 <lrint>
c000a4de:	40                   	inc    eax
c000a4df:	0f af c5             	imul   eax,ebp
c000a4e2:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e9:	dd 14 24             	fst    QWORD PTR [esp]
c000a4ec:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f0:	e8 f5 f5 ff ff       	call   c0009aea <fmod_one>
c000a4f5:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4f8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4ff:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a503:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a507:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a50b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a50e:	e8 1d 52 01 00       	call   c001f730 <lrint>
c000a513:	d9 e8                	fld1   
c000a515:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a519:	0f af e8             	imul   ebp,eax
c000a51c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a520:	01 e8                	add    eax,ebp
c000a522:	99                   	cdq    
c000a523:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a526:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a529:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a52f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a533:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a536:	83 c4 10             	add    esp,0x10
c000a539:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a53c:	7d 4b                	jge    c000a589 <sinc_stereo_vari_process+0x152>
c000a53e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a541:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a544:	01 c8                	add    eax,ecx
c000a546:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a549:	99                   	cdq    
c000a54a:	f7 f9                	idiv   ecx
c000a54c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a550:	7d 09                	jge    c000a55b <sinc_stereo_vari_process+0x124>
c000a552:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a555:	85 c0                	test   eax,eax
c000a557:	79 57                	jns    c000a5b0 <sinc_stereo_vari_process+0x179>
c000a559:	eb 70                	jmp    c000a5cb <sinc_stereo_vari_process+0x194>
c000a55b:	51                   	push   ecx
c000a55c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a560:	57                   	push   edi
c000a561:	53                   	push   ebx
c000a562:	e8 da f5 ff ff       	call   c0009b41 <prepare_data>
c000a567:	83 c4 10             	add    esp,0x10
c000a56a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a56d:	85 c0                	test   eax,eax
c000a56f:	0f 85 37 01 00 00    	jne    c000a6ac <sinc_stereo_vari_process+0x275>
c000a575:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a578:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a57b:	01 c8                	add    eax,ecx
c000a57d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a580:	99                   	cdq    
c000a581:	f7 f9                	idiv   ecx
c000a583:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a587:	7c c9                	jl     c000a552 <sinc_stereo_vari_process+0x11b>
c000a589:	dd 04 24             	fld    QWORD PTR [esp]
c000a58c:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a58f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a593:	dd 1e                	fstp   QWORD PTR [esi]
c000a595:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a598:	99                   	cdq    
c000a599:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a59f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5a2:	99                   	cdq    
c000a5a3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a9:	31 c0                	xor    eax,eax
c000a5ab:	e9 fc 00 00 00       	jmp    c000a6ac <sinc_stereo_vari_process+0x275>
c000a5b0:	dd 04 24             	fld    QWORD PTR [esp]
c000a5b3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5ba:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5be:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5c2:	d9 c9                	fxch   st(1)
c000a5c4:	de d9                	fcompp 
c000a5c6:	df e0                	fnstsw ax
c000a5c8:	9e                   	sahf   
c000a5c9:	73 be                	jae    c000a589 <sinc_stereo_vari_process+0x152>
c000a5cb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5cf:	7e 2f                	jle    c000a600 <sinc_stereo_vari_process+0x1c9>
c000a5d1:	dd 06                	fld    QWORD PTR [esi]
c000a5d3:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5d6:	83 ec 10             	sub    esp,0x10
c000a5d9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5dc:	e8 2f 51 01 00       	call   c001f710 <fabs>
c000a5e1:	83 c4 10             	add    esp,0x10
c000a5e4:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a5ea:	df e0                	fnstsw ax
c000a5ec:	9e                   	sahf   
c000a5ed:	76 11                	jbe    c000a600 <sinc_stereo_vari_process+0x1c9>
c000a5ef:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5f2:	dc 26                	fsub   QWORD PTR [esi]
c000a5f4:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5f7:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5fa:	dc 06                	fadd   QWORD PTR [esi]
c000a5fc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a600:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a603:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a607:	d9 e8                	fld1   
c000a609:	d8 d9                	fcomp  st(1)
c000a60b:	df e0                	fnstsw ax
c000a60d:	9e                   	sahf   
c000a60e:	77 04                	ja     c000a614 <sinc_stereo_vari_process+0x1dd>
c000a610:	dd d8                	fstp   st(0)
c000a612:	d9 e8                	fld1   
c000a614:	de c9                	fmulp  st(1),st
c000a616:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a61a:	50                   	push   eax
c000a61b:	50                   	push   eax
c000a61c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a624:	e8 ae f4 ff ff       	call   c0009ad7 <double_to_fp>
c000a629:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a62d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a631:	89 c5                	mov    ebp,eax
c000a633:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a636:	e8 9c f4 ff ff       	call   c0009ad7 <double_to_fp>
c000a63b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a63e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a641:	83 c4 0c             	add    esp,0xc
c000a644:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a647:	89 c1                	mov    ecx,eax
c000a649:	52                   	push   edx
c000a64a:	89 d8                	mov    eax,ebx
c000a64c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a650:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a653:	52                   	push   edx
c000a654:	52                   	push   edx
c000a655:	89 ea                	mov    edx,ebp
c000a657:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a65a:	e8 da ea ff ff       	call   c0009139 <calc_output_stereo>
c000a65f:	d9 e8                	fld1   
c000a661:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a665:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a669:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a66d:	dd 14 24             	fst    QWORD PTR [esp]
c000a670:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a674:	e8 71 f4 ff ff       	call   c0009aea <fmod_one>
c000a679:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a67c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a67f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a683:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a687:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a68b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a68f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a692:	e8 99 50 01 00       	call   c001f730 <lrint>
c000a697:	0f af e8             	imul   ebp,eax
c000a69a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a69e:	01 e8                	add    eax,ebp
c000a6a0:	99                   	cdq    
c000a6a1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6a7:	e9 87 fe ff ff       	jmp    c000a533 <sinc_stereo_vari_process+0xfc>
c000a6ac:	83 c4 3c             	add    esp,0x3c
c000a6af:	5b                   	pop    ebx
c000a6b0:	5e                   	pop    esi
c000a6b1:	5f                   	pop    edi
c000a6b2:	5d                   	pop    ebp
c000a6b3:	c3                   	ret    

c000a6b4 <sinc_mono_vari_process>:
c000a6b4:	55                   	push   ebp
c000a6b5:	b8 05 00 00 00       	mov    eax,0x5
c000a6ba:	57                   	push   edi
c000a6bb:	56                   	push   esi
c000a6bc:	53                   	push   ebx
c000a6bd:	83 ec 3c             	sub    esp,0x3c
c000a6c0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6c4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6c8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6cb:	85 db                	test   ebx,ebx
c000a6cd:	0f 84 55 02 00 00    	je     c000a928 <sinc_mono_vari_process+0x274>
c000a6d3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d9:	0f af d0             	imul   edx,eax
c000a6dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6df:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6e3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6ed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6f4:	dd 06                	fld    QWORD PTR [esi]
c000a6f6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6fa:	51                   	push   ecx
c000a6fb:	51                   	push   ecx
c000a6fc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6ff:	e8 e4 e8 ff ff       	call   c0008fe8 <is_bad_src_ratio>
c000a704:	5d                   	pop    ebp
c000a705:	89 c2                	mov    edx,eax
c000a707:	58                   	pop    eax
c000a708:	85 d2                	test   edx,edx
c000a70a:	b8 16 00 00 00       	mov    eax,0x16
c000a70f:	0f 85 13 02 00 00    	jne    c000a928 <sinc_mono_vari_process+0x274>
c000a715:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a71b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a71e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a721:	dd 06                	fld    QWORD PTR [esi]
c000a723:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a726:	d8 d1                	fcom   st(1)
c000a728:	df e0                	fnstsw ax
c000a72a:	9e                   	sahf   
c000a72b:	76 0f                	jbe    c000a73c <sinc_mono_vari_process+0x88>
c000a72d:	dd d8                	fstp   st(0)
c000a72f:	d9 e8                	fld1   
c000a731:	d8 d9                	fcomp  st(1)
c000a733:	df e0                	fnstsw ax
c000a735:	9e                   	sahf   
c000a736:	77 0f                	ja     c000a747 <sinc_mono_vari_process+0x93>
c000a738:	dd d8                	fstp   st(0)
c000a73a:	eb 11                	jmp    c000a74d <sinc_mono_vari_process+0x99>
c000a73c:	dd d9                	fstp   st(1)
c000a73e:	d9 e8                	fld1   
c000a740:	d8 d9                	fcomp  st(1)
c000a742:	df e0                	fnstsw ax
c000a744:	9e                   	sahf   
c000a745:	76 04                	jbe    c000a74b <sinc_mono_vari_process+0x97>
c000a747:	de f9                	fdivp  st(1),st
c000a749:	eb 02                	jmp    c000a74d <sinc_mono_vari_process+0x99>
c000a74b:	dd d8                	fstp   st(0)
c000a74d:	83 ec 10             	sub    esp,0x10
c000a750:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a753:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a756:	e8 d5 4f 01 00       	call   c001f730 <lrint>
c000a75b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a75e:	40                   	inc    eax
c000a75f:	dd 14 24             	fst    QWORD PTR [esp]
c000a762:	0f af e8             	imul   ebp,eax
c000a765:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a769:	e8 7c f3 ff ff       	call   c0009aea <fmod_one>
c000a76e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a771:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a778:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a77c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a780:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a784:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a788:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a78b:	e8 a0 4f 01 00       	call   c001f730 <lrint>
c000a790:	d9 e8                	fld1   
c000a792:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a796:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a79b:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a79f:	99                   	cdq    
c000a7a0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7a3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7a6:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a7ac:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7b3:	83 c4 10             	add    esp,0x10
c000a7b6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b9:	7d 44                	jge    c000a7ff <sinc_mono_vari_process+0x14b>
c000a7bb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7be:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7c1:	01 c8                	add    eax,ecx
c000a7c3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7c6:	99                   	cdq    
c000a7c7:	f7 f9                	idiv   ecx
c000a7c9:	39 d5                	cmp    ebp,edx
c000a7cb:	7d 09                	jge    c000a7d6 <sinc_mono_vari_process+0x122>
c000a7cd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7d0:	85 c0                	test   eax,eax
c000a7d2:	79 52                	jns    c000a826 <sinc_mono_vari_process+0x172>
c000a7d4:	eb 6b                	jmp    c000a841 <sinc_mono_vari_process+0x18d>
c000a7d6:	52                   	push   edx
c000a7d7:	55                   	push   ebp
c000a7d8:	57                   	push   edi
c000a7d9:	53                   	push   ebx
c000a7da:	e8 62 f3 ff ff       	call   c0009b41 <prepare_data>
c000a7df:	83 c4 10             	add    esp,0x10
c000a7e2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7e5:	85 c0                	test   eax,eax
c000a7e7:	0f 85 3b 01 00 00    	jne    c000a928 <sinc_mono_vari_process+0x274>
c000a7ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7f3:	01 c8                	add    eax,ecx
c000a7f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7f8:	99                   	cdq    
c000a7f9:	f7 f9                	idiv   ecx
c000a7fb:	39 d5                	cmp    ebp,edx
c000a7fd:	7c ce                	jl     c000a7cd <sinc_mono_vari_process+0x119>
c000a7ff:	dd 04 24             	fld    QWORD PTR [esp]
c000a802:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a805:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a809:	dd 1e                	fstp   QWORD PTR [esi]
c000a80b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a80e:	99                   	cdq    
c000a80f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a812:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a815:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a818:	99                   	cdq    
c000a819:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a81c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a81f:	31 c0                	xor    eax,eax
c000a821:	e9 02 01 00 00       	jmp    c000a928 <sinc_mono_vari_process+0x274>
c000a826:	dd 04 24             	fld    QWORD PTR [esp]
c000a829:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a834:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a838:	d9 c9                	fxch   st(1)
c000a83a:	de d9                	fcompp 
c000a83c:	df e0                	fnstsw ax
c000a83e:	9e                   	sahf   
c000a83f:	77 be                	ja     c000a7ff <sinc_mono_vari_process+0x14b>
c000a841:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a845:	7e 2f                	jle    c000a876 <sinc_mono_vari_process+0x1c2>
c000a847:	dd 06                	fld    QWORD PTR [esi]
c000a849:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a84c:	83 ec 10             	sub    esp,0x10
c000a84f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a852:	e8 b9 4e 01 00       	call   c001f710 <fabs>
c000a857:	83 c4 10             	add    esp,0x10
c000a85a:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a860:	df e0                	fnstsw ax
c000a862:	9e                   	sahf   
c000a863:	76 11                	jbe    c000a876 <sinc_mono_vari_process+0x1c2>
c000a865:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a868:	dc 26                	fsub   QWORD PTR [esi]
c000a86a:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a86d:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a870:	dc 06                	fadd   QWORD PTR [esi]
c000a872:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a876:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a879:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a87d:	d9 e8                	fld1   
c000a87f:	d8 d9                	fcomp  st(1)
c000a881:	df e0                	fnstsw ax
c000a883:	9e                   	sahf   
c000a884:	77 04                	ja     c000a88a <sinc_mono_vari_process+0x1d6>
c000a886:	dd d8                	fstp   st(0)
c000a888:	d9 e8                	fld1   
c000a88a:	de c9                	fmulp  st(1),st
c000a88c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a890:	50                   	push   eax
c000a891:	50                   	push   eax
c000a892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89a:	e8 38 f2 ff ff       	call   c0009ad7 <double_to_fp>
c000a89f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8a3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8a7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8ab:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8ae:	e8 24 f2 ff ff       	call   c0009ad7 <double_to_fp>
c000a8b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8b7:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8bb:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8be:	89 c1                	mov    ecx,eax
c000a8c0:	89 d8                	mov    eax,ebx
c000a8c2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8c6:	e8 89 e7 ff ff       	call   c0009054 <calc_output_single>
c000a8cb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8d2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8d5:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8d8:	d9 e8                	fld1   
c000a8da:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8de:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8e1:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8e5:	dd 14 24             	fst    QWORD PTR [esp]
c000a8e8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8ec:	e8 f9 f1 ff ff       	call   c0009aea <fmod_one>
c000a8f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8fb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8ff:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a903:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a907:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a90b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a90e:	e8 1d 4e 01 00       	call   c001f730 <lrint>
c000a913:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a918:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a91c:	99                   	cdq    
c000a91d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a920:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a923:	e9 88 fe ff ff       	jmp    c000a7b0 <sinc_mono_vari_process+0xfc>
c000a928:	83 c4 3c             	add    esp,0x3c
c000a92b:	5b                   	pop    ebx
c000a92c:	5e                   	pop    esi
c000a92d:	5f                   	pop    edi
c000a92e:	5d                   	pop    ebp
c000a92f:	c3                   	ret    

c000a930 <sinc_get_name>:
c000a930:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a934:	31 c0                	xor    eax,eax
c000a936:	83 fa 02             	cmp    edx,0x2
c000a939:	77 07                	ja     c000a942 <sinc_get_name+0x12>
c000a93b:	8b 04 95 40 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0c0]
c000a942:	c3                   	ret    

c000a943 <sinc_get_description>:
c000a943:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a947:	31 c0                	xor    eax,eax
c000a949:	83 fa 02             	cmp    edx,0x2
c000a94c:	77 07                	ja     c000a955 <sinc_get_description+0x12>
c000a94e:	8b 04 95 34 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0cc]
c000a955:	c3                   	ret    

c000a956 <sinc_set_converter>:
c000a956:	53                   	push   ebx
c000a957:	81 ec 58 08 00 00    	sub    esp,0x858
c000a95d:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a964:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a967:	85 c0                	test   eax,eax
c000a969:	74 13                	je     c000a97e <sinc_set_converter+0x28>
c000a96b:	83 ec 0c             	sub    esp,0xc
c000a96e:	50                   	push   eax
c000a96f:	e8 7d 16 00 00       	call   c000bff1 <free>
c000a974:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	50                   	push   eax
c000a97f:	68 44 08 00 00       	push   0x844
c000a984:	6a 00                	push   0x0
c000a986:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a98a:	50                   	push   eax
c000a98b:	e8 33 5d ff ff       	call   c00006c3 <memset>
c000a990:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	b8 0b 00 00 00       	mov    eax,0xb
c000a99b:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9a1:	7f 6e                	jg     c000aa11 <sinc_set_converter+0xbb>
c000a9a3:	83 fa 01             	cmp    edx,0x1
c000a9a6:	75 10                	jne    c000a9b8 <sinc_set_converter+0x62>
c000a9a8:	c7 43 24 b4 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6b4
c000a9af:	c7 43 20 b4 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6b4
c000a9b6:	eb 4d                	jmp    c000aa05 <sinc_set_converter+0xaf>
c000a9b8:	83 fa 02             	cmp    edx,0x2
c000a9bb:	75 10                	jne    c000a9cd <sinc_set_converter+0x77>
c000a9bd:	c7 43 24 37 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a437
c000a9c4:	c7 43 20 37 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a437
c000a9cb:	eb 38                	jmp    c000aa05 <sinc_set_converter+0xaf>
c000a9cd:	83 fa 04             	cmp    edx,0x4
c000a9d0:	75 10                	jne    c000a9e2 <sinc_set_converter+0x8c>
c000a9d2:	c7 43 24 ba a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1ba
c000a9d9:	c7 43 20 ba a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1ba
c000a9e0:	eb 23                	jmp    c000aa05 <sinc_set_converter+0xaf>
c000a9e2:	83 fa 06             	cmp    edx,0x6
c000a9e5:	75 10                	jne    c000a9f7 <sinc_set_converter+0xa1>
c000a9e7:	c7 43 24 3d 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f3d
c000a9ee:	c7 43 20 3d 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f3d
c000a9f5:	eb 0e                	jmp    c000aa05 <sinc_set_converter+0xaf>
c000a9f7:	c7 43 24 bb 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cbb
c000a9fe:	c7 43 20 bb 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cbb
c000aa05:	c7 43 28 79 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009679
c000aa0c:	b8 0a 00 00 00       	mov    eax,0xa
c000aa11:	81 c4 58 08 00 00    	add    esp,0x858
c000aa17:	5b                   	pop    ebx
c000aa18:	c3                   	ret    

c000aa19 <is_bad_src_ratio>:
c000aa19:	83 ec 0c             	sub    esp,0xc
c000aa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa20:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa2b:	dd 04 24             	fld    QWORD PTR [esp]
c000aa2e:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c000aa34:	de d9                	fcompp 
c000aa36:	df e0                	fnstsw ax
c000aa38:	f6 c4 45             	test   ah,0x45
c000aa3b:	74 10                	je     c000aa4d <is_bad_src_ratio+0x34>
c000aa3d:	dd 04 24             	fld    QWORD PTR [esp]
c000aa40:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c000aa46:	df e0                	fnstsw ax
c000aa48:	f6 c4 45             	test   ah,0x45
c000aa4b:	75 07                	jne    c000aa54 <is_bad_src_ratio+0x3b>
c000aa4d:	b8 01 00 00 00       	mov    eax,0x1
c000aa52:	eb 05                	jmp    c000aa59 <is_bad_src_ratio+0x40>
c000aa54:	b8 00 00 00 00       	mov    eax,0x0
c000aa59:	83 c4 0c             	add    esp,0xc
c000aa5c:	c3                   	ret    

c000aa5d <fmod_one>:
c000aa5d:	83 ec 2c             	sub    esp,0x2c
c000aa60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa70:	83 ec 08             	sub    esp,0x8
c000aa73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa7b:	e8 b0 4c 01 00       	call   c001f730 <lrint>
c000aa80:	83 c4 10             	add    esp,0x10
c000aa83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa87:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa8b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa8f:	de e1                	fsubrp st(1),st
c000aa91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa95:	d9 ee                	fldz   
c000aa97:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa9b:	df e0                	fnstsw ax
c000aa9d:	f6 c4 45             	test   ah,0x45
c000aaa0:	75 0a                	jne    c000aaac <fmod_one+0x4f>
c000aaa2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa6:	d9 e8                	fld1   
c000aaa8:	de c1                	faddp  st(1),st
c000aaaa:	eb 04                	jmp    c000aab0 <fmod_one+0x53>
c000aaac:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aab0:	83 c4 2c             	add    esp,0x2c
c000aab3:	c3                   	ret    

c000aab4 <zoh_vari_process>:
c000aab4:	55                   	push   ebp
c000aab5:	57                   	push   edi
c000aab6:	56                   	push   esi
c000aab7:	53                   	push   ebx
c000aab8:	83 ec 2c             	sub    esp,0x2c
c000aabb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aabf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aac3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aacb:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aacf:	0f 8e 30 02 00 00    	jle    c000ad05 <zoh_vari_process+0x251>
c000aad5:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aad8:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aae0:	85 db                	test   ebx,ebx
c000aae2:	0f 84 1d 02 00 00    	je     c000ad05 <zoh_vari_process+0x251>
c000aae8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aaeb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aaef:	74 19                	je     c000ab0a <zoh_vari_process+0x56>
c000aaf1:	31 d2                	xor    edx,edx
c000aaf3:	39 c2                	cmp    edx,eax
c000aaf5:	7d 0c                	jge    c000ab03 <zoh_vari_process+0x4f>
c000aaf7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf9:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aafc:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab00:	42                   	inc    edx
c000ab01:	eb f0                	jmp    c000aaf3 <zoh_vari_process+0x3f>
c000ab03:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab0a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab0d:	0f af d0             	imul   edx,eax
c000ab10:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab13:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab1e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab21:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab28:	dd 07                	fld    QWORD PTR [edi]
c000ab2a:	dd 14 24             	fst    QWORD PTR [esp]
c000ab2d:	50                   	push   eax
c000ab2e:	50                   	push   eax
c000ab2f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab32:	e8 e2 fe ff ff       	call   c000aa19 <is_bad_src_ratio>
c000ab37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab3b:	5a                   	pop    edx
c000ab3c:	59                   	pop    ecx
c000ab3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab42:	0f 85 b5 01 00 00    	jne    c000acfd <zoh_vari_process+0x249>
c000ab48:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab4b:	d9 e8                	fld1   
c000ab4d:	d8 d1                	fcom   st(1)
c000ab4f:	df e0                	fnstsw ax
c000ab51:	9e                   	sahf   
c000ab52:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab56:	0f 86 83 00 00 00    	jbe    c000abdf <zoh_vari_process+0x12b>
c000ab5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab62:	7d 7b                	jge    c000abdf <zoh_vari_process+0x12b>
c000ab64:	d9 c0                	fld    st(0)
c000ab66:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab69:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab6c:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab6f:	df e0                	fnstsw ax
c000ab71:	9e                   	sahf   
c000ab72:	73 6b                	jae    c000abdf <zoh_vari_process+0x12b>
c000ab74:	85 d2                	test   edx,edx
c000ab76:	7e 36                	jle    c000abae <zoh_vari_process+0xfa>
c000ab78:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab7c:	dd 07                	fld    QWORD PTR [edi]
c000ab7e:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab81:	83 ec 10             	sub    esp,0x10
c000ab84:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab87:	e8 84 4b 01 00       	call   c001f710 <fabs>
c000ab8c:	83 c4 10             	add    esp,0x10
c000ab8f:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c000ab95:	df e0                	fnstsw ax
c000ab97:	9e                   	sahf   
c000ab98:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab9c:	76 10                	jbe    c000abae <zoh_vari_process+0xfa>
c000ab9e:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000aba1:	dc 27                	fsub   QWORD PTR [edi]
c000aba3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aba6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba9:	dc 07                	fadd   QWORD PTR [edi]
c000abab:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abae:	31 c0                	xor    eax,eax
c000abb0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abb3:	7e 13                	jle    c000abc8 <zoh_vari_process+0x114>
c000abb5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abbc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abbf:	40                   	inc    eax
c000abc0:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abc3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abc6:	eb e8                	jmp    c000abb0 <zoh_vari_process+0xfc>
c000abc8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abcc:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abcf:	de c1                	faddp  st(1),st
c000abd1:	e9 75 ff ff ff       	jmp    c000ab4b <zoh_vari_process+0x97>
c000abd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abda:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abdd:	de c1                	faddp  st(1),st
c000abdf:	83 ec 10             	sub    esp,0x10
c000abe2:	dd 14 24             	fst    QWORD PTR [esp]
c000abe5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe9:	e8 6f fe ff ff       	call   c000aa5d <fmod_one>
c000abee:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abf1:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abf5:	d8 e1                	fsub   st,st(1)
c000abf7:	d9 c9                	fxch   st(1)
c000abf9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abfd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac00:	e8 2b 4b 01 00       	call   c001f730 <lrint>
c000ac05:	83 c4 10             	add    esp,0x10
c000ac08:	0f af e8             	imul   ebp,eax
c000ac0b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac0e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac11:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac15:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac18:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac1b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac1e:	0f 8d 80 00 00 00    	jge    c000aca4 <zoh_vari_process+0x1f0>
c000ac24:	d9 c0                	fld    st(0)
c000ac26:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac29:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac2d:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac31:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac35:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac39:	de d9                	fcompp 
c000ac3b:	df e0                	fnstsw ax
c000ac3d:	9e                   	sahf   
c000ac3e:	72 64                	jb     c000aca4 <zoh_vari_process+0x1f0>
c000ac40:	85 d2                	test   edx,edx
c000ac42:	7e 36                	jle    c000ac7a <zoh_vari_process+0x1c6>
c000ac44:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac48:	dd 07                	fld    QWORD PTR [edi]
c000ac4a:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac4d:	83 ec 10             	sub    esp,0x10
c000ac50:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac53:	e8 b8 4a 01 00       	call   c001f710 <fabs>
c000ac58:	83 c4 10             	add    esp,0x10
c000ac5b:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c000ac61:	df e0                	fnstsw ax
c000ac63:	9e                   	sahf   
c000ac64:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac68:	76 10                	jbe    c000ac7a <zoh_vari_process+0x1c6>
c000ac6a:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac6d:	dc 27                	fsub   QWORD PTR [edi]
c000ac6f:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac72:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac75:	dc 07                	fadd   QWORD PTR [edi]
c000ac77:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac7a:	31 d2                	xor    edx,edx
c000ac7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac7f:	39 d0                	cmp    eax,edx
c000ac81:	0f 8e 4f ff ff ff    	jle    c000abd6 <zoh_vari_process+0x122>
c000ac87:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac8a:	29 c1                	sub    ecx,eax
c000ac8c:	89 c8                	mov    eax,ecx
c000ac8e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac90:	01 d0                	add    eax,edx
c000ac92:	42                   	inc    edx
c000ac93:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac96:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac99:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac9c:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac9f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000aca2:	eb d8                	jmp    c000ac7c <zoh_vari_process+0x1c8>
c000aca4:	39 e9                	cmp    ecx,ebp
c000aca6:	7d 13                	jge    c000acbb <zoh_vari_process+0x207>
c000aca8:	89 e8                	mov    eax,ebp
c000acaa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acad:	29 c8                	sub    eax,ecx
c000acaf:	99                   	cdq    
c000acb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb7:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acbb:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc1:	85 c0                	test   eax,eax
c000acc3:	7f 1b                	jg     c000ace0 <zoh_vari_process+0x22c>
c000acc5:	dd 04 24             	fld    QWORD PTR [esp]
c000acc8:	dd 1f                	fstp   QWORD PTR [edi]
c000acca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000accd:	99                   	cdq    
c000acce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acd4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acd7:	99                   	cdq    
c000acd8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acdb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acde:	eb 25                	jmp    c000ad05 <zoh_vari_process+0x251>
c000ace0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ace3:	31 d2                	xor    edx,edx
c000ace5:	29 e8                	sub    eax,ebp
c000ace7:	c1 e0 02             	shl    eax,0x2
c000acea:	39 d5                	cmp    ebp,edx
c000acec:	7e d7                	jle    c000acc5 <zoh_vari_process+0x211>
c000acee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acf0:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acf3:	83 c0 04             	add    eax,0x4
c000acf6:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acfa:	42                   	inc    edx
c000acfb:	eb ed                	jmp    c000acea <zoh_vari_process+0x236>
c000acfd:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad09:	83 c4 2c             	add    esp,0x2c
c000ad0c:	5b                   	pop    ebx
c000ad0d:	5e                   	pop    esi
c000ad0e:	5f                   	pop    edi
c000ad0f:	5d                   	pop    ebp
c000ad10:	c3                   	ret    

c000ad11 <zoh_reset>:
c000ad11:	83 ec 0c             	sub    esp,0xc
c000ad14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad18:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad1b:	85 c0                	test   eax,eax
c000ad1d:	74 20                	je     c000ad3f <zoh_reset+0x2e>
c000ad1f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad22:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad2c:	51                   	push   ecx
c000ad2d:	c1 e2 02             	shl    edx,0x2
c000ad30:	83 c0 1c             	add    eax,0x1c
c000ad33:	52                   	push   edx
c000ad34:	6a 00                	push   0x0
c000ad36:	50                   	push   eax
c000ad37:	e8 87 59 ff ff       	call   c00006c3 <memset>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	83 c4 0c             	add    esp,0xc
c000ad42:	c3                   	ret    

c000ad43 <zoh_get_name>:
c000ad43:	31 c0                	xor    eax,eax
c000ad45:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad4a:	75 05                	jne    c000ad51 <zoh_get_name+0xe>
c000ad4c:	b8 74 10 02 c0       	mov    eax,0xc0021074
c000ad51:	c3                   	ret    

c000ad52 <zoh_get_description>:
c000ad52:	31 c0                	xor    eax,eax
c000ad54:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad59:	75 05                	jne    c000ad60 <zoh_get_description+0xe>
c000ad5b:	b8 85 10 02 c0       	mov    eax,0xc0021085
c000ad60:	c3                   	ret    

c000ad61 <zoh_set_converter>:
c000ad61:	53                   	push   ebx
c000ad62:	b8 0a 00 00 00       	mov    eax,0xa
c000ad67:	83 ec 08             	sub    esp,0x8
c000ad6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad6e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad73:	75 6e                	jne    c000ade3 <zoh_set_converter+0x82>
c000ad75:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad78:	85 c0                	test   eax,eax
c000ad7a:	74 13                	je     c000ad8f <zoh_set_converter+0x2e>
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	50                   	push   eax
c000ad80:	e8 6c 12 00 00       	call   c000bff1 <free>
c000ad85:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad8c:	83 c4 10             	add    esp,0x10
c000ad8f:	50                   	push   eax
c000ad90:	50                   	push   eax
c000ad91:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad94:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad9b:	50                   	push   eax
c000ad9c:	6a 01                	push   0x1
c000ad9e:	e8 6e 12 00 00       	call   c000c011 <calloc>
c000ada3:	89 c2                	mov    edx,eax
c000ada5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ada8:	83 c4 10             	add    esp,0x10
c000adab:	b8 01 00 00 00       	mov    eax,0x1
c000adb0:	85 d2                	test   edx,edx
c000adb2:	74 2f                	je     c000ade3 <zoh_set_converter+0x82>
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adbd:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adc3:	c7 43 24 b4 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aab4
c000adca:	c7 43 20 b4 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aab4
c000add1:	c7 43 28 11 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad11
c000add8:	53                   	push   ebx
c000add9:	e8 33 ff ff ff       	call   c000ad11 <zoh_reset>
c000adde:	83 c4 10             	add    esp,0x10
c000ade1:	31 c0                	xor    eax,eax
c000ade3:	83 c4 08             	add    esp,0x8
c000ade6:	5b                   	pop    ebx
c000ade7:	c3                   	ret    

c000ade8 <Computer::close(int, int, void*)>:
c000ade8:	57                   	push   edi
c000ade9:	56                   	push   esi
c000adea:	53                   	push   ebx
c000adeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adf3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adf7:	83 ec 0c             	sub    esp,0xc
c000adfa:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae00:	50                   	push   eax
c000ae01:	e8 98 59 00 00       	call   c001079e <Device::closeAll()>
c000ae06:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae0c:	83 c4 10             	add    esp,0x10
c000ae0f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae11:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae15:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae1d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae25:	5b                   	pop    ebx
c000ae26:	5e                   	pop    esi
c000ae27:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae2a:	5f                   	pop    edi
c000ae2b:	ff e0                	jmp    eax
c000ae2d:	90                   	nop

c000ae2e <Computer::Computer()>:
c000ae2e:	83 ec 0c             	sub    esp,0xc
c000ae31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae35:	83 ec 08             	sub    esp,0x8
c000ae38:	68 bc 10 02 c0       	push   0xc00210bc
c000ae3d:	50                   	push   eax
c000ae3e:	e8 d5 59 00 00       	call   c0010818 <Device::Device(char const*)>
c000ae43:	83 c4 10             	add    esp,0x10
c000ae46:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	89 10                	mov    DWORD PTR [eax],edx
c000ae51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae55:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae63:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae71:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae77:	83 ca 04             	or     edx,0x4
c000ae7a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae8a:	31 d2                	xor    edx,edx
c000ae8c:	88 c2                	mov    dl,al
c000ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae92:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aea3:	31 d2                	xor    edx,edx
c000aea5:	88 c2                	mov    dl,al
c000aea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeab:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeba:	8d 50 01             	lea    edx,[eax+0x1]
c000aebd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aec1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec7:	31 d2                	xor    edx,edx
c000aec9:	88 c2                	mov    dl,al
c000aecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aed3:	83 e1 3f             	and    ecx,0x3f
c000aed6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee4:	31 d2                	xor    edx,edx
c000aee6:	88 c2                	mov    dl,al
c000aee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeec:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aefd:	31 d2                	xor    edx,edx
c000aeff:	88 c2                	mov    dl,al
c000af01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af05:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af14:	8d 50 01             	lea    edx,[eax+0x1]
c000af17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af1b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af21:	31 d2                	xor    edx,edx
c000af23:	88 c2                	mov    dl,al
c000af25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af29:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af2d:	83 e1 3f             	and    ecx,0x3f
c000af30:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af3e:	31 d2                	xor    edx,edx
c000af40:	88 c2                	mov    dl,al
c000af42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af46:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af57:	31 d2                	xor    edx,edx
c000af59:	88 c2                	mov    dl,al
c000af5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af6e:	8d 50 01             	lea    edx,[eax+0x1]
c000af71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af75:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af7b:	31 d2                	xor    edx,edx
c000af7d:	88 c2                	mov    dl,al
c000af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af83:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af87:	83 e1 3f             	and    ecx,0x3f
c000af8a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af8e:	90                   	nop
c000af8f:	83 c4 0c             	add    esp,0xc
c000af92:	c3                   	ret    
c000af93:	90                   	nop

c000af94 <Computer::setBootMessage(char const*)>:
c000af94:	c3                   	ret    
c000af95:	90                   	nop

c000af96 <Computer::start()>:
c000af96:	56                   	push   esi
c000af97:	53                   	push   ebx
c000af98:	83 ec 14             	sub    esp,0x14
c000af9b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000af9f:	e8 8d da 00 00       	call   c0018a31 <lockScheduler()>
c000afa4:	e8 d1 dd 00 00       	call   c0018d7a <schedule()>
c000afa9:	e8 85 da 00 00       	call   c0018a33 <unlockScheduler()>
c000afae:	fb                   	sti    
c000afaf:	83 ec 0c             	sub    esp,0xc
c000afb2:	68 3b 07 00 00       	push   0x73b
c000afb7:	e8 22 41 00 00       	call   c000f0de <operator new(unsigned long)>
c000afbc:	89 c6                	mov    esi,eax
c000afbe:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c000afc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afca:	50                   	push   eax
c000afcb:	68 c5 10 02 c0       	push   0xc00210c5
c000afd0:	6a 01                	push   0x1
c000afd2:	56                   	push   esi
c000afd3:	e8 b0 d8 00 00       	call   c0018888 <Process::Process(bool, char const*, Process*, char**)>
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	68 ff 00 00 00       	push   0xff
c000afe0:	6a 00                	push   0x0
c000afe2:	68 6f b9 00 c0       	push   0xc000b96f
c000afe7:	56                   	push   esi
c000afe8:	e8 79 db 00 00       	call   c0018b66 <Process::createThread(void (*)(void*), void*, int)>
c000afed:	6a 7a                	push   0x7a
c000afef:	8b 15 b4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bb4
c000aff5:	6a 00                	push   0x0
c000aff7:	68 ab 93 01 c0       	push   0xc00193ab
c000affc:	52                   	push   edx
c000affd:	e8 64 db 00 00       	call   c0018b66 <Process::createThread(void (*)(void*), void*, int)>
c000b002:	83 c4 20             	add    esp,0x20
c000b005:	a3 68 5b 02 c0       	mov    ds:0xc0025b68,eax
c000b00a:	c6 05 6d 47 02 c0 01 	mov    BYTE PTR ds:0xc002476d,0x1
c000b011:	e8 60 45 00 00       	call   c000f576 <initVFS()>
c000b016:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b01c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b01e:	6a 00                	push   0x0
c000b020:	6a 00                	push   0x0
c000b022:	6a 00                	push   0x0
c000b024:	50                   	push   eax
c000b025:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b028:	e8 52 c2 00 00       	call   c001727f <setupSystemCalls()>
c000b02d:	e8 42 50 00 00       	call   c0010074 <loadClockSettings()>
c000b032:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b035:	e8 38 57 00 00       	call   c0010772 <Device::loadDriversForAll()>
c000b03a:	bb 02 00 00 00       	mov    ebx,0x2
c000b03f:	b8 01 00 00 00       	mov    eax,0x1
c000b044:	31 d2                	xor    edx,edx
c000b046:	31 c9                	xor    ecx,ecx
c000b048:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b050:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b058:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b05e:	59                   	pop    ecx
c000b05f:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c000b065:	5e                   	pop    esi
c000b066:	6a 01                	push   0x1
c000b068:	68 d2 10 02 c0       	push   0xc00210d2
c000b06d:	e8 d9 d3 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c000b072:	5a                   	pop    edx
c000b073:	59                   	pop    ecx
c000b074:	53                   	push   ebx
c000b075:	50                   	push   eax
c000b076:	e8 96 d5 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c000b07b:	c7 04 24 b8 22 02 c0 	mov    DWORD PTR [esp],0xc00222b8
c000b082:	e8 8c 41 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	6a 02                	push   0x2
c000b08f:	e8 3f de 00 00       	call   c0018ed3 <blockTask(TaskState)>
c000b094:	83 c4 10             	add    esp,0x10
c000b097:	eb f1                	jmp    c000b08a <Computer::start()+0xf4>

c000b099 <firstTask()>:
c000b099:	83 ec 18             	sub    esp,0x18
c000b09c:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c000b0a1:	50                   	push   eax
c000b0a2:	e8 ef fe ff ff       	call   c000af96 <Computer::start()>
c000b0a7:	90                   	nop

c000b0a8 <Computer::detectFeatures()>:
c000b0a8:	55                   	push   ebp
c000b0a9:	57                   	push   edi
c000b0aa:	56                   	push   esi
c000b0ab:	53                   	push   ebx
c000b0ac:	83 ec 1c             	sub    esp,0x1c
c000b0af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0b3:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0b9:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0bf:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0c5:	e8 b0 52 ff ff       	call   c000037a <detectCPUID>
c000b0ca:	85 c0                	test   eax,eax
c000b0cc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0d2:	0f 95 c2             	setne  dl
c000b0d5:	01 d2                	add    edx,edx
c000b0d7:	83 e0 fd             	and    eax,0xfffffffd
c000b0da:	09 d0                	or     eax,edx
c000b0dc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0e2:	a8 02                	test   al,0x2
c000b0e4:	75 4e                	jne    c000b134 <Computer::detectFeatures()+0x8c>
c000b0e6:	f6 05 81 47 02 c0 04 	test   BYTE PTR ds:0xc0024781,0x4
c000b0ed:	74 0f                	je     c000b0fe <Computer::detectFeatures()+0x56>
c000b0ef:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0f5:	83 e0 fb             	and    eax,0xfffffffb
c000b0f8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0fe:	e8 b3 40 01 00       	call   c001f1b6 <x87Detect>
c000b103:	83 e0 01             	and    eax,0x1
c000b106:	c1 e0 04             	shl    eax,0x4
c000b109:	88 c2                	mov    dl,al
c000b10b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b111:	83 e0 ef             	and    eax,0xffffffef
c000b114:	09 d0                	or     eax,edx
c000b116:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b11c:	a8 10                	test   al,0x10
c000b11e:	0f 85 20 01 00 00    	jne    c000b244 <Computer::detectFeatures()+0x19c>
c000b124:	84 c0                	test   al,al
c000b126:	0f 88 3b 01 00 00    	js     c000b267 <Computer::detectFeatures()+0x1bf>
c000b12c:	83 c4 1c             	add    esp,0x1c
c000b12f:	5b                   	pop    ebx
c000b130:	5e                   	pop    esi
c000b131:	5f                   	pop    edi
c000b132:	5d                   	pop    ebp
c000b133:	c3                   	ret    
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	6a 20                	push   0x20
c000b139:	e8 c7 96 00 00       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c000b13e:	83 e0 01             	and    eax,0x1
c000b141:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b148:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b14e:	83 e0 f7             	and    eax,0xfffffff7
c000b151:	09 d0                	or     eax,edx
c000b153:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b159:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b160:	e8 a0 96 00 00       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c000b165:	83 e0 01             	and    eax,0x1
c000b168:	88 c2                	mov    dl,al
c000b16a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b170:	83 e0 fe             	and    eax,0xfffffffe
c000b173:	09 d0                	or     eax,edx
c000b175:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b17b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b182:	e8 7e 96 00 00       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c000b187:	c1 e0 07             	shl    eax,0x7
c000b18a:	88 c2                	mov    dl,al
c000b18c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b192:	83 e0 7f             	and    eax,0x7f
c000b195:	09 d0                	or     eax,edx
c000b197:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b19d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1a4:	e8 5c 96 00 00       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	83 e0 01             	and    eax,0x1
c000b1af:	c1 e0 05             	shl    eax,0x5
c000b1b2:	88 c2                	mov    dl,al
c000b1b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1ba:	83 e0 df             	and    eax,0xffffffdf
c000b1bd:	09 d0                	or     eax,edx
c000b1bf:	f7 05 80 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024780,0x401
c000b1c9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1cf:	0f 84 b8 00 00 00    	je     c000b28d <Computer::detectFeatures()+0x1e5>
c000b1d5:	83 ec 0c             	sub    esp,0xc
c000b1d8:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1de:	83 e1 fe             	and    ecx,0xfffffffe
c000b1e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e5:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1eb:	50                   	push   eax
c000b1ec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1f0:	55                   	push   ebp
c000b1f1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1f5:	57                   	push   edi
c000b1f6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1fa:	56                   	push   esi
c000b1fb:	68 00 00 00 80       	push   0x80000000
c000b200:	e8 7d 95 00 00       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b205:	83 c4 20             	add    esp,0x20
c000b208:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b20f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b213:	0f 86 cd fe ff ff    	jbe    c000b0e6 <Computer::detectFeatures()+0x3e>
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	50                   	push   eax
c000b21d:	55                   	push   ebp
c000b21e:	57                   	push   edi
c000b21f:	56                   	push   esi
c000b220:	68 01 00 00 80       	push   0x80000001
c000b225:	e8 58 95 00 00       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b22a:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b230:	83 c4 20             	add    esp,0x20
c000b233:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b239:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b23f:	e9 a2 fe ff ff       	jmp    c000b0e6 <Computer::detectFeatures()+0x3e>
c000b244:	e8 27 3f 01 00       	call   c001f170 <sseDetect>
c000b249:	88 c2                	mov    dl,al
c000b24b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b251:	c1 e2 07             	shl    edx,0x7
c000b254:	83 e0 7f             	and    eax,0x7f
c000b257:	09 d0                	or     eax,edx
c000b259:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b25f:	84 c0                	test   al,al
c000b261:	0f 89 c5 fe ff ff    	jns    c000b12c <Computer::detectFeatures()+0x84>
c000b267:	e8 f4 3e 01 00       	call   c001f160 <avxDetect>
c000b26c:	83 e0 01             	and    eax,0x1
c000b26f:	c1 e0 05             	shl    eax,0x5
c000b272:	88 c2                	mov    dl,al
c000b274:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b27a:	83 e0 df             	and    eax,0xffffffdf
c000b27d:	09 d0                	or     eax,edx
c000b27f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b285:	83 c4 1c             	add    esp,0x1c
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	5d                   	pop    ebp
c000b28c:	c3                   	ret    
c000b28d:	83 ec 0c             	sub    esp,0xc
c000b290:	68 00 02 00 00       	push   0x200
c000b295:	e8 6b 95 00 00       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	e9 33 ff ff ff       	jmp    c000b1d5 <Computer::detectFeatures()+0x12d>

c000b2a2 <Computer::displayFeatures()>:
c000b2a2:	53                   	push   ebx
c000b2a3:	83 ec 14             	sub    esp,0x14
c000b2a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2aa:	68 f5 10 02 c0       	push   0xc00210f5
c000b2af:	e8 5f 3f 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b2bc:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2c3:	74 05                	je     c000b2ca <Computer::displayFeatures()+0x28>
c000b2c5:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2ca:	51                   	push   ecx
c000b2cb:	51                   	push   ecx
c000b2cc:	50                   	push   eax
c000b2cd:	68 08 11 02 c0       	push   0xc0021108
c000b2d2:	e8 3c 3f 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2df:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2e6:	75 05                	jne    c000b2ed <Computer::displayFeatures()+0x4b>
c000b2e8:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b2ed:	52                   	push   edx
c000b2ee:	52                   	push   edx
c000b2ef:	50                   	push   eax
c000b2f0:	68 19 11 02 c0       	push   0xc0021119
c000b2f5:	e8 19 3f 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b302:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b309:	75 05                	jne    c000b310 <Computer::displayFeatures()+0x6e>
c000b30b:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b310:	51                   	push   ecx
c000b311:	51                   	push   ecx
c000b312:	50                   	push   eax
c000b313:	68 2a 11 02 c0       	push   0xc002112a
c000b318:	e8 f6 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b31d:	83 c4 10             	add    esp,0x10
c000b320:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b325:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b32c:	75 05                	jne    c000b333 <Computer::displayFeatures()+0x91>
c000b32e:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b333:	52                   	push   edx
c000b334:	52                   	push   edx
c000b335:	50                   	push   eax
c000b336:	68 3b 11 02 c0       	push   0xc002113b
c000b33b:	e8 d3 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b348:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b34f:	75 05                	jne    c000b356 <Computer::displayFeatures()+0xb4>
c000b351:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b356:	51                   	push   ecx
c000b357:	51                   	push   ecx
c000b358:	50                   	push   eax
c000b359:	68 4c 11 02 c0       	push   0xc002114c
c000b35e:	e8 b0 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b363:	83 c4 10             	add    esp,0x10
c000b366:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b36b:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b372:	75 05                	jne    c000b379 <Computer::displayFeatures()+0xd7>
c000b374:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b379:	52                   	push   edx
c000b37a:	52                   	push   edx
c000b37b:	50                   	push   eax
c000b37c:	68 5d 11 02 c0       	push   0xc002115d
c000b381:	e8 8d 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b38e:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b395:	75 05                	jne    c000b39c <Computer::displayFeatures()+0xfa>
c000b397:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b39c:	51                   	push   ecx
c000b39d:	51                   	push   ecx
c000b39e:	50                   	push   eax
c000b39f:	68 6e 11 02 c0       	push   0xc002116e
c000b3a4:	e8 6a 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b3a9:	83 c4 10             	add    esp,0x10
c000b3ac:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3b1:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3b8:	78 05                	js     c000b3bf <Computer::displayFeatures()+0x11d>
c000b3ba:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b3bf:	52                   	push   edx
c000b3c0:	52                   	push   edx
c000b3c1:	50                   	push   eax
c000b3c2:	68 7f 11 02 c0       	push   0xc002117f
c000b3c7:	e8 47 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3d4:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3db:	0f 84 93 01 00 00    	je     c000b574 <Computer::displayFeatures()+0x2d2>
c000b3e1:	51                   	push   ecx
c000b3e2:	51                   	push   ecx
c000b3e3:	50                   	push   eax
c000b3e4:	68 90 11 02 c0       	push   0xc0021190
c000b3e9:	e8 25 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3f6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3fd:	0f 84 67 01 00 00    	je     c000b56a <Computer::displayFeatures()+0x2c8>
c000b403:	52                   	push   edx
c000b404:	52                   	push   edx
c000b405:	50                   	push   eax
c000b406:	68 a1 11 02 c0       	push   0xc00211a1
c000b40b:	e8 03 3e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b410:	83 c4 10             	add    esp,0x10
c000b413:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b418:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b41f:	0f 84 3b 01 00 00    	je     c000b560 <Computer::displayFeatures()+0x2be>
c000b425:	51                   	push   ecx
c000b426:	51                   	push   ecx
c000b427:	50                   	push   eax
c000b428:	68 b2 11 02 c0       	push   0xc00211b2
c000b42d:	e8 e1 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b43a:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b441:	0f 84 0f 01 00 00    	je     c000b556 <Computer::displayFeatures()+0x2b4>
c000b447:	52                   	push   edx
c000b448:	52                   	push   edx
c000b449:	50                   	push   eax
c000b44a:	68 c3 11 02 c0       	push   0xc00211c3
c000b44f:	e8 bf 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b454:	83 c4 10             	add    esp,0x10
c000b457:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b45c:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b463:	0f 84 e3 00 00 00    	je     c000b54c <Computer::displayFeatures()+0x2aa>
c000b469:	51                   	push   ecx
c000b46a:	51                   	push   ecx
c000b46b:	50                   	push   eax
c000b46c:	68 d4 11 02 c0       	push   0xc00211d4
c000b471:	e8 9d 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b476:	83 c4 10             	add    esp,0x10
c000b479:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b47e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b485:	0f 84 b7 00 00 00    	je     c000b542 <Computer::displayFeatures()+0x2a0>
c000b48b:	52                   	push   edx
c000b48c:	52                   	push   edx
c000b48d:	50                   	push   eax
c000b48e:	68 e5 11 02 c0       	push   0xc00211e5
c000b493:	e8 7b 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4a0:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4a7:	0f 84 8b 00 00 00    	je     c000b538 <Computer::displayFeatures()+0x296>
c000b4ad:	51                   	push   ecx
c000b4ae:	51                   	push   ecx
c000b4af:	50                   	push   eax
c000b4b0:	68 f6 11 02 c0       	push   0xc00211f6
c000b4b5:	e8 59 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4c2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4c9:	78 05                	js     c000b4d0 <Computer::displayFeatures()+0x22e>
c000b4cb:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b4d0:	52                   	push   edx
c000b4d1:	52                   	push   edx
c000b4d2:	50                   	push   eax
c000b4d3:	68 07 12 02 c0       	push   0xc0021207
c000b4d8:	e8 36 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b4dd:	83 c4 10             	add    esp,0x10
c000b4e0:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4e5:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4ec:	74 43                	je     c000b531 <Computer::displayFeatures()+0x28f>
c000b4ee:	51                   	push   ecx
c000b4ef:	51                   	push   ecx
c000b4f0:	50                   	push   eax
c000b4f1:	68 18 12 02 c0       	push   0xc0021218
c000b4f6:	e8 18 3d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b503:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b50a:	74 1e                	je     c000b52a <Computer::displayFeatures()+0x288>
c000b50c:	52                   	push   edx
c000b50d:	52                   	push   edx
c000b50e:	50                   	push   eax
c000b50f:	68 29 12 02 c0       	push   0xc0021229
c000b514:	e8 fa 3c 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b519:	c7 44 24 20 96 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022896
c000b521:	83 c4 18             	add    esp,0x18
c000b524:	5b                   	pop    ebx
c000b525:	e9 e9 3c 00 00       	jmp    c000f213 <Dbg::kprintf(char const*, ...)>
c000b52a:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b52f:	eb db                	jmp    c000b50c <Computer::displayFeatures()+0x26a>
c000b531:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b536:	eb b6                	jmp    c000b4ee <Computer::displayFeatures()+0x24c>
c000b538:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b53d:	e9 6b ff ff ff       	jmp    c000b4ad <Computer::displayFeatures()+0x20b>
c000b542:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b547:	e9 3f ff ff ff       	jmp    c000b48b <Computer::displayFeatures()+0x1e9>
c000b54c:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b551:	e9 13 ff ff ff       	jmp    c000b469 <Computer::displayFeatures()+0x1c7>
c000b556:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b55b:	e9 e7 fe ff ff       	jmp    c000b447 <Computer::displayFeatures()+0x1a5>
c000b560:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b565:	e9 bb fe ff ff       	jmp    c000b425 <Computer::displayFeatures()+0x183>
c000b56a:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b56f:	e9 8f fe ff ff       	jmp    c000b403 <Computer::displayFeatures()+0x161>
c000b574:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b579:	e9 63 fe ff ff       	jmp    c000b3e1 <Computer::displayFeatures()+0x13f>

c000b57e <Computer::rdmsr(unsigned int)>:
c000b57e:	83 ec 0c             	sub    esp,0xc
c000b581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b585:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b58c:	74 0a                	je     c000b598 <Computer::rdmsr(unsigned int)+0x1a>
c000b58e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b592:	0f 32                	rdmsr  
c000b594:	83 c4 0c             	add    esp,0xc
c000b597:	c3                   	ret    
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	68 3a 12 02 c0       	push   0xc002123a
c000b5a0:	e8 83 a4 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000b5a5:	83 c4 10             	add    esp,0x10
c000b5a8:	eb e4                	jmp    c000b58e <Computer::rdmsr(unsigned int)+0x10>

c000b5aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5aa:	57                   	push   edi
c000b5ab:	56                   	push   esi
c000b5ac:	52                   	push   edx
c000b5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5c0:	74 0e                	je     c000b5d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5c6:	89 f0                	mov    eax,esi
c000b5c8:	89 fa                	mov    edx,edi
c000b5ca:	0f 30                	wrmsr  
c000b5cc:	58                   	pop    eax
c000b5cd:	5e                   	pop    esi
c000b5ce:	5f                   	pop    edi
c000b5cf:	c3                   	ret    
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	68 40 12 02 c0       	push   0xc0021240
c000b5d8:	e8 4b a4 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000b5dd:	83 c4 10             	add    esp,0x10
c000b5e0:	eb e0                	jmp    c000b5c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5e2 <Computer::nmiEnabled()>:
c000b5e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5ec:	c3                   	ret    
c000b5ed:	90                   	nop

c000b5ee <Computer::readCMOS(unsigned char)>:
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5fd:	19 c0                	sbb    eax,eax
c000b5ff:	83 e0 80             	and    eax,0xffffff80
c000b602:	09 d0                	or     eax,edx
c000b604:	e6 70                	out    0x70,al
c000b606:	e4 71                	in     al,0x71
c000b608:	c3                   	ret    
c000b609:	90                   	nop

c000b60a <Computer::enableNMI(bool)>:
c000b60a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b60e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b612:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b618:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b620:	eb cc                	jmp    c000b5ee <Computer::readCMOS(unsigned char)>

c000b622 <Computer::open(int, int, void*)>:
c000b622:	56                   	push   esi
c000b623:	53                   	push   ebx
c000b624:	83 ec 10             	sub    esp,0x10
c000b627:	f6 05 80 47 02 c0 04 	test   BYTE PTR ds:0xc0024780,0x4
c000b62e:	0f 94 05 a0 3b 02 c0 	sete   BYTE PTR ds:0xc0023ba0
c000b635:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b639:	68 68 22 00 00       	push   0x2268
c000b63e:	e8 9b 3a 00 00       	call   c000f0de <operator new(unsigned long)>
c000b643:	89 c6                	mov    esi,eax
c000b645:	89 04 24             	mov    DWORD PTR [esp],eax
c000b648:	e8 a5 87 00 00       	call   c0013df2 <ACPI::ACPI()>
c000b64d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b653:	59                   	pop    ecx
c000b654:	58                   	pop    eax
c000b655:	56                   	push   esi
c000b656:	53                   	push   ebx
c000b657:	e8 cc 4f 00 00       	call   c0010628 <Device::addChild(Device*)>
c000b65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b65f:	e8 44 fa ff ff       	call   c000b0a8 <Computer::detectFeatures()>
c000b664:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b667:	e8 36 fc ff ff       	call   c000b2a2 <Computer::displayFeatures()>
c000b66c:	58                   	pop    eax
c000b66d:	5a                   	pop    edx
c000b66e:	6a 01                	push   0x1
c000b670:	53                   	push   ebx
c000b671:	e8 94 ff ff ff       	call   c000b60a <Computer::enableNMI(bool)>
c000b676:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b67d:	e8 5c 3a 00 00       	call   c000f0de <operator new(unsigned long)>
c000b682:	89 c6                	mov    esi,eax
c000b684:	89 04 24             	mov    DWORD PTR [esp],eax
c000b687:	e8 44 92 00 00       	call   c00148d0 <CPU::CPU()>
c000b68c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b692:	59                   	pop    ecx
c000b693:	58                   	pop    eax
c000b694:	56                   	push   esi
c000b695:	53                   	push   ebx
c000b696:	e8 8d 4f 00 00       	call   c0010628 <Device::addChild(Device*)>
c000b69b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6a1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6a5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6a7:	51                   	push   ecx
c000b6a8:	6a 00                	push   0x0
c000b6aa:	6a 00                	push   0x0
c000b6ac:	50                   	push   eax
c000b6ad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6b0:	83 c4 20             	add    esp,0x20
c000b6b3:	e8 d8 54 00 00       	call   c0010b90 <setupFPU()>
c000b6b8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6be:	85 c0                	test   eax,eax
c000b6c0:	74 1e                	je     c000b6e0 <Computer::open(int, int, void*)+0xbe>
c000b6c2:	52                   	push   edx
c000b6c3:	52                   	push   edx
c000b6c4:	50                   	push   eax
c000b6c5:	53                   	push   ebx
c000b6c6:	e8 5d 4f 00 00       	call   c0010628 <Device::addChild(Device*)>
c000b6cb:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6d1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6d3:	6a 00                	push   0x0
c000b6d5:	6a 00                	push   0x0
c000b6d7:	6a 00                	push   0x0
c000b6d9:	50                   	push   eax
c000b6da:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6dd:	83 c4 20             	add    esp,0x20
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	68 99 b0 00 c0       	push   0xc000b099
c000b6e8:	e8 78 d5 00 00       	call   c0018c65 <setupMultitasking(void (*)())>
c000b6ed:	83 c4 14             	add    esp,0x14
c000b6f0:	83 c8 ff             	or     eax,0xffffffff
c000b6f3:	5b                   	pop    ebx
c000b6f4:	5e                   	pop    esi
c000b6f5:	c3                   	ret    

c000b6f6 <Computer::disableNMI()>:
c000b6f6:	6a 00                	push   0x0
c000b6f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fc:	50                   	push   eax
c000b6fd:	e8 08 ff ff ff       	call   c000b60a <Computer::enableNMI(bool)>
c000b702:	5a                   	pop    edx
c000b703:	59                   	pop    ecx
c000b704:	c3                   	ret    
c000b705:	90                   	nop

c000b706 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b70a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b70e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b715:	19 c0                	sbb    eax,eax
c000b717:	83 e0 80             	and    eax,0xffffff80
c000b71a:	09 d0                	or     eax,edx
c000b71c:	e6 70                	out    0x70,al
c000b71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b722:	e6 71                	out    0x71,al
c000b724:	c3                   	ret    
c000b725:	90                   	nop

c000b726 <Computer::handleNMI()>:
c000b726:	56                   	push   esi
c000b727:	53                   	push   ebx
c000b728:	83 ec 10             	sub    esp,0x10
c000b72b:	e4 92                	in     al,0x92
c000b72d:	89 c6                	mov    esi,eax
c000b72f:	e4 61                	in     al,0x61
c000b731:	68 46 12 02 c0       	push   0xc0021246
c000b736:	88 c3                	mov    bl,al
c000b738:	e8 d6 3a 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	83 e6 10             	and    esi,0x10
c000b743:	75 0d                	jne    c000b752 <Computer::handleNMI()+0x2c>
c000b745:	f6 c3 40             	test   bl,0x40
c000b748:	75 1d                	jne    c000b767 <Computer::handleNMI()+0x41>
c000b74a:	84 db                	test   bl,bl
c000b74c:	78 2d                	js     c000b77b <Computer::handleNMI()+0x55>
c000b74e:	58                   	pop    eax
c000b74f:	5b                   	pop    ebx
c000b750:	5e                   	pop    esi
c000b751:	c3                   	ret    
c000b752:	83 ec 0c             	sub    esp,0xc
c000b755:	68 57 12 02 c0       	push   0xc0021257
c000b75a:	e8 c9 a2 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	f6 c3 40             	test   bl,0x40
c000b765:	74 e3                	je     c000b74a <Computer::handleNMI()+0x24>
c000b767:	83 ec 0c             	sub    esp,0xc
c000b76a:	68 64 12 02 c0       	push   0xc0021264
c000b76f:	e8 b4 a2 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000b774:	83 c4 10             	add    esp,0x10
c000b777:	84 db                	test   bl,bl
c000b779:	79 d3                	jns    c000b74e <Computer::handleNMI()+0x28>
c000b77b:	c7 44 24 10 6e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002126e
c000b783:	5a                   	pop    edx
c000b784:	5b                   	pop    ebx
c000b785:	5e                   	pop    esi
c000b786:	e9 9d a2 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>
c000b78b:	90                   	nop

c000b78c <Computer::setDiskActivityLight(int, bool)>:
c000b78c:	56                   	push   esi
c000b78d:	53                   	push   ebx
c000b78e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b792:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b797:	77 1c                	ja     c000b7b5 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b799:	e4 92                	in     al,0x92
c000b79b:	bb 40 00 00 00       	mov    ebx,0x40
c000b7a0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7a4:	89 da                	mov    edx,ebx
c000b7a6:	d3 e2                	shl    edx,cl
c000b7a8:	83 f2 ff             	xor    edx,0xffffffff
c000b7ab:	89 f1                	mov    ecx,esi
c000b7ad:	21 d0                	and    eax,edx
c000b7af:	d3 e3                	shl    ebx,cl
c000b7b1:	09 d8                	or     eax,ebx
c000b7b3:	e6 92                	out    0x92,al
c000b7b5:	5b                   	pop    ebx
c000b7b6:	5e                   	pop    esi
c000b7b7:	c3                   	ret    

c000b7b8 <GDTEntry::setBase(unsigned int)>:
c000b7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7c0:	89 c1                	mov    ecx,eax
c000b7c2:	c1 e9 10             	shr    ecx,0x10
c000b7c5:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7c9:	c1 e8 18             	shr    eax,0x18
c000b7cc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7cf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <GDTEntry::setLimit(unsigned int)>:
c000b7d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7dc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7df:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7e2:	c1 e8 10             	shr    eax,0x10
c000b7e5:	83 e2 f0             	and    edx,0xfffffff0
c000b7e8:	83 e0 0f             	and    eax,0xf
c000b7eb:	09 d0                	or     eax,edx
c000b7ed:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7f0:	c3                   	ret    
c000b7f1:	90                   	nop

c000b7f2 <GDT::GDT()>:
c000b7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b806:	90                   	nop
c000b807:	c3                   	ret    

c000b808 <GDT::addEntry(GDTEntry)>:
c000b808:	53                   	push   ebx
c000b809:	83 ec 0c             	sub    esp,0xc
c000b80c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b810:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b812:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b819:	52                   	push   edx
c000b81a:	50                   	push   eax
c000b81b:	68 a8 12 02 c0       	push   0xc00212a8
c000b820:	e8 ee 39 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000b825:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b827:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b82b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b82f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b833:	8d 50 01             	lea    edx,[eax+0x1]
c000b836:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b83a:	89 13                	mov    DWORD PTR [ebx],edx
c000b83c:	c1 e0 03             	shl    eax,0x3
c000b83f:	83 c4 18             	add    esp,0x18
c000b842:	5b                   	pop    ebx
c000b843:	c3                   	ret    

c000b844 <GDT::getNumberOfEntries()>:
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	8b 00                	mov    eax,DWORD PTR [eax]
c000b84a:	c3                   	ret    
c000b84b:	90                   	nop

c000b84c <GDT::flush()>:
c000b84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b850:	83 c0 04             	add    eax,0x4
c000b853:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b856:	a3 72 47 02 c0       	mov    ds:0xc0024772,eax
c000b85b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b862:	66 89 15 70 47 02 c0 	mov    WORD PTR ds:0xc0024770,dx
c000b869:	e9 80 4b ff ff       	jmp    c00003ee <loadGDT>

c000b86e <GDT::setup()>:
c000b86e:	55                   	push   ebp
c000b86f:	57                   	push   edi
c000b870:	56                   	push   esi
c000b871:	53                   	push   ebx
c000b872:	83 ec 3c             	sub    esp,0x3c
c000b875:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b879:	6a 00                	push   0x0
c000b87b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b87f:	53                   	push   ebx
c000b880:	e8 33 ff ff ff       	call   c000b7b8 <GDTEntry::setBase(unsigned int)>
c000b885:	6a 00                	push   0x0
c000b887:	53                   	push   ebx
c000b888:	e8 47 ff ff ff       	call   c000b7d4 <GDTEntry::setLimit(unsigned int)>
c000b88d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b895:	6a 00                	push   0x0
c000b897:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b89b:	53                   	push   ebx
c000b89c:	e8 17 ff ff ff       	call   c000b7b8 <GDTEntry::setBase(unsigned int)>
c000b8a1:	68 ff ff ff 00       	push   0xffffff
c000b8a6:	53                   	push   ebx
c000b8a7:	e8 28 ff ff ff       	call   c000b7d4 <GDTEntry::setLimit(unsigned int)>
c000b8ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8b0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8b5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8ba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8be:	83 c4 20             	add    esp,0x20
c000b8c1:	6a 00                	push   0x0
c000b8c3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8c7:	53                   	push   ebx
c000b8c8:	e8 eb fe ff ff       	call   c000b7b8 <GDTEntry::setBase(unsigned int)>
c000b8cd:	68 ff ff ff 00       	push   0xffffff
c000b8d2:	53                   	push   ebx
c000b8d3:	e8 fc fe ff ff       	call   c000b7d4 <GDTEntry::setLimit(unsigned int)>
c000b8d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8e0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8e5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8e9:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8ee:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8f6:	89 d8                	mov    eax,ebx
c000b8f8:	80 cc 60             	or     ah,0x60
c000b8fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8ff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b907:	83 c4 0c             	add    esp,0xc
c000b90a:	89 f8                	mov    eax,edi
c000b90c:	80 cc 60             	or     ah,0x60
c000b90f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b913:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b917:	89 c7                	mov    edi,eax
c000b919:	55                   	push   ebp
c000b91a:	e8 e9 fe ff ff       	call   c000b808 <GDT::addEntry(GDTEntry)>
c000b91f:	83 c4 0c             	add    esp,0xc
c000b922:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b926:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b92a:	55                   	push   ebp
c000b92b:	e8 d8 fe ff ff       	call   c000b808 <GDT::addEntry(GDTEntry)>
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b93b:	55                   	push   ebp
c000b93c:	e8 c7 fe ff ff       	call   c000b808 <GDT::addEntry(GDTEntry)>
c000b941:	83 c4 0c             	add    esp,0xc
c000b944:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b94c:	53                   	push   ebx
c000b94d:	51                   	push   ecx
c000b94e:	55                   	push   ebp
c000b94f:	e8 b4 fe ff ff       	call   c000b808 <GDT::addEntry(GDTEntry)>
c000b954:	83 c4 0c             	add    esp,0xc
c000b957:	57                   	push   edi
c000b958:	56                   	push   esi
c000b959:	55                   	push   ebp
c000b95a:	e8 a9 fe ff ff       	call   c000b808 <GDT::addEntry(GDTEntry)>
c000b95f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b962:	e8 e5 fe ff ff       	call   c000b84c <GDT::flush()>
c000b967:	83 c4 4c             	add    esp,0x4c
c000b96a:	5b                   	pop    ebx
c000b96b:	5e                   	pop    esi
c000b96c:	5f                   	pop    edi
c000b96d:	5d                   	pop    ebp
c000b96e:	c3                   	ret    

c000b96f <idleFunction(void*)>:
c000b96f:	53                   	push   ebx
c000b970:	83 ec 08             	sub    esp,0x8
c000b973:	e8 bb d0 00 00       	call   c0018a33 <unlockScheduler()>
c000b978:	e8 3f 8f 00 00       	call   c00148bc <thisCPU()>
c000b97d:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b984:	74 41                	je     c000b9c7 <idleFunction(void*)+0x58>
c000b986:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c000b98b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b992:	74 33                	je     c000b9c7 <idleFunction(void*)+0x58>
c000b994:	52                   	push   edx
c000b995:	31 db                	xor    ebx,ebx
c000b997:	52                   	push   edx
c000b998:	68 e1 00 00 00       	push   0xe1
c000b99d:	50                   	push   eax
c000b99e:	e8 db fb ff ff       	call   c000b57e <Computer::rdmsr(unsigned int)>
c000b9a3:	53                   	push   ebx
c000b9a4:	83 e0 02             	and    eax,0x2
c000b9a7:	50                   	push   eax
c000b9a8:	68 e1 00 00 00       	push   0xe1
c000b9ad:	ff 35 68 47 02 c0    	push   DWORD PTR ds:0xc0024768
c000b9b3:	e8 f2 fb ff ff       	call   c000b5aa <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9b8:	83 c4 20             	add    esp,0x20
c000b9bb:	e8 4b 48 ff ff       	call   c000020b <doTPAUSE>
c000b9c0:	e8 eb 3d 01 00       	call   c001f7b0 <idleCommon()>
c000b9c5:	eb f4                	jmp    c000b9bb <idleFunction(void*)+0x4c>
c000b9c7:	fb                   	sti    
c000b9c8:	f4                   	hlt    
c000b9c9:	e8 e2 3d 01 00       	call   c001f7b0 <idleCommon()>
c000b9ce:	eb f7                	jmp    c000b9c7 <idleFunction(void*)+0x58>

c000b9d0 <IDTEntry::IDTEntry(bool)>:
c000b9d0:	83 ec 04             	sub    esp,0x4
c000b9d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d7:	88 04 24             	mov    BYTE PTR [esp],al
c000b9da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9de:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9f3:	83 e2 f0             	and    edx,0xfffffff0
c000b9f6:	83 ca 0e             	or     edx,0xe
c000b9f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba00:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba03:	83 e2 ef             	and    edx,0xffffffef
c000ba06:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba09:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba0d:	74 04                	je     c000ba13 <IDTEntry::IDTEntry(bool)+0x43>
c000ba0f:	b2 03                	mov    dl,0x3
c000ba11:	eb 02                	jmp    c000ba15 <IDTEntry::IDTEntry(bool)+0x45>
c000ba13:	b2 00                	mov    dl,0x0
c000ba15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba19:	83 e2 03             	and    edx,0x3
c000ba1c:	88 d1                	mov    cl,dl
c000ba1e:	c1 e1 05             	shl    ecx,0x5
c000ba21:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba24:	83 e2 9f             	and    edx,0xffffff9f
c000ba27:	09 ca                	or     edx,ecx
c000ba29:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba30:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba33:	83 ca 80             	or     edx,0xffffff80
c000ba36:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba39:	90                   	nop
c000ba3a:	83 c4 04             	add    esp,0x4
c000ba3d:	c3                   	ret    

c000ba3e <IDTEntry::setOffset(unsigned int)>:
c000ba3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba46:	66 89 02             	mov    WORD PTR [edx],ax
c000ba49:	c1 e8 10             	shr    eax,0x10
c000ba4c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba50:	c3                   	ret    
c000ba51:	90                   	nop

c000ba52 <IDT::IDT()>:
c000ba52:	90                   	nop
c000ba53:	c3                   	ret    

c000ba54 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba58:	83 c0 30             	add    eax,0x30
c000ba5b:	c3                   	ret    

c000ba5c <IDT::addEntry(IDTEntry, int)>:
c000ba5c:	53                   	push   ebx
c000ba5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba6d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba70:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba74:	5b                   	pop    ebx
c000ba75:	c3                   	ret    

c000ba76 <IDT::addEntry(int, void (*)(), bool)>:
c000ba76:	53                   	push   ebx
c000ba77:	83 ec 10             	sub    esp,0x10
c000ba7a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba7f:	50                   	push   eax
c000ba80:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba84:	53                   	push   ebx
c000ba85:	e8 46 ff ff ff       	call   c000b9d0 <IDTEntry::IDTEntry(bool)>
c000ba8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba8e:	53                   	push   ebx
c000ba8f:	e8 aa ff ff ff       	call   c000ba3e <IDTEntry::setOffset(unsigned int)>
c000ba94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baa0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa4:	e8 b3 ff ff ff       	call   c000ba5c <IDT::addEntry(IDTEntry, int)>
c000baa9:	83 c4 30             	add    esp,0x30
c000baac:	5b                   	pop    ebx
c000baad:	c3                   	ret    

c000baae <IDT::flush()>:
c000baae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bab2:	66 c7 05 78 47 02 c0 ff 07 	mov    WORD PTR ds:0xc0024778,0x7ff
c000babb:	a3 7a 47 02 c0       	mov    ds:0xc002477a,eax
c000bac0:	0f 01 1d 78 47 02 c0 	lidtd  ds:0xc0024778
c000bac7:	c3                   	ret    

c000bac8 <IDT::setup()>:
c000bac8:	57                   	push   edi
c000bac9:	56                   	push   esi
c000baca:	53                   	push   ebx
c000bacb:	83 ec 10             	sub    esp,0x10
c000bace:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bad2:	6a 00                	push   0x0
c000bad4:	68 0e 04 00 c0       	push   0xc000040e
c000bad9:	6a 00                	push   0x0
c000badb:	53                   	push   ebx
c000badc:	e8 95 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bae1:	6a 00                	push   0x0
c000bae3:	68 1e 04 00 c0       	push   0xc000041e
c000bae8:	6a 01                	push   0x1
c000baea:	53                   	push   ebx
c000baeb:	e8 86 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000baf0:	83 c4 20             	add    esp,0x20
c000baf3:	6a 00                	push   0x0
c000baf5:	68 28 04 00 c0       	push   0xc0000428
c000bafa:	6a 02                	push   0x2
c000bafc:	53                   	push   ebx
c000bafd:	e8 74 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb02:	6a 00                	push   0x0
c000bb04:	68 32 04 00 c0       	push   0xc0000432
c000bb09:	6a 03                	push   0x3
c000bb0b:	53                   	push   ebx
c000bb0c:	e8 65 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb11:	83 c4 20             	add    esp,0x20
c000bb14:	6a 00                	push   0x0
c000bb16:	68 3c 04 00 c0       	push   0xc000043c
c000bb1b:	6a 04                	push   0x4
c000bb1d:	53                   	push   ebx
c000bb1e:	e8 53 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb23:	6a 00                	push   0x0
c000bb25:	68 46 04 00 c0       	push   0xc0000446
c000bb2a:	6a 05                	push   0x5
c000bb2c:	53                   	push   ebx
c000bb2d:	e8 44 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb32:	83 c4 20             	add    esp,0x20
c000bb35:	6a 00                	push   0x0
c000bb37:	68 50 04 00 c0       	push   0xc0000450
c000bb3c:	6a 06                	push   0x6
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 32 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb44:	6a 00                	push   0x0
c000bb46:	68 5a 04 00 c0       	push   0xc000045a
c000bb4b:	6a 07                	push   0x7
c000bb4d:	53                   	push   ebx
c000bb4e:	e8 23 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb53:	83 c4 20             	add    esp,0x20
c000bb56:	6a 00                	push   0x0
c000bb58:	68 64 04 00 c0       	push   0xc0000464
c000bb5d:	6a 08                	push   0x8
c000bb5f:	53                   	push   ebx
c000bb60:	e8 11 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb65:	6a 00                	push   0x0
c000bb67:	68 6c 04 00 c0       	push   0xc000046c
c000bb6c:	6a 09                	push   0x9
c000bb6e:	53                   	push   ebx
c000bb6f:	e8 02 ff ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb74:	83 c4 20             	add    esp,0x20
c000bb77:	6a 00                	push   0x0
c000bb79:	68 76 04 00 c0       	push   0xc0000476
c000bb7e:	6a 0a                	push   0xa
c000bb80:	53                   	push   ebx
c000bb81:	e8 f0 fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb86:	6a 00                	push   0x0
c000bb88:	68 7e 04 00 c0       	push   0xc000047e
c000bb8d:	6a 0b                	push   0xb
c000bb8f:	53                   	push   ebx
c000bb90:	e8 e1 fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bb95:	83 c4 20             	add    esp,0x20
c000bb98:	6a 00                	push   0x0
c000bb9a:	68 86 04 00 c0       	push   0xc0000486
c000bb9f:	6a 0c                	push   0xc
c000bba1:	53                   	push   ebx
c000bba2:	e8 cf fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bba7:	6a 00                	push   0x0
c000bba9:	68 8e 04 00 c0       	push   0xc000048e
c000bbae:	6a 0d                	push   0xd
c000bbb0:	53                   	push   ebx
c000bbb1:	e8 c0 fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bbb6:	83 c4 20             	add    esp,0x20
c000bbb9:	6a 00                	push   0x0
c000bbbb:	68 96 04 00 c0       	push   0xc0000496
c000bbc0:	6a 0e                	push   0xe
c000bbc2:	53                   	push   ebx
c000bbc3:	e8 ae fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bbc8:	6a 00                	push   0x0
c000bbca:	68 9e 04 00 c0       	push   0xc000049e
c000bbcf:	6a 0f                	push   0xf
c000bbd1:	53                   	push   ebx
c000bbd2:	e8 9f fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bbd7:	83 c4 20             	add    esp,0x20
c000bbda:	6a 00                	push   0x0
c000bbdc:	68 a8 04 00 c0       	push   0xc00004a8
c000bbe1:	6a 10                	push   0x10
c000bbe3:	53                   	push   ebx
c000bbe4:	e8 8d fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bbe9:	6a 00                	push   0x0
c000bbeb:	68 b2 04 00 c0       	push   0xc00004b2
c000bbf0:	6a 11                	push   0x11
c000bbf2:	53                   	push   ebx
c000bbf3:	e8 7e fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bbf8:	83 c4 20             	add    esp,0x20
c000bbfb:	6a 00                	push   0x0
c000bbfd:	68 bc 04 00 c0       	push   0xc00004bc
c000bc02:	6a 12                	push   0x12
c000bc04:	53                   	push   ebx
c000bc05:	e8 6c fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc0a:	6a 01                	push   0x1
c000bc0c:	68 c6 04 00 c0       	push   0xc00004c6
c000bc11:	6a 60                	push   0x60
c000bc13:	53                   	push   ebx
c000bc14:	e8 5d fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc19:	83 c4 20             	add    esp,0x20
c000bc1c:	6a 00                	push   0x0
c000bc1e:	68 d0 04 00 c0       	push   0xc00004d0
c000bc23:	6a 20                	push   0x20
c000bc25:	53                   	push   ebx
c000bc26:	e8 4b fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc2b:	6a 00                	push   0x0
c000bc2d:	68 da 04 00 c0       	push   0xc00004da
c000bc32:	6a 21                	push   0x21
c000bc34:	53                   	push   ebx
c000bc35:	e8 3c fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc3a:	83 c4 20             	add    esp,0x20
c000bc3d:	6a 00                	push   0x0
c000bc3f:	68 e4 04 00 c0       	push   0xc00004e4
c000bc44:	6a 22                	push   0x22
c000bc46:	53                   	push   ebx
c000bc47:	e8 2a fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc4c:	6a 00                	push   0x0
c000bc4e:	68 ee 04 00 c0       	push   0xc00004ee
c000bc53:	6a 23                	push   0x23
c000bc55:	53                   	push   ebx
c000bc56:	e8 1b fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc5b:	83 c4 20             	add    esp,0x20
c000bc5e:	6a 00                	push   0x0
c000bc60:	68 f8 04 00 c0       	push   0xc00004f8
c000bc65:	6a 24                	push   0x24
c000bc67:	53                   	push   ebx
c000bc68:	e8 09 fe ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc6d:	6a 00                	push   0x0
c000bc6f:	68 02 05 00 c0       	push   0xc0000502
c000bc74:	6a 25                	push   0x25
c000bc76:	53                   	push   ebx
c000bc77:	e8 fa fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc7c:	83 c4 20             	add    esp,0x20
c000bc7f:	6a 00                	push   0x0
c000bc81:	68 0c 05 00 c0       	push   0xc000050c
c000bc86:	6a 26                	push   0x26
c000bc88:	53                   	push   ebx
c000bc89:	e8 e8 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc8e:	6a 00                	push   0x0
c000bc90:	68 16 05 00 c0       	push   0xc0000516
c000bc95:	6a 27                	push   0x27
c000bc97:	53                   	push   ebx
c000bc98:	e8 d9 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bc9d:	83 c4 20             	add    esp,0x20
c000bca0:	6a 00                	push   0x0
c000bca2:	68 20 05 00 c0       	push   0xc0000520
c000bca7:	6a 28                	push   0x28
c000bca9:	53                   	push   ebx
c000bcaa:	e8 c7 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bcaf:	6a 00                	push   0x0
c000bcb1:	68 2a 05 00 c0       	push   0xc000052a
c000bcb6:	6a 29                	push   0x29
c000bcb8:	53                   	push   ebx
c000bcb9:	e8 b8 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bcbe:	83 c4 20             	add    esp,0x20
c000bcc1:	6a 00                	push   0x0
c000bcc3:	68 34 05 00 c0       	push   0xc0000534
c000bcc8:	6a 2a                	push   0x2a
c000bcca:	53                   	push   ebx
c000bccb:	e8 a6 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bcd0:	6a 00                	push   0x0
c000bcd2:	68 3e 05 00 c0       	push   0xc000053e
c000bcd7:	6a 2b                	push   0x2b
c000bcd9:	53                   	push   ebx
c000bcda:	e8 97 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bcdf:	83 c4 20             	add    esp,0x20
c000bce2:	6a 00                	push   0x0
c000bce4:	68 48 05 00 c0       	push   0xc0000548
c000bce9:	6a 2c                	push   0x2c
c000bceb:	53                   	push   ebx
c000bcec:	e8 85 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bcf1:	6a 00                	push   0x0
c000bcf3:	68 52 05 00 c0       	push   0xc0000552
c000bcf8:	6a 2d                	push   0x2d
c000bcfa:	53                   	push   ebx
c000bcfb:	e8 76 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd00:	83 c4 20             	add    esp,0x20
c000bd03:	6a 00                	push   0x0
c000bd05:	68 5c 05 00 c0       	push   0xc000055c
c000bd0a:	6a 2e                	push   0x2e
c000bd0c:	53                   	push   ebx
c000bd0d:	e8 64 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd12:	6a 00                	push   0x0
c000bd14:	68 66 05 00 c0       	push   0xc0000566
c000bd19:	6a 2f                	push   0x2f
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 55 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd21:	83 c4 20             	add    esp,0x20
c000bd24:	6a 00                	push   0x0
c000bd26:	68 70 05 00 c0       	push   0xc0000570
c000bd2b:	6a 30                	push   0x30
c000bd2d:	53                   	push   ebx
c000bd2e:	e8 43 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd33:	6a 00                	push   0x0
c000bd35:	68 7a 05 00 c0       	push   0xc000057a
c000bd3a:	6a 31                	push   0x31
c000bd3c:	53                   	push   ebx
c000bd3d:	e8 34 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd42:	83 c4 20             	add    esp,0x20
c000bd45:	6a 00                	push   0x0
c000bd47:	68 84 05 00 c0       	push   0xc0000584
c000bd4c:	6a 32                	push   0x32
c000bd4e:	53                   	push   ebx
c000bd4f:	e8 22 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd54:	6a 00                	push   0x0
c000bd56:	68 8e 05 00 c0       	push   0xc000058e
c000bd5b:	6a 33                	push   0x33
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 13 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd63:	83 c4 20             	add    esp,0x20
c000bd66:	6a 00                	push   0x0
c000bd68:	68 98 05 00 c0       	push   0xc0000598
c000bd6d:	6a 34                	push   0x34
c000bd6f:	53                   	push   ebx
c000bd70:	e8 01 fd ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd75:	6a 00                	push   0x0
c000bd77:	68 a2 05 00 c0       	push   0xc00005a2
c000bd7c:	6a 35                	push   0x35
c000bd7e:	53                   	push   ebx
c000bd7f:	e8 f2 fc ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd84:	83 c4 20             	add    esp,0x20
c000bd87:	6a 00                	push   0x0
c000bd89:	68 ac 05 00 c0       	push   0xc00005ac
c000bd8e:	6a 36                	push   0x36
c000bd90:	53                   	push   ebx
c000bd91:	e8 e0 fc ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bd96:	6a 00                	push   0x0
c000bd98:	68 b6 05 00 c0       	push   0xc00005b6
c000bd9d:	6a 37                	push   0x37
c000bd9f:	53                   	push   ebx
c000bda0:	e8 d1 fc ff ff       	call   c000ba76 <IDT::addEntry(int, void (*)(), bool)>
c000bda5:	83 c4 20             	add    esp,0x20
c000bda8:	e8 d8 25 00 00       	call   c000e385 <Virt::getAKernelVAS()>
c000bdad:	52                   	push   edx
c000bdae:	6a 03                	push   0x3
c000bdb0:	6a 02                	push   0x2
c000bdb2:	50                   	push   eax
c000bdb3:	e8 0e 2c 00 00       	call   c000e9c6 <VAS::allocatePages(int, int)>
c000bdb8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdbf:	89 c6                	mov    esi,eax
c000bdc1:	e8 18 33 00 00       	call   c000f0de <operator new(unsigned long)>
c000bdc6:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdcc:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdcf:	89 c7                	mov    edi,eax
c000bdd1:	e8 ee 1c 00 00       	call   c000dac4 <TSS::TSS()>
c000bdd6:	83 c4 0c             	add    esp,0xc
c000bdd9:	68 64 04 00 c0       	push   0xc0000464
c000bdde:	56                   	push   esi
c000bddf:	57                   	push   edi
c000bde0:	e8 1f 1d 00 00       	call   c000db04 <TSS::setup(unsigned long, unsigned long)>
c000bde5:	59                   	pop    ecx
c000bde6:	89 c6                	mov    esi,eax
c000bde8:	5f                   	pop    edi
c000bde9:	6a 00                	push   0x0
c000bdeb:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdef:	50                   	push   eax
c000bdf0:	e8 db fb ff ff       	call   c000b9d0 <IDTEntry::IDTEntry(bool)>
c000bdf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdf9:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdfe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be04:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be0b:	80 ce 05             	or     dh,0x5
c000be0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be16:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be1d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be23:	e8 86 fc ff ff       	call   c000baae <IDT::flush()>
c000be28:	83 c4 20             	add    esp,0x20
c000be2b:	5b                   	pop    ebx
c000be2c:	5e                   	pop    esi
c000be2d:	5f                   	pop    edi
c000be2e:	c3                   	ret    

c000be2f <sbrk>:
c000be2f:	55                   	push   ebp
c000be30:	57                   	push   edi
c000be31:	56                   	push   esi
c000be32:	53                   	push   ebx
c000be33:	83 ec 1c             	sub    esp,0x1c
c000be36:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be3a:	85 db                	test   ebx,ebx
c000be3c:	a1 90 3b 02 c0       	mov    eax,ds:0xc0023b90
c000be41:	0f 84 e4 00 00 00    	je     c000bf2b <sbrk+0xfc>
c000be47:	78 3d                	js     c000be86 <sbrk+0x57>
c000be49:	e8 6e 8a 00 00       	call   c00148bc <thisCPU()>
c000be4e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be54:	83 e0 01             	and    eax,0x1
c000be57:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be5b:	a1 90 3b 02 c0       	mov    eax,ds:0xc0023b90
c000be60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be64:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be6a:	89 d8                	mov    eax,ebx
c000be6c:	c1 f8 1f             	sar    eax,0x1f
c000be6f:	25 ff 0f 00 00       	and    eax,0xfff
c000be74:	01 c3                	add    ebx,eax
c000be76:	c1 fb 0c             	sar    ebx,0xc
c000be79:	89 df                	mov    edi,ebx
c000be7b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be7f:	be 00 00 00 00       	mov    esi,0x0
c000be84:	eb 2a                	jmp    c000beb0 <sbrk+0x81>
c000be86:	83 ec 08             	sub    esp,0x8
c000be89:	53                   	push   ebx
c000be8a:	68 c4 12 02 c0       	push   0xc00212c4
c000be8f:	e8 7f 33 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be9c:	e9 8a 00 00 00       	jmp    c000bf2b <sbrk+0xfc>
c000bea1:	81 05 90 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023b90,0x1000
c000beab:	46                   	inc    esi
c000beac:	39 f7                	cmp    edi,esi
c000beae:	74 34                	je     c000bee4 <sbrk+0xb5>
c000beb0:	e8 d0 24 00 00       	call   c000e385 <Virt::getAKernelVAS()>
c000beb5:	89 c3                	mov    ebx,eax
c000beb7:	8b 2d 90 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023b90
c000bebd:	e8 f5 06 00 00       	call   c000c5b7 <Phys::allocatePage()>
c000bec2:	68 01 04 00 00       	push   0x401
c000bec7:	55                   	push   ebp
c000bec8:	50                   	push   eax
c000bec9:	53                   	push   ebx
c000beca:	e8 f5 29 00 00       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000becf:	83 c4 10             	add    esp,0x10
c000bed2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bed7:	74 c8                	je     c000bea1 <sbrk+0x72>
c000bed9:	8b 1d 90 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023b90
c000bedf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bee2:	eb bd                	jmp    c000bea1 <sbrk+0x72>
c000bee4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee9:	74 48                	je     c000bf33 <sbrk+0x104>
c000beeb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000beef:	89 d3                	mov    ebx,edx
c000bef1:	c1 eb 0a             	shr    ebx,0xa
c000bef4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000befa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf04:	c1 e0 0c             	shl    eax,0xc
c000bf07:	01 d0                	add    eax,edx
c000bf09:	c1 e8 0a             	shr    eax,0xa
c000bf0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf11:	2d 00 00 40 00       	sub    eax,0x400000
c000bf16:	39 c3                	cmp    ebx,eax
c000bf18:	77 0d                	ja     c000bf27 <sbrk+0xf8>
c000bf1a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf1d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf23:	39 d8                	cmp    eax,ebx
c000bf25:	73 f3                	jae    c000bf1a <sbrk+0xeb>
c000bf27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf2b:	83 c4 1c             	add    esp,0x1c
c000bf2e:	5b                   	pop    ebx
c000bf2f:	5e                   	pop    esi
c000bf30:	5f                   	pop    edi
c000bf31:	5d                   	pop    ebp
c000bf32:	c3                   	ret    
c000bf33:	e8 8d 38 01 00       	call   c001f7c5 <CPU::readCR3()>
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	50                   	push   eax
c000bf3c:	e8 96 38 01 00       	call   c001f7d7 <CPU::writeCR3(unsigned long)>
c000bf41:	83 c4 10             	add    esp,0x10
c000bf44:	eb e1                	jmp    c000bf27 <sbrk+0xf8>

c000bf46 <mmap>:
c000bf46:	83 ec 18             	sub    esp,0x18
c000bf49:	68 f4 12 02 c0       	push   0xc00212f4
c000bf4e:	e8 d5 9a 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000bf53:	b8 00 00 00 00       	mov    eax,0x0
c000bf58:	83 c4 1c             	add    esp,0x1c
c000bf5b:	c3                   	ret    

c000bf5c <munmap>:
c000bf5c:	83 ec 18             	sub    esp,0x18
c000bf5f:	68 f9 12 02 c0       	push   0xc00212f9
c000bf64:	e8 bf 9a 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000bf69:	b8 00 00 00 00       	mov    eax,0x0
c000bf6e:	83 c4 1c             	add    esp,0x1c
c000bf71:	c3                   	ret    

c000bf72 <liballoc_lock()>:
c000bf72:	83 ec 0c             	sub    esp,0xc
c000bf75:	e8 b7 ca 00 00       	call   c0018a31 <lockScheduler()>
c000bf7a:	b8 00 00 00 00       	mov    eax,0x0
c000bf7f:	83 c4 0c             	add    esp,0xc
c000bf82:	c3                   	ret    

c000bf83 <liballoc_unlock()>:
c000bf83:	83 ec 0c             	sub    esp,0xc
c000bf86:	e8 a8 ca 00 00       	call   c0018a33 <unlockScheduler()>
c000bf8b:	b8 00 00 00 00       	mov    eax,0x0
c000bf90:	83 c4 0c             	add    esp,0xc
c000bf93:	c3                   	ret    

c000bf94 <liballoc_alloc(int)>:
c000bf94:	83 ec 0c             	sub    esp,0xc
c000bf97:	e8 e9 23 00 00       	call   c000e385 <Virt::getAKernelVAS()>
c000bf9c:	83 ec 04             	sub    esp,0x4
c000bf9f:	6a 01                	push   0x1
c000bfa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfa5:	50                   	push   eax
c000bfa6:	e8 1b 2a 00 00       	call   c000e9c6 <VAS::allocatePages(int, int)>
c000bfab:	83 c4 1c             	add    esp,0x1c
c000bfae:	c3                   	ret    

c000bfaf <liballoc_free(void*, int)>:
c000bfaf:	83 ec 0c             	sub    esp,0xc
c000bfb2:	e8 ce 23 00 00       	call   c000e385 <Virt::getAKernelVAS()>
c000bfb7:	83 ec 08             	sub    esp,0x8
c000bfba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfbe:	50                   	push   eax
c000bfbf:	e8 a2 26 00 00       	call   c000e666 <VAS::freeAllocatedPages(unsigned long)>
c000bfc4:	b8 00 00 00 00       	mov    eax,0x0
c000bfc9:	83 c4 1c             	add    esp,0x1c
c000bfcc:	c3                   	ret    

c000bfcd <realloc>:
c000bfcd:	83 ec 14             	sub    esp,0x14
c000bfd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd8:	e8 64 54 ff ff       	call   c0001441 <dlrealloc>
c000bfdd:	83 c4 1c             	add    esp,0x1c
c000bfe0:	c3                   	ret    

c000bfe1 <malloc>:
c000bfe1:	83 ec 18             	sub    esp,0x18
c000bfe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe8:	e8 17 4f ff ff       	call   c0000f04 <dlmalloc>
c000bfed:	83 c4 1c             	add    esp,0x1c
c000bff0:	c3                   	ret    

c000bff1 <free>:
c000bff1:	83 ec 18             	sub    esp,0x18
c000bff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff8:	e8 a9 4b ff ff       	call   c0000ba6 <dlfree>
c000bffd:	83 c4 1c             	add    esp,0x1c
c000c000:	c3                   	ret    

c000c001 <rfree>:
c000c001:	83 ec 18             	sub    esp,0x18
c000c004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c008:	e8 e4 ff ff ff       	call   c000bff1 <free>
c000c00d:	83 c4 1c             	add    esp,0x1c
c000c010:	c3                   	ret    

c000c011 <calloc>:
c000c011:	56                   	push   esi
c000c012:	53                   	push   ebx
c000c013:	83 ec 10             	sub    esp,0x10
c000c016:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c01a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c01f:	53                   	push   ebx
c000c020:	e8 bc ff ff ff       	call   c000bfe1 <malloc>
c000c025:	89 c6                	mov    esi,eax
c000c027:	83 c4 0c             	add    esp,0xc
c000c02a:	53                   	push   ebx
c000c02b:	6a 00                	push   0x0
c000c02d:	50                   	push   eax
c000c02e:	e8 90 46 ff ff       	call   c00006c3 <memset>
c000c033:	89 f0                	mov    eax,esi
c000c035:	83 c4 14             	add    esp,0x14
c000c038:	5b                   	pop    ebx
c000c039:	5e                   	pop    esi
c000c03a:	c3                   	ret    

c000c03b <hwTextMode_loadInData(VgaText*)>:
c000c03b:	57                   	push   edi
c000c03c:	56                   	push   esi
c000c03d:	53                   	push   ebx
c000c03e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c042:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c048:	85 c0                	test   eax,eax
c000c04a:	7e 30                	jle    c000c07c <hwTextMode_loadInData(VgaText*)+0x41>
c000c04c:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c04f:	31 f6                	xor    esi,esi
c000c051:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c054:	31 c0                	xor    eax,eax
c000c056:	c1 e1 05             	shl    ecx,0x5
c000c059:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c05f:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c063:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c067:	40                   	inc    eax
c000c068:	83 f8 50             	cmp    eax,0x50
c000c06b:	75 f2                	jne    c000c05f <hwTextMode_loadInData(VgaText*)+0x24>
c000c06d:	46                   	inc    esi
c000c06e:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c074:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c07a:	7f d5                	jg     c000c051 <hwTextMode_loadInData(VgaText*)+0x16>
c000c07c:	5b                   	pop    ebx
c000c07d:	5e                   	pop    esi
c000c07e:	5f                   	pop    edi
c000c07f:	c3                   	ret    

c000c080 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c080:	56                   	push   esi
c000c081:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c086:	53                   	push   ebx
c000c087:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c08b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c08f:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c095:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c09b:	c1 e0 04             	shl    eax,0x4
c000c09e:	83 e6 0f             	and    esi,0xf
c000c0a1:	25 ff 00 00 00       	and    eax,0xff
c000c0a6:	83 c2 02             	add    edx,0x2
c000c0a9:	09 f0                	or     eax,esi
c000c0ab:	41                   	inc    ecx
c000c0ac:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0b0:	c1 e0 08             	shl    eax,0x8
c000c0b3:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0b9:	09 f0                	or     eax,esi
c000c0bb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0bf:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0c5:	75 c8                	jne    c000c08f <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0c7:	5b                   	pop    ebx
c000c0c8:	5e                   	pop    esi
c000c0c9:	c3                   	ret    

c000c0ca <hwTextMode_showCursor(VgaText*, bool)>:
c000c0ca:	56                   	push   esi
c000c0cb:	53                   	push   ebx
c000c0cc:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0d1:	74 38                	je     c000c10b <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0d3:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0d8:	b0 0a                	mov    al,0xa
c000c0da:	89 da                	mov    edx,ebx
c000c0dc:	ee                   	out    dx,al
c000c0dd:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0e2:	89 ca                	mov    edx,ecx
c000c0e4:	ec                   	in     al,dx
c000c0e5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0e9:	b2 0f                	mov    dl,0xf
c000c0eb:	83 e0 c0             	and    eax,0xffffffc0
c000c0ee:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0f4:	09 d0                	or     eax,edx
c000c0f6:	89 ca                	mov    edx,ecx
c000c0f8:	ee                   	out    dx,al
c000c0f9:	b0 0b                	mov    al,0xb
c000c0fb:	89 da                	mov    edx,ebx
c000c0fd:	ee                   	out    dx,al
c000c0fe:	89 ca                	mov    edx,ecx
c000c100:	ec                   	in     al,dx
c000c101:	83 e0 e0             	and    eax,0xffffffe0
c000c104:	83 c8 0f             	or     eax,0xf
c000c107:	ee                   	out    dx,al
c000c108:	5b                   	pop    ebx
c000c109:	5e                   	pop    esi
c000c10a:	c3                   	ret    
c000c10b:	b0 0a                	mov    al,0xa
c000c10d:	ba d4 03 00 00       	mov    edx,0x3d4
c000c112:	ee                   	out    dx,al
c000c113:	b0 20                	mov    al,0x20
c000c115:	ba d5 03 00 00       	mov    edx,0x3d5
c000c11a:	ee                   	out    dx,al
c000c11b:	5b                   	pop    ebx
c000c11c:	5e                   	pop    esi
c000c11d:	c3                   	ret    

c000c11e <hwTextMode_update(VgaText*)>:
c000c11e:	c3                   	ret    

c000c11f <hwTextMode_updateCursor(VgaText*)>:
c000c11f:	56                   	push   esi
c000c120:	b9 19 00 00 00       	mov    ecx,0x19
c000c125:	53                   	push   ebx
c000c126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c12a:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c130:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c136:	29 d1                	sub    ecx,edx
c000c138:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c13e:	01 d9                	add    ecx,ebx
c000c140:	b0 0f                	mov    al,0xf
c000c142:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c145:	c1 e1 04             	shl    ecx,0x4
c000c148:	01 f1                	add    ecx,esi
c000c14a:	be d4 03 00 00       	mov    esi,0x3d4
c000c14f:	89 f2                	mov    edx,esi
c000c151:	ee                   	out    dx,al
c000c152:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c157:	88 c8                	mov    al,cl
c000c159:	89 da                	mov    edx,ebx
c000c15b:	ee                   	out    dx,al
c000c15c:	b0 0e                	mov    al,0xe
c000c15e:	89 f2                	mov    edx,esi
c000c160:	ee                   	out    dx,al
c000c161:	89 c8                	mov    eax,ecx
c000c163:	89 da                	mov    edx,ebx
c000c165:	66 c1 e8 08          	shr    ax,0x8
c000c169:	ee                   	out    dx,al
c000c16a:	5b                   	pop    ebx
c000c16b:	5e                   	pop    esi
c000c16c:	c3                   	ret    

c000c16d <hwTextMode_disableBlink(VgaText*, bool)>:
c000c16d:	ba da 03 00 00       	mov    edx,0x3da
c000c172:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c177:	75 18                	jne    c000c191 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c179:	ec                   	in     al,dx
c000c17a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c17f:	b0 30                	mov    al,0x30
c000c181:	89 ca                	mov    edx,ecx
c000c183:	ee                   	out    dx,al
c000c184:	ba c1 03 00 00       	mov    edx,0x3c1
c000c189:	ec                   	in     al,dx
c000c18a:	83 c8 08             	or     eax,0x8
c000c18d:	89 ca                	mov    edx,ecx
c000c18f:	ee                   	out    dx,al
c000c190:	c3                   	ret    
c000c191:	ec                   	in     al,dx
c000c192:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c197:	b0 30                	mov    al,0x30
c000c199:	89 ca                	mov    edx,ecx
c000c19b:	ee                   	out    dx,al
c000c19c:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1a1:	ec                   	in     al,dx
c000c1a2:	83 e0 f7             	and    eax,0xfffffff7
c000c1a5:	89 ca                	mov    edx,ecx
c000c1a7:	ee                   	out    dx,al
c000c1a8:	c3                   	ret    

c000c1a9 <hwTextMode_scrollScreen(VgaText*)>:
c000c1a9:	55                   	push   ebp
c000c1aa:	bd 02 00 00 00       	mov    ebp,0x2
c000c1af:	57                   	push   edi
c000c1b0:	56                   	push   esi
c000c1b1:	53                   	push   ebx
c000c1b2:	83 ec 1c             	sub    esp,0x1c
c000c1b5:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1c1:	31 c0                	xor    eax,eax
c000c1c3:	eb 0b                	jmp    c000c1d0 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1c5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1cb:	74 58                	je     c000c225 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1cd:	43                   	inc    ebx
c000c1ce:	89 f0                	mov    eax,esi
c000c1d0:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1d6:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1dc:	88 13                	mov    BYTE PTR [ebx],dl
c000c1de:	8d 70 01             	lea    esi,[eax+0x1]
c000c1e1:	83 fd 18             	cmp    ebp,0x18
c000c1e4:	75 df                	jne    c000c1c5 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1e6:	a8 01                	test   al,0x1
c000c1e8:	75 13                	jne    c000c1fd <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1ea:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1ed:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1f3:	75 d8                	jne    c000c1cd <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1f5:	83 c4 1c             	add    esp,0x1c
c000c1f8:	5b                   	pop    ebx
c000c1f9:	5e                   	pop    esi
c000c1fa:	5f                   	pop    edi
c000c1fb:	5d                   	pop    ebp
c000c1fc:	c3                   	ret    
c000c1fd:	52                   	push   edx
c000c1fe:	31 c0                	xor    eax,eax
c000c200:	52                   	push   edx
c000c201:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c205:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c20b:	50                   	push   eax
c000c20c:	31 c0                	xor    eax,eax
c000c20e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c212:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c218:	50                   	push   eax
c000c219:	e8 84 0b 00 00       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	88 07                	mov    BYTE PTR [edi],al
c000c223:	eb c8                	jmp    c000c1ed <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c225:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c229:	45                   	inc    ebp
c000c22a:	05 a0 00 00 00       	add    eax,0xa0
c000c22f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c233:	eb 88                	jmp    c000c1bd <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c235 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c235:	56                   	push   esi
c000c236:	31 c0                	xor    eax,eax
c000c238:	53                   	push   ebx
c000c239:	83 ec 0c             	sub    esp,0xc
c000c23c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c240:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c244:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c248:	50                   	push   eax
c000c249:	31 c0                	xor    eax,eax
c000c24b:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c24f:	50                   	push   eax
c000c250:	e8 4d 0b 00 00       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000c255:	5a                   	pop    edx
c000c256:	25 ff 00 00 00       	and    eax,0xff
c000c25b:	59                   	pop    ecx
c000c25c:	50                   	push   eax
c000c25d:	89 f0                	mov    eax,esi
c000c25f:	0f be f0             	movsx  esi,al
c000c262:	56                   	push   esi
c000c263:	e8 e0 0b 00 00       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000c268:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c26c:	ba 19 00 00 00       	mov    edx,0x19
c000c271:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c277:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c27a:	29 f2                	sub    edx,esi
c000c27c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c280:	c1 e1 04             	shl    ecx,0x4
c000c283:	8d 14 92             	lea    edx,[edx+edx*4]
c000c286:	01 d9                	add    ecx,ebx
c000c288:	c1 e2 04             	shl    edx,0x4
c000c28b:	01 ca                	add    edx,ecx
c000c28d:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c295:	83 c4 14             	add    esp,0x14
c000c298:	5b                   	pop    ebx
c000c299:	5e                   	pop    esi
c000c29a:	c3                   	ret    

c000c29b <setupTextMode()>:
c000c29b:	c7 05 18 48 02 c0 6d c1 00 c0 	mov    DWORD PTR ds:0xc0024818,0xc000c16d
c000c2a5:	c7 05 04 48 02 c0 3b c0 00 c0 	mov    DWORD PTR ds:0xc0024804,0xc000c03b
c000c2af:	c7 05 00 48 02 c0 80 c0 00 c0 	mov    DWORD PTR ds:0xc0024800,0xc000c080
c000c2b9:	c7 05 0c 48 02 c0 a9 c1 00 c0 	mov    DWORD PTR ds:0xc002480c,0xc000c1a9
c000c2c3:	c7 05 14 48 02 c0 ca c0 00 c0 	mov    DWORD PTR ds:0xc0024814,0xc000c0ca
c000c2cd:	c7 05 08 48 02 c0 1e c1 00 c0 	mov    DWORD PTR ds:0xc0024808,0xc000c11e
c000c2d7:	c7 05 10 48 02 c0 1f c1 00 c0 	mov    DWORD PTR ds:0xc0024810,0xc000c11f
c000c2e1:	c7 05 1c 48 02 c0 35 c2 00 c0 	mov    DWORD PTR ds:0xc002481c,0xc000c235
c000c2eb:	c3                   	ret    

c000c2ec <kernel_main>:
c000c2ec:	57                   	push   edi
c000c2ed:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2f2:	56                   	push   esi
c000c2f3:	31 f6                	xor    esi,esi
c000c2f5:	53                   	push   ebx
c000c2f6:	83 ec 10             	sub    esp,0x10
c000c2f9:	e8 fe 08 00 00       	call   c000cbfc <installVgaTextImplementation()>
c000c2fe:	e8 98 ff ff ff       	call   c000c29b <setupTextMode()>
c000c303:	89 f0                	mov    eax,esi
c000c305:	89 fa                	mov    edx,edi
c000c307:	ee                   	out    dx,al
c000c308:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c30d:	b0 80                	mov    al,0x80
c000c30f:	89 da                	mov    edx,ebx
c000c311:	ee                   	out    dx,al
c000c312:	b1 03                	mov    cl,0x3
c000c314:	ba f8 03 00 00       	mov    edx,0x3f8
c000c319:	88 c8                	mov    al,cl
c000c31b:	ee                   	out    dx,al
c000c31c:	89 f0                	mov    eax,esi
c000c31e:	89 fa                	mov    edx,edi
c000c320:	ee                   	out    dx,al
c000c321:	88 c8                	mov    al,cl
c000c323:	89 da                	mov    edx,ebx
c000c325:	ee                   	out    dx,al
c000c326:	b0 c7                	mov    al,0xc7
c000c328:	ba fa 03 00 00       	mov    edx,0x3fa
c000c32d:	ee                   	out    dx,al
c000c32e:	b0 0b                	mov    al,0xb
c000c330:	ba fc 03 00 00       	mov    edx,0x3fc
c000c335:	ee                   	out    dx,al
c000c336:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c33b:	83 ec 0c             	sub    esp,0xc
c000c33e:	05 ff 0f 00 00       	add    eax,0xfff
c000c343:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c348:	50                   	push   eax
c000c349:	e8 6d 03 00 00       	call   c000c6bb <Phys::physicalMemorySetup(unsigned int)>
c000c34e:	e8 b6 1f 00 00       	call   c000e309 <Virt::virtualMemorySetup()>
c000c353:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c359:	83 c4 10             	add    esp,0x10
c000c35c:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c362:	75 0e                	jne    c000c372 <kernel_main+0x86>
c000c364:	89 d8                	mov    eax,ebx
c000c366:	25 48 03 00 00       	and    eax,0x348
c000c36b:	3d 00 03 00 00       	cmp    eax,0x300
c000c370:	74 10                	je     c000c382 <kernel_main+0x96>
c000c372:	83 ec 0c             	sub    esp,0xc
c000c375:	68 97 28 02 c0       	push   0xc0022897
c000c37a:	e8 a9 96 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	83 ec 0c             	sub    esp,0xc
c000c385:	89 1d 80 47 02 c0    	mov    DWORD PTR ds:0xc0024780,ebx
c000c38b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c38f:	53                   	push   ebx
c000c390:	e8 11 21 00 00       	call   c000e4a6 <VAS::VAS()>
c000c395:	89 1d c4 48 02 c0    	mov    DWORD PTR ds:0xc00248c4,ebx
c000c39b:	e8 80 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3a0:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3a7:	e8 32 2d 00 00       	call   c000f0de <operator new(unsigned long)>
c000c3ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3af:	89 c6                	mov    esi,eax
c000c3b1:	e8 78 ea ff ff       	call   c000ae2e <Computer::Computer()>
c000c3b6:	6a 00                	push   0x0
c000c3b8:	6a 00                	push   0x0
c000c3ba:	89 35 68 47 02 c0    	mov    DWORD PTR ds:0xc0024768,esi
c000c3c0:	6a 00                	push   0x0
c000c3c2:	56                   	push   esi
c000c3c3:	e8 5a f2 ff ff       	call   c000b622 <Computer::open(int, int, void*)>
c000c3c8:	83 c4 14             	add    esp,0x14
c000c3cb:	53                   	push   ebx
c000c3cc:	e8 87 23 00 00       	call   c000e758 <VAS::~VAS()>
c000c3d1:	c7 04 24 00 13 02 c0 	mov    DWORD PTR [esp],0xc0021300
c000c3d8:	e8 4b 96 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000c3dd:	83 c4 20             	add    esp,0x20
c000c3e0:	5b                   	pop    ebx
c000c3e1:	5e                   	pop    esi
c000c3e2:	5f                   	pop    edi
c000c3e3:	c3                   	ret    

c000c3e4 <Phys::allocateDMA(unsigned long)>:
c000c3e4:	57                   	push   edi
c000c3e5:	31 d2                	xor    edx,edx
c000c3e7:	56                   	push   esi
c000c3e8:	31 ff                	xor    edi,edi
c000c3ea:	53                   	push   ebx
c000c3eb:	31 c9                	xor    ecx,ecx
c000c3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f1:	31 f6                	xor    esi,esi
c000c3f3:	05 ff 0f 00 00       	add    eax,0xfff
c000c3f8:	c1 e8 0c             	shr    eax,0xc
c000c3fb:	eb 17                	jmp    c000c414 <Phys::allocateDMA(unsigned long)+0x30>
c000c3fd:	85 c9                	test   ecx,ecx
c000c3ff:	75 04                	jne    c000c405 <Phys::allocateDMA(unsigned long)+0x21>
c000c401:	89 d7                	mov    edi,edx
c000c403:	89 d6                	mov    esi,edx
c000c405:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c408:	39 d8                	cmp    eax,ebx
c000c40a:	74 1f                	je     c000c42b <Phys::allocateDMA(unsigned long)+0x47>
c000c40c:	42                   	inc    edx
c000c40d:	89 d9                	mov    ecx,ebx
c000c40f:	83 fa 2f             	cmp    edx,0x2f
c000c412:	7f 11                	jg     c000c425 <Phys::allocateDMA(unsigned long)+0x41>
c000c414:	80 ba c0 47 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb840],0x0
c000c41b:	74 e0                	je     c000c3fd <Phys::allocateDMA(unsigned long)+0x19>
c000c41d:	31 c9                	xor    ecx,ecx
c000c41f:	42                   	inc    edx
c000c420:	83 fa 2f             	cmp    edx,0x2f
c000c423:	7e ef                	jle    c000c414 <Phys::allocateDMA(unsigned long)+0x30>
c000c425:	5b                   	pop    ebx
c000c426:	31 c0                	xor    eax,eax
c000c428:	5e                   	pop    esi
c000c429:	5f                   	pop    edi
c000c42a:	c3                   	ret    
c000c42b:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c42f:	89 d3                	mov    ebx,edx
c000c431:	c1 fb 1f             	sar    ebx,0x1f
c000c434:	83 e3 0f             	and    ebx,0xf
c000c437:	01 d3                	add    ebx,edx
c000c439:	89 f2                	mov    edx,esi
c000c43b:	c1 fb 04             	sar    ebx,0x4
c000c43e:	c1 fa 04             	sar    edx,0x4
c000c441:	39 da                	cmp    edx,ebx
c000c443:	75 30                	jne    c000c475 <Phys::allocateDMA(unsigned long)+0x91>
c000c445:	85 c0                	test   eax,eax
c000c447:	74 1b                	je     c000c464 <Phys::allocateDMA(unsigned long)+0x80>
c000c449:	bf c0 47 02 c0       	mov    edi,0xc00247c0
c000c44e:	8d 96 c0 47 02 c0    	lea    edx,[esi-0x3ffdb840]
c000c454:	83 f7 ff             	xor    edi,0xffffffff
c000c457:	29 f7                	sub    edi,esi
c000c459:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c45c:	42                   	inc    edx
c000c45d:	8d 04 17             	lea    eax,[edi+edx*1]
c000c460:	39 c1                	cmp    ecx,eax
c000c462:	7f f5                	jg     c000c459 <Phys::allocateDMA(unsigned long)+0x75>
c000c464:	85 db                	test   ebx,ebx
c000c466:	74 13                	je     c000c47b <Phys::allocateDMA(unsigned long)+0x97>
c000c468:	5b                   	pop    ebx
c000c469:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c46f:	c1 e0 0c             	shl    eax,0xc
c000c472:	5e                   	pop    esi
c000c473:	5f                   	pop    edi
c000c474:	c3                   	ret    
c000c475:	89 fa                	mov    edx,edi
c000c477:	31 c9                	xor    ecx,ecx
c000c479:	eb a4                	jmp    c000c41f <Phys::allocateDMA(unsigned long)+0x3b>
c000c47b:	c1 e6 0c             	shl    esi,0xc
c000c47e:	5b                   	pop    ebx
c000c47f:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c485:	5e                   	pop    esi
c000c486:	5f                   	pop    edi
c000c487:	c3                   	ret    

c000c488 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c488:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c48c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c490:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c496:	c1 e9 0c             	shr    ecx,0xc
c000c499:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c49e:	76 25                	jbe    c000c4c5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4a0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4a5:	c1 e8 0c             	shr    eax,0xc
c000c4a8:	8d 50 10             	lea    edx,[eax+0x10]
c000c4ab:	85 c9                	test   ecx,ecx
c000c4ad:	74 15                	je     c000c4c4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4af:	8d 82 c0 47 02 c0    	lea    eax,[edx-0x3ffdb840]
c000c4b5:	8d 94 11 c0 47 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb840]
c000c4bc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4bf:	40                   	inc    eax
c000c4c0:	39 d0                	cmp    eax,edx
c000c4c2:	75 f8                	jne    c000c4bc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4c4:	c3                   	ret    
c000c4c5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4cb:	c1 ea 0c             	shr    edx,0xc
c000c4ce:	eb db                	jmp    c000c4ab <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4d0 <Phys::setPageState(unsigned long, bool)>:
c000c4d0:	56                   	push   esi
c000c4d1:	ba 01 00 00 00       	mov    edx,0x1
c000c4d6:	53                   	push   ebx
c000c4d7:	8b 35 94 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023b94
c000c4dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4e5:	89 c8                	mov    eax,ecx
c000c4e7:	83 e1 07             	and    ecx,0x7
c000c4ea:	c1 e8 03             	shr    eax,0x3
c000c4ed:	01 c6                	add    esi,eax
c000c4ef:	d3 e2                	shl    edx,cl
c000c4f1:	83 f2 ff             	xor    edx,0xffffffff
c000c4f4:	20 16                	and    BYTE PTR [esi],dl
c000c4f6:	8b 15 94 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b94
c000c4fc:	01 d0                	add    eax,edx
c000c4fe:	d3 e3                	shl    ebx,cl
c000c500:	8a 08                	mov    cl,BYTE PTR [eax]
c000c502:	09 d9                	or     ecx,ebx
c000c504:	88 08                	mov    BYTE PTR [eax],cl
c000c506:	5b                   	pop    ebx
c000c507:	5e                   	pop    esi
c000c508:	c3                   	ret    

c000c509 <Phys::getPageState(unsigned long)>:
c000c509:	53                   	push   ebx
c000c50a:	8b 15 94 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b94
c000c510:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c514:	31 db                	xor    ebx,ebx
c000c516:	89 c8                	mov    eax,ecx
c000c518:	83 e1 07             	and    ecx,0x7
c000c51b:	c1 e8 03             	shr    eax,0x3
c000c51e:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c521:	89 d8                	mov    eax,ebx
c000c523:	5b                   	pop    ebx
c000c524:	d3 f8                	sar    eax,cl
c000c526:	83 e0 01             	and    eax,0x1
c000c529:	c3                   	ret    

c000c52a <Phys::freePage(unsigned long)>:
c000c52a:	53                   	push   ebx
c000c52b:	83 ec 08             	sub    esp,0x8
c000c52e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c532:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c538:	76 5a                	jbe    c000c594 <Phys::freePage(unsigned long)+0x6a>
c000c53a:	c1 eb 0c             	shr    ebx,0xc
c000c53d:	53                   	push   ebx
c000c53e:	e8 c6 ff ff ff       	call   c000c509 <Phys::getPageState(unsigned long)>
c000c543:	5a                   	pop    edx
c000c544:	84 c0                	test   al,al
c000c546:	74 5e                	je     c000c5a6 <Phys::freePage(unsigned long)+0x7c>
c000c548:	a1 ac 47 02 c0       	mov    eax,ds:0xc00247ac
c000c54d:	48                   	dec    eax
c000c54e:	a3 ac 47 02 c0       	mov    ds:0xc00247ac,eax
c000c553:	8d 04 80             	lea    eax,[eax+eax*4]
c000c556:	8d 04 80             	lea    eax,[eax+eax*4]
c000c559:	c1 e0 02             	shl    eax,0x2
c000c55c:	89 c2                	mov    edx,eax
c000c55e:	c1 fa 1f             	sar    edx,0x1f
c000c561:	f7 3d b0 47 02 c0    	idiv   DWORD PTR ds:0xc00247b0
c000c567:	39 05 a8 47 02 c0    	cmp    DWORD PTR ds:0xc00247a8,eax
c000c56d:	75 12                	jne    c000c581 <Phys::freePage(unsigned long)+0x57>
c000c56f:	51                   	push   ecx
c000c570:	51                   	push   ecx
c000c571:	6a 00                	push   0x0
c000c573:	53                   	push   ebx
c000c574:	e8 57 ff ff ff       	call   c000c4d0 <Phys::setPageState(unsigned long, bool)>
c000c579:	83 c4 10             	add    esp,0x10
c000c57c:	83 c4 08             	add    esp,0x8
c000c57f:	5b                   	pop    ebx
c000c580:	c3                   	ret    
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	a3 a8 47 02 c0       	mov    ds:0xc00247a8,eax
c000c589:	50                   	push   eax
c000c58a:	e8 01 0a 00 00       	call   c000cf90 <VgaText::updateRAMUsageDisplay(int)>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	eb db                	jmp    c000c56f <Phys::freePage(unsigned long)+0x45>
c000c594:	68 00 10 00 00       	push   0x1000
c000c599:	53                   	push   ebx
c000c59a:	e8 e9 fe ff ff       	call   c000c488 <Phys::freeDMA(unsigned long, unsigned long)>
c000c59f:	59                   	pop    ecx
c000c5a0:	5b                   	pop    ebx
c000c5a1:	83 c4 08             	add    esp,0x8
c000c5a4:	5b                   	pop    ebx
c000c5a5:	c3                   	ret    
c000c5a6:	c7 44 24 10 1b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002131b
c000c5ae:	83 c4 08             	add    esp,0x8
c000c5b1:	5b                   	pop    ebx
c000c5b2:	e9 71 94 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>

c000c5b7 <Phys::allocatePage()>:
c000c5b7:	56                   	push   esi
c000c5b8:	53                   	push   ebx
c000c5b9:	51                   	push   ecx
c000c5ba:	8b 35 a0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247a0
c000c5c0:	89 f3                	mov    ebx,esi
c000c5c2:	eb 0a                	jmp    c000c5ce <Phys::allocatePage()+0x17>
c000c5c4:	89 1d a0 47 02 c0    	mov    DWORD PTR ds:0xc00247a0,ebx
c000c5ca:	39 de                	cmp    esi,ebx
c000c5cc:	74 24                	je     c000c5f2 <Phys::allocatePage()+0x3b>
c000c5ce:	53                   	push   ebx
c000c5cf:	e8 35 ff ff ff       	call   c000c509 <Phys::getPageState(unsigned long)>
c000c5d4:	5a                   	pop    edx
c000c5d5:	84 c0                	test   al,al
c000c5d7:	74 5a                	je     c000c633 <Phys::allocatePage()+0x7c>
c000c5d9:	43                   	inc    ebx
c000c5da:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5e0:	75 e2                	jne    c000c5c4 <Phys::allocatePage()+0xd>
c000c5e2:	31 db                	xor    ebx,ebx
c000c5e4:	c7 05 a0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247a0,0x0
c000c5ee:	39 de                	cmp    esi,ebx
c000c5f0:	75 dc                	jne    c000c5ce <Phys::allocatePage()+0x17>
c000c5f2:	83 ec 0c             	sub    esp,0xc
c000c5f5:	68 31 13 02 c0       	push   0xc0021331
c000c5fa:	e8 14 2c 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000c5ff:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c606:	e8 d9 fd ff ff       	call   c000c3e4 <Phys::allocateDMA(unsigned long)>
c000c60b:	83 c4 10             	add    esp,0x10
c000c60e:	85 c0                	test   eax,eax
c000c610:	75 5a                	jne    c000c66c <Phys::allocatePage()+0xb5>
c000c612:	83 ec 0c             	sub    esp,0xc
c000c615:	68 42 13 02 c0       	push   0xc0021342
c000c61a:	e8 09 94 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	8b 1d a0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a0
c000c628:	53                   	push   ebx
c000c629:	e8 db fe ff ff       	call   c000c509 <Phys::getPageState(unsigned long)>
c000c62e:	5a                   	pop    edx
c000c62f:	84 c0                	test   al,al
c000c631:	75 a6                	jne    c000c5d9 <Phys::allocatePage()+0x22>
c000c633:	6a 01                	push   0x1
c000c635:	53                   	push   ebx
c000c636:	e8 95 fe ff ff       	call   c000c4d0 <Phys::setPageState(unsigned long, bool)>
c000c63b:	a1 ac 47 02 c0       	mov    eax,ds:0xc00247ac
c000c640:	59                   	pop    ecx
c000c641:	40                   	inc    eax
c000c642:	5b                   	pop    ebx
c000c643:	a3 ac 47 02 c0       	mov    ds:0xc00247ac,eax
c000c648:	8d 04 80             	lea    eax,[eax+eax*4]
c000c64b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c64e:	c1 e0 02             	shl    eax,0x2
c000c651:	89 c2                	mov    edx,eax
c000c653:	c1 fa 1f             	sar    edx,0x1f
c000c656:	f7 3d b0 47 02 c0    	idiv   DWORD PTR ds:0xc00247b0
c000c65c:	39 05 a8 47 02 c0    	cmp    DWORD PTR ds:0xc00247a8,eax
c000c662:	75 0c                	jne    c000c670 <Phys::allocatePage()+0xb9>
c000c664:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c000c669:	c1 e0 0c             	shl    eax,0xc
c000c66c:	5a                   	pop    edx
c000c66d:	5b                   	pop    ebx
c000c66e:	5e                   	pop    esi
c000c66f:	c3                   	ret    
c000c670:	83 ec 0c             	sub    esp,0xc
c000c673:	a3 a8 47 02 c0       	mov    ds:0xc00247a8,eax
c000c678:	50                   	push   eax
c000c679:	e8 12 09 00 00       	call   c000cf90 <VgaText::updateRAMUsageDisplay(int)>
c000c67e:	83 c4 10             	add    esp,0x10
c000c681:	eb e1                	jmp    c000c664 <Phys::allocatePage()+0xad>

c000c683 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c683:	56                   	push   esi
c000c684:	53                   	push   ebx
c000c685:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c689:	39 1d a4 47 02 c0    	cmp    DWORD PTR ds:0xc00247a4,ebx
c000c68f:	73 06                	jae    c000c697 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c691:	89 1d a4 47 02 c0    	mov    DWORD PTR ds:0xc00247a4,ebx
c000c697:	c1 eb 0c             	shr    ebx,0xc
c000c69a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c69e:	c1 e8 0c             	shr    eax,0xc
c000c6a1:	39 d8                	cmp    eax,ebx
c000c6a3:	73 13                	jae    c000c6b8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6a5:	6a 00                	push   0x0
c000c6a7:	8d 70 01             	lea    esi,[eax+0x1]
c000c6aa:	50                   	push   eax
c000c6ab:	e8 20 fe ff ff       	call   c000c4d0 <Phys::setPageState(unsigned long, bool)>
c000c6b0:	5a                   	pop    edx
c000c6b1:	89 f0                	mov    eax,esi
c000c6b3:	59                   	pop    ecx
c000c6b4:	39 f3                	cmp    ebx,esi
c000c6b6:	75 ed                	jne    c000c6a5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6b8:	5b                   	pop    ebx
c000c6b9:	5e                   	pop    esi
c000c6ba:	c3                   	ret    

c000c6bb <Phys::physicalMemorySetup(unsigned int)>:
c000c6bb:	55                   	push   ebp
c000c6bc:	57                   	push   edi
c000c6bd:	56                   	push   esi
c000c6be:	53                   	push   ebx
c000c6bf:	31 db                	xor    ebx,ebx
c000c6c1:	83 ec 40             	sub    esp,0x40
c000c6c4:	6a 30                	push   0x30
c000c6c6:	6a 00                	push   0x0
c000c6c8:	68 c0 47 02 c0       	push   0xc00247c0
c000c6cd:	e8 f1 3f ff ff       	call   c00006c3 <memset>
c000c6d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6db:	05 00 10 00 00       	add    eax,0x1000
c000c6e0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6e4:	83 c4 10             	add    esp,0x10
c000c6e7:	56                   	push   esi
c000c6e8:	56                   	push   esi
c000c6e9:	6a 01                	push   0x1
c000c6eb:	53                   	push   ebx
c000c6ec:	43                   	inc    ebx
c000c6ed:	e8 de fd ff ff       	call   c000c4d0 <Phys::setPageState(unsigned long, bool)>
c000c6f2:	83 c4 10             	add    esp,0x10
c000c6f5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6fb:	75 ea                	jne    c000c6e7 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6fd:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c703:	66 85 c0             	test   ax,ax
c000c706:	0f 84 3b 01 00 00    	je     c000c847 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c70c:	89 c7                	mov    edi,eax
c000c70e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c716:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c71c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c721:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c725:	eb 6d                	jmp    c000c794 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c727:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c72b:	89 c1                	mov    ecx,eax
c000c72d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c731:	0f 83 bc 00 00 00    	jae    c000c7f3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c737:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c73b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c740:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c744:	39 f2                	cmp    edx,esi
c000c746:	19 f8                	sbb    eax,edi
c000c748:	73 07                	jae    c000c751 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c74a:	be 00 00 0a 00       	mov    esi,0xa0000
c000c74f:	31 ff                	xor    edi,edi
c000c751:	89 f2                	mov    edx,esi
c000c753:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c758:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c75e:	89 f9                	mov    ecx,edi
c000c760:	83 d1 ff             	adc    ecx,0xffffffff
c000c763:	39 d0                	cmp    eax,edx
c000c765:	b8 00 00 00 00       	mov    eax,0x0
c000c76a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c76e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c772:	19 c8                	sbb    eax,ecx
c000c774:	0f 82 0d 01 00 00    	jb     c000c887 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c77a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c77e:	83 c3 18             	add    ebx,0x18
c000c781:	41                   	inc    ecx
c000c782:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c78a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c78e:	0f 84 c3 00 00 00    	je     c000c857 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c794:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c796:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c799:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c79c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7a0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7a3:	01 f0                	add    eax,esi
c000c7a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7ac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7b0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7b4:	11 fa                	adc    edx,edi
c000c7b6:	55                   	push   ebp
c000c7b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7c3:	51                   	push   ecx
c000c7c4:	56                   	push   esi
c000c7c5:	68 7c 13 02 c0       	push   0xc002137c
c000c7ca:	e8 44 2a 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000c7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7d3:	83 c4 10             	add    esp,0x10
c000c7d6:	09 f8                	or     eax,edi
c000c7d8:	75 7d                	jne    c000c857 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7da:	83 fd 01             	cmp    ebp,0x1
c000c7dd:	75 11                	jne    c000c7f0 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7df:	ba 00 00 08 00       	mov    edx,0x80000
c000c7e4:	89 c1                	mov    ecx,eax
c000c7e6:	39 f2                	cmp    edx,esi
c000c7e8:	19 f9                	sbb    ecx,edi
c000c7ea:	0f 83 37 ff ff ff    	jae    c000c727 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7f0:	4d                   	dec    ebp
c000c7f1:	75 87                	jne    c000c77a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7f3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7f7:	31 d2                	xor    edx,edx
c000c7f9:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7fd:	89 c8                	mov    eax,ecx
c000c7ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c803:	19 d1                	sbb    ecx,edx
c000c805:	0f 82 6f ff ff ff    	jb     c000c77a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c80b:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c810:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c814:	b9 00 00 00 00       	mov    ecx,0x0
c000c819:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c81d:	0f 83 57 ff ff ff    	jae    c000c77a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c823:	39 c6                	cmp    esi,eax
c000c825:	19 d7                	sbb    edi,edx
c000c827:	73 6a                	jae    c000c893 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c829:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c82d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c831:	29 c7                	sub    edi,eax
c000c833:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c837:	19 d5                	sbb    ebp,edx
c000c839:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c83d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c841:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c845:	eb 4c                	jmp    c000c893 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c847:	83 ec 0c             	sub    esp,0xc
c000c84a:	68 50 13 02 c0       	push   0xc0021350
c000c84f:	e8 d4 91 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000c854:	83 c4 10             	add    esp,0x10
c000c857:	bb 40 01 00 00       	mov    ebx,0x140
c000c85c:	50                   	push   eax
c000c85d:	50                   	push   eax
c000c85e:	6a 00                	push   0x0
c000c860:	53                   	push   ebx
c000c861:	e8 6a fc ff ff       	call   c000c4d0 <Phys::setPageState(unsigned long, bool)>
c000c866:	8b 15 b0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247b0
c000c86c:	43                   	inc    ebx
c000c86d:	42                   	inc    edx
c000c86e:	83 c4 10             	add    esp,0x10
c000c871:	89 15 b0 47 02 c0    	mov    DWORD PTR ds:0xc00247b0,edx
c000c877:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c87d:	75 dd                	jne    c000c85c <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c87f:	83 c4 3c             	add    esp,0x3c
c000c882:	5b                   	pop    ebx
c000c883:	5e                   	pop    esi
c000c884:	5f                   	pop    edi
c000c885:	5d                   	pop    ebp
c000c886:	c3                   	ret    
c000c887:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c88b:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c893:	56                   	push   esi
c000c894:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c898:	56                   	push   esi
c000c899:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c89d:	57                   	push   edi
c000c89e:	68 a0 13 02 c0       	push   0xc00213a0
c000c8a3:	e8 6b 29 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000c8a8:	5d                   	pop    ebp
c000c8a9:	58                   	pop    eax
c000c8aa:	56                   	push   esi
c000c8ab:	57                   	push   edi
c000c8ac:	e8 d2 fd ff ff       	call   c000c683 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8bd:	8b 15 b0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247b0
c000c8c3:	83 c4 0c             	add    esp,0xc
c000c8c6:	01 d0                	add    eax,edx
c000c8c8:	a3 b0 47 02 c0       	mov    ds:0xc00247b0,eax
c000c8cd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8d4:	52                   	push   edx
c000c8d5:	50                   	push   eax
c000c8d6:	68 5e 13 02 c0       	push   0xc002135e
c000c8db:	e8 33 29 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	e9 92 fe ff ff       	jmp    c000c77a <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8e8 <Pipe::isAtty()>:
c000c8e8:	31 c0                	xor    eax,eax
c000c8ea:	c3                   	ret    
c000c8eb:	90                   	nop

c000c8ec <Pipe::~Pipe()>:
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c000c8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f8:	89 10                	mov    DWORD PTR [eax],edx
c000c8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fe:	83 ec 0c             	sub    esp,0xc
c000c901:	50                   	push   eax
c000c902:	e8 5d 16 00 00       	call   c000df64 <UnixFile::~UnixFile()>
c000c907:	83 c4 10             	add    esp,0x10
c000c90a:	90                   	nop
c000c90b:	83 c4 0c             	add    esp,0xc
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Pipe::~Pipe()>:
c000c910:	83 ec 0c             	sub    esp,0xc
c000c913:	83 ec 0c             	sub    esp,0xc
c000c916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91a:	e8 cd ff ff ff       	call   c000c8ec <Pipe::~Pipe()>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	83 ec 08             	sub    esp,0x8
c000c925:	6a 20                	push   0x20
c000c927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92b:	e8 bd 27 00 00       	call   c000f0ed <operator delete(void*, unsigned long)>
c000c930:	83 c4 10             	add    esp,0x10
c000c933:	83 c4 0c             	add    esp,0xc
c000c936:	c3                   	ret    
c000c937:	90                   	nop

c000c938 <Pipe::read(unsigned long long, void*, int*)>:
c000c938:	55                   	push   ebp
c000c939:	57                   	push   edi
c000c93a:	56                   	push   esi
c000c93b:	53                   	push   ebx
c000c93c:	83 ec 1c             	sub    esp,0x1c
c000c93f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c943:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c947:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c94b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c94e:	89 c8                	mov    eax,ecx
c000c950:	99                   	cdq    
c000c951:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c955:	74 19                	je     c000c970 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c957:	39 f9                	cmp    ecx,edi
c000c959:	89 d1                	mov    ecx,edx
c000c95b:	19 f1                	sbb    ecx,esi
c000c95d:	73 11                	jae    c000c970 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c95f:	e8 cd c0 00 00       	call   c0018a31 <lockScheduler()>
c000c964:	e8 11 c4 00 00       	call   c0018d7a <schedule()>
c000c969:	e8 c5 c0 00 00       	call   c0018a33 <unlockScheduler()>
c000c96e:	eb db                	jmp    c000c94b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c970:	39 f8                	cmp    eax,edi
c000c972:	89 d1                	mov    ecx,edx
c000c974:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c978:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c97c:	19 f1                	sbb    ecx,esi
c000c97e:	73 08                	jae    c000c988 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c980:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c984:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c988:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c98b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c98e:	29 c6                	sub    esi,eax
c000c990:	89 f1                	mov    ecx,esi
c000c992:	c1 f9 1f             	sar    ecx,0x1f
c000c995:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c999:	89 ca                	mov    edx,ecx
c000c99b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c99f:	19 d1                	sbb    ecx,edx
c000c9a1:	73 04                	jae    c000c9a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9ab:	89 fd                	mov    ebp,edi
c000c9ad:	29 f5                	sub    ebp,esi
c000c9af:	85 f6                	test   esi,esi
c000c9b1:	74 12                	je     c000c9c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9b3:	52                   	push   edx
c000c9b4:	56                   	push   esi
c000c9b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9b8:	50                   	push   eax
c000c9b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9bd:	e8 cb 3c ff ff       	call   c000068d <memcpy>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 ed                	test   ebp,ebp
c000c9c7:	74 12                	je     c000c9db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9c9:	50                   	push   eax
c000c9ca:	55                   	push   ebp
c000c9cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9d2:	56                   	push   esi
c000c9d3:	e8 b5 3c ff ff       	call   c000068d <memcpy>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9de:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9e4:	99                   	cdq    
c000c9e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e9:	89 f7                	mov    edi,esi
c000c9eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9ef:	c1 ff 1f             	sar    edi,0x1f
c000c9f2:	57                   	push   edi
c000c9f3:	56                   	push   esi
c000c9f4:	52                   	push   edx
c000c9f5:	50                   	push   eax
c000c9f6:	e8 f1 2b 01 00       	call   c001f5ec <__umoddi3>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca06:	75 10                	jne    c000ca18 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca08:	83 ec 0c             	sub    esp,0xc
c000ca0b:	68 c9 13 02 c0       	push   0xc00213c9
c000ca10:	e8 13 90 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca20:	89 10                	mov    DWORD PTR [eax],edx
c000ca22:	83 c4 1c             	add    esp,0x1c
c000ca25:	31 c0                	xor    eax,eax
c000ca27:	5b                   	pop    ebx
c000ca28:	5e                   	pop    esi
c000ca29:	5f                   	pop    edi
c000ca2a:	5d                   	pop    ebp
c000ca2b:	c3                   	ret    

c000ca2c <Pipe::write(unsigned long long, void*, int*)>:
c000ca2c:	55                   	push   ebp
c000ca2d:	57                   	push   edi
c000ca2e:	56                   	push   esi
c000ca2f:	53                   	push   ebx
c000ca30:	83 ec 1c             	sub    esp,0x1c
c000ca33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca3b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca42:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca45:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca48:	89 de                	mov    esi,ebx
c000ca4a:	89 df                	mov    edi,ebx
c000ca4c:	c1 ff 1f             	sar    edi,0x1f
c000ca4f:	01 c6                	add    esi,eax
c000ca51:	89 c8                	mov    eax,ecx
c000ca53:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca57:	11 d7                	adc    edi,edx
c000ca59:	99                   	cdq    
c000ca5a:	89 d0                	mov    eax,edx
c000ca5c:	39 f1                	cmp    ecx,esi
c000ca5e:	19 f8                	sbb    eax,edi
c000ca60:	b8 01 00 00 00       	mov    eax,0x1
c000ca65:	0f 82 80 00 00 00    	jb     c000caeb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca6b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca6e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca71:	01 d8                	add    eax,ebx
c000ca73:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca77:	99                   	cdq    
c000ca78:	f7 f9                	idiv   ecx
c000ca7a:	29 d1                	sub    ecx,edx
c000ca7c:	89 d7                	mov    edi,edx
c000ca7e:	89 c8                	mov    eax,ecx
c000ca80:	99                   	cdq    
c000ca81:	39 ce                	cmp    esi,ecx
c000ca83:	19 d3                	sbb    ebx,edx
c000ca85:	bb 00 00 00 00       	mov    ebx,0x0
c000ca8a:	72 04                	jb     c000ca90 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca8c:	89 f3                	mov    ebx,esi
c000ca8e:	29 cb                	sub    ebx,ecx
c000ca90:	89 f1                	mov    ecx,esi
c000ca92:	29 d9                	sub    ecx,ebx
c000ca94:	74 1a                	je     c000cab0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca96:	52                   	push   edx
c000ca97:	51                   	push   ecx
c000ca98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000caa0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000caa3:	57                   	push   edi
c000caa4:	e8 e4 3b ff ff       	call   c000068d <memcpy>
c000caa9:	83 c4 10             	add    esp,0x10
c000caac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cab0:	85 db                	test   ebx,ebx
c000cab2:	74 12                	je     c000cac6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cab4:	50                   	push   eax
c000cab5:	53                   	push   ebx
c000cab6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000caba:	51                   	push   ecx
c000cabb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cabe:	e8 ca 3b ff ff       	call   c000068d <memcpy>
c000cac3:	83 c4 10             	add    esp,0x10
c000cac6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cac9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cace:	75 10                	jne    c000cae0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	68 e5 13 02 c0       	push   0xc00213e5
c000cad8:	e8 4b 8f 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cae4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cae7:	89 38                	mov    DWORD PTR [eax],edi
c000cae9:	31 c0                	xor    eax,eax
c000caeb:	83 c4 1c             	add    esp,0x1c
c000caee:	5b                   	pop    ebx
c000caef:	5e                   	pop    esi
c000caf0:	5f                   	pop    edi
c000caf1:	5d                   	pop    ebp
c000caf2:	c3                   	ret    
c000caf3:	90                   	nop

c000caf4 <Pipe::Pipe(int)>:
c000caf4:	83 ec 0c             	sub    esp,0xc
c000caf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafb:	83 ec 08             	sub    esp,0x8
c000cafe:	6a 00                	push   0x0
c000cb00:	50                   	push   eax
c000cb01:	e8 bc 12 00 00       	call   c000ddc2 <UnixFile::UnixFile(int)>
c000cb06:	83 c4 10             	add    esp,0x10
c000cb09:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c000cb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb12:	89 10                	mov    DWORD PTR [eax],edx
c000cb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb39:	83 ec 0c             	sub    esp,0xc
c000cb3c:	50                   	push   eax
c000cb3d:	e8 9f f4 ff ff       	call   c000bfe1 <malloc>
c000cb42:	83 c4 10             	add    esp,0x10
c000cb45:	89 c2                	mov    edx,eax
c000cb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb52:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb56:	90                   	nop
c000cb57:	83 c4 0c             	add    esp,0xc
c000cb5a:	c3                   	ret    
c000cb5b:	90                   	nop

c000cb5c <VgaText::isAtty()>:
c000cb5c:	b0 01                	mov    al,0x1
c000cb5e:	c3                   	ret    
c000cb5f:	90                   	nop

c000cb60 <VgaText::~VgaText()>:
c000cb60:	83 ec 0c             	sub    esp,0xc
c000cb63:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000cb68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6c:	89 10                	mov    DWORD PTR [eax],edx
c000cb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb72:	83 ec 0c             	sub    esp,0xc
c000cb75:	50                   	push   eax
c000cb76:	e8 e9 13 00 00       	call   c000df64 <UnixFile::~UnixFile()>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	90                   	nop
c000cb7f:	83 c4 0c             	add    esp,0xc
c000cb82:	c3                   	ret    
c000cb83:	90                   	nop

c000cb84 <VgaText::~VgaText()>:
c000cb84:	83 ec 0c             	sub    esp,0xc
c000cb87:	83 ec 0c             	sub    esp,0xc
c000cb8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8e:	e8 cd ff ff ff       	call   c000cb60 <VgaText::~VgaText()>
c000cb93:	83 c4 10             	add    esp,0x10
c000cb96:	83 ec 08             	sub    esp,0x8
c000cb99:	68 60 12 00 00       	push   0x1260
c000cb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba2:	e8 46 25 00 00       	call   c000f0ed <operator delete(void*, unsigned long)>
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	83 c4 0c             	add    esp,0xc
c000cbad:	c3                   	ret    

c000cbae <VgaText::read(unsigned long long, void*, int*)>:
c000cbae:	83 ec 10             	sub    esp,0x10
c000cbb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbbd:	e8 4f 58 00 00       	call   c0012411 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbc6:	89 02                	mov    DWORD PTR [edx],eax
c000cbc8:	31 c0                	xor    eax,eax
c000cbca:	83 c4 1c             	add    esp,0x1c
c000cbcd:	c3                   	ret    

c000cbce <setTerminalScrollLock(bool)>:
c000cbce:	c3                   	ret    

c000cbcf <addToTerminalCycle(VgaText*)>:
c000cbcf:	8b 15 20 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024820
c000cbd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbd9:	85 d2                	test   edx,edx
c000cbdb:	75 0c                	jne    c000cbe9 <addToTerminalCycle(VgaText*)+0x1a>
c000cbdd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbe3:	a3 20 48 02 c0       	mov    ds:0xc0024820,eax
c000cbe8:	c3                   	ret    
c000cbe9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbf5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbfb:	c3                   	ret    

c000cbfc <installVgaTextImplementation()>:
c000cbfc:	83 ec 10             	sub    esp,0x10
c000cbff:	6a 20                	push   0x20
c000cc01:	6a 00                	push   0x0
c000cc03:	68 00 48 02 c0       	push   0xc0024800
c000cc08:	e8 b6 3a ff ff       	call   c00006c3 <memset>
c000cc0d:	83 c4 1c             	add    esp,0x1c
c000cc10:	c3                   	ret    

c000cc11 <scrollTerminalScrollLock(int)>:
c000cc11:	c3                   	ret    

c000cc12 <VgaText::load()>:
c000cc12:	53                   	push   ebx
c000cc13:	31 c0                	xor    eax,eax
c000cc15:	83 ec 58             	sub    esp,0x58
c000cc18:	89 e2                	mov    edx,esp
c000cc1a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc1e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc22:	40                   	inc    eax
c000cc23:	83 f8 50             	cmp    eax,0x50
c000cc26:	75 f6                	jne    c000cc1e <VgaText::load()+0xc>
c000cc28:	31 c0                	xor    eax,eax
c000cc2a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc31:	84 c9                	test   cl,cl
c000cc33:	74 06                	je     c000cc3b <VgaText::load()+0x29>
c000cc35:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc38:	40                   	inc    eax
c000cc39:	eb ef                	jmp    c000cc2a <VgaText::load()+0x18>
c000cc3b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc41:	85 c0                	test   eax,eax
c000cc43:	74 09                	je     c000cc4e <VgaText::load()+0x3c>
c000cc45:	51                   	push   ecx
c000cc46:	51                   	push   ecx
c000cc47:	52                   	push   edx
c000cc48:	53                   	push   ebx
c000cc49:	ff d0                	call   eax
c000cc4b:	83 c4 10             	add    esp,0x10
c000cc4e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc54:	85 c0                	test   eax,eax
c000cc56:	74 09                	je     c000cc61 <VgaText::load()+0x4f>
c000cc58:	83 ec 0c             	sub    esp,0xc
c000cc5b:	53                   	push   ebx
c000cc5c:	ff d0                	call   eax
c000cc5e:	83 c4 10             	add    esp,0x10
c000cc61:	83 c4 58             	add    esp,0x58
c000cc64:	5b                   	pop    ebx
c000cc65:	c3                   	ret    

c000cc66 <VgaText::updateCursor()>:
c000cc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc6a:	39 05 24 48 02 c0    	cmp    DWORD PTR ds:0xc0024824,eax
c000cc70:	75 0c                	jne    c000cc7e <VgaText::updateCursor()+0x18>
c000cc72:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc78:	85 c0                	test   eax,eax
c000cc7a:	74 02                	je     c000cc7e <VgaText::updateCursor()+0x18>
c000cc7c:	ff e0                	jmp    eax
c000cc7e:	c3                   	ret    
c000cc7f:	90                   	nop

c000cc80 <VgaText::showCursor(bool)>:
c000cc80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc88:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc8e:	c3                   	ret    
c000cc8f:	90                   	nop

c000cc90 <VgaText::disableBlink(bool)>:
c000cc90:	56                   	push   esi
c000cc91:	53                   	push   ebx
c000cc92:	51                   	push   ecx
c000cc93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc97:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc9b:	39 1d 24 48 02 c0    	cmp    DWORD PTR ds:0xc0024824,ebx
c000cca1:	75 18                	jne    c000ccbb <VgaText::disableBlink(bool)+0x2b>
c000cca3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cca9:	85 c0                	test   eax,eax
c000ccab:	74 0e                	je     c000ccbb <VgaText::disableBlink(bool)+0x2b>
c000ccad:	89 f1                	mov    ecx,esi
c000ccaf:	52                   	push   edx
c000ccb0:	52                   	push   edx
c000ccb1:	0f b6 d1             	movzx  edx,cl
c000ccb4:	52                   	push   edx
c000ccb5:	53                   	push   ebx
c000ccb6:	ff d0                	call   eax
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	89 f0                	mov    eax,esi
c000ccbd:	83 f0 01             	xor    eax,0x1
c000ccc0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccc6:	58                   	pop    eax
c000ccc7:	5b                   	pop    ebx
c000ccc8:	5e                   	pop    esi
c000ccc9:	c3                   	ret    

c000ccca <VgaText::doANSI_SGR(int)>:
c000ccca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd2:	85 d2                	test   edx,edx
c000ccd4:	75 14                	jne    c000ccea <VgaText::doANSI_SGR(int)+0x20>
c000ccd6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccdc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cce2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cce8:	eb 65                	jmp    c000cd4f <VgaText::doANSI_SGR(int)+0x85>
c000ccea:	83 fa 07             	cmp    edx,0x7
c000cced:	75 14                	jne    c000cd03 <VgaText::doANSI_SGR(int)+0x39>
c000ccef:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccf5:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ccfb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd01:	eb 4c                	jmp    c000cd4f <VgaText::doANSI_SGR(int)+0x85>
c000cd03:	83 fa 1b             	cmp    edx,0x1b
c000cd06:	74 ce                	je     c000ccd6 <VgaText::doANSI_SGR(int)+0xc>
c000cd08:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd0b:	83 f9 07             	cmp    ecx,0x7
c000cd0e:	77 09                	ja     c000cd19 <VgaText::doANSI_SGR(int)+0x4f>
c000cd10:	8b 14 8d c0 3b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc440]
c000cd17:	eb 20                	jmp    c000cd39 <VgaText::doANSI_SGR(int)+0x6f>
c000cd19:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd1c:	83 f9 07             	cmp    ecx,0x7
c000cd1f:	77 09                	ja     c000cd2a <VgaText::doANSI_SGR(int)+0x60>
c000cd21:	8b 14 8d c0 3b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc440]
c000cd28:	eb 25                	jmp    c000cd4f <VgaText::doANSI_SGR(int)+0x85>
c000cd2a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd2d:	83 f9 07             	cmp    ecx,0x7
c000cd30:	77 0e                	ja     c000cd40 <VgaText::doANSI_SGR(int)+0x76>
c000cd32:	8b 14 95 78 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc588]
c000cd39:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd3f:	c3                   	ret    
c000cd40:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd43:	83 f9 07             	cmp    ecx,0x7
c000cd46:	77 0d                	ja     c000cd55 <VgaText::doANSI_SGR(int)+0x8b>
c000cd48:	8b 14 95 50 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc5b0]
c000cd4f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd55:	c3                   	ret    

c000cd56 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd5e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd64:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd6a:	c3                   	ret    
c000cd6b:	90                   	nop

c000cd6c <VgaText::setDefaultFgColour(VgaColour)>:
c000cd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd74:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd7a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd80:	c3                   	ret    
c000cd81:	90                   	nop

c000cd82 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd82:	53                   	push   ebx
c000cd83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd8f:	51                   	push   ecx
c000cd90:	e8 c1 ff ff ff       	call   c000cd56 <VgaText::setDefaultBgColour(VgaColour)>
c000cd95:	58                   	pop    eax
c000cd96:	5a                   	pop    edx
c000cd97:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd9b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd9f:	5b                   	pop    ebx
c000cda0:	eb ca                	jmp    c000cd6c <VgaText::setDefaultFgColour(VgaColour)>

c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cda2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cda7:	c1 e2 04             	shl    edx,0x4
c000cdaa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdae:	83 e0 0f             	and    eax,0xf
c000cdb1:	09 d0                	or     eax,edx
c000cdb3:	c3                   	ret    

c000cdb4 <VgaText::scrollScreen()>:
c000cdb4:	57                   	push   edi
c000cdb5:	56                   	push   esi
c000cdb6:	be 01 00 00 00       	mov    esi,0x1
c000cdbb:	53                   	push   ebx
c000cdbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdc0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdc6:	31 ff                	xor    edi,edi
c000cdc8:	01 d9                	add    ecx,ebx
c000cdca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdcd:	83 fe 17             	cmp    esi,0x17
c000cdd0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdd6:	75 28                	jne    c000ce00 <VgaText::scrollScreen()+0x4c>
c000cdd8:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdde:	74 1c                	je     c000cdfc <VgaText::scrollScreen()+0x48>
c000cde0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cde7:	50                   	push   eax
c000cde8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdef:	50                   	push   eax
c000cdf0:	e8 ad ff ff ff       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cdf5:	5a                   	pop    edx
c000cdf6:	5a                   	pop    edx
c000cdf7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdfa:	eb 04                	jmp    c000ce00 <VgaText::scrollScreen()+0x4c>
c000cdfc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce00:	47                   	inc    edi
c000ce01:	41                   	inc    ecx
c000ce02:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce08:	75 c0                	jne    c000cdca <VgaText::scrollScreen()+0x16>
c000ce0a:	46                   	inc    esi
c000ce0b:	83 fe 18             	cmp    esi,0x18
c000ce0e:	75 b0                	jne    c000cdc0 <VgaText::scrollScreen()+0xc>
c000ce10:	39 1d 24 48 02 c0    	cmp    DWORD PTR ds:0xc0024824,ebx
c000ce16:	75 24                	jne    c000ce3c <VgaText::scrollScreen()+0x88>
c000ce18:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce1f:	74 08                	je     c000ce29 <VgaText::scrollScreen()+0x75>
c000ce21:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce27:	eb 13                	jmp    c000ce3c <VgaText::scrollScreen()+0x88>
c000ce29:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce2f:	85 c0                	test   eax,eax
c000ce31:	74 09                	je     c000ce3c <VgaText::scrollScreen()+0x88>
c000ce33:	83 ec 0c             	sub    esp,0xc
c000ce36:	53                   	push   ebx
c000ce37:	ff d0                	call   eax
c000ce39:	83 c4 10             	add    esp,0x10
c000ce3c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce40:	5b                   	pop    ebx
c000ce41:	5e                   	pop    esi
c000ce42:	5f                   	pop    edi
c000ce43:	e9 1e fe ff ff       	jmp    c000cc66 <VgaText::updateCursor()>

c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce4d:	c1 e0 08             	shl    eax,0x8
c000ce50:	89 c2                	mov    edx,eax
c000ce52:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce57:	09 d0                	or     eax,edx
c000ce59:	c3                   	ret    

c000ce5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce5a:	53                   	push   ebx
c000ce5b:	83 ec 08             	sub    esp,0x8
c000ce5e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce67:	50                   	push   eax
c000ce68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce6d:	50                   	push   eax
c000ce6e:	e8 2f ff ff ff       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce73:	5a                   	pop    edx
c000ce74:	5b                   	pop    ebx
c000ce75:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce7a:	0f b6 c0             	movzx  eax,al
c000ce7d:	50                   	push   eax
c000ce7e:	53                   	push   ebx
c000ce7f:	e8 c4 ff ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce84:	5a                   	pop    edx
c000ce85:	5a                   	pop    edx
c000ce86:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce8c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce90:	0f b7 d2             	movzx  edx,dx
c000ce93:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce98:	39 0d 24 48 02 c0    	cmp    DWORD PTR ds:0xc0024824,ecx
c000ce9e:	75 14                	jne    c000ceb4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cea6:	85 c0                	test   eax,eax
c000cea8:	74 0a                	je     c000ceb4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceaa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceae:	83 c4 08             	add    esp,0x8
c000ceb1:	5b                   	pop    ebx
c000ceb2:	ff e0                	jmp    eax
c000ceb4:	83 c4 08             	add    esp,0x8
c000ceb7:	5b                   	pop    ebx
c000ceb8:	c3                   	ret    
c000ceb9:	90                   	nop

c000ceba <VgaText::getCursorX()>:
c000ceba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cebe:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cec4:	c3                   	ret    
c000cec5:	90                   	nop

c000cec6 <VgaText::getCursorY()>:
c000cec6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ced0:	c3                   	ret    
c000ced1:	90                   	nop

c000ced2 <VgaText::setCursor(int, int)>:
c000ced2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceda:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cee0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cee4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ceea:	e9 77 fd ff ff       	jmp    c000cc66 <VgaText::updateCursor()>
c000ceef:	90                   	nop

c000cef0 <VgaText::setCursorX(int)>:
c000cef0:	83 ec 10             	sub    esp,0x10
c000cef3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cef7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cefd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf01:	50                   	push   eax
c000cf02:	e8 cb ff ff ff       	call   c000ced2 <VgaText::setCursor(int, int)>
c000cf07:	83 c4 1c             	add    esp,0x1c
c000cf0a:	c3                   	ret    
c000cf0b:	90                   	nop

c000cf0c <VgaText::setCursorY(int)>:
c000cf0c:	83 ec 10             	sub    esp,0x10
c000cf0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf17:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf1d:	50                   	push   eax
c000cf1e:	e8 af ff ff ff       	call   c000ced2 <VgaText::setCursor(int, int)>
c000cf23:	83 c4 1c             	add    esp,0x1c
c000cf26:	c3                   	ret    
c000cf27:	90                   	nop

c000cf28 <VgaText::incrementCursor(bool)>:
c000cf28:	56                   	push   esi
c000cf29:	53                   	push   ebx
c000cf2a:	51                   	push   ecx
c000cf2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf33:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf39:	40                   	inc    eax
c000cf3a:	83 f8 50             	cmp    eax,0x50
c000cf3d:	74 08                	je     c000cf47 <VgaText::incrementCursor(bool)+0x1f>
c000cf3f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf45:	eb 33                	jmp    c000cf7a <VgaText::incrementCursor(bool)+0x52>
c000cf47:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf4d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf57:	8d 50 01             	lea    edx,[eax+0x1]
c000cf5a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf60:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf66:	75 12                	jne    c000cf7a <VgaText::incrementCursor(bool)+0x52>
c000cf68:	83 ec 0c             	sub    esp,0xc
c000cf6b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf71:	53                   	push   ebx
c000cf72:	e8 3d fe ff ff       	call   c000cdb4 <VgaText::scrollScreen()>
c000cf77:	83 c4 10             	add    esp,0x10
c000cf7a:	89 f0                	mov    eax,esi
c000cf7c:	84 c0                	test   al,al
c000cf7e:	74 0c                	je     c000cf8c <VgaText::incrementCursor(bool)+0x64>
c000cf80:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf84:	5a                   	pop    edx
c000cf85:	5b                   	pop    ebx
c000cf86:	5e                   	pop    esi
c000cf87:	e9 da fc ff ff       	jmp    c000cc66 <VgaText::updateCursor()>
c000cf8c:	58                   	pop    eax
c000cf8d:	5b                   	pop    ebx
c000cf8e:	5e                   	pop    esi
c000cf8f:	c3                   	ret    

c000cf90 <VgaText::updateRAMUsageDisplay(int)>:
c000cf90:	53                   	push   ebx
c000cf91:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf96:	6a 0f                	push   0xf
c000cf98:	6a 00                	push   0x0
c000cf9a:	e8 03 fe ff ff       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf9f:	5a                   	pop    edx
c000cfa0:	59                   	pop    ecx
c000cfa1:	0f b6 c8             	movzx  ecx,al
c000cfa4:	51                   	push   ecx
c000cfa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfa9:	99                   	cdq    
c000cfaa:	f7 fb                	idiv   ebx
c000cfac:	83 c0 30             	add    eax,0x30
c000cfaf:	89 d3                	mov    ebx,edx
c000cfb1:	0f be c0             	movsx  eax,al
c000cfb4:	50                   	push   eax
c000cfb5:	e8 8e fe ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfba:	5a                   	pop    edx
c000cfbb:	83 c3 30             	add    ebx,0x30
c000cfbe:	5a                   	pop    edx
c000cfbf:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfc5:	0f b6 db             	movzx  ebx,bl
c000cfc8:	51                   	push   ecx
c000cfc9:	53                   	push   ebx
c000cfca:	e8 79 fe ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfcf:	5b                   	pop    ebx
c000cfd0:	5a                   	pop    edx
c000cfd1:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfd7:	51                   	push   ecx
c000cfd8:	6a 25                	push   0x25
c000cfda:	e8 69 fe ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfdf:	59                   	pop    ecx
c000cfe0:	5b                   	pop    ebx
c000cfe1:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfe7:	5b                   	pop    ebx
c000cfe8:	c3                   	ret    
c000cfe9:	90                   	nop

c000cfea <VgaText::updateDiskUsage()>:
c000cfea:	55                   	push   ebp
c000cfeb:	bd 10 27 00 00       	mov    ebp,0x2710
c000cff0:	57                   	push   edi
c000cff1:	56                   	push   esi
c000cff2:	53                   	push   ebx
c000cff3:	6a 0f                	push   0xf
c000cff5:	6a 00                	push   0x0
c000cff7:	e8 a6 fd ff ff       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cffc:	0f b6 d8             	movzx  ebx,al
c000cfff:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000d004:	5a                   	pop    edx
c000d005:	99                   	cdq    
c000d006:	f7 fd                	idiv   ebp
c000d008:	59                   	pop    ecx
c000d009:	b9 0a 00 00 00       	mov    ecx,0xa
c000d00e:	99                   	cdq    
c000d00f:	f7 f9                	idiv   ecx
c000d011:	53                   	push   ebx
c000d012:	8d 42 30             	lea    eax,[edx+0x30]
c000d015:	0f b6 c0             	movzx  eax,al
c000d018:	50                   	push   eax
c000d019:	e8 2a fe ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d01e:	5e                   	pop    esi
c000d01f:	5f                   	pop    edi
c000d020:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d026:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000d02b:	bf e8 03 00 00       	mov    edi,0x3e8
c000d030:	99                   	cdq    
c000d031:	f7 ff                	idiv   edi
c000d033:	99                   	cdq    
c000d034:	f7 f9                	idiv   ecx
c000d036:	53                   	push   ebx
c000d037:	8d 42 30             	lea    eax,[edx+0x30]
c000d03a:	0f b6 c0             	movzx  eax,al
c000d03d:	50                   	push   eax
c000d03e:	e8 05 fe ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d043:	5a                   	pop    edx
c000d044:	5e                   	pop    esi
c000d045:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d04b:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000d050:	be 64 00 00 00       	mov    esi,0x64
c000d055:	99                   	cdq    
c000d056:	f7 fe                	idiv   esi
c000d058:	99                   	cdq    
c000d059:	f7 f9                	idiv   ecx
c000d05b:	53                   	push   ebx
c000d05c:	8d 42 30             	lea    eax,[edx+0x30]
c000d05f:	0f b6 c0             	movzx  eax,al
c000d062:	50                   	push   eax
c000d063:	e8 e0 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d068:	5a                   	pop    edx
c000d069:	5a                   	pop    edx
c000d06a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d070:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000d075:	53                   	push   ebx
c000d076:	99                   	cdq    
c000d077:	f7 f9                	idiv   ecx
c000d079:	99                   	cdq    
c000d07a:	f7 f9                	idiv   ecx
c000d07c:	8d 42 30             	lea    eax,[edx+0x30]
c000d07f:	0f b6 c0             	movzx  eax,al
c000d082:	50                   	push   eax
c000d083:	e8 c0 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d088:	5a                   	pop    edx
c000d089:	5a                   	pop    edx
c000d08a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d090:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000d095:	53                   	push   ebx
c000d096:	99                   	cdq    
c000d097:	f7 f9                	idiv   ecx
c000d099:	8d 42 30             	lea    eax,[edx+0x30]
c000d09c:	0f b6 c0             	movzx  eax,al
c000d09f:	50                   	push   eax
c000d0a0:	e8 a3 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0a5:	5a                   	pop    edx
c000d0a6:	5a                   	pop    edx
c000d0a7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0ad:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000d0b2:	53                   	push   ebx
c000d0b3:	99                   	cdq    
c000d0b4:	f7 fd                	idiv   ebp
c000d0b6:	99                   	cdq    
c000d0b7:	f7 f9                	idiv   ecx
c000d0b9:	8d 42 30             	lea    eax,[edx+0x30]
c000d0bc:	0f b6 c0             	movzx  eax,al
c000d0bf:	50                   	push   eax
c000d0c0:	e8 83 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0c5:	5d                   	pop    ebp
c000d0c6:	5a                   	pop    edx
c000d0c7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0cd:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000d0d2:	53                   	push   ebx
c000d0d3:	99                   	cdq    
c000d0d4:	f7 ff                	idiv   edi
c000d0d6:	99                   	cdq    
c000d0d7:	f7 f9                	idiv   ecx
c000d0d9:	8d 42 30             	lea    eax,[edx+0x30]
c000d0dc:	0f b6 c0             	movzx  eax,al
c000d0df:	50                   	push   eax
c000d0e0:	e8 63 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0e5:	5f                   	pop    edi
c000d0e6:	5d                   	pop    ebp
c000d0e7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0ed:	53                   	push   ebx
c000d0ee:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000d0f3:	99                   	cdq    
c000d0f4:	f7 fe                	idiv   esi
c000d0f6:	99                   	cdq    
c000d0f7:	f7 f9                	idiv   ecx
c000d0f9:	8d 42 30             	lea    eax,[edx+0x30]
c000d0fc:	0f b6 c0             	movzx  eax,al
c000d0ff:	50                   	push   eax
c000d100:	e8 43 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d105:	5a                   	pop    edx
c000d106:	5e                   	pop    esi
c000d107:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d10d:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000d112:	53                   	push   ebx
c000d113:	99                   	cdq    
c000d114:	f7 f9                	idiv   ecx
c000d116:	99                   	cdq    
c000d117:	f7 f9                	idiv   ecx
c000d119:	8d 42 30             	lea    eax,[edx+0x30]
c000d11c:	0f b6 c0             	movzx  eax,al
c000d11f:	50                   	push   eax
c000d120:	e8 23 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d125:	5f                   	pop    edi
c000d126:	5d                   	pop    ebp
c000d127:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d12d:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000d132:	53                   	push   ebx
c000d133:	99                   	cdq    
c000d134:	f7 f9                	idiv   ecx
c000d136:	83 c2 30             	add    edx,0x30
c000d139:	0f b6 d2             	movzx  edx,dl
c000d13c:	52                   	push   edx
c000d13d:	e8 06 fd ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d142:	5a                   	pop    edx
c000d143:	59                   	pop    ecx
c000d144:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d14a:	5b                   	pop    ebx
c000d14b:	5e                   	pop    esi
c000d14c:	5f                   	pop    edi
c000d14d:	5d                   	pop    ebp
c000d14e:	c3                   	ret    
c000d14f:	90                   	nop

c000d150 <VgaText::updateTitle()>:
c000d150:	53                   	push   ebx
c000d151:	31 c0                	xor    eax,eax
c000d153:	83 ec 58             	sub    esp,0x58
c000d156:	89 e1                	mov    ecx,esp
c000d158:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d15c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d160:	40                   	inc    eax
c000d161:	83 f8 50             	cmp    eax,0x50
c000d164:	75 f6                	jne    c000d15c <VgaText::updateTitle()+0xc>
c000d166:	31 c0                	xor    eax,eax
c000d168:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d16f:	84 db                	test   bl,bl
c000d171:	74 06                	je     c000d179 <VgaText::updateTitle()+0x29>
c000d173:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d176:	40                   	inc    eax
c000d177:	eb ef                	jmp    c000d168 <VgaText::updateTitle()+0x18>
c000d179:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d17f:	85 c0                	test   eax,eax
c000d181:	74 09                	je     c000d18c <VgaText::updateTitle()+0x3c>
c000d183:	53                   	push   ebx
c000d184:	53                   	push   ebx
c000d185:	51                   	push   ecx
c000d186:	52                   	push   edx
c000d187:	ff d0                	call   eax
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	e8 59 fe ff ff       	call   c000cfea <VgaText::updateDiskUsage()>
c000d191:	83 c4 58             	add    esp,0x58
c000d194:	5b                   	pop    ebx
c000d195:	c3                   	ret    

c000d196 <VgaText::setTitleTextColour(VgaColour)>:
c000d196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d19e:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1a4:	eb aa                	jmp    c000d150 <VgaText::updateTitle()>

c000d1a6 <VgaText::setTitleColour(VgaColour)>:
c000d1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ae:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1b4:	eb 9a                	jmp    c000d150 <VgaText::updateTitle()>

c000d1b6 <VgaText::setTitle(char*)>:
c000d1b6:	53                   	push   ebx
c000d1b7:	83 ec 10             	sub    esp,0x10
c000d1ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1c8:	50                   	push   eax
c000d1c9:	e8 94 35 ff ff       	call   c0000762 <strcpy>
c000d1ce:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1d2:	83 c4 18             	add    esp,0x18
c000d1d5:	5b                   	pop    ebx
c000d1d6:	e9 75 ff ff ff       	jmp    c000d150 <VgaText::updateTitle()>
c000d1db:	90                   	nop

c000d1dc <VgaText::decrementCursor(bool)>:
c000d1dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1e4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1ea:	85 c0                	test   eax,eax
c000d1ec:	74 07                	je     c000d1f5 <VgaText::decrementCursor(bool)+0x19>
c000d1ee:	48                   	dec    eax
c000d1ef:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1f5:	84 c9                	test   cl,cl
c000d1f7:	74 09                	je     c000d202 <VgaText::decrementCursor(bool)+0x26>
c000d1f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1fd:	e9 64 fa ff ff       	jmp    c000cc66 <VgaText::updateCursor()>
c000d202:	c3                   	ret    
c000d203:	90                   	nop

c000d204 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d204:	53                   	push   ebx
c000d205:	83 ec 08             	sub    esp,0x8
c000d208:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d20c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d210:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d214:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d218:	3c 07                	cmp    al,0x7
c000d21a:	75 2a                	jne    c000d246 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d21c:	a1 cc 48 02 c0       	mov    eax,ds:0xc00248cc
c000d221:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d229:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d231:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d23d:	83 c4 08             	add    esp,0x8
c000d240:	5b                   	pop    ebx
c000d241:	e9 c0 2d 00 00       	jmp    c0010006 <Buzzer::beep(int, int, bool)>
c000d246:	3c 0d                	cmp    al,0xd
c000d248:	75 0c                	jne    c000d256 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d24a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d254:	eb 3b                	jmp    c000d291 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d256:	3c 0a                	cmp    al,0xa
c000d258:	75 40                	jne    c000d29a <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d25a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d260:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d26a:	8d 50 01             	lea    edx,[eax+0x1]
c000d26d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d273:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d279:	75 12                	jne    c000d28d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d27b:	83 ec 0c             	sub    esp,0xc
c000d27e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d284:	53                   	push   ebx
c000d285:	e8 2a fb ff ff       	call   c000cdb4 <VgaText::scrollScreen()>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d291:	83 c4 08             	add    esp,0x8
c000d294:	5b                   	pop    ebx
c000d295:	e9 cc f9 ff ff       	jmp    c000cc66 <VgaText::updateCursor()>
c000d29a:	3c 08                	cmp    al,0x8
c000d29c:	75 31                	jne    c000d2cf <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d29e:	50                   	push   eax
c000d29f:	50                   	push   eax
c000d2a0:	6a 01                	push   0x1
c000d2a2:	53                   	push   ebx
c000d2a3:	e8 34 ff ff ff       	call   c000d1dc <VgaText::decrementCursor(bool)>
c000d2a8:	5a                   	pop    edx
c000d2a9:	59                   	pop    ecx
c000d2aa:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2b0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2b6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2bc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2c2:	6a 20                	push   0x20
c000d2c4:	53                   	push   ebx
c000d2c5:	e8 90 fb ff ff       	call   c000ce5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2ca:	83 c4 28             	add    esp,0x28
c000d2cd:	5b                   	pop    ebx
c000d2ce:	c3                   	ret    
c000d2cf:	83 ec 08             	sub    esp,0x8
c000d2d2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2de:	0f be c0             	movsx  eax,al
c000d2e1:	51                   	push   ecx
c000d2e2:	52                   	push   edx
c000d2e3:	50                   	push   eax
c000d2e4:	53                   	push   ebx
c000d2e5:	e8 70 fb ff ff       	call   c000ce5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2ea:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2ee:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2f6:	83 c4 28             	add    esp,0x28
c000d2f9:	5b                   	pop    ebx
c000d2fa:	e9 29 fc ff ff       	jmp    c000cf28 <VgaText::incrementCursor(bool)>
c000d2ff:	90                   	nop

c000d300 <VgaText::isShowingCursor()>:
c000d300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d304:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d30a:	c3                   	ret    
c000d30b:	90                   	nop

c000d30c <VgaText::isBlinkDisabled()>:
c000d30c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d310:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d316:	83 f0 01             	xor    eax,0x1
c000d319:	c3                   	ret    

c000d31a <VgaText::setCursorHeight(int)>:
c000d31a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d322:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d328:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d333:	e9 48 f9 ff ff       	jmp    c000cc80 <VgaText::showCursor(bool)>

c000d338 <VgaText::getCursorHeight()>:
c000d338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d33c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d342:	c3                   	ret    

c000d343 <setActiveTerminal(VgaText*)>:
c000d343:	53                   	push   ebx
c000d344:	83 ec 08             	sub    esp,0x8
c000d347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d34b:	85 db                	test   ebx,ebx
c000d34d:	75 11                	jne    c000d360 <setActiveTerminal(VgaText*)+0x1d>
c000d34f:	c7 44 24 10 20 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021420
c000d357:	83 c4 08             	add    esp,0x8
c000d35a:	5b                   	pop    ebx
c000d35b:	e9 c8 86 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>
c000d360:	50                   	push   eax
c000d361:	50                   	push   eax
c000d362:	53                   	push   ebx
c000d363:	68 2e 14 02 c0       	push   0xc002142e
c000d368:	e8 a6 1e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000d36d:	a1 24 48 02 c0       	mov    eax,ds:0xc0024824
c000d372:	83 c4 10             	add    esp,0x10
c000d375:	85 c0                	test   eax,eax
c000d377:	74 0c                	je     c000d385 <setActiveTerminal(VgaText*)+0x42>
c000d379:	83 ec 0c             	sub    esp,0xc
c000d37c:	50                   	push   eax
c000d37d:	e8 e4 f8 ff ff       	call   c000cc66 <VgaText::updateCursor()>
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	51                   	push   ecx
c000d386:	89 1d 24 48 02 c0    	mov    DWORD PTR ds:0xc0024824,ebx
c000d38c:	51                   	push   ecx
c000d38d:	53                   	push   ebx
c000d38e:	68 46 14 02 c0       	push   0xc0021446
c000d393:	e8 7b 1e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000d398:	83 c4 0c             	add    esp,0xc
c000d39b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3a1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3a7:	53                   	push   ebx
c000d3a8:	e8 25 fb ff ff       	call   c000ced2 <VgaText::setCursor(int, int)>
c000d3ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3b0:	e8 57 ff ff ff       	call   c000d30c <VgaText::isBlinkDisabled()>
c000d3b5:	5a                   	pop    edx
c000d3b6:	59                   	pop    ecx
c000d3b7:	0f b6 c0             	movzx  eax,al
c000d3ba:	50                   	push   eax
c000d3bb:	53                   	push   ebx
c000d3bc:	e8 cf f8 ff ff       	call   c000cc90 <VgaText::disableBlink(bool)>
c000d3c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c4:	e8 6f ff ff ff       	call   c000d338 <VgaText::getCursorHeight()>
c000d3c9:	5a                   	pop    edx
c000d3ca:	59                   	pop    ecx
c000d3cb:	50                   	push   eax
c000d3cc:	53                   	push   ebx
c000d3cd:	e8 48 ff ff ff       	call   c000d31a <VgaText::setCursorHeight(int)>
c000d3d2:	83 c4 10             	add    esp,0x10
c000d3d5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3dc:	75 0a                	jne    c000d3e8 <setActiveTerminal(VgaText*)+0xa5>
c000d3de:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3ec:	83 c4 08             	add    esp,0x8
c000d3ef:	5b                   	pop    ebx
c000d3f0:	e9 1d f8 ff ff       	jmp    c000cc12 <VgaText::load()>

c000d3f5 <doTerminalCycle()>:
c000d3f5:	83 ec 18             	sub    esp,0x18
c000d3f8:	a1 20 48 02 c0       	mov    eax,ds:0xc0024820
c000d3fd:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d403:	50                   	push   eax
c000d404:	a3 20 48 02 c0       	mov    ds:0xc0024820,eax
c000d409:	e8 35 ff ff ff       	call   c000d343 <setActiveTerminal(VgaText*)>
c000d40e:	83 c4 1c             	add    esp,0x1c
c000d411:	c3                   	ret    

c000d412 <VgaText::doUpdate()>:
c000d412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d416:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d41c:	85 c0                	test   eax,eax
c000d41e:	74 02                	je     c000d422 <VgaText::doUpdate()+0x10>
c000d420:	ff e0                	jmp    eax
c000d422:	c3                   	ret    
c000d423:	90                   	nop

c000d424 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d424:	55                   	push   ebp
c000d425:	57                   	push   edi
c000d426:	56                   	push   esi
c000d427:	53                   	push   ebx
c000d428:	83 ec 1c             	sub    esp,0x1c
c000d42b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d42f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d434:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d43b:	50                   	push   eax
c000d43c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d441:	50                   	push   eax
c000d442:	e8 5b f9 ff ff       	call   c000cda2 <VgaText::combineColours(unsigned char, unsigned char)>
c000d447:	59                   	pop    ecx
c000d448:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d44b:	5b                   	pop    ebx
c000d44c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d454:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d45a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d45e:	0f b7 db             	movzx  ebx,bx
c000d461:	01 db                	add    ebx,ebx
c000d463:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d467:	01 fb                	add    ebx,edi
c000d469:	31 c0                	xor    eax,eax
c000d46b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d46e:	84 c9                	test   cl,cl
c000d470:	0f 84 3d 01 00 00    	je     c000d5b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d476:	80 f9 0d             	cmp    cl,0xd
c000d479:	75 0f                	jne    c000d48a <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d47b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d485:	e9 23 01 00 00       	jmp    c000d5ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d48a:	80 f9 0a             	cmp    cl,0xa
c000d48d:	75 5b                	jne    c000d4ea <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d48f:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d495:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d49f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4a2:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4a8:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4ae:	75 12                	jne    c000d4c2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4b0:	83 ec 0c             	sub    esp,0xc
c000d4b3:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4b9:	55                   	push   ebp
c000d4ba:	e8 f5 f8 ff ff       	call   c000cdb4 <VgaText::scrollScreen()>
c000d4bf:	83 c4 10             	add    esp,0x10
c000d4c2:	83 ec 0c             	sub    esp,0xc
c000d4c5:	55                   	push   ebp
c000d4c6:	e8 9b f7 ff ff       	call   c000cc66 <VgaText::updateCursor()>
c000d4cb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4d3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4d9:	83 c4 10             	add    esp,0x10
c000d4dc:	0f b7 db             	movzx  ebx,bx
c000d4df:	01 db                	add    ebx,ebx
c000d4e1:	31 c0                	xor    eax,eax
c000d4e3:	01 fb                	add    ebx,edi
c000d4e5:	e9 c3 00 00 00       	jmp    c000d5ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4ea:	80 f9 08             	cmp    cl,0x8
c000d4ed:	75 4e                	jne    c000d53d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4f3:	50                   	push   eax
c000d4f4:	50                   	push   eax
c000d4f5:	6a 01                	push   0x1
c000d4f7:	55                   	push   ebp
c000d4f8:	e8 df fc ff ff       	call   c000d1dc <VgaText::decrementCursor(bool)>
c000d4fd:	58                   	pop    eax
c000d4fe:	5a                   	pop    edx
c000d4ff:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d505:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d50b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d511:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d517:	6a 20                	push   0x20
c000d519:	55                   	push   ebp
c000d51a:	e8 3b f9 ff ff       	call   c000ce5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d51f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d527:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d52d:	83 c4 20             	add    esp,0x20
c000d530:	0f b7 db             	movzx  ebx,bx
c000d533:	01 db                	add    ebx,ebx
c000d535:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d539:	01 fb                	add    ebx,edi
c000d53b:	eb 70                	jmp    c000d5ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d53d:	50                   	push   eax
c000d53e:	50                   	push   eax
c000d53f:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d544:	50                   	push   eax
c000d545:	51                   	push   ecx
c000d546:	e8 fd f8 ff ff       	call   c000ce48 <VgaText::combineCharAndColour(char, unsigned char)>
c000d54b:	66 89 03             	mov    WORD PTR [ebx],ax
c000d54e:	83 c4 10             	add    esp,0x10
c000d551:	39 2d 24 48 02 c0    	cmp    DWORD PTR ds:0xc0024824,ebp
c000d557:	75 2a                	jne    c000d583 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d559:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d55f:	85 c0                	test   eax,eax
c000d561:	74 20                	je     c000d583 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d563:	52                   	push   edx
c000d564:	52                   	push   edx
c000d565:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d56b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d571:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d575:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d579:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d57c:	51                   	push   ecx
c000d57d:	55                   	push   ebp
c000d57e:	ff d0                	call   eax
c000d580:	83 c4 20             	add    esp,0x20
c000d583:	50                   	push   eax
c000d584:	83 c3 02             	add    ebx,0x2
c000d587:	50                   	push   eax
c000d588:	6a 00                	push   0x0
c000d58a:	55                   	push   ebp
c000d58b:	e8 98 f9 ff ff       	call   c000cf28 <VgaText::incrementCursor(bool)>
c000d590:	83 c4 10             	add    esp,0x10
c000d593:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d59a:	75 0f                	jne    c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d59c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5a4:	0f b7 db             	movzx  ebx,bx
c000d5a7:	01 db                	add    ebx,ebx
c000d5a9:	01 fb                	add    ebx,edi
c000d5ab:	b0 01                	mov    al,0x1
c000d5ad:	46                   	inc    esi
c000d5ae:	e9 b8 fe ff ff       	jmp    c000d46b <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5b3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5b7:	83 ec 0c             	sub    esp,0xc
c000d5ba:	55                   	push   ebp
c000d5bb:	e8 a6 f6 ff ff       	call   c000cc66 <VgaText::updateCursor()>
c000d5c0:	83 c4 10             	add    esp,0x10
c000d5c3:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5c7:	84 c0                	test   al,al
c000d5c9:	74 0c                	je     c000d5d7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5cb:	83 ec 0c             	sub    esp,0xc
c000d5ce:	55                   	push   ebp
c000d5cf:	e8 3e fe ff ff       	call   c000d412 <VgaText::doUpdate()>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5de:	83 c4 1c             	add    esp,0x1c
c000d5e1:	5b                   	pop    ebx
c000d5e2:	5e                   	pop    esi
c000d5e3:	5f                   	pop    edi
c000d5e4:	5d                   	pop    ebp
c000d5e5:	c3                   	ret    

c000d5e6 <VgaText::clearScreen()>:
c000d5e6:	57                   	push   edi
c000d5e7:	56                   	push   esi
c000d5e8:	31 f6                	xor    esi,esi
c000d5ea:	53                   	push   ebx
c000d5eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5ef:	52                   	push   edx
c000d5f0:	6a 00                	push   0x0
c000d5f2:	6a 00                	push   0x0
c000d5f4:	53                   	push   ebx
c000d5f5:	e8 d8 f8 ff ff       	call   c000ced2 <VgaText::setCursor(int, int)>
c000d5fa:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d60a:	7e 26                	jle    c000d632 <VgaText::clearScreen()+0x4c>
c000d60c:	31 ff                	xor    edi,edi
c000d60e:	50                   	push   eax
c000d60f:	50                   	push   eax
c000d610:	56                   	push   esi
c000d611:	57                   	push   edi
c000d612:	47                   	inc    edi
c000d613:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d619:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d61f:	6a 20                	push   0x20
c000d621:	53                   	push   ebx
c000d622:	e8 33 f8 ff ff       	call   c000ce5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d627:	83 c4 20             	add    esp,0x20
c000d62a:	83 ff 50             	cmp    edi,0x50
c000d62d:	75 df                	jne    c000d60e <VgaText::clearScreen()+0x28>
c000d62f:	46                   	inc    esi
c000d630:	eb d2                	jmp    c000d604 <VgaText::clearScreen()+0x1e>
c000d632:	83 ec 0c             	sub    esp,0xc
c000d635:	53                   	push   ebx
c000d636:	e8 d7 fd ff ff       	call   c000d412 <VgaText::doUpdate()>
c000d63b:	83 c4 10             	add    esp,0x10
c000d63e:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d645:	5b                   	pop    ebx
c000d646:	5e                   	pop    esi
c000d647:	5f                   	pop    edi
c000d648:	c3                   	ret    
c000d649:	90                   	nop

c000d64a <VgaText::putchar(char)>:
c000d64a:	56                   	push   esi
c000d64b:	53                   	push   ebx
c000d64c:	83 ec 14             	sub    esp,0x14
c000d64f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d653:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d657:	3c 5b                	cmp    al,0x5b
c000d659:	75 21                	jne    c000d67c <VgaText::putchar(char)+0x32>
c000d65b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d662:	74 28                	je     c000d68c <VgaText::putchar(char)+0x42>
c000d664:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d66d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d677:	e9 e2 00 00 00       	jmp    c000d75e <VgaText::putchar(char)+0x114>
c000d67c:	3c 1b                	cmp    al,0x1b
c000d67e:	75 0c                	jne    c000d68c <VgaText::putchar(char)+0x42>
c000d680:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d687:	e9 d2 00 00 00       	jmp    c000d75e <VgaText::putchar(char)+0x114>
c000d68c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d692:	84 c9                	test   cl,cl
c000d694:	0f 84 ab 00 00 00    	je     c000d745 <VgaText::putchar(char)+0xfb>
c000d69a:	8d 50 c0             	lea    edx,[eax-0x40]
c000d69d:	80 fa 3e             	cmp    dl,0x3e
c000d6a0:	0f 87 82 00 00 00    	ja     c000d728 <VgaText::putchar(char)+0xde>
c000d6a6:	3c 6d                	cmp    al,0x6d
c000d6a8:	75 4d                	jne    c000d6f7 <VgaText::putchar(char)+0xad>
c000d6aa:	31 f6                	xor    esi,esi
c000d6ac:	31 d2                	xor    edx,edx
c000d6ae:	31 c0                	xor    eax,eax
c000d6b0:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6b6:	7e 30                	jle    c000d6e8 <VgaText::putchar(char)+0x9e>
c000d6b8:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6c0:	80 fa 3b             	cmp    dl,0x3b
c000d6c3:	75 17                	jne    c000d6dc <VgaText::putchar(char)+0x92>
c000d6c5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6c9:	50                   	push   eax
c000d6ca:	53                   	push   ebx
c000d6cb:	e8 fa f5 ff ff       	call   c000ccca <VgaText::doANSI_SGR(int)>
c000d6d0:	59                   	pop    ecx
c000d6d1:	31 d2                	xor    edx,edx
c000d6d3:	58                   	pop    eax
c000d6d4:	31 c0                	xor    eax,eax
c000d6d6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6da:	eb 09                	jmp    c000d6e5 <VgaText::putchar(char)+0x9b>
c000d6dc:	6b c0 0a             	imul   eax,eax,0xa
c000d6df:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6e3:	88 ca                	mov    dl,cl
c000d6e5:	46                   	inc    esi
c000d6e6:	eb c8                	jmp    c000d6b0 <VgaText::putchar(char)+0x66>
c000d6e8:	84 d2                	test   dl,dl
c000d6ea:	74 31                	je     c000d71d <VgaText::putchar(char)+0xd3>
c000d6ec:	50                   	push   eax
c000d6ed:	53                   	push   ebx
c000d6ee:	e8 d7 f5 ff ff       	call   c000ccca <VgaText::doANSI_SGR(int)>
c000d6f3:	58                   	pop    eax
c000d6f4:	5a                   	pop    edx
c000d6f5:	eb 26                	jmp    c000d71d <VgaText::putchar(char)+0xd3>
c000d6f7:	3c 4a                	cmp    al,0x4a
c000d6f9:	75 22                	jne    c000d71d <VgaText::putchar(char)+0xd3>
c000d6fb:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d702:	75 19                	jne    c000d71d <VgaText::putchar(char)+0xd3>
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	53                   	push   ebx
c000d708:	e8 d9 fe ff ff       	call   c000d5e6 <VgaText::clearScreen()>
c000d70d:	83 c4 0c             	add    esp,0xc
c000d710:	6a 00                	push   0x0
c000d712:	6a 00                	push   0x0
c000d714:	53                   	push   ebx
c000d715:	e8 b8 f7 ff ff       	call   c000ced2 <VgaText::setCursor(int, int)>
c000d71a:	83 c4 10             	add    esp,0x10
c000d71d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d726:	eb 36                	jmp    c000d75e <VgaText::putchar(char)+0x114>
c000d728:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d72e:	83 fa 0e             	cmp    edx,0xe
c000d731:	7f 2b                	jg     c000d75e <VgaText::putchar(char)+0x114>
c000d733:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d736:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d73c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d743:	eb 19                	jmp    c000d75e <VgaText::putchar(char)+0x114>
c000d745:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d74b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d751:	0f be c0             	movsx  eax,al
c000d754:	50                   	push   eax
c000d755:	53                   	push   ebx
c000d756:	e8 a9 fa ff ff       	call   c000d204 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d75b:	83 c4 10             	add    esp,0x10
c000d75e:	83 c4 14             	add    esp,0x14
c000d761:	5b                   	pop    ebx
c000d762:	5e                   	pop    esi
c000d763:	c3                   	ret    

c000d764 <VgaText::puts(char const*)>:
c000d764:	53                   	push   ebx
c000d765:	83 ec 08             	sub    esp,0x8
c000d768:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d76c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d76f:	84 c0                	test   al,al
c000d771:	74 12                	je     c000d785 <VgaText::puts(char const*)+0x21>
c000d773:	51                   	push   ecx
c000d774:	43                   	inc    ebx
c000d775:	51                   	push   ecx
c000d776:	50                   	push   eax
c000d777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77b:	e8 ca fe ff ff       	call   c000d64a <VgaText::putchar(char)>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	eb e7                	jmp    c000d76c <VgaText::puts(char const*)+0x8>
c000d785:	83 c4 08             	add    esp,0x8
c000d788:	5b                   	pop    ebx
c000d789:	c3                   	ret    

c000d78a <VgaText::putx(unsigned int)>:
c000d78a:	57                   	push   edi
c000d78b:	b9 11 00 00 00       	mov    ecx,0x11
c000d790:	56                   	push   esi
c000d791:	be 62 14 02 c0       	mov    esi,0xc0021462
c000d796:	53                   	push   ebx
c000d797:	83 ec 20             	sub    esp,0x20
c000d79a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d79e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7a2:	fc                   	cld    
c000d7a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7a5:	be 08 00 00 00       	mov    esi,0x8
c000d7aa:	50                   	push   eax
c000d7ab:	50                   	push   eax
c000d7ac:	89 d8                	mov    eax,ebx
c000d7ae:	c1 e8 1c             	shr    eax,0x1c
c000d7b1:	c1 e3 04             	shl    ebx,0x4
c000d7b4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7b9:	50                   	push   eax
c000d7ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7be:	e8 87 fe ff ff       	call   c000d64a <VgaText::putchar(char)>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	4e                   	dec    esi
c000d7c7:	75 e1                	jne    c000d7aa <VgaText::putx(unsigned int)+0x20>
c000d7c9:	83 c4 20             	add    esp,0x20
c000d7cc:	5b                   	pop    ebx
c000d7cd:	5e                   	pop    esi
c000d7ce:	5f                   	pop    edi
c000d7cf:	c3                   	ret    

c000d7d0 <VgaText::VgaText(char const*)>:
c000d7d0:	57                   	push   edi
c000d7d1:	56                   	push   esi
c000d7d2:	53                   	push   ebx
c000d7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d7:	83 ec 08             	sub    esp,0x8
c000d7da:	6a 00                	push   0x0
c000d7dc:	50                   	push   eax
c000d7dd:	e8 e0 05 00 00       	call   c000ddc2 <UnixFile::UnixFile(int)>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ee:	89 10                	mov    DWORD PTR [eax],edx
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d802:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d810:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d842:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d858:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d85e:	bb 00 48 02 c0       	mov    ebx,0xc0024800
c000d863:	b8 08 00 00 00       	mov    eax,0x8
c000d868:	fc                   	cld    
c000d869:	89 d7                	mov    edi,edx
c000d86b:	89 de                	mov    esi,ebx
c000d86d:	89 c1                	mov    ecx,eax
c000d86f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d875:	05 1e 10 00 00       	add    eax,0x101e
c000d87a:	83 ec 08             	sub    esp,0x8
c000d87d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d881:	50                   	push   eax
c000d882:	e8 db 2e ff ff       	call   c0000762 <strcpy>
c000d887:	83 c4 10             	add    esp,0x10
c000d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89c:	83 c0 0c             	add    eax,0xc
c000d89f:	83 ec 04             	sub    esp,0x4
c000d8a2:	68 00 0f 00 00       	push   0xf00
c000d8a7:	6a 00                	push   0x0
c000d8a9:	50                   	push   eax
c000d8aa:	e8 14 2e ff ff       	call   c00006c3 <memset>
c000d8af:	83 c4 10             	add    esp,0x10
c000d8b2:	83 ec 04             	sub    esp,0x4
c000d8b5:	6a 00                	push   0x0
c000d8b7:	6a 07                	push   0x7
c000d8b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8bd:	e8 c0 f4 ff ff       	call   c000cd82 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	83 ec 08             	sub    esp,0x8
c000d8c8:	6a 02                	push   0x2
c000d8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ce:	e8 47 fa ff ff       	call   c000d31a <VgaText::setCursorHeight(int)>
c000d8d3:	83 c4 10             	add    esp,0x10
c000d8d6:	83 ec 04             	sub    esp,0x4
c000d8d9:	6a 00                	push   0x0
c000d8db:	6a 00                	push   0x0
c000d8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e1:	e8 ec f5 ff ff       	call   c000ced2 <VgaText::setCursor(int, int)>
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	83 ec 08             	sub    esp,0x8
c000d8ec:	6a 01                	push   0x1
c000d8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f2:	e8 89 f3 ff ff       	call   c000cc80 <VgaText::showCursor(bool)>
c000d8f7:	83 c4 10             	add    esp,0x10
c000d8fa:	83 ec 08             	sub    esp,0x8
c000d8fd:	6a 01                	push   0x1
c000d8ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d903:	e8 88 f3 ff ff       	call   c000cc90 <VgaText::disableBlink(bool)>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d912:	e8 cf fc ff ff       	call   c000d5e6 <VgaText::clearScreen()>
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d929:	05 9e 10 00 00       	add    eax,0x109e
c000d92e:	83 ec 04             	sub    esp,0x4
c000d931:	68 96 00 00 00       	push   0x96
c000d936:	6a 00                	push   0x0
c000d938:	50                   	push   eax
c000d939:	e8 85 2d ff ff       	call   c00006c3 <memset>
c000d93e:	83 c4 10             	add    esp,0x10
c000d941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d945:	05 34 11 00 00       	add    eax,0x1134
c000d94a:	83 ec 04             	sub    esp,0x4
c000d94d:	68 2c 01 00 00       	push   0x12c
c000d952:	6a 00                	push   0x0
c000d954:	50                   	push   eax
c000d955:	e8 69 2d ff ff       	call   c00006c3 <memset>
c000d95a:	83 c4 10             	add    esp,0x10
c000d95d:	90                   	nop
c000d95e:	5b                   	pop    ebx
c000d95f:	5e                   	pop    esi
c000d960:	5f                   	pop    edi
c000d961:	c3                   	ret    

c000d962 <VgaText::receiveKey(unsigned char)>:
c000d962:	55                   	push   ebp
c000d963:	57                   	push   edi
c000d964:	56                   	push   esi
c000d965:	53                   	push   ebx
c000d966:	83 ec 1c             	sub    esp,0x1c
c000d969:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d96d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d971:	84 db                	test   bl,bl
c000d973:	0f 84 c9 00 00 00    	je     c000da42 <VgaText::receiveKey(unsigned char)+0xe0>
c000d979:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d97f:	80 fb 08             	cmp    bl,0x8
c000d982:	75 2c                	jne    c000d9b0 <VgaText::receiveKey(unsigned char)+0x4e>
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	57                   	push   edi
c000d988:	e8 53 2d ff ff       	call   c00006e0 <strlen>
c000d98d:	83 c4 10             	add    esp,0x10
c000d990:	85 c0                	test   eax,eax
c000d992:	74 41                	je     c000d9d5 <VgaText::receiveKey(unsigned char)+0x73>
c000d994:	50                   	push   eax
c000d995:	50                   	push   eax
c000d996:	6a 08                	push   0x8
c000d998:	56                   	push   esi
c000d999:	e8 ac fc ff ff       	call   c000d64a <VgaText::putchar(char)>
c000d99e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9a1:	e8 3a 2d ff ff       	call   c00006e0 <strlen>
c000d9a6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9ae:	eb 22                	jmp    c000d9d2 <VgaText::receiveKey(unsigned char)+0x70>
c000d9b0:	52                   	push   edx
c000d9b1:	52                   	push   edx
c000d9b2:	0f be c3             	movsx  eax,bl
c000d9b5:	50                   	push   eax
c000d9b6:	56                   	push   esi
c000d9b7:	e8 8e fc ff ff       	call   c000d64a <VgaText::putchar(char)>
c000d9bc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9c5:	59                   	pop    ecx
c000d9c6:	5d                   	pop    ebp
c000d9c7:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9cb:	50                   	push   eax
c000d9cc:	57                   	push   edi
c000d9cd:	e8 47 2e ff ff       	call   c0000819 <strcat>
c000d9d2:	83 c4 10             	add    esp,0x10
c000d9d5:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9dc:	75 05                	jne    c000d9e3 <VgaText::receiveKey(unsigned char)+0x81>
c000d9de:	80 fb 0a             	cmp    bl,0xa
c000d9e1:	75 53                	jne    c000da36 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9e3:	83 ec 0c             	sub    esp,0xc
c000d9e6:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9ec:	53                   	push   ebx
c000d9ed:	e8 ee 2c ff ff       	call   c00006e0 <strlen>
c000d9f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9f5:	89 c5                	mov    ebp,eax
c000d9f7:	e8 e4 2c ff ff       	call   c00006e0 <strlen>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da03:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da08:	76 10                	jbe    c000da1a <VgaText::receiveKey(unsigned char)+0xb8>
c000da0a:	83 ec 0c             	sub    esp,0xc
c000da0d:	68 73 14 02 c0       	push   0xc0021473
c000da12:	e8 11 80 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000da17:	83 c4 10             	add    esp,0x10
c000da1a:	50                   	push   eax
c000da1b:	50                   	push   eax
c000da1c:	57                   	push   edi
c000da1d:	53                   	push   ebx
c000da1e:	e8 f6 2d ff ff       	call   c0000819 <strcat>
c000da23:	83 c4 0c             	add    esp,0xc
c000da26:	68 96 00 00 00       	push   0x96
c000da2b:	6a 00                	push   0x0
c000da2d:	57                   	push   edi
c000da2e:	e8 90 2c ff ff       	call   c00006c3 <memset>
c000da33:	83 c4 10             	add    esp,0x10
c000da36:	83 ec 0c             	sub    esp,0xc
c000da39:	56                   	push   esi
c000da3a:	e8 d3 f9 ff ff       	call   c000d412 <VgaText::doUpdate()>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	83 c4 1c             	add    esp,0x1c
c000da45:	5b                   	pop    ebx
c000da46:	5e                   	pop    esi
c000da47:	5f                   	pop    edi
c000da48:	5d                   	pop    ebp
c000da49:	c3                   	ret    

c000da4a <VgaText::write(unsigned long long, void*, int*)>:
c000da4a:	55                   	push   ebp
c000da4b:	57                   	push   edi
c000da4c:	56                   	push   esi
c000da4d:	53                   	push   ebx
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da55:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da59:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da5d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da64:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da67:	39 eb                	cmp    ebx,ebp
c000da69:	74 13                	je     c000da7e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da6b:	50                   	push   eax
c000da6c:	43                   	inc    ebx
c000da6d:	50                   	push   eax
c000da6e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da72:	50                   	push   eax
c000da73:	56                   	push   esi
c000da74:	e8 d1 fb ff ff       	call   c000d64a <VgaText::putchar(char)>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	eb e9                	jmp    c000da67 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da7e:	83 ec 0c             	sub    esp,0xc
c000da81:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da88:	56                   	push   esi
c000da89:	e8 84 f9 ff ff       	call   c000d412 <VgaText::doUpdate()>
c000da8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da92:	89 38                	mov    DWORD PTR [eax],edi
c000da94:	83 c4 1c             	add    esp,0x1c
c000da97:	31 c0                	xor    eax,eax
c000da99:	5b                   	pop    ebx
c000da9a:	5e                   	pop    esi
c000da9b:	5f                   	pop    edi
c000da9c:	5d                   	pop    ebp
c000da9d:	c3                   	ret    

c000da9e <newTerminal(char*)>:
c000da9e:	83 ec 28             	sub    esp,0x28
c000daa1:	68 60 12 00 00       	push   0x1260
c000daa6:	e8 33 16 00 00       	call   c000f0de <operator new(unsigned long)>
c000daab:	5a                   	pop    edx
c000daac:	59                   	pop    ecx
c000daad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dab1:	50                   	push   eax
c000dab2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dab6:	e8 15 fd ff ff       	call   c000d7d0 <VgaText::VgaText(char const*)>
c000dabb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dabf:	83 c4 2c             	add    esp,0x2c
c000dac2:	c3                   	ret    
c000dac3:	90                   	nop

c000dac4 <TSS::TSS()>:
c000dac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dacf:	90                   	nop
c000dad0:	c3                   	ret    
c000dad1:	90                   	nop

c000dad2 <TSS::setESP(unsigned long)>:
c000dad2:	55                   	push   ebp
c000dad3:	89 e5                	mov    ebp,esp
c000dad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dadb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dade:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dae1:	90                   	nop
c000dae2:	5d                   	pop    ebp
c000dae3:	c3                   	ret    

c000dae4 <TSS::flush()>:
c000dae4:	55                   	push   ebp
c000dae5:	89 e5                	mov    ebp,esp
c000dae7:	83 ec 10             	sub    esp,0x10
c000daea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daed:	8b 00                	mov    eax,DWORD PTR [eax]
c000daef:	83 c8 03             	or     eax,0x3
c000daf2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daf6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000dafa:	66 89 d0             	mov    ax,dx
c000dafd:	0f 00 d8             	ltr    ax
c000db00:	90                   	nop
c000db01:	c9                   	leave  
c000db02:	c3                   	ret    
c000db03:	90                   	nop

c000db04 <TSS::setup(unsigned long, unsigned long)>:
c000db04:	55                   	push   ebp
c000db05:	89 e5                	mov    ebp,esp
c000db07:	53                   	push   ebx
c000db08:	83 ec 14             	sub    esp,0x14
c000db0b:	83 ec 0c             	sub    esp,0xc
c000db0e:	6a 68                	push   0x68
c000db10:	e8 cc e4 ff ff       	call   c000bfe1 <malloc>
c000db15:	83 c4 10             	add    esp,0x10
c000db18:	89 c2                	mov    edx,eax
c000db1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db26:	83 ec 04             	sub    esp,0x4
c000db29:	6a 68                	push   0x68
c000db2b:	6a 00                	push   0x0
c000db2d:	50                   	push   eax
c000db2e:	e8 90 2b ff ff       	call   c00006c3 <memset>
c000db33:	83 c4 10             	add    esp,0x10
c000db36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db48:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db60:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6c:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db78:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db84:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db90:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db93:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba8:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb2:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbb5:	e8 0b 1c 01 00       	call   c001f7c5 <CPU::readCR3()>
c000dbba:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc3:	83 ec 08             	sub    esp,0x8
c000dbc6:	50                   	push   eax
c000dbc7:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbca:	50                   	push   eax
c000dbcb:	e8 e8 db ff ff       	call   c000b7b8 <GDTEntry::setBase(unsigned int)>
c000dbd0:	83 c4 10             	add    esp,0x10
c000dbd3:	83 ec 08             	sub    esp,0x8
c000dbd6:	6a 68                	push   0x68
c000dbd8:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbdb:	50                   	push   eax
c000dbdc:	e8 f3 db ff ff       	call   c000b7d4 <GDTEntry::setLimit(unsigned int)>
c000dbe1:	83 c4 10             	add    esp,0x10
c000dbe4:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbe8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbeb:	83 e0 0f             	and    eax,0xf
c000dbee:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbf1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf4:	83 c8 40             	or     eax,0x40
c000dbf7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbfa:	e8 bd 6c 00 00       	call   c00148bc <thisCPU()>
c000dbff:	05 78 01 00 00       	add    eax,0x178
c000dc04:	83 ec 04             	sub    esp,0x4
c000dc07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc0a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc0d:	50                   	push   eax
c000dc0e:	e8 f5 db ff ff       	call   c000b808 <GDT::addEntry(GDTEntry)>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 c2                	mov    edx,eax
c000dc18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc1b:	89 10                	mov    DWORD PTR [eax],edx
c000dc1d:	e8 9a 6c 00 00       	call   c00148bc <thisCPU()>
c000dc22:	05 78 01 00 00       	add    eax,0x178
c000dc27:	83 ec 0c             	sub    esp,0xc
c000dc2a:	50                   	push   eax
c000dc2b:	e8 1c dc ff ff       	call   c000b84c <GDT::flush()>
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc36:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc38:	83 ec 08             	sub    esp,0x8
c000dc3b:	50                   	push   eax
c000dc3c:	68 dc 14 02 c0       	push   0xc00214dc
c000dc41:	e8 cd 15 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000dc46:	83 c4 10             	add    esp,0x10
c000dc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc4e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc51:	c9                   	leave  
c000dc52:	c3                   	ret    
c000dc53:	90                   	nop

c000dc54 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc54:	55                   	push   ebp
c000dc55:	57                   	push   edi
c000dc56:	56                   	push   esi
c000dc57:	53                   	push   ebx
c000dc58:	83 ec 0c             	sub    esp,0xc
c000dc5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc63:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc67:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc6e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc72:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc77:	75 08                	jne    c000dc81 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc79:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc7f:	eb 5e                	jmp    c000dcdf <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc81:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc86:	75 3d                	jne    c000dcc5 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc88:	83 ec 0c             	sub    esp,0xc
c000dc8b:	68 fa 14 02 c0       	push   0xc00214fa
c000dc90:	e8 7e 15 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000dc95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dca3:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca5:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dca9:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcad:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcb1:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcbc:	83 c4 1c             	add    esp,0x1c
c000dcbf:	5b                   	pop    ebx
c000dcc0:	5e                   	pop    esi
c000dcc1:	5f                   	pop    edi
c000dcc2:	5d                   	pop    ebp
c000dcc3:	ff e0                	jmp    eax
c000dcc5:	89 c2                	mov    edx,eax
c000dcc7:	83 e2 fd             	and    edx,0xfffffffd
c000dcca:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dcd0:	74 a7                	je     c000dc79 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcd2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcd7:	83 e0 ef             	and    eax,0xffffffef
c000dcda:	83 f8 08             	cmp    eax,0x8
c000dcdd:	76 9a                	jbe    c000dc79 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcdf:	83 c4 0c             	add    esp,0xc
c000dce2:	31 c0                	xor    eax,eax
c000dce4:	5b                   	pop    ebx
c000dce5:	5e                   	pop    esi
c000dce6:	5f                   	pop    edi
c000dce7:	5d                   	pop    ebp
c000dce8:	c3                   	ret    
c000dce9:	90                   	nop

c000dcea <ReservedFilename::isAtty()>:
c000dcea:	83 ec 18             	sub    esp,0x18
c000dced:	68 07 15 02 c0       	push   0xc0021507
c000dcf2:	e8 1c 15 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000dcf7:	83 c4 10             	add    esp,0x10
c000dcfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcfe:	31 c0                	xor    eax,eax
c000dd00:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd07:	75 12                	jne    c000dd1b <ReservedFilename::isAtty()+0x31>
c000dd09:	83 ec 0c             	sub    esp,0xc
c000dd0c:	68 1d 15 02 c0       	push   0xc002151d
c000dd11:	e8 fd 14 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000dd16:	83 c4 10             	add    esp,0x10
c000dd19:	b0 01                	mov    al,0x1
c000dd1b:	83 c4 0c             	add    esp,0xc
c000dd1e:	c3                   	ret    
c000dd1f:	90                   	nop

c000dd20 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd20:	55                   	push   ebp
c000dd21:	57                   	push   edi
c000dd22:	56                   	push   esi
c000dd23:	53                   	push   ebx
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd2f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd33:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd3e:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd43:	75 08                	jne    c000dd4d <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd45:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd4b:	eb 63                	jmp    c000ddb0 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd4d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd52:	75 3d                	jne    c000dd91 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd54:	83 ec 0c             	sub    esp,0xc
c000dd57:	68 30 15 02 c0       	push   0xc0021530
c000dd5c:	e8 b2 14 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000dd61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd69:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd71:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd75:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd79:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd7d:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd85:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd88:	83 c4 1c             	add    esp,0x1c
c000dd8b:	5b                   	pop    ebx
c000dd8c:	5e                   	pop    esi
c000dd8d:	5f                   	pop    edi
c000dd8e:	5d                   	pop    ebp
c000dd8f:	ff e0                	jmp    eax
c000dd91:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd96:	75 04                	jne    c000dd9c <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dd98:	89 33                	mov    DWORD PTR [ebx],esi
c000dd9a:	eb 14                	jmp    c000ddb0 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd9c:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dda1:	74 a2                	je     c000dd45 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dda3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dda8:	83 e0 ef             	and    eax,0xffffffef
c000ddab:	83 f8 08             	cmp    eax,0x8
c000ddae:	76 95                	jbe    c000dd45 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddb0:	83 c4 0c             	add    esp,0xc
c000ddb3:	31 c0                	xor    eax,eax
c000ddb5:	5b                   	pop    ebx
c000ddb6:	5e                   	pop    esi
c000ddb7:	5f                   	pop    edi
c000ddb8:	5d                   	pop    ebp
c000ddb9:	c3                   	ret    

c000ddba <UnixFile::getFileDescriptor()>:
c000ddba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddc1:	c3                   	ret    

c000ddc2 <UnixFile::UnixFile(int)>:
c000ddc2:	53                   	push   ebx
c000ddc3:	83 ec 18             	sub    esp,0x18
c000ddc6:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000ddcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddcf:	89 10                	mov    DWORD PTR [eax],edx
c000ddd1:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000ddd9:	0f 8f 4d 01 00 00    	jg     c000df2c <UnixFile::UnixFile(int)+0x16a>
c000dddf:	a1 00 3c 02 c0       	mov    eax,ds:0xc0023c00
c000dde4:	8d 50 01             	lea    edx,[eax+0x1]
c000dde7:	89 15 00 3c 02 c0    	mov    DWORD PTR ds:0xc0023c00,edx
c000dded:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddf1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ddf4:	83 ec 08             	sub    esp,0x8
c000ddf7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ddfb:	68 b8 48 02 c0       	push   0xc00248b8
c000de00:	e8 35 1a 01 00       	call   c001f83a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de05:	83 c4 10             	add    esp,0x10
c000de08:	a0 b4 48 02 c0       	mov    al,ds:0xc00248b4
c000de0d:	83 f0 01             	xor    eax,0x1
c000de10:	84 c0                	test   al,al
c000de12:	0f 84 15 01 00 00    	je     c000df2d <UnixFile::UnixFile(int)+0x16b>
c000de18:	c6 05 b4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248b4,0x1
c000de1f:	83 ec 0c             	sub    esp,0xc
c000de22:	6a 0c                	push   0xc
c000de24:	e8 b5 12 00 00       	call   c000f0de <operator new(unsigned long)>
c000de29:	83 c4 10             	add    esp,0x10
c000de2c:	89 c3                	mov    ebx,eax
c000de2e:	83 ec 08             	sub    esp,0x8
c000de31:	68 03 ff ff 0f       	push   0xfffff03
c000de36:	53                   	push   ebx
c000de37:	e8 f6 00 00 00       	call   c000df32 <ReservedFilename::ReservedFilename(int)>
c000de3c:	83 c4 10             	add    esp,0x10
c000de3f:	89 1d ac 48 02 c0    	mov    DWORD PTR ds:0xc00248ac,ebx
c000de45:	83 ec 0c             	sub    esp,0xc
c000de48:	6a 0c                	push   0xc
c000de4a:	e8 8f 12 00 00       	call   c000f0de <operator new(unsigned long)>
c000de4f:	83 c4 10             	add    esp,0x10
c000de52:	89 c3                	mov    ebx,eax
c000de54:	83 ec 08             	sub    esp,0x8
c000de57:	68 01 ff ff 0f       	push   0xfffff01
c000de5c:	53                   	push   ebx
c000de5d:	e8 d0 00 00 00       	call   c000df32 <ReservedFilename::ReservedFilename(int)>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 1d b0 48 02 c0    	mov    DWORD PTR ds:0xc00248b0,ebx
c000de6b:	83 ec 0c             	sub    esp,0xc
c000de6e:	6a 0c                	push   0xc
c000de70:	e8 69 12 00 00       	call   c000f0de <operator new(unsigned long)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 c3                	mov    ebx,eax
c000de7a:	83 ec 08             	sub    esp,0x8
c000de7d:	68 00 ff ff 0f       	push   0xfffff00
c000de82:	53                   	push   ebx
c000de83:	e8 aa 00 00 00       	call   c000df32 <ReservedFilename::ReservedFilename(int)>
c000de88:	83 c4 10             	add    esp,0x10
c000de8b:	89 1d a4 48 02 c0    	mov    DWORD PTR ds:0xc00248a4,ebx
c000de91:	83 ec 0c             	sub    esp,0xc
c000de94:	6a 0c                	push   0xc
c000de96:	e8 43 12 00 00       	call   c000f0de <operator new(unsigned long)>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 c3                	mov    ebx,eax
c000dea0:	83 ec 08             	sub    esp,0x8
c000dea3:	68 02 ff ff 0f       	push   0xfffff02
c000dea8:	53                   	push   ebx
c000dea9:	e8 84 00 00 00       	call   c000df32 <ReservedFilename::ReservedFilename(int)>
c000deae:	83 c4 10             	add    esp,0x10
c000deb1:	89 1d a8 48 02 c0    	mov    DWORD PTR ds:0xc00248a8,ebx
c000deb7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000debf:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dec4:	7f 67                	jg     c000df2d <UnixFile::UnixFile(int)+0x16b>
c000dec6:	83 ec 0c             	sub    esp,0xc
c000dec9:	6a 0c                	push   0xc
c000decb:	e8 0e 12 00 00       	call   c000f0de <operator new(unsigned long)>
c000ded0:	83 c4 10             	add    esp,0x10
c000ded3:	89 c3                	mov    ebx,eax
c000ded5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded9:	05 10 ff ff 0f       	add    eax,0xfffff10
c000dede:	83 ec 08             	sub    esp,0x8
c000dee1:	50                   	push   eax
c000dee2:	53                   	push   ebx
c000dee3:	e8 4a 00 00 00       	call   c000df32 <ReservedFilename::ReservedFilename(int)>
c000dee8:	83 c4 10             	add    esp,0x10
c000deeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deef:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	6a 0c                	push   0xc
c000defb:	e8 de 11 00 00       	call   c000f0de <operator new(unsigned long)>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	89 c3                	mov    ebx,eax
c000df05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df09:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df0e:	83 ec 08             	sub    esp,0x8
c000df11:	50                   	push   eax
c000df12:	53                   	push   ebx
c000df13:	e8 1a 00 00 00       	call   c000df32 <ReservedFilename::ReservedFilename(int)>
c000df18:	83 c4 10             	add    esp,0x10
c000df1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df1f:	89 1c 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],ebx
c000df26:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df2a:	eb 93                	jmp    c000debf <UnixFile::UnixFile(int)+0xfd>
c000df2c:	90                   	nop
c000df2d:	83 c4 18             	add    esp,0x18
c000df30:	5b                   	pop    ebx
c000df31:	c3                   	ret    

c000df32 <ReservedFilename::ReservedFilename(int)>:
c000df32:	83 ec 0c             	sub    esp,0xc
c000df35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df39:	83 ec 08             	sub    esp,0x8
c000df3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df40:	50                   	push   eax
c000df41:	e8 7c fe ff ff       	call   c000ddc2 <UnixFile::UnixFile(int)>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	89 10                	mov    DWORD PTR [eax],edx
c000df54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df5f:	90                   	nop
c000df60:	83 c4 0c             	add    esp,0xc
c000df63:	c3                   	ret    

c000df64 <UnixFile::~UnixFile()>:
c000df64:	83 ec 1c             	sub    esp,0x1c
c000df67:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000df6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df70:	89 10                	mov    DWORD PTR [eax],edx
c000df72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df79:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df7e:	7f 73                	jg     c000dff3 <UnixFile::~UnixFile()+0x8f>
c000df80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	68 b8 48 02 c0       	push   0xc00248b8
c000df90:	e8 79 19 01 00       	call   c001f90e <LinkedList<UnixFile>::getFirstElement()>
c000df95:	83 c4 10             	add    esp,0x10
c000df98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df9c:	83 ec 0c             	sub    esp,0xc
c000df9f:	68 b8 48 02 c0       	push   0xc00248b8
c000dfa4:	e8 6d 19 01 00       	call   c001f916 <LinkedList<UnixFile>::removeFirst()>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfb0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfb4:	74 40                	je     c000dff6 <UnixFile::~UnixFile()+0x92>
c000dfb6:	83 ec 08             	sub    esp,0x8
c000dfb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfbd:	68 b8 48 02 c0       	push   0xc00248b8
c000dfc2:	e8 73 18 01 00       	call   c001f83a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfce:	8d 50 01             	lea    edx,[eax+0x1]
c000dfd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd5:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfda:	0f 94 c0             	sete   al
c000dfdd:	84 c0                	test   al,al
c000dfdf:	74 a7                	je     c000df88 <UnixFile::~UnixFile()+0x24>
c000dfe1:	83 ec 0c             	sub    esp,0xc
c000dfe4:	68 24 16 02 c0       	push   0xc0021624
c000dfe9:	e8 3a 7a 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000dfee:	83 c4 10             	add    esp,0x10
c000dff1:	eb 95                	jmp    c000df88 <UnixFile::~UnixFile()+0x24>
c000dff3:	90                   	nop
c000dff4:	eb 01                	jmp    c000dff7 <UnixFile::~UnixFile()+0x93>
c000dff6:	90                   	nop
c000dff7:	90                   	nop
c000dff8:	83 c4 1c             	add    esp,0x1c
c000dffb:	c3                   	ret    

c000dffc <UnixFile::~UnixFile()>:
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	83 ec 0c             	sub    esp,0xc
c000e002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e006:	e8 59 ff ff ff       	call   c000df64 <UnixFile::~UnixFile()>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	83 ec 08             	sub    esp,0x8
c000e011:	6a 0c                	push   0xc
c000e013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e017:	e8 d1 10 00 00       	call   c000f0ed <operator delete(void*, unsigned long)>
c000e01c:	83 c4 10             	add    esp,0x10
c000e01f:	83 c4 0c             	add    esp,0xc
c000e022:	c3                   	ret    
c000e023:	90                   	nop

c000e024 <ReservedFilename::~ReservedFilename()>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000e02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e030:	89 10                	mov    DWORD PTR [eax],edx
c000e032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e036:	83 ec 0c             	sub    esp,0xc
c000e039:	50                   	push   eax
c000e03a:	e8 25 ff ff ff       	call   c000df64 <UnixFile::~UnixFile()>
c000e03f:	83 c4 10             	add    esp,0x10
c000e042:	90                   	nop
c000e043:	83 c4 0c             	add    esp,0xc
c000e046:	c3                   	ret    
c000e047:	90                   	nop

c000e048 <ReservedFilename::~ReservedFilename()>:
c000e048:	83 ec 0c             	sub    esp,0xc
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e052:	e8 cd ff ff ff       	call   c000e024 <ReservedFilename::~ReservedFilename()>
c000e057:	83 c4 10             	add    esp,0x10
c000e05a:	83 ec 08             	sub    esp,0x8
c000e05d:	6a 0c                	push   0xc
c000e05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e063:	e8 85 10 00 00       	call   c000f0ed <operator delete(void*, unsigned long)>
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	83 c4 0c             	add    esp,0xc
c000e06e:	c3                   	ret    

c000e06f <getFromFileDescriptor(int)>:
c000e06f:	53                   	push   ebx
c000e070:	83 ec 08             	sub    esp,0x8
c000e073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e077:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e07d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e083:	7f 33                	jg     c000e0b8 <getFromFileDescriptor(int)+0x49>
c000e085:	83 ec 0c             	sub    esp,0xc
c000e088:	68 b8 48 02 c0       	push   0xc00248b8
c000e08d:	e8 7c 18 01 00       	call   c001f90e <LinkedList<UnixFile>::getFirstElement()>
c000e092:	83 c4 10             	add    esp,0x10
c000e095:	85 c0                	test   eax,eax
c000e097:	75 07                	jne    c000e0a0 <getFromFileDescriptor(int)+0x31>
c000e099:	31 c0                	xor    eax,eax
c000e09b:	e9 98 00 00 00       	jmp    c000e138 <getFromFileDescriptor(int)+0xc9>
c000e0a0:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e0a3:	0f 84 8f 00 00 00    	je     c000e138 <getFromFileDescriptor(int)+0xc9>
c000e0a9:	52                   	push   edx
c000e0aa:	52                   	push   edx
c000e0ab:	50                   	push   eax
c000e0ac:	68 b8 48 02 c0       	push   0xc00248b8
c000e0b1:	e8 02 19 01 00       	call   c001f9b8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0b6:	eb da                	jmp    c000e092 <getFromFileDescriptor(int)+0x23>
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	68 3d 15 02 c0       	push   0xc002153d
c000e0c0:	e8 4e 11 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	a1 ac 48 02 c0       	mov    eax,ds:0xc00248ac
c000e0cd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0d3:	74 63                	je     c000e138 <getFromFileDescriptor(int)+0xc9>
c000e0d5:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0db:	75 17                	jne    c000e0f4 <getFromFileDescriptor(int)+0x85>
c000e0dd:	83 ec 0c             	sub    esp,0xc
c000e0e0:	68 64 15 02 c0       	push   0xc0021564
c000e0e5:	e8 29 11 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e0ea:	a1 b0 48 02 c0       	mov    eax,ds:0xc00248b0
c000e0ef:	83 c4 10             	add    esp,0x10
c000e0f2:	eb 44                	jmp    c000e138 <getFromFileDescriptor(int)+0xc9>
c000e0f4:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c000e0f9:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e0ff:	74 37                	je     c000e138 <getFromFileDescriptor(int)+0xc9>
c000e101:	a1 a4 48 02 c0       	mov    eax,ds:0xc00248a4
c000e106:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e10c:	74 2a                	je     c000e138 <getFromFileDescriptor(int)+0xc9>
c000e10e:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e114:	83 f8 08             	cmp    eax,0x8
c000e117:	77 09                	ja     c000e122 <getFromFileDescriptor(int)+0xb3>
c000e119:	8b 04 85 80 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb780]
c000e120:	eb 16                	jmp    c000e138 <getFromFileDescriptor(int)+0xc9>
c000e122:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e128:	83 fb 08             	cmp    ebx,0x8
c000e12b:	0f 87 68 ff ff ff    	ja     c000e099 <getFromFileDescriptor(int)+0x2a>
c000e131:	8b 04 9d 40 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7c0]
c000e138:	83 c4 08             	add    esp,0x8
c000e13b:	5b                   	pop    ebx
c000e13c:	c3                   	ret    

c000e13d <__static_initialization_and_destruction_0(int, int)>:
c000e13d:	83 ec 0c             	sub    esp,0xc
c000e140:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e145:	75 34                	jne    c000e17b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e147:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e14f:	75 2a                	jne    c000e17b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e151:	83 ec 0c             	sub    esp,0xc
c000e154:	68 b8 48 02 c0       	push   0xc00248b8
c000e159:	e8 84 16 01 00       	call   c001f7e2 <LinkedList<UnixFile>::LinkedList()>
c000e15e:	83 c4 10             	add    esp,0x10
c000e161:	83 ec 04             	sub    esp,0x4
c000e164:	68 8c 3b 02 c0       	push   0xc0023b8c
c000e169:	68 b8 48 02 c0       	push   0xc00248b8
c000e16e:	68 e0 f7 01 c0       	push   0xc001f7e0
c000e173:	e8 f1 0e 00 00       	call   c000f069 <__cxa_atexit>
c000e178:	83 c4 10             	add    esp,0x10
c000e17b:	90                   	nop
c000e17c:	83 c4 0c             	add    esp,0xc
c000e17f:	c3                   	ret    

c000e180 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e180:	83 ec 0c             	sub    esp,0xc
c000e183:	83 ec 08             	sub    esp,0x8
c000e186:	68 ff ff 00 00       	push   0xffff
c000e18b:	6a 01                	push   0x1
c000e18d:	e8 ab ff ff ff       	call   c000e13d <__static_initialization_and_destruction_0(int, int)>
c000e192:	83 c4 10             	add    esp,0x10
c000e195:	83 c4 0c             	add    esp,0xc
c000e198:	c3                   	ret    
c000e199:	90                   	nop

c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e19a:	53                   	push   ebx
c000e19b:	8b 15 08 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c08
c000e1a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1a9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1af:	89 c8                	mov    eax,ecx
c000e1b1:	d1 e8                	shr    eax,1
c000e1b3:	01 d0                	add    eax,edx
c000e1b5:	83 e1 01             	and    ecx,0x1
c000e1b8:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1ba:	75 09                	jne    c000e1c5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1bc:	83 e2 f0             	and    edx,0xfffffff0
c000e1bf:	09 da                	or     edx,ebx
c000e1c1:	88 10                	mov    BYTE PTR [eax],dl
c000e1c3:	5b                   	pop    ebx
c000e1c4:	c3                   	ret    
c000e1c5:	c1 e3 04             	shl    ebx,0x4
c000e1c8:	83 e2 0f             	and    edx,0xf
c000e1cb:	09 da                	or     edx,ebx
c000e1cd:	88 10                	mov    BYTE PTR [eax],dl
c000e1cf:	5b                   	pop    ebx
c000e1d0:	c3                   	ret    

c000e1d1 <Virt::getPageState(unsigned long)>:
c000e1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1d5:	8b 0d 08 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c08
c000e1db:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1e1:	89 d0                	mov    eax,edx
c000e1e3:	d1 e8                	shr    eax,1
c000e1e5:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1e8:	88 c8                	mov    al,cl
c000e1ea:	c0 e8 04             	shr    al,0x4
c000e1ed:	83 e2 01             	and    edx,0x1
c000e1f0:	75 05                	jne    c000e1f7 <Virt::getPageState(unsigned long)+0x26>
c000e1f2:	88 c8                	mov    al,cl
c000e1f4:	83 e0 0f             	and    eax,0xf
c000e1f7:	c3                   	ret    

c000e1f8 <Virt::allocateKernelVirtualPages(int)>:
c000e1f8:	55                   	push   ebp
c000e1f9:	31 ed                	xor    ebp,ebp
c000e1fb:	57                   	push   edi
c000e1fc:	56                   	push   esi
c000e1fd:	53                   	push   ebx
c000e1fe:	31 db                	xor    ebx,ebx
c000e200:	83 ec 1c             	sub    esp,0x1c
c000e203:	8b 3d 04 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c04
c000e209:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e20d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e212:	57                   	push   edi
c000e213:	e8 b9 ff ff ff       	call   c000e1d1 <Virt::getPageState(unsigned long)>
c000e218:	5a                   	pop    edx
c000e219:	84 c0                	test   al,al
c000e21b:	75 3a                	jne    c000e257 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e21d:	85 db                	test   ebx,ebx
c000e21f:	75 02                	jne    c000e223 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e221:	89 fd                	mov    ebp,edi
c000e223:	43                   	inc    ebx
c000e224:	39 f3                	cmp    ebx,esi
c000e226:	74 5a                	je     c000e282 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e228:	47                   	inc    edi
c000e229:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e22f:	76 31                	jbe    c000e262 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e231:	c7 05 04 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c04,0xc8000
c000e23b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e240:	75 28                	jne    c000e26a <Virt::allocateKernelVirtualPages(int)+0x72>
c000e242:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e247:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e24c:	57                   	push   edi
c000e24d:	e8 7f ff ff ff       	call   c000e1d1 <Virt::getPageState(unsigned long)>
c000e252:	5a                   	pop    edx
c000e253:	84 c0                	test   al,al
c000e255:	74 c6                	je     c000e21d <Virt::allocateKernelVirtualPages(int)+0x25>
c000e257:	47                   	inc    edi
c000e258:	31 db                	xor    ebx,ebx
c000e25a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e260:	77 cf                	ja     c000e231 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e262:	89 3d 04 3c 02 c0    	mov    DWORD PTR ds:0xc0023c04,edi
c000e268:	eb a8                	jmp    c000e212 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e26a:	83 ec 0c             	sub    esp,0xc
c000e26d:	68 7c 16 02 c0       	push   0xc002167c
c000e272:	e8 b1 77 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e277:	8b 3d 04 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c04
c000e27d:	83 c4 10             	add    esp,0x10
c000e280:	eb 90                	jmp    c000e212 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e282:	89 2d 04 3c 02 c0    	mov    DWORD PTR ds:0xc0023c04,ebp
c000e288:	4b                   	dec    ebx
c000e289:	74 5f                	je     c000e2ea <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e28b:	85 f6                	test   esi,esi
c000e28d:	74 3d                	je     c000e2cc <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e28f:	89 e8                	mov    eax,ebp
c000e291:	31 db                	xor    ebx,ebx
c000e293:	8d 7e ff             	lea    edi,[esi-0x1]
c000e296:	eb 14                	jmp    c000e2ac <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e298:	6a 01                	push   0x1
c000e29a:	43                   	inc    ebx
c000e29b:	50                   	push   eax
c000e29c:	e8 f9 fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a1:	58                   	pop    eax
c000e2a2:	39 f3                	cmp    ebx,esi
c000e2a4:	5a                   	pop    edx
c000e2a5:	74 25                	je     c000e2cc <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2a7:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c000e2ac:	8d 50 01             	lea    edx,[eax+0x1]
c000e2af:	85 db                	test   ebx,ebx
c000e2b1:	89 15 04 3c 02 c0    	mov    DWORD PTR ds:0xc0023c04,edx
c000e2b7:	74 20                	je     c000e2d9 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2b9:	39 df                	cmp    edi,ebx
c000e2bb:	75 db                	jne    c000e298 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2bd:	6a 03                	push   0x3
c000e2bf:	43                   	inc    ebx
c000e2c0:	50                   	push   eax
c000e2c1:	e8 d4 fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2c6:	59                   	pop    ecx
c000e2c7:	39 f3                	cmp    ebx,esi
c000e2c9:	58                   	pop    eax
c000e2ca:	75 db                	jne    c000e2a7 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2cc:	83 c4 1c             	add    esp,0x1c
c000e2cf:	89 e8                	mov    eax,ebp
c000e2d1:	c1 e0 0c             	shl    eax,0xc
c000e2d4:	5b                   	pop    ebx
c000e2d5:	5e                   	pop    esi
c000e2d6:	5f                   	pop    edi
c000e2d7:	5d                   	pop    ebp
c000e2d8:	c3                   	ret    
c000e2d9:	6a 02                	push   0x2
c000e2db:	bb 01 00 00 00       	mov    ebx,0x1
c000e2e0:	50                   	push   eax
c000e2e1:	e8 b4 fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2e6:	58                   	pop    eax
c000e2e7:	5a                   	pop    edx
c000e2e8:	eb bd                	jmp    c000e2a7 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2ea:	6a 04                	push   0x4
c000e2ec:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2ef:	55                   	push   ebp
c000e2f0:	a3 04 3c 02 c0       	mov    ds:0xc0023c04,eax
c000e2f5:	e8 a0 fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2fa:	59                   	pop    ecx
c000e2fb:	5b                   	pop    ebx
c000e2fc:	89 e8                	mov    eax,ebp
c000e2fe:	c1 e0 0c             	shl    eax,0xc
c000e301:	83 c4 1c             	add    esp,0x1c
c000e304:	5b                   	pop    ebx
c000e305:	5e                   	pop    esi
c000e306:	5f                   	pop    edi
c000e307:	5d                   	pop    ebp
c000e308:	c3                   	ret    

c000e309 <Virt::virtualMemorySetup()>:
c000e309:	53                   	push   ebx
c000e30a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e30f:	83 ec 08             	sub    esp,0x8
c000e312:	6a 0f                	push   0xf
c000e314:	53                   	push   ebx
c000e315:	43                   	inc    ebx
c000e316:	e8 7f fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e31b:	59                   	pop    ecx
c000e31c:	58                   	pop    eax
c000e31d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e323:	75 ed                	jne    c000e312 <Virt::virtualMemorySetup()+0x9>
c000e325:	50                   	push   eax
c000e326:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e32b:	50                   	push   eax
c000e32c:	68 00 00 00 c8       	push   0xc8000000
c000e331:	68 03 18 02 c0       	push   0xc0021803
c000e336:	e8 d8 0e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e33b:	58                   	pop    eax
c000e33c:	5a                   	pop    edx
c000e33d:	68 00 f0 ff ef       	push   0xeffff000
c000e342:	68 17 18 02 c0       	push   0xc0021817
c000e347:	e8 c7 0e 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e34c:	83 c4 10             	add    esp,0x10
c000e34f:	50                   	push   eax
c000e350:	50                   	push   eax
c000e351:	6a 00                	push   0x0
c000e353:	53                   	push   ebx
c000e354:	43                   	inc    ebx
c000e355:	e8 40 fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e35a:	83 c4 10             	add    esp,0x10
c000e35d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e363:	75 ea                	jne    c000e34f <Virt::virtualMemorySetup()+0x46>
c000e365:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e36a:	51                   	push   ecx
c000e36b:	51                   	push   ecx
c000e36c:	6a 0f                	push   0xf
c000e36e:	53                   	push   ebx
c000e36f:	43                   	inc    ebx
c000e370:	e8 25 fe ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e375:	83 c4 10             	add    esp,0x10
c000e378:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e37e:	75 ea                	jne    c000e36a <Virt::virtualMemorySetup()+0x61>
c000e380:	83 c4 08             	add    esp,0x8
c000e383:	5b                   	pop    ebx
c000e384:	c3                   	ret    

c000e385 <Virt::getAKernelVAS()>:
c000e385:	a1 c4 48 02 c0       	mov    eax,ds:0xc00248c4
c000e38a:	c3                   	ret    

c000e38b <Virt::setupPageSwapping(int)>:
c000e38b:	57                   	push   edi
c000e38c:	56                   	push   esi
c000e38d:	53                   	push   ebx
c000e38e:	83 ec 1c             	sub    esp,0x1c
c000e391:	68 14 01 00 00       	push   0x114
c000e396:	e8 43 0d 00 00       	call   c000f0de <operator new(unsigned long)>
c000e39b:	83 c4 0c             	add    esp,0xc
c000e39e:	8b 3d b4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bb4
c000e3a4:	89 c6                	mov    esi,eax
c000e3a6:	57                   	push   edi
c000e3a7:	68 2b 18 02 c0       	push   0xc002182b
c000e3ac:	50                   	push   eax
c000e3ad:	e8 98 13 00 00       	call   c000f74a <File::File(char const*, Process*)>
c000e3b2:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3b5:	e8 6c 15 00 00       	call   c000f926 <File::unlink()>
c000e3ba:	58                   	pop    eax
c000e3bb:	5a                   	pop    edx
c000e3bc:	6a 12                	push   0x12
c000e3be:	56                   	push   esi
c000e3bf:	e8 ea 13 00 00       	call   c000f7ae <File::open(FileOpenMode)>
c000e3c4:	83 c4 10             	add    esp,0x10
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	0f 85 b6 00 00 00    	jne    c000e485 <Virt::setupPageSwapping(int)+0xfa>
c000e3cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3db:	c1 e3 08             	shl    ebx,0x8
c000e3de:	83 ec 0c             	sub    esp,0xc
c000e3e1:	c1 fb 04             	sar    ebx,0x4
c000e3e4:	68 00 00 01 00       	push   0x10000
c000e3e9:	e8 f3 db ff ff       	call   c000bfe1 <malloc>
c000e3ee:	83 c4 0c             	add    esp,0xc
c000e3f1:	89 c7                	mov    edi,eax
c000e3f3:	68 00 00 01 00       	push   0x10000
c000e3f8:	6a 00                	push   0x0
c000e3fa:	50                   	push   eax
c000e3fb:	e8 c3 22 ff ff       	call   c00006c3 <memset>
c000e400:	83 c4 10             	add    esp,0x10
c000e403:	4b                   	dec    ebx
c000e404:	83 fb ff             	cmp    ebx,0xffffffff
c000e407:	74 4a                	je     c000e453 <Virt::setupPageSwapping(int)+0xc8>
c000e409:	83 ec 0c             	sub    esp,0xc
c000e40c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e40e:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e412:	52                   	push   edx
c000e413:	57                   	push   edi
c000e414:	6a 00                	push   0x0
c000e416:	68 00 00 01 00       	push   0x10000
c000e41b:	56                   	push   esi
c000e41c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e41f:	83 c4 20             	add    esp,0x20
c000e422:	85 c0                	test   eax,eax
c000e424:	75 4d                	jne    c000e473 <Virt::setupPageSwapping(int)+0xe8>
c000e426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42a:	3d 00 00 01 00       	cmp    eax,0x10000
c000e42f:	74 d2                	je     c000e403 <Virt::setupPageSwapping(int)+0x78>
c000e431:	52                   	push   edx
c000e432:	4b                   	dec    ebx
c000e433:	52                   	push   edx
c000e434:	50                   	push   eax
c000e435:	68 7e 18 02 c0       	push   0xc002187e
c000e43a:	e8 d4 0d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e43f:	c7 04 24 87 18 02 c0 	mov    DWORD PTR [esp],0xc0021887
c000e446:	e8 dd 75 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e44b:	83 c4 10             	add    esp,0x10
c000e44e:	83 fb ff             	cmp    ebx,0xffffffff
c000e451:	75 b6                	jne    c000e409 <Virt::setupPageSwapping(int)+0x7e>
c000e453:	83 ec 0c             	sub    esp,0xc
c000e456:	56                   	push   esi
c000e457:	e8 b0 13 00 00       	call   c000f80c <File::close()>
c000e45c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e45f:	e8 9d db ff ff       	call   c000c001 <rfree>
c000e464:	8b 06                	mov    eax,DWORD PTR [esi]
c000e466:	89 34 24             	mov    DWORD PTR [esp],esi
c000e469:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e46c:	83 c4 20             	add    esp,0x20
c000e46f:	5b                   	pop    ebx
c000e470:	5e                   	pop    esi
c000e471:	5f                   	pop    edi
c000e472:	c3                   	ret    
c000e473:	51                   	push   ecx
c000e474:	51                   	push   ecx
c000e475:	50                   	push   eax
c000e476:	68 66 18 02 c0       	push   0xc0021866
c000e47b:	e8 93 0d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e480:	83 c4 10             	add    esp,0x10
c000e483:	eb a1                	jmp    c000e426 <Virt::setupPageSwapping(int)+0x9b>
c000e485:	53                   	push   ebx
c000e486:	53                   	push   ebx
c000e487:	50                   	push   eax
c000e488:	68 42 18 02 c0       	push   0xc0021842
c000e48d:	e8 81 0d 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e492:	c7 04 24 4b 18 02 c0 	mov    DWORD PTR [esp],0xc002184b
c000e499:	e8 8a 75 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e49e:	83 c4 10             	add    esp,0x10
c000e4a1:	e9 29 ff ff ff       	jmp    c000e3cf <Virt::setupPageSwapping(int)+0x44>

c000e4a6 <VAS::VAS()>:
c000e4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b5:	a3 c4 48 02 c0       	mov    ds:0xc00248c4,eax
c000e4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4be:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4cd:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4d4:	90                   	nop
c000e4d5:	c3                   	ret    

c000e4d6 <VAS::VAS(VAS*)>:
c000e4d6:	83 ec 0c             	sub    esp,0xc
c000e4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4e4:	83 ec 0c             	sub    esp,0xc
c000e4e7:	68 9c 16 02 c0       	push   0xc002169c
c000e4ec:	e8 37 75 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e4f1:	83 c4 10             	add    esp,0x10
c000e4f4:	90                   	nop
c000e4f5:	83 c4 0c             	add    esp,0xc
c000e4f8:	c3                   	ret    
c000e4f9:	90                   	nop

c000e4fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e4fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fe:	89 c2                	mov    edx,eax
c000e500:	c1 ea 16             	shr    edx,0x16
c000e503:	c1 e8 0a             	shr    eax,0xa
c000e506:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e50b:	19 c9                	sbb    ecx,ecx
c000e50d:	25 fc 0f 00 00       	and    eax,0xffc
c000e512:	c1 e2 0c             	shl    edx,0xc
c000e515:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e51b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e522:	01 d0                	add    eax,edx
c000e524:	c3                   	ret    
c000e525:	90                   	nop

c000e526 <VAS::getPageTableEntry(unsigned long)>:
c000e526:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e52a:	89 ca                	mov    edx,ecx
c000e52c:	c1 ea 16             	shr    edx,0x16
c000e52f:	c1 e9 0a             	shr    ecx,0xa
c000e532:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e538:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e53e:	c1 e0 0c             	shl    eax,0xc
c000e541:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e544:	c3                   	ret    

c000e545 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e545:	57                   	push   edi
c000e546:	56                   	push   esi
c000e547:	be 01 00 00 00       	mov    esi,0x1
c000e54c:	53                   	push   ebx
c000e54d:	83 ec 10             	sub    esp,0x10
c000e550:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e554:	c1 eb 0c             	shr    ebx,0xc
c000e557:	eb 3e                	jmp    c000e597 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e559:	e8 27 fe ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c000e55e:	51                   	push   ecx
c000e55f:	51                   	push   ecx
c000e560:	57                   	push   edi
c000e561:	50                   	push   eax
c000e562:	e8 bf ff ff ff       	call   c000e526 <VAS::getPageTableEntry(unsigned long)>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e56e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e570:	f6 c4 04             	test   ah,0x4
c000e573:	75 5f                	jne    c000e5d4 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e575:	80 fa 04             	cmp    dl,0x4
c000e578:	74 78                	je     c000e5f2 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e57a:	80 fa 02             	cmp    dl,0x2
c000e57d:	0f 84 88 00 00 00    	je     c000e60b <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e583:	80 fa 03             	cmp    dl,0x3
c000e586:	0f 84 ac 00 00 00    	je     c000e638 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e58c:	fe ca                	dec    dl
c000e58e:	0f 84 92 00 00 00    	je     c000e626 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e594:	43                   	inc    ebx
c000e595:	31 f6                	xor    esi,esi
c000e597:	53                   	push   ebx
c000e598:	e8 34 fc ff ff       	call   c000e1d1 <Virt::getPageState(unsigned long)>
c000e59d:	5f                   	pop    edi
c000e59e:	89 df                	mov    edi,ebx
c000e5a0:	c1 e7 0c             	shl    edi,0xc
c000e5a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5a7:	84 c0                	test   al,al
c000e5a9:	75 ae                	jne    c000e559 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5ab:	83 ec 0c             	sub    esp,0xc
c000e5ae:	68 8d 18 02 c0       	push   0xc002188d
c000e5b3:	e8 70 74 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e5b8:	e8 c8 fd ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c000e5bd:	5a                   	pop    edx
c000e5be:	59                   	pop    ecx
c000e5bf:	57                   	push   edi
c000e5c0:	50                   	push   eax
c000e5c1:	e8 60 ff ff ff       	call   c000e526 <VAS::getPageTableEntry(unsigned long)>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5cf:	f6 c4 04             	test   ah,0x4
c000e5d2:	74 c0                	je     c000e594 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5d4:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5d8:	83 ec 0c             	sub    esp,0xc
c000e5db:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5e0:	50                   	push   eax
c000e5e1:	e8 44 df ff ff       	call   c000c52a <Phys::freePage(unsigned long)>
c000e5e6:	83 c4 10             	add    esp,0x10
c000e5e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5ed:	80 fa 04             	cmp    dl,0x4
c000e5f0:	75 88                	jne    c000e57a <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5f2:	89 f0                	mov    eax,esi
c000e5f4:	84 c0                	test   al,al
c000e5f6:	75 46                	jne    c000e63e <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e5f8:	c7 44 24 20 c0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216c0
c000e600:	83 c4 10             	add    esp,0x10
c000e603:	5b                   	pop    ebx
c000e604:	5e                   	pop    esi
c000e605:	5f                   	pop    edi
c000e606:	e9 1d 74 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>
c000e60b:	89 f0                	mov    eax,esi
c000e60d:	84 c0                	test   al,al
c000e60f:	75 15                	jne    c000e626 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e611:	83 ec 0c             	sub    esp,0xc
c000e614:	68 a9 18 02 c0       	push   0xc00218a9
c000e619:	e8 0a 74 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e61e:	83 c4 10             	add    esp,0x10
c000e621:	e9 6e ff ff ff       	jmp    c000e594 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e626:	50                   	push   eax
c000e627:	50                   	push   eax
c000e628:	6a 00                	push   0x0
c000e62a:	53                   	push   ebx
c000e62b:	e8 6a fb ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e630:	83 c4 10             	add    esp,0x10
c000e633:	e9 5c ff ff ff       	jmp    c000e594 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e638:	89 f0                	mov    eax,esi
c000e63a:	84 c0                	test   al,al
c000e63c:	75 14                	jne    c000e652 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e63e:	52                   	push   edx
c000e63f:	52                   	push   edx
c000e640:	6a 00                	push   0x0
c000e642:	53                   	push   ebx
c000e643:	e8 52 fb ff ff       	call   c000e19a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e648:	83 c4 10             	add    esp,0x10
c000e64b:	83 c4 10             	add    esp,0x10
c000e64e:	5b                   	pop    ebx
c000e64f:	5e                   	pop    esi
c000e650:	5f                   	pop    edi
c000e651:	c3                   	ret    
c000e652:	c7 44 24 20 c5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218c5
c000e65a:	83 c4 10             	add    esp,0x10
c000e65d:	5b                   	pop    ebx
c000e65e:	5e                   	pop    esi
c000e65f:	5f                   	pop    edi
c000e660:	e9 c3 73 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>
c000e665:	90                   	nop

c000e666 <VAS::freeAllocatedPages(unsigned long)>:
c000e666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e66a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e66e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e672:	74 09                	je     c000e67d <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e674:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e678:	e9 c8 fe ff ff       	jmp    c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c000e67d:	c7 44 24 04 e4 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216e4
c000e685:	e9 89 0b 00 00       	jmp    c000f213 <Dbg::kprintf(char const*, ...)>

c000e68a <VAS::virtualToPhysical(unsigned long)>:
c000e68a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e68e:	50                   	push   eax
c000e68f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e693:	52                   	push   edx
c000e694:	e8 8d fe ff ff       	call   c000e526 <VAS::getPageTableEntry(unsigned long)>
c000e699:	59                   	pop    ecx
c000e69a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e69c:	5a                   	pop    edx
c000e69d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6a2:	c3                   	ret    
c000e6a3:	90                   	nop

c000e6a4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6a4:	55                   	push   ebp
c000e6a5:	57                   	push   edi
c000e6a6:	56                   	push   esi
c000e6a7:	53                   	push   ebx
c000e6a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6b0:	89 c3                	mov    ebx,eax
c000e6b2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6b6:	c1 e3 0c             	shl    ebx,0xc
c000e6b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6bd:	01 f3                	add    ebx,esi
c000e6bf:	85 c0                	test   eax,eax
c000e6c1:	7e 1f                	jle    c000e6e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6c3:	56                   	push   esi
c000e6c4:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6ca:	55                   	push   ebp
c000e6cb:	e8 56 fe ff ff       	call   c000e526 <VAS::getPageTableEntry(unsigned long)>
c000e6d0:	5a                   	pop    edx
c000e6d1:	59                   	pop    ecx
c000e6d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6d4:	21 f9                	and    ecx,edi
c000e6d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6da:	09 d1                	or     ecx,edx
c000e6dc:	39 f3                	cmp    ebx,esi
c000e6de:	89 08                	mov    DWORD PTR [eax],ecx
c000e6e0:	75 e1                	jne    c000e6c3 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6e2:	5b                   	pop    ebx
c000e6e3:	5e                   	pop    esi
c000e6e4:	5f                   	pop    edi
c000e6e5:	5d                   	pop    ebp
c000e6e6:	c3                   	ret    
c000e6e7:	90                   	nop

c000e6e8 <VAS::setToWriteCombining(unsigned long, int)>:
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	e8 cc 61 00 00       	call   c00148bc <thisCPU()>
c000e6f0:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e6f7:	75 04                	jne    c000e6fd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e6f9:	83 c4 0c             	add    esp,0xc
c000e6fc:	c3                   	ret    
c000e6fd:	83 ec 0c             	sub    esp,0xc
c000e700:	68 80 00 00 00       	push   0x80
c000e705:	6a ff                	push   0xffffffff
c000e707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70b:	50                   	push   eax
c000e70c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e710:	52                   	push   edx
c000e711:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e715:	51                   	push   ecx
c000e716:	e8 89 ff ff ff       	call   c000e6a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000e71b:	83 c4 20             	add    esp,0x20
c000e71e:	83 c4 0c             	add    esp,0xc
c000e721:	c3                   	ret    

c000e722 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e722:	83 ec 0c             	sub    esp,0xc
c000e725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e729:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e72e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e735:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e738:	19 c0                	sbb    eax,eax
c000e73a:	83 ca 03             	or     edx,0x3
c000e73d:	83 e0 fc             	and    eax,0xfffffffc
c000e740:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e747:	e8 79 10 01 00       	call   c001f7c5 <CPU::readCR3()>
c000e74c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e750:	83 c4 0c             	add    esp,0xc
c000e753:	e9 7f 10 01 00       	jmp    c001f7d7 <CPU::writeCR3(unsigned long)>

c000e758 <VAS::~VAS()>:
c000e758:	83 ec 2c             	sub    esp,0x2c
c000e75b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e763:	e8 c9 a2 00 00       	call   c0018a31 <lockScheduler()>
c000e768:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e76d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e76f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e772:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e778:	83 ec 04             	sub    esp,0x4
c000e77b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e77f:	6a 01                	push   0x1
c000e781:	50                   	push   eax
c000e782:	e8 9b ff ff ff       	call   c000e722 <VAS::mapOtherVASIn(bool, VAS*)>
c000e787:	83 c4 10             	add    esp,0x10
c000e78a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e792:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e79a:	0f 8f d7 00 00 00    	jg     c000e877 <VAS::~VAS()+0x11f>
c000e7a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7ab:	c1 e2 02             	shl    edx,0x2
c000e7ae:	01 d0                	add    eax,edx
c000e7b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ba:	83 e0 01             	and    eax,0x1
c000e7bd:	0f 84 ab 00 00 00    	je     c000e86e <VAS::~VAS()+0x116>
c000e7c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7cb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7d3:	7f 75                	jg     c000e84a <VAS::~VAS()+0xf2>
c000e7d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7d9:	c1 e0 0a             	shl    eax,0xa
c000e7dc:	89 c2                	mov    edx,eax
c000e7de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7e2:	01 d0                	add    eax,edx
c000e7e4:	c1 e0 0c             	shl    eax,0xc
c000e7e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7eb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7f5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7fb:	83 ec 04             	sub    esp,0x4
c000e7fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e802:	6a 01                	push   0x1
c000e804:	50                   	push   eax
c000e805:	e8 f0 fc ff ff       	call   c000e4fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e80a:	83 c4 10             	add    esp,0x10
c000e80d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e815:	8b 00                	mov    eax,DWORD PTR [eax]
c000e817:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e81f:	25 01 04 00 00       	and    eax,0x401
c000e824:	3d 01 04 00 00       	cmp    eax,0x401
c000e829:	75 19                	jne    c000e844 <VAS::~VAS()+0xec>
c000e82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e82f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e834:	83 ec 0c             	sub    esp,0xc
c000e837:	50                   	push   eax
c000e838:	e8 ed dc ff ff       	call   c000c52a <Phys::freePage(unsigned long)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e844:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e848:	eb 81                	jmp    c000e7cb <VAS::~VAS()+0x73>
c000e84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84e:	25 00 04 00 00       	and    eax,0x400
c000e853:	74 19                	je     c000e86e <VAS::~VAS()+0x116>
c000e855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e859:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e85e:	83 ec 0c             	sub    esp,0xc
c000e861:	50                   	push   eax
c000e862:	e8 c3 dc ff ff       	call   c000c52a <Phys::freePage(unsigned long)>
c000e867:	83 c4 10             	add    esp,0x10
c000e86a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e86e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e872:	e9 1b ff ff ff       	jmp    c000e792 <VAS::~VAS()+0x3a>
c000e877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e87b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e87e:	83 ec 0c             	sub    esp,0xc
c000e881:	50                   	push   eax
c000e882:	e8 be fc ff ff       	call   c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c000e887:	83 c4 10             	add    esp,0x10
c000e88a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e891:	83 ec 0c             	sub    esp,0xc
c000e894:	50                   	push   eax
c000e895:	e8 90 dc ff ff       	call   c000c52a <Phys::freePage(unsigned long)>
c000e89a:	83 c4 10             	add    esp,0x10
c000e89d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e8a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8a5:	c1 e0 02             	shl    eax,0x2
c000e8a8:	83 ec 08             	sub    esp,0x8
c000e8ab:	50                   	push   eax
c000e8ac:	68 08 17 02 c0       	push   0xc0021708
c000e8b1:	e8 5d 09 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	e8 75 a1 00 00       	call   c0018a33 <unlockScheduler()>
c000e8be:	90                   	nop
c000e8bf:	83 c4 2c             	add    esp,0x2c
c000e8c2:	c3                   	ret    
c000e8c3:	90                   	nop

c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8c4:	55                   	push   ebp
c000e8c5:	57                   	push   edi
c000e8c6:	56                   	push   esi
c000e8c7:	53                   	push   ebx
c000e8c8:	83 ec 1c             	sub    esp,0x1c
c000e8cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8d3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8d9:	77 08                	ja     c000e8e3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8db:	0f 20 d8             	mov    eax,cr3
c000e8de:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8e1:	75 49                	jne    c000e92c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8e7:	09 d8                	or     eax,ebx
c000e8e9:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8ee:	75 59                	jne    c000e949 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8f0:	89 de                	mov    esi,ebx
c000e8f2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8f5:	c1 ee 16             	shr    esi,0x16
c000e8f8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e8ff:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e903:	74 56                	je     c000e95b <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e905:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e90b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e90f:	c1 eb 0a             	shr    ebx,0xa
c000e912:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e916:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e91c:	09 d0                	or     eax,edx
c000e91e:	c1 e6 0c             	shl    esi,0xc
c000e921:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e924:	83 c4 1c             	add    esp,0x1c
c000e927:	5b                   	pop    ebx
c000e928:	5e                   	pop    esi
c000e929:	5f                   	pop    edi
c000e92a:	5d                   	pop    ebp
c000e92b:	c3                   	ret    
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	68 28 17 02 c0       	push   0xc0021728
c000e934:	e8 da 08 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e940:	09 d8                	or     eax,ebx
c000e942:	a9 ff 0f 00 00       	test   eax,0xfff
c000e947:	74 a7                	je     c000e8f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e949:	83 ec 0c             	sub    esp,0xc
c000e94c:	68 90 17 02 c0       	push   0xc0021790
c000e951:	e8 d2 70 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000e956:	83 c4 10             	add    esp,0x10
c000e959:	eb 95                	jmp    c000e8f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e95b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e95f:	e8 53 dc ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000e964:	89 c5                	mov    ebp,eax
c000e966:	e8 1a fa ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c000e96b:	83 ec 0c             	sub    esp,0xc
c000e96e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e972:	6a 01                	push   0x1
c000e974:	e8 7f f8 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c000e979:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e980:	6a 01                	push   0x1
c000e982:	50                   	push   eax
c000e983:	55                   	push   ebp
c000e984:	81 cd 07 04 00 00    	or     ebp,0x407
c000e98a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e98e:	51                   	push   ecx
c000e98f:	e8 22 02 00 00       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e994:	83 c4 1c             	add    esp,0x1c
c000e997:	68 00 10 00 00       	push   0x1000
c000e99c:	6a 00                	push   0x0
c000e99e:	50                   	push   eax
c000e99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9a3:	e8 1b 1d ff ff       	call   c00006c3 <memset>
c000e9a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9ac:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9af:	e8 91 fb ff ff       	call   c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9c1:	e9 3f ff ff ff       	jmp    c000e905 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9c6 <VAS::allocatePages(int, int)>:
c000e9c6:	55                   	push   ebp
c000e9c7:	57                   	push   edi
c000e9c8:	56                   	push   esi
c000e9c9:	53                   	push   ebx
c000e9ca:	83 ec 1c             	sub    esp,0x1c
c000e9cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9d1:	e8 e6 5e 00 00       	call   c00148bc <thisCPU()>
c000e9d6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9dc:	83 e0 01             	and    eax,0x1
c000e9df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9e3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9e7:	0f 85 d5 00 00 00    	jne    c000eac2 <VAS::allocatePages(int, int)+0xfc>
c000e9ed:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9f4:	85 c0                	test   eax,eax
c000e9f6:	0f 84 aa 00 00 00    	je     c000eaa6 <VAS::allocatePages(int, int)+0xe0>
c000e9fc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ea00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea04:	c1 e6 0c             	shl    esi,0xc
c000ea07:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea0b:	01 de                	add    esi,ebx
c000ea0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea11:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea17:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea1a:	85 c0                	test   eax,eax
c000ea1c:	7e 25                	jle    c000ea43 <VAS::allocatePages(int, int)+0x7d>
c000ea1e:	e8 94 db ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000ea23:	55                   	push   ebp
c000ea24:	53                   	push   ebx
c000ea25:	50                   	push   eax
c000ea26:	57                   	push   edi
c000ea27:	e8 98 fe ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea2c:	83 c4 10             	add    esp,0x10
c000ea2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea34:	74 03                	je     c000ea39 <VAS::allocatePages(int, int)+0x73>
c000ea36:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea39:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea3f:	39 de                	cmp    esi,ebx
c000ea41:	75 db                	jne    c000ea1e <VAS::allocatePages(int, int)+0x58>
c000ea43:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea48:	74 3f                	je     c000ea89 <VAS::allocatePages(int, int)+0xc3>
c000ea4a:	c1 ee 0a             	shr    esi,0xa
c000ea4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea51:	c1 eb 0a             	shr    ebx,0xa
c000ea54:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea5a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea60:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea66:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea6c:	39 f3                	cmp    ebx,esi
c000ea6e:	77 0d                	ja     c000ea7d <VAS::allocatePages(int, int)+0xb7>
c000ea70:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea73:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea79:	39 de                	cmp    esi,ebx
c000ea7b:	73 f3                	jae    c000ea70 <VAS::allocatePages(int, int)+0xaa>
c000ea7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea81:	83 c4 1c             	add    esp,0x1c
c000ea84:	5b                   	pop    ebx
c000ea85:	5e                   	pop    esi
c000ea86:	5f                   	pop    edi
c000ea87:	5d                   	pop    ebp
c000ea88:	c3                   	ret    
c000ea89:	e8 37 0d 01 00       	call   c001f7c5 <CPU::readCR3()>
c000ea8e:	83 ec 0c             	sub    esp,0xc
c000ea91:	50                   	push   eax
c000ea92:	e8 40 0d 01 00       	call   c001f7d7 <CPU::writeCR3(unsigned long)>
c000ea97:	83 c4 10             	add    esp,0x10
c000ea9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9e:	83 c4 1c             	add    esp,0x1c
c000eaa1:	5b                   	pop    ebx
c000eaa2:	5e                   	pop    esi
c000eaa3:	5f                   	pop    edi
c000eaa4:	5d                   	pop    ebp
c000eaa5:	c3                   	ret    
c000eaa6:	83 ec 0c             	sub    esp,0xc
c000eaa9:	68 b4 17 02 c0       	push   0xc00217b4
c000eaae:	e8 75 6f 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000eab3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eab6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eaba:	83 c4 10             	add    esp,0x10
c000eabd:	e9 3a ff ff ff       	jmp    c000e9fc <VAS::allocatePages(int, int)+0x36>
c000eac2:	83 ec 0c             	sub    esp,0xc
c000eac5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eac9:	53                   	push   ebx
c000eaca:	e8 29 f7 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c000eacf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000eadb:	0f 87 94 00 00 00    	ja     c000eb75 <VAS::allocatePages(int, int)+0x1af>
c000eae1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eae5:	85 d2                	test   edx,edx
c000eae7:	7e 3c                	jle    c000eb25 <VAS::allocatePages(int, int)+0x15f>
c000eae9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaf1:	c1 e5 0c             	shl    ebp,0xc
c000eaf4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eaf8:	81 ce 00 04 00 00    	or     esi,0x400
c000eafe:	01 dd                	add    ebp,ebx
c000eb00:	e8 b2 da ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000eb05:	56                   	push   esi
c000eb06:	53                   	push   ebx
c000eb07:	50                   	push   eax
c000eb08:	57                   	push   edi
c000eb09:	e8 b6 fd ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb16:	74 03                	je     c000eb1b <VAS::allocatePages(int, int)+0x155>
c000eb18:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb1b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb21:	39 dd                	cmp    ebp,ebx
c000eb23:	75 db                	jne    c000eb00 <VAS::allocatePages(int, int)+0x13a>
c000eb25:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb2a:	0f 84 59 ff ff ff    	je     c000ea89 <VAS::allocatePages(int, int)+0xc3>
c000eb30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb38:	c1 e0 0c             	shl    eax,0xc
c000eb3b:	89 d3                	mov    ebx,edx
c000eb3d:	c1 eb 0a             	shr    ebx,0xa
c000eb40:	01 d0                	add    eax,edx
c000eb42:	c1 e8 0a             	shr    eax,0xa
c000eb45:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb50:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb56:	2d 00 00 40 00       	sub    eax,0x400000
c000eb5b:	39 c3                	cmp    ebx,eax
c000eb5d:	0f 87 1a ff ff ff    	ja     c000ea7d <VAS::allocatePages(int, int)+0xb7>
c000eb63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb66:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb6c:	39 d8                	cmp    eax,ebx
c000eb6e:	73 f3                	jae    c000eb63 <VAS::allocatePages(int, int)+0x19d>
c000eb70:	e9 08 ff ff ff       	jmp    c000ea7d <VAS::allocatePages(int, int)+0xb7>
c000eb75:	e8 42 5d 00 00       	call   c00148bc <thisCPU()>
c000eb7a:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb81:	0f 84 5a ff ff ff    	je     c000eae1 <VAS::allocatePages(int, int)+0x11b>
c000eb87:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb8b:	80 cd 01             	or     ch,0x1
c000eb8e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb92:	e9 4a ff ff ff       	jmp    c000eae1 <VAS::allocatePages(int, int)+0x11b>
c000eb97:	90                   	nop

c000eb98 <VAS::setCPUSpecific(unsigned long)>:
c000eb98:	83 ec 0c             	sub    esp,0xc
c000eb9b:	6a 05                	push   0x5
c000eb9d:	68 00 00 40 c2       	push   0xc2400000
c000eba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eba6:	50                   	push   eax
c000eba7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebab:	52                   	push   edx
c000ebac:	e8 13 fd ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebb1:	83 c4 1c             	add    esp,0x1c
c000ebb4:	c3                   	ret    
c000ebb5:	90                   	nop

c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebb6:	55                   	push   ebp
c000ebb7:	57                   	push   edi
c000ebb8:	56                   	push   esi
c000ebb9:	53                   	push   ebx
c000ebba:	83 ec 1c             	sub    esp,0x1c
c000ebbd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebc1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebc5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebc9:	e8 ee 5c 00 00       	call   c00148bc <thisCPU()>
c000ebce:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebd4:	83 e0 01             	and    eax,0x1
c000ebd7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebdf:	85 c0                	test   eax,eax
c000ebe1:	7e 39                	jle    c000ec1c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebe3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe7:	89 f3                	mov    ebx,esi
c000ebe9:	c1 e0 0c             	shl    eax,0xc
c000ebec:	01 f0                	add    eax,esi
c000ebee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebf2:	55                   	push   ebp
c000ebf3:	53                   	push   ebx
c000ebf4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf8:	29 f0                	sub    eax,esi
c000ebfa:	01 d8                	add    eax,ebx
c000ebfc:	50                   	push   eax
c000ebfd:	57                   	push   edi
c000ebfe:	e8 c1 fc ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec0b:	74 03                	je     c000ec10 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec0d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec10:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec16:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec1a:	75 d6                	jne    c000ebf2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec1c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec21:	74 42                	je     c000ec65 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec27:	89 f3                	mov    ebx,esi
c000ec29:	c1 e0 0c             	shl    eax,0xc
c000ec2c:	c1 eb 0a             	shr    ebx,0xa
c000ec2f:	01 f0                	add    eax,esi
c000ec31:	c1 e8 0a             	shr    eax,0xa
c000ec34:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec3f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec45:	2d 00 00 40 00       	sub    eax,0x400000
c000ec4a:	39 c3                	cmp    ebx,eax
c000ec4c:	77 0d                	ja     c000ec5b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec4e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec51:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec57:	39 d8                	cmp    eax,ebx
c000ec59:	73 f3                	jae    c000ec4e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec5b:	83 c4 1c             	add    esp,0x1c
c000ec5e:	89 f0                	mov    eax,esi
c000ec60:	5b                   	pop    ebx
c000ec61:	5e                   	pop    esi
c000ec62:	5f                   	pop    edi
c000ec63:	5d                   	pop    ebp
c000ec64:	c3                   	ret    
c000ec65:	e8 5b 0b 01 00       	call   c001f7c5 <CPU::readCR3()>
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	50                   	push   eax
c000ec6e:	e8 64 0b 01 00       	call   c001f7d7 <CPU::writeCR3(unsigned long)>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	89 f0                	mov    eax,esi
c000ec78:	83 c4 1c             	add    esp,0x1c
c000ec7b:	5b                   	pop    ebx
c000ec7c:	5e                   	pop    esi
c000ec7d:	5f                   	pop    edi
c000ec7e:	5d                   	pop    ebp
c000ec7f:	c3                   	ret    

c000ec80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec80:	55                   	push   ebp
c000ec81:	57                   	push   edi
c000ec82:	56                   	push   esi
c000ec83:	53                   	push   ebx
c000ec84:	83 ec 1c             	sub    esp,0x1c
c000ec87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec8b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec8f:	09 f0                	or     eax,esi
c000ec91:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec95:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec99:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec9e:	75 4c                	jne    c000ecec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000eca0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eca4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca7:	c1 eb 16             	shr    ebx,0x16
c000ecaa:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecb1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecb5:	74 4f                	je     c000ed06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecb7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecbb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecbf:	c1 e8 0a             	shr    eax,0xa
c000ecc2:	80 fa 01             	cmp    dl,0x1
c000ecc5:	19 d2                	sbb    edx,edx
c000ecc7:	25 fc 0f 00 00       	and    eax,0xffc
c000eccc:	c1 e3 0c             	shl    ebx,0xc
c000eccf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ecd5:	01 d8                	add    eax,ebx
c000ecd7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ecdb:	09 d9                	or     ecx,ebx
c000ecdd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ece4:	83 c4 1c             	add    esp,0x1c
c000ece7:	5b                   	pop    ebx
c000ece8:	5e                   	pop    esi
c000ece9:	5f                   	pop    edi
c000ecea:	5d                   	pop    ebp
c000eceb:	c3                   	ret    
c000ecec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ecf0:	83 ec 0c             	sub    esp,0xc
c000ecf3:	68 e0 17 02 c0       	push   0xc00217e0
c000ecf8:	e8 2b 6d 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed04:	eb 9a                	jmp    c000eca0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed0a:	e8 a8 d8 ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000ed0f:	89 c5                	mov    ebp,eax
c000ed11:	e8 6f f6 ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c000ed16:	83 ec 0c             	sub    esp,0xc
c000ed19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed1d:	6a 01                	push   0x1
c000ed1f:	e8 d4 f4 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c000ed24:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed2b:	6a 01                	push   0x1
c000ed2d:	50                   	push   eax
c000ed2e:	55                   	push   ebp
c000ed2f:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed35:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed39:	51                   	push   ecx
c000ed3a:	e8 77 fe ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed3f:	83 c4 1c             	add    esp,0x1c
c000ed42:	68 00 10 00 00       	push   0x1000
c000ed47:	6a 00                	push   0x0
c000ed49:	50                   	push   eax
c000ed4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed4e:	e8 70 19 ff ff       	call   c00006c3 <memset>
c000ed53:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed5a:	e8 e6 f7 ff ff       	call   c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c000ed5f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed69:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed6c:	e9 46 ff ff ff       	jmp    c000ecb7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed71:	90                   	nop

c000ed72 <VAS::VAS(bool)>:
c000ed72:	53                   	push   ebx
c000ed73:	83 ec 28             	sub    esp,0x28
c000ed76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed7a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed8d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed91:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed94:	e8 1e d8 ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000ed99:	89 c2                	mov    edx,eax
c000ed9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eda2:	e8 de f5 ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c000eda7:	89 c3                	mov    ebx,eax
c000eda9:	83 ec 0c             	sub    esp,0xc
c000edac:	6a 01                	push   0x1
c000edae:	e8 45 f4 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c000edb3:	83 c4 10             	add    esp,0x10
c000edb6:	89 c2                	mov    edx,eax
c000edb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edbc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edbf:	83 ec 0c             	sub    esp,0xc
c000edc2:	6a 03                	push   0x3
c000edc4:	6a 01                	push   0x1
c000edc6:	52                   	push   edx
c000edc7:	50                   	push   eax
c000edc8:	53                   	push   ebx
c000edc9:	e8 e8 fd ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edce:	83 c4 20             	add    esp,0x20
c000edd1:	89 c2                	mov    edx,eax
c000edd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edda:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ede2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000edea:	7f 1c                	jg     c000ee08 <VAS::VAS(bool)+0x96>
c000edec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edf7:	c1 e2 02             	shl    edx,0x2
c000edfa:	01 d0                	add    eax,edx
c000edfc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee02:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee06:	eb da                	jmp    c000ede2 <VAS::VAS(bool)+0x70>
c000ee08:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee10:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee18:	7f 71                	jg     c000ee8b <VAS::VAS(bool)+0x119>
c000ee1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee1e:	2d 00 02 00 00       	sub    eax,0x200
c000ee23:	c1 e0 0c             	shl    eax,0xc
c000ee26:	83 c8 03             	or     eax,0x3
c000ee29:	89 c3                	mov    ebx,eax
c000ee2b:	e8 8c 5a 00 00       	call   c00148bc <thisCPU()>
c000ee30:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee36:	83 e0 10             	and    eax,0x10
c000ee39:	84 c0                	test   al,al
c000ee3b:	74 07                	je     c000ee44 <VAS::VAS(bool)+0xd2>
c000ee3d:	b8 00 01 00 00       	mov    eax,0x100
c000ee42:	eb 05                	jmp    c000ee49 <VAS::VAS(bool)+0xd7>
c000ee44:	b8 00 00 00 00       	mov    eax,0x0
c000ee49:	09 d8                	or     eax,ebx
c000ee4b:	89 c1                	mov    ecx,eax
c000ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee58:	c1 e2 02             	shl    edx,0x2
c000ee5b:	01 d0                	add    eax,edx
c000ee5d:	89 ca                	mov    edx,ecx
c000ee5f:	89 10                	mov    DWORD PTR [eax],edx
c000ee61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee65:	2d 40 03 00 00       	sub    eax,0x340
c000ee6a:	83 f8 7f             	cmp    eax,0x7f
c000ee6d:	77 16                	ja     c000ee85 <VAS::VAS(bool)+0x113>
c000ee6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee7a:	c1 e2 02             	shl    edx,0x2
c000ee7d:	01 d0                	add    eax,edx
c000ee7f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee85:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee89:	eb 85                	jmp    c000ee10 <VAS::VAS(bool)+0x9e>
c000ee8b:	e8 2c 5a 00 00       	call   c00148bc <thisCPU()>
c000ee90:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee96:	83 e0 10             	and    eax,0x10
c000ee99:	84 c0                	test   al,al
c000ee9b:	74 07                	je     c000eea4 <VAS::VAS(bool)+0x132>
c000ee9d:	b8 03 41 00 00       	mov    eax,0x4103
c000eea2:	eb 05                	jmp    c000eea9 <VAS::VAS(bool)+0x137>
c000eea4:	b8 03 40 00 00       	mov    eax,0x4003
c000eea9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eead:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eeb0:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eeb6:	89 02                	mov    DWORD PTR [edx],eax
c000eeb8:	e8 ff 59 00 00       	call   c00148bc <thisCPU()>
c000eebd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eec3:	83 ec 08             	sub    esp,0x8
c000eec6:	50                   	push   eax
c000eec7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eecb:	e8 c8 fc ff ff       	call   c000eb98 <VAS::setCPUSpecific(unsigned long)>
c000eed0:	83 c4 10             	add    esp,0x10
c000eed3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed7:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eeda:	e8 dd 59 00 00       	call   c00148bc <thisCPU()>
c000eedf:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eee5:	83 e0 10             	and    eax,0x10
c000eee8:	84 c0                	test   al,al
c000eeea:	74 07                	je     c000eef3 <VAS::VAS(bool)+0x181>
c000eeec:	b8 00 01 00 00       	mov    eax,0x100
c000eef1:	eb 05                	jmp    c000eef8 <VAS::VAS(bool)+0x186>
c000eef3:	b8 00 00 00 00       	mov    eax,0x0
c000eef8:	09 d8                	or     eax,ebx
c000eefa:	89 c2                	mov    edx,eax
c000eefc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef03:	05 fc 0f 00 00       	add    eax,0xffc
c000ef08:	83 ca 03             	or     edx,0x3
c000ef0b:	89 10                	mov    DWORD PTR [eax],edx
c000ef0d:	e8 aa 59 00 00       	call   c00148bc <thisCPU()>
c000ef12:	83 ec 0c             	sub    esp,0xc
c000ef15:	50                   	push   eax
c000ef16:	e8 ef 19 00 00       	call   c001090a <Device::getName()>
c000ef1b:	83 c4 10             	add    esp,0x10
c000ef1e:	83 ec 08             	sub    esp,0x8
c000ef21:	68 df 18 02 c0       	push   0xc00218df
c000ef26:	50                   	push   eax
c000ef27:	e8 87 18 ff ff       	call   c00007b3 <strcmp>
c000ef2c:	83 c4 10             	add    esp,0x10
c000ef2f:	85 c0                	test   eax,eax
c000ef31:	0f 94 c0             	sete   al
c000ef34:	84 c0                	test   al,al
c000ef36:	74 64                	je     c000ef9c <VAS::VAS(bool)+0x22a>
c000ef38:	e8 d2 9a 00 00       	call   c0018a0f <disableIRQs()>
c000ef3d:	e8 7a 59 00 00       	call   c00148bc <thisCPU()>
c000ef42:	05 7c 09 00 00       	add    eax,0x97c
c000ef47:	83 ec 0c             	sub    esp,0xc
c000ef4a:	50                   	push   eax
c000ef4b:	e8 04 cb ff ff       	call   c000ba54 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef58:	89 c3                	mov    ebx,eax
c000ef5a:	e8 5d 59 00 00       	call   c00148bc <thisCPU()>
c000ef5f:	05 7c 09 00 00       	add    eax,0x97c
c000ef64:	83 ec 0c             	sub    esp,0xc
c000ef67:	50                   	push   eax
c000ef68:	e8 e7 ca ff ff       	call   c000ba54 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef6d:	83 c4 10             	add    esp,0x10
c000ef70:	83 ec 08             	sub    esp,0x8
c000ef73:	50                   	push   eax
c000ef74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef78:	e8 a9 f5 ff ff       	call   c000e526 <VAS::getPageTableEntry(unsigned long)>
c000ef7d:	83 c4 10             	add    esp,0x10
c000ef80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef82:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef87:	6a 11                	push   0x11
c000ef89:	53                   	push   ebx
c000ef8a:	50                   	push   eax
c000ef8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef8f:	e8 30 f9 ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef94:	83 c4 10             	add    esp,0x10
c000ef97:	e8 86 9a 00 00       	call   c0018a22 <enableIRQs()>
c000ef9c:	90                   	nop
c000ef9d:	83 c4 28             	add    esp,0x28
c000efa0:	5b                   	pop    ebx
c000efa1:	c3                   	ret    

c000efa2 <mapVASFirstTime>:
c000efa2:	55                   	push   ebp
c000efa3:	57                   	push   edi
c000efa4:	56                   	push   esi
c000efa5:	53                   	push   ebx
c000efa6:	83 ec 0c             	sub    esp,0xc
c000efa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efb1:	4a                   	dec    edx
c000efb2:	0f 84 99 00 00 00    	je     c000f051 <mapVASFirstTime+0xaf>
c000efb8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efbb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efbe:	c1 e5 15             	shl    ebp,0x15
c000efc1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efc6:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efcb:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efd1:	29 eb                	sub    ebx,ebp
c000efd3:	29 ee                	sub    esi,ebp
c000efd5:	e8 dd d5 ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000efda:	83 ec 0c             	sub    esp,0xc
c000efdd:	68 03 04 00 00       	push   0x403
c000efe2:	6a 01                	push   0x1
c000efe4:	53                   	push   ebx
c000efe5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000efeb:	50                   	push   eax
c000efec:	57                   	push   edi
c000efed:	e8 c4 fb ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eff2:	83 c4 20             	add    esp,0x20
c000eff5:	39 f3                	cmp    ebx,esi
c000eff7:	75 dc                	jne    c000efd5 <mapVASFirstTime+0x33>
c000eff9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000effe:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f003:	29 e8                	sub    eax,ebp
c000f005:	29 ee                	sub    esi,ebp
c000f007:	89 c5                	mov    ebp,eax
c000f009:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f00d:	19 db                	sbb    ebx,ebx
c000f00f:	e8 a3 d5 ff ff       	call   c000c5b7 <Phys::allocatePage()>
c000f014:	83 e3 04             	and    ebx,0x4
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	81 c3 03 04 00 00    	add    ebx,0x403
c000f020:	53                   	push   ebx
c000f021:	6a 01                	push   0x1
c000f023:	56                   	push   esi
c000f024:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f02a:	50                   	push   eax
c000f02b:	57                   	push   edi
c000f02c:	e8 85 fb ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f031:	83 c4 20             	add    esp,0x20
c000f034:	39 f5                	cmp    ebp,esi
c000f036:	75 d1                	jne    c000f009 <mapVASFirstTime+0x67>
c000f038:	e8 88 07 01 00       	call   c001f7c5 <CPU::readCR3()>
c000f03d:	83 ec 0c             	sub    esp,0xc
c000f040:	50                   	push   eax
c000f041:	e8 91 07 01 00       	call   c001f7d7 <CPU::writeCR3(unsigned long)>
c000f046:	83 c4 10             	add    esp,0x10
c000f049:	83 c4 0c             	add    esp,0xc
c000f04c:	5b                   	pop    ebx
c000f04d:	5e                   	pop    esi
c000f04e:	5f                   	pop    edi
c000f04f:	5d                   	pop    ebp
c000f050:	c3                   	ret    
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	68 ed 18 02 c0       	push   0xc00218ed
c000f059:	e8 b5 01 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000f05e:	83 c4 10             	add    esp,0x10
c000f061:	83 c4 0c             	add    esp,0xc
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	5f                   	pop    edi
c000f067:	5d                   	pop    ebp
c000f068:	c3                   	ret    

c000f069 <__cxa_atexit>:
c000f069:	31 c0                	xor    eax,eax
c000f06b:	c3                   	ret    

c000f06c <__cxa_finalize>:
c000f06c:	c3                   	ret    

c000f06d <__stack_chk_fail>:
c000f06d:	55                   	push   ebp
c000f06e:	89 e5                	mov    ebp,esp
c000f070:	83 ec 10             	sub    esp,0x10
c000f073:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f076:	68 06 19 02 c0       	push   0xc0021906
c000f07b:	e8 93 01 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000f080:	58                   	pop    eax
c000f081:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f084:	5a                   	pop    edx
c000f085:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f088:	68 06 19 02 c0       	push   0xc0021906
c000f08d:	e8 81 01 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000f092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f095:	59                   	pop    ecx
c000f096:	5a                   	pop    edx
c000f097:	8b 00                	mov    eax,DWORD PTR [eax]
c000f099:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f09c:	68 06 19 02 c0       	push   0xc0021906
c000f0a1:	e8 6d 01 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000f0a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a9:	59                   	pop    ecx
c000f0aa:	5a                   	pop    edx
c000f0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0b2:	68 06 19 02 c0       	push   0xc0021906
c000f0b7:	e8 57 01 00 00       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c000f0bc:	c7 04 24 0e 19 02 c0 	mov    DWORD PTR [esp],0xc002190e
c000f0c3:	e8 60 69 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000f0c8:	83 c4 10             	add    esp,0x10
c000f0cb:	c9                   	leave  
c000f0cc:	c3                   	ret    

c000f0cd <__cxa_pure_virtual>:
c000f0cd:	83 ec 18             	sub    esp,0x18
c000f0d0:	68 26 19 02 c0       	push   0xc0021926
c000f0d5:	e8 4e 69 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c000f0da:	83 c4 1c             	add    esp,0x1c
c000f0dd:	c3                   	ret    

c000f0de <operator new(unsigned long)>:
c000f0de:	e9 fe ce ff ff       	jmp    c000bfe1 <malloc>

c000f0e3 <operator new[](unsigned long)>:
c000f0e3:	e9 f9 ce ff ff       	jmp    c000bfe1 <malloc>

c000f0e8 <operator delete(void*)>:
c000f0e8:	e9 14 cf ff ff       	jmp    c000c001 <rfree>

c000f0ed <operator delete(void*, unsigned long)>:
c000f0ed:	e9 0f cf ff ff       	jmp    c000c001 <rfree>

c000f0f2 <operator delete[](void*)>:
c000f0f2:	e9 0a cf ff ff       	jmp    c000c001 <rfree>

c000f0f7 <operator delete[](void*, unsigned long)>:
c000f0f7:	e9 05 cf ff ff       	jmp    c000c001 <rfree>

c000f0fc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f0fc:	57                   	push   edi
c000f0fd:	56                   	push   esi
c000f0fe:	be 3d 19 02 c0       	mov    esi,0xc002193d
c000f103:	53                   	push   ebx
c000f104:	83 ec 40             	sub    esp,0x40
c000f107:	a0 3c 19 02 c0       	mov    al,ds:0xc002193c
c000f10c:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f110:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f114:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f118:	b8 3e 00 00 00       	mov    eax,0x3e
c000f11d:	f7 c7 02 00 00 00    	test   edi,0x2
c000f123:	75 69                	jne    c000f18e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f125:	89 c1                	mov    ecx,eax
c000f127:	c1 e9 02             	shr    ecx,0x2
c000f12a:	fc                   	cld    
c000f12b:	31 d2                	xor    edx,edx
c000f12d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f12f:	a8 02                	test   al,0x2
c000f131:	74 0b                	je     c000f13e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f133:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f136:	66 89 17             	mov    WORD PTR [edi],dx
c000f139:	ba 02 00 00 00       	mov    edx,0x2
c000f13e:	a8 01                	test   al,0x1
c000f140:	74 06                	je     c000f148 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f142:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f145:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f148:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f14c:	83 f9 3e             	cmp    ecx,0x3e
c000f14f:	7e 05                	jle    c000f156 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f151:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f156:	89 df                	mov    edi,ebx
c000f158:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f15c:	eb 02                	jmp    c000f160 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f15e:	89 c7                	mov    edi,eax
c000f160:	31 d2                	xor    edx,edx
c000f162:	89 f8                	mov    eax,edi
c000f164:	46                   	inc    esi
c000f165:	f7 f1                	div    ecx
c000f167:	39 cf                	cmp    edi,ecx
c000f169:	73 f3                	jae    c000f15e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f16b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f16e:	eb 02                	jmp    c000f172 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f170:	89 c3                	mov    ebx,eax
c000f172:	31 d2                	xor    edx,edx
c000f174:	89 d8                	mov    eax,ebx
c000f176:	f7 f1                	div    ecx
c000f178:	4e                   	dec    esi
c000f179:	39 cb                	cmp    ebx,ecx
c000f17b:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f17f:	88 16                	mov    BYTE PTR [esi],dl
c000f181:	73 ed                	jae    c000f170 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f183:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f187:	83 c4 40             	add    esp,0x40
c000f18a:	5b                   	pop    ebx
c000f18b:	5e                   	pop    esi
c000f18c:	5f                   	pop    edi
c000f18d:	c3                   	ret    
c000f18e:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f191:	83 c7 02             	add    edi,0x2
c000f194:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f198:	83 c6 02             	add    esi,0x2
c000f19b:	83 e8 02             	sub    eax,0x2
c000f19e:	eb 85                	jmp    c000f125 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f1a0 <Dbg::logc(char)>:
c000f1a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a4:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1a9:	ec                   	in     al,dx
c000f1aa:	a8 20                	test   al,0x20
c000f1ac:	74 fb                	je     c000f1a9 <Dbg::logc(char)+0x9>
c000f1ae:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1b3:	88 c8                	mov    al,cl
c000f1b5:	ee                   	out    dx,al
c000f1b6:	c3                   	ret    

c000f1b7 <Dbg::logs(char*)>:
c000f1b7:	53                   	push   ebx
c000f1b8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1bf:	84 c0                	test   al,al
c000f1c1:	74 0f                	je     c000f1d2 <Dbg::logs(char*)+0x1b>
c000f1c3:	43                   	inc    ebx
c000f1c4:	50                   	push   eax
c000f1c5:	e8 d6 ff ff ff       	call   c000f1a0 <Dbg::logc(char)>
c000f1ca:	5a                   	pop    edx
c000f1cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1ce:	84 c0                	test   al,al
c000f1d0:	75 f1                	jne    c000f1c3 <Dbg::logs(char*)+0xc>
c000f1d2:	5b                   	pop    ebx
c000f1d3:	c3                   	ret    

c000f1d4 <Dbg::logWriteInt(unsigned int)>:
c000f1d4:	83 ec 10             	sub    esp,0x10
c000f1d7:	6a 0a                	push   0xa
c000f1d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1dd:	50                   	push   eax
c000f1de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1e2:	50                   	push   eax
c000f1e3:	e8 14 ff ff ff       	call   c000f0fc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1e8:	50                   	push   eax
c000f1e9:	e8 c9 ff ff ff       	call   c000f1b7 <Dbg::logs(char*)>
c000f1ee:	83 c4 20             	add    esp,0x20
c000f1f1:	c3                   	ret    

c000f1f2 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1f2:	83 ec 10             	sub    esp,0x10
c000f1f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1f9:	50                   	push   eax
c000f1fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1fe:	50                   	push   eax
c000f1ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f203:	52                   	push   edx
c000f204:	e8 f3 fe ff ff       	call   c000f0fc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f209:	50                   	push   eax
c000f20a:	e8 a8 ff ff ff       	call   c000f1b7 <Dbg::logs(char*)>
c000f20f:	83 c4 20             	add    esp,0x20
c000f212:	c3                   	ret    

c000f213 <Dbg::kprintf(char const*, ...)>:
c000f213:	55                   	push   ebp
c000f214:	57                   	push   edi
c000f215:	56                   	push   esi
c000f216:	53                   	push   ebx
c000f217:	83 ec 0c             	sub    esp,0xc
c000f21a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f21e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f222:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f226:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f229:	84 c0                	test   al,al
c000f22b:	74 4d                	je     c000f27a <Dbg::kprintf(char const*, ...)+0x67>
c000f22d:	31 ff                	xor    edi,edi
c000f22f:	8d 77 01             	lea    esi,[edi+0x1]
c000f232:	3c 25                	cmp    al,0x25
c000f234:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f237:	0f 85 ec 00 00 00    	jne    c000f329 <Dbg::kprintf(char const*, ...)+0x116>
c000f23d:	83 c7 02             	add    edi,0x2
c000f240:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f243:	83 e8 25             	sub    eax,0x25
c000f246:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f249:	3c 53                	cmp    al,0x53
c000f24b:	0f 87 c0 00 00 00    	ja     c000f311 <Dbg::kprintf(char const*, ...)+0xfe>
c000f251:	25 ff 00 00 00       	and    eax,0xff
c000f256:	ff 24 85 7c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde684]
c000f25d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f261:	89 c8                	mov    eax,ecx
c000f263:	83 c1 04             	add    ecx,0x4
c000f266:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f26a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26c:	50                   	push   eax
c000f26d:	e8 45 ff ff ff       	call   c000f1b7 <Dbg::logs(char*)>
c000f272:	58                   	pop    eax
c000f273:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f276:	84 c0                	test   al,al
c000f278:	75 b5                	jne    c000f22f <Dbg::kprintf(char const*, ...)+0x1c>
c000f27a:	83 c4 0c             	add    esp,0xc
c000f27d:	5b                   	pop    ebx
c000f27e:	5e                   	pop    esi
c000f27f:	5f                   	pop    edi
c000f280:	5d                   	pop    ebp
c000f281:	c3                   	ret    
c000f282:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f286:	89 d0                	mov    eax,edx
c000f288:	83 c2 04             	add    edx,0x4
c000f28b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f28f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f291:	50                   	push   eax
c000f292:	e8 3d ff ff ff       	call   c000f1d4 <Dbg::logWriteInt(unsigned int)>
c000f297:	58                   	pop    eax
c000f298:	eb d9                	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f29a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f29e:	89 d0                	mov    eax,edx
c000f2a0:	83 c2 04             	add    edx,0x4
c000f2a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2a7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2aa:	50                   	push   eax
c000f2ab:	e8 f0 fe ff ff       	call   c000f1a0 <Dbg::logc(char)>
c000f2b0:	58                   	pop    eax
c000f2b1:	eb c0                	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f2b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2b7:	89 c8                	mov    eax,ecx
c000f2b9:	83 c1 04             	add    ecx,0x4
c000f2bc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2c2:	55                   	push   ebp
c000f2c3:	e8 0c ff ff ff       	call   c000f1d4 <Dbg::logWriteInt(unsigned int)>
c000f2c8:	58                   	pop    eax
c000f2c9:	eb a8                	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f2cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2cf:	89 c8                	mov    eax,ecx
c000f2d1:	83 c1 04             	add    ecx,0x4
c000f2d4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2d8:	6a 10                	push   0x10
c000f2da:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2dc:	51                   	push   ecx
c000f2dd:	e8 10 ff ff ff       	call   c000f1f2 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2e2:	5d                   	pop    ebp
c000f2e3:	58                   	pop    eax
c000f2e4:	eb 8d                	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f2e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2ea:	89 d0                	mov    eax,edx
c000f2ec:	83 c2 08             	add    edx,0x8
c000f2ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2f3:	6a 10                	push   0x10
c000f2f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f7:	50                   	push   eax
c000f2f8:	e8 f5 fe ff ff       	call   c000f1f2 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2fd:	58                   	pop    eax
c000f2fe:	5a                   	pop    edx
c000f2ff:	e9 6f ff ff ff       	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f304:	6a 25                	push   0x25
c000f306:	e8 95 fe ff ff       	call   c000f1a0 <Dbg::logc(char)>
c000f30b:	5a                   	pop    edx
c000f30c:	e9 62 ff ff ff       	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f311:	6a 25                	push   0x25
c000f313:	e8 88 fe ff ff       	call   c000f1a0 <Dbg::logc(char)>
c000f318:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f31c:	50                   	push   eax
c000f31d:	e8 7e fe ff ff       	call   c000f1a0 <Dbg::logc(char)>
c000f322:	5a                   	pop    edx
c000f323:	59                   	pop    ecx
c000f324:	e9 4a ff ff ff       	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f329:	50                   	push   eax
c000f32a:	89 f7                	mov    edi,esi
c000f32c:	e8 6f fe ff ff       	call   c000f1a0 <Dbg::logc(char)>
c000f331:	89 ee                	mov    esi,ebp
c000f333:	58                   	pop    eax
c000f334:	e9 3a ff ff ff       	jmp    c000f273 <Dbg::kprintf(char const*, ...)+0x60>
c000f339:	90                   	nop

c000f33a <File::read(unsigned long long, void*, int*)>:
c000f33a:	53                   	push   ebx
c000f33b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f33f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f343:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f34a:	3c 19                	cmp    al,0x19
c000f34c:	77 35                	ja     c000f383 <File::read(unsigned long long, void*, int*)+0x49>
c000f34e:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c000f355:	85 c0                	test   eax,eax
c000f357:	74 2a                	je     c000f383 <File::read(unsigned long long, void*, int*)+0x49>
c000f359:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f35f:	85 c0                	test   eax,eax
c000f361:	74 20                	je     c000f383 <File::read(unsigned long long, void*, int*)+0x49>
c000f363:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f367:	74 21                	je     c000f38a <File::read(unsigned long long, void*, int*)+0x50>
c000f369:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f36b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f36f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f375:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f379:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f37d:	5b                   	pop    ebx
c000f37e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f381:	ff e0                	jmp    eax
c000f383:	b8 0b 00 00 00       	mov    eax,0xb
c000f388:	eb 05                	jmp    c000f38f <File::read(unsigned long long, void*, int*)+0x55>
c000f38a:	b8 05 00 00 00       	mov    eax,0x5
c000f38f:	5b                   	pop    ebx
c000f390:	c3                   	ret    
c000f391:	90                   	nop

c000f392 <File::write(unsigned long long, void*, int*)>:
c000f392:	53                   	push   ebx
c000f393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f397:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f39b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3a2:	3c 19                	cmp    al,0x19
c000f3a4:	77 35                	ja     c000f3db <File::write(unsigned long long, void*, int*)+0x49>
c000f3a6:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c000f3ad:	85 c0                	test   eax,eax
c000f3af:	74 2a                	je     c000f3db <File::write(unsigned long long, void*, int*)+0x49>
c000f3b1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3b7:	85 c0                	test   eax,eax
c000f3b9:	74 20                	je     c000f3db <File::write(unsigned long long, void*, int*)+0x49>
c000f3bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3bf:	74 21                	je     c000f3e2 <File::write(unsigned long long, void*, int*)+0x50>
c000f3c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3c7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3d5:	5b                   	pop    ebx
c000f3d6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3d9:	ff e0                	jmp    eax
c000f3db:	b8 0b 00 00 00       	mov    eax,0xb
c000f3e0:	eb 05                	jmp    c000f3e7 <File::write(unsigned long long, void*, int*)+0x55>
c000f3e2:	b8 05 00 00 00       	mov    eax,0x5
c000f3e7:	5b                   	pop    ebx
c000f3e8:	c3                   	ret    
c000f3e9:	90                   	nop

c000f3ea <Directory::read(unsigned long long, void*, int*)>:
c000f3ea:	53                   	push   ebx
c000f3eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3f3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3fa:	3c 19                	cmp    al,0x19
c000f3fc:	77 35                	ja     c000f433 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f3fe:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c000f405:	85 c0                	test   eax,eax
c000f407:	74 2a                	je     c000f433 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f409:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f40f:	85 c0                	test   eax,eax
c000f411:	74 20                	je     c000f433 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f413:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f417:	74 21                	je     c000f43a <Directory::read(unsigned long long, void*, int*)+0x50>
c000f419:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f41b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f41f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f425:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f429:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f42d:	5b                   	pop    ebx
c000f42e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f431:	ff e0                	jmp    eax
c000f433:	b8 0b 00 00 00       	mov    eax,0xb
c000f438:	eb 05                	jmp    c000f43f <Directory::read(unsigned long long, void*, int*)+0x55>
c000f43a:	b8 05 00 00 00       	mov    eax,0x5
c000f43f:	5b                   	pop    ebx
c000f440:	c3                   	ret    
c000f441:	90                   	nop

c000f442 <Directory::write(unsigned long long, void*, int*)>:
c000f442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f446:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f44d:	b8 0b 00 00 00       	mov    eax,0xb
c000f452:	80 fa 19             	cmp    dl,0x19
c000f455:	77 18                	ja     c000f46f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f457:	8b 14 95 60 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb2a0]
c000f45e:	85 d2                	test   edx,edx
c000f460:	74 0d                	je     c000f46f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f462:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f469:	19 c0                	sbb    eax,eax
c000f46b:	83 e0 0a             	and    eax,0xa
c000f46e:	40                   	inc    eax
c000f46f:	c3                   	ret    

c000f470 <File::isAtty()>:
c000f470:	31 c0                	xor    eax,eax
c000f472:	c3                   	ret    
c000f473:	90                   	nop

c000f474 <Directory::isAtty()>:
c000f474:	31 c0                	xor    eax,eax
c000f476:	c3                   	ret    
c000f477:	90                   	nop

c000f478 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f478:	b8 0a 00 00 00       	mov    eax,0xa
c000f47d:	c3                   	ret    

c000f47e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f47e:	b8 0a 00 00 00       	mov    eax,0xa
c000f483:	c3                   	ret    

c000f484 <File::~File()>:
c000f484:	83 ec 0c             	sub    esp,0xc
c000f487:	ba 38 1b 02 c0       	mov    edx,0xc0021b38
c000f48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f490:	89 10                	mov    DWORD PTR [eax],edx
c000f492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f496:	83 ec 0c             	sub    esp,0xc
c000f499:	50                   	push   eax
c000f49a:	e8 c5 ea ff ff       	call   c000df64 <UnixFile::~UnixFile()>
c000f49f:	83 c4 10             	add    esp,0x10
c000f4a2:	90                   	nop
c000f4a3:	83 c4 0c             	add    esp,0xc
c000f4a6:	c3                   	ret    
c000f4a7:	90                   	nop

c000f4a8 <File::~File()>:
c000f4a8:	83 ec 0c             	sub    esp,0xc
c000f4ab:	83 ec 0c             	sub    esp,0xc
c000f4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b2:	e8 cd ff ff ff       	call   c000f484 <File::~File()>
c000f4b7:	83 c4 10             	add    esp,0x10
c000f4ba:	83 ec 08             	sub    esp,0x8
c000f4bd:	68 14 01 00 00       	push   0x114
c000f4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c6:	e8 22 fc ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c000f4cb:	83 c4 10             	add    esp,0x10
c000f4ce:	83 c4 0c             	add    esp,0xc
c000f4d1:	c3                   	ret    

c000f4d2 <Directory::~Directory()>:
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c000f4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4de:	89 10                	mov    DWORD PTR [eax],edx
c000f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e4:	83 ec 0c             	sub    esp,0xc
c000f4e7:	50                   	push   eax
c000f4e8:	e8 77 ea ff ff       	call   c000df64 <UnixFile::~UnixFile()>
c000f4ed:	83 c4 10             	add    esp,0x10
c000f4f0:	90                   	nop
c000f4f1:	83 c4 0c             	add    esp,0xc
c000f4f4:	c3                   	ret    
c000f4f5:	90                   	nop

c000f4f6 <Directory::~Directory()>:
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	83 ec 0c             	sub    esp,0xc
c000f4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f500:	e8 cd ff ff ff       	call   c000f4d2 <Directory::~Directory()>
c000f505:	83 c4 10             	add    esp,0x10
c000f508:	83 ec 08             	sub    esp,0x8
c000f50b:	68 14 01 00 00       	push   0x114
c000f510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f514:	e8 d4 fb ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	83 c4 0c             	add    esp,0xc
c000f51f:	c3                   	ret    

c000f520 <Filesystem::Filesystem()>:
c000f520:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000f525:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f529:	89 10                	mov    DWORD PTR [eax],edx
c000f52b:	8b 15 c8 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248c8
c000f531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f535:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f53c:	a3 c8 48 02 c0       	mov    ds:0xc00248c8,eax
c000f541:	90                   	nop
c000f542:	c3                   	ret    
c000f543:	90                   	nop

c000f544 <Filesystem::~Filesystem()>:
c000f544:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000f549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f54d:	89 10                	mov    DWORD PTR [eax],edx
c000f54f:	90                   	nop
c000f550:	c3                   	ret    
c000f551:	90                   	nop

c000f552 <Filesystem::~Filesystem()>:
c000f552:	83 ec 0c             	sub    esp,0xc
c000f555:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f559:	e8 e6 ff ff ff       	call   c000f544 <Filesystem::~Filesystem()>
c000f55e:	83 c4 04             	add    esp,0x4
c000f561:	83 ec 08             	sub    esp,0x8
c000f564:	6a 08                	push   0x8
c000f566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f56a:	e8 7e fb ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c000f56f:	83 c4 10             	add    esp,0x10
c000f572:	83 c4 0c             	add    esp,0xc
c000f575:	c3                   	ret    

c000f576 <initVFS()>:
c000f576:	83 ec 18             	sub    esp,0x18
c000f579:	6a 08                	push   0x8
c000f57b:	e8 5e fb ff ff       	call   c000f0de <operator new(unsigned long)>
c000f580:	89 04 24             	mov    DWORD PTR [esp],eax
c000f583:	e8 c0 b3 00 00       	call   c001a948 <FAT::FAT()>
c000f588:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f58f:	e8 4a fb ff ff       	call   c000f0de <operator new(unsigned long)>
c000f594:	89 04 24             	mov    DWORD PTR [esp],eax
c000f597:	e8 4c c6 00 00       	call   c001bbe8 <ISO9660::ISO9660()>
c000f59c:	83 c4 1c             	add    esp,0x1c
c000f59f:	c3                   	ret    

c000f5a0 <standardiseFiles(char*, char const*, char const*)>:
c000f5a0:	55                   	push   ebp
c000f5a1:	57                   	push   edi
c000f5a2:	56                   	push   esi
c000f5a3:	53                   	push   ebx
c000f5a4:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5aa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5b1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5b8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5bf:	68 00 04 00 00       	push   0x400
c000f5c4:	6a 00                	push   0x0
c000f5c6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5ca:	56                   	push   esi
c000f5cb:	e8 f3 10 ff ff       	call   c00006c3 <memset>
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5d7:	75 0b                	jne    c000f5e4 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5d9:	50                   	push   eax
c000f5da:	50                   	push   eax
c000f5db:	57                   	push   edi
c000f5dc:	56                   	push   esi
c000f5dd:	e8 80 11 ff ff       	call   c0000762 <strcpy>
c000f5e2:	eb 41                	jmp    c000f625 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5e4:	8a 07                	mov    al,BYTE PTR [edi]
c000f5e6:	3c 5c                	cmp    al,0x5c
c000f5e8:	74 04                	je     c000f5ee <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5ea:	3c 2f                	cmp    al,0x2f
c000f5ec:	75 18                	jne    c000f606 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5ee:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5f1:	3c 60                	cmp    al,0x60
c000f5f3:	7e 03                	jle    c000f5f8 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5f5:	83 e8 20             	sub    eax,0x20
c000f5f8:	88 04 24             	mov    BYTE PTR [esp],al
c000f5fb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f602:	50                   	push   eax
c000f603:	50                   	push   eax
c000f604:	eb 18                	jmp    c000f61e <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f606:	50                   	push   eax
c000f607:	50                   	push   eax
c000f608:	55                   	push   ebp
c000f609:	56                   	push   esi
c000f60a:	e8 53 11 ff ff       	call   c0000762 <strcpy>
c000f60f:	5a                   	pop    edx
c000f610:	59                   	pop    ecx
c000f611:	68 24 2e 02 c0       	push   0xc0022e24
c000f616:	56                   	push   esi
c000f617:	e8 fd 11 ff ff       	call   c0000819 <strcat>
c000f61c:	5d                   	pop    ebp
c000f61d:	58                   	pop    eax
c000f61e:	57                   	push   edi
c000f61f:	56                   	push   esi
c000f620:	e8 f4 11 ff ff       	call   c0000819 <strcat>
c000f625:	83 c4 10             	add    esp,0x10
c000f628:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f62b:	3c 60                	cmp    al,0x60
c000f62d:	7e 03                	jle    c000f632 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f62f:	83 e8 20             	sub    eax,0x20
c000f632:	88 04 24             	mov    BYTE PTR [esp],al
c000f635:	88 03                	mov    BYTE PTR [ebx],al
c000f637:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f63e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f644:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f648:	bf 03 00 00 00       	mov    edi,0x3
c000f64d:	b8 03 00 00 00       	mov    eax,0x3
c000f652:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f655:	84 d2                	test   dl,dl
c000f657:	0f 84 91 00 00 00    	je     c000f6ee <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f65d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f660:	80 fa 2f             	cmp    dl,0x2f
c000f663:	74 05                	je     c000f66a <standardiseFiles(char*, char const*, char const*)+0xca>
c000f665:	80 fa 5c             	cmp    dl,0x5c
c000f668:	75 12                	jne    c000f67c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f66a:	89 c5                	mov    ebp,eax
c000f66c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f671:	74 09                	je     c000f67c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f673:	40                   	inc    eax
c000f674:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f678:	89 cf                	mov    edi,ecx
c000f67a:	eb d6                	jmp    c000f652 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f67c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f681:	75 5b                	jne    c000f6de <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f683:	80 fa 2e             	cmp    dl,0x2e
c000f686:	75 56                	jne    c000f6de <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f688:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f68c:	74 19                	je     c000f6a7 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f68e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f693:	74 53                	je     c000f6e8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f695:	89 f9                	mov    ecx,edi
c000f697:	41                   	inc    ecx
c000f698:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f69b:	80 fa 5c             	cmp    dl,0x5c
c000f69e:	74 f7                	je     c000f697 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6a0:	80 fa 2f             	cmp    dl,0x2f
c000f6a3:	74 f2                	je     c000f697 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6a5:	eb d1                	jmp    c000f678 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6a7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6ac:	74 3a                	je     c000f6e8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6ae:	83 f8 03             	cmp    eax,0x3
c000f6b1:	74 c5                	je     c000f678 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6b3:	41                   	inc    ecx
c000f6b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6b7:	80 fa 2f             	cmp    dl,0x2f
c000f6ba:	74 f7                	je     c000f6b3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6bc:	80 fa 5c             	cmp    dl,0x5c
c000f6bf:	74 f2                	je     c000f6b3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6c1:	48                   	dec    eax
c000f6c2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6c6:	75 06                	jne    c000f6ce <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6c8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6cc:	eb f3                	jmp    c000f6c1 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6d2:	74 07                	je     c000f6db <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6d8:	48                   	dec    eax
c000f6d9:	eb f3                	jmp    c000f6ce <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6db:	40                   	inc    eax
c000f6dc:	eb 9a                	jmp    c000f678 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6de:	80 fa 2f             	cmp    dl,0x2f
c000f6e1:	74 95                	je     c000f678 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e3:	80 fa 5c             	cmp    dl,0x5c
c000f6e6:	74 90                	je     c000f678 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6eb:	40                   	inc    eax
c000f6ec:	eb 8a                	jmp    c000f678 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6f2:	83 ec 0c             	sub    esp,0xc
c000f6f5:	53                   	push   ebx
c000f6f6:	e8 e5 0f ff ff       	call   c00006e0 <strlen>
c000f6fb:	83 c4 10             	add    esp,0x10
c000f6fe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f703:	75 26                	jne    c000f72b <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f705:	83 ec 0c             	sub    esp,0xc
c000f708:	53                   	push   ebx
c000f709:	e8 d2 0f ff ff       	call   c00006e0 <strlen>
c000f70e:	83 c4 10             	add    esp,0x10
c000f711:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f716:	74 26                	je     c000f73e <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f718:	83 ec 0c             	sub    esp,0xc
c000f71b:	53                   	push   ebx
c000f71c:	e8 bf 0f ff ff       	call   c00006e0 <strlen>
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f729:	eb c7                	jmp    c000f6f2 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	53                   	push   ebx
c000f72f:	e8 ac 0f ff ff       	call   c00006e0 <strlen>
c000f734:	83 c4 10             	add    esp,0x10
c000f737:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f73c:	74 c7                	je     c000f705 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f73e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f744:	5b                   	pop    ebx
c000f745:	5e                   	pop    esi
c000f746:	5f                   	pop    edi
c000f747:	5d                   	pop    ebp
c000f748:	c3                   	ret    
c000f749:	90                   	nop

c000f74a <File::File(char const*, Process*)>:
c000f74a:	83 ec 0c             	sub    esp,0xc
c000f74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f751:	83 ec 08             	sub    esp,0x8
c000f754:	6a 00                	push   0x0
c000f756:	50                   	push   eax
c000f757:	e8 66 e6 ff ff       	call   c000ddc2 <UnixFile::UnixFile(int)>
c000f75c:	83 c4 10             	add    esp,0x10
c000f75f:	ba 38 1b 02 c0       	mov    edx,0xc0021b38
c000f764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f768:	89 10                	mov    DWORD PTR [eax],edx
c000f76a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f76e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f778:	83 c0 0d             	add    eax,0xd
c000f77b:	83 ec 04             	sub    esp,0x4
c000f77e:	52                   	push   edx
c000f77f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f783:	50                   	push   eax
c000f784:	e8 17 fe ff ff       	call   c000f5a0 <standardiseFiles(char*, char const*, char const*)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f790:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f793:	8d 50 bf             	lea    edx,[eax-0x41]
c000f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7a8:	90                   	nop
c000f7a9:	83 c4 0c             	add    esp,0xc
c000f7ac:	c3                   	ret    
c000f7ad:	90                   	nop

c000f7ae <File::open(FileOpenMode)>:
c000f7ae:	53                   	push   ebx
c000f7af:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b4:	83 ec 08             	sub    esp,0x8
c000f7b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7bb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7c2:	80 fa 19             	cmp    dl,0x19
c000f7c5:	77 40                	ja     c000f807 <File::open(FileOpenMode)+0x59>
c000f7c7:	8b 14 95 60 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb2a0]
c000f7ce:	85 d2                	test   edx,edx
c000f7d0:	74 35                	je     c000f807 <File::open(FileOpenMode)+0x59>
c000f7d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7d8:	85 d2                	test   edx,edx
c000f7da:	74 2b                	je     c000f807 <File::open(FileOpenMode)+0x59>
c000f7dc:	b8 06 00 00 00       	mov    eax,0x6
c000f7e1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7e5:	75 20                	jne    c000f807 <File::open(FileOpenMode)+0x59>
c000f7e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7f3:	51                   	push   ecx
c000f7f4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7f7:	51                   	push   ecx
c000f7f8:	52                   	push   edx
c000f7f9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f7fc:	83 c4 10             	add    esp,0x10
c000f7ff:	85 c0                	test   eax,eax
c000f801:	75 04                	jne    c000f807 <File::open(FileOpenMode)+0x59>
c000f803:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f807:	83 c4 08             	add    esp,0x8
c000f80a:	5b                   	pop    ebx
c000f80b:	c3                   	ret    

c000f80c <File::close()>:
c000f80c:	53                   	push   ebx
c000f80d:	b8 0b 00 00 00       	mov    eax,0xb
c000f812:	83 ec 08             	sub    esp,0x8
c000f815:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f819:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f820:	80 fa 19             	cmp    dl,0x19
c000f823:	77 41                	ja     c000f866 <File::close()+0x5a>
c000f825:	8b 1c 95 60 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb2a0]
c000f82c:	85 db                	test   ebx,ebx
c000f82e:	74 36                	je     c000f866 <File::close()+0x5a>
c000f830:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f837:	74 2d                	je     c000f866 <File::close()+0x5a>
c000f839:	b8 05 00 00 00       	mov    eax,0x5
c000f83e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f842:	74 22                	je     c000f866 <File::close()+0x5a>
c000f844:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f848:	8b 04 95 60 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb2a0]
c000f84f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f855:	53                   	push   ebx
c000f856:	53                   	push   ebx
c000f857:	8b 10                	mov    edx,DWORD PTR [eax]
c000f859:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f85f:	50                   	push   eax
c000f860:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f863:	83 c4 10             	add    esp,0x10
c000f866:	83 c4 08             	add    esp,0x8
c000f869:	5b                   	pop    ebx
c000f86a:	c3                   	ret    
c000f86b:	90                   	nop

c000f86c <File::seek(unsigned long long)>:
c000f86c:	56                   	push   esi
c000f86d:	b8 0b 00 00 00       	mov    eax,0xb
c000f872:	53                   	push   ebx
c000f873:	51                   	push   ecx
c000f874:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f878:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f87c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f880:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f887:	80 fa 19             	cmp    dl,0x19
c000f88a:	77 31                	ja     c000f8bd <File::seek(unsigned long long)+0x51>
c000f88c:	8b 14 95 60 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb2a0]
c000f893:	85 d2                	test   edx,edx
c000f895:	74 26                	je     c000f8bd <File::seek(unsigned long long)+0x51>
c000f897:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f89d:	85 d2                	test   edx,edx
c000f89f:	74 1c                	je     c000f8bd <File::seek(unsigned long long)+0x51>
c000f8a1:	b8 05 00 00 00       	mov    eax,0x5
c000f8a6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8aa:	74 11                	je     c000f8bd <File::seek(unsigned long long)+0x51>
c000f8ac:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8ae:	53                   	push   ebx
c000f8af:	51                   	push   ecx
c000f8b0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8b6:	52                   	push   edx
c000f8b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8ba:	83 c4 10             	add    esp,0x10
c000f8bd:	5a                   	pop    edx
c000f8be:	5b                   	pop    ebx
c000f8bf:	5e                   	pop    esi
c000f8c0:	c3                   	ret    
c000f8c1:	90                   	nop

c000f8c2 <File::tell(unsigned long long*)>:
c000f8c2:	83 ec 0c             	sub    esp,0xc
c000f8c5:	b8 0b 00 00 00       	mov    eax,0xb
c000f8ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8ce:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8d5:	80 fa 19             	cmp    dl,0x19
c000f8d8:	77 34                	ja     c000f90e <File::tell(unsigned long long*)+0x4c>
c000f8da:	8b 14 95 60 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb2a0]
c000f8e1:	85 d2                	test   edx,edx
c000f8e3:	74 29                	je     c000f90e <File::tell(unsigned long long*)+0x4c>
c000f8e5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8eb:	85 d2                	test   edx,edx
c000f8ed:	74 1f                	je     c000f90e <File::tell(unsigned long long*)+0x4c>
c000f8ef:	b8 05 00 00 00       	mov    eax,0x5
c000f8f4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8f8:	74 14                	je     c000f90e <File::tell(unsigned long long*)+0x4c>
c000f8fa:	50                   	push   eax
c000f8fb:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f901:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f907:	52                   	push   edx
c000f908:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f90b:	83 c4 10             	add    esp,0x10
c000f90e:	83 c4 0c             	add    esp,0xc
c000f911:	c3                   	ret    

c000f912 <File::rewind()>:
c000f912:	83 ec 10             	sub    esp,0x10
c000f915:	6a 00                	push   0x0
c000f917:	6a 00                	push   0x0
c000f919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91d:	e8 4a ff ff ff       	call   c000f86c <File::seek(unsigned long long)>
c000f922:	83 c4 1c             	add    esp,0x1c
c000f925:	c3                   	ret    

c000f926 <File::unlink()>:
c000f926:	83 ec 0c             	sub    esp,0xc
c000f929:	b8 0b 00 00 00       	mov    eax,0xb
c000f92e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f932:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f939:	80 f9 19             	cmp    cl,0x19
c000f93c:	77 2f                	ja     c000f96d <File::unlink()+0x47>
c000f93e:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000f945:	85 c9                	test   ecx,ecx
c000f947:	74 24                	je     c000f96d <File::unlink()+0x47>
c000f949:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f94f:	85 c9                	test   ecx,ecx
c000f951:	74 1a                	je     c000f96d <File::unlink()+0x47>
c000f953:	b8 06 00 00 00       	mov    eax,0x6
c000f958:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f95c:	75 0f                	jne    c000f96d <File::unlink()+0x47>
c000f95e:	50                   	push   eax
c000f95f:	83 c2 0d             	add    edx,0xd
c000f962:	50                   	push   eax
c000f963:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f965:	52                   	push   edx
c000f966:	51                   	push   ecx
c000f967:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f96a:	83 c4 10             	add    esp,0x10
c000f96d:	83 c4 0c             	add    esp,0xc
c000f970:	c3                   	ret    
c000f971:	90                   	nop

c000f972 <File::rename(char const*)>:
c000f972:	83 ec 0c             	sub    esp,0xc
c000f975:	b8 0b 00 00 00       	mov    eax,0xb
c000f97a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f97e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f985:	80 f9 19             	cmp    cl,0x19
c000f988:	77 32                	ja     c000f9bc <File::rename(char const*)+0x4a>
c000f98a:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000f991:	85 c9                	test   ecx,ecx
c000f993:	74 27                	je     c000f9bc <File::rename(char const*)+0x4a>
c000f995:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f99b:	85 c9                	test   ecx,ecx
c000f99d:	74 1d                	je     c000f9bc <File::rename(char const*)+0x4a>
c000f99f:	b8 06 00 00 00       	mov    eax,0x6
c000f9a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9a8:	75 12                	jne    c000f9bc <File::rename(char const*)+0x4a>
c000f9aa:	50                   	push   eax
c000f9ab:	83 c2 0d             	add    edx,0xd
c000f9ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9b4:	52                   	push   edx
c000f9b5:	51                   	push   ecx
c000f9b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	83 c4 0c             	add    esp,0xc
c000f9bf:	c3                   	ret    

c000f9c0 <File::chfatattr(unsigned char, unsigned char)>:
c000f9c0:	57                   	push   edi
c000f9c1:	b8 0b 00 00 00       	mov    eax,0xb
c000f9c6:	56                   	push   esi
c000f9c7:	53                   	push   ebx
c000f9c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9db:	80 f9 19             	cmp    cl,0x19
c000f9de:	77 37                	ja     c000fa17 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9e0:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000f9e7:	85 c9                	test   ecx,ecx
c000f9e9:	74 2c                	je     c000fa17 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9f1:	85 c9                	test   ecx,ecx
c000f9f3:	74 22                	je     c000fa17 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f5:	b8 06 00 00 00       	mov    eax,0x6
c000f9fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9fe:	75 17                	jne    c000fa17 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa00:	89 f0                	mov    eax,esi
c000fa02:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa04:	0f b6 f0             	movzx  esi,al
c000fa07:	56                   	push   esi
c000fa08:	83 c2 0d             	add    edx,0xd
c000fa0b:	0f b6 db             	movzx  ebx,bl
c000fa0e:	53                   	push   ebx
c000fa0f:	52                   	push   edx
c000fa10:	51                   	push   ecx
c000fa11:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	5b                   	pop    ebx
c000fa18:	5e                   	pop    esi
c000fa19:	5f                   	pop    edi
c000fa1a:	c3                   	ret    
c000fa1b:	90                   	nop

c000fa1c <File::exists()>:
c000fa1c:	83 ec 0c             	sub    esp,0xc
c000fa1f:	31 c0                	xor    eax,eax
c000fa21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa25:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa2c:	80 f9 19             	cmp    cl,0x19
c000fa2f:	77 24                	ja     c000fa55 <File::exists()+0x39>
c000fa31:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000fa38:	85 c9                	test   ecx,ecx
c000fa3a:	74 19                	je     c000fa55 <File::exists()+0x39>
c000fa3c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa42:	85 c9                	test   ecx,ecx
c000fa44:	74 0f                	je     c000fa55 <File::exists()+0x39>
c000fa46:	50                   	push   eax
c000fa47:	83 c2 0d             	add    edx,0xd
c000fa4a:	50                   	push   eax
c000fa4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa4d:	52                   	push   edx
c000fa4e:	51                   	push   ecx
c000fa4f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa52:	83 c4 10             	add    esp,0x10
c000fa55:	83 c4 0c             	add    esp,0xc
c000fa58:	c3                   	ret    
c000fa59:	90                   	nop

c000fa5a <File::stat(unsigned long long*, bool*)>:
c000fa5a:	56                   	push   esi
c000fa5b:	53                   	push   ebx
c000fa5c:	50                   	push   eax
c000fa5d:	b8 0b 00 00 00       	mov    eax,0xb
c000fa62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa75:	80 f9 19             	cmp    cl,0x19
c000fa78:	77 3d                	ja     c000fab7 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa7a:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000fa81:	85 c9                	test   ecx,ecx
c000fa83:	74 32                	je     c000fab7 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa85:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa8b:	85 c9                	test   ecx,ecx
c000fa8d:	74 28                	je     c000fab7 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa91:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa95:	74 13                	je     c000faaa <File::stat(unsigned long long*, bool*)+0x50>
c000fa97:	83 ec 04             	sub    esp,0x4
c000fa9a:	56                   	push   esi
c000fa9b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000faa1:	51                   	push   ecx
c000faa2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000faa5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000faa8:	eb 0a                	jmp    c000fab4 <File::stat(unsigned long long*, bool*)+0x5a>
c000faaa:	53                   	push   ebx
c000faab:	83 c2 0d             	add    edx,0xd
c000faae:	56                   	push   esi
c000faaf:	52                   	push   edx
c000fab0:	51                   	push   ecx
c000fab1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fab4:	83 c4 10             	add    esp,0x10
c000fab7:	5a                   	pop    edx
c000fab8:	5b                   	pop    ebx
c000fab9:	5e                   	pop    esi
c000faba:	c3                   	ret    

c000fabb <getcwd(Process*, char*, int)>:
c000fabb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fabf:	31 c0                	xor    eax,eax
c000fac1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fac4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fac8:	7d 15                	jge    c000fadf <getcwd(Process*, char*, int)+0x24>
c000faca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000face:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fad5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fad8:	84 c9                	test   cl,cl
c000fada:	74 06                	je     c000fae2 <getcwd(Process*, char*, int)+0x27>
c000fadc:	40                   	inc    eax
c000fadd:	eb e2                	jmp    c000fac1 <getcwd(Process*, char*, int)+0x6>
c000fadf:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fae2:	31 c0                	xor    eax,eax
c000fae4:	c3                   	ret    

c000fae5 <setcwd(Process*, char*)>:
c000fae5:	55                   	push   ebp
c000fae6:	57                   	push   edi
c000fae7:	56                   	push   esi
c000fae8:	53                   	push   ebx
c000fae9:	81 ec 20 02 00 00    	sub    esp,0x220
c000faef:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000faf6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fafc:	57                   	push   edi
c000fafd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb04:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb08:	56                   	push   esi
c000fb09:	e8 92 fa ff ff       	call   c000f5a0 <standardiseFiles(char*, char const*, char const*)>
c000fb0e:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb11:	e8 ca 0b ff ff       	call   c00006e0 <strlen>
c000fb16:	83 c4 10             	add    esp,0x10
c000fb19:	83 f8 02             	cmp    eax,0x2
c000fb1c:	77 17                	ja     c000fb35 <setcwd(Process*, char*)+0x50>
c000fb1e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb23:	83 e8 41             	sub    eax,0x41
c000fb26:	83 f8 19             	cmp    eax,0x19
c000fb29:	76 24                	jbe    c000fb4f <setcwd(Process*, char*)+0x6a>
c000fb2b:	b8 03 00 00 00       	mov    eax,0x3
c000fb30:	e9 cb 00 00 00       	jmp    c000fc00 <setcwd(Process*, char*)+0x11b>
c000fb35:	83 ec 0c             	sub    esp,0xc
c000fb38:	56                   	push   esi
c000fb39:	e8 a2 0b ff ff       	call   c00006e0 <strlen>
c000fb3e:	83 c4 10             	add    esp,0x10
c000fb41:	83 f8 03             	cmp    eax,0x3
c000fb44:	75 33                	jne    c000fb79 <setcwd(Process*, char*)+0x94>
c000fb46:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb4b:	75 2c                	jne    c000fb79 <setcwd(Process*, char*)+0x94>
c000fb4d:	eb cf                	jmp    c000fb1e <setcwd(Process*, char*)+0x39>
c000fb4f:	8b 14 85 60 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb2a0]
c000fb56:	b8 05 00 00 00       	mov    eax,0x5
c000fb5b:	85 d2                	test   edx,edx
c000fb5d:	0f 84 9d 00 00 00    	je     c000fc00 <setcwd(Process*, char*)+0x11b>
c000fb63:	b8 06 00 00 00       	mov    eax,0x6
c000fb68:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb6f:	0f 84 8b 00 00 00    	je     c000fc00 <setcwd(Process*, char*)+0x11b>
c000fb75:	51                   	push   ecx
c000fb76:	51                   	push   ecx
c000fb77:	eb 7b                	jmp    c000fbf4 <setcwd(Process*, char*)+0x10f>
c000fb79:	83 ec 0c             	sub    esp,0xc
c000fb7c:	68 14 01 00 00       	push   0x114
c000fb81:	e8 58 f5 ff ff       	call   c000f0de <operator new(unsigned long)>
c000fb86:	83 c4 0c             	add    esp,0xc
c000fb89:	89 c3                	mov    ebx,eax
c000fb8b:	55                   	push   ebp
c000fb8c:	56                   	push   esi
c000fb8d:	50                   	push   eax
c000fb8e:	e8 b7 fb ff ff       	call   c000f74a <File::File(char const*, Process*)>
c000fb93:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fb98:	83 c4 0c             	add    esp,0xc
c000fb9b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fb9f:	50                   	push   eax
c000fba0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fba4:	50                   	push   eax
c000fba5:	53                   	push   ebx
c000fba6:	e8 af fe ff ff       	call   c000fa5a <File::stat(unsigned long long*, bool*)>
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbb0:	83 f8 02             	cmp    eax,0x2
c000fbb3:	75 09                	jne    c000fbbe <setcwd(Process*, char*)+0xd9>
c000fbb5:	83 ec 0c             	sub    esp,0xc
c000fbb8:	53                   	push   ebx
c000fbb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbbc:	eb 0d                	jmp    c000fbcb <setcwd(Process*, char*)+0xe6>
c000fbbe:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbc1:	85 c0                	test   eax,eax
c000fbc3:	74 10                	je     c000fbd5 <setcwd(Process*, char*)+0xf0>
c000fbc5:	83 ec 0c             	sub    esp,0xc
c000fbc8:	53                   	push   ebx
c000fbc9:	ff d2                	call   edx
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	b8 01 00 00 00       	mov    eax,0x1
c000fbd3:	eb 2b                	jmp    c000fc00 <setcwd(Process*, char*)+0x11b>
c000fbd5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbda:	75 10                	jne    c000fbec <setcwd(Process*, char*)+0x107>
c000fbdc:	83 ec 0c             	sub    esp,0xc
c000fbdf:	53                   	push   ebx
c000fbe0:	ff d2                	call   edx
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	b8 02 00 00 00       	mov    eax,0x2
c000fbea:	eb 14                	jmp    c000fc00 <setcwd(Process*, char*)+0x11b>
c000fbec:	83 ec 0c             	sub    esp,0xc
c000fbef:	53                   	push   ebx
c000fbf0:	ff d2                	call   edx
c000fbf2:	58                   	pop    eax
c000fbf3:	5a                   	pop    edx
c000fbf4:	56                   	push   esi
c000fbf5:	57                   	push   edi
c000fbf6:	e8 67 0b ff ff       	call   c0000762 <strcpy>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	31 c0                	xor    eax,eax
c000fc00:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc06:	5b                   	pop    ebx
c000fc07:	5e                   	pop    esi
c000fc08:	5f                   	pop    edi
c000fc09:	5d                   	pop    ebp
c000fc0a:	c3                   	ret    
c000fc0b:	90                   	nop

c000fc0c <Directory::Directory(char const*, Process*)>:
c000fc0c:	83 ec 0c             	sub    esp,0xc
c000fc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc13:	83 ec 08             	sub    esp,0x8
c000fc16:	6a 00                	push   0x0
c000fc18:	50                   	push   eax
c000fc19:	e8 a4 e1 ff ff       	call   c000ddc2 <UnixFile::UnixFile(int)>
c000fc1e:	83 c4 10             	add    esp,0x10
c000fc21:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c000fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2a:	89 10                	mov    DWORD PTR [eax],edx
c000fc2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc30:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc3a:	83 c0 0d             	add    eax,0xd
c000fc3d:	83 ec 04             	sub    esp,0x4
c000fc40:	52                   	push   edx
c000fc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc45:	50                   	push   eax
c000fc46:	e8 55 f9 ff ff       	call   c000f5a0 <standardiseFiles(char*, char const*, char const*)>
c000fc4b:	83 c4 10             	add    esp,0x10
c000fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc52:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc55:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc66:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc6a:	90                   	nop
c000fc6b:	83 c4 0c             	add    esp,0xc
c000fc6e:	c3                   	ret    
c000fc6f:	90                   	nop

c000fc70 <Directory::open()>:
c000fc70:	53                   	push   ebx
c000fc71:	b8 0b 00 00 00       	mov    eax,0xb
c000fc76:	83 ec 08             	sub    esp,0x8
c000fc79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc7d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc84:	80 fa 19             	cmp    dl,0x19
c000fc87:	77 3d                	ja     c000fcc6 <Directory::open()+0x56>
c000fc89:	8b 14 95 60 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb2a0]
c000fc90:	85 d2                	test   edx,edx
c000fc92:	74 32                	je     c000fcc6 <Directory::open()+0x56>
c000fc94:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fc9a:	85 d2                	test   edx,edx
c000fc9c:	74 28                	je     c000fcc6 <Directory::open()+0x56>
c000fc9e:	b8 06 00 00 00       	mov    eax,0x6
c000fca3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fca7:	75 1d                	jne    c000fcc6 <Directory::open()+0x56>
c000fca9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcaf:	50                   	push   eax
c000fcb0:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcb2:	51                   	push   ecx
c000fcb3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcb6:	51                   	push   ecx
c000fcb7:	52                   	push   edx
c000fcb8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	85 c0                	test   eax,eax
c000fcc0:	75 04                	jne    c000fcc6 <Directory::open()+0x56>
c000fcc2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcc6:	83 c4 08             	add    esp,0x8
c000fcc9:	5b                   	pop    ebx
c000fcca:	c3                   	ret    
c000fccb:	90                   	nop

c000fccc <Directory::close()>:
c000fccc:	53                   	push   ebx
c000fccd:	b8 0b 00 00 00       	mov    eax,0xb
c000fcd2:	83 ec 08             	sub    esp,0x8
c000fcd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fcd9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fce0:	80 fa 19             	cmp    dl,0x19
c000fce3:	77 41                	ja     c000fd26 <Directory::close()+0x5a>
c000fce5:	8b 1c 95 60 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb2a0]
c000fcec:	85 db                	test   ebx,ebx
c000fcee:	74 36                	je     c000fd26 <Directory::close()+0x5a>
c000fcf0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fcf7:	74 2d                	je     c000fd26 <Directory::close()+0x5a>
c000fcf9:	b8 05 00 00 00       	mov    eax,0x5
c000fcfe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fd02:	74 22                	je     c000fd26 <Directory::close()+0x5a>
c000fd04:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd08:	8b 04 95 60 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb2a0]
c000fd0f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd15:	53                   	push   ebx
c000fd16:	53                   	push   ebx
c000fd17:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd1f:	50                   	push   eax
c000fd20:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd23:	83 c4 10             	add    esp,0x10
c000fd26:	83 c4 08             	add    esp,0x8
c000fd29:	5b                   	pop    ebx
c000fd2a:	c3                   	ret    
c000fd2b:	90                   	nop

c000fd2c <Directory::unlink()>:
c000fd2c:	83 ec 0c             	sub    esp,0xc
c000fd2f:	b8 0b 00 00 00       	mov    eax,0xb
c000fd34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd38:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd3f:	80 f9 19             	cmp    cl,0x19
c000fd42:	77 2f                	ja     c000fd73 <Directory::unlink()+0x47>
c000fd44:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000fd4b:	85 c9                	test   ecx,ecx
c000fd4d:	74 24                	je     c000fd73 <Directory::unlink()+0x47>
c000fd4f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd55:	85 c9                	test   ecx,ecx
c000fd57:	74 1a                	je     c000fd73 <Directory::unlink()+0x47>
c000fd59:	b8 06 00 00 00       	mov    eax,0x6
c000fd5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd62:	75 0f                	jne    c000fd73 <Directory::unlink()+0x47>
c000fd64:	50                   	push   eax
c000fd65:	83 c2 0d             	add    edx,0xd
c000fd68:	50                   	push   eax
c000fd69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd6b:	52                   	push   edx
c000fd6c:	51                   	push   ecx
c000fd6d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd70:	83 c4 10             	add    esp,0x10
c000fd73:	83 c4 0c             	add    esp,0xc
c000fd76:	c3                   	ret    
c000fd77:	90                   	nop

c000fd78 <Directory::rename(char const*)>:
c000fd78:	83 ec 0c             	sub    esp,0xc
c000fd7b:	b8 0b 00 00 00       	mov    eax,0xb
c000fd80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd8b:	80 f9 19             	cmp    cl,0x19
c000fd8e:	77 32                	ja     c000fdc2 <Directory::rename(char const*)+0x4a>
c000fd90:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000fd97:	85 c9                	test   ecx,ecx
c000fd99:	74 27                	je     c000fdc2 <Directory::rename(char const*)+0x4a>
c000fd9b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fda1:	85 c9                	test   ecx,ecx
c000fda3:	74 1d                	je     c000fdc2 <Directory::rename(char const*)+0x4a>
c000fda5:	b8 06 00 00 00       	mov    eax,0x6
c000fdaa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdae:	75 12                	jne    c000fdc2 <Directory::rename(char const*)+0x4a>
c000fdb0:	50                   	push   eax
c000fdb1:	83 c2 0d             	add    edx,0xd
c000fdb4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdba:	52                   	push   edx
c000fdbb:	51                   	push   ecx
c000fdbc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	83 c4 0c             	add    esp,0xc
c000fdc5:	c3                   	ret    

c000fdc6 <Directory::exists()>:
c000fdc6:	83 ec 0c             	sub    esp,0xc
c000fdc9:	31 c0                	xor    eax,eax
c000fdcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdcf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdd6:	80 f9 19             	cmp    cl,0x19
c000fdd9:	77 24                	ja     c000fdff <Directory::exists()+0x39>
c000fddb:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000fde2:	85 c9                	test   ecx,ecx
c000fde4:	74 19                	je     c000fdff <Directory::exists()+0x39>
c000fde6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdec:	85 c9                	test   ecx,ecx
c000fdee:	74 0f                	je     c000fdff <Directory::exists()+0x39>
c000fdf0:	50                   	push   eax
c000fdf1:	83 c2 0d             	add    edx,0xd
c000fdf4:	50                   	push   eax
c000fdf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdf7:	52                   	push   edx
c000fdf8:	51                   	push   ecx
c000fdf9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	83 c4 0c             	add    esp,0xc
c000fe02:	c3                   	ret    
c000fe03:	90                   	nop

c000fe04 <Directory::read(dirent*)>:
c000fe04:	83 ec 1c             	sub    esp,0x1c
c000fe07:	b8 0b 00 00 00       	mov    eax,0xb
c000fe0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe17:	80 fa 19             	cmp    dl,0x19
c000fe1a:	77 30                	ja     c000fe4c <Directory::read(dirent*)+0x48>
c000fe1c:	8b 14 95 60 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb2a0]
c000fe23:	85 d2                	test   edx,edx
c000fe25:	74 25                	je     c000fe4c <Directory::read(dirent*)+0x48>
c000fe27:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe2e:	74 1c                	je     c000fe4c <Directory::read(dirent*)+0x48>
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe35:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe39:	52                   	push   edx
c000fe3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe3e:	6a 00                	push   0x0
c000fe40:	68 10 01 00 00       	push   0x110
c000fe45:	51                   	push   ecx
c000fe46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe49:	83 c4 20             	add    esp,0x20
c000fe4c:	83 c4 1c             	add    esp,0x1c
c000fe4f:	c3                   	ret    

c000fe50 <Directory::create()>:
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	b8 0b 00 00 00       	mov    eax,0xb
c000fe58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe63:	80 f9 19             	cmp    cl,0x19
c000fe66:	77 2f                	ja     c000fe97 <Directory::create()+0x47>
c000fe68:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c000fe6f:	85 c9                	test   ecx,ecx
c000fe71:	74 24                	je     c000fe97 <Directory::create()+0x47>
c000fe73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe79:	85 c9                	test   ecx,ecx
c000fe7b:	74 1a                	je     c000fe97 <Directory::create()+0x47>
c000fe7d:	b8 06 00 00 00       	mov    eax,0x6
c000fe82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe86:	75 0f                	jne    c000fe97 <Directory::create()+0x47>
c000fe88:	50                   	push   eax
c000fe89:	83 c2 0d             	add    edx,0xd
c000fe8c:	50                   	push   eax
c000fe8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe8f:	52                   	push   edx
c000fe90:	51                   	push   ecx
c000fe91:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe94:	83 c4 10             	add    esp,0x10
c000fe97:	83 c4 0c             	add    esp,0xc
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe9c:	b8 0a 00 00 00       	mov    eax,0xa
c000fea1:	c3                   	ret    

c000fea2 <Bus::Bus(char const*)>:
c000fea2:	83 ec 0c             	sub    esp,0xc
c000fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea9:	83 ec 08             	sub    esp,0x8
c000feac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb0:	50                   	push   eax
c000feb1:	e8 62 09 00 00       	call   c0010818 <Device::Device(char const*)>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec2:	89 10                	mov    DWORD PTR [eax],edx
c000fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fed2:	90                   	nop
c000fed3:	83 c4 0c             	add    esp,0xc
c000fed6:	c3                   	ret    
c000fed7:	90                   	nop

c000fed8 <Bus::~Bus()>:
c000fed8:	83 ec 0c             	sub    esp,0xc
c000fedb:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee4:	89 10                	mov    DWORD PTR [eax],edx
c000fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feea:	83 ec 0c             	sub    esp,0xc
c000feed:	50                   	push   eax
c000feee:	e8 db 05 00 00       	call   c00104ce <Device::~Device()>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	90                   	nop
c000fef7:	83 c4 0c             	add    esp,0xc
c000fefa:	c3                   	ret    
c000fefb:	90                   	nop

c000fefc <Bus::~Bus()>:
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	83 ec 0c             	sub    esp,0xc
c000ff02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff06:	e8 cd ff ff ff       	call   c000fed8 <Bus::~Bus()>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	83 ec 08             	sub    esp,0x8
c000ff11:	68 58 01 00 00       	push   0x158
c000ff16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1a:	e8 ce f1 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c000ff1f:	83 c4 10             	add    esp,0x10
c000ff22:	83 c4 0c             	add    esp,0xc
c000ff25:	c3                   	ret    

c000ff26 <Buzzer::Buzzer(char const*)>:
c000ff26:	83 ec 0c             	sub    esp,0xc
c000ff29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2d:	83 ec 08             	sub    esp,0x8
c000ff30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff34:	50                   	push   eax
c000ff35:	e8 de 08 00 00       	call   c0010818 <Device::Device(char const*)>
c000ff3a:	83 c4 10             	add    esp,0x10
c000ff3d:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000ff42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff46:	89 10                	mov    DWORD PTR [eax],edx
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff5a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff64:	90                   	nop
c000ff65:	83 c4 0c             	add    esp,0xc
c000ff68:	c3                   	ret    
c000ff69:	90                   	nop

c000ff6a <Buzzer::~Buzzer()>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000ff72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff76:	89 10                	mov    DWORD PTR [eax],edx
c000ff78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7c:	83 ec 0c             	sub    esp,0xc
c000ff7f:	50                   	push   eax
c000ff80:	e8 49 05 00 00       	call   c00104ce <Device::~Device()>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	90                   	nop
c000ff89:	83 c4 0c             	add    esp,0xc
c000ff8c:	c3                   	ret    
c000ff8d:	90                   	nop

c000ff8e <Buzzer::~Buzzer()>:
c000ff8e:	83 ec 0c             	sub    esp,0xc
c000ff91:	83 ec 0c             	sub    esp,0xc
c000ff94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff98:	e8 cd ff ff ff       	call   c000ff6a <Buzzer::~Buzzer()>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	83 ec 08             	sub    esp,0x8
c000ffa3:	68 5c 01 00 00       	push   0x15c
c000ffa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffac:	e8 3c f1 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	83 c4 0c             	add    esp,0xc
c000ffb7:	c3                   	ret    

c000ffb8 <Buzzer::stop()>:
c000ffb8:	83 ec 14             	sub    esp,0x14
c000ffbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffbf:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffc1:	6a 00                	push   0x0
c000ffc3:	50                   	push   eax
c000ffc4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffc7:	83 c4 1c             	add    esp,0x1c
c000ffca:	c3                   	ret    

c000ffcb <beepThread(void*)>:
c000ffcb:	53                   	push   ebx
c000ffcc:	83 ec 08             	sub    esp,0x8
c000ffcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffd3:	e8 5b 8a 00 00       	call   c0018a33 <unlockScheduler()>
c000ffd8:	52                   	push   edx
c000ffd9:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffde:	52                   	push   edx
c000ffdf:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffe5:	52                   	push   edx
c000ffe6:	50                   	push   eax
c000ffe7:	e8 a3 8f 00 00       	call   c0018f8f <nanoSleep(unsigned long long)>
c000ffec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffef:	e8 c4 ff ff ff       	call   c000ffb8 <Buzzer::stop()>
c000fff4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fffc:	83 c4 18             	add    esp,0x18
c000ffff:	5b                   	pop    ebx
c0010000:	e9 ce 8e 00 00       	jmp    c0018ed3 <blockTask(TaskState)>
c0010005:	90                   	nop

c0010006 <Buzzer::beep(int, int, bool)>:
c0010006:	57                   	push   edi
c0010007:	56                   	push   esi
c0010008:	53                   	push   ebx
c0010009:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001000d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010011:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010015:	52                   	push   edx
c0010016:	52                   	push   edx
c0010017:	8b 06                	mov    eax,DWORD PTR [esi]
c0010019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001d:	56                   	push   esi
c001001e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010021:	89 f8                	mov    eax,edi
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	84 c0                	test   al,al
c0010028:	74 1f                	je     c0010049 <Buzzer::beep(int, int, bool)+0x43>
c001002a:	50                   	push   eax
c001002b:	50                   	push   eax
c001002c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0010032:	99                   	cdq    
c0010033:	52                   	push   edx
c0010034:	50                   	push   eax
c0010035:	e8 55 8f 00 00       	call   c0018f8f <nanoSleep(unsigned long long)>
c001003a:	83 c4 10             	add    esp,0x10
c001003d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010041:	5b                   	pop    ebx
c0010042:	5e                   	pop    esi
c0010043:	5f                   	pop    edi
c0010044:	e9 6f ff ff ff       	jmp    c000ffb8 <Buzzer::stop()>
c0010049:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001004f:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0010054:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001005c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010060:	c7 44 24 14 cb ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffcb
c0010068:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001006c:	5b                   	pop    ebx
c001006d:	5e                   	pop    esi
c001006e:	5f                   	pop    edi
c001006f:	e9 f2 8a 00 00       	jmp    c0018b66 <Process::createThread(void (*)(void*), void*, int)>

c0010074 <loadClockSettings()>:
c0010074:	c7 05 d4 48 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00248d4,0xa
c001007e:	c6 05 d1 48 02 c0 00 	mov    BYTE PTR ds:0xc00248d1,0x0
c0010085:	c6 05 d0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248d0,0x1
c001008c:	c3                   	ret    
c001008d:	90                   	nop

c001008e <Clock::Clock(char const*)>:
c001008e:	83 ec 0c             	sub    esp,0xc
c0010091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010095:	83 ec 08             	sub    esp,0x8
c0010098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009c:	50                   	push   eax
c001009d:	e8 76 07 00 00       	call   c0010818 <Device::Device(char const*)>
c00100a2:	83 c4 10             	add    esp,0x10
c00100a5:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c00100aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ae:	89 10                	mov    DWORD PTR [eax],edx
c00100b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100be:	90                   	nop
c00100bf:	83 c4 0c             	add    esp,0xc
c00100c2:	c3                   	ret    
c00100c3:	90                   	nop

c00100c4 <Clock::~Clock()>:
c00100c4:	83 ec 0c             	sub    esp,0xc
c00100c7:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c00100cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d0:	89 10                	mov    DWORD PTR [eax],edx
c00100d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d6:	83 ec 0c             	sub    esp,0xc
c00100d9:	50                   	push   eax
c00100da:	e8 ef 03 00 00       	call   c00104ce <Device::~Device()>
c00100df:	83 c4 10             	add    esp,0x10
c00100e2:	90                   	nop
c00100e3:	83 c4 0c             	add    esp,0xc
c00100e6:	c3                   	ret    
c00100e7:	90                   	nop

c00100e8 <Clock::~Clock()>:
c00100e8:	83 ec 0c             	sub    esp,0xc
c00100eb:	83 ec 0c             	sub    esp,0xc
c00100ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f2:	e8 cd ff ff ff       	call   c00100c4 <Clock::~Clock()>
c00100f7:	83 c4 10             	add    esp,0x10
c00100fa:	83 ec 08             	sub    esp,0x8
c00100fd:	68 58 01 00 00       	push   0x158
c0010102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010106:	e8 e2 ef ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001010b:	83 c4 10             	add    esp,0x10
c001010e:	83 c4 0c             	add    esp,0xc
c0010111:	c3                   	ret    

c0010112 <Clock::timeInSecondsLocal()>:
c0010112:	53                   	push   ebx
c0010113:	83 ec 14             	sub    esp,0x14
c0010116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011a:	8b 10                	mov    edx,DWORD PTR [eax]
c001011c:	50                   	push   eax
c001011d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010120:	0f b6 0d d0 48 02 c0 	movzx  ecx,BYTE PTR ds:0xc00248d0
c0010127:	03 0d d4 48 02 c0    	add    ecx,DWORD PTR ds:0xc00248d4
c001012d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010133:	89 cb                	mov    ebx,ecx
c0010135:	c1 fb 1f             	sar    ebx,0x1f
c0010138:	01 c8                	add    eax,ecx
c001013a:	11 da                	adc    edx,ebx
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	31 c9                	xor    ecx,ecx
c0010141:	80 3d d1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248d1,0x0
c0010148:	74 05                	je     c001014f <Clock::timeInSecondsLocal()+0x3d>
c001014a:	b9 08 07 00 00       	mov    ecx,0x708
c001014f:	31 db                	xor    ebx,ebx
c0010151:	01 c8                	add    eax,ecx
c0010153:	11 da                	adc    edx,ebx
c0010155:	83 c4 08             	add    esp,0x8
c0010158:	5b                   	pop    ebx
c0010159:	c3                   	ret    

c001015a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001015a:	57                   	push   edi
c001015b:	56                   	push   esi
c001015c:	53                   	push   ebx
c001015d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010161:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010165:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010169:	8b 01                	mov    eax,DWORD PTR [ecx]
c001016b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001016e:	0f b6 05 d0 48 02 c0 	movzx  eax,BYTE PTR ds:0xc00248d0
c0010175:	03 05 d4 48 02 c0    	add    eax,DWORD PTR ds:0xc00248d4
c001017b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010181:	99                   	cdq    
c0010182:	29 c6                	sub    esi,eax
c0010184:	19 d7                	sbb    edi,edx
c0010186:	89 f0                	mov    eax,esi
c0010188:	89 fa                	mov    edx,edi
c001018a:	31 f6                	xor    esi,esi
c001018c:	80 3d d1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248d1,0x0
c0010193:	74 05                	je     c001019a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010195:	be 08 07 00 00       	mov    esi,0x708
c001019a:	31 ff                	xor    edi,edi
c001019c:	29 f0                	sub    eax,esi
c001019e:	19 fa                	sbb    edx,edi
c00101a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101a8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101ac:	89 d8                	mov    eax,ebx
c00101ae:	5b                   	pop    ebx
c00101af:	5e                   	pop    esi
c00101b0:	5f                   	pop    edi
c00101b1:	ff e0                	jmp    eax

c00101b3 <datetimeToSeconds(datetime_t)>:
c00101b3:	55                   	push   ebp
c00101b4:	57                   	push   edi
c00101b5:	56                   	push   esi
c00101b6:	53                   	push   ebx
c00101b7:	83 ec 14             	sub    esp,0x14
c00101ba:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101c2:	0f b6 f5             	movzx  esi,ch
c00101c5:	6b f6 3c             	imul   esi,esi,0x3c
c00101c8:	89 cf                	mov    edi,ecx
c00101ca:	89 d3                	mov    ebx,edx
c00101cc:	0f b6 c9             	movzx  ecx,cl
c00101cf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101d5:	0f b6 c6             	movzx  eax,dh
c00101d8:	c1 ef 10             	shr    edi,0x10
c00101db:	48                   	dec    eax
c00101dc:	c1 eb 10             	shr    ebx,0x10
c00101df:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101e3:	89 f8                	mov    eax,edi
c00101e5:	0f b6 f8             	movzx  edi,al
c00101e8:	01 fe                	add    esi,edi
c00101ea:	01 f1                	add    ecx,esi
c00101ec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101f0:	c1 f9 1f             	sar    ecx,0x1f
c00101f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00101f7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00101fc:	0f b6 d2             	movzx  edx,dl
c00101ff:	66 81 eb 6c 07       	sub    bx,0x76c
c0010204:	8b 0c 8d 00 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde400]
c001020b:	0f b7 f3             	movzx  esi,bx
c001020e:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010212:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010217:	76 29                	jbe    c0010242 <datetimeToSeconds(datetime_t)+0x8f>
c0010219:	f6 c3 03             	test   bl,0x3
c001021c:	75 24                	jne    c0010242 <datetimeToSeconds(datetime_t)+0x8f>
c001021e:	31 d2                	xor    edx,edx
c0010220:	bf 64 00 00 00       	mov    edi,0x64
c0010225:	89 d8                	mov    eax,ebx
c0010227:	66 f7 f7             	div    di
c001022a:	66 85 d2             	test   dx,dx
c001022d:	75 12                	jne    c0010241 <datetimeToSeconds(datetime_t)+0x8e>
c001022f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010235:	bf 90 01 00 00       	mov    edi,0x190
c001023a:	99                   	cdq    
c001023b:	f7 ff                	idiv   edi
c001023d:	85 d2                	test   edx,edx
c001023f:	75 01                	jne    c0010242 <datetimeToSeconds(datetime_t)+0x8f>
c0010241:	41                   	inc    ecx
c0010242:	66 83 fb 46          	cmp    bx,0x46
c0010246:	76 45                	jbe    c001028d <datetimeToSeconds(datetime_t)+0xda>
c0010248:	bb 46 00 00 00       	mov    ebx,0x46
c001024d:	bf 64 00 00 00       	mov    edi,0x64
c0010252:	bd 90 01 00 00       	mov    ebp,0x190
c0010257:	b8 6d 01 00 00       	mov    eax,0x16d
c001025c:	f6 c3 03             	test   bl,0x3
c001025f:	75 23                	jne    c0010284 <datetimeToSeconds(datetime_t)+0xd1>
c0010261:	89 d8                	mov    eax,ebx
c0010263:	99                   	cdq    
c0010264:	f7 ff                	idiv   edi
c0010266:	85 d2                	test   edx,edx
c0010268:	b8 6e 01 00 00       	mov    eax,0x16e
c001026d:	75 15                	jne    c0010284 <datetimeToSeconds(datetime_t)+0xd1>
c001026f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010275:	99                   	cdq    
c0010276:	f7 fd                	idiv   ebp
c0010278:	31 c0                	xor    eax,eax
c001027a:	85 d2                	test   edx,edx
c001027c:	0f 94 c0             	sete   al
c001027f:	05 6d 01 00 00       	add    eax,0x16d
c0010284:	43                   	inc    ebx
c0010285:	01 c1                	add    ecx,eax
c0010287:	39 f3                	cmp    ebx,esi
c0010289:	7c cc                	jl     c0010257 <datetimeToSeconds(datetime_t)+0xa4>
c001028b:	eb 3b                	jmp    c00102c8 <datetimeToSeconds(datetime_t)+0x115>
c001028d:	74 39                	je     c00102c8 <datetimeToSeconds(datetime_t)+0x115>
c001028f:	b8 45 00 00 00       	mov    eax,0x45
c0010294:	89 c2                	mov    edx,eax
c0010296:	83 e2 03             	and    edx,0x3
c0010299:	39 f0                	cmp    eax,esi
c001029b:	7e 13                	jle    c00102b0 <datetimeToSeconds(datetime_t)+0xfd>
c001029d:	85 d2                	test   edx,edx
c001029f:	0f 94 c2             	sete   dl
c00102a2:	0f b6 d2             	movzx  edx,dl
c00102a5:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102ab:	48                   	dec    eax
c00102ac:	29 d1                	sub    ecx,edx
c00102ae:	eb e4                	jmp    c0010294 <datetimeToSeconds(datetime_t)+0xe1>
c00102b0:	b8 6d 01 00 00       	mov    eax,0x16d
c00102b5:	85 d2                	test   edx,edx
c00102b7:	75 0d                	jne    c00102c6 <datetimeToSeconds(datetime_t)+0x113>
c00102b9:	31 c0                	xor    eax,eax
c00102bb:	66 85 db             	test   bx,bx
c00102be:	0f 95 c0             	setne  al
c00102c1:	05 6d 01 00 00       	add    eax,0x16d
c00102c6:	29 c1                	sub    ecx,eax
c00102c8:	b8 80 51 01 00       	mov    eax,0x15180
c00102cd:	f7 e9                	imul   ecx
c00102cf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102d3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102d7:	83 c4 14             	add    esp,0x14
c00102da:	5b                   	pop    ebx
c00102db:	5e                   	pop    esi
c00102dc:	5f                   	pop    edi
c00102dd:	5d                   	pop    ebp
c00102de:	c3                   	ret    
c00102df:	90                   	nop

c00102e0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102e0:	57                   	push   edi
c00102e1:	56                   	push   esi
c00102e2:	53                   	push   ebx
c00102e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00102e9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102f4:	e8 ba fe ff ff       	call   c00101b3 <datetimeToSeconds(datetime_t)>
c00102f9:	59                   	pop    ecx
c00102fa:	0f b6 0d d0 48 02 c0 	movzx  ecx,BYTE PTR ds:0xc00248d0
c0010301:	03 0d d4 48 02 c0    	add    ecx,DWORD PTR ds:0xc00248d4
c0010307:	5b                   	pop    ebx
c0010308:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001030e:	89 cb                	mov    ebx,ecx
c0010310:	c1 fb 1f             	sar    ebx,0x1f
c0010313:	29 c8                	sub    eax,ecx
c0010315:	19 da                	sbb    edx,ebx
c0010317:	31 c9                	xor    ecx,ecx
c0010319:	80 3d d1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248d1,0x0
c0010320:	74 05                	je     c0010327 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010322:	b9 08 07 00 00       	mov    ecx,0x708
c0010327:	31 db                	xor    ebx,ebx
c0010329:	29 c8                	sub    eax,ecx
c001032b:	19 da                	sbb    edx,ebx
c001032d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010331:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010335:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010339:	5b                   	pop    ebx
c001033a:	89 f8                	mov    eax,edi
c001033c:	5e                   	pop    esi
c001033d:	5f                   	pop    edi
c001033e:	ff e0                	jmp    eax

c0010340 <secondsToDatetime(unsigned long long)>:
c0010340:	55                   	push   ebp
c0010341:	57                   	push   edi
c0010342:	56                   	push   esi
c0010343:	53                   	push   ebx
c0010344:	83 ec 1c             	sub    esp,0x1c
c0010347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001034b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010353:	6a 00                	push   0x0
c0010355:	68 80 51 01 00       	push   0x15180
c001035a:	55                   	push   ebp
c001035b:	57                   	push   edi
c001035c:	e8 8b f1 00 00       	call   c001f4ec <__udivdi3>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010368:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001036e:	6a 00                	push   0x0
c0010370:	68 80 51 01 00       	push   0x15180
c0010375:	55                   	push   ebp
c0010376:	57                   	push   edi
c0010377:	e8 70 f2 00 00       	call   c001f5ec <__umoddi3>
c001037c:	bf 10 0e 00 00       	mov    edi,0xe10
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	99                   	cdq    
c0010385:	f7 ff                	idiv   edi
c0010387:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001038a:	89 d0                	mov    eax,edx
c001038c:	99                   	cdq    
c001038d:	bf 3c 00 00 00       	mov    edi,0x3c
c0010392:	f7 ff                	idiv   edi
c0010394:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010397:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001039a:	85 db                	test   ebx,ebx
c001039c:	79 11                	jns    c00103af <secondsToDatetime(unsigned long long)+0x6f>
c001039e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103a8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103ad:	eb 07                	jmp    c00103b6 <secondsToDatetime(unsigned long long)+0x76>
c00103af:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103b4:	89 d8                	mov    eax,ebx
c00103b6:	99                   	cdq    
c00103b7:	f7 f9                	idiv   ecx
c00103b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103bd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103c2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103ca:	01 c3                	add    ebx,eax
c00103cc:	31 d2                	xor    edx,edx
c00103ce:	89 d8                	mov    eax,ebx
c00103d0:	bf b4 05 00 00       	mov    edi,0x5b4
c00103d5:	f7 f1                	div    ecx
c00103d7:	31 d2                	xor    edx,edx
c00103d9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103de:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103e1:	89 d8                	mov    eax,ebx
c00103e3:	f7 f7                	div    edi
c00103e5:	29 c1                	sub    ecx,eax
c00103e7:	31 d2                	xor    edx,edx
c00103e9:	89 d8                	mov    eax,ebx
c00103eb:	f7 f5                	div    ebp
c00103ed:	29 c1                	sub    ecx,eax
c00103ef:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103f4:	89 c8                	mov    eax,ecx
c00103f6:	31 d2                	xor    edx,edx
c00103f8:	f7 f5                	div    ebp
c00103fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103fe:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010403:	89 c8                	mov    eax,ecx
c0010405:	31 d2                	xor    edx,edx
c0010407:	f7 f5                	div    ebp
c0010409:	01 c3                	add    ebx,eax
c001040b:	31 d2                	xor    edx,edx
c001040d:	89 c8                	mov    eax,ecx
c001040f:	f7 f7                	div    edi
c0010411:	29 c3                	sub    ebx,eax
c0010413:	bf 99 00 00 00       	mov    edi,0x99
c0010418:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010420:	29 c3                	sub    ebx,eax
c0010422:	31 d2                	xor    edx,edx
c0010424:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010427:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001042a:	83 c1 02             	add    ecx,0x2
c001042d:	bb 05 00 00 00       	mov    ebx,0x5
c0010432:	89 c8                	mov    eax,ecx
c0010434:	f7 f7                	div    edi
c0010436:	89 c7                	mov    edi,eax
c0010438:	31 d2                	xor    edx,edx
c001043a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010440:	83 c0 02             	add    eax,0x2
c0010443:	f7 f3                	div    ebx
c0010445:	89 eb                	mov    ebx,ebp
c0010447:	29 c3                	sub    ebx,eax
c0010449:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001044f:	19 c0                	sbb    eax,eax
c0010451:	31 d2                	xor    edx,edx
c0010453:	83 e0 0c             	and    eax,0xc
c0010456:	88 1e                	mov    BYTE PTR [esi],bl
c0010458:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001045c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010464:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010468:	83 f9 01             	cmp    ecx,0x1
c001046b:	0f 96 c2             	setbe  dl
c001046e:	01 d0                	add    eax,edx
c0010470:	41                   	inc    ecx
c0010471:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010475:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010478:	83 c4 1c             	add    esp,0x1c
c001047b:	89 f0                	mov    eax,esi
c001047d:	5b                   	pop    ebx
c001047e:	5e                   	pop    esi
c001047f:	5f                   	pop    edi
c0010480:	5d                   	pop    ebp
c0010481:	c2 04 00             	ret    0x4

c0010484 <Clock::timeInDatetimeLocal()>:
c0010484:	53                   	push   ebx
c0010485:	83 ec 14             	sub    esp,0x14
c0010488:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001048c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010490:	e8 7d fc ff ff       	call   c0010112 <Clock::timeInSecondsLocal()>
c0010495:	83 c4 0c             	add    esp,0xc
c0010498:	52                   	push   edx
c0010499:	50                   	push   eax
c001049a:	53                   	push   ebx
c001049b:	e8 a0 fe ff ff       	call   c0010340 <secondsToDatetime(unsigned long long)>
c00104a0:	83 c4 14             	add    esp,0x14
c00104a3:	89 d8                	mov    eax,ebx
c00104a5:	5b                   	pop    ebx
c00104a6:	c2 04 00             	ret    0x4
c00104a9:	90                   	nop

c00104aa <Device::hibernate()>:
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <Device::wake()>:
c00104ac:	c3                   	ret    
c00104ad:	90                   	nop

c00104ae <Device::detect()>:
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <Device::disableLegacy()>:
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <Device::powerSaving(PowerSavingLevel)>:
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <DriverlessDevice::close(int, int, void*)>:
c00104b4:	31 c0                	xor    eax,eax
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <DriverlessDevice::detect()>:
c00104b8:	c3                   	ret    
c00104b9:	90                   	nop

c00104ba <DriverlessDevice::open(int, int, void*)>:
c00104ba:	83 ec 18             	sub    esp,0x18
c00104bd:	68 30 1c 02 c0       	push   0xc0021c30
c00104c2:	e8 61 55 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c00104c7:	83 c8 ff             	or     eax,0xffffffff
c00104ca:	83 c4 1c             	add    esp,0x1c
c00104cd:	c3                   	ret    

c00104ce <Device::~Device()>:
c00104ce:	ba 58 1c 02 c0       	mov    edx,0xc0021c58
c00104d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d7:	89 10                	mov    DWORD PTR [eax],edx
c00104d9:	90                   	nop
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <Device::~Device()>:
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104e3:	e8 e6 ff ff ff       	call   c00104ce <Device::~Device()>
c00104e8:	83 c4 04             	add    esp,0x4
c00104eb:	83 ec 08             	sub    esp,0x8
c00104ee:	68 58 01 00 00       	push   0x158
c00104f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f7:	e8 f1 eb ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	83 c4 0c             	add    esp,0xc
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <Device::findAndLoadDriver()>:
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010506:	57                   	push   edi
c0010507:	b9 09 00 00 00       	mov    ecx,0x9
c001050c:	56                   	push   esi
c001050d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010511:	81 c7 18 01 00 00    	add    edi,0x118
c0010517:	8d 74 24 10          	lea    esi,[esp+0x10]
c001051b:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010522:	fc                   	cld    
c0010523:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010525:	5e                   	pop    esi
c0010526:	5f                   	pop    edi
c0010527:	c3                   	ret    

c0010528 <Device::preOpenACPI(void*, char*, char*)>:
c0010528:	56                   	push   esi
c0010529:	53                   	push   ebx
c001052a:	83 ec 08             	sub    esp,0x8
c001052d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010531:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010535:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010539:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001053f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010549:	6a 1e                	push   0x1e
c001054b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010551:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010555:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001055b:	50                   	push   eax
c001055c:	e8 2c 01 ff ff       	call   c000068d <memcpy>
c0010561:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010565:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010569:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010571:	83 c4 14             	add    esp,0x14
c0010574:	5b                   	pop    ebx
c0010575:	5e                   	pop    esi
c0010576:	e9 12 01 ff ff       	jmp    c000068d <memcpy>
c001057b:	90                   	nop

c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001057c:	55                   	push   ebp
c001057d:	57                   	push   edi
c001057e:	56                   	push   esi
c001057f:	53                   	push   ebx
c0010580:	83 ec 0c             	sub    esp,0xc
c0010583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010587:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001058b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001058f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010593:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010598:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001059f:	75 0b                	jne    c00105ac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00105a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00105a3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105a7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105aa:	eb 24                	jmp    c00105d0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105ac:	e8 0b 43 00 00       	call   c00148bc <thisCPU()>
c00105b1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105bd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105c1:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105c5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105cd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105d0:	83 c4 0c             	add    esp,0xc
c00105d3:	5b                   	pop    ebx
c00105d4:	5e                   	pop    esi
c00105d5:	5f                   	pop    edi
c00105d6:	5d                   	pop    ebp
c00105d7:	ff e0                	jmp    eax
c00105d9:	90                   	nop

c00105da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105da:	57                   	push   edi
c00105db:	56                   	push   esi
c00105dc:	53                   	push   ebx
c00105dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105e5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105e9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105ee:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105f5:	75 0b                	jne    c0010602 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00105f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00105f9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00105fd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010600:	eb 20                	jmp    c0010622 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010602:	e8 b5 42 00 00       	call   c00148bc <thisCPU()>
c0010607:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001060d:	8b 10                	mov    edx,DWORD PTR [eax]
c001060f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010613:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010617:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001061b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001061f:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010622:	5b                   	pop    ebx
c0010623:	5e                   	pop    esi
c0010624:	5f                   	pop    edi
c0010625:	ff e0                	jmp    eax
c0010627:	90                   	nop

c0010628 <Device::addChild(Device*)>:
c0010628:	53                   	push   ebx
c0010629:	83 ec 08             	sub    esp,0x8
c001062c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010630:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010634:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001063a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010640:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010642:	85 d2                	test   edx,edx
c0010644:	74 04                	je     c001064a <Device::addChild(Device*)+0x22>
c0010646:	89 d3                	mov    ebx,edx
c0010648:	eb f6                	jmp    c0010640 <Device::addChild(Device*)+0x18>
c001064a:	83 ec 0c             	sub    esp,0xc
c001064d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010650:	6a 08                	push   0x8
c0010652:	e8 87 ea ff ff       	call   c000f0de <operator new(unsigned long)>
c0010657:	89 03                	mov    DWORD PTR [ebx],eax
c0010659:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001065f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010666:	83 c4 18             	add    esp,0x18
c0010669:	5b                   	pop    ebx
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <Device::removeAllChildren()>:
c001066c:	56                   	push   esi
c001066d:	53                   	push   ebx
c001066e:	52                   	push   edx
c001066f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010673:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010679:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001067c:	74 17                	je     c0010695 <Device::removeAllChildren()+0x29>
c001067e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010681:	85 c0                	test   eax,eax
c0010683:	74 0c                	je     c0010691 <Device::removeAllChildren()+0x25>
c0010685:	83 ec 0c             	sub    esp,0xc
c0010688:	8b 10                	mov    edx,DWORD PTR [eax]
c001068a:	50                   	push   eax
c001068b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001068e:	83 c4 10             	add    esp,0x10
c0010691:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010693:	eb e4                	jmp    c0010679 <Device::removeAllChildren()+0xd>
c0010695:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001069b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106ae:	58                   	pop    eax
c00106af:	5b                   	pop    ebx
c00106b0:	5e                   	pop    esi
c00106b1:	c3                   	ret    

c00106b2 <Device::hibernateAll()>:
c00106b2:	53                   	push   ebx
c00106b3:	83 ec 14             	sub    esp,0x14
c00106b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106bc:	53                   	push   ebx
c00106bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106c6:	83 c4 10             	add    esp,0x10
c00106c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106cc:	74 0f                	je     c00106dd <Device::hibernateAll()+0x2b>
c00106ce:	83 ec 0c             	sub    esp,0xc
c00106d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106d4:	e8 d9 ff ff ff       	call   c00106b2 <Device::hibernateAll()>
c00106d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106db:	eb e9                	jmp    c00106c6 <Device::hibernateAll()+0x14>
c00106dd:	83 c4 08             	add    esp,0x8
c00106e0:	5b                   	pop    ebx
c00106e1:	c3                   	ret    

c00106e2 <Device::wakeAll()>:
c00106e2:	53                   	push   ebx
c00106e3:	83 ec 14             	sub    esp,0x14
c00106e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ec:	53                   	push   ebx
c00106ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106fc:	74 0f                	je     c001070d <Device::wakeAll()+0x2b>
c00106fe:	83 ec 0c             	sub    esp,0xc
c0010701:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010704:	e8 d9 ff ff ff       	call   c00106e2 <Device::wakeAll()>
c0010709:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001070b:	eb e9                	jmp    c00106f6 <Device::wakeAll()+0x14>
c001070d:	83 c4 08             	add    esp,0x8
c0010710:	5b                   	pop    ebx
c0010711:	c3                   	ret    

c0010712 <Device::detectAll()>:
c0010712:	53                   	push   ebx
c0010713:	83 ec 14             	sub    esp,0x14
c0010716:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001071a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001071c:	53                   	push   ebx
c001071d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010720:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010726:	83 c4 10             	add    esp,0x10
c0010729:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001072c:	74 0f                	je     c001073d <Device::detectAll()+0x2b>
c001072e:	83 ec 0c             	sub    esp,0xc
c0010731:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010734:	e8 d9 ff ff ff       	call   c0010712 <Device::detectAll()>
c0010739:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001073b:	eb e9                	jmp    c0010726 <Device::detectAll()+0x14>
c001073d:	83 c4 08             	add    esp,0x8
c0010740:	5b                   	pop    ebx
c0010741:	c3                   	ret    

c0010742 <Device::disableLegacyAll()>:
c0010742:	53                   	push   ebx
c0010743:	83 ec 14             	sub    esp,0x14
c0010746:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001074a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001074c:	53                   	push   ebx
c001074d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010750:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010756:	83 c4 10             	add    esp,0x10
c0010759:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001075c:	74 0f                	je     c001076d <Device::disableLegacyAll()+0x2b>
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010764:	e8 d9 ff ff ff       	call   c0010742 <Device::disableLegacyAll()>
c0010769:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001076b:	eb e9                	jmp    c0010756 <Device::disableLegacyAll()+0x14>
c001076d:	83 c4 08             	add    esp,0x8
c0010770:	5b                   	pop    ebx
c0010771:	c3                   	ret    

c0010772 <Device::loadDriversForAll()>:
c0010772:	53                   	push   ebx
c0010773:	83 ec 08             	sub    esp,0x8
c0010776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010780:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010782:	85 db                	test   ebx,ebx
c0010784:	74 12                	je     c0010798 <Device::loadDriversForAll()+0x26>
c0010786:	83 ec 0c             	sub    esp,0xc
c0010789:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001078c:	e8 e1 ff ff ff       	call   c0010772 <Device::loadDriversForAll()>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	89 d8                	mov    eax,ebx
c0010796:	eb e8                	jmp    c0010780 <Device::loadDriversForAll()+0xe>
c0010798:	83 c4 08             	add    esp,0x8
c001079b:	5b                   	pop    ebx
c001079c:	c3                   	ret    
c001079d:	90                   	nop

c001079e <Device::closeAll()>:
c001079e:	53                   	push   ebx
c001079f:	83 ec 08             	sub    esp,0x8
c00107a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107a8:	6a 00                	push   0x0
c00107aa:	6a 00                	push   0x0
c00107ac:	6a 00                	push   0x0
c00107ae:	53                   	push   ebx
c00107af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107b8:	83 c4 10             	add    esp,0x10
c00107bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107be:	74 0f                	je     c00107cf <Device::closeAll()+0x31>
c00107c0:	83 ec 0c             	sub    esp,0xc
c00107c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107c6:	e8 d3 ff ff ff       	call   c001079e <Device::closeAll()>
c00107cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107cd:	eb e9                	jmp    c00107b8 <Device::closeAll()+0x1a>
c00107cf:	83 c4 08             	add    esp,0x8
c00107d2:	5b                   	pop    ebx
c00107d3:	c3                   	ret    

c00107d4 <Device::powerSavingAll(PowerSavingLevel)>:
c00107d4:	56                   	push   esi
c00107d5:	53                   	push   ebx
c00107d6:	83 ec 0c             	sub    esp,0xc
c00107d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107dd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107e3:	56                   	push   esi
c00107e4:	53                   	push   ebx
c00107e5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107f4:	74 0f                	je     c0010805 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00107f6:	52                   	push   edx
c00107f7:	52                   	push   edx
c00107f8:	56                   	push   esi
c00107f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107fc:	e8 d3 ff ff ff       	call   c00107d4 <Device::powerSavingAll(PowerSavingLevel)>
c0010801:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010803:	eb e9                	jmp    c00107ee <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010805:	58                   	pop    eax
c0010806:	5b                   	pop    ebx
c0010807:	5e                   	pop    esi
c0010808:	c3                   	ret    
c0010809:	90                   	nop

c001080a <Device::setName(char const*)>:
c001080a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010812:	e9 4b ff fe ff       	jmp    c0000762 <strcpy>
c0010817:	90                   	nop

c0010818 <Device::Device(char const*)>:
c0010818:	83 ec 0c             	sub    esp,0xc
c001081b:	ba 58 1c 02 c0       	mov    edx,0xc0021c58
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	89 10                	mov    DWORD PTR [eax],edx
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010838:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001085e:	83 ec 08             	sub    esp,0x8
c0010861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010865:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010869:	e8 9c ff ff ff       	call   c001080a <Device::setName(char const*)>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	83 ec 0c             	sub    esp,0xc
c0010874:	6a 08                	push   0x8
c0010876:	e8 63 e8 ff ff       	call   c000f0de <operator new(unsigned long)>
c001087b:	83 c4 10             	add    esp,0x10
c001087e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001088b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001088f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010899:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001089f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ba:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108de:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ec:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00108f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fa:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010904:	90                   	nop
c0010905:	83 c4 0c             	add    esp,0xc
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <Device::getName()>:
c001090a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090e:	05 d0 00 00 00       	add    eax,0xd0
c0010913:	c3                   	ret    

c0010914 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 f0 fe ff ff       	call   c0010818 <Device::Device(char const*)>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0010930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010934:	89 10                	mov    DWORD PTR [eax],edx
c0010936:	90                   	nop
c0010937:	83 c4 0c             	add    esp,0xc
c001093a:	c3                   	ret    
c001093b:	90                   	nop

c001093c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001093c:	57                   	push   edi
c001093d:	56                   	push   esi
c001093e:	53                   	push   ebx
c001093f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010943:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010947:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001094b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010951:	75 0c                	jne    c001095f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010953:	52                   	push   edx
c0010954:	52                   	push   edx
c0010955:	53                   	push   ebx
c0010956:	56                   	push   esi
c0010957:	e8 a8 f0 00 00       	call   c001fa04 <LinkedList<Device>::addElement(Device*)>
c001095c:	83 c4 10             	add    esp,0x10
c001095f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010965:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010968:	74 12                	je     c001097c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001096a:	50                   	push   eax
c001096b:	57                   	push   edi
c001096c:	56                   	push   esi
c001096d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010970:	e8 c7 ff ff ff       	call   c001093c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010975:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	eb e9                	jmp    c0010965 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001097c:	5b                   	pop    ebx
c001097d:	5e                   	pop    esi
c001097e:	5f                   	pop    edi
c001097f:	c3                   	ret    

c0010980 <getDevicesOfType(DeviceType)>:
c0010980:	53                   	push   ebx
c0010981:	83 ec 14             	sub    esp,0x14
c0010984:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010988:	53                   	push   ebx
c0010989:	e8 52 f1 00 00       	call   c001fae0 <LinkedList<Device>::LinkedList()>
c001098e:	83 c4 0c             	add    esp,0xc
c0010991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010995:	53                   	push   ebx
c0010996:	ff 35 68 47 02 c0    	push   DWORD PTR ds:0xc0024768
c001099c:	e8 9b ff ff ff       	call   c001093c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00109a1:	83 c4 18             	add    esp,0x18
c00109a4:	89 d8                	mov    eax,ebx
c00109a6:	5b                   	pop    ebx
c00109a7:	c2 04 00             	ret    0x4

c00109aa <HardDiskController::HardDiskController(char const*)>:
c00109aa:	83 ec 0c             	sub    esp,0xc
c00109ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b1:	83 ec 08             	sub    esp,0x8
c00109b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b8:	50                   	push   eax
c00109b9:	e8 5a fe ff ff       	call   c0010818 <Device::Device(char const*)>
c00109be:	83 c4 10             	add    esp,0x10
c00109c1:	ba b0 1c 02 c0       	mov    edx,0xc0021cb0
c00109c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ca:	89 10                	mov    DWORD PTR [eax],edx
c00109cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109da:	90                   	nop
c00109db:	83 c4 0c             	add    esp,0xc
c00109de:	c3                   	ret    
c00109df:	90                   	nop

c00109e0 <HardDiskController::~HardDiskController()>:
c00109e0:	83 ec 0c             	sub    esp,0xc
c00109e3:	ba b0 1c 02 c0       	mov    edx,0xc0021cb0
c00109e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ec:	89 10                	mov    DWORD PTR [eax],edx
c00109ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f2:	83 ec 0c             	sub    esp,0xc
c00109f5:	50                   	push   eax
c00109f6:	e8 d3 fa ff ff       	call   c00104ce <Device::~Device()>
c00109fb:	83 c4 10             	add    esp,0x10
c00109fe:	90                   	nop
c00109ff:	83 c4 0c             	add    esp,0xc
c0010a02:	c3                   	ret    
c0010a03:	90                   	nop

c0010a04 <HardDiskController::~HardDiskController()>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	83 ec 0c             	sub    esp,0xc
c0010a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0e:	e8 cd ff ff ff       	call   c00109e0 <HardDiskController::~HardDiskController()>
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	83 ec 08             	sub    esp,0x8
c0010a19:	68 58 01 00 00       	push   0x158
c0010a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a22:	e8 c6 e6 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	83 c4 0c             	add    esp,0xc
c0010a2d:	c3                   	ret    

c0010a2e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a35:	83 ec 08             	sub    esp,0x8
c0010a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3c:	50                   	push   eax
c0010a3d:	e8 d6 fd ff ff       	call   c0010818 <Device::Device(char const*)>
c0010a42:	83 c4 10             	add    esp,0x10
c0010a45:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c0010a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4e:	89 10                	mov    DWORD PTR [eax],edx
c0010a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a90:	90                   	nop
c0010a91:	83 c4 0c             	add    esp,0xc
c0010a94:	c3                   	ret    
c0010a95:	90                   	nop

c0010a96 <PhysicalDisk::startCache()>:
c0010a96:	56                   	push   esi
c0010a97:	53                   	push   ebx
c0010a98:	83 ec 10             	sub    esp,0x10
c0010a9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010a9f:	6a 30                	push   0x30
c0010aa1:	e8 38 e6 ff ff       	call   c000f0de <operator new(unsigned long)>
c0010aa6:	89 c6                	mov    esi,eax
c0010aa8:	58                   	pop    eax
c0010aa9:	5a                   	pop    edx
c0010aaa:	53                   	push   ebx
c0010aab:	56                   	push   esi
c0010aac:	e8 21 25 00 00       	call   c0012fd2 <VCache::VCache(PhysicalDisk*)>
c0010ab1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010ab7:	83 c4 14             	add    esp,0x14
c0010aba:	5b                   	pop    ebx
c0010abb:	5e                   	pop    esi
c0010abc:	c3                   	ret    
c0010abd:	90                   	nop

c0010abe <PhysicalDisk::~PhysicalDisk()>:
c0010abe:	83 ec 0c             	sub    esp,0xc
c0010ac1:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c0010ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aca:	89 10                	mov    DWORD PTR [eax],edx
c0010acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	50                   	push   eax
c0010ad4:	e8 f5 f9 ff ff       	call   c00104ce <Device::~Device()>
c0010ad9:	83 c4 10             	add    esp,0x10
c0010adc:	90                   	nop
c0010add:	83 c4 0c             	add    esp,0xc
c0010ae0:	c3                   	ret    
c0010ae1:	90                   	nop

c0010ae2 <PhysicalDisk::~PhysicalDisk()>:
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	83 ec 0c             	sub    esp,0xc
c0010ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aec:	e8 cd ff ff ff       	call   c0010abe <PhysicalDisk::~PhysicalDisk()>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	83 ec 08             	sub    esp,0x8
c0010af7:	68 6c 01 00 00       	push   0x16c
c0010afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b00:	e8 e8 e5 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0010b05:	83 c4 10             	add    esp,0x10
c0010b08:	83 c4 0c             	add    esp,0xc
c0010b0b:	c3                   	ret    

c0010b0c <FPU::FPU(char const*)>:
c0010b0c:	83 ec 0c             	sub    esp,0xc
c0010b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b13:	83 ec 08             	sub    esp,0x8
c0010b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1a:	50                   	push   eax
c0010b1b:	e8 f8 fc ff ff       	call   c0010818 <Device::Device(char const*)>
c0010b20:	83 c4 10             	add    esp,0x10
c0010b23:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c0010b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2c:	89 10                	mov    DWORD PTR [eax],edx
c0010b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b32:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b3c:	90                   	nop
c0010b3d:	83 c4 0c             	add    esp,0xc
c0010b40:	c3                   	ret    
c0010b41:	90                   	nop

c0010b42 <FPU::~FPU()>:
c0010b42:	83 ec 0c             	sub    esp,0xc
c0010b45:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c0010b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4e:	89 10                	mov    DWORD PTR [eax],edx
c0010b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	50                   	push   eax
c0010b58:	e8 71 f9 ff ff       	call   c00104ce <Device::~Device()>
c0010b5d:	83 c4 10             	add    esp,0x10
c0010b60:	90                   	nop
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <FPU::~FPU()>:
c0010b66:	83 ec 0c             	sub    esp,0xc
c0010b69:	83 ec 0c             	sub    esp,0xc
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	e8 cd ff ff ff       	call   c0010b42 <FPU::~FPU()>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	83 ec 08             	sub    esp,0x8
c0010b7b:	68 58 01 00 00       	push   0x158
c0010b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b84:	e8 64 e5 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	83 c4 0c             	add    esp,0xc
c0010b8f:	c3                   	ret    

c0010b90 <setupFPU()>:
c0010b90:	53                   	push   ebx
c0010b91:	83 ec 08             	sub    esp,0x8
c0010b94:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0010b99:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ba0:	74 19                	je     c0010bbb <setupFPU()+0x2b>
c0010ba2:	83 ec 0c             	sub    esp,0xc
c0010ba5:	68 58 01 00 00       	push   0x158
c0010baa:	e8 2f e5 ff ff       	call   c000f0de <operator new(unsigned long)>
c0010baf:	89 c3                	mov    ebx,eax
c0010bb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb4:	e8 7d d5 00 00       	call   c001e136 <AVX::AVX()>
c0010bb9:	eb 5b                	jmp    c0010c16 <setupFPU()+0x86>
c0010bbb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bc1:	84 c0                	test   al,al
c0010bc3:	79 19                	jns    c0010bde <setupFPU()+0x4e>
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	68 58 01 00 00       	push   0x158
c0010bcd:	e8 0c e5 ff ff       	call   c000f0de <operator new(unsigned long)>
c0010bd2:	89 c3                	mov    ebx,eax
c0010bd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bd7:	e8 80 d6 00 00       	call   c001e25c <SSE::SSE()>
c0010bdc:	eb 38                	jmp    c0010c16 <setupFPU()+0x86>
c0010bde:	a8 20                	test   al,0x20
c0010be0:	74 19                	je     c0010bfb <setupFPU()+0x6b>
c0010be2:	83 ec 0c             	sub    esp,0xc
c0010be5:	68 58 01 00 00       	push   0x158
c0010bea:	e8 ef e4 ff ff       	call   c000f0de <operator new(unsigned long)>
c0010bef:	89 c3                	mov    ebx,eax
c0010bf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf4:	e8 cd d5 00 00       	call   c001e1c6 <MMX::MMX()>
c0010bf9:	eb 1b                	jmp    c0010c16 <setupFPU()+0x86>
c0010bfb:	a8 10                	test   al,0x10
c0010bfd:	74 1c                	je     c0010c1b <setupFPU()+0x8b>
c0010bff:	83 ec 0c             	sub    esp,0xc
c0010c02:	68 58 01 00 00       	push   0x158
c0010c07:	e8 d2 e4 ff ff       	call   c000f0de <operator new(unsigned long)>
c0010c0c:	89 c3                	mov    ebx,eax
c0010c0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c11:	e8 d4 d6 00 00       	call   c001e2ea <x87::x87()>
c0010c16:	83 c4 10             	add    esp,0x10
c0010c19:	eb 2c                	jmp    c0010c47 <setupFPU()+0xb7>
c0010c1b:	83 ec 0c             	sub    esp,0xc
c0010c1e:	31 db                	xor    ebx,ebx
c0010c20:	68 08 1d 02 c0       	push   0xc0021d08
c0010c25:	e8 e9 e5 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0010c2a:	e8 8d 3c 00 00       	call   c00148bc <thisCPU()>
c0010c2f:	e8 88 3c 00 00       	call   c00148bc <thisCPU()>
c0010c34:	e8 ff ee 00 00       	call   c001fb38 <CPU::readCR0()>
c0010c39:	83 c8 04             	or     eax,0x4
c0010c3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c3f:	e8 06 ef 00 00       	call   c001fb4a <CPU::writeCR0(unsigned long)>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	83 c4 08             	add    esp,0x8
c0010c4a:	89 d8                	mov    eax,ebx
c0010c4c:	5b                   	pop    ebx
c0010c4d:	c3                   	ret    

c0010c4e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c56:	c1 e0 04             	shl    eax,0x4
c0010c59:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c5d:	8d 50 10             	lea    edx,[eax+0x10]
c0010c60:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c66:	74 08                	je     c0010c70 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c68:	83 c0 04             	add    eax,0x4
c0010c6b:	39 d0                	cmp    eax,edx
c0010c6d:	75 f1                	jne    c0010c60 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c6f:	c3                   	ret    
c0010c70:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c7a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c84:	eb e2                	jmp    c0010c68 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c86 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c86:	57                   	push   edi
c0010c87:	31 c0                	xor    eax,eax
c0010c89:	56                   	push   esi
c0010c8a:	53                   	push   ebx
c0010c8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010c97:	89 da                	mov    edx,ebx
c0010c99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c9d:	c1 e2 04             	shl    edx,0x4
c0010ca0:	01 ca                	add    edx,ecx
c0010ca2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010caa:	74 16                	je     c0010cc2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010cac:	40                   	inc    eax
c0010cad:	83 f8 04             	cmp    eax,0x4
c0010cb0:	75 f0                	jne    c0010ca2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cb2:	c7 44 24 10 4c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d4c
c0010cba:	5b                   	pop    ebx
c0010cbb:	5e                   	pop    esi
c0010cbc:	5f                   	pop    edi
c0010cbd:	e9 66 4d 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>
c0010cc2:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cc5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cc8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cce:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cd4:	5b                   	pop    ebx
c0010cd5:	5e                   	pop    esi
c0010cd6:	5f                   	pop    edi
c0010cd7:	c3                   	ret    

c0010cd8 <doubleFault(regs*, void*)>:
c0010cd8:	55                   	push   ebp
c0010cd9:	89 e5                	mov    ebp,esp
c0010cdb:	83 ec 08             	sub    esp,0x8
c0010cde:	83 ec 0c             	sub    esp,0xc
c0010ce1:	68 87 1d 02 c0       	push   0xc0021d87
c0010ce6:	e8 3d 4d 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0010ceb:	83 c4 10             	add    esp,0x10
c0010cee:	90                   	nop
c0010cef:	c9                   	leave  
c0010cf0:	c3                   	ret    
c0010cf1:	90                   	nop

c0010cf2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010cf2:	56                   	push   esi
c0010cf3:	53                   	push   ebx
c0010cf4:	50                   	push   eax
c0010cf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cf9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cfd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d02:	75 35                	jne    c0010d39 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d04:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d07:	31 d2                	xor    edx,edx
c0010d09:	89 c1                	mov    ecx,eax
c0010d0b:	c1 e1 04             	shl    ecx,0x4
c0010d0e:	01 f1                	add    ecx,esi
c0010d10:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d18:	74 3e                	je     c0010d58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d1a:	42                   	inc    edx
c0010d1b:	83 fa 04             	cmp    edx,0x4
c0010d1e:	75 f0                	jne    c0010d10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	68 cc 1d 02 c0       	push   0xc0021dcc
c0010d28:	e8 fb 4c 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0010d2d:	83 c4 10             	add    esp,0x10
c0010d30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d35:	5a                   	pop    edx
c0010d36:	5b                   	pop    ebx
c0010d37:	5e                   	pop    esi
c0010d38:	c3                   	ret    
c0010d39:	83 ec 0c             	sub    esp,0xc
c0010d3c:	56                   	push   esi
c0010d3d:	e8 c8 fb ff ff       	call   c001090a <Device::getName()>
c0010d42:	83 c4 10             	add    esp,0x10
c0010d45:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d48:	75 ba                	jne    c0010d04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d4a:	83 fb 0f             	cmp    ebx,0xf
c0010d4d:	7f 29                	jg     c0010d78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d4f:	0f b6 9b c0 3e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc140]
c0010d56:	eb ac                	jmp    c0010d04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d58:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d5f:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d6c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d72:	89 d8                	mov    eax,ebx
c0010d74:	5a                   	pop    edx
c0010d75:	5b                   	pop    ebx
c0010d76:	5e                   	pop    esi
c0010d77:	c3                   	ret    
c0010d78:	83 ec 0c             	sub    esp,0xc
c0010d7b:	68 94 1d 02 c0       	push   0xc0021d94
c0010d80:	e8 a3 4c 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0010d85:	83 c4 10             	add    esp,0x10
c0010d88:	e9 77 ff ff ff       	jmp    c0010d04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d8d:	90                   	nop

c0010d8e <InterruptController::clearAllHandlers(int, bool)>:
c0010d8e:	56                   	push   esi
c0010d8f:	53                   	push   ebx
c0010d90:	52                   	push   edx
c0010d91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010d99:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010d9e:	75 61                	jne    c0010e01 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010da0:	8d 46 20             	lea    eax,[esi+0x20]
c0010da3:	c1 e6 04             	shl    esi,0x4
c0010da6:	c1 e0 04             	shl    eax,0x4
c0010da9:	01 de                	add    esi,ebx
c0010dab:	01 d8                	add    eax,ebx
c0010dad:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010db7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dcb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010dd5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ddf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010de9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010df3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010dfd:	58                   	pop    eax
c0010dfe:	5b                   	pop    ebx
c0010dff:	5e                   	pop    esi
c0010e00:	c3                   	ret    
c0010e01:	83 ec 0c             	sub    esp,0xc
c0010e04:	53                   	push   ebx
c0010e05:	e8 00 fb ff ff       	call   c001090a <Device::getName()>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e10:	75 8e                	jne    c0010da0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e12:	83 fe 0f             	cmp    esi,0xf
c0010e15:	7f 09                	jg     c0010e20 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e17:	0f b6 b6 c0 3e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc140]
c0010e1e:	eb 80                	jmp    c0010da0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e20:	83 ec 0c             	sub    esp,0xc
c0010e23:	68 08 1e 02 c0       	push   0xc0021e08
c0010e28:	e8 fb 4b 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	e9 6b ff ff ff       	jmp    c0010da0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e35:	90                   	nop

c0010e36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e36:	56                   	push   esi
c0010e37:	53                   	push   ebx
c0010e38:	52                   	push   edx
c0010e39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e46:	75 3a                	jne    c0010e82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e4c:	8d 50 20             	lea    edx,[eax+0x20]
c0010e4f:	c1 e2 04             	shl    edx,0x4
c0010e52:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e55:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e59:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e5f:	74 0b                	je     c0010e6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e61:	83 c0 04             	add    eax,0x4
c0010e64:	39 d0                	cmp    eax,edx
c0010e66:	75 f1                	jne    c0010e59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e68:	58                   	pop    eax
c0010e69:	5b                   	pop    ebx
c0010e6a:	5e                   	pop    esi
c0010e6b:	c3                   	ret    
c0010e6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e80:	eb df                	jmp    c0010e61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	56                   	push   esi
c0010e86:	e8 7f fa ff ff       	call   c001090a <Device::getName()>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e91:	75 b5                	jne    c0010e48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e93:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010e98:	7f 11                	jg     c0010eab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010e9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e9e:	0f b6 80 c0 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc140]
c0010ea5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ea9:	eb 9d                	jmp    c0010e48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	68 08 1e 02 c0       	push   0xc0021e08
c0010eb3:	e8 70 4b 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0010eb8:	83 c4 10             	add    esp,0x10
c0010ebb:	eb 8b                	jmp    c0010e48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ebd <nmiHandler(regs*, void*)>:
c0010ebd:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0010ec2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ec6:	e9 5b a8 ff ff       	jmp    c000b726 <Computer::handleNMI()>

c0010ecb <int_handler>:
c0010ecb:	55                   	push   ebp
c0010ecc:	57                   	push   edi
c0010ecd:	56                   	push   esi
c0010ece:	53                   	push   ebx
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ed6:	80 3d b4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251b4,0x0
c0010edd:	74 0b                	je     c0010eea <int_handler+0x1f>
c0010edf:	fa                   	cli    
c0010ee0:	f4                   	hlt    
c0010ee1:	80 3d b4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251b4,0x0
c0010ee8:	75 f5                	jne    c0010edf <int_handler+0x14>
c0010eea:	e8 cd 39 00 00       	call   c00148bc <thisCPU()>
c0010eef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010ef2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010ef8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010efb:	83 f8 17             	cmp    eax,0x17
c0010efe:	77 13                	ja     c0010f13 <int_handler+0x48>
c0010f00:	83 ec 08             	sub    esp,0x8
c0010f03:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f05:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f08:	0f b6 c0             	movzx  eax,al
c0010f0b:	50                   	push   eax
c0010f0c:	57                   	push   edi
c0010f0d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	83 c3 15             	add    ebx,0x15
c0010f16:	c1 e3 04             	shl    ebx,0x4
c0010f19:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f1d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f24:	31 db                	xor    ebx,ebx
c0010f26:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f2a:	85 c0                	test   eax,eax
c0010f2c:	74 13                	je     c0010f41 <int_handler+0x76>
c0010f2e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f31:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f35:	74 1c                	je     c0010f53 <int_handler+0x88>
c0010f37:	83 ec 08             	sub    esp,0x8
c0010f3a:	52                   	push   edx
c0010f3b:	56                   	push   esi
c0010f3c:	ff d0                	call   eax
c0010f3e:	83 c4 10             	add    esp,0x10
c0010f41:	43                   	inc    ebx
c0010f42:	83 fb 04             	cmp    ebx,0x4
c0010f45:	75 df                	jne    c0010f26 <int_handler+0x5b>
c0010f47:	83 c4 0c             	add    esp,0xc
c0010f4a:	31 c0                	xor    eax,eax
c0010f4c:	5b                   	pop    ebx
c0010f4d:	31 d2                	xor    edx,edx
c0010f4f:	5e                   	pop    esi
c0010f50:	5f                   	pop    edi
c0010f51:	5d                   	pop    ebp
c0010f52:	c3                   	ret    
c0010f53:	83 ec 08             	sub    esp,0x8
c0010f56:	52                   	push   edx
c0010f57:	56                   	push   esi
c0010f58:	ff d0                	call   eax
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	5b                   	pop    ebx
c0010f61:	5e                   	pop    esi
c0010f62:	5f                   	pop    edi
c0010f63:	5d                   	pop    ebp
c0010f64:	c3                   	ret    
c0010f65:	90                   	nop

c0010f66 <InterruptController::InterruptController(char const*)>:
c0010f66:	83 ec 1c             	sub    esp,0x1c
c0010f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6d:	83 ec 08             	sub    esp,0x8
c0010f70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f74:	50                   	push   eax
c0010f75:	e8 9e f8 ff ff       	call   c0010818 <Device::Device(char const*)>
c0010f7a:	83 c4 10             	add    esp,0x10
c0010f7d:	ba 34 20 02 c0       	mov    edx,0xc0022034
c0010f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f86:	89 10                	mov    DWORD PTR [eax],edx
c0010f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f8c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010f96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f9e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fa6:	7f 5e                	jg     c0011006 <InterruptController::InterruptController(char const*)+0xa0>
c0010fa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fb0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fb5:	7f 49                	jg     c0011000 <InterruptController::InterruptController(char const*)+0x9a>
c0010fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fbf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fca:	01 ca                	add    edx,ecx
c0010fcc:	83 c2 54             	add    edx,0x54
c0010fcf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fdf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fea:	01 ca                	add    edx,ecx
c0010fec:	81 c2 54 04 00 00    	add    edx,0x454
c0010ff2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ffa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ffe:	eb b0                	jmp    c0010fb0 <InterruptController::InterruptController(char const*)+0x4a>
c0011000:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011004:	eb 98                	jmp    c0010f9e <InterruptController::InterruptController(char const*)+0x38>
c0011006:	90                   	nop
c0011007:	83 c4 1c             	add    esp,0x1c
c001100a:	c3                   	ret    
c001100b:	90                   	nop

c001100c <InterruptController::~InterruptController()>:
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	ba 34 20 02 c0       	mov    edx,0xc0022034
c0011014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011018:	89 10                	mov    DWORD PTR [eax],edx
c001101a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	50                   	push   eax
c0011022:	e8 a7 f4 ff ff       	call   c00104ce <Device::~Device()>
c0011027:	83 c4 10             	add    esp,0x10
c001102a:	90                   	nop
c001102b:	83 c4 0c             	add    esp,0xc
c001102e:	c3                   	ret    
c001102f:	90                   	nop

c0011030 <InterruptController::~InterruptController()>:
c0011030:	83 ec 0c             	sub    esp,0xc
c0011033:	83 ec 0c             	sub    esp,0xc
c0011036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103a:	e8 cd ff ff ff       	call   c001100c <InterruptController::~InterruptController()>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	83 ec 08             	sub    esp,0x8
c0011045:	68 58 21 00 00       	push   0x2158
c001104a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104e:	e8 9a e0 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0011053:	83 c4 10             	add    esp,0x10
c0011056:	83 c4 0c             	add    esp,0xc
c0011059:	c3                   	ret    

c001105a <displayDebugInfo(regs*)>:
c001105a:	55                   	push   ebp
c001105b:	57                   	push   edi
c001105c:	56                   	push   esi
c001105d:	53                   	push   ebx
c001105e:	83 ec 24             	sub    esp,0x24
c0011061:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011065:	0f 20 c2             	mov    edx,cr0
c0011068:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001106c:	0f 20 d7             	mov    edi,cr2
c001106f:	0f 20 de             	mov    esi,cr3
c0011072:	0f 20 e5             	mov    ebp,cr4
c0011075:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011078:	68 42 1e 02 c0       	push   0xc0021e42
c001107d:	e8 91 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011082:	58                   	pop    eax
c0011083:	5a                   	pop    edx
c0011084:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011087:	68 4d 1e 02 c0       	push   0xc0021e4d
c001108c:	e8 82 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011091:	59                   	pop    ecx
c0011092:	58                   	pop    eax
c0011093:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011096:	68 58 1e 02 c0       	push   0xc0021e58
c001109b:	e8 73 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110a0:	58                   	pop    eax
c00110a1:	5a                   	pop    edx
c00110a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110a5:	68 63 1e 02 c0       	push   0xc0021e63
c00110aa:	e8 64 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110af:	59                   	pop    ecx
c00110b0:	58                   	pop    eax
c00110b1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110b4:	68 6e 1e 02 c0       	push   0xc0021e6e
c00110b9:	e8 55 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110be:	58                   	pop    eax
c00110bf:	5a                   	pop    edx
c00110c0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110c3:	68 79 1e 02 c0       	push   0xc0021e79
c00110c8:	e8 46 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110cd:	59                   	pop    ecx
c00110ce:	58                   	pop    eax
c00110cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110d2:	68 84 1e 02 c0       	push   0xc0021e84
c00110d7:	e8 37 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110dc:	58                   	pop    eax
c00110dd:	5a                   	pop    edx
c00110de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110e1:	68 8f 1e 02 c0       	push   0xc0021e8f
c00110e6:	e8 28 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110eb:	59                   	pop    ecx
c00110ec:	58                   	pop    eax
c00110ed:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110f0:	68 9a 1e 02 c0       	push   0xc0021e9a
c00110f5:	e8 19 e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00110fa:	58                   	pop    eax
c00110fb:	5a                   	pop    edx
c00110fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110ff:	68 a9 1e 02 c0       	push   0xc0021ea9
c0011104:	e8 0a e1 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011109:	59                   	pop    ecx
c001110a:	58                   	pop    eax
c001110b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001110e:	68 b4 1e 02 c0       	push   0xc0021eb4
c0011113:	e8 fb e0 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011118:	58                   	pop    eax
c0011119:	5a                   	pop    edx
c001111a:	57                   	push   edi
c001111b:	68 bf 1e 02 c0       	push   0xc0021ebf
c0011120:	e8 ee e0 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011125:	59                   	pop    ecx
c0011126:	58                   	pop    eax
c0011127:	56                   	push   esi
c0011128:	68 ca 1e 02 c0       	push   0xc0021eca
c001112d:	e8 e1 e0 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011132:	58                   	pop    eax
c0011133:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011138:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001113e:	e8 00 c2 ff ff       	call   c000d343 <setActiveTerminal(VgaText*)>
c0011143:	58                   	pop    eax
c0011144:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011147:	5a                   	pop    edx
c0011148:	c1 e0 05             	shl    eax,0x5
c001114b:	05 20 3c 02 c0       	add    eax,0xc0023c20
c0011150:	50                   	push   eax
c0011151:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115c:	e8 03 c6 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011161:	59                   	pop    ecx
c0011162:	58                   	pop    eax
c0011163:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011168:	68 d5 1e 02 c0       	push   0xc0021ed5
c001116d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011173:	e8 ec c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011178:	58                   	pop    eax
c0011179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001117e:	5a                   	pop    edx
c001117f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011182:	83 c0 0c             	add    eax,0xc
c0011185:	50                   	push   eax
c0011186:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c001118b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011191:	e8 ce c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011196:	59                   	pop    ecx
c0011197:	58                   	pop    eax
c0011198:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c001119d:	68 de 1e 02 c0       	push   0xc0021ede
c00111a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a8:	e8 b7 c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c00111ad:	58                   	pop    eax
c00111ae:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00111b3:	5a                   	pop    edx
c00111b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111bd:	e8 c8 c5 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c00111c2:	59                   	pop    ecx
c00111c3:	58                   	pop    eax
c00111c4:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00111c9:	68 e6 1e 02 c0       	push   0xc0021ee6
c00111ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d4:	e8 8b c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c00111d9:	58                   	pop    eax
c00111da:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00111df:	5a                   	pop    edx
c00111e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e9:	e8 9c c5 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c00111ee:	59                   	pop    ecx
c00111ef:	58                   	pop    eax
c00111f0:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00111f5:	68 ee 1e 02 c0       	push   0xc0021eee
c00111fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011200:	e8 5f c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011205:	58                   	pop    eax
c0011206:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c001120b:	5a                   	pop    edx
c001120c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001120f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011215:	e8 70 c5 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001121a:	59                   	pop    ecx
c001121b:	58                   	pop    eax
c001121c:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011221:	68 f6 1e 02 c0       	push   0xc0021ef6
c0011226:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001122c:	e8 33 c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011231:	58                   	pop    eax
c0011232:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011237:	5a                   	pop    edx
c0011238:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001123b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011241:	e8 44 c5 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0011246:	59                   	pop    ecx
c0011247:	58                   	pop    eax
c0011248:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c001124d:	68 fe 1e 02 c0       	push   0xc0021efe
c0011252:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011258:	e8 07 c5 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c001125d:	58                   	pop    eax
c001125e:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011263:	5a                   	pop    edx
c0011264:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011267:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001126d:	e8 18 c5 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0011272:	59                   	pop    ecx
c0011273:	58                   	pop    eax
c0011274:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011279:	68 06 1f 02 c0       	push   0xc0021f06
c001127e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011284:	e8 db c4 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011289:	58                   	pop    eax
c001128a:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c001128f:	5a                   	pop    edx
c0011290:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011293:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011299:	e8 ec c4 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001129e:	59                   	pop    ecx
c001129f:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00112a4:	5b                   	pop    ebx
c00112a5:	68 0e 1f 02 c0       	push   0xc0021f0e
c00112aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112b0:	e8 af c4 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c00112b5:	58                   	pop    eax
c00112b6:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00112bb:	5a                   	pop    edx
c00112bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112c0:	52                   	push   edx
c00112c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c7:	e8 be c4 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c00112cc:	59                   	pop    ecx
c00112cd:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00112d2:	5b                   	pop    ebx
c00112d3:	68 17 1f 02 c0       	push   0xc0021f17
c00112d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112de:	e8 81 c4 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c00112e3:	58                   	pop    eax
c00112e4:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00112e9:	5a                   	pop    edx
c00112ea:	57                   	push   edi
c00112eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f1:	e8 94 c4 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c00112f6:	59                   	pop    ecx
c00112f7:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00112fc:	5b                   	pop    ebx
c00112fd:	68 1f 1f 02 c0       	push   0xc0021f1f
c0011302:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011308:	e8 57 c4 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c001130d:	5f                   	pop    edi
c001130e:	58                   	pop    eax
c001130f:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011314:	56                   	push   esi
c0011315:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001131b:	e8 6a c4 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0011320:	58                   	pop    eax
c0011321:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011326:	5a                   	pop    edx
c0011327:	68 27 1f 02 c0       	push   0xc0021f27
c001132c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011332:	e8 2d c4 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011337:	59                   	pop    ecx
c0011338:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c001133d:	5b                   	pop    ebx
c001133e:	55                   	push   ebp
c001133f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011345:	e8 40 c4 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001134a:	5e                   	pop    esi
c001134b:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011350:	5f                   	pop    edi
c0011351:	68 2f 1f 02 c0       	push   0xc0021f2f
c0011356:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001135c:	e8 03 c4 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011361:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011366:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001136c:	e8 e2 e7 00 00       	call   c001fb53 <CPU::readDR0()>
c0011371:	5d                   	pop    ebp
c0011372:	5a                   	pop    edx
c0011373:	50                   	push   eax
c0011374:	53                   	push   ebx
c0011375:	e8 10 c4 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001137a:	59                   	pop    ecx
c001137b:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011380:	5b                   	pop    ebx
c0011381:	68 38 1f 02 c0       	push   0xc0021f38
c0011386:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001138c:	e8 d3 c3 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011391:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011396:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001139c:	e8 c4 e7 00 00       	call   c001fb65 <CPU::readDR1()>
c00113a1:	5e                   	pop    esi
c00113a2:	5f                   	pop    edi
c00113a3:	50                   	push   eax
c00113a4:	53                   	push   ebx
c00113a5:	e8 e0 c3 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c00113aa:	5d                   	pop    ebp
c00113ab:	58                   	pop    eax
c00113ac:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00113b1:	68 40 1f 02 c0       	push   0xc0021f40
c00113b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113bc:	e8 a3 c3 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c00113c1:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00113c6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113cc:	e8 a6 e7 00 00       	call   c001fb77 <CPU::readDR2()>
c00113d1:	5a                   	pop    edx
c00113d2:	59                   	pop    ecx
c00113d3:	50                   	push   eax
c00113d4:	53                   	push   ebx
c00113d5:	e8 b0 c3 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c00113da:	5b                   	pop    ebx
c00113db:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00113e0:	5e                   	pop    esi
c00113e1:	68 48 1f 02 c0       	push   0xc0021f48
c00113e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113ec:	e8 73 c3 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c00113f1:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00113f6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113fc:	e8 88 e7 00 00       	call   c001fb89 <CPU::readDR3()>
c0011401:	5f                   	pop    edi
c0011402:	5d                   	pop    ebp
c0011403:	50                   	push   eax
c0011404:	53                   	push   ebx
c0011405:	e8 80 c3 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001140a:	58                   	pop    eax
c001140b:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011410:	5a                   	pop    edx
c0011411:	68 50 1f 02 c0       	push   0xc0021f50
c0011416:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001141c:	e8 43 c3 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011421:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011426:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001142c:	e8 6a e7 00 00       	call   c001fb9b <CPU::readDR6()>
c0011431:	59                   	pop    ecx
c0011432:	5e                   	pop    esi
c0011433:	50                   	push   eax
c0011434:	53                   	push   ebx
c0011435:	e8 50 c3 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001143a:	5f                   	pop    edi
c001143b:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011440:	5d                   	pop    ebp
c0011441:	68 58 1f 02 c0       	push   0xc0021f58
c0011446:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001144c:	e8 13 c3 ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0011451:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0011456:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001145c:	e8 4c e7 00 00       	call   c001fbad <CPU::readDR7()>
c0011461:	5a                   	pop    edx
c0011462:	59                   	pop    ecx
c0011463:	50                   	push   eax
c0011464:	53                   	push   ebx
c0011465:	e8 20 c3 ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c001146a:	fa                   	cli    
c001146b:	f4                   	hlt    
c001146c:	83 c4 10             	add    esp,0x10
c001146f:	eb fe                	jmp    c001146f <displayDebugInfo(regs*)+0x415>

c0011471 <x87EmulHandler(regs*, void*)>:
c0011471:	53                   	push   ebx
c0011472:	83 ec 08             	sub    esp,0x8
c0011475:	a1 f4 48 02 c0       	mov    eax,ds:0xc00248f4
c001147a:	85 c0                	test   eax,eax
c001147c:	74 15                	je     c0011493 <x87EmulHandler(regs*, void*)+0x22>
c001147e:	83 ec 0c             	sub    esp,0xc
c0011481:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011485:	ff d0                	call   eax
c0011487:	83 c4 10             	add    esp,0x10
c001148a:	84 c0                	test   al,al
c001148c:	74 2f                	je     c00114bd <x87EmulHandler(regs*, void*)+0x4c>
c001148e:	83 c4 08             	add    esp,0x8
c0011491:	5b                   	pop    ebx
c0011492:	c3                   	ret    
c0011493:	83 ec 08             	sub    esp,0x8
c0011496:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c001149c:	6a 01                	push   0x1
c001149e:	68 60 1f 02 c0       	push   0xc0021f60
c00114a3:	e8 a3 6f 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c00114a8:	5a                   	pop    edx
c00114a9:	59                   	pop    ecx
c00114aa:	53                   	push   ebx
c00114ab:	50                   	push   eax
c00114ac:	e8 60 71 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c00114b1:	a1 f4 48 02 c0       	mov    eax,ds:0xc00248f4
c00114b6:	83 c4 10             	add    esp,0x10
c00114b9:	85 c0                	test   eax,eax
c00114bb:	75 c1                	jne    c001147e <x87EmulHandler(regs*, void*)+0xd>
c00114bd:	83 ec 0c             	sub    esp,0xc
c00114c0:	68 7d 1f 02 c0       	push   0xc0021f7d
c00114c5:	e8 49 dd ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00114ca:	58                   	pop    eax
c00114cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cf:	e8 86 fb ff ff       	call   c001105a <displayDebugInfo(regs*)>

c00114d4 <gpFault(regs*, void*)>:
c00114d4:	53                   	push   ebx
c00114d5:	83 ec 14             	sub    esp,0x14
c00114d8:	c7 05 f0 48 02 c0 c3 98 01 c0 	mov    DWORD PTR ds:0xc00248f0,0xc00198c3
c00114e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114e6:	53                   	push   ebx
c00114e7:	e8 d7 83 00 00       	call   c00198c3 <Vm::faultHandler(regs*)>
c00114ec:	83 c4 10             	add    esp,0x10
c00114ef:	84 c0                	test   al,al
c00114f1:	74 05                	je     c00114f8 <gpFault(regs*, void*)+0x24>
c00114f3:	83 c4 08             	add    esp,0x8
c00114f6:	5b                   	pop    ebx
c00114f7:	c3                   	ret    
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	68 7d 1f 02 c0       	push   0xc0021f7d
c0011500:	e8 0e dd ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011508:	e8 4d fb ff ff       	call   c001105a <displayDebugInfo(regs*)>

c001150d <pgFault(regs*, void*)>:
c001150d:	83 ec 18             	sub    esp,0x18
c0011510:	68 98 1f 02 c0       	push   0xc0021f98
c0011515:	e8 f9 dc ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001151a:	58                   	pop    eax
c001151b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001151f:	e8 36 fb ff ff       	call   c001105a <displayDebugInfo(regs*)>

c0011524 <otherISRHandler(regs*, void*)>:
c0011524:	53                   	push   ebx
c0011525:	83 ec 0c             	sub    esp,0xc
c0011528:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001152c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001152f:	50                   	push   eax
c0011530:	50                   	push   eax
c0011531:	68 a5 1f 02 c0       	push   0xc0021fa5
c0011536:	e8 d8 dc ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001153b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001153e:	e8 17 fb ff ff       	call   c001105a <displayDebugInfo(regs*)>

c0011543 <opcodeFault(regs*, void*)>:
c0011543:	55                   	push   ebp
c0011544:	89 e5                	mov    ebp,esp
c0011546:	56                   	push   esi
c0011547:	53                   	push   ebx
c0011548:	83 ec 40             	sub    esp,0x40
c001154b:	e8 6c 33 00 00       	call   c00148bc <thisCPU()>
c0011550:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011556:	84 c0                	test   al,al
c0011558:	74 24                	je     c001157e <opcodeFault(regs*, void*)+0x3b>
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	68 c4 1f 02 c0       	push   0xc0021fc4
c0011562:	e8 ac dc ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011570:	8d 50 19             	lea    edx,[eax+0x19]
c0011573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011576:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011579:	e9 5d 05 00 00       	jmp    c0011adb <opcodeFault(regs*, void*)+0x598>
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011584:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011587:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001158b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011595:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0011598:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001159b:	8a 00                	mov    al,BYTE PTR [eax]
c001159d:	3c f0                	cmp    al,0xf0
c001159f:	75 17                	jne    c00115b8 <opcodeFault(regs*, void*)+0x75>
c00115a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115aa:	8d 50 01             	lea    edx,[eax+0x1]
c00115ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b3:	e9 da 00 00 00       	jmp    c0011692 <opcodeFault(regs*, void*)+0x14f>
c00115b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bb:	8a 00                	mov    al,BYTE PTR [eax]
c00115bd:	3c f2                	cmp    al,0xf2
c00115bf:	74 09                	je     c00115ca <opcodeFault(regs*, void*)+0x87>
c00115c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c4:	8a 00                	mov    al,BYTE PTR [eax]
c00115c6:	3c f3                	cmp    al,0xf3
c00115c8:	75 1b                	jne    c00115e5 <opcodeFault(regs*, void*)+0xa2>
c00115ca:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115d7:	8d 50 01             	lea    edx,[eax+0x1]
c00115da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115e0:	e9 ad 00 00 00       	jmp    c0011692 <opcodeFault(regs*, void*)+0x14f>
c00115e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e8:	8a 00                	mov    al,BYTE PTR [eax]
c00115ea:	3c 66                	cmp    al,0x66
c00115ec:	75 1f                	jne    c001160d <opcodeFault(regs*, void*)+0xca>
c00115ee:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115f2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00115f6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ff:	8d 50 01             	lea    edx,[eax+0x1]
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011608:	e9 85 00 00 00       	jmp    c0011692 <opcodeFault(regs*, void*)+0x14f>
c001160d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011610:	8a 00                	mov    al,BYTE PTR [eax]
c0011612:	3c 67                	cmp    al,0x67
c0011614:	75 18                	jne    c001162e <opcodeFault(regs*, void*)+0xeb>
c0011616:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001161a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001161d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011620:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011623:	8d 50 01             	lea    edx,[eax+0x1]
c0011626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011629:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001162c:	eb 64                	jmp    c0011692 <opcodeFault(regs*, void*)+0x14f>
c001162e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011631:	8a 00                	mov    al,BYTE PTR [eax]
c0011633:	3c 2e                	cmp    al,0x2e
c0011635:	74 09                	je     c0011640 <opcodeFault(regs*, void*)+0xfd>
c0011637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001163a:	8a 00                	mov    al,BYTE PTR [eax]
c001163c:	3c 3e                	cmp    al,0x3e
c001163e:	75 18                	jne    c0011658 <opcodeFault(regs*, void*)+0x115>
c0011640:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011644:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001164d:	8d 50 01             	lea    edx,[eax+0x1]
c0011650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011653:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011656:	eb 3a                	jmp    c0011692 <opcodeFault(regs*, void*)+0x14f>
c0011658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001165b:	8a 00                	mov    al,BYTE PTR [eax]
c001165d:	3c 36                	cmp    al,0x36
c001165f:	74 1b                	je     c001167c <opcodeFault(regs*, void*)+0x139>
c0011661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011664:	8a 00                	mov    al,BYTE PTR [eax]
c0011666:	3c 26                	cmp    al,0x26
c0011668:	74 12                	je     c001167c <opcodeFault(regs*, void*)+0x139>
c001166a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166d:	8a 00                	mov    al,BYTE PTR [eax]
c001166f:	3c 64                	cmp    al,0x64
c0011671:	74 09                	je     c001167c <opcodeFault(regs*, void*)+0x139>
c0011673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011676:	8a 00                	mov    al,BYTE PTR [eax]
c0011678:	3c 65                	cmp    al,0x65
c001167a:	75 16                	jne    c0011692 <opcodeFault(regs*, void*)+0x14f>
c001167c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011680:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011686:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011689:	8d 50 01             	lea    edx,[eax+0x1]
c001168c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011695:	8a 00                	mov    al,BYTE PTR [eax]
c0011697:	3c 0f                	cmp    al,0xf
c0011699:	0f 85 93 00 00 00    	jne    c0011732 <opcodeFault(regs*, void*)+0x1ef>
c001169f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a2:	40                   	inc    eax
c00116a3:	8a 00                	mov    al,BYTE PTR [eax]
c00116a5:	3c c0                	cmp    al,0xc0
c00116a7:	74 0a                	je     c00116b3 <opcodeFault(regs*, void*)+0x170>
c00116a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ac:	40                   	inc    eax
c00116ad:	8a 00                	mov    al,BYTE PTR [eax]
c00116af:	3c c1                	cmp    al,0xc1
c00116b1:	75 7f                	jne    c0011732 <opcodeFault(regs*, void*)+0x1ef>
c00116b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116b9:	8d 50 01             	lea    edx,[eax+0x1]
c00116bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116c8:	8a 00                	mov    al,BYTE PTR [eax]
c00116ca:	8d 50 fe             	lea    edx,[eax-0x2]
c00116cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116d0:	88 10                	mov    BYTE PTR [eax],dl
c00116d2:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116d5:	50                   	push   eax
c00116d6:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116d9:	50                   	push   eax
c00116da:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116dd:	50                   	push   eax
c00116de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116e1:	e8 42 41 00 00       	call   c0015828 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00116e6:	83 c4 10             	add    esp,0x10
c00116e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116ef:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00116f2:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00116f5:	01 d0                	add    eax,edx
c00116f7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00116fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011700:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011703:	48                   	dec    eax
c0011704:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170a:	83 ec 04             	sub    esp,0x4
c001170d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011710:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011713:	50                   	push   eax
c0011714:	e8 37 ea fe ff       	call   c0000150 <voodooXADD>
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011722:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011725:	01 c2                	add    edx,eax
c0011727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001172a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001172d:	e9 a9 03 00 00       	jmp    c0011adb <opcodeFault(regs*, void*)+0x598>
c0011732:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011735:	8a 00                	mov    al,BYTE PTR [eax]
c0011737:	3c 0f                	cmp    al,0xf
c0011739:	0f 85 8b 01 00 00    	jne    c00118ca <opcodeFault(regs*, void*)+0x387>
c001173f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011742:	40                   	inc    eax
c0011743:	8a 00                	mov    al,BYTE PTR [eax]
c0011745:	3c c7                	cmp    al,0xc7
c0011747:	0f 86 7d 01 00 00    	jbe    c00118ca <opcodeFault(regs*, void*)+0x387>
c001174d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011750:	40                   	inc    eax
c0011751:	8a 00                	mov    al,BYTE PTR [eax]
c0011753:	3c cf                	cmp    al,0xcf
c0011755:	0f 87 6f 01 00 00    	ja     c00118ca <opcodeFault(regs*, void*)+0x387>
c001175b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001175e:	40                   	inc    eax
c001175f:	8a 00                	mov    al,BYTE PTR [eax]
c0011761:	83 c0 38             	add    eax,0x38
c0011764:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011767:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001176b:	75 0b                	jne    c0011778 <opcodeFault(regs*, void*)+0x235>
c001176d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011770:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011773:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011776:	eb 75                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c0011778:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001177c:	75 0b                	jne    c0011789 <opcodeFault(regs*, void*)+0x246>
c001177e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011781:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011784:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011787:	eb 64                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c0011789:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001178d:	75 0b                	jne    c001179a <opcodeFault(regs*, void*)+0x257>
c001178f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011792:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011795:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011798:	eb 53                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c001179a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001179e:	75 0b                	jne    c00117ab <opcodeFault(regs*, void*)+0x268>
c00117a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117a9:	eb 42                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c00117ab:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117af:	75 0b                	jne    c00117bc <opcodeFault(regs*, void*)+0x279>
c00117b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ba:	eb 31                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c00117bc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117c0:	75 0b                	jne    c00117cd <opcodeFault(regs*, void*)+0x28a>
c00117c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117cb:	eb 20                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c00117cd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117d1:	75 0b                	jne    c00117de <opcodeFault(regs*, void*)+0x29b>
c00117d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117dc:	eb 0f                	jmp    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c00117de:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117e2:	75 09                	jne    c00117ed <opcodeFault(regs*, void*)+0x2aa>
c00117e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00117ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ed:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00117f1:	74 10                	je     c0011803 <opcodeFault(regs*, void*)+0x2c0>
c00117f3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00117fa:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011801:	eb 2d                	jmp    c0011830 <opcodeFault(regs*, void*)+0x2ed>
c0011803:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011806:	c1 e0 18             	shl    eax,0x18
c0011809:	89 c2                	mov    edx,eax
c001180b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001180e:	c1 e0 08             	shl    eax,0x8
c0011811:	25 00 00 ff 00       	and    eax,0xff0000
c0011816:	09 c2                	or     edx,eax
c0011818:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001181b:	c1 e8 08             	shr    eax,0x8
c001181e:	25 00 ff 00 00       	and    eax,0xff00
c0011823:	09 c2                	or     edx,eax
c0011825:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011828:	c1 e8 18             	shr    eax,0x18
c001182b:	09 d0                	or     eax,edx
c001182d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011830:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011834:	75 0b                	jne    c0011841 <opcodeFault(regs*, void*)+0x2fe>
c0011836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011839:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001183c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001183f:	eb 75                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c0011841:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011845:	75 0b                	jne    c0011852 <opcodeFault(regs*, void*)+0x30f>
c0011847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001184d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011850:	eb 64                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c0011852:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011856:	75 0b                	jne    c0011863 <opcodeFault(regs*, void*)+0x320>
c0011858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001185e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011861:	eb 53                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c0011863:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011867:	75 0b                	jne    c0011874 <opcodeFault(regs*, void*)+0x331>
c0011869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001186f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011872:	eb 42                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c0011874:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0011878:	75 0b                	jne    c0011885 <opcodeFault(regs*, void*)+0x342>
c001187a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011880:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0011883:	eb 31                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c0011885:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011889:	75 0b                	jne    c0011896 <opcodeFault(regs*, void*)+0x353>
c001188b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001188e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011891:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011894:	eb 20                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c0011896:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001189a:	75 0b                	jne    c00118a7 <opcodeFault(regs*, void*)+0x364>
c001189c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118a2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118a5:	eb 0f                	jmp    c00118b6 <opcodeFault(regs*, void*)+0x373>
c00118a7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118ab:	75 09                	jne    c00118b6 <opcodeFault(regs*, void*)+0x373>
c00118ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118b3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118bc:	8d 50 02             	lea    edx,[eax+0x2]
c00118bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118c5:	e9 11 02 00 00       	jmp    c0011adb <opcodeFault(regs*, void*)+0x598>
c00118ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118cd:	8a 00                	mov    al,BYTE PTR [eax]
c00118cf:	3c 0f                	cmp    al,0xf
c00118d1:	0f 85 76 01 00 00    	jne    c0011a4d <opcodeFault(regs*, void*)+0x50a>
c00118d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118da:	40                   	inc    eax
c00118db:	8a 00                	mov    al,BYTE PTR [eax]
c00118dd:	3c c7                	cmp    al,0xc7
c00118df:	0f 85 68 01 00 00    	jne    c0011a4d <opcodeFault(regs*, void*)+0x50a>
c00118e5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00118e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118ee:	8d 50 01             	lea    edx,[eax+0x1]
c00118f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118f7:	8d 45 ba             	lea    eax,[ebp-0x46]
c00118fa:	50                   	push   eax
c00118fb:	8d 45 bb             	lea    eax,[ebp-0x45]
c00118fe:	50                   	push   eax
c00118ff:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011902:	50                   	push   eax
c0011903:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011906:	e8 1d 3f 00 00       	call   c0015828 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011911:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011914:	83 f0 01             	xor    eax,0x1
c0011917:	84 c0                	test   al,al
c0011919:	0f 84 2e 01 00 00    	je     c0011a4d <opcodeFault(regs*, void*)+0x50a>
c001191f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011922:	3c 01                	cmp    al,0x1
c0011924:	0f 85 23 01 00 00    	jne    c0011a4d <opcodeFault(regs*, void*)+0x50a>
c001192a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001192d:	83 f0 01             	xor    eax,0x1
c0011930:	84 c0                	test   al,al
c0011932:	0f 84 15 01 00 00    	je     c0011a4d <opcodeFault(regs*, void*)+0x50a>
c0011938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001193e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011941:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011948:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001194b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001194e:	89 c2                	mov    edx,eax
c0011950:	b8 00 00 00 00       	mov    eax,0x0
c0011955:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011958:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001195b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011961:	ba 00 00 00 00       	mov    edx,0x0
c0011966:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011969:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001196c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011972:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011975:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001197c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001197f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011982:	89 c2                	mov    edx,eax
c0011984:	b8 00 00 00 00       	mov    eax,0x0
c0011989:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001198c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011992:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011995:	ba 00 00 00 00       	mov    edx,0x0
c001199a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001199d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119a0:	e8 8c 70 00 00       	call   c0018a31 <lockScheduler()>
c00119a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00119ad:	89 c1                	mov    ecx,eax
c00119af:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119b2:	89 cb                	mov    ebx,ecx
c00119b4:	89 d0                	mov    eax,edx
c00119b6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119b9:	89 c6                	mov    esi,eax
c00119bb:	89 f0                	mov    eax,esi
c00119bd:	09 d8                	or     eax,ebx
c00119bf:	85 c0                	test   eax,eax
c00119c1:	75 21                	jne    c00119e4 <opcodeFault(regs*, void*)+0x4a1>
c00119c3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119c6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119c9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119cc:	89 01                	mov    DWORD PTR [ecx],eax
c00119ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119d7:	83 c8 40             	or     eax,0x40
c00119da:	89 c2                	mov    edx,eax
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119e2:	eb 3e                	jmp    c0011a22 <opcodeFault(regs*, void*)+0x4df>
c00119e4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119e7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00119ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00119ef:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00119f2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00119f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00119fb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00119fe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a01:	89 d0                	mov    eax,edx
c0011a03:	31 d2                	xor    edx,edx
c0011a05:	89 c3                	mov    ebx,eax
c0011a07:	89 d6                	mov    esi,edx
c0011a09:	89 da                	mov    edx,ebx
c0011a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a17:	83 e0 bf             	and    eax,0xffffffbf
c0011a1a:	89 c2                	mov    edx,eax
c0011a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a22:	e8 0c 70 00 00       	call   c0018a33 <unlockScheduler()>
c0011a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a2d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a30:	01 c2                	add    edx,eax
c0011a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a35:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a38:	83 ec 0c             	sub    esp,0xc
c0011a3b:	68 e7 1f 02 c0       	push   0xc0021fe7
c0011a40:	e8 ce d7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011a45:	83 c4 10             	add    esp,0x10
c0011a48:	e9 8e 00 00 00       	jmp    c0011adb <opcodeFault(regs*, void*)+0x598>
c0011a4d:	83 ec 0c             	sub    esp,0xc
c0011a50:	68 fa 1f 02 c0       	push   0xc0021ffa
c0011a55:	e8 b9 d7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a60:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a69:	c1 e0 04             	shl    eax,0x4
c0011a6c:	01 d0                	add    eax,edx
c0011a6e:	83 c0 03             	add    eax,0x3
c0011a71:	8a 00                	mov    al,BYTE PTR [eax]
c0011a73:	0f b6 d8             	movzx  ebx,al
c0011a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a79:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a82:	c1 e0 04             	shl    eax,0x4
c0011a85:	01 d0                	add    eax,edx
c0011a87:	83 c0 02             	add    eax,0x2
c0011a8a:	8a 00                	mov    al,BYTE PTR [eax]
c0011a8c:	0f b6 c8             	movzx  ecx,al
c0011a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a92:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9b:	c1 e0 04             	shl    eax,0x4
c0011a9e:	01 d0                	add    eax,edx
c0011aa0:	40                   	inc    eax
c0011aa1:	8a 00                	mov    al,BYTE PTR [eax]
c0011aa3:	0f b6 d0             	movzx  edx,al
c0011aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aaf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab2:	c1 e0 04             	shl    eax,0x4
c0011ab5:	01 f0                	add    eax,esi
c0011ab7:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab9:	0f b6 c0             	movzx  eax,al
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	53                   	push   ebx
c0011ac0:	51                   	push   ecx
c0011ac1:	52                   	push   edx
c0011ac2:	50                   	push   eax
c0011ac3:	68 0c 20 02 c0       	push   0xc002200c
c0011ac8:	e8 46 d7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011acd:	83 c4 20             	add    esp,0x20
c0011ad0:	83 ec 0c             	sub    esp,0xc
c0011ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011ad6:	e8 7f f5 ff ff       	call   c001105a <displayDebugInfo(regs*)>
c0011adb:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011ade:	5b                   	pop    ebx
c0011adf:	5e                   	pop    esi
c0011ae0:	5d                   	pop    ebp
c0011ae1:	c3                   	ret    

c0011ae2 <displayProgramFault(char const*)>:
c0011ae2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011aea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011af0:	85 c0                	test   eax,eax
c0011af2:	74 15                	je     c0011b09 <displayProgramFault(char const*)+0x27>
c0011af4:	83 ec 0c             	sub    esp,0xc
c0011af7:	6a 04                	push   0x4
c0011af9:	6a 0f                	push   0xf
c0011afb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011aff:	50                   	push   eax
c0011b00:	e8 1f b9 ff ff       	call   c000d424 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b05:	83 c4 1c             	add    esp,0x1c
c0011b08:	c3                   	ret    
c0011b09:	c3                   	ret    

c0011b0a <setupInterruptController()>:
c0011b0a:	55                   	push   ebp
c0011b0b:	89 e5                	mov    ebp,esp
c0011b0d:	53                   	push   ebx
c0011b0e:	83 ec 14             	sub    esp,0x14
c0011b11:	e8 a3 2d 00 00       	call   c00148b9 <getCPUNumber()>
c0011b16:	85 c0                	test   eax,eax
c0011b18:	0f 95 c0             	setne  al
c0011b1b:	84 c0                	test   al,al
c0011b1d:	74 56                	je     c0011b75 <setupInterruptController()+0x6b>
c0011b1f:	83 ec 0c             	sub    esp,0xc
c0011b22:	68 58 21 00 00       	push   0x2158
c0011b27:	e8 b2 d5 ff ff       	call   c000f0de <operator new(unsigned long)>
c0011b2c:	83 c4 10             	add    esp,0x10
c0011b2f:	89 c3                	mov    ebx,eax
c0011b31:	83 ec 0c             	sub    esp,0xc
c0011b34:	53                   	push   ebx
c0011b35:	e8 6a c9 00 00       	call   c001e4a4 <APIC::APIC()>
c0011b3a:	83 c4 10             	add    esp,0x10
c0011b3d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b40:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b48:	83 c0 08             	add    eax,0x8
c0011b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4d:	6a 00                	push   0x0
c0011b4f:	6a 00                	push   0x0
c0011b51:	6a 00                	push   0x0
c0011b53:	52                   	push   edx
c0011b54:	ff d0                	call   eax
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0011b5e:	83 ec 08             	sub    esp,0x8
c0011b61:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b64:	50                   	push   eax
c0011b65:	e8 be ea ff ff       	call   c0010628 <Device::addChild(Device*)>
c0011b6a:	83 c4 10             	add    esp,0x10
c0011b6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b70:	e9 48 03 00 00       	jmp    c0011ebd <setupInterruptController()+0x3b3>
c0011b75:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0011b7a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b80:	83 e0 01             	and    eax,0x1
c0011b83:	84 c0                	test   al,al
c0011b85:	0f 95 c0             	setne  al
c0011b88:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011b8b:	83 ec 0c             	sub    esp,0xc
c0011b8e:	68 58 21 00 00       	push   0x2158
c0011b93:	e8 46 d5 ff ff       	call   c000f0de <operator new(unsigned long)>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	89 c3                	mov    ebx,eax
c0011b9d:	83 ec 0c             	sub    esp,0xc
c0011ba0:	53                   	push   ebx
c0011ba1:	e8 f8 cd 00 00       	call   c001e99e <PIC::PIC()>
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011baf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb4:	83 c0 08             	add    eax,0x8
c0011bb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb9:	6a 00                	push   0x0
c0011bbb:	6a 00                	push   0x0
c0011bbd:	6a 00                	push   0x0
c0011bbf:	52                   	push   edx
c0011bc0:	ff d0                	call   eax
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bc9:	74 6e                	je     c0011c39 <setupInterruptController()+0x12f>
c0011bcb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd3:	83 c0 0c             	add    eax,0xc
c0011bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd8:	6a 00                	push   0x0
c0011bda:	6a 00                	push   0x0
c0011bdc:	6a 00                	push   0x0
c0011bde:	52                   	push   edx
c0011bdf:	ff d0                	call   eax
c0011be1:	83 c4 10             	add    esp,0x10
c0011be4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011be8:	74 15                	je     c0011bff <setupInterruptController()+0xf5>
c0011bea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bef:	83 c0 04             	add    eax,0x4
c0011bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf4:	83 ec 0c             	sub    esp,0xc
c0011bf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bfa:	ff d0                	call   eax
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	83 ec 0c             	sub    esp,0xc
c0011c02:	68 58 21 00 00       	push   0x2158
c0011c07:	e8 d2 d4 ff ff       	call   c000f0de <operator new(unsigned long)>
c0011c0c:	83 c4 10             	add    esp,0x10
c0011c0f:	89 c3                	mov    ebx,eax
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	53                   	push   ebx
c0011c15:	e8 8a c8 00 00       	call   c001e4a4 <APIC::APIC()>
c0011c1a:	83 c4 10             	add    esp,0x10
c0011c1d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c20:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c28:	83 c0 08             	add    eax,0x8
c0011c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c2d:	6a 00                	push   0x0
c0011c2f:	6a 00                	push   0x0
c0011c31:	6a 00                	push   0x0
c0011c33:	52                   	push   edx
c0011c34:	ff d0                	call   eax
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0011c3e:	83 ec 08             	sub    esp,0x8
c0011c41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c44:	50                   	push   eax
c0011c45:	e8 de e9 ff ff       	call   c0010628 <Device::addChild(Device*)>
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c52:	83 c0 24             	add    eax,0x24
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	6a 00                	push   0x0
c0011c59:	68 24 15 01 c0       	push   0xc0011524
c0011c5e:	6a 00                	push   0x0
c0011c60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c63:	ff d0                	call   eax
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6d:	83 c0 24             	add    eax,0x24
c0011c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c72:	6a 00                	push   0x0
c0011c74:	68 24 15 01 c0       	push   0xc0011524
c0011c79:	6a 01                	push   0x1
c0011c7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c7e:	ff d0                	call   eax
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c88:	83 c0 24             	add    eax,0x24
c0011c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8d:	6a 00                	push   0x0
c0011c8f:	68 bd 0e 01 c0       	push   0xc0010ebd
c0011c94:	6a 02                	push   0x2
c0011c96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c99:	ff d0                	call   eax
c0011c9b:	83 c4 10             	add    esp,0x10
c0011c9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca3:	83 c0 24             	add    eax,0x24
c0011ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca8:	6a 00                	push   0x0
c0011caa:	68 24 15 01 c0       	push   0xc0011524
c0011caf:	6a 03                	push   0x3
c0011cb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb4:	ff d0                	call   eax
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbe:	83 c0 24             	add    eax,0x24
c0011cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc3:	6a 00                	push   0x0
c0011cc5:	68 24 15 01 c0       	push   0xc0011524
c0011cca:	6a 04                	push   0x4
c0011ccc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ccf:	ff d0                	call   eax
c0011cd1:	83 c4 10             	add    esp,0x10
c0011cd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd9:	83 c0 24             	add    eax,0x24
c0011cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cde:	6a 00                	push   0x0
c0011ce0:	68 24 15 01 c0       	push   0xc0011524
c0011ce5:	6a 05                	push   0x5
c0011ce7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cea:	ff d0                	call   eax
c0011cec:	83 c4 10             	add    esp,0x10
c0011cef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf4:	83 c0 24             	add    eax,0x24
c0011cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf9:	6a 00                	push   0x0
c0011cfb:	68 43 15 01 c0       	push   0xc0011543
c0011d00:	6a 06                	push   0x6
c0011d02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d05:	ff d0                	call   eax
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0f:	83 c0 24             	add    eax,0x24
c0011d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d14:	6a 00                	push   0x0
c0011d16:	68 71 14 01 c0       	push   0xc0011471
c0011d1b:	6a 07                	push   0x7
c0011d1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d20:	ff d0                	call   eax
c0011d22:	83 c4 10             	add    esp,0x10
c0011d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2a:	83 c0 24             	add    eax,0x24
c0011d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2f:	6a 00                	push   0x0
c0011d31:	68 d8 0c 01 c0       	push   0xc0010cd8
c0011d36:	6a 08                	push   0x8
c0011d38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d3b:	ff d0                	call   eax
c0011d3d:	83 c4 10             	add    esp,0x10
c0011d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d45:	83 c0 24             	add    eax,0x24
c0011d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4a:	6a 00                	push   0x0
c0011d4c:	68 24 15 01 c0       	push   0xc0011524
c0011d51:	6a 09                	push   0x9
c0011d53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d56:	ff d0                	call   eax
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d60:	83 c0 24             	add    eax,0x24
c0011d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d65:	6a 00                	push   0x0
c0011d67:	68 24 15 01 c0       	push   0xc0011524
c0011d6c:	6a 0a                	push   0xa
c0011d6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d71:	ff d0                	call   eax
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7b:	83 c0 24             	add    eax,0x24
c0011d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d80:	6a 00                	push   0x0
c0011d82:	68 24 15 01 c0       	push   0xc0011524
c0011d87:	6a 0b                	push   0xb
c0011d89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d8c:	ff d0                	call   eax
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d96:	83 c0 24             	add    eax,0x24
c0011d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9b:	6a 00                	push   0x0
c0011d9d:	68 24 15 01 c0       	push   0xc0011524
c0011da2:	6a 0c                	push   0xc
c0011da4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da7:	ff d0                	call   eax
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db1:	83 c0 24             	add    eax,0x24
c0011db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db6:	6a 00                	push   0x0
c0011db8:	68 d4 14 01 c0       	push   0xc00114d4
c0011dbd:	6a 0d                	push   0xd
c0011dbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dc2:	ff d0                	call   eax
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dcc:	83 c0 24             	add    eax,0x24
c0011dcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd1:	6a 00                	push   0x0
c0011dd3:	68 0d 15 01 c0       	push   0xc001150d
c0011dd8:	6a 0e                	push   0xe
c0011dda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ddd:	ff d0                	call   eax
c0011ddf:	83 c4 10             	add    esp,0x10
c0011de2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de7:	83 c0 24             	add    eax,0x24
c0011dea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dec:	6a 00                	push   0x0
c0011dee:	68 24 15 01 c0       	push   0xc0011524
c0011df3:	6a 0f                	push   0xf
c0011df5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011df8:	ff d0                	call   eax
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e02:	83 c0 24             	add    eax,0x24
c0011e05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e07:	6a 00                	push   0x0
c0011e09:	68 24 15 01 c0       	push   0xc0011524
c0011e0e:	6a 10                	push   0x10
c0011e10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e13:	ff d0                	call   eax
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1d:	83 c0 24             	add    eax,0x24
c0011e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e22:	6a 00                	push   0x0
c0011e24:	68 24 15 01 c0       	push   0xc0011524
c0011e29:	6a 11                	push   0x11
c0011e2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e2e:	ff d0                	call   eax
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e38:	83 c0 24             	add    eax,0x24
c0011e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e3d:	6a 00                	push   0x0
c0011e3f:	68 24 15 01 c0       	push   0xc0011524
c0011e44:	6a 12                	push   0x12
c0011e46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e49:	ff d0                	call   eax
c0011e4b:	83 c4 10             	add    esp,0x10
c0011e4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e53:	83 c0 24             	add    eax,0x24
c0011e56:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e58:	6a 00                	push   0x0
c0011e5a:	68 24 15 01 c0       	push   0xc0011524
c0011e5f:	6a 13                	push   0x13
c0011e61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e64:	ff d0                	call   eax
c0011e66:	83 c4 10             	add    esp,0x10
c0011e69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6e:	83 c0 24             	add    eax,0x24
c0011e71:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e73:	6a 00                	push   0x0
c0011e75:	68 24 15 01 c0       	push   0xc0011524
c0011e7a:	6a 14                	push   0x14
c0011e7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e7f:	ff d0                	call   eax
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e87:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e89:	83 c0 24             	add    eax,0x24
c0011e8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8e:	6a 00                	push   0x0
c0011e90:	68 24 15 01 c0       	push   0xc0011524
c0011e95:	6a 1e                	push   0x1e
c0011e97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e9a:	ff d0                	call   eax
c0011e9c:	83 c4 10             	add    esp,0x10
c0011e9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ea2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea4:	83 c0 24             	add    eax,0x24
c0011ea7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea9:	6a 00                	push   0x0
c0011eab:	68 38 74 01 c0       	push   0xc0017438
c0011eb0:	6a 60                	push   0x60
c0011eb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011eb5:	ff d0                	call   eax
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ebd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ec0:	c9                   	leave  
c0011ec1:	c3                   	ret    

c0011ec2 <InterruptController::convertLegacyIRQNumber(int)>:
c0011ec2:	55                   	push   ebp
c0011ec3:	89 e5                	mov    ebp,esp
c0011ec5:	83 ec 08             	sub    esp,0x8
c0011ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	50                   	push   eax
c0011ecf:	e8 36 ea ff ff       	call   c001090a <Device::getName()>
c0011ed4:	83 c4 10             	add    esp,0x10
c0011ed7:	8a 00                	mov    al,BYTE PTR [eax]
c0011ed9:	3c 41                	cmp    al,0x41
c0011edb:	0f 94 c0             	sete   al
c0011ede:	84 c0                	test   al,al
c0011ee0:	74 28                	je     c0011f0a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011ee2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011ee6:	7f 12                	jg     c0011efa <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011ee8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011eeb:	05 c0 3e 02 c0       	add    eax,0xc0023ec0
c0011ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0011ef2:	0f b6 c0             	movzx  eax,al
c0011ef5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011ef8:	eb 10                	jmp    c0011f0a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011efa:	83 ec 0c             	sub    esp,0xc
c0011efd:	68 94 1d 02 c0       	push   0xc0021d94
c0011f02:	e8 21 3b 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f0d:	c9                   	leave  
c0011f0e:	c3                   	ret    
c0011f0f:	90                   	nop

c0011f10 <startGUI(void*)>:
c0011f10:	55                   	push   ebp
c0011f11:	89 e5                	mov    ebp,esp
c0011f13:	53                   	push   ebx
c0011f14:	83 ec 04             	sub    esp,0x4
c0011f17:	e8 17 6b 00 00       	call   c0018a33 <unlockScheduler()>
c0011f1c:	e8 fb 6a 00 00       	call   c0018a1c <getIRQNestingLevel()>
c0011f21:	83 ec 08             	sub    esp,0x8
c0011f24:	50                   	push   eax
c0011f25:	68 74 20 02 c0       	push   0xc0022074
c0011f2a:	e8 e4 d2 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0011f2f:	83 c4 10             	add    esp,0x10
c0011f32:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c0011f38:	83 ec 08             	sub    esp,0x8
c0011f3b:	6a 01                	push   0x1
c0011f3d:	68 8e 20 02 c0       	push   0xc002208e
c0011f42:	e8 04 65 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	83 ec 08             	sub    esp,0x8
c0011f4d:	53                   	push   ebx
c0011f4e:	50                   	push   eax
c0011f4f:	e8 bd 66 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c0011f5d:	83 ec 08             	sub    esp,0x8
c0011f60:	6a 01                	push   0x1
c0011f62:	68 a8 20 02 c0       	push   0xc00220a8
c0011f67:	e8 df 64 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	83 ec 08             	sub    esp,0x8
c0011f72:	53                   	push   ebx
c0011f73:	50                   	push   eax
c0011f74:	e8 98 66 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	90                   	nop
c0011f7d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011f80:	c9                   	leave  
c0011f81:	c3                   	ret    

c0011f82 <sendKeyToTerminal(unsigned char)>:
c0011f82:	55                   	push   ebp
c0011f83:	89 e5                	mov    ebp,esp
c0011f85:	83 ec 28             	sub    esp,0x28
c0011f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011f8e:	8b 15 24 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024824
c0011f94:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011f97:	25 ff 00 00 00       	and    eax,0xff
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	50                   	push   eax
c0011fa0:	52                   	push   edx
c0011fa1:	e8 bc b9 ff ff       	call   c000d962 <VgaText::receiveKey(unsigned char)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fad:	75 41                	jne    c0011ff0 <sendKeyToTerminal(unsigned char)+0x6e>
c0011faf:	e8 a4 6a 00 00       	call   c0018a58 <lockStuff()>
c0011fb4:	a1 00 49 02 c0       	mov    eax,ds:0xc0024900
c0011fb9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fbc:	c7 05 00 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024900,0x0
c0011fc6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fca:	74 1f                	je     c0011feb <sendKeyToTerminal(unsigned char)+0x69>
c0011fcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fcf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011fd2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011fd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fd8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fdb:	83 ec 0c             	sub    esp,0xc
c0011fde:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011fe1:	e8 6f 70 00 00       	call   c0019055 <unblockTask(ThreadControlBlock*)>
c0011fe6:	83 c4 10             	add    esp,0x10
c0011fe9:	eb db                	jmp    c0011fc6 <sendKeyToTerminal(unsigned char)+0x44>
c0011feb:	e8 0f 6e 00 00       	call   c0018dff <unlockStuff()>
c0011ff0:	90                   	nop
c0011ff1:	c9                   	leave  
c0011ff2:	c3                   	ret    

c0011ff3 <sendKeyboardToken(KeyboardToken)>:
c0011ff3:	55                   	push   ebp
c0011ff4:	89 e5                	mov    ebp,esp
c0011ff6:	83 ec 18             	sub    esp,0x18
c0011ff9:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fff:	25 ff ff 00 00       	and    eax,0xffff
c0012004:	83 f2 01             	xor    edx,0x1
c0012007:	88 90 20 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6e0],dl
c001200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012010:	66 3d 03 02          	cmp    ax,0x203
c0012014:	75 07                	jne    c001201d <sendKeyboardToken(KeyboardToken)+0x2a>
c0012016:	a0 20 4a 02 c0       	mov    al,ds:0xc0024a20
c001201b:	84 c0                	test   al,al
c001201d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0012021:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0012024:	a0 28 4d 02 c0       	mov    al,ds:0xc0024d28
c0012029:	38 c2                	cmp    dl,al
c001202b:	74 1e                	je     c001204b <sendKeyboardToken(KeyboardToken)+0x58>
c001202d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0012030:	a2 28 4d 02 c0       	mov    ds:0xc0024d28,al
c0012035:	a0 28 4d 02 c0       	mov    al,ds:0xc0024d28
c001203a:	25 ff 00 00 00       	and    eax,0xff
c001203f:	83 ec 0c             	sub    esp,0xc
c0012042:	50                   	push   eax
c0012043:	e8 86 ab ff ff       	call   c000cbce <setTerminalScrollLock(bool)>
c0012048:	83 c4 10             	add    esp,0x10
c001204b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001204e:	84 c0                	test   al,al
c0012050:	0f 84 ae 00 00 00    	je     c0012104 <sendKeyboardToken(KeyboardToken)+0x111>
c0012056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012059:	66 3d 10 03          	cmp    ax,0x310
c001205d:	75 06                	jne    c0012065 <sendKeyboardToken(KeyboardToken)+0x72>
c001205f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0012065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012068:	66 3d 11 03          	cmp    ax,0x311
c001206c:	75 06                	jne    c0012074 <sendKeyboardToken(KeyboardToken)+0x81>
c001206e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0012074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012077:	66 3d 12 03          	cmp    ax,0x312
c001207b:	75 06                	jne    c0012083 <sendKeyboardToken(KeyboardToken)+0x90>
c001207d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0012083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012086:	66 3d 13 03          	cmp    ax,0x313
c001208a:	75 06                	jne    c0012092 <sendKeyboardToken(KeyboardToken)+0x9f>
c001208c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0012092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012095:	66 3d 14 03          	cmp    ax,0x314
c0012099:	75 06                	jne    c00120a1 <sendKeyboardToken(KeyboardToken)+0xae>
c001209b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a4:	66 3d 15 03          	cmp    ax,0x315
c00120a8:	75 06                	jne    c00120b0 <sendKeyboardToken(KeyboardToken)+0xbd>
c00120aa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b3:	66 3d 16 03          	cmp    ax,0x316
c00120b7:	75 06                	jne    c00120bf <sendKeyboardToken(KeyboardToken)+0xcc>
c00120b9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c2:	66 3d 17 03          	cmp    ax,0x317
c00120c6:	75 06                	jne    c00120ce <sendKeyboardToken(KeyboardToken)+0xdb>
c00120c8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d1:	66 3d 18 03          	cmp    ax,0x318
c00120d5:	75 06                	jne    c00120dd <sendKeyboardToken(KeyboardToken)+0xea>
c00120d7:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00120dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e0:	66 3d 19 03          	cmp    ax,0x319
c00120e4:	75 06                	jne    c00120ec <sendKeyboardToken(KeyboardToken)+0xf9>
c00120e6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00120ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ef:	66 3d 1a 03          	cmp    ax,0x31a
c00120f3:	0f 85 c9 00 00 00    	jne    c00121c2 <sendKeyboardToken(KeyboardToken)+0x1cf>
c00120f9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00120ff:	e9 be 00 00 00       	jmp    c00121c2 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012107:	66 3d 10 03          	cmp    ax,0x310
c001210b:	75 0a                	jne    c0012117 <sendKeyboardToken(KeyboardToken)+0x124>
c001210d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012113:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001211a:	66 3d 11 03          	cmp    ax,0x311
c001211e:	75 0a                	jne    c001212a <sendKeyboardToken(KeyboardToken)+0x137>
c0012120:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012126:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001212a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001212d:	66 3d 12 03          	cmp    ax,0x312
c0012131:	75 0a                	jne    c001213d <sendKeyboardToken(KeyboardToken)+0x14a>
c0012133:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012139:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001213d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012140:	66 3d 13 03          	cmp    ax,0x313
c0012144:	75 0a                	jne    c0012150 <sendKeyboardToken(KeyboardToken)+0x15d>
c0012146:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001214c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012153:	66 3d 14 03          	cmp    ax,0x314
c0012157:	75 0a                	jne    c0012163 <sendKeyboardToken(KeyboardToken)+0x170>
c0012159:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001215f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012166:	66 3d 15 03          	cmp    ax,0x315
c001216a:	75 0a                	jne    c0012176 <sendKeyboardToken(KeyboardToken)+0x183>
c001216c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012172:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012179:	66 3d 16 03          	cmp    ax,0x316
c001217d:	75 0a                	jne    c0012189 <sendKeyboardToken(KeyboardToken)+0x196>
c001217f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0012185:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001218c:	66 3d 17 03          	cmp    ax,0x317
c0012190:	75 0a                	jne    c001219c <sendKeyboardToken(KeyboardToken)+0x1a9>
c0012192:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0012198:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001219c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001219f:	66 3d 18 03          	cmp    ax,0x318
c00121a3:	75 0a                	jne    c00121af <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121a5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b2:	66 3d 19 03          	cmp    ax,0x319
c00121b6:	75 0a                	jne    c00121c2 <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121b8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c5:	66 3d 00 02          	cmp    ax,0x200
c00121c9:	75 2a                	jne    c00121f5 <sendKeyboardToken(KeyboardToken)+0x202>
c00121cb:	a0 20 4d 02 c0       	mov    al,ds:0xc0024d20
c00121d0:	83 f0 01             	xor    eax,0x1
c00121d3:	84 c0                	test   al,al
c00121d5:	74 1e                	je     c00121f5 <sendKeyboardToken(KeyboardToken)+0x202>
c00121d7:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00121dc:	6a 01                	push   0x1
c00121de:	6a 00                	push   0x0
c00121e0:	68 10 1f 01 c0       	push   0xc0011f10
c00121e5:	50                   	push   eax
c00121e6:	e8 7b 69 00 00       	call   c0018b66 <Process::createThread(void (*)(void*), void*, int)>
c00121eb:	83 c4 10             	add    esp,0x10
c00121ee:	c6 05 20 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d20,0x1
c00121f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121f8:	66 3d 1d 03          	cmp    ax,0x31d
c00121fc:	75 06                	jne    c0012204 <sendKeyboardToken(KeyboardToken)+0x211>
c00121fe:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012207:	66 3d 1c 03          	cmp    ax,0x31c
c001220b:	75 06                	jne    c0012213 <sendKeyboardToken(KeyboardToken)+0x220>
c001220d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012216:	66 3d 1b 03          	cmp    ax,0x31b
c001221a:	75 06                	jne    c0012222 <sendKeyboardToken(KeyboardToken)+0x22f>
c001221c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012225:	66 3d 1e 03          	cmp    ax,0x31e
c0012229:	75 06                	jne    c0012231 <sendKeyboardToken(KeyboardToken)+0x23e>
c001222b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012234:	66 3d 1f 03          	cmp    ax,0x31f
c0012238:	75 06                	jne    c0012240 <sendKeyboardToken(KeyboardToken)+0x24d>
c001223a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012243:	66 3d 1a 03          	cmp    ax,0x31a
c0012247:	75 06                	jne    c001224f <sendKeyboardToken(KeyboardToken)+0x25c>
c0012249:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001224f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0012253:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012256:	83 f0 01             	xor    eax,0x1
c0012259:	84 c0                	test   al,al
c001225b:	74 7b                	je     c00122d8 <sendKeyboardToken(KeyboardToken)+0x2e5>
c001225d:	a0 21 4a 02 c0       	mov    al,ds:0xc0024a21
c0012262:	84 c0                	test   al,al
c0012264:	74 43                	je     c00122a9 <sendKeyboardToken(KeyboardToken)+0x2b6>
c0012266:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001226a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001226e:	74 2d                	je     c001229d <sendKeyboardToken(KeyboardToken)+0x2aa>
c0012270:	8b 15 24 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d24
c0012276:	89 d0                	mov    eax,edx
c0012278:	c1 e0 02             	shl    eax,0x2
c001227b:	01 d0                	add    eax,edx
c001227d:	01 c0                	add    eax,eax
c001227f:	a3 24 4d 02 c0       	mov    ds:0xc0024d24,eax
c0012284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012287:	25 ff ff 00 00       	and    eax,0xffff
c001228c:	8d 50 d0             	lea    edx,[eax-0x30]
c001228f:	a1 24 4d 02 c0       	mov    eax,ds:0xc0024d24
c0012294:	01 d0                	add    eax,edx
c0012296:	a3 24 4d 02 c0       	mov    ds:0xc0024d24,eax
c001229b:	eb 71                	jmp    c001230e <sendKeyboardToken(KeyboardToken)+0x31b>
c001229d:	c7 05 24 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d24,0x0
c00122a7:	eb 65                	jmp    c001230e <sendKeyboardToken(KeyboardToken)+0x31b>
c00122a9:	a1 24 4d 02 c0       	mov    eax,ds:0xc0024d24
c00122ae:	85 c0                	test   eax,eax
c00122b0:	74 1a                	je     c00122cc <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122b2:	a1 24 4d 02 c0       	mov    eax,ds:0xc0024d24
c00122b7:	25 ff 00 00 00       	and    eax,0xff
c00122bc:	83 ec 0c             	sub    esp,0xc
c00122bf:	50                   	push   eax
c00122c0:	e8 bd fc ff ff       	call   c0011f82 <sendKeyToTerminal(unsigned char)>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122cc:	c7 05 24 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d24,0x0
c00122d6:	eb 36                	jmp    c001230e <sendKeyboardToken(KeyboardToken)+0x31b>
c00122d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122db:	66 3d 01 01          	cmp    ax,0x101
c00122df:	75 2d                	jne    c001230e <sendKeyboardToken(KeyboardToken)+0x31b>
c00122e1:	a1 24 4d 02 c0       	mov    eax,ds:0xc0024d24
c00122e6:	85 c0                	test   eax,eax
c00122e8:	74 1a                	je     c0012304 <sendKeyboardToken(KeyboardToken)+0x311>
c00122ea:	a1 24 4d 02 c0       	mov    eax,ds:0xc0024d24
c00122ef:	25 ff 00 00 00       	and    eax,0xff
c00122f4:	83 ec 0c             	sub    esp,0xc
c00122f7:	50                   	push   eax
c00122f8:	e8 85 fc ff ff       	call   c0011f82 <sendKeyToTerminal(unsigned char)>
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012304:	c7 05 24 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d24,0x0
c001230e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012311:	83 f0 01             	xor    eax,0x1
c0012314:	84 c0                	test   al,al
c0012316:	74 4e                	je     c0012366 <sendKeyboardToken(KeyboardToken)+0x373>
c0012318:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001231b:	83 f0 01             	xor    eax,0x1
c001231e:	84 c0                	test   al,al
c0012320:	74 44                	je     c0012366 <sendKeyboardToken(KeyboardToken)+0x373>
c0012322:	a0 20 4a 02 c0       	mov    al,ds:0xc0024a20
c0012327:	83 f0 01             	xor    eax,0x1
c001232a:	84 c0                	test   al,al
c001232c:	74 38                	je     c0012366 <sendKeyboardToken(KeyboardToken)+0x373>
c001232e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012331:	66 83 f8 1f          	cmp    ax,0x1f
c0012335:	76 09                	jbe    c0012340 <sendKeyboardToken(KeyboardToken)+0x34d>
c0012337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001233a:	66 83 f8 7e          	cmp    ax,0x7e
c001233e:	76 12                	jbe    c0012352 <sendKeyboardToken(KeyboardToken)+0x35f>
c0012340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012343:	66 83 f8 0a          	cmp    ax,0xa
c0012347:	74 09                	je     c0012352 <sendKeyboardToken(KeyboardToken)+0x35f>
c0012349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001234c:	66 83 f8 08          	cmp    ax,0x8
c0012350:	75 14                	jne    c0012366 <sendKeyboardToken(KeyboardToken)+0x373>
c0012352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012355:	25 ff 00 00 00       	and    eax,0xff
c001235a:	83 ec 0c             	sub    esp,0xc
c001235d:	50                   	push   eax
c001235e:	e8 1f fc ff ff       	call   c0011f82 <sendKeyToTerminal(unsigned char)>
c0012363:	83 c4 10             	add    esp,0x10
c0012366:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012369:	83 f0 01             	xor    eax,0x1
c001236c:	84 c0                	test   al,al
c001236e:	74 51                	je     c00123c1 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012370:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012373:	83 f0 01             	xor    eax,0x1
c0012376:	84 c0                	test   al,al
c0012378:	74 47                	je     c00123c1 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001237a:	a0 20 4a 02 c0       	mov    al,ds:0xc0024a20
c001237f:	84 c0                	test   al,al
c0012381:	74 3e                	je     c00123c1 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012386:	66 83 f8 3f          	cmp    ax,0x3f
c001238a:	76 35                	jbe    c00123c1 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001238c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001238f:	66 83 f8 7f          	cmp    ax,0x7f
c0012393:	77 2c                	ja     c00123c1 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012398:	88 c2                	mov    dl,al
c001239a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001239d:	66 83 f8 5f          	cmp    ax,0x5f
c00123a1:	76 04                	jbe    c00123a7 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123a3:	b0 20                	mov    al,0x20
c00123a5:	eb 02                	jmp    c00123a9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123a7:	b0 00                	mov    al,0x0
c00123a9:	29 c2                	sub    edx,eax
c00123ab:	88 d0                	mov    al,dl
c00123ad:	83 e8 40             	sub    eax,0x40
c00123b0:	25 ff 00 00 00       	and    eax,0xff
c00123b5:	83 ec 0c             	sub    esp,0xc
c00123b8:	50                   	push   eax
c00123b9:	e8 c4 fb ff ff       	call   c0011f82 <sendKeyToTerminal(unsigned char)>
c00123be:	83 c4 10             	add    esp,0x10
c00123c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c4:	66 3d 00 03          	cmp    ax,0x300
c00123c8:	75 0f                	jne    c00123d9 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123ca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123cd:	83 f0 01             	xor    eax,0x1
c00123d0:	84 c0                	test   al,al
c00123d2:	74 05                	je     c00123d9 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123d4:	e8 1c b0 ff ff       	call   c000d3f5 <doTerminalCycle()>
c00123d9:	90                   	nop
c00123da:	c9                   	leave  
c00123db:	c3                   	ret    

c00123dc <clearInternalKeybuffer(VgaText*)>:
c00123dc:	55                   	push   ebp
c00123dd:	89 e5                	mov    ebp,esp
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123e5:	05 34 11 00 00       	add    eax,0x1134
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	50                   	push   eax
c00123ee:	e8 ed e2 fe ff       	call   c00006e0 <strlen>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123f9:	81 c2 34 11 00 00    	add    edx,0x1134
c00123ff:	83 ec 04             	sub    esp,0x4
c0012402:	50                   	push   eax
c0012403:	6a 00                	push   0x0
c0012405:	52                   	push   edx
c0012406:	e8 b8 e2 fe ff       	call   c00006c3 <memset>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	90                   	nop
c001240f:	c9                   	leave  
c0012410:	c3                   	ret    

c0012411 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012411:	55                   	push   ebp
c0012412:	89 e5                	mov    ebp,esp
c0012414:	83 ec 18             	sub    esp,0x18
c0012417:	fb                   	sti    
c0012418:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001241f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012423:	74 77                	je     c001249c <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012428:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001242e:	84 c0                	test   al,al
c0012430:	75 02                	jne    c0012434 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012432:	eb f1                	jmp    c0012425 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012434:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012437:	8d 50 01             	lea    edx,[eax+0x1]
c001243a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001243d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012440:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012446:	88 10                	mov    BYTE PTR [eax],dl
c0012448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001244b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012451:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012457:	05 34 11 00 00       	add    eax,0x1134
c001245c:	83 ec 0c             	sub    esp,0xc
c001245f:	50                   	push   eax
c0012460:	e8 7b e2 fe ff       	call   c00006e0 <strlen>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001246b:	81 c2 34 11 00 00    	add    edx,0x1134
c0012471:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012474:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012477:	81 c2 34 11 00 00    	add    edx,0x1134
c001247d:	83 ec 04             	sub    esp,0x4
c0012480:	50                   	push   eax
c0012481:	51                   	push   ecx
c0012482:	52                   	push   edx
c0012483:	e8 cd e1 fe ff       	call   c0000655 <memmove>
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001248e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0012491:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0012495:	75 88                	jne    c001241f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0012497:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001249a:	eb 03                	jmp    c001249f <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c001249c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001249f:	c9                   	leave  
c00124a0:	c3                   	ret    
c00124a1:	90                   	nop

c00124a2 <Keyboard::Keyboard(char const*)>:
c00124a2:	83 ec 0c             	sub    esp,0xc
c00124a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a9:	83 ec 08             	sub    esp,0x8
c00124ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124b0:	50                   	push   eax
c00124b1:	e8 62 e3 ff ff       	call   c0010818 <Device::Device(char const*)>
c00124b6:	83 c4 10             	add    esp,0x10
c00124b9:	ba cc 20 02 c0       	mov    edx,0xc00220cc
c00124be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c2:	89 10                	mov    DWORD PTR [eax],edx
c00124c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124d2:	c6 05 04 49 02 c0 01 	mov    BYTE PTR ds:0xc0024904,0x1
c00124d9:	90                   	nop
c00124da:	83 c4 0c             	add    esp,0xc
c00124dd:	c3                   	ret    

c00124de <Keyboard::~Keyboard()>:
c00124de:	83 ec 0c             	sub    esp,0xc
c00124e1:	ba cc 20 02 c0       	mov    edx,0xc00220cc
c00124e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ea:	89 10                	mov    DWORD PTR [eax],edx
c00124ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	50                   	push   eax
c00124f4:	e8 d5 df ff ff       	call   c00104ce <Device::~Device()>
c00124f9:	83 c4 10             	add    esp,0x10
c00124fc:	90                   	nop
c00124fd:	83 c4 0c             	add    esp,0xc
c0012500:	c3                   	ret    
c0012501:	90                   	nop

c0012502 <Keyboard::~Keyboard()>:
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	83 ec 0c             	sub    esp,0xc
c0012508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001250c:	e8 cd ff ff ff       	call   c00124de <Keyboard::~Keyboard()>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	83 ec 08             	sub    esp,0x8
c0012517:	68 5c 01 00 00       	push   0x15c
c001251c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012520:	e8 c8 cb ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	83 c4 0c             	add    esp,0xc
c001252b:	c3                   	ret    

c001252c <LogicalDisk::close(int, int, void*)>:
c001252c:	83 c8 ff             	or     eax,0xffffffff
c001252f:	c3                   	ret    

c0012530 <LogicalDisk::~LogicalDisk()>:
c0012530:	83 ec 0c             	sub    esp,0xc
c0012533:	ba 7c 21 02 c0       	mov    edx,0xc002217c
c0012538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253c:	89 10                	mov    DWORD PTR [eax],edx
c001253e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	50                   	push   eax
c0012546:	e8 83 df ff ff       	call   c00104ce <Device::~Device()>
c001254b:	83 c4 10             	add    esp,0x10
c001254e:	90                   	nop
c001254f:	83 c4 0c             	add    esp,0xc
c0012552:	c3                   	ret    
c0012553:	90                   	nop

c0012554 <LogicalDisk::~LogicalDisk()>:
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	83 ec 0c             	sub    esp,0xc
c001255a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255e:	e8 cd ff ff ff       	call   c0012530 <LogicalDisk::~LogicalDisk()>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	83 ec 08             	sub    esp,0x8
c0012569:	68 74 01 00 00       	push   0x174
c001256e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012572:	e8 76 cb ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0012577:	83 c4 10             	add    esp,0x10
c001257a:	83 c4 0c             	add    esp,0xc
c001257d:	c3                   	ret    

c001257e <LogicalDisk::open(int, int, void*)>:
c001257e:	83 ec 18             	sub    esp,0x18
c0012581:	68 f8 20 02 c0       	push   0xc00220f8
c0012586:	e8 9d 34 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c001258b:	83 c8 ff             	or     eax,0xffffffff
c001258e:	83 c4 1c             	add    esp,0x1c
c0012591:	c3                   	ret    

c0012592 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0012592:	53                   	push   ebx
c0012593:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001259b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001259f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125a5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125ab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125b1:	77 10                	ja     c00125c3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125b3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125b9:	89 d3                	mov    ebx,edx
c00125bb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125c1:	72 05                	jb     c00125c8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125c3:	83 c8 ff             	or     eax,0xffffffff
c00125c6:	89 c2                	mov    edx,eax
c00125c8:	5b                   	pop    ebx
c00125c9:	c3                   	ret    

c00125ca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125ca:	56                   	push   esi
c00125cb:	83 c8 ff             	or     eax,0xffffffff
c00125ce:	53                   	push   ebx
c00125cf:	89 c2                	mov    edx,eax
c00125d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125d5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00125dd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00125e3:	77 27                	ja     c001260c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00125e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00125eb:	89 d8                	mov    eax,ebx
c00125ed:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00125f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125f8:	89 c2                	mov    edx,eax
c00125fa:	73 10                	jae    c001260c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00125fc:	89 c8                	mov    eax,ecx
c00125fe:	89 da                	mov    edx,ebx
c0012600:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012606:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001260c:	5b                   	pop    ebx
c001260d:	5e                   	pop    esi
c001260e:	c3                   	ret    
c001260f:	90                   	nop

c0012610 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012610:	83 ec 1c             	sub    esp,0x1c
c0012613:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001261b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001261f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012627:	89 04 24             	mov    DWORD PTR [esp],eax
c001262a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001262e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012636:	83 ec 08             	sub    esp,0x8
c0012639:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001263d:	50                   	push   eax
c001263e:	e8 d5 e1 ff ff       	call   c0010818 <Device::Device(char const*)>
c0012643:	83 c4 10             	add    esp,0x10
c0012646:	ba 7c 21 02 c0       	mov    edx,0xc002217c
c001264b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001264f:	89 10                	mov    DWORD PTR [eax],edx
c0012651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012655:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001265c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012660:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001266b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012675:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001267d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012681:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0012687:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001268d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012691:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012694:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012698:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001269e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126ac:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126b6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126c0:	90                   	nop
c00126c1:	83 c4 1c             	add    esp,0x1c
c00126c4:	c3                   	ret    
c00126c5:	90                   	nop

c00126c6 <LogicalDisk::assignDriveLetter()>:
c00126c6:	55                   	push   ebp
c00126c7:	57                   	push   edi
c00126c8:	56                   	push   esi
c00126c9:	53                   	push   ebx
c00126ca:	83 ec 14             	sub    esp,0x14
c00126cd:	8b 3d 40 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d40
c00126d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126d7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126db:	8b 3d 44 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d44
c00126e1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00126e7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00126eb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00126f1:	3c 01                	cmp    al,0x1
c00126f3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00126f7:	19 c0                	sbb    eax,eax
c00126f9:	83 e0 02             	and    eax,0x2
c00126fc:	83 c0 41             	add    eax,0x41
c00126ff:	0f be e8             	movsx  ebp,al
c0012702:	3c 43                	cmp    al,0x43
c0012704:	75 10                	jne    c0012716 <LogicalDisk::assignDriveLetter()+0x50>
c0012706:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001270d:	75 5d                	jne    c001276c <LogicalDisk::assignDriveLetter()+0xa6>
c001270f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012714:	75 56                	jne    c001276c <LogicalDisk::assignDriveLetter()+0xa6>
c0012716:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012719:	ba 01 00 00 00       	mov    edx,0x1
c001271e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012722:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012726:	d3 e2                	shl    edx,cl
c0012728:	89 d7                	mov    edi,edx
c001272a:	89 d6                	mov    esi,edx
c001272c:	c1 ff 1f             	sar    edi,0x1f
c001272f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012733:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012737:	21 f9                	and    ecx,edi
c0012739:	09 d1                	or     ecx,edx
c001273b:	75 2f                	jne    c001276c <LogicalDisk::assignDriveLetter()+0xa6>
c001273d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012741:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012745:	09 f2                	or     edx,esi
c0012747:	89 15 40 4d 02 c0    	mov    DWORD PTR ds:0xc0024d40,edx
c001274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012751:	09 fa                	or     edx,edi
c0012753:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012757:	89 15 44 4d 02 c0    	mov    DWORD PTR ds:0xc0024d44,edx
c001275d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012763:	89 1c bd 60 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb2a0],ebx
c001276a:	eb 08                	jmp    c0012774 <LogicalDisk::assignDriveLetter()+0xae>
c001276c:	40                   	inc    eax
c001276d:	45                   	inc    ebp
c001276e:	3c 5b                	cmp    al,0x5b
c0012770:	75 90                	jne    c0012702 <LogicalDisk::assignDriveLetter()+0x3c>
c0012772:	31 c0                	xor    eax,eax
c0012774:	83 c4 14             	add    esp,0x14
c0012777:	5b                   	pop    ebx
c0012778:	5e                   	pop    esi
c0012779:	5f                   	pop    edi
c001277a:	5d                   	pop    ebp
c001277b:	c3                   	ret    

c001277c <LogicalDisk::mount()>:
c001277c:	56                   	push   esi
c001277d:	53                   	push   ebx
c001277e:	51                   	push   ecx
c001277f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012783:	8b 1d c8 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248c8
c0012789:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0012793:	85 db                	test   ebx,ebx
c0012795:	74 50                	je     c00127e7 <LogicalDisk::mount()+0x6b>
c0012797:	e8 80 62 00 00       	call   c0018a1c <getIRQNestingLevel()>
c001279c:	52                   	push   edx
c001279d:	52                   	push   edx
c001279e:	50                   	push   eax
c001279f:	68 1c 21 02 c0       	push   0xc002211c
c00127a4:	e8 6a ca ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00127a9:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127b0:	83 c4 0c             	add    esp,0xc
c00127b3:	83 e8 41             	sub    eax,0x41
c00127b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127b8:	50                   	push   eax
c00127b9:	56                   	push   esi
c00127ba:	53                   	push   ebx
c00127bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	84 c0                	test   al,al
c00127c3:	74 08                	je     c00127cd <LogicalDisk::mount()+0x51>
c00127c5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127cb:	eb 1c                	jmp    c00127e9 <LogicalDisk::mount()+0x6d>
c00127cd:	e8 4a 62 00 00       	call   c0018a1c <getIRQNestingLevel()>
c00127d2:	51                   	push   ecx
c00127d3:	51                   	push   ecx
c00127d4:	50                   	push   eax
c00127d5:	68 37 21 02 c0       	push   0xc0022137
c00127da:	e8 34 ca ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00127df:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	eb ac                	jmp    c0012793 <LogicalDisk::mount()+0x17>
c00127e7:	31 c0                	xor    eax,eax
c00127e9:	5a                   	pop    edx
c00127ea:	5b                   	pop    ebx
c00127eb:	5e                   	pop    esi
c00127ec:	c3                   	ret    
c00127ed:	90                   	nop

c00127ee <LogicalDisk::unmount()>:
c00127ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127f2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00127fc:	c3                   	ret    
c00127fd:	90                   	nop

c00127fe <LogicalDisk::unassignDriveLetter()>:
c00127fe:	57                   	push   edi
c00127ff:	56                   	push   esi
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001280b:	84 c9                	test   cl,cl
c001280d:	75 0f                	jne    c001281e <LogicalDisk::unassignDriveLetter()+0x20>
c001280f:	c7 44 24 0c 52 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022152
c0012817:	5e                   	pop    esi
c0012818:	5f                   	pop    edi
c0012819:	e9 0a 32 00 00       	jmp    c0015a28 <Krnl::panic(char const*)>
c001281e:	83 e9 41             	sub    ecx,0x41
c0012821:	b8 01 00 00 00       	mov    eax,0x1
c0012826:	d3 e0                	shl    eax,cl
c0012828:	89 c7                	mov    edi,eax
c001282a:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012831:	c1 ff 1f             	sar    edi,0x1f
c0012834:	c7 04 8d 60 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb2a0],0x0
c001283f:	89 fe                	mov    esi,edi
c0012841:	f7 d6                	not    esi
c0012843:	f7 d0                	not    eax
c0012845:	21 35 44 4d 02 c0    	and    DWORD PTR ds:0xc0024d44,esi
c001284b:	5e                   	pop    esi
c001284c:	21 05 40 4d 02 c0    	and    DWORD PTR ds:0xc0024d40,eax
c0012852:	5f                   	pop    edi
c0012853:	c3                   	ret    

c0012854 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012854:	57                   	push   edi
c0012855:	56                   	push   esi
c0012856:	53                   	push   ebx
c0012857:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001285b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001285f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012867:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001286d:	77 41                	ja     c00128b0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001286f:	99                   	cdq    
c0012870:	01 c8                	add    eax,ecx
c0012872:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012878:	11 da                	adc    edx,ebx
c001287a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012880:	19 d7                	sbb    edi,edx
c0012882:	72 33                	jb     c00128b7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012884:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001288a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012890:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012894:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012898:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001289e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128a8:	5b                   	pop    ebx
c00128a9:	5e                   	pop    esi
c00128aa:	5f                   	pop    edi
c00128ab:	e9 9a 09 00 00       	jmp    c001324a <VCache::read(unsigned long long, int, void*)>
c00128b0:	b8 05 00 00 00       	mov    eax,0x5
c00128b5:	eb 05                	jmp    c00128bc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128b7:	b8 07 00 00 00       	mov    eax,0x7
c00128bc:	5b                   	pop    ebx
c00128bd:	5e                   	pop    esi
c00128be:	5f                   	pop    edi
c00128bf:	c3                   	ret    

c00128c0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00128c0:	57                   	push   edi
c00128c1:	56                   	push   esi
c00128c2:	53                   	push   ebx
c00128c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128d9:	77 41                	ja     c001291c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128db:	99                   	cdq    
c00128dc:	01 c8                	add    eax,ecx
c00128de:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128e4:	11 da                	adc    edx,ebx
c00128e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00128ec:	19 d7                	sbb    edi,edx
c00128ee:	72 33                	jb     c0012923 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00128f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012900:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012904:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001290a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012910:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012914:	5b                   	pop    ebx
c0012915:	5e                   	pop    esi
c0012916:	5f                   	pop    edi
c0012917:	e9 4a 08 00 00       	jmp    c0013166 <VCache::write(unsigned long long, int, void*)>
c001291c:	b8 05 00 00 00       	mov    eax,0x5
c0012921:	eb 05                	jmp    c0012928 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012923:	b8 07 00 00 00       	mov    eax,0x7
c0012928:	5b                   	pop    ebx
c0012929:	5e                   	pop    esi
c001292a:	5f                   	pop    edi
c001292b:	c3                   	ret    

c001292c <Mouse::Mouse(char const*)>:
c001292c:	83 ec 0c             	sub    esp,0xc
c001292f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012933:	83 ec 08             	sub    esp,0x8
c0012936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001293a:	50                   	push   eax
c001293b:	e8 d8 de ff ff       	call   c0010818 <Device::Device(char const*)>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	ba a8 21 02 c0       	mov    edx,0xc00221a8
c0012948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294c:	89 10                	mov    DWORD PTR [eax],edx
c001294e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012952:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001295c:	90                   	nop
c001295d:	83 c4 0c             	add    esp,0xc
c0012960:	c3                   	ret    
c0012961:	90                   	nop

c0012962 <Mouse::~Mouse()>:
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	ba a8 21 02 c0       	mov    edx,0xc00221a8
c001296a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296e:	89 10                	mov    DWORD PTR [eax],edx
c0012970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012974:	83 ec 0c             	sub    esp,0xc
c0012977:	50                   	push   eax
c0012978:	e8 51 db ff ff       	call   c00104ce <Device::~Device()>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	90                   	nop
c0012981:	83 c4 0c             	add    esp,0xc
c0012984:	c3                   	ret    
c0012985:	90                   	nop

c0012986 <Mouse::~Mouse()>:
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	83 ec 0c             	sub    esp,0xc
c001298c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012990:	e8 cd ff ff ff       	call   c0012962 <Mouse::~Mouse()>
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	83 ec 08             	sub    esp,0x8
c001299b:	68 58 01 00 00       	push   0x158
c00129a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a4:	e8 44 c7 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00129a9:	83 c4 10             	add    esp,0x10
c00129ac:	83 c4 0c             	add    esp,0xc
c00129af:	c3                   	ret    

c00129b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129b0:	55                   	push   ebp
c00129b1:	57                   	push   edi
c00129b2:	56                   	push   esi
c00129b3:	53                   	push   ebx
c00129b4:	81 ec 28 01 00 00    	sub    esp,0x128
c00129ba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129c1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129c8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129cf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00129de:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129e5:	e8 20 df ff ff       	call   c001090a <Device::getName()>
c00129ea:	5a                   	pop    edx
c00129eb:	59                   	pop    ecx
c00129ec:	50                   	push   eax
c00129ed:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00129f1:	55                   	push   ebp
c00129f2:	e8 6b dd fe ff       	call   c0000762 <strcpy>
c00129f7:	5b                   	pop    ebx
c00129f8:	58                   	pop    eax
c00129f9:	68 cc 21 02 c0       	push   0xc00221cc
c00129fe:	55                   	push   ebp
c00129ff:	e8 15 de fe ff       	call   c0000819 <strcat>
c0012a04:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a0b:	e8 ce c6 ff ff       	call   c000f0de <operator new(unsigned long)>
c0012a10:	83 c4 0c             	add    esp,0xc
c0012a13:	89 c3                	mov    ebx,eax
c0012a15:	57                   	push   edi
c0012a16:	56                   	push   esi
c0012a17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a1f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a26:	55                   	push   ebp
c0012a27:	50                   	push   eax
c0012a28:	e8 e3 fb ff ff       	call   c0012610 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a2d:	83 c4 14             	add    esp,0x14
c0012a30:	53                   	push   ebx
c0012a31:	e8 90 fc ff ff       	call   c00126c6 <LogicalDisk::assignDriveLetter()>
c0012a36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a39:	e8 3e fd ff ff       	call   c001277c <LogicalDisk::mount()>
c0012a3e:	58                   	pop    eax
c0012a3f:	5a                   	pop    edx
c0012a40:	53                   	push   ebx
c0012a41:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a48:	e8 db db ff ff       	call   c0010628 <Device::addChild(Device*)>
c0012a4d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a53:	5b                   	pop    ebx
c0012a54:	5e                   	pop    esi
c0012a55:	5f                   	pop    edi
c0012a56:	5d                   	pop    ebp
c0012a57:	c3                   	ret    

c0012a58 <createPartitionsForDisk(PhysicalDisk*)>:
c0012a58:	55                   	push   ebp
c0012a59:	57                   	push   edi
c0012a5a:	56                   	push   esi
c0012a5b:	53                   	push   ebx
c0012a5c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a62:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a69:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a6f:	3d 00 02 00 00       	cmp    eax,0x200
c0012a74:	74 27                	je     c0012a9d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a76:	83 ec 10             	sub    esp,0x10
c0012a79:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012a7f:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012a85:	99                   	cdq    
c0012a86:	52                   	push   edx
c0012a87:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012a8b:	50                   	push   eax
c0012a8c:	89 fd                	mov    ebp,edi
c0012a8e:	c1 e6 0a             	shl    esi,0xa
c0012a91:	55                   	push   ebp
c0012a92:	56                   	push   esi
c0012a93:	e8 54 ca 00 00       	call   c001f4ec <__udivdi3>
c0012a98:	e9 b1 00 00 00       	jmp    c0012b4e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a9d:	83 ec 0c             	sub    esp,0xc
c0012aa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aa2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012aa6:	56                   	push   esi
c0012aa7:	6a 01                	push   0x1
c0012aa9:	6a 00                	push   0x0
c0012aab:	6a 00                	push   0x0
c0012aad:	53                   	push   ebx
c0012aae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ab1:	83 c4 20             	add    esp,0x20
c0012ab4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012abc:	75 0a                	jne    c0012ac8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012abe:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012ac6:	74 2c                	je     c0012af4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012ac8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012ace:	83 ec 10             	sub    esp,0x10
c0012ad1:	89 f7                	mov    edi,esi
c0012ad3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012ad9:	c1 ff 1f             	sar    edi,0x1f
c0012adc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012ae2:	57                   	push   edi
c0012ae3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012ae7:	c1 e0 0a             	shl    eax,0xa
c0012aea:	56                   	push   esi
c0012aeb:	52                   	push   edx
c0012aec:	50                   	push   eax
c0012aed:	e8 fa c9 00 00       	call   c001f4ec <__udivdi3>
c0012af2:	eb 5a                	jmp    c0012b4e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012af4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012afb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b02:	83 e0 7f             	and    eax,0x7f
c0012b05:	83 e1 7f             	and    ecx,0x7f
c0012b08:	01 c1                	add    ecx,eax
c0012b0a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b11:	83 e0 7f             	and    eax,0x7f
c0012b14:	01 c1                	add    ecx,eax
c0012b16:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b1d:	83 e0 7f             	and    eax,0x7f
c0012b20:	00 c1                	add    cl,al
c0012b22:	74 41                	je     c0012b65 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b24:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b2a:	83 ec 10             	sub    esp,0x10
c0012b2d:	89 f7                	mov    edi,esi
c0012b2f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b35:	c1 ff 1f             	sar    edi,0x1f
c0012b38:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b3e:	57                   	push   edi
c0012b3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b43:	c1 e0 0a             	shl    eax,0xa
c0012b46:	56                   	push   esi
c0012b47:	52                   	push   edx
c0012b48:	50                   	push   eax
c0012b49:	e8 9e c9 00 00       	call   c001f4ec <__udivdi3>
c0012b4e:	83 c4 14             	add    esp,0x14
c0012b51:	52                   	push   edx
c0012b52:	50                   	push   eax
c0012b53:	6a 00                	push   0x0
c0012b55:	6a 00                	push   0x0
c0012b57:	53                   	push   ebx
c0012b58:	e8 53 fe ff ff       	call   c00129b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b5d:	83 c4 20             	add    esp,0x20
c0012b60:	e9 79 01 00 00       	jmp    c0012cde <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b65:	89 f0                	mov    eax,esi
c0012b67:	31 f6                	xor    esi,esi
c0012b69:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b70:	75 02                	jne    c0012b74 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b72:	89 f1                	mov    ecx,esi
c0012b74:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b7b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b82:	c1 e2 08             	shl    edx,0x8
c0012b85:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012b8d:	c1 e7 10             	shl    edi,0x10
c0012b90:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012b98:	09 fa                	or     edx,edi
c0012b9a:	83 c0 10             	add    eax,0x10
c0012b9d:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012ba4:	09 fa                	or     edx,edi
c0012ba6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bad:	c1 e7 18             	shl    edi,0x18
c0012bb0:	09 fa                	or     edx,edi
c0012bb2:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bb6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012bbd:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bc4:	c1 e7 10             	shl    edi,0x10
c0012bc7:	c1 e2 08             	shl    edx,0x8
c0012bca:	09 fa                	or     edx,edi
c0012bcc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012bd3:	09 fa                	or     edx,edi
c0012bd5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012bdc:	c1 e7 18             	shl    edi,0x18
c0012bdf:	09 fa                	or     edx,edi
c0012be1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012be5:	46                   	inc    esi
c0012be6:	83 fe 04             	cmp    esi,0x4
c0012be9:	0f 85 7a ff ff ff    	jne    c0012b69 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf3:	83 f0 01             	xor    eax,0x1
c0012bf6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012bfa:	75 57                	jne    c0012c53 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c00:	83 f0 01             	xor    eax,0x1
c0012c03:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c07:	75 4a                	jne    c0012c53 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c09:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c0f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c13:	89 f7                	mov    edi,esi
c0012c15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c1d:	c1 ff 1f             	sar    edi,0x1f
c0012c20:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c28:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c2e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c34:	57                   	push   edi
c0012c35:	56                   	push   esi
c0012c36:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c3a:	c1 e0 0a             	shl    eax,0xa
c0012c3d:	52                   	push   edx
c0012c3e:	50                   	push   eax
c0012c3f:	e8 a8 c8 00 00       	call   c001f4ec <__udivdi3>
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c4b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c4f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c53:	84 c9                	test   cl,cl
c0012c55:	74 53                	je     c0012caa <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c57:	0f b6 c9             	movzx  ecx,cl
c0012c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c6a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c6e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c82:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c86:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012c8a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012c8e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012c92:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012c96:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012c9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ca2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012ca6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012caa:	31 ed                	xor    ebp,ebp
c0012cac:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cb0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cb4:	89 f8                	mov    eax,edi
c0012cb6:	09 f0                	or     eax,esi
c0012cb8:	74 1e                	je     c0012cd8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012cbe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cc2:	89 d1                	mov    ecx,edx
c0012cc4:	09 c1                	or     ecx,eax
c0012cc6:	74 10                	je     c0012cd8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	57                   	push   edi
c0012ccc:	56                   	push   esi
c0012ccd:	52                   	push   edx
c0012cce:	50                   	push   eax
c0012ccf:	53                   	push   ebx
c0012cd0:	e8 db fc ff ff       	call   c00129b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012cd5:	83 c4 20             	add    esp,0x20
c0012cd8:	45                   	inc    ebp
c0012cd9:	83 fd 04             	cmp    ebp,0x4
c0012cdc:	75 ce                	jne    c0012cac <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012cde:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012ce4:	5b                   	pop    ebx
c0012ce5:	5e                   	pop    esi
c0012ce6:	5f                   	pop    edi
c0012ce7:	5d                   	pop    ebp
c0012ce8:	c3                   	ret    
c0012ce9:	90                   	nop

c0012cea <Timer::Timer(char const*)>:
c0012cea:	83 ec 0c             	sub    esp,0xc
c0012ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf1:	83 ec 08             	sub    esp,0x8
c0012cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf8:	50                   	push   eax
c0012cf9:	e8 1a db ff ff       	call   c0010818 <Device::Device(char const*)>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	ba e0 21 02 c0       	mov    edx,0xc00221e0
c0012d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0a:	89 10                	mov    DWORD PTR [eax],edx
c0012d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d10:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d1a:	90                   	nop
c0012d1b:	83 c4 0c             	add    esp,0xc
c0012d1e:	c3                   	ret    
c0012d1f:	90                   	nop

c0012d20 <Timer::~Timer()>:
c0012d20:	83 ec 0c             	sub    esp,0xc
c0012d23:	ba e0 21 02 c0       	mov    edx,0xc00221e0
c0012d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2c:	89 10                	mov    DWORD PTR [eax],edx
c0012d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	50                   	push   eax
c0012d36:	e8 93 d7 ff ff       	call   c00104ce <Device::~Device()>
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	90                   	nop
c0012d3f:	83 c4 0c             	add    esp,0xc
c0012d42:	c3                   	ret    
c0012d43:	90                   	nop

c0012d44 <Timer::~Timer()>:
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	83 ec 0c             	sub    esp,0xc
c0012d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d4e:	e8 cd ff ff ff       	call   c0012d20 <Timer::~Timer()>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	83 ec 08             	sub    esp,0x8
c0012d59:	68 5c 01 00 00       	push   0x15c
c0012d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d62:	e8 86 c3 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	83 c4 0c             	add    esp,0xc
c0012d6d:	c3                   	ret    

c0012d6e <Timer::read()>:
c0012d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d72:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d78:	c3                   	ret    

c0012d79 <timerHandler(unsigned long long)>:
c0012d79:	55                   	push   ebp
c0012d7a:	57                   	push   edi
c0012d7b:	56                   	push   esi
c0012d7c:	53                   	push   ebx
c0012d7d:	83 ec 0c             	sub    esp,0xc
c0012d80:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d84:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012d88:	01 35 d0 4d 02 c0    	add    DWORD PTR ds:0xc0024dd0,esi
c0012d8e:	11 3d d4 4d 02 c0    	adc    DWORD PTR ds:0xc0024dd4,edi
c0012d94:	80 3d 6d 47 02 c0 00 	cmp    BYTE PTR ds:0xc002476d,0x0
c0012d9b:	0f 84 07 01 00 00    	je     c0012ea8 <timerHandler(unsigned long long)+0x12f>
c0012da1:	e8 b2 5c 00 00       	call   c0018a58 <lockStuff()>
c0012da6:	83 ec 0c             	sub    esp,0xc
c0012da9:	68 9c 5b 02 c0       	push   0xc0025b9c
c0012dae:	e8 0d ce 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012db3:	c7 04 24 9c 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b9c
c0012dba:	89 c3                	mov    ebx,eax
c0012dbc:	e8 07 ce 00 00       	call   c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	84 c0                	test   al,al
c0012dc6:	74 60                	je     c0012e28 <timerHandler(unsigned long long)+0xaf>
c0012dc8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012dce:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012dd1:	85 c0                	test   eax,eax
c0012dd3:	0f 85 91 00 00 00    	jne    c0012e6a <timerHandler(unsigned long long)+0xf1>
c0012dd9:	e9 be 00 00 00       	jmp    c0012e9c <timerHandler(unsigned long long)+0x123>
c0012dde:	83 ec 0c             	sub    esp,0xc
c0012de1:	55                   	push   ebp
c0012de2:	e8 6e 62 00 00       	call   c0019055 <unblockTask(ThreadControlBlock*)>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	39 eb                	cmp    ebx,ebp
c0012dec:	75 12                	jne    c0012e00 <timerHandler(unsigned long long)+0x87>
c0012dee:	83 ec 0c             	sub    esp,0xc
c0012df1:	68 9c 5b 02 c0       	push   0xc0025b9c
c0012df6:	e8 c5 cd 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dfb:	89 c3                	mov    ebx,eax
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	68 9c 5b 02 c0       	push   0xc0025b9c
c0012e08:	e8 bb cd 00 00       	call   c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	84 c0                	test   al,al
c0012e12:	75 b4                	jne    c0012dc8 <timerHandler(unsigned long long)+0x4f>
c0012e14:	83 ec 0c             	sub    esp,0xc
c0012e17:	68 9c 5b 02 c0       	push   0xc0025b9c
c0012e1c:	e8 9f cd 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	39 d8                	cmp    eax,ebx
c0012e26:	74 a0                	je     c0012dc8 <timerHandler(unsigned long long)+0x4f>
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	68 9c 5b 02 c0       	push   0xc0025b9c
c0012e30:	e8 8b cd 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e35:	89 c5                	mov    ebp,eax
c0012e37:	c7 04 24 9c 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b9c
c0012e3e:	e8 a1 cd 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e49:	a1 d4 4d 02 c0       	mov    eax,ds:0xc0024dd4
c0012e4e:	39 15 d0 4d 02 c0    	cmp    DWORD PTR ds:0xc0024dd0,edx
c0012e54:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e57:	19 c8                	sbb    eax,ecx
c0012e59:	73 83                	jae    c0012dde <timerHandler(unsigned long long)+0x65>
c0012e5b:	50                   	push   eax
c0012e5c:	50                   	push   eax
c0012e5d:	55                   	push   ebp
c0012e5e:	68 9c 5b 02 c0       	push   0xc0025b9c
c0012e63:	e8 2a ce 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e68:	eb 93                	jmp    c0012dfd <timerHandler(unsigned long long)+0x84>
c0012e6a:	80 3d 6c 47 02 c0 00 	cmp    BYTE PTR ds:0xc002476c,0x0
c0012e71:	74 29                	je     c0012e9c <timerHandler(unsigned long long)+0x123>
c0012e73:	39 c6                	cmp    esi,eax
c0012e75:	bb 00 00 00 00       	mov    ebx,0x0
c0012e7a:	19 df                	sbb    edi,ebx
c0012e7c:	72 19                	jb     c0012e97 <timerHandler(unsigned long long)+0x11e>
c0012e7e:	e8 ae 5b 00 00       	call   c0018a31 <lockScheduler()>
c0012e83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e88:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012e8b:	e8 ea 5e 00 00       	call   c0018d7a <schedule()>
c0012e90:	e8 9e 5b 00 00       	call   c0018a33 <unlockScheduler()>
c0012e95:	eb 05                	jmp    c0012e9c <timerHandler(unsigned long long)+0x123>
c0012e97:	29 f0                	sub    eax,esi
c0012e99:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012e9c:	83 c4 0c             	add    esp,0xc
c0012e9f:	5b                   	pop    ebx
c0012ea0:	5e                   	pop    esi
c0012ea1:	5f                   	pop    edi
c0012ea2:	5d                   	pop    ebp
c0012ea3:	e9 57 5f 00 00       	jmp    c0018dff <unlockStuff()>
c0012ea8:	83 c4 0c             	add    esp,0xc
c0012eab:	5b                   	pop    ebx
c0012eac:	5e                   	pop    esi
c0012ead:	5f                   	pop    edi
c0012eae:	5d                   	pop    ebp
c0012eaf:	c3                   	ret    

c0012eb0 <setupTimer(int)>:
c0012eb0:	57                   	push   edi
c0012eb1:	56                   	push   esi
c0012eb2:	53                   	push   ebx
c0012eb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012eb7:	e8 fd 19 00 00       	call   c00148b9 <getCPUNumber()>
c0012ebc:	85 c0                	test   eax,eax
c0012ebe:	74 32                	je     c0012ef2 <setupTimer(int)+0x42>
c0012ec0:	83 ec 0c             	sub    esp,0xc
c0012ec3:	68 60 01 00 00       	push   0x160
c0012ec8:	e8 11 c2 ff ff       	call   c000f0de <operator new(unsigned long)>
c0012ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ed0:	89 c3                	mov    ebx,eax
c0012ed2:	e8 a7 c0 00 00       	call   c001ef7e <APICTimer::APICTimer()>
c0012ed7:	6a 00                	push   0x0
c0012ed9:	6a 00                	push   0x0
c0012edb:	56                   	push   esi
c0012edc:	53                   	push   ebx
c0012edd:	e8 96 bf 00 00       	call   c001ee78 <APICTimer::open(int, int, void*)>
c0012ee2:	83 c4 20             	add    esp,0x20
c0012ee5:	e8 d2 19 00 00       	call   c00148bc <thisCPU()>
c0012eea:	56                   	push   esi
c0012eeb:	56                   	push   esi
c0012eec:	53                   	push   ebx
c0012eed:	e9 96 00 00 00       	jmp    c0012f88 <setupTimer(int)+0xd8>
c0012ef2:	e8 c5 19 00 00       	call   c00148bc <thisCPU()>
c0012ef7:	83 ec 0c             	sub    esp,0xc
c0012efa:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f00:	e8 05 da ff ff       	call   c001090a <Device::getName()>
c0012f05:	83 c4 10             	add    esp,0x10
c0012f08:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f0b:	0f 85 87 00 00 00    	jne    c0012f98 <setupTimer(int)+0xe8>
c0012f11:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0012f16:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f1d:	74 79                	je     c0012f98 <setupTimer(int)+0xe8>
c0012f1f:	83 ec 0c             	sub    esp,0xc
c0012f22:	68 5c 01 00 00       	push   0x15c
c0012f27:	e8 b2 c1 ff ff       	call   c000f0de <operator new(unsigned long)>
c0012f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f2f:	89 c3                	mov    ebx,eax
c0012f31:	e8 a4 c1 00 00       	call   c001f0da <PIT::PIT()>
c0012f36:	59                   	pop    ecx
c0012f37:	5f                   	pop    edi
c0012f38:	53                   	push   ebx
c0012f39:	ff 35 68 47 02 c0    	push   DWORD PTR ds:0xc0024768
c0012f3f:	e8 e4 d6 ff ff       	call   c0010628 <Device::addChild(Device*)>
c0012f44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f46:	6a 00                	push   0x0
c0012f48:	6a 00                	push   0x0
c0012f4a:	56                   	push   esi
c0012f4b:	53                   	push   ebx
c0012f4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f4f:	83 c4 14             	add    esp,0x14
c0012f52:	68 60 01 00 00       	push   0x160
c0012f57:	e8 82 c1 ff ff       	call   c000f0de <operator new(unsigned long)>
c0012f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f5f:	89 c7                	mov    edi,eax
c0012f61:	e8 18 c0 00 00       	call   c001ef7e <APICTimer::APICTimer()>
c0012f66:	6a 00                	push   0x0
c0012f68:	6a 00                	push   0x0
c0012f6a:	56                   	push   esi
c0012f6b:	57                   	push   edi
c0012f6c:	e8 07 bf 00 00       	call   c001ee78 <APICTimer::open(int, int, void*)>
c0012f71:	83 c4 20             	add    esp,0x20
c0012f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f76:	6a 00                	push   0x0
c0012f78:	6a 00                	push   0x0
c0012f7a:	6a 00                	push   0x0
c0012f7c:	53                   	push   ebx
c0012f7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f80:	e8 37 19 00 00       	call   c00148bc <thisCPU()>
c0012f85:	5a                   	pop    edx
c0012f86:	59                   	pop    ecx
c0012f87:	57                   	push   edi
c0012f88:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f8e:	e8 95 d6 ff ff       	call   c0010628 <Device::addChild(Device*)>
c0012f93:	83 c4 10             	add    esp,0x10
c0012f96:	eb 33                	jmp    c0012fcb <setupTimer(int)+0x11b>
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	68 5c 01 00 00       	push   0x15c
c0012fa0:	e8 39 c1 ff ff       	call   c000f0de <operator new(unsigned long)>
c0012fa5:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fa8:	89 c3                	mov    ebx,eax
c0012faa:	e8 2b c1 00 00       	call   c001f0da <PIT::PIT()>
c0012faf:	58                   	pop    eax
c0012fb0:	5a                   	pop    edx
c0012fb1:	53                   	push   ebx
c0012fb2:	ff 35 68 47 02 c0    	push   DWORD PTR ds:0xc0024768
c0012fb8:	e8 6b d6 ff ff       	call   c0010628 <Device::addChild(Device*)>
c0012fbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fbf:	6a 00                	push   0x0
c0012fc1:	6a 00                	push   0x0
c0012fc3:	56                   	push   esi
c0012fc4:	53                   	push   ebx
c0012fc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fc8:	83 c4 20             	add    esp,0x20
c0012fcb:	89 d8                	mov    eax,ebx
c0012fcd:	5b                   	pop    ebx
c0012fce:	5e                   	pop    esi
c0012fcf:	5f                   	pop    edi
c0012fd0:	c3                   	ret    
c0012fd1:	90                   	nop

c0012fd2 <VCache::VCache(PhysicalDisk*)>:
c0012fd2:	53                   	push   ebx
c0012fd3:	83 ec 08             	sub    esp,0x8
c0012fd6:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fdf:	89 10                	mov    DWORD PTR [eax],edx
c0012fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fe5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0013002:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0013014:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001301b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0013026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001302a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001302e:	83 ec 0c             	sub    esp,0xc
c0013031:	6a 10                	push   0x10
c0013033:	e8 a6 c0 ff ff       	call   c000f0de <operator new(unsigned long)>
c0013038:	83 c4 10             	add    esp,0x10
c001303b:	89 c3                	mov    ebx,eax
c001303d:	83 ec 0c             	sub    esp,0xc
c0013040:	53                   	push   ebx
c0013041:	e8 0e 5b 00 00       	call   c0018b54 <Mutex::Mutex()>
c0013046:	83 c4 10             	add    esp,0x10
c0013049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013054:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013058:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001305b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305f:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0013066:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001306a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0013070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013074:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001307b:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0013081:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013087:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001308b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001308e:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0013091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013095:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001309d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130a3:	c1 e0 06             	shl    eax,0x6
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	50                   	push   eax
c00130aa:	e8 32 8f ff ff       	call   c000bfe1 <malloc>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	89 c2                	mov    edx,eax
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130bb:	90                   	nop
c00130bc:	83 c4 08             	add    esp,0x8
c00130bf:	5b                   	pop    ebx
c00130c0:	c3                   	ret    
c00130c1:	90                   	nop

c00130c2 <VCache::writeWriteBuffer()>:
c00130c2:	53                   	push   ebx
c00130c3:	83 ec 14             	sub    esp,0x14
c00130c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00130cf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130d5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130db:	50                   	push   eax
c00130dc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00130df:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00130e6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00130ed:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00130f1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00130f8:	83 c4 28             	add    esp,0x28
c00130fb:	5b                   	pop    ebx
c00130fc:	c3                   	ret    
c00130fd:	90                   	nop

c00130fe <VCache::~VCache()>:
c00130fe:	83 ec 0c             	sub    esp,0xc
c0013101:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	89 10                	mov    DWORD PTR [eax],edx
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013113:	84 c0                	test   al,al
c0013115:	74 0f                	je     c0013126 <VCache::~VCache()+0x28>
c0013117:	83 ec 0c             	sub    esp,0xc
c001311a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001311e:	e8 9f ff ff ff       	call   c00130c2 <VCache::writeWriteBuffer()>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001312d:	83 ec 0c             	sub    esp,0xc
c0013130:	50                   	push   eax
c0013131:	e8 bb 8e ff ff       	call   c000bff1 <free>
c0013136:	83 c4 10             	add    esp,0x10
c0013139:	90                   	nop
c001313a:	83 c4 0c             	add    esp,0xc
c001313d:	c3                   	ret    

c001313e <VCache::~VCache()>:
c001313e:	83 ec 0c             	sub    esp,0xc
c0013141:	83 ec 0c             	sub    esp,0xc
c0013144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013148:	e8 b1 ff ff ff       	call   c00130fe <VCache::~VCache()>
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	83 ec 08             	sub    esp,0x8
c0013153:	6a 30                	push   0x30
c0013155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013159:	e8 8f bf ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001315e:	83 c4 10             	add    esp,0x10
c0013161:	83 c4 0c             	add    esp,0xc
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <VCache::write(unsigned long long, int, void*)>:
c0013166:	55                   	push   ebp
c0013167:	57                   	push   edi
c0013168:	56                   	push   esi
c0013169:	53                   	push   ebx
c001316a:	83 ec 28             	sub    esp,0x28
c001316d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013171:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013175:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013179:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001317d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013180:	e8 3d 5e 00 00       	call   c0018fc2 <Semaphore::acquire()>
c0013185:	83 c4 10             	add    esp,0x10
c0013188:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001318c:	74 66                	je     c00131f4 <VCache::write(unsigned long long, int, void*)+0x8e>
c001318e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013191:	99                   	cdq    
c0013192:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013196:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0013199:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001319c:	89 c1                	mov    ecx,eax
c001319e:	31 f1                	xor    ecx,esi
c00131a0:	89 d0                	mov    eax,edx
c00131a2:	31 f8                	xor    eax,edi
c00131a4:	89 ca                	mov    edx,ecx
c00131a6:	09 c2                	or     edx,eax
c00131a8:	75 3e                	jne    c00131e8 <VCache::write(unsigned long long, int, void*)+0x82>
c00131aa:	83 fd 01             	cmp    ebp,0x1
c00131ad:	75 39                	jne    c00131e8 <VCache::write(unsigned long long, int, void*)+0x82>
c00131af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131b8:	51                   	push   ecx
c00131b9:	50                   	push   eax
c00131ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131be:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131c2:	0f af c8             	imul   ecx,eax
c00131c5:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131c8:	51                   	push   ecx
c00131c9:	e8 bf d4 fe ff       	call   c000068d <memcpy>
c00131ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	40                   	inc    eax
c00131d5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131d8:	83 f8 40             	cmp    eax,0x40
c00131db:	75 57                	jne    c0013234 <VCache::write(unsigned long long, int, void*)+0xce>
c00131dd:	83 ec 0c             	sub    esp,0xc
c00131e0:	53                   	push   ebx
c00131e1:	e8 dc fe ff ff       	call   c00130c2 <VCache::writeWriteBuffer()>
c00131e6:	eb 34                	jmp    c001321c <VCache::write(unsigned long long, int, void*)+0xb6>
c00131e8:	83 ec 0c             	sub    esp,0xc
c00131eb:	53                   	push   ebx
c00131ec:	e8 d1 fe ff ff       	call   c00130c2 <VCache::writeWriteBuffer()>
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131f7:	83 fd 3f             	cmp    ebp,0x3f
c00131fa:	7f 25                	jg     c0013221 <VCache::write(unsigned long long, int, void*)+0xbb>
c00131fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00131ff:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013202:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013205:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013209:	52                   	push   edx
c001320a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013210:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013214:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013217:	e8 71 d4 fe ff       	call   c000068d <memcpy>
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	eb 13                	jmp    c0013234 <VCache::write(unsigned long long, int, void*)+0xce>
c0013221:	83 ec 0c             	sub    esp,0xc
c0013224:	8b 10                	mov    edx,DWORD PTR [eax]
c0013226:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001322a:	55                   	push   ebp
c001322b:	57                   	push   edi
c001322c:	56                   	push   esi
c001322d:	50                   	push   eax
c001322e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013231:	83 c4 20             	add    esp,0x20
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001323a:	e8 0f 63 00 00       	call   c001954e <Semaphore::release()>
c001323f:	83 c4 2c             	add    esp,0x2c
c0013242:	5b                   	pop    ebx
c0013243:	31 c0                	xor    eax,eax
c0013245:	5e                   	pop    esi
c0013246:	5f                   	pop    edi
c0013247:	5d                   	pop    ebp
c0013248:	c3                   	ret    
c0013249:	90                   	nop

c001324a <VCache::read(unsigned long long, int, void*)>:
c001324a:	57                   	push   edi
c001324b:	56                   	push   esi
c001324c:	53                   	push   ebx
c001324d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013251:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013255:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013259:	83 ec 0c             	sub    esp,0xc
c001325c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001325f:	e8 5e 5d 00 00       	call   c0018fc2 <Semaphore::acquire()>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001326b:	74 0c                	je     c0013279 <VCache::read(unsigned long long, int, void*)+0x2f>
c001326d:	83 ec 0c             	sub    esp,0xc
c0013270:	53                   	push   ebx
c0013271:	e8 4c fe ff ff       	call   c00130c2 <VCache::writeWriteBuffer()>
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001327c:	83 ec 0c             	sub    esp,0xc
c001327f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013281:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013285:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013289:	57                   	push   edi
c001328a:	56                   	push   esi
c001328b:	50                   	push   eax
c001328c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001328f:	83 c4 14             	add    esp,0x14
c0013292:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013295:	e8 b4 62 00 00       	call   c001954e <Semaphore::release()>
c001329a:	83 c4 10             	add    esp,0x10
c001329d:	5b                   	pop    ebx
c001329e:	31 c0                	xor    eax,eax
c00132a0:	5e                   	pop    esi
c00132a1:	5f                   	pop    edi
c00132a2:	c3                   	ret    
c00132a3:	90                   	nop

c00132a4 <Video::putrect(int, int, int, int, unsigned int)>:
c00132a4:	55                   	push   ebp
c00132a5:	57                   	push   edi
c00132a6:	56                   	push   esi
c00132a7:	53                   	push   ebx
c00132a8:	83 ec 1c             	sub    esp,0x1c
c00132ab:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132b7:	01 e8                	add    eax,ebp
c00132b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132c5:	01 df                	add    edi,ebx
c00132c7:	39 fb                	cmp    ebx,edi
c00132c9:	7d 1b                	jge    c00132e6 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132cf:	7d 12                	jge    c00132e3 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132d1:	8b 16                	mov    edx,DWORD PTR [esi]
c00132d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132d7:	53                   	push   ebx
c00132d8:	55                   	push   ebp
c00132d9:	45                   	inc    ebp
c00132da:	56                   	push   esi
c00132db:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	eb e8                	jmp    c00132cb <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00132e3:	43                   	inc    ebx
c00132e4:	eb e1                	jmp    c00132c7 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00132e6:	83 c4 1c             	add    esp,0x1c
c00132e9:	5b                   	pop    ebx
c00132ea:	5e                   	pop    esi
c00132eb:	5f                   	pop    edi
c00132ec:	5d                   	pop    ebp
c00132ed:	c3                   	ret    

c00132ee <Video::blit(unsigned int*, int, int, int, int)>:
c00132ee:	55                   	push   ebp
c00132ef:	57                   	push   edi
c00132f0:	56                   	push   esi
c00132f1:	53                   	push   ebx
c00132f2:	83 ec 1c             	sub    esp,0x1c
c00132f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00132f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132fd:	85 c0                	test   eax,eax
c00132ff:	79 02                	jns    c0013303 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013301:	31 c0                	xor    eax,eax
c0013303:	c1 e0 02             	shl    eax,0x2
c0013306:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001330a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001330e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013312:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013316:	39 d8                	cmp    eax,ebx
c0013318:	7e 49                	jle    c0013363 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001331a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013320:	7c 41                	jl     c0013363 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013322:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013326:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001332a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001332e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013332:	39 f9                	cmp    ecx,edi
c0013334:	7e 22                	jle    c0013358 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013336:	83 c5 04             	add    ebp,0x4
c0013339:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001333f:	7c 14                	jl     c0013355 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013341:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013343:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013346:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001334a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001334e:	56                   	push   esi
c001334f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	47                   	inc    edi
c0013356:	eb d2                	jmp    c001332a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001335c:	43                   	inc    ebx
c001335d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013361:	eb ab                	jmp    c001330e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013363:	83 c4 1c             	add    esp,0x1c
c0013366:	5b                   	pop    ebx
c0013367:	5e                   	pop    esi
c0013368:	5f                   	pop    edi
c0013369:	5d                   	pop    ebp
c001336a:	c3                   	ret    
c001336b:	90                   	nop

c001336c <Video::clearScreen(unsigned int)>:
c001336c:	57                   	push   edi
c001336d:	56                   	push   esi
c001336e:	53                   	push   ebx
c001336f:	31 db                	xor    ebx,ebx
c0013371:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013375:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001337b:	7e 1f                	jle    c001339c <Video::clearScreen(unsigned int)+0x30>
c001337d:	31 ff                	xor    edi,edi
c001337f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013385:	7e 12                	jle    c0013399 <Video::clearScreen(unsigned int)+0x2d>
c0013387:	8b 06                	mov    eax,DWORD PTR [esi]
c0013389:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001338d:	53                   	push   ebx
c001338e:	57                   	push   edi
c001338f:	47                   	inc    edi
c0013390:	56                   	push   esi
c0013391:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	eb e6                	jmp    c001337f <Video::clearScreen(unsigned int)+0x13>
c0013399:	43                   	inc    ebx
c001339a:	eb d9                	jmp    c0013375 <Video::clearScreen(unsigned int)+0x9>
c001339c:	5b                   	pop    ebx
c001339d:	5e                   	pop    esi
c001339e:	5f                   	pop    edi
c001339f:	c3                   	ret    

c00133a0 <Video::putpixel(int, int, unsigned int)>:
c00133a0:	c7 44 24 04 18 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022218
c00133a8:	e9 66 be ff ff       	jmp    c000f213 <Dbg::kprintf(char const*, ...)>
c00133ad:	90                   	nop

c00133ae <Video::Video(char const*)>:
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b5:	83 ec 08             	sub    esp,0x8
c00133b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133bc:	50                   	push   eax
c00133bd:	e8 56 d4 ff ff       	call   c0010818 <Device::Device(char const*)>
c00133c2:	83 c4 10             	add    esp,0x10
c00133c5:	ba 30 22 02 c0       	mov    edx,0xc0022230
c00133ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ce:	89 10                	mov    DWORD PTR [eax],edx
c00133d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00133de:	90                   	nop
c00133df:	83 c4 0c             	add    esp,0xc
c00133e2:	c3                   	ret    
c00133e3:	90                   	nop

c00133e4 <Video::~Video()>:
c00133e4:	83 ec 0c             	sub    esp,0xc
c00133e7:	ba 30 22 02 c0       	mov    edx,0xc0022230
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	89 10                	mov    DWORD PTR [eax],edx
c00133f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f6:	83 ec 0c             	sub    esp,0xc
c00133f9:	50                   	push   eax
c00133fa:	e8 cf d0 ff ff       	call   c00104ce <Device::~Device()>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	90                   	nop
c0013403:	83 c4 0c             	add    esp,0xc
c0013406:	c3                   	ret    
c0013407:	90                   	nop

c0013408 <Video::~Video()>:
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	83 ec 0c             	sub    esp,0xc
c001340e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013412:	e8 cd ff ff ff       	call   c00133e4 <Video::~Video()>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	83 ec 08             	sub    esp,0x8
c001341d:	68 64 01 00 00       	push   0x164
c0013422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013426:	e8 c2 bc ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001342b:	83 c4 10             	add    esp,0x10
c001342e:	83 c4 0c             	add    esp,0xc
c0013431:	c3                   	ret    

c0013432 <Video::isMonochrome()>:
c0013432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013436:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001343c:	c3                   	ret    
c001343d:	90                   	nop

c001343e <Video::getWidth()>:
c001343e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013442:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013448:	c3                   	ret    
c0013449:	90                   	nop

c001344a <Video::getHeight()>:
c001344a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001344e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013454:	c3                   	ret    
c0013455:	90                   	nop

c0013456 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013456:	55                   	push   ebp
c0013457:	57                   	push   edi
c0013458:	56                   	push   esi
c0013459:	53                   	push   ebx
c001345a:	83 ec 2c             	sub    esp,0x2c
c001345d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013461:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013465:	83 f8 01             	cmp    eax,0x1
c0013468:	19 c9                	sbb    ecx,ecx
c001346a:	31 db                	xor    ebx,ebx
c001346c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013470:	89 cd                	mov    ebp,ecx
c0013472:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001347a:	f7 d5                	not    ebp
c001347c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013482:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013486:	01 d8                	add    eax,ebx
c0013488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001348c:	56                   	push   esi
c001348d:	e8 b8 ff ff ff       	call   c001344a <Video::getHeight()>
c0013492:	59                   	pop    ecx
c0013493:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013497:	7e 70                	jle    c0013509 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0013499:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001349d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134a1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134ac:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134b7:	89 f8                	mov    eax,edi
c00134b9:	83 c0 20             	add    eax,0x20
c00134bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134c0:	56                   	push   esi
c00134c1:	e8 78 ff ff ff       	call   c001343e <Video::getWidth()>
c00134c6:	5a                   	pop    edx
c00134c7:	39 c7                	cmp    edi,eax
c00134c9:	7d 34                	jge    c00134ff <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134cb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134d0:	74 05                	je     c00134d7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00134d4:	55                   	push   ebp
c00134d5:	eb 0d                	jmp    c00134e4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134d7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00134dc:	74 12                	je     c00134f0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00134de:	8b 06                	mov    eax,DWORD PTR [esi]
c00134e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134e8:	57                   	push   edi
c00134e9:	56                   	push   esi
c00134ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	47                   	inc    edi
c00134f1:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00134f5:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00134f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00134fd:	75 c1                	jne    c00134c0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00134ff:	43                   	inc    ebx
c0013500:	83 fb 20             	cmp    ebx,0x20
c0013503:	0f 85 79 ff ff ff    	jne    c0013482 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013509:	83 c4 2c             	add    esp,0x2c
c001350c:	5b                   	pop    ebx
c001350d:	5e                   	pop    esi
c001350e:	5f                   	pop    edi
c001350f:	5d                   	pop    ebp
c0013510:	c3                   	ret    
c0013511:	90                   	nop

c0013512 <ACPI::close(int, int, void*)>:
c0013512:	83 ec 1c             	sub    esp,0x1c
c0013515:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001351d:	74 0a                	je     c0013529 <ACPI::close(int, int, void*)+0x17>
c001351f:	b8 00 00 00 00       	mov    eax,0x0
c0013524:	e9 9e 00 00 00       	jmp    c00135c7 <ACPI::close(int, int, void*)+0xb5>
c0013529:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001352e:	75 37                	jne    c0013567 <ACPI::close(int, int, void*)+0x55>
c0013530:	83 ec 0c             	sub    esp,0xc
c0013533:	68 68 22 02 c0       	push   0xc0022268
c0013538:	e8 d6 bc ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001353d:	83 c4 10             	add    esp,0x10
c0013540:	a1 e8 4d 02 c0       	mov    eax,ds:0xc0024de8
c0013545:	85 c0                	test   eax,eax
c0013547:	74 07                	je     c0013550 <ACPI::close(int, int, void*)+0x3e>
c0013549:	a1 e8 4d 02 c0       	mov    eax,ds:0xc0024de8
c001354e:	ff d0                	call   eax
c0013550:	83 ec 0c             	sub    esp,0xc
c0013553:	68 3c 23 02 c0       	push   0xc002233c
c0013558:	e8 cb 24 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c001355d:	83 c4 10             	add    esp,0x10
c0013560:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013565:	eb 60                	jmp    c00135c7 <ACPI::close(int, int, void*)+0xb5>
c0013567:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001356c:	75 54                	jne    c00135c2 <ACPI::close(int, int, void*)+0xb0>
c001356e:	a1 e4 4d 02 c0       	mov    eax,ds:0xc0024de4
c0013573:	85 c0                	test   eax,eax
c0013575:	74 07                	je     c001357e <ACPI::close(int, int, void*)+0x6c>
c0013577:	a1 e4 4d 02 c0       	mov    eax,ds:0xc0024de4
c001357c:	ff d0                	call   eax
c001357e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013583:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013587:	25 ff 00 00 00       	and    eax,0xff
c001358c:	83 e0 02             	and    eax,0x2
c001358f:	74 1c                	je     c00135ad <ACPI::close(int, int, void*)+0x9b>
c0013591:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0013598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001359c:	89 c2                	mov    edx,eax
c001359e:	ec                   	in     al,dx
c001359f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135a3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135ab:	eb d6                	jmp    c0013583 <ACPI::close(int, int, void*)+0x71>
c00135ad:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135b4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135c1:	ee                   	out    dx,al
c00135c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135c7:	83 c4 1c             	add    esp,0x1c
c00135ca:	c3                   	ret    

c00135cb <findRSDP()>:
c00135cb:	83 ec 1c             	sub    esp,0x1c
c00135ce:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c00135d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135d9:	83 e0 04             	and    eax,0x4
c00135dc:	84 c0                	test   al,al
c00135de:	75 07                	jne    c00135e7 <findRSDP()+0x1c>
c00135e0:	b8 00 00 00 00       	mov    eax,0x0
c00135e5:	eb 6a                	jmp    c0013651 <findRSDP()+0x86>
c00135e7:	a1 b0 47 02 c0       	mov    eax,ds:0xc00247b0
c00135ec:	3d ff 07 00 00       	cmp    eax,0x7ff
c00135f1:	7f 1b                	jg     c001360e <findRSDP()+0x43>
c00135f3:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c00135f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00135fe:	83 e2 fb             	and    edx,0xfffffffb
c0013601:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013607:	b8 00 00 00 00       	mov    eax,0x0
c001360c:	eb 43                	jmp    c0013651 <findRSDP()+0x86>
c001360e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013616:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001361e:	77 2c                	ja     c001364c <findRSDP()+0x81>
c0013620:	83 ec 04             	sub    esp,0x4
c0013623:	6a 08                	push   0x8
c0013625:	68 75 22 02 c0       	push   0xc0022275
c001362a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001362e:	e8 f7 cf fe ff       	call   c000062a <memcmp>
c0013633:	83 c4 10             	add    esp,0x10
c0013636:	85 c0                	test   eax,eax
c0013638:	0f 94 c0             	sete   al
c001363b:	84 c0                	test   al,al
c001363d:	74 06                	je     c0013645 <findRSDP()+0x7a>
c001363f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013643:	eb 0c                	jmp    c0013651 <findRSDP()+0x86>
c0013645:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001364a:	eb ca                	jmp    c0013616 <findRSDP()+0x4b>
c001364c:	b8 00 00 00 00       	mov    eax,0x0
c0013651:	83 c4 1c             	add    esp,0x1c
c0013654:	c3                   	ret    

c0013655 <loadACPITables(unsigned char*)>:
c0013655:	56                   	push   esi
c0013656:	53                   	push   ebx
c0013657:	83 ec 44             	sub    esp,0x44
c001365a:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c001365f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013665:	83 e0 04             	and    eax,0x4
c0013668:	84 c0                	test   al,al
c001366a:	0f 84 05 02 00 00    	je     c0013875 <loadACPITables(unsigned char*)+0x220>
c0013670:	a0 00 50 02 c0       	mov    al,ds:0xc0025000
c0013675:	84 c0                	test   al,al
c0013677:	74 75                	je     c00136ee <loadACPITables(unsigned char*)+0x99>
c0013679:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001367d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013685:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013688:	83 e8 24             	sub    eax,0x24
c001368b:	c1 e8 03             	shr    eax,0x3
c001368e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013692:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001369a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001369e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136a2:	0f 8d b2 00 00 00    	jge    c001375a <loadACPITables(unsigned char*)+0x105>
c00136a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136ac:	83 c0 24             	add    eax,0x24
c00136af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136bf:	c1 e0 03             	shl    eax,0x3
c00136c2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00136cf:	89 c1                	mov    ecx,eax
c00136d1:	a1 ec 4d 02 c0       	mov    eax,ds:0xc0024dec
c00136d6:	8d 50 01             	lea    edx,[eax+0x1]
c00136d9:	89 15 ec 4d 02 c0    	mov    DWORD PTR ds:0xc0024dec,edx
c00136df:	89 ca                	mov    edx,ecx
c00136e1:	89 14 c5 04 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1fc],edx
c00136e8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00136ec:	eb ac                	jmp    c001369a <loadACPITables(unsigned char*)+0x45>
c00136ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00136f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136fd:	83 e8 24             	sub    eax,0x24
c0013700:	c1 e8 02             	shr    eax,0x2
c0013703:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013707:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001370f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013713:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013717:	7d 41                	jge    c001375a <loadACPITables(unsigned char*)+0x105>
c0013719:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001371d:	83 c0 24             	add    eax,0x24
c0013720:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013724:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013728:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001372c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013730:	c1 e0 02             	shl    eax,0x2
c0013733:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001373b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001373d:	a1 ec 4d 02 c0       	mov    eax,ds:0xc0024dec
c0013742:	8d 50 01             	lea    edx,[eax+0x1]
c0013745:	89 15 ec 4d 02 c0    	mov    DWORD PTR ds:0xc0024dec,edx
c001374b:	89 ca                	mov    edx,ecx
c001374d:	89 14 c5 04 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1fc],edx
c0013754:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013758:	eb b5                	jmp    c001370f <loadACPITables(unsigned char*)+0xba>
c001375a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013762:	a1 ec 4d 02 c0       	mov    eax,ds:0xc0024dec
c0013767:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001376b:	0f 8d 05 01 00 00    	jge    c0013876 <loadACPITables(unsigned char*)+0x221>
c0013771:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013775:	8b 04 c5 04 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1fc]
c001377c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001378c:	25 ff 0f 00 00       	and    eax,0xfff
c0013791:	89 c6                	mov    esi,eax
c0013793:	e8 ed ab ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c0013798:	89 c3                	mov    ebx,eax
c001379a:	83 ec 0c             	sub    esp,0xc
c001379d:	6a 01                	push   0x1
c001379f:	e8 54 aa ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137b1:	83 ec 0c             	sub    esp,0xc
c00137b4:	6a 01                	push   0x1
c00137b6:	6a 01                	push   0x1
c00137b8:	50                   	push   eax
c00137b9:	52                   	push   edx
c00137ba:	53                   	push   ebx
c00137bb:	e8 f6 b3 ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137c0:	83 c4 20             	add    esp,0x20
c00137c3:	09 f0                	or     eax,esi
c00137c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137cd:	c1 e0 03             	shl    eax,0x3
c00137d0:	05 00 4e 02 c0       	add    eax,0xc0024e00
c00137d5:	83 ec 04             	sub    esp,0x4
c00137d8:	6a 04                	push   0x4
c00137da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137de:	50                   	push   eax
c00137df:	e8 a9 ce fe ff       	call   c000068d <memcpy>
c00137e4:	83 c4 10             	add    esp,0x10
c00137e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137f6:	05 00 10 00 00       	add    eax,0x1000
c00137fb:	c1 e8 0c             	shr    eax,0xc
c00137fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013806:	89 04 24             	mov    DWORD PTR [esp],eax
c0013809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380d:	25 ff 0f 00 00       	and    eax,0xfff
c0013812:	89 c6                	mov    esi,eax
c0013814:	e8 6c ab ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c0013819:	89 c3                	mov    ebx,eax
c001381b:	83 ec 0c             	sub    esp,0xc
c001381e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013822:	e8 d1 a9 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c0013827:	83 c4 10             	add    esp,0x10
c001382a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001382e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	6a 01                	push   0x1
c0013839:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001383d:	50                   	push   eax
c001383e:	52                   	push   edx
c001383f:	53                   	push   ebx
c0013840:	e8 71 b3 ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013845:	83 c4 20             	add    esp,0x20
c0013848:	09 f0                	or     eax,esi
c001384a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001384e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013851:	83 ec 0c             	sub    esp,0xc
c0013854:	50                   	push   eax
c0013855:	e8 eb ac ff ff       	call   c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013865:	89 14 c5 04 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1fc],edx
c001386c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013870:	e9 ed fe ff ff       	jmp    c0013762 <loadACPITables(unsigned char*)+0x10d>
c0013875:	90                   	nop
c0013876:	83 c4 44             	add    esp,0x44
c0013879:	5b                   	pop    ebx
c001387a:	5e                   	pop    esi
c001387b:	c3                   	ret    

c001387c <findRSDT(unsigned char*)>:
c001387c:	56                   	push   esi
c001387d:	53                   	push   ebx
c001387e:	83 ec 44             	sub    esp,0x44
c0013881:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0013886:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001388c:	83 e0 04             	and    eax,0x4
c001388f:	84 c0                	test   al,al
c0013891:	75 0a                	jne    c001389d <findRSDT(unsigned char*)+0x21>
c0013893:	b8 00 00 00 00       	mov    eax,0x0
c0013898:	e9 f7 00 00 00       	jmp    c0013994 <findRSDT(unsigned char*)+0x118>
c001389d:	83 ec 04             	sub    esp,0x4
c00138a0:	6a 24                	push   0x24
c00138a2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138aa:	50                   	push   eax
c00138ab:	e8 dd cd fe ff       	call   c000068d <memcpy>
c00138b0:	83 c4 10             	add    esp,0x10
c00138b3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138b7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138bb:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138db:	25 ff 0f 00 00       	and    eax,0xfff
c00138e0:	89 c6                	mov    esi,eax
c00138e2:	e8 9e aa ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c00138e7:	89 c3                	mov    ebx,eax
c00138e9:	83 ec 0c             	sub    esp,0xc
c00138ec:	6a 02                	push   0x2
c00138ee:	e8 05 a9 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c00138f3:	83 c4 10             	add    esp,0x10
c00138f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00138fa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013900:	83 ec 0c             	sub    esp,0xc
c0013903:	6a 01                	push   0x1
c0013905:	6a 02                	push   0x2
c0013907:	50                   	push   eax
c0013908:	52                   	push   edx
c0013909:	53                   	push   ebx
c001390a:	e8 a7 b2 ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001390f:	83 c4 20             	add    esp,0x20
c0013912:	09 f0                	or     eax,esi
c0013914:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001391c:	25 ff 0f 00 00       	and    eax,0xfff
c0013921:	89 c6                	mov    esi,eax
c0013923:	e8 5d aa ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c0013928:	89 c3                	mov    ebx,eax
c001392a:	83 ec 0c             	sub    esp,0xc
c001392d:	6a 02                	push   0x2
c001392f:	e8 c4 a8 ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001393b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013941:	83 ec 0c             	sub    esp,0xc
c0013944:	6a 01                	push   0x1
c0013946:	6a 02                	push   0x2
c0013948:	50                   	push   eax
c0013949:	52                   	push   edx
c001394a:	53                   	push   ebx
c001394b:	e8 66 b2 ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013950:	83 c4 20             	add    esp,0x20
c0013953:	09 f0                	or     eax,esi
c0013955:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013959:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001395e:	75 11                	jne    c0013971 <findRSDT(unsigned char*)+0xf5>
c0013960:	c6 05 00 50 02 c0 00 	mov    BYTE PTR ds:0xc0025000,0x0
c0013967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001396b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001396f:	eb 1f                	jmp    c0013990 <findRSDT(unsigned char*)+0x114>
c0013971:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013976:	75 11                	jne    c0013989 <findRSDT(unsigned char*)+0x10d>
c0013978:	c6 05 00 50 02 c0 01 	mov    BYTE PTR ds:0xc0025000,0x1
c001397f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013983:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013987:	eb 07                	jmp    c0013990 <findRSDT(unsigned char*)+0x114>
c0013989:	b8 00 00 00 00       	mov    eax,0x0
c001398e:	eb 04                	jmp    c0013994 <findRSDT(unsigned char*)+0x118>
c0013990:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013994:	83 c4 44             	add    esp,0x44
c0013997:	5b                   	pop    ebx
c0013998:	5e                   	pop    esi
c0013999:	c3                   	ret    

c001399a <findDataTable(unsigned char*, char*)>:
c001399a:	83 ec 1c             	sub    esp,0x1c
c001399d:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c00139a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139a8:	83 e0 04             	and    eax,0x4
c00139ab:	84 c0                	test   al,al
c00139ad:	75 07                	jne    c00139b6 <findDataTable(unsigned char*, char*)+0x1c>
c00139af:	b8 00 00 00 00       	mov    eax,0x0
c00139b4:	eb 7c                	jmp    c0013a32 <findDataTable(unsigned char*, char*)+0x98>
c00139b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139be:	a1 ec 4d 02 c0       	mov    eax,ds:0xc0024dec
c00139c3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139c7:	7d 3a                	jge    c0013a03 <findDataTable(unsigned char*, char*)+0x69>
c00139c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139cd:	c1 e0 03             	shl    eax,0x3
c00139d0:	05 00 4e 02 c0       	add    eax,0xc0024e00
c00139d5:	83 ec 04             	sub    esp,0x4
c00139d8:	6a 04                	push   0x4
c00139da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139de:	50                   	push   eax
c00139df:	e8 46 cc fe ff       	call   c000062a <memcmp>
c00139e4:	83 c4 10             	add    esp,0x10
c00139e7:	85 c0                	test   eax,eax
c00139e9:	0f 94 c0             	sete   al
c00139ec:	84 c0                	test   al,al
c00139ee:	74 0d                	je     c00139fd <findDataTable(unsigned char*, char*)+0x63>
c00139f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139f4:	8b 04 c5 04 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1fc]
c00139fb:	eb 35                	jmp    c0013a32 <findDataTable(unsigned char*, char*)+0x98>
c00139fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a01:	eb bb                	jmp    c00139be <findDataTable(unsigned char*, char*)+0x24>
c0013a03:	a0 00 50 02 c0       	mov    al,ds:0xc0025000
c0013a08:	84 c0                	test   al,al
c0013a0a:	74 07                	je     c0013a13 <findDataTable(unsigned char*, char*)+0x79>
c0013a0c:	b8 58 00 00 00       	mov    eax,0x58
c0013a11:	eb 05                	jmp    c0013a18 <findDataTable(unsigned char*, char*)+0x7e>
c0013a13:	b8 52 00 00 00       	mov    eax,0x52
c0013a18:	83 ec 04             	sub    esp,0x4
c0013a1b:	50                   	push   eax
c0013a1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a20:	68 60 23 02 c0       	push   0xc0022360
c0013a25:	e8 e9 b7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0013a2a:	83 c4 10             	add    esp,0x10
c0013a2d:	b8 00 00 00 00       	mov    eax,0x0
c0013a32:	83 c4 1c             	add    esp,0x1c
c0013a35:	c3                   	ret    

c0013a36 <scanMADT()>:
c0013a36:	83 ec 2c             	sub    esp,0x2c
c0013a39:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0013a3e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a44:	83 e0 04             	and    eax,0x4
c0013a47:	84 c0                	test   al,al
c0013a49:	0f 84 9a 03 00 00    	je     c0013de9 <scanMADT()+0x3b3>
c0013a4f:	e8 77 fb ff ff       	call   c00135cb <findRSDP()>
c0013a54:	a3 0c 50 02 c0       	mov    ds:0xc002500c,eax
c0013a59:	a1 0c 50 02 c0       	mov    eax,ds:0xc002500c
c0013a5e:	85 c0                	test   eax,eax
c0013a60:	75 19                	jne    c0013a7b <scanMADT()+0x45>
c0013a62:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0013a67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a6d:	83 e2 fb             	and    edx,0xfffffffb
c0013a70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a76:	e9 72 03 00 00       	jmp    c0013ded <scanMADT()+0x3b7>
c0013a7b:	a1 0c 50 02 c0       	mov    eax,ds:0xc002500c
c0013a80:	83 ec 0c             	sub    esp,0xc
c0013a83:	50                   	push   eax
c0013a84:	e8 f3 fd ff ff       	call   c001387c <findRSDT(unsigned char*)>
c0013a89:	83 c4 10             	add    esp,0x10
c0013a8c:	a3 08 50 02 c0       	mov    ds:0xc0025008,eax
c0013a91:	a1 08 50 02 c0       	mov    eax,ds:0xc0025008
c0013a96:	85 c0                	test   eax,eax
c0013a98:	75 19                	jne    c0013ab3 <scanMADT()+0x7d>
c0013a9a:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0013a9f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013aa5:	83 e2 fb             	and    edx,0xfffffffb
c0013aa8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013aae:	e9 3a 03 00 00       	jmp    c0013ded <scanMADT()+0x3b7>
c0013ab3:	a1 08 50 02 c0       	mov    eax,ds:0xc0025008
c0013ab8:	83 ec 0c             	sub    esp,0xc
c0013abb:	50                   	push   eax
c0013abc:	e8 94 fb ff ff       	call   c0013655 <loadACPITables(unsigned char*)>
c0013ac1:	83 c4 10             	add    esp,0x10
c0013ac4:	a1 08 50 02 c0       	mov    eax,ds:0xc0025008
c0013ac9:	83 ec 08             	sub    esp,0x8
c0013acc:	68 7e 22 02 c0       	push   0xc002227e
c0013ad1:	50                   	push   eax
c0013ad2:	e8 c3 fe ff ff       	call   c001399a <findDataTable(unsigned char*, char*)>
c0013ad7:	83 c4 10             	add    esp,0x10
c0013ada:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ade:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013ae3:	75 19                	jne    c0013afe <scanMADT()+0xc8>
c0013ae5:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0013aea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013af0:	83 e2 fe             	and    edx,0xfffffffe
c0013af3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013af9:	e9 ef 02 00 00       	jmp    c0013ded <scanMADT()+0x3b7>
c0013afe:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b0d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b11:	0f 87 d6 02 00 00    	ja     c0013ded <scanMADT()+0x3b7>
c0013b17:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b1f:	0f 87 c8 02 00 00    	ja     c0013ded <scanMADT()+0x3b7>
c0013b25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b31:	8d 50 01             	lea    edx,[eax+0x1]
c0013b34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b3c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b40:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b48:	8d 50 01             	lea    edx,[eax+0x1]
c0013b4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b53:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b57:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b5b:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b60:	0f 86 86 02 00 00    	jbe    c0013dec <scanMADT()+0x3b6>
c0013b66:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b6b:	75 5b                	jne    c0013bc8 <scanMADT()+0x192>
c0013b6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b71:	8d 50 01             	lea    edx,[eax+0x1]
c0013b74:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b78:	8a 15 40 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025140
c0013b7e:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b84:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b88:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b8c:	88 82 80 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae80],al
c0013b92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b96:	8d 42 01             	lea    eax,[edx+0x1]
c0013b99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b9d:	a0 40 51 02 c0       	mov    al,ds:0xc0025140
c0013ba2:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ba5:	88 0d 40 51 02 c0    	mov    BYTE PTR ds:0xc0025140,cl
c0013bab:	25 ff 00 00 00       	and    eax,0xff
c0013bb0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bb4:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bb8:	88 90 60 51 02 c0    	mov    BYTE PTR [eax-0x3ffdaea0],dl
c0013bbe:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bc3:	e9 0a 02 00 00       	jmp    c0013dd2 <scanMADT()+0x39c>
c0013bc8:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013bcd:	0f 85 29 01 00 00    	jne    c0013cfc <scanMADT()+0x2c6>
c0013bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0013bda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bde:	8a 15 10 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025010
c0013be4:	81 e2 ff 00 00 00    	and    edx,0xff
c0013bea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bee:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013bf2:	88 82 20 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafe0],al
c0013bf8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013bfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c04:	01 d0                	add    eax,edx
c0013c06:	83 c0 2c             	add    eax,0x2c
c0013c09:	8a 00                	mov    al,BYTE PTR [eax]
c0013c0b:	31 d2                	xor    edx,edx
c0013c0d:	88 c2                	mov    dl,al
c0013c0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c13:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c1a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c1e:	25 ff 00 00 00       	and    eax,0xff
c0013c23:	c1 e0 08             	shl    eax,0x8
c0013c26:	89 d1                	mov    ecx,edx
c0013c28:	09 c1                	or     ecx,eax
c0013c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c2e:	8d 50 02             	lea    edx,[eax+0x2]
c0013c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c35:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c39:	25 ff 00 00 00       	and    eax,0xff
c0013c3e:	c1 e0 10             	shl    eax,0x10
c0013c41:	09 c1                	or     ecx,eax
c0013c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c47:	8d 50 03             	lea    edx,[eax+0x3]
c0013c4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c4e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c52:	25 ff 00 00 00       	and    eax,0xff
c0013c57:	c1 e0 18             	shl    eax,0x18
c0013c5a:	09 c1                	or     ecx,eax
c0013c5c:	89 ca                	mov    edx,ecx
c0013c5e:	a0 10 50 02 c0       	mov    al,ds:0xc0025010
c0013c63:	25 ff 00 00 00       	and    eax,0xff
c0013c68:	89 14 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],edx
c0013c6f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c7c:	01 d0                	add    eax,edx
c0013c7e:	83 c0 2c             	add    eax,0x2c
c0013c81:	8a 00                	mov    al,BYTE PTR [eax]
c0013c83:	31 d2                	xor    edx,edx
c0013c85:	88 c2                	mov    dl,al
c0013c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c92:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c96:	25 ff 00 00 00       	and    eax,0xff
c0013c9b:	c1 e0 08             	shl    eax,0x8
c0013c9e:	89 d1                	mov    ecx,edx
c0013ca0:	09 c1                	or     ecx,eax
c0013ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca6:	8d 50 02             	lea    edx,[eax+0x2]
c0013ca9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cb1:	25 ff 00 00 00       	and    eax,0xff
c0013cb6:	c1 e0 10             	shl    eax,0x10
c0013cb9:	09 c1                	or     ecx,eax
c0013cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cbf:	8d 50 03             	lea    edx,[eax+0x3]
c0013cc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cca:	25 ff 00 00 00       	and    eax,0xff
c0013ccf:	c1 e0 18             	shl    eax,0x18
c0013cd2:	09 c1                	or     ecx,eax
c0013cd4:	89 ca                	mov    edx,ecx
c0013cd6:	a0 10 50 02 c0       	mov    al,ds:0xc0025010
c0013cdb:	25 ff 00 00 00       	and    eax,0xff
c0013ce0:	89 14 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],edx
c0013ce7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cec:	a0 10 50 02 c0       	mov    al,ds:0xc0025010
c0013cf1:	40                   	inc    eax
c0013cf2:	a2 10 50 02 c0       	mov    ds:0xc0025010,al
c0013cf7:	e9 d6 00 00 00       	jmp    c0013dd2 <scanMADT()+0x39c>
c0013cfc:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d01:	0f 85 b1 00 00 00    	jne    c0013db8 <scanMADT()+0x382>
c0013d07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0b:	8d 50 01             	lea    edx,[eax+0x1]
c0013d0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d16:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d1a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d22:	8d 50 01             	lea    edx,[eax+0x1]
c0013d25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d31:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d3d:	01 d0                	add    eax,edx
c0013d3f:	83 c0 2c             	add    eax,0x2c
c0013d42:	8a 00                	mov    al,BYTE PTR [eax]
c0013d44:	31 d2                	xor    edx,edx
c0013d46:	88 c2                	mov    dl,al
c0013d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d4c:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d53:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d57:	25 ff 00 00 00       	and    eax,0xff
c0013d5c:	c1 e0 08             	shl    eax,0x8
c0013d5f:	89 d1                	mov    ecx,edx
c0013d61:	09 c1                	or     ecx,eax
c0013d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d67:	8d 50 02             	lea    edx,[eax+0x2]
c0013d6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d72:	25 ff 00 00 00       	and    eax,0xff
c0013d77:	c1 e0 10             	shl    eax,0x10
c0013d7a:	09 c1                	or     ecx,eax
c0013d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d80:	8d 50 03             	lea    edx,[eax+0x3]
c0013d83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d8b:	25 ff 00 00 00       	and    eax,0xff
c0013d90:	c1 e0 18             	shl    eax,0x18
c0013d93:	09 c8                	or     eax,ecx
c0013d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d99:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d9e:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013da3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013da7:	25 ff 00 00 00       	and    eax,0xff
c0013dac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013db0:	88 90 c0 3e 02 c0    	mov    BYTE PTR [eax-0x3ffdc140],dl
c0013db6:	eb 1a                	jmp    c0013dd2 <scanMADT()+0x39c>
c0013db8:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013dbd:	75 07                	jne    c0013dc6 <scanMADT()+0x390>
c0013dbf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dc4:	eb 0c                	jmp    c0013dd2 <scanMADT()+0x39c>
c0013dc6:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013dcb:	75 05                	jne    c0013dd2 <scanMADT()+0x39c>
c0013dcd:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013dd2:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013dd6:	31 d2                	xor    edx,edx
c0013dd8:	88 c2                	mov    dl,al
c0013dda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dde:	01 d0                	add    eax,edx
c0013de0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013de4:	e9 1d fd ff ff       	jmp    c0013b06 <scanMADT()+0xd0>
c0013de9:	90                   	nop
c0013dea:	eb 01                	jmp    c0013ded <scanMADT()+0x3b7>
c0013dec:	90                   	nop
c0013ded:	83 c4 2c             	add    esp,0x2c
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <ACPI::ACPI()>:
c0013df2:	83 ec 0c             	sub    esp,0xc
c0013df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df9:	83 ec 08             	sub    esp,0x8
c0013dfc:	68 83 22 02 c0       	push   0xc0022283
c0013e01:	50                   	push   eax
c0013e02:	e8 11 ca ff ff       	call   c0010818 <Device::Device(char const*)>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	ba 2c 24 02 c0       	mov    edx,0xc002242c
c0013e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e13:	89 10                	mov    DWORD PTR [eax],edx
c0013e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e19:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e24:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e32:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e40:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e47:	e8 ea fb ff ff       	call   c0013a36 <scanMADT()>
c0013e4c:	90                   	nop
c0013e4d:	83 c4 0c             	add    esp,0xc
c0013e50:	c3                   	ret    
c0013e51:	90                   	nop

c0013e52 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e52:	83 ec 2c             	sub    esp,0x2c
c0013e55:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e5d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e61:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e65:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e6a:	88 d0                	mov    al,dl
c0013e6c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e75:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e81:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e87:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013e8b:	0f 8d 97 00 00 00    	jge    c0013f28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013e91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e99:	83 c2 2a             	add    edx,0x2a
c0013e9c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013ea0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ea5:	75 78                	jne    c0013f1f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eaf:	83 c2 2a             	add    edx,0x2a
c0013eb2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013eb6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013eba:	75 63                	jne    c0013f1f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ebc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ec1:	74 3a                	je     c0013efd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013ec3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ec7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ecb:	83 c2 2a             	add    edx,0x2a
c0013ece:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013ed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ed9:	39 c2                	cmp    edx,eax
c0013edb:	74 10                	je     c0013eed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013edd:	83 ec 0c             	sub    esp,0xc
c0013ee0:	68 90 23 02 c0       	push   0xc0022390
c0013ee5:	e8 3e 1b 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0013eea:	83 c4 10             	add    esp,0x10
c0013eed:	83 ec 0c             	sub    esp,0xc
c0013ef0:	68 88 22 02 c0       	push   0xc0022288
c0013ef5:	e8 2e 1b 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0013efa:	83 c4 10             	add    esp,0x10
c0013efd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f09:	83 c2 2a             	add    edx,0x2a
c0013f0c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f10:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f12:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f15:	89 01                	mov    DWORD PTR [ecx],eax
c0013f17:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f1a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f1f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f23:	e9 55 ff ff ff       	jmp    c0013e7d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f28:	90                   	nop
c0013f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f2d:	83 c4 2c             	add    esp,0x2c
c0013f30:	c2 04 00             	ret    0x4
c0013f33:	90                   	nop

c0013f34 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f34:	56                   	push   esi
c0013f35:	53                   	push   ebx
c0013f36:	83 ec 14             	sub    esp,0x14
c0013f39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f3d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f45:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f4a:	88 c8                	mov    al,cl
c0013f4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f50:	88 d0                	mov    al,dl
c0013f52:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f5a:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f64:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f6a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f6e:	31 c9                	xor    ecx,ecx
c0013f70:	88 c1                	mov    cl,al
c0013f72:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f76:	31 d2                	xor    edx,edx
c0013f78:	88 c2                	mov    dl,al
c0013f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f7e:	25 ff ff 00 00       	and    eax,0xffff
c0013f83:	83 ec 04             	sub    esp,0x4
c0013f86:	56                   	push   esi
c0013f87:	53                   	push   ebx
c0013f88:	51                   	push   ecx
c0013f89:	52                   	push   edx
c0013f8a:	50                   	push   eax
c0013f8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f8f:	68 c0 23 02 c0       	push   0xc00223c0
c0013f94:	e8 7a b2 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0013f99:	83 c4 20             	add    esp,0x20
c0013f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa0:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013faa:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fad:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fb1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fc3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fca:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fd9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013fdd:	8d 48 01             	lea    ecx,[eax+0x1]
c0013fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe4:	83 c2 2a             	add    edx,0x2a
c0013fe7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fef:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013ffc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014000:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0014004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014008:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001400e:	8d 50 01             	lea    edx,[eax+0x1]
c0014011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014015:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001401b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014025:	3d 00 08 00 00       	cmp    eax,0x800
c001402a:	75 10                	jne    c001403c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c001402c:	83 ec 0c             	sub    esp,0xc
c001402f:	68 97 22 02 c0       	push   0xc0022297
c0014034:	e8 ef 19 00 00       	call   c0015a28 <Krnl::panic(char const*)>
c0014039:	83 c4 10             	add    esp,0x10
c001403c:	90                   	nop
c001403d:	83 c4 14             	add    esp,0x14
c0014040:	5b                   	pop    ebx
c0014041:	5e                   	pop    esi
c0014042:	c3                   	ret    
c0014043:	90                   	nop

c0014044 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0014044:	b8 00 00 00 00       	mov    eax,0x0
c0014049:	c3                   	ret    

c001404a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001404a:	83 ec 1c             	sub    esp,0x1c
c001404d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014051:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0014054:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014058:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c001405e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014062:	25 ff 00 00 00       	and    eax,0xff
c0014067:	83 ec 08             	sub    esp,0x8
c001406a:	50                   	push   eax
c001406b:	52                   	push   edx
c001406c:	e8 7d 75 ff ff       	call   c000b5ee <Computer::readCMOS(unsigned char)>
c0014071:	83 c4 10             	add    esp,0x10
c0014074:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0014078:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c001407e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014082:	25 ff 00 00 00       	and    eax,0xff
c0014087:	83 ec 04             	sub    esp,0x4
c001408a:	6a 01                	push   0x1
c001408c:	50                   	push   eax
c001408d:	52                   	push   edx
c001408e:	e8 73 76 ff ff       	call   c000b706 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	90                   	nop
c0014097:	83 c4 1c             	add    esp,0x1c
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <ACPI::open(int, int, void*)>:
c001409c:	53                   	push   ebx
c001409d:	83 ec 18             	sub    esp,0x18
c00140a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a4:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140af:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140b5:	84 c0                	test   al,al
c00140b7:	74 60                	je     c0014119 <ACPI::open(int, int, void*)+0x7d>
c00140b9:	83 ec 0c             	sub    esp,0xc
c00140bc:	68 58 01 00 00       	push   0x158
c00140c1:	e8 18 b0 ff ff       	call   c000f0de <operator new(unsigned long)>
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	89 c3                	mov    ebx,eax
c00140cb:	83 ec 0c             	sub    esp,0xc
c00140ce:	53                   	push   ebx
c00140cf:	e8 a8 80 00 00       	call   c001c17c <PCI::PCI()>
c00140d4:	83 c4 10             	add    esp,0x10
c00140d7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140e6:	50                   	push   eax
c00140e7:	e8 3c c5 ff ff       	call   c0010628 <Device::addChild(Device*)>
c00140ec:	83 c4 10             	add    esp,0x10
c00140ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00140f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00140f5:	83 c0 08             	add    eax,0x8
c00140f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00140fa:	6a 00                	push   0x0
c00140fc:	6a 00                	push   0x0
c00140fe:	6a 00                	push   0x0
c0014100:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014104:	ff d0                	call   eax
c0014106:	83 c4 10             	add    esp,0x10
c0014109:	83 ec 0c             	sub    esp,0xc
c001410c:	68 b4 22 02 c0       	push   0xc00222b4
c0014111:	e8 fd b0 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	83 ec 0c             	sub    esp,0xc
c001411c:	68 bf 22 02 c0       	push   0xc00222bf
c0014121:	e8 43 38 00 00       	call   c0017969 <Thr::loadKernelSymbolTable(char const*)>
c0014126:	83 c4 10             	add    esp,0x10
c0014129:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c001412f:	83 ec 08             	sub    esp,0x8
c0014132:	6a 01                	push   0x1
c0014134:	68 dd 22 02 c0       	push   0xc00222dd
c0014139:	e8 0d 43 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	83 ec 08             	sub    esp,0x8
c0014144:	53                   	push   ebx
c0014145:	50                   	push   eax
c0014146:	e8 c6 44 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c0014154:	83 ec 08             	sub    esp,0x8
c0014157:	6a 01                	push   0x1
c0014159:	68 fa 22 02 c0       	push   0xc00222fa
c001415e:	e8 e8 42 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c0014163:	83 c4 10             	add    esp,0x10
c0014166:	83 ec 08             	sub    esp,0x8
c0014169:	53                   	push   ebx
c001416a:	50                   	push   eax
c001416b:	e8 a1 44 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c0014170:	83 c4 10             	add    esp,0x10
c0014173:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0014178:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001417e:	83 e0 04             	and    eax,0x4
c0014181:	84 c0                	test   al,al
c0014183:	0f 84 cf 00 00 00    	je     c0014258 <ACPI::open(int, int, void*)+0x1bc>
c0014189:	83 ec 0c             	sub    esp,0xc
c001418c:	68 14 01 00 00       	push   0x114
c0014191:	e8 48 af ff ff       	call   c000f0de <operator new(unsigned long)>
c0014196:	83 c4 10             	add    esp,0x10
c0014199:	89 c3                	mov    ebx,eax
c001419b:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c00141a0:	83 ec 04             	sub    esp,0x4
c00141a3:	50                   	push   eax
c00141a4:	68 17 23 02 c0       	push   0xc0022317
c00141a9:	53                   	push   ebx
c00141aa:	e8 9b b5 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141bb:	74 17                	je     c00141d4 <ACPI::open(int, int, void*)+0x138>
c00141bd:	83 ec 0c             	sub    esp,0xc
c00141c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141c4:	e8 53 b8 ff ff       	call   c000fa1c <File::exists()>
c00141c9:	83 c4 10             	add    esp,0x10
c00141cc:	84 c0                	test   al,al
c00141ce:	74 04                	je     c00141d4 <ACPI::open(int, int, void*)+0x138>
c00141d0:	b0 01                	mov    al,0x1
c00141d2:	eb 02                	jmp    c00141d6 <ACPI::open(int, int, void*)+0x13a>
c00141d4:	b0 00                	mov    al,0x0
c00141d6:	84 c0                	test   al,al
c00141d8:	74 25                	je     c00141ff <ACPI::open(int, int, void*)+0x163>
c00141da:	8b 1d 68 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024768
c00141e0:	83 ec 08             	sub    esp,0x8
c00141e3:	6a 01                	push   0x1
c00141e5:	68 17 23 02 c0       	push   0xc0022317
c00141ea:	e8 5c 42 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c00141ef:	83 c4 10             	add    esp,0x10
c00141f2:	83 ec 08             	sub    esp,0x8
c00141f5:	53                   	push   ebx
c00141f6:	50                   	push   eax
c00141f7:	e8 15 44 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c00141fc:	83 c4 10             	add    esp,0x10
c00141ff:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014204:	74 1e                	je     c0014224 <ACPI::open(int, int, void*)+0x188>
c0014206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001420b:	74 17                	je     c0014224 <ACPI::open(int, int, void*)+0x188>
c001420d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014211:	8b 00                	mov    eax,DWORD PTR [eax]
c0014213:	83 c0 08             	add    eax,0x8
c0014216:	8b 00                	mov    eax,DWORD PTR [eax]
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001421f:	ff d0                	call   eax
c0014221:	83 c4 10             	add    esp,0x10
c0014224:	a1 08 50 02 c0       	mov    eax,ds:0xc0025008
c0014229:	83 ec 08             	sub    esp,0x8
c001422c:	68 34 23 02 c0       	push   0xc0022334
c0014231:	50                   	push   eax
c0014232:	e8 63 f7 ff ff       	call   c001399a <findDataTable(unsigned char*, char*)>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001423e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014243:	74 13                	je     c0014258 <ACPI::open(int, int, void*)+0x1bc>
c0014245:	83 ec 08             	sub    esp,0x8
c0014248:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001424c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014250:	e8 f5 fd ff ff       	call   c001404a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014255:	83 c4 10             	add    esp,0x10
c0014258:	b8 00 00 00 00       	mov    eax,0x0
c001425d:	83 c4 18             	add    esp,0x18
c0014260:	5b                   	pop    ebx
c0014261:	c3                   	ret    

c0014262 <ACPI::sleep()>:
c0014262:	83 ec 0c             	sub    esp,0xc
c0014265:	a1 e0 4d 02 c0       	mov    eax,ds:0xc0024de0
c001426a:	85 c0                	test   eax,eax
c001426c:	74 07                	je     c0014275 <ACPI::sleep()+0x13>
c001426e:	a1 e0 4d 02 c0       	mov    eax,ds:0xc0024de0
c0014273:	ff d0                	call   eax
c0014275:	90                   	nop
c0014276:	83 c4 0c             	add    esp,0xc
c0014279:	c3                   	ret    

c001427a <CPU::close(int, int, void*)>:
c001427a:	31 c0                	xor    eax,eax
c001427c:	c3                   	ret    

c001427d <lookupAMDCPUName(unsigned char, unsigned char)>:
c001427d:	55                   	push   ebp
c001427e:	57                   	push   edi
c001427f:	56                   	push   esi
c0014280:	53                   	push   ebx
c0014281:	51                   	push   ecx
c0014282:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014286:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001428a:	89 d6                	mov    esi,edx
c001428c:	89 cd                	mov    ebp,ecx
c001428e:	80 fa 04             	cmp    dl,0x4
c0014291:	75 28                	jne    c00142bb <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c0014293:	8d 41 f9             	lea    eax,[ecx-0x7]
c0014296:	3c 03                	cmp    al,0x3
c0014298:	0f 86 64 01 00 00    	jbe    c0014402 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c001429e:	80 f9 03             	cmp    cl,0x3
c00142a1:	0f 84 5b 01 00 00    	je     c0014402 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142a7:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142aa:	b8 90 40 02 c0       	mov    eax,0xc0024090
c00142af:	89 fb                	mov    ebx,edi
c00142b1:	80 fb 01             	cmp    bl,0x1
c00142b4:	77 4e                	ja     c0014304 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142b6:	e9 61 01 00 00       	jmp    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142bb:	80 fa 05             	cmp    dl,0x5
c00142be:	75 4d                	jne    c001430d <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142c0:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c00142c5:	80 f9 03             	cmp    cl,0x3
c00142c8:	0f 86 4e 01 00 00    	jbe    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ce:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142d1:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00142d6:	89 fb                	mov    ebx,edi
c00142d8:	80 fb 01             	cmp    bl,0x1
c00142db:	0f 86 3b 01 00 00    	jbe    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e1:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c00142e6:	80 f9 08             	cmp    cl,0x8
c00142e9:	0f 84 2d 01 00 00    	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ef:	89 cf                	mov    edi,ecx
c00142f1:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142f6:	83 e7 fb             	and    edi,0xfffffffb
c00142f9:	89 fb                	mov    ebx,edi
c00142fb:	80 fb 09             	cmp    bl,0x9
c00142fe:	0f 84 18 01 00 00    	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014304:	31 c0                	xor    eax,eax
c0014306:	89 eb                	mov    ebx,ebp
c0014308:	0f b6 fb             	movzx  edi,bl
c001430b:	eb 30                	jmp    c001433d <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c001430d:	31 c0                	xor    eax,eax
c001430f:	80 fa 06             	cmp    dl,0x6
c0014312:	75 f2                	jne    c0014306 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014314:	80 f9 0a             	cmp    cl,0xa
c0014317:	77 ed                	ja     c0014306 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014319:	bf de 05 00 00       	mov    edi,0x5de
c001431e:	0f a3 cf             	bt     edi,ecx
c0014321:	73 e3                	jae    c0014306 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014323:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c0014328:	e9 ef 00 00 00       	jmp    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001432d:	39 c7                	cmp    edi,eax
c001432f:	0f 84 d4 00 00 00    	je     c0014409 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014335:	40                   	inc    eax
c0014336:	3d d0 00 00 00       	cmp    eax,0xd0
c001433b:	74 09                	je     c0014346 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c001433d:	89 f3                	mov    ebx,esi
c001433f:	80 fb 0f             	cmp    bl,0xf
c0014342:	75 f1                	jne    c0014335 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014344:	eb e7                	jmp    c001432d <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014346:	80 fa 10             	cmp    dl,0x10
c0014349:	75 19                	jne    c0014364 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c001434b:	8d 41 fc             	lea    eax,[ecx-0x4]
c001434e:	83 e0 fb             	and    eax,0xfffffffb
c0014351:	3c 02                	cmp    al,0x2
c0014353:	0f 86 b7 00 00 00    	jbe    c0014410 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014359:	80 f9 02             	cmp    cl,0x2
c001435c:	0f 84 ae 00 00 00    	je     c0014410 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014362:	eb 13                	jmp    c0014377 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014364:	80 fa 11             	cmp    dl,0x11
c0014367:	75 0e                	jne    c0014377 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014369:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c001436e:	80 f9 03             	cmp    cl,0x3
c0014371:	0f 84 a5 00 00 00    	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014377:	80 fa 12             	cmp    dl,0x12
c001437a:	75 0e                	jne    c001438a <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c001437c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0014381:	80 f9 01             	cmp    cl,0x1
c0014384:	0f 84 92 00 00 00    	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001438a:	80 fa 14             	cmp    dl,0x14
c001438d:	be 01 00 00 00       	mov    esi,0x1
c0014392:	0f 94 c3             	sete   bl
c0014395:	80 f9 13             	cmp    cl,0x13
c0014398:	77 0c                	ja     c00143a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001439a:	be 04 00 09 00       	mov    esi,0x90004
c001439f:	d3 ee                	shr    esi,cl
c00143a1:	f7 d6                	not    esi
c00143a3:	83 e6 01             	and    esi,0x1
c00143a6:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143a9:	3c 01                	cmp    al,0x1
c00143ab:	b8 10 41 02 c0       	mov    eax,0xc0024110
c00143b0:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143b5:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143b9:	75 61                	jne    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143bb:	80 fa 15             	cmp    dl,0x15
c00143be:	75 1f                	jne    c00143df <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143c0:	b8 20 41 02 c0       	mov    eax,0xc0024120
c00143c5:	80 f9 01             	cmp    cl,0x1
c00143c8:	74 52                	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143ca:	89 f3                	mov    ebx,esi
c00143cc:	b8 30 41 02 c0       	mov    eax,0xc0024130
c00143d1:	84 db                	test   bl,bl
c00143d3:	74 47                	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143d5:	b8 40 41 02 c0       	mov    eax,0xc0024140
c00143da:	80 f9 30             	cmp    cl,0x30
c00143dd:	74 3d                	je     c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143df:	80 fa 16             	cmp    dl,0x16
c00143e2:	0f 94 c2             	sete   dl
c00143e5:	84 c9                	test   cl,cl
c00143e7:	75 09                	jne    c00143f2 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c00143e9:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143ee:	84 d2                	test   dl,dl
c00143f0:	75 2a                	jne    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f2:	80 f9 30             	cmp    cl,0x30
c00143f5:	75 20                	jne    c0014417 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c00143f7:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143fc:	84 d2                	test   dl,dl
c00143fe:	75 1c                	jne    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014400:	eb 15                	jmp    c0014417 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014402:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0014407:	eb 13                	jmp    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014409:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c001440e:	eb 0c                	jmp    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014410:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0014415:	eb 05                	jmp    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014417:	b8 42 27 02 c0       	mov    eax,0xc0022742
c001441c:	5a                   	pop    edx
c001441d:	5b                   	pop    ebx
c001441e:	5e                   	pop    esi
c001441f:	5f                   	pop    edi
c0014420:	5d                   	pop    ebp
c0014421:	c3                   	ret    

c0014422 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014422:	53                   	push   ebx
c0014423:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014427:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001442b:	80 f9 04             	cmp    cl,0x4
c001442e:	75 6a                	jne    c001449a <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014430:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0014435:	80 fa 01             	cmp    dl,0x1
c0014438:	0f 86 9b 02 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001443e:	b8 f0 3e 02 c0       	mov    eax,0xc0023ef0
c0014443:	80 fa 02             	cmp    dl,0x2
c0014446:	0f 84 8d 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001444c:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014451:	80 fa 03             	cmp    dl,0x3
c0014454:	0f 84 7f 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001445a:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c001445f:	80 fa 04             	cmp    dl,0x4
c0014462:	0f 84 71 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014468:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001446d:	80 fa 05             	cmp    dl,0x5
c0014470:	0f 84 63 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014476:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c001447b:	80 fa 07             	cmp    dl,0x7
c001447e:	0f 84 55 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014484:	8d 5a f8             	lea    ebx,[edx-0x8]
c0014487:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001448c:	80 fb 01             	cmp    bl,0x1
c001448f:	0f 87 e0 01 00 00    	ja     c0014675 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014495:	e9 3f 02 00 00       	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001449a:	80 f9 05             	cmp    cl,0x5
c001449d:	75 3e                	jne    c00144dd <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c001449f:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144a2:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c00144a7:	80 fb 02             	cmp    bl,0x2
c00144aa:	0f 86 29 02 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b0:	80 fa 04             	cmp    dl,0x4
c00144b3:	0f 84 f1 01 00 00    	je     c00146aa <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144b9:	80 fa 07             	cmp    dl,0x7
c00144bc:	0f 84 17 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c2:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c00144c7:	80 fa 08             	cmp    dl,0x8
c00144ca:	0f 84 09 02 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d0:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00144d5:	80 fa 09             	cmp    dl,0x9
c00144d8:	e9 96 01 00 00       	jmp    c0014673 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00144dd:	80 f9 06             	cmp    cl,0x6
c00144e0:	0f 85 80 01 00 00    	jne    c0014666 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c00144e6:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144eb:	80 fa 01             	cmp    dl,0x1
c00144ee:	0f 84 e5 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144f4:	8d 42 fb             	lea    eax,[edx-0x5]
c00144f7:	3c 01                	cmp    al,0x1
c00144f9:	0f 86 b2 01 00 00    	jbe    c00146b1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c00144ff:	80 fa 03             	cmp    dl,0x3
c0014502:	0f 84 a9 01 00 00    	je     c00146b1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014508:	8d 5a f9             	lea    ebx,[edx-0x7]
c001450b:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c0014510:	80 fb 01             	cmp    bl,0x1
c0014513:	0f 86 c0 01 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014519:	80 fa 09             	cmp    dl,0x9
c001451c:	0f 84 96 01 00 00    	je     c00146b8 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014522:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014525:	80 fb 01             	cmp    bl,0x1
c0014528:	0f 86 ab 01 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001452e:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c0014533:	80 fa 0d             	cmp    dl,0xd
c0014536:	0f 84 9d 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001453c:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014541:	80 fa 0e             	cmp    dl,0xe
c0014544:	0f 84 8f 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001454a:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c001454f:	80 fa 0f             	cmp    dl,0xf
c0014552:	0f 84 81 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014558:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c001455d:	80 fa 15             	cmp    dl,0x15
c0014560:	0f 84 73 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014566:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014569:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c001456e:	80 fb 01             	cmp    bl,0x1
c0014571:	0f 86 62 01 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014577:	80 fa 1a             	cmp    dl,0x1a
c001457a:	0f 84 3f 01 00 00    	je     c00146bf <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0014580:	80 fa 1c             	cmp    dl,0x1c
c0014583:	0f 84 3d 01 00 00    	je     c00146c6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c0014589:	80 fa 1d             	cmp    dl,0x1d
c001458c:	0f 84 47 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014592:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c0014597:	80 fa 25             	cmp    dl,0x25
c001459a:	0f 84 39 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a0:	8d 5a da             	lea    ebx,[edx-0x26]
c00145a3:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00145a8:	80 fb 01             	cmp    bl,0x1
c00145ab:	0f 86 28 01 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b1:	b8 00 40 02 c0       	mov    eax,0xc0024000
c00145b6:	80 fa 2a             	cmp    dl,0x2a
c00145b9:	0f 84 1a 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145bf:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c00145c4:	80 fa 2c             	cmp    dl,0x2c
c00145c7:	0f 84 0c 01 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145cd:	b8 00 40 02 c0       	mov    eax,0xc0024000
c00145d2:	80 fa 2d             	cmp    dl,0x2d
c00145d5:	0f 84 fe 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145db:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c00145e0:	80 fa 2e             	cmp    dl,0x2e
c00145e3:	0f 84 f0 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e9:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c00145ee:	80 fa 2f             	cmp    dl,0x2f
c00145f1:	0f 84 e2 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f7:	8d 5a cb             	lea    ebx,[edx-0x35]
c00145fa:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00145ff:	80 fb 01             	cmp    bl,0x1
c0014602:	0f 86 d1 00 00 00    	jbe    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014608:	b8 10 40 02 c0       	mov    eax,0xc0024010
c001460d:	80 fa 37             	cmp    dl,0x37
c0014610:	0f 84 c3 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014616:	b8 20 40 02 c0       	mov    eax,0xc0024020
c001461b:	80 fa 3a             	cmp    dl,0x3a
c001461e:	0f 84 b5 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014624:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014629:	80 fa 3c             	cmp    dl,0x3c
c001462c:	0f 84 a7 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014632:	b8 40 40 02 c0       	mov    eax,0xc0024040
c0014637:	80 fa 3d             	cmp    dl,0x3d
c001463a:	0f 84 99 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014640:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0014645:	80 fa 3e             	cmp    dl,0x3e
c0014648:	0f 84 8b 00 00 00    	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001464e:	8d 42 bb             	lea    eax,[edx-0x45]
c0014651:	3c 01                	cmp    al,0x1
c0014653:	76 78                	jbe    c00146cd <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014655:	80 fa 3f             	cmp    dl,0x3f
c0014658:	74 73                	je     c00146cd <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001465a:	80 fa 4a             	cmp    dl,0x4a
c001465d:	74 75                	je     c00146d4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001465f:	80 fa 4d             	cmp    dl,0x4d
c0014662:	75 11                	jne    c0014675 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014664:	eb 6e                	jmp    c00146d4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014666:	80 f9 0b             	cmp    cl,0xb
c0014669:	75 0a                	jne    c0014675 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001466b:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014670:	80 fa 01             	cmp    dl,0x1
c0014673:	74 64                	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014675:	80 f9 0f             	cmp    cl,0xf
c0014678:	b8 60 40 02 c0       	mov    eax,0xc0024060
c001467d:	0f 94 c1             	sete   cl
c0014680:	80 fa 02             	cmp    dl,0x2
c0014683:	0f 96 c3             	setbe  bl
c0014686:	84 cb                	test   bl,cl
c0014688:	75 4f                	jne    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001468a:	8d 42 fd             	lea    eax,[edx-0x3]
c001468d:	3c 01                	cmp    al,0x1
c001468f:	0f 96 c0             	setbe  al
c0014692:	80 fa 06             	cmp    dl,0x6
c0014695:	0f 94 c2             	sete   dl
c0014698:	09 c2                	or     edx,eax
c001469a:	b8 42 27 02 c0       	mov    eax,0xc0022742
c001469f:	84 ca                	test   dl,cl
c00146a1:	74 36                	je     c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146a3:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146a8:	eb 2f                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146aa:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c00146af:	eb 28                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b1:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00146b6:	eb 21                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b8:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00146bd:	eb 1a                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146bf:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c00146c4:	eb 13                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c6:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146cb:	eb 0c                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146cd:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00146d2:	eb 05                	jmp    c00146d9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d4:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146d9:	5b                   	pop    ebx
c00146da:	c3                   	ret    

c00146db <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146db:	60                   	pusha  
c00146dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146e8:	9c                   	pushf  
c00146e9:	fa                   	cli    
c00146ea:	0f 09                	wbinvd 
c00146ec:	0f 30                	wrmsr  
c00146ee:	9d                   	popf   
c00146ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00146f3:	89 02                	mov    DWORD PTR [edx],eax
c00146f5:	61                   	popa   
c00146f6:	c3                   	ret    

c00146f7 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00146f7:	60                   	pusha  
c00146f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146fc:	9c                   	pushf  
c00146fd:	fa                   	cli    
c00146fe:	0f 09                	wbinvd 
c0014700:	31 c0                	xor    eax,eax
c0014702:	31 d2                	xor    edx,edx
c0014704:	0f 32                	rdmsr  
c0014706:	9d                   	popf   
c0014707:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001470b:	89 02                	mov    DWORD PTR [edx],eax
c001470d:	61                   	popa   
c001470e:	c3                   	ret    

c001470f <AMD_K6_writeback(int, int, int)>:
c001470f:	56                   	push   esi
c0014710:	53                   	push   ebx
c0014711:	83 ec 10             	sub    esp,0x10
c0014714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014718:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001471d:	75 5d                	jne    c001477c <AMD_K6_writeback(int, int, int)+0x6d>
c001471f:	83 f8 08             	cmp    eax,0x8
c0014722:	75 09                	jne    c001472d <AMD_K6_writeback(int, int, int)+0x1e>
c0014724:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014729:	7e 13                	jle    c001473e <AMD_K6_writeback(int, int, int)+0x2f>
c001472b:	eb 30                	jmp    c001475d <AMD_K6_writeback(int, int, int)+0x4e>
c001472d:	83 f8 06             	cmp    eax,0x6
c0014730:	7c 4a                	jl     c001477c <AMD_K6_writeback(int, int, int)+0x6d>
c0014732:	83 f8 07             	cmp    eax,0x7
c0014735:	7e 07                	jle    c001473e <AMD_K6_writeback(int, int, int)+0x2f>
c0014737:	83 f8 09             	cmp    eax,0x9
c001473a:	74 21                	je     c001475d <AMD_K6_writeback(int, int, int)+0x4e>
c001473c:	eb 3e                	jmp    c001477c <AMD_K6_writeback(int, int, int)+0x6d>
c001473e:	89 e6                	mov    esi,esp
c0014740:	8b 1d a4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a4
c0014746:	c1 eb 15             	shr    ebx,0x15
c0014749:	56                   	push   esi
c001474a:	68 82 00 00 c0       	push   0xc0000082
c001474f:	e8 a3 ff ff ff       	call   c00146f7 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014754:	56                   	push   esi
c0014755:	83 e3 7e             	and    ebx,0x7e
c0014758:	6a 00                	push   0x0
c001475a:	53                   	push   ebx
c001475b:	eb 12                	jmp    c001476f <AMD_K6_writeback(int, int, int)+0x60>
c001475d:	89 e3                	mov    ebx,esp
c001475f:	53                   	push   ebx
c0014760:	68 82 00 00 c0       	push   0xc0000082
c0014765:	e8 8d ff ff ff       	call   c00146f7 <AMD_K6_read_msr(unsigned int, REGS*)>
c001476a:	53                   	push   ebx
c001476b:	6a 00                	push   0x0
c001476d:	6a 00                	push   0x0
c001476f:	68 82 00 00 c0       	push   0xc0000082
c0014774:	e8 62 ff ff ff       	call   c00146db <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014779:	83 c4 18             	add    esp,0x18
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	5b                   	pop    ebx
c0014780:	5e                   	pop    esi
c0014781:	c3                   	ret    

c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014782:	55                   	push   ebp
c0014783:	57                   	push   edi
c0014784:	56                   	push   esi
c0014785:	53                   	push   ebx
c0014786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001478a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001478e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014792:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014796:	39 05 80 41 02 c0    	cmp    DWORD PTR ds:0xc0024180,eax
c001479c:	75 23                	jne    c00147c1 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001479e:	a1 ac 51 02 c0       	mov    eax,ds:0xc00251ac
c00147a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147a7:	89 06                	mov    DWORD PTR [esi],eax
c00147a9:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00147ae:	89 07                	mov    DWORD PTR [edi],eax
c00147b0:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c00147b5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147b8:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c00147bd:	89 02                	mov    DWORD PTR [edx],eax
c00147bf:	eb 3f                	jmp    c0014800 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147c1:	31 c9                	xor    ecx,ecx
c00147c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147c7:	0f a2                	cpuid  
c00147c9:	89 06                	mov    DWORD PTR [esi],eax
c00147cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147cf:	89 1f                	mov    DWORD PTR [edi],ebx
c00147d1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147d4:	89 10                	mov    DWORD PTR [eax],edx
c00147d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147da:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c00147df:	8b 06                	mov    eax,DWORD PTR [esi]
c00147e1:	a3 ac 51 02 c0       	mov    ds:0xc00251ac,eax
c00147e6:	8b 07                	mov    eax,DWORD PTR [edi]
c00147e8:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00147ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00147f0:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c00147f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00147fb:	a3 a0 51 02 c0       	mov    ds:0xc00251a0,eax
c0014800:	5b                   	pop    ebx
c0014801:	5e                   	pop    esi
c0014802:	5f                   	pop    edi
c0014803:	5d                   	pop    ebp
c0014804:	c3                   	ret    

c0014805 <cpuidCheckEDX(unsigned int)>:
c0014805:	83 ec 10             	sub    esp,0x10
c0014808:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001480c:	50                   	push   eax
c001480d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014811:	50                   	push   eax
c0014812:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014816:	50                   	push   eax
c0014817:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001481b:	50                   	push   eax
c001481c:	6a 01                	push   0x1
c001481e:	e8 5f ff ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014823:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014827:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001482b:	0f 95 c0             	setne  al
c001482e:	83 c4 24             	add    esp,0x24
c0014831:	c3                   	ret    

c0014832 <cpuidCheckECX(unsigned int)>:
c0014832:	83 ec 10             	sub    esp,0x10
c0014835:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014839:	50                   	push   eax
c001483a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001483e:	50                   	push   eax
c001483f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014843:	50                   	push   eax
c0014844:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014848:	50                   	push   eax
c0014849:	6a 01                	push   0x1
c001484b:	e8 32 ff ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014850:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014854:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014858:	0f 95 c0             	setne  al
c001485b:	83 c4 24             	add    esp,0x24
c001485e:	c3                   	ret    

c001485f <cpuidCheckExtendedEBX(unsigned int)>:
c001485f:	83 ec 10             	sub    esp,0x10
c0014862:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014866:	50                   	push   eax
c0014867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001486b:	50                   	push   eax
c001486c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014870:	50                   	push   eax
c0014871:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014875:	50                   	push   eax
c0014876:	6a 07                	push   0x7
c0014878:	e8 05 ff ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001487d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014881:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014885:	0f 95 c0             	setne  al
c0014888:	83 c4 24             	add    esp,0x24
c001488b:	c3                   	ret    

c001488c <cpuidCheckExtendedECX(unsigned int)>:
c001488c:	83 ec 10             	sub    esp,0x10
c001488f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014893:	50                   	push   eax
c0014894:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014898:	50                   	push   eax
c0014899:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001489d:	50                   	push   eax
c001489e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148a2:	50                   	push   eax
c00148a3:	6a 07                	push   0x7
c00148a5:	e8 d8 fe ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148ae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148b2:	0f 95 c0             	setne  al
c00148b5:	83 c4 24             	add    esp,0x24
c00148b8:	c3                   	ret    

c00148b9 <getCPUNumber()>:
c00148b9:	31 c0                	xor    eax,eax
c00148bb:	c3                   	ret    

c00148bc <thisCPU()>:
c00148bc:	e8 f8 ff ff ff       	call   c00148b9 <getCPUNumber()>
c00148c1:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c00148c7:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148ce:	c3                   	ret    
c00148cf:	90                   	nop

c00148d0 <CPU::CPU()>:
c00148d0:	83 ec 0c             	sub    esp,0xc
c00148d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d7:	83 ec 08             	sub    esp,0x8
c00148da:	68 42 27 02 c0       	push   0xc0022742
c00148df:	50                   	push   eax
c00148e0:	e8 33 bf ff ff       	call   c0010818 <Device::Device(char const*)>
c00148e5:	83 c4 10             	add    esp,0x10
c00148e8:	ba 1c 28 02 c0       	mov    edx,0xc002281c
c00148ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148f1:	89 10                	mov    DWORD PTR [eax],edx
c00148f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148f7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014905:	05 78 01 00 00       	add    eax,0x178
c001490a:	83 ec 0c             	sub    esp,0xc
c001490d:	50                   	push   eax
c001490e:	e8 df 6e ff ff       	call   c000b7f2 <GDT::GDT()>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491a:	05 7c 09 00 00       	add    eax,0x97c
c001491f:	83 ec 0c             	sub    esp,0xc
c0014922:	50                   	push   eax
c0014923:	e8 2a 71 ff ff       	call   c000ba52 <IDT::IDT()>
c0014928:	83 c4 10             	add    esp,0x10
c001492b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492f:	05 7c 11 00 00       	add    eax,0x117c
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	50                   	push   eax
c0014938:	e8 87 91 ff ff       	call   c000dac4 <TSS::TSS()>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014944:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001494b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014959:	90                   	nop
c001495a:	83 c4 0c             	add    esp,0xc
c001495d:	c3                   	ret    

c001495e <CPU::displayFeatures()>:
c001495e:	53                   	push   ebx
c001495f:	83 ec 10             	sub    esp,0x10
c0014962:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014966:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001496c:	68 50 24 02 c0       	push   0xc0022450
c0014971:	e8 9d a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014976:	59                   	pop    ecx
c0014977:	58                   	pop    eax
c0014978:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001497e:	50                   	push   eax
c001497f:	68 61 24 02 c0       	push   0xc0022461
c0014984:	e8 8a a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014989:	58                   	pop    eax
c001498a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014990:	c1 e8 0e             	shr    eax,0xe
c0014993:	5a                   	pop    edx
c0014994:	0f b6 c0             	movzx  eax,al
c0014997:	50                   	push   eax
c0014998:	68 72 24 02 c0       	push   0xc0022472
c001499d:	e8 71 a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00149a2:	59                   	pop    ecx
c00149a3:	58                   	pop    eax
c00149a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149aa:	66 c1 e8 06          	shr    ax,0x6
c00149ae:	0f b6 c0             	movzx  eax,al
c00149b1:	50                   	push   eax
c00149b2:	68 83 24 02 c0       	push   0xc0022483
c00149b7:	e8 57 a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00149bc:	c7 04 24 96 28 02 c0 	mov    DWORD PTR [esp],0xc0022896
c00149c3:	e8 4b a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c00149d0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149d7:	74 05                	je     c00149de <CPU::displayFeatures()+0x80>
c00149d9:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c00149de:	52                   	push   edx
c00149df:	52                   	push   edx
c00149e0:	50                   	push   eax
c00149e1:	68 94 24 02 c0       	push   0xc0022494
c00149e6:	e8 28 a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00149eb:	83 c4 10             	add    esp,0x10
c00149ee:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c00149f3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00149fa:	78 05                	js     c0014a01 <CPU::displayFeatures()+0xa3>
c00149fc:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a01:	51                   	push   ecx
c0014a02:	51                   	push   ecx
c0014a03:	50                   	push   eax
c0014a04:	68 ab 24 02 c0       	push   0xc00224ab
c0014a09:	e8 05 a8 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014a0e:	83 c4 10             	add    esp,0x10
c0014a11:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a16:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a1d:	75 05                	jne    c0014a24 <CPU::displayFeatures()+0xc6>
c0014a1f:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a24:	52                   	push   edx
c0014a25:	52                   	push   edx
c0014a26:	50                   	push   eax
c0014a27:	68 c2 24 02 c0       	push   0xc00224c2
c0014a2c:	e8 e2 a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a39:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a40:	75 05                	jne    c0014a47 <CPU::displayFeatures()+0xe9>
c0014a42:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a47:	51                   	push   ecx
c0014a48:	51                   	push   ecx
c0014a49:	50                   	push   eax
c0014a4a:	68 d9 24 02 c0       	push   0xc00224d9
c0014a4f:	e8 bf a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a5c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a63:	75 05                	jne    c0014a6a <CPU::displayFeatures()+0x10c>
c0014a65:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a6a:	52                   	push   edx
c0014a6b:	52                   	push   edx
c0014a6c:	50                   	push   eax
c0014a6d:	68 f0 24 02 c0       	push   0xc00224f0
c0014a72:	e8 9c a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014a77:	83 c4 10             	add    esp,0x10
c0014a7a:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a7f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014a86:	75 05                	jne    c0014a8d <CPU::displayFeatures()+0x12f>
c0014a88:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a8d:	51                   	push   ecx
c0014a8e:	51                   	push   ecx
c0014a8f:	50                   	push   eax
c0014a90:	68 07 25 02 c0       	push   0xc0022507
c0014a95:	e8 79 a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014aa2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014aa9:	75 05                	jne    c0014ab0 <CPU::displayFeatures()+0x152>
c0014aab:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014ab0:	52                   	push   edx
c0014ab1:	52                   	push   edx
c0014ab2:	50                   	push   eax
c0014ab3:	68 1e 25 02 c0       	push   0xc002251e
c0014ab8:	e8 56 a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014abd:	83 c4 10             	add    esp,0x10
c0014ac0:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ac5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014acc:	75 05                	jne    c0014ad3 <CPU::displayFeatures()+0x175>
c0014ace:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014ad3:	51                   	push   ecx
c0014ad4:	51                   	push   ecx
c0014ad5:	50                   	push   eax
c0014ad6:	68 35 25 02 c0       	push   0xc0022535
c0014adb:	e8 33 a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014ae0:	83 c4 10             	add    esp,0x10
c0014ae3:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ae8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014aef:	75 05                	jne    c0014af6 <CPU::displayFeatures()+0x198>
c0014af1:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014af6:	52                   	push   edx
c0014af7:	52                   	push   edx
c0014af8:	50                   	push   eax
c0014af9:	68 4c 25 02 c0       	push   0xc002254c
c0014afe:	e8 10 a7 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014b03:	83 c4 10             	add    esp,0x10
c0014b06:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b0b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b12:	75 05                	jne    c0014b19 <CPU::displayFeatures()+0x1bb>
c0014b14:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b19:	51                   	push   ecx
c0014b1a:	51                   	push   ecx
c0014b1b:	50                   	push   eax
c0014b1c:	68 63 25 02 c0       	push   0xc0022563
c0014b21:	e8 ed a6 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014b26:	83 c4 10             	add    esp,0x10
c0014b29:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b2e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b35:	75 05                	jne    c0014b3c <CPU::displayFeatures()+0x1de>
c0014b37:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b3c:	52                   	push   edx
c0014b3d:	52                   	push   edx
c0014b3e:	50                   	push   eax
c0014b3f:	68 7a 25 02 c0       	push   0xc002257a
c0014b44:	e8 ca a6 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014b49:	83 c4 10             	add    esp,0x10
c0014b4c:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b51:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b58:	75 05                	jne    c0014b5f <CPU::displayFeatures()+0x201>
c0014b5a:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b5f:	51                   	push   ecx
c0014b60:	51                   	push   ecx
c0014b61:	50                   	push   eax
c0014b62:	68 91 25 02 c0       	push   0xc0022591
c0014b67:	e8 a7 a6 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b74:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b7b:	75 05                	jne    c0014b82 <CPU::displayFeatures()+0x224>
c0014b7d:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b82:	52                   	push   edx
c0014b83:	52                   	push   edx
c0014b84:	50                   	push   eax
c0014b85:	68 a8 25 02 c0       	push   0xc00225a8
c0014b8a:	e8 84 a6 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b97:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014b9e:	78 05                	js     c0014ba5 <CPU::displayFeatures()+0x247>
c0014ba0:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014ba5:	51                   	push   ecx
c0014ba6:	51                   	push   ecx
c0014ba7:	50                   	push   eax
c0014ba8:	68 bf 25 02 c0       	push   0xc00225bf
c0014bad:	e8 61 a6 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014bba:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014bc1:	75 05                	jne    c0014bc8 <CPU::displayFeatures()+0x26a>
c0014bc3:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014bc8:	52                   	push   edx
c0014bc9:	52                   	push   edx
c0014bca:	50                   	push   eax
c0014bcb:	68 d6 25 02 c0       	push   0xc00225d6
c0014bd0:	e8 3e a6 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0014bd5:	83 c4 18             	add    esp,0x18
c0014bd8:	5b                   	pop    ebx
c0014bd9:	c3                   	ret    

c0014bda <CPU::detectFeatures()>:
c0014bda:	55                   	push   ebp
c0014bdb:	57                   	push   edi
c0014bdc:	56                   	push   esi
c0014bdd:	53                   	push   ebx
c0014bde:	83 ec 50             	sub    esp,0x50
c0014be1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014be5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014bef:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014bf6:	6a 0d                	push   0xd
c0014bf8:	6a 00                	push   0x0
c0014bfa:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c00:	57                   	push   edi
c0014c01:	e8 bd ba fe ff       	call   c00006c3 <memset>
c0014c06:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c15:	0f 84 04 09 00 00    	je     c001551f <CPU::detectFeatures()+0x945>
c0014c1b:	83 ec 0c             	sub    esp,0xc
c0014c1e:	6a 10                	push   0x10
c0014c20:	e8 e0 fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014c25:	83 e0 01             	and    eax,0x1
c0014c28:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c2b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c31:	83 e0 fd             	and    eax,0xfffffffd
c0014c34:	09 d0                	or     eax,edx
c0014c36:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c3c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c43:	e8 bd fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014c48:	83 e0 01             	and    eax,0x1
c0014c4b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c52:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c58:	83 e0 fb             	and    eax,0xfffffffb
c0014c5b:	09 d0                	or     eax,edx
c0014c5d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c63:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c6a:	e8 96 fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014c6f:	83 e0 01             	and    eax,0x1
c0014c72:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c79:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c7f:	83 e0 f7             	and    eax,0xfffffff7
c0014c82:	09 d0                	or     eax,edx
c0014c84:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c8a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014c91:	e8 6f fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014c96:	83 e0 01             	and    eax,0x1
c0014c99:	c1 e0 04             	shl    eax,0x4
c0014c9c:	88 c2                	mov    dl,al
c0014c9e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ca4:	83 e0 ef             	and    eax,0xffffffef
c0014ca7:	09 d0                	or     eax,edx
c0014ca9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014caf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014cb6:	e8 4a fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014cbb:	83 e0 01             	and    eax,0x1
c0014cbe:	c1 e0 05             	shl    eax,0x5
c0014cc1:	88 c2                	mov    dl,al
c0014cc3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cc9:	83 e0 df             	and    eax,0xffffffdf
c0014ccc:	09 d0                	or     eax,edx
c0014cce:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cd4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014cdb:	e8 25 fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014ce0:	83 e0 01             	and    eax,0x1
c0014ce3:	8d 14 00             	lea    edx,[eax+eax*1]
c0014ce6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014cec:	83 e0 fd             	and    eax,0xfffffffd
c0014cef:	09 d0                	or     eax,edx
c0014cf1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014cf7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014cfe:	e8 02 fb ff ff       	call   c0014805 <cpuidCheckEDX(unsigned int)>
c0014d03:	83 e0 01             	and    eax,0x1
c0014d06:	c1 e0 06             	shl    eax,0x6
c0014d09:	88 c2                	mov    dl,al
c0014d0b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d11:	83 e0 bf             	and    eax,0xffffffbf
c0014d14:	09 d0                	or     eax,edx
c0014d16:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d1c:	58                   	pop    eax
c0014d1d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d21:	56                   	push   esi
c0014d22:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d26:	55                   	push   ebp
c0014d27:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d2b:	50                   	push   eax
c0014d2c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d30:	52                   	push   edx
c0014d31:	6a 00                	push   0x0
c0014d33:	e8 4a fa ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d38:	83 c4 1c             	add    esp,0x1c
c0014d3b:	6a 04                	push   0x4
c0014d3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d41:	50                   	push   eax
c0014d42:	57                   	push   edi
c0014d43:	e8 45 b9 fe ff       	call   c000068d <memcpy>
c0014d48:	83 c4 0c             	add    esp,0xc
c0014d4b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d51:	6a 04                	push   0x4
c0014d53:	56                   	push   esi
c0014d54:	50                   	push   eax
c0014d55:	e8 33 b9 fe ff       	call   c000068d <memcpy>
c0014d5a:	83 c4 0c             	add    esp,0xc
c0014d5d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d63:	6a 04                	push   0x4
c0014d65:	55                   	push   ebp
c0014d66:	50                   	push   eax
c0014d67:	e8 21 b9 fe ff       	call   c000068d <memcpy>
c0014d6c:	58                   	pop    eax
c0014d6d:	5a                   	pop    edx
c0014d6e:	68 ed 25 02 c0       	push   0xc00225ed
c0014d73:	57                   	push   edi
c0014d74:	e8 3a ba fe ff       	call   c00007b3 <strcmp>
c0014d79:	83 c4 10             	add    esp,0x10
c0014d7c:	85 c0                	test   eax,eax
c0014d7e:	75 0f                	jne    c0014d8f <CPU::detectFeatures()+0x1b5>
c0014d80:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014d8a:	e9 22 02 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014d8f:	50                   	push   eax
c0014d90:	50                   	push   eax
c0014d91:	68 fa 25 02 c0       	push   0xc00225fa
c0014d96:	57                   	push   edi
c0014d97:	e8 17 ba fe ff       	call   c00007b3 <strcmp>
c0014d9c:	83 c4 10             	add    esp,0x10
c0014d9f:	85 c0                	test   eax,eax
c0014da1:	74 dd                	je     c0014d80 <CPU::detectFeatures()+0x1a6>
c0014da3:	51                   	push   ecx
c0014da4:	51                   	push   ecx
c0014da5:	68 07 26 02 c0       	push   0xc0022607
c0014daa:	57                   	push   edi
c0014dab:	e8 03 ba fe ff       	call   c00007b3 <strcmp>
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	85 c0                	test   eax,eax
c0014db5:	74 2a                	je     c0014de1 <CPU::detectFeatures()+0x207>
c0014db7:	52                   	push   edx
c0014db8:	52                   	push   edx
c0014db9:	68 14 26 02 c0       	push   0xc0022614
c0014dbe:	57                   	push   edi
c0014dbf:	e8 ef b9 fe ff       	call   c00007b3 <strcmp>
c0014dc4:	83 c4 10             	add    esp,0x10
c0014dc7:	85 c0                	test   eax,eax
c0014dc9:	74 16                	je     c0014de1 <CPU::detectFeatures()+0x207>
c0014dcb:	50                   	push   eax
c0014dcc:	50                   	push   eax
c0014dcd:	68 21 26 02 c0       	push   0xc0022621
c0014dd2:	57                   	push   edi
c0014dd3:	e8 db b9 fe ff       	call   c00007b3 <strcmp>
c0014dd8:	83 c4 10             	add    esp,0x10
c0014ddb:	85 c0                	test   eax,eax
c0014ddd:	74 48                	je     c0014e27 <CPU::detectFeatures()+0x24d>
c0014ddf:	eb 0f                	jmp    c0014df0 <CPU::detectFeatures()+0x216>
c0014de1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014deb:	e9 c1 01 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014df0:	50                   	push   eax
c0014df1:	50                   	push   eax
c0014df2:	68 2e 26 02 c0       	push   0xc002262e
c0014df7:	57                   	push   edi
c0014df8:	e8 b6 b9 fe ff       	call   c00007b3 <strcmp>
c0014dfd:	83 c4 10             	add    esp,0x10
c0014e00:	85 c0                	test   eax,eax
c0014e02:	74 23                	je     c0014e27 <CPU::detectFeatures()+0x24d>
c0014e04:	50                   	push   eax
c0014e05:	50                   	push   eax
c0014e06:	68 3b 26 02 c0       	push   0xc002263b
c0014e0b:	57                   	push   edi
c0014e0c:	e8 a2 b9 fe ff       	call   c00007b3 <strcmp>
c0014e11:	83 c4 10             	add    esp,0x10
c0014e14:	85 c0                	test   eax,eax
c0014e16:	75 1e                	jne    c0014e36 <CPU::detectFeatures()+0x25c>
c0014e18:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e22:	e9 8a 01 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014e27:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e31:	e9 7b 01 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014e36:	50                   	push   eax
c0014e37:	50                   	push   eax
c0014e38:	68 48 26 02 c0       	push   0xc0022648
c0014e3d:	57                   	push   edi
c0014e3e:	e8 70 b9 fe ff       	call   c00007b3 <strcmp>
c0014e43:	83 c4 10             	add    esp,0x10
c0014e46:	85 c0                	test   eax,eax
c0014e48:	75 0f                	jne    c0014e59 <CPU::detectFeatures()+0x27f>
c0014e4a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e54:	e9 58 01 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014e59:	50                   	push   eax
c0014e5a:	50                   	push   eax
c0014e5b:	68 07 26 02 c0       	push   0xc0022607
c0014e60:	57                   	push   edi
c0014e61:	e8 4d b9 fe ff       	call   c00007b3 <strcmp>
c0014e66:	83 c4 10             	add    esp,0x10
c0014e69:	85 c0                	test   eax,eax
c0014e6b:	75 0f                	jne    c0014e7c <CPU::detectFeatures()+0x2a2>
c0014e6d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e77:	e9 35 01 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014e7c:	50                   	push   eax
c0014e7d:	50                   	push   eax
c0014e7e:	68 55 26 02 c0       	push   0xc0022655
c0014e83:	57                   	push   edi
c0014e84:	e8 2a b9 fe ff       	call   c00007b3 <strcmp>
c0014e89:	83 c4 10             	add    esp,0x10
c0014e8c:	85 c0                	test   eax,eax
c0014e8e:	75 0f                	jne    c0014e9f <CPU::detectFeatures()+0x2c5>
c0014e90:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014e9a:	e9 12 01 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014e9f:	51                   	push   ecx
c0014ea0:	51                   	push   ecx
c0014ea1:	68 62 26 02 c0       	push   0xc0022662
c0014ea6:	57                   	push   edi
c0014ea7:	e8 07 b9 fe ff       	call   c00007b3 <strcmp>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	85 c0                	test   eax,eax
c0014eb1:	75 0f                	jne    c0014ec2 <CPU::detectFeatures()+0x2e8>
c0014eb3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ebd:	e9 ef 00 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014ec2:	52                   	push   edx
c0014ec3:	52                   	push   edx
c0014ec4:	68 6f 26 02 c0       	push   0xc002266f
c0014ec9:	57                   	push   edi
c0014eca:	e8 e4 b8 fe ff       	call   c00007b3 <strcmp>
c0014ecf:	83 c4 10             	add    esp,0x10
c0014ed2:	85 c0                	test   eax,eax
c0014ed4:	75 0f                	jne    c0014ee5 <CPU::detectFeatures()+0x30b>
c0014ed6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014ee0:	e9 cc 00 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014ee5:	50                   	push   eax
c0014ee6:	50                   	push   eax
c0014ee7:	68 7c 26 02 c0       	push   0xc002267c
c0014eec:	57                   	push   edi
c0014eed:	e8 c1 b8 fe ff       	call   c00007b3 <strcmp>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	85 c0                	test   eax,eax
c0014ef7:	75 0f                	jne    c0014f08 <CPU::detectFeatures()+0x32e>
c0014ef9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f03:	e9 a9 00 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014f08:	50                   	push   eax
c0014f09:	50                   	push   eax
c0014f0a:	68 89 26 02 c0       	push   0xc0022689
c0014f0f:	57                   	push   edi
c0014f10:	e8 9e b8 fe ff       	call   c00007b3 <strcmp>
c0014f15:	83 c4 10             	add    esp,0x10
c0014f18:	85 c0                	test   eax,eax
c0014f1a:	75 0f                	jne    c0014f2b <CPU::detectFeatures()+0x351>
c0014f1c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f26:	e9 86 00 00 00       	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014f2b:	50                   	push   eax
c0014f2c:	50                   	push   eax
c0014f2d:	68 96 26 02 c0       	push   0xc0022696
c0014f32:	57                   	push   edi
c0014f33:	e8 7b b8 fe ff       	call   c00007b3 <strcmp>
c0014f38:	83 c4 10             	add    esp,0x10
c0014f3b:	85 c0                	test   eax,eax
c0014f3d:	75 0c                	jne    c0014f4b <CPU::detectFeatures()+0x371>
c0014f3f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f49:	eb 66                	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014f4b:	50                   	push   eax
c0014f4c:	50                   	push   eax
c0014f4d:	68 a3 26 02 c0       	push   0xc00226a3
c0014f52:	57                   	push   edi
c0014f53:	e8 5b b8 fe ff       	call   c00007b3 <strcmp>
c0014f58:	83 c4 10             	add    esp,0x10
c0014f5b:	85 c0                	test   eax,eax
c0014f5d:	75 0c                	jne    c0014f6b <CPU::detectFeatures()+0x391>
c0014f5f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f69:	eb 46                	jmp    c0014fb1 <CPU::detectFeatures()+0x3d7>
c0014f6b:	50                   	push   eax
c0014f6c:	50                   	push   eax
c0014f6d:	68 b0 26 02 c0       	push   0xc00226b0
c0014f72:	57                   	push   edi
c0014f73:	e8 3b b8 fe ff       	call   c00007b3 <strcmp>
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	85 c0                	test   eax,eax
c0014f7d:	74 e0                	je     c0014f5f <CPU::detectFeatures()+0x385>
c0014f7f:	50                   	push   eax
c0014f80:	50                   	push   eax
c0014f81:	68 bd 26 02 c0       	push   0xc00226bd
c0014f86:	57                   	push   edi
c0014f87:	e8 27 b8 fe ff       	call   c00007b3 <strcmp>
c0014f8c:	83 c4 10             	add    esp,0x10
c0014f8f:	85 c0                	test   eax,eax
c0014f91:	74 cc                	je     c0014f5f <CPU::detectFeatures()+0x385>
c0014f93:	51                   	push   ecx
c0014f94:	51                   	push   ecx
c0014f95:	68 ca 26 02 c0       	push   0xc00226ca
c0014f9a:	57                   	push   edi
c0014f9b:	e8 13 b8 fe ff       	call   c00007b3 <strcmp>
c0014fa0:	83 c4 10             	add    esp,0x10
c0014fa3:	85 c0                	test   eax,eax
c0014fa5:	74 b8                	je     c0014f5f <CPU::detectFeatures()+0x385>
c0014fa7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fb1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fb6:	0f 86 be 00 00 00    	jbe    c001507a <CPU::detectFeatures()+0x4a0>
c0014fbc:	83 ec 0c             	sub    esp,0xc
c0014fbf:	68 80 00 00 00       	push   0x80
c0014fc4:	e8 96 f8 ff ff       	call   c001485f <cpuidCheckExtendedEBX(unsigned int)>
c0014fc9:	83 e0 01             	and    eax,0x1
c0014fcc:	c1 e0 06             	shl    eax,0x6
c0014fcf:	88 c2                	mov    dl,al
c0014fd1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014fd7:	83 e0 bf             	and    eax,0xffffffbf
c0014fda:	09 d0                	or     eax,edx
c0014fdc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014fe2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014fe9:	e8 71 f8 ff ff       	call   c001485f <cpuidCheckExtendedEBX(unsigned int)>
c0014fee:	83 e0 01             	and    eax,0x1
c0014ff1:	c1 e0 04             	shl    eax,0x4
c0014ff4:	88 c2                	mov    dl,al
c0014ff6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014ffc:	83 e0 ef             	and    eax,0xffffffef
c0014fff:	09 d0                	or     eax,edx
c0015001:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015007:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001500e:	e8 4c f8 ff ff       	call   c001485f <cpuidCheckExtendedEBX(unsigned int)>
c0015013:	c1 e0 07             	shl    eax,0x7
c0015016:	88 c2                	mov    dl,al
c0015018:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001501e:	83 e0 7f             	and    eax,0x7f
c0015021:	09 d0                	or     eax,edx
c0015023:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015029:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015030:	e8 57 f8 ff ff       	call   c001488c <cpuidCheckExtendedECX(unsigned int)>
c0015035:	83 e0 01             	and    eax,0x1
c0015038:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001503f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015045:	83 e0 f7             	and    eax,0xfffffff7
c0015048:	09 d0                	or     eax,edx
c001504a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015050:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0015057:	e8 30 f8 ff ff       	call   c001488c <cpuidCheckExtendedECX(unsigned int)>
c001505c:	83 c4 10             	add    esp,0x10
c001505f:	83 e0 01             	and    eax,0x1
c0015062:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015069:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001506f:	83 e0 fb             	and    eax,0xfffffffb
c0015072:	09 d0                	or     eax,edx
c0015074:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001507a:	83 ec 0c             	sub    esp,0xc
c001507d:	56                   	push   esi
c001507e:	55                   	push   ebp
c001507f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0015083:	57                   	push   edi
c0015084:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015088:	50                   	push   eax
c0015089:	6a 01                	push   0x1
c001508b:	e8 f2 f6 ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015094:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001509a:	88 c1                	mov    cl,al
c001509c:	83 e2 f0             	and    edx,0xfffffff0
c001509f:	83 e1 0f             	and    ecx,0xf
c00150a2:	09 ca                	or     edx,ecx
c00150a4:	88 c1                	mov    cl,al
c00150a6:	c0 e9 04             	shr    cl,0x4
c00150a9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150af:	0f b6 d1             	movzx  edx,cl
c00150b2:	c1 e2 06             	shl    edx,0x6
c00150b5:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150b9:	89 d5                	mov    ebp,edx
c00150bb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150c1:	66 81 e2 3f c0       	and    dx,0xc03f
c00150c6:	83 c4 20             	add    esp,0x20
c00150c9:	09 ea                	or     edx,ebp
c00150cb:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150d2:	89 c2                	mov    edx,eax
c00150d4:	c1 ea 08             	shr    edx,0x8
c00150d7:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00150dd:	83 e2 0f             	and    edx,0xf
c00150e0:	83 e1 3f             	and    ecx,0x3f
c00150e3:	89 d5                	mov    ebp,edx
c00150e5:	c1 e5 06             	shl    ebp,0x6
c00150e8:	09 cd                	or     ebp,ecx
c00150ea:	89 e9                	mov    ecx,ebp
c00150ec:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00150f2:	88 d1                	mov    cl,dl
c00150f4:	c0 e9 02             	shr    cl,0x2
c00150f7:	89 cd                	mov    ebp,ecx
c00150f9:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00150ff:	83 e1 c0             	and    ecx,0xffffffc0
c0015102:	09 cd                	or     ebp,ecx
c0015104:	89 e9                	mov    ecx,ebp
c0015106:	89 c5                	mov    ebp,eax
c0015108:	c1 ed 0c             	shr    ebp,0xc
c001510b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015111:	83 e5 03             	and    ebp,0x3
c0015114:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001511a:	c1 e5 04             	shl    ebp,0x4
c001511d:	83 e1 cf             	and    ecx,0xffffffcf
c0015120:	09 cd                	or     ebp,ecx
c0015122:	80 fa 06             	cmp    dl,0x6
c0015125:	89 e9                	mov    ecx,ebp
c0015127:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001512d:	74 05                	je     c0015134 <CPU::detectFeatures()+0x55a>
c001512f:	80 fa 0f             	cmp    dl,0xf
c0015132:	75 5d                	jne    c0015191 <CPU::detectFeatures()+0x5b7>
c0015134:	89 c5                	mov    ebp,eax
c0015136:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001513a:	c1 ed 10             	shr    ebp,0x10
c001513d:	c1 e5 04             	shl    ebp,0x4
c0015140:	09 e9                	or     ecx,ebp
c0015142:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015148:	0f b6 c9             	movzx  ecx,cl
c001514b:	c1 e1 06             	shl    ecx,0x6
c001514e:	66 81 e5 3f c0       	and    bp,0xc03f
c0015153:	09 e9                	or     ecx,ebp
c0015155:	80 fa 0f             	cmp    dl,0xf
c0015158:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001515f:	75 30                	jne    c0015191 <CPU::detectFeatures()+0x5b7>
c0015161:	c1 e8 14             	shr    eax,0x14
c0015164:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001516a:	83 c0 0f             	add    eax,0xf
c001516d:	83 e2 3f             	and    edx,0x3f
c0015170:	88 c1                	mov    cl,al
c0015172:	c1 e1 06             	shl    ecx,0x6
c0015175:	c0 e8 02             	shr    al,0x2
c0015178:	09 ca                	or     edx,ecx
c001517a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0015180:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0015186:	83 e2 c0             	and    edx,0xffffffc0
c0015189:	09 d0                	or     eax,edx
c001518b:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0015191:	83 ec 0c             	sub    esp,0xc
c0015194:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001519b:	56                   	push   esi
c001519c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151a0:	50                   	push   eax
c00151a1:	57                   	push   edi
c00151a2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151a6:	55                   	push   ebp
c00151a7:	68 00 00 00 80       	push   0x80000000
c00151ac:	e8 d1 f5 ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151b1:	83 c4 20             	add    esp,0x20
c00151b4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151c0:	76 1e                	jbe    c00151e0 <CPU::detectFeatures()+0x606>
c00151c2:	83 ec 0c             	sub    esp,0xc
c00151c5:	56                   	push   esi
c00151c6:	50                   	push   eax
c00151c7:	57                   	push   edi
c00151c8:	55                   	push   ebp
c00151c9:	68 01 00 00 80       	push   0x80000001
c00151ce:	e8 af f5 ff ff       	call   c0014782 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151d3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00151dd:	83 c4 20             	add    esp,0x20
c00151e0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00151e6:	83 f8 01             	cmp    eax,0x1
c00151e9:	75 6f                	jne    c001525a <CPU::detectFeatures()+0x680>
c00151eb:	51                   	push   ecx
c00151ec:	51                   	push   ecx
c00151ed:	68 d6 26 02 c0       	push   0xc00226d6
c00151f2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00151f6:	56                   	push   esi
c00151f7:	e8 66 b5 fe ff       	call   c0000762 <strcpy>
c00151fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015202:	5f                   	pop    edi
c0015203:	66 c1 e8 06          	shr    ax,0x6
c0015207:	5d                   	pop    ebp
c0015208:	0f b6 c0             	movzx  eax,al
c001520b:	50                   	push   eax
c001520c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015212:	c1 e8 0e             	shr    eax,0xe
c0015215:	0f b6 c0             	movzx  eax,al
c0015218:	50                   	push   eax
c0015219:	e8 04 f2 ff ff       	call   c0014422 <lookupIntelCPUName(unsigned char, unsigned char)>
c001521e:	5a                   	pop    edx
c001521f:	59                   	pop    ecx
c0015220:	50                   	push   eax
c0015221:	56                   	push   esi
c0015222:	e8 f2 b5 fe ff       	call   c0000819 <strcat>
c0015227:	5f                   	pop    edi
c0015228:	5d                   	pop    ebp
c0015229:	56                   	push   esi
c001522a:	53                   	push   ebx
c001522b:	e8 da b5 ff ff       	call   c001080a <Device::setName(char const*)>
c0015230:	58                   	pop    eax
c0015231:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015237:	5a                   	pop    edx
c0015238:	68 dd 26 02 c0       	push   0xc00226dd
c001523d:	50                   	push   eax
c001523e:	e8 70 b5 fe ff       	call   c00007b3 <strcmp>
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	85 c0                	test   eax,eax
c0015248:	0f 85 53 03 00 00    	jne    c00155a1 <CPU::detectFeatures()+0x9c7>
c001524e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015255:	e9 47 03 00 00       	jmp    c00155a1 <CPU::detectFeatures()+0x9c7>
c001525a:	83 f8 02             	cmp    eax,0x2
c001525d:	0f 85 b5 00 00 00    	jne    c0015318 <CPU::detectFeatures()+0x73e>
c0015263:	57                   	push   edi
c0015264:	57                   	push   edi
c0015265:	68 ef 26 02 c0       	push   0xc00226ef
c001526a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001526e:	56                   	push   esi
c001526f:	e8 ee b4 fe ff       	call   c0000762 <strcpy>
c0015274:	5d                   	pop    ebp
c0015275:	58                   	pop    eax
c0015276:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001527c:	66 c1 e8 06          	shr    ax,0x6
c0015280:	0f b6 c0             	movzx  eax,al
c0015283:	50                   	push   eax
c0015284:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001528a:	c1 e8 0e             	shr    eax,0xe
c001528d:	0f b6 c0             	movzx  eax,al
c0015290:	50                   	push   eax
c0015291:	e8 e7 ef ff ff       	call   c001427d <lookupAMDCPUName(unsigned char, unsigned char)>
c0015296:	5a                   	pop    edx
c0015297:	59                   	pop    ecx
c0015298:	50                   	push   eax
c0015299:	56                   	push   esi
c001529a:	e8 7a b5 fe ff       	call   c0000819 <strcat>
c001529f:	5f                   	pop    edi
c00152a0:	5d                   	pop    ebp
c00152a1:	56                   	push   esi
c00152a2:	53                   	push   ebx
c00152a3:	e8 62 b5 ff ff       	call   c001080a <Device::setName(char const*)>
c00152a8:	58                   	pop    eax
c00152a9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152af:	5a                   	pop    edx
c00152b0:	68 f4 26 02 c0       	push   0xc00226f4
c00152b5:	50                   	push   eax
c00152b6:	e8 f8 b4 fe ff       	call   c00007b3 <strcmp>
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	85 c0                	test   eax,eax
c00152c0:	75 20                	jne    c00152e2 <CPU::detectFeatures()+0x708>
c00152c2:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c00152c8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152ce:	a8 01                	test   al,0x1
c00152d0:	74 10                	je     c00152e2 <CPU::detectFeatures()+0x708>
c00152d2:	83 e0 fe             	and    eax,0xfffffffe
c00152d5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152db:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00152e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152e8:	c1 e8 0e             	shr    eax,0xe
c00152eb:	3c 05                	cmp    al,0x5
c00152ed:	0f 85 ae 02 00 00    	jne    c00155a1 <CPU::detectFeatures()+0x9c7>
c00152f3:	56                   	push   esi
c00152f4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00152fa:	83 e0 0f             	and    eax,0xf
c00152fd:	50                   	push   eax
c00152fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015304:	66 c1 e8 06          	shr    ax,0x6
c0015308:	0f b6 c0             	movzx  eax,al
c001530b:	50                   	push   eax
c001530c:	6a 05                	push   0x5
c001530e:	e8 fc f3 ff ff       	call   c001470f <AMD_K6_writeback(int, int, int)>
c0015313:	e9 ff 01 00 00       	jmp    c0015517 <CPU::detectFeatures()+0x93d>
c0015318:	89 c1                	mov    ecx,eax
c001531a:	83 e1 fd             	and    ecx,0xfffffffd
c001531d:	83 f9 04             	cmp    ecx,0x4
c0015320:	74 09                	je     c001532b <CPU::detectFeatures()+0x751>
c0015322:	83 f8 03             	cmp    eax,0x3
c0015325:	0f 85 6f 01 00 00    	jne    c001549a <CPU::detectFeatures()+0x8c0>
c001532b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015331:	c1 ea 0e             	shr    edx,0xe
c0015334:	80 fa 05             	cmp    dl,0x5
c0015337:	75 62                	jne    c001539b <CPU::detectFeatures()+0x7c1>
c0015339:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001533f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015344:	66 81 fa 00 01       	cmp    dx,0x100
c0015349:	75 0c                	jne    c0015357 <CPU::detectFeatures()+0x77d>
c001534b:	51                   	push   ecx
c001534c:	51                   	push   ecx
c001534d:	68 fb 26 02 c0       	push   0xc00226fb
c0015352:	e9 ba 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c0015357:	66 81 fa 00 02       	cmp    dx,0x200
c001535c:	75 0c                	jne    c001536a <CPU::detectFeatures()+0x790>
c001535e:	52                   	push   edx
c001535f:	52                   	push   edx
c0015360:	68 0e 27 02 c0       	push   0xc002270e
c0015365:	e9 a7 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c001536a:	66 81 fa 40 02       	cmp    dx,0x240
c001536f:	75 0c                	jne    c001537d <CPU::detectFeatures()+0x7a3>
c0015371:	50                   	push   eax
c0015372:	50                   	push   eax
c0015373:	68 20 27 02 c0       	push   0xc0022720
c0015378:	e9 94 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c001537d:	83 f8 06             	cmp    eax,0x6
c0015380:	0f 84 ee 00 00 00    	je     c0015474 <CPU::detectFeatures()+0x89a>
c0015386:	83 f9 04             	cmp    ecx,0x4
c0015389:	0f 84 f6 00 00 00    	je     c0015485 <CPU::detectFeatures()+0x8ab>
c001538f:	50                   	push   eax
c0015390:	50                   	push   eax
c0015391:	68 46 27 02 c0       	push   0xc0022746
c0015396:	e9 76 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c001539b:	80 fa 06             	cmp    dl,0x6
c001539e:	0f 85 cb 00 00 00    	jne    c001546f <CPU::detectFeatures()+0x895>
c00153a4:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153aa:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153af:	66 81 fa 80 01       	cmp    dx,0x180
c00153b4:	75 0c                	jne    c00153c2 <CPU::detectFeatures()+0x7e8>
c00153b6:	50                   	push   eax
c00153b7:	50                   	push   eax
c00153b8:	68 51 27 02 c0       	push   0xc0022751
c00153bd:	e9 4f 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00153c2:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153c7:	74 07                	je     c00153d0 <CPU::detectFeatures()+0x7f6>
c00153c9:	66 81 fa 00 02       	cmp    dx,0x200
c00153ce:	75 0c                	jne    c00153dc <CPU::detectFeatures()+0x802>
c00153d0:	50                   	push   eax
c00153d1:	50                   	push   eax
c00153d2:	68 61 27 02 c0       	push   0xc0022761
c00153d7:	e9 35 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00153dc:	66 81 fa 40 02       	cmp    dx,0x240
c00153e1:	75 0c                	jne    c00153ef <CPU::detectFeatures()+0x815>
c00153e3:	50                   	push   eax
c00153e4:	50                   	push   eax
c00153e5:	68 68 27 02 c0       	push   0xc0022768
c00153ea:	e9 22 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00153ef:	66 81 fa 80 02       	cmp    dx,0x280
c00153f4:	74 07                	je     c00153fd <CPU::detectFeatures()+0x823>
c00153f6:	66 81 fa 40 03       	cmp    dx,0x340
c00153fb:	75 0c                	jne    c0015409 <CPU::detectFeatures()+0x82f>
c00153fd:	50                   	push   eax
c00153fe:	50                   	push   eax
c00153ff:	68 71 27 02 c0       	push   0xc0022771
c0015404:	e9 08 01 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c0015409:	66 81 fa c0 03       	cmp    dx,0x3c0
c001540e:	75 0c                	jne    c001541c <CPU::detectFeatures()+0x842>
c0015410:	55                   	push   ebp
c0015411:	55                   	push   ebp
c0015412:	68 78 27 02 c0       	push   0xc0022778
c0015417:	e9 f5 00 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c001541c:	83 f8 06             	cmp    eax,0x6
c001541f:	74 53                	je     c0015474 <CPU::detectFeatures()+0x89a>
c0015421:	83 f9 04             	cmp    ecx,0x4
c0015424:	74 5f                	je     c0015485 <CPU::detectFeatures()+0x8ab>
c0015426:	57                   	push   edi
c0015427:	57                   	push   edi
c0015428:	68 81 27 02 c0       	push   0xc0022781
c001542d:	53                   	push   ebx
c001542e:	e8 d7 b3 ff ff       	call   c001080a <Device::setName(char const*)>
c0015433:	b1 c1                	mov    cl,0xc1
c0015435:	88 c8                	mov    al,cl
c0015437:	e6 22                	out    0x22,al
c0015439:	e4 23                	in     al,0x23
c001543b:	88 c2                	mov    dl,al
c001543d:	88 c8                	mov    al,cl
c001543f:	e6 22                	out    0x22,al
c0015441:	88 d0                	mov    al,dl
c0015443:	83 c8 10             	or     eax,0x10
c0015446:	e6 23                	out    0x23,al
c0015448:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001544f:	89 d0                	mov    eax,edx
c0015451:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015454:	40                   	inc    eax
c0015455:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001545b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001545f:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015465:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001546a:	e9 a8 00 00 00       	jmp    c0015517 <CPU::detectFeatures()+0x93d>
c001546f:	83 f8 06             	cmp    eax,0x6
c0015472:	75 0c                	jne    c0015480 <CPU::detectFeatures()+0x8a6>
c0015474:	56                   	push   esi
c0015475:	56                   	push   esi
c0015476:	68 32 27 02 c0       	push   0xc0022732
c001547b:	e9 91 00 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c0015480:	83 f9 04             	cmp    ecx,0x4
c0015483:	75 0c                	jne    c0015491 <CPU::detectFeatures()+0x8b7>
c0015485:	51                   	push   ecx
c0015486:	51                   	push   ecx
c0015487:	68 3e 27 02 c0       	push   0xc002273e
c001548c:	e9 80 00 00 00       	jmp    c0015511 <CPU::detectFeatures()+0x937>
c0015491:	52                   	push   edx
c0015492:	52                   	push   edx
c0015493:	68 8c 27 02 c0       	push   0xc002278c
c0015498:	eb 77                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c001549a:	83 f8 07             	cmp    eax,0x7
c001549d:	75 09                	jne    c00154a8 <CPU::detectFeatures()+0x8ce>
c001549f:	50                   	push   eax
c00154a0:	50                   	push   eax
c00154a1:	68 96 27 02 c0       	push   0xc0022796
c00154a6:	eb 69                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154a8:	83 f8 0a             	cmp    eax,0xa
c00154ab:	75 09                	jne    c00154b6 <CPU::detectFeatures()+0x8dc>
c00154ad:	50                   	push   eax
c00154ae:	50                   	push   eax
c00154af:	68 a1 27 02 c0       	push   0xc00227a1
c00154b4:	eb 5b                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154b6:	83 f8 0b             	cmp    eax,0xb
c00154b9:	75 09                	jne    c00154c4 <CPU::detectFeatures()+0x8ea>
c00154bb:	50                   	push   eax
c00154bc:	50                   	push   eax
c00154bd:	68 a9 27 02 c0       	push   0xc00227a9
c00154c2:	eb 4d                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154c4:	83 f8 08             	cmp    eax,0x8
c00154c7:	75 09                	jne    c00154d2 <CPU::detectFeatures()+0x8f8>
c00154c9:	50                   	push   eax
c00154ca:	50                   	push   eax
c00154cb:	68 b2 27 02 c0       	push   0xc00227b2
c00154d0:	eb 3f                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154d2:	83 f8 09             	cmp    eax,0x9
c00154d5:	75 09                	jne    c00154e0 <CPU::detectFeatures()+0x906>
c00154d7:	50                   	push   eax
c00154d8:	50                   	push   eax
c00154d9:	68 ba 27 02 c0       	push   0xc00227ba
c00154de:	eb 31                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154e0:	83 f8 05             	cmp    eax,0x5
c00154e3:	75 09                	jne    c00154ee <CPU::detectFeatures()+0x914>
c00154e5:	50                   	push   eax
c00154e6:	50                   	push   eax
c00154e7:	68 c2 27 02 c0       	push   0xc00227c2
c00154ec:	eb 23                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154ee:	83 f8 0c             	cmp    eax,0xc
c00154f1:	75 09                	jne    c00154fc <CPU::detectFeatures()+0x922>
c00154f3:	55                   	push   ebp
c00154f4:	55                   	push   ebp
c00154f5:	68 d0 27 02 c0       	push   0xc00227d0
c00154fa:	eb 15                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c00154fc:	83 f8 0d             	cmp    eax,0xd
c00154ff:	75 09                	jne    c001550a <CPU::detectFeatures()+0x930>
c0015501:	57                   	push   edi
c0015502:	57                   	push   edi
c0015503:	68 db 27 02 c0       	push   0xc00227db
c0015508:	eb 07                	jmp    c0015511 <CPU::detectFeatures()+0x937>
c001550a:	56                   	push   esi
c001550b:	56                   	push   esi
c001550c:	68 ef 27 02 c0       	push   0xc00227ef
c0015511:	53                   	push   ebx
c0015512:	e8 f3 b2 ff ff       	call   c001080a <Device::setName(char const*)>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	e9 82 00 00 00       	jmp    c00155a1 <CPU::detectFeatures()+0x9c7>
c001551f:	51                   	push   ecx
c0015520:	51                   	push   ecx
c0015521:	68 3b 26 02 c0       	push   0xc002263b
c0015526:	57                   	push   edi
c0015527:	e8 36 b2 fe ff       	call   c0000762 <strcpy>
c001552c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015536:	e8 ff ac fe ff       	call   c000023a <is486>
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	85 c0                	test   eax,eax
c0015540:	74 2d                	je     c001556f <CPU::detectFeatures()+0x995>
c0015542:	52                   	push   edx
c0015543:	52                   	push   edx
c0015544:	68 fb 27 02 c0       	push   0xc00227fb
c0015549:	53                   	push   ebx
c001554a:	e8 bb b2 ff ff       	call   c001080a <Device::setName(char const*)>
c001554f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015556:	e8 dd a5 00 00       	call   c001fb38 <CPU::readCR0()>
c001555b:	83 c4 10             	add    esp,0x10
c001555e:	83 e0 14             	and    eax,0x14
c0015561:	83 f8 04             	cmp    eax,0x4
c0015564:	75 1f                	jne    c0015585 <CPU::detectFeatures()+0x9ab>
c0015566:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001556d:	eb 32                	jmp    c00155a1 <CPU::detectFeatures()+0x9c7>
c001556f:	50                   	push   eax
c0015570:	50                   	push   eax
c0015571:	68 06 28 02 c0       	push   0xc0022806
c0015576:	53                   	push   ebx
c0015577:	e8 8e b2 ff ff       	call   c001080a <Device::setName(char const*)>
c001557c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015583:	eb d1                	jmp    c0015556 <CPU::detectFeatures()+0x97c>
c0015585:	e8 8b ac fe ff       	call   c0000215 <hasLegacyFPU>
c001558a:	83 e0 01             	and    eax,0x1
c001558d:	8d 14 00             	lea    edx,[eax+eax*1]
c0015590:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015596:	83 e0 fd             	and    eax,0xfffffffd
c0015599:	09 d0                	or     eax,edx
c001559b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155a1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155a8:	83 c4 4c             	add    esp,0x4c
c00155ab:	5b                   	pop    ebx
c00155ac:	5e                   	pop    esi
c00155ad:	5f                   	pop    edi
c00155ae:	5d                   	pop    ebp
c00155af:	c3                   	ret    

c00155b0 <CPU::setupSMEP()>:
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	e8 4a a8 00 00       	call   c001fe02 <CPU::readCR4()>
c00155b8:	0d 00 00 10 00       	or     eax,0x100000
c00155bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155c1:	83 c4 0c             	add    esp,0xc
c00155c4:	e9 54 a8 00 00       	jmp    c001fe1d <CPU::writeCR4(unsigned long)>
c00155c9:	90                   	nop

c00155ca <CPU::setupUMIP()>:
c00155ca:	83 ec 0c             	sub    esp,0xc
c00155cd:	e8 30 a8 00 00       	call   c001fe02 <CPU::readCR4()>
c00155d2:	80 cc 08             	or     ah,0x8
c00155d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155d9:	83 c4 0c             	add    esp,0xc
c00155dc:	e9 3c a8 00 00       	jmp    c001fe1d <CPU::writeCR4(unsigned long)>
c00155e1:	90                   	nop

c00155e2 <CPU::setupTSC()>:
c00155e2:	83 ec 0c             	sub    esp,0xc
c00155e5:	e8 18 a8 00 00       	call   c001fe02 <CPU::readCR4()>
c00155ea:	83 c8 04             	or     eax,0x4
c00155ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155f1:	83 c4 0c             	add    esp,0xc
c00155f4:	e9 24 a8 00 00       	jmp    c001fe1d <CPU::writeCR4(unsigned long)>
c00155f9:	90                   	nop

c00155fa <CPU::setupLargePages()>:
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	e8 00 a8 00 00       	call   c001fe02 <CPU::readCR4()>
c0015602:	83 c8 10             	or     eax,0x10
c0015605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015609:	83 c4 0c             	add    esp,0xc
c001560c:	e9 0c a8 00 00       	jmp    c001fe1d <CPU::writeCR4(unsigned long)>
c0015611:	90                   	nop

c0015612 <CPU::setupPAT()>:
c0015612:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0015617:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001561e:	74 2c                	je     c001564c <CPU::setupPAT()+0x3a>
c0015620:	53                   	push   ebx
c0015621:	83 ec 10             	sub    esp,0x10
c0015624:	68 77 02 00 00       	push   0x277
c0015629:	50                   	push   eax
c001562a:	e8 4f 5f ff ff       	call   c000b57e <Computer::rdmsr(unsigned int)>
c001562f:	83 e2 f8             	and    edx,0xfffffff8
c0015632:	83 ca 01             	or     edx,0x1
c0015635:	52                   	push   edx
c0015636:	50                   	push   eax
c0015637:	68 77 02 00 00       	push   0x277
c001563c:	ff 35 68 47 02 c0    	push   DWORD PTR ds:0xc0024768
c0015642:	e8 63 5f ff ff       	call   c000b5aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0015647:	83 c4 28             	add    esp,0x28
c001564a:	5b                   	pop    ebx
c001564b:	c3                   	ret    
c001564c:	c3                   	ret    
c001564d:	90                   	nop

c001564e <CPU::setupMTRR()>:
c001564e:	c3                   	ret    
c001564f:	90                   	nop

c0015650 <CPU::setupGlobalPages()>:
c0015650:	83 ec 0c             	sub    esp,0xc
c0015653:	e8 aa a7 00 00       	call   c001fe02 <CPU::readCR4()>
c0015658:	0c 80                	or     al,0x80
c001565a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001565e:	83 c4 0c             	add    esp,0xc
c0015661:	e9 b7 a7 00 00       	jmp    c001fe1d <CPU::writeCR4(unsigned long)>

c0015666 <CPU::allowUsermodeDataAccess()>:
c0015666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001566a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015671:	74 03                	je     c0015676 <CPU::allowUsermodeDataAccess()+0x10>
c0015673:	0f 01 cb             	stac   
c0015676:	c3                   	ret    
c0015677:	90                   	nop

c0015678 <CPU::prohibitUsermodeDataAccess()>:
c0015678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001567c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015683:	74 03                	je     c0015688 <CPU::prohibitUsermodeDataAccess()+0x10>
c0015685:	0f 01 ca             	clac   
c0015688:	c3                   	ret    
c0015689:	90                   	nop

c001568a <CPU::setupSMAP()>:
c001568a:	53                   	push   ebx
c001568b:	83 ec 08             	sub    esp,0x8
c001568e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015692:	e8 6b a7 00 00       	call   c001fe02 <CPU::readCR4()>
c0015697:	83 ec 0c             	sub    esp,0xc
c001569a:	0d 00 00 20 00       	or     eax,0x200000
c001569f:	50                   	push   eax
c00156a0:	e8 78 a7 00 00       	call   c001fe1d <CPU::writeCR4(unsigned long)>
c00156a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156a9:	83 c4 18             	add    esp,0x18
c00156ac:	5b                   	pop    ebx
c00156ad:	eb c9                	jmp    c0015678 <CPU::prohibitUsermodeDataAccess()>
c00156af:	90                   	nop

c00156b0 <CPU::setupFeatures()>:
c00156b0:	53                   	push   ebx
c00156b1:	83 ec 08             	sub    esp,0x8
c00156b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156b8:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156bf:	74 0c                	je     c00156cd <CPU::setupFeatures()+0x1d>
c00156c1:	83 ec 0c             	sub    esp,0xc
c00156c4:	53                   	push   ebx
c00156c5:	e8 e6 fe ff ff       	call   c00155b0 <CPU::setupSMEP()>
c00156ca:	83 c4 10             	add    esp,0x10
c00156cd:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156d4:	74 0c                	je     c00156e2 <CPU::setupFeatures()+0x32>
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	53                   	push   ebx
c00156da:	e8 ab ff ff ff       	call   c001568a <CPU::setupSMAP()>
c00156df:	83 c4 10             	add    esp,0x10
c00156e2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00156e9:	74 0c                	je     c00156f7 <CPU::setupFeatures()+0x47>
c00156eb:	83 ec 0c             	sub    esp,0xc
c00156ee:	53                   	push   ebx
c00156ef:	e8 d6 fe ff ff       	call   c00155ca <CPU::setupUMIP()>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00156fe:	74 0c                	je     c001570c <CPU::setupFeatures()+0x5c>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	53                   	push   ebx
c0015704:	e8 d9 fe ff ff       	call   c00155e2 <CPU::setupTSC()>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015713:	74 0c                	je     c0015721 <CPU::setupFeatures()+0x71>
c0015715:	83 ec 0c             	sub    esp,0xc
c0015718:	53                   	push   ebx
c0015719:	e8 dc fe ff ff       	call   c00155fa <CPU::setupLargePages()>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015728:	74 0c                	je     c0015736 <CPU::setupFeatures()+0x86>
c001572a:	83 ec 0c             	sub    esp,0xc
c001572d:	53                   	push   ebx
c001572e:	e8 1d ff ff ff       	call   c0015650 <CPU::setupGlobalPages()>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001573d:	74 0d                	je     c001574c <CPU::setupFeatures()+0x9c>
c001573f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015743:	83 c4 08             	add    esp,0x8
c0015746:	5b                   	pop    ebx
c0015747:	e9 c6 fe ff ff       	jmp    c0015612 <CPU::setupPAT()>
c001574c:	83 c4 08             	add    esp,0x8
c001574f:	5b                   	pop    ebx
c0015750:	c3                   	ret    
c0015751:	90                   	nop

c0015752 <CPU::open(int, int, void*)>:
c0015752:	57                   	push   edi
c0015753:	56                   	push   esi
c0015754:	53                   	push   ebx
c0015755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015759:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001575d:	83 ec 0c             	sub    esp,0xc
c0015760:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015766:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001576c:	50                   	push   eax
c001576d:	e8 fc 60 ff ff       	call   c000b86e <GDT::setup()>
c0015772:	83 c4 0c             	add    esp,0xc
c0015775:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001577b:	6a 00                	push   0x0
c001577d:	68 ef be ad de       	push   0xdeadbeef
c0015782:	57                   	push   edi
c0015783:	e8 7c 83 ff ff       	call   c000db04 <TSS::setup(unsigned long, unsigned long)>
c0015788:	89 3c 24             	mov    DWORD PTR [esp],edi
c001578b:	e8 54 83 ff ff       	call   c000dae4 <TSS::flush()>
c0015790:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0015796:	89 04 24             	mov    DWORD PTR [esp],eax
c0015799:	e8 2a 63 ff ff       	call   c000bac8 <IDT::setup()>
c001579e:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157a5:	e8 6a a6 00 00       	call   c001fe14 <CPU::writeDR7(unsigned long)>
c00157aa:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157b4:	e8 fe 6d ff ff       	call   c000c5b7 <Phys::allocatePage()>
c00157b9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157bf:	89 30                	mov    DWORD PTR [eax],esi
c00157c1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157c7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157ca:	58                   	pop    eax
c00157cb:	5a                   	pop    edx
c00157cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157d6:	e8 bd 93 ff ff       	call   c000eb98 <VAS::setCPUSpecific(unsigned long)>
c00157db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157de:	e8 f7 f3 ff ff       	call   c0014bda <CPU::detectFeatures()>
c00157e3:	e8 22 c3 ff ff       	call   c0011b0a <setupInterruptController()>
c00157e8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00157ee:	a1 80 47 02 c0       	mov    eax,ds:0xc0024780
c00157f3:	83 e0 10             	and    eax,0x10
c00157f6:	83 f8 01             	cmp    eax,0x1
c00157f9:	19 c0                	sbb    eax,eax
c00157fb:	83 e0 46             	and    eax,0x46
c00157fe:	83 c0 1e             	add    eax,0x1e
c0015801:	89 04 24             	mov    DWORD PTR [esp],eax
c0015804:	e8 a7 d6 ff ff       	call   c0012eb0 <setupTimer(int)>
c0015809:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001580f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015812:	e8 99 fe ff ff       	call   c00156b0 <CPU::setupFeatures()>
c0015817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001581a:	e8 3f f1 ff ff       	call   c001495e <CPU::displayFeatures()>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	5b                   	pop    ebx
c0015823:	31 c0                	xor    eax,eax
c0015825:	5e                   	pop    esi
c0015826:	5f                   	pop    edi
c0015827:	c3                   	ret    

c0015828 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015828:	56                   	push   esi
c0015829:	53                   	push   ebx
c001582a:	51                   	push   ecx
c001582b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001582f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015833:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015836:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015839:	88 c1                	mov    cl,al
c001583b:	c0 e9 06             	shr    cl,0x6
c001583e:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015841:	88 c1                	mov    cl,al
c0015843:	66 c1 e8 03          	shr    ax,0x3
c0015847:	83 e1 07             	and    ecx,0x7
c001584a:	83 e0 07             	and    eax,0x7
c001584d:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015851:	88 06                	mov    BYTE PTR [esi],al
c0015853:	74 7f                	je     c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015855:	80 f9 04             	cmp    cl,0x4
c0015858:	74 7a                	je     c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001585a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001585e:	75 05                	jne    c0015865 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015860:	80 f9 05             	cmp    cl,0x5
c0015863:	74 6f                	je     c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015865:	84 c9                	test   cl,cl
c0015867:	75 05                	jne    c001586e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015869:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001586c:	eb 3c                	jmp    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001586e:	80 f9 01             	cmp    cl,0x1
c0015871:	75 05                	jne    c0015878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015873:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015876:	eb 32                	jmp    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015878:	80 f9 02             	cmp    cl,0x2
c001587b:	75 05                	jne    c0015882 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c001587d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015880:	eb 28                	jmp    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015882:	31 c0                	xor    eax,eax
c0015884:	80 f9 03             	cmp    cl,0x3
c0015887:	75 05                	jne    c001588e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c0015889:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001588c:	eb 1c                	jmp    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001588e:	80 f9 05             	cmp    cl,0x5
c0015891:	75 05                	jne    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c0015893:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c0015896:	eb 12                	jmp    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015898:	80 f9 06             	cmp    cl,0x6
c001589b:	75 05                	jne    c00158a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c001589d:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158a0:	eb 08                	jmp    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a2:	80 f9 07             	cmp    cl,0x7
c00158a5:	75 03                	jne    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a7:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158aa:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158ae:	75 10                	jne    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158b0:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158b4:	b9 03 00 00 00       	mov    ecx,0x3
c00158b9:	01 d0                	add    eax,edx
c00158bb:	e9 42 01 00 00       	jmp    c0015a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158c0:	b9 02 00 00 00       	mov    ecx,0x2
c00158c5:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158c9:	0f 85 33 01 00 00    	jne    c0015a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158cf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158d2:	eb 18                	jmp    c00158ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158d4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158d8:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00158dd:	80 f9 05             	cmp    cl,0x5
c00158e0:	0f 94 c0             	sete   al
c00158e3:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00158e7:	74 0d                	je     c00158f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00158e9:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00158ec:	b9 06 00 00 00       	mov    ecx,0x6
c00158f1:	e9 0c 01 00 00       	jmp    c0015a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158f6:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c00158fa:	0f 84 06 01 00 00    	je     c0015a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015900:	80 f9 04             	cmp    cl,0x4
c0015903:	0f 85 06 01 00 00    	jne    c0015a0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015909:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c001590c:	89 c6                	mov    esi,eax
c001590e:	88 c1                	mov    cl,al
c0015910:	66 c1 ee 03          	shr    si,0x3
c0015914:	c0 e9 06             	shr    cl,0x6
c0015917:	83 e6 07             	and    esi,0x7
c001591a:	24 07                	and    al,0x7
c001591c:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015920:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015924:	89 f1                	mov    ecx,esi
c0015926:	75 05                	jne    c001592d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015928:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c001592b:	eb 4b                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001592d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015932:	75 05                	jne    c0015939 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015934:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015937:	eb 3f                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015939:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001593e:	75 05                	jne    c0015945 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015940:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015943:	eb 33                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015945:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001594a:	75 05                	jne    c0015951 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c001594c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001594f:	eb 27                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015951:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015956:	75 05                	jne    c001595d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015958:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c001595b:	eb 1b                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001595d:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015962:	75 05                	jne    c0015969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015964:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015967:	eb 0f                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015969:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c001596e:	75 05                	jne    c0015975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015970:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015973:	eb 03                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015975:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015978:	84 c9                	test   cl,cl
c001597a:	75 05                	jne    c0015981 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001597c:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001597f:	eb 3c                	jmp    c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015981:	80 f9 01             	cmp    cl,0x1
c0015984:	75 05                	jne    c001598b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0015986:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015989:	eb 32                	jmp    c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001598b:	80 f9 02             	cmp    cl,0x2
c001598e:	75 05                	jne    c0015995 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0015990:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015993:	eb 28                	jmp    c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015995:	80 f9 03             	cmp    cl,0x3
c0015998:	75 05                	jne    c001599f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c001599a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001599d:	eb 1e                	jmp    c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001599f:	31 c0                	xor    eax,eax
c00159a1:	80 f9 04             	cmp    cl,0x4
c00159a4:	74 17                	je     c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a6:	80 f9 05             	cmp    cl,0x5
c00159a9:	75 05                	jne    c00159b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159ab:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159ae:	eb 0d                	jmp    c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b0:	80 f9 06             	cmp    cl,0x6
c00159b3:	75 05                	jne    c00159ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159b5:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159b8:	eb 03                	jmp    c00159bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ba:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159bd:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159c2:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159c6:	0f 94 c2             	sete   dl
c00159c9:	d3 e0                	shl    eax,cl
c00159cb:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159cf:	74 07                	je     c00159d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159d1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159d4:	31 d2                	xor    edx,edx
c00159d6:	eb 23                	jmp    c00159fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159d8:	01 f0                	add    eax,esi
c00159da:	b9 03 00 00 00       	mov    ecx,0x3
c00159df:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00159e3:	74 33                	je     c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00159e5:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00159e9:	75 0d                	jne    c00159f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00159eb:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00159ef:	01 c8                	add    eax,ecx
c00159f1:	b9 04 00 00 00       	mov    ecx,0x4
c00159f6:	eb 20                	jmp    c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00159f8:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159fb:	b9 07 00 00 00       	mov    ecx,0x7
c0015a00:	eb 16                	jmp    c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a02:	31 d2                	xor    edx,edx
c0015a04:	eb 12                	jmp    c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a06:	b9 02 00 00 00       	mov    ecx,0x2
c0015a0b:	b2 01                	mov    dl,0x1
c0015a0d:	eb 07                	jmp    c0015a16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a0f:	31 d2                	xor    edx,edx
c0015a11:	b9 02 00 00 00       	mov    ecx,0x2
c0015a16:	31 c0                	xor    eax,eax
c0015a18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a1c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a1e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a22:	88 11                	mov    BYTE PTR [ecx],dl
c0015a24:	5a                   	pop    edx
c0015a25:	5b                   	pop    ebx
c0015a26:	5e                   	pop    esi
c0015a27:	c3                   	ret    

c0015a28 <Krnl::panic(char const*)>:
c0015a28:	55                   	push   ebp
c0015a29:	89 e5                	mov    ebp,esp
c0015a2b:	53                   	push   ebx
c0015a2c:	51                   	push   ecx
c0015a2d:	a1 b0 51 02 c0       	mov    eax,ds:0xc00251b0
c0015a32:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a35:	85 c0                	test   eax,eax
c0015a37:	74 02                	je     c0015a3b <Krnl::panic(char const*)+0x13>
c0015a39:	ff d0                	call   eax
c0015a3b:	fa                   	cli    
c0015a3c:	50                   	push   eax
c0015a3d:	c6 05 b4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251b4,0x1
c0015a44:	50                   	push   eax
c0015a45:	c6 05 a0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023ba0,0x0
c0015a4c:	53                   	push   ebx
c0015a4d:	68 40 28 02 c0       	push   0xc0022840
c0015a52:	e8 bc 97 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0015a57:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015a5c:	5a                   	pop    edx
c0015a5d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a63:	51                   	push   ecx
c0015a64:	e8 da 78 ff ff       	call   c000d343 <setActiveTerminal(VgaText*)>
c0015a69:	83 c4 0c             	add    esp,0xc
c0015a6c:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015a71:	6a 01                	push   0x1
c0015a73:	6a 0f                	push   0xf
c0015a75:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a7b:	50                   	push   eax
c0015a7c:	e8 01 73 ff ff       	call   c000cd82 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015a81:	58                   	pop    eax
c0015a82:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015a87:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a8d:	50                   	push   eax
c0015a8e:	e8 53 7b ff ff       	call   c000d5e6 <VgaText::clearScreen()>
c0015a93:	58                   	pop    eax
c0015a94:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015a99:	5a                   	pop    edx
c0015a9a:	68 59 28 02 c0       	push   0xc0022859
c0015a9f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aa5:	51                   	push   ecx
c0015aa6:	e8 b9 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015aab:	58                   	pop    eax
c0015aac:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015ab1:	5a                   	pop    edx
c0015ab2:	68 00 29 02 c0       	push   0xc0022900
c0015ab7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015abd:	51                   	push   ecx
c0015abe:	e8 a1 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015ac3:	58                   	pop    eax
c0015ac4:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015ac9:	5a                   	pop    edx
c0015aca:	68 75 28 02 c0       	push   0xc0022875
c0015acf:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ad5:	51                   	push   ecx
c0015ad6:	e8 89 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015adb:	58                   	pop    eax
c0015adc:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015ae1:	5a                   	pop    edx
c0015ae2:	53                   	push   ebx
c0015ae3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae9:	51                   	push   ecx
c0015aea:	e8 75 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015aef:	5b                   	pop    ebx
c0015af0:	58                   	pop    eax
c0015af1:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015af6:	68 95 28 02 c0       	push   0xc0022895
c0015afb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b01:	50                   	push   eax
c0015b02:	e8 5d 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b07:	58                   	pop    eax
c0015b08:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015b0d:	5a                   	pop    edx
c0015b0e:	68 3c 29 02 c0       	push   0xc002293c
c0015b13:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b19:	51                   	push   ecx
c0015b1a:	e8 45 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b1f:	5b                   	pop    ebx
c0015b20:	58                   	pop    eax
c0015b21:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015b26:	68 75 28 02 c0       	push   0xc0022875
c0015b2b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b31:	50                   	push   eax
c0015b32:	e8 2d 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b37:	58                   	pop    eax
c0015b38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b3d:	5a                   	pop    edx
c0015b3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b41:	83 c0 0c             	add    eax,0xc
c0015b44:	50                   	push   eax
c0015b45:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015b4a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b50:	51                   	push   ecx
c0015b51:	e8 0e 7c ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b56:	5b                   	pop    ebx
c0015b57:	58                   	pop    eax
c0015b58:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015b5d:	68 94 28 02 c0       	push   0xc0022894
c0015b62:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b68:	50                   	push   eax
c0015b69:	e8 f6 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b6e:	58                   	pop    eax
c0015b6f:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015b74:	5a                   	pop    edx
c0015b75:	68 68 29 02 c0       	push   0xc0022968
c0015b7a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b80:	51                   	push   ecx
c0015b81:	e8 de 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b86:	5b                   	pop    ebx
c0015b87:	58                   	pop    eax
c0015b88:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015b8d:	68 a8 29 02 c0       	push   0xc00229a8
c0015b92:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b98:	50                   	push   eax
c0015b99:	e8 c6 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015b9e:	58                   	pop    eax
c0015b9f:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015ba4:	5a                   	pop    edx
c0015ba5:	68 80 28 02 c0       	push   0xc0022880
c0015baa:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bb0:	51                   	push   ecx
c0015bb1:	e8 ae 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015bb6:	5b                   	pop    ebx
c0015bb7:	58                   	pop    eax
c0015bb8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bbb:	50                   	push   eax
c0015bbc:	68 98 28 02 c0       	push   0xc0022898
c0015bc1:	e8 4d 96 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0015bc6:	58                   	pop    eax
c0015bc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bca:	5a                   	pop    edx
c0015bcb:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bce:	51                   	push   ecx
c0015bcf:	68 a1 28 02 c0       	push   0xc00228a1
c0015bd4:	e8 3a 96 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0015bd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bdc:	5b                   	pop    ebx
c0015bdd:	5a                   	pop    edx
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015be3:	51                   	push   ecx
c0015be4:	68 aa 28 02 c0       	push   0xc00228aa
c0015be9:	e8 25 96 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0015bee:	5b                   	pop    ebx
c0015bef:	58                   	pop    eax
c0015bf0:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015bf5:	68 ec 29 02 c0       	push   0xc00229ec
c0015bfa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c00:	50                   	push   eax
c0015c01:	e8 5e 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015c06:	58                   	pop    eax
c0015c07:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015c0c:	5a                   	pop    edx
c0015c0d:	68 b3 28 02 c0       	push   0xc00228b3
c0015c12:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c18:	51                   	push   ecx
c0015c19:	e8 46 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015c1e:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015c23:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c29:	e8 0a 9f 00 00       	call   c001fb38 <CPU::readCR0()>
c0015c2e:	5a                   	pop    edx
c0015c2f:	59                   	pop    ecx
c0015c30:	50                   	push   eax
c0015c31:	53                   	push   ebx
c0015c32:	e8 53 7b ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015c37:	5b                   	pop    ebx
c0015c38:	58                   	pop    eax
c0015c39:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015c3e:	68 bd 28 02 c0       	push   0xc00228bd
c0015c43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c49:	50                   	push   eax
c0015c4a:	e8 15 7b ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015c4f:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015c54:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c5a:	e8 c7 a1 00 00       	call   c001fe26 <CPU::readCR2()>
c0015c5f:	5a                   	pop    edx
c0015c60:	59                   	pop    ecx
c0015c61:	50                   	push   eax
c0015c62:	53                   	push   ebx
c0015c63:	e8 22 7b ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015c68:	5b                   	pop    ebx
c0015c69:	58                   	pop    eax
c0015c6a:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015c6f:	68 c7 28 02 c0       	push   0xc00228c7
c0015c74:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c7a:	50                   	push   eax
c0015c7b:	e8 e4 7a ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015c80:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015c85:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c8b:	e8 35 9b 00 00       	call   c001f7c5 <CPU::readCR3()>
c0015c90:	5a                   	pop    edx
c0015c91:	59                   	pop    ecx
c0015c92:	50                   	push   eax
c0015c93:	53                   	push   ebx
c0015c94:	e8 f1 7a ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015c99:	5b                   	pop    ebx
c0015c9a:	58                   	pop    eax
c0015c9b:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015ca0:	68 da 28 02 c0       	push   0xc00228da
c0015ca5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cab:	50                   	push   eax
c0015cac:	e8 b3 7a ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015cb1:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015cb6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cbc:	e8 41 a1 00 00       	call   c001fe02 <CPU::readCR4()>
c0015cc1:	5a                   	pop    edx
c0015cc2:	59                   	pop    ecx
c0015cc3:	50                   	push   eax
c0015cc4:	53                   	push   ebx
c0015cc5:	e8 c0 7a ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015cca:	5b                   	pop    ebx
c0015ccb:	58                   	pop    eax
c0015ccc:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015cd1:	68 e4 28 02 c0       	push   0xc00228e4
c0015cd6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cdc:	50                   	push   eax
c0015cdd:	e8 82 7a ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015ce2:	5a                   	pop    edx
c0015ce3:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015ce8:	59                   	pop    ecx
c0015ce9:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015cec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cf2:	53                   	push   ebx
c0015cf3:	50                   	push   eax
c0015cf4:	e8 91 7a ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015cf9:	58                   	pop    eax
c0015cfa:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015cff:	5a                   	pop    edx
c0015d00:	68 fb 28 02 c0       	push   0xc00228fb
c0015d05:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d0b:	51                   	push   ecx
c0015d0c:	e8 53 7a ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015d11:	5b                   	pop    ebx
c0015d12:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015d17:	5a                   	pop    edx
c0015d18:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d1b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d21:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d24:	51                   	push   ecx
c0015d25:	50                   	push   eax
c0015d26:	e8 5f 7a ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015d2b:	5b                   	pop    ebx
c0015d2c:	58                   	pop    eax
c0015d2d:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015d32:	68 fb 28 02 c0       	push   0xc00228fb
c0015d37:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d3d:	50                   	push   eax
c0015d3e:	e8 21 7a ff ff       	call   c000d764 <VgaText::puts(char const*)>
c0015d43:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d46:	59                   	pop    ecx
c0015d47:	a1 b4 5b 02 c0       	mov    eax,ds:0xc0025bb4
c0015d4c:	5b                   	pop    ebx
c0015d4d:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d55:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d58:	52                   	push   edx
c0015d59:	50                   	push   eax
c0015d5a:	e8 2b 7a ff ff       	call   c000d78a <VgaText::putx(unsigned int)>
c0015d5f:	83 c4 10             	add    esp,0x10
c0015d62:	b2 fe                	mov    dl,0xfe
c0015d64:	e4 60                	in     al,0x60
c0015d66:	3c 1c                	cmp    al,0x1c
c0015d68:	74 04                	je     c0015d6e <Krnl::panic(char const*)+0x346>
c0015d6a:	3c 5a                	cmp    al,0x5a
c0015d6c:	75 f6                	jne    c0015d64 <Krnl::panic(char const*)+0x33c>
c0015d6e:	e4 64                	in     al,0x64
c0015d70:	a8 02                	test   al,0x2
c0015d72:	75 fa                	jne    c0015d6e <Krnl::panic(char const*)+0x346>
c0015d74:	88 d0                	mov    al,dl
c0015d76:	e6 64                	out    0x64,al
c0015d78:	fa                   	cli    
c0015d79:	f4                   	hlt    
c0015d7a:	eb e8                	jmp    c0015d64 <Krnl::panic(char const*)+0x33c>

c0015d7c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d7c:	55                   	push   ebp
c0015d7d:	57                   	push   edi
c0015d7e:	56                   	push   esi
c0015d7f:	53                   	push   ebx
c0015d80:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015d86:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015d8d:	8d 46 01             	lea    eax,[esi+0x1]
c0015d90:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015d92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d96:	80 fb 40             	cmp    bl,0x40
c0015d99:	75 19                	jne    c0015db4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015d9b:	8a 06                	mov    al,BYTE PTR [esi]
c0015d9d:	84 c0                	test   al,al
c0015d9f:	74 07                	je     c0015da8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015da1:	3c 3a                	cmp    al,0x3a
c0015da3:	74 03                	je     c0015da8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015da5:	46                   	inc    esi
c0015da6:	eb f3                	jmp    c0015d9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015da8:	84 c0                	test   al,al
c0015daa:	0f 84 1f 01 00 00    	je     c0015ecf <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015db0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015db3:	46                   	inc    esi
c0015db4:	50                   	push   eax
c0015db5:	6a 40                	push   0x40
c0015db7:	6a 00                	push   0x0
c0015db9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dbd:	50                   	push   eax
c0015dbe:	e8 00 a9 fe ff       	call   c00006c3 <memset>
c0015dc3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015dca:	31 d2                	xor    edx,edx
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	8a 07                	mov    al,BYTE PTR [edi]
c0015dd1:	84 c0                	test   al,al
c0015dd3:	0f 84 f6 00 00 00    	je     c0015ecf <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dd9:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015ddf:	0f 8f ea 00 00 00    	jg     c0015ecf <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015de5:	3c 0a                	cmp    al,0xa
c0015de7:	0f 85 d3 00 00 00    	jne    c0015ec0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015ded:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015df2:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015df6:	f6 c1 df             	test   cl,0xdf
c0015df9:	0f 94 c2             	sete   dl
c0015dfc:	80 f9 23             	cmp    cl,0x23
c0015dff:	0f 94 c0             	sete   al
c0015e02:	08 c2                	or     dl,al
c0015e04:	75 47                	jne    c0015e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e06:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e09:	3c 01                	cmp    al,0x1
c0015e0b:	76 40                	jbe    c0015e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e0d:	80 f9 5b             	cmp    cl,0x5b
c0015e10:	75 3f                	jne    c0015e51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e12:	80 fb 40             	cmp    bl,0x40
c0015e15:	75 36                	jne    c0015e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e17:	83 ec 0c             	sub    esp,0xc
c0015e1a:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e1e:	55                   	push   ebp
c0015e1f:	e8 bc a8 fe ff       	call   c00006e0 <strlen>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	83 f8 3f             	cmp    eax,0x3f
c0015e2a:	0f 87 9f 00 00 00    	ja     c0015ecf <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e30:	50                   	push   eax
c0015e31:	50                   	push   eax
c0015e32:	55                   	push   ebp
c0015e33:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e37:	55                   	push   ebp
c0015e38:	e8 25 a9 fe ff       	call   c0000762 <strcpy>
c0015e3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e40:	e8 9b a8 fe ff       	call   c00006e0 <strlen>
c0015e45:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e4a:	83 c4 10             	add    esp,0x10
c0015e4d:	31 c9                	xor    ecx,ecx
c0015e4f:	eb 76                	jmp    c0015ec7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e51:	80 fb 40             	cmp    bl,0x40
c0015e54:	74 06                	je     c0015e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e56:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e5a:	eb 19                	jmp    c0015e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e5c:	51                   	push   ecx
c0015e5d:	51                   	push   ecx
c0015e5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e66:	50                   	push   eax
c0015e67:	e8 47 a9 fe ff       	call   c00007b3 <strcmp>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	85 c0                	test   eax,eax
c0015e71:	75 da                	jne    c0015e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e73:	eb e1                	jmp    c0015e56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e75:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e78:	84 c0                	test   al,al
c0015e7a:	0f 94 c1             	sete   cl
c0015e7d:	3c 3d                	cmp    al,0x3d
c0015e7f:	0f 94 c2             	sete   dl
c0015e82:	08 d1                	or     cl,dl
c0015e84:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015e88:	75 03                	jne    c0015e8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015e8a:	45                   	inc    ebp
c0015e8b:	eb e8                	jmp    c0015e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e8d:	84 c0                	test   al,al
c0015e8f:	74 3e                	je     c0015ecf <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e91:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015e95:	52                   	push   edx
c0015e96:	52                   	push   edx
c0015e97:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015e9b:	50                   	push   eax
c0015e9c:	56                   	push   esi
c0015e9d:	e8 11 a9 fe ff       	call   c00007b3 <strcmp>
c0015ea2:	83 c4 10             	add    esp,0x10
c0015ea5:	85 c0                	test   eax,eax
c0015ea7:	75 a4                	jne    c0015e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ea9:	50                   	push   eax
c0015eaa:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ead:	50                   	push   eax
c0015eae:	52                   	push   edx
c0015eaf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015eb6:	e8 a7 a8 fe ff       	call   c0000762 <strcpy>
c0015ebb:	83 c4 10             	add    esp,0x10
c0015ebe:	eb 14                	jmp    c0015ed4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015ec0:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ec3:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015ec7:	47                   	inc    edi
c0015ec8:	89 ca                	mov    edx,ecx
c0015eca:	e9 00 ff ff ff       	jmp    c0015dcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ecf:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015ed4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015ed8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015ede:	5b                   	pop    ebx
c0015edf:	5e                   	pop    esi
c0015ee0:	5f                   	pop    edi
c0015ee1:	5d                   	pop    ebp
c0015ee2:	c3                   	ret    

c0015ee3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015ee3:	57                   	push   edi
c0015ee4:	56                   	push   esi
c0015ee5:	53                   	push   ebx
c0015ee6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015eec:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015ef3:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015efa:	53                   	push   ebx
c0015efb:	e8 e0 a7 fe ff       	call   c00006e0 <strlen>
c0015f00:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f03:	89 c7                	mov    edi,eax
c0015f05:	e8 d6 a7 fe ff       	call   c00006e0 <strlen>
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f11:	31 ff                	xor    edi,edi
c0015f13:	3d ff 00 00 00       	cmp    eax,0xff
c0015f18:	0f 87 18 01 00 00    	ja     c0016036 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f1e:	51                   	push   ecx
c0015f1f:	51                   	push   ecx
c0015f20:	56                   	push   esi
c0015f21:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f25:	56                   	push   esi
c0015f26:	e8 37 a8 fe ff       	call   c0000762 <strcpy>
c0015f2b:	58                   	pop    eax
c0015f2c:	5a                   	pop    edx
c0015f2d:	68 24 2e 02 c0       	push   0xc0022e24
c0015f32:	56                   	push   esi
c0015f33:	e8 e1 a8 fe ff       	call   c0000819 <strcat>
c0015f38:	59                   	pop    ecx
c0015f39:	58                   	pop    eax
c0015f3a:	53                   	push   ebx
c0015f3b:	56                   	push   esi
c0015f3c:	e8 d8 a8 fe ff       	call   c0000819 <strcat>
c0015f41:	58                   	pop    eax
c0015f42:	5a                   	pop    edx
c0015f43:	68 12 2a 02 c0       	push   0xc0022a12
c0015f48:	56                   	push   esi
c0015f49:	e8 cb a8 fe ff       	call   c0000819 <strcat>
c0015f4e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f55:	e8 84 91 ff ff       	call   c000f0de <operator new(unsigned long)>
c0015f5a:	83 c4 0c             	add    esp,0xc
c0015f5d:	89 c3                	mov    ebx,eax
c0015f5f:	ff 35 b4 5b 02 c0    	push   DWORD PTR ds:0xc0025bb4
c0015f65:	56                   	push   esi
c0015f66:	50                   	push   eax
c0015f67:	e8 de 97 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0015f6c:	59                   	pop    ecx
c0015f6d:	5e                   	pop    esi
c0015f6e:	6a 01                	push   0x1
c0015f70:	53                   	push   ebx
c0015f71:	e8 38 98 ff ff       	call   c000f7ae <File::open(FileOpenMode)>
c0015f76:	83 c4 10             	add    esp,0x10
c0015f79:	85 c0                	test   eax,eax
c0015f7b:	74 08                	je     c0015f85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015f7d:	83 ec 0c             	sub    esp,0xc
c0015f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f82:	53                   	push   ebx
c0015f83:	eb 2e                	jmp    c0015fb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015f85:	52                   	push   edx
c0015f86:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015f8a:	50                   	push   eax
c0015f8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015f8f:	50                   	push   eax
c0015f90:	53                   	push   ebx
c0015f91:	e8 c4 9a ff ff       	call   c000fa5a <File::stat(unsigned long long*, bool*)>
c0015f96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f9a:	83 c4 10             	add    esp,0x10
c0015f9d:	89 c1                	mov    ecx,eax
c0015f9f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fa3:	75 13                	jne    c0015fb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fa5:	83 ec 0c             	sub    esp,0xc
c0015fa8:	53                   	push   ebx
c0015fa9:	e8 5e 98 ff ff       	call   c000f80c <File::close()>
c0015fae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fb6:	eb 7b                	jmp    c0016033 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fb8:	83 ec 0c             	sub    esp,0xc
c0015fbb:	50                   	push   eax
c0015fbc:	e8 20 60 ff ff       	call   c000bfe1 <malloc>
c0015fc1:	89 c6                	mov    esi,eax
c0015fc3:	58                   	pop    eax
c0015fc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fca:	52                   	push   edx
c0015fcb:	56                   	push   esi
c0015fcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fd4:	53                   	push   ebx
c0015fd5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fd8:	83 c4 20             	add    esp,0x20
c0015fdb:	85 c0                	test   eax,eax
c0015fdd:	75 0a                	jne    c0015fe9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015fdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fe3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015fe7:	74 18                	je     c0016001 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015fe9:	83 ec 0c             	sub    esp,0xc
c0015fec:	31 ff                	xor    edi,edi
c0015fee:	53                   	push   ebx
c0015fef:	e8 18 98 ff ff       	call   c000f80c <File::close()>
c0015ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ff6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ff9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ffc:	83 c4 10             	add    esp,0x10
c0015fff:	eb 35                	jmp    c0016036 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0016001:	83 ec 0c             	sub    esp,0xc
c0016004:	53                   	push   ebx
c0016005:	e8 02 98 ff ff       	call   c000f80c <File::close()>
c001600a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001600c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001600f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016012:	83 c4 0c             	add    esp,0xc
c0016015:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001601c:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016023:	56                   	push   esi
c0016024:	e8 53 fd ff ff       	call   c0015d7c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0016029:	89 34 24             	mov    DWORD PTR [esp],esi
c001602c:	89 c7                	mov    edi,eax
c001602e:	e8 be 5f ff ff       	call   c000bff1 <free>
c0016033:	83 c4 10             	add    esp,0x10
c0016036:	81 c4 10 01 00 00    	add    esp,0x110
c001603c:	89 f8                	mov    eax,edi
c001603e:	5b                   	pop    ebx
c001603f:	5e                   	pop    esi
c0016040:	5f                   	pop    edi
c0016041:	c3                   	ret    

c0016042 <Reg::getLine(char*, char*, char*)>:
c0016042:	57                   	push   edi
c0016043:	56                   	push   esi
c0016044:	53                   	push   ebx
c0016045:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001604d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016051:	57                   	push   edi
c0016052:	56                   	push   esi
c0016053:	53                   	push   ebx
c0016054:	68 17 2a 02 c0       	push   0xc0022a17
c0016059:	e8 85 fe ff ff       	call   c0015ee3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	84 c0                	test   al,al
c0016063:	75 10                	jne    c0016075 <Reg::getLine(char*, char*, char*)+0x33>
c0016065:	57                   	push   edi
c0016066:	56                   	push   esi
c0016067:	53                   	push   ebx
c0016068:	68 3c 2a 02 c0       	push   0xc0022a3c
c001606d:	e8 71 fe ff ff       	call   c0015ee3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016072:	83 c4 10             	add    esp,0x10
c0016075:	5b                   	pop    ebx
c0016076:	5e                   	pop    esi
c0016077:	5f                   	pop    edi
c0016078:	c3                   	ret    

c0016079 <Reg::readInt(char*, char*, int*)>:
c0016079:	55                   	push   ebp
c001607a:	57                   	push   edi
c001607b:	56                   	push   esi
c001607c:	53                   	push   ebx
c001607d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0016083:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016087:	57                   	push   edi
c0016088:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001608f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0016096:	e8 a7 ff ff ff       	call   c0016042 <Reg::getLine(char*, char*, char*)>
c001609b:	83 c4 10             	add    esp,0x10
c001609e:	84 c0                	test   al,al
c00160a0:	0f 84 b2 00 00 00    	je     c0016158 <Reg::readInt(char*, char*, int*)+0xdf>
c00160a6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160aa:	80 fa 2b             	cmp    dl,0x2b
c00160ad:	74 0c                	je     c00160bb <Reg::readInt(char*, char*, int*)+0x42>
c00160af:	80 fa 2d             	cmp    dl,0x2d
c00160b2:	75 0e                	jne    c00160c2 <Reg::readInt(char*, char*, int*)+0x49>
c00160b4:	ba 01 00 00 00       	mov    edx,0x1
c00160b9:	eb 0b                	jmp    c00160c6 <Reg::readInt(char*, char*, int*)+0x4d>
c00160bb:	ba 01 00 00 00       	mov    edx,0x1
c00160c0:	eb 02                	jmp    c00160c4 <Reg::readInt(char*, char*, int*)+0x4b>
c00160c2:	31 d2                	xor    edx,edx
c00160c4:	31 c0                	xor    eax,eax
c00160c6:	be 0a 00 00 00       	mov    esi,0xa
c00160cb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160d0:	75 20                	jne    c00160f2 <Reg::readInt(char*, char*, int*)+0x79>
c00160d2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160d6:	80 f9 78             	cmp    cl,0x78
c00160d9:	75 0a                	jne    c00160e5 <Reg::readInt(char*, char*, int*)+0x6c>
c00160db:	83 c2 02             	add    edx,0x2
c00160de:	be 10 00 00 00       	mov    esi,0x10
c00160e3:	eb 0d                	jmp    c00160f2 <Reg::readInt(char*, char*, int*)+0x79>
c00160e5:	80 f9 62             	cmp    cl,0x62
c00160e8:	75 08                	jne    c00160f2 <Reg::readInt(char*, char*, int*)+0x79>
c00160ea:	83 c2 02             	add    edx,0x2
c00160ed:	be 02 00 00 00       	mov    esi,0x2
c00160f2:	01 d7                	add    edi,edx
c00160f4:	31 d2                	xor    edx,edx
c00160f6:	8a 1f                	mov    bl,BYTE PTR [edi]
c00160f8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00160fc:	84 db                	test   bl,bl
c00160fe:	0f 94 c3             	sete   bl
c0016101:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016106:	0f 94 c1             	sete   cl
c0016109:	08 cb                	or     bl,cl
c001610b:	75 3a                	jne    c0016147 <Reg::readInt(char*, char*, int*)+0xce>
c001610d:	0f af d6             	imul   edx,esi
c0016110:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016115:	83 fe 10             	cmp    esi,0x10
c0016118:	75 26                	jne    c0016140 <Reg::readInt(char*, char*, int*)+0xc7>
c001611a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001611e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016121:	89 e9                	mov    ecx,ebp
c0016123:	80 f9 05             	cmp    cl,0x5
c0016126:	77 06                	ja     c001612e <Reg::readInt(char*, char*, int*)+0xb5>
c0016128:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001612c:	eb 16                	jmp    c0016144 <Reg::readInt(char*, char*, int*)+0xcb>
c001612e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016132:	83 e9 61             	sub    ecx,0x61
c0016135:	80 f9 05             	cmp    cl,0x5
c0016138:	77 06                	ja     c0016140 <Reg::readInt(char*, char*, int*)+0xc7>
c001613a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001613e:	eb 04                	jmp    c0016144 <Reg::readInt(char*, char*, int*)+0xcb>
c0016140:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016144:	47                   	inc    edi
c0016145:	eb af                	jmp    c00160f6 <Reg::readInt(char*, char*, int*)+0x7d>
c0016147:	84 c0                	test   al,al
c0016149:	74 02                	je     c001614d <Reg::readInt(char*, char*, int*)+0xd4>
c001614b:	f7 da                	neg    edx
c001614d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016154:	89 10                	mov    DWORD PTR [eax],edx
c0016156:	88 d8                	mov    al,bl
c0016158:	81 c4 ec 00 00 00    	add    esp,0xec
c001615e:	5b                   	pop    ebx
c001615f:	5e                   	pop    esi
c0016160:	5f                   	pop    edi
c0016161:	5d                   	pop    ebp
c0016162:	c3                   	ret    

c0016163 <Reg::readString(char*, char*, char*, int)>:
c0016163:	57                   	push   edi
c0016164:	56                   	push   esi
c0016165:	53                   	push   ebx
c0016166:	81 ec d4 00 00 00    	sub    esp,0xd4
c001616c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016170:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016177:	57                   	push   edi
c0016178:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001617f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016186:	e8 b7 fe ff ff       	call   c0016042 <Reg::getLine(char*, char*, char*)>
c001618b:	83 c4 10             	add    esp,0x10
c001618e:	89 c6                	mov    esi,eax
c0016190:	84 c0                	test   al,al
c0016192:	74 44                	je     c00161d8 <Reg::readString(char*, char*, char*, int)+0x75>
c0016194:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001619b:	31 c0                	xor    eax,eax
c001619d:	4a                   	dec    edx
c001619e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161a1:	84 c9                	test   cl,cl
c00161a3:	74 0f                	je     c00161b4 <Reg::readString(char*, char*, char*, int)+0x51>
c00161a5:	39 c2                	cmp    edx,eax
c00161a7:	7e 0b                	jle    c00161b4 <Reg::readString(char*, char*, char*, int)+0x51>
c00161a9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161ac:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161b1:	40                   	inc    eax
c00161b2:	eb ea                	jmp    c001619e <Reg::readString(char*, char*, char*, int)+0x3b>
c00161b4:	83 ec 0c             	sub    esp,0xc
c00161b7:	53                   	push   ebx
c00161b8:	e8 23 a5 fe ff       	call   c00006e0 <strlen>
c00161bd:	83 c4 10             	add    esp,0x10
c00161c0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161c5:	75 11                	jne    c00161d8 <Reg::readString(char*, char*, char*, int)+0x75>
c00161c7:	83 ec 0c             	sub    esp,0xc
c00161ca:	53                   	push   ebx
c00161cb:	e8 10 a5 fe ff       	call   c00006e0 <strlen>
c00161d0:	83 c4 10             	add    esp,0x10
c00161d3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161d8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00161de:	89 f0                	mov    eax,esi
c00161e0:	5b                   	pop    ebx
c00161e1:	5e                   	pop    esi
c00161e2:	5f                   	pop    edi
c00161e3:	c3                   	ret    

c00161e4 <Reg::readBool(char*, char*, bool*)>:
c00161e4:	83 ec 20             	sub    esp,0x20
c00161e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00161eb:	50                   	push   eax
c00161ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161f4:	e8 80 fe ff ff       	call   c0016079 <Reg::readInt(char*, char*, int*)>
c00161f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00161fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016202:	0f 95 02             	setne  BYTE PTR [edx]
c0016205:	83 c4 2c             	add    esp,0x2c
c0016208:	c3                   	ret    

c0016209 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016209:	53                   	push   ebx
c001620a:	83 ec 1c             	sub    esp,0x1c
c001620d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016211:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016215:	50                   	push   eax
c0016216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621e:	e8 c1 ff ff ff       	call   c00161e4 <Reg::readBool(char*, char*, bool*)>
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	84 c0                	test   al,al
c0016228:	74 04                	je     c001622e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001622a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001622e:	83 c4 18             	add    esp,0x18
c0016231:	88 d8                	mov    al,bl
c0016233:	5b                   	pop    ebx
c0016234:	c3                   	ret    

c0016235 <Reg::readIntWithDefault(char*, char*, int)>:
c0016235:	53                   	push   ebx
c0016236:	83 ec 1c             	sub    esp,0x1c
c0016239:	8d 44 24 10          	lea    eax,[esp+0x10]
c001623d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016241:	50                   	push   eax
c0016242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016246:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001624a:	e8 2a fe ff ff       	call   c0016079 <Reg::readInt(char*, char*, int*)>
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	84 c0                	test   al,al
c0016254:	74 04                	je     c001625a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016256:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001625a:	83 c4 18             	add    esp,0x18
c001625d:	89 d8                	mov    eax,ebx
c001625f:	5b                   	pop    ebx
c0016260:	c3                   	ret    

c0016261 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016261:	56                   	push   esi
c0016262:	53                   	push   ebx
c0016263:	51                   	push   ecx
c0016264:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016268:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001626c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016270:	56                   	push   esi
c0016271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016279:	e8 e5 fe ff ff       	call   c0016163 <Reg::readString(char*, char*, char*, int)>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	84 c0                	test   al,al
c0016283:	74 02                	je     c0016287 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0016285:	89 f3                	mov    ebx,esi
c0016287:	5a                   	pop    edx
c0016288:	89 d8                	mov    eax,ebx
c001628a:	5b                   	pop    ebx
c001628b:	5e                   	pop    esi
c001628c:	c3                   	ret    

c001628d <Sys::exit(regs*)>:
c001628d:	83 ec 18             	sub    esp,0x18
c0016290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016294:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016297:	e8 c2 31 00 00       	call   c001945e <terminateTask(int)>
c001629c:	83 c8 ff             	or     eax,0xffffffff
c001629f:	89 c2                	mov    edx,eax
c00162a1:	83 c4 1c             	add    esp,0x1c
c00162a4:	c3                   	ret    

c00162a5 <Sys::loadDLL(regs*)>:
c00162a5:	56                   	push   esi
c00162a6:	31 d2                	xor    edx,edx
c00162a8:	53                   	push   ebx
c00162a9:	b8 01 00 00 00       	mov    eax,0x1
c00162ae:	51                   	push   ecx
c00162af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162b3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162b7:	74 7d                	je     c0016336 <Sys::loadDLL(regs*)+0x91>
c00162b9:	83 ec 0c             	sub    esp,0xc
c00162bc:	68 14 01 00 00       	push   0x114
c00162c1:	e8 18 8e ff ff       	call   c000f0de <operator new(unsigned long)>
c00162c6:	89 c3                	mov    ebx,eax
c00162c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162cd:	83 c4 0c             	add    esp,0xc
c00162d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162d6:	53                   	push   ebx
c00162d7:	e8 6e 94 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c00162dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162df:	e8 38 97 ff ff       	call   c000fa1c <File::exists()>
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	84 c0                	test   al,al
c00162e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162eb:	75 11                	jne    c00162fe <Sys::loadDLL(regs*)+0x59>
c00162ed:	83 ec 0c             	sub    esp,0xc
c00162f0:	53                   	push   ebx
c00162f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162f4:	83 c4 10             	add    esp,0x10
c00162f7:	b8 03 00 00 00       	mov    eax,0x3
c00162fc:	eb 36                	jmp    c0016334 <Sys::loadDLL(regs*)+0x8f>
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	53                   	push   ebx
c0016302:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016305:	58                   	pop    eax
c0016306:	5a                   	pop    edx
c0016307:	6a 00                	push   0x0
c0016309:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001630c:	e8 3a 21 00 00       	call   c001844b <Thr::loadDLL(char const*, bool)>
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	89 c1                	mov    ecx,eax
c0016316:	31 d2                	xor    edx,edx
c0016318:	b8 04 00 00 00       	mov    eax,0x4
c001631d:	85 c9                	test   ecx,ecx
c001631f:	74 15                	je     c0016336 <Sys::loadDLL(regs*)+0x91>
c0016321:	53                   	push   ebx
c0016322:	53                   	push   ebx
c0016323:	ff 35 68 47 02 c0    	push   DWORD PTR ds:0xc0024768
c0016329:	51                   	push   ecx
c001632a:	e8 e2 22 00 00       	call   c0018611 <Thr::executeDLL(unsigned long, void*)>
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	31 c0                	xor    eax,eax
c0016334:	31 d2                	xor    edx,edx
c0016336:	59                   	pop    ecx
c0016337:	5b                   	pop    ebx
c0016338:	5e                   	pop    esi
c0016339:	c3                   	ret    

c001633a <Sys::read(regs*)>:
c001633a:	57                   	push   edi
c001633b:	56                   	push   esi
c001633c:	53                   	push   ebx
c001633d:	83 ec 10             	sub    esp,0x10
c0016340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016344:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016347:	83 f8 02             	cmp    eax,0x2
c001634a:	77 10                	ja     c001635c <Sys::read(regs*)+0x22>
c001634c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016351:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016354:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001635a:	eb 0e                	jmp    c001636a <Sys::read(regs*)+0x30>
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	50                   	push   eax
c0016360:	e8 0a 7d ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	89 c1                	mov    ecx,eax
c001636a:	83 c8 ff             	or     eax,0xffffffff
c001636d:	85 c9                	test   ecx,ecx
c001636f:	89 c2                	mov    edx,eax
c0016371:	74 28                	je     c001639b <Sys::read(regs*)+0x61>
c0016373:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001637b:	83 ec 0c             	sub    esp,0xc
c001637e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016380:	31 ff                	xor    edi,edi
c0016382:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016386:	52                   	push   edx
c0016387:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001638a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001638d:	57                   	push   edi
c001638e:	56                   	push   esi
c001638f:	51                   	push   ecx
c0016390:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016393:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016397:	83 c4 20             	add    esp,0x20
c001639a:	99                   	cdq    
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	5b                   	pop    ebx
c001639f:	5e                   	pop    esi
c00163a0:	5f                   	pop    edi
c00163a1:	c3                   	ret    

c00163a2 <Sys::sbrk(regs*)>:
c00163a2:	56                   	push   esi
c00163a3:	53                   	push   ebx
c00163a4:	50                   	push   eax
c00163a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163b1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163b4:	85 db                	test   ebx,ebx
c00163b6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163bc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163bf:	74 02                	je     c00163c3 <Sys::sbrk(regs*)+0x21>
c00163c1:	79 06                	jns    c00163c9 <Sys::sbrk(regs*)+0x27>
c00163c3:	89 f0                	mov    eax,esi
c00163c5:	31 d2                	xor    edx,edx
c00163c7:	eb 2a                	jmp    c00163f3 <Sys::sbrk(regs*)+0x51>
c00163c9:	83 c8 ff             	or     eax,0xffffffff
c00163cc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163d2:	89 c2                	mov    edx,eax
c00163d4:	77 1d                	ja     c00163f3 <Sys::sbrk(regs*)+0x51>
c00163d6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163dc:	50                   	push   eax
c00163dd:	c1 ea 0c             	shr    edx,0xc
c00163e0:	68 07 04 00 00       	push   0x407
c00163e5:	52                   	push   edx
c00163e6:	51                   	push   ecx
c00163e7:	e8 da 85 ff ff       	call   c000e9c6 <VAS::allocatePages(int, int)>
c00163ec:	89 f0                	mov    eax,esi
c00163ee:	31 d2                	xor    edx,edx
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	59                   	pop    ecx
c00163f4:	5b                   	pop    ebx
c00163f5:	5e                   	pop    esi
c00163f6:	c3                   	ret    

c00163f7 <Sys::write(regs*)>:
c00163f7:	57                   	push   edi
c00163f8:	56                   	push   esi
c00163f9:	53                   	push   ebx
c00163fa:	83 ec 18             	sub    esp,0x18
c00163fd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016401:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016404:	68 57 2a 02 c0       	push   0xc0022a57
c0016409:	e8 05 8e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001640e:	83 c4 10             	add    esp,0x10
c0016411:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0016415:	77 10                	ja     c0016427 <Sys::write(regs*)+0x30>
c0016417:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001641c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001641f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016425:	eb 1b                	jmp    c0016442 <Sys::write(regs*)+0x4b>
c0016427:	83 ec 0c             	sub    esp,0xc
c001642a:	68 76 2a 02 c0       	push   0xc0022a76
c001642f:	e8 df 8d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0016434:	58                   	pop    eax
c0016435:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016438:	e8 32 7c ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	89 c1                	mov    ecx,eax
c0016442:	83 c8 ff             	or     eax,0xffffffff
c0016445:	85 c9                	test   ecx,ecx
c0016447:	89 c2                	mov    edx,eax
c0016449:	74 28                	je     c0016473 <Sys::write(regs*)+0x7c>
c001644b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016453:	83 ec 0c             	sub    esp,0xc
c0016456:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016458:	31 ff                	xor    edi,edi
c001645a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001645e:	52                   	push   edx
c001645f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016462:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016465:	57                   	push   edi
c0016466:	56                   	push   esi
c0016467:	51                   	push   ecx
c0016468:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001646b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001646f:	83 c4 20             	add    esp,0x20
c0016472:	99                   	cdq    
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	5b                   	pop    ebx
c0016477:	5e                   	pop    esi
c0016478:	5f                   	pop    edi
c0016479:	c3                   	ret    

c001647a <Sys::yield(regs*)>:
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	e8 af 25 00 00       	call   c0018a31 <lockScheduler()>
c0016482:	e8 f3 28 00 00       	call   c0018d7a <schedule()>
c0016487:	e8 a7 25 00 00       	call   c0018a33 <unlockScheduler()>
c001648c:	31 c0                	xor    eax,eax
c001648e:	31 d2                	xor    edx,edx
c0016490:	83 c4 0c             	add    esp,0xc
c0016493:	c3                   	ret    

c0016494 <sysCallGetPID(regs*)>:
c0016494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016499:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001649c:	8b 00                	mov    eax,DWORD PTR [eax]
c001649e:	89 c2                	mov    edx,eax
c00164a0:	c1 fa 1f             	sar    edx,0x1f
c00164a3:	c3                   	ret    

c00164a4 <sysCallSeekDir(regs*)>:
c00164a4:	31 c0                	xor    eax,eax
c00164a6:	31 d2                	xor    edx,edx
c00164a8:	c3                   	ret    

c00164a9 <sysCallTellDir(regs*)>:
c00164a9:	31 c0                	xor    eax,eax
c00164ab:	31 d2                	xor    edx,edx
c00164ad:	c3                   	ret    

c00164ae <sysCallVerify(regs*)>:
c00164ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164b2:	31 d2                	xor    edx,edx
c00164b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164b7:	c3                   	ret    

c00164b8 <sysCallFork(regs*)>:
c00164b8:	83 c8 ff             	or     eax,0xffffffff
c00164bb:	83 ca ff             	or     edx,0xffffffff
c00164be:	c3                   	ret    

c00164bf <sysCallExecve(regs*)>:
c00164bf:	83 c8 ff             	or     eax,0xffffffff
c00164c2:	83 ca ff             	or     edx,0xffffffff
c00164c5:	c3                   	ret    

c00164c6 <sysCallGetArgc(regs*)>:
c00164c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164ce:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164d4:	89 c2                	mov    edx,eax
c00164d6:	c1 fa 1f             	sar    edx,0x1f
c00164d9:	c3                   	ret    

c00164da <sysFormatDisk(regs*)>:
c00164da:	56                   	push   esi
c00164db:	53                   	push   ebx
c00164dc:	50                   	push   eax
c00164dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164e1:	8b 1d c8 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248c8
c00164e7:	eb 2a                	jmp    c0016513 <sysFormatDisk(regs*)+0x39>
c00164e9:	83 ec 0c             	sub    esp,0xc
c00164ec:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00164ef:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00164f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164f4:	51                   	push   ecx
c00164f5:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00164f8:	51                   	push   ecx
c00164f9:	50                   	push   eax
c00164fa:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c0016501:	50                   	push   eax
c0016502:	53                   	push   ebx
c0016503:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016506:	83 c4 20             	add    esp,0x20
c0016509:	89 c1                	mov    ecx,eax
c001650b:	83 f8 08             	cmp    eax,0x8
c001650e:	75 12                	jne    c0016522 <sysFormatDisk(regs*)+0x48>
c0016510:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016513:	85 db                	test   ebx,ebx
c0016515:	75 d2                	jne    c00164e9 <sysFormatDisk(regs*)+0xf>
c0016517:	b8 03 00 00 00       	mov    eax,0x3
c001651c:	31 d2                	xor    edx,edx
c001651e:	59                   	pop    ecx
c001651f:	5b                   	pop    ebx
c0016520:	5e                   	pop    esi
c0016521:	c3                   	ret    
c0016522:	85 c0                	test   eax,eax
c0016524:	74 13                	je     c0016539 <sysFormatDisk(regs*)+0x5f>
c0016526:	31 d2                	xor    edx,edx
c0016528:	b8 01 00 00 00       	mov    eax,0x1
c001652d:	83 f9 09             	cmp    ecx,0x9
c0016530:	74 ec                	je     c001651e <sysFormatDisk(regs*)+0x44>
c0016532:	b8 02 00 00 00       	mov    eax,0x2
c0016537:	eb e3                	jmp    c001651c <sysFormatDisk(regs*)+0x42>
c0016539:	31 c0                	xor    eax,eax
c001653b:	eb df                	jmp    c001651c <sysFormatDisk(regs*)+0x42>

c001653d <sysSetDiskVolumeLabel(regs*)>:
c001653d:	56                   	push   esi
c001653e:	53                   	push   ebx
c001653f:	53                   	push   ebx
c0016540:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016544:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016547:	83 f8 19             	cmp    eax,0x19
c001654a:	77 2d                	ja     c0016579 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001654c:	8b 0c 85 60 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb2a0]
c0016553:	85 c9                	test   ecx,ecx
c0016555:	74 22                	je     c0016579 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016557:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001655a:	85 d2                	test   edx,edx
c001655c:	74 1b                	je     c0016579 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001655e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016564:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016566:	52                   	push   edx
c0016567:	50                   	push   eax
c0016568:	51                   	push   ecx
c0016569:	53                   	push   ebx
c001656a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001656d:	83 c4 10             	add    esp,0x10
c0016570:	89 c2                	mov    edx,eax
c0016572:	c1 fa 1f             	sar    edx,0x1f
c0016575:	59                   	pop    ecx
c0016576:	5b                   	pop    ebx
c0016577:	5e                   	pop    esi
c0016578:	c3                   	ret    
c0016579:	59                   	pop    ecx
c001657a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001657f:	5b                   	pop    ebx
c0016580:	83 ca ff             	or     edx,0xffffffff
c0016583:	5e                   	pop    esi
c0016584:	c3                   	ret    

c0016585 <sysGetDiskVolumeLabel(regs*)>:
c0016585:	57                   	push   edi
c0016586:	56                   	push   esi
c0016587:	53                   	push   ebx
c0016588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001658f:	83 fa 19             	cmp    edx,0x19
c0016592:	77 38                	ja     c00165cc <sysGetDiskVolumeLabel(regs*)+0x47>
c0016594:	8b 0c 95 60 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb2a0]
c001659b:	85 c9                	test   ecx,ecx
c001659d:	74 2d                	je     c00165cc <sysGetDiskVolumeLabel(regs*)+0x47>
c001659f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165a2:	85 db                	test   ebx,ebx
c00165a4:	74 26                	je     c00165cc <sysGetDiskVolumeLabel(regs*)+0x47>
c00165a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165a9:	85 c0                	test   eax,eax
c00165ab:	74 1f                	je     c00165cc <sysGetDiskVolumeLabel(regs*)+0x47>
c00165ad:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165b3:	83 ec 0c             	sub    esp,0xc
c00165b6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165b8:	50                   	push   eax
c00165b9:	53                   	push   ebx
c00165ba:	52                   	push   edx
c00165bb:	51                   	push   ecx
c00165bc:	56                   	push   esi
c00165bd:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165c0:	83 c4 20             	add    esp,0x20
c00165c3:	89 c2                	mov    edx,eax
c00165c5:	c1 fa 1f             	sar    edx,0x1f
c00165c8:	5b                   	pop    ebx
c00165c9:	5e                   	pop    esi
c00165ca:	5f                   	pop    edi
c00165cb:	c3                   	ret    
c00165cc:	5b                   	pop    ebx
c00165cd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165d2:	5e                   	pop    esi
c00165d3:	83 ca ff             	or     edx,0xffffffff
c00165d6:	5f                   	pop    edi
c00165d7:	c3                   	ret    

c00165d8 <sysShutdown(regs*)>:
c00165d8:	57                   	push   edi
c00165d9:	56                   	push   esi
c00165da:	56                   	push   esi
c00165db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165e2:	85 c0                	test   eax,eax
c00165e4:	74 18                	je     c00165fe <sysShutdown(regs*)+0x26>
c00165e6:	83 f8 01             	cmp    eax,0x1
c00165e9:	74 51                	je     c001663c <sysShutdown(regs*)+0x64>
c00165eb:	83 ce ff             	or     esi,0xffffffff
c00165ee:	83 cf ff             	or     edi,0xffffffff
c00165f1:	83 f8 02             	cmp    eax,0x2
c00165f4:	74 2a                	je     c0016620 <sysShutdown(regs*)+0x48>
c00165f6:	59                   	pop    ecx
c00165f7:	89 f0                	mov    eax,esi
c00165f9:	5e                   	pop    esi
c00165fa:	89 fa                	mov    edx,edi
c00165fc:	5f                   	pop    edi
c00165fd:	c3                   	ret    
c00165fe:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0016603:	83 ce ff             	or     esi,0xffffffff
c0016606:	83 cf ff             	or     edi,0xffffffff
c0016609:	8b 10                	mov    edx,DWORD PTR [eax]
c001660b:	6a 00                	push   0x0
c001660d:	6a 00                	push   0x0
c001660f:	6a 00                	push   0x0
c0016611:	50                   	push   eax
c0016612:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016615:	83 c4 10             	add    esp,0x10
c0016618:	89 f0                	mov    eax,esi
c001661a:	89 fa                	mov    edx,edi
c001661c:	59                   	pop    ecx
c001661d:	5e                   	pop    esi
c001661e:	5f                   	pop    edi
c001661f:	c3                   	ret    
c0016620:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0016625:	8b 10                	mov    edx,DWORD PTR [eax]
c0016627:	6a 00                	push   0x0
c0016629:	6a 00                	push   0x0
c001662b:	6a 01                	push   0x1
c001662d:	50                   	push   eax
c001662e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	89 f0                	mov    eax,esi
c0016636:	89 fa                	mov    edx,edi
c0016638:	59                   	pop    ecx
c0016639:	5e                   	pop    esi
c001663a:	5f                   	pop    edi
c001663b:	c3                   	ret    
c001663c:	a1 e0 4d 02 c0       	mov    eax,ds:0xc0024de0
c0016641:	85 c0                	test   eax,eax
c0016643:	74 02                	je     c0016647 <sysShutdown(regs*)+0x6f>
c0016645:	ff d0                	call   eax
c0016647:	31 f6                	xor    esi,esi
c0016649:	59                   	pop    ecx
c001664a:	31 ff                	xor    edi,edi
c001664c:	89 f0                	mov    eax,esi
c001664e:	5e                   	pop    esi
c001664f:	89 fa                	mov    edx,edi
c0016651:	5f                   	pop    edi
c0016652:	c3                   	ret    

c0016653 <sysCallGetCwd(regs*)>:
c0016653:	83 ec 10             	sub    esp,0x10
c0016656:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001665a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001665d:	52                   	push   edx
c001665e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016661:	51                   	push   ecx
c0016662:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016667:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001666a:	50                   	push   eax
c001666b:	e8 4b 94 ff ff       	call   c000fabb <getcwd(Process*, char*, int)>
c0016670:	89 c2                	mov    edx,eax
c0016672:	83 c4 1c             	add    esp,0x1c
c0016675:	c1 fa 1f             	sar    edx,0x1f
c0016678:	c3                   	ret    

c0016679 <sysCallSetCwd(regs*)>:
c0016679:	83 ec 14             	sub    esp,0x14
c001667c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016680:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016683:	50                   	push   eax
c0016684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016689:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001668c:	52                   	push   edx
c001668d:	e8 53 94 ff ff       	call   c000fae5 <setcwd(Process*, char*)>
c0016692:	89 c2                	mov    edx,eax
c0016694:	83 c4 1c             	add    esp,0x1c
c0016697:	c1 fa 1f             	sar    edx,0x1f
c001669a:	c3                   	ret    

c001669b <sysCallRealpath(regs*)>:
c001669b:	53                   	push   ebx
c001669c:	83 ec 08             	sub    esp,0x8
c001669f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166a6:	85 c9                	test   ecx,ecx
c00166a8:	74 35                	je     c00166df <sysCallRealpath(regs*)+0x44>
c00166aa:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166ad:	31 d2                	xor    edx,edx
c00166af:	b8 01 00 00 00       	mov    eax,0x1
c00166b4:	85 db                	test   ebx,ebx
c00166b6:	75 05                	jne    c00166bd <sysCallRealpath(regs*)+0x22>
c00166b8:	83 c4 08             	add    esp,0x8
c00166bb:	5b                   	pop    ebx
c00166bc:	c3                   	ret    
c00166bd:	50                   	push   eax
c00166be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166c6:	05 0c 01 00 00       	add    eax,0x10c
c00166cb:	50                   	push   eax
c00166cc:	51                   	push   ecx
c00166cd:	53                   	push   ebx
c00166ce:	e8 cd 8e ff ff       	call   c000f5a0 <standardiseFiles(char*, char const*, char const*)>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	31 c0                	xor    eax,eax
c00166d8:	31 d2                	xor    edx,edx
c00166da:	83 c4 08             	add    esp,0x8
c00166dd:	5b                   	pop    ebx
c00166de:	c3                   	ret    
c00166df:	b8 01 00 00 00       	mov    eax,0x1
c00166e4:	31 d2                	xor    edx,edx
c00166e6:	eb f2                	jmp    c00166da <sysCallRealpath(regs*)+0x3f>

c00166e8 <sysCallReadDir(regs*)>:
c00166e8:	53                   	push   ebx
c00166e9:	83 ec 18             	sub    esp,0x18
c00166ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00166f0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00166f3:	83 f8 02             	cmp    eax,0x2
c00166f6:	76 56                	jbe    c001674e <sysCallReadDir(regs*)+0x66>
c00166f8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00166fb:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016701:	77 57                	ja     c001675a <sysCallReadDir(regs*)+0x72>
c0016703:	83 ec 0c             	sub    esp,0xc
c0016706:	50                   	push   eax
c0016707:	e8 63 79 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c001670c:	83 c4 10             	add    esp,0x10
c001670f:	85 c0                	test   eax,eax
c0016711:	74 57                	je     c001676a <sysCallReadDir(regs*)+0x82>
c0016713:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001671b:	83 ec 0c             	sub    esp,0xc
c001671e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016720:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016724:	51                   	push   ecx
c0016725:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016728:	51                   	push   ecx
c0016729:	6a 00                	push   0x0
c001672b:	68 10 01 00 00       	push   0x110
c0016730:	50                   	push   eax
c0016731:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016734:	83 c4 20             	add    esp,0x20
c0016737:	89 c1                	mov    ecx,eax
c0016739:	85 c0                	test   eax,eax
c001673b:	74 38                	je     c0016775 <sysCallReadDir(regs*)+0x8d>
c001673d:	31 d2                	xor    edx,edx
c001673f:	b8 02 00 00 00       	mov    eax,0x2
c0016744:	83 f9 07             	cmp    ecx,0x7
c0016747:	74 05                	je     c001674e <sysCallReadDir(regs*)+0x66>
c0016749:	83 c4 18             	add    esp,0x18
c001674c:	5b                   	pop    ebx
c001674d:	c3                   	ret    
c001674e:	b8 01 00 00 00       	mov    eax,0x1
c0016753:	31 d2                	xor    edx,edx
c0016755:	83 c4 18             	add    esp,0x18
c0016758:	5b                   	pop    ebx
c0016759:	c3                   	ret    
c001675a:	53                   	push   ebx
c001675b:	53                   	push   ebx
c001675c:	52                   	push   edx
c001675d:	68 98 2a 02 c0       	push   0xc0022a98
c0016762:	e8 ac 8a ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0016767:	83 c4 10             	add    esp,0x10
c001676a:	83 c4 18             	add    esp,0x18
c001676d:	83 c8 ff             	or     eax,0xffffffff
c0016770:	83 ca ff             	or     edx,0xffffffff
c0016773:	5b                   	pop    ebx
c0016774:	c3                   	ret    
c0016775:	31 c0                	xor    eax,eax
c0016777:	31 d2                	xor    edx,edx
c0016779:	eb da                	jmp    c0016755 <sysCallReadDir(regs*)+0x6d>

c001677b <sysCallIsATTY(regs*)>:
c001677b:	83 ec 0c             	sub    esp,0xc
c001677e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016782:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016785:	83 f8 02             	cmp    eax,0x2
c0016788:	76 07                	jbe    c0016791 <sysCallIsATTY(regs*)+0x16>
c001678a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001678f:	75 28                	jne    c00167b9 <sysCallIsATTY(regs*)+0x3e>
c0016791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016796:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016799:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001679f:	85 c0                	test   eax,eax
c00167a1:	74 26                	je     c00167c9 <sysCallIsATTY(regs*)+0x4e>
c00167a3:	83 ec 0c             	sub    esp,0xc
c00167a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00167a8:	50                   	push   eax
c00167a9:	ff 12                	call   DWORD PTR [edx]
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	25 ff 00 00 00       	and    eax,0xff
c00167b3:	31 d2                	xor    edx,edx
c00167b5:	83 c4 0c             	add    esp,0xc
c00167b8:	c3                   	ret    
c00167b9:	83 ec 0c             	sub    esp,0xc
c00167bc:	50                   	push   eax
c00167bd:	e8 ad 78 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	85 c0                	test   eax,eax
c00167c7:	75 da                	jne    c00167a3 <sysCallIsATTY(regs*)+0x28>
c00167c9:	83 c8 ff             	or     eax,0xffffffff
c00167cc:	83 ca ff             	or     edx,0xffffffff
c00167cf:	83 c4 0c             	add    esp,0xc
c00167d2:	c3                   	ret    

c00167d3 <sysCallSeek(regs*)>:
c00167d3:	53                   	push   ebx
c00167d4:	83 ec 08             	sub    esp,0x8
c00167d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167de:	83 f8 02             	cmp    eax,0x2
c00167e1:	76 4b                	jbe    c001682e <sysCallSeek(regs*)+0x5b>
c00167e3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167e8:	77 34                	ja     c001681e <sysCallSeek(regs*)+0x4b>
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	50                   	push   eax
c00167ee:	e8 7c 78 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c00167f3:	83 c4 0c             	add    esp,0xc
c00167f6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00167f9:	31 db                	xor    ebx,ebx
c00167fb:	53                   	push   ebx
c00167fc:	51                   	push   ecx
c00167fd:	50                   	push   eax
c00167fe:	e8 69 90 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	85 c0                	test   eax,eax
c0016808:	0f 95 c0             	setne  al
c001680b:	25 ff 00 00 00       	and    eax,0xff
c0016810:	31 d2                	xor    edx,edx
c0016812:	f7 d8                	neg    eax
c0016814:	83 d2 00             	adc    edx,0x0
c0016817:	83 c4 08             	add    esp,0x8
c001681a:	f7 da                	neg    edx
c001681c:	5b                   	pop    ebx
c001681d:	c3                   	ret    
c001681e:	52                   	push   edx
c001681f:	52                   	push   edx
c0016820:	50                   	push   eax
c0016821:	68 54 2b 02 c0       	push   0xc0022b54
c0016826:	e8 e8 89 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	83 c4 08             	add    esp,0x8
c0016831:	83 c8 ff             	or     eax,0xffffffff
c0016834:	83 ca ff             	or     edx,0xffffffff
c0016837:	5b                   	pop    ebx
c0016838:	c3                   	ret    

c0016839 <sysCallTell(regs*)>:
c0016839:	53                   	push   ebx
c001683a:	83 ec 08             	sub    esp,0x8
c001683d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016841:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016844:	83 f8 02             	cmp    eax,0x2
c0016847:	76 60                	jbe    c00168a9 <sysCallTell(regs*)+0x70>
c0016849:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001684e:	77 30                	ja     c0016880 <sysCallTell(regs*)+0x47>
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	50                   	push   eax
c0016854:	e8 16 78 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c0016859:	5a                   	pop    edx
c001685a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001685d:	59                   	pop    ecx
c001685e:	53                   	push   ebx
c001685f:	50                   	push   eax
c0016860:	e8 5d 90 ff ff       	call   c000f8c2 <File::tell(unsigned long long*)>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	85 c0                	test   eax,eax
c001686a:	0f 95 c0             	setne  al
c001686d:	25 ff 00 00 00       	and    eax,0xff
c0016872:	31 d2                	xor    edx,edx
c0016874:	f7 d8                	neg    eax
c0016876:	83 d2 00             	adc    edx,0x0
c0016879:	83 c4 08             	add    esp,0x8
c001687c:	f7 da                	neg    edx
c001687e:	5b                   	pop    ebx
c001687f:	c3                   	ret    
c0016880:	52                   	push   edx
c0016881:	52                   	push   edx
c0016882:	50                   	push   eax
c0016883:	68 6e 2b 02 c0       	push   0xc0022b6e
c0016888:	e8 86 89 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001688d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016890:	83 c4 10             	add    esp,0x10
c0016893:	31 d2                	xor    edx,edx
c0016895:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001689b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168a2:	83 c4 08             	add    esp,0x8
c00168a5:	31 c0                	xor    eax,eax
c00168a7:	5b                   	pop    ebx
c00168a8:	c3                   	ret    
c00168a9:	83 c4 08             	add    esp,0x8
c00168ac:	83 c8 ff             	or     eax,0xffffffff
c00168af:	83 ca ff             	or     edx,0xffffffff
c00168b2:	5b                   	pop    ebx
c00168b3:	c3                   	ret    

c00168b4 <sysCallSizeFromFilename(regs*)>:
c00168b4:	57                   	push   edi
c00168b5:	56                   	push   esi
c00168b6:	53                   	push   ebx
c00168b7:	83 ec 10             	sub    esp,0x10
c00168ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168be:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168c1:	83 fb 02             	cmp    ebx,0x2
c00168c4:	0f 86 8b 00 00 00    	jbe    c0016955 <sysCallSizeFromFilename(regs*)+0xa1>
c00168ca:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168d0:	77 58                	ja     c001692a <sysCallSizeFromFilename(regs*)+0x76>
c00168d2:	83 ec 0c             	sub    esp,0xc
c00168d5:	68 14 01 00 00       	push   0x114
c00168da:	e8 ff 87 ff ff       	call   c000f0de <operator new(unsigned long)>
c00168df:	89 c7                	mov    edi,eax
c00168e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168e6:	83 c4 0c             	add    esp,0xc
c00168e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168ec:	50                   	push   eax
c00168ed:	53                   	push   ebx
c00168ee:	57                   	push   edi
c00168ef:	e8 56 8e ff ff       	call   c000f74a <File::File(char const*, Process*)>
c00168f4:	83 c4 0c             	add    esp,0xc
c00168f7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00168fb:	50                   	push   eax
c00168fc:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00168ff:	52                   	push   edx
c0016900:	57                   	push   edi
c0016901:	e8 54 91 ff ff       	call   c000fa5a <File::stat(unsigned long long*, bool*)>
c0016906:	89 c3                	mov    ebx,eax
c0016908:	8b 07                	mov    eax,DWORD PTR [edi]
c001690a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001690d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016910:	31 c0                	xor    eax,eax
c0016912:	83 c4 10             	add    esp,0x10
c0016915:	85 db                	test   ebx,ebx
c0016917:	0f 95 c0             	setne  al
c001691a:	31 d2                	xor    edx,edx
c001691c:	f7 d8                	neg    eax
c001691e:	83 d2 00             	adc    edx,0x0
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	f7 da                	neg    edx
c0016926:	5b                   	pop    ebx
c0016927:	5e                   	pop    esi
c0016928:	5f                   	pop    edi
c0016929:	c3                   	ret    
c001692a:	51                   	push   ecx
c001692b:	51                   	push   ecx
c001692c:	53                   	push   ebx
c001692d:	68 88 2b 02 c0       	push   0xc0022b88
c0016932:	e8 dc 88 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0016937:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001693a:	83 c4 10             	add    esp,0x10
c001693d:	31 d2                	xor    edx,edx
c001693f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016945:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	31 c0                	xor    eax,eax
c0016951:	5b                   	pop    ebx
c0016952:	5e                   	pop    esi
c0016953:	5f                   	pop    edi
c0016954:	c3                   	ret    
c0016955:	83 c4 10             	add    esp,0x10
c0016958:	83 c8 ff             	or     eax,0xffffffff
c001695b:	83 ca ff             	or     edx,0xffffffff
c001695e:	5b                   	pop    ebx
c001695f:	5e                   	pop    esi
c0016960:	5f                   	pop    edi
c0016961:	c3                   	ret    

c0016962 <sysCallSize(regs*)>:
c0016962:	53                   	push   ebx
c0016963:	83 ec 18             	sub    esp,0x18
c0016966:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001696a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001696d:	83 f8 02             	cmp    eax,0x2
c0016970:	76 66                	jbe    c00169d8 <sysCallSize(regs*)+0x76>
c0016972:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016977:	77 36                	ja     c00169af <sysCallSize(regs*)+0x4d>
c0016979:	83 ec 0c             	sub    esp,0xc
c001697c:	50                   	push   eax
c001697d:	e8 ed 76 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c0016982:	83 c4 0c             	add    esp,0xc
c0016985:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016989:	52                   	push   edx
c001698a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001698d:	52                   	push   edx
c001698e:	50                   	push   eax
c001698f:	e8 c6 90 ff ff       	call   c000fa5a <File::stat(unsigned long long*, bool*)>
c0016994:	83 c4 10             	add    esp,0x10
c0016997:	85 c0                	test   eax,eax
c0016999:	0f 95 c0             	setne  al
c001699c:	25 ff 00 00 00       	and    eax,0xff
c00169a1:	31 d2                	xor    edx,edx
c00169a3:	f7 d8                	neg    eax
c00169a5:	83 d2 00             	adc    edx,0x0
c00169a8:	83 c4 18             	add    esp,0x18
c00169ab:	f7 da                	neg    edx
c00169ad:	5b                   	pop    ebx
c00169ae:	c3                   	ret    
c00169af:	51                   	push   ecx
c00169b0:	51                   	push   ecx
c00169b1:	50                   	push   eax
c00169b2:	68 88 2b 02 c0       	push   0xc0022b88
c00169b7:	e8 57 88 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00169bc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	31 d2                	xor    edx,edx
c00169c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169d1:	83 c4 18             	add    esp,0x18
c00169d4:	31 c0                	xor    eax,eax
c00169d6:	5b                   	pop    ebx
c00169d7:	c3                   	ret    
c00169d8:	83 c4 18             	add    esp,0x18
c00169db:	83 c8 ff             	or     eax,0xffffffff
c00169de:	83 ca ff             	or     edx,0xffffffff
c00169e1:	5b                   	pop    ebx
c00169e2:	c3                   	ret    

c00169e3 <sysCallClose(regs*)>:
c00169e3:	53                   	push   ebx
c00169e4:	83 ec 08             	sub    esp,0x8
c00169e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00169ee:	83 f8 02             	cmp    eax,0x2
c00169f1:	76 4f                	jbe    c0016a42 <sysCallClose(regs*)+0x5f>
c00169f3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00169f8:	74 53                	je     c0016a4d <sysCallClose(regs*)+0x6a>
c00169fa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169ff:	74 5b                	je     c0016a5c <sysCallClose(regs*)+0x79>
c0016a01:	77 2f                	ja     c0016a32 <sysCallClose(regs*)+0x4f>
c0016a03:	83 ec 0c             	sub    esp,0xc
c0016a06:	50                   	push   eax
c0016a07:	e8 63 76 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c0016a0c:	89 c3                	mov    ebx,eax
c0016a0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a11:	e8 f6 8d ff ff       	call   c000f80c <File::close()>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	85 db                	test   ebx,ebx
c0016a1b:	74 0c                	je     c0016a29 <sysCallClose(regs*)+0x46>
c0016a1d:	83 ec 0c             	sub    esp,0xc
c0016a20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a22:	53                   	push   ebx
c0016a23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a26:	83 c4 10             	add    esp,0x10
c0016a29:	83 c4 08             	add    esp,0x8
c0016a2c:	31 c0                	xor    eax,eax
c0016a2e:	31 d2                	xor    edx,edx
c0016a30:	5b                   	pop    ebx
c0016a31:	c3                   	ret    
c0016a32:	52                   	push   edx
c0016a33:	52                   	push   edx
c0016a34:	50                   	push   eax
c0016a35:	68 bc 2a 02 c0       	push   0xc0022abc
c0016a3a:	e8 d4 87 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0016a3f:	83 c4 10             	add    esp,0x10
c0016a42:	83 c4 08             	add    esp,0x8
c0016a45:	83 c8 ff             	or     eax,0xffffffff
c0016a48:	83 ca ff             	or     edx,0xffffffff
c0016a4b:	5b                   	pop    ebx
c0016a4c:	c3                   	ret    
c0016a4d:	83 ec 0c             	sub    esp,0xc
c0016a50:	68 a3 2b 02 c0       	push   0xc0022ba3
c0016a55:	e8 b9 87 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0016a5a:	eb ca                	jmp    c0016a26 <sysCallClose(regs*)+0x43>
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	68 b1 2b 02 c0       	push   0xc0022bb1
c0016a64:	eb ef                	jmp    c0016a55 <sysCallClose(regs*)+0x72>

c0016a66 <sysCallOpenDir(regs*)>:
c0016a66:	56                   	push   esi
c0016a67:	53                   	push   ebx
c0016a68:	50                   	push   eax
c0016a69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a70:	85 c0                	test   eax,eax
c0016a72:	74 53                	je     c0016ac7 <sysCallOpenDir(regs*)+0x61>
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	68 14 01 00 00       	push   0x114
c0016a7c:	e8 5d 86 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016a81:	89 c6                	mov    esi,eax
c0016a83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a88:	83 c4 0c             	add    esp,0xc
c0016a8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a8e:	50                   	push   eax
c0016a8f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a92:	50                   	push   eax
c0016a93:	56                   	push   esi
c0016a94:	e8 73 91 ff ff       	call   c000fc0c <Directory::Directory(char const*, Process*)>
c0016a99:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a9c:	e8 cf 91 ff ff       	call   c000fc70 <Directory::open()>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	85 c0                	test   eax,eax
c0016aa6:	75 1f                	jne    c0016ac7 <sysCallOpenDir(regs*)+0x61>
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	56                   	push   esi
c0016aac:	e8 09 73 ff ff       	call   c000ddba <UnixFile::getFileDescriptor()>
c0016ab1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	89 02                	mov    DWORD PTR [edx],eax
c0016ab9:	c1 f8 1f             	sar    eax,0x1f
c0016abc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016abf:	31 c0                	xor    eax,eax
c0016ac1:	59                   	pop    ecx
c0016ac2:	31 d2                	xor    edx,edx
c0016ac4:	5b                   	pop    ebx
c0016ac5:	5e                   	pop    esi
c0016ac6:	c3                   	ret    
c0016ac7:	59                   	pop    ecx
c0016ac8:	83 c8 ff             	or     eax,0xffffffff
c0016acb:	5b                   	pop    ebx
c0016acc:	83 ca ff             	or     edx,0xffffffff
c0016acf:	5e                   	pop    esi
c0016ad0:	c3                   	ret    

c0016ad1 <sysCallMakeDir(regs*)>:
c0016ad1:	56                   	push   esi
c0016ad2:	53                   	push   ebx
c0016ad3:	83 ec 10             	sub    esp,0x10
c0016ad6:	68 14 01 00 00       	push   0x114
c0016adb:	e8 fe 85 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016ae0:	89 c3                	mov    ebx,eax
c0016ae2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ae7:	83 c4 0c             	add    esp,0xc
c0016aea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aed:	50                   	push   eax
c0016aee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016af2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016af5:	52                   	push   edx
c0016af6:	53                   	push   ebx
c0016af7:	e8 10 91 ff ff       	call   c000fc0c <Directory::Directory(char const*, Process*)>
c0016afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aff:	e8 4c 93 ff ff       	call   c000fe50 <Directory::create()>
c0016b04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b07:	89 c6                	mov    esi,eax
c0016b09:	e8 be 91 ff ff       	call   c000fccc <Directory::close()>
c0016b0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b16:	31 c0                	xor    eax,eax
c0016b18:	85 f6                	test   esi,esi
c0016b1a:	0f 95 c0             	setne  al
c0016b1d:	31 d2                	xor    edx,edx
c0016b1f:	f7 d8                	neg    eax
c0016b21:	83 d2 00             	adc    edx,0x0
c0016b24:	83 c4 14             	add    esp,0x14
c0016b27:	f7 da                	neg    edx
c0016b29:	5b                   	pop    ebx
c0016b2a:	5e                   	pop    esi
c0016b2b:	c3                   	ret    

c0016b2c <sysCallCloseDir(regs*)>:
c0016b2c:	53                   	push   ebx
c0016b2d:	83 ec 08             	sub    esp,0x8
c0016b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b34:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b37:	83 f8 02             	cmp    eax,0x2
c0016b3a:	76 46                	jbe    c0016b82 <sysCallCloseDir(regs*)+0x56>
c0016b3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b41:	77 2f                	ja     c0016b72 <sysCallCloseDir(regs*)+0x46>
c0016b43:	83 ec 0c             	sub    esp,0xc
c0016b46:	50                   	push   eax
c0016b47:	e8 23 75 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c0016b4c:	89 c3                	mov    ebx,eax
c0016b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b51:	e8 76 91 ff ff       	call   c000fccc <Directory::close()>
c0016b56:	83 c4 10             	add    esp,0x10
c0016b59:	85 db                	test   ebx,ebx
c0016b5b:	74 0c                	je     c0016b69 <sysCallCloseDir(regs*)+0x3d>
c0016b5d:	83 ec 0c             	sub    esp,0xc
c0016b60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b62:	53                   	push   ebx
c0016b63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	83 c4 08             	add    esp,0x8
c0016b6c:	31 c0                	xor    eax,eax
c0016b6e:	31 d2                	xor    edx,edx
c0016b70:	5b                   	pop    ebx
c0016b71:	c3                   	ret    
c0016b72:	52                   	push   edx
c0016b73:	52                   	push   edx
c0016b74:	50                   	push   eax
c0016b75:	68 e4 2a 02 c0       	push   0xc0022ae4
c0016b7a:	e8 94 86 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	83 c4 08             	add    esp,0x8
c0016b85:	83 c8 ff             	or     eax,0xffffffff
c0016b88:	83 ca ff             	or     edx,0xffffffff
c0016b8b:	5b                   	pop    ebx
c0016b8c:	c3                   	ret    

c0016b8d <sysCallWait(regs*)>:
c0016b8d:	83 ec 10             	sub    esp,0x10
c0016b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b94:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016b97:	52                   	push   edx
c0016b98:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016b9b:	51                   	push   ecx
c0016b9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b9f:	50                   	push   eax
c0016ba0:	e8 4f 23 00 00       	call   c0018ef4 <waitTask(int, int*, int)>
c0016ba5:	89 c2                	mov    edx,eax
c0016ba7:	83 c4 1c             	add    esp,0x1c
c0016baa:	c1 fa 1f             	sar    edx,0x1f
c0016bad:	c3                   	ret    

c0016bae <sysCallRmdir(regs*)>:
c0016bae:	56                   	push   esi
c0016baf:	53                   	push   ebx
c0016bb0:	83 ec 10             	sub    esp,0x10
c0016bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bb7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bba:	68 14 01 00 00       	push   0x114
c0016bbf:	e8 1a 85 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016bc4:	83 c4 0c             	add    esp,0xc
c0016bc7:	89 c3                	mov    ebx,eax
c0016bc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bd1:	50                   	push   eax
c0016bd2:	56                   	push   esi
c0016bd3:	53                   	push   ebx
c0016bd4:	e8 71 8b ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0016bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bdc:	e8 45 8d ff ff       	call   c000f926 <File::unlink()>
c0016be1:	89 c6                	mov    esi,eax
c0016be3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016be5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016be8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016beb:	31 c0                	xor    eax,eax
c0016bed:	85 f6                	test   esi,esi
c0016bef:	0f 95 c0             	setne  al
c0016bf2:	31 d2                	xor    edx,edx
c0016bf4:	f7 d8                	neg    eax
c0016bf6:	83 d2 00             	adc    edx,0x0
c0016bf9:	83 c4 14             	add    esp,0x14
c0016bfc:	f7 da                	neg    edx
c0016bfe:	5b                   	pop    ebx
c0016bff:	5e                   	pop    esi
c0016c00:	c3                   	ret    

c0016c01 <sysCallUnlink(regs*)>:
c0016c01:	56                   	push   esi
c0016c02:	53                   	push   ebx
c0016c03:	83 ec 10             	sub    esp,0x10
c0016c06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c0a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c0d:	68 14 01 00 00       	push   0x114
c0016c12:	e8 c7 84 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016c17:	83 c4 0c             	add    esp,0xc
c0016c1a:	89 c3                	mov    ebx,eax
c0016c1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c24:	50                   	push   eax
c0016c25:	56                   	push   esi
c0016c26:	53                   	push   ebx
c0016c27:	e8 1e 8b ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0016c2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c2f:	e8 f2 8c ff ff       	call   c000f926 <File::unlink()>
c0016c34:	89 c6                	mov    esi,eax
c0016c36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c3e:	31 c0                	xor    eax,eax
c0016c40:	85 f6                	test   esi,esi
c0016c42:	0f 95 c0             	setne  al
c0016c45:	31 d2                	xor    edx,edx
c0016c47:	f7 d8                	neg    eax
c0016c49:	83 d2 00             	adc    edx,0x0
c0016c4c:	83 c4 14             	add    esp,0x14
c0016c4f:	f7 da                	neg    edx
c0016c51:	5b                   	pop    ebx
c0016c52:	5e                   	pop    esi
c0016c53:	c3                   	ret    

c0016c54 <sysCallGetArgv(regs*)>:
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c5b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c5e:	85 c0                	test   eax,eax
c0016c60:	78 2b                	js     c0016c8d <sysCallGetArgv(regs*)+0x39>
c0016c62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c68:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c6b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c71:	7d 1a                	jge    c0016c8d <sysCallGetArgv(regs*)+0x39>
c0016c73:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c7a:	85 c0                	test   eax,eax
c0016c7c:	74 17                	je     c0016c95 <sysCallGetArgv(regs*)+0x41>
c0016c7e:	51                   	push   ecx
c0016c7f:	51                   	push   ecx
c0016c80:	50                   	push   eax
c0016c81:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016c84:	50                   	push   eax
c0016c85:	e8 d8 9a fe ff       	call   c0000762 <strcpy>
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	31 c0                	xor    eax,eax
c0016c8f:	31 d2                	xor    edx,edx
c0016c91:	83 c4 0c             	add    esp,0xc
c0016c94:	c3                   	ret    
c0016c95:	b8 01 00 00 00       	mov    eax,0x1
c0016c9a:	31 d2                	xor    edx,edx
c0016c9c:	83 c4 0c             	add    esp,0xc
c0016c9f:	c3                   	ret    

c0016ca0 <sysCallTTYName(regs*)>:
c0016ca0:	56                   	push   esi
c0016ca1:	53                   	push   ebx
c0016ca2:	50                   	push   eax
c0016ca3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ca7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016caa:	85 c0                	test   eax,eax
c0016cac:	74 4d                	je     c0016cfb <sysCallTTYName(regs*)+0x5b>
c0016cae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cb1:	83 f8 02             	cmp    eax,0x2
c0016cb4:	76 07                	jbe    c0016cbd <sysCallTTYName(regs*)+0x1d>
c0016cb6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016cbb:	75 54                	jne    c0016d11 <sysCallTTYName(regs*)+0x71>
c0016cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cc5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ccb:	85 db                	test   ebx,ebx
c0016ccd:	74 2c                	je     c0016cfb <sysCallTTYName(regs*)+0x5b>
c0016ccf:	83 ec 0c             	sub    esp,0xc
c0016cd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cd4:	53                   	push   ebx
c0016cd5:	ff 10                	call   DWORD PTR [eax]
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	84 c0                	test   al,al
c0016cdc:	74 28                	je     c0016d06 <sysCallTTYName(regs*)+0x66>
c0016cde:	50                   	push   eax
c0016cdf:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016ce5:	50                   	push   eax
c0016ce6:	53                   	push   ebx
c0016ce7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cea:	50                   	push   eax
c0016ceb:	e8 72 9a fe ff       	call   c0000762 <strcpy>
c0016cf0:	83 c4 10             	add    esp,0x10
c0016cf3:	31 c0                	xor    eax,eax
c0016cf5:	31 d2                	xor    edx,edx
c0016cf7:	59                   	pop    ecx
c0016cf8:	5b                   	pop    ebx
c0016cf9:	5e                   	pop    esi
c0016cfa:	c3                   	ret    
c0016cfb:	59                   	pop    ecx
c0016cfc:	b8 01 00 00 00       	mov    eax,0x1
c0016d01:	5b                   	pop    ebx
c0016d02:	31 d2                	xor    edx,edx
c0016d04:	5e                   	pop    esi
c0016d05:	c3                   	ret    
c0016d06:	59                   	pop    ecx
c0016d07:	b8 02 00 00 00       	mov    eax,0x2
c0016d0c:	5b                   	pop    ebx
c0016d0d:	31 d2                	xor    edx,edx
c0016d0f:	5e                   	pop    esi
c0016d10:	c3                   	ret    
c0016d11:	83 ec 0c             	sub    esp,0xc
c0016d14:	50                   	push   eax
c0016d15:	e8 55 73 ff ff       	call   c000e06f <getFromFileDescriptor(int)>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	89 c3                	mov    ebx,eax
c0016d1f:	eb aa                	jmp    c0016ccb <sysCallTTYName(regs*)+0x2b>

c0016d21 <sysCallGetEnv(regs*)>:
c0016d21:	83 ec 0c             	sub    esp,0xc
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d2b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d2e:	85 d2                	test   edx,edx
c0016d30:	75 22                	jne    c0016d54 <sysCallGetEnv(regs*)+0x33>
c0016d32:	31 c0                	xor    eax,eax
c0016d34:	31 d2                	xor    edx,edx
c0016d36:	85 c9                	test   ecx,ecx
c0016d38:	74 04                	je     c0016d3e <sysCallGetEnv(regs*)+0x1d>
c0016d3a:	83 c4 0c             	add    esp,0xc
c0016d3d:	c3                   	ret    
c0016d3e:	83 ec 0c             	sub    esp,0xc
c0016d41:	68 08 2b 02 c0       	push   0xc0022b08
c0016d46:	e8 95 99 fe ff       	call   c00006e0 <strlen>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	31 d2                	xor    edx,edx
c0016d50:	83 c4 0c             	add    esp,0xc
c0016d53:	c3                   	ret    
c0016d54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d57:	85 c9                	test   ecx,ecx
c0016d59:	74 0b                	je     c0016d66 <sysCallGetEnv(regs*)+0x45>
c0016d5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d5e:	31 c0                	xor    eax,eax
c0016d60:	31 d2                	xor    edx,edx
c0016d62:	83 c4 0c             	add    esp,0xc
c0016d65:	c3                   	ret    
c0016d66:	52                   	push   edx
c0016d67:	52                   	push   edx
c0016d68:	68 08 2b 02 c0       	push   0xc0022b08
c0016d6d:	50                   	push   eax
c0016d6e:	e8 ef 99 fe ff       	call   c0000762 <strcpy>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	eb e6                	jmp    c0016d5e <sysCallGetEnv(regs*)+0x3d>

c0016d78 <sysCallUSleep(regs*)>:
c0016d78:	57                   	push   edi
c0016d79:	56                   	push   esi
c0016d7a:	53                   	push   ebx
c0016d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7f:	52                   	push   edx
c0016d80:	52                   	push   edx
c0016d81:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016d84:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d87:	89 c8                	mov    eax,ecx
c0016d89:	89 da                	mov    edx,ebx
c0016d8b:	0f a4 c2 05          	shld   edx,eax,0x5
c0016d8f:	c1 e0 05             	shl    eax,0x5
c0016d92:	29 c8                	sub    eax,ecx
c0016d94:	19 da                	sbb    edx,ebx
c0016d96:	0f a4 c2 02          	shld   edx,eax,0x2
c0016d9a:	c1 e0 02             	shl    eax,0x2
c0016d9d:	01 c8                	add    eax,ecx
c0016d9f:	11 da                	adc    edx,ebx
c0016da1:	0f a4 c2 03          	shld   edx,eax,0x3
c0016da5:	c1 e0 03             	shl    eax,0x3
c0016da8:	52                   	push   edx
c0016da9:	50                   	push   eax
c0016daa:	e8 e0 21 00 00       	call   c0018f8f <nanoSleep(unsigned long long)>
c0016daf:	83 c4 10             	add    esp,0x10
c0016db2:	31 c0                	xor    eax,eax
c0016db4:	31 d2                	xor    edx,edx
c0016db6:	5b                   	pop    ebx
c0016db7:	5e                   	pop    esi
c0016db8:	5f                   	pop    edi
c0016db9:	c3                   	ret    

c0016dba <sysCallSpawn(regs*)>:
c0016dba:	56                   	push   esi
c0016dbb:	53                   	push   ebx
c0016dbc:	50                   	push   eax
c0016dbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016dc1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dc4:	85 c0                	test   eax,eax
c0016dc6:	75 08                	jne    c0016dd0 <sysCallSpawn(regs*)+0x16>
c0016dc8:	59                   	pop    ecx
c0016dc9:	31 c0                	xor    eax,eax
c0016dcb:	5b                   	pop    ebx
c0016dcc:	31 d2                	xor    edx,edx
c0016dce:	5e                   	pop    esi
c0016dcf:	c3                   	ret    
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	68 3b 07 00 00       	push   0x73b
c0016dd8:	e8 01 83 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016ddd:	89 c6                	mov    esi,eax
c0016ddf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016de2:	50                   	push   eax
c0016de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016de8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016deb:	50                   	push   eax
c0016dec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016def:	50                   	push   eax
c0016df0:	56                   	push   esi
c0016df1:	e8 d6 18 00 00       	call   c00186cc <Process::Process(char const*, Process*, char**)>
c0016df6:	83 c4 20             	add    esp,0x20
c0016df9:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e00:	75 c6                	jne    c0016dc8 <sysCallSpawn(regs*)+0xe>
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	56                   	push   esi
c0016e06:	e8 3d 1e 00 00       	call   c0018c48 <Process::createUserThread()>
c0016e0b:	83 c4 10             	add    esp,0x10
c0016e0e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e10:	89 c2                	mov    edx,eax
c0016e12:	c1 fa 1f             	sar    edx,0x1f
c0016e15:	59                   	pop    ecx
c0016e16:	5b                   	pop    ebx
c0016e17:	5e                   	pop    esi
c0016e18:	c3                   	ret    

c0016e19 <sysAppSettings(regs*)>:
c0016e19:	53                   	push   ebx
c0016e1a:	31 d2                	xor    edx,edx
c0016e1c:	83 ec 08             	sub    esp,0x8
c0016e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e23:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e26:	b8 01 00 00 00       	mov    eax,0x1
c0016e2b:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e31:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e37:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e3c:	75 30                	jne    c0016e6e <sysAppSettings(regs*)+0x55>
c0016e3e:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e44:	83 e0 1f             	and    eax,0x1f
c0016e47:	3c 01                	cmp    al,0x1
c0016e49:	74 28                	je     c0016e73 <sysAppSettings(regs*)+0x5a>
c0016e4b:	3c 07                	cmp    al,0x7
c0016e4d:	0f 84 be 00 00 00    	je     c0016f11 <sysAppSettings(regs*)+0xf8>
c0016e53:	84 c0                	test   al,al
c0016e55:	0f 84 da 00 00 00    	je     c0016f35 <sysAppSettings(regs*)+0x11c>
c0016e5b:	3c 08                	cmp    al,0x8
c0016e5d:	74 6d                	je     c0016ecc <sysAppSettings(regs*)+0xb3>
c0016e5f:	25 ff 00 00 00       	and    eax,0xff
c0016e64:	05 e8 03 00 00       	add    eax,0x3e8
c0016e69:	89 c2                	mov    edx,eax
c0016e6b:	c1 fa 1f             	sar    edx,0x1f
c0016e6e:	83 c4 08             	add    esp,0x8
c0016e71:	5b                   	pop    ebx
c0016e72:	c3                   	ret    
c0016e73:	50                   	push   eax
c0016e74:	68 00 01 00 00       	push   0x100
c0016e79:	6a 00                	push   0x0
c0016e7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e83:	83 c0 0c             	add    eax,0xc
c0016e86:	50                   	push   eax
c0016e87:	e8 37 98 fe ff       	call   c00006c3 <memset>
c0016e8c:	83 c4 0c             	add    esp,0xc
c0016e8f:	68 ff 00 00 00       	push   0xff
c0016e94:	53                   	push   ebx
c0016e95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e9d:	83 c0 0c             	add    eax,0xc
c0016ea0:	50                   	push   eax
c0016ea1:	e8 e7 97 fe ff       	call   c000068d <memcpy>
c0016ea6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eab:	5a                   	pop    edx
c0016eac:	59                   	pop    ecx
c0016ead:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eb0:	8d 50 0c             	lea    edx,[eax+0xc]
c0016eb3:	52                   	push   edx
c0016eb4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016eba:	53                   	push   ebx
c0016ebb:	e8 f6 62 ff ff       	call   c000d1b6 <VgaText::setTitle(char*)>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	31 c0                	xor    eax,eax
c0016ec5:	31 d2                	xor    edx,edx
c0016ec7:	83 c4 08             	add    esp,0x8
c0016eca:	5b                   	pop    ebx
c0016ecb:	c3                   	ret    
c0016ecc:	50                   	push   eax
c0016ecd:	50                   	push   eax
c0016ece:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ed4:	83 e0 0f             	and    eax,0xf
c0016ed7:	50                   	push   eax
c0016ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016edd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ee0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016ee6:	50                   	push   eax
c0016ee7:	e8 ba 62 ff ff       	call   c000d1a6 <VgaText::setTitleColour(VgaColour)>
c0016eec:	58                   	pop    eax
c0016eed:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ef3:	c1 e8 04             	shr    eax,0x4
c0016ef6:	5a                   	pop    edx
c0016ef7:	83 e0 0f             	and    eax,0xf
c0016efa:	50                   	push   eax
c0016efb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f03:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f09:	51                   	push   ecx
c0016f0a:	e8 87 62 ff ff       	call   c000d196 <VgaText::setTitleTextColour(VgaColour)>
c0016f0f:	eb af                	jmp    c0016ec0 <sysAppSettings(regs*)+0xa7>
c0016f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f19:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f1f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f25:	c0 e8 06             	shr    al,0x6
c0016f28:	83 e0 01             	and    eax,0x1
c0016f2b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f31:	31 c0                	xor    eax,eax
c0016f33:	eb 90                	jmp    c0016ec5 <sysAppSettings(regs*)+0xac>
c0016f35:	b8 02 00 00 00       	mov    eax,0x2
c0016f3a:	31 d2                	xor    edx,edx
c0016f3c:	eb 89                	jmp    c0016ec7 <sysAppSettings(regs*)+0xae>

c0016f3e <sysSetFatAttrib(regs*)>:
c0016f3e:	57                   	push   edi
c0016f3f:	56                   	push   esi
c0016f40:	53                   	push   ebx
c0016f41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f4b:	68 14 01 00 00       	push   0x114
c0016f50:	e8 89 81 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016f55:	83 c4 0c             	add    esp,0xc
c0016f58:	89 c3                	mov    ebx,eax
c0016f5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f62:	50                   	push   eax
c0016f63:	57                   	push   edi
c0016f64:	53                   	push   ebx
c0016f65:	e8 e0 87 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0016f6a:	83 c4 0c             	add    esp,0xc
c0016f6d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f70:	0f b6 d4             	movzx  edx,ah
c0016f73:	52                   	push   edx
c0016f74:	25 ff 00 00 00       	and    eax,0xff
c0016f79:	50                   	push   eax
c0016f7a:	53                   	push   ebx
c0016f7b:	e8 40 8a ff ff       	call   c000f9c0 <File::chfatattr(unsigned char, unsigned char)>
c0016f80:	89 c6                	mov    esi,eax
c0016f82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f8a:	83 c4 10             	add    esp,0x10
c0016f8d:	31 c0                	xor    eax,eax
c0016f8f:	85 f6                	test   esi,esi
c0016f91:	0f 95 c0             	setne  al
c0016f94:	5b                   	pop    ebx
c0016f95:	31 d2                	xor    edx,edx
c0016f97:	f7 d8                	neg    eax
c0016f99:	83 d2 00             	adc    edx,0x0
c0016f9c:	5e                   	pop    esi
c0016f9d:	f7 da                	neg    edx
c0016f9f:	5f                   	pop    edi
c0016fa0:	c3                   	ret    

c0016fa1 <sysPanic(regs*)>:
c0016fa1:	83 ec 18             	sub    esp,0x18
c0016fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fa8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fab:	50                   	push   eax
c0016fac:	e8 77 ea ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0016fb1:	c7 04 24 bf 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bbf
c0016fb8:	e8 6b ea ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0016fbd:	b8 01 00 00 00       	mov    eax,0x1
c0016fc2:	31 d2                	xor    edx,edx
c0016fc4:	83 c4 1c             	add    esp,0x1c
c0016fc7:	c3                   	ret    

c0016fc8 <sysPipe(regs*)>:
c0016fc8:	57                   	push   edi
c0016fc9:	56                   	push   esi
c0016fca:	53                   	push   ebx
c0016fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fcf:	83 ec 0c             	sub    esp,0xc
c0016fd2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016fd5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016fd8:	6a 20                	push   0x20
c0016fda:	e8 ff 80 ff ff       	call   c000f0de <operator new(unsigned long)>
c0016fdf:	89 c3                	mov    ebx,eax
c0016fe1:	58                   	pop    eax
c0016fe2:	5a                   	pop    edx
c0016fe3:	68 00 50 00 00       	push   0x5000
c0016fe8:	53                   	push   ebx
c0016fe9:	e8 06 5b ff ff       	call   c000caf4 <Pipe::Pipe(int)>
c0016fee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ff1:	e8 c4 6d ff ff       	call   c000ddba <UnixFile::getFileDescriptor()>
c0016ff6:	89 07                	mov    DWORD PTR [edi],eax
c0016ff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ffb:	e8 ba 6d ff ff       	call   c000ddba <UnixFile::getFileDescriptor()>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	89 06                	mov    DWORD PTR [esi],eax
c0017005:	31 d2                	xor    edx,edx
c0017007:	5b                   	pop    ebx
c0017008:	31 c0                	xor    eax,eax
c001700a:	5e                   	pop    esi
c001700b:	5f                   	pop    edi
c001700c:	c3                   	ret    

c001700d <sysGetUnixTime(regs*)>:
c001700d:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c0017012:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017018:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001701c:	e9 f1 90 ff ff       	jmp    c0010112 <Clock::timeInSecondsLocal()>

c0017021 <string_ends_with(char const*, char const*)>:
c0017021:	57                   	push   edi
c0017022:	56                   	push   esi
c0017023:	53                   	push   ebx
c0017024:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017028:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001702c:	83 ec 0c             	sub    esp,0xc
c001702f:	53                   	push   ebx
c0017030:	e8 ab 96 fe ff       	call   c00006e0 <strlen>
c0017035:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017038:	89 c6                	mov    esi,eax
c001703a:	e8 a1 96 fe ff       	call   c00006e0 <strlen>
c001703f:	83 c4 10             	add    esp,0x10
c0017042:	31 d2                	xor    edx,edx
c0017044:	39 c6                	cmp    esi,eax
c0017046:	7d 06                	jge    c001704e <string_ends_with(char const*, char const*)+0x2d>
c0017048:	5b                   	pop    ebx
c0017049:	89 d0                	mov    eax,edx
c001704b:	5e                   	pop    esi
c001704c:	5f                   	pop    edi
c001704d:	c3                   	ret    
c001704e:	52                   	push   edx
c001704f:	29 c6                	sub    esi,eax
c0017051:	52                   	push   edx
c0017052:	01 f3                	add    ebx,esi
c0017054:	57                   	push   edi
c0017055:	53                   	push   ebx
c0017056:	e8 58 97 fe ff       	call   c00007b3 <strcmp>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	31 d2                	xor    edx,edx
c0017060:	85 c0                	test   eax,eax
c0017062:	5b                   	pop    ebx
c0017063:	0f 94 c2             	sete   dl
c0017066:	5e                   	pop    esi
c0017067:	89 d0                	mov    eax,edx
c0017069:	5f                   	pop    edi
c001706a:	c3                   	ret    

c001706b <sysCallOpen(regs*)>:
c001706b:	56                   	push   esi
c001706c:	53                   	push   ebx
c001706d:	81 ec 04 01 00 00    	sub    esp,0x104
c0017073:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001707a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001707d:	85 c9                	test   ecx,ecx
c001707f:	0f 84 bb 00 00 00    	je     c0017140 <sysCallOpen(regs*)+0xd5>
c0017085:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017088:	85 c0                	test   eax,eax
c001708a:	0f 84 b0 00 00 00    	je     c0017140 <sysCallOpen(regs*)+0xd5>
c0017090:	52                   	push   edx
c0017091:	68 ce 2b 02 c0       	push   0xc0022bce
c0017096:	50                   	push   eax
c0017097:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001709b:	56                   	push   esi
c001709c:	e8 ff 84 ff ff       	call   c000f5a0 <standardiseFiles(char*, char const*, char const*)>
c00170a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00170a4:	e8 37 96 fe ff       	call   c00006e0 <strlen>
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	48                   	dec    eax
c00170ad:	74 25                	je     c00170d4 <sysCallOpen(regs*)+0x69>
c00170af:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170b2:	80 fa 2e             	cmp    dl,0x2e
c00170b5:	74 19                	je     c00170d0 <sysCallOpen(regs*)+0x65>
c00170b7:	80 fa 3a             	cmp    dl,0x3a
c00170ba:	74 14                	je     c00170d0 <sysCallOpen(regs*)+0x65>
c00170bc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170c0:	48                   	dec    eax
c00170c1:	74 11                	je     c00170d4 <sysCallOpen(regs*)+0x69>
c00170c3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170c6:	80 fa 3a             	cmp    dl,0x3a
c00170c9:	74 05                	je     c00170d0 <sysCallOpen(regs*)+0x65>
c00170cb:	80 fa 2e             	cmp    dl,0x2e
c00170ce:	75 ec                	jne    c00170bc <sysCallOpen(regs*)+0x51>
c00170d0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170d4:	51                   	push   ecx
c00170d5:	51                   	push   ecx
c00170d6:	68 d2 2b 02 c0       	push   0xc0022bd2
c00170db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170de:	50                   	push   eax
c00170df:	e8 3d ff ff ff       	call   c0017021 <string_ends_with(char const*, char const*)>
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	85 c0                	test   eax,eax
c00170e9:	75 17                	jne    c0017102 <sysCallOpen(regs*)+0x97>
c00170eb:	50                   	push   eax
c00170ec:	50                   	push   eax
c00170ed:	68 f3 2b 02 c0       	push   0xc0022bf3
c00170f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170f5:	50                   	push   eax
c00170f6:	e8 26 ff ff ff       	call   c0017021 <string_ends_with(char const*, char const*)>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	85 c0                	test   eax,eax
c0017100:	74 4d                	je     c001714f <sysCallOpen(regs*)+0xe4>
c0017102:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017105:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001710b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017112:	50                   	push   eax
c0017113:	50                   	push   eax
c0017114:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017117:	8b 10                	mov    edx,DWORD PTR [eax]
c0017119:	52                   	push   edx
c001711a:	68 d7 2b 02 c0       	push   0xc0022bd7
c001711f:	e8 ef 80 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0017124:	c7 04 24 e6 2b 02 c0 	mov    DWORD PTR [esp],0xc0022be6
c001712b:	e8 e3 80 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0017130:	83 c4 10             	add    esp,0x10
c0017133:	81 c4 04 01 00 00    	add    esp,0x104
c0017139:	31 c0                	xor    eax,eax
c001713b:	31 d2                	xor    edx,edx
c001713d:	5b                   	pop    ebx
c001713e:	5e                   	pop    esi
c001713f:	c3                   	ret    
c0017140:	81 c4 04 01 00 00    	add    esp,0x104
c0017146:	83 c8 ff             	or     eax,0xffffffff
c0017149:	83 ca ff             	or     edx,0xffffffff
c001714c:	5b                   	pop    ebx
c001714d:	5e                   	pop    esi
c001714e:	c3                   	ret    
c001714f:	50                   	push   eax
c0017150:	50                   	push   eax
c0017151:	68 d3 2b 02 c0       	push   0xc0022bd3
c0017156:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017159:	50                   	push   eax
c001715a:	e8 54 96 fe ff       	call   c00007b3 <strcmp>
c001715f:	83 c4 10             	add    esp,0x10
c0017162:	85 c0                	test   eax,eax
c0017164:	74 9c                	je     c0017102 <sysCallOpen(regs*)+0x97>
c0017166:	50                   	push   eax
c0017167:	50                   	push   eax
c0017168:	68 d2 2b 02 c0       	push   0xc0022bd2
c001716d:	56                   	push   esi
c001716e:	e8 ae fe ff ff       	call   c0017021 <string_ends_with(char const*, char const*)>
c0017173:	83 c4 10             	add    esp,0x10
c0017176:	85 c0                	test   eax,eax
c0017178:	75 88                	jne    c0017102 <sysCallOpen(regs*)+0x97>
c001717a:	52                   	push   edx
c001717b:	52                   	push   edx
c001717c:	68 f8 2b 02 c0       	push   0xc0022bf8
c0017181:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0017184:	51                   	push   ecx
c0017185:	e8 97 fe ff ff       	call   c0017021 <string_ends_with(char const*, char const*)>
c001718a:	83 c4 10             	add    esp,0x10
c001718d:	85 c0                	test   eax,eax
c001718f:	0f 85 d5 00 00 00    	jne    c001726a <sysCallOpen(regs*)+0x1ff>
c0017195:	50                   	push   eax
c0017196:	50                   	push   eax
c0017197:	68 fd 2b 02 c0       	push   0xc0022bfd
c001719c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001719f:	50                   	push   eax
c00171a0:	e8 7c fe ff ff       	call   c0017021 <string_ends_with(char const*, char const*)>
c00171a5:	83 c4 10             	add    esp,0x10
c00171a8:	85 c0                	test   eax,eax
c00171aa:	0f 85 ba 00 00 00    	jne    c001726a <sysCallOpen(regs*)+0x1ff>
c00171b0:	50                   	push   eax
c00171b1:	50                   	push   eax
c00171b2:	68 f9 2b 02 c0       	push   0xc0022bf9
c00171b7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171ba:	50                   	push   eax
c00171bb:	e8 f3 95 fe ff       	call   c00007b3 <strcmp>
c00171c0:	83 c4 10             	add    esp,0x10
c00171c3:	85 c0                	test   eax,eax
c00171c5:	0f 84 9f 00 00 00    	je     c001726a <sysCallOpen(regs*)+0x1ff>
c00171cb:	50                   	push   eax
c00171cc:	50                   	push   eax
c00171cd:	68 f8 2b 02 c0       	push   0xc0022bf8
c00171d2:	56                   	push   esi
c00171d3:	e8 49 fe ff ff       	call   c0017021 <string_ends_with(char const*, char const*)>
c00171d8:	83 c4 10             	add    esp,0x10
c00171db:	85 c0                	test   eax,eax
c00171dd:	0f 85 87 00 00 00    	jne    c001726a <sysCallOpen(regs*)+0x1ff>
c00171e3:	83 ec 0c             	sub    esp,0xc
c00171e6:	68 14 01 00 00       	push   0x114
c00171eb:	e8 ee 7e ff ff       	call   c000f0de <operator new(unsigned long)>
c00171f0:	89 c6                	mov    esi,eax
c00171f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171f7:	83 c4 0c             	add    esp,0xc
c00171fa:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00171fd:	51                   	push   ecx
c00171fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017201:	50                   	push   eax
c0017202:	56                   	push   esi
c0017203:	e8 42 85 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0017208:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	89 d0                	mov    eax,edx
c0017210:	25 ff 00 00 00       	and    eax,0xff
c0017215:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017218:	89 d0                	mov    eax,edx
c001721a:	83 e0 01             	and    eax,0x1
c001721d:	f6 c2 02             	test   dl,0x2
c0017220:	74 03                	je     c0017225 <sysCallOpen(regs*)+0x1ba>
c0017222:	83 c8 02             	or     eax,0x2
c0017225:	f6 c2 04             	test   dl,0x4
c0017228:	74 03                	je     c001722d <sysCallOpen(regs*)+0x1c2>
c001722a:	83 c8 04             	or     eax,0x4
c001722d:	f6 c2 08             	test   dl,0x8
c0017230:	74 03                	je     c0017235 <sysCallOpen(regs*)+0x1ca>
c0017232:	83 c8 0a             	or     eax,0xa
c0017235:	83 e2 10             	and    edx,0x10
c0017238:	74 03                	je     c001723d <sysCallOpen(regs*)+0x1d2>
c001723a:	83 c8 12             	or     eax,0x12
c001723d:	52                   	push   edx
c001723e:	52                   	push   edx
c001723f:	50                   	push   eax
c0017240:	56                   	push   esi
c0017241:	e8 68 85 ff ff       	call   c000f7ae <File::open(FileOpenMode)>
c0017246:	83 c4 10             	add    esp,0x10
c0017249:	85 c0                	test   eax,eax
c001724b:	0f 85 ef fe ff ff    	jne    c0017140 <sysCallOpen(regs*)+0xd5>
c0017251:	83 ec 0c             	sub    esp,0xc
c0017254:	56                   	push   esi
c0017255:	e8 60 6b ff ff       	call   c000ddba <UnixFile::getFileDescriptor()>
c001725a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001725d:	89 02                	mov    DWORD PTR [edx],eax
c001725f:	c1 f8 1f             	sar    eax,0x1f
c0017262:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017265:	e9 c6 fe ff ff       	jmp    c0017130 <sysCallOpen(regs*)+0xc5>
c001726a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001726d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017273:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001727a:	e9 b4 fe ff ff       	jmp    c0017133 <sysCallOpen(regs*)+0xc8>

c001727f <setupSystemCalls()>:
c001727f:	c7 05 c0 51 02 c0 7a 64 01 c0 	mov    DWORD PTR ds:0xc00251c0,0xc001647a
c0017289:	c7 05 c4 51 02 c0 8d 62 01 c0 	mov    DWORD PTR ds:0xc00251c4,0xc001628d
c0017293:	c7 05 c8 51 02 c0 a2 63 01 c0 	mov    DWORD PTR ds:0xc00251c8,0xc00163a2
c001729d:	c7 05 cc 51 02 c0 f7 63 01 c0 	mov    DWORD PTR ds:0xc00251cc,0xc00163f7
c00172a7:	c7 05 d0 51 02 c0 3a 63 01 c0 	mov    DWORD PTR ds:0xc00251d0,0xc001633a
c00172b1:	c7 05 d4 51 02 c0 94 64 01 c0 	mov    DWORD PTR ds:0xc00251d4,0xc0016494
c00172bb:	c7 05 d8 51 02 c0 53 66 01 c0 	mov    DWORD PTR ds:0xc00251d8,0xc0016653
c00172c5:	c7 05 dc 51 02 c0 79 66 01 c0 	mov    DWORD PTR ds:0xc00251dc,0xc0016679
c00172cf:	c7 05 e4 51 02 c0 e3 69 01 c0 	mov    DWORD PTR ds:0xc00251e4,0xc00169e3
c00172d9:	c7 05 e0 51 02 c0 6b 70 01 c0 	mov    DWORD PTR ds:0xc00251e0,0xc001706b
c00172e3:	c7 05 e8 51 02 c0 66 6a 01 c0 	mov    DWORD PTR ds:0xc00251e8,0xc0016a66
c00172ed:	c7 05 ec 51 02 c0 e8 66 01 c0 	mov    DWORD PTR ds:0xc00251ec,0xc00166e8
c00172f7:	c7 05 f0 51 02 c0 a4 64 01 c0 	mov    DWORD PTR ds:0xc00251f0,0xc00164a4
c0017301:	c7 05 f4 51 02 c0 a9 64 01 c0 	mov    DWORD PTR ds:0xc00251f4,0xc00164a9
c001730b:	c7 05 f8 51 02 c0 d1 6a 01 c0 	mov    DWORD PTR ds:0xc00251f8,0xc0016ad1
c0017315:	c7 05 fc 51 02 c0 2c 6b 01 c0 	mov    DWORD PTR ds:0xc00251fc,0xc0016b2c
c001731f:	c7 05 00 52 02 c0 d3 67 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc00167d3
c0017329:	c7 05 04 52 02 c0 39 68 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc0016839
c0017333:	c7 05 08 52 02 c0 62 69 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0016962
c001733d:	c7 05 0c 52 02 c0 ae 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc00164ae
c0017347:	c7 05 10 52 02 c0 8d 6b 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0016b8d
c0017351:	c7 05 14 52 02 c0 b8 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164b8
c001735b:	c7 05 18 52 02 c0 bf 64 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc00164bf
c0017365:	c7 05 1c 52 02 c0 ae 6b 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc0016bae
c001736f:	c7 05 20 52 02 c0 01 6c 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc0016c01
c0017379:	c7 05 24 52 02 c0 c6 64 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc00164c6
c0017383:	c7 05 28 52 02 c0 54 6c 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016c54
c001738d:	c7 05 2c 52 02 c0 9b 66 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc001669b
c0017397:	c7 05 30 52 02 c0 a0 6c 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc0016ca0
c00173a1:	c7 05 34 52 02 c0 7b 67 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc001677b
c00173ab:	c7 05 38 52 02 c0 78 6d 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016d78
c00173b5:	c7 05 3c 52 02 c0 b4 68 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc00168b4
c00173bf:	c7 05 40 52 02 c0 ba 6d 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc0016dba
c00173c9:	c7 05 44 52 02 c0 21 6d 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc0016d21
c00173d3:	c7 05 48 52 02 c0 19 6e 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc0016e19
c00173dd:	c7 05 4c 52 02 c0 da 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164da
c00173e7:	c7 05 50 52 02 c0 3d 65 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc001653d
c00173f1:	c7 05 54 52 02 c0 85 65 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc0016585
c00173fb:	c7 05 58 52 02 c0 3e 6f 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc0016f3e
c0017405:	c7 05 5c 52 02 c0 a1 6f 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016fa1
c001740f:	c7 05 60 52 02 c0 d8 65 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc00165d8
c0017419:	c7 05 64 52 02 c0 c8 6f 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc0016fc8
c0017423:	c7 05 68 52 02 c0 0d 70 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc001700d
c001742d:	c7 05 6c 52 02 c0 a5 62 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00162a5
c0017437:	c3                   	ret    

c0017438 <systemCall(regs*, void*)>:
c0017438:	53                   	push   ebx
c0017439:	83 ec 08             	sub    esp,0x8
c001743c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017440:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017443:	83 f8 7f             	cmp    eax,0x7f
c0017446:	77 16                	ja     c001745e <systemCall(regs*, void*)+0x26>
c0017448:	8b 14 85 c0 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae40]
c001744f:	85 d2                	test   edx,edx
c0017451:	74 0b                	je     c001745e <systemCall(regs*, void*)+0x26>
c0017453:	83 ec 0c             	sub    esp,0xc
c0017456:	53                   	push   ebx
c0017457:	ff d2                	call   edx
c0017459:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001745c:	eb 0d                	jmp    c001746b <systemCall(regs*, void*)+0x33>
c001745e:	52                   	push   edx
c001745f:	52                   	push   edx
c0017460:	50                   	push   eax
c0017461:	68 02 2c 02 c0       	push   0xc0022c02
c0017466:	e8 a8 7d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001746b:	83 c4 10             	add    esp,0x10
c001746e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017473:	83 c4 08             	add    esp,0x8
c0017476:	31 d2                	xor    edx,edx
c0017478:	5b                   	pop    ebx
c0017479:	c3                   	ret    

c001747a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001747a:	55                   	push   ebp
c001747b:	89 e5                	mov    ebp,esp
c001747d:	57                   	push   edi
c001747e:	56                   	push   esi
c001747f:	53                   	push   ebx
c0017480:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017486:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0017489:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001748c:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0017493:	74 27                	je     c00174bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0017495:	85 c0                	test   eax,eax
c0017497:	74 23                	je     c00174bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0017499:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001749d:	75 1d                	jne    c00174bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c001749f:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174a2:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174a8:	89 d1                	mov    ecx,edx
c00174aa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174b0:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174b6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174b9:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174c2:	05 ff 0f 00 00       	add    eax,0xfff
c00174c7:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174cd:	6a 01                	push   0x1
c00174cf:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174d5:	e8 1e 6d ff ff       	call   c000e1f8 <Virt::allocateKernelVirtualPages(int)>
c00174da:	83 c4 10             	add    esp,0x10
c00174dd:	89 c6                	mov    esi,eax
c00174df:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00174e5:	0f 86 21 01 00 00    	jbe    c001760c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00174eb:	c1 eb 0c             	shr    ebx,0xc
c00174ee:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00174f8:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00174fe:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017501:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017504:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001750a:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001750d:	29 d8                	sub    eax,ebx
c001750f:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017515:	0f 83 f4 00 00 00    	jae    c001760f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c001751b:	83 ec 0c             	sub    esp,0xc
c001751e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017521:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017527:	3d 00 10 00 00       	cmp    eax,0x1000
c001752c:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001752e:	52                   	push   edx
c001752f:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017535:	52                   	push   edx
c0017536:	76 05                	jbe    c001753d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017538:	b8 00 10 00 00       	mov    eax,0x1000
c001753d:	31 d2                	xor    edx,edx
c001753f:	52                   	push   edx
c0017540:	50                   	push   eax
c0017541:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017544:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017547:	83 c4 20             	add    esp,0x20
c001754a:	85 c0                	test   eax,eax
c001754c:	74 1f                	je     c001756d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c001754e:	51                   	push   ecx
c001754f:	51                   	push   ecx
c0017550:	50                   	push   eax
c0017551:	68 16 2c 02 c0       	push   0xc0022c16
c0017556:	e8 b8 7c ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001755b:	89 34 24             	mov    DWORD PTR [esp],esi
c001755e:	e8 e2 6f ff ff       	call   c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	31 c0                	xor    eax,eax
c0017568:	e9 7c 01 00 00       	jmp    c00176e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c001756d:	e8 bf 14 00 00       	call   c0018a31 <lockScheduler()>
c0017572:	e8 40 50 ff ff       	call   c000c5b7 <Phys::allocatePage()>
c0017577:	6a 07                	push   0x7
c0017579:	56                   	push   esi
c001757a:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017580:	50                   	push   eax
c0017581:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017587:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001758a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017590:	e8 2f 73 ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017595:	83 c4 0c             	add    esp,0xc
c0017598:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001759e:	6a 00                	push   0x0
c00175a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175a6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175a9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175af:	e8 6e 71 ff ff       	call   c000e722 <VAS::mapOtherVASIn(bool, VAS*)>
c00175b4:	58                   	pop    eax
c00175b5:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175bb:	5a                   	pop    edx
c00175bc:	68 07 04 00 00       	push   0x407
c00175c1:	53                   	push   ebx
c00175c2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175c8:	50                   	push   eax
c00175c9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175cf:	6a 00                	push   0x0
c00175d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175d9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175df:	e8 9c 76 ff ff       	call   c000ec80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175e4:	83 c4 1c             	add    esp,0x1c
c00175e7:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00175ed:	68 00 10 00 00       	push   0x1000
c00175f2:	50                   	push   eax
c00175f3:	56                   	push   esi
c00175f4:	e8 94 90 fe ff       	call   c000068d <memcpy>
c00175f9:	e8 35 14 00 00       	call   c0018a33 <unlockScheduler()>
c00175fe:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017604:	83 c4 10             	add    esp,0x10
c0017607:	e9 f5 fe ff ff       	jmp    c0017501 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c001760c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001760f:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017619:	0f 86 bc 00 00 00    	jbe    c00176db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c001761f:	e8 0d 14 00 00       	call   c0018a31 <lockScheduler()>
c0017624:	51                   	push   ecx
c0017625:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001762b:	6a 00                	push   0x0
c001762d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017632:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017635:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001763b:	e8 e2 70 ff ff       	call   c000e722 <VAS::mapOtherVASIn(bool, VAS*)>
c0017640:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017646:	c1 e8 0c             	shr    eax,0xc
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017652:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001765c:	e8 56 4f ff ff       	call   c000c5b7 <Phys::allocatePage()>
c0017661:	6a 07                	push   0x7
c0017663:	56                   	push   esi
c0017664:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001766a:	50                   	push   eax
c001766b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017671:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017674:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001767a:	e8 45 72 ff ff       	call   c000e8c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001767f:	58                   	pop    eax
c0017680:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0017686:	5a                   	pop    edx
c0017687:	68 07 04 00 00       	push   0x407
c001768c:	53                   	push   ebx
c001768d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017693:	50                   	push   eax
c0017694:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001769a:	6a 00                	push   0x0
c001769c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176aa:	e8 d1 75 ff ff       	call   c000ec80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176af:	83 c4 1c             	add    esp,0x1c
c00176b2:	68 00 10 00 00       	push   0x1000
c00176b7:	6a 00                	push   0x0
c00176b9:	56                   	push   esi
c00176ba:	e8 04 90 fe ff       	call   c00006c3 <memset>
c00176bf:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176ce:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176d4:	77 86                	ja     c001765c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176d6:	e8 58 13 00 00       	call   c0018a33 <unlockScheduler()>
c00176db:	83 ec 0c             	sub    esp,0xc
c00176de:	56                   	push   esi
c00176df:	e8 61 6e ff ff       	call   c000e545 <Virt::freeKernelVirtualPages(unsigned long)>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	b0 01                	mov    al,0x1
c00176e9:	8d 65 f4             	lea    esp,[ebp-0xc]
c00176ec:	5b                   	pop    ebx
c00176ed:	5e                   	pop    esi
c00176ee:	5f                   	pop    edi
c00176ef:	5d                   	pop    ebp
c00176f0:	c3                   	ret    

c00176f1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00176f1:	55                   	push   ebp
c00176f2:	57                   	push   edi
c00176f3:	56                   	push   esi
c00176f4:	53                   	push   ebx
c00176f5:	83 ec 48             	sub    esp,0x48
c00176f8:	68 14 01 00 00       	push   0x114
c00176fd:	e8 dc 79 ff ff       	call   c000f0de <operator new(unsigned long)>
c0017702:	83 c4 0c             	add    esp,0xc
c0017705:	89 c6                	mov    esi,eax
c0017707:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001770b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001770f:	50                   	push   eax
c0017710:	e8 35 80 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0017715:	58                   	pop    eax
c0017716:	5a                   	pop    edx
c0017717:	6a 01                	push   0x1
c0017719:	56                   	push   esi
c001771a:	e8 8f 80 ff ff       	call   c000f7ae <File::open(FileOpenMode)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	85 c0                	test   eax,eax
c0017724:	0f 85 47 01 00 00    	jne    c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001772a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017732:	83 ec 0c             	sub    esp,0xc
c0017735:	6a 34                	push   0x34
c0017737:	e8 a5 48 ff ff       	call   c000bfe1 <malloc>
c001773c:	89 c3                	mov    ebx,eax
c001773e:	58                   	pop    eax
c001773f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017741:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017745:	57                   	push   edi
c0017746:	53                   	push   ebx
c0017747:	6a 00                	push   0x0
c0017749:	6a 34                	push   0x34
c001774b:	56                   	push   esi
c001774c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001774f:	83 c4 20             	add    esp,0x20
c0017752:	85 c0                	test   eax,eax
c0017754:	0f 85 17 01 00 00    	jne    c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001775a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017760:	0f 85 0b 01 00 00    	jne    c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017766:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017769:	85 c0                	test   eax,eax
c001776b:	0f 84 00 01 00 00    	je     c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017771:	31 d2                	xor    edx,edx
c0017773:	55                   	push   ebp
c0017774:	52                   	push   edx
c0017775:	50                   	push   eax
c0017776:	56                   	push   esi
c0017777:	e8 f0 80 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c001777c:	83 c4 10             	add    esp,0x10
c001777f:	85 c0                	test   eax,eax
c0017781:	0f 85 ea 00 00 00    	jne    c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017787:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001778a:	83 ec 0c             	sub    esp,0xc
c001778d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017791:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017795:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017799:	0f af c2             	imul   eax,edx
c001779c:	50                   	push   eax
c001779d:	e8 3f 48 ff ff       	call   c000bfe1 <malloc>
c00177a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177ad:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177b1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177b5:	0f af c2             	imul   eax,edx
c00177b8:	99                   	cdq    
c00177b9:	52                   	push   edx
c00177ba:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177bc:	50                   	push   eax
c00177bd:	56                   	push   esi
c00177be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177c4:	83 c4 20             	add    esp,0x20
c00177c7:	85 c0                	test   eax,eax
c00177c9:	0f 84 a2 00 00 00    	je     c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177cf:	31 d2                	xor    edx,edx
c00177d1:	51                   	push   ecx
c00177d2:	52                   	push   edx
c00177d3:	50                   	push   eax
c00177d4:	56                   	push   esi
c00177d5:	e8 92 80 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c00177da:	83 c4 10             	add    esp,0x10
c00177dd:	85 c0                	test   eax,eax
c00177df:	0f 85 8c 00 00 00    	jne    c0017871 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177e5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00177e9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00177ed:	0f af c2             	imul   eax,edx
c00177f0:	83 ec 0c             	sub    esp,0xc
c00177f3:	31 ed                	xor    ebp,ebp
c00177f5:	50                   	push   eax
c00177f6:	e8 e6 47 ff ff       	call   c000bfe1 <malloc>
c00177fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017806:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001780a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001780e:	0f af c2             	imul   eax,edx
c0017811:	99                   	cdq    
c0017812:	52                   	push   edx
c0017813:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017815:	50                   	push   eax
c0017816:	56                   	push   esi
c0017817:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001781a:	83 c4 20             	add    esp,0x20
c001781d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017825:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017829:	0f 86 80 00 00 00    	jbe    c00178af <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001782f:	0f b7 fd             	movzx  edi,bp
c0017832:	c1 e7 05             	shl    edi,0x5
c0017835:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017839:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001783c:	75 6b                	jne    c00178a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001783e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017845:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017848:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001784c:	52                   	push   edx
c001784d:	31 d2                	xor    edx,edx
c001784f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017852:	52                   	push   edx
c0017853:	50                   	push   eax
c0017854:	56                   	push   esi
c0017855:	e8 12 80 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c001785a:	83 c4 10             	add    esp,0x10
c001785d:	85 c0                	test   eax,eax
c001785f:	74 17                	je     c0017878 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017861:	83 ec 0c             	sub    esp,0xc
c0017864:	68 41 2c 02 c0       	push   0xc0022c41
c0017869:	e8 a5 79 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001786e:	83 c4 10             	add    esp,0x10
c0017871:	31 c0                	xor    eax,eax
c0017873:	e9 87 00 00 00       	jmp    c00178ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017878:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017881:	50                   	push   eax
c0017882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017886:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001788a:	56                   	push   esi
c001788b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001788f:	e8 e6 fb ff ff       	call   c001747a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017894:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017898:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001789c:	83 c4 20             	add    esp,0x20
c001789f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178a3:	73 04                	jae    c00178a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178a9:	45                   	inc    ebp
c00178aa:	e9 76 ff ff ff       	jmp    c0017825 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178bb:	83 ec 0c             	sub    esp,0xc
c00178be:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178c9:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178cf:	05 00 10 00 00       	add    eax,0x1000
c00178d4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178db:	e8 11 47 ff ff       	call   c000bff1 <free>
c00178e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178e3:	e8 09 47 ff ff       	call   c000bff1 <free>
c00178e8:	58                   	pop    eax
c00178e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ed:	e8 ff 46 ff ff       	call   c000bff1 <free>
c00178f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00178f5:	e8 12 7f ff ff       	call   c000f80c <File::close()>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	b0 01                	mov    al,0x1
c00178ff:	83 c4 3c             	add    esp,0x3c
c0017902:	5b                   	pop    ebx
c0017903:	5e                   	pop    esi
c0017904:	5f                   	pop    edi
c0017905:	5d                   	pop    ebp
c0017906:	c3                   	ret    

c0017907 <Thr::runtimeReferenceHelper()>:
c0017907:	83 ec 18             	sub    esp,0x18
c001790a:	68 49 2c 02 c0       	push   0xc0022c49
c001790f:	e8 ff 78 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0017914:	fa                   	cli    
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	eb fe                	jmp    c0017918 <Thr::runtimeReferenceHelper()+0x11>

c001791a <Thr::getAddressOfKernelSymbol(char const*)>:
c001791a:	57                   	push   edi
c001791b:	56                   	push   esi
c001791c:	53                   	push   ebx
c001791d:	31 db                	xor    ebx,ebx
c001791f:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c0017925:	7e 3c                	jle    c0017963 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017927:	8b 34 9d e0 5a 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda520]
c001792e:	31 ff                	xor    edi,edi
c0017930:	39 3c 9d e0 59 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda620],edi
c0017937:	7e 27                	jle    c0017960 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017939:	50                   	push   eax
c001793a:	50                   	push   eax
c001793b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001793f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017941:	03 04 9d 60 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda5a0]
c0017948:	50                   	push   eax
c0017949:	e8 65 8e fe ff       	call   c00007b3 <strcmp>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	85 c0                	test   eax,eax
c0017953:	75 05                	jne    c001795a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017955:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017958:	eb 0b                	jmp    c0017965 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001795a:	83 c6 10             	add    esi,0x10
c001795d:	47                   	inc    edi
c001795e:	eb d0                	jmp    c0017930 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017960:	43                   	inc    ebx
c0017961:	eb bc                	jmp    c001791f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017963:	31 c0                	xor    eax,eax
c0017965:	5b                   	pop    ebx
c0017966:	5e                   	pop    esi
c0017967:	5f                   	pop    edi
c0017968:	c3                   	ret    

c0017969 <Thr::loadKernelSymbolTable(char const*)>:
c0017969:	55                   	push   ebp
c001796a:	57                   	push   edi
c001796b:	56                   	push   esi
c001796c:	53                   	push   ebx
c001796d:	83 ec 68             	sub    esp,0x68
c0017970:	8b 35 b4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bb4
c0017976:	68 14 01 00 00       	push   0x114
c001797b:	e8 5e 77 ff ff       	call   c000f0de <operator new(unsigned long)>
c0017980:	83 c4 0c             	add    esp,0xc
c0017983:	89 c3                	mov    ebx,eax
c0017985:	56                   	push   esi
c0017986:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001798a:	50                   	push   eax
c001798b:	e8 ba 7d ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0017990:	5e                   	pop    esi
c0017991:	5f                   	pop    edi
c0017992:	6a 01                	push   0x1
c0017994:	53                   	push   ebx
c0017995:	e8 14 7e ff ff       	call   c000f7ae <File::open(FileOpenMode)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	31 d2                	xor    edx,edx
c001799f:	85 c0                	test   eax,eax
c00179a1:	0f 85 79 02 00 00    	jne    c0017c20 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179a7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179af:	83 ec 0c             	sub    esp,0xc
c00179b2:	6a 34                	push   0x34
c00179b4:	e8 28 46 ff ff       	call   c000bfe1 <malloc>
c00179b9:	59                   	pop    ecx
c00179ba:	89 c7                	mov    edi,eax
c00179bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179be:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179c2:	56                   	push   esi
c00179c3:	57                   	push   edi
c00179c4:	6a 00                	push   0x0
c00179c6:	6a 34                	push   0x34
c00179c8:	53                   	push   ebx
c00179c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179cc:	83 c4 20             	add    esp,0x20
c00179cf:	85 c0                	test   eax,eax
c00179d1:	74 17                	je     c00179ea <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179d3:	83 ec 0c             	sub    esp,0xc
c00179d6:	68 6b 2c 02 c0       	push   0xc0022c6b
c00179db:	e8 48 e0 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	31 d2                	xor    edx,edx
c00179e5:	e9 36 02 00 00       	jmp    c0017c20 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179ea:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00179f0:	75 e1                	jne    c00179d3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00179f2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00179f5:	85 c0                	test   eax,eax
c00179f7:	74 da                	je     c00179d3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00179f9:	52                   	push   edx
c00179fa:	31 d2                	xor    edx,edx
c00179fc:	52                   	push   edx
c00179fd:	50                   	push   eax
c00179fe:	53                   	push   ebx
c00179ff:	e8 68 7e ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	85 c0                	test   eax,eax
c0017a09:	75 c8                	jne    c00179d3 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a0b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a0f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a13:	0f af c2             	imul   eax,edx
c0017a16:	83 ec 0c             	sub    esp,0xc
c0017a19:	31 ed                	xor    ebp,ebp
c0017a1b:	50                   	push   eax
c0017a1c:	e8 c0 45 ff ff       	call   c000bfe1 <malloc>
c0017a21:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a2c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a30:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a34:	0f af c2             	imul   eax,edx
c0017a37:	99                   	cdq    
c0017a38:	52                   	push   edx
c0017a39:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a3b:	50                   	push   eax
c0017a3c:	53                   	push   ebx
c0017a3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a40:	83 c4 20             	add    esp,0x20
c0017a43:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a4b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a53:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a5b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a63:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a67:	0f 86 aa 00 00 00    	jbe    c0017b17 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a6d:	0f b7 f5             	movzx  esi,bp
c0017a70:	6b f6 28             	imul   esi,esi,0x28
c0017a73:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a77:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a7e:	50                   	push   eax
c0017a7f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017a83:	6b c0 28             	imul   eax,eax,0x28
c0017a86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017a8a:	8b 16                	mov    edx,DWORD PTR [esi]
c0017a8c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017a90:	89 d0                	mov    eax,edx
c0017a92:	31 d2                	xor    edx,edx
c0017a94:	52                   	push   edx
c0017a95:	50                   	push   eax
c0017a96:	53                   	push   ebx
c0017a97:	e8 d0 7d ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017a9c:	83 c4 0c             	add    esp,0xc
c0017a9f:	6a 20                	push   0x20
c0017aa1:	6a 00                	push   0x0
c0017aa3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017aa7:	52                   	push   edx
c0017aa8:	e8 16 8c fe ff       	call   c00006c3 <memset>
c0017aad:	58                   	pop    eax
c0017aae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ab0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ab4:	51                   	push   ecx
c0017ab5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017ab9:	52                   	push   edx
c0017aba:	6a 00                	push   0x0
c0017abc:	6a 1f                	push   0x1f
c0017abe:	53                   	push   ebx
c0017abf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ac2:	83 c4 18             	add    esp,0x18
c0017ac5:	68 82 2c 02 c0       	push   0xc0022c82
c0017aca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ace:	52                   	push   edx
c0017acf:	e8 df 8c fe ff       	call   c00007b3 <strcmp>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	85 c0                	test   eax,eax
c0017ad9:	75 0f                	jne    c0017aea <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017adb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ade:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ae2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ae6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017aea:	50                   	push   eax
c0017aeb:	50                   	push   eax
c0017aec:	68 8a 2c 02 c0       	push   0xc0022c8a
c0017af1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017af5:	50                   	push   eax
c0017af6:	e8 b8 8c fe ff       	call   c00007b3 <strcmp>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	85 c0                	test   eax,eax
c0017b00:	75 0f                	jne    c0017b11 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b11:	45                   	inc    ebp
c0017b12:	e9 4c ff ff ff       	jmp    c0017a63 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b1c:	75 10                	jne    c0017b2e <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b1e:	83 ec 0c             	sub    esp,0xc
c0017b21:	68 92 2c 02 c0       	push   0xc0022c92
c0017b26:	e8 fd de ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b33:	75 10                	jne    c0017b45 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b35:	83 ec 0c             	sub    esp,0xc
c0017b38:	68 92 2c 02 c0       	push   0xc0022c92
c0017b3d:	e8 e6 de ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0017b42:	83 c4 10             	add    esp,0x10
c0017b45:	31 d2                	xor    edx,edx
c0017b47:	50                   	push   eax
c0017b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b4c:	52                   	push   edx
c0017b4d:	50                   	push   eax
c0017b4e:	53                   	push   ebx
c0017b4f:	e8 18 7d ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017b54:	5a                   	pop    edx
c0017b55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b59:	e8 83 44 ff ff       	call   c000bfe1 <malloc>
c0017b5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b66:	89 c1                	mov    ecx,eax
c0017b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b70:	5e                   	pop    esi
c0017b71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b73:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b77:	55                   	push   ebp
c0017b78:	51                   	push   ecx
c0017b79:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017b7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b85:	53                   	push   ebx
c0017b86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b89:	83 c4 14             	add    esp,0x14
c0017b8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b90:	e8 4c 44 ff ff       	call   c000bfe1 <malloc>
c0017b95:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b98:	89 c6                	mov    esi,eax
c0017b9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b9c:	56                   	push   esi
c0017b9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba5:	53                   	push   ebx
c0017ba6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ba9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bad:	8b 15 60 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b60
c0017bb3:	c1 e8 04             	shr    eax,0x4
c0017bb6:	83 c4 1c             	add    esp,0x1c
c0017bb9:	89 04 95 e0 59 02 c0 	mov    DWORD PTR [edx*4-0x3ffda620],eax
c0017bc0:	31 d2                	xor    edx,edx
c0017bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bc6:	52                   	push   edx
c0017bc7:	50                   	push   eax
c0017bc8:	53                   	push   ebx
c0017bc9:	e8 9e 7c ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017bce:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bd1:	31 d2                	xor    edx,edx
c0017bd3:	56                   	push   esi
c0017bd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd8:	52                   	push   edx
c0017bd9:	50                   	push   eax
c0017bda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bdc:	53                   	push   ebx
c0017bdd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017be0:	83 c4 14             	add    esp,0x14
c0017be3:	53                   	push   ebx
c0017be4:	e8 23 7c ff ff       	call   c000f80c <File::close()>
c0017be9:	5d                   	pop    ebp
c0017bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bee:	e8 fe 43 ff ff       	call   c000bff1 <free>
c0017bf3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017bf6:	e8 f6 43 ff ff       	call   c000bff1 <free>
c0017bfb:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c0017c00:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c04:	8d 50 01             	lea    edx,[eax+0x1]
c0017c07:	89 15 60 5b 02 c0    	mov    DWORD PTR ds:0xc0025b60,edx
c0017c0d:	89 0c 85 e0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda520],ecx
c0017c14:	89 34 85 60 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5a0],esi
c0017c1b:	83 c4 10             	add    esp,0x10
c0017c1e:	b2 01                	mov    dl,0x1
c0017c20:	83 c4 5c             	add    esp,0x5c
c0017c23:	88 d0                	mov    al,dl
c0017c25:	5b                   	pop    ebx
c0017c26:	5e                   	pop    esi
c0017c27:	5f                   	pop    edi
c0017c28:	5d                   	pop    ebp
c0017c29:	c3                   	ret    

c0017c2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c2a:	55                   	push   ebp
c0017c2b:	57                   	push   edi
c0017c2c:	56                   	push   esi
c0017c2d:	53                   	push   ebx
c0017c2e:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c34:	8b 1d b4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bb4
c0017c3a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c41:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c45:	68 14 01 00 00       	push   0x114
c0017c4a:	e8 8f 74 ff ff       	call   c000f0de <operator new(unsigned long)>
c0017c4f:	83 c4 0c             	add    esp,0xc
c0017c52:	53                   	push   ebx
c0017c53:	89 c7                	mov    edi,eax
c0017c55:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c5c:	50                   	push   eax
c0017c5d:	e8 e8 7a ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0017c62:	5e                   	pop    esi
c0017c63:	5d                   	pop    ebp
c0017c64:	6a 01                	push   0x1
c0017c66:	57                   	push   edi
c0017c67:	e8 42 7b ff ff       	call   c000f7ae <File::open(FileOpenMode)>
c0017c6c:	83 c4 10             	add    esp,0x10
c0017c6f:	85 c0                	test   eax,eax
c0017c71:	0f 85 10 07 00 00    	jne    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c77:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c7f:	83 ec 0c             	sub    esp,0xc
c0017c82:	6a 34                	push   0x34
c0017c84:	e8 58 43 ff ff       	call   c000bfe1 <malloc>
c0017c89:	5b                   	pop    ebx
c0017c8a:	89 c5                	mov    ebp,eax
c0017c8c:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c8e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017c92:	53                   	push   ebx
c0017c93:	55                   	push   ebp
c0017c94:	6a 00                	push   0x0
c0017c96:	6a 34                	push   0x34
c0017c98:	57                   	push   edi
c0017c99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c9c:	83 c4 20             	add    esp,0x20
c0017c9f:	85 c0                	test   eax,eax
c0017ca1:	0f 85 e0 06 00 00    	jne    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ca7:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cae:	0f 85 d3 06 00 00    	jne    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cb4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017cb7:	85 c0                	test   eax,eax
c0017cb9:	0f 84 c8 06 00 00    	je     c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cbf:	31 d2                	xor    edx,edx
c0017cc1:	51                   	push   ecx
c0017cc2:	52                   	push   edx
c0017cc3:	50                   	push   eax
c0017cc4:	57                   	push   edi
c0017cc5:	e8 a2 7b ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	85 c0                	test   eax,eax
c0017ccf:	0f 85 b2 06 00 00    	jne    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017cd8:	83 ec 0c             	sub    esp,0xc
c0017cdb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cdf:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017ce3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017ce7:	0f af c2             	imul   eax,edx
c0017cea:	50                   	push   eax
c0017ceb:	e8 f1 42 ff ff       	call   c000bfe1 <malloc>
c0017cf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cfb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017cff:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d03:	0f af c2             	imul   eax,edx
c0017d06:	99                   	cdq    
c0017d07:	52                   	push   edx
c0017d08:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d0a:	50                   	push   eax
c0017d0b:	57                   	push   edi
c0017d0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d0f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d12:	83 c4 20             	add    esp,0x20
c0017d15:	85 c0                	test   eax,eax
c0017d17:	0f 84 6a 06 00 00    	je     c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d1d:	52                   	push   edx
c0017d1e:	31 d2                	xor    edx,edx
c0017d20:	52                   	push   edx
c0017d21:	50                   	push   eax
c0017d22:	57                   	push   edi
c0017d23:	e8 44 7b ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	85 c0                	test   eax,eax
c0017d2d:	0f 85 54 06 00 00    	jne    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d33:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d37:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d3b:	0f af c2             	imul   eax,edx
c0017d3e:	83 ec 0c             	sub    esp,0xc
c0017d41:	31 f6                	xor    esi,esi
c0017d43:	50                   	push   eax
c0017d44:	e8 98 42 ff ff       	call   c000bfe1 <malloc>
c0017d49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d54:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d58:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d5c:	0f af c2             	imul   eax,edx
c0017d5f:	99                   	cdq    
c0017d60:	52                   	push   edx
c0017d61:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d63:	50                   	push   eax
c0017d64:	57                   	push   edi
c0017d65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d68:	83 c4 20             	add    esp,0x20
c0017d6b:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d6f:	0f 86 af 00 00 00    	jbe    c0017e24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d75:	0f b7 de             	movzx  ebx,si
c0017d78:	c1 e3 05             	shl    ebx,0x5
c0017d7b:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017d7f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017d82:	0f 85 96 00 00 00    	jne    c0017e1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017d88:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017d8b:	31 d2                	xor    edx,edx
c0017d8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d91:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d98:	50                   	push   eax
c0017d99:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017d9c:	52                   	push   edx
c0017d9d:	50                   	push   eax
c0017d9e:	57                   	push   edi
c0017d9f:	e8 c8 7a ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	85 c0                	test   eax,eax
c0017da9:	0f 85 d8 05 00 00    	jne    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017daf:	52                   	push   edx
c0017db0:	52                   	push   edx
c0017db1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017db5:	68 ac 2c 02 c0       	push   0xc0022cac
c0017dba:	e8 54 74 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0017dbf:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017dc6:	31 d2                	xor    edx,edx
c0017dc8:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017dcc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dd4:	59                   	pop    ecx
c0017dd5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017dd7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017dde:	50                   	push   eax
c0017ddf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017de3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017de7:	52                   	push   edx
c0017de8:	50                   	push   eax
c0017de9:	57                   	push   edi
c0017dea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ded:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017df0:	83 c4 18             	add    esp,0x18
c0017df3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017df6:	50                   	push   eax
c0017df7:	68 d0 2c 02 c0       	push   0xc0022cd0
c0017dfc:	e8 12 74 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0017e01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e04:	83 c4 0c             	add    esp,0xc
c0017e07:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e0a:	50                   	push   eax
c0017e0b:	6a 00                	push   0x0
c0017e0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e11:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e15:	50                   	push   eax
c0017e16:	e8 a8 88 fe ff       	call   c00006c3 <memset>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	46                   	inc    esi
c0017e1f:	e9 47 ff ff ff       	jmp    c0017d6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e24:	50                   	push   eax
c0017e25:	31 db                	xor    ebx,ebx
c0017e27:	68 00 01 00 00       	push   0x100
c0017e2c:	6a 00                	push   0x0
c0017e2e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e32:	50                   	push   eax
c0017e33:	e8 8b 88 fe ff       	call   c00006c3 <memset>
c0017e38:	83 c4 0c             	add    esp,0xc
c0017e3b:	68 00 01 00 00       	push   0x100
c0017e40:	6a 00                	push   0x0
c0017e42:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e49:	50                   	push   eax
c0017e4a:	e8 74 88 fe ff       	call   c00006c3 <memset>
c0017e4f:	83 c4 10             	add    esp,0x10
c0017e52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e5a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e62:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e6a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e72:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e7a:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017e7e:	0f 86 2f 01 00 00    	jbe    c0017fb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017e84:	0f b7 f3             	movzx  esi,bx
c0017e87:	6b f6 28             	imul   esi,esi,0x28
c0017e8a:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017e8e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017e91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e95:	50                   	push   eax
c0017e96:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017e9a:	6b d2 28             	imul   edx,edx,0x28
c0017e9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ea1:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ea3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ea7:	31 d2                	xor    edx,edx
c0017ea9:	52                   	push   edx
c0017eaa:	50                   	push   eax
c0017eab:	57                   	push   edi
c0017eac:	e8 bb 79 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017eb1:	83 c4 0c             	add    esp,0xc
c0017eb4:	6a 20                	push   0x20
c0017eb6:	6a 00                	push   0x0
c0017eb8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ebf:	51                   	push   ecx
c0017ec0:	e8 fe 87 fe ff       	call   c00006c3 <memset>
c0017ec5:	58                   	pop    eax
c0017ec6:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ec8:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ecc:	52                   	push   edx
c0017ecd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ed4:	51                   	push   ecx
c0017ed5:	6a 00                	push   0x0
c0017ed7:	6a 1f                	push   0x1f
c0017ed9:	57                   	push   edi
c0017eda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017edd:	83 c4 1c             	add    esp,0x1c
c0017ee0:	6a 09                	push   0x9
c0017ee2:	68 ed 2c 02 c0       	push   0xc0022ced
c0017ee7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017eee:	51                   	push   ecx
c0017eef:	e8 36 87 fe ff       	call   c000062a <memcmp>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	85 c0                	test   eax,eax
c0017ef9:	75 21                	jne    c0017f1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017efb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017eff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f07:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f0b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f0e:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f15:	89 c8                	mov    eax,ecx
c0017f17:	40                   	inc    eax
c0017f18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f1c:	50                   	push   eax
c0017f1d:	6a 09                	push   0x9
c0017f1f:	68 f7 2c 02 c0       	push   0xc0022cf7
c0017f24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f2b:	50                   	push   eax
c0017f2c:	e8 f9 86 fe ff       	call   c000062a <memcmp>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	85 c0                	test   eax,eax
c0017f36:	75 21                	jne    c0017f59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f40:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f44:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f48:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f4b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f52:	89 c8                	mov    eax,ecx
c0017f54:	40                   	inc    eax
c0017f55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f59:	50                   	push   eax
c0017f5a:	50                   	push   eax
c0017f5b:	68 82 2c 02 c0       	push   0xc0022c82
c0017f60:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f67:	50                   	push   eax
c0017f68:	e8 46 88 fe ff       	call   c00007b3 <strcmp>
c0017f6d:	83 c4 10             	add    esp,0x10
c0017f70:	85 c0                	test   eax,eax
c0017f72:	75 0f                	jne    c0017f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f83:	50                   	push   eax
c0017f84:	50                   	push   eax
c0017f85:	68 8a 2c 02 c0       	push   0xc0022c8a
c0017f8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f91:	50                   	push   eax
c0017f92:	e8 1c 88 fe ff       	call   c00007b3 <strcmp>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	85 c0                	test   eax,eax
c0017f9c:	75 0f                	jne    c0017fad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017f9e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fa1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fad:	43                   	inc    ebx
c0017fae:	e9 c7 fe ff ff       	jmp    c0017e7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fb3:	31 d2                	xor    edx,edx
c0017fb5:	50                   	push   eax
c0017fb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fba:	52                   	push   edx
c0017fbb:	50                   	push   eax
c0017fbc:	57                   	push   edi
c0017fbd:	e8 aa 78 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0017fc2:	5a                   	pop    edx
c0017fc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fc7:	e8 15 40 ff ff       	call   c000bfe1 <malloc>
c0017fcc:	31 d2                	xor    edx,edx
c0017fce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017fd2:	59                   	pop    ecx
c0017fd3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fd5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017fd9:	53                   	push   ebx
c0017fda:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fe2:	52                   	push   edx
c0017fe3:	50                   	push   eax
c0017fe4:	57                   	push   edi
c0017fe5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017fe8:	83 c4 14             	add    esp,0x14
c0017feb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fef:	e8 ed 3f ff ff       	call   c000bfe1 <malloc>
c0017ff4:	31 d2                	xor    edx,edx
c0017ff6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ffa:	83 c4 0c             	add    esp,0xc
c0017ffd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018001:	52                   	push   edx
c0018002:	50                   	push   eax
c0018003:	57                   	push   edi
c0018004:	e8 63 78 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c0018009:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001800c:	31 d2                	xor    edx,edx
c001800e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018012:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018016:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018018:	52                   	push   edx
c0018019:	50                   	push   eax
c001801a:	57                   	push   edi
c001801b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001801e:	83 c4 20             	add    esp,0x20
c0018021:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018029:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001802d:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0018031:	0f 84 54 03 00 00    	je     c001838b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0018037:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001803e:	31 d2                	xor    edx,edx
c0018040:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018044:	c1 e8 03             	shr    eax,0x3
c0018047:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001804b:	50                   	push   eax
c001804c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018050:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0018054:	52                   	push   edx
c0018055:	50                   	push   eax
c0018056:	57                   	push   edi
c0018057:	e8 10 78 ff ff       	call   c000f86c <File::seek(unsigned long long)>
c001805c:	58                   	pop    eax
c001805d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018061:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018068:	e8 74 3f ff ff       	call   c000bfe1 <malloc>
c001806d:	31 d2                	xor    edx,edx
c001806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018073:	58                   	pop    eax
c0018074:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018076:	8d 44 24 58          	lea    eax,[esp+0x58]
c001807a:	50                   	push   eax
c001807b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001807f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018083:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001808a:	52                   	push   edx
c001808b:	50                   	push   eax
c001808c:	57                   	push   edi
c001808d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018090:	83 c4 20             	add    esp,0x20
c0018093:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001809b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001809f:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180a3:	0f 8d c6 02 00 00    	jge    c001836f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180b1:	31 db                	xor    ebx,ebx
c00180b3:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180be:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180c6:	c1 e8 08             	shr    eax,0x8
c00180c9:	89 c6                	mov    esi,eax
c00180cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180cf:	c1 e6 04             	shl    esi,0x4
c00180d2:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180dd:	85 c0                	test   eax,eax
c00180df:	0f 85 17 01 00 00    	jne    c00181fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180e5:	83 ec 0c             	sub    esp,0xc
c00180e8:	b3 01                	mov    bl,0x1
c00180ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180ee:	03 06                	add    eax,DWORD PTR [esi]
c00180f0:	50                   	push   eax
c00180f1:	e8 24 f8 ff ff       	call   c001791a <Thr::getAddressOfKernelSymbol(char const*)>
c00180f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180fa:	83 c4 10             	add    esp,0x10
c00180fd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018102:	0f 85 f4 00 00 00    	jne    c00181fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018108:	50                   	push   eax
c0018109:	50                   	push   eax
c001810a:	68 01 2d 02 c0       	push   0xc0022d01
c001810f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018113:	03 06                	add    eax,DWORD PTR [esi]
c0018115:	50                   	push   eax
c0018116:	e8 98 86 fe ff       	call   c00007b3 <strcmp>
c001811b:	83 c4 10             	add    esp,0x10
c001811e:	85 c0                	test   eax,eax
c0018120:	75 0a                	jne    c001812c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018122:	b8 ec f4 01 c0       	mov    eax,0xc001f4ec
c0018127:	e9 ca 00 00 00       	jmp    c00181f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001812c:	50                   	push   eax
c001812d:	50                   	push   eax
c001812e:	68 0b 2d 02 c0       	push   0xc0022d0b
c0018133:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018137:	03 06                	add    eax,DWORD PTR [esi]
c0018139:	50                   	push   eax
c001813a:	e8 74 86 fe ff       	call   c00007b3 <strcmp>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	85 c0                	test   eax,eax
c0018144:	75 0a                	jne    c0018150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018146:	b8 20 f2 01 c0       	mov    eax,0xc001f220
c001814b:	e9 a6 00 00 00       	jmp    c00181f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018150:	53                   	push   ebx
c0018151:	53                   	push   ebx
c0018152:	68 14 2d 02 c0       	push   0xc0022d14
c0018157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001815b:	03 06                	add    eax,DWORD PTR [esi]
c001815d:	50                   	push   eax
c001815e:	e8 50 86 fe ff       	call   c00007b3 <strcmp>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	85 c0                	test   eax,eax
c0018168:	75 0a                	jne    c0018174 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001816a:	b8 ec f5 01 c0       	mov    eax,0xc001f5ec
c001816f:	e9 82 00 00 00       	jmp    c00181f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018174:	51                   	push   ecx
c0018175:	51                   	push   ecx
c0018176:	68 1e 2d 02 c0       	push   0xc0022d1e
c001817b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001817f:	03 06                	add    eax,DWORD PTR [esi]
c0018181:	50                   	push   eax
c0018182:	e8 2c 86 fe ff       	call   c00007b3 <strcmp>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	85 c0                	test   eax,eax
c001818c:	74 63                	je     c00181f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001818e:	50                   	push   eax
c001818f:	50                   	push   eax
c0018190:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018194:	03 06                	add    eax,DWORD PTR [esi]
c0018196:	50                   	push   eax
c0018197:	68 27 2d 02 c0       	push   0xc0022d27
c001819c:	e8 72 70 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00181a1:	58                   	pop    eax
c00181a2:	5a                   	pop    edx
c00181a3:	68 41 2d 02 c0       	push   0xc0022d41
c00181a8:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181af:	53                   	push   ebx
c00181b0:	e8 ad 85 fe ff       	call   c0000762 <strcpy>
c00181b5:	59                   	pop    ecx
c00181b6:	58                   	pop    eax
c00181b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181bb:	03 06                	add    eax,DWORD PTR [esi]
c00181bd:	50                   	push   eax
c00181be:	53                   	push   ebx
c00181bf:	e8 55 86 fe ff       	call   c0000819 <strcat>
c00181c4:	58                   	pop    eax
c00181c5:	5a                   	pop    edx
c00181c6:	68 d7 2d 02 c0       	push   0xc0022dd7
c00181cb:	53                   	push   ebx
c00181cc:	e8 48 86 fe ff       	call   c0000819 <strcat>
c00181d1:	83 c4 10             	add    esp,0x10
c00181d4:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181d9:	0f 84 4b 01 00 00    	je     c001832a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181df:	83 ec 0c             	sub    esp,0xc
c00181e2:	53                   	push   ebx
c00181e3:	e8 40 d8 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c00181e8:	83 c4 10             	add    esp,0x10
c00181eb:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00181ef:	eb 0b                	jmp    c00181fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00181f1:	b8 6c f3 01 c0       	mov    eax,0xc001f36c
c00181f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00181fa:	b3 01                	mov    bl,0x1
c00181fc:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018201:	0f 85 80 00 00 00    	jne    c0018287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018207:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001820e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018212:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018216:	01 ce                	add    esi,ecx
c0018218:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018220:	0f 94 c2             	sete   dl
c0018223:	8b 06                	mov    eax,DWORD PTR [esi]
c0018225:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001822d:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018232:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018236:	84 db                	test   bl,bl
c0018238:	74 31                	je     c001826b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001823a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001823e:	01 c3                	add    ebx,eax
c0018240:	84 d2                	test   dl,dl
c0018242:	75 0a                	jne    c001824e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018244:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018248:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001824c:	76 32                	jbe    c0018280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001824e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018253:	0f 84 d1 00 00 00    	je     c001832a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018259:	83 ec 0c             	sub    esp,0xc
c001825c:	68 58 2d 02 c0       	push   0xc0022d58
c0018261:	e8 c2 d7 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0018266:	83 c4 10             	add    esp,0x10
c0018269:	eb 15                	jmp    c0018280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001826b:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c001826e:	84 d2                	test   dl,dl
c0018270:	75 0e                	jne    c0018280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018272:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018276:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001827a:	77 04                	ja     c0018280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001827c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018280:	89 1e                	mov    DWORD PTR [esi],ebx
c0018282:	e9 df 00 00 00       	jmp    c0018366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018287:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001828c:	75 6e                	jne    c00182fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001828e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018295:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0018299:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001829d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182a5:	74 17                	je     c00182be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182a7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182af:	74 0d                	je     c00182be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182b1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182b5:	83 e8 04             	sub    eax,0x4
c00182b8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182bc:	76 17                	jbe    c00182d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182be:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182c3:	74 65                	je     c001832a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182c5:	83 ec 0c             	sub    esp,0xc
c00182c8:	68 74 2d 02 c0       	push   0xc0022d74
c00182cd:	e8 56 d7 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	8b 16                	mov    edx,DWORD PTR [esi]
c00182d7:	84 db                	test   bl,bl
c00182d9:	74 13                	je     c00182ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182df:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00182e6:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00182ea:	01 d0                	add    eax,edx
c00182ec:	eb 06                	jmp    c00182f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c00182ee:	89 d0                	mov    eax,edx
c00182f0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00182f4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00182f8:	89 06                	mov    DWORD PTR [esi],eax
c00182fa:	eb 6a                	jmp    c0018366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00182fc:	50                   	push   eax
c00182fd:	50                   	push   eax
c00182fe:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018303:	50                   	push   eax
c0018304:	68 90 2d 02 c0       	push   0xc0022d90
c0018309:	e8 05 6f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001830e:	83 c4 10             	add    esp,0x10
c0018311:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018316:	74 12                	je     c001832a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018318:	83 ec 0c             	sub    esp,0xc
c001831b:	68 9b 2d 02 c0       	push   0xc0022d9b
c0018320:	e8 03 d7 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0018325:	83 c4 10             	add    esp,0x10
c0018328:	eb 3c                	jmp    c0018366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001832a:	83 ec 0c             	sub    esp,0xc
c001832d:	57                   	push   edi
c001832e:	e8 d9 74 ff ff       	call   c000f80c <File::close()>
c0018333:	8b 07                	mov    eax,DWORD PTR [edi]
c0018335:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018338:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001833b:	59                   	pop    ecx
c001833c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018340:	e8 ac 3c ff ff       	call   c000bff1 <free>
c0018345:	5b                   	pop    ebx
c0018346:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001834a:	e8 a2 3c ff ff       	call   c000bff1 <free>
c001834f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018352:	e8 9a 3c ff ff       	call   c000bff1 <free>
c0018357:	5e                   	pop    esi
c0018358:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001835c:	e8 90 3c ff ff       	call   c000bff1 <free>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	eb 21                	jmp    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018366:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001836a:	e9 2c fd ff ff       	jmp    c001809b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001836f:	83 ec 0c             	sub    esp,0xc
c0018372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018376:	e8 76 3c ff ff       	call   c000bff1 <free>
c001837b:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001837f:	83 c4 10             	add    esp,0x10
c0018382:	e9 a2 fc ff ff       	jmp    c0018029 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018387:	31 c0                	xor    eax,eax
c0018389:	eb 32                	jmp    c00183bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001838b:	83 ec 0c             	sub    esp,0xc
c001838e:	57                   	push   edi
c001838f:	e8 78 74 ff ff       	call   c000f80c <File::close()>
c0018394:	8b 07                	mov    eax,DWORD PTR [edi]
c0018396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018399:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001839c:	58                   	pop    eax
c001839d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183a1:	e8 4b 3c ff ff       	call   c000bff1 <free>
c00183a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183a9:	e8 43 3c ff ff       	call   c000bff1 <free>
c00183ae:	5a                   	pop    edx
c00183af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183b3:	e8 39 3c ff ff       	call   c000bff1 <free>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	b0 01                	mov    al,0x1
c00183bd:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183c3:	5b                   	pop    ebx
c00183c4:	5e                   	pop    esi
c00183c5:	5f                   	pop    edi
c00183c6:	5d                   	pop    ebp
c00183c7:	c3                   	ret    

c00183c8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183c8:	56                   	push   esi
c00183c9:	31 d2                	xor    edx,edx
c00183cb:	53                   	push   ebx
c00183cc:	8b 1d c0 53 02 c0    	mov    ebx,DWORD PTR ds:0xc00253c0
c00183d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183d6:	39 d3                	cmp    ebx,edx
c00183d8:	7e 1b                	jle    c00183f5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183da:	8b 04 95 e0 55 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaa20]
c00183e1:	39 c8                	cmp    eax,ecx
c00183e3:	77 0d                	ja     c00183f2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00183e5:	8b 34 95 e0 53 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdac20]
c00183ec:	01 c6                	add    esi,eax
c00183ee:	39 ce                	cmp    esi,ecx
c00183f0:	77 05                	ja     c00183f7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00183f2:	42                   	inc    edx
c00183f3:	eb e1                	jmp    c00183d6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00183f5:	31 c0                	xor    eax,eax
c00183f7:	5b                   	pop    ebx
c00183f8:	5e                   	pop    esi
c00183f9:	c3                   	ret    

c00183fa <Thr::getDriverNameFromAddress(unsigned long)>:
c00183fa:	53                   	push   ebx
c00183fb:	31 c0                	xor    eax,eax
c00183fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018401:	8b 1d c0 53 02 c0    	mov    ebx,DWORD PTR ds:0xc00253c0
c0018407:	39 c3                	cmp    ebx,eax
c0018409:	7e 22                	jle    c001842d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001840b:	8b 14 85 e0 55 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaa20]
c0018412:	39 ca                	cmp    edx,ecx
c0018414:	77 14                	ja     c001842a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018416:	03 14 85 e0 53 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdac20]
c001841d:	39 ca                	cmp    edx,ecx
c001841f:	76 09                	jbe    c001842a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018421:	8b 04 85 e0 57 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda820]
c0018428:	eb 05                	jmp    c001842f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001842a:	40                   	inc    eax
c001842b:	eb da                	jmp    c0018407 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001842d:	31 c0                	xor    eax,eax
c001842f:	5b                   	pop    ebx
c0018430:	c3                   	ret    

c0018431 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018431:	53                   	push   ebx
c0018432:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018436:	53                   	push   ebx
c0018437:	e8 8c ff ff ff       	call   c00183c8 <Thr::getDriverBaseFromAddress(unsigned long)>
c001843c:	5a                   	pop    edx
c001843d:	31 d2                	xor    edx,edx
c001843f:	85 c0                	test   eax,eax
c0018441:	74 04                	je     c0018447 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018443:	89 da                	mov    edx,ebx
c0018445:	29 c2                	sub    edx,eax
c0018447:	89 d0                	mov    eax,edx
c0018449:	5b                   	pop    ebx
c001844a:	c3                   	ret    

c001844b <Thr::loadDLL(char const*, bool)>:
c001844b:	55                   	push   ebp
c001844c:	57                   	push   edi
c001844d:	56                   	push   esi
c001844e:	53                   	push   ebx
c001844f:	81 ec 34 01 00 00    	sub    esp,0x134
c0018455:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001845c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018463:	56                   	push   esi
c0018464:	68 b3 2d 02 c0       	push   0xc0022db3
c0018469:	e8 a5 6d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001846e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018475:	e8 64 6c ff ff       	call   c000f0de <operator new(unsigned long)>
c001847a:	83 c4 0c             	add    esp,0xc
c001847d:	89 c3                	mov    ebx,eax
c001847f:	ff 35 b4 5b 02 c0    	push   DWORD PTR ds:0xc0025bb4
c0018485:	56                   	push   esi
c0018486:	50                   	push   eax
c0018487:	e8 be 72 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c001848c:	83 c4 0c             	add    esp,0xc
c001848f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018493:	50                   	push   eax
c0018494:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018498:	50                   	push   eax
c0018499:	53                   	push   ebx
c001849a:	e8 bb 75 ff ff       	call   c000fa5a <File::stat(unsigned long long*, bool*)>
c001849f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184af:	75 0a                	jne    c00184bb <Thr::loadDLL(char const*, bool)+0x70>
c00184b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184b5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184b9:	75 3c                	jne    c00184f7 <Thr::loadDLL(char const*, bool)+0xac>
c00184bb:	89 e8                	mov    eax,ebp
c00184bd:	84 c0                	test   al,al
c00184bf:	0f 84 3d 01 00 00    	je     c0018602 <Thr::loadDLL(char const*, bool)+0x1b7>
c00184c5:	50                   	push   eax
c00184c6:	50                   	push   eax
c00184c7:	68 c4 2d 02 c0       	push   0xc0022dc4
c00184cc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184d0:	53                   	push   ebx
c00184d1:	e8 8c 82 fe ff       	call   c0000762 <strcpy>
c00184d6:	58                   	pop    eax
c00184d7:	5a                   	pop    edx
c00184d8:	56                   	push   esi
c00184d9:	53                   	push   ebx
c00184da:	e8 3a 83 fe ff       	call   c0000819 <strcat>
c00184df:	59                   	pop    ecx
c00184e0:	5f                   	pop    edi
c00184e1:	68 d7 2d 02 c0       	push   0xc0022dd7
c00184e6:	53                   	push   ebx
c00184e7:	e8 2d 83 fe ff       	call   c0000819 <strcat>
c00184ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184ef:	e8 34 d5 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	e8 89 5e ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c00184fc:	51                   	push   ecx
c00184fd:	6a 03                	push   0x3
c00184ff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018503:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018507:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001850d:	83 d3 00             	adc    ebx,0x0
c0018510:	89 ca                	mov    edx,ecx
c0018512:	89 d1                	mov    ecx,edx
c0018514:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018518:	51                   	push   ecx
c0018519:	50                   	push   eax
c001851a:	e8 a7 64 ff ff       	call   c000e9c6 <VAS::allocatePages(int, int)>
c001851f:	89 34 24             	mov    DWORD PTR [esp],esi
c0018522:	89 c3                	mov    ebx,eax
c0018524:	e8 b7 81 fe ff       	call   c00006e0 <strlen>
c0018529:	8b 3d c0 53 02 c0    	mov    edi,DWORD PTR ds:0xc00253c0
c001852f:	40                   	inc    eax
c0018530:	89 04 24             	mov    DWORD PTR [esp],eax
c0018533:	e8 a9 3a ff ff       	call   c000bfe1 <malloc>
c0018538:	89 04 bd e0 57 02 c0 	mov    DWORD PTR [edi*4-0x3ffda820],eax
c001853f:	5f                   	pop    edi
c0018540:	58                   	pop    eax
c0018541:	a1 c0 53 02 c0       	mov    eax,ds:0xc00253c0
c0018546:	56                   	push   esi
c0018547:	ff 34 85 e0 57 02 c0 	push   DWORD PTR [eax*4-0x3ffda820]
c001854e:	e8 0f 82 fe ff       	call   c0000762 <strcpy>
c0018553:	a1 c0 53 02 c0       	mov    eax,ds:0xc00253c0
c0018558:	8d 50 01             	lea    edx,[eax+0x1]
c001855b:	89 1c 85 e0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa20],ebx
c0018562:	89 15 c0 53 02 c0    	mov    DWORD PTR ds:0xc00253c0,edx
c0018568:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001856c:	83 c4 0c             	add    esp,0xc
c001856f:	89 14 85 e0 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac20],edx
c0018576:	6a 01                	push   0x1
c0018578:	53                   	push   ebx
c0018579:	56                   	push   esi
c001857a:	e8 ab f6 ff ff       	call   c0017c2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001857f:	83 c4 10             	add    esp,0x10
c0018582:	89 c7                	mov    edi,eax
c0018584:	fe c8                	dec    al
c0018586:	74 16                	je     c001859e <Thr::loadDLL(char const*, bool)+0x153>
c0018588:	89 e8                	mov    eax,ebp
c001858a:	84 c0                	test   al,al
c001858c:	74 10                	je     c001859e <Thr::loadDLL(char const*, bool)+0x153>
c001858e:	83 ec 0c             	sub    esp,0xc
c0018591:	68 d9 2d 02 c0       	push   0xc0022dd9
c0018596:	e8 8d d4 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	31 f6                	xor    esi,esi
c00185a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185a8:	05 ff 0f 00 00       	add    eax,0xfff
c00185ad:	83 d2 00             	adc    edx,0x0
c00185b0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185b4:	c1 ea 0c             	shr    edx,0xc
c00185b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185bf:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185c3:	ba 00 00 00 00       	mov    edx,0x0
c00185c8:	89 d0                	mov    eax,edx
c00185ca:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185ce:	73 2c                	jae    c00185fc <Thr::loadDLL(char const*, bool)+0x1b1>
c00185d0:	e8 b0 5d ff ff       	call   c000e385 <Virt::getAKernelVAS()>
c00185d5:	89 f5                	mov    ebp,esi
c00185d7:	c1 e5 0c             	shl    ebp,0xc
c00185da:	52                   	push   edx
c00185db:	52                   	push   edx
c00185dc:	01 dd                	add    ebp,ebx
c00185de:	55                   	push   ebp
c00185df:	50                   	push   eax
c00185e0:	e8 41 5f ff ff       	call   c000e526 <VAS::getPageTableEntry(unsigned long)>
c00185e5:	83 c4 10             	add    esp,0x10
c00185e8:	f6 00 60             	test   BYTE PTR [eax],0x60
c00185eb:	75 0c                	jne    c00185f9 <Thr::loadDLL(char const*, bool)+0x1ae>
c00185ed:	83 ec 0c             	sub    esp,0xc
c00185f0:	55                   	push   ebp
c00185f1:	e8 34 3f ff ff       	call   c000c52a <Phys::freePage(unsigned long)>
c00185f6:	83 c4 10             	add    esp,0x10
c00185f9:	46                   	inc    esi
c00185fa:	eb a4                	jmp    c00185a0 <Thr::loadDLL(char const*, bool)+0x155>
c00185fc:	89 f8                	mov    eax,edi
c00185fe:	84 c0                	test   al,al
c0018600:	75 02                	jne    c0018604 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018602:	31 db                	xor    ebx,ebx
c0018604:	81 c4 2c 01 00 00    	add    esp,0x12c
c001860a:	89 d8                	mov    eax,ebx
c001860c:	5b                   	pop    ebx
c001860d:	5e                   	pop    esi
c001860e:	5f                   	pop    edi
c001860f:	5d                   	pop    ebp
c0018610:	c3                   	ret    

c0018611 <Thr::executeDLL(unsigned long, void*)>:
c0018611:	56                   	push   esi
c0018612:	53                   	push   ebx
c0018613:	51                   	push   ecx
c0018614:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018618:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001861c:	85 db                	test   ebx,ebx
c001861e:	75 10                	jne    c0018630 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	68 f8 2d 02 c0       	push   0xc0022df8
c0018628:	e8 fb d3 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001862d:	83 c4 10             	add    esp,0x10
c0018630:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018634:	5a                   	pop    edx
c0018635:	89 d8                	mov    eax,ebx
c0018637:	5b                   	pop    ebx
c0018638:	5e                   	pop    esi
c0018639:	ff e0                	jmp    eax
c001863b:	90                   	nop

c001863c <changeTSS>:
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	e8 78 c2 ff ff       	call   c00148bc <thisCPU()>
c0018644:	52                   	push   edx
c0018645:	05 7c 11 00 00       	add    eax,0x117c
c001864a:	52                   	push   edx
c001864b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018651:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018654:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018659:	c1 e1 15             	shl    ecx,0x15
c001865c:	29 ca                	sub    edx,ecx
c001865e:	52                   	push   edx
c001865f:	50                   	push   eax
c0018660:	e8 6d 54 ff ff       	call   c000dad2 <TSS::setESP(unsigned long)>
c0018665:	83 c4 1c             	add    esp,0x1c
c0018668:	c3                   	ret    
c0018669:	90                   	nop

c001866a <Process::addArgs(char**)>:
c001866a:	57                   	push   edi
c001866b:	56                   	push   esi
c001866c:	53                   	push   ebx
c001866d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018671:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018675:	85 ff                	test   edi,edi
c0018677:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018681:	74 45                	je     c00186c8 <Process::addArgs(char**)+0x5e>
c0018683:	8b 07                	mov    eax,DWORD PTR [edi]
c0018685:	85 c0                	test   eax,eax
c0018687:	74 3f                	je     c00186c8 <Process::addArgs(char**)+0x5e>
c0018689:	31 db                	xor    ebx,ebx
c001868b:	83 ec 0c             	sub    esp,0xc
c001868e:	50                   	push   eax
c001868f:	e8 4c 80 fe ff       	call   c00006e0 <strlen>
c0018694:	40                   	inc    eax
c0018695:	89 04 24             	mov    DWORD PTR [esp],eax
c0018698:	e8 44 39 ff ff       	call   c000bfe1 <malloc>
c001869d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186a4:	5a                   	pop    edx
c00186a5:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186a8:	59                   	pop    ecx
c00186a9:	43                   	inc    ebx
c00186aa:	52                   	push   edx
c00186ab:	50                   	push   eax
c00186ac:	e8 b1 80 fe ff       	call   c0000762 <strcpy>
c00186b1:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	41                   	inc    ecx
c00186bb:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186c1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186c4:	85 c0                	test   eax,eax
c00186c6:	75 c3                	jne    c001868b <Process::addArgs(char**)+0x21>
c00186c8:	5b                   	pop    ebx
c00186c9:	5e                   	pop    esi
c00186ca:	5f                   	pop    edi
c00186cb:	c3                   	ret    

c00186cc <Process::Process(char const*, Process*, char**)>:
c00186cc:	56                   	push   esi
c00186cd:	53                   	push   ebx
c00186ce:	83 ec 14             	sub    esp,0x14
c00186d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186d5:	05 0c 02 00 00       	add    eax,0x20c
c00186da:	bb 07 00 00 00       	mov    ebx,0x7
c00186df:	89 c6                	mov    esi,eax
c00186e1:	85 db                	test   ebx,ebx
c00186e3:	78 12                	js     c00186f7 <Process::Process(char const*, Process*, char**)+0x2b>
c00186e5:	83 ec 0c             	sub    esp,0xc
c00186e8:	56                   	push   esi
c00186e9:	e8 4c 77 00 00       	call   c001fe3a <ThreadControlBlock::ThreadControlBlock()>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	83 c6 63             	add    esi,0x63
c00186f4:	4b                   	dec    ebx
c00186f5:	eb ea                	jmp    c00186e1 <Process::Process(char const*, Process*, char**)+0x15>
c00186f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186fb:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018706:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001870f:	a1 84 41 02 c0       	mov    eax,ds:0xc0024184
c0018714:	8d 50 01             	lea    edx,[eax+0x1]
c0018717:	89 15 84 41 02 c0    	mov    DWORD PTR ds:0xc0024184,edx
c001871d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018721:	89 02                	mov    DWORD PTR [edx],eax
c0018723:	83 ec 0c             	sub    esp,0xc
c0018726:	6a 10                	push   0x10
c0018728:	e8 b1 69 ff ff       	call   c000f0de <operator new(unsigned long)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	89 c3                	mov    ebx,eax
c0018732:	83 ec 08             	sub    esp,0x8
c0018735:	6a 00                	push   0x0
c0018737:	53                   	push   ebx
c0018738:	e8 35 66 ff ff       	call   c000ed72 <VAS::VAS(bool)>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018744:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001874a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001874e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018760:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018770:	85 c0                	test   eax,eax
c0018772:	74 42                	je     c00187b6 <Process::Process(char const*, Process*, char**)+0xea>
c0018774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018778:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001877e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018788:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001878e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018792:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018798:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001879e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a2:	05 0c 01 00 00       	add    eax,0x10c
c00187a7:	83 ec 08             	sub    esp,0x8
c00187aa:	52                   	push   edx
c00187ab:	50                   	push   eax
c00187ac:	e8 b1 7f fe ff       	call   c0000762 <strcpy>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	eb 5c                	jmp    c0018812 <Process::Process(char const*, Process*, char**)+0x146>
c00187b6:	83 ec 0c             	sub    esp,0xc
c00187b9:	68 60 12 00 00       	push   0x1260
c00187be:	e8 1b 69 ff ff       	call   c000f0de <operator new(unsigned long)>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	89 c3                	mov    ebx,eax
c00187c8:	83 ec 08             	sub    esp,0x8
c00187cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187cf:	53                   	push   ebx
c00187d0:	e8 fb 4f ff ff       	call   c000d7d0 <VgaText::VgaText(char const*)>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187dc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00187ec:	83 ec 0c             	sub    esp,0xc
c00187ef:	50                   	push   eax
c00187f0:	e8 da 43 ff ff       	call   c000cbcf <addToTerminalCycle(VgaText*)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fc:	05 0c 01 00 00       	add    eax,0x10c
c0018801:	83 ec 08             	sub    esp,0x8
c0018804:	68 22 2e 02 c0       	push   0xc0022e22
c0018809:	50                   	push   eax
c001880a:	e8 53 7f fe ff       	call   c0000762 <strcpy>
c001880f:	83 c4 10             	add    esp,0x10
c0018812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018816:	83 c0 0c             	add    eax,0xc
c0018819:	83 ec 08             	sub    esp,0x8
c001881c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018820:	50                   	push   eax
c0018821:	e8 3c 7f fe ff       	call   c0000762 <strcpy>
c0018826:	83 c4 10             	add    esp,0x10
c0018829:	83 ec 08             	sub    esp,0x8
c001882c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018830:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018834:	e8 31 fe ff ff       	call   c001866a <Process::addArgs(char**)>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	83 ec 08             	sub    esp,0x8
c001883f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018843:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018847:	e8 a5 ee ff ff       	call   c00176f1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001884c:	83 c4 10             	add    esp,0x10
c001884f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018853:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018857:	83 f0 01             	xor    eax,0x1
c001885a:	88 c2                	mov    dl,al
c001885c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018860:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018866:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001886a:	25 ff 00 00 00       	and    eax,0xff
c001886f:	83 ec 08             	sub    esp,0x8
c0018872:	50                   	push   eax
c0018873:	68 20 2f 02 c0       	push   0xc0022f20
c0018878:	e8 96 69 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001887d:	83 c4 10             	add    esp,0x10
c0018880:	90                   	nop
c0018881:	83 c4 14             	add    esp,0x14
c0018884:	5b                   	pop    ebx
c0018885:	5e                   	pop    esi
c0018886:	c3                   	ret    
c0018887:	90                   	nop

c0018888 <Process::Process(bool, char const*, Process*, char**)>:
c0018888:	56                   	push   esi
c0018889:	53                   	push   ebx
c001888a:	83 ec 14             	sub    esp,0x14
c001888d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018891:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018899:	05 0c 02 00 00       	add    eax,0x20c
c001889e:	bb 07 00 00 00       	mov    ebx,0x7
c00188a3:	89 c6                	mov    esi,eax
c00188a5:	85 db                	test   ebx,ebx
c00188a7:	78 12                	js     c00188bb <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188a9:	83 ec 0c             	sub    esp,0xc
c00188ac:	56                   	push   esi
c00188ad:	e8 88 75 00 00       	call   c001fe3a <ThreadControlBlock::ThreadControlBlock()>
c00188b2:	83 c4 10             	add    esp,0x10
c00188b5:	83 c6 63             	add    esi,0x63
c00188b8:	4b                   	dec    ebx
c00188b9:	eb ea                	jmp    c00188a5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188bf:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ca:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188d3:	a1 84 41 02 c0       	mov    eax,ds:0xc0024184
c00188d8:	8d 50 01             	lea    edx,[eax+0x1]
c00188db:	89 15 84 41 02 c0    	mov    DWORD PTR ds:0xc0024184,edx
c00188e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188e5:	89 02                	mov    DWORD PTR [edx],eax
c00188e7:	83 ec 0c             	sub    esp,0xc
c00188ea:	6a 10                	push   0x10
c00188ec:	e8 ed 67 ff ff       	call   c000f0de <operator new(unsigned long)>
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	89 c3                	mov    ebx,eax
c00188f6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188fa:	25 ff 00 00 00       	and    eax,0xff
c00188ff:	83 ec 08             	sub    esp,0x8
c0018902:	50                   	push   eax
c0018903:	53                   	push   ebx
c0018904:	e8 69 64 ff ff       	call   c000ed72 <VAS::VAS(bool)>
c0018909:	83 c4 10             	add    esp,0x10
c001890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018910:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001891a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018928:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001892c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018936:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001893c:	85 c0                	test   eax,eax
c001893e:	74 42                	je     c0018982 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018944:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001894a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018954:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001895a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001895e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018964:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001896a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896e:	05 0c 01 00 00       	add    eax,0x10c
c0018973:	83 ec 08             	sub    esp,0x8
c0018976:	52                   	push   edx
c0018977:	50                   	push   eax
c0018978:	e8 e5 7d fe ff       	call   c0000762 <strcpy>
c001897d:	83 c4 10             	add    esp,0x10
c0018980:	eb 5c                	jmp    c00189de <Process::Process(bool, char const*, Process*, char**)+0x156>
c0018982:	83 ec 0c             	sub    esp,0xc
c0018985:	68 60 12 00 00       	push   0x1260
c001898a:	e8 4f 67 ff ff       	call   c000f0de <operator new(unsigned long)>
c001898f:	83 c4 10             	add    esp,0x10
c0018992:	89 c3                	mov    ebx,eax
c0018994:	83 ec 08             	sub    esp,0x8
c0018997:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001899b:	53                   	push   ebx
c001899c:	e8 2f 4e ff ff       	call   c000d7d0 <VgaText::VgaText(char const*)>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189b2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189b8:	83 ec 0c             	sub    esp,0xc
c00189bb:	50                   	push   eax
c00189bc:	e8 0e 42 ff ff       	call   c000cbcf <addToTerminalCycle(VgaText*)>
c00189c1:	83 c4 10             	add    esp,0x10
c00189c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c8:	05 0c 01 00 00       	add    eax,0x10c
c00189cd:	83 ec 08             	sub    esp,0x8
c00189d0:	68 22 2e 02 c0       	push   0xc0022e22
c00189d5:	50                   	push   eax
c00189d6:	e8 87 7d fe ff       	call   c0000762 <strcpy>
c00189db:	83 c4 10             	add    esp,0x10
c00189de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e2:	83 c0 0c             	add    eax,0xc
c00189e5:	83 ec 08             	sub    esp,0x8
c00189e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189ec:	50                   	push   eax
c00189ed:	e8 70 7d fe ff       	call   c0000762 <strcpy>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	83 ec 08             	sub    esp,0x8
c00189f8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a00:	e8 65 fc ff ff       	call   c001866a <Process::addArgs(char**)>
c0018a05:	83 c4 10             	add    esp,0x10
c0018a08:	90                   	nop
c0018a09:	83 c4 14             	add    esp,0x14
c0018a0c:	5b                   	pop    ebx
c0018a0d:	5e                   	pop    esi
c0018a0e:	c3                   	ret    

c0018a0f <disableIRQs()>:
c0018a0f:	fa                   	cli    
c0018a10:	a1 8c 5b 02 c0       	mov    eax,ds:0xc0025b8c
c0018a15:	40                   	inc    eax
c0018a16:	a3 8c 5b 02 c0       	mov    ds:0xc0025b8c,eax
c0018a1b:	c3                   	ret    

c0018a1c <getIRQNestingLevel()>:
c0018a1c:	a1 8c 5b 02 c0       	mov    eax,ds:0xc0025b8c
c0018a21:	c3                   	ret    

c0018a22 <enableIRQs()>:
c0018a22:	a1 8c 5b 02 c0       	mov    eax,ds:0xc0025b8c
c0018a27:	48                   	dec    eax
c0018a28:	a3 8c 5b 02 c0       	mov    ds:0xc0025b8c,eax
c0018a2d:	75 01                	jne    c0018a30 <enableIRQs()+0xe>
c0018a2f:	fb                   	sti    
c0018a30:	c3                   	ret    

c0018a31 <lockScheduler()>:
c0018a31:	eb dc                	jmp    c0018a0f <disableIRQs()>

c0018a33 <unlockScheduler()>:
c0018a33:	eb ed                	jmp    c0018a22 <enableIRQs()>

c0018a35 <userModeEntryPoint(void*)>:
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	e8 f6 ff ff ff       	call   c0018a33 <unlockScheduler()>
c0018a3d:	fb                   	sti    
c0018a3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a43:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a46:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a50:	83 c4 0c             	add    esp,0xc
c0018a53:	e9 49 78 fe ff       	jmp    c00002a1 <goToUsermode>

c0018a58 <lockStuff()>:
c0018a58:	e8 b2 ff ff ff       	call   c0018a0f <disableIRQs()>
c0018a5d:	a1 88 5b 02 c0       	mov    eax,ds:0xc0025b88
c0018a62:	40                   	inc    eax
c0018a63:	a3 88 5b 02 c0       	mov    ds:0xc0025b88,eax
c0018a68:	c3                   	ret    

c0018a69 <taskStartupFunction>:
c0018a69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a6e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a71:	c3                   	ret    

c0018a72 <updateTimeUsed()>:
c0018a72:	57                   	push   edi
c0018a73:	56                   	push   esi
c0018a74:	53                   	push   ebx
c0018a75:	e8 42 be ff ff       	call   c00148bc <thisCPU()>
c0018a7a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018a81:	74 49                	je     c0018acc <updateTimeUsed()+0x5a>
c0018a83:	0f 31                	rdtsc  
c0018a85:	89 c1                	mov    ecx,eax
c0018a87:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a8c:	2b 0d b8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bb8
c0018a92:	a3 b8 5b 02 c0       	mov    ds:0xc0025bb8,eax
c0018a97:	89 0d c0 5b 02 c0    	mov    DWORD PTR ds:0xc0025bc0,ecx
c0018a9d:	89 d3                	mov    ebx,edx
c0018a9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aa4:	89 15 cc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bcc,edx
c0018aaa:	1b 1d bc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bbc
c0018ab0:	89 15 bc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bbc,edx
c0018ab6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018ab9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018abc:	01 f1                	add    ecx,esi
c0018abe:	89 1d c4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bc4,ebx
c0018ac4:	11 fb                	adc    ebx,edi
c0018ac6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018ac9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018acc:	5b                   	pop    ebx
c0018acd:	5e                   	pop    esi
c0018ace:	5f                   	pop    edi
c0018acf:	c3                   	ret    

c0018ad0 <switchToThread(ThreadControlBlock*)>:
c0018ad0:	53                   	push   ebx
c0018ad1:	83 ec 08             	sub    esp,0x8
c0018ad4:	a1 88 5b 02 c0       	mov    eax,ds:0xc0025b88
c0018ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018add:	85 c0                	test   eax,eax
c0018adf:	75 36                	jne    c0018b17 <switchToThread(ThreadControlBlock*)+0x47>
c0018ae1:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018ae4:	80 fa ff             	cmp    dl,0xff
c0018ae7:	74 2a                	je     c0018b13 <switchToThread(ThreadControlBlock*)+0x43>
c0018ae9:	81 e2 ff 00 00 00    	and    edx,0xff
c0018aef:	b8 84 03 00 00       	mov    eax,0x384
c0018af4:	29 d0                	sub    eax,edx
c0018af6:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018af9:	c1 e0 10             	shl    eax,0x10
c0018afc:	01 c8                	add    eax,ecx
c0018afe:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b01:	e8 6c ff ff ff       	call   c0018a72 <updateTimeUsed()>
c0018b06:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b0a:	83 c4 08             	add    esp,0x8
c0018b0d:	5b                   	pop    ebx
c0018b0e:	e9 c7 77 fe ff       	jmp    c00002da <switchToThreadASM>
c0018b13:	31 c0                	xor    eax,eax
c0018b15:	eb e7                	jmp    c0018afe <switchToThread(ThreadControlBlock*)+0x2e>
c0018b17:	c7 05 84 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025b84,0x1
c0018b21:	83 c4 08             	add    esp,0x8
c0018b24:	5b                   	pop    ebx
c0018b25:	c3                   	ret    

c0018b26 <Semaphore::Semaphore(int)>:
c0018b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b2e:	89 10                	mov    DWORD PTR [eax],edx
c0018b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b34:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b4a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b51:	90                   	nop
c0018b52:	c3                   	ret    
c0018b53:	90                   	nop

c0018b54 <Mutex::Mutex()>:
c0018b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b58:	6a 01                	push   0x1
c0018b5a:	50                   	push   eax
c0018b5b:	e8 c6 ff ff ff       	call   c0018b26 <Semaphore::Semaphore(int)>
c0018b60:	83 c4 08             	add    esp,0x8
c0018b63:	90                   	nop
c0018b64:	c3                   	ret    
c0018b65:	90                   	nop

c0018b66 <Process::createThread(void (*)(void*), void*, int)>:
c0018b66:	55                   	push   ebp
c0018b67:	31 c9                	xor    ecx,ecx
c0018b69:	57                   	push   edi
c0018b6a:	56                   	push   esi
c0018b6b:	53                   	push   ebx
c0018b6c:	83 ec 1c             	sub    esp,0x1c
c0018b6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b73:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b7a:	89 f2                	mov    edx,esi
c0018b7c:	31 c0                	xor    eax,eax
c0018b7e:	66 89 d0             	mov    ax,dx
c0018b81:	83 e2 01             	and    edx,0x1
c0018b84:	74 14                	je     c0018b9a <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018b86:	d1 f8                	sar    eax,1
c0018b88:	41                   	inc    ecx
c0018b89:	89 c2                	mov    edx,eax
c0018b8b:	83 f9 10             	cmp    ecx,0x10
c0018b8e:	75 ec                	jne    c0018b7c <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018b90:	83 c4 1c             	add    esp,0x1c
c0018b93:	31 c0                	xor    eax,eax
c0018b95:	5b                   	pop    ebx
c0018b96:	5e                   	pop    esi
c0018b97:	5f                   	pop    edi
c0018b98:	5d                   	pop    ebp
c0018b99:	c3                   	ret    
c0018b9a:	b8 01 00 00 00       	mov    eax,0x1
c0018b9f:	d3 e0                	shl    eax,cl
c0018ba1:	09 c6                	or     esi,eax
c0018ba3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018ba9:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bb0:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bb6:	89 f0                	mov    eax,esi
c0018bb8:	c1 e0 05             	shl    eax,0x5
c0018bbb:	01 c6                	add    esi,eax
c0018bbd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bc0:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bc6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018bca:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018bd0:	89 ca                	mov    edx,ecx
c0018bd2:	f7 da                	neg    edx
c0018bd4:	c1 e2 15             	shl    edx,0x15
c0018bd7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018bdd:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018be3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018be9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018bef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bf3:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018bf9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018bfd:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c07:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c0d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c17:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c21:	52                   	push   edx
c0018c22:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c29:	52                   	push   edx
c0018c2a:	50                   	push   eax
c0018c2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c2f:	68 a8 5b 02 c0       	push   0xc0025ba8
c0018c34:	e8 59 70 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c39:	83 c4 10             	add    esp,0x10
c0018c3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c40:	83 c4 1c             	add    esp,0x1c
c0018c43:	5b                   	pop    ebx
c0018c44:	5e                   	pop    esi
c0018c45:	5f                   	pop    edi
c0018c46:	5d                   	pop    ebp
c0018c47:	c3                   	ret    

c0018c48 <Process::createUserThread()>:
c0018c48:	83 ec 0c             	sub    esp,0xc
c0018c4b:	68 80 00 00 00       	push   0x80
c0018c50:	6a 00                	push   0x0
c0018c52:	68 35 8a 01 c0       	push   0xc0018a35
c0018c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c5b:	50                   	push   eax
c0018c5c:	e8 05 ff ff ff       	call   c0018b66 <Process::createThread(void (*)(void*), void*, int)>
c0018c61:	83 c4 1c             	add    esp,0x1c
c0018c64:	c3                   	ret    

c0018c65 <setupMultitasking(void (*)())>:
c0018c65:	56                   	push   esi
c0018c66:	53                   	push   ebx
c0018c67:	51                   	push   ecx
c0018c68:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c6c:	eb 10                	jmp    c0018c7e <setupMultitasking(void (*)())+0x19>
c0018c6e:	83 ec 0c             	sub    esp,0xc
c0018c71:	68 a8 5b 02 c0       	push   0xc0025ba8
c0018c76:	e8 69 6f 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	83 ec 0c             	sub    esp,0xc
c0018c81:	68 a8 5b 02 c0       	push   0xc0025ba8
c0018c86:	e8 3d 6f 00 00       	call   c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c8b:	83 c4 10             	add    esp,0x10
c0018c8e:	84 c0                	test   al,al
c0018c90:	74 dc                	je     c0018c6e <setupMultitasking(void (*)())+0x9>
c0018c92:	83 ec 0c             	sub    esp,0xc
c0018c95:	68 3b 07 00 00       	push   0x73b
c0018c9a:	e8 3f 64 ff ff       	call   c000f0de <operator new(unsigned long)>
c0018c9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018ca6:	6a 00                	push   0x0
c0018ca8:	68 26 2e 02 c0       	push   0xc0022e26
c0018cad:	89 c3                	mov    ebx,eax
c0018caf:	6a 01                	push   0x1
c0018cb1:	50                   	push   eax
c0018cb2:	e8 d1 fb ff ff       	call   c0018888 <Process::Process(bool, char const*, Process*, char**)>
c0018cb7:	83 c4 18             	add    esp,0x18
c0018cba:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cc0:	89 1d b4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bb4,ebx
c0018cc6:	50                   	push   eax
c0018cc7:	68 48 2f 02 c0       	push   0xc0022f48
c0018ccc:	e8 42 65 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0018cd1:	5a                   	pop    edx
c0018cd2:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018cd8:	51                   	push   ecx
c0018cd9:	e8 65 46 ff ff       	call   c000d343 <setActiveTerminal(VgaText*)>
c0018cde:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018ce5:	83 c8 01             	or     eax,0x1
c0018ce8:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018cef:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018cf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018cf8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d02:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d08:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d12:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d1c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d22:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d28:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d32:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d38:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d42:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d4c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d52:	58                   	pop    eax
c0018d53:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d59:	5a                   	pop    edx
c0018d5a:	68 22 2e 02 c0       	push   0xc0022e22
c0018d5f:	50                   	push   eax
c0018d60:	e8 fd 79 fe ff       	call   c0000762 <strcpy>
c0018d65:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d6c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d70:	83 c4 14             	add    esp,0x14
c0018d73:	5b                   	pop    ebx
c0018d74:	5e                   	pop    esi
c0018d75:	e9 52 75 fe ff       	jmp    c00002cc <switchToThreadASMFirstTime>

c0018d7a <schedule()>:
c0018d7a:	a1 88 5b 02 c0       	mov    eax,ds:0xc0025b88
c0018d7f:	85 c0                	test   eax,eax
c0018d81:	74 0b                	je     c0018d8e <schedule()+0x14>
c0018d83:	c7 05 84 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025b84,0x1
c0018d8d:	c3                   	ret    
c0018d8e:	53                   	push   ebx
c0018d8f:	83 ec 14             	sub    esp,0x14
c0018d92:	68 a8 5b 02 c0       	push   0xc0025ba8
c0018d97:	e8 2c 6e 00 00       	call   c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	84 c0                	test   al,al
c0018da1:	75 38                	jne    c0018ddb <schedule()+0x61>
c0018da3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018da8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dab:	4a                   	dec    edx
c0018dac:	74 32                	je     c0018de0 <schedule()+0x66>
c0018dae:	83 ec 0c             	sub    esp,0xc
c0018db1:	68 a8 5b 02 c0       	push   0xc0025ba8
c0018db6:	e8 05 6e 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dbb:	89 c3                	mov    ebx,eax
c0018dbd:	c7 04 24 a8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025ba8
c0018dc4:	e8 1b 6e 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018dc9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018dd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018dd3:	e8 f8 fc ff ff       	call   c0018ad0 <switchToThread(ThreadControlBlock*)>
c0018dd8:	83 c4 10             	add    esp,0x10
c0018ddb:	83 c4 08             	add    esp,0x8
c0018dde:	5b                   	pop    ebx
c0018ddf:	c3                   	ret    
c0018de0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018de7:	51                   	push   ecx
c0018de8:	51                   	push   ecx
c0018de9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018def:	53                   	push   ebx
c0018df0:	68 a8 5b 02 c0       	push   0xc0025ba8
c0018df5:	e8 98 6e 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018dfa:	83 c4 10             	add    esp,0x10
c0018dfd:	eb af                	jmp    c0018dae <schedule()+0x34>

c0018dff <unlockStuff()>:
c0018dff:	a1 88 5b 02 c0       	mov    eax,ds:0xc0025b88
c0018e04:	48                   	dec    eax
c0018e05:	a3 88 5b 02 c0       	mov    ds:0xc0025b88,eax
c0018e0a:	75 09                	jne    c0018e15 <unlockStuff()+0x16>
c0018e0c:	a1 84 5b 02 c0       	mov    eax,ds:0xc0025b84
c0018e11:	85 c0                	test   eax,eax
c0018e13:	75 05                	jne    c0018e1a <unlockStuff()+0x1b>
c0018e15:	e9 08 fc ff ff       	jmp    c0018a22 <enableIRQs()>
c0018e1a:	83 ec 0c             	sub    esp,0xc
c0018e1d:	c7 05 84 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025b84,0x0
c0018e27:	e8 4e ff ff ff       	call   c0018d7a <schedule()>
c0018e2c:	83 c4 0c             	add    esp,0xc
c0018e2f:	e9 ee fb ff ff       	jmp    c0018a22 <enableIRQs()>

c0018e34 <Semaphore::tryAcquire()>:
c0018e34:	83 ec 0c             	sub    esp,0xc
c0018e37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e3b:	e8 18 fc ff ff       	call   c0018a58 <lockStuff()>
c0018e40:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e43:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e45:	7c 0b                	jl     c0018e52 <Semaphore::tryAcquire()+0x1e>
c0018e47:	e8 b3 ff ff ff       	call   c0018dff <unlockStuff()>
c0018e4c:	31 c0                	xor    eax,eax
c0018e4e:	83 c4 0c             	add    esp,0xc
c0018e51:	c3                   	ret    
c0018e52:	40                   	inc    eax
c0018e53:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e56:	e8 a4 ff ff ff       	call   c0018dff <unlockStuff()>
c0018e5b:	b0 01                	mov    al,0x1
c0018e5d:	83 c4 0c             	add    esp,0xc
c0018e60:	c3                   	ret    
c0018e61:	90                   	nop

c0018e62 <Semaphore::assertLocked(char const*)>:
c0018e62:	83 ec 0c             	sub    esp,0xc
c0018e65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e69:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e6d:	e8 e6 fb ff ff       	call   c0018a58 <lockStuff()>
c0018e72:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e74:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e77:	7c 05                	jl     c0018e7e <Semaphore::assertLocked(char const*)+0x1c>
c0018e79:	83 c4 0c             	add    esp,0xc
c0018e7c:	eb 81                	jmp    c0018dff <unlockStuff()>
c0018e7e:	83 ec 0c             	sub    esp,0xc
c0018e81:	51                   	push   ecx
c0018e82:	e8 a1 cb ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	83 c4 0c             	add    esp,0xc
c0018e8d:	e9 6d ff ff ff       	jmp    c0018dff <unlockStuff()>

c0018e92 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018e92:	83 ec 0c             	sub    esp,0xc
c0018e95:	e8 82 fb ff ff       	call   c0018a1c <getIRQNestingLevel()>
c0018e9a:	52                   	push   edx
c0018e9b:	52                   	push   edx
c0018e9c:	50                   	push   eax
c0018e9d:	68 7c 2f 02 c0       	push   0xc0022f7c
c0018ea2:	e8 6c 63 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0018ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018eac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018eb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018eb3:	e8 c2 fe ff ff       	call   c0018d7a <schedule()>
c0018eb8:	e8 76 fb ff ff       	call   c0018a33 <unlockScheduler()>
c0018ebd:	e8 5a fb ff ff       	call   c0018a1c <getIRQNestingLevel()>
c0018ec2:	59                   	pop    ecx
c0018ec3:	5a                   	pop    edx
c0018ec4:	50                   	push   eax
c0018ec5:	68 b0 2f 02 c0       	push   0xc0022fb0
c0018eca:	e8 44 63 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0018ecf:	83 c4 1c             	add    esp,0x1c
c0018ed2:	c3                   	ret    

c0018ed3 <blockTask(TaskState)>:
c0018ed3:	83 ec 0c             	sub    esp,0xc
c0018ed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018eda:	e8 52 fb ff ff       	call   c0018a31 <lockScheduler()>
c0018edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ee4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ee7:	e8 8e fe ff ff       	call   c0018d7a <schedule()>
c0018eec:	83 c4 0c             	add    esp,0xc
c0018eef:	e9 3f fb ff ff       	jmp    c0018a33 <unlockScheduler()>

c0018ef4 <waitTask(int, int*, int)>:
c0018ef4:	83 ec 18             	sub    esp,0x18
c0018ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018efc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f00:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f0c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f0f:	6a 07                	push   0x7
c0018f11:	e8 bd ff ff ff       	call   c0018ed3 <blockTask(TaskState)>
c0018f16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f1b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f1e:	83 c4 10             	add    esp,0x10
c0018f21:	85 d2                	test   edx,edx
c0018f23:	74 0a                	je     c0018f2f <waitTask(int, int*, int)+0x3b>
c0018f25:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f28:	89 02                	mov    DWORD PTR [edx],eax
c0018f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f2f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f32:	83 c4 0c             	add    esp,0xc
c0018f35:	c3                   	ret    

c0018f36 <nanoSleepUntil(unsigned long long)>:
c0018f36:	53                   	push   ebx
c0018f37:	83 ec 08             	sub    esp,0x8
c0018f3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f42:	3b 0d d0 4d 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024dd0
c0018f48:	89 d8                	mov    eax,ebx
c0018f4a:	1b 05 d4 4d 02 c0    	sbb    eax,DWORD PTR ds:0xc0024dd4
c0018f50:	73 05                	jae    c0018f57 <nanoSleepUntil(unsigned long long)+0x21>
c0018f52:	83 c4 08             	add    esp,0x8
c0018f55:	5b                   	pop    ebx
c0018f56:	c3                   	ret    
c0018f57:	e8 fc fa ff ff       	call   c0018a58 <lockStuff()>
c0018f5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f61:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f64:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f67:	51                   	push   ecx
c0018f68:	51                   	push   ecx
c0018f69:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f6f:	53                   	push   ebx
c0018f70:	68 9c 5b 02 c0       	push   0xc0025b9c
c0018f75:	e8 18 6d 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f7a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f81:	e8 4d ff ff ff       	call   c0018ed3 <blockTask(TaskState)>
c0018f86:	83 c4 18             	add    esp,0x18
c0018f89:	5b                   	pop    ebx
c0018f8a:	e9 70 fe ff ff       	jmp    c0018dff <unlockStuff()>

c0018f8f <nanoSleep(unsigned long long)>:
c0018f8f:	a1 d0 4d 02 c0       	mov    eax,ds:0xc0024dd0
c0018f94:	8b 15 d4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024dd4
c0018f9a:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018f9e:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fa2:	eb 92                	jmp    c0018f36 <nanoSleepUntil(unsigned long long)>

c0018fa4 <sleep(unsigned long long)>:
c0018fa4:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fa9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fb1:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fb5:	01 ca                	add    edx,ecx
c0018fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fbf:	eb ce                	jmp    c0018f8f <nanoSleep(unsigned long long)>
c0018fc1:	90                   	nop

c0018fc2 <Semaphore::acquire()>:
c0018fc2:	83 ec 0c             	sub    esp,0xc
c0018fc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fc9:	e8 8a fa ff ff       	call   c0018a58 <lockStuff()>
c0018fce:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018fd1:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018fd3:	7d 0c                	jge    c0018fe1 <Semaphore::acquire()+0x1f>
c0018fd5:	40                   	inc    eax
c0018fd6:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018fd9:	83 c4 0c             	add    esp,0xc
c0018fdc:	e9 1e fe ff ff       	jmp    c0018dff <unlockStuff()>
c0018fe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fe6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018fed:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018ff0:	85 c0                	test   eax,eax
c0018ff2:	74 29                	je     c001901d <Semaphore::acquire()+0x5b>
c0018ff4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018ff7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ffd:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019000:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019005:	83 ec 0c             	sub    esp,0xc
c0019008:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001900b:	6a 05                	push   0x5
c001900d:	e8 c1 fe ff ff       	call   c0018ed3 <blockTask(TaskState)>
c0019012:	83 c4 10             	add    esp,0x10
c0019015:	83 c4 0c             	add    esp,0xc
c0019018:	e9 e2 fd ff ff       	jmp    c0018dff <unlockStuff()>
c001901d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019022:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019025:	eb d9                	jmp    c0019000 <Semaphore::acquire()+0x3e>

c0019027 <taskReturned>:
c0019027:	83 ec 18             	sub    esp,0x18
c001902a:	68 e4 2f 02 c0       	push   0xc0022fe4
c001902f:	e8 f4 c9 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	83 ec 0c             	sub    esp,0xc
c001903a:	6a 02                	push   0x2
c001903c:	e8 92 fe ff ff       	call   c0018ed3 <blockTask(TaskState)>
c0019041:	e8 eb f9 ff ff       	call   c0018a31 <lockScheduler()>
c0019046:	e8 2f fd ff ff       	call   c0018d7a <schedule()>
c001904b:	e8 e3 f9 ff ff       	call   c0018a33 <unlockScheduler()>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	eb e2                	jmp    c0019037 <taskReturned+0x10>

c0019055 <unblockTask(ThreadControlBlock*)>:
c0019055:	53                   	push   ebx
c0019056:	83 ec 08             	sub    esp,0x8
c0019059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001905d:	e8 cf f9 ff ff       	call   c0018a31 <lockScheduler()>
c0019062:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019065:	85 c0                	test   eax,eax
c0019067:	74 5b                	je     c00190c4 <unblockTask(ThreadControlBlock*)+0x6f>
c0019069:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001906c:	48                   	dec    eax
c001906d:	74 30                	je     c001909f <unblockTask(ThreadControlBlock*)+0x4a>
c001906f:	83 ec 0c             	sub    esp,0xc
c0019072:	68 a8 5b 02 c0       	push   0xc0025ba8
c0019077:	e8 44 6b 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001907c:	83 c4 10             	add    esp,0x10
c001907f:	85 c0                	test   eax,eax
c0019081:	75 16                	jne    c0019099 <unblockTask(ThreadControlBlock*)+0x44>
c0019083:	eb 64                	jmp    c00190e9 <unblockTask(ThreadControlBlock*)+0x94>
c0019085:	52                   	push   edx
c0019086:	52                   	push   edx
c0019087:	50                   	push   eax
c0019088:	68 a8 5b 02 c0       	push   0xc0025ba8
c001908d:	e8 3e 6e 00 00       	call   c001fed0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0019092:	83 c4 10             	add    esp,0x10
c0019095:	85 c0                	test   eax,eax
c0019097:	74 50                	je     c00190e9 <unblockTask(ThreadControlBlock*)+0x94>
c0019099:	39 c3                	cmp    ebx,eax
c001909b:	75 e8                	jne    c0019085 <unblockTask(ThreadControlBlock*)+0x30>
c001909d:	eb 1c                	jmp    c00190bb <unblockTask(ThreadControlBlock*)+0x66>
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	68 d4 30 02 c0       	push   0xc00230d4
c00190a7:	e8 67 61 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00190ac:	c7 04 24 60 30 02 c0 	mov    DWORD PTR [esp],0xc0023060
c00190b3:	e8 5b 61 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00190b8:	83 c4 10             	add    esp,0x10
c00190bb:	83 c4 08             	add    esp,0x8
c00190be:	5b                   	pop    ebx
c00190bf:	e9 6f f9 ff ff       	jmp    c0018a33 <unlockScheduler()>
c00190c4:	83 ec 0c             	sub    esp,0xc
c00190c7:	68 18 30 02 c0       	push   0xc0023018
c00190cc:	e8 42 61 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00190d1:	c7 04 24 60 30 02 c0 	mov    DWORD PTR [esp],0xc0023060
c00190d8:	e8 36 61 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	83 c4 08             	add    esp,0x8
c00190e3:	5b                   	pop    ebx
c00190e4:	e9 4a f9 ff ff       	jmp    c0018a33 <unlockScheduler()>
c00190e9:	50                   	push   eax
c00190ea:	50                   	push   eax
c00190eb:	53                   	push   ebx
c00190ec:	68 a8 5b 02 c0       	push   0xc0025ba8
c00190f1:	e8 9c 6b 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00190f6:	83 c4 10             	add    esp,0x10
c00190f9:	83 c4 08             	add    esp,0x8
c00190fc:	5b                   	pop    ebx
c00190fd:	e9 31 f9 ff ff       	jmp    c0018a33 <unlockScheduler()>

c0019102 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019102:	55                   	push   ebp
c0019103:	57                   	push   edi
c0019104:	56                   	push   esi
c0019105:	53                   	push   ebx
c0019106:	83 ec 1c             	sub    esp,0x1c
c0019109:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001910d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019110:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019116:	85 ed                	test   ebp,ebp
c0019118:	7e 21                	jle    c001913b <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c001911a:	31 f6                	xor    esi,esi
c001911c:	83 ec 0c             	sub    esp,0xc
c001911f:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019126:	46                   	inc    esi
c0019127:	57                   	push   edi
c0019128:	e8 c4 2e ff ff       	call   c000bff1 <free>
c001912d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019130:	83 c4 10             	add    esp,0x10
c0019133:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019139:	7f e1                	jg     c001911c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001913b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019145:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001914a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001914d:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019150:	d3 c0                	rol    eax,cl
c0019152:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019159:	21 c1                	and    ecx,eax
c001915b:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019162:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019165:	89 f7                	mov    edi,esi
c0019167:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001916f:	0f 85 4f 01 00 00    	jne    c00192c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019175:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001917b:	85 c0                	test   eax,eax
c001917d:	0f 84 aa 00 00 00    	je     c001922d <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019183:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0019186:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001918a:	31 c9                	xor    ecx,ecx
c001918c:	eb 10                	jmp    c001919e <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c001918e:	41                   	inc    ecx
c001918f:	83 f9 10             	cmp    ecx,0x10
c0019192:	0f 84 95 00 00 00    	je     c001922d <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019198:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001919e:	31 d2                	xor    edx,edx
c00191a0:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191a7:	d3 fa                	sar    edx,cl
c00191a9:	83 e2 01             	and    edx,0x1
c00191ac:	74 e0                	je     c001918e <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191ae:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191b1:	89 d5                	mov    ebp,edx
c00191b3:	c1 e5 05             	shl    ebp,0x5
c00191b6:	01 ea                	add    edx,ebp
c00191b8:	01 d0                	add    eax,edx
c00191ba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191c0:	83 fd 07             	cmp    ebp,0x7
c00191c3:	75 c9                	jne    c001918e <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191c5:	05 40 02 00 00       	add    eax,0x240
c00191ca:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191cd:	83 fd ff             	cmp    ebp,0xffffffff
c00191d0:	0f 8c 07 01 00 00    	jl     c00192dd <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191d6:	0f 84 b4 01 00 00    	je     c0019390 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00191dc:	85 ed                	test   ebp,ebp
c00191de:	0f 84 9b 01 00 00    	je     c001937f <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00191e4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00191e6:	75 a6                	jne    c001918e <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191e8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191f2:	01 d0                	add    eax,edx
c00191f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00191f8:	83 ec 0c             	sub    esp,0xc
c00191fb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019201:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019204:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001920a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019211:	50                   	push   eax
c0019212:	e8 3e fe ff ff       	call   c0019055 <unblockTask(ThreadControlBlock*)>
c0019217:	83 c4 10             	add    esp,0x10
c001921a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001921e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019221:	41                   	inc    ecx
c0019222:	89 f7                	mov    edi,esi
c0019224:	83 f9 10             	cmp    ecx,0x10
c0019227:	0f 85 6b ff ff ff    	jne    c0019198 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c001922d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019233:	85 c0                	test   eax,eax
c0019235:	74 5d                	je     c0019294 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019237:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001923d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019243:	74 4f                	je     c0019294 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019245:	83 ec 0c             	sub    esp,0xc
c0019248:	68 a8 5b 02 c0       	push   0xc0025ba8
c001924d:	e8 6e 69 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019252:	c7 04 24 a8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025ba8
c0019259:	89 c7                	mov    edi,eax
c001925b:	e8 68 69 00 00       	call   c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019260:	83 c4 10             	add    esp,0x10
c0019263:	84 c0                	test   al,al
c0019265:	0f 84 e2 00 00 00    	je     c001934d <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c001926b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001926e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019274:	85 d2                	test   edx,edx
c0019276:	74 0f                	je     c0019287 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0019278:	83 ec 0c             	sub    esp,0xc
c001927b:	8b 02                	mov    eax,DWORD PTR [edx]
c001927d:	52                   	push   edx
c001927e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019281:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0019291:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019294:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001929a:	85 db                	test   ebx,ebx
c001929c:	74 16                	je     c00192b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c001929e:	83 ec 0c             	sub    esp,0xc
c00192a1:	53                   	push   ebx
c00192a2:	e8 b1 54 ff ff       	call   c000e758 <VAS::~VAS()>
c00192a7:	5a                   	pop    edx
c00192a8:	59                   	pop    ecx
c00192a9:	6a 10                	push   0x10
c00192ab:	53                   	push   ebx
c00192ac:	e8 3c 5e ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00192b1:	83 c4 10             	add    esp,0x10
c00192b4:	83 ec 0c             	sub    esp,0xc
c00192b7:	68 2d 2e 02 c0       	push   0xc0022e2d
c00192bc:	e8 52 5f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	50                   	push   eax
c00192c5:	50                   	push   eax
c00192c6:	68 3b 07 00 00       	push   0x73b
c00192cb:	68 3b 2e 02 c0       	push   0xc0022e3b
c00192d0:	e8 3e 5f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00192d5:	83 c4 2c             	add    esp,0x2c
c00192d8:	5b                   	pop    ebx
c00192d9:	5e                   	pop    esi
c00192da:	5f                   	pop    edi
c00192db:	5d                   	pop    ebp
c00192dc:	c3                   	ret    
c00192dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192e1:	83 ec 0c             	sub    esp,0xc
c00192e4:	68 18 31 02 c0       	push   0xc0023118
c00192e9:	e8 3a c7 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00192f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192f8:	89 f7                	mov    edi,esi
c00192fa:	e9 8f fe ff ff       	jmp    c001918e <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00192ff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019305:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001930b:	75 1c                	jne    c0019329 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001930d:	83 ec 0c             	sub    esp,0xc
c0019310:	68 80 31 02 c0       	push   0xc0023180
c0019315:	e8 f9 5e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001931a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019321:	e8 ad fb ff ff       	call   c0018ed3 <blockTask(TaskState)>
c0019326:	83 c4 10             	add    esp,0x10
c0019329:	55                   	push   ebp
c001932a:	55                   	push   ebp
c001932b:	56                   	push   esi
c001932c:	68 a8 5b 02 c0       	push   0xc0025ba8
c0019331:	e8 5c 69 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019336:	c7 04 24 a8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025ba8
c001933d:	e8 7e 68 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019342:	83 c4 10             	add    esp,0x10
c0019345:	39 f8                	cmp    eax,edi
c0019347:	0f 84 1e ff ff ff    	je     c001926b <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c001934d:	83 ec 0c             	sub    esp,0xc
c0019350:	68 a8 5b 02 c0       	push   0xc0025ba8
c0019355:	e8 66 68 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001935a:	89 c6                	mov    esi,eax
c001935c:	c7 04 24 a8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025ba8
c0019363:	e8 7c 68 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	39 f3                	cmp    ebx,esi
c001936d:	74 ba                	je     c0019329 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001936f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019372:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019375:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001937b:	75 ac                	jne    c0019329 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001937d:	eb 80                	jmp    c00192ff <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c001937f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019383:	83 ec 0c             	sub    esp,0xc
c0019386:	68 4c 31 02 c0       	push   0xc002314c
c001938b:	e9 59 ff ff ff       	jmp    c00192e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c0019390:	8b 36                	mov    esi,DWORD PTR [esi]
c0019392:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019396:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0019399:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001939c:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193a2:	01 d7                	add    edi,edx
c00193a4:	89 f8                	mov    eax,edi
c00193a6:	e9 49 fe ff ff       	jmp    c00191f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193ab <cleanerTaskFunction(void*)>:
c00193ab:	53                   	push   ebx
c00193ac:	83 ec 08             	sub    esp,0x8
c00193af:	e8 7f f6 ff ff       	call   c0018a33 <unlockScheduler()>
c00193b4:	e8 78 f6 ff ff       	call   c0018a31 <lockScheduler()>
c00193b9:	80 3d 6c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b6c,0x0
c00193c0:	0f 85 8e 00 00 00    	jne    c0019454 <cleanerTaskFunction(void*)+0xa9>
c00193c6:	83 ec 0c             	sub    esp,0xc
c00193c9:	6a 02                	push   0x2
c00193cb:	e8 c2 fa ff ff       	call   c0018e92 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	c6 05 6c 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025b6c,0x0
c00193da:	e8 79 f6 ff ff       	call   c0018a58 <lockStuff()>
c00193df:	e8 4d f6 ff ff       	call   c0018a31 <lockScheduler()>
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	68 90 5b 02 c0       	push   0xc0025b90
c00193ec:	e8 d7 67 00 00       	call   c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	84 c0                	test   al,al
c00193f6:	75 40                	jne    c0019438 <cleanerTaskFunction(void*)+0x8d>
c00193f8:	83 ec 0c             	sub    esp,0xc
c00193fb:	68 90 5b 02 c0       	push   0xc0025b90
c0019400:	e8 bb 67 00 00       	call   c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019405:	89 c3                	mov    ebx,eax
c0019407:	c7 04 24 90 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b90
c001940e:	e8 d1 67 00 00       	call   c001fbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019413:	c7 04 24 51 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e51
c001941a:	e8 f4 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001941f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019422:	e8 db fc ff ff       	call   c0019102 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019427:	c7 04 24 6a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e6a
c001942e:	e8 e0 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0019433:	83 c4 10             	add    esp,0x10
c0019436:	eb ac                	jmp    c00193e4 <cleanerTaskFunction(void*)+0x39>
c0019438:	e8 f6 f5 ff ff       	call   c0018a33 <unlockScheduler()>
c001943d:	e8 bd f9 ff ff       	call   c0018dff <unlockStuff()>
c0019442:	e8 ea f5 ff ff       	call   c0018a31 <lockScheduler()>
c0019447:	80 3d 6c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b6c,0x0
c001944e:	0f 84 72 ff ff ff    	je     c00193c6 <cleanerTaskFunction(void*)+0x1b>
c0019454:	e8 da f5 ff ff       	call   c0018a33 <unlockScheduler()>
c0019459:	e9 75 ff ff ff       	jmp    c00193d3 <cleanerTaskFunction(void*)+0x28>

c001945e <terminateTask(int)>:
c001945e:	83 ec 14             	sub    esp,0x14
c0019461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019466:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019469:	83 c0 0c             	add    eax,0xc
c001946c:	50                   	push   eax
c001946d:	68 a8 31 02 c0       	push   0xc00231a8
c0019472:	e8 9c 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0019477:	e8 dc f5 ff ff       	call   c0018a58 <lockStuff()>
c001947c:	e8 b0 f5 ff ff       	call   c0018a31 <lockScheduler()>
c0019481:	c7 04 24 7d 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e7d
c0019488:	e8 86 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001948d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019492:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019496:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0019499:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001949e:	59                   	pop    ecx
c001949f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194a2:	5a                   	pop    edx
c00194a3:	50                   	push   eax
c00194a4:	68 90 5b 02 c0       	push   0xc0025b90
c00194a9:	e8 e4 67 00 00       	call   c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194b3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194ba:	c7 04 24 97 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e97
c00194c1:	e8 4d 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00194c6:	8b 0d 68 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b68
c00194cc:	83 c4 10             	add    esp,0x10
c00194cf:	85 c9                	test   ecx,ecx
c00194d1:	74 5b                	je     c001952e <terminateTask(int)+0xd0>
c00194d3:	83 ec 0c             	sub    esp,0xc
c00194d6:	68 b1 2e 02 c0       	push   0xc0022eb1
c00194db:	e8 33 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c00194e0:	58                   	pop    eax
c00194e1:	8b 15 68 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b68
c00194e7:	52                   	push   edx
c00194e8:	c6 05 6c 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025b6c,0x1
c00194ef:	e8 61 fb ff ff       	call   c0019055 <unblockTask(ThreadControlBlock*)>
c00194f4:	c7 04 24 cb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ecb
c00194fb:	e8 13 5d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	e8 2b f5 ff ff       	call   c0018a33 <unlockScheduler()>
c0019508:	e8 f2 f8 ff ff       	call   c0018dff <unlockStuff()>
c001950d:	83 ec 0c             	sub    esp,0xc
c0019510:	68 03 2f 02 c0       	push   0xc0022f03
c0019515:	e8 f9 5c ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	e8 0f f5 ff ff       	call   c0018a31 <lockScheduler()>
c0019522:	e8 53 f8 ff ff       	call   c0018d7a <schedule()>
c0019527:	e8 07 f5 ff ff       	call   c0018a33 <unlockScheduler()>
c001952c:	eb ef                	jmp    c001951d <terminateTask(int)+0xbf>
c001952e:	83 ec 0c             	sub    esp,0xc
c0019531:	68 e5 2e 02 c0       	push   0xc0022ee5
c0019536:	e8 d8 5c ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	eb c3                	jmp    c0019503 <terminateTask(int)+0xa5>

c0019540 <Thr::terminateFromIRQ(int)>:
c0019540:	83 ec 18             	sub    esp,0x18
c0019543:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019547:	50                   	push   eax
c0019548:	e8 11 ff ff ff       	call   c001945e <terminateTask(int)>
c001954d:	90                   	nop

c001954e <Semaphore::release()>:
c001954e:	83 ec 0c             	sub    esp,0xc
c0019551:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019555:	e8 fe f4 ff ff       	call   c0018a58 <lockStuff()>
c001955a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001955d:	85 c0                	test   eax,eax
c001955f:	74 1a                	je     c001957b <Semaphore::release()+0x2d>
c0019561:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c001956a:	50                   	push   eax
c001956b:	e8 e5 fa ff ff       	call   c0019055 <unblockTask(ThreadControlBlock*)>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	83 c4 0c             	add    esp,0xc
c0019576:	e9 84 f8 ff ff       	jmp    c0018dff <unlockStuff()>
c001957b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001957e:	48                   	dec    eax
c001957f:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019582:	83 c4 0c             	add    esp,0xc
c0019585:	e9 75 f8 ff ff       	jmp    c0018dff <unlockStuff()>

c001958a <__static_initialization_and_destruction_0(int, int)>:
c001958a:	83 ec 0c             	sub    esp,0xc
c001958d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019592:	0f 85 88 00 00 00    	jne    c0019620 <__static_initialization_and_destruction_0(int, int)+0x96>
c0019598:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195a0:	75 7e                	jne    c0019620 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195a2:	83 ec 0c             	sub    esp,0xc
c00195a5:	68 a8 5b 02 c0       	push   0xc0025ba8
c00195aa:	e8 c9 68 00 00       	call   c001fe78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	83 ec 04             	sub    esp,0x4
c00195b5:	68 8c 3b 02 c0       	push   0xc0023b8c
c00195ba:	68 a8 5b 02 c0       	push   0xc0025ba8
c00195bf:	68 38 fe 01 c0       	push   0xc001fe38
c00195c4:	e8 a0 5a ff ff       	call   c000f069 <__cxa_atexit>
c00195c9:	83 c4 10             	add    esp,0x10
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	68 9c 5b 02 c0       	push   0xc0025b9c
c00195d4:	e8 9f 68 00 00       	call   c001fe78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	83 ec 04             	sub    esp,0x4
c00195df:	68 8c 3b 02 c0       	push   0xc0023b8c
c00195e4:	68 9c 5b 02 c0       	push   0xc0025b9c
c00195e9:	68 38 fe 01 c0       	push   0xc001fe38
c00195ee:	e8 76 5a ff ff       	call   c000f069 <__cxa_atexit>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	68 90 5b 02 c0       	push   0xc0025b90
c00195fe:	e8 75 68 00 00       	call   c001fe78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019603:	83 c4 10             	add    esp,0x10
c0019606:	83 ec 04             	sub    esp,0x4
c0019609:	68 8c 3b 02 c0       	push   0xc0023b8c
c001960e:	68 90 5b 02 c0       	push   0xc0025b90
c0019613:	68 38 fe 01 c0       	push   0xc001fe38
c0019618:	e8 4c 5a ff ff       	call   c000f069 <__cxa_atexit>
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	90                   	nop
c0019621:	83 c4 0c             	add    esp,0xc
c0019624:	c3                   	ret    

c0019625 <_GLOBAL__sub_I_kernelProcess>:
c0019625:	83 ec 0c             	sub    esp,0xc
c0019628:	83 ec 08             	sub    esp,0x8
c001962b:	68 ff ff 00 00       	push   0xffff
c0019630:	6a 01                	push   0x1
c0019632:	e8 53 ff ff ff       	call   c001958a <__static_initialization_and_destruction_0(int, int)>
c0019637:	83 c4 10             	add    esp,0x10
c001963a:	83 c4 0c             	add    esp,0xc
c001963d:	c3                   	ret    

c001963e <Vm::vm8086EntryPoint(void*)>:
c001963e:	83 ec 0c             	sub    esp,0xc
c0019641:	e8 ed f3 ff ff       	call   c0018a33 <unlockScheduler()>
c0019646:	fb                   	sti    
c0019647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001964c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019650:	52                   	push   edx
c0019651:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019655:	52                   	push   edx
c0019656:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001965a:	52                   	push   edx
c001965b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001965f:	50                   	push   eax
c0019660:	e8 0b 6c fe ff       	call   c0000270 <goToVM86>
c0019665:	83 c4 1c             	add    esp,0x1c
c0019668:	c3                   	ret    

c0019669 <Vm::inbv(unsigned short)>:
c0019669:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001966d:	ec                   	in     al,dx
c001966e:	c3                   	ret    

c001966f <Vm::outbv(unsigned short, unsigned char)>:
c001966f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019677:	ee                   	out    dx,al
c0019678:	c3                   	ret    

c0019679 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019679:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001967e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019683:	c1 e0 04             	shl    eax,0x4
c0019686:	01 d0                	add    eax,edx
c0019688:	c3                   	ret    

c0019689 <Vm::getSegment(unsigned int)>:
c0019689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001968d:	c1 e8 10             	shr    eax,0x10
c0019690:	c3                   	ret    

c0019691 <Vm::getOffset(unsigned int)>:
c0019691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019695:	c3                   	ret    

c0019696 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019696:	55                   	push   ebp
c0019697:	57                   	push   edi
c0019698:	56                   	push   esi
c0019699:	53                   	push   ebx
c001969a:	83 ec 2c             	sub    esp,0x2c
c001969d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196a1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196a9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196ad:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196b1:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196b5:	e8 77 f3 ff ff       	call   c0018a31 <lockScheduler()>
c00196ba:	68 80 00 00 00       	push   0x80
c00196bf:	6a 00                	push   0x0
c00196c1:	68 3e 96 01 c0       	push   0xc001963e
c00196c6:	55                   	push   ebp
c00196c7:	e8 9a f4 ff ff       	call   c0018b66 <Process::createThread(void (*)(void*), void*, int)>
c00196cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196d0:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196d4:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196d8:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00196dc:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00196e0:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00196e4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00196eb:	e8 ee 59 ff ff       	call   c000f0de <operator new(unsigned long)>
c00196f0:	83 c4 0c             	add    esp,0xc
c00196f3:	55                   	push   ebp
c00196f4:	89 c3                	mov    ebx,eax
c00196f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00196fa:	50                   	push   eax
c00196fb:	e8 4a 60 ff ff       	call   c000f74a <File::File(char const*, Process*)>
c0019700:	83 c4 0c             	add    esp,0xc
c0019703:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019707:	50                   	push   eax
c0019708:	8d 44 24 20          	lea    eax,[esp+0x20]
c001970c:	50                   	push   eax
c001970d:	53                   	push   ebx
c001970e:	e8 47 63 ff ff       	call   c000fa5a <File::stat(unsigned long long*, bool*)>
c0019713:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	84 d2                	test   dl,dl
c001971c:	74 1c                	je     c001973a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001971e:	83 ec 0c             	sub    esp,0xc
c0019721:	68 c7 31 02 c0       	push   0xc00231c7
c0019726:	e8 fd c2 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001972b:	e8 03 f3 ff ff       	call   c0018a33 <unlockScheduler()>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	31 d2                	xor    edx,edx
c0019735:	e9 81 00 00 00       	jmp    c00197bb <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001973a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001973e:	51                   	push   ecx
c001973f:	51                   	push   ecx
c0019740:	6a 01                	push   0x1
c0019742:	53                   	push   ebx
c0019743:	e8 66 60 ff ff       	call   c000f7ae <File::open(FileOpenMode)>
c0019748:	83 c4 10             	add    esp,0x10
c001974b:	85 c0                	test   eax,eax
c001974d:	74 1b                	je     c001976a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001974f:	83 ec 0c             	sub    esp,0xc
c0019752:	68 e0 31 02 c0       	push   0xc00231e0
c0019757:	e8 cc c2 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001975c:	e8 d2 f2 ff ff       	call   c0018a33 <unlockScheduler()>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019768:	eb 51                	jmp    c00197bb <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001976a:	83 ec 0c             	sub    esp,0xc
c001976d:	0f b7 ff             	movzx  edi,di
c0019770:	6a 07                	push   0x7
c0019772:	68 00 01 00 00       	push   0x100
c0019777:	6a 00                	push   0x0
c0019779:	6a 00                	push   0x0
c001977b:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019781:	e8 30 54 ff ff       	call   c000ebb6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019786:	83 c4 18             	add    esp,0x18
c0019789:	0f b7 f6             	movzx  esi,si
c001978c:	57                   	push   edi
c001978d:	56                   	push   esi
c001978e:	e8 e6 fe ff ff       	call   c0019679 <Vm::realToLinear(unsigned short, unsigned short)>
c0019793:	5a                   	pop    edx
c0019794:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019796:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001979a:	51                   	push   ecx
c001979b:	50                   	push   eax
c001979c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197a4:	53                   	push   ebx
c00197a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197a8:	83 c4 14             	add    esp,0x14
c00197ab:	53                   	push   ebx
c00197ac:	e8 5b 60 ff ff       	call   c000f80c <File::close()>
c00197b1:	e8 7d f2 ff ff       	call   c0018a33 <unlockScheduler()>
c00197b6:	83 c4 10             	add    esp,0x10
c00197b9:	b2 01                	mov    dl,0x1
c00197bb:	83 c4 2c             	add    esp,0x2c
c00197be:	88 d0                	mov    al,dl
c00197c0:	5b                   	pop    ebx
c00197c1:	5e                   	pop    esi
c00197c2:	5f                   	pop    edi
c00197c3:	5d                   	pop    ebp
c00197c4:	c3                   	ret    

c00197c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197c5:	57                   	push   edi
c00197c6:	56                   	push   esi
c00197c7:	53                   	push   ebx
c00197c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197d0:	83 e8 06             	sub    eax,0x6
c00197d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197d7:	0f b7 c0             	movzx  eax,ax
c00197da:	50                   	push   eax
c00197db:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00197e0:	50                   	push   eax
c00197e1:	e8 93 fe ff ff       	call   c0019679 <Vm::realToLinear(unsigned short, unsigned short)>
c00197e6:	5a                   	pop    edx
c00197e7:	5e                   	pop    esi
c00197e8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00197eb:	8d 56 fa             	lea    edx,[esi-0x6]
c00197ee:	81 e2 ff ff 00 00    	and    edx,0xffff
c00197f4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00197f7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00197fa:	83 c2 02             	add    edx,0x2
c00197fd:	66 89 10             	mov    WORD PTR [eax],dx
c0019800:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019803:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019807:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001980a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001980e:	89 d6                	mov    esi,edx
c0019810:	66 81 e6 ff fd       	and    si,0xfdff
c0019815:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001981b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001981f:	74 07                	je     c0019828 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019821:	89 d6                	mov    esi,edx
c0019823:	66 81 ce 00 02       	or     si,0x200
c0019828:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001982c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019831:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019835:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001983d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019840:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019848:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001984b:	5b                   	pop    ebx
c001984c:	5e                   	pop    esi
c001984d:	5f                   	pop    edi
c001984e:	c3                   	ret    

c001984f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001984f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019854:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019859:	c1 e0 04             	shl    eax,0x4
c001985c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001985f:	c3                   	ret    

c0019860 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019860:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019865:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001986a:	c1 e0 04             	shl    eax,0x4
c001986d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019871:	c3                   	ret    

c0019872 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019872:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019877:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001987c:	c1 e0 04             	shl    eax,0x4
c001987f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019882:	c3                   	ret    

c0019883 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019883:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019888:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001988d:	c1 e0 04             	shl    eax,0x4
c0019890:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019894:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019897:	c3                   	ret    

c0019898 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019898:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001989d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a2:	c1 e0 04             	shl    eax,0x4
c00198a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198a9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198ad:	c3                   	ret    

c00198ae <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b8:	c1 e0 04             	shl    eax,0x4
c00198bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198bf:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198c2:	c3                   	ret    

c00198c3 <Vm::faultHandler(regs*)>:
c00198c3:	55                   	push   ebp
c00198c4:	57                   	push   edi
c00198c5:	56                   	push   esi
c00198c6:	53                   	push   ebx
c00198c7:	83 ec 1c             	sub    esp,0x1c
c00198ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198ce:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198d2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198d5:	52                   	push   edx
c00198d6:	0f b7 f0             	movzx  esi,ax
c00198d9:	0f b7 c0             	movzx  eax,ax
c00198dc:	50                   	push   eax
c00198dd:	e8 97 fd ff ff       	call   c0019679 <Vm::realToLinear(unsigned short, unsigned short)>
c00198e2:	5a                   	pop    edx
c00198e3:	89 c7                	mov    edi,eax
c00198e5:	59                   	pop    ecx
c00198e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00198e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198ed:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00198f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00198f9:	0f b7 c5             	movzx  eax,bp
c00198fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019900:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019904:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019908:	e8 6c fd ff ff       	call   c0019679 <Vm::realToLinear(unsigned short, unsigned short)>
c001990d:	5a                   	pop    edx
c001990e:	59                   	pop    ecx
c001990f:	b1 06                	mov    cl,0x6
c0019911:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019916:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001991b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001991e:	80 fa 9d             	cmp    dl,0x9d
c0019921:	0f 84 1d 02 00 00    	je     c0019b44 <Vm::faultHandler(regs*)+0x281>
c0019927:	0f 87 8e 00 00 00    	ja     c00199bb <Vm::faultHandler(regs*)+0xf8>
c001992d:	80 fa 66             	cmp    dl,0x66
c0019930:	0f 84 89 01 00 00    	je     c0019abf <Vm::faultHandler(regs*)+0x1fc>
c0019936:	77 44                	ja     c001997c <Vm::faultHandler(regs*)+0xb9>
c0019938:	80 fa 36             	cmp    dl,0x36
c001993b:	0f 84 74 01 00 00    	je     c0019ab5 <Vm::faultHandler(regs*)+0x1f2>
c0019941:	77 1a                	ja     c001995d <Vm::faultHandler(regs*)+0x9a>
c0019943:	80 fa 26             	cmp    dl,0x26
c0019946:	0f 84 4b 01 00 00    	je     c0019a97 <Vm::faultHandler(regs*)+0x1d4>
c001994c:	80 fa 2e             	cmp    dl,0x2e
c001994f:	0f 85 4a 05 00 00    	jne    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c0019955:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019958:	31 c9                	xor    ecx,ecx
c001995a:	47                   	inc    edi
c001995b:	eb be                	jmp    c001991b <Vm::faultHandler(regs*)+0x58>
c001995d:	80 fa 64             	cmp    dl,0x64
c0019960:	0f 84 3b 01 00 00    	je     c0019aa1 <Vm::faultHandler(regs*)+0x1de>
c0019966:	0f 87 3f 01 00 00    	ja     c0019aab <Vm::faultHandler(regs*)+0x1e8>
c001996c:	80 fa 3e             	cmp    dl,0x3e
c001996f:	0f 85 2a 05 00 00    	jne    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c0019975:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019978:	b1 01                	mov    cl,0x1
c001997a:	eb de                	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c001997c:	80 fa 6d             	cmp    dl,0x6d
c001997f:	0f 84 bf 02 00 00    	je     c0019c44 <Vm::faultHandler(regs*)+0x381>
c0019985:	77 17                	ja     c001999e <Vm::faultHandler(regs*)+0xdb>
c0019987:	80 fa 67             	cmp    dl,0x67
c001998a:	0f 84 3c 01 00 00    	je     c0019acc <Vm::faultHandler(regs*)+0x209>
c0019990:	80 fa 6c             	cmp    dl,0x6c
c0019993:	0f 84 5d 02 00 00    	je     c0019bf6 <Vm::faultHandler(regs*)+0x333>
c0019999:	e9 01 05 00 00       	jmp    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c001999e:	80 fa 6f             	cmp    dl,0x6f
c00199a1:	0f 84 8b 03 00 00    	je     c0019d32 <Vm::faultHandler(regs*)+0x46f>
c00199a7:	0f 82 0f 03 00 00    	jb     c0019cbc <Vm::faultHandler(regs*)+0x3f9>
c00199ad:	80 fa 9c             	cmp    dl,0x9c
c00199b0:	0f 84 23 01 00 00    	je     c0019ad9 <Vm::faultHandler(regs*)+0x216>
c00199b6:	e9 e4 04 00 00       	jmp    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c00199bb:	80 fa ec             	cmp    dl,0xec
c00199be:	0f 84 7f 04 00 00    	je     c0019e43 <Vm::faultHandler(regs*)+0x580>
c00199c4:	77 7b                	ja     c0019a41 <Vm::faultHandler(regs*)+0x17e>
c00199c6:	80 fa e4             	cmp    dl,0xe4
c00199c9:	0f 84 fe 03 00 00    	je     c0019dcd <Vm::faultHandler(regs*)+0x50a>
c00199cf:	77 53                	ja     c0019a24 <Vm::faultHandler(regs*)+0x161>
c00199d1:	80 fa cd             	cmp    dl,0xcd
c00199d4:	0f 84 cd 01 00 00    	je     c0019ba7 <Vm::faultHandler(regs*)+0x2e4>
c00199da:	80 fa cf             	cmp    dl,0xcf
c00199dd:	0f 85 bc 04 00 00    	jne    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c00199e3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00199e6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00199e9:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00199ed:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00199f0:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00199f4:	81 ca 00 02 02 00    	or     edx,0x20200
c00199fa:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00199fd:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a01:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a07:	66 c1 e8 09          	shr    ax,0x9
c0019a0b:	83 e0 01             	and    eax,0x1
c0019a0e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a11:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a14:	83 c0 06             	add    eax,0x6
c0019a17:	25 ff ff 00 00       	and    eax,0xffff
c0019a1c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a1f:	e9 77 04 00 00       	jmp    c0019e9b <Vm::faultHandler(regs*)+0x5d8>
c0019a24:	80 fa e6             	cmp    dl,0xe6
c0019a27:	0f 84 ea 03 00 00    	je     c0019e17 <Vm::faultHandler(regs*)+0x554>
c0019a2d:	0f 82 b6 03 00 00    	jb     c0019de9 <Vm::faultHandler(regs*)+0x526>
c0019a33:	80 fa e7             	cmp    dl,0xe7
c0019a36:	0f 84 f2 03 00 00    	je     c0019e2e <Vm::faultHandler(regs*)+0x56b>
c0019a3c:	e9 5e 04 00 00       	jmp    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c0019a41:	80 fa ef             	cmp    dl,0xef
c0019a44:	0f 84 3c 04 00 00    	je     c0019e86 <Vm::faultHandler(regs*)+0x5c3>
c0019a4a:	77 28                	ja     c0019a74 <Vm::faultHandler(regs*)+0x1b1>
c0019a4c:	80 fa ed             	cmp    dl,0xed
c0019a4f:	0f 84 0a 04 00 00    	je     c0019e5f <Vm::faultHandler(regs*)+0x59c>
c0019a55:	80 fa ee             	cmp    dl,0xee
c0019a58:	0f 85 41 04 00 00    	jne    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c0019a5e:	50                   	push   eax
c0019a5f:	50                   	push   eax
c0019a60:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a64:	50                   	push   eax
c0019a65:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a69:	50                   	push   eax
c0019a6a:	e8 00 fc ff ff       	call   c001966f <Vm::outbv(unsigned short, unsigned char)>
c0019a6f:	e9 0a 04 00 00       	jmp    c0019e7e <Vm::faultHandler(regs*)+0x5bb>
c0019a74:	80 fa fa             	cmp    dl,0xfa
c0019a77:	0f 84 5d 01 00 00    	je     c0019bda <Vm::faultHandler(regs*)+0x317>
c0019a7d:	80 fa fb             	cmp    dl,0xfb
c0019a80:	0f 84 62 01 00 00    	je     c0019be8 <Vm::faultHandler(regs*)+0x325>
c0019a86:	80 fa f3             	cmp    dl,0xf3
c0019a89:	0f 85 10 04 00 00    	jne    c0019e9f <Vm::faultHandler(regs*)+0x5dc>
c0019a8f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a92:	e9 c3 fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019a97:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a9a:	b1 02                	mov    cl,0x2
c0019a9c:	e9 b9 fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019aa1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aa4:	b1 03                	mov    cl,0x3
c0019aa6:	e9 af fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019aab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aae:	b1 04                	mov    cl,0x4
c0019ab0:	e9 a5 fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019ab5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab8:	b1 05                	mov    cl,0x5
c0019aba:	e9 9b fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019abf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac2:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019ac7:	e9 8e fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019acc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019acf:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019ad4:	e9 81 fe ff ff       	jmp    c001995a <Vm::faultHandler(regs*)+0x97>
c0019ad9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019adc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019ae0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ae5:	74 30                	je     c0019b17 <Vm::faultHandler(regs*)+0x254>
c0019ae7:	83 e9 04             	sub    ecx,0x4
c0019aea:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019af0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019af6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019af9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019afc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b02:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b06:	0f 84 8c 03 00 00    	je     c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019b0c:	80 ce 02             	or     dh,0x2
c0019b0f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b12:	e9 81 03 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019b17:	83 e9 02             	sub    ecx,0x2
c0019b1a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b20:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b23:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b27:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b2d:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b31:	74 05                	je     c0019b38 <Vm::faultHandler(regs*)+0x275>
c0019b33:	80 ce 02             	or     dh,0x2
c0019b36:	eb 03                	jmp    c0019b3b <Vm::faultHandler(regs*)+0x278>
c0019b38:	80 e6 fd             	and    dh,0xfd
c0019b3b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b3f:	e9 54 03 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019b44:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b49:	74 2a                	je     c0019b75 <Vm::faultHandler(regs*)+0x2b2>
c0019b4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b4d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b53:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b59:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b64:	c1 e8 09             	shr    eax,0x9
c0019b67:	83 e0 01             	and    eax,0x1
c0019b6a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b6d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b70:	83 c0 04             	add    eax,0x4
c0019b73:	eb 25                	jmp    c0019b9a <Vm::faultHandler(regs*)+0x2d7>
c0019b75:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b78:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b7e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b81:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019b84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b8a:	66 c1 e8 09          	shr    ax,0x9
c0019b8e:	83 e0 01             	and    eax,0x1
c0019b91:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b94:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b97:	83 c0 02             	add    eax,0x2
c0019b9a:	25 ff ff 00 00       	and    eax,0xffff
c0019b9f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019ba2:	e9 f1 02 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019ba7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bab:	3c ff                	cmp    al,0xff
c0019bad:	75 10                	jne    c0019bbf <Vm::faultHandler(regs*)+0x2fc>
c0019baf:	83 ec 0c             	sub    esp,0xc
c0019bb2:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bb5:	e8 86 f9 ff ff       	call   c0019540 <Thr::terminateFromIRQ(int)>
c0019bba:	e9 c2 02 00 00       	jmp    c0019e81 <Vm::faultHandler(regs*)+0x5be>
c0019bbf:	83 ec 0c             	sub    esp,0xc
c0019bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bca:	57                   	push   edi
c0019bcb:	50                   	push   eax
c0019bcc:	53                   	push   ebx
c0019bcd:	e8 f3 fb ff ff       	call   c00197c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bd2:	83 c4 20             	add    esp,0x20
c0019bd5:	e9 c1 02 00 00       	jmp    c0019e9b <Vm::faultHandler(regs*)+0x5d8>
c0019bda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bdf:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019be3:	e9 b0 02 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019be8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bed:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019bf1:	e9 a2 02 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019bf6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019bfb:	74 0d                	je     c0019c0a <Vm::faultHandler(regs*)+0x347>
c0019bfd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c04:	0f 87 e9 02 00 00    	ja     c0019ef3 <Vm::faultHandler(regs*)+0x630>
c0019c0a:	83 ec 0c             	sub    esp,0xc
c0019c0d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c10:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c14:	50                   	push   eax
c0019c15:	e8 4f fa ff ff       	call   c0019669 <Vm::inbv(unsigned short)>
c0019c1a:	83 c4 0c             	add    esp,0xc
c0019c1d:	0f b6 c0             	movzx  eax,al
c0019c20:	50                   	push   eax
c0019c21:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c25:	0f b7 c9             	movzx  ecx,cx
c0019c28:	50                   	push   eax
c0019c29:	51                   	push   ecx
c0019c2a:	e8 54 fc ff ff       	call   c0019883 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c35:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c39:	74 03                	je     c0019c3e <Vm::faultHandler(regs*)+0x37b>
c0019c3b:	48                   	dec    eax
c0019c3c:	eb 01                	jmp    c0019c3f <Vm::faultHandler(regs*)+0x37c>
c0019c3e:	40                   	inc    eax
c0019c3f:	0f b7 c0             	movzx  eax,ax
c0019c42:	eb 70                	jmp    c0019cb4 <Vm::faultHandler(regs*)+0x3f1>
c0019c44:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c47:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c4a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c4f:	74 0c                	je     c0019c5d <Vm::faultHandler(regs*)+0x39a>
c0019c51:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c57:	0f 87 96 02 00 00    	ja     c0019ef3 <Vm::faultHandler(regs*)+0x630>
c0019c5d:	0f b7 c9             	movzx  ecx,cx
c0019c60:	0f b7 f6             	movzx  esi,si
c0019c63:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c6b:	74 20                	je     c0019c8d <Vm::faultHandler(regs*)+0x3ca>
c0019c6d:	ed                   	in     eax,dx
c0019c6e:	55                   	push   ebp
c0019c6f:	50                   	push   eax
c0019c70:	51                   	push   ecx
c0019c71:	56                   	push   esi
c0019c72:	e8 37 fc ff ff       	call   c00198ae <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c77:	83 c4 10             	add    esp,0x10
c0019c7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c7d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c81:	74 05                	je     c0019c88 <Vm::faultHandler(regs*)+0x3c5>
c0019c83:	83 e8 04             	sub    eax,0x4
c0019c86:	eb 27                	jmp    c0019caf <Vm::faultHandler(regs*)+0x3ec>
c0019c88:	83 c0 04             	add    eax,0x4
c0019c8b:	eb 22                	jmp    c0019caf <Vm::faultHandler(regs*)+0x3ec>
c0019c8d:	66 ed                	in     ax,dx
c0019c8f:	0f b7 c0             	movzx  eax,ax
c0019c92:	57                   	push   edi
c0019c93:	50                   	push   eax
c0019c94:	51                   	push   ecx
c0019c95:	56                   	push   esi
c0019c96:	e8 fd fb ff ff       	call   c0019898 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ca1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ca5:	74 05                	je     c0019cac <Vm::faultHandler(regs*)+0x3e9>
c0019ca7:	83 e8 02             	sub    eax,0x2
c0019caa:	eb 03                	jmp    c0019caf <Vm::faultHandler(regs*)+0x3ec>
c0019cac:	83 c0 02             	add    eax,0x2
c0019caf:	25 ff ff 00 00       	and    eax,0xffff
c0019cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019cb7:	e9 dc 01 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019cbc:	49                   	dec    ecx
c0019cbd:	80 f9 05             	cmp    cl,0x5
c0019cc0:	77 24                	ja     c0019ce6 <Vm::faultHandler(regs*)+0x423>
c0019cc2:	0f b6 c9             	movzx  ecx,cl
c0019cc5:	ff 24 8d 28 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcdd8]
c0019ccc:	0f b7 f5             	movzx  esi,bp
c0019ccf:	eb 15                	jmp    c0019ce6 <Vm::faultHandler(regs*)+0x423>
c0019cd1:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019cd5:	eb 0f                	jmp    c0019ce6 <Vm::faultHandler(regs*)+0x423>
c0019cd7:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019cdb:	eb 09                	jmp    c0019ce6 <Vm::faultHandler(regs*)+0x423>
c0019cdd:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019ce1:	eb 03                	jmp    c0019ce6 <Vm::faultHandler(regs*)+0x423>
c0019ce3:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019ce6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019ce9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019cee:	74 0b                	je     c0019cfb <Vm::faultHandler(regs*)+0x438>
c0019cf0:	3d ff ff 00 00       	cmp    eax,0xffff
c0019cf5:	0f 87 f8 01 00 00    	ja     c0019ef3 <Vm::faultHandler(regs*)+0x630>
c0019cfb:	52                   	push   edx
c0019cfc:	52                   	push   edx
c0019cfd:	0f b7 c0             	movzx  eax,ax
c0019d00:	50                   	push   eax
c0019d01:	56                   	push   esi
c0019d02:	e8 48 fb ff ff       	call   c001984f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d07:	59                   	pop    ecx
c0019d08:	5e                   	pop    esi
c0019d09:	0f b6 c0             	movzx  eax,al
c0019d0c:	50                   	push   eax
c0019d0d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d11:	50                   	push   eax
c0019d12:	e8 58 f9 ff ff       	call   c001966f <Vm::outbv(unsigned short, unsigned char)>
c0019d17:	83 c4 10             	add    esp,0x10
c0019d1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d1d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d21:	74 03                	je     c0019d26 <Vm::faultHandler(regs*)+0x463>
c0019d23:	48                   	dec    eax
c0019d24:	eb 01                	jmp    c0019d27 <Vm::faultHandler(regs*)+0x464>
c0019d26:	40                   	inc    eax
c0019d27:	0f b7 c0             	movzx  eax,ax
c0019d2a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d2d:	e9 66 01 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019d32:	49                   	dec    ecx
c0019d33:	80 f9 05             	cmp    cl,0x5
c0019d36:	77 1f                	ja     c0019d57 <Vm::faultHandler(regs*)+0x494>
c0019d38:	0f b6 c9             	movzx  ecx,cl
c0019d3b:	ff 24 8d 40 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcdc0]
c0019d42:	89 ee                	mov    esi,ebp
c0019d44:	eb 11                	jmp    c0019d57 <Vm::faultHandler(regs*)+0x494>
c0019d46:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d49:	eb 0c                	jmp    c0019d57 <Vm::faultHandler(regs*)+0x494>
c0019d4b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d4e:	eb 07                	jmp    c0019d57 <Vm::faultHandler(regs*)+0x494>
c0019d50:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d53:	eb 02                	jmp    c0019d57 <Vm::faultHandler(regs*)+0x494>
c0019d55:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d57:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d5a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d5f:	74 0c                	je     c0019d6d <Vm::faultHandler(regs*)+0x4aa>
c0019d61:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d67:	0f 87 86 01 00 00    	ja     c0019ef3 <Vm::faultHandler(regs*)+0x630>
c0019d6d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d70:	0f b7 d6             	movzx  edx,si
c0019d73:	81 e7 00 04 00 00    	and    edi,0x400
c0019d79:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d7c:	0f b7 c1             	movzx  eax,cx
c0019d7f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d84:	74 1d                	je     c0019da3 <Vm::faultHandler(regs*)+0x4e0>
c0019d86:	55                   	push   ebp
c0019d87:	55                   	push   ebp
c0019d88:	50                   	push   eax
c0019d89:	52                   	push   edx
c0019d8a:	e8 e3 fa ff ff       	call   c0019872 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019d8f:	83 c4 10             	add    esp,0x10
c0019d92:	89 f2                	mov    edx,esi
c0019d94:	ef                   	out    dx,eax
c0019d95:	85 ff                	test   edi,edi
c0019d97:	74 05                	je     c0019d9e <Vm::faultHandler(regs*)+0x4db>
c0019d99:	83 e9 04             	sub    ecx,0x4
c0019d9c:	eb 21                	jmp    c0019dbf <Vm::faultHandler(regs*)+0x4fc>
c0019d9e:	83 c1 04             	add    ecx,0x4
c0019da1:	eb 1c                	jmp    c0019dbf <Vm::faultHandler(regs*)+0x4fc>
c0019da3:	55                   	push   ebp
c0019da4:	55                   	push   ebp
c0019da5:	50                   	push   eax
c0019da6:	52                   	push   edx
c0019da7:	e8 b4 fa ff ff       	call   c0019860 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dac:	83 c4 10             	add    esp,0x10
c0019daf:	89 f2                	mov    edx,esi
c0019db1:	66 ef                	out    dx,ax
c0019db3:	85 ff                	test   edi,edi
c0019db5:	74 05                	je     c0019dbc <Vm::faultHandler(regs*)+0x4f9>
c0019db7:	83 e9 02             	sub    ecx,0x2
c0019dba:	eb 03                	jmp    c0019dbf <Vm::faultHandler(regs*)+0x4fc>
c0019dbc:	83 c1 02             	add    ecx,0x2
c0019dbf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019dc5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019dc8:	e9 cb 00 00 00       	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019dcd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019dd4:	83 ec 0c             	sub    esp,0xc
c0019dd7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ddb:	50                   	push   eax
c0019ddc:	e8 88 f8 ff ff       	call   c0019669 <Vm::inbv(unsigned short)>
c0019de1:	0f b6 c0             	movzx  eax,al
c0019de4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019de7:	eb 3f                	jmp    c0019e28 <Vm::faultHandler(regs*)+0x565>
c0019de9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dee:	74 07                	je     c0019df7 <Vm::faultHandler(regs*)+0x534>
c0019df0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019df4:	ed                   	in     eax,dx
c0019df5:	eb 14                	jmp    c0019e0b <Vm::faultHandler(regs*)+0x548>
c0019df7:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019dfa:	66 31 c9             	xor    cx,cx
c0019dfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e00:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e04:	66 ed                	in     ax,dx
c0019e06:	0f b7 c0             	movzx  eax,ax
c0019e09:	09 c8                	or     eax,ecx
c0019e0b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e0e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e12:	e9 84 00 00 00       	jmp    c0019e9b <Vm::faultHandler(regs*)+0x5d8>
c0019e17:	52                   	push   edx
c0019e18:	52                   	push   edx
c0019e19:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e1d:	50                   	push   eax
c0019e1e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e22:	50                   	push   eax
c0019e23:	e8 47 f8 ff ff       	call   c001966f <Vm::outbv(unsigned short, unsigned char)>
c0019e28:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e2c:	eb 53                	jmp    c0019e81 <Vm::faultHandler(regs*)+0x5be>
c0019e2e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e31:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e35:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e3a:	74 03                	je     c0019e3f <Vm::faultHandler(regs*)+0x57c>
c0019e3c:	ef                   	out    dx,eax
c0019e3d:	eb cf                	jmp    c0019e0e <Vm::faultHandler(regs*)+0x54b>
c0019e3f:	66 ef                	out    dx,ax
c0019e41:	eb cb                	jmp    c0019e0e <Vm::faultHandler(regs*)+0x54b>
c0019e43:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e51:	50                   	push   eax
c0019e52:	e8 12 f8 ff ff       	call   c0019669 <Vm::inbv(unsigned short)>
c0019e57:	0f b6 c0             	movzx  eax,al
c0019e5a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e5d:	eb 1f                	jmp    c0019e7e <Vm::faultHandler(regs*)+0x5bb>
c0019e5f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e62:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e67:	74 03                	je     c0019e6c <Vm::faultHandler(regs*)+0x5a9>
c0019e69:	ed                   	in     eax,dx
c0019e6a:	eb 0d                	jmp    c0019e79 <Vm::faultHandler(regs*)+0x5b6>
c0019e6c:	66 ed                	in     ax,dx
c0019e6e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e71:	66 31 d2             	xor    dx,dx
c0019e74:	0f b7 c0             	movzx  eax,ax
c0019e77:	09 d0                	or     eax,edx
c0019e79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e7c:	eb 1a                	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019e7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e81:	83 c4 10             	add    esp,0x10
c0019e84:	eb 15                	jmp    c0019e9b <Vm::faultHandler(regs*)+0x5d8>
c0019e86:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e89:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e8c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e91:	74 03                	je     c0019e96 <Vm::faultHandler(regs*)+0x5d3>
c0019e93:	ef                   	out    dx,eax
c0019e94:	eb 02                	jmp    c0019e98 <Vm::faultHandler(regs*)+0x5d5>
c0019e96:	66 ef                	out    dx,ax
c0019e98:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e9b:	b0 01                	mov    al,0x1
c0019e9d:	eb 56                	jmp    c0019ef5 <Vm::faultHandler(regs*)+0x632>
c0019e9f:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019ea3:	50                   	push   eax
c0019ea4:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ea8:	50                   	push   eax
c0019ea9:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ead:	50                   	push   eax
c0019eae:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019eb2:	50                   	push   eax
c0019eb3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019eb7:	50                   	push   eax
c0019eb8:	52                   	push   edx
c0019eb9:	52                   	push   edx
c0019eba:	68 f9 31 02 c0       	push   0xc00231f9
c0019ebf:	e8 4f 53 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c0019ec4:	83 c4 20             	add    esp,0x20
c0019ec7:	83 ec 0c             	sub    esp,0xc
c0019eca:	6a 60                	push   0x60
c0019ecc:	e8 98 f7 ff ff       	call   c0019669 <Vm::inbv(unsigned short)>
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	3c 1c                	cmp    al,0x1c
c0019ed6:	74 04                	je     c0019edc <Vm::faultHandler(regs*)+0x619>
c0019ed8:	3c 5a                	cmp    al,0x5a
c0019eda:	75 eb                	jne    c0019ec7 <Vm::faultHandler(regs*)+0x604>
c0019edc:	3c 1c                	cmp    al,0x1c
c0019ede:	74 04                	je     c0019ee4 <Vm::faultHandler(regs*)+0x621>
c0019ee0:	3c 5a                	cmp    al,0x5a
c0019ee2:	75 0f                	jne    c0019ef3 <Vm::faultHandler(regs*)+0x630>
c0019ee4:	83 ec 0c             	sub    esp,0xc
c0019ee7:	6a 60                	push   0x60
c0019ee9:	e8 7b f7 ff ff       	call   c0019669 <Vm::inbv(unsigned short)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	eb e9                	jmp    c0019edc <Vm::faultHandler(regs*)+0x619>
c0019ef3:	31 c0                	xor    eax,eax
c0019ef5:	83 c4 1c             	add    esp,0x1c
c0019ef8:	5b                   	pop    ebx
c0019ef9:	5e                   	pop    esi
c0019efa:	5f                   	pop    edi
c0019efb:	5d                   	pop    ebp
c0019efc:	c3                   	ret    
c0019efd:	90                   	nop

c0019efe <FAT::getName()>:
c0019efe:	b8 58 32 02 c0       	mov    eax,0xc0023258
c0019f03:	c3                   	ret    

c0019f04 <FAT::tell(void*, unsigned long long*)>:
c0019f04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f09:	75 06                	jne    c0019f11 <FAT::tell(void*, unsigned long long*)+0xd>
c0019f0b:	b8 04 00 00 00       	mov    eax,0x4
c0019f10:	c3                   	ret    
c0019f11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f16:	75 06                	jne    c0019f1e <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f18:	b8 04 00 00 00       	mov    eax,0x4
c0019f1d:	c3                   	ret    
c0019f1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f22:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f25:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f2c:	89 01                	mov    DWORD PTR [ecx],eax
c0019f2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f31:	b8 00 00 00 00       	mov    eax,0x0
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <FAT::stat(void*, unsigned long long*)>:
c0019f38:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f3d:	75 06                	jne    c0019f45 <FAT::stat(void*, unsigned long long*)+0xd>
c0019f3f:	b8 04 00 00 00       	mov    eax,0x4
c0019f44:	c3                   	ret    
c0019f45:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f4a:	75 06                	jne    c0019f52 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f4c:	b8 04 00 00 00       	mov    eax,0x4
c0019f51:	c3                   	ret    
c0019f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f56:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f60:	89 01                	mov    DWORD PTR [ecx],eax
c0019f62:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f65:	b8 00 00 00 00       	mov    eax,0x0
c0019f6a:	c3                   	ret    
c0019f6b:	90                   	nop

c0019f6c <FAT::~FAT()>:
c0019f6c:	83 ec 0c             	sub    esp,0xc
c0019f6f:	ba dc 32 02 c0       	mov    edx,0xc00232dc
c0019f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f78:	89 10                	mov    DWORD PTR [eax],edx
c0019f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f7e:	83 ec 0c             	sub    esp,0xc
c0019f81:	50                   	push   eax
c0019f82:	e8 bd 55 ff ff       	call   c000f544 <Filesystem::~Filesystem()>
c0019f87:	83 c4 10             	add    esp,0x10
c0019f8a:	90                   	nop
c0019f8b:	83 c4 0c             	add    esp,0xc
c0019f8e:	c3                   	ret    
c0019f8f:	90                   	nop

c0019f90 <FAT::~FAT()>:
c0019f90:	83 ec 0c             	sub    esp,0xc
c0019f93:	83 ec 0c             	sub    esp,0xc
c0019f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f9a:	e8 cd ff ff ff       	call   c0019f6c <FAT::~FAT()>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	83 ec 08             	sub    esp,0x8
c0019fa5:	6a 08                	push   0x8
c0019fa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fab:	e8 3d 51 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	83 c4 0c             	add    esp,0xc
c0019fb6:	c3                   	ret    
c0019fb7:	90                   	nop

c0019fb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fb8:	83 ec 1c             	sub    esp,0x1c
c0019fbb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fc2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019fc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fcb:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c0019fd2:	83 f8 ff             	cmp    eax,0xffffffff
c0019fd5:	75 34                	jne    c001a00b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019fd7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019fdb:	88 c2                	mov    dl,al
c0019fdd:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c0019fe2:	01 d0                	add    eax,edx
c0019fe4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019fe8:	8b 15 e0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025be0
c0019fee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ff2:	89 14 85 00 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda400],edx
c0019ff9:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c0019ffe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a002:	89 14 85 80 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda380],edx
c001a009:	eb 17                	jmp    c001a022 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a00b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a00f:	88 c2                	mov    dl,al
c001a011:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a015:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a01c:	01 d0                	add    eax,edx
c001a01e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a022:	83 ec 04             	sub    esp,0x4
c001a025:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a029:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a02d:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a031:	50                   	push   eax
c001a032:	e8 9f ca fe ff       	call   c0006ad6 <f_getlabel>
c001a037:	83 c4 10             	add    esp,0x10
c001a03a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a03e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a043:	75 07                	jne    c001a04c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a045:	b8 00 00 00 00       	mov    eax,0x0
c001a04a:	eb 05                	jmp    c001a051 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a04c:	b8 01 00 00 00       	mov    eax,0x1
c001a051:	83 c4 1c             	add    esp,0x1c
c001a054:	c3                   	ret    
c001a055:	90                   	nop

c001a056 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a056:	57                   	push   edi
c001a057:	83 ec 58             	sub    esp,0x58
c001a05a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a062:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a066:	b8 00 00 00 00       	mov    eax,0x0
c001a06b:	b9 0f 00 00 00       	mov    ecx,0xf
c001a070:	fc                   	cld    
c001a071:	89 d7                	mov    edi,edx
c001a073:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a075:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a079:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a080:	83 f8 ff             	cmp    eax,0xffffffff
c001a083:	75 34                	jne    c001a0b9 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a085:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a089:	88 c2                	mov    dl,al
c001a08b:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a090:	01 d0                	add    eax,edx
c001a092:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a096:	8b 15 e0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025be0
c001a09c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0a0:	89 14 85 00 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda400],edx
c001a0a7:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a0ac:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0b0:	89 14 85 80 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda380],edx
c001a0b7:	eb 17                	jmp    c001a0d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0b9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0bd:	88 c2                	mov    dl,al
c001a0bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0c3:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a0ca:	01 d0                	add    eax,edx
c001a0cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0d0:	83 ec 08             	sub    esp,0x8
c001a0d3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0db:	50                   	push   eax
c001a0dc:	e8 38 67 fe ff       	call   c0000819 <strcat>
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	83 ec 0c             	sub    esp,0xc
c001a0e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0eb:	50                   	push   eax
c001a0ec:	e8 d9 cb fe ff       	call   c0006cca <f_setlabel>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a0f8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a0fd:	75 07                	jne    c001a106 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a0ff:	b8 00 00 00 00       	mov    eax,0x0
c001a104:	eb 05                	jmp    c001a10b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a106:	b8 01 00 00 00       	mov    eax,0x1
c001a10b:	83 c4 58             	add    esp,0x58
c001a10e:	5f                   	pop    edi
c001a10f:	c3                   	ret    

c001a110 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a110:	83 ec 2c             	sub    esp,0x2c
c001a113:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a11b:	83 ec 08             	sub    esp,0x8
c001a11e:	68 7c 32 02 c0       	push   0xc002327c
c001a123:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a127:	e8 87 66 fe ff       	call   c00007b3 <strcmp>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	85 c0                	test   eax,eax
c001a131:	0f 94 c0             	sete   al
c001a134:	84 c0                	test   al,al
c001a136:	74 0d                	je     c001a145 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a138:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a140:	e9 a6 00 00 00       	jmp    c001a1eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a145:	83 ec 08             	sub    esp,0x8
c001a148:	68 6e 32 02 c0       	push   0xc002326e
c001a14d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a151:	e8 5d 66 fe ff       	call   c00007b3 <strcmp>
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	85 c0                	test   eax,eax
c001a15b:	0f 94 c0             	sete   al
c001a15e:	84 c0                	test   al,al
c001a160:	74 0a                	je     c001a16c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a162:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a16a:	eb 7f                	jmp    c001a1eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a16c:	83 ec 08             	sub    esp,0x8
c001a16f:	68 74 32 02 c0       	push   0xc0023274
c001a174:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a178:	e8 36 66 fe ff       	call   c00007b3 <strcmp>
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	85 c0                	test   eax,eax
c001a182:	0f 94 c0             	sete   al
c001a185:	84 c0                	test   al,al
c001a187:	74 0a                	je     c001a193 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a189:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a191:	eb 58                	jmp    c001a1eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a193:	83 ec 08             	sub    esp,0x8
c001a196:	68 4c 05 02 c0       	push   0xc002054c
c001a19b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a19f:	e8 0f 66 fe ff       	call   c00007b3 <strcmp>
c001a1a4:	83 c4 10             	add    esp,0x10
c001a1a7:	85 c0                	test   eax,eax
c001a1a9:	0f 94 c0             	sete   al
c001a1ac:	84 c0                	test   al,al
c001a1ae:	74 0a                	je     c001a1ba <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1b0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1b8:	eb 31                	jmp    c001a1eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1ba:	83 ec 08             	sub    esp,0x8
c001a1bd:	68 7a 32 02 c0       	push   0xc002327a
c001a1c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1c6:	e8 e8 65 fe ff       	call   c00007b3 <strcmp>
c001a1cb:	83 c4 10             	add    esp,0x10
c001a1ce:	85 c0                	test   eax,eax
c001a1d0:	0f 94 c0             	sete   al
c001a1d3:	84 c0                	test   al,al
c001a1d5:	74 0a                	je     c001a1e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1d7:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a1df:	eb 0a                	jmp    c001a1eb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1e1:	b8 08 00 00 00       	mov    eax,0x8
c001a1e6:	e9 04 01 00 00       	jmp    c001a2ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1eb:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a1f2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a1f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1fb:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a202:	83 f8 ff             	cmp    eax,0xffffffff
c001a205:	75 34                	jne    c001a23b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a207:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a20b:	88 c2                	mov    dl,al
c001a20d:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a212:	01 d0                	add    eax,edx
c001a214:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a218:	8b 15 e0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025be0
c001a21e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a222:	89 14 85 00 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda400],edx
c001a229:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a22e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a232:	89 14 85 80 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda380],edx
c001a239:	eb 17                	jmp    c001a252 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a23b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a23f:	88 c2                	mov    dl,al
c001a241:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a245:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a24c:	01 d0                	add    eax,edx
c001a24e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a256:	88 04 24             	mov    BYTE PTR [esp],al
c001a259:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a25d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a261:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a269:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a26e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a276:	83 ec 0c             	sub    esp,0xc
c001a279:	68 00 20 00 00       	push   0x2000
c001a27e:	e8 5e 1d ff ff       	call   c000bfe1 <malloc>
c001a283:	83 c4 10             	add    esp,0x10
c001a286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a28a:	68 00 20 00 00       	push   0x2000
c001a28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a293:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a297:	50                   	push   eax
c001a298:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a29c:	50                   	push   eax
c001a29d:	e8 73 ce fe ff       	call   c0007115 <f_mkfs>
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2a9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2ae:	75 07                	jne    c001a2b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2b0:	b8 00 00 00 00       	mov    eax,0x0
c001a2b5:	eb 38                	jmp    c001a2ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2b7:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2bc:	75 17                	jne    c001a2d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2be:	83 ec 0c             	sub    esp,0xc
c001a2c1:	68 ac 32 02 c0       	push   0xc00232ac
c001a2c6:	e8 48 4f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	b8 09 00 00 00       	mov    eax,0x9
c001a2d3:	eb 1a                	jmp    c001a2ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2d9:	83 ec 08             	sub    esp,0x8
c001a2dc:	50                   	push   eax
c001a2dd:	68 80 32 02 c0       	push   0xc0023280
c001a2e2:	e8 2c 4f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001a2e7:	83 c4 10             	add    esp,0x10
c001a2ea:	b8 01 00 00 00       	mov    eax,0x1
c001a2ef:	83 c4 2c             	add    esp,0x2c
c001a2f2:	c3                   	ret    
c001a2f3:	90                   	nop

c001a2f4 <FAT::tryMount(LogicalDisk*, int)>:
c001a2f4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a2fa:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a2ff:	83 f8 14             	cmp    eax,0x14
c001a302:	75 17                	jne    c001a31b <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a304:	83 ec 0c             	sub    esp,0xc
c001a307:	68 92 32 02 c0       	push   0xc0023292
c001a30c:	e8 17 b7 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001a311:	83 c4 10             	add    esp,0x10
c001a314:	b0 00                	mov    al,0x0
c001a316:	e9 d7 01 00 00       	jmp    c001a4f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a31b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a322:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a328:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a32e:	3d 00 02 00 00       	cmp    eax,0x200
c001a333:	74 07                	je     c001a33c <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a335:	b0 00                	mov    al,0x0
c001a337:	e9 b6 01 00 00       	jmp    c001a4f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a33c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a344:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a34b:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a352:	83 f8 ff             	cmp    eax,0xffffffff
c001a355:	74 07                	je     c001a35e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a357:	b0 01                	mov    al,0x1
c001a359:	e9 94 01 00 00       	jmp    c001a4f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a35e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a368:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a370:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a377:	88 c2                	mov    dl,al
c001a379:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a37e:	01 d0                	add    eax,edx
c001a380:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a387:	8b 15 e0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025be0
c001a38d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a394:	89 14 85 00 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda400],edx
c001a39b:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a3a0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3a7:	89 14 85 80 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda380],edx
c001a3ae:	83 ec 0c             	sub    esp,0xc
c001a3b1:	68 54 02 00 00       	push   0x254
c001a3b6:	e8 26 1c ff ff       	call   c000bfe1 <malloc>
c001a3bb:	83 c4 10             	add    esp,0x10
c001a3be:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3c5:	83 ec 04             	sub    esp,0x4
c001a3c8:	6a 00                	push   0x0
c001a3ca:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3d1:	50                   	push   eax
c001a3d2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3d9:	e8 26 a9 fe ff       	call   c0004d04 <f_mount>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a3e8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a3f0:	74 19                	je     c001a40b <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a3f2:	83 ec 0c             	sub    esp,0xc
c001a3f5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3fc:	e8 00 1c ff ff       	call   c000c001 <rfree>
c001a401:	83 c4 10             	add    esp,0x10
c001a404:	b0 00                	mov    al,0x0
c001a406:	e9 e7 00 00 00       	jmp    c001a4f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a40b:	83 ec 04             	sub    esp,0x4
c001a40e:	68 00 01 00 00       	push   0x100
c001a413:	6a 00                	push   0x0
c001a415:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a41c:	50                   	push   eax
c001a41d:	e8 a1 62 fe ff       	call   c00006c3 <memset>
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	83 ec 08             	sub    esp,0x8
c001a428:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a42f:	50                   	push   eax
c001a430:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a437:	50                   	push   eax
c001a438:	e8 dc 63 fe ff       	call   c0000819 <strcat>
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	83 ec 08             	sub    esp,0x8
c001a443:	68 a0 32 02 c0       	push   0xc00232a0
c001a448:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a44f:	50                   	push   eax
c001a450:	e8 c4 63 fe ff       	call   c0000819 <strcat>
c001a455:	83 c4 10             	add    esp,0x10
c001a458:	83 ec 04             	sub    esp,0x4
c001a45b:	6a 01                	push   0x1
c001a45d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a464:	50                   	push   eax
c001a465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a469:	50                   	push   eax
c001a46a:	e8 f7 a8 fe ff       	call   c0004d66 <f_open>
c001a46f:	83 c4 10             	add    esp,0x10
c001a472:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a479:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a480:	85 c0                	test   eax,eax
c001a482:	74 0a                	je     c001a48e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a484:	78 2d                	js     c001a4b3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a486:	83 e8 04             	sub    eax,0x4
c001a489:	83 f8 01             	cmp    eax,0x1
c001a48c:	77 25                	ja     c001a4b3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a48e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a496:	83 ec 0c             	sub    esp,0xc
c001a499:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a49d:	50                   	push   eax
c001a49e:	e8 15 b4 fe ff       	call   c00058b8 <f_close>
c001a4a3:	83 c4 10             	add    esp,0x10
c001a4a6:	90                   	nop
c001a4a7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4af:	74 3a                	je     c001a4eb <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4b1:	eb 2d                	jmp    c001a4e0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4b3:	83 ec 0c             	sub    esp,0xc
c001a4b6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4bd:	e8 3f 1b ff ff       	call   c000c001 <rfree>
c001a4c2:	83 c4 10             	add    esp,0x10
c001a4c5:	83 ec 04             	sub    esp,0x4
c001a4c8:	6a 00                	push   0x0
c001a4ca:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4d1:	50                   	push   eax
c001a4d2:	6a 00                	push   0x0
c001a4d4:	e8 2b a8 fe ff       	call   c0004d04 <f_mount>
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	b0 00                	mov    al,0x0
c001a4de:	eb 12                	jmp    c001a4f2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a4e0:	a1 e0 5b 02 c0       	mov    eax,ds:0xc0025be0
c001a4e5:	40                   	inc    eax
c001a4e6:	a3 e0 5b 02 c0       	mov    ds:0xc0025be0,eax
c001a4eb:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a4f2:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a4f8:	c3                   	ret    
c001a4f9:	90                   	nop

c001a4fa <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a4fa:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a500:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a508:	74 0a                	je     c001a514 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a50a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a512:	75 0a                	jne    c001a51e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a514:	b8 04 00 00 00       	mov    eax,0x4
c001a519:	e9 dd 00 00 00       	jmp    c001a5fb <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a51e:	83 ec 08             	sub    esp,0x8
c001a521:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a528:	50                   	push   eax
c001a529:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a530:	e8 3b b9 fe ff       	call   c0005e70 <f_readdir>
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a53f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a545:	83 ec 0c             	sub    esp,0xc
c001a548:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a54f:	83 c0 1a             	add    eax,0x1a
c001a552:	50                   	push   eax
c001a553:	e8 88 61 fe ff       	call   c00006e0 <strlen>
c001a558:	83 c4 10             	add    esp,0x10
c001a55b:	ba 00 00 00 00       	mov    edx,0x0
c001a560:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a564:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a568:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a56f:	25 ff 00 00 00       	and    eax,0xff
c001a574:	83 e0 10             	and    eax,0x10
c001a577:	74 07                	je     c001a580 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a579:	b8 02 00 00 00       	mov    eax,0x2
c001a57e:	eb 05                	jmp    c001a585 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a580:	b8 01 00 00 00       	mov    eax,0x1
c001a585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a589:	83 ec 08             	sub    esp,0x8
c001a58c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a593:	83 c0 1a             	add    eax,0x1a
c001a596:	50                   	push   eax
c001a597:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a59b:	83 c0 10             	add    eax,0x10
c001a59e:	50                   	push   eax
c001a59f:	e8 be 61 fe ff       	call   c0000762 <strcpy>
c001a5a4:	83 c4 10             	add    esp,0x10
c001a5a7:	83 ec 04             	sub    esp,0x4
c001a5aa:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5b5:	50                   	push   eax
c001a5b6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5bd:	e8 cb 60 fe ff       	call   c000068d <memcpy>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5cc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5d2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5d9:	84 c0                	test   al,al
c001a5db:	75 07                	jne    c001a5e4 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a5dd:	b8 07 00 00 00       	mov    eax,0x7
c001a5e2:	eb 17                	jmp    c001a5fb <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a5e4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a5eb:	85 c0                	test   eax,eax
c001a5ed:	75 07                	jne    c001a5f6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a5ef:	b8 00 00 00 00       	mov    eax,0x0
c001a5f4:	eb 05                	jmp    c001a5fb <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a5f6:	b8 01 00 00 00       	mov    eax,0x1
c001a5fb:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a601:	c3                   	ret    

c001a602 <FAT::read(void*, unsigned long, void*, int*)>:
c001a602:	83 ec 1c             	sub    esp,0x1c
c001a605:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a60a:	74 07                	je     c001a613 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a60c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a611:	75 07                	jne    c001a61a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a613:	b8 04 00 00 00       	mov    eax,0x4
c001a618:	eb 3d                	jmp    c001a657 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a61a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a61e:	50                   	push   eax
c001a61f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a623:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a627:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a62b:	e8 72 ab fe ff       	call   c00051a2 <f_read>
c001a630:	83 c4 10             	add    esp,0x10
c001a633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a63b:	89 c2                	mov    edx,eax
c001a63d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a641:	89 10                	mov    DWORD PTR [eax],edx
c001a643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a647:	85 c0                	test   eax,eax
c001a649:	75 07                	jne    c001a652 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a64b:	b8 00 00 00 00       	mov    eax,0x0
c001a650:	eb 05                	jmp    c001a657 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a652:	b8 01 00 00 00       	mov    eax,0x1
c001a657:	83 c4 1c             	add    esp,0x1c
c001a65a:	c3                   	ret    
c001a65b:	90                   	nop

c001a65c <FAT::write(void*, unsigned long, void*, int*)>:
c001a65c:	83 ec 1c             	sub    esp,0x1c
c001a65f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a664:	74 07                	je     c001a66d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a666:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a66b:	75 07                	jne    c001a674 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a66d:	b8 04 00 00 00       	mov    eax,0x4
c001a672:	eb 3d                	jmp    c001a6b1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a674:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a678:	50                   	push   eax
c001a679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a67d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a681:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a685:	e8 98 ad fe ff       	call   c0005422 <f_write>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a691:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a695:	89 c2                	mov    edx,eax
c001a697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a69b:	89 10                	mov    DWORD PTR [eax],edx
c001a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6a1:	85 c0                	test   eax,eax
c001a6a3:	75 07                	jne    c001a6ac <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6a5:	b8 00 00 00 00       	mov    eax,0x0
c001a6aa:	eb 05                	jmp    c001a6b1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6ac:	b8 01 00 00 00       	mov    eax,0x1
c001a6b1:	83 c4 1c             	add    esp,0x1c
c001a6b4:	c3                   	ret    
c001a6b5:	90                   	nop

c001a6b6 <FAT::close(void*)>:
c001a6b6:	83 ec 1c             	sub    esp,0x1c
c001a6b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6be:	75 07                	jne    c001a6c7 <FAT::close(void*)+0x11>
c001a6c0:	b8 04 00 00 00       	mov    eax,0x4
c001a6c5:	eb 36                	jmp    c001a6fd <FAT::close(void*)+0x47>
c001a6c7:	83 ec 0c             	sub    esp,0xc
c001a6ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6ce:	e8 e5 b1 fe ff       	call   c00058b8 <f_close>
c001a6d3:	83 c4 10             	add    esp,0x10
c001a6d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6da:	83 ec 0c             	sub    esp,0xc
c001a6dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6e1:	e8 0b 19 ff ff       	call   c000bff1 <free>
c001a6e6:	83 c4 10             	add    esp,0x10
c001a6e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6ed:	85 c0                	test   eax,eax
c001a6ef:	75 07                	jne    c001a6f8 <FAT::close(void*)+0x42>
c001a6f1:	b8 00 00 00 00       	mov    eax,0x0
c001a6f6:	eb 05                	jmp    c001a6fd <FAT::close(void*)+0x47>
c001a6f8:	b8 01 00 00 00       	mov    eax,0x1
c001a6fd:	83 c4 1c             	add    esp,0x1c
c001a700:	c3                   	ret    
c001a701:	90                   	nop

c001a702 <FAT::closeDir(void*)>:
c001a702:	83 ec 1c             	sub    esp,0x1c
c001a705:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a70a:	75 07                	jne    c001a713 <FAT::closeDir(void*)+0x11>
c001a70c:	b8 04 00 00 00       	mov    eax,0x4
c001a711:	eb 36                	jmp    c001a749 <FAT::closeDir(void*)+0x47>
c001a713:	83 ec 0c             	sub    esp,0xc
c001a716:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a71a:	e8 2f b7 fe ff       	call   c0005e4e <f_closedir>
c001a71f:	83 c4 10             	add    esp,0x10
c001a722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a726:	83 ec 0c             	sub    esp,0xc
c001a729:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a72d:	e8 bf 18 ff ff       	call   c000bff1 <free>
c001a732:	83 c4 10             	add    esp,0x10
c001a735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a739:	85 c0                	test   eax,eax
c001a73b:	75 07                	jne    c001a744 <FAT::closeDir(void*)+0x42>
c001a73d:	b8 00 00 00 00       	mov    eax,0x0
c001a742:	eb 05                	jmp    c001a749 <FAT::closeDir(void*)+0x47>
c001a744:	b8 01 00 00 00       	mov    eax,0x1
c001a749:	83 c4 1c             	add    esp,0x1c
c001a74c:	c3                   	ret    
c001a74d:	90                   	nop

c001a74e <FAT::seek(void*, unsigned long long)>:
c001a74e:	83 ec 2c             	sub    esp,0x2c
c001a751:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a75d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a761:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a766:	75 07                	jne    c001a76f <FAT::seek(void*, unsigned long long)+0x21>
c001a768:	b8 04 00 00 00       	mov    eax,0x4
c001a76d:	eb 2f                	jmp    c001a79e <FAT::seek(void*, unsigned long long)+0x50>
c001a76f:	83 ec 04             	sub    esp,0x4
c001a772:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a776:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a77a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a77e:	e8 64 b1 fe ff       	call   c00058e7 <f_lseek>
c001a783:	83 c4 10             	add    esp,0x10
c001a786:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a78a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a78e:	85 c0                	test   eax,eax
c001a790:	75 07                	jne    c001a799 <FAT::seek(void*, unsigned long long)+0x4b>
c001a792:	b8 00 00 00 00       	mov    eax,0x0
c001a797:	eb 05                	jmp    c001a79e <FAT::seek(void*, unsigned long long)+0x50>
c001a799:	b8 01 00 00 00       	mov    eax,0x1
c001a79e:	83 c4 2c             	add    esp,0x2c
c001a7a1:	c3                   	ret    

c001a7a2 <fatWrapperReadDisk>:
c001a7a2:	83 ec 1c             	sub    esp,0x1c
c001a7a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7c0:	25 ff 00 00 00       	and    eax,0xff
c001a7c5:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c001a7cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7d0:	83 ec 0c             	sub    esp,0xc
c001a7d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7d7:	52                   	push   edx
c001a7d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7e0:	50                   	push   eax
c001a7e1:	e8 6e 80 ff ff       	call   c0012854 <LogicalDisk::read(unsigned long long, int, void*)>
c001a7e6:	83 c4 20             	add    esp,0x20
c001a7e9:	83 c4 1c             	add    esp,0x1c
c001a7ec:	c3                   	ret    

c001a7ed <fatWrapperWriteDisk>:
c001a7ed:	83 ec 1c             	sub    esp,0x1c
c001a7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a803:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a807:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a80b:	25 ff 00 00 00       	and    eax,0xff
c001a810:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c001a817:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a81b:	83 ec 0c             	sub    esp,0xc
c001a81e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a822:	52                   	push   edx
c001a823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a82b:	50                   	push   eax
c001a82c:	e8 8f 80 ff ff       	call   c00128c0 <LogicalDisk::write(unsigned long long, int, void*)>
c001a831:	83 c4 20             	add    esp,0x20
c001a834:	83 c4 1c             	add    esp,0x1c
c001a837:	c3                   	ret    

c001a838 <fatWrapperIoctl>:
c001a838:	53                   	push   ebx
c001a839:	83 ec 28             	sub    esp,0x28
c001a83c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a844:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a84c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a851:	75 35                	jne    c001a888 <fatWrapperIoctl+0x50>
c001a853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a857:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a85b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a85f:	25 ff 00 00 00       	and    eax,0xff
c001a864:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c001a86b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a871:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a877:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a87b:	66 89 02             	mov    WORD PTR [edx],ax
c001a87e:	b8 00 00 00 00       	mov    eax,0x0
c001a883:	e9 bb 00 00 00       	jmp    c001a943 <fatWrapperIoctl+0x10b>
c001a888:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a88d:	75 73                	jne    c001a902 <fatWrapperIoctl+0xca>
c001a88f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a893:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a897:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a89b:	25 ff 00 00 00       	and    eax,0xff
c001a8a0:	8b 04 85 60 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb2a0]
c001a8a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8ad:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8b3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8b9:	89 c8                	mov    eax,ecx
c001a8bb:	89 da                	mov    edx,ebx
c001a8bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8c1:	c1 e0 0a             	shl    eax,0xa
c001a8c4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8c8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8ce:	8b 0c 8d 60 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb2a0]
c001a8d5:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8db:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a8e1:	89 cb                	mov    ebx,ecx
c001a8e3:	c1 fb 1f             	sar    ebx,0x1f
c001a8e6:	53                   	push   ebx
c001a8e7:	51                   	push   ecx
c001a8e8:	52                   	push   edx
c001a8e9:	50                   	push   eax
c001a8ea:	e8 fd 4b 00 00       	call   c001f4ec <__udivdi3>
c001a8ef:	83 c4 10             	add    esp,0x10
c001a8f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a8f6:	89 01                	mov    DWORD PTR [ecx],eax
c001a8f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a8fb:	b8 00 00 00 00       	mov    eax,0x0
c001a900:	eb 41                	jmp    c001a943 <fatWrapperIoctl+0x10b>
c001a902:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a907:	75 07                	jne    c001a910 <fatWrapperIoctl+0xd8>
c001a909:	b8 00 00 00 00       	mov    eax,0x0
c001a90e:	eb 33                	jmp    c001a943 <fatWrapperIoctl+0x10b>
c001a910:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a915:	75 19                	jne    c001a930 <fatWrapperIoctl+0xf8>
c001a917:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a91f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a923:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a929:	b8 00 00 00 00       	mov    eax,0x0
c001a92e:	eb 13                	jmp    c001a943 <fatWrapperIoctl+0x10b>
c001a930:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a935:	75 07                	jne    c001a93e <fatWrapperIoctl+0x106>
c001a937:	b8 00 00 00 00       	mov    eax,0x0
c001a93c:	eb 05                	jmp    c001a943 <fatWrapperIoctl+0x10b>
c001a93e:	b8 04 00 00 00       	mov    eax,0x4
c001a943:	83 c4 28             	add    esp,0x28
c001a946:	5b                   	pop    ebx
c001a947:	c3                   	ret    

c001a948 <FAT::FAT()>:
c001a948:	83 ec 1c             	sub    esp,0x1c
c001a94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a94f:	83 ec 0c             	sub    esp,0xc
c001a952:	50                   	push   eax
c001a953:	e8 c8 4b ff ff       	call   c000f520 <Filesystem::Filesystem()>
c001a958:	83 c4 10             	add    esp,0x10
c001a95b:	ba dc 32 02 c0       	mov    edx,0xc00232dc
c001a960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a964:	89 10                	mov    DWORD PTR [eax],edx
c001a966:	c7 05 e0 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025be0,0x0
c001a970:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a978:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a97d:	7f 15                	jg     c001a994 <FAT::FAT()+0x4c>
c001a97f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a983:	c7 04 85 00 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda400],0xffffffff
c001a98e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a992:	eb e4                	jmp    c001a978 <FAT::FAT()+0x30>
c001a994:	90                   	nop
c001a995:	83 c4 1c             	add    esp,0x1c
c001a998:	c3                   	ret    
c001a999:	90                   	nop

c001a99a <FAT::fixFilepath(char*)>:
c001a99a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a99e:	8a 00                	mov    al,BYTE PTR [eax]
c001a9a0:	3c 40                	cmp    al,0x40
c001a9a2:	7e 2c                	jle    c001a9d0 <FAT::fixFilepath(char*)+0x36>
c001a9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9a8:	8a 00                	mov    al,BYTE PTR [eax]
c001a9aa:	83 e8 41             	sub    eax,0x41
c001a9ad:	88 c2                	mov    dl,al
c001a9af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9b3:	88 10                	mov    BYTE PTR [eax],dl
c001a9b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9b9:	8a 00                	mov    al,BYTE PTR [eax]
c001a9bb:	0f be c0             	movsx  eax,al
c001a9be:	8b 04 85 00 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda400]
c001a9c5:	83 c0 30             	add    eax,0x30
c001a9c8:	88 c2                	mov    dl,al
c001a9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ce:	88 10                	mov    BYTE PTR [eax],dl
c001a9d0:	90                   	nop
c001a9d1:	c3                   	ret    

c001a9d2 <FAT::open(char const*, void**, FileOpenMode)>:
c001a9d2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9d8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9e0:	74 0a                	je     c001a9ec <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a9e2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a9ea:	75 0a                	jne    c001a9f6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a9ec:	b8 04 00 00 00       	mov    eax,0x4
c001a9f1:	e9 00 01 00 00       	jmp    c001aaf6 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a9f6:	83 ec 08             	sub    esp,0x8
c001a9f9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa00:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa04:	50                   	push   eax
c001aa05:	e8 58 5d fe ff       	call   c0000762 <strcpy>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	83 ec 08             	sub    esp,0x8
c001aa10:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa14:	50                   	push   eax
c001aa15:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa1c:	e8 79 ff ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001aa21:	83 c4 10             	add    esp,0x10
c001aa24:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa33:	83 e0 01             	and    eax,0x1
c001aa36:	74 08                	je     c001aa40 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa38:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa47:	83 e0 04             	and    eax,0x4
c001aa4a:	74 10                	je     c001aa5c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa4c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa54:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa63:	83 e0 02             	and    eax,0x2
c001aa66:	74 08                	je     c001aa70 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa68:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa77:	83 e0 08             	and    eax,0x8
c001aa7a:	74 08                	je     c001aa84 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aa7c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aa84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa8b:	83 e0 10             	and    eax,0x10
c001aa8e:	74 08                	je     c001aa98 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aa90:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aa98:	83 ec 0c             	sub    esp,0xc
c001aa9b:	68 50 02 00 00       	push   0x250
c001aaa0:	e8 3c 15 ff ff       	call   c000bfe1 <malloc>
c001aaa5:	83 c4 10             	add    esp,0x10
c001aaa8:	89 c2                	mov    edx,eax
c001aaaa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aab1:	89 10                	mov    DWORD PTR [eax],edx
c001aab3:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aaba:	31 d2                	xor    edx,edx
c001aabc:	88 c2                	mov    dl,al
c001aabe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aac5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aac7:	83 ec 04             	sub    esp,0x4
c001aaca:	52                   	push   edx
c001aacb:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aacf:	52                   	push   edx
c001aad0:	50                   	push   eax
c001aad1:	e8 90 a2 fe ff       	call   c0004d66 <f_open>
c001aad6:	83 c4 10             	add    esp,0x10
c001aad9:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aae0:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001aae8:	74 07                	je     c001aaf1 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001aaea:	b8 01 00 00 00       	mov    eax,0x1
c001aaef:	eb 05                	jmp    c001aaf6 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aaf1:	b8 00 00 00 00       	mov    eax,0x0
c001aaf6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aafc:	c3                   	ret    
c001aafd:	90                   	nop

c001aafe <FAT::openDir(char const*, void**)>:
c001aafe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab04:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab0c:	74 0a                	je     c001ab18 <FAT::openDir(char const*, void**)+0x1a>
c001ab0e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab16:	75 07                	jne    c001ab1f <FAT::openDir(char const*, void**)+0x21>
c001ab18:	b8 04 00 00 00       	mov    eax,0x4
c001ab1d:	eb 7d                	jmp    c001ab9c <FAT::openDir(char const*, void**)+0x9e>
c001ab1f:	83 ec 08             	sub    esp,0x8
c001ab22:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab29:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab2d:	50                   	push   eax
c001ab2e:	e8 2f 5c fe ff       	call   c0000762 <strcpy>
c001ab33:	83 c4 10             	add    esp,0x10
c001ab36:	83 ec 08             	sub    esp,0x8
c001ab39:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab3d:	50                   	push   eax
c001ab3e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab45:	e8 50 fe ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001ab4a:	83 c4 10             	add    esp,0x10
c001ab4d:	83 ec 0c             	sub    esp,0xc
c001ab50:	6a 4c                	push   0x4c
c001ab52:	e8 8a 14 ff ff       	call   c000bfe1 <malloc>
c001ab57:	83 c4 10             	add    esp,0x10
c001ab5a:	89 c2                	mov    edx,eax
c001ab5c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab63:	89 10                	mov    DWORD PTR [eax],edx
c001ab65:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab6e:	83 ec 08             	sub    esp,0x8
c001ab71:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab75:	52                   	push   edx
c001ab76:	50                   	push   eax
c001ab77:	e8 d0 b1 fe ff       	call   c0005d4c <f_opendir>
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab86:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ab8e:	74 07                	je     c001ab97 <FAT::openDir(char const*, void**)+0x99>
c001ab90:	b8 01 00 00 00       	mov    eax,0x1
c001ab95:	eb 05                	jmp    c001ab9c <FAT::openDir(char const*, void**)+0x9e>
c001ab97:	b8 00 00 00 00       	mov    eax,0x0
c001ab9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aba2:	c3                   	ret    
c001aba3:	90                   	nop

c001aba4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aba4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abaa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abb2:	75 0a                	jne    c001abbe <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abb4:	b8 04 00 00 00       	mov    eax,0x4
c001abb9:	e9 cb 00 00 00       	jmp    c001ac89 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abbe:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abc6:	75 0a                	jne    c001abd2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abc8:	b8 04 00 00 00       	mov    eax,0x4
c001abcd:	e9 b7 00 00 00       	jmp    c001ac89 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abd2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abda:	75 0a                	jne    c001abe6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001abdc:	b8 04 00 00 00       	mov    eax,0x4
c001abe1:	e9 a3 00 00 00       	jmp    c001ac89 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abe6:	83 ec 08             	sub    esp,0x8
c001abe9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001abf0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001abf7:	50                   	push   eax
c001abf8:	e8 65 5b fe ff       	call   c0000762 <strcpy>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	83 ec 08             	sub    esp,0x8
c001ac03:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac0a:	50                   	push   eax
c001ac0b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac12:	e8 83 fd ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	83 ec 08             	sub    esp,0x8
c001ac1d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac21:	50                   	push   eax
c001ac22:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac29:	50                   	push   eax
c001ac2a:	e8 dc b2 fe ff       	call   c0005f0b <f_stat>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac39:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac40:	85 c0                	test   eax,eax
c001ac42:	74 07                	je     c001ac4b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac44:	83 f8 04             	cmp    eax,0x4
c001ac47:	74 34                	je     c001ac7d <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac49:	eb 39                	jmp    c001ac84 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac4b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac4f:	25 ff 00 00 00       	and    eax,0xff
c001ac54:	83 e0 10             	and    eax,0x10
c001ac57:	0f 95 c2             	setne  dl
c001ac5a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac61:	88 10                	mov    BYTE PTR [eax],dl
c001ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac6a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac71:	89 01                	mov    DWORD PTR [ecx],eax
c001ac73:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac76:	b8 00 00 00 00       	mov    eax,0x0
c001ac7b:	eb 0c                	jmp    c001ac89 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac7d:	b8 02 00 00 00       	mov    eax,0x2
c001ac82:	eb 05                	jmp    c001ac89 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac84:	b8 01 00 00 00       	mov    eax,0x1
c001ac89:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ac8f:	c3                   	ret    

c001ac90 <FAT::unlink(char const*)>:
c001ac90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ac96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ac9e:	75 07                	jne    c001aca7 <FAT::unlink(char const*)+0x17>
c001aca0:	b8 04 00 00 00       	mov    eax,0x4
c001aca5:	eb 5c                	jmp    c001ad03 <FAT::unlink(char const*)+0x73>
c001aca7:	83 ec 08             	sub    esp,0x8
c001acaa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acb5:	50                   	push   eax
c001acb6:	e8 a7 5a fe ff       	call   c0000762 <strcpy>
c001acbb:	83 c4 10             	add    esp,0x10
c001acbe:	83 ec 08             	sub    esp,0x8
c001acc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acc5:	50                   	push   eax
c001acc6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001accd:	e8 c8 fc ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001acd2:	83 c4 10             	add    esp,0x10
c001acd5:	83 ec 0c             	sub    esp,0xc
c001acd8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acdc:	50                   	push   eax
c001acdd:	e8 98 b5 fe ff       	call   c000627a <f_unlink>
c001ace2:	83 c4 10             	add    esp,0x10
c001ace5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001acec:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001acf3:	85 c0                	test   eax,eax
c001acf5:	75 07                	jne    c001acfe <FAT::unlink(char const*)+0x6e>
c001acf7:	b8 00 00 00 00       	mov    eax,0x0
c001acfc:	eb 05                	jmp    c001ad03 <FAT::unlink(char const*)+0x73>
c001acfe:	b8 01 00 00 00       	mov    eax,0x1
c001ad03:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad09:	c3                   	ret    

c001ad0a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad0a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad10:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad17:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad1e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad26:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad2e:	75 0a                	jne    c001ad3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad30:	b8 04 00 00 00       	mov    eax,0x4
c001ad35:	e9 43 01 00 00       	jmp    c001ae7d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad3a:	83 ec 08             	sub    esp,0x8
c001ad3d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad44:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad48:	50                   	push   eax
c001ad49:	e8 14 5a fe ff       	call   c0000762 <strcpy>
c001ad4e:	83 c4 10             	add    esp,0x10
c001ad51:	83 ec 08             	sub    esp,0x8
c001ad54:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad58:	50                   	push   eax
c001ad59:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad60:	e8 35 fc ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001ad65:	83 c4 10             	add    esp,0x10
c001ad68:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad70:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad78:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad7c:	25 ff 00 00 00       	and    eax,0xff
c001ad81:	83 e0 01             	and    eax,0x1
c001ad84:	74 08                	je     c001ad8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ad86:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ad8e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad92:	25 ff 00 00 00       	and    eax,0xff
c001ad97:	83 e0 02             	and    eax,0x2
c001ad9a:	74 08                	je     c001ada4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001ad9c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ada4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ada8:	25 ff 00 00 00       	and    eax,0xff
c001adad:	83 e0 04             	and    eax,0x4
c001adb0:	74 08                	je     c001adba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001adb2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001adba:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adbe:	25 ff 00 00 00       	and    eax,0xff
c001adc3:	83 e0 08             	and    eax,0x8
c001adc6:	74 08                	je     c001add0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001adc8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001add0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001add4:	25 ff 00 00 00       	and    eax,0xff
c001add9:	83 e0 01             	and    eax,0x1
c001addc:	74 08                	je     c001ade6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001adde:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ade6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adea:	25 ff 00 00 00       	and    eax,0xff
c001adef:	83 e0 02             	and    eax,0x2
c001adf2:	74 08                	je     c001adfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001adf4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001adfc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae00:	25 ff 00 00 00       	and    eax,0xff
c001ae05:	83 e0 04             	and    eax,0x4
c001ae08:	74 08                	je     c001ae12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae0a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae12:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae16:	25 ff 00 00 00       	and    eax,0xff
c001ae1b:	83 e0 08             	and    eax,0x8
c001ae1e:	74 08                	je     c001ae28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae20:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae28:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae2f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae36:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae3d:	31 d2                	xor    edx,edx
c001ae3f:	88 c2                	mov    dl,al
c001ae41:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae48:	25 ff 00 00 00       	and    eax,0xff
c001ae4d:	83 ec 04             	sub    esp,0x4
c001ae50:	52                   	push   edx
c001ae51:	50                   	push   eax
c001ae52:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae56:	50                   	push   eax
c001ae57:	e8 be ba fe ff       	call   c000691a <f_chmod>
c001ae5c:	83 c4 10             	add    esp,0x10
c001ae5f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae66:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae6d:	85 c0                	test   eax,eax
c001ae6f:	75 07                	jne    c001ae78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae71:	b8 00 00 00 00       	mov    eax,0x0
c001ae76:	eb 05                	jmp    c001ae7d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae78:	b8 01 00 00 00       	mov    eax,0x1
c001ae7d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae83:	c3                   	ret    

c001ae84 <FAT::rename(char const*, char const*)>:
c001ae84:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ae8a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ae92:	74 0a                	je     c001ae9e <FAT::rename(char const*, char const*)+0x1a>
c001ae94:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ae9c:	75 0a                	jne    c001aea8 <FAT::rename(char const*, char const*)+0x24>
c001ae9e:	b8 04 00 00 00       	mov    eax,0x4
c001aea3:	e9 98 00 00 00       	jmp    c001af40 <FAT::rename(char const*, char const*)+0xbc>
c001aea8:	83 ec 08             	sub    esp,0x8
c001aeab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aeb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aeb9:	50                   	push   eax
c001aeba:	e8 a3 58 fe ff       	call   c0000762 <strcpy>
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	83 ec 08             	sub    esp,0x8
c001aec5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aecc:	50                   	push   eax
c001aecd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aed4:	e8 c1 fa ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	83 ec 08             	sub    esp,0x8
c001aedf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aee6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aeea:	50                   	push   eax
c001aeeb:	e8 72 58 fe ff       	call   c0000762 <strcpy>
c001aef0:	83 c4 10             	add    esp,0x10
c001aef3:	83 ec 08             	sub    esp,0x8
c001aef6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aefa:	50                   	push   eax
c001aefb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af02:	e8 93 fa ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	83 ec 08             	sub    esp,0x8
c001af0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af11:	50                   	push   eax
c001af12:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af19:	50                   	push   eax
c001af1a:	e8 08 b7 fe ff       	call   c0006627 <f_rename>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af29:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af30:	85 c0                	test   eax,eax
c001af32:	75 07                	jne    c001af3b <FAT::rename(char const*, char const*)+0xb7>
c001af34:	b8 00 00 00 00       	mov    eax,0x0
c001af39:	eb 05                	jmp    c001af40 <FAT::rename(char const*, char const*)+0xbc>
c001af3b:	b8 01 00 00 00       	mov    eax,0x1
c001af40:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af46:	c3                   	ret    
c001af47:	90                   	nop

c001af48 <FAT::mkdir(char const*)>:
c001af48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af56:	75 07                	jne    c001af5f <FAT::mkdir(char const*)+0x17>
c001af58:	b8 04 00 00 00       	mov    eax,0x4
c001af5d:	eb 5c                	jmp    c001afbb <FAT::mkdir(char const*)+0x73>
c001af5f:	83 ec 08             	sub    esp,0x8
c001af62:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af69:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af6d:	50                   	push   eax
c001af6e:	e8 ef 57 fe ff       	call   c0000762 <strcpy>
c001af73:	83 c4 10             	add    esp,0x10
c001af76:	83 ec 08             	sub    esp,0x8
c001af79:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af7d:	50                   	push   eax
c001af7e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af85:	e8 10 fa ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001af8a:	83 c4 10             	add    esp,0x10
c001af8d:	83 ec 0c             	sub    esp,0xc
c001af90:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af94:	50                   	push   eax
c001af95:	e8 61 b4 fe ff       	call   c00063fb <f_mkdir>
c001af9a:	83 c4 10             	add    esp,0x10
c001af9d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afa4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afab:	85 c0                	test   eax,eax
c001afad:	75 07                	jne    c001afb6 <FAT::mkdir(char const*)+0x6e>
c001afaf:	b8 00 00 00 00       	mov    eax,0x0
c001afb4:	eb 05                	jmp    c001afbb <FAT::mkdir(char const*)+0x73>
c001afb6:	b8 01 00 00 00       	mov    eax,0x1
c001afbb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afc1:	c3                   	ret    

c001afc2 <FAT::exists(char const*)>:
c001afc2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afc8:	83 ec 08             	sub    esp,0x8
c001afcb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afd6:	50                   	push   eax
c001afd7:	e8 86 57 fe ff       	call   c0000762 <strcpy>
c001afdc:	83 c4 10             	add    esp,0x10
c001afdf:	83 ec 08             	sub    esp,0x8
c001afe2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001afe6:	50                   	push   eax
c001afe7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afee:	e8 a7 f9 ff ff       	call   c001a99a <FAT::fixFilepath(char*)>
c001aff3:	83 c4 10             	add    esp,0x10
c001aff6:	83 ec 08             	sub    esp,0x8
c001aff9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b000:	50                   	push   eax
c001b001:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b005:	50                   	push   eax
c001b006:	e8 00 af fe ff       	call   c0005f0b <f_stat>
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b015:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b01c:	85 c0                	test   eax,eax
c001b01e:	75 04                	jne    c001b024 <FAT::exists(char const*)+0x62>
c001b020:	b0 01                	mov    al,0x1
c001b022:	eb 02                	jmp    c001b026 <FAT::exists(char const*)+0x64>
c001b024:	b0 00                	mov    al,0x0
c001b026:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b02c:	c3                   	ret    
c001b02d:	90                   	nop

c001b02e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b02e:	b8 08 00 00 00       	mov    eax,0x8
c001b033:	c3                   	ret    

c001b034 <ISO9660::seek(void*, unsigned long long)>:
c001b034:	53                   	push   ebx
c001b035:	b8 04 00 00 00       	mov    eax,0x4
c001b03a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b03e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b042:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b046:	85 d2                	test   edx,edx
c001b048:	74 17                	je     c001b061 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b04a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b04d:	89 c8                	mov    eax,ecx
c001b04f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b052:	b8 01 00 00 00       	mov    eax,0x1
c001b057:	73 08                	jae    c001b061 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b059:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b05c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b05f:	31 c0                	xor    eax,eax
c001b061:	5b                   	pop    ebx
c001b062:	c3                   	ret    
c001b063:	90                   	nop

c001b064 <ISO9660::tell(void*, unsigned long long*)>:
c001b064:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b06c:	85 d2                	test   edx,edx
c001b06e:	74 12                	je     c001b082 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b070:	85 c0                	test   eax,eax
c001b072:	74 0e                	je     c001b082 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b074:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b077:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b07a:	89 10                	mov    DWORD PTR [eax],edx
c001b07c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b07f:	31 c0                	xor    eax,eax
c001b081:	c3                   	ret    
c001b082:	b8 04 00 00 00       	mov    eax,0x4
c001b087:	c3                   	ret    

c001b088 <ISO9660::getName()>:
c001b088:	b8 38 33 02 c0       	mov    eax,0xc0023338
c001b08d:	c3                   	ret    

c001b08e <ISO9660::stat(void*, unsigned long long*)>:
c001b08e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b096:	85 d2                	test   edx,edx
c001b098:	74 12                	je     c001b0ac <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b09a:	85 c0                	test   eax,eax
c001b09c:	74 0e                	je     c001b0ac <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b09e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0a1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0a4:	89 10                	mov    DWORD PTR [eax],edx
c001b0a6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0a9:	31 c0                	xor    eax,eax
c001b0ab:	c3                   	ret    
c001b0ac:	b8 04 00 00 00       	mov    eax,0x4
c001b0b1:	c3                   	ret    

c001b0b2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0b2:	b8 01 00 00 00       	mov    eax,0x1
c001b0b7:	c3                   	ret    

c001b0b8 <ISO9660::unlink(char const*)>:
c001b0b8:	b8 01 00 00 00       	mov    eax,0x1
c001b0bd:	c3                   	ret    

c001b0be <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0be:	b8 01 00 00 00       	mov    eax,0x1
c001b0c3:	c3                   	ret    

c001b0c4 <ISO9660::rename(char const*, char const*)>:
c001b0c4:	b8 01 00 00 00       	mov    eax,0x1
c001b0c9:	c3                   	ret    

c001b0ca <ISO9660::mkdir(char const*)>:
c001b0ca:	b8 01 00 00 00       	mov    eax,0x1
c001b0cf:	c3                   	ret    

c001b0d0 <ISO9660::close(void*)>:
c001b0d0:	83 ec 0c             	sub    esp,0xc
c001b0d3:	b8 04 00 00 00       	mov    eax,0x4
c001b0d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0dc:	85 d2                	test   edx,edx
c001b0de:	74 0e                	je     c001b0ee <ISO9660::close(void*)+0x1e>
c001b0e0:	83 ec 0c             	sub    esp,0xc
c001b0e3:	52                   	push   edx
c001b0e4:	e8 08 0f ff ff       	call   c000bff1 <free>
c001b0e9:	83 c4 10             	add    esp,0x10
c001b0ec:	31 c0                	xor    eax,eax
c001b0ee:	83 c4 0c             	add    esp,0xc
c001b0f1:	c3                   	ret    

c001b0f2 <ISO9660::closeDir(void*)>:
c001b0f2:	83 ec 0c             	sub    esp,0xc
c001b0f5:	b8 04 00 00 00       	mov    eax,0x4
c001b0fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0fe:	85 d2                	test   edx,edx
c001b100:	74 0e                	je     c001b110 <ISO9660::closeDir(void*)+0x1e>
c001b102:	83 ec 0c             	sub    esp,0xc
c001b105:	52                   	push   edx
c001b106:	e8 e6 0e ff ff       	call   c000bff1 <free>
c001b10b:	83 c4 10             	add    esp,0x10
c001b10e:	31 c0                	xor    eax,eax
c001b110:	83 c4 0c             	add    esp,0xc
c001b113:	c3                   	ret    

c001b114 <ISO9660::~ISO9660()>:
c001b114:	83 ec 0c             	sub    esp,0xc
c001b117:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001b11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b120:	89 10                	mov    DWORD PTR [eax],edx
c001b122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b126:	83 ec 0c             	sub    esp,0xc
c001b129:	50                   	push   eax
c001b12a:	e8 15 44 ff ff       	call   c000f544 <Filesystem::~Filesystem()>
c001b12f:	83 c4 10             	add    esp,0x10
c001b132:	90                   	nop
c001b133:	83 c4 0c             	add    esp,0xc
c001b136:	c3                   	ret    
c001b137:	90                   	nop

c001b138 <ISO9660::~ISO9660()>:
c001b138:	83 ec 0c             	sub    esp,0xc
c001b13b:	83 ec 0c             	sub    esp,0xc
c001b13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b142:	e8 cd ff ff ff       	call   c001b114 <ISO9660::~ISO9660()>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	83 ec 08             	sub    esp,0x8
c001b14d:	6a 08                	push   0x8
c001b14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b153:	e8 95 3f ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001b158:	83 c4 10             	add    esp,0x10
c001b15b:	83 c4 0c             	add    esp,0xc
c001b15e:	c3                   	ret    

c001b15f <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b15f:	55                   	push   ebp
c001b160:	31 c9                	xor    ecx,ecx
c001b162:	57                   	push   edi
c001b163:	56                   	push   esi
c001b164:	53                   	push   ebx
c001b165:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b169:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b16d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b171:	89 eb                	mov    ebx,ebp
c001b173:	39 ce                	cmp    esi,ecx
c001b175:	7e 17                	jle    c001b18e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b177:	31 d2                	xor    edx,edx
c001b179:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b17d:	7d 13                	jge    c001b192 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b17f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b183:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b186:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b189:	75 0d                	jne    c001b198 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b18b:	42                   	inc    edx
c001b18c:	eb eb                	jmp    c001b179 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b18e:	31 c0                	xor    eax,eax
c001b190:	eb 0a                	jmp    c001b19c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b192:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b196:	eb 04                	jmp    c001b19c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b198:	41                   	inc    ecx
c001b199:	43                   	inc    ebx
c001b19a:	eb d7                	jmp    c001b173 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b19c:	5b                   	pop    ebx
c001b19d:	5e                   	pop    esi
c001b19e:	5f                   	pop    edi
c001b19f:	5d                   	pop    ebp
c001b1a0:	c3                   	ret    

c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1a1:	56                   	push   esi
c001b1a2:	53                   	push   ebx
c001b1a3:	52                   	push   edx
c001b1a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1b0:	39 0d e0 5c 02 c0    	cmp    DWORD PTR ds:0xc0025ce0,ecx
c001b1b6:	75 08                	jne    c001b1c0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1b8:	38 05 88 41 02 c0    	cmp    BYTE PTR ds:0xc0024188,al
c001b1be:	74 2b                	je     c001b1eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1c0:	83 ec 0c             	sub    esp,0xc
c001b1c3:	31 db                	xor    ebx,ebx
c001b1c5:	a2 88 41 02 c0       	mov    ds:0xc0024188,al
c001b1ca:	89 0d e0 5c 02 c0    	mov    DWORD PTR ds:0xc0025ce0,ecx
c001b1d0:	68 00 5d 02 c0       	push   0xc0025d00
c001b1d5:	6a 01                	push   0x1
c001b1d7:	53                   	push   ebx
c001b1d8:	0f be c0             	movsx  eax,al
c001b1db:	51                   	push   ecx
c001b1dc:	ff 34 85 5c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb3a4]
c001b1e3:	e8 6c 76 ff ff       	call   c0012854 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1e8:	83 c4 20             	add    esp,0x20
c001b1eb:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b1f3:	c7 44 24 14 00 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d00
c001b1fb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b1ff:	58                   	pop    eax
c001b200:	5b                   	pop    ebx
c001b201:	5e                   	pop    esi
c001b202:	e9 86 54 fe ff       	jmp    c000068d <memcpy>
c001b207:	90                   	nop

c001b208 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b208:	81 ec 10 08 00 00    	sub    esp,0x810
c001b20e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b215:	83 c0 41             	add    eax,0x41
c001b218:	0f be c0             	movsx  eax,al
c001b21b:	50                   	push   eax
c001b21c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b220:	50                   	push   eax
c001b221:	6a 10                	push   0x10
c001b223:	e8 79 ff ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	31 c0                	xor    eax,eax
c001b22d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b232:	75 1d                	jne    c001b251 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b234:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b239:	75 16                	jne    c001b251 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b23b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b240:	75 0f                	jne    c001b251 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b242:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b247:	75 08                	jne    c001b251 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b249:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b24e:	0f 94 c0             	sete   al
c001b251:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b257:	c3                   	ret    

c001b258 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b258:	55                   	push   ebp
c001b259:	57                   	push   edi
c001b25a:	56                   	push   esi
c001b25b:	53                   	push   ebx
c001b25c:	81 ec 34 08 00 00    	sub    esp,0x834
c001b262:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b269:	55                   	push   ebp
c001b26a:	68 53 33 02 c0       	push   0xc0023353
c001b26f:	e8 9f 3f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001b274:	83 c4 10             	add    esp,0x10
c001b277:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b27f:	0f 84 06 02 00 00    	je     c001b48b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b285:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b28d:	0f 84 f8 01 00 00    	je     c001b48b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b293:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b29a:	b8 01 00 00 00       	mov    eax,0x1
c001b29f:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2a3:	0f 85 e7 01 00 00    	jne    c001b490 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2a9:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2ac:	31 d2                	xor    edx,edx
c001b2ae:	89 e9                	mov    ecx,ebp
c001b2b0:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2b3:	01 f1                	add    ecx,esi
c001b2b5:	89 d3                	mov    ebx,edx
c001b2b7:	11 fb                	adc    ebx,edi
c001b2b9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2bd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2c1:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2c8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2cb:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2de:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b2e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b2e6:	72 19                	jb     c001b301 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b2e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b2f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2ff:	eb 13                	jmp    c001b314 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b301:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b305:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b309:	29 f0                	sub    eax,esi
c001b30b:	19 fa                	sbb    edx,edi
c001b30d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b310:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b314:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b31b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b31e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b320:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b324:	c1 e0 0b             	shl    eax,0xb
c001b327:	53                   	push   ebx
c001b328:	01 c6                	add    esi,eax
c001b32a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b331:	11 d7                	adc    edi,edx
c001b333:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b337:	50                   	push   eax
c001b338:	89 fa                	mov    edx,edi
c001b33a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b33e:	50                   	push   eax
c001b33f:	89 f0                	mov    eax,esi
c001b341:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b345:	50                   	push   eax
c001b346:	e8 56 fe ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b34b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b352:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b356:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b35a:	83 c4 10             	add    esp,0x10
c001b35d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b360:	b8 00 08 00 00       	mov    eax,0x800
c001b365:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b36b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b36f:	29 d0                	sub    eax,edx
c001b371:	39 c1                	cmp    ecx,eax
c001b373:	83 db 00             	sbb    ebx,0x0
c001b376:	7d 19                	jge    c001b391 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b378:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b37d:	75 16                	jne    c001b395 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b37f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b386:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b38c:	e9 f6 00 00 00       	jmp    c001b487 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b391:	89 c5                	mov    ebp,eax
c001b393:	eb 03                	jmp    c001b398 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b395:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b398:	51                   	push   ecx
c001b399:	55                   	push   ebp
c001b39a:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b39e:	50                   	push   eax
c001b39f:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3a6:	e8 e2 52 fe ff       	call   c000068d <memcpy>
c001b3ab:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3b2:	01 e8                	add    eax,ebp
c001b3b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3bc:	89 e8                	mov    eax,ebp
c001b3be:	99                   	cdq    
c001b3bf:	01 ee                	add    esi,ebp
c001b3c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3c5:	11 d7                	adc    edi,edx
c001b3c7:	29 e9                	sub    ecx,ebp
c001b3c9:	19 d3                	sbb    ebx,edx
c001b3cb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3cf:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3db:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b3de:	b8 00 00 00 00       	mov    eax,0x0
c001b3e3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b3e7:	7d 3f                	jge    c001b428 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b3e9:	52                   	push   edx
c001b3ea:	89 fa                	mov    edx,edi
c001b3ec:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b3f3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b3f7:	50                   	push   eax
c001b3f8:	89 f0                	mov    eax,esi
c001b3fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3fe:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b402:	50                   	push   eax
c001b403:	e8 99 fd ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b408:	81 c6 00 08 00 00    	add    esi,0x800
c001b40e:	83 d7 00             	adc    edi,0x0
c001b411:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b419:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b421:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b426:	eb ab                	jmp    c001b3d3 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b42c:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b42f:	74 34                	je     c001b465 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b431:	50                   	push   eax
c001b432:	89 fa                	mov    edx,edi
c001b434:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b43b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b43f:	50                   	push   eax
c001b440:	89 f0                	mov    eax,esi
c001b442:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b446:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b44a:	55                   	push   ebp
c001b44b:	50                   	push   eax
c001b44c:	e8 50 fd ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b451:	83 c4 0c             	add    esp,0xc
c001b454:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b458:	55                   	push   ebp
c001b459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b45d:	e8 2b 52 fe ff       	call   c000068d <memcpy>
c001b462:	83 c4 10             	add    esp,0x10
c001b465:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b46c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b470:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b474:	89 38                	mov    DWORD PTR [eax],edi
c001b476:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b47d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b481:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b484:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b487:	31 c0                	xor    eax,eax
c001b489:	eb 05                	jmp    c001b490 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b48b:	b8 04 00 00 00       	mov    eax,0x4
c001b490:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b496:	5b                   	pop    ebx
c001b497:	5e                   	pop    esi
c001b498:	5f                   	pop    edi
c001b499:	5d                   	pop    ebp
c001b49a:	c3                   	ret    
c001b49b:	90                   	nop

c001b49c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b49c:	55                   	push   ebp
c001b49d:	57                   	push   edi
c001b49e:	56                   	push   esi
c001b49f:	53                   	push   ebx
c001b4a0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4a6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4ad:	85 f6                	test   esi,esi
c001b4af:	0f 84 62 02 00 00    	je     c001b717 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4b5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4bd:	0f 84 54 02 00 00    	je     c001b717 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4c3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4c6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4c9:	75 0a                	jne    c001b4d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4cb:	b8 07 00 00 00       	mov    eax,0x7
c001b4d0:	e9 47 02 00 00       	jmp    c001b71c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4d5:	50                   	push   eax
c001b4d6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4da:	50                   	push   eax
c001b4db:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4e2:	53                   	push   ebx
c001b4e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4e5:	c1 e0 0b             	shl    eax,0xb
c001b4e8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b4eb:	c1 e8 0b             	shr    eax,0xb
c001b4ee:	50                   	push   eax
c001b4ef:	e8 ad fc ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b4f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	89 c1                	mov    ecx,eax
c001b4fc:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b4ff:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b505:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b508:	84 db                	test   bl,bl
c001b50a:	0f 85 90 00 00 00    	jne    c001b5a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b510:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b516:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b51c:	29 c7                	sub    edi,eax
c001b51e:	89 fb                	mov    ebx,edi
c001b520:	c1 fb 1f             	sar    ebx,0x1f
c001b523:	01 f8                	add    eax,edi
c001b525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b529:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b52c:	11 da                	adc    edx,ebx
c001b52e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b531:	89 04 24             	mov    DWORD PTR [esp],eax
c001b534:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b538:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b53b:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b53e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b541:	89 d8                	mov    eax,ebx
c001b543:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b547:	ba 00 00 00 00       	mov    edx,0x0
c001b54c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b550:	b8 00 00 00 00       	mov    eax,0x0
c001b555:	73 0b                	jae    c001b562 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b557:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b55a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b55e:	29 f8                	sub    eax,edi
c001b560:	19 da                	sbb    edx,ebx
c001b562:	89 d3                	mov    ebx,edx
c001b564:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b567:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b56a:	09 c3                	or     ebx,eax
c001b56c:	0f 84 59 ff ff ff    	je     c001b4cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b572:	55                   	push   ebp
c001b573:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b577:	50                   	push   eax
c001b578:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b57f:	53                   	push   ebx
c001b580:	8b 06                	mov    eax,DWORD PTR [esi]
c001b582:	c1 e0 0b             	shl    eax,0xb
c001b585:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b589:	c1 e8 0b             	shr    eax,0xb
c001b58c:	50                   	push   eax
c001b58d:	e8 0f fc ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b592:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b595:	83 c4 10             	add    esp,0x10
c001b598:	25 ff 07 00 00       	and    eax,0x7ff
c001b59d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5a0:	57                   	push   edi
c001b5a1:	6a 28                	push   0x28
c001b5a3:	6a 00                	push   0x0
c001b5a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5a9:	50                   	push   eax
c001b5aa:	e8 14 51 fe ff       	call   c00006c3 <memset>
c001b5af:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5b2:	31 d2                	xor    edx,edx
c001b5b4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5ba:	89 f8                	mov    eax,edi
c001b5bc:	83 c0 21             	add    eax,0x21
c001b5bf:	83 d2 00             	adc    edx,0x0
c001b5c2:	89 c7                	mov    edi,eax
c001b5c4:	89 d5                	mov    ebp,edx
c001b5c6:	83 c4 10             	add    esp,0x10
c001b5c9:	31 c9                	xor    ecx,ecx
c001b5cb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5d2:	83 f9 28             	cmp    ecx,0x28
c001b5d5:	0f 94 c2             	sete   dl
c001b5d8:	88 04 24             	mov    BYTE PTR [esp],al
c001b5db:	88 d0                	mov    al,dl
c001b5dd:	ba ff 07 00 00       	mov    edx,0x7ff
c001b5e2:	39 fa                	cmp    edx,edi
c001b5e4:	ba 00 00 00 00       	mov    edx,0x0
c001b5e9:	19 ea                	sbb    edx,ebp
c001b5eb:	0f 92 c2             	setb   dl
c001b5ee:	09 c2                	or     edx,eax
c001b5f0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b5f4:	0f 94 c0             	sete   al
c001b5f7:	08 d0                	or     al,dl
c001b5f9:	75 16                	jne    c001b611 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b5fb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b5ff:	74 10                	je     c001b611 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b601:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b604:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b608:	41                   	inc    ecx
c001b609:	83 c7 01             	add    edi,0x1
c001b60c:	83 d5 00             	adc    ebp,0x0
c001b60f:	eb ba                	jmp    c001b5cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b611:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b618:	83 ec 0c             	sub    esp,0xc
c001b61b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b61f:	57                   	push   edi
c001b620:	e8 bb 50 fe ff       	call   c00006e0 <strlen>
c001b625:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b629:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b62c:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b633:	25 ff 07 00 00       	and    eax,0x7ff
c001b638:	01 c8                	add    eax,ecx
c001b63a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b642:	5a                   	pop    edx
c001b643:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b64a:	59                   	pop    ecx
c001b64b:	0f 95 c0             	setne  al
c001b64e:	0f b6 c0             	movzx  eax,al
c001b651:	40                   	inc    eax
c001b652:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b656:	57                   	push   edi
c001b657:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b65b:	50                   	push   eax
c001b65c:	e8 01 51 fe ff       	call   c0000762 <strcpy>
c001b661:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b665:	83 c4 10             	add    esp,0x10
c001b668:	84 c0                	test   al,al
c001b66a:	75 21                	jne    c001b68d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b66c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b674:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b67c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b684:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b68b:	eb 28                	jmp    c001b6b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b68d:	fe c8                	dec    al
c001b68f:	75 24                	jne    c001b6b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b691:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b699:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6a1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6a9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6b0:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6b5:	50                   	push   eax
c001b6b6:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6bd:	0f b6 fb             	movzx  edi,bl
c001b6c0:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6c4:	31 db                	xor    ebx,ebx
c001b6c6:	50                   	push   eax
c001b6c7:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6ce:	e8 ba 4f fe ff       	call   c000068d <memcpy>
c001b6d3:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6da:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6e0:	89 f9                	mov    ecx,edi
c001b6e2:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b6e5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b6e8:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b6eb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b6ee:	83 c4 10             	add    esp,0x10
c001b6f1:	39 c7                	cmp    edi,eax
c001b6f3:	89 df                	mov    edi,ebx
c001b6f5:	19 d7                	sbb    edi,edx
c001b6f7:	72 10                	jb     c001b709 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b6f9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b700:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b707:	eb 0a                	jmp    c001b713 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b709:	29 c8                	sub    eax,ecx
c001b70b:	19 da                	sbb    edx,ebx
c001b70d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b710:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b713:	31 c0                	xor    eax,eax
c001b715:	eb 05                	jmp    c001b71c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b717:	b8 04 00 00 00       	mov    eax,0x4
c001b71c:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b722:	5b                   	pop    ebx
c001b723:	5e                   	pop    esi
c001b724:	5f                   	pop    edi
c001b725:	5d                   	pop    ebp
c001b726:	c3                   	ret    

c001b727 <readRoot(unsigned int*, unsigned int*, char)>:
c001b727:	81 ec 40 08 00 00    	sub    esp,0x840
c001b72d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b735:	50                   	push   eax
c001b736:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b73a:	50                   	push   eax
c001b73b:	6a 10                	push   0x10
c001b73d:	e8 5f fa ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b742:	83 c4 0c             	add    esp,0xc
c001b745:	6a 22                	push   0x22
c001b747:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b74e:	50                   	push   eax
c001b74f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b753:	50                   	push   eax
c001b754:	e8 34 4f fe ff       	call   c000068d <memcpy>
c001b759:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b760:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b764:	89 10                	mov    DWORD PTR [eax],edx
c001b766:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b76d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b771:	89 10                	mov    DWORD PTR [eax],edx
c001b773:	b0 01                	mov    al,0x1
c001b775:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b77b:	c3                   	ret    

c001b77c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b77c:	55                   	push   ebp
c001b77d:	57                   	push   edi
c001b77e:	56                   	push   esi
c001b77f:	53                   	push   ebx
c001b780:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b786:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b78d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b794:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b798:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b79c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7a0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7a4:	75 03                	jne    c001b7a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7a6:	83 c3 02             	add    ebx,0x2
c001b7a9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7ac:	75 03                	jne    c001b7b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7ae:	43                   	inc    ebx
c001b7af:	eb f8                	jmp    c001b7a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7b1:	51                   	push   ecx
c001b7b2:	68 00 01 00 00       	push   0x100
c001b7b7:	6a 00                	push   0x0
c001b7b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7bd:	50                   	push   eax
c001b7be:	e8 00 4f fe ff       	call   c00006c3 <memset>
c001b7c3:	83 c4 10             	add    esp,0x10
c001b7c6:	31 d2                	xor    edx,edx
c001b7c8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7cb:	84 c0                	test   al,al
c001b7cd:	74 21                	je     c001b7f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7cf:	3c 2f                	cmp    al,0x2f
c001b7d1:	75 0b                	jne    c001b7de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7d3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7d7:	bd 01 00 00 00       	mov    ebp,0x1
c001b7dc:	eb 14                	jmp    c001b7f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b7de:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b7e1:	80 f9 19             	cmp    cl,0x19
c001b7e4:	77 03                	ja     c001b7e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b7e6:	83 e8 20             	sub    eax,0x20
c001b7e9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b7ed:	42                   	inc    edx
c001b7ee:	eb d8                	jmp    c001b7c8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b7f0:	31 ed                	xor    ebp,ebp
c001b7f2:	83 ec 0c             	sub    esp,0xc
c001b7f5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b7fc:	e8 e0 07 ff ff       	call   c000bfe1 <malloc>
c001b801:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b808:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b80e:	89 c6                	mov    esi,eax
c001b810:	c1 ef 0b             	shr    edi,0xb
c001b813:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b81a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b81e:	83 c4 10             	add    esp,0x10
c001b821:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b826:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b82a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b831:	74 28                	je     c001b85b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b833:	52                   	push   edx
c001b834:	57                   	push   edi
c001b835:	50                   	push   eax
c001b836:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b83a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b841:	e8 5b f9 ff ff       	call   c001b1a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b846:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b84a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b851:	05 00 08 00 00       	add    eax,0x800
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	eb cb                	jmp    c001b826 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b85b:	83 ec 0c             	sub    esp,0xc
c001b85e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b862:	57                   	push   edi
c001b863:	e8 78 4e fe ff       	call   c00006e0 <strlen>
c001b868:	50                   	push   eax
c001b869:	57                   	push   edi
c001b86a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b871:	56                   	push   esi
c001b872:	e8 e8 f8 ff ff       	call   c001b15f <__memmem(unsigned char*, int, unsigned char*, int)>
c001b877:	83 c4 20             	add    esp,0x20
c001b87a:	85 c0                	test   eax,eax
c001b87c:	75 13                	jne    c001b891 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b87e:	83 ec 0c             	sub    esp,0xc
c001b881:	56                   	push   esi
c001b882:	e8 6a 07 ff ff       	call   c000bff1 <free>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	31 c0                	xor    eax,eax
c001b88c:	e9 b3 00 00 00       	jmp    c001b944 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b891:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b895:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b899:	c1 e7 08             	shl    edi,0x8
c001b89c:	c1 e2 10             	shl    edx,0x10
c001b89f:	09 d7                	or     edi,edx
c001b8a1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8a5:	09 d7                	or     edi,edx
c001b8a7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8ab:	c1 e2 18             	shl    edx,0x18
c001b8ae:	09 d7                	or     edi,edx
c001b8b0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8b4:	89 d1                	mov    ecx,edx
c001b8b6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8ba:	c1 e1 08             	shl    ecx,0x8
c001b8bd:	c1 e2 10             	shl    edx,0x10
c001b8c0:	09 ca                	or     edx,ecx
c001b8c2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8c6:	09 ca                	or     edx,ecx
c001b8c8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8cc:	c1 e1 18             	shl    ecx,0x18
c001b8cf:	09 ca                	or     edx,ecx
c001b8d1:	89 e9                	mov    ecx,ebp
c001b8d3:	84 c9                	test   cl,cl
c001b8d5:	74 3c                	je     c001b913 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	56                   	push   esi
c001b8df:	e8 0d 07 ff ff       	call   c000bff1 <free>
c001b8e4:	83 c4 0c             	add    esp,0xc
c001b8e7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b8ee:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b8f3:	50                   	push   eax
c001b8f4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b8fb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b902:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b906:	52                   	push   edx
c001b907:	57                   	push   edi
c001b908:	53                   	push   ebx
c001b909:	e8 6e fe ff ff       	call   c001b77c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b90e:	83 c4 20             	add    esp,0x20
c001b911:	eb 31                	jmp    c001b944 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b913:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b91a:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b91d:	d0 e8                	shr    al,1
c001b91f:	83 ec 0c             	sub    esp,0xc
c001b922:	89 3b                	mov    DWORD PTR [ebx],edi
c001b924:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b92b:	83 e0 01             	and    eax,0x1
c001b92e:	89 13                	mov    DWORD PTR [ebx],edx
c001b930:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b937:	89 03                	mov    DWORD PTR [ebx],eax
c001b939:	56                   	push   esi
c001b93a:	e8 b2 06 ff ff       	call   c000bff1 <free>
c001b93f:	83 c4 10             	add    esp,0x10
c001b942:	b0 01                	mov    al,0x1
c001b944:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b94a:	5b                   	pop    ebx
c001b94b:	5e                   	pop    esi
c001b94c:	5f                   	pop    edi
c001b94d:	5d                   	pop    ebp
c001b94e:	c3                   	ret    

c001b94f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b94f:	55                   	push   ebp
c001b950:	57                   	push   edi
c001b951:	56                   	push   esi
c001b952:	53                   	push   ebx
c001b953:	83 ec 20             	sub    esp,0x20
c001b956:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b95a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b95e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b963:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b967:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b96f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b977:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b97d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b983:	57                   	push   edi
c001b984:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b988:	50                   	push   eax
c001b989:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b98d:	50                   	push   eax
c001b98e:	e8 94 fd ff ff       	call   c001b727 <readRoot(unsigned int*, unsigned int*, char)>
c001b993:	5a                   	pop    edx
c001b994:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b998:	e8 43 4d fe ff       	call   c00006e0 <strlen>
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	83 f8 03             	cmp    eax,0x3
c001b9a3:	77 17                	ja     c001b9bc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9a9:	89 03                	mov    DWORD PTR [ebx],eax
c001b9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9af:	89 06                	mov    DWORD PTR [esi],eax
c001b9b1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9b8:	b0 01                	mov    al,0x1
c001b9ba:	eb 19                	jmp    c001b9d5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9bc:	50                   	push   eax
c001b9bd:	55                   	push   ebp
c001b9be:	57                   	push   edi
c001b9bf:	56                   	push   esi
c001b9c0:	53                   	push   ebx
c001b9c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9cd:	e8 aa fd ff ff       	call   c001b77c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9d2:	83 c4 20             	add    esp,0x20
c001b9d5:	83 c4 1c             	add    esp,0x1c
c001b9d8:	5b                   	pop    ebx
c001b9d9:	5e                   	pop    esi
c001b9da:	5f                   	pop    edi
c001b9db:	5d                   	pop    ebp
c001b9dc:	c3                   	ret    
c001b9dd:	90                   	nop

c001b9de <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9de:	57                   	push   edi
c001b9df:	56                   	push   esi
c001b9e0:	53                   	push   ebx
c001b9e1:	83 ec 10             	sub    esp,0x10
c001b9e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b9e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b9ec:	85 f6                	test   esi,esi
c001b9ee:	74 7b                	je     c001ba6b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b9f0:	85 ff                	test   edi,edi
c001b9f2:	74 77                	je     c001ba6b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	6a 1c                	push   0x1c
c001b9f9:	e8 e3 05 ff ff       	call   c000bfe1 <malloc>
c001b9fe:	89 07                	mov    DWORD PTR [edi],eax
c001ba00:	89 c3                	mov    ebx,eax
c001ba02:	58                   	pop    eax
c001ba03:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba07:	50                   	push   eax
c001ba08:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba0b:	50                   	push   eax
c001ba0c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba10:	50                   	push   eax
c001ba11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba15:	50                   	push   eax
c001ba16:	56                   	push   esi
c001ba17:	e8 33 ff ff ff       	call   c001b94f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba1c:	83 c4 20             	add    esp,0x20
c001ba1f:	84 c0                	test   al,al
c001ba21:	74 07                	je     c001ba2a <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba23:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba28:	74 0b                	je     c001ba35 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba2a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba2e:	b8 01 00 00 00       	mov    eax,0x1
c001ba33:	eb 3b                	jmp    c001ba70 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba39:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba3d:	89 03                	mov    DWORD PTR [ebx],eax
c001ba3f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba4a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba51:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba5b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba62:	8a 06                	mov    al,BYTE PTR [esi]
c001ba64:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba67:	31 c0                	xor    eax,eax
c001ba69:	eb 05                	jmp    c001ba70 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba6b:	b8 04 00 00 00       	mov    eax,0x4
c001ba70:	83 c4 10             	add    esp,0x10
c001ba73:	5b                   	pop    ebx
c001ba74:	5e                   	pop    esi
c001ba75:	5f                   	pop    edi
c001ba76:	c3                   	ret    
c001ba77:	90                   	nop

c001ba78 <ISO9660::exists(char const*)>:
c001ba78:	83 ec 28             	sub    esp,0x28
c001ba7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba7f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba83:	52                   	push   edx
c001ba84:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ba87:	52                   	push   edx
c001ba88:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ba8c:	52                   	push   edx
c001ba8d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ba91:	52                   	push   edx
c001ba92:	50                   	push   eax
c001ba93:	e8 b7 fe ff ff       	call   c001b94f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba98:	83 c4 3c             	add    esp,0x3c
c001ba9b:	c3                   	ret    

c001ba9c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ba9c:	56                   	push   esi
c001ba9d:	53                   	push   ebx
c001ba9e:	83 ec 14             	sub    esp,0x14
c001baa1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001baa5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001baa9:	85 db                	test   ebx,ebx
c001baab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001baaf:	0f 94 c2             	sete   dl
c001bab2:	85 f6                	test   esi,esi
c001bab4:	0f 94 c0             	sete   al
c001bab7:	08 c2                	or     dl,al
c001bab9:	75 68                	jne    c001bb23 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001babb:	85 c9                	test   ecx,ecx
c001babd:	74 64                	je     c001bb23 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001babf:	83 ec 0c             	sub    esp,0xc
c001bac2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bac5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bacb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bad2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bad6:	50                   	push   eax
c001bad7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001bada:	50                   	push   eax
c001badb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001badf:	50                   	push   eax
c001bae0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bae4:	50                   	push   eax
c001bae5:	51                   	push   ecx
c001bae6:	e8 64 fe ff ff       	call   c001b94f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baeb:	83 c4 20             	add    esp,0x20
c001baee:	ba 01 00 00 00       	mov    edx,0x1
c001baf3:	84 c0                	test   al,al
c001baf5:	74 31                	je     c001bb28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001baf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bafb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb02:	89 03                	mov    DWORD PTR [ebx],eax
c001bb04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb08:	85 c0                	test   eax,eax
c001bb0a:	ba 00 00 00 00       	mov    edx,0x0
c001bb0f:	0f 95 06             	setne  BYTE PTR [esi]
c001bb12:	74 14                	je     c001bb28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb1a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb21:	eb 05                	jmp    c001bb28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb23:	ba 04 00 00 00       	mov    edx,0x4
c001bb28:	83 c4 14             	add    esp,0x14
c001bb2b:	89 d0                	mov    eax,edx
c001bb2d:	5b                   	pop    ebx
c001bb2e:	5e                   	pop    esi
c001bb2f:	c3                   	ret    

c001bb30 <ISO9660::openDir(char const*, void**)>:
c001bb30:	57                   	push   edi
c001bb31:	56                   	push   esi
c001bb32:	53                   	push   ebx
c001bb33:	83 ec 10             	sub    esp,0x10
c001bb36:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb3a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb3e:	85 f6                	test   esi,esi
c001bb40:	0f 84 95 00 00 00    	je     c001bbdb <ISO9660::openDir(char const*, void**)+0xab>
c001bb46:	85 ff                	test   edi,edi
c001bb48:	0f 84 8d 00 00 00    	je     c001bbdb <ISO9660::openDir(char const*, void**)+0xab>
c001bb4e:	83 ec 0c             	sub    esp,0xc
c001bb51:	6a 1c                	push   0x1c
c001bb53:	e8 89 04 ff ff       	call   c000bfe1 <malloc>
c001bb58:	89 07                	mov    DWORD PTR [edi],eax
c001bb5a:	89 c3                	mov    ebx,eax
c001bb5c:	59                   	pop    ecx
c001bb5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb61:	50                   	push   eax
c001bb62:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb65:	50                   	push   eax
c001bb66:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb6a:	50                   	push   eax
c001bb6b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb6f:	50                   	push   eax
c001bb70:	56                   	push   esi
c001bb71:	e8 d9 fd ff ff       	call   c001b94f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb76:	83 c4 20             	add    esp,0x20
c001bb79:	84 c0                	test   al,al
c001bb7b:	74 07                	je     c001bb84 <ISO9660::openDir(char const*, void**)+0x54>
c001bb7d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb82:	75 21                	jne    c001bba5 <ISO9660::openDir(char const*, void**)+0x75>
c001bb84:	52                   	push   edx
c001bb85:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb89:	0f b6 c0             	movzx  eax,al
c001bb8c:	50                   	push   eax
c001bb8d:	68 66 33 02 c0       	push   0xc0023366
c001bb92:	e8 7c 36 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001bb97:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	b8 01 00 00 00       	mov    eax,0x1
c001bba3:	eb 3b                	jmp    c001bbe0 <ISO9660::openDir(char const*, void**)+0xb0>
c001bba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bba9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbad:	89 03                	mov    DWORD PTR [ebx],eax
c001bbaf:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbc1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbc8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbcb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbd2:	8a 06                	mov    al,BYTE PTR [esi]
c001bbd4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbd7:	31 c0                	xor    eax,eax
c001bbd9:	eb 05                	jmp    c001bbe0 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbdb:	b8 04 00 00 00       	mov    eax,0x4
c001bbe0:	83 c4 10             	add    esp,0x10
c001bbe3:	5b                   	pop    ebx
c001bbe4:	5e                   	pop    esi
c001bbe5:	5f                   	pop    edi
c001bbe6:	c3                   	ret    
c001bbe7:	90                   	nop

c001bbe8 <ISO9660::ISO9660()>:
c001bbe8:	83 ec 0c             	sub    esp,0xc
c001bbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbef:	83 ec 0c             	sub    esp,0xc
c001bbf2:	50                   	push   eax
c001bbf3:	e8 28 39 ff ff       	call   c000f520 <Filesystem::Filesystem()>
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001bc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc04:	89 10                	mov    DWORD PTR [eax],edx
c001bc06:	90                   	nop
c001bc07:	83 c4 0c             	add    esp,0xc
c001bc0a:	c3                   	ret    
c001bc0b:	90                   	nop

c001bc0c <SoundChannel::~SoundChannel()>:
c001bc0c:	83 ec 0c             	sub    esp,0xc
c001bc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	50                   	push   eax
c001bc1a:	e8 d2 03 ff ff       	call   c000bff1 <free>
c001bc1f:	83 c4 10             	add    esp,0x10
c001bc22:	90                   	nop
c001bc23:	83 c4 0c             	add    esp,0xc
c001bc26:	c3                   	ret    
c001bc27:	90                   	nop

c001bc28 <SoundChannel::setSpeed(float)>:
c001bc28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc2c:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc30:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc33:	c3                   	ret    

c001bc34 <SoundChannel::getSpeed()>:
c001bc34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc38:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc3b:	c3                   	ret    

c001bc3c <SoundChannel::setVolume(int)>:
c001bc3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc40:	83 f8 64             	cmp    eax,0x64
c001bc43:	7e 05                	jle    c001bc4a <SoundChannel::setVolume(int)+0xe>
c001bc45:	b8 64 00 00 00       	mov    eax,0x64
c001bc4a:	85 c0                	test   eax,eax
c001bc4c:	79 02                	jns    c001bc50 <SoundChannel::setVolume(int)+0x14>
c001bc4e:	31 c0                	xor    eax,eax
c001bc50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc54:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc57:	c3                   	ret    

c001bc58 <SoundChannel::getVolume()>:
c001bc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc5c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc5f:	c3                   	ret    

c001bc60 <SoundChannel::pause()>:
c001bc60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc64:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc68:	c3                   	ret    
c001bc69:	90                   	nop

c001bc6a <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc6a:	83 ec 1c             	sub    esp,0x1c
c001bc6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc71:	e8 ea ff ff ff       	call   c001bc60 <SoundChannel::pause()>
c001bc76:	83 c4 04             	add    esp,0x4
c001bc79:	6a 50                	push   0x50
c001bc7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc7f:	e8 b8 ff ff ff       	call   c001bc3c <SoundChannel::setVolume(int)>
c001bc84:	83 c4 08             	add    esp,0x8
c001bc87:	d9 e8                	fld1   
c001bc89:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bc8d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bc90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc94:	e8 8f ff ff ff       	call   c001bc28 <SoundChannel::setSpeed(float)>
c001bc99:	83 c4 08             	add    esp,0x8
c001bc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bca0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bca4:	89 10                	mov    DWORD PTR [eax],edx
c001bca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcb5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcb9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcbc:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bcc1:	75 26                	jne    c001bce9 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bcc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc7:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bccd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcd0:	0f af c2             	imul   eax,edx
c001bcd3:	89 c2                	mov    edx,eax
c001bcd5:	c1 fa 1f             	sar    edx,0x1f
c001bcd8:	83 e2 03             	and    edx,0x3
c001bcdb:	01 d0                	add    eax,edx
c001bcdd:	c1 f8 02             	sar    eax,0x2
c001bce0:	05 a0 0f 00 00       	add    eax,0xfa0
c001bce5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bced:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bcf1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bcf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd03:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd0e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd11:	c1 e0 02             	shl    eax,0x2
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	50                   	push   eax
c001bd18:	e8 c4 02 ff ff       	call   c000bfe1 <malloc>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	89 c2                	mov    edx,eax
c001bd22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd26:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd29:	83 ec 04             	sub    esp,0x4
c001bd2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd30:	50                   	push   eax
c001bd31:	6a 01                	push   0x1
c001bd33:	6a 04                	push   0x4
c001bd35:	e8 b1 cb fe ff       	call   c00088eb <src_new>
c001bd3a:	83 c4 10             	add    esp,0x10
c001bd3d:	89 c2                	mov    edx,eax
c001bd3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd4a:	85 c0                	test   eax,eax
c001bd4c:	74 10                	je     c001bd5e <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	68 e8 33 02 c0       	push   0xc00233e8
c001bd56:	e8 cd 9c ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	90                   	nop
c001bd5f:	83 c4 1c             	add    esp,0x1c
c001bd62:	c3                   	ret    
c001bd63:	90                   	nop

c001bd64 <SoundChannel::play()>:
c001bd64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd68:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd6c:	c3                   	ret    
c001bd6d:	90                   	nop

c001bd6e <SoundChannel::paused()>:
c001bd6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd72:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd75:	c3                   	ret    

c001bd76 <SoundChannel::getSampleRate()>:
c001bd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7c:	c3                   	ret    
c001bd7d:	90                   	nop

c001bd7e <SoundChannel::getBits()>:
c001bd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd85:	c3                   	ret    

c001bd86 <SoundChannel::getBufferUsed()>:
c001bd86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bd8d:	c3                   	ret    

c001bd8e <SoundChannel::getBufferSize()>:
c001bd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd95:	c3                   	ret    

c001bd96 <SoundChannel::unbuffer(float*, int, int)>:
c001bd96:	53                   	push   ebx
c001bd97:	83 ec 40             	sub    esp,0x40
c001bd9a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bd9e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bda6:	db 03                	fild   DWORD PTR [ebx]
c001bda8:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdb3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bdbe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdce:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bdd1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bdd5:	50                   	push   eax
c001bdd6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bdd9:	e8 c7 c7 fe ff       	call   c00085a5 <src_process>
c001bdde:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bde2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bde5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bde8:	83 c4 0c             	add    esp,0xc
c001bdeb:	29 d0                	sub    eax,edx
c001bded:	c1 e0 02             	shl    eax,0x2
c001bdf0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bdf3:	50                   	push   eax
c001bdf4:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bdf7:	50                   	push   eax
c001bdf8:	51                   	push   ecx
c001bdf9:	e8 57 48 fe ff       	call   c0000655 <memmove>
c001bdfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be02:	83 c4 48             	add    esp,0x48
c001be05:	5b                   	pop    ebx
c001be06:	c3                   	ret    
c001be07:	90                   	nop

c001be08 <SoundChannel::buffer8(unsigned char*, int)>:
c001be08:	53                   	push   ebx
c001be09:	31 c0                	xor    eax,eax
c001be0b:	83 ec 08             	sub    esp,0x8
c001be0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be12:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be15:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be18:	74 35                	je     c001be4f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be1a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be1e:	7d 2f                	jge    c001be4f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be24:	d9 05 04 34 02 c0    	fld    DWORD PTR ds:0xc0023404
c001be2a:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be2e:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be33:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be36:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be3a:	40                   	inc    eax
c001be3b:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be3e:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be41:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be44:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be47:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be4a:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be4d:	eb c9                	jmp    c001be18 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be4f:	83 c4 08             	add    esp,0x8
c001be52:	5b                   	pop    ebx
c001be53:	c3                   	ret    

c001be54 <SoundDevice::SoundDevice(char const*)>:
c001be54:	83 ec 1c             	sub    esp,0x1c
c001be57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be5b:	83 ec 08             	sub    esp,0x8
c001be5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be62:	50                   	push   eax
c001be63:	e8 b0 49 ff ff       	call   c0010818 <Device::Device(char const*)>
c001be68:	83 c4 10             	add    esp,0x10
c001be6b:	ba 10 34 02 c0       	mov    edx,0xc0023410
c001be70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be74:	89 10                	mov    DWORD PTR [eax],edx
c001be76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be7a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001be84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be88:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001be92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be9a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001be9f:	7f 19                	jg     c001beba <SoundDevice::SoundDevice(char const*)+0x66>
c001bea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bea9:	83 c2 54             	add    edx,0x54
c001beac:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001beb4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001beb8:	eb e0                	jmp    c001be9a <SoundDevice::SoundDevice(char const*)+0x46>
c001beba:	90                   	nop
c001bebb:	83 c4 1c             	add    esp,0x1c
c001bebe:	c3                   	ret    
c001bebf:	90                   	nop

c001bec0 <SoundDevice::~SoundDevice()>:
c001bec0:	53                   	push   ebx
c001bec1:	83 ec 18             	sub    esp,0x18
c001bec4:	ba 10 34 02 c0       	mov    edx,0xc0023410
c001bec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001becd:	89 10                	mov    DWORD PTR [eax],edx
c001becf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bed7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bedc:	7f 46                	jg     c001bf24 <SoundDevice::~SoundDevice()+0x64>
c001bede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bee2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bee6:	83 c2 54             	add    edx,0x54
c001bee9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001beed:	85 c0                	test   eax,eax
c001beef:	74 2d                	je     c001bf1e <SoundDevice::~SoundDevice()+0x5e>
c001bef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bef9:	83 c2 54             	add    edx,0x54
c001befc:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf00:	85 db                	test   ebx,ebx
c001bf02:	74 1a                	je     c001bf1e <SoundDevice::~SoundDevice()+0x5e>
c001bf04:	83 ec 0c             	sub    esp,0xc
c001bf07:	53                   	push   ebx
c001bf08:	e8 ff fc ff ff       	call   c001bc0c <SoundChannel::~SoundChannel()>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	83 ec 08             	sub    esp,0x8
c001bf13:	6a 2c                	push   0x2c
c001bf15:	53                   	push   ebx
c001bf16:	e8 d2 31 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001bf1b:	83 c4 10             	add    esp,0x10
c001bf1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf22:	eb b3                	jmp    c001bed7 <SoundDevice::~SoundDevice()+0x17>
c001bf24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf28:	83 ec 0c             	sub    esp,0xc
c001bf2b:	50                   	push   eax
c001bf2c:	e8 9d 45 ff ff       	call   c00104ce <Device::~Device()>
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	90                   	nop
c001bf35:	83 c4 18             	add    esp,0x18
c001bf38:	5b                   	pop    ebx
c001bf39:	c3                   	ret    

c001bf3a <SoundDevice::~SoundDevice()>:
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	83 ec 0c             	sub    esp,0xc
c001bf40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf44:	e8 77 ff ff ff       	call   c001bec0 <SoundDevice::~SoundDevice()>
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	83 ec 08             	sub    esp,0x8
c001bf4f:	68 e4 01 00 00       	push   0x1e4
c001bf54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf58:	e8 90 31 ff ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	83 c4 0c             	add    esp,0xc
c001bf63:	c3                   	ret    

c001bf64 <SoundDevice::getFreeChannelNum()>:
c001bf64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf68:	31 c0                	xor    eax,eax
c001bf6a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf72:	74 09                	je     c001bf7d <SoundDevice::getFreeChannelNum()+0x19>
c001bf74:	40                   	inc    eax
c001bf75:	83 f8 20             	cmp    eax,0x20
c001bf78:	75 f0                	jne    c001bf6a <SoundDevice::getFreeChannelNum()+0x6>
c001bf7a:	83 c8 ff             	or     eax,0xffffffff
c001bf7d:	c3                   	ret    

c001bf7e <SoundDevice::addChannel(SoundChannel*)>:
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	51                   	push   ecx
c001bf81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bf89:	53                   	push   ebx
c001bf8a:	e8 d5 ff ff ff       	call   c001bf64 <SoundDevice::getFreeChannelNum()>
c001bf8f:	5a                   	pop    edx
c001bf90:	83 f8 ff             	cmp    eax,0xffffffff
c001bf93:	74 51                	je     c001bfe6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bf95:	85 f6                	test   esi,esi
c001bf97:	74 4d                	je     c001bfe6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bf99:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfa0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfa7:	75 30                	jne    c001bfd9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfa9:	83 ec 0c             	sub    esp,0xc
c001bfac:	56                   	push   esi
c001bfad:	e8 c4 fd ff ff       	call   c001bd76 <SoundChannel::getSampleRate()>
c001bfb2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfb8:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfbb:	e8 be fd ff ff       	call   c001bd7e <SoundChannel::getBits()>
c001bfc0:	83 c4 0c             	add    esp,0xc
c001bfc3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfc9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfcb:	50                   	push   eax
c001bfcc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bfd2:	53                   	push   ebx
c001bfd3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bfd6:	83 c4 10             	add    esp,0x10
c001bfd9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bfdf:	b8 01 00 00 00       	mov    eax,0x1
c001bfe4:	eb 03                	jmp    c001bfe9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bfe6:	83 c8 ff             	or     eax,0xffffffff
c001bfe9:	5a                   	pop    edx
c001bfea:	5b                   	pop    ebx
c001bfeb:	5e                   	pop    esi
c001bfec:	c3                   	ret    
c001bfed:	90                   	nop

c001bfee <SoundDevice::removeChannel(int)>:
c001bfee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bff6:	83 fa 1f             	cmp    edx,0x1f
c001bff9:	77 23                	ja     c001c01e <SoundDevice::removeChannel(int)+0x30>
c001bffb:	8d 14 90             	lea    edx,[eax+edx*4]
c001bffe:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c005:	74 17                	je     c001c01e <SoundDevice::removeChannel(int)+0x30>
c001c007:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c011:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c017:	75 05                	jne    c001c01e <SoundDevice::removeChannel(int)+0x30>
c001c019:	8b 00                	mov    eax,DWORD PTR [eax]
c001c01b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c01e:	c3                   	ret    
c001c01f:	90                   	nop

c001c020 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c020:	56                   	push   esi
c001c021:	53                   	push   ebx
c001c022:	31 db                	xor    ebx,ebx
c001c024:	83 ec 14             	sub    esp,0x14
c001c027:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c02b:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c02f:	7d 55                	jge    c001c086 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c031:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c035:	d9 e8                	fld1   
c001c037:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c03a:	d8 0d 40 34 02 c0    	fmul   DWORD PTR ds:0xc0023440
c001c040:	d8 0d 44 34 02 c0    	fmul   DWORD PTR ds:0xc0023444
c001c046:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c04a:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c04e:	d8 15 48 34 02 c0    	fcom   DWORD PTR ds:0xc0023448
c001c054:	df e0                	fnstsw ax
c001c056:	9e                   	sahf   
c001c057:	72 08                	jb     c001c061 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c059:	dd d8                	fstp   st(0)
c001c05b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c05f:	eb 22                	jmp    c001c083 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c061:	d9 ee                	fldz   
c001c063:	d8 d9                	fcomp  st(1)
c001c065:	df e0                	fnstsw ax
c001c067:	9e                   	sahf   
c001c068:	72 08                	jb     c001c072 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c06a:	dd d8                	fstp   st(0)
c001c06c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c070:	eb 11                	jmp    c001c083 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c072:	83 ec 10             	sub    esp,0x10
c001c075:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c078:	e8 bf 36 00 00       	call   c001f73c <lrintf>
c001c07d:	83 c4 10             	add    esp,0x10
c001c080:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c083:	43                   	inc    ebx
c001c084:	eb a5                	jmp    c001c02b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c086:	83 c4 14             	add    esp,0x14
c001c089:	5b                   	pop    ebx
c001c08a:	5e                   	pop    esi
c001c08b:	c3                   	ret    

c001c08c <SoundDevice::getAudio(int, float*, float*)>:
c001c08c:	55                   	push   ebp
c001c08d:	57                   	push   edi
c001c08e:	56                   	push   esi
c001c08f:	53                   	push   ebx
c001c090:	31 db                	xor    ebx,ebx
c001c092:	83 ec 20             	sub    esp,0x20
c001c095:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c099:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c09d:	c1 e0 02             	shl    eax,0x2
c001c0a0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0a4:	50                   	push   eax
c001c0a5:	6a 00                	push   0x0
c001c0a7:	55                   	push   ebp
c001c0a8:	e8 16 46 fe ff       	call   c00006c3 <memset>
c001c0ad:	83 c4 10             	add    esp,0x10
c001c0b0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0b4:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0bb:	85 c0                	test   eax,eax
c001c0bd:	0f 84 8c 00 00 00    	je     c001c14f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0c3:	83 ec 0c             	sub    esp,0xc
c001c0c6:	50                   	push   eax
c001c0c7:	e8 a2 fc ff ff       	call   c001bd6e <SoundChannel::paused()>
c001c0cc:	83 c4 10             	add    esp,0x10
c001c0cf:	84 c0                	test   al,al
c001c0d1:	75 7c                	jne    c001c14f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0d3:	83 ec 0c             	sub    esp,0xc
c001c0d6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0dd:	e8 76 fb ff ff       	call   c001bc58 <SoundChannel::getVolume()>
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	85 c0                	test   eax,eax
c001c0e7:	74 66                	je     c001c14f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0e9:	83 ec 0c             	sub    esp,0xc
c001c0ec:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0f3:	e8 60 fb ff ff       	call   c001bc58 <SoundChannel::getVolume()>
c001c0f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c0fc:	d9 05 4c 34 02 c0    	fld    DWORD PTR ds:0xc002344c
c001c102:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c106:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c10a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c10e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c114:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c118:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c11f:	e8 72 fc ff ff       	call   c001bd96 <SoundChannel::unbuffer(float*, int, int)>
c001c124:	83 c4 20             	add    esp,0x20
c001c127:	31 d2                	xor    edx,edx
c001c129:	39 c2                	cmp    edx,eax
c001c12b:	7d 1c                	jge    c001c149 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c12d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c131:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c135:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c138:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c13e:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c142:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c146:	42                   	inc    edx
c001c147:	eb e0                	jmp    c001c129 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c149:	39 c7                	cmp    edi,eax
c001c14b:	7e 02                	jle    c001c14f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c14d:	89 c7                	mov    edi,eax
c001c14f:	43                   	inc    ebx
c001c150:	83 fb 20             	cmp    ebx,0x20
c001c153:	0f 85 5b ff ff ff    	jne    c001c0b4 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c159:	83 c4 1c             	add    esp,0x1c
c001c15c:	89 f8                	mov    eax,edi
c001c15e:	5b                   	pop    ebx
c001c15f:	5e                   	pop    esi
c001c160:	5f                   	pop    edi
c001c161:	5d                   	pop    ebp
c001c162:	c3                   	ret    
c001c163:	90                   	nop

c001c164 <PCI::open(int, int, void*)>:
c001c164:	83 ec 18             	sub    esp,0x18
c001c167:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c16b:	8b 10                	mov    edx,DWORD PTR [eax]
c001c16d:	50                   	push   eax
c001c16e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c171:	31 c0                	xor    eax,eax
c001c173:	83 c4 1c             	add    esp,0x1c
c001c176:	c3                   	ret    
c001c177:	90                   	nop

c001c178 <PCI::close(int, int, void*)>:
c001c178:	31 c0                	xor    eax,eax
c001c17a:	c3                   	ret    
c001c17b:	90                   	nop

c001c17c <PCI::PCI()>:
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c183:	83 ec 08             	sub    esp,0x8
c001c186:	68 50 34 02 c0       	push   0xc0023450
c001c18b:	50                   	push   eax
c001c18c:	e8 11 3d ff ff       	call   c000fea2 <Bus::Bus(char const*)>
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	ba fc 34 02 c0       	mov    edx,0xc00234fc
c001c199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19d:	89 10                	mov    DWORD PTR [eax],edx
c001c19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1a9:	31 d2                	xor    edx,edx
c001c1ab:	88 c2                	mov    dl,al
c001c1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1c2:	31 d2                	xor    edx,edx
c001c1c4:	88 c2                	mov    dl,al
c001c1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ca:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1d9:	8d 50 01             	lea    edx,[eax+0x1]
c001c1dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1e0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c1e6:	31 d2                	xor    edx,edx
c001c1e8:	88 c2                	mov    dl,al
c001c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c1f2:	83 c9 c0             	or     ecx,0xffffffc0
c001c1f5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c1f9:	90                   	nop
c001c1fa:	83 c4 0c             	add    esp,0xc
c001c1fd:	c3                   	ret    

c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c1fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c202:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c207:	c1 e0 10             	shl    eax,0x10
c001c20a:	89 ca                	mov    edx,ecx
c001c20c:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c212:	09 d0                	or     eax,edx
c001c214:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c219:	c1 e2 08             	shl    edx,0x8
c001c21c:	09 d0                	or     eax,edx
c001c21e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c223:	c1 e2 0b             	shl    edx,0xb
c001c226:	09 d0                	or     eax,edx
c001c228:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c22d:	0d 00 00 00 80       	or     eax,0x80000000
c001c232:	ef                   	out    dx,eax
c001c233:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c238:	ed                   	in     eax,dx
c001c239:	83 e1 02             	and    ecx,0x2
c001c23c:	0f b6 c9             	movzx  ecx,cl
c001c23f:	c1 e1 03             	shl    ecx,0x3
c001c242:	d3 e8                	shr    eax,cl
c001c244:	c3                   	ret    
c001c245:	90                   	nop

c001c246 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c246:	6a 00                	push   0x0
c001c248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c24d:	50                   	push   eax
c001c24e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c253:	50                   	push   eax
c001c254:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c259:	50                   	push   eax
c001c25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c25e:	e8 9b ff ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c263:	83 c4 14             	add    esp,0x14
c001c266:	c3                   	ret    
c001c267:	90                   	nop

c001c268 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c268:	6a 0e                	push   0xe
c001c26a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26f:	50                   	push   eax
c001c270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c275:	50                   	push   eax
c001c276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c27b:	50                   	push   eax
c001c27c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c280:	e8 79 ff ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c285:	83 c4 14             	add    esp,0x14
c001c288:	0f b6 c0             	movzx  eax,al
c001c28b:	c3                   	ret    

c001c28c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c28c:	55                   	push   ebp
c001c28d:	57                   	push   edi
c001c28e:	56                   	push   esi
c001c28f:	53                   	push   ebx
c001c290:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c295:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c29a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c29f:	6a 0a                	push   0xa
c001c2a1:	56                   	push   esi
c001c2a2:	55                   	push   ebp
c001c2a3:	57                   	push   edi
c001c2a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2a8:	e8 51 ff ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2ad:	6a 0a                	push   0xa
c001c2af:	89 c3                	mov    ebx,eax
c001c2b1:	56                   	push   esi
c001c2b2:	55                   	push   ebp
c001c2b3:	57                   	push   edi
c001c2b4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2b8:	e8 41 ff ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2bd:	83 c4 28             	add    esp,0x28
c001c2c0:	0f b6 db             	movzx  ebx,bl
c001c2c3:	25 00 ff 00 00       	and    eax,0xff00
c001c2c8:	09 d8                	or     eax,ebx
c001c2ca:	5b                   	pop    ebx
c001c2cb:	5e                   	pop    esi
c001c2cc:	5f                   	pop    edi
c001c2cd:	5d                   	pop    ebp
c001c2ce:	c3                   	ret    
c001c2cf:	90                   	nop

c001c2d0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2d0:	6a 08                	push   0x8
c001c2d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2d7:	50                   	push   eax
c001c2d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2dd:	50                   	push   eax
c001c2de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2e3:	50                   	push   eax
c001c2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2e8:	e8 11 ff ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2ed:	83 c4 14             	add    esp,0x14
c001c2f0:	0f b6 c4             	movzx  eax,ah
c001c2f3:	c3                   	ret    

c001c2f4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c2f4:	6a 08                	push   0x8
c001c2f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2fb:	50                   	push   eax
c001c2fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c301:	50                   	push   eax
c001c302:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c307:	50                   	push   eax
c001c308:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c30c:	e8 ed fe ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c311:	83 c4 14             	add    esp,0x14
c001c314:	c3                   	ret    
c001c315:	90                   	nop

c001c316 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c316:	6a 3c                	push   0x3c
c001c318:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c31d:	50                   	push   eax
c001c31e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c323:	50                   	push   eax
c001c324:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c329:	50                   	push   eax
c001c32a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c32e:	e8 cb fe ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c333:	83 c4 14             	add    esp,0x14
c001c336:	c3                   	ret    
c001c337:	90                   	nop

c001c338 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c338:	6a 18                	push   0x18
c001c33a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c33f:	50                   	push   eax
c001c340:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c345:	50                   	push   eax
c001c346:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c34b:	50                   	push   eax
c001c34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c350:	e8 a9 fe ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c355:	83 c4 14             	add    esp,0x14
c001c358:	0f b6 c4             	movzx  eax,ah
c001c35b:	c3                   	ret    

c001c35c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c35c:	55                   	push   ebp
c001c35d:	57                   	push   edi
c001c35e:	56                   	push   esi
c001c35f:	53                   	push   ebx
c001c360:	50                   	push   eax
c001c361:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c365:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c36a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c371:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c376:	8d 43 12             	lea    eax,[ebx+0x12]
c001c379:	83 c3 10             	add    ebx,0x10
c001c37c:	0f b6 c0             	movzx  eax,al
c001c37f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c384:	50                   	push   eax
c001c385:	51                   	push   ecx
c001c386:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c38a:	57                   	push   edi
c001c38b:	55                   	push   ebp
c001c38c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c390:	e8 69 fe ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c395:	0f b6 db             	movzx  ebx,bl
c001c398:	53                   	push   ebx
c001c399:	89 c6                	mov    esi,eax
c001c39b:	c1 e6 10             	shl    esi,0x10
c001c39e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3a2:	51                   	push   ecx
c001c3a3:	57                   	push   edi
c001c3a4:	55                   	push   ebp
c001c3a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3a9:	e8 50 fe ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3ae:	83 c4 2c             	add    esp,0x2c
c001c3b1:	0f b7 c0             	movzx  eax,ax
c001c3b4:	5b                   	pop    ebx
c001c3b5:	09 f0                	or     eax,esi
c001c3b7:	5e                   	pop    esi
c001c3b8:	5f                   	pop    edi
c001c3b9:	5d                   	pop    ebp
c001c3ba:	c3                   	ret    
c001c3bb:	90                   	nop

c001c3bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3bc:	53                   	push   ebx
c001c3bd:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3c2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3c7:	c1 e1 10             	shl    ecx,0x10
c001c3ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3ce:	25 fc 00 00 00       	and    eax,0xfc
c001c3d3:	09 c1                	or     ecx,eax
c001c3d5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3da:	c1 e0 08             	shl    eax,0x8
c001c3dd:	09 c1                	or     ecx,eax
c001c3df:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c3e4:	c1 e0 0b             	shl    eax,0xb
c001c3e7:	09 c1                	or     ecx,eax
c001c3e9:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c3ef:	89 c8                	mov    eax,ecx
c001c3f1:	ef                   	out    dx,eax
c001c3f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c3f7:	ed                   	in     eax,dx
c001c3f8:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c3fd:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c402:	74 0a                	je     c001c40e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c404:	0f b7 d8             	movzx  ebx,ax
c001c407:	89 d0                	mov    eax,edx
c001c409:	c1 e0 10             	shl    eax,0x10
c001c40c:	eb 05                	jmp    c001c413 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c40e:	66 31 c0             	xor    ax,ax
c001c411:	89 d3                	mov    ebx,edx
c001c413:	09 c3                	or     ebx,eax
c001c415:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c41a:	89 c8                	mov    eax,ecx
c001c41c:	ef                   	out    dx,eax
c001c41d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c422:	89 d8                	mov    eax,ebx
c001c424:	ef                   	out    dx,eax
c001c425:	5b                   	pop    ebx
c001c426:	c3                   	ret    
c001c427:	90                   	nop

c001c428 <PCI::checkBus(unsigned char)>:
c001c428:	56                   	push   esi
c001c429:	31 f6                	xor    esi,esi
c001c42b:	53                   	push   ebx
c001c42c:	51                   	push   ecx
c001c42d:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c431:	52                   	push   edx
c001c432:	56                   	push   esi
c001c433:	46                   	inc    esi
c001c434:	0f b6 c3             	movzx  eax,bl
c001c437:	50                   	push   eax
c001c438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c43c:	e8 4d 03 00 00       	call   c001c78e <PCI::checkDevice(unsigned char, unsigned char)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	83 fe 20             	cmp    esi,0x20
c001c447:	75 e8                	jne    c001c431 <PCI::checkBus(unsigned char)+0x9>
c001c449:	58                   	pop    eax
c001c44a:	5b                   	pop    ebx
c001c44b:	5e                   	pop    esi
c001c44c:	c3                   	ret    
c001c44d:	90                   	nop

c001c44e <PCI::foundDevice(PCIDeviceInfo)>:
c001c44e:	55                   	push   ebp
c001c44f:	57                   	push   edi
c001c450:	56                   	push   esi
c001c451:	53                   	push   ebx
c001c452:	83 ec 1c             	sub    esp,0x1c
c001c455:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c459:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c45f:	0f 84 51 01 00 00    	je     c001c5b6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c465:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c469:	66 81 f9 06 04       	cmp    cx,0x406
c001c46e:	75 2c                	jne    c001c49c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c470:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c475:	50                   	push   eax
c001c476:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c47b:	50                   	push   eax
c001c47c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c481:	50                   	push   eax
c001c482:	56                   	push   esi
c001c483:	e8 b0 fe ff ff       	call   c001c338 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c488:	0f b6 c0             	movzx  eax,al
c001c48b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c48f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c493:	83 c4 2c             	add    esp,0x2c
c001c496:	5b                   	pop    ebx
c001c497:	5e                   	pop    esi
c001c498:	5f                   	pop    edi
c001c499:	5d                   	pop    ebp
c001c49a:	eb 8c                	jmp    c001c428 <PCI::checkBus(unsigned char)>
c001c49c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4a0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4aa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4ae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4b2:	88 d3                	mov    bl,dl
c001c4b4:	85 c0                	test   eax,eax
c001c4b6:	74 33                	je     c001c4eb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4bb:	85 d2                	test   edx,edx
c001c4bd:	74 28                	je     c001c4e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4bf:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4c5:	31 ef                	xor    edi,ebp
c001c4c7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4cd:	75 18                	jne    c001c4e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4d3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4d9:	75 0c                	jne    c001c4e7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4db:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c4e1:	0f 84 cf 00 00 00    	je     c001c5b6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c4e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4e9:	eb c9                	jmp    c001c4b4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c4eb:	66 81 f9 01 06       	cmp    cx,0x601
c001c4f0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c4f4:	75 18                	jne    c001c50e <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c4f6:	83 ec 0c             	sub    esp,0xc
c001c4f9:	68 58 01 00 00       	push   0x158
c001c4fe:	e8 db 2b ff ff       	call   c000f0de <operator new(unsigned long)>
c001c503:	59                   	pop    ecx
c001c504:	89 c5                	mov    ebp,eax
c001c506:	5f                   	pop    edi
c001c507:	68 58 34 02 c0       	push   0xc0023458
c001c50c:	eb 7d                	jmp    c001c58b <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c50e:	66 81 f9 01 01       	cmp    cx,0x101
c001c513:	75 60                	jne    c001c575 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c515:	83 ec 0c             	sub    esp,0xc
c001c518:	68 70 02 00 00       	push   0x270
c001c51d:	e8 bc 2b ff ff       	call   c000f0de <operator new(unsigned long)>
c001c522:	89 04 24             	mov    DWORD PTR [esp],eax
c001c525:	89 c5                	mov    ebp,eax
c001c527:	e8 26 03 00 00       	call   c001c852 <IDE::IDE()>
c001c52c:	58                   	pop    eax
c001c52d:	5a                   	pop    edx
c001c52e:	55                   	push   ebp
c001c52f:	56                   	push   esi
c001c530:	e8 f3 40 ff ff       	call   c0010628 <Device::addChild(Device*)>
c001c535:	83 ec 1c             	sub    esp,0x1c
c001c538:	b9 09 00 00 00       	mov    ecx,0x9
c001c53d:	fc                   	cld    
c001c53e:	89 e7                	mov    edi,esp
c001c540:	89 de                	mov    esi,ebx
c001c542:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c544:	55                   	push   ebp
c001c545:	e8 bc 3f ff ff       	call   c0010506 <Device::preOpenPCI(PCIDeviceInfo)>
c001c54a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c54d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c551:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c559:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c561:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c569:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56c:	83 c4 4c             	add    esp,0x4c
c001c56f:	5b                   	pop    ebx
c001c570:	5e                   	pop    esi
c001c571:	5f                   	pop    edi
c001c572:	5d                   	pop    ebp
c001c573:	ff e0                	jmp    eax
c001c575:	83 ec 0c             	sub    esp,0xc
c001c578:	68 58 01 00 00       	push   0x158
c001c57d:	e8 5c 2b ff ff       	call   c000f0de <operator new(unsigned long)>
c001c582:	59                   	pop    ecx
c001c583:	89 c5                	mov    ebp,eax
c001c585:	5f                   	pop    edi
c001c586:	68 77 34 02 c0       	push   0xc0023477
c001c58b:	55                   	push   ebp
c001c58c:	e8 83 43 ff ff       	call   c0010914 <DriverlessDevice::DriverlessDevice(char const*)>
c001c591:	58                   	pop    eax
c001c592:	5a                   	pop    edx
c001c593:	55                   	push   ebp
c001c594:	56                   	push   esi
c001c595:	e8 8e 40 ff ff       	call   c0010628 <Device::addChild(Device*)>
c001c59a:	b9 09 00 00 00       	mov    ecx,0x9
c001c59f:	fc                   	cld    
c001c5a0:	89 df                	mov    edi,ebx
c001c5a2:	89 de                	mov    esi,ebx
c001c5a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5a6:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5aa:	83 c4 2c             	add    esp,0x2c
c001c5ad:	5b                   	pop    ebx
c001c5ae:	5e                   	pop    esi
c001c5af:	5f                   	pop    edi
c001c5b0:	5d                   	pop    ebp
c001c5b1:	e9 50 3f ff ff       	jmp    c0010506 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5b6:	83 c4 1c             	add    esp,0x1c
c001c5b9:	5b                   	pop    ebx
c001c5ba:	5e                   	pop    esi
c001c5bb:	5f                   	pop    edi
c001c5bc:	5d                   	pop    ebp
c001c5bd:	c3                   	ret    

c001c5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5be:	55                   	push   ebp
c001c5bf:	57                   	push   edi
c001c5c0:	56                   	push   esi
c001c5c1:	53                   	push   ebx
c001c5c2:	83 ec 5c             	sub    esp,0x5c
c001c5c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5cd:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5d5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5dd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c5e2:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c5e7:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c5ec:	6a 0c                	push   0xc
c001c5ee:	55                   	push   ebp
c001c5ef:	53                   	push   ebx
c001c5f0:	57                   	push   edi
c001c5f1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c5f8:	e8 01 fc ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c5fd:	83 c4 0c             	add    esp,0xc
c001c600:	6a 00                	push   0x0
c001c602:	68 91 34 02 c0       	push   0xc0023491
c001c607:	e8 07 2c ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001c60c:	55                   	push   ebp
c001c60d:	53                   	push   ebx
c001c60e:	57                   	push   edi
c001c60f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c616:	e8 71 fc ff ff       	call   c001c28c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c61b:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c620:	83 c4 20             	add    esp,0x20
c001c623:	55                   	push   ebp
c001c624:	53                   	push   ebx
c001c625:	57                   	push   edi
c001c626:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c62a:	e8 e7 fc ff ff       	call   c001c316 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c62f:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c636:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c63a:	55                   	push   ebp
c001c63b:	53                   	push   ebx
c001c63c:	57                   	push   edi
c001c63d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c644:	e8 b5 fb ff ff       	call   c001c1fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c649:	0f b6 c4             	movzx  eax,ah
c001c64c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c650:	83 c4 18             	add    esp,0x18
c001c653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c657:	68 a5 34 02 c0       	push   0xc00234a5
c001c65c:	e8 b2 2b ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001c661:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c665:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c669:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c001c66e:	83 c4 10             	add    esp,0x10
c001c671:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c677:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c67e:	74 6c                	je     c001c6ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c680:	31 f6                	xor    esi,esi
c001c682:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c001c688:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c68e:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c694:	7e 56                	jle    c001c6ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c696:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c699:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6a0:	39 cb                	cmp    ebx,ecx
c001c6a2:	75 45                	jne    c001c6e9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6a4:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6ab:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6af:	75 38                	jne    c001c6e9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6b1:	83 ec 0c             	sub    esp,0xc
c001c6b4:	68 b4 34 02 c0       	push   0xc00234b4
c001c6b9:	e8 55 2b ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001c6be:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c001c6c4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6ca:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6d2:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6d6:	52                   	push   edx
c001c6d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6db:	53                   	push   ebx
c001c6dc:	68 d9 34 02 c0       	push   0xc00234d9
c001c6e1:	e8 2d 2b ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001c6e6:	83 c4 20             	add    esp,0x20
c001c6e9:	46                   	inc    esi
c001c6ea:	eb 96                	jmp    c001c682 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c6ec:	31 d2                	xor    edx,edx
c001c6ee:	83 ec 0c             	sub    esp,0xc
c001c6f1:	55                   	push   ebp
c001c6f2:	53                   	push   ebx
c001c6f3:	57                   	push   edi
c001c6f4:	52                   	push   edx
c001c6f5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c6f9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c700:	e8 57 fc ff ff       	call   c001c35c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c705:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c709:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c70d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c711:	42                   	inc    edx
c001c712:	83 c4 20             	add    esp,0x20
c001c715:	83 fa 06             	cmp    edx,0x6
c001c718:	75 d4                	jne    c001c6ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c71a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c71e:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c722:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c726:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c72a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c72e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c732:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c737:	86 e0                	xchg   al,ah
c001c739:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c73e:	55                   	push   ebp
c001c73f:	53                   	push   ebx
c001c740:	57                   	push   edi
c001c741:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c745:	e8 86 fb ff ff       	call   c001c2d0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c74a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c74e:	55                   	push   ebp
c001c74f:	53                   	push   ebx
c001c750:	57                   	push   edi
c001c751:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c758:	e8 e9 fa ff ff       	call   c001c246 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c75d:	83 ec 0c             	sub    esp,0xc
c001c760:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c765:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c769:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c76d:	b9 09 00 00 00       	mov    ecx,0x9
c001c772:	fc                   	cld    
c001c773:	89 e7                	mov    edi,esp
c001c775:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c777:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c77e:	e8 cb fc ff ff       	call   c001c44e <PCI::foundDevice(PCIDeviceInfo)>
c001c783:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c789:	5b                   	pop    ebx
c001c78a:	5e                   	pop    esi
c001c78b:	5f                   	pop    edi
c001c78c:	5d                   	pop    ebp
c001c78d:	c3                   	ret    

c001c78e <PCI::checkDevice(unsigned char, unsigned char)>:
c001c78e:	55                   	push   ebp
c001c78f:	57                   	push   edi
c001c790:	56                   	push   esi
c001c791:	53                   	push   ebx
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c79a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c79e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7a3:	6a 00                	push   0x0
c001c7a5:	56                   	push   esi
c001c7a6:	57                   	push   edi
c001c7a7:	55                   	push   ebp
c001c7a8:	e8 99 fa ff ff       	call   c001c246 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7ad:	6a 00                	push   0x0
c001c7af:	56                   	push   esi
c001c7b0:	57                   	push   edi
c001c7b1:	55                   	push   ebp
c001c7b2:	e8 07 fe ff ff       	call   c001c5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7b7:	83 c4 20             	add    esp,0x20
c001c7ba:	6a 00                	push   0x0
c001c7bc:	56                   	push   esi
c001c7bd:	57                   	push   edi
c001c7be:	55                   	push   ebp
c001c7bf:	e8 a4 fa ff ff       	call   c001c268 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	84 c0                	test   al,al
c001c7c9:	79 27                	jns    c001c7f2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7cb:	bb 01 00 00 00       	mov    ebx,0x1
c001c7d0:	53                   	push   ebx
c001c7d1:	56                   	push   esi
c001c7d2:	57                   	push   edi
c001c7d3:	55                   	push   ebp
c001c7d4:	e8 6d fa ff ff       	call   c001c246 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7d9:	83 c4 10             	add    esp,0x10
c001c7dc:	66 40                	inc    ax
c001c7de:	74 0c                	je     c001c7ec <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7e0:	53                   	push   ebx
c001c7e1:	56                   	push   esi
c001c7e2:	57                   	push   edi
c001c7e3:	55                   	push   ebp
c001c7e4:	e8 d5 fd ff ff       	call   c001c5be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	43                   	inc    ebx
c001c7ed:	83 fb 08             	cmp    ebx,0x8
c001c7f0:	75 de                	jne    c001c7d0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c7f2:	83 c4 0c             	add    esp,0xc
c001c7f5:	5b                   	pop    ebx
c001c7f6:	5e                   	pop    esi
c001c7f7:	5f                   	pop    edi
c001c7f8:	5d                   	pop    ebp
c001c7f9:	c3                   	ret    

c001c7fa <PCI::detect()>:
c001c7fa:	56                   	push   esi
c001c7fb:	53                   	push   ebx
c001c7fc:	53                   	push   ebx
c001c7fd:	31 db                	xor    ebx,ebx
c001c7ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c803:	6a 00                	push   0x0
c001c805:	6a 00                	push   0x0
c001c807:	6a 00                	push   0x0
c001c809:	56                   	push   esi
c001c80a:	e8 59 fa ff ff       	call   c001c268 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	a8 80                	test   al,0x80
c001c814:	75 21                	jne    c001c837 <PCI::detect()+0x3d>
c001c816:	51                   	push   ecx
c001c817:	51                   	push   ecx
c001c818:	6a 00                	push   0x0
c001c81a:	56                   	push   esi
c001c81b:	e8 08 fc ff ff       	call   c001c428 <PCI::checkBus(unsigned char)>
c001c820:	83 c4 10             	add    esp,0x10
c001c823:	eb 24                	jmp    c001c849 <PCI::detect()+0x4f>
c001c825:	52                   	push   edx
c001c826:	52                   	push   edx
c001c827:	53                   	push   ebx
c001c828:	43                   	inc    ebx
c001c829:	56                   	push   esi
c001c82a:	e8 f9 fb ff ff       	call   c001c428 <PCI::checkBus(unsigned char)>
c001c82f:	83 c4 10             	add    esp,0x10
c001c832:	83 fb 08             	cmp    ebx,0x8
c001c835:	74 12                	je     c001c849 <PCI::detect()+0x4f>
c001c837:	53                   	push   ebx
c001c838:	6a 00                	push   0x0
c001c83a:	6a 00                	push   0x0
c001c83c:	56                   	push   esi
c001c83d:	e8 04 fa ff ff       	call   c001c246 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c842:	83 c4 10             	add    esp,0x10
c001c845:	66 40                	inc    ax
c001c847:	74 dc                	je     c001c825 <PCI::detect()+0x2b>
c001c849:	58                   	pop    eax
c001c84a:	5b                   	pop    ebx
c001c84b:	5e                   	pop    esi
c001c84c:	c3                   	ret    
c001c84d:	90                   	nop

c001c84e <IDE::close(int, int, void*)>:
c001c84e:	83 c8 ff             	or     eax,0xffffffff
c001c851:	c3                   	ret    

c001c852 <IDE::IDE()>:
c001c852:	83 ec 0c             	sub    esp,0xc
c001c855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c859:	83 ec 08             	sub    esp,0x8
c001c85c:	68 20 35 02 c0       	push   0xc0023520
c001c861:	50                   	push   eax
c001c862:	e8 43 41 ff ff       	call   c00109aa <HardDiskController::HardDiskController(char const*)>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	ba 60 37 02 c0       	mov    edx,0xc0023760
c001c86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c873:	89 10                	mov    DWORD PTR [eax],edx
c001c875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c879:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c880:	90                   	nop
c001c881:	83 c4 0c             	add    esp,0xc
c001c884:	c3                   	ret    
c001c885:	90                   	nop

c001c886 <IDE::prepareInterrupt(unsigned char)>:
c001c886:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c88b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c88f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c897:	c3                   	ret    

c001c898 <selectDrive(unsigned char, unsigned char)>:
c001c898:	c3                   	ret    
c001c899:	90                   	nop

c001c89a <IDE::getBase(unsigned char)>:
c001c89a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c89f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8a3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8ab:	c3                   	ret    

c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8ac:	55                   	push   ebp
c001c8ad:	57                   	push   edi
c001c8ae:	56                   	push   esi
c001c8af:	53                   	push   ebx
c001c8b0:	83 ec 1c             	sub    esp,0x1c
c001c8b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8c3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8c6:	80 f9 03             	cmp    cl,0x3
c001c8c9:	77 51                	ja     c001c91c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8cb:	0f b6 f2             	movzx  esi,dl
c001c8ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8d2:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8d5:	0f b6 db             	movzx  ebx,bl
c001c8d8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8dc:	83 ca 80             	or     edx,0xffffff80
c001c8df:	0f b6 d2             	movzx  edx,dl
c001c8e2:	52                   	push   edx
c001c8e3:	6a 0c                	push   0xc
c001c8e5:	56                   	push   esi
c001c8e6:	57                   	push   edi
c001c8e7:	e8 c0 ff ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ec:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c8f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8f5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c8f9:	ee                   	out    dx,al
c001c8fa:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c8ff:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c903:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c907:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c90b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c913:	83 c4 2c             	add    esp,0x2c
c001c916:	5b                   	pop    ebx
c001c917:	5e                   	pop    esi
c001c918:	5f                   	pop    edi
c001c919:	5d                   	pop    ebp
c001c91a:	eb 90                	jmp    c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c91c:	80 fb 07             	cmp    bl,0x7
c001c91f:	77 12                	ja     c001c933 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c921:	0f b6 d2             	movzx  edx,dl
c001c924:	0f b6 db             	movzx  ebx,bl
c001c927:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c92f:	89 da                	mov    edx,ebx
c001c931:	eb 2f                	jmp    c001c962 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c933:	80 fb 0d             	cmp    bl,0xd
c001c936:	77 13                	ja     c001c94b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c938:	0f b6 d2             	movzx  edx,dl
c001c93b:	0f b6 db             	movzx  ebx,bl
c001c93e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c945:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c949:	eb 17                	jmp    c001c962 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c94b:	80 fb 15             	cmp    bl,0x15
c001c94e:	77 13                	ja     c001c963 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c950:	0f b6 d2             	movzx  edx,dl
c001c953:	0f b6 db             	movzx  ebx,bl
c001c956:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c95e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c962:	ee                   	out    dx,al
c001c963:	83 c4 1c             	add    esp,0x1c
c001c966:	5b                   	pop    ebx
c001c967:	5e                   	pop    esi
c001c968:	5f                   	pop    edi
c001c969:	5d                   	pop    ebp
c001c96a:	c3                   	ret    
c001c96b:	90                   	nop

c001c96c <IDE::read(unsigned char, unsigned char)>:
c001c96c:	55                   	push   ebp
c001c96d:	57                   	push   edi
c001c96e:	56                   	push   esi
c001c96f:	53                   	push   ebx
c001c970:	83 ec 1c             	sub    esp,0x1c
c001c973:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c977:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c97b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c97f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c982:	3c 03                	cmp    al,0x3
c001c984:	77 43                	ja     c001c9c9 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c986:	0f b6 f2             	movzx  esi,dl
c001c989:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c98c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c990:	83 c8 80             	or     eax,0xffffff80
c001c993:	0f b6 c0             	movzx  eax,al
c001c996:	50                   	push   eax
c001c997:	6a 0c                	push   0xc
c001c999:	56                   	push   esi
c001c99a:	57                   	push   edi
c001c99b:	e8 0c ff ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9a5:	0f b6 c3             	movzx  eax,bl
c001c9a8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9ac:	ec                   	in     al,dx
c001c9ad:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9b2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9b6:	52                   	push   edx
c001c9b7:	6a 0c                	push   0xc
c001c9b9:	56                   	push   esi
c001c9ba:	57                   	push   edi
c001c9bb:	e8 ec fe ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c0:	83 c4 20             	add    esp,0x20
c001c9c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9c7:	eb 49                	jmp    c001ca12 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9c9:	80 fb 07             	cmp    bl,0x7
c001c9cc:	77 12                	ja     c001c9e0 <IDE::read(unsigned char, unsigned char)+0x74>
c001c9ce:	0f b6 d2             	movzx  edx,dl
c001c9d1:	0f b6 c3             	movzx  eax,bl
c001c9d4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9dc:	89 c2                	mov    edx,eax
c001c9de:	eb 31                	jmp    c001ca11 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9e0:	80 fb 0d             	cmp    bl,0xd
c001c9e3:	77 13                	ja     c001c9f8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c9e5:	0f b6 d2             	movzx  edx,dl
c001c9e8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c9ef:	0f b6 d3             	movzx  edx,bl
c001c9f2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c9f6:	eb 19                	jmp    c001ca11 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9f8:	31 c0                	xor    eax,eax
c001c9fa:	80 fb 15             	cmp    bl,0x15
c001c9fd:	77 13                	ja     c001ca12 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9ff:	0f b6 d2             	movzx  edx,dl
c001ca02:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca0a:	0f b6 d3             	movzx  edx,bl
c001ca0d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca11:	ec                   	in     al,dx
c001ca12:	83 c4 1c             	add    esp,0x1c
c001ca15:	5b                   	pop    ebx
c001ca16:	5e                   	pop    esi
c001ca17:	5f                   	pop    edi
c001ca18:	5d                   	pop    ebp
c001ca19:	c3                   	ret    

c001ca1a <IDE::waitInterrupt(unsigned char)>:
c001ca1a:	57                   	push   edi
c001ca1b:	56                   	push   esi
c001ca1c:	31 f6                	xor    esi,esi
c001ca1e:	53                   	push   ebx
c001ca1f:	83 ec 10             	sub    esp,0x10
c001ca22:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca26:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca2a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca2e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca33:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca3a:	84 db                	test   bl,bl
c001ca3c:	75 37                	jne    c001ca75 <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca3e:	52                   	push   edx
c001ca3f:	6a 0c                	push   0xc
c001ca41:	50                   	push   eax
c001ca42:	57                   	push   edi
c001ca43:	e8 24 ff ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001ca48:	83 c4 10             	add    esp,0x10
c001ca4b:	a8 01                	test   al,0x1
c001ca4d:	75 2e                	jne    c001ca7d <IDE::waitInterrupt(unsigned char)+0x63>
c001ca4f:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca55:	75 16                	jne    c001ca6d <IDE::waitInterrupt(unsigned char)+0x53>
c001ca57:	83 fe 32             	cmp    esi,0x32
c001ca5a:	7e 11                	jle    c001ca6d <IDE::waitInterrupt(unsigned char)+0x53>
c001ca5c:	50                   	push   eax
c001ca5d:	50                   	push   eax
c001ca5e:	6a 00                	push   0x0
c001ca60:	68 80 96 98 00       	push   0x989680
c001ca65:	e8 25 c5 ff ff       	call   c0018f8f <nanoSleep(unsigned long long)>
c001ca6a:	83 c4 10             	add    esp,0x10
c001ca6d:	83 fe 3c             	cmp    esi,0x3c
c001ca70:	74 0b                	je     c001ca7d <IDE::waitInterrupt(unsigned char)+0x63>
c001ca72:	46                   	inc    esi
c001ca73:	eb b9                	jmp    c001ca2e <IDE::waitInterrupt(unsigned char)+0x14>
c001ca75:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001ca7d:	83 c4 10             	add    esp,0x10
c001ca80:	88 d8                	mov    al,bl
c001ca82:	5b                   	pop    ebx
c001ca83:	5e                   	pop    esi
c001ca84:	5f                   	pop    edi
c001ca85:	c3                   	ret    

c001ca86 <ideChannel0IRQHandler(regs*, void*)>:
c001ca86:	83 ec 10             	sub    esp,0x10
c001ca89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca8d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ca94:	6a 07                	push   0x7
c001ca96:	6a 00                	push   0x0
c001ca98:	50                   	push   eax
c001ca99:	e8 ce fe ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001ca9e:	83 c4 1c             	add    esp,0x1c
c001caa1:	c3                   	ret    

c001caa2 <ideChannel1IRQHandler(regs*, void*)>:
c001caa2:	83 ec 10             	sub    esp,0x10
c001caa5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caa9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cab0:	6a 07                	push   0x7
c001cab2:	6a 01                	push   0x1
c001cab4:	50                   	push   eax
c001cab5:	e8 b2 fe ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001caba:	83 c4 1c             	add    esp,0x1c
c001cabd:	c3                   	ret    

c001cabe <IDE::enableIRQs(unsigned char, bool)>:
c001cabe:	57                   	push   edi
c001cabf:	56                   	push   esi
c001cac0:	be 04 00 00 00       	mov    esi,0x4
c001cac5:	53                   	push   ebx
c001cac6:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001cacb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cad0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cad4:	0f 94 c0             	sete   al
c001cad7:	01 c0                	add    eax,eax
c001cad9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001cae0:	0f b6 c0             	movzx  eax,al
c001cae3:	50                   	push   eax
c001cae4:	6a 0c                	push   0xc
c001cae6:	57                   	push   edi
c001cae7:	53                   	push   ebx
c001cae8:	e8 bf fd ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caed:	83 c4 10             	add    esp,0x10
c001caf0:	50                   	push   eax
c001caf1:	6a 0c                	push   0xc
c001caf3:	57                   	push   edi
c001caf4:	53                   	push   ebx
c001caf5:	e8 72 fe ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001cafa:	83 c4 10             	add    esp,0x10
c001cafd:	4e                   	dec    esi
c001cafe:	75 f0                	jne    c001caf0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb00:	5b                   	pop    ebx
c001cb01:	5e                   	pop    esi
c001cb02:	5f                   	pop    edi
c001cb03:	c3                   	ret    

c001cb04 <IDE::open(int, int, void*)>:
c001cb04:	55                   	push   ebp
c001cb05:	57                   	push   edi
c001cb06:	56                   	push   esi
c001cb07:	53                   	push   ebx
c001cb08:	83 ec 1c             	sub    esp,0x1c
c001cb0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb0f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb18:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb21:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb28:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb2f:	0f 85 b2 02 00 00    	jne    c001cde7 <IDE::open(int, int, void*)+0x2e3>
c001cb35:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb3b:	88 04 24             	mov    BYTE PTR [esp],al
c001cb3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb41:	83 e0 7f             	and    eax,0x7f
c001cb44:	83 f8 05             	cmp    eax,0x5
c001cb47:	74 05                	je     c001cb4e <IDE::open(int, int, void*)+0x4a>
c001cb49:	83 f8 0f             	cmp    eax,0xf
c001cb4c:	75 32                	jne    c001cb80 <IDE::open(int, int, void*)+0x7c>
c001cb4e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb54:	83 e0 fc             	and    eax,0xfffffffc
c001cb57:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb5e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb64:	83 e0 fc             	and    eax,0xfffffffc
c001cb67:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb6e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb74:	83 e0 fc             	and    eax,0xfffffffc
c001cb77:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb7e:	eb 14                	jmp    c001cb94 <IDE::open(int, int, void*)+0x90>
c001cb80:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb8a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cb94:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cb9b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cba2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cba6:	89 c6                	mov    esi,eax
c001cba8:	89 e8                	mov    eax,ebp
c001cbaa:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbaf:	c1 e6 10             	shl    esi,0x10
c001cbb2:	89 fa                	mov    edx,edi
c001cbb4:	c1 e0 0b             	shl    eax,0xb
c001cbb7:	09 f0                	or     eax,esi
c001cbb9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbc0:	c1 e6 08             	shl    esi,0x8
c001cbc3:	09 c6                	or     esi,eax
c001cbc5:	89 f0                	mov    eax,esi
c001cbc7:	0d 08 00 00 80       	or     eax,0x80000008
c001cbcc:	ef                   	out    dx,eax
c001cbcd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbd2:	89 ca                	mov    edx,ecx
c001cbd4:	ed                   	in     eax,dx
c001cbd5:	c1 e8 10             	shr    eax,0x10
c001cbd8:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbdd:	0f 84 f3 00 00 00    	je     c001ccd6 <IDE::open(int, int, void*)+0x1d2>
c001cbe3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cbe9:	89 fa                	mov    edx,edi
c001cbeb:	89 f0                	mov    eax,esi
c001cbed:	ef                   	out    dx,eax
c001cbee:	b0 fe                	mov    al,0xfe
c001cbf0:	89 ca                	mov    edx,ecx
c001cbf2:	ee                   	out    dx,al
c001cbf3:	89 f0                	mov    eax,esi
c001cbf5:	89 fa                	mov    edx,edi
c001cbf7:	ef                   	out    dx,eax
c001cbf8:	89 ca                	mov    edx,ecx
c001cbfa:	ed                   	in     eax,dx
c001cbfb:	3c fe                	cmp    al,0xfe
c001cbfd:	0f 85 a9 00 00 00    	jne    c001ccac <IDE::open(int, int, void*)+0x1a8>
c001cc03:	8b 15 68 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024768
c001cc09:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc10:	74 33                	je     c001cc45 <IDE::open(int, int, void*)+0x141>
c001cc12:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc18:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc1c:	40                   	inc    eax
c001cc1d:	83 ec 0c             	sub    esp,0xc
c001cc20:	0f b6 c0             	movzx  eax,al
c001cc23:	50                   	push   eax
c001cc24:	55                   	push   ebp
c001cc25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc29:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc2f:	51                   	push   ecx
c001cc30:	e8 1d 72 ff ff       	call   c0013e52 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc35:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc3a:	83 c4 1c             	add    esp,0x1c
c001cc3d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc43:	eb 0a                	jmp    c001cc4f <IDE::open(int, int, void*)+0x14b>
c001cc45:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc4f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc56:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc5d:	c1 e1 10             	shl    ecx,0x10
c001cc60:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc65:	c1 e0 08             	shl    eax,0x8
c001cc68:	89 fa                	mov    edx,edi
c001cc6a:	09 c1                	or     ecx,eax
c001cc6c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc73:	c1 e0 0b             	shl    eax,0xb
c001cc76:	09 c1                	or     ecx,eax
c001cc78:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc7e:	89 c8                	mov    eax,ecx
c001cc80:	ef                   	out    dx,eax
c001cc81:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc86:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cc8c:	89 f2                	mov    edx,esi
c001cc8e:	ee                   	out    dx,al
c001cc8f:	89 c8                	mov    eax,ecx
c001cc91:	89 fa                	mov    edx,edi
c001cc93:	ef                   	out    dx,eax
c001cc94:	89 f2                	mov    edx,esi
c001cc96:	ed                   	in     eax,dx
c001cc97:	0f b6 c0             	movzx  eax,al
c001cc9a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cca0:	74 44                	je     c001cce6 <IDE::open(int, int, void*)+0x1e2>
c001cca2:	83 ec 0c             	sub    esp,0xc
c001cca5:	68 38 35 02 c0       	push   0xc0023538
c001ccaa:	eb 32                	jmp    c001ccde <IDE::open(int, int, void*)+0x1da>
c001ccac:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccb5:	75 15                	jne    c001cccc <IDE::open(int, int, void*)+0x1c8>
c001ccb7:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001ccbb:	74 06                	je     c001ccc3 <IDE::open(int, int, void*)+0x1bf>
c001ccbd:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001ccc1:	75 09                	jne    c001cccc <IDE::open(int, int, void*)+0x1c8>
c001ccc3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccca:	eb 1a                	jmp    c001cce6 <IDE::open(int, int, void*)+0x1e2>
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	68 40 35 02 c0       	push   0xc0023540
c001ccd4:	eb 08                	jmp    c001ccde <IDE::open(int, int, void*)+0x1da>
c001ccd6:	83 ec 0c             	sub    esp,0xc
c001ccd9:	68 71 35 02 c0       	push   0xc0023571
c001ccde:	e8 45 8d ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cced:	79 1a                	jns    c001cd09 <IDE::open(int, int, void*)+0x205>
c001ccef:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ccf5:	83 e0 fc             	and    eax,0xfffffffc
c001ccf8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ccff:	83 c0 08             	add    eax,0x8
c001cd02:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd09:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd0f:	89 c2                	mov    edx,eax
c001cd11:	83 e2 0f             	and    edx,0xf
c001cd14:	66 83 fa 08          	cmp    dx,0x8
c001cd18:	75 0a                	jne    c001cd24 <IDE::open(int, int, void*)+0x220>
c001cd1a:	83 e8 02             	sub    eax,0x2
c001cd1d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd24:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd2a:	89 c2                	mov    edx,eax
c001cd2c:	83 e2 0f             	and    edx,0xf
c001cd2f:	66 83 fa 08          	cmp    dx,0x8
c001cd33:	75 0a                	jne    c001cd3f <IDE::open(int, int, void*)+0x23b>
c001cd35:	83 e8 02             	sub    eax,0x2
c001cd38:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd3f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd46:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd4d:	89 d0                	mov    eax,edx
c001cd4f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd52:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd56:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd5a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd5d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd62:	0f b6 c9             	movzx  ecx,cl
c001cd65:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd6c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd6f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd73:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd77:	8d 50 02             	lea    edx,[eax+0x2]
c001cd7a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd7f:	0f b6 d2             	movzx  edx,dl
c001cd82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd88:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd8b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd8f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cd93:	8d 48 03             	lea    ecx,[eax+0x3]
c001cd96:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd9b:	0f b6 c9             	movzx  ecx,cl
c001cd9e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cda4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cda7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdab:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdaf:	8d 50 04             	lea    edx,[eax+0x4]
c001cdb2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cdb8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cdbd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cdc4:	66 85 f6             	test   si,si
c001cdc7:	74 3e                	je     c001ce07 <IDE::open(int, int, void*)+0x303>
c001cdc9:	0f b6 d2             	movzx  edx,dl
c001cdcc:	83 c0 05             	add    eax,0x5
c001cdcf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdd2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdd6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdda:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cde0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cde5:	eb 20                	jmp    c001ce07 <IDE::open(int, int, void*)+0x303>
c001cde7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cdf1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cdfb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce02:	e9 02 ff ff ff       	jmp    c001cd09 <IDE::open(int, int, void*)+0x205>
c001ce07:	52                   	push   edx
c001ce08:	52                   	push   edx
c001ce09:	6a 00                	push   0x0
c001ce0b:	53                   	push   ebx
c001ce0c:	e8 75 fa ff ff       	call   c001c886 <IDE::prepareInterrupt(unsigned char)>
c001ce11:	59                   	pop    ecx
c001ce12:	5e                   	pop    esi
c001ce13:	6a 01                	push   0x1
c001ce15:	53                   	push   ebx
c001ce16:	e8 6b fa ff ff       	call   c001c886 <IDE::prepareInterrupt(unsigned char)>
c001ce1b:	83 c4 0c             	add    esp,0xc
c001ce1e:	6a 00                	push   0x0
c001ce20:	6a 00                	push   0x0
c001ce22:	53                   	push   ebx
c001ce23:	e8 96 fc ff ff       	call   c001cabe <IDE::enableIRQs(unsigned char, bool)>
c001ce28:	83 c4 0c             	add    esp,0xc
c001ce2b:	6a 00                	push   0x0
c001ce2d:	6a 01                	push   0x1
c001ce2f:	53                   	push   ebx
c001ce30:	e8 89 fc ff ff       	call   c001cabe <IDE::enableIRQs(unsigned char, bool)>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce3f:	74 40                	je     c001ce81 <IDE::open(int, int, void*)+0x37d>
c001ce41:	83 ec 0c             	sub    esp,0xc
c001ce44:	68 9b 35 02 c0       	push   0xc002359b
c001ce49:	e8 c5 23 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001ce4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce51:	6a 01                	push   0x1
c001ce53:	68 86 ca 01 c0       	push   0xc001ca86
c001ce58:	6a 0e                	push   0xe
c001ce5a:	53                   	push   ebx
c001ce5b:	e8 1c 37 ff ff       	call   c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce60:	83 c4 14             	add    esp,0x14
c001ce63:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce69:	53                   	push   ebx
c001ce6a:	6a 01                	push   0x1
c001ce6c:	68 a2 ca 01 c0       	push   0xc001caa2
c001ce71:	6a 0f                	push   0xf
c001ce73:	53                   	push   ebx
c001ce74:	e8 03 37 ff ff       	call   c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce79:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce7f:	eb 4a                	jmp    c001cecb <IDE::open(int, int, void*)+0x3c7>
c001ce81:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ce8b:	50                   	push   eax
c001ce8c:	6a 0f                	push   0xf
c001ce8e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ce94:	68 b7 35 02 c0       	push   0xc00235b7
c001ce99:	e8 75 23 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001ce9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cea1:	6a 00                	push   0x0
c001cea3:	68 86 ca 01 c0       	push   0xc001ca86
c001cea8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceae:	53                   	push   ebx
c001ceaf:	e8 c8 36 ff ff       	call   c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ceb4:	83 c4 14             	add    esp,0x14
c001ceb7:	53                   	push   ebx
c001ceb8:	6a 00                	push   0x0
c001ceba:	68 a2 ca 01 c0       	push   0xc001caa2
c001cebf:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cec5:	53                   	push   ebx
c001cec6:	e8 b1 36 ff ff       	call   c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cecb:	83 c4 20             	add    esp,0x20
c001cece:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ced0:	83 ec 0c             	sub    esp,0xc
c001ced3:	53                   	push   ebx
c001ced4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ced7:	83 c4 0c             	add    esp,0xc
c001ceda:	6a 07                	push   0x7
c001cedc:	6a 00                	push   0x0
c001cede:	53                   	push   ebx
c001cedf:	e8 88 fa ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001cee4:	83 c4 0c             	add    esp,0xc
c001cee7:	6a 07                	push   0x7
c001cee9:	6a 01                	push   0x1
c001ceeb:	53                   	push   ebx
c001ceec:	e8 7b fa ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001cef1:	83 c4 0c             	add    esp,0xc
c001cef4:	6a 01                	push   0x1
c001cef6:	6a 00                	push   0x0
c001cef8:	53                   	push   ebx
c001cef9:	e8 c0 fb ff ff       	call   c001cabe <IDE::enableIRQs(unsigned char, bool)>
c001cefe:	83 c4 0c             	add    esp,0xc
c001cf01:	6a 01                	push   0x1
c001cf03:	6a 01                	push   0x1
c001cf05:	53                   	push   ebx
c001cf06:	e8 b3 fb ff ff       	call   c001cabe <IDE::enableIRQs(unsigned char, bool)>
c001cf0b:	83 c4 2c             	add    esp,0x2c
c001cf0e:	31 c0                	xor    eax,eax
c001cf10:	5b                   	pop    ebx
c001cf11:	5e                   	pop    esi
c001cf12:	5f                   	pop    edi
c001cf13:	5d                   	pop    ebp
c001cf14:	c3                   	ret    
c001cf15:	90                   	nop

c001cf16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf16:	55                   	push   ebp
c001cf17:	57                   	push   edi
c001cf18:	56                   	push   esi
c001cf19:	53                   	push   ebx
c001cf1a:	83 ec 1c             	sub    esp,0x1c
c001cf1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf25:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf29:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf2d:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf30:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf34:	80 fa 03             	cmp    dl,0x3
c001cf37:	77 5d                	ja     c001cf96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf39:	0f b6 db             	movzx  ebx,bl
c001cf3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf44:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf47:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf4b:	83 ca 80             	or     edx,0xffffff80
c001cf4e:	0f b6 d2             	movzx  edx,dl
c001cf51:	52                   	push   edx
c001cf52:	6a 0c                	push   0xc
c001cf54:	53                   	push   ebx
c001cf55:	56                   	push   esi
c001cf56:	e8 51 f9 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf5f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf64:	0f b6 c0             	movzx  eax,al
c001cf67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf6b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf6f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf71:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf76:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf7a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf7e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf82:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cf8a:	83 c4 2c             	add    esp,0x2c
c001cf8d:	5b                   	pop    ebx
c001cf8e:	5e                   	pop    esi
c001cf8f:	5f                   	pop    edi
c001cf90:	5d                   	pop    ebp
c001cf91:	e9 16 f9 ff ff       	jmp    c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf96:	3c 07                	cmp    al,0x7
c001cf98:	77 10                	ja     c001cfaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cf9a:	0f b6 db             	movzx  ebx,bl
c001cf9d:	0f b6 d0             	movzx  edx,al
c001cfa0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfa8:	eb 2d                	jmp    c001cfd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfaa:	3c 0d                	cmp    al,0xd
c001cfac:	77 13                	ja     c001cfc1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfae:	0f b6 db             	movzx  ebx,bl
c001cfb1:	0f b6 c0             	movzx  eax,al
c001cfb4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfbb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfbf:	eb 16                	jmp    c001cfd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfc1:	3c 15                	cmp    al,0x15
c001cfc3:	77 14                	ja     c001cfd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfc5:	0f b6 db             	movzx  ebx,bl
c001cfc8:	0f b6 c0             	movzx  eax,al
c001cfcb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfd3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cfd7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cfd9:	83 c4 1c             	add    esp,0x1c
c001cfdc:	5b                   	pop    ebx
c001cfdd:	5e                   	pop    esi
c001cfde:	5f                   	pop    edi
c001cfdf:	5d                   	pop    ebp
c001cfe0:	c3                   	ret    
c001cfe1:	90                   	nop

c001cfe2 <IDE::detect()>:
c001cfe2:	55                   	push   ebp
c001cfe3:	57                   	push   edi
c001cfe4:	56                   	push   esi
c001cfe5:	53                   	push   ebx
c001cfe6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cfec:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cff3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cffa:	0f 85 c0 02 00 00    	jne    c001d2c0 <IDE::detect()+0x2de>
c001d000:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d007:	31 f6                	xor    esi,esi
c001d009:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d011:	31 ed                	xor    ebp,ebp
c001d013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d017:	c1 e0 06             	shl    eax,0x6
c001d01a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d022:	89 e8                	mov    eax,ebp
c001d024:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d028:	c1 e0 04             	shl    eax,0x4
c001d02b:	83 c8 a0             	or     eax,0xffffffa0
c001d02e:	0f b6 c0             	movzx  eax,al
c001d031:	50                   	push   eax
c001d032:	6a 06                	push   0x6
c001d034:	56                   	push   esi
c001d035:	53                   	push   ebx
c001d036:	e8 71 f8 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d03b:	83 c4 0c             	add    esp,0xc
c001d03e:	6a 0c                	push   0xc
c001d040:	56                   	push   esi
c001d041:	53                   	push   ebx
c001d042:	e8 25 f9 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d047:	83 c4 0c             	add    esp,0xc
c001d04a:	6a 0c                	push   0xc
c001d04c:	56                   	push   esi
c001d04d:	53                   	push   ebx
c001d04e:	e8 19 f9 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d053:	83 c4 0c             	add    esp,0xc
c001d056:	6a 0c                	push   0xc
c001d058:	56                   	push   esi
c001d059:	53                   	push   ebx
c001d05a:	e8 0d f9 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d05f:	83 c4 0c             	add    esp,0xc
c001d062:	6a 0c                	push   0xc
c001d064:	56                   	push   esi
c001d065:	53                   	push   ebx
c001d066:	e8 01 f9 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d06b:	68 ec 00 00 00       	push   0xec
c001d070:	6a 07                	push   0x7
c001d072:	56                   	push   esi
c001d073:	53                   	push   ebx
c001d074:	e8 33 f8 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d079:	83 c4 1c             	add    esp,0x1c
c001d07c:	6a 0c                	push   0xc
c001d07e:	56                   	push   esi
c001d07f:	53                   	push   ebx
c001d080:	e8 e7 f8 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d085:	83 c4 0c             	add    esp,0xc
c001d088:	6a 0c                	push   0xc
c001d08a:	56                   	push   esi
c001d08b:	53                   	push   ebx
c001d08c:	e8 db f8 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d091:	83 c4 0c             	add    esp,0xc
c001d094:	6a 0c                	push   0xc
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	e8 cf f8 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d09d:	83 c4 0c             	add    esp,0xc
c001d0a0:	6a 0c                	push   0xc
c001d0a2:	56                   	push   esi
c001d0a3:	53                   	push   ebx
c001d0a4:	e8 c3 f8 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d0a9:	83 c4 0c             	add    esp,0xc
c001d0ac:	6a 0c                	push   0xc
c001d0ae:	56                   	push   esi
c001d0af:	53                   	push   ebx
c001d0b0:	e8 b7 f8 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d0b5:	83 c4 10             	add    esp,0x10
c001d0b8:	84 c0                	test   al,al
c001d0ba:	0f 84 8b 01 00 00    	je     c001d24b <IDE::detect()+0x269>
c001d0c0:	31 ff                	xor    edi,edi
c001d0c2:	50                   	push   eax
c001d0c3:	6a 0c                	push   0xc
c001d0c5:	56                   	push   esi
c001d0c6:	53                   	push   ebx
c001d0c7:	e8 a0 f8 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	a8 01                	test   al,0x1
c001d0d1:	0f 85 8e 01 00 00    	jne    c001d265 <IDE::detect()+0x283>
c001d0d7:	84 c0                	test   al,al
c001d0d9:	78 04                	js     c001d0df <IDE::detect()+0xfd>
c001d0db:	a8 08                	test   al,0x8
c001d0dd:	75 27                	jne    c001d106 <IDE::detect()+0x124>
c001d0df:	47                   	inc    edi
c001d0e0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d0e6:	7e da                	jle    c001d0c2 <IDE::detect()+0xe0>
c001d0e8:	50                   	push   eax
c001d0e9:	50                   	push   eax
c001d0ea:	6a 00                	push   0x0
c001d0ec:	68 40 4b 4c 00       	push   0x4c4b40
c001d0f1:	e8 99 be ff ff       	call   c0018f8f <nanoSleep(unsigned long long)>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d0ff:	75 c1                	jne    c001d0c2 <IDE::detect()+0xe0>
c001d101:	e9 5f 01 00 00       	jmp    c001d265 <IDE::detect()+0x283>
c001d106:	31 c9                	xor    ecx,ecx
c001d108:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d10c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d110:	83 ec 0c             	sub    esp,0xc
c001d113:	68 80 00 00 00       	push   0x80
c001d118:	57                   	push   edi
c001d119:	6a 00                	push   0x0
c001d11b:	56                   	push   esi
c001d11c:	53                   	push   ebx
c001d11d:	e8 f4 fd ff ff       	call   c001cf16 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d122:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d126:	c1 e0 06             	shl    eax,0x6
c001d129:	01 d8                	add    eax,ebx
c001d12b:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d130:	89 d1                	mov    ecx,edx
c001d132:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d139:	89 f2                	mov    edx,esi
c001d13b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d142:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d148:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d14c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d152:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d156:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d15d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d165:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d16c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d174:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d17a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d181:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d187:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d18b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d18f:	83 c4 20             	add    esp,0x20
c001d192:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d195:	83 c7 02             	add    edi,0x2
c001d198:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d19e:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1a1:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1a7:	83 c0 02             	add    eax,0x2
c001d1aa:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1ae:	75 e2                	jne    c001d192 <IDE::detect()+0x1b0>
c001d1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1b4:	c1 e0 06             	shl    eax,0x6
c001d1b7:	01 d8                	add    eax,ebx
c001d1b9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1bf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1c6:	66 c1 ea 09          	shr    dx,0x9
c001d1ca:	83 e2 01             	and    edx,0x1
c001d1cd:	84 c9                	test   cl,cl
c001d1cf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1d5:	75 2f                	jne    c001d206 <IDE::detect()+0x224>
c001d1d7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d1dd:	85 c0                	test   eax,eax
c001d1df:	74 66                	je     c001d247 <IDE::detect()+0x265>
c001d1e1:	50                   	push   eax
c001d1e2:	55                   	push   ebp
c001d1e3:	56                   	push   esi
c001d1e4:	68 d3 35 02 c0       	push   0xc00235d3
c001d1e9:	e8 25 20 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d1ee:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d1f5:	e8 e4 1e ff ff       	call   c000f0de <operator new(unsigned long)>
c001d1fa:	89 c7                	mov    edi,eax
c001d1fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1ff:	e8 f4 02 00 00       	call   c001d4f8 <ATA::ATA()>
c001d204:	eb 28                	jmp    c001d22e <IDE::detect()+0x24c>
c001d206:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d20c:	55                   	push   ebp
c001d20d:	56                   	push   esi
c001d20e:	68 02 36 02 c0       	push   0xc0023602
c001d213:	e8 fb 1f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d218:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d21f:	e8 ba 1e ff ff       	call   c000f0de <operator new(unsigned long)>
c001d224:	89 c7                	mov    edi,eax
c001d226:	89 04 24             	mov    DWORD PTR [esp],eax
c001d229:	e8 1e 09 00 00       	call   c001db4c <ATAPI::ATAPI()>
c001d22e:	5a                   	pop    edx
c001d22f:	59                   	pop    ecx
c001d230:	57                   	push   edi
c001d231:	53                   	push   ebx
c001d232:	e8 f1 33 ff ff       	call   c0010628 <Device::addChild(Device*)>
c001d237:	8b 07                	mov    eax,DWORD PTR [edi]
c001d239:	53                   	push   ebx
c001d23a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d23e:	6a 00                	push   0x0
c001d240:	57                   	push   edi
c001d241:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d244:	83 c4 20             	add    esp,0x20
c001d247:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d24b:	4d                   	dec    ebp
c001d24c:	74 0a                	je     c001d258 <IDE::detect()+0x276>
c001d24e:	bd 01 00 00 00       	mov    ebp,0x1
c001d253:	e9 bb fd ff ff       	jmp    c001d013 <IDE::detect()+0x31>
c001d258:	4e                   	dec    esi
c001d259:	74 65                	je     c001d2c0 <IDE::detect()+0x2de>
c001d25b:	be 01 00 00 00       	mov    esi,0x1
c001d260:	e9 ac fd ff ff       	jmp    c001d011 <IDE::detect()+0x2f>
c001d265:	50                   	push   eax
c001d266:	6a 04                	push   0x4
c001d268:	56                   	push   esi
c001d269:	53                   	push   ebx
c001d26a:	e8 fd f6 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d26f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d273:	83 c4 0c             	add    esp,0xc
c001d276:	6a 05                	push   0x5
c001d278:	56                   	push   esi
c001d279:	53                   	push   ebx
c001d27a:	e8 ed f6 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d27f:	83 c4 10             	add    esp,0x10
c001d282:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d286:	80 fa 14             	cmp    dl,0x14
c001d289:	74 2f                	je     c001d2ba <IDE::detect()+0x2d8>
c001d28b:	80 fa 69             	cmp    dl,0x69
c001d28e:	75 bb                	jne    c001d24b <IDE::detect()+0x269>
c001d290:	3c 96                	cmp    al,0x96
c001d292:	75 b7                	jne    c001d24b <IDE::detect()+0x269>
c001d294:	68 a1 00 00 00       	push   0xa1
c001d299:	6a 07                	push   0x7
c001d29b:	56                   	push   esi
c001d29c:	53                   	push   ebx
c001d29d:	e8 0a f6 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2a2:	5f                   	pop    edi
c001d2a3:	58                   	pop    eax
c001d2a4:	6a 00                	push   0x0
c001d2a6:	68 40 42 0f 00       	push   0xf4240
c001d2ab:	e8 df bc ff ff       	call   c0018f8f <nanoSleep(unsigned long long)>
c001d2b0:	83 c4 10             	add    esp,0x10
c001d2b3:	b1 01                	mov    cl,0x1
c001d2b5:	e9 4e fe ff ff       	jmp    c001d108 <IDE::detect()+0x126>
c001d2ba:	3c eb                	cmp    al,0xeb
c001d2bc:	75 cd                	jne    c001d28b <IDE::detect()+0x2a9>
c001d2be:	eb d4                	jmp    c001d294 <IDE::detect()+0x2b2>
c001d2c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2c6:	5b                   	pop    ebx
c001d2c7:	5e                   	pop    esi
c001d2c8:	5f                   	pop    edi
c001d2c9:	5d                   	pop    ebp
c001d2ca:	c3                   	ret    
c001d2cb:	90                   	nop

c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2cc:	55                   	push   ebp
c001d2cd:	57                   	push   edi
c001d2ce:	56                   	push   esi
c001d2cf:	53                   	push   ebx
c001d2d0:	83 ec 1c             	sub    esp,0x1c
c001d2d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2df:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d2e3:	88 c3                	mov    bl,al
c001d2e5:	84 c0                	test   al,al
c001d2e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2eb:	0f 84 67 01 00 00    	je     c001d458 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d2f1:	83 ec 0c             	sub    esp,0xc
c001d2f4:	68 33 36 02 c0       	push   0xc0023633
c001d2f9:	e8 15 1f ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d305:	3c 01                	cmp    al,0x1
c001d307:	75 17                	jne    c001d320 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d309:	83 ec 0c             	sub    esp,0xc
c001d30c:	b3 13                	mov    bl,0x13
c001d30e:	68 3f 36 02 c0       	push   0xc002363f
c001d313:	e8 fb 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	e9 25 01 00 00       	jmp    c001d445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d320:	3c 02                	cmp    al,0x2
c001d322:	0f 85 ef 00 00 00    	jne    c001d417 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d328:	01 f6                	add    esi,esi
c001d32a:	52                   	push   edx
c001d32b:	09 ee                	or     esi,ebp
c001d32d:	6a 01                	push   0x1
c001d32f:	89 f0                	mov    eax,esi
c001d331:	0f b6 f0             	movzx  esi,al
c001d334:	c1 e6 06             	shl    esi,0x6
c001d337:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d33f:	50                   	push   eax
c001d340:	57                   	push   edi
c001d341:	e8 26 f6 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d346:	83 c4 10             	add    esp,0x10
c001d349:	89 c6                	mov    esi,eax
c001d34b:	a8 01                	test   al,0x1
c001d34d:	74 12                	je     c001d361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d34f:	83 ec 0c             	sub    esp,0xc
c001d352:	b3 07                	mov    bl,0x7
c001d354:	68 54 36 02 c0       	push   0xc0023654
c001d359:	e8 b5 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	f7 c6 02 00 00 00    	test   esi,0x2
c001d367:	74 12                	je     c001d37b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d369:	83 ec 0c             	sub    esp,0xc
c001d36c:	b3 03                	mov    bl,0x3
c001d36e:	68 72 36 02 c0       	push   0xc0023672
c001d373:	e8 9b 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d378:	83 c4 10             	add    esp,0x10
c001d37b:	f7 c6 04 00 00 00    	test   esi,0x4
c001d381:	74 12                	je     c001d395 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d383:	83 ec 0c             	sub    esp,0xc
c001d386:	b3 14                	mov    bl,0x14
c001d388:	68 92 36 02 c0       	push   0xc0023692
c001d38d:	e8 81 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d392:	83 c4 10             	add    esp,0x10
c001d395:	f7 c6 08 00 00 00    	test   esi,0x8
c001d39b:	74 12                	je     c001d3af <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d39d:	83 ec 0c             	sub    esp,0xc
c001d3a0:	b3 03                	mov    bl,0x3
c001d3a2:	68 72 36 02 c0       	push   0xc0023672
c001d3a7:	e8 67 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d3ac:	83 c4 10             	add    esp,0x10
c001d3af:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3b5:	74 12                	je     c001d3c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3b7:	83 ec 0c             	sub    esp,0xc
c001d3ba:	b3 15                	mov    bl,0x15
c001d3bc:	68 aa 36 02 c0       	push   0xc00236aa
c001d3c1:	e8 4d 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d3c6:	83 c4 10             	add    esp,0x10
c001d3c9:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3cf:	74 12                	je     c001d3e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3d1:	83 ec 0c             	sub    esp,0xc
c001d3d4:	b3 03                	mov    bl,0x3
c001d3d6:	68 72 36 02 c0       	push   0xc0023672
c001d3db:	e8 33 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d3e0:	83 c4 10             	add    esp,0x10
c001d3e3:	f7 c6 40 00 00 00    	test   esi,0x40
c001d3e9:	74 12                	je     c001d3fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d3eb:	83 ec 0c             	sub    esp,0xc
c001d3ee:	b3 16                	mov    bl,0x16
c001d3f0:	68 c4 36 02 c0       	push   0xc00236c4
c001d3f5:	e8 19 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d3fa:	83 c4 10             	add    esp,0x10
c001d3fd:	89 f0                	mov    eax,esi
c001d3ff:	84 c0                	test   al,al
c001d401:	79 42                	jns    c001d445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	b3 0d                	mov    bl,0xd
c001d408:	68 e5 36 02 c0       	push   0xc00236e5
c001d40d:	e8 01 1e ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	eb 2e                	jmp    c001d445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d417:	3c 03                	cmp    al,0x3
c001d419:	75 14                	jne    c001d42f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d41b:	83 ec 0c             	sub    esp,0xc
c001d41e:	b3 17                	mov    bl,0x17
c001d420:	68 f9 36 02 c0       	push   0xc00236f9
c001d425:	e8 e9 1d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	eb 16                	jmp    c001d445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d42f:	3c 04                	cmp    al,0x4
c001d431:	75 12                	jne    c001d445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d433:	83 ec 0c             	sub    esp,0xc
c001d436:	b3 08                	mov    bl,0x8
c001d438:	68 0f 37 02 c0       	push   0xc002370f
c001d43d:	e8 d1 1d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	50                   	push   eax
c001d446:	50                   	push   eax
c001d447:	0f b6 c3             	movzx  eax,bl
c001d44a:	50                   	push   eax
c001d44b:	68 27 37 02 c0       	push   0xc0023727
c001d450:	e8 be 1d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d455:	83 c4 10             	add    esp,0x10
c001d458:	83 c4 1c             	add    esp,0x1c
c001d45b:	88 d8                	mov    al,bl
c001d45d:	5b                   	pop    ebx
c001d45e:	5e                   	pop    esi
c001d45f:	5f                   	pop    edi
c001d460:	5d                   	pop    ebp
c001d461:	c3                   	ret    

c001d462 <IDE::polling(unsigned char, unsigned int)>:
c001d462:	55                   	push   ebp
c001d463:	bd 04 00 00 00       	mov    ebp,0x4
c001d468:	57                   	push   edi
c001d469:	56                   	push   esi
c001d46a:	53                   	push   ebx
c001d46b:	83 ec 0c             	sub    esp,0xc
c001d46e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d472:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d476:	52                   	push   edx
c001d477:	6a 0c                	push   0xc
c001d479:	0f b6 f3             	movzx  esi,bl
c001d47c:	56                   	push   esi
c001d47d:	57                   	push   edi
c001d47e:	e8 e9 f4 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	4d                   	dec    ebp
c001d487:	75 ed                	jne    c001d476 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d489:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d48e:	50                   	push   eax
c001d48f:	6a 0c                	push   0xc
c001d491:	56                   	push   esi
c001d492:	57                   	push   edi
c001d493:	e8 d4 f4 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	a8 01                	test   al,0x1
c001d49d:	74 12                	je     c001d4b1 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d49f:	83 ec 0c             	sub    esp,0xc
c001d4a2:	68 41 37 02 c0       	push   0xc0023741
c001d4a7:	e8 67 1d ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	eb 17                	jmp    c001d4c8 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4b1:	a8 20                	test   al,0x20
c001d4b3:	75 0f                	jne    c001d4c4 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4b5:	4b                   	dec    ebx
c001d4b6:	74 10                	je     c001d4c8 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4b8:	84 c0                	test   al,al
c001d4ba:	78 d2                	js     c001d48e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4bc:	a8 08                	test   al,0x8
c001d4be:	74 ce                	je     c001d48e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4c0:	31 c0                	xor    eax,eax
c001d4c2:	eb 06                	jmp    c001d4ca <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4c4:	b0 01                	mov    al,0x1
c001d4c6:	eb 02                	jmp    c001d4ca <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4c8:	b0 02                	mov    al,0x2
c001d4ca:	83 c4 0c             	add    esp,0xc
c001d4cd:	5b                   	pop    ebx
c001d4ce:	5e                   	pop    esi
c001d4cf:	5f                   	pop    edi
c001d4d0:	5d                   	pop    ebp
c001d4d1:	c3                   	ret    

c001d4d2 <ATA::close(int, int, void*)>:
c001d4d2:	83 ec 0c             	sub    esp,0xc
c001d4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4df:	85 c0                	test   eax,eax
c001d4e1:	74 0c                	je     c001d4ef <ATA::close(int, int, void*)+0x1d>
c001d4e3:	83 ec 0c             	sub    esp,0xc
c001d4e6:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4e8:	50                   	push   eax
c001d4e9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	31 c0                	xor    eax,eax
c001d4f1:	83 c4 0c             	add    esp,0xc
c001d4f4:	c3                   	ret    
c001d4f5:	90                   	nop

c001d4f6 <ATA::powerSaving(PowerSavingLevel)>:
c001d4f6:	c3                   	ret    
c001d4f7:	90                   	nop

c001d4f8 <ATA::ATA()>:
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ff:	83 ec 04             	sub    esp,0x4
c001d502:	68 00 02 00 00       	push   0x200
c001d507:	68 84 37 02 c0       	push   0xc0023784
c001d50c:	50                   	push   eax
c001d50d:	e8 1c 35 ff ff       	call   c0010a2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d512:	83 c4 10             	add    esp,0x10
c001d515:	ba b0 37 02 c0       	mov    edx,0xc00237b0
c001d51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51e:	89 10                	mov    DWORD PTR [eax],edx
c001d520:	90                   	nop
c001d521:	83 c4 0c             	add    esp,0xc
c001d524:	c3                   	ret    
c001d525:	90                   	nop

c001d526 <ATA::flush(bool)>:
c001d526:	53                   	push   ebx
c001d527:	83 ec 08             	sub    esp,0x8
c001d52a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d52f:	19 c0                	sbb    eax,eax
c001d531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d535:	83 e0 fd             	and    eax,0xfffffffd
c001d538:	05 ea 00 00 00       	add    eax,0xea
c001d53d:	50                   	push   eax
c001d53e:	6a 07                	push   0x7
c001d540:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d547:	50                   	push   eax
c001d548:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d54e:	e8 59 f3 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d553:	83 c4 0c             	add    esp,0xc
c001d556:	6a 00                	push   0x0
c001d558:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d55f:	50                   	push   eax
c001d560:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d566:	e8 f7 fe ff ff       	call   c001d462 <IDE::polling(unsigned char, unsigned int)>
c001d56b:	83 c4 18             	add    esp,0x18
c001d56e:	5b                   	pop    ebx
c001d56f:	c3                   	ret    

c001d570 <ATA::readyForCommand()>:
c001d570:	56                   	push   esi
c001d571:	53                   	push   ebx
c001d572:	31 db                	xor    ebx,ebx
c001d574:	50                   	push   eax
c001d575:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d579:	50                   	push   eax
c001d57a:	6a 0c                	push   0xc
c001d57c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d583:	50                   	push   eax
c001d584:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d58a:	e8 dd f3 ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	a8 88                	test   al,0x88
c001d594:	74 23                	je     c001d5b9 <ATA::readyForCommand()+0x49>
c001d596:	43                   	inc    ebx
c001d597:	83 fb 63             	cmp    ebx,0x63
c001d59a:	7e dd                	jle    c001d579 <ATA::readyForCommand()+0x9>
c001d59c:	51                   	push   ecx
c001d59d:	51                   	push   ecx
c001d59e:	6a 00                	push   0x0
c001d5a0:	68 40 42 0f 00       	push   0xf4240
c001d5a5:	e8 e5 b9 ff ff       	call   c0018f8f <nanoSleep(unsigned long long)>
c001d5aa:	83 c4 10             	add    esp,0x10
c001d5ad:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5b3:	75 c4                	jne    c001d579 <ATA::readyForCommand()+0x9>
c001d5b5:	31 c0                	xor    eax,eax
c001d5b7:	eb 02                	jmp    c001d5bb <ATA::readyForCommand()+0x4b>
c001d5b9:	b0 01                	mov    al,0x1
c001d5bb:	5a                   	pop    edx
c001d5bc:	5b                   	pop    ebx
c001d5bd:	5e                   	pop    esi
c001d5be:	c3                   	ret    
c001d5bf:	90                   	nop

c001d5c0 <ATA::access(unsigned long long, int, void*, bool)>:
c001d5c0:	55                   	push   ebp
c001d5c1:	57                   	push   edi
c001d5c2:	56                   	push   esi
c001d5c3:	53                   	push   ebx
c001d5c4:	83 ec 2c             	sub    esp,0x2c
c001d5c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5d6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5d9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d5dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d5e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d5e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d5f1:	c1 e0 06             	shl    eax,0x6
c001d5f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d5f8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d600:	74 5d                	je     c001d65f <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d602:	89 fa                	mov    edx,edi
c001d604:	89 f0                	mov    eax,esi
c001d606:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d60a:	c1 ea 1c             	shr    edx,0x1c
c001d60d:	89 d1                	mov    ecx,edx
c001d60f:	09 c1                	or     ecx,eax
c001d611:	74 25                	je     c001d638 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d613:	31 ed                	xor    ebp,ebp
c001d615:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d61c:	89 fa                	mov    edx,edi
c001d61e:	89 f0                	mov    eax,esi
c001d620:	0f ad d0             	shrd   eax,edx,cl
c001d623:	d3 ea                	shr    edx,cl
c001d625:	f6 c1 20             	test   cl,0x20
c001d628:	74 02                	je     c001d62c <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d62a:	89 d0                	mov    eax,edx
c001d62c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d630:	45                   	inc    ebp
c001d631:	83 fd 06             	cmp    ebp,0x6
c001d634:	75 df                	jne    c001d615 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d636:	eb 73                	jmp    c001d6ab <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d638:	89 f0                	mov    eax,esi
c001d63a:	89 fa                	mov    edx,edi
c001d63c:	0f ac d0 10          	shrd   eax,edx,0x10
c001d640:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d645:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d649:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d650:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d655:	c1 ee 18             	shr    esi,0x18
c001d658:	bf 01 00 00 00       	mov    edi,0x1
c001d65d:	eb 53                	jmp    c001d6b2 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d65f:	6a 00                	push   0x0
c001d661:	6a 3f                	push   0x3f
c001d663:	57                   	push   edi
c001d664:	56                   	push   esi
c001d665:	e8 82 1f 00 00       	call   c001f5ec <__umoddi3>
c001d66a:	83 c4 10             	add    esp,0x10
c001d66d:	40                   	inc    eax
c001d66e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d672:	6a 00                	push   0x0
c001d674:	68 f0 03 00 00       	push   0x3f0
c001d679:	57                   	push   edi
c001d67a:	56                   	push   esi
c001d67b:	e8 6c 1e 00 00       	call   c001f4ec <__udivdi3>
c001d680:	83 c4 10             	add    esp,0x10
c001d683:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d688:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d68f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d694:	6a 00                	push   0x0
c001d696:	6a 3f                	push   0x3f
c001d698:	57                   	push   edi
c001d699:	31 ff                	xor    edi,edi
c001d69b:	56                   	push   esi
c001d69c:	e8 4b 1e 00 00       	call   c001f4ec <__udivdi3>
c001d6a1:	89 c6                	mov    esi,eax
c001d6a3:	83 c4 10             	add    esp,0x10
c001d6a6:	83 e6 0f             	and    esi,0xf
c001d6a9:	eb 07                	jmp    c001d6b2 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6ab:	31 f6                	xor    esi,esi
c001d6ad:	bf 02 00 00 00       	mov    edi,0x2
c001d6b2:	50                   	push   eax
c001d6b3:	6a 00                	push   0x0
c001d6b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6bc:	50                   	push   eax
c001d6bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6c1:	e8 f8 f3 ff ff       	call   c001cabe <IDE::enableIRQs(unsigned char, bool)>
c001d6c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6c9:	e8 a2 fe ff ff       	call   c001d570 <ATA::readyForCommand()>
c001d6ce:	83 c4 10             	add    esp,0x10
c001d6d1:	84 c0                	test   al,al
c001d6d3:	75 0a                	jne    c001d6df <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6d5:	be 01 00 00 00       	mov    esi,0x1
c001d6da:	e9 79 02 00 00       	jmp    c001d958 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d6df:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d6e5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d6eb:	c1 e0 04             	shl    eax,0x4
c001d6ee:	09 c6                	or     esi,eax
c001d6f0:	89 f8                	mov    eax,edi
c001d6f2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d6f9:	84 c0                	test   al,al
c001d6fb:	75 05                	jne    c001d702 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d6fd:	83 ce a0             	or     esi,0xffffffa0
c001d700:	eb 03                	jmp    c001d705 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d702:	83 ce e0             	or     esi,0xffffffe0
c001d705:	89 f0                	mov    eax,esi
c001d707:	0f b6 f0             	movzx  esi,al
c001d70a:	56                   	push   esi
c001d70b:	6a 06                	push   0x6
c001d70d:	51                   	push   ecx
c001d70e:	52                   	push   edx
c001d70f:	e8 98 f1 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	6a 00                	push   0x0
c001d719:	6a 01                	push   0x1
c001d71b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d722:	50                   	push   eax
c001d723:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d729:	e8 7e f1 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d72e:	89 f8                	mov    eax,edi
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	3c 02                	cmp    al,0x2
c001d735:	75 6e                	jne    c001d7a5 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d737:	6a 00                	push   0x0
c001d739:	6a 08                	push   0x8
c001d73b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d742:	50                   	push   eax
c001d743:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d749:	e8 5e f1 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d74e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d753:	50                   	push   eax
c001d754:	6a 09                	push   0x9
c001d756:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d75d:	50                   	push   eax
c001d75e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d764:	e8 43 f1 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d769:	83 c4 20             	add    esp,0x20
c001d76c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d771:	50                   	push   eax
c001d772:	6a 0a                	push   0xa
c001d774:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d77b:	50                   	push   eax
c001d77c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d782:	e8 25 f1 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d787:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d78c:	50                   	push   eax
c001d78d:	6a 0b                	push   0xb
c001d78f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d796:	50                   	push   eax
c001d797:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d79d:	e8 0a f1 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7a2:	83 c4 20             	add    esp,0x20
c001d7a5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7aa:	50                   	push   eax
c001d7ab:	6a 02                	push   0x2
c001d7ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7b4:	50                   	push   eax
c001d7b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7bb:	e8 ec f0 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7c0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7c5:	50                   	push   eax
c001d7c6:	6a 03                	push   0x3
c001d7c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7cf:	50                   	push   eax
c001d7d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7d6:	e8 d1 f0 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7db:	83 c4 20             	add    esp,0x20
c001d7de:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d7e3:	50                   	push   eax
c001d7e4:	6a 04                	push   0x4
c001d7e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ed:	50                   	push   eax
c001d7ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7f4:	e8 b3 f0 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7fe:	50                   	push   eax
c001d7ff:	6a 05                	push   0x5
c001d801:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d808:	50                   	push   eax
c001d809:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d80f:	e8 98 f0 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d814:	83 c4 20             	add    esp,0x20
c001d817:	89 f8                	mov    eax,edi
c001d819:	3c 02                	cmp    al,0x2
c001d81b:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d820:	75 06                	jne    c001d828 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d822:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d826:	75 40                	jne    c001d868 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d828:	89 f8                	mov    eax,edi
c001d82a:	3c 02                	cmp    al,0x2
c001d82c:	0f 95 c1             	setne  cl
c001d82f:	74 0b                	je     c001d83c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d831:	b8 30 00 00 00       	mov    eax,0x30
c001d836:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d83a:	75 31                	jne    c001d86d <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d83c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d83f:	83 f2 01             	xor    edx,0x1
c001d842:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d847:	74 09                	je     c001d852 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d849:	b8 24 00 00 00       	mov    eax,0x24
c001d84e:	84 d2                	test   dl,dl
c001d850:	75 1b                	jne    c001d86d <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d852:	84 c9                	test   cl,cl
c001d854:	0f 84 7b fe ff ff    	je     c001d6d5 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d85a:	b8 20 00 00 00       	mov    eax,0x20
c001d85f:	84 d2                	test   dl,dl
c001d861:	75 0a                	jne    c001d86d <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d863:	e9 6d fe ff ff       	jmp    c001d6d5 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d868:	b8 34 00 00 00       	mov    eax,0x34
c001d86d:	50                   	push   eax
c001d86e:	6a 07                	push   0x7
c001d870:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d877:	50                   	push   eax
c001d878:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d87e:	e8 29 f0 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d883:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d887:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d88b:	83 c4 10             	add    esp,0x10
c001d88e:	85 f6                	test   esi,esi
c001d890:	0f 84 a9 00 00 00    	je     c001d93f <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d896:	50                   	push   eax
c001d897:	6a 01                	push   0x1
c001d899:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8a0:	50                   	push   eax
c001d8a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8a7:	e8 b6 fb ff ff       	call   c001d462 <IDE::polling(unsigned char, unsigned int)>
c001d8ac:	83 c4 10             	add    esp,0x10
c001d8af:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8b5:	84 c0                	test   al,al
c001d8b7:	74 1d                	je     c001d8d6 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8b9:	0f b6 f0             	movzx  esi,al
c001d8bc:	56                   	push   esi
c001d8bd:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8c4:	0f b6 d2             	movzx  edx,dl
c001d8c7:	50                   	push   eax
c001d8c8:	52                   	push   edx
c001d8c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8cf:	e8 f8 f9 ff ff       	call   c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8d4:	eb 7f                	jmp    c001d955 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8db:	74 41                	je     c001d91e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d8dd:	31 c9                	xor    ecx,ecx
c001d8df:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d8e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8e7:	50                   	push   eax
c001d8e8:	50                   	push   eax
c001d8e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8f0:	50                   	push   eax
c001d8f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8f7:	e8 9e ef ff ff       	call   c001c89a <IDE::getBase(unsigned char)>
c001d8fc:	89 c2                	mov    edx,eax
c001d8fe:	89 e8                	mov    eax,ebp
c001d900:	66 ef                	out    dx,ax
c001d902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	41                   	inc    ecx
c001d90a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d910:	75 cd                	jne    c001d8df <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d912:	4e                   	dec    esi
c001d913:	81 c7 00 02 00 00    	add    edi,0x200
c001d919:	e9 70 ff ff ff       	jmp    c001d88e <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d91e:	51                   	push   ecx
c001d91f:	51                   	push   ecx
c001d920:	0f b6 d2             	movzx  edx,dl
c001d923:	52                   	push   edx
c001d924:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d92a:	e8 6b ef ff ff       	call   c001c89a <IDE::getBase(unsigned char)>
c001d92f:	b9 00 01 00 00       	mov    ecx,0x100
c001d934:	89 c2                	mov    edx,eax
c001d936:	fc                   	cld    
c001d937:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d93a:	83 c4 10             	add    esp,0x10
c001d93d:	eb d3                	jmp    c001d912 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d93f:	31 f6                	xor    esi,esi
c001d941:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d945:	74 11                	je     c001d958 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d947:	50                   	push   eax
c001d948:	50                   	push   eax
c001d949:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d94e:	50                   	push   eax
c001d94f:	53                   	push   ebx
c001d950:	e8 d1 fb ff ff       	call   c001d526 <ATA::flush(bool)>
c001d955:	83 c4 10             	add    esp,0x10
c001d958:	83 c4 2c             	add    esp,0x2c
c001d95b:	89 f0                	mov    eax,esi
c001d95d:	5b                   	pop    ebx
c001d95e:	5e                   	pop    esi
c001d95f:	5f                   	pop    edi
c001d960:	5d                   	pop    ebp
c001d961:	c3                   	ret    

c001d962 <ATA::read(unsigned long long, int, void*)>:
c001d962:	57                   	push   edi
c001d963:	b8 04 00 00 00       	mov    eax,0x4
c001d968:	56                   	push   esi
c001d969:	53                   	push   ebx
c001d96a:	83 ec 10             	sub    esp,0x10
c001d96d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d971:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d975:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d979:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d97d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d980:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d986:	77 3b                	ja     c001d9c3 <ATA::read(unsigned long long, int, void*)+0x61>
c001d988:	b8 06 00 00 00       	mov    eax,0x6
c001d98d:	85 d2                	test   edx,edx
c001d98f:	74 32                	je     c001d9c3 <ATA::read(unsigned long long, int, void*)+0x61>
c001d991:	50                   	push   eax
c001d992:	50                   	push   eax
c001d993:	6a 00                	push   0x0
c001d995:	52                   	push   edx
c001d996:	53                   	push   ebx
c001d997:	57                   	push   edi
c001d998:	56                   	push   esi
c001d999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d99d:	e8 1e fc ff ff       	call   c001d5c0 <ATA::access(unsigned long long, int, void*, bool)>
c001d9a2:	83 c4 20             	add    esp,0x20
c001d9a5:	85 c0                	test   eax,eax
c001d9a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9ab:	75 11                	jne    c001d9be <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9ad:	01 1d 04 65 02 c0    	add    DWORD PTR ds:0xc0026504,ebx
c001d9b3:	e8 32 f6 fe ff       	call   c000cfea <VgaText::updateDiskUsage()>
c001d9b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9bc:	eb 05                	jmp    c001d9c3 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9be:	b8 01 00 00 00       	mov    eax,0x1
c001d9c3:	83 c4 10             	add    esp,0x10
c001d9c6:	5b                   	pop    ebx
c001d9c7:	5e                   	pop    esi
c001d9c8:	5f                   	pop    edi
c001d9c9:	c3                   	ret    

c001d9ca <ATA::write(unsigned long long, int, void*)>:
c001d9ca:	57                   	push   edi
c001d9cb:	b8 04 00 00 00       	mov    eax,0x4
c001d9d0:	56                   	push   esi
c001d9d1:	53                   	push   ebx
c001d9d2:	83 ec 10             	sub    esp,0x10
c001d9d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9d9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d9dd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9e5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9e8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d9ee:	77 3b                	ja     c001da2b <ATA::write(unsigned long long, int, void*)+0x61>
c001d9f0:	b8 06 00 00 00       	mov    eax,0x6
c001d9f5:	85 d2                	test   edx,edx
c001d9f7:	74 32                	je     c001da2b <ATA::write(unsigned long long, int, void*)+0x61>
c001d9f9:	50                   	push   eax
c001d9fa:	50                   	push   eax
c001d9fb:	6a 01                	push   0x1
c001d9fd:	52                   	push   edx
c001d9fe:	53                   	push   ebx
c001d9ff:	57                   	push   edi
c001da00:	56                   	push   esi
c001da01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da05:	e8 b6 fb ff ff       	call   c001d5c0 <ATA::access(unsigned long long, int, void*, bool)>
c001da0a:	83 c4 20             	add    esp,0x20
c001da0d:	85 c0                	test   eax,eax
c001da0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da13:	75 11                	jne    c001da26 <ATA::write(unsigned long long, int, void*)+0x5c>
c001da15:	01 1d 00 65 02 c0    	add    DWORD PTR ds:0xc0026500,ebx
c001da1b:	e8 ca f5 fe ff       	call   c000cfea <VgaText::updateDiskUsage()>
c001da20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da24:	eb 05                	jmp    c001da2b <ATA::write(unsigned long long, int, void*)+0x61>
c001da26:	b8 01 00 00 00       	mov    eax,0x1
c001da2b:	83 c4 10             	add    esp,0x10
c001da2e:	5b                   	pop    ebx
c001da2f:	5e                   	pop    esi
c001da30:	5f                   	pop    edi
c001da31:	c3                   	ret    

c001da32 <ATA::detectCHS()>:
c001da32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da36:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da3c:	c1 e0 06             	shl    eax,0x6
c001da3f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da45:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da4f:	c7 44 24 04 93 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023793
c001da57:	e9 cc 7f ff ff       	jmp    c0015a28 <Krnl::panic(char const*)>

c001da5c <ATA::open(int, int, void*)>:
c001da5c:	53                   	push   ebx
c001da5d:	83 ec 08             	sub    esp,0x8
c001da60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da6c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da72:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da78:	c1 e0 06             	shl    eax,0x6
c001da7b:	01 d0                	add    eax,edx
c001da7d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001da84:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001da8a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001da91:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001da9b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001daa1:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001daa8:	75 0c                	jne    c001dab6 <ATA::open(int, int, void*)+0x5a>
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	53                   	push   ebx
c001daae:	e8 7f ff ff ff       	call   c001da32 <ATA::detectCHS()>
c001dab3:	83 c4 10             	add    esp,0x10
c001dab6:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dabc:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dac2:	c1 e0 06             	shl    eax,0x6
c001dac5:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dacc:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dad6:	d1 e8                	shr    eax,1
c001dad8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dade:	6a 04                	push   0x4
c001dae0:	6a 0c                	push   0xc
c001dae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dae9:	50                   	push   eax
c001daea:	52                   	push   edx
c001daeb:	e8 bc ed ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daf0:	90                   	nop
c001daf1:	90                   	nop
c001daf2:	6a 00                	push   0x0
c001daf4:	6a 0c                	push   0xc
c001daf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dafd:	50                   	push   eax
c001dafe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db04:	e8 a3 ed ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db09:	83 c4 14             	add    esp,0x14
c001db0c:	53                   	push   ebx
c001db0d:	e8 84 2f ff ff       	call   c0010a96 <PhysicalDisk::startCache()>
c001db12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db15:	e8 3e 4f ff ff       	call   c0012a58 <createPartitionsForDisk(PhysicalDisk*)>
c001db1a:	83 c4 18             	add    esp,0x18
c001db1d:	31 c0                	xor    eax,eax
c001db1f:	5b                   	pop    ebx
c001db20:	c3                   	ret    
c001db21:	90                   	nop

c001db22 <ATAPI::write(unsigned long long, int, void*)>:
c001db22:	b8 03 00 00 00       	mov    eax,0x3
c001db27:	c3                   	ret    

c001db28 <ATAPI::close(int, int, void*)>:
c001db28:	83 ec 0c             	sub    esp,0xc
c001db2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db35:	85 c0                	test   eax,eax
c001db37:	74 0c                	je     c001db45 <ATAPI::close(int, int, void*)+0x1d>
c001db39:	83 ec 0c             	sub    esp,0xc
c001db3c:	8b 10                	mov    edx,DWORD PTR [eax]
c001db3e:	50                   	push   eax
c001db3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db42:	83 c4 10             	add    esp,0x10
c001db45:	31 c0                	xor    eax,eax
c001db47:	83 c4 0c             	add    esp,0xc
c001db4a:	c3                   	ret    
c001db4b:	90                   	nop

c001db4c <ATAPI::ATAPI()>:
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db53:	83 ec 04             	sub    esp,0x4
c001db56:	68 00 08 00 00       	push   0x800
c001db5b:	68 dc 37 02 c0       	push   0xc00237dc
c001db60:	50                   	push   eax
c001db61:	e8 c8 2e ff ff       	call   c0010a2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c001db6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db72:	89 10                	mov    DWORD PTR [eax],edx
c001db74:	90                   	nop
c001db75:	83 c4 0c             	add    esp,0xc
c001db78:	c3                   	ret    
c001db79:	90                   	nop

c001db7a <ATAPI::readyForCommand()>:
c001db7a:	56                   	push   esi
c001db7b:	53                   	push   ebx
c001db7c:	31 db                	xor    ebx,ebx
c001db7e:	50                   	push   eax
c001db7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db83:	50                   	push   eax
c001db84:	6a 0c                	push   0xc
c001db86:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001db8d:	50                   	push   eax
c001db8e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001db94:	e8 d3 ed ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001db99:	83 c4 10             	add    esp,0x10
c001db9c:	a8 88                	test   al,0x88
c001db9e:	74 23                	je     c001dbc3 <ATAPI::readyForCommand()+0x49>
c001dba0:	43                   	inc    ebx
c001dba1:	83 fb 63             	cmp    ebx,0x63
c001dba4:	7e dd                	jle    c001db83 <ATAPI::readyForCommand()+0x9>
c001dba6:	51                   	push   ecx
c001dba7:	51                   	push   ecx
c001dba8:	6a 00                	push   0x0
c001dbaa:	68 40 42 0f 00       	push   0xf4240
c001dbaf:	e8 db b3 ff ff       	call   c0018f8f <nanoSleep(unsigned long long)>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbbd:	75 c4                	jne    c001db83 <ATAPI::readyForCommand()+0x9>
c001dbbf:	31 c0                	xor    eax,eax
c001dbc1:	eb 02                	jmp    c001dbc5 <ATAPI::readyForCommand()+0x4b>
c001dbc3:	b0 01                	mov    al,0x1
c001dbc5:	5a                   	pop    edx
c001dbc6:	5b                   	pop    ebx
c001dbc7:	5e                   	pop    esi
c001dbc8:	c3                   	ret    
c001dbc9:	90                   	nop

c001dbca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbca:	55                   	push   ebp
c001dbcb:	57                   	push   edi
c001dbcc:	56                   	push   esi
c001dbcd:	53                   	push   ebx
c001dbce:	83 ec 20             	sub    esp,0x20
c001dbd1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbd5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbdd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dbe1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dbe5:	6a 01                	push   0x1
c001dbe7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbee:	50                   	push   eax
c001dbef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbf5:	e8 c4 ee ff ff       	call   c001cabe <IDE::enableIRQs(unsigned char, bool)>
c001dbfa:	5e                   	pop    esi
c001dbfb:	58                   	pop    eax
c001dbfc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc03:	50                   	push   eax
c001dc04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc0a:	e8 77 ec ff ff       	call   c001c886 <IDE::prepareInterrupt(unsigned char)>
c001dc0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc12:	e8 63 ff ff ff       	call   c001db7a <ATAPI::readyForCommand()>
c001dc17:	83 c4 10             	add    esp,0x10
c001dc1a:	84 c0                	test   al,al
c001dc1c:	75 0a                	jne    c001dc28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc1e:	bb 01 00 00 00       	mov    ebx,0x1
c001dc23:	e9 57 02 00 00       	jmp    c001de7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc28:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc2e:	c1 e0 04             	shl    eax,0x4
c001dc31:	0f b6 c0             	movzx  eax,al
c001dc34:	50                   	push   eax
c001dc35:	6a 06                	push   0x6
c001dc37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc3e:	50                   	push   eax
c001dc3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc45:	e8 62 ec ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc4a:	6a 00                	push   0x0
c001dc4c:	6a 01                	push   0x1
c001dc4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc55:	50                   	push   eax
c001dc56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc5c:	e8 4b ec ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc61:	83 c4 20             	add    esp,0x20
c001dc64:	0f b6 c3             	movzx  eax,bl
c001dc67:	50                   	push   eax
c001dc68:	6a 04                	push   0x4
c001dc6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc71:	50                   	push   eax
c001dc72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc78:	0f b6 df             	movzx  ebx,bh
c001dc7b:	e8 2c ec ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc80:	53                   	push   ebx
c001dc81:	6a 05                	push   0x5
c001dc83:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc8a:	50                   	push   eax
c001dc8b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc91:	e8 16 ec ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc96:	83 c4 20             	add    esp,0x20
c001dc99:	68 a0 00 00 00       	push   0xa0
c001dc9e:	6a 07                	push   0x7
c001dca0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dca7:	50                   	push   eax
c001dca8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcae:	e8 f9 eb ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcb3:	83 c4 0c             	add    esp,0xc
c001dcb6:	6a 01                	push   0x1
c001dcb8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcbf:	50                   	push   eax
c001dcc0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcc6:	e8 97 f7 ff ff       	call   c001d462 <IDE::polling(unsigned char, unsigned int)>
c001dccb:	83 c4 10             	add    esp,0x10
c001dcce:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcd4:	84 c0                	test   al,al
c001dcd6:	74 23                	je     c001dcfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dcd8:	0f b6 d8             	movzx  ebx,al
c001dcdb:	53                   	push   ebx
c001dcdc:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dce3:	0f b6 d2             	movzx  edx,dl
c001dce6:	50                   	push   eax
c001dce7:	52                   	push   edx
c001dce8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcee:	e8 d9 f5 ff ff       	call   c001d2cc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dcf3:	83 c4 10             	add    esp,0x10
c001dcf6:	e9 84 01 00 00       	jmp    c001de7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dcfb:	53                   	push   ebx
c001dcfc:	53                   	push   ebx
c001dcfd:	0f b6 d2             	movzx  edx,dl
c001dd00:	52                   	push   edx
c001dd01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd07:	e8 8e eb ff ff       	call   c001c89a <IDE::getBase(unsigned char)>
c001dd0c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd10:	b9 06 00 00 00       	mov    ecx,0x6
c001dd15:	89 c2                	mov    edx,eax
c001dd17:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd1a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd27:	85 db                	test   ebx,ebx
c001dd29:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd30:	0f 84 ec 00 00 00    	je     c001de22 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd36:	51                   	push   ecx
c001dd37:	51                   	push   ecx
c001dd38:	52                   	push   edx
c001dd39:	50                   	push   eax
c001dd3a:	e8 db ec ff ff       	call   c001ca1a <IDE::waitInterrupt(unsigned char)>
c001dd3f:	83 c4 10             	add    esp,0x10
c001dd42:	84 c0                	test   al,al
c001dd44:	0f 84 d4 fe ff ff    	je     c001dc1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd4a:	56                   	push   esi
c001dd4b:	56                   	push   esi
c001dd4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd53:	50                   	push   eax
c001dd54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd5a:	e8 27 eb ff ff       	call   c001c886 <IDE::prepareInterrupt(unsigned char)>
c001dd5f:	83 c4 0c             	add    esp,0xc
c001dd62:	6a 04                	push   0x4
c001dd64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd6b:	50                   	push   eax
c001dd6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd72:	e8 f5 eb ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001dd77:	83 c4 0c             	add    esp,0xc
c001dd7a:	6a 05                	push   0x5
c001dd7c:	89 c6                	mov    esi,eax
c001dd7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd85:	50                   	push   eax
c001dd86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd8c:	e8 db eb ff ff       	call   c001c96c <IDE::read(unsigned char, unsigned char)>
c001dd91:	89 f1                	mov    ecx,esi
c001dd93:	0f b6 c0             	movzx  eax,al
c001dd96:	c1 e0 08             	shl    eax,0x8
c001dd99:	0f b6 f1             	movzx  esi,cl
c001dd9c:	09 c6                	or     esi,eax
c001dd9e:	d1 fe                	sar    esi,1
c001dda0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddac:	74 41                	je     c001ddef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddae:	31 c9                	xor    ecx,ecx
c001ddb0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddb6:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddba:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddc1:	75 0a                	jne    c001ddcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ddc3:	01 c9                	add    ecx,ecx
c001ddc5:	01 cd                	add    ebp,ecx
c001ddc7:	4b                   	dec    ebx
c001ddc8:	e9 54 ff ff ff       	jmp    c001dd21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ddcd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddd6:	51                   	push   ecx
c001ddd7:	51                   	push   ecx
c001ddd8:	52                   	push   edx
c001ddd9:	50                   	push   eax
c001ddda:	e8 bb ea ff ff       	call   c001c89a <IDE::getBase(unsigned char)>
c001dddf:	89 c2                	mov    edx,eax
c001dde1:	89 f0                	mov    eax,esi
c001dde3:	66 ef                	out    dx,ax
c001dde5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dde9:	83 c4 10             	add    esp,0x10
c001ddec:	41                   	inc    ecx
c001dded:	eb c1                	jmp    c001ddb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ddef:	31 f6                	xor    esi,esi
c001ddf1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddf7:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ddfb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de02:	75 06                	jne    c001de0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de04:	01 f6                	add    esi,esi
c001de06:	01 f5                	add    ebp,esi
c001de08:	eb bd                	jmp    c001ddc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de0a:	51                   	push   ecx
c001de0b:	51                   	push   ecx
c001de0c:	52                   	push   edx
c001de0d:	50                   	push   eax
c001de0e:	e8 87 ea ff ff       	call   c001c89a <IDE::getBase(unsigned char)>
c001de13:	89 c2                	mov    edx,eax
c001de15:	66 ed                	in     ax,dx
c001de17:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de1c:	83 c4 10             	add    esp,0x10
c001de1f:	46                   	inc    esi
c001de20:	eb cf                	jmp    c001ddf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de22:	51                   	push   ecx
c001de23:	51                   	push   ecx
c001de24:	52                   	push   edx
c001de25:	50                   	push   eax
c001de26:	e8 ef eb ff ff       	call   c001ca1a <IDE::waitInterrupt(unsigned char)>
c001de2b:	83 c4 10             	add    esp,0x10
c001de2e:	84 c0                	test   al,al
c001de30:	0f 84 e8 fd ff ff    	je     c001dc1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de36:	52                   	push   edx
c001de37:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de3c:	52                   	push   edx
c001de3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de44:	50                   	push   eax
c001de45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de4b:	e8 36 ea ff ff       	call   c001c886 <IDE::prepareInterrupt(unsigned char)>
c001de50:	83 c4 10             	add    esp,0x10
c001de53:	50                   	push   eax
c001de54:	50                   	push   eax
c001de55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de5c:	50                   	push   eax
c001de5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de63:	e8 32 ea ff ff       	call   c001c89a <IDE::getBase(unsigned char)>
c001de68:	8d 50 07             	lea    edx,[eax+0x7]
c001de6b:	ec                   	in     al,dx
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	a8 88                	test   al,0x88
c001de71:	74 0a                	je     c001de7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de73:	4b                   	dec    ebx
c001de74:	75 dd                	jne    c001de53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de76:	bb 02 00 00 00       	mov    ebx,0x2
c001de7b:	eb 02                	jmp    c001de7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de7d:	31 db                	xor    ebx,ebx
c001de7f:	83 c4 1c             	add    esp,0x1c
c001de82:	89 d8                	mov    eax,ebx
c001de84:	5b                   	pop    ebx
c001de85:	5e                   	pop    esi
c001de86:	5f                   	pop    edi
c001de87:	5d                   	pop    ebp
c001de88:	c3                   	ret    
c001de89:	90                   	nop

c001de8a <ATAPI::diskRemoved()>:
c001de8a:	83 ec 18             	sub    esp,0x18
c001de8d:	68 e7 37 02 c0       	push   0xc00237e7
c001de92:	e8 7c 13 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001de97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de9b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dea2:	83 c4 1c             	add    esp,0x1c
c001dea5:	c3                   	ret    

c001dea6 <ATAPI::eject()>:
c001dea6:	57                   	push   edi
c001dea7:	b9 03 00 00 00       	mov    ecx,0x3
c001deac:	53                   	push   ebx
c001dead:	83 ec 14             	sub    esp,0x14
c001deb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001deb4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001deb8:	fc                   	cld    
c001deb9:	31 c0                	xor    eax,eax
c001debb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001debd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dec2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dec7:	50                   	push   eax
c001dec8:	50                   	push   eax
c001dec9:	6a 00                	push   0x0
c001decb:	6a 00                	push   0x0
c001decd:	6a 00                	push   0x0
c001decf:	6a 02                	push   0x2
c001ded1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ded5:	50                   	push   eax
c001ded6:	53                   	push   ebx
c001ded7:	e8 ee fc ff ff       	call   c001dbca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dedc:	83 c4 14             	add    esp,0x14
c001dedf:	53                   	push   ebx
c001dee0:	e8 a5 ff ff ff       	call   c001de8a <ATAPI::diskRemoved()>
c001dee5:	83 c4 24             	add    esp,0x24
c001dee8:	5b                   	pop    ebx
c001dee9:	5f                   	pop    edi
c001deea:	c3                   	ret    
c001deeb:	90                   	nop

c001deec <ATAPI::diskInserted()>:
c001deec:	53                   	push   ebx
c001deed:	83 ec 14             	sub    esp,0x14
c001def0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001def4:	68 fd 37 02 c0       	push   0xc00237fd
c001def9:	e8 15 13 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001defe:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df08:	e8 89 2b ff ff       	call   c0010a96 <PhysicalDisk::startCache()>
c001df0d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df11:	83 c4 18             	add    esp,0x18
c001df14:	5b                   	pop    ebx
c001df15:	e9 3e 4b ff ff       	jmp    c0012a58 <createPartitionsForDisk(PhysicalDisk*)>

c001df1a <ATAPI::detectMedia()>:
c001df1a:	56                   	push   esi
c001df1b:	53                   	push   ebx
c001df1c:	83 ec 28             	sub    esp,0x28
c001df1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df23:	6a 0c                	push   0xc
c001df25:	6a 00                	push   0x0
c001df27:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df2b:	56                   	push   esi
c001df2c:	e8 92 27 fe ff       	call   c00006c3 <memset>
c001df31:	58                   	pop    eax
c001df32:	5a                   	pop    edx
c001df33:	6a 00                	push   0x0
c001df35:	6a 00                	push   0x0
c001df37:	6a 00                	push   0x0
c001df39:	6a 00                	push   0x0
c001df3b:	56                   	push   esi
c001df3c:	53                   	push   ebx
c001df3d:	e8 88 fc ff ff       	call   c001dbca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df42:	83 c4 1c             	add    esp,0x1c
c001df45:	6a 0c                	push   0xc
c001df47:	6a 00                	push   0x0
c001df49:	56                   	push   esi
c001df4a:	e8 74 27 fe ff       	call   c00006c3 <memset>
c001df4f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df54:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df59:	59                   	pop    ecx
c001df5a:	58                   	pop    eax
c001df5b:	6a 01                	push   0x1
c001df5d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df61:	50                   	push   eax
c001df62:	6a 00                	push   0x0
c001df64:	6a 12                	push   0x12
c001df66:	56                   	push   esi
c001df67:	53                   	push   ebx
c001df68:	e8 5d fc ff ff       	call   c001dbca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df6d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df71:	83 c4 20             	add    esp,0x20
c001df74:	83 e0 7f             	and    eax,0x7f
c001df77:	3c 70                	cmp    al,0x70
c001df79:	74 15                	je     c001df90 <ATAPI::detectMedia()+0x76>
c001df7b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df82:	75 0c                	jne    c001df90 <ATAPI::detectMedia()+0x76>
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	53                   	push   ebx
c001df88:	e8 5f ff ff ff       	call   c001deec <ATAPI::diskInserted()>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001df94:	83 e0 0f             	and    eax,0xf
c001df97:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001df9c:	75 18                	jne    c001dfb6 <ATAPI::detectMedia()+0x9c>
c001df9e:	3c 02                	cmp    al,0x2
c001dfa0:	75 14                	jne    c001dfb6 <ATAPI::detectMedia()+0x9c>
c001dfa2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfa9:	74 24                	je     c001dfcf <ATAPI::detectMedia()+0xb5>
c001dfab:	83 ec 0c             	sub    esp,0xc
c001dfae:	53                   	push   ebx
c001dfaf:	e8 d6 fe ff ff       	call   c001de8a <ATAPI::diskRemoved()>
c001dfb4:	eb 16                	jmp    c001dfcc <ATAPI::detectMedia()+0xb2>
c001dfb6:	84 c0                	test   al,al
c001dfb8:	75 15                	jne    c001dfcf <ATAPI::detectMedia()+0xb5>
c001dfba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfc1:	75 0c                	jne    c001dfcf <ATAPI::detectMedia()+0xb5>
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	53                   	push   ebx
c001dfc7:	e8 20 ff ff ff       	call   c001deec <ATAPI::diskInserted()>
c001dfcc:	83 c4 10             	add    esp,0x10
c001dfcf:	83 c4 24             	add    esp,0x24
c001dfd2:	5b                   	pop    ebx
c001dfd3:	5e                   	pop    esi
c001dfd4:	c3                   	ret    
c001dfd5:	90                   	nop

c001dfd6 <ATAPI::open(int, int, void*)>:
c001dfd6:	53                   	push   ebx
c001dfd7:	83 ec 08             	sub    esp,0x8
c001dfda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dfde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dfe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfe6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dfec:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dff2:	c1 e0 06             	shl    eax,0x6
c001dff5:	01 d0                	add    eax,edx
c001dff7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dffe:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e004:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e00b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e015:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e01b:	6a 04                	push   0x4
c001e01d:	6a 0c                	push   0xc
c001e01f:	51                   	push   ecx
c001e020:	52                   	push   edx
c001e021:	e8 86 e8 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e026:	90                   	nop
c001e027:	90                   	nop
c001e028:	6a 00                	push   0x0
c001e02a:	6a 0c                	push   0xc
c001e02c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e033:	50                   	push   eax
c001e034:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e03a:	e8 6d e8 ff ff       	call   c001c8ac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e03f:	83 c4 14             	add    esp,0x14
c001e042:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e049:	53                   	push   ebx
c001e04a:	e8 cb fe ff ff       	call   c001df1a <ATAPI::detectMedia()>
c001e04f:	83 c4 18             	add    esp,0x18
c001e052:	31 c0                	xor    eax,eax
c001e054:	5b                   	pop    ebx
c001e055:	c3                   	ret    

c001e056 <ATAPI::read(unsigned long long, int, void*)>:
c001e056:	55                   	push   ebp
c001e057:	57                   	push   edi
c001e058:	56                   	push   esi
c001e059:	53                   	push   ebx
c001e05a:	83 ec 1c             	sub    esp,0x1c
c001e05d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e061:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e065:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e069:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e070:	74 3c                	je     c001e0ae <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e072:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e076:	b9 03 00 00 00       	mov    ecx,0x3
c001e07b:	fc                   	cld    
c001e07c:	31 c0                	xor    eax,eax
c001e07e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e080:	0f ce                	bswap  esi
c001e082:	89 e8                	mov    eax,ebp
c001e084:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e089:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e08d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e091:	50                   	push   eax
c001e092:	50                   	push   eax
c001e093:	55                   	push   ebp
c001e094:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e098:	c1 e5 0b             	shl    ebp,0xb
c001e09b:	6a 00                	push   0x0
c001e09d:	55                   	push   ebp
c001e09e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0a2:	50                   	push   eax
c001e0a3:	53                   	push   ebx
c001e0a4:	e8 21 fb ff ff       	call   c001dbca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0a9:	83 c4 20             	add    esp,0x20
c001e0ac:	eb 1a                	jmp    c001e0c8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0ae:	83 ec 0c             	sub    esp,0xc
c001e0b1:	53                   	push   ebx
c001e0b2:	e8 63 fe ff ff       	call   c001df1a <ATAPI::detectMedia()>
c001e0b7:	83 c4 10             	add    esp,0x10
c001e0ba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0c1:	75 af                	jne    c001e072 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0c3:	b8 02 00 00 00       	mov    eax,0x2
c001e0c8:	83 c4 1c             	add    esp,0x1c
c001e0cb:	5b                   	pop    ebx
c001e0cc:	5e                   	pop    esi
c001e0cd:	5f                   	pop    edi
c001e0ce:	5d                   	pop    ebp
c001e0cf:	c3                   	ret    

c001e0d0 <AVX::open(int, int, void*)>:
c001e0d0:	83 ec 0c             	sub    esp,0xc
c001e0d3:	e8 90 10 00 00       	call   c001f168 <avxInit>
c001e0d8:	b8 00 00 00 00       	mov    eax,0x0
c001e0dd:	83 c4 0c             	add    esp,0xc
c001e0e0:	c3                   	ret    
c001e0e1:	90                   	nop

c001e0e2 <AVX::close(int, int, void*)>:
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	e8 7f 10 00 00       	call   c001f169 <avxClose>
c001e0ea:	b8 00 00 00 00       	mov    eax,0x0
c001e0ef:	83 c4 0c             	add    esp,0xc
c001e0f2:	c3                   	ret    
c001e0f3:	90                   	nop

c001e0f4 <AVX::available()>:
c001e0f4:	83 ec 0c             	sub    esp,0xc
c001e0f7:	e8 64 10 00 00       	call   c001f160 <avxDetect>
c001e0fc:	85 c0                	test   eax,eax
c001e0fe:	0f 95 c0             	setne  al
c001e101:	83 c4 0c             	add    esp,0xc
c001e104:	c3                   	ret    
c001e105:	90                   	nop

c001e106 <AVX::save(void*)>:
c001e106:	83 ec 0c             	sub    esp,0xc
c001e109:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e10d:	83 ec 0c             	sub    esp,0xc
c001e110:	50                   	push   eax
c001e111:	e8 50 10 00 00       	call   c001f166 <avxSave>
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	90                   	nop
c001e11a:	83 c4 0c             	add    esp,0xc
c001e11d:	c3                   	ret    

c001e11e <AVX::load(void*)>:
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e125:	83 ec 0c             	sub    esp,0xc
c001e128:	50                   	push   eax
c001e129:	e8 39 10 00 00       	call   c001f167 <avxLoad>
c001e12e:	83 c4 10             	add    esp,0x10
c001e131:	90                   	nop
c001e132:	83 c4 0c             	add    esp,0xc
c001e135:	c3                   	ret    

c001e136 <AVX::AVX()>:
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13d:	83 ec 08             	sub    esp,0x8
c001e140:	68 48 38 02 c0       	push   0xc0023848
c001e145:	50                   	push   eax
c001e146:	e8 c1 29 ff ff       	call   c0010b0c <FPU::FPU(char const*)>
c001e14b:	83 c4 10             	add    esp,0x10
c001e14e:	ba 58 38 02 c0       	mov    edx,0xc0023858
c001e153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e157:	89 10                	mov    DWORD PTR [eax],edx
c001e159:	90                   	nop
c001e15a:	83 c4 0c             	add    esp,0xc
c001e15d:	c3                   	ret    

c001e15e <MMX::available()>:
c001e15e:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c001e163:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e169:	83 e0 20             	and    eax,0x20
c001e16c:	84 c0                	test   al,al
c001e16e:	0f 95 c0             	setne  al
c001e171:	c3                   	ret    

c001e172 <MMX::open(int, int, void*)>:
c001e172:	83 ec 0c             	sub    esp,0xc
c001e175:	e8 62 10 00 00       	call   c001f1dc <x87Init>
c001e17a:	b8 00 00 00 00       	mov    eax,0x0
c001e17f:	83 c4 0c             	add    esp,0xc
c001e182:	c3                   	ret    
c001e183:	90                   	nop

c001e184 <MMX::close(int, int, void*)>:
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	e8 6a 10 00 00       	call   c001f1f6 <x87Close>
c001e18c:	b8 00 00 00 00       	mov    eax,0x0
c001e191:	83 c4 0c             	add    esp,0xc
c001e194:	c3                   	ret    
c001e195:	90                   	nop

c001e196 <MMX::save(void*)>:
c001e196:	83 ec 0c             	sub    esp,0xc
c001e199:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e19d:	83 ec 0c             	sub    esp,0xc
c001e1a0:	50                   	push   eax
c001e1a1:	e8 2b 10 00 00       	call   c001f1d1 <x87Save>
c001e1a6:	83 c4 10             	add    esp,0x10
c001e1a9:	90                   	nop
c001e1aa:	83 c4 0c             	add    esp,0xc
c001e1ad:	c3                   	ret    

c001e1ae <MMX::load(void*)>:
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1b5:	83 ec 0c             	sub    esp,0xc
c001e1b8:	50                   	push   eax
c001e1b9:	e8 19 10 00 00       	call   c001f1d7 <x87Load>
c001e1be:	83 c4 10             	add    esp,0x10
c001e1c1:	90                   	nop
c001e1c2:	83 c4 0c             	add    esp,0xc
c001e1c5:	c3                   	ret    

c001e1c6 <MMX::MMX()>:
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cd:	83 ec 08             	sub    esp,0x8
c001e1d0:	68 88 38 02 c0       	push   0xc0023888
c001e1d5:	50                   	push   eax
c001e1d6:	e8 31 29 ff ff       	call   c0010b0c <FPU::FPU(char const*)>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	ba 98 38 02 c0       	mov    edx,0xc0023898
c001e1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e7:	89 10                	mov    DWORD PTR [eax],edx
c001e1e9:	90                   	nop
c001e1ea:	83 c4 0c             	add    esp,0xc
c001e1ed:	c3                   	ret    

c001e1ee <SSE::open(int, int, void*)>:
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	e8 a1 0f 00 00       	call   c001f197 <sseInit>
c001e1f6:	b8 00 00 00 00       	mov    eax,0x0
c001e1fb:	83 c4 0c             	add    esp,0xc
c001e1fe:	c3                   	ret    
c001e1ff:	90                   	nop

c001e200 <SSE::close(int, int, void*)>:
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	e8 9f 0f 00 00       	call   c001f1a7 <sseClose>
c001e208:	b8 00 00 00 00       	mov    eax,0x0
c001e20d:	83 c4 0c             	add    esp,0xc
c001e210:	c3                   	ret    
c001e211:	90                   	nop

c001e212 <SSE::available()>:
c001e212:	83 ec 1c             	sub    esp,0x1c
c001e215:	e8 56 0f 00 00       	call   c001f170 <sseDetect>
c001e21a:	85 c0                	test   eax,eax
c001e21c:	0f 95 c0             	setne  al
c001e21f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e223:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e227:	83 c4 1c             	add    esp,0x1c
c001e22a:	c3                   	ret    
c001e22b:	90                   	nop

c001e22c <SSE::save(void*)>:
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	50                   	push   eax
c001e237:	e8 4f 0f 00 00       	call   c001f18b <sseSave>
c001e23c:	83 c4 10             	add    esp,0x10
c001e23f:	90                   	nop
c001e240:	83 c4 0c             	add    esp,0xc
c001e243:	c3                   	ret    

c001e244 <SSE::load(void*)>:
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	50                   	push   eax
c001e24f:	e8 3d 0f 00 00       	call   c001f191 <sseLoad>
c001e254:	83 c4 10             	add    esp,0x10
c001e257:	90                   	nop
c001e258:	83 c4 0c             	add    esp,0xc
c001e25b:	c3                   	ret    

c001e25c <SSE::SSE()>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e263:	83 ec 08             	sub    esp,0x8
c001e266:	68 c8 38 02 c0       	push   0xc00238c8
c001e26b:	50                   	push   eax
c001e26c:	e8 9b 28 ff ff       	call   c0010b0c <FPU::FPU(char const*)>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	ba d8 38 02 c0       	mov    edx,0xc00238d8
c001e279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27d:	89 10                	mov    DWORD PTR [eax],edx
c001e27f:	90                   	nop
c001e280:	83 c4 0c             	add    esp,0xc
c001e283:	c3                   	ret    

c001e284 <x87::open(int, int, void*)>:
c001e284:	83 ec 0c             	sub    esp,0xc
c001e287:	e8 50 0f 00 00       	call   c001f1dc <x87Init>
c001e28c:	b8 00 00 00 00       	mov    eax,0x0
c001e291:	83 c4 0c             	add    esp,0xc
c001e294:	c3                   	ret    
c001e295:	90                   	nop

c001e296 <x87::close(int, int, void*)>:
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	e8 58 0f 00 00       	call   c001f1f6 <x87Close>
c001e29e:	b8 00 00 00 00       	mov    eax,0x0
c001e2a3:	83 c4 0c             	add    esp,0xc
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop

c001e2a8 <x87::available()>:
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	e8 06 0f 00 00       	call   c001f1b6 <x87Detect>
c001e2b0:	85 c0                	test   eax,eax
c001e2b2:	0f 95 c0             	setne  al
c001e2b5:	83 c4 0c             	add    esp,0xc
c001e2b8:	c3                   	ret    
c001e2b9:	90                   	nop

c001e2ba <x87::save(void*)>:
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	50                   	push   eax
c001e2c5:	e8 07 0f 00 00       	call   c001f1d1 <x87Save>
c001e2ca:	83 c4 10             	add    esp,0x10
c001e2cd:	90                   	nop
c001e2ce:	83 c4 0c             	add    esp,0xc
c001e2d1:	c3                   	ret    

c001e2d2 <x87::load(void*)>:
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2d9:	83 ec 0c             	sub    esp,0xc
c001e2dc:	50                   	push   eax
c001e2dd:	e8 f5 0e 00 00       	call   c001f1d7 <x87Load>
c001e2e2:	83 c4 10             	add    esp,0x10
c001e2e5:	90                   	nop
c001e2e6:	83 c4 0c             	add    esp,0xc
c001e2e9:	c3                   	ret    

c001e2ea <x87::x87()>:
c001e2ea:	83 ec 0c             	sub    esp,0xc
c001e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f1:	83 ec 08             	sub    esp,0x8
c001e2f4:	68 08 39 02 c0       	push   0xc0023908
c001e2f9:	50                   	push   eax
c001e2fa:	e8 0d 28 ff ff       	call   c0010b0c <FPU::FPU(char const*)>
c001e2ff:	83 c4 10             	add    esp,0x10
c001e302:	ba 18 39 02 c0       	mov    edx,0xc0023918
c001e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30b:	89 10                	mov    DWORD PTR [eax],edx
c001e30d:	90                   	nop
c001e30e:	83 c4 0c             	add    esp,0xc
c001e311:	c3                   	ret    

c001e312 <APIC::disable()>:
c001e312:	90                   	nop
c001e313:	c3                   	ret    

c001e314 <APIC::close(int, int, void*)>:
c001e314:	55                   	push   ebp
c001e315:	89 e5                	mov    ebp,esp
c001e317:	83 ec 08             	sub    esp,0x8
c001e31a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e31d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e31f:	83 c0 3c             	add    eax,0x3c
c001e322:	8b 00                	mov    eax,DWORD PTR [eax]
c001e324:	83 ec 0c             	sub    esp,0xc
c001e327:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e32a:	ff d0                	call   eax
c001e32c:	83 c4 10             	add    esp,0x10
c001e32f:	b8 00 00 00 00       	mov    eax,0x0
c001e334:	c9                   	leave  
c001e335:	c3                   	ret    

c001e336 <IOAPIC::close(int, int, void*)>:
c001e336:	b8 00 00 00 00       	mov    eax,0x0
c001e33b:	c3                   	ret    

c001e33c <APIC::io_wait()>:
c001e33c:	eb 00                	jmp    c001e33e <APIC::io_wait()+0x2>
c001e33e:	eb 00                	jmp    c001e340 <APIC::io_wait()+0x4>
c001e340:	90                   	nop
c001e341:	c3                   	ret    

c001e342 <APIC::getBase()>:
c001e342:	55                   	push   ebp
c001e343:	89 e5                	mov    ebp,esp
c001e345:	83 ec 18             	sub    esp,0x18
c001e348:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c001e34d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e353:	83 e0 08             	and    eax,0x8
c001e356:	84 c0                	test   al,al
c001e358:	75 07                	jne    c001e361 <APIC::getBase()+0x1f>
c001e35a:	b8 00 00 00 00       	mov    eax,0x0
c001e35f:	eb 21                	jmp    c001e382 <APIC::getBase()+0x40>
c001e361:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c001e366:	83 ec 08             	sub    esp,0x8
c001e369:	6a 1b                	push   0x1b
c001e36b:	50                   	push   eax
c001e36c:	e8 0d d2 fe ff       	call   c000b57e <Computer::rdmsr(unsigned int)>
c001e371:	83 c4 10             	add    esp,0x10
c001e374:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e377:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e37a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e37d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e382:	c9                   	leave  
c001e383:	c3                   	ret    

c001e384 <APIC::eoi(unsigned char)>:
c001e384:	55                   	push   ebp
c001e385:	89 e5                	mov    ebp,esp
c001e387:	83 ec 28             	sub    esp,0x28
c001e38a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e38d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e390:	83 ec 0c             	sub    esp,0xc
c001e393:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e396:	e8 a7 ff ff ff       	call   c001e342 <APIC::getBase()>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	05 b0 00 00 00       	add    eax,0xb0
c001e3a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3a9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3af:	90                   	nop
c001e3b0:	c9                   	leave  
c001e3b1:	c3                   	ret    

c001e3b2 <APIC::open(int, int, void*)>:
c001e3b2:	55                   	push   ebp
c001e3b3:	89 e5                	mov    ebp,esp
c001e3b5:	57                   	push   edi
c001e3b6:	56                   	push   esi
c001e3b7:	53                   	push   ebx
c001e3b8:	83 ec 1c             	sub    esp,0x1c
c001e3bb:	83 ec 0c             	sub    esp,0xc
c001e3be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3c1:	e8 7c ff ff ff       	call   c001e342 <APIC::getBase()>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	05 f0 00 00 00       	add    eax,0xf0
c001e3ce:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3d1:	83 ec 0c             	sub    esp,0xc
c001e3d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3d7:	e8 66 ff ff ff       	call   c001e342 <APIC::getBase()>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	89 c2                	mov    edx,eax
c001e3e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3e4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3ea:	89 c7                	mov    edi,eax
c001e3ec:	81 e7 ff 00 00 00    	and    edi,0xff
c001e3f2:	89 d0                	mov    eax,edx
c001e3f4:	ba 00 00 00 00       	mov    edx,0x0
c001e3f9:	89 c1                	mov    ecx,eax
c001e3fb:	80 e5 ff             	and    ch,0xff
c001e3fe:	89 cb                	mov    ebx,ecx
c001e400:	89 d0                	mov    eax,edx
c001e402:	25 ff 00 00 00       	and    eax,0xff
c001e407:	89 c6                	mov    esi,eax
c001e409:	89 d8                	mov    eax,ebx
c001e40b:	89 f2                	mov    edx,esi
c001e40d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e410:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e413:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e417:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e41b:	83 e0 00             	and    eax,0x0
c001e41e:	09 d0                	or     eax,edx
c001e420:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e427:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e42d:	8d 50 01             	lea    edx,[eax+0x1]
c001e430:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e433:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e439:	31 d2                	xor    edx,edx
c001e43b:	88 c2                	mov    dl,al
c001e43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e440:	83 c2 08             	add    edx,0x8
c001e443:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e447:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e44d:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e453:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e457:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e45a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e45c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e45f:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e466:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e469:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e46c:	89 10                	mov    DWORD PTR [eax],edx
c001e46e:	b8 00 00 00 00       	mov    eax,0x0
c001e473:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e476:	5b                   	pop    ebx
c001e477:	5e                   	pop    esi
c001e478:	5f                   	pop    edi
c001e479:	5d                   	pop    ebp
c001e47a:	c3                   	ret    
c001e47b:	90                   	nop

c001e47c <IOAPIC::IOAPIC()>:
c001e47c:	83 ec 0c             	sub    esp,0xc
c001e47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e483:	83 ec 08             	sub    esp,0x8
c001e486:	68 48 39 02 c0       	push   0xc0023948
c001e48b:	50                   	push   eax
c001e48c:	e8 87 23 ff ff       	call   c0010818 <Device::Device(char const*)>
c001e491:	83 c4 10             	add    esp,0x10
c001e494:	ba 70 3a 02 c0       	mov    edx,0xc0023a70
c001e499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49d:	89 10                	mov    DWORD PTR [eax],edx
c001e49f:	90                   	nop
c001e4a0:	83 c4 0c             	add    esp,0xc
c001e4a3:	c3                   	ret    

c001e4a4 <APIC::APIC()>:
c001e4a4:	53                   	push   ebx
c001e4a5:	83 ec 18             	sub    esp,0x18
c001e4a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4ac:	83 ec 08             	sub    esp,0x8
c001e4af:	68 50 39 02 c0       	push   0xc0023950
c001e4b4:	50                   	push   eax
c001e4b5:	e8 ac 2a ff ff       	call   c0010f66 <InterruptController::InterruptController(char const*)>
c001e4ba:	83 c4 10             	add    esp,0x10
c001e4bd:	ba 28 3a 02 c0       	mov    edx,0xc0023a28
c001e4c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4c6:	89 10                	mov    DWORD PTR [eax],edx
c001e4c8:	a0 60 65 02 c0       	mov    al,ds:0xc0026560
c001e4cd:	83 f0 01             	xor    eax,0x1
c001e4d0:	84 c0                	test   al,al
c001e4d2:	0f 84 a2 00 00 00    	je     c001e57a <APIC::APIC()+0xd6>
c001e4d8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e4dd:	a0 10 50 02 c0       	mov    al,ds:0xc0025010
c001e4e2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e4e6:	0f 83 87 00 00 00    	jae    c001e573 <APIC::APIC()+0xcf>
c001e4ec:	83 ec 0c             	sub    esp,0xc
c001e4ef:	68 68 01 00 00       	push   0x168
c001e4f4:	e8 e5 0b ff ff       	call   c000f0de <operator new(unsigned long)>
c001e4f9:	83 c4 10             	add    esp,0x10
c001e4fc:	89 c3                	mov    ebx,eax
c001e4fe:	83 ec 0c             	sub    esp,0xc
c001e501:	53                   	push   ebx
c001e502:	e8 75 ff ff ff       	call   c001e47c <IOAPIC::IOAPIC()>
c001e507:	83 c4 10             	add    esp,0x10
c001e50a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e50e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e512:	25 ff 00 00 00       	and    eax,0xff
c001e517:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e51b:	89 14 85 40 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ac0],edx
c001e522:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c001e527:	40                   	inc    eax
c001e528:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c001e52d:	a1 68 47 02 c0       	mov    eax,ds:0xc0024768
c001e532:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e538:	83 ec 08             	sub    esp,0x8
c001e53b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e53f:	50                   	push   eax
c001e540:	e8 e3 20 ff ff       	call   c0010628 <Device::addChild(Device*)>
c001e545:	83 c4 10             	add    esp,0x10
c001e548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e54c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e54e:	83 c0 08             	add    eax,0x8
c001e551:	8b 10                	mov    edx,DWORD PTR [eax]
c001e553:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e557:	25 ff 00 00 00       	and    eax,0xff
c001e55c:	6a 00                	push   0x0
c001e55e:	6a 00                	push   0x0
c001e560:	50                   	push   eax
c001e561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e565:	ff d2                	call   edx
c001e567:	83 c4 10             	add    esp,0x10
c001e56a:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e56e:	e9 6a ff ff ff       	jmp    c001e4dd <APIC::APIC()+0x39>
c001e573:	c6 05 60 65 02 c0 01 	mov    BYTE PTR ds:0xc0026560,0x1
c001e57a:	90                   	nop
c001e57b:	83 c4 18             	add    esp,0x18
c001e57e:	5b                   	pop    ebx
c001e57f:	c3                   	ret    

c001e580 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e580:	55                   	push   ebp
c001e581:	89 e5                	mov    ebp,esp
c001e583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e586:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e58c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e58f:	72 1d                	jb     c001e5ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e594:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5a3:	01 d0                	add    eax,edx
c001e5a5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5a8:	73 04                	jae    c001e5ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5aa:	b0 01                	mov    al,0x1
c001e5ac:	eb 02                	jmp    c001e5b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5ae:	b0 00                	mov    al,0x0
c001e5b0:	5d                   	pop    ebp
c001e5b1:	c3                   	ret    

c001e5b2 <IOAPIC::read(int)>:
c001e5b2:	55                   	push   ebp
c001e5b3:	89 e5                	mov    ebp,esp
c001e5b5:	83 ec 10             	sub    esp,0x10
c001e5b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5c1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5c7:	31 d2                	xor    edx,edx
c001e5c9:	88 c2                	mov    dl,al
c001e5cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5ce:	89 10                	mov    DWORD PTR [eax],edx
c001e5d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5d3:	83 c0 10             	add    eax,0x10
c001e5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5d8:	c9                   	leave  
c001e5d9:	c3                   	ret    

c001e5da <IOAPIC::open(int, int, void*)>:
c001e5da:	55                   	push   ebp
c001e5db:	89 e5                	mov    ebp,esp
c001e5dd:	57                   	push   edi
c001e5de:	56                   	push   esi
c001e5df:	53                   	push   ebx
c001e5e0:	83 ec 0c             	sub    esp,0xc
c001e5e3:	83 ec 0c             	sub    esp,0xc
c001e5e6:	68 7b 39 02 c0       	push   0xc002397b
c001e5eb:	e8 23 0c ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001e5f0:	83 c4 10             	add    esp,0x10
c001e5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5f9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e602:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e608:	8b 14 85 40 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafc0]
c001e60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e612:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e621:	8b 14 85 c0 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf40]
c001e628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e634:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e643:	89 c7                	mov    edi,eax
c001e645:	81 e7 ff 00 00 00    	and    edi,0xff
c001e64b:	89 d0                	mov    eax,edx
c001e64d:	ba 00 00 00 00       	mov    edx,0x0
c001e652:	89 c1                	mov    ecx,eax
c001e654:	80 e5 ff             	and    ch,0xff
c001e657:	89 cb                	mov    ebx,ecx
c001e659:	89 d0                	mov    eax,edx
c001e65b:	25 ff 00 00 00       	and    eax,0xff
c001e660:	89 c6                	mov    esi,eax
c001e662:	89 d8                	mov    eax,ebx
c001e664:	89 f2                	mov    edx,esi
c001e666:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e669:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e66c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e670:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e674:	83 e0 00             	and    eax,0x0
c001e677:	09 d0                	or     eax,edx
c001e679:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e680:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e686:	8d 50 01             	lea    edx,[eax+0x1]
c001e689:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e68c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e692:	31 d2                	xor    edx,edx
c001e694:	88 c2                	mov    dl,al
c001e696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e699:	83 c2 08             	add    edx,0x8
c001e69c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6a0:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6a6:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6ac:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6b0:	83 ec 08             	sub    esp,0x8
c001e6b3:	6a 01                	push   0x1
c001e6b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6b8:	e8 f5 fe ff ff       	call   c001e5b2 <IOAPIC::read(int)>
c001e6bd:	83 c4 10             	add    esp,0x10
c001e6c0:	c1 f8 10             	sar    eax,0x10
c001e6c3:	25 ff 00 00 00       	and    eax,0xff
c001e6c8:	8d 50 01             	lea    edx,[eax+0x1]
c001e6cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ce:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6d4:	b8 00 00 00 00       	mov    eax,0x0
c001e6d9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6dc:	5b                   	pop    ebx
c001e6dd:	5e                   	pop    esi
c001e6de:	5f                   	pop    edi
c001e6df:	5d                   	pop    ebp
c001e6e0:	c3                   	ret    
c001e6e1:	90                   	nop

c001e6e2 <IOAPIC::write(int, int)>:
c001e6e2:	55                   	push   ebp
c001e6e3:	89 e5                	mov    ebp,esp
c001e6e5:	83 ec 10             	sub    esp,0x10
c001e6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6f1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6f7:	31 d2                	xor    edx,edx
c001e6f9:	88 c2                	mov    dl,al
c001e6fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6fe:	89 10                	mov    DWORD PTR [eax],edx
c001e700:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e703:	8d 50 10             	lea    edx,[eax+0x10]
c001e706:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e709:	89 02                	mov    DWORD PTR [edx],eax
c001e70b:	90                   	nop
c001e70c:	c9                   	leave  
c001e70d:	c3                   	ret    

c001e70e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e70e:	55                   	push   ebp
c001e70f:	89 e5                	mov    ebp,esp
c001e711:	83 ec 20             	sub    esp,0x20
c001e714:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e717:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e71a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e71d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e720:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e723:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e726:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e729:	88 d0                	mov    al,dl
c001e72b:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e72e:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e731:	25 ff 00 00 00       	and    eax,0xff
c001e736:	83 c0 08             	add    eax,0x8
c001e739:	01 c0                	add    eax,eax
c001e73b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e73e:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e741:	25 ff 00 00 00       	and    eax,0xff
c001e746:	83 c0 08             	add    eax,0x8
c001e749:	01 c0                	add    eax,eax
c001e74b:	40                   	inc    eax
c001e74c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e74f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e752:	50                   	push   eax
c001e753:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e756:	e8 57 fe ff ff       	call   c001e5b2 <IOAPIC::read(int)>
c001e75b:	83 c4 08             	add    esp,0x8
c001e75e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e761:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e768:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e76b:	c1 e0 18             	shl    eax,0x18
c001e76e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e771:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e774:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e777:	52                   	push   edx
c001e778:	50                   	push   eax
c001e779:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e77c:	e8 61 ff ff ff       	call   c001e6e2 <IOAPIC::write(int, int)>
c001e781:	83 c4 0c             	add    esp,0xc
c001e784:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e787:	50                   	push   eax
c001e788:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e78b:	e8 22 fe ff ff       	call   c001e5b2 <IOAPIC::read(int)>
c001e790:	83 c4 08             	add    esp,0x8
c001e793:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e796:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e79d:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7a4:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7ab:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7b2:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7b5:	25 ff 00 00 00       	and    eax,0xff
c001e7ba:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7c0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7c3:	52                   	push   edx
c001e7c4:	50                   	push   eax
c001e7c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7c8:	e8 15 ff ff ff       	call   c001e6e2 <IOAPIC::write(int, int)>
c001e7cd:	83 c4 0c             	add    esp,0xc
c001e7d0:	90                   	nop
c001e7d1:	c9                   	leave  
c001e7d2:	c3                   	ret    
c001e7d3:	90                   	nop

c001e7d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7d4:	55                   	push   ebp
c001e7d5:	89 e5                	mov    ebp,esp
c001e7d7:	56                   	push   esi
c001e7d8:	53                   	push   ebx
c001e7d9:	83 ec 20             	sub    esp,0x20
c001e7dc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7df:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7e2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e7e6:	74 2a                	je     c001e812 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e7e8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e7ec:	7f 14                	jg     c001e802 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e7ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7f1:	05 c0 3e 02 c0       	add    eax,0xc0023ec0
c001e7f6:	8a 00                	mov    al,BYTE PTR [eax]
c001e7f8:	25 ff 00 00 00       	and    eax,0xff
c001e7fd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e800:	eb 10                	jmp    c001e812 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e802:	83 ec 0c             	sub    esp,0xc
c001e805:	68 8c 39 02 c0       	push   0xc002398c
c001e80a:	e8 19 72 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e816:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c001e81b:	83 ec 08             	sub    esp,0x8
c001e81e:	50                   	push   eax
c001e81f:	68 c4 39 02 c0       	push   0xc00239c4
c001e824:	e8 ea 09 ff ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001e829:	83 c4 10             	add    esp,0x10
c001e82c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e833:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c001e838:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e83b:	7d 64                	jge    c001e8a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e83d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e840:	8b 04 85 40 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ac0]
c001e847:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e84a:	83 ec 08             	sub    esp,0x8
c001e84d:	52                   	push   edx
c001e84e:	50                   	push   eax
c001e84f:	e8 2c fd ff ff       	call   c001e580 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e854:	83 c4 10             	add    esp,0x10
c001e857:	84 c0                	test   al,al
c001e859:	74 41                	je     c001e89c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e85b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e85e:	8b 1c 85 40 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9ac0]
c001e865:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e868:	83 c0 20             	add    eax,0x20
c001e86b:	89 c6                	mov    esi,eax
c001e86d:	81 e6 ff 00 00 00    	and    esi,0xff
c001e873:	e8 41 60 ff ff       	call   c00148b9 <getCPUNumber()>
c001e878:	89 c2                	mov    edx,eax
c001e87a:	c1 fa 1f             	sar    edx,0x1f
c001e87d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e880:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e886:	83 ec 0c             	sub    esp,0xc
c001e889:	56                   	push   esi
c001e88a:	52                   	push   edx
c001e88b:	50                   	push   eax
c001e88c:	51                   	push   ecx
c001e88d:	53                   	push   ebx
c001e88e:	e8 7b fe ff ff       	call   c001e70e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e893:	83 c4 20             	add    esp,0x20
c001e896:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e89a:	eb 05                	jmp    c001e8a1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e89c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e89f:	eb 92                	jmp    c001e833 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8a1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8a4:	83 f0 01             	xor    eax,0x1
c001e8a7:	84 c0                	test   al,al
c001e8a9:	74 10                	je     c001e8bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8ab:	83 ec 0c             	sub    esp,0xc
c001e8ae:	68 db 39 02 c0       	push   0xc00239db
c001e8b3:	e8 70 71 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001e8b8:	83 c4 10             	add    esp,0x10
c001e8bb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8bf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8c6:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8ca:	7f 65                	jg     c001e931 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8d2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8dc:	01 ca                	add    edx,ecx
c001e8de:	83 c2 54             	add    edx,0x54
c001e8e1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e8e5:	85 c0                	test   eax,eax
c001e8e7:	75 43                	jne    c001e92c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8f9:	01 ca                	add    edx,ecx
c001e8fb:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e8fe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e901:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e908:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e90b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e912:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e915:	01 ca                	add    edx,ecx
c001e917:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e91d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e920:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e924:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e927:	83 e8 20             	sub    eax,0x20
c001e92a:	eb 1a                	jmp    c001e946 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e92c:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e92f:	eb 95                	jmp    c001e8c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e931:	83 ec 0c             	sub    esp,0xc
c001e934:	68 e8 39 02 c0       	push   0xc00239e8
c001e939:	e8 ea 70 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e946:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e949:	5b                   	pop    ebx
c001e94a:	5e                   	pop    esi
c001e94b:	5d                   	pop    ebp
c001e94c:	c3                   	ret    
c001e94d:	90                   	nop

c001e94e <PIC::disable()>:
c001e94e:	55                   	push   ebp
c001e94f:	89 e5                	mov    ebp,esp
c001e951:	83 ec 10             	sub    esp,0x10
c001e954:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e95a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e95e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e961:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e965:	ee                   	out    dx,al
c001e966:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e96c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e970:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e973:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e977:	ee                   	out    dx,al
c001e978:	90                   	nop
c001e979:	c9                   	leave  
c001e97a:	c3                   	ret    
c001e97b:	90                   	nop

c001e97c <PIC::close(int, int, void*)>:
c001e97c:	55                   	push   ebp
c001e97d:	89 e5                	mov    ebp,esp
c001e97f:	83 ec 08             	sub    esp,0x8
c001e982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e985:	8b 00                	mov    eax,DWORD PTR [eax]
c001e987:	83 c0 3c             	add    eax,0x3c
c001e98a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e992:	ff d0                	call   eax
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	b8 00 00 00 00       	mov    eax,0x0
c001e99c:	c9                   	leave  
c001e99d:	c3                   	ret    

c001e99e <PIC::PIC()>:
c001e99e:	83 ec 0c             	sub    esp,0xc
c001e9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a5:	83 ec 08             	sub    esp,0x8
c001e9a8:	68 94 3a 02 c0       	push   0xc0023a94
c001e9ad:	50                   	push   eax
c001e9ae:	e8 b3 25 ff ff       	call   c0010f66 <InterruptController::InterruptController(char const*)>
c001e9b3:	83 c4 10             	add    esp,0x10
c001e9b6:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	89 10                	mov    DWORD PTR [eax],edx
c001e9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9cb:	31 d2                	xor    edx,edx
c001e9cd:	88 c2                	mov    dl,al
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9e4:	31 d2                	xor    edx,edx
c001e9e6:	88 c2                	mov    dl,al
c001e9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ec:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9fb:	8d 50 01             	lea    edx,[eax+0x1]
c001e9fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea02:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea08:	31 d2                	xor    edx,edx
c001ea0a:	88 c2                	mov    dl,al
c001ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea10:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea14:	83 e1 3f             	and    ecx,0x3f
c001ea17:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea25:	31 d2                	xor    edx,edx
c001ea27:	88 c2                	mov    dl,al
c001ea29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea3e:	31 d2                	xor    edx,edx
c001ea40:	88 c2                	mov    dl,al
c001ea42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea46:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea55:	8d 50 01             	lea    edx,[eax+0x1]
c001ea58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea5c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea62:	31 d2                	xor    edx,edx
c001ea64:	88 c2                	mov    dl,al
c001ea66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea6e:	83 e1 3f             	and    ecx,0x3f
c001ea71:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea75:	90                   	nop
c001ea76:	83 c4 0c             	add    esp,0xc
c001ea79:	c3                   	ret    

c001ea7a <PIC::ioWait()>:
c001ea7a:	eb 00                	jmp    c001ea7c <PIC::ioWait()+0x2>
c001ea7c:	eb 00                	jmp    c001ea7e <PIC::ioWait()+0x4>
c001ea7e:	90                   	nop
c001ea7f:	c3                   	ret    

c001ea80 <PIC::getIRQReg(int)>:
c001ea80:	55                   	push   ebp
c001ea81:	89 e5                	mov    ebp,esp
c001ea83:	83 ec 10             	sub    esp,0x10
c001ea86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea89:	25 ff 00 00 00       	and    eax,0xff
c001ea8e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ea94:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001ea97:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea9a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea9e:	ee                   	out    dx,al
c001ea9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaa2:	25 ff 00 00 00       	and    eax,0xff
c001eaa7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eaad:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eab0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eab3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eab7:	ee                   	out    dx,al
c001eab8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001eabe:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eac2:	89 c2                	mov    edx,eax
c001eac4:	ec                   	in     al,dx
c001eac5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eac8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eacb:	25 ff 00 00 00       	and    eax,0xff
c001ead0:	c1 e0 08             	shl    eax,0x8
c001ead3:	89 c1                	mov    ecx,eax
c001ead5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eadb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eadf:	89 c2                	mov    edx,eax
c001eae1:	ec                   	in     al,dx
c001eae2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eae5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eae8:	25 ff 00 00 00       	and    eax,0xff
c001eaed:	09 c8                	or     eax,ecx
c001eaef:	c9                   	leave  
c001eaf0:	c3                   	ret    
c001eaf1:	90                   	nop

c001eaf2 <PIC::eoi(unsigned char)>:
c001eaf2:	55                   	push   ebp
c001eaf3:	89 e5                	mov    ebp,esp
c001eaf5:	83 ec 14             	sub    esp,0x14
c001eaf8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eafb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eafe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb02:	75 23                	jne    c001eb27 <PIC::eoi(unsigned char)+0x35>
c001eb04:	6a 0b                	push   0xb
c001eb06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb09:	e8 72 ff ff ff       	call   c001ea80 <PIC::getIRQReg(int)>
c001eb0e:	83 c4 08             	add    esp,0x8
c001eb11:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb15:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb19:	25 ff ff 00 00       	and    eax,0xffff
c001eb1e:	25 80 00 00 00       	and    eax,0x80
c001eb23:	85 c0                	test   eax,eax
c001eb25:	74 5f                	je     c001eb86 <PIC::eoi(unsigned char)+0x94>
c001eb27:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb2b:	75 2d                	jne    c001eb5a <PIC::eoi(unsigned char)+0x68>
c001eb2d:	6a 0b                	push   0xb
c001eb2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb32:	e8 49 ff ff ff       	call   c001ea80 <PIC::getIRQReg(int)>
c001eb37:	83 c4 08             	add    esp,0x8
c001eb3a:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb3e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb41:	66 85 c0             	test   ax,ax
c001eb44:	78 14                	js     c001eb5a <PIC::eoi(unsigned char)+0x68>
c001eb46:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb4c:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb50:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb53:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb57:	ee                   	out    dx,al
c001eb58:	eb 2d                	jmp    c001eb87 <PIC::eoi(unsigned char)+0x95>
c001eb5a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb5e:	76 12                	jbe    c001eb72 <PIC::eoi(unsigned char)+0x80>
c001eb60:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb66:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb6a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb6d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb71:	ee                   	out    dx,al
c001eb72:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb78:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eb7c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eb7f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eb83:	ee                   	out    dx,al
c001eb84:	eb 01                	jmp    c001eb87 <PIC::eoi(unsigned char)+0x95>
c001eb86:	90                   	nop
c001eb87:	c9                   	leave  
c001eb88:	c3                   	ret    
c001eb89:	90                   	nop

c001eb8a <PIC::remap()>:
c001eb8a:	55                   	push   ebp
c001eb8b:	89 e5                	mov    ebp,esp
c001eb8d:	83 ec 48             	sub    esp,0x48
c001eb90:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001eb97:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001eb9e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001eba4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001eba7:	89 c2                	mov    edx,eax
c001eba9:	ec                   	in     al,dx
c001ebaa:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebad:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebb0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebb3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebb9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebbc:	89 c2                	mov    edx,eax
c001ebbe:	ec                   	in     al,dx
c001ebbf:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebc2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebc5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebc8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebce:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebd2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebd5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebd8:	ee                   	out    dx,al
c001ebd9:	83 ec 0c             	sub    esp,0xc
c001ebdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebdf:	e8 96 fe ff ff       	call   c001ea7a <PIC::ioWait()>
c001ebe4:	83 c4 10             	add    esp,0x10
c001ebe7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ebed:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ebf1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ebf4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ebf7:	ee                   	out    dx,al
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebfe:	e8 77 fe ff ff       	call   c001ea7a <PIC::ioWait()>
c001ec03:	83 c4 10             	add    esp,0x10
c001ec06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec09:	25 ff 00 00 00       	and    eax,0xff
c001ec0e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec14:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec17:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec1a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec1d:	ee                   	out    dx,al
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec24:	e8 51 fe ff ff       	call   c001ea7a <PIC::ioWait()>
c001ec29:	83 c4 10             	add    esp,0x10
c001ec2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec2f:	25 ff 00 00 00       	and    eax,0xff
c001ec34:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec3a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec3d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec40:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec43:	ee                   	out    dx,al
c001ec44:	83 ec 0c             	sub    esp,0xc
c001ec47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec4a:	e8 2b fe ff ff       	call   c001ea7a <PIC::ioWait()>
c001ec4f:	83 c4 10             	add    esp,0x10
c001ec52:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec58:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec5c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec5f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec62:	ee                   	out    dx,al
c001ec63:	83 ec 0c             	sub    esp,0xc
c001ec66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec69:	e8 0c fe ff ff       	call   c001ea7a <PIC::ioWait()>
c001ec6e:	83 c4 10             	add    esp,0x10
c001ec71:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec77:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec7b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ec7e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ec81:	ee                   	out    dx,al
c001ec82:	83 ec 0c             	sub    esp,0xc
c001ec85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec88:	e8 ed fd ff ff       	call   c001ea7a <PIC::ioWait()>
c001ec8d:	83 c4 10             	add    esp,0x10
c001ec90:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ec96:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ec9a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ec9d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001eca0:	ee                   	out    dx,al
c001eca1:	83 ec 0c             	sub    esp,0xc
c001eca4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca7:	e8 ce fd ff ff       	call   c001ea7a <PIC::ioWait()>
c001ecac:	83 c4 10             	add    esp,0x10
c001ecaf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecb5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ecb9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ecbc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ecbf:	ee                   	out    dx,al
c001ecc0:	83 ec 0c             	sub    esp,0xc
c001ecc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc6:	e8 af fd ff ff       	call   c001ea7a <PIC::ioWait()>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ecd1:	25 ff 00 00 00       	and    eax,0xff
c001ecd6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ecdc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ecdf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ece2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ece5:	ee                   	out    dx,al
c001ece6:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ece9:	25 ff 00 00 00       	and    eax,0xff
c001ecee:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ecf4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ecf7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ecfa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ecfd:	ee                   	out    dx,al
c001ecfe:	90                   	nop
c001ecff:	c9                   	leave  
c001ed00:	c3                   	ret    
c001ed01:	90                   	nop

c001ed02 <PIC::open(int, int, void*)>:
c001ed02:	55                   	push   ebp
c001ed03:	89 e5                	mov    ebp,esp
c001ed05:	83 ec 18             	sub    esp,0x18
c001ed08:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed0e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed12:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed15:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed19:	ee                   	out    dx,al
c001ed1a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed20:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed24:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed27:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed2b:	ee                   	out    dx,al
c001ed2c:	83 ec 0c             	sub    esp,0xc
c001ed2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed32:	e8 53 fe ff ff       	call   c001eb8a <PIC::remap()>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	b8 00 00 00 00       	mov    eax,0x0
c001ed3f:	c9                   	leave  
c001ed40:	c3                   	ret    
c001ed41:	90                   	nop

c001ed42 <APICTimer::close(int, int, void*)>:
c001ed42:	b8 00 00 00 00       	mov    eax,0x0
c001ed47:	c3                   	ret    

c001ed48 <apicTimerHandler(regs*, void*)>:
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed51:	89 c2                	mov    edx,eax
c001ed53:	c1 fa 1f             	sar    edx,0x1f
c001ed56:	52                   	push   edx
c001ed57:	50                   	push   eax
c001ed58:	6a 00                	push   0x0
c001ed5a:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed5f:	e8 88 07 00 00       	call   c001f4ec <__udivdi3>
c001ed64:	83 c4 10             	add    esp,0x10
c001ed67:	83 ec 08             	sub    esp,0x8
c001ed6a:	52                   	push   edx
c001ed6b:	50                   	push   eax
c001ed6c:	e8 08 40 ff ff       	call   c0012d79 <timerHandler(unsigned long long)>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	90                   	nop
c001ed75:	83 c4 0c             	add    esp,0xc
c001ed78:	c3                   	ret    
c001ed79:	90                   	nop

c001ed7a <APICTimer::write(int)>:
c001ed7a:	53                   	push   ebx
c001ed7b:	83 ec 28             	sub    esp,0x28
c001ed7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed86:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ed8c:	e8 2b 5b ff ff       	call   c00148bc <thisCPU()>
c001ed91:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ed97:	83 ec 0c             	sub    esp,0xc
c001ed9a:	50                   	push   eax
c001ed9b:	e8 a2 f5 ff ff       	call   c001e342 <APIC::getBase()>
c001eda0:	83 c4 10             	add    esp,0x10
c001eda3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eda7:	a1 d0 4d 02 c0       	mov    eax,ds:0xc0024dd0
c001edac:	8b 15 d4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024dd4
c001edb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edbe:	05 e0 03 00 00       	add    eax,0x3e0
c001edc3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001edc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edcd:	05 80 03 00 00       	add    eax,0x380
c001edd2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001edd8:	fb                   	sti    
c001edd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ede1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ede6:	83 d2 00             	adc    edx,0x0
c001ede9:	89 c1                	mov    ecx,eax
c001edeb:	89 d3                	mov    ebx,edx
c001eded:	a1 d0 4d 02 c0       	mov    eax,ds:0xc0024dd0
c001edf2:	8b 15 d4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024dd4
c001edf8:	39 c8                	cmp    eax,ecx
c001edfa:	89 d0                	mov    eax,edx
c001edfc:	19 d8                	sbb    eax,ebx
c001edfe:	73 02                	jae    c001ee02 <APICTimer::write(int)+0x88>
c001ee00:	eb d7                	jmp    c001edd9 <APICTimer::write(int)+0x5f>
c001ee02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee06:	05 20 03 00 00       	add    eax,0x320
c001ee0b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee15:	05 90 03 00 00       	add    eax,0x390
c001ee1a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee1c:	f7 d0                	not    eax
c001ee1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee22:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee2a:	ba 00 00 00 00       	mov    edx,0x0
c001ee2f:	f7 f3                	div    ebx
c001ee31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee3f:	0d 00 00 02 00       	or     eax,0x20000
c001ee44:	89 c2                	mov    edx,eax
c001ee46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee4a:	05 20 03 00 00       	add    eax,0x320
c001ee4f:	89 10                	mov    DWORD PTR [eax],edx
c001ee51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee55:	05 e0 03 00 00       	add    eax,0x3e0
c001ee5a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee64:	05 80 03 00 00       	add    eax,0x380
c001ee69:	89 c2                	mov    edx,eax
c001ee6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee6f:	89 02                	mov    DWORD PTR [edx],eax
c001ee71:	90                   	nop
c001ee72:	83 c4 28             	add    esp,0x28
c001ee75:	5b                   	pop    ebx
c001ee76:	c3                   	ret    
c001ee77:	90                   	nop

c001ee78 <APICTimer::open(int, int, void*)>:
c001ee78:	57                   	push   edi
c001ee79:	56                   	push   esi
c001ee7a:	53                   	push   ebx
c001ee7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee81:	83 c0 24             	add    eax,0x24
c001ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee86:	83 ec 08             	sub    esp,0x8
c001ee89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee91:	ff d0                	call   eax
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	e8 21 5a ff ff       	call   c00148bc <thisCPU()>
c001ee9b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eea1:	83 ec 0c             	sub    esp,0xc
c001eea4:	50                   	push   eax
c001eea5:	e8 98 f4 ff ff       	call   c001e342 <APIC::getBase()>
c001eeaa:	83 c4 10             	add    esp,0x10
c001eead:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eebd:	89 c7                	mov    edi,eax
c001eebf:	81 e7 ff 00 00 00    	and    edi,0xff
c001eec5:	89 d0                	mov    eax,edx
c001eec7:	ba 00 00 00 00       	mov    edx,0x0
c001eecc:	89 c1                	mov    ecx,eax
c001eece:	80 e5 ff             	and    ch,0xff
c001eed1:	89 cb                	mov    ebx,ecx
c001eed3:	89 d0                	mov    eax,edx
c001eed5:	25 ff 00 00 00       	and    eax,0xff
c001eeda:	89 c6                	mov    esi,eax
c001eedc:	89 d8                	mov    eax,ebx
c001eede:	89 f2                	mov    edx,esi
c001eee0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eee4:	8d 5f 08             	lea    ebx,[edi+0x8]
c001eee7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eeeb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eeef:	83 e0 00             	and    eax,0x0
c001eef2:	09 d0                	or     eax,edx
c001eef4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef02:	8d 50 01             	lea    edx,[eax+0x1]
c001ef05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef09:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef0f:	31 d2                	xor    edx,edx
c001ef11:	88 c2                	mov    dl,al
c001ef13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef17:	83 c2 08             	add    edx,0x8
c001ef1a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef1e:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef24:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef2a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef36:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef44:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef54:	83 ec 0c             	sub    esp,0xc
c001ef57:	51                   	push   ecx
c001ef58:	6a 01                	push   0x1
c001ef5a:	68 48 ed 01 c0       	push   0xc001ed48
c001ef5f:	52                   	push   edx
c001ef60:	50                   	push   eax
c001ef61:	e8 16 16 ff ff       	call   c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef66:	83 c4 20             	add    esp,0x20
c001ef69:	89 c2                	mov    edx,eax
c001ef6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef75:	b8 00 00 00 00       	mov    eax,0x0
c001ef7a:	5b                   	pop    ebx
c001ef7b:	5e                   	pop    esi
c001ef7c:	5f                   	pop    edi
c001ef7d:	c3                   	ret    

c001ef7e <APICTimer::APICTimer()>:
c001ef7e:	83 ec 0c             	sub    esp,0xc
c001ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef85:	83 ec 08             	sub    esp,0x8
c001ef88:	68 00 3b 02 c0       	push   0xc0023b00
c001ef8d:	50                   	push   eax
c001ef8e:	e8 57 3d ff ff       	call   c0012cea <Timer::Timer(char const*)>
c001ef93:	83 c4 10             	add    esp,0x10
c001ef96:	ba 14 3b 02 c0       	mov    edx,0xc0023b14
c001ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9f:	89 10                	mov    DWORD PTR [eax],edx
c001efa1:	90                   	nop
c001efa2:	83 c4 0c             	add    esp,0xc
c001efa5:	c3                   	ret    

c001efa6 <PIT::write(int)>:
c001efa6:	83 ec 10             	sub    esp,0x10
c001efa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efb1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efbb:	a3 64 65 02 c0       	mov    ds:0xc0026564,eax
c001efc0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efc5:	89 c2                	mov    edx,eax
c001efc7:	c1 fa 1f             	sar    edx,0x1f
c001efca:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efd2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efd9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001efde:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001efe2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001efe7:	ee                   	out    dx,al
c001efe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efec:	25 ff 00 00 00       	and    eax,0xff
c001eff1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eff8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001effc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f000:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f005:	ee                   	out    dx,al
c001f006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f00a:	c1 f8 08             	sar    eax,0x8
c001f00d:	25 ff 00 00 00       	and    eax,0xff
c001f012:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f019:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f01d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f021:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f026:	ee                   	out    dx,al
c001f027:	90                   	nop
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	c3                   	ret    

c001f02c <pitHandler(regs*, void*)>:
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	a1 64 65 02 c0       	mov    eax,ds:0xc0026564
c001f034:	89 c2                	mov    edx,eax
c001f036:	c1 fa 1f             	sar    edx,0x1f
c001f039:	52                   	push   edx
c001f03a:	50                   	push   eax
c001f03b:	6a 00                	push   0x0
c001f03d:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f042:	e8 a5 04 00 00       	call   c001f4ec <__udivdi3>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	83 ec 08             	sub    esp,0x8
c001f04d:	52                   	push   edx
c001f04e:	50                   	push   eax
c001f04f:	e8 25 3d ff ff       	call   c0012d79 <timerHandler(unsigned long long)>
c001f054:	83 c4 10             	add    esp,0x10
c001f057:	90                   	nop
c001f058:	83 c4 0c             	add    esp,0xc
c001f05b:	c3                   	ret    

c001f05c <PIT::open(int, int, void*)>:
c001f05c:	83 ec 0c             	sub    esp,0xc
c001f05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f063:	8b 00                	mov    eax,DWORD PTR [eax]
c001f065:	83 c0 24             	add    eax,0x24
c001f068:	8b 00                	mov    eax,DWORD PTR [eax]
c001f06a:	83 ec 08             	sub    esp,0x8
c001f06d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f075:	ff d0                	call   eax
c001f077:	83 c4 10             	add    esp,0x10
c001f07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07e:	83 ec 0c             	sub    esp,0xc
c001f081:	6a 00                	push   0x0
c001f083:	6a 01                	push   0x1
c001f085:	68 2c f0 01 c0       	push   0xc001f02c
c001f08a:	6a 00                	push   0x0
c001f08c:	50                   	push   eax
c001f08d:	e8 ea 14 ff ff       	call   c001057c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f092:	83 c4 20             	add    esp,0x20
c001f095:	89 c2                	mov    edx,eax
c001f097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0a1:	b8 00 00 00 00       	mov    eax,0x0
c001f0a6:	83 c4 0c             	add    esp,0xc
c001f0a9:	c3                   	ret    

c001f0aa <PIT::close(int, int, void*)>:
c001f0aa:	83 ec 0c             	sub    esp,0xc
c001f0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bf:	6a 01                	push   0x1
c001f0c1:	68 2c f0 01 c0       	push   0xc001f02c
c001f0c6:	6a 00                	push   0x0
c001f0c8:	50                   	push   eax
c001f0c9:	e8 0c 15 ff ff       	call   c00105da <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	b8 00 00 00 00       	mov    eax,0x0
c001f0d6:	83 c4 0c             	add    esp,0xc
c001f0d9:	c3                   	ret    

c001f0da <PIT::PIT()>:
c001f0da:	83 ec 0c             	sub    esp,0xc
c001f0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e1:	83 ec 08             	sub    esp,0x8
c001f0e4:	68 3c 3b 02 c0       	push   0xc0023b3c
c001f0e9:	50                   	push   eax
c001f0ea:	e8 fb 3b ff ff       	call   c0012cea <Timer::Timer(char const*)>
c001f0ef:	83 c4 10             	add    esp,0x10
c001f0f2:	ba 64 3b 02 c0       	mov    edx,0xc0023b64
c001f0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fb:	89 10                	mov    DWORD PTR [eax],edx
c001f0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f101:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f107:	31 d2                	xor    edx,edx
c001f109:	88 c2                	mov    dl,al
c001f10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10f:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f120:	31 d2                	xor    edx,edx
c001f122:	88 c2                	mov    dl,al
c001f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f128:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f131:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f137:	8d 50 01             	lea    edx,[eax+0x1]
c001f13a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f13e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f144:	31 d2                	xor    edx,edx
c001f146:	88 c2                	mov    dl,al
c001f148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f150:	83 e1 3f             	and    ecx,0x3f
c001f153:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f157:	90                   	nop
c001f158:	83 c4 0c             	add    esp,0xc
c001f15b:	c3                   	ret    
c001f15c:	66 90                	xchg   ax,ax
c001f15e:	66 90                	xchg   ax,ax

c001f160 <avxDetect>:
c001f160:	b8 00 00 00 00       	mov    eax,0x0
c001f165:	c3                   	ret    

c001f166 <avxSave>:
c001f166:	c3                   	ret    

c001f167 <avxLoad>:
c001f167:	c3                   	ret    

c001f168 <avxInit>:
c001f168:	c3                   	ret    

c001f169 <avxClose>:
c001f169:	c3                   	ret    
c001f16a:	66 90                	xchg   ax,ax
c001f16c:	66 90                	xchg   ax,ax
c001f16e:	66 90                	xchg   ax,ax

c001f170 <sseDetect>:
c001f170:	b8 01 00 00 00       	mov    eax,0x1
c001f175:	0f a2                	cpuid  
c001f177:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f17d:	74 06                	je     c001f185 <sseDetect.noSSE>
c001f17f:	b8 01 00 00 00       	mov    eax,0x1
c001f184:	c3                   	ret    

c001f185 <sseDetect.noSSE>:
c001f185:	b8 00 00 00 00       	mov    eax,0x0
c001f18a:	c3                   	ret    

c001f18b <sseSave>:
c001f18b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f190:	c3                   	ret    

c001f191 <sseLoad>:
c001f191:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f196:	c3                   	ret    

c001f197 <sseInit>:
c001f197:	e8 40 00 00 00       	call   c001f1dc <x87Init>
c001f19c:	0f 20 e0             	mov    eax,cr4
c001f19f:	66 0d 00 06          	or     ax,0x600
c001f1a3:	0f 22 e0             	mov    cr4,eax
c001f1a6:	c3                   	ret    

c001f1a7 <sseClose>:
c001f1a7:	c3                   	ret    
c001f1a8:	66 90                	xchg   ax,ax
c001f1aa:	66 90                	xchg   ax,ax
c001f1ac:	66 90                	xchg   ax,ax
c001f1ae:	66 90                	xchg   ax,ax

c001f1b0 <value_37F>:
c001f1b0:	7f 03                	jg     c001f1b5 <value_37A+0x1>

c001f1b2 <value_37E>:
c001f1b2:	7e 03                	jle    c001f1b7 <x87Detect+0x1>

c001f1b4 <value_37A>:
c001f1b4:	7a 03                	jp     c001f1b9 <x87Detect+0x3>

c001f1b6 <x87Detect>:
c001f1b6:	b8 01 00 00 00       	mov    eax,0x1
c001f1bb:	0f a2                	cpuid  
c001f1bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1c3:	74 06                	je     c001f1cb <x87Detect.nox87>
c001f1c5:	b8 01 00 00 00       	mov    eax,0x1
c001f1ca:	c3                   	ret    

c001f1cb <x87Detect.nox87>:
c001f1cb:	b8 00 00 00 00       	mov    eax,0x0
c001f1d0:	c3                   	ret    

c001f1d1 <x87Save>:
c001f1d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1d6:	c3                   	ret    

c001f1d7 <x87Load>:
c001f1d7:	dd 64 24 08          	frstor [esp+0x8]
c001f1db:	c3                   	ret    

c001f1dc <x87Init>:
c001f1dc:	9b db e3             	finit  
c001f1df:	0f 20 c0             	mov    eax,cr0
c001f1e2:	66 25 fb ff          	and    ax,0xfffb
c001f1e6:	66 0d 22 00          	or     ax,0x22
c001f1ea:	0f 22 c0             	mov    cr0,eax
c001f1ed:	0f 06                	clts   
c001f1ef:	d9 2d b4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1b4
c001f1f5:	c3                   	ret    

c001f1f6 <x87Close>:
c001f1f6:	c3                   	ret    
c001f1f7:	90                   	nop

c001f1f8 <__do_global_ctors_aux>:
c001f1f8:	a1 d8 02 02 c0       	mov    eax,ds:0xc00202d8
c001f1fd:	83 f8 ff             	cmp    eax,0xffffffff
c001f200:	74 1a                	je     c001f21c <__do_global_ctors_aux+0x24>
c001f202:	55                   	push   ebp
c001f203:	89 e5                	mov    ebp,esp
c001f205:	53                   	push   ebx
c001f206:	52                   	push   edx
c001f207:	bb d8 02 02 c0       	mov    ebx,0xc00202d8
c001f20c:	ff d0                	call   eax
c001f20e:	83 eb 04             	sub    ebx,0x4
c001f211:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f213:	83 f8 ff             	cmp    eax,0xffffffff
c001f216:	75 f4                	jne    c001f20c <__do_global_ctors_aux+0x14>
c001f218:	58                   	pop    eax
c001f219:	5b                   	pop    ebx
c001f21a:	5d                   	pop    ebp
c001f21b:	c3                   	ret    
c001f21c:	c3                   	ret    
c001f21d:	66 90                	xchg   ax,ax
c001f21f:	90                   	nop

c001f220 <__divdi3>:
c001f220:	55                   	push   ebp
c001f221:	57                   	push   edi
c001f222:	56                   	push   esi
c001f223:	53                   	push   ebx
c001f224:	83 ec 1c             	sub    esp,0x1c
c001f227:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f22b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f22f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f232:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f23a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f23e:	85 db                	test   ebx,ebx
c001f240:	0f 88 8e 00 00 00    	js     c001f2d4 <__divdi3+0xb4>
c001f246:	89 dd                	mov    ebp,ebx
c001f248:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f250:	89 d3                	mov    ebx,edx
c001f252:	85 d2                	test   edx,edx
c001f254:	79 0d                	jns    c001f263 <__divdi3+0x43>
c001f256:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f25a:	f7 d8                	neg    eax
c001f25c:	83 d2 00             	adc    edx,0x0
c001f25f:	f7 da                	neg    edx
c001f261:	89 d3                	mov    ebx,edx
c001f263:	89 c7                	mov    edi,eax
c001f265:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f268:	85 db                	test   ebx,ebx
c001f26a:	75 48                	jne    c001f2b4 <__divdi3+0x94>
c001f26c:	39 ef                	cmp    edi,ebp
c001f26e:	76 24                	jbe    c001f294 <__divdi3+0x74>
c001f270:	89 ea                	mov    edx,ebp
c001f272:	f7 f7                	div    edi
c001f274:	89 c1                	mov    ecx,eax
c001f276:	31 f6                	xor    esi,esi
c001f278:	89 c8                	mov    eax,ecx
c001f27a:	89 f2                	mov    edx,esi
c001f27c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f280:	85 c9                	test   ecx,ecx
c001f282:	74 07                	je     c001f28b <__divdi3+0x6b>
c001f284:	f7 d8                	neg    eax
c001f286:	83 d2 00             	adc    edx,0x0
c001f289:	f7 da                	neg    edx
c001f28b:	83 c4 1c             	add    esp,0x1c
c001f28e:	5b                   	pop    ebx
c001f28f:	5e                   	pop    esi
c001f290:	5f                   	pop    edi
c001f291:	5d                   	pop    ebp
c001f292:	c3                   	ret    
c001f293:	90                   	nop
c001f294:	85 ff                	test   edi,edi
c001f296:	75 0b                	jne    c001f2a3 <__divdi3+0x83>
c001f298:	b8 01 00 00 00       	mov    eax,0x1
c001f29d:	31 d2                	xor    edx,edx
c001f29f:	f7 f3                	div    ebx
c001f2a1:	89 c7                	mov    edi,eax
c001f2a3:	31 d2                	xor    edx,edx
c001f2a5:	89 e8                	mov    eax,ebp
c001f2a7:	f7 f7                	div    edi
c001f2a9:	89 c6                	mov    esi,eax
c001f2ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2ae:	f7 f7                	div    edi
c001f2b0:	89 c1                	mov    ecx,eax
c001f2b2:	eb c4                	jmp    c001f278 <__divdi3+0x58>
c001f2b4:	39 eb                	cmp    ebx,ebp
c001f2b6:	77 3c                	ja     c001f2f4 <__divdi3+0xd4>
c001f2b8:	0f bd f3             	bsr    esi,ebx
c001f2bb:	83 f6 1f             	xor    esi,0x1f
c001f2be:	75 40                	jne    c001f300 <__divdi3+0xe0>
c001f2c0:	39 eb                	cmp    ebx,ebp
c001f2c2:	72 09                	jb     c001f2cd <__divdi3+0xad>
c001f2c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2c7:	0f 87 97 00 00 00    	ja     c001f364 <__divdi3+0x144>
c001f2cd:	b9 01 00 00 00       	mov    ecx,0x1
c001f2d2:	eb a4                	jmp    c001f278 <__divdi3+0x58>
c001f2d4:	f7 d9                	neg    ecx
c001f2d6:	83 d3 00             	adc    ebx,0x0
c001f2d9:	f7 db                	neg    ebx
c001f2db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f2e2:	89 dd                	mov    ebp,ebx
c001f2e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f2ec:	e9 5f ff ff ff       	jmp    c001f250 <__divdi3+0x30>
c001f2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2f4:	31 f6                	xor    esi,esi
c001f2f6:	31 c9                	xor    ecx,ecx
c001f2f8:	e9 7b ff ff ff       	jmp    c001f278 <__divdi3+0x58>
c001f2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001f300:	b8 20 00 00 00       	mov    eax,0x20
c001f305:	29 f0                	sub    eax,esi
c001f307:	89 f1                	mov    ecx,esi
c001f309:	d3 e3                	shl    ebx,cl
c001f30b:	89 fa                	mov    edx,edi
c001f30d:	88 c1                	mov    cl,al
c001f30f:	d3 ea                	shr    edx,cl
c001f311:	09 da                	or     edx,ebx
c001f313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f317:	89 f1                	mov    ecx,esi
c001f319:	d3 e7                	shl    edi,cl
c001f31b:	89 eb                	mov    ebx,ebp
c001f31d:	88 c1                	mov    cl,al
c001f31f:	d3 eb                	shr    ebx,cl
c001f321:	89 f1                	mov    ecx,esi
c001f323:	d3 e5                	shl    ebp,cl
c001f325:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f328:	88 c1                	mov    cl,al
c001f32a:	d3 ea                	shr    edx,cl
c001f32c:	09 d5                	or     ebp,edx
c001f32e:	89 e8                	mov    eax,ebp
c001f330:	89 da                	mov    edx,ebx
c001f332:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f336:	89 d3                	mov    ebx,edx
c001f338:	89 c5                	mov    ebp,eax
c001f33a:	f7 e7                	mul    edi
c001f33c:	39 d3                	cmp    ebx,edx
c001f33e:	72 18                	jb     c001f358 <__divdi3+0x138>
c001f340:	74 0a                	je     c001f34c <__divdi3+0x12c>
c001f342:	89 e9                	mov    ecx,ebp
c001f344:	31 f6                	xor    esi,esi
c001f346:	e9 2d ff ff ff       	jmp    c001f278 <__divdi3+0x58>
c001f34b:	90                   	nop
c001f34c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f34f:	89 f1                	mov    ecx,esi
c001f351:	d3 e7                	shl    edi,cl
c001f353:	39 c7                	cmp    edi,eax
c001f355:	73 eb                	jae    c001f342 <__divdi3+0x122>
c001f357:	90                   	nop
c001f358:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f35b:	31 f6                	xor    esi,esi
c001f35d:	e9 16 ff ff ff       	jmp    c001f278 <__divdi3+0x58>
c001f362:	66 90                	xchg   ax,ax
c001f364:	31 c9                	xor    ecx,ecx
c001f366:	e9 0d ff ff ff       	jmp    c001f278 <__divdi3+0x58>
c001f36b:	90                   	nop

c001f36c <__moddi3>:
c001f36c:	55                   	push   ebp
c001f36d:	57                   	push   edi
c001f36e:	56                   	push   esi
c001f36f:	53                   	push   ebx
c001f370:	83 ec 2c             	sub    esp,0x2c
c001f373:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f377:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f37b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f37f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f383:	85 db                	test   ebx,ebx
c001f385:	0f 88 85 00 00 00    	js     c001f410 <__moddi3+0xa4>
c001f38b:	89 de                	mov    esi,ebx
c001f38d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f395:	89 d7                	mov    edi,edx
c001f397:	85 d2                	test   edx,edx
c001f399:	79 09                	jns    c001f3a4 <__moddi3+0x38>
c001f39b:	f7 d8                	neg    eax
c001f39d:	83 d2 00             	adc    edx,0x0
c001f3a0:	f7 da                	neg    edx
c001f3a2:	89 d7                	mov    edi,edx
c001f3a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3a8:	89 cd                	mov    ebp,ecx
c001f3aa:	85 ff                	test   edi,edi
c001f3ac:	75 52                	jne    c001f400 <__moddi3+0x94>
c001f3ae:	89 c3                	mov    ebx,eax
c001f3b0:	39 f0                	cmp    eax,esi
c001f3b2:	76 24                	jbe    c001f3d8 <__moddi3+0x6c>
c001f3b4:	89 c8                	mov    eax,ecx
c001f3b6:	89 f2                	mov    edx,esi
c001f3b8:	f7 f3                	div    ebx
c001f3ba:	89 d6                	mov    esi,edx
c001f3bc:	89 f0                	mov    eax,esi
c001f3be:	31 d2                	xor    edx,edx
c001f3c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3c4:	85 c9                	test   ecx,ecx
c001f3c6:	74 07                	je     c001f3cf <__moddi3+0x63>
c001f3c8:	f7 d8                	neg    eax
c001f3ca:	83 d2 00             	adc    edx,0x0
c001f3cd:	f7 da                	neg    edx
c001f3cf:	83 c4 2c             	add    esp,0x2c
c001f3d2:	5b                   	pop    ebx
c001f3d3:	5e                   	pop    esi
c001f3d4:	5f                   	pop    edi
c001f3d5:	5d                   	pop    ebp
c001f3d6:	c3                   	ret    
c001f3d7:	90                   	nop
c001f3d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3dc:	85 db                	test   ebx,ebx
c001f3de:	75 0d                	jne    c001f3ed <__moddi3+0x81>
c001f3e0:	b8 01 00 00 00       	mov    eax,0x1
c001f3e5:	31 d2                	xor    edx,edx
c001f3e7:	f7 f7                	div    edi
c001f3e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3ed:	89 f0                	mov    eax,esi
c001f3ef:	31 d2                	xor    edx,edx
c001f3f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f3f5:	f7 f7                	div    edi
c001f3f7:	89 e8                	mov    eax,ebp
c001f3f9:	f7 f7                	div    edi
c001f3fb:	89 d6                	mov    esi,edx
c001f3fd:	eb bd                	jmp    c001f3bc <__moddi3+0x50>
c001f3ff:	90                   	nop
c001f400:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f404:	39 f7                	cmp    edi,esi
c001f406:	76 20                	jbe    c001f428 <__moddi3+0xbc>
c001f408:	89 c8                	mov    eax,ecx
c001f40a:	89 f2                	mov    edx,esi
c001f40c:	eb b2                	jmp    c001f3c0 <__moddi3+0x54>
c001f40e:	66 90                	xchg   ax,ax
c001f410:	f7 d9                	neg    ecx
c001f412:	83 d3 00             	adc    ebx,0x0
c001f415:	f7 db                	neg    ebx
c001f417:	89 de                	mov    esi,ebx
c001f419:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f421:	e9 6f ff ff ff       	jmp    c001f395 <__moddi3+0x29>
c001f426:	66 90                	xchg   ax,ax
c001f428:	0f bd c7             	bsr    eax,edi
c001f42b:	83 f0 1f             	xor    eax,0x1f
c001f42e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f432:	75 24                	jne    c001f458 <__moddi3+0xec>
c001f434:	39 f7                	cmp    edi,esi
c001f436:	72 06                	jb     c001f43e <__moddi3+0xd2>
c001f438:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f43c:	77 0c                	ja     c001f44a <__moddi3+0xde>
c001f43e:	89 e9                	mov    ecx,ebp
c001f440:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f444:	19 fe                	sbb    esi,edi
c001f446:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f44a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f44e:	89 f2                	mov    edx,esi
c001f450:	e9 6b ff ff ff       	jmp    c001f3c0 <__moddi3+0x54>
c001f455:	8d 76 00             	lea    esi,[esi+0x0]
c001f458:	b8 20 00 00 00       	mov    eax,0x20
c001f45d:	89 c2                	mov    edx,eax
c001f45f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f463:	29 da                	sub    edx,ebx
c001f465:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f469:	88 d9                	mov    cl,bl
c001f46b:	d3 e7                	shl    edi,cl
c001f46d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f471:	88 d1                	mov    cl,dl
c001f473:	d3 e8                	shr    eax,cl
c001f475:	09 c7                	or     edi,eax
c001f477:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f47b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f47f:	89 d8                	mov    eax,ebx
c001f481:	88 d9                	mov    cl,bl
c001f483:	d3 e7                	shl    edi,cl
c001f485:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f489:	89 f3                	mov    ebx,esi
c001f48b:	88 d1                	mov    cl,dl
c001f48d:	d3 eb                	shr    ebx,cl
c001f48f:	89 c7                	mov    edi,eax
c001f491:	88 c1                	mov    cl,al
c001f493:	d3 e6                	shl    esi,cl
c001f495:	89 e8                	mov    eax,ebp
c001f497:	88 d1                	mov    cl,dl
c001f499:	d3 e8                	shr    eax,cl
c001f49b:	09 f0                	or     eax,esi
c001f49d:	89 f9                	mov    ecx,edi
c001f49f:	d3 e5                	shl    ebp,cl
c001f4a1:	89 da                	mov    edx,ebx
c001f4a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4a7:	89 d3                	mov    ebx,edx
c001f4a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4ad:	89 c6                	mov    esi,eax
c001f4af:	89 d1                	mov    ecx,edx
c001f4b1:	39 d3                	cmp    ebx,edx
c001f4b3:	72 27                	jb     c001f4dc <__moddi3+0x170>
c001f4b5:	74 21                	je     c001f4d8 <__moddi3+0x16c>
c001f4b7:	29 f5                	sub    ebp,esi
c001f4b9:	19 cb                	sbb    ebx,ecx
c001f4bb:	89 de                	mov    esi,ebx
c001f4bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4c1:	d3 e6                	shl    esi,cl
c001f4c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4c7:	89 f9                	mov    ecx,edi
c001f4c9:	d3 ed                	shr    ebp,cl
c001f4cb:	09 ee                	or     esi,ebp
c001f4cd:	89 f0                	mov    eax,esi
c001f4cf:	d3 eb                	shr    ebx,cl
c001f4d1:	89 da                	mov    edx,ebx
c001f4d3:	e9 e8 fe ff ff       	jmp    c001f3c0 <__moddi3+0x54>
c001f4d8:	39 c5                	cmp    ebp,eax
c001f4da:	73 db                	jae    c001f4b7 <__moddi3+0x14b>
c001f4dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f4e4:	89 d1                	mov    ecx,edx
c001f4e6:	89 c6                	mov    esi,eax
c001f4e8:	eb cd                	jmp    c001f4b7 <__moddi3+0x14b>
c001f4ea:	66 90                	xchg   ax,ax

c001f4ec <__udivdi3>:
c001f4ec:	55                   	push   ebp
c001f4ed:	57                   	push   edi
c001f4ee:	56                   	push   esi
c001f4ef:	53                   	push   ebx
c001f4f0:	83 ec 1c             	sub    esp,0x1c
c001f4f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f4f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f4fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f4ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f503:	85 d2                	test   edx,edx
c001f505:	75 41                	jne    c001f548 <__udivdi3+0x5c>
c001f507:	39 f7                	cmp    edi,esi
c001f509:	76 15                	jbe    c001f520 <__udivdi3+0x34>
c001f50b:	89 e8                	mov    eax,ebp
c001f50d:	89 f2                	mov    edx,esi
c001f50f:	f7 f7                	div    edi
c001f511:	31 db                	xor    ebx,ebx
c001f513:	89 da                	mov    edx,ebx
c001f515:	83 c4 1c             	add    esp,0x1c
c001f518:	5b                   	pop    ebx
c001f519:	5e                   	pop    esi
c001f51a:	5f                   	pop    edi
c001f51b:	5d                   	pop    ebp
c001f51c:	c3                   	ret    
c001f51d:	8d 76 00             	lea    esi,[esi+0x0]
c001f520:	89 f9                	mov    ecx,edi
c001f522:	85 ff                	test   edi,edi
c001f524:	75 0b                	jne    c001f531 <__udivdi3+0x45>
c001f526:	b8 01 00 00 00       	mov    eax,0x1
c001f52b:	31 d2                	xor    edx,edx
c001f52d:	f7 f7                	div    edi
c001f52f:	89 c1                	mov    ecx,eax
c001f531:	31 d2                	xor    edx,edx
c001f533:	89 f0                	mov    eax,esi
c001f535:	f7 f1                	div    ecx
c001f537:	89 c3                	mov    ebx,eax
c001f539:	89 e8                	mov    eax,ebp
c001f53b:	f7 f1                	div    ecx
c001f53d:	89 da                	mov    edx,ebx
c001f53f:	83 c4 1c             	add    esp,0x1c
c001f542:	5b                   	pop    ebx
c001f543:	5e                   	pop    esi
c001f544:	5f                   	pop    edi
c001f545:	5d                   	pop    ebp
c001f546:	c3                   	ret    
c001f547:	90                   	nop
c001f548:	39 f2                	cmp    edx,esi
c001f54a:	77 1c                	ja     c001f568 <__udivdi3+0x7c>
c001f54c:	0f bd da             	bsr    ebx,edx
c001f54f:	83 f3 1f             	xor    ebx,0x1f
c001f552:	75 24                	jne    c001f578 <__udivdi3+0x8c>
c001f554:	39 f2                	cmp    edx,esi
c001f556:	72 08                	jb     c001f560 <__udivdi3+0x74>
c001f558:	39 ef                	cmp    edi,ebp
c001f55a:	0f 87 84 00 00 00    	ja     c001f5e4 <__udivdi3+0xf8>
c001f560:	b8 01 00 00 00       	mov    eax,0x1
c001f565:	eb ac                	jmp    c001f513 <__udivdi3+0x27>
c001f567:	90                   	nop
c001f568:	31 db                	xor    ebx,ebx
c001f56a:	31 c0                	xor    eax,eax
c001f56c:	89 da                	mov    edx,ebx
c001f56e:	83 c4 1c             	add    esp,0x1c
c001f571:	5b                   	pop    ebx
c001f572:	5e                   	pop    esi
c001f573:	5f                   	pop    edi
c001f574:	5d                   	pop    ebp
c001f575:	c3                   	ret    
c001f576:	66 90                	xchg   ax,ax
c001f578:	b8 20 00 00 00       	mov    eax,0x20
c001f57d:	29 d8                	sub    eax,ebx
c001f57f:	88 d9                	mov    cl,bl
c001f581:	d3 e2                	shl    edx,cl
c001f583:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f587:	89 fa                	mov    edx,edi
c001f589:	88 c1                	mov    cl,al
c001f58b:	d3 ea                	shr    edx,cl
c001f58d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f591:	09 d1                	or     ecx,edx
c001f593:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f597:	88 d9                	mov    cl,bl
c001f599:	d3 e7                	shl    edi,cl
c001f59b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f59f:	89 f7                	mov    edi,esi
c001f5a1:	88 c1                	mov    cl,al
c001f5a3:	d3 ef                	shr    edi,cl
c001f5a5:	88 d9                	mov    cl,bl
c001f5a7:	d3 e6                	shl    esi,cl
c001f5a9:	89 ea                	mov    edx,ebp
c001f5ab:	88 c1                	mov    cl,al
c001f5ad:	d3 ea                	shr    edx,cl
c001f5af:	09 d6                	or     esi,edx
c001f5b1:	89 f0                	mov    eax,esi
c001f5b3:	89 fa                	mov    edx,edi
c001f5b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5b9:	89 d7                	mov    edi,edx
c001f5bb:	89 c6                	mov    esi,eax
c001f5bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5c1:	39 d7                	cmp    edi,edx
c001f5c3:	72 13                	jb     c001f5d8 <__udivdi3+0xec>
c001f5c5:	74 09                	je     c001f5d0 <__udivdi3+0xe4>
c001f5c7:	89 f0                	mov    eax,esi
c001f5c9:	31 db                	xor    ebx,ebx
c001f5cb:	e9 43 ff ff ff       	jmp    c001f513 <__udivdi3+0x27>
c001f5d0:	88 d9                	mov    cl,bl
c001f5d2:	d3 e5                	shl    ebp,cl
c001f5d4:	39 c5                	cmp    ebp,eax
c001f5d6:	73 ef                	jae    c001f5c7 <__udivdi3+0xdb>
c001f5d8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5db:	31 db                	xor    ebx,ebx
c001f5dd:	e9 31 ff ff ff       	jmp    c001f513 <__udivdi3+0x27>
c001f5e2:	66 90                	xchg   ax,ax
c001f5e4:	31 c0                	xor    eax,eax
c001f5e6:	e9 28 ff ff ff       	jmp    c001f513 <__udivdi3+0x27>
c001f5eb:	90                   	nop

c001f5ec <__umoddi3>:
c001f5ec:	55                   	push   ebp
c001f5ed:	57                   	push   edi
c001f5ee:	56                   	push   esi
c001f5ef:	53                   	push   ebx
c001f5f0:	83 ec 1c             	sub    esp,0x1c
c001f5f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f5f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f5fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f5ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f603:	89 da                	mov    edx,ebx
c001f605:	85 c0                	test   eax,eax
c001f607:	75 37                	jne    c001f640 <__umoddi3+0x54>
c001f609:	39 df                	cmp    edi,ebx
c001f60b:	76 13                	jbe    c001f620 <__umoddi3+0x34>
c001f60d:	89 f0                	mov    eax,esi
c001f60f:	f7 f7                	div    edi
c001f611:	89 d0                	mov    eax,edx
c001f613:	31 d2                	xor    edx,edx
c001f615:	83 c4 1c             	add    esp,0x1c
c001f618:	5b                   	pop    ebx
c001f619:	5e                   	pop    esi
c001f61a:	5f                   	pop    edi
c001f61b:	5d                   	pop    ebp
c001f61c:	c3                   	ret    
c001f61d:	8d 76 00             	lea    esi,[esi+0x0]
c001f620:	89 fd                	mov    ebp,edi
c001f622:	85 ff                	test   edi,edi
c001f624:	75 0b                	jne    c001f631 <__umoddi3+0x45>
c001f626:	b8 01 00 00 00       	mov    eax,0x1
c001f62b:	31 d2                	xor    edx,edx
c001f62d:	f7 f7                	div    edi
c001f62f:	89 c5                	mov    ebp,eax
c001f631:	89 d8                	mov    eax,ebx
c001f633:	31 d2                	xor    edx,edx
c001f635:	f7 f5                	div    ebp
c001f637:	89 f0                	mov    eax,esi
c001f639:	f7 f5                	div    ebp
c001f63b:	89 d0                	mov    eax,edx
c001f63d:	eb d4                	jmp    c001f613 <__umoddi3+0x27>
c001f63f:	90                   	nop
c001f640:	89 f1                	mov    ecx,esi
c001f642:	39 d8                	cmp    eax,ebx
c001f644:	76 0a                	jbe    c001f650 <__umoddi3+0x64>
c001f646:	89 f0                	mov    eax,esi
c001f648:	83 c4 1c             	add    esp,0x1c
c001f64b:	5b                   	pop    ebx
c001f64c:	5e                   	pop    esi
c001f64d:	5f                   	pop    edi
c001f64e:	5d                   	pop    ebp
c001f64f:	c3                   	ret    
c001f650:	0f bd e8             	bsr    ebp,eax
c001f653:	83 f5 1f             	xor    ebp,0x1f
c001f656:	75 1c                	jne    c001f674 <__umoddi3+0x88>
c001f658:	39 d8                	cmp    eax,ebx
c001f65a:	72 04                	jb     c001f660 <__umoddi3+0x74>
c001f65c:	39 f7                	cmp    edi,esi
c001f65e:	77 08                	ja     c001f668 <__umoddi3+0x7c>
c001f660:	89 da                	mov    edx,ebx
c001f662:	29 fe                	sub    esi,edi
c001f664:	19 c2                	sbb    edx,eax
c001f666:	89 f1                	mov    ecx,esi
c001f668:	89 c8                	mov    eax,ecx
c001f66a:	83 c4 1c             	add    esp,0x1c
c001f66d:	5b                   	pop    ebx
c001f66e:	5e                   	pop    esi
c001f66f:	5f                   	pop    edi
c001f670:	5d                   	pop    ebp
c001f671:	c3                   	ret    
c001f672:	66 90                	xchg   ax,ax
c001f674:	ba 20 00 00 00       	mov    edx,0x20
c001f679:	29 ea                	sub    edx,ebp
c001f67b:	89 e9                	mov    ecx,ebp
c001f67d:	d3 e0                	shl    eax,cl
c001f67f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f683:	89 f8                	mov    eax,edi
c001f685:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f689:	88 d1                	mov    cl,dl
c001f68b:	d3 e8                	shr    eax,cl
c001f68d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f691:	09 c1                	or     ecx,eax
c001f693:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f697:	89 e9                	mov    ecx,ebp
c001f699:	d3 e7                	shl    edi,cl
c001f69b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f69f:	89 d8                	mov    eax,ebx
c001f6a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6a5:	88 d1                	mov    cl,dl
c001f6a7:	d3 e8                	shr    eax,cl
c001f6a9:	89 c7                	mov    edi,eax
c001f6ab:	89 e9                	mov    ecx,ebp
c001f6ad:	d3 e3                	shl    ebx,cl
c001f6af:	89 f0                	mov    eax,esi
c001f6b1:	88 d1                	mov    cl,dl
c001f6b3:	d3 e8                	shr    eax,cl
c001f6b5:	09 d8                	or     eax,ebx
c001f6b7:	89 e9                	mov    ecx,ebp
c001f6b9:	d3 e6                	shl    esi,cl
c001f6bb:	89 f3                	mov    ebx,esi
c001f6bd:	89 fa                	mov    edx,edi
c001f6bf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6c3:	89 d1                	mov    ecx,edx
c001f6c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6c9:	89 c6                	mov    esi,eax
c001f6cb:	89 d7                	mov    edi,edx
c001f6cd:	39 d1                	cmp    ecx,edx
c001f6cf:	72 27                	jb     c001f6f8 <__umoddi3+0x10c>
c001f6d1:	74 21                	je     c001f6f4 <__umoddi3+0x108>
c001f6d3:	89 ca                	mov    edx,ecx
c001f6d5:	29 f3                	sub    ebx,esi
c001f6d7:	19 fa                	sbb    edx,edi
c001f6d9:	89 d0                	mov    eax,edx
c001f6db:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6df:	d3 e0                	shl    eax,cl
c001f6e1:	89 e9                	mov    ecx,ebp
c001f6e3:	d3 eb                	shr    ebx,cl
c001f6e5:	09 d8                	or     eax,ebx
c001f6e7:	d3 ea                	shr    edx,cl
c001f6e9:	83 c4 1c             	add    esp,0x1c
c001f6ec:	5b                   	pop    ebx
c001f6ed:	5e                   	pop    esi
c001f6ee:	5f                   	pop    edi
c001f6ef:	5d                   	pop    ebp
c001f6f0:	c3                   	ret    
c001f6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001f6f4:	39 c3                	cmp    ebx,eax
c001f6f6:	73 db                	jae    c001f6d3 <__umoddi3+0xe7>
c001f6f8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6fc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f700:	89 d7                	mov    edi,edx
c001f702:	89 c6                	mov    esi,eax
c001f704:	eb cd                	jmp    c001f6d3 <__umoddi3+0xe7>
c001f706:	66 90                	xchg   ax,ax
c001f708:	66 90                	xchg   ax,ax
c001f70a:	66 90                	xchg   ax,ax
c001f70c:	66 90                	xchg   ax,ax
c001f70e:	66 90                	xchg   ax,ax

c001f710 <fabs>:
c001f710:	83 ec 0c             	sub    esp,0xc
c001f713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f717:	89 04 24             	mov    DWORD PTR [esp],eax
c001f71a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f71e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f723:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f727:	dd 04 24             	fld    QWORD PTR [esp]
c001f72a:	83 c4 0c             	add    esp,0xc
c001f72d:	c3                   	ret    
c001f72e:	66 90                	xchg   ax,ax

c001f730 <lrint>:
c001f730:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f734:	83 ec 04             	sub    esp,0x4
c001f737:	db 1c 24             	fistp  DWORD PTR [esp]
c001f73a:	58                   	pop    eax
c001f73b:	c3                   	ret    

c001f73c <lrintf>:
c001f73c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f740:	83 ec 04             	sub    esp,0x4
c001f743:	db 1c 24             	fistp  DWORD PTR [esp]
c001f746:	58                   	pop    eax
c001f747:	c3                   	ret    

Disassembly of section .init:

c001f748 <_init>:
c001f748:	55                   	push   ebp
c001f749:	89 e5                	mov    ebp,esp
c001f74b:	e8 c8 09 fe ff       	call   c0000118 <frame_dummy>
c001f750:	e8 a3 fa ff ff       	call   c001f1f8 <__do_global_ctors_aux>
c001f755:	5d                   	pop    ebp
c001f756:	c3                   	ret    

Disassembly of section .fini:

c001f757 <_fini>:
c001f757:	55                   	push   ebp
c001f758:	89 e5                	mov    ebp,esp
c001f75a:	e8 49 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f75f:	5d                   	pop    ebp
c001f760:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f762 <Computer::~Computer()>:
c001f762:	83 ec 0c             	sub    esp,0xc
c001f765:	ba 84 12 02 c0       	mov    edx,0xc0021284
c001f76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76e:	89 10                	mov    DWORD PTR [eax],edx
c001f770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	50                   	push   eax
c001f778:	e8 51 0d ff ff       	call   c00104ce <Device::~Device()>
c001f77d:	83 c4 10             	add    esp,0x10
c001f780:	90                   	nop
c001f781:	83 c4 0c             	add    esp,0xc
c001f784:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f786 <Computer::~Computer()>:
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	83 ec 0c             	sub    esp,0xc
c001f78c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f790:	e8 cd ff ff ff       	call   c001f762 <Computer::~Computer()>
c001f795:	83 c4 10             	add    esp,0x10
c001f798:	83 ec 08             	sub    esp,0x8
c001f79b:	68 ec 01 00 00       	push   0x1ec
c001f7a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a4:	e8 44 f9 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001f7a9:	83 c4 10             	add    esp,0x10
c001f7ac:	83 c4 0c             	add    esp,0xc
c001f7af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7b0 <idleCommon()>:
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	e8 79 92 ff ff       	call   c0018a31 <lockScheduler()>
c001f7b8:	e8 bd 95 ff ff       	call   c0018d7a <schedule()>
c001f7bd:	83 c4 0c             	add    esp,0xc
c001f7c0:	e9 6e 92 ff ff       	jmp    c0018a33 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7c5 <CPU::readCR3()>:
c001f7c5:	83 ec 10             	sub    esp,0x10
c001f7c8:	0f 20 d8             	mov    eax,cr3
c001f7cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7d3:	83 c4 10             	add    esp,0x10
c001f7d6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7d7 <CPU::writeCR3(unsigned long)>:
c001f7d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7db:	0f 22 d8             	mov    cr3,eax
c001f7de:	90                   	nop
c001f7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f7e0 <LinkedList<UnixFile>::~LinkedList()>:
c001f7e0:	90                   	nop
c001f7e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f7e2 <LinkedList<UnixFile>::LinkedList()>:
c001f7e2:	83 ec 0c             	sub    esp,0xc
c001f7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f825:	83 ec 0c             	sub    esp,0xc
c001f828:	68 7d 15 02 c0       	push   0xc002157d
c001f82d:	e8 e1 f9 fe ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001f832:	83 c4 10             	add    esp,0x10
c001f835:	90                   	nop
c001f836:	83 c4 0c             	add    esp,0xc
c001f839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f83a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f83a:	83 ec 0c             	sub    esp,0xc
c001f83d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f842:	75 10                	jne    c001f854 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f844:	83 ec 0c             	sub    esp,0xc
c001f847:	68 98 15 02 c0       	push   0xc0021598
c001f84c:	e8 d7 61 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001f851:	83 c4 10             	add    esp,0x10
c001f854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f858:	8b 00                	mov    eax,DWORD PTR [eax]
c001f85a:	85 c0                	test   eax,eax
c001f85c:	74 34                	je     c001f892 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f865:	85 c0                	test   eax,eax
c001f867:	74 29                	je     c001f892 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f874:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f87f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f889:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f890:	eb 65                	jmp    c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f896:	8b 00                	mov    eax,DWORD PTR [eax]
c001f898:	85 c0                	test   eax,eax
c001f89a:	75 4b                	jne    c001f8e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a3:	85 c0                	test   eax,eax
c001f8a5:	75 40                	jne    c001f8e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8af:	89 10                	mov    DWORD PTR [eax],edx
c001f8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8d1:	85 c0                	test   eax,eax
c001f8d3:	74 22                	je     c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8d5:	83 ec 0c             	sub    esp,0xc
c001f8d8:	68 ba 15 02 c0       	push   0xc00215ba
c001f8dd:	e8 46 61 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001f8e2:	83 c4 10             	add    esp,0x10
c001f8e5:	eb 10                	jmp    c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	68 c4 15 02 c0       	push   0xc00215c4
c001f8ef:	e8 34 61 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001f8f4:	83 c4 10             	add    esp,0x10
c001f8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8fe:	8d 50 01             	lea    edx,[eax+0x1]
c001f901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f905:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f908:	90                   	nop
c001f909:	83 c4 0c             	add    esp,0xc
c001f90c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f90e <LinkedList<UnixFile>::getFirstElement()>:
c001f90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f912:	8b 00                	mov    eax,DWORD PTR [eax]
c001f914:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f916 <LinkedList<UnixFile>::removeFirst()>:
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f91f:	85 c0                	test   eax,eax
c001f921:	75 12                	jne    c001f935 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f923:	83 ec 0c             	sub    esp,0xc
c001f926:	68 d0 15 02 c0       	push   0xc00215d0
c001f92b:	e8 f8 60 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001f930:	83 c4 10             	add    esp,0x10
c001f933:	eb 7e                	jmp    c001f9b3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f93c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f93f:	85 c0                	test   eax,eax
c001f941:	74 10                	je     c001f953 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 1b 16 02 c0       	push   0xc002161b
c001f94b:	e8 d8 60 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f957:	8b 00                	mov    eax,DWORD PTR [eax]
c001f959:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95c:	85 c0                	test   eax,eax
c001f95e:	75 33                	jne    c001f993 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f964:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f97c:	83 f8 01             	cmp    eax,0x1
c001f97f:	74 21                	je     c001f9a2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	68 f4 15 02 c0       	push   0xc00215f4
c001f989:	e8 9a 60 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	eb 0f                	jmp    c001f9a2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f997:	8b 00                	mov    eax,DWORD PTR [eax]
c001f999:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	89 10                	mov    DWORD PTR [eax],edx
c001f9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9a9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9b3:	83 c4 0c             	add    esp,0xc
c001f9b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9b8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9c0 <DriverlessDevice::~DriverlessDevice()>:
c001f9c0:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c001f9c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c9:	89 10                	mov    DWORD PTR [eax],edx
c001f9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9cf:	50                   	push   eax
c001f9d0:	e8 f9 0a ff ff       	call   c00104ce <Device::~Device()>
c001f9d5:	83 c4 04             	add    esp,0x4
c001f9d8:	90                   	nop
c001f9d9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9da <DriverlessDevice::~DriverlessDevice()>:
c001f9da:	83 ec 0c             	sub    esp,0xc
c001f9dd:	83 ec 0c             	sub    esp,0xc
c001f9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9e4:	e8 d7 ff ff ff       	call   c001f9c0 <DriverlessDevice::~DriverlessDevice()>
c001f9e9:	83 c4 10             	add    esp,0x10
c001f9ec:	83 ec 08             	sub    esp,0x8
c001f9ef:	68 58 01 00 00       	push   0x158
c001f9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f8:	e8 f0 f6 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001f9fd:	83 c4 10             	add    esp,0x10
c001fa00:	83 c4 0c             	add    esp,0xc
c001fa03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa04 <LinkedList<Device>::addElement(Device*)>:
c001fa04:	83 ec 0c             	sub    esp,0xc
c001fa07:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa0c:	75 10                	jne    c001fa1e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa0e:	83 ec 0c             	sub    esp,0xc
c001fa11:	68 98 15 02 c0       	push   0xc0021598
c001fa16:	e8 0d 60 ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa22:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa24:	85 c0                	test   eax,eax
c001fa26:	74 3a                	je     c001fa62 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa2f:	85 c0                	test   eax,eax
c001fa31:	74 2f                	je     c001fa62 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa3e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa56:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa60:	eb 68                	jmp    c001faca <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa66:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa68:	85 c0                	test   eax,eax
c001fa6a:	75 4e                	jne    c001faba <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa73:	85 c0                	test   eax,eax
c001fa75:	75 43                	jne    c001faba <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa7f:	89 10                	mov    DWORD PTR [eax],edx
c001fa81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa93:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faa4:	85 c0                	test   eax,eax
c001faa6:	74 22                	je     c001faca <LinkedList<Device>::addElement(Device*)+0xc6>
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	68 ba 15 02 c0       	push   0xc00215ba
c001fab0:	e8 73 5f ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fab5:	83 c4 10             	add    esp,0x10
c001fab8:	eb 10                	jmp    c001faca <LinkedList<Device>::addElement(Device*)+0xc6>
c001faba:	83 ec 0c             	sub    esp,0xc
c001fabd:	68 c4 15 02 c0       	push   0xc00215c4
c001fac2:	e8 61 5f ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fac7:	83 c4 10             	add    esp,0x10
c001faca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001face:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fad1:	8d 50 01             	lea    edx,[eax+0x1]
c001fad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fadb:	90                   	nop
c001fadc:	83 c4 0c             	add    esp,0xc
c001fadf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fae0 <LinkedList<Device>::LinkedList()>:
c001fae0:	83 ec 0c             	sub    esp,0xc
c001fae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	68 7d 15 02 c0       	push   0xc002157d
c001fb2b:	e8 e3 f6 fe ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001fb30:	83 c4 10             	add    esp,0x10
c001fb33:	90                   	nop
c001fb34:	83 c4 0c             	add    esp,0xc
c001fb37:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb38 <CPU::readCR0()>:
c001fb38:	83 ec 10             	sub    esp,0x10
c001fb3b:	0f 20 c0             	mov    eax,cr0
c001fb3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb46:	83 c4 10             	add    esp,0x10
c001fb49:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb4a <CPU::writeCR0(unsigned long)>:
c001fb4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4e:	0f 22 c0             	mov    cr0,eax
c001fb51:	90                   	nop
c001fb52:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb53 <CPU::readDR0()>:
c001fb53:	83 ec 10             	sub    esp,0x10
c001fb56:	0f 21 c0             	mov    eax,db0
c001fb59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb65 <CPU::readDR1()>:
c001fb65:	83 ec 10             	sub    esp,0x10
c001fb68:	0f 21 c8             	mov    eax,db1
c001fb6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb73:	83 c4 10             	add    esp,0x10
c001fb76:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb77 <CPU::readDR2()>:
c001fb77:	83 ec 10             	sub    esp,0x10
c001fb7a:	0f 21 d0             	mov    eax,db2
c001fb7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb85:	83 c4 10             	add    esp,0x10
c001fb88:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fb89 <CPU::readDR3()>:
c001fb89:	83 ec 10             	sub    esp,0x10
c001fb8c:	0f 21 d8             	mov    eax,db3
c001fb8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fb9b <CPU::readDR6()>:
c001fb9b:	83 ec 10             	sub    esp,0x10
c001fb9e:	0f 21 f0             	mov    eax,db6
c001fba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba9:	83 c4 10             	add    esp,0x10
c001fbac:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbad <CPU::readDR7()>:
c001fbad:	83 ec 10             	sub    esp,0x10
c001fbb0:	0f 21 f8             	mov    eax,db7
c001fbb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbce:	85 c0                	test   eax,eax
c001fbd0:	75 0e                	jne    c001fbe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbd9:	85 c0                	test   eax,eax
c001fbdb:	75 03                	jne    c001fbe0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbdd:	b0 01                	mov    al,0x1
c001fbdf:	c3                   	ret    
c001fbe0:	b0 00                	mov    al,0x0
c001fbe2:	90                   	nop
c001fbe3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbed:	85 c0                	test   eax,eax
c001fbef:	75 15                	jne    c001fc06 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fbf1:	83 ec 0c             	sub    esp,0xc
c001fbf4:	68 d0 15 02 c0       	push   0xc00215d0
c001fbf9:	e8 2a 5e ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fbfe:	83 c4 10             	add    esp,0x10
c001fc01:	e9 88 00 00 00       	jmp    c001fc8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc10:	85 c0                	test   eax,eax
c001fc12:	0f 95 c0             	setne  al
c001fc15:	84 c0                	test   al,al
c001fc17:	74 10                	je     c001fc29 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc19:	83 ec 0c             	sub    esp,0xc
c001fc1c:	68 1b 16 02 c0       	push   0xc002161b
c001fc21:	e8 02 5e ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fc26:	83 c4 10             	add    esp,0x10
c001fc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc32:	85 c0                	test   eax,eax
c001fc34:	0f 94 c0             	sete   al
c001fc37:	84 c0                	test   al,al
c001fc39:	74 33                	je     c001fc6e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc57:	83 f8 01             	cmp    eax,0x1
c001fc5a:	74 21                	je     c001fc7d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	68 f4 15 02 c0       	push   0xc00215f4
c001fc64:	e8 bf 5d ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fc69:	83 c4 10             	add    esp,0x10
c001fc6c:	eb 0f                	jmp    c001fc7d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc72:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc74:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7b:	89 10                	mov    DWORD PTR [eax],edx
c001fc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc84:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc8e:	83 c4 0c             	add    esp,0xc
c001fc91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fc92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fc92:	83 ec 0c             	sub    esp,0xc
c001fc95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc9a:	75 10                	jne    c001fcac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	68 98 15 02 c0       	push   0xc0021598
c001fca4:	e8 7f 5d ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb2:	85 c0                	test   eax,eax
c001fcb4:	74 34                	je     c001fcea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcbd:	85 c0                	test   eax,eax
c001fcbf:	74 29                	je     c001fcea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fccc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fce8:	eb 65                	jmp    c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcf0:	85 c0                	test   eax,eax
c001fcf2:	75 4b                	jne    c001fd3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcfb:	85 c0                	test   eax,eax
c001fcfd:	75 40                	jne    c001fd3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd07:	89 10                	mov    DWORD PTR [eax],edx
c001fd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd29:	85 c0                	test   eax,eax
c001fd2b:	74 22                	je     c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd2d:	83 ec 0c             	sub    esp,0xc
c001fd30:	68 ba 15 02 c0       	push   0xc00215ba
c001fd35:	e8 ee 5c ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fd3a:	83 c4 10             	add    esp,0x10
c001fd3d:	eb 10                	jmp    c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd3f:	83 ec 0c             	sub    esp,0xc
c001fd42:	68 c4 15 02 c0       	push   0xc00215c4
c001fd47:	e8 dc 5c ff ff       	call   c0015a28 <Krnl::panic(char const*)>
c001fd4c:	83 c4 10             	add    esp,0x10
c001fd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd53:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd56:	8d 50 01             	lea    edx,[eax+0x1]
c001fd59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd60:	90                   	nop
c001fd61:	83 c4 0c             	add    esp,0xc
c001fd64:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd66 <ACPI::~ACPI()>:
c001fd66:	83 ec 0c             	sub    esp,0xc
c001fd69:	ba 2c 24 02 c0       	mov    edx,0xc002242c
c001fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd72:	89 10                	mov    DWORD PTR [eax],edx
c001fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd78:	83 ec 0c             	sub    esp,0xc
c001fd7b:	50                   	push   eax
c001fd7c:	e8 4d 07 ff ff       	call   c00104ce <Device::~Device()>
c001fd81:	83 c4 10             	add    esp,0x10
c001fd84:	90                   	nop
c001fd85:	83 c4 0c             	add    esp,0xc
c001fd88:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fd8a <ACPI::~ACPI()>:
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	83 ec 0c             	sub    esp,0xc
c001fd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd94:	e8 cd ff ff ff       	call   c001fd66 <ACPI::~ACPI()>
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	83 ec 08             	sub    esp,0x8
c001fd9f:	68 68 22 00 00       	push   0x2268
c001fda4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda8:	e8 40 f3 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001fdad:	83 c4 10             	add    esp,0x10
c001fdb0:	83 c4 0c             	add    esp,0xc
c001fdb3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdb4 <CPU::~CPU()>:
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	ba 1c 28 02 c0       	mov    edx,0xc002281c
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	89 10                	mov    DWORD PTR [eax],edx
c001fdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	50                   	push   eax
c001fdca:	e8 ff 06 ff ff       	call   c00104ce <Device::~Device()>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	90                   	nop
c001fdd3:	83 c4 0c             	add    esp,0xc
c001fdd6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fdd8 <CPU::~CPU()>:
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	83 ec 0c             	sub    esp,0xc
c001fdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde2:	e8 cd ff ff ff       	call   c001fdb4 <CPU::~CPU()>
c001fde7:	83 c4 10             	add    esp,0x10
c001fdea:	83 ec 08             	sub    esp,0x8
c001fded:	68 98 11 00 00       	push   0x1198
c001fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf6:	e8 f2 f2 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	83 c4 0c             	add    esp,0xc
c001fe01:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe02 <CPU::readCR4()>:
c001fe02:	83 ec 10             	sub    esp,0x10
c001fe05:	0f 20 e0             	mov    eax,cr4
c001fe08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe10:	83 c4 10             	add    esp,0x10
c001fe13:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe14 <CPU::writeDR7(unsigned long)>:
c001fe14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe18:	0f 23 f8             	mov    db7,eax
c001fe1b:	90                   	nop
c001fe1c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe1d <CPU::writeCR4(unsigned long)>:
c001fe1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe21:	0f 22 e0             	mov    cr4,eax
c001fe24:	90                   	nop
c001fe25:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe26 <CPU::readCR2()>:
c001fe26:	83 ec 10             	sub    esp,0x10
c001fe29:	0f 20 d0             	mov    eax,cr2
c001fe2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe34:	83 c4 10             	add    esp,0x10
c001fe37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe38 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe38:	90                   	nop
c001fe39:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe3a <ThreadControlBlock::ThreadControlBlock()>:
c001fe3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe3e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe49:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe54:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe72:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe76:	90                   	nop
c001fe77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001febb:	83 ec 0c             	sub    esp,0xc
c001febe:	68 7d 15 02 c0       	push   0xc002157d
c001fec3:	e8 4b f3 fe ff       	call   c000f213 <Dbg::kprintf(char const*, ...)>
c001fec8:	83 c4 10             	add    esp,0x10
c001fecb:	90                   	nop
c001fecc:	83 c4 0c             	add    esp,0xc
c001fecf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fed0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fed4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fed7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fed8 <PCI::~PCI()>:
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	ba fc 34 02 c0       	mov    edx,0xc00234fc
c001fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee4:	89 10                	mov    DWORD PTR [eax],edx
c001fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feea:	83 ec 0c             	sub    esp,0xc
c001feed:	50                   	push   eax
c001feee:	e8 e5 ff fe ff       	call   c000fed8 <Bus::~Bus()>
c001fef3:	83 c4 10             	add    esp,0x10
c001fef6:	90                   	nop
c001fef7:	83 c4 0c             	add    esp,0xc
c001fefa:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fefc <PCI::~PCI()>:
c001fefc:	83 ec 0c             	sub    esp,0xc
c001feff:	83 ec 0c             	sub    esp,0xc
c001ff02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff06:	e8 cd ff ff ff       	call   c001fed8 <PCI::~PCI()>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	83 ec 08             	sub    esp,0x8
c001ff11:	68 58 01 00 00       	push   0x158
c001ff16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff1a:	e8 ce f1 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001ff1f:	83 c4 10             	add    esp,0x10
c001ff22:	83 c4 0c             	add    esp,0xc
c001ff25:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff26 <IDE::~IDE()>:
c001ff26:	83 ec 0c             	sub    esp,0xc
c001ff29:	ba 60 37 02 c0       	mov    edx,0xc0023760
c001ff2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff32:	89 10                	mov    DWORD PTR [eax],edx
c001ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff38:	83 ec 0c             	sub    esp,0xc
c001ff3b:	50                   	push   eax
c001ff3c:	e8 9f 0a ff ff       	call   c00109e0 <HardDiskController::~HardDiskController()>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	90                   	nop
c001ff45:	83 c4 0c             	add    esp,0xc
c001ff48:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff4a <IDE::~IDE()>:
c001ff4a:	83 ec 0c             	sub    esp,0xc
c001ff4d:	83 ec 0c             	sub    esp,0xc
c001ff50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff54:	e8 cd ff ff ff       	call   c001ff26 <IDE::~IDE()>
c001ff59:	83 c4 10             	add    esp,0x10
c001ff5c:	83 ec 08             	sub    esp,0x8
c001ff5f:	68 70 02 00 00       	push   0x270
c001ff64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff68:	e8 80 f1 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001ff6d:	83 c4 10             	add    esp,0x10
c001ff70:	83 c4 0c             	add    esp,0xc
c001ff73:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff74 <ATA::~ATA()>:
c001ff74:	83 ec 0c             	sub    esp,0xc
c001ff77:	ba b0 37 02 c0       	mov    edx,0xc00237b0
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	89 10                	mov    DWORD PTR [eax],edx
c001ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff86:	83 ec 0c             	sub    esp,0xc
c001ff89:	50                   	push   eax
c001ff8a:	e8 2f 0b ff ff       	call   c0010abe <PhysicalDisk::~PhysicalDisk()>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	90                   	nop
c001ff93:	83 c4 0c             	add    esp,0xc
c001ff96:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ff98 <ATA::~ATA()>:
c001ff98:	83 ec 0c             	sub    esp,0xc
c001ff9b:	83 ec 0c             	sub    esp,0xc
c001ff9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa2:	e8 cd ff ff ff       	call   c001ff74 <ATA::~ATA()>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	83 ec 08             	sub    esp,0x8
c001ffad:	68 7c 01 00 00       	push   0x17c
c001ffb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb6:	e8 32 f1 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c001ffbb:	83 c4 10             	add    esp,0x10
c001ffbe:	83 c4 0c             	add    esp,0xc
c001ffc1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffc2 <ATAPI::~ATAPI()>:
c001ffc2:	83 ec 0c             	sub    esp,0xc
c001ffc5:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c001ffca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffce:	89 10                	mov    DWORD PTR [eax],edx
c001ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	50                   	push   eax
c001ffd8:	e8 e1 0a ff ff       	call   c0010abe <PhysicalDisk::~PhysicalDisk()>
c001ffdd:	83 c4 10             	add    esp,0x10
c001ffe0:	90                   	nop
c001ffe1:	83 c4 0c             	add    esp,0xc
c001ffe4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ffe6 <ATAPI::~ATAPI()>:
c001ffe6:	83 ec 0c             	sub    esp,0xc
c001ffe9:	83 ec 0c             	sub    esp,0xc
c001ffec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fff0:	e8 cd ff ff ff       	call   c001ffc2 <ATAPI::~ATAPI()>
c001fff5:	83 c4 10             	add    esp,0x10
c001fff8:	83 ec 08             	sub    esp,0x8
c001fffb:	68 80 01 00 00       	push   0x180
c0020000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020004:	e8 e4 f0 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0020009:	83 c4 10             	add    esp,0x10
c002000c:	83 c4 0c             	add    esp,0xc
c002000f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020010 <AVX::~AVX()>:
c0020010:	83 ec 0c             	sub    esp,0xc
c0020013:	ba 58 38 02 c0       	mov    edx,0xc0023858
c0020018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001c:	89 10                	mov    DWORD PTR [eax],edx
c002001e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020022:	83 ec 0c             	sub    esp,0xc
c0020025:	50                   	push   eax
c0020026:	e8 17 0b ff ff       	call   c0010b42 <FPU::~FPU()>
c002002b:	83 c4 10             	add    esp,0x10
c002002e:	90                   	nop
c002002f:	83 c4 0c             	add    esp,0xc
c0020032:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020034 <AVX::~AVX()>:
c0020034:	83 ec 0c             	sub    esp,0xc
c0020037:	83 ec 0c             	sub    esp,0xc
c002003a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002003e:	e8 cd ff ff ff       	call   c0020010 <AVX::~AVX()>
c0020043:	83 c4 10             	add    esp,0x10
c0020046:	83 ec 08             	sub    esp,0x8
c0020049:	68 58 01 00 00       	push   0x158
c002004e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020052:	e8 96 f0 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0020057:	83 c4 10             	add    esp,0x10
c002005a:	83 c4 0c             	add    esp,0xc
c002005d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002005e <MMX::~MMX()>:
c002005e:	83 ec 0c             	sub    esp,0xc
c0020061:	ba 98 38 02 c0       	mov    edx,0xc0023898
c0020066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006a:	89 10                	mov    DWORD PTR [eax],edx
c002006c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	50                   	push   eax
c0020074:	e8 c9 0a ff ff       	call   c0010b42 <FPU::~FPU()>
c0020079:	83 c4 10             	add    esp,0x10
c002007c:	90                   	nop
c002007d:	83 c4 0c             	add    esp,0xc
c0020080:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0020082 <MMX::~MMX()>:
c0020082:	83 ec 0c             	sub    esp,0xc
c0020085:	83 ec 0c             	sub    esp,0xc
c0020088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002008c:	e8 cd ff ff ff       	call   c002005e <MMX::~MMX()>
c0020091:	83 c4 10             	add    esp,0x10
c0020094:	83 ec 08             	sub    esp,0x8
c0020097:	68 58 01 00 00       	push   0x158
c002009c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200a0:	e8 48 f0 fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00200a5:	83 c4 10             	add    esp,0x10
c00200a8:	83 c4 0c             	add    esp,0xc
c00200ab:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200ac <SSE::~SSE()>:
c00200ac:	83 ec 0c             	sub    esp,0xc
c00200af:	ba d8 38 02 c0       	mov    edx,0xc00238d8
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	89 10                	mov    DWORD PTR [eax],edx
c00200ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	50                   	push   eax
c00200c2:	e8 7b 0a ff ff       	call   c0010b42 <FPU::~FPU()>
c00200c7:	83 c4 10             	add    esp,0x10
c00200ca:	90                   	nop
c00200cb:	83 c4 0c             	add    esp,0xc
c00200ce:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200d0 <SSE::~SSE()>:
c00200d0:	83 ec 0c             	sub    esp,0xc
c00200d3:	83 ec 0c             	sub    esp,0xc
c00200d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200da:	e8 cd ff ff ff       	call   c00200ac <SSE::~SSE()>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	83 ec 08             	sub    esp,0x8
c00200e5:	68 58 01 00 00       	push   0x158
c00200ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ee:	e8 fa ef fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00200f3:	83 c4 10             	add    esp,0x10
c00200f6:	83 c4 0c             	add    esp,0xc
c00200f9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00200fa <x87::~x87()>:
c00200fa:	83 ec 0c             	sub    esp,0xc
c00200fd:	ba 18 39 02 c0       	mov    edx,0xc0023918
c0020102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020106:	89 10                	mov    DWORD PTR [eax],edx
c0020108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010c:	83 ec 0c             	sub    esp,0xc
c002010f:	50                   	push   eax
c0020110:	e8 2d 0a ff ff       	call   c0010b42 <FPU::~FPU()>
c0020115:	83 c4 10             	add    esp,0x10
c0020118:	90                   	nop
c0020119:	83 c4 0c             	add    esp,0xc
c002011c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002011e <x87::~x87()>:
c002011e:	83 ec 0c             	sub    esp,0xc
c0020121:	83 ec 0c             	sub    esp,0xc
c0020124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020128:	e8 cd ff ff ff       	call   c00200fa <x87::~x87()>
c002012d:	83 c4 10             	add    esp,0x10
c0020130:	83 ec 08             	sub    esp,0x8
c0020133:	68 58 01 00 00       	push   0x158
c0020138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002013c:	e8 ac ef fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0020141:	83 c4 10             	add    esp,0x10
c0020144:	83 c4 0c             	add    esp,0xc
c0020147:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020148 <IOAPIC::~IOAPIC()>:
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	ba 70 3a 02 c0       	mov    edx,0xc0023a70
c0020150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020154:	89 10                	mov    DWORD PTR [eax],edx
c0020156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002015a:	83 ec 0c             	sub    esp,0xc
c002015d:	50                   	push   eax
c002015e:	e8 6b 03 ff ff       	call   c00104ce <Device::~Device()>
c0020163:	83 c4 10             	add    esp,0x10
c0020166:	90                   	nop
c0020167:	83 c4 0c             	add    esp,0xc
c002016a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002016c <IOAPIC::~IOAPIC()>:
c002016c:	83 ec 0c             	sub    esp,0xc
c002016f:	83 ec 0c             	sub    esp,0xc
c0020172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020176:	e8 cd ff ff ff       	call   c0020148 <IOAPIC::~IOAPIC()>
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	83 ec 08             	sub    esp,0x8
c0020181:	68 68 01 00 00       	push   0x168
c0020186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002018a:	e8 5e ef fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c002018f:	83 c4 10             	add    esp,0x10
c0020192:	83 c4 0c             	add    esp,0xc
c0020195:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0020196 <APIC::~APIC()>:
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	ba 28 3a 02 c0       	mov    edx,0xc0023a28
c002019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a2:	89 10                	mov    DWORD PTR [eax],edx
c00201a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	50                   	push   eax
c00201ac:	e8 5b 0e ff ff       	call   c001100c <InterruptController::~InterruptController()>
c00201b1:	83 c4 10             	add    esp,0x10
c00201b4:	90                   	nop
c00201b5:	83 c4 0c             	add    esp,0xc
c00201b8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201ba <APIC::~APIC()>:
c00201ba:	83 ec 0c             	sub    esp,0xc
c00201bd:	83 ec 0c             	sub    esp,0xc
c00201c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201c4:	e8 cd ff ff ff       	call   c0020196 <APIC::~APIC()>
c00201c9:	83 c4 10             	add    esp,0x10
c00201cc:	83 ec 08             	sub    esp,0x8
c00201cf:	68 58 21 00 00       	push   0x2158
c00201d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d8:	e8 10 ef fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	83 c4 0c             	add    esp,0xc
c00201e3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00201e4 <PIC::~PIC()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	ba c0 3a 02 c0       	mov    edx,0xc0023ac0
c00201ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f0:	89 10                	mov    DWORD PTR [eax],edx
c00201f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	50                   	push   eax
c00201fa:	e8 0d 0e ff ff       	call   c001100c <InterruptController::~InterruptController()>
c00201ff:	83 c4 10             	add    esp,0x10
c0020202:	90                   	nop
c0020203:	83 c4 0c             	add    esp,0xc
c0020206:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020208 <PIC::~PIC()>:
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	83 ec 0c             	sub    esp,0xc
c002020e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020212:	e8 cd ff ff ff       	call   c00201e4 <PIC::~PIC()>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	83 ec 08             	sub    esp,0x8
c002021d:	68 58 21 00 00       	push   0x2158
c0020222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020226:	e8 c2 ee fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	83 c4 0c             	add    esp,0xc
c0020231:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020232 <APICTimer::~APICTimer()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	ba 14 3b 02 c0       	mov    edx,0xc0023b14
c002023a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023e:	89 10                	mov    DWORD PTR [eax],edx
c0020240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	50                   	push   eax
c0020248:	e8 d3 2a ff ff       	call   c0012d20 <Timer::~Timer()>
c002024d:	83 c4 10             	add    esp,0x10
c0020250:	90                   	nop
c0020251:	83 c4 0c             	add    esp,0xc
c0020254:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020256 <APICTimer::~APICTimer()>:
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020260:	e8 cd ff ff ff       	call   c0020232 <APICTimer::~APICTimer()>
c0020265:	83 c4 10             	add    esp,0x10
c0020268:	83 ec 08             	sub    esp,0x8
c002026b:	68 60 01 00 00       	push   0x160
c0020270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020274:	e8 74 ee fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	83 c4 0c             	add    esp,0xc
c002027f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020280 <PIT::~PIT()>:
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	ba 64 3b 02 c0       	mov    edx,0xc0023b64
c0020288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028c:	89 10                	mov    DWORD PTR [eax],edx
c002028e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	50                   	push   eax
c0020296:	e8 85 2a ff ff       	call   c0012d20 <Timer::~Timer()>
c002029b:	83 c4 10             	add    esp,0x10
c002029e:	90                   	nop
c002029f:	83 c4 0c             	add    esp,0xc
c00202a2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202a4 <PIT::~PIT()>:
c00202a4:	83 ec 0c             	sub    esp,0xc
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ae:	e8 cd ff ff ff       	call   c0020280 <PIT::~PIT()>
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	83 ec 08             	sub    esp,0x8
c00202b9:	68 5c 01 00 00       	push   0x15c
c00202be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c2:	e8 26 ee fe ff       	call   c000f0ed <operator delete(void*, unsigned long)>
c00202c7:	83 c4 10             	add    esp,0x10
c00202ca:	83 c4 0c             	add    esp,0xc
c00202cd:	c3                   	ret    
