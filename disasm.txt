
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ec c1 00 00       	call   c000c20c <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 ef 01 00       	call   c001f018 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 fb 01 c0       	mov    ebx,0xc001fba2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ac fb 01 c0    	cmp    ebx,0xc001fbac
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c 3a 02 c0       	mov    eax,0xc0023a2c
c0000049:	3d 2c 3a 02 c0       	cmp    eax,0xc0023a2c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c 3a 02 c0       	push   0xc0023a2c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c 3a 02 c0       	mov    eax,0xc0023a2c
c0000075:	2d 2c 3a 02 c0       	sub    eax,0xc0023a2c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c 3a 02 c0       	push   0xc0023a2c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d cc 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bcc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b4 fb 01 c0       	mov    ebx,0xc001fbb4
c00000bb:	81 eb b0 fb 01 c0    	sub    ebx,0xc001fbb0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b0 fb 01 c0       	mov    esi,0xc001fbb0
c00000ca:	a1 d0 3b 02 c0       	mov    eax,ds:0xc0023bd0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 d0 3b 02 c0       	mov    ds:0xc0023bd0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 d0 3b 02 c0       	mov    eax,ds:0xc0023bd0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c 3a 02 c0       	push   0xc0023a2c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 cc 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023bcc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d4 3b 02 c0       	push   0xc0023bd4
c000012c:	68 2c 3a 02 c0       	push   0xc0023a2c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 63 ec 00 00       	call   c000eec2 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 9d 7c 01 00       	call   c0017f06 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 a3 80 01 00       	call   c0018333 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 58 86 01 00       	call   c00188f1 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 5e 7c 01 00       	call   c0017f06 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 10 40 02 c0 	lgdtd  ds:0xc0024010
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 ea 0d 01 c0       	mov    ecx,0xc0010dea
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 ea 0d 01 c0       	mov    ecx,0xc0010dea
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	01 c1                	add    ecx,eax
c0000613:	89 c2                	mov    edx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d ec 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bec
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	a3 ec 3b 02 c0       	mov    ds:0xc0023bec,eax
c0000680:	5a                   	pop    edx
c0000681:	a1 ec 3b 02 c0       	mov    eax,ds:0xc0023bec
c0000686:	59                   	pop    ecx
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 ec 3b 02 c0    	mov    DWORD PTR ds:0xc0023bec,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 c0 fb 01 c0 02 	test   BYTE PTR [edx-0x3ffe0440],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 c0 fb 01 c0 01 	test   BYTE PTR [edx-0x3ffe0440],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 c0 fb 01 c0 08 	test   BYTE PTR [edx-0x3ffe0440],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 ab 00 00 00    	ja     c0000942 <simple_strtoul+0x11e>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 c0 fb 01 c0 04 	test   BYTE PTR [edi-0x3ffe0440],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	0f b6 d0             	movzx  edx,al
c00008fb:	5f                   	pop    edi
c00008fc:	f6 82 c0 fb 01 c0 01 	test   BYTE PTR [edx-0x3ffe0440],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 59                	jmp    c0000967 <simple_strtoul+0x143>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	89 f8                	mov    eax,edi
c0000917:	31 d2                	xor    edx,edx
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 21                	jne    c0000961 <simple_strtoul+0x13d>
c0000940:	eb 11                	jmp    c0000953 <simple_strtoul+0x12f>
c0000942:	31 db                	xor    ebx,ebx
c0000944:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000949:	74 22                	je     c000096d <simple_strtoul+0x149>
c000094b:	31 ed                	xor    ebp,ebp
c000094d:	31 db                	xor    ebx,ebx
c000094f:	85 c9                	test   ecx,ecx
c0000951:	74 0e                	je     c0000961 <simple_strtoul+0x13d>
c0000953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000957:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000095b:	31 db                	xor    ebx,ebx
c000095d:	89 38                	mov    DWORD PTR [eax],edi
c000095f:	eb 06                	jmp    c0000967 <simple_strtoul+0x143>
c0000961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000965:	89 08                	mov    DWORD PTR [eax],ecx
c0000967:	4d                   	dec    ebp
c0000968:	75 03                	jne    c000096d <simple_strtoul+0x149>
c000096a:	83 cb ff             	or     ebx,0xffffffff
c000096d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000972:	75 02                	jne    c0000976 <simple_strtoul+0x152>
c0000974:	f7 db                	neg    ebx
c0000976:	83 c4 08             	add    esp,0x8
c0000979:	89 d8                	mov    eax,ebx
c000097b:	5b                   	pop    ebx
c000097c:	5e                   	pop    esi
c000097d:	5f                   	pop    edi
c000097e:	5d                   	pop    ebp
c000097f:	c3                   	ret    

c0000980 <largebin_index>:
c0000980:	89 c2                	mov    edx,eax
c0000982:	c1 ea 08             	shr    edx,0x8
c0000985:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098b:	77 10                	ja     c000099d <largebin_index+0x1d>
c000098d:	0f bd d2             	bsr    edx,edx
c0000990:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000993:	d3 e8                	shr    eax,cl
c0000995:	83 e0 03             	and    eax,0x3
c0000998:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099c:	c3                   	ret    
c000099d:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a2:	c3                   	ret    

c00009a3 <malloc_init_state>:
c00009a3:	8d 50 34             	lea    edx,[eax+0x34]
c00009a6:	53                   	push   ebx
c00009a7:	89 d1                	mov    ecx,edx
c00009a9:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009af:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b2:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b5:	83 c2 08             	add    edx,0x8
c00009b8:	39 da                	cmp    edx,ebx
c00009ba:	75 f3                	jne    c00009af <malloc_init_state+0xc>
c00009bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00009be:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c8:	83 e2 03             	and    edx,0x3
c00009cb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d5:	83 ca 48             	or     edx,0x48
c00009d8:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e2:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ec:	89 10                	mov    DWORD PTR [eax],edx
c00009ee:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f8:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a02:	5b                   	pop    ebx
c0000a03:	c3                   	ret    

c0000a04 <malloc_consolidate>:
c0000a04:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a06:	85 d2                	test   edx,edx
c0000a08:	0f 84 d8 00 00 00    	je     c0000ae6 <malloc_consolidate+0xe2>
c0000a0e:	55                   	push   ebp
c0000a0f:	83 e2 fd             	and    edx,0xfffffffd
c0000a12:	57                   	push   edi
c0000a13:	8d 78 34             	lea    edi,[eax+0x34]
c0000a16:	56                   	push   esi
c0000a17:	89 c5                	mov    ebp,eax
c0000a19:	53                   	push   ebx
c0000a1a:	83 ec 10             	sub    esp,0x10
c0000a1d:	89 10                	mov    DWORD PTR [eax],edx
c0000a1f:	c1 ea 03             	shr    edx,0x3
c0000a22:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a26:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a31:	85 d2                	test   edx,edx
c0000a33:	0f 84 98 00 00 00    	je     c0000ad1 <malloc_consolidate+0xcd>
c0000a39:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a40:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a43:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4a:	89 f9                	mov    ecx,edi
c0000a4c:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a52:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a55:	83 e3 fc             	and    ebx,0xfffffffc
c0000a58:	83 e7 01             	and    edi,0x1
c0000a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5e:	75 14                	jne    c0000a74 <malloc_consolidate+0x70>
c0000a60:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a62:	29 fa                	sub    edx,edi
c0000a64:	01 f9                	add    ecx,edi
c0000a66:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a69:	89 fb                	mov    ebx,edi
c0000a6b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a71:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a74:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a77:	74 40                	je     c0000ab9 <malloc_consolidate+0xb5>
c0000a79:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a83:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a86:	83 e7 01             	and    edi,0x1
c0000a89:	75 0e                	jne    c0000a99 <malloc_consolidate+0x95>
c0000a8b:	01 d9                	add    ecx,ebx
c0000a8d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a90:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a93:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a96:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a99:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9c:	89 ce                	mov    esi,ecx
c0000a9e:	83 ce 01             	or     esi,0x1
c0000aa1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa7:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aaa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aae:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ab1:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab4:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab7:	eb 0c                	jmp    c0000ac5 <malloc_consolidate+0xc1>
c0000ab9:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abc:	83 c9 01             	or     ecx,0x1
c0000abf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac9:	85 d2                	test   edx,edx
c0000acb:	0f 85 6f ff ff ff    	jne    c0000a40 <malloc_consolidate+0x3c>
c0000ad1:	83 c5 04             	add    ebp,0x4
c0000ad4:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad8:	0f 85 50 ff ff ff    	jne    c0000a2e <malloc_consolidate+0x2a>
c0000ade:	83 c4 10             	add    esp,0x10
c0000ae1:	5b                   	pop    ebx
c0000ae2:	5e                   	pop    esi
c0000ae3:	5f                   	pop    edi
c0000ae4:	5d                   	pop    ebp
c0000ae5:	c3                   	ret    
c0000ae6:	e9 b8 fe ff ff       	jmp    c00009a3 <malloc_init_state>

c0000aeb <dlfree>:
c0000aeb:	57                   	push   edi
c0000aec:	56                   	push   esi
c0000aed:	53                   	push   ebx
c0000aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af2:	85 db                	test   ebx,ebx
c0000af4:	0f 84 e2 00 00 00    	je     c0000bdc <dlfree+0xf1>
c0000afa:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afd:	8b 0d 00 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c00
c0000b03:	89 f0                	mov    eax,esi
c0000b05:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b08:	83 e0 fc             	and    eax,0xfffffffc
c0000b0b:	39 c1                	cmp    ecx,eax
c0000b0d:	72 24                	jb     c0000b33 <dlfree+0x48>
c0000b0f:	c1 e8 03             	shr    eax,0x3
c0000b12:	83 c9 03             	or     ecx,0x3
c0000b15:	83 e8 02             	sub    eax,0x2
c0000b18:	89 0d 00 3c 02 c0    	mov    DWORD PTR ds:0xc0023c00,ecx
c0000b1e:	8b 0c 85 04 3c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc3fc]
c0000b25:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b27:	89 14 85 04 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc3fc],edx
c0000b2e:	e9 a9 00 00 00       	jmp    c0000bdc <dlfree+0xf1>
c0000b33:	83 e6 02             	and    esi,0x2
c0000b36:	0f 85 a0 00 00 00    	jne    c0000bdc <dlfree+0xf1>
c0000b3c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b3f:	83 c9 01             	or     ecx,0x1
c0000b42:	89 0d 00 3c 02 c0    	mov    DWORD PTR ds:0xc0023c00,ecx
c0000b48:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4b:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4e:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b52:	75 13                	jne    c0000b67 <dlfree+0x7c>
c0000b54:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b57:	29 da                	sub    edx,ebx
c0000b59:	01 d8                	add    eax,ebx
c0000b5b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b61:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b64:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b67:	39 35 2c 3c 02 c0    	cmp    DWORD PTR ds:0xc0023c2c,esi
c0000b6d:	74 40                	je     c0000baf <dlfree+0xc4>
c0000b6f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b73:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b76:	80 e3 01             	and    bl,0x1
c0000b79:	75 0e                	jne    c0000b89 <dlfree+0x9e>
c0000b7b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b81:	01 c8                	add    eax,ecx
c0000b83:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b86:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b89:	8b 0d 3c 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c3c
c0000b8f:	c7 42 0c 34 3c 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023c34
c0000b96:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b99:	89 15 3c 3c 02 c0    	mov    DWORD PTR ds:0xc0023c3c,edx
c0000b9f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba2:	89 c1                	mov    ecx,eax
c0000ba4:	83 c9 01             	or     ecx,0x1
c0000ba7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000baa:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bad:	eb 10                	jmp    c0000bbf <dlfree+0xd4>
c0000baf:	01 c8                	add    eax,ecx
c0000bb1:	89 c1                	mov    ecx,eax
c0000bb3:	83 c9 01             	or     ecx,0x1
c0000bb6:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb9:	89 15 2c 3c 02 c0    	mov    DWORD PTR ds:0xc0023c2c,edx
c0000bbf:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc4:	76 16                	jbe    c0000bdc <dlfree+0xf1>
c0000bc6:	f6 05 00 3c 02 c0 02 	test   BYTE PTR ds:0xc0023c00,0x2
c0000bcd:	74 0d                	je     c0000bdc <dlfree+0xf1>
c0000bcf:	5b                   	pop    ebx
c0000bd0:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0000bd5:	5e                   	pop    esi
c0000bd6:	5f                   	pop    edi
c0000bd7:	e9 28 fe ff ff       	jmp    c0000a04 <malloc_consolidate>
c0000bdc:	5b                   	pop    ebx
c0000bdd:	5e                   	pop    esi
c0000bde:	5f                   	pop    edi
c0000bdf:	c3                   	ret    

c0000be0 <sYSMALLOc>:
c0000be0:	55                   	push   ebp
c0000be1:	57                   	push   edi
c0000be2:	56                   	push   esi
c0000be3:	53                   	push   ebx
c0000be4:	89 d3                	mov    ebx,edx
c0000be6:	83 ec 2c             	sub    esp,0x2c
c0000be9:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000bef:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000bf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bf6:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000bf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000bfd:	74 1f                	je     c0000c1e <sYSMALLOc+0x3e>
c0000bff:	89 d0                	mov    eax,edx
c0000c01:	e8 fe fd ff ff       	call   c0000a04 <malloc_consolidate>
c0000c06:	83 ec 0c             	sub    esp,0xc
c0000c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000c0d:	83 e8 07             	sub    eax,0x7
c0000c10:	50                   	push   eax
c0000c11:	e8 33 02 00 00       	call   c0000e49 <dlmalloc>
c0000c16:	83 c4 10             	add    esp,0x10
c0000c19:	e9 23 02 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000c1e:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000c25:	83 c0 10             	add    eax,0x10
c0000c28:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000c2e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000c31:	01 c2                	add    edx,eax
c0000c33:	83 e5 fc             	and    ebp,0xfffffffc
c0000c36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000c3a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c41:	74 02                	je     c0000c45 <sYSMALLOc+0x65>
c0000c43:	29 ea                	sub    edx,ebp
c0000c45:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000c49:	f7 d9                	neg    ecx
c0000c4b:	21 ca                	and    edx,ecx
c0000c4d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000c51:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000c55:	7f 07                	jg     c0000c5e <sYSMALLOc+0x7e>
c0000c57:	31 c0                	xor    eax,eax
c0000c59:	e9 e3 01 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000c5e:	83 ec 0c             	sub    esp,0xc
c0000c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c65:	e8 e5 b0 00 00       	call   c000bd4f <sbrk>
c0000c6a:	83 c4 10             	add    esp,0x10
c0000c6d:	89 c6                	mov    esi,eax
c0000c6f:	83 f8 ff             	cmp    eax,0xffffffff
c0000c72:	74 e3                	je     c0000c57 <sYSMALLOc+0x77>
c0000c74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000c78:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000c7b:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000c81:	39 c2                	cmp    edx,eax
c0000c83:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000c89:	75 11                	jne    c0000c9c <sYSMALLOc+0xbc>
c0000c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c8f:	01 e8                	add    eax,ebp
c0000c91:	83 c8 01             	or     eax,0x1
c0000c94:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000c97:	e9 93 00 00 00       	jmp    c0000d2f <sYSMALLOc+0x14f>
c0000c9c:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000ca2:	a8 01                	test   al,0x1
c0000ca4:	0f 84 73 01 00 00    	je     c0000e1d <sYSMALLOc+0x23d>
c0000caa:	85 ed                	test   ebp,ebp
c0000cac:	74 12                	je     c0000cc0 <sYSMALLOc+0xe0>
c0000cae:	39 f2                	cmp    edx,esi
c0000cb0:	76 0e                	jbe    c0000cc0 <sYSMALLOc+0xe0>
c0000cb2:	83 e0 fe             	and    eax,0xfffffffe
c0000cb5:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000cbb:	e9 5d 01 00 00       	jmp    c0000e1d <sYSMALLOc+0x23d>
c0000cc0:	85 ed                	test   ebp,ebp
c0000cc2:	74 0c                	je     c0000cd0 <sYSMALLOc+0xf0>
c0000cc4:	89 f0                	mov    eax,esi
c0000cc6:	29 d0                	sub    eax,edx
c0000cc8:	01 c1                	add    ecx,eax
c0000cca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000cd0:	89 f2                	mov    edx,esi
c0000cd2:	83 e2 07             	and    edx,0x7
c0000cd5:	0f 84 b1 00 00 00    	je     c0000d8c <sYSMALLOc+0x1ac>
c0000cdb:	b8 08 00 00 00       	mov    eax,0x8
c0000ce0:	29 d0                	sub    eax,edx
c0000ce2:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000ce5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ced:	01 e8                	add    eax,ebp
c0000cef:	83 ec 0c             	sub    esp,0xc
c0000cf2:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000cf5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000cf9:	01 f2                	add    edx,esi
c0000cfb:	01 d1                	add    ecx,edx
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000d03:	01 c1                	add    ecx,eax
c0000d05:	51                   	push   ecx
c0000d06:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000d0a:	e8 40 b0 00 00       	call   c000bd4f <sbrk>
c0000d0f:	83 c4 10             	add    esp,0x10
c0000d12:	83 f8 ff             	cmp    eax,0xffffffff
c0000d15:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000d19:	75 7c                	jne    c0000d97 <sYSMALLOc+0x1b7>
c0000d1b:	83 ec 0c             	sub    esp,0xc
c0000d1e:	6a 00                	push   0x0
c0000d20:	e8 2a b0 00 00       	call   c000bd4f <sbrk>
c0000d25:	83 c4 10             	add    esp,0x10
c0000d28:	31 c9                	xor    ecx,ecx
c0000d2a:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2d:	75 7e                	jne    c0000dad <sYSMALLOc+0x1cd>
c0000d2f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000d35:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000d3b:	73 06                	jae    c0000d43 <sYSMALLOc+0x163>
c0000d3d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000d43:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000d49:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000d4f:	73 06                	jae    c0000d57 <sYSMALLOc+0x177>
c0000d51:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000d57:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000d5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000d5d:	83 e2 fc             	and    edx,0xfffffffc
c0000d60:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000d64:	0f 87 ed fe ff ff    	ja     c0000c57 <sYSMALLOc+0x77>
c0000d6a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000d6e:	29 fa                	sub    edx,edi
c0000d70:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000d73:	83 ca 01             	or     edx,0x1
c0000d76:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000d79:	89 fb                	mov    ebx,edi
c0000d7b:	83 cb 01             	or     ebx,0x1
c0000d7e:	83 c0 08             	add    eax,0x8
c0000d81:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000d84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000d87:	e9 b5 00 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000d8c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000d90:	31 c0                	xor    eax,eax
c0000d92:	e9 52 ff ff ff       	jmp    c0000ce9 <sYSMALLOc+0x109>
c0000d97:	39 c6                	cmp    esi,eax
c0000d99:	76 12                	jbe    c0000dad <sYSMALLOc+0x1cd>
c0000d9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d9f:	01 f0                	add    eax,esi
c0000da1:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000da8:	e9 7b ff ff ff       	jmp    c0000d28 <sYSMALLOc+0x148>
c0000dad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000db1:	29 f0                	sub    eax,esi
c0000db3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000db6:	01 c8                	add    eax,ecx
c0000db8:	83 c8 01             	or     eax,0x1
c0000dbb:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000dbe:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000dc4:	85 ed                	test   ebp,ebp
c0000dc6:	0f 84 63 ff ff ff    	je     c0000d2f <sYSMALLOc+0x14f>
c0000dcc:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000dcf:	83 e0 f8             	and    eax,0xfffffff8
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	83 ca 01             	or     edx,0x1
c0000dd7:	83 f8 0f             	cmp    eax,0xf
c0000dda:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000ddd:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000de5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ded:	0f 86 3c ff ff ff    	jbe    c0000d2f <sYSMALLOc+0x14f>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	83 c7 08             	add    edi,0x8
c0000df9:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dff:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e09:	57                   	push   edi
c0000e0a:	e8 dc fc ff ff       	call   c0000aeb <dlfree>
c0000e0f:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e15:	83 c4 10             	add    esp,0x10
c0000e18:	e9 12 ff ff ff       	jmp    c0000d2f <sYSMALLOc+0x14f>
c0000e1d:	83 ec 0c             	sub    esp,0xc
c0000e20:	6a 00                	push   0x0
c0000e22:	e8 28 af 00 00       	call   c000bd4f <sbrk>
c0000e27:	89 c2                	mov    edx,eax
c0000e29:	29 f2                	sub    edx,esi
c0000e2b:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2f:	83 c4 10             	add    esp,0x10
c0000e32:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e38:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e3c:	e9 e7 fe ff ff       	jmp    c0000d28 <sYSMALLOc+0x148>
c0000e41:	83 c4 2c             	add    esp,0x2c
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	5d                   	pop    ebp
c0000e48:	c3                   	ret    

c0000e49 <dlmalloc>:
c0000e49:	55                   	push   ebp
c0000e4a:	57                   	push   edi
c0000e4b:	56                   	push   esi
c0000e4c:	53                   	push   ebx
c0000e4d:	83 ec 1c             	sub    esp,0x1c
c0000e50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e54:	83 f8 df             	cmp    eax,0xffffffdf
c0000e57:	0f 87 70 03 00 00    	ja     c00011cd <dlmalloc+0x384>
c0000e5d:	83 c0 0b             	add    eax,0xb
c0000e60:	be 10 00 00 00       	mov    esi,0x10
c0000e65:	83 f8 0f             	cmp    eax,0xf
c0000e68:	76 05                	jbe    c0000e6f <dlmalloc+0x26>
c0000e6a:	83 e0 f8             	and    eax,0xfffffff8
c0000e6d:	89 c6                	mov    esi,eax
c0000e6f:	8b 3d 00 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c00
c0000e75:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e7b:	75 17                	jne    c0000e94 <dlmalloc+0x4b>
c0000e7d:	85 ff                	test   edi,edi
c0000e7f:	0f 85 05 03 00 00    	jne    c000118a <dlmalloc+0x341>
c0000e85:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0000e8a:	e8 75 fb ff ff       	call   c0000a04 <malloc_consolidate>
c0000e8f:	e9 f6 02 00 00       	jmp    c000118a <dlmalloc+0x341>
c0000e94:	39 f7                	cmp    edi,esi
c0000e96:	72 1f                	jb     c0000eb7 <dlmalloc+0x6e>
c0000e98:	89 f2                	mov    edx,esi
c0000e9a:	c1 ea 03             	shr    edx,0x3
c0000e9d:	83 ea 02             	sub    edx,0x2
c0000ea0:	8b 04 95 04 3c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc3fc]
c0000ea7:	85 c0                	test   eax,eax
c0000ea9:	74 0c                	je     c0000eb7 <dlmalloc+0x6e>
c0000eab:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eae:	89 0c 95 04 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc3fc],ecx
c0000eb5:	eb 30                	jmp    c0000ee7 <dlmalloc+0x9e>
c0000eb7:	89 f0                	mov    eax,esi
c0000eb9:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebf:	77 2e                	ja     c0000eef <dlmalloc+0xa6>
c0000ec1:	c1 e8 03             	shr    eax,0x3
c0000ec4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ec8:	8d 14 c5 34 3c 02 c0 	lea    edx,[eax*8-0x3ffdc3cc]
c0000ecf:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed5:	39 c3                	cmp    ebx,eax
c0000ed7:	74 2e                	je     c0000f07 <dlmalloc+0xbe>
c0000ed9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000edc:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000ee1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee4:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee7:	83 c0 08             	add    eax,0x8
c0000eea:	e9 e0 02 00 00       	jmp    c00011cf <dlmalloc+0x386>
c0000eef:	e8 8c fa ff ff       	call   c0000980 <largebin_index>
c0000ef4:	83 e7 02             	and    edi,0x2
c0000ef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000efb:	74 0a                	je     c0000f07 <dlmalloc+0xbe>
c0000efd:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0000f02:	e8 fd fa ff ff       	call   c0000a04 <malloc_consolidate>
c0000f07:	8d 46 10             	lea    eax,[esi+0x10]
c0000f0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0e:	8b 1d 40 3c 02 c0    	mov    ebx,DWORD PTR ds:0xc0023c40
c0000f14:	81 fb 34 3c 02 c0    	cmp    ebx,0xc0023c34
c0000f1a:	0f 84 13 01 00 00    	je     c0001033 <dlmalloc+0x1ea>
c0000f20:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f26:	83 e7 fc             	and    edi,0xfffffffc
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 4c                	ja     c0000f7d <dlmalloc+0x134>
c0000f31:	3d 34 3c 02 c0       	cmp    eax,0xc0023c34
c0000f36:	75 45                	jne    c0000f7d <dlmalloc+0x134>
c0000f38:	39 1d 30 3c 02 c0    	cmp    DWORD PTR ds:0xc0023c30,ebx
c0000f3e:	75 3d                	jne    c0000f7d <dlmalloc+0x134>
c0000f40:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f44:	73 37                	jae    c0000f7d <dlmalloc+0x134>
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f4b:	29 f2                	sub    edx,esi
c0000f4d:	83 ce 01             	or     esi,0x1
c0000f50:	89 d1                	mov    ecx,edx
c0000f52:	a3 3c 3c 02 c0       	mov    ds:0xc0023c3c,eax
c0000f57:	83 c9 01             	or     ecx,0x1
c0000f5a:	a3 40 3c 02 c0       	mov    ds:0xc0023c40,eax
c0000f5f:	a3 30 3c 02 c0       	mov    ds:0xc0023c30,eax
c0000f64:	c7 40 08 34 3c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023c34
c0000f6b:	c7 40 0c 34 3c 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023c34
c0000f72:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f75:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f78:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f7b:	eb 15                	jmp    c0000f92 <dlmalloc+0x149>
c0000f7d:	a3 40 3c 02 c0       	mov    ds:0xc0023c40,eax
c0000f82:	39 fe                	cmp    esi,edi
c0000f84:	c7 40 08 34 3c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023c34
c0000f8b:	75 0d                	jne    c0000f9a <dlmalloc+0x151>
c0000f8d:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f92:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f95:	e9 35 02 00 00       	jmp    c00011cf <dlmalloc+0x386>
c0000f9a:	89 f8                	mov    eax,edi
c0000f9c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa2:	77 19                	ja     c0000fbd <dlmalloc+0x174>
c0000fa4:	c1 e8 03             	shr    eax,0x3
c0000fa7:	8d 14 00             	lea    edx,[eax+eax*1]
c0000faa:	83 c2 0d             	add    edx,0xd
c0000fad:	8d 2c 95 f8 3b 02 c0 	lea    ebp,[edx*4-0x3ffdc408]
c0000fb4:	8b 14 95 00 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc400]
c0000fbb:	eb 46                	jmp    c0001003 <dlmalloc+0x1ba>
c0000fbd:	e8 be f9 ff ff       	call   c0000980 <largebin_index>
c0000fc2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc5:	83 c2 0d             	add    edx,0xd
c0000fc8:	8d 0c 95 00 3c 02 c0 	lea    ecx,[edx*4-0x3ffdc400]
c0000fcf:	8b 14 95 00 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc400]
c0000fd6:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd9:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdd:	89 d5                	mov    ebp,edx
c0000fdf:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe3:	74 1e                	je     c0001003 <dlmalloc+0x1ba>
c0000fe5:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe8:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000feb:	77 12                	ja     c0000fff <dlmalloc+0x1b6>
c0000fed:	83 cf 01             	or     edi,0x1
c0000ff0:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff3:	76 05                	jbe    c0000ffa <dlmalloc+0x1b1>
c0000ff5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff8:	eb f6                	jmp    c0000ff0 <dlmalloc+0x1a7>
c0000ffa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffd:	eb 04                	jmp    c0001003 <dlmalloc+0x1ba>
c0000fff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001003:	89 c7                	mov    edi,eax
c0001005:	88 c1                	mov    cl,al
c0001007:	c1 ff 05             	sar    edi,0x5
c000100a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100e:	bf 01 00 00 00       	mov    edi,0x1
c0001013:	d3 e7                	shl    edi,cl
c0001015:	89 f8                	mov    eax,edi
c0001017:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000101b:	09 04 bd 34 3f 02 c0 	or     DWORD PTR [edi*4-0x3ffdc0cc],eax
c0001022:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001025:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001028:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000102b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102e:	e9 db fe ff ff       	jmp    c0000f0e <dlmalloc+0xc5>
c0001033:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001039:	76 78                	jbe    c00010b3 <dlmalloc+0x26a>
c000103b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103f:	8d 04 c5 34 3c 02 c0 	lea    eax,[eax*8-0x3ffdc3cc]
c0001046:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001049:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104c:	39 ca                	cmp    edx,ecx
c000104e:	74 63                	je     c00010b3 <dlmalloc+0x26a>
c0001050:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001053:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001056:	83 e3 fc             	and    ebx,0xfffffffc
c0001059:	39 de                	cmp    esi,ebx
c000105b:	77 52                	ja     c00010af <dlmalloc+0x266>
c000105d:	89 df                	mov    edi,ebx
c000105f:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001062:	29 f7                	sub    edi,esi
c0001064:	01 d3                	add    ebx,edx
c0001066:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001069:	83 ff 0f             	cmp    edi,0xf
c000106c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106f:	8d 42 08             	lea    eax,[edx+0x8]
c0001072:	77 09                	ja     c000107d <dlmalloc+0x234>
c0001074:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001078:	e9 52 01 00 00       	jmp    c00011cf <dlmalloc+0x386>
c000107d:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001080:	83 ce 01             	or     esi,0x1
c0001083:	89 0d 3c 3c 02 c0    	mov    DWORD PTR ds:0xc0023c3c,ecx
c0001089:	89 0d 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,ecx
c000108f:	c7 41 08 34 3c 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023c34
c0001096:	c7 41 0c 34 3c 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023c34
c000109d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00010a0:	89 fa                	mov    edx,edi
c00010a2:	83 ca 01             	or     edx,0x1
c00010a5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a8:	89 3b                	mov    DWORD PTR [ebx],edi
c00010aa:	e9 20 01 00 00       	jmp    c00011cf <dlmalloc+0x386>
c00010af:	89 c2                	mov    edx,eax
c00010b1:	eb 99                	jmp    c000104c <dlmalloc+0x203>
c00010b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b7:	b8 01 00 00 00       	mov    eax,0x1
c00010bc:	41                   	inc    ecx
c00010bd:	89 cb                	mov    ebx,ecx
c00010bf:	c1 eb 05             	shr    ebx,0x5
c00010c2:	8d 14 cd 2c 3c 02 c0 	lea    edx,[ecx*8-0x3ffdc3d4]
c00010c9:	d3 e0                	shl    eax,cl
c00010cb:	8b 3c 9d 34 3f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc0cc]
c00010d2:	39 f8                	cmp    eax,edi
c00010d4:	77 04                	ja     c00010da <dlmalloc+0x291>
c00010d6:	85 c0                	test   eax,eax
c00010d8:	75 26                	jne    c0001100 <dlmalloc+0x2b7>
c00010da:	43                   	inc    ebx
c00010db:	83 fb 02             	cmp    ebx,0x2
c00010de:	0f 87 a6 00 00 00    	ja     c000118a <dlmalloc+0x341>
c00010e4:	8b 3c 9d 34 3f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc0cc]
c00010eb:	85 ff                	test   edi,edi
c00010ed:	74 eb                	je     c00010da <dlmalloc+0x291>
c00010ef:	89 d8                	mov    eax,ebx
c00010f1:	c1 e0 06             	shl    eax,0x6
c00010f4:	8d 14 85 2c 3c 02 c0 	lea    edx,[eax*4-0x3ffdc3d4]
c00010fb:	b8 01 00 00 00       	mov    eax,0x1
c0001100:	85 f8                	test   eax,edi
c0001102:	75 07                	jne    c000110b <dlmalloc+0x2c2>
c0001104:	83 c2 08             	add    edx,0x8
c0001107:	01 c0                	add    eax,eax
c0001109:	eb f5                	jmp    c0001100 <dlmalloc+0x2b7>
c000110b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110e:	39 ca                	cmp    edx,ecx
c0001110:	75 14                	jne    c0001126 <dlmalloc+0x2dd>
c0001112:	89 c1                	mov    ecx,eax
c0001114:	83 c2 08             	add    edx,0x8
c0001117:	f7 d1                	not    ecx
c0001119:	21 cf                	and    edi,ecx
c000111b:	01 c0                	add    eax,eax
c000111d:	89 3c 9d 34 3f 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc0cc],edi
c0001124:	eb ac                	jmp    c00010d2 <dlmalloc+0x289>
c0001126:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001129:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112c:	83 e0 fc             	and    eax,0xfffffffc
c000112f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001132:	89 c3                	mov    ebx,eax
c0001134:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001137:	29 f3                	sub    ebx,esi
c0001139:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113c:	83 fb 0f             	cmp    ebx,0xf
c000113f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001142:	77 09                	ja     c000114d <dlmalloc+0x304>
c0001144:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001148:	e9 82 00 00 00       	jmp    c00011cf <dlmalloc+0x386>
c000114d:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001150:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001156:	89 3d 3c 3c 02 c0    	mov    DWORD PTR ds:0xc0023c3c,edi
c000115c:	89 3d 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edi
c0001162:	c7 47 08 34 3c 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023c34
c0001169:	c7 47 0c 34 3c 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023c34
c0001170:	77 06                	ja     c0001178 <dlmalloc+0x32f>
c0001172:	89 3d 30 3c 02 c0    	mov    DWORD PTR ds:0xc0023c30,edi
c0001178:	83 ce 01             	or     esi,0x1
c000117b:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117e:	89 d9                	mov    ecx,ebx
c0001180:	83 c9 01             	or     ecx,0x1
c0001183:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001186:	89 1a                	mov    DWORD PTR [edx],ebx
c0001188:	eb 45                	jmp    c00011cf <dlmalloc+0x386>
c000118a:	a1 2c 3c 02 c0       	mov    eax,ds:0xc0023c2c
c000118f:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001192:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001195:	83 e2 fc             	and    edx,0xfffffffc
c0001198:	39 d1                	cmp    ecx,edx
c000119a:	77 1e                	ja     c00011ba <dlmalloc+0x371>
c000119c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119f:	89 f3                	mov    ebx,esi
c00011a1:	29 f2                	sub    edx,esi
c00011a3:	83 cb 01             	or     ebx,0x1
c00011a6:	83 ca 01             	or     edx,0x1
c00011a9:	89 0d 2c 3c 02 c0    	mov    DWORD PTR ds:0xc0023c2c,ecx
c00011af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b5:	e9 2d fd ff ff       	jmp    c0000ee7 <dlmalloc+0x9e>
c00011ba:	83 c4 1c             	add    esp,0x1c
c00011bd:	89 f0                	mov    eax,esi
c00011bf:	ba 00 3c 02 c0       	mov    edx,0xc0023c00
c00011c4:	5b                   	pop    ebx
c00011c5:	5e                   	pop    esi
c00011c6:	5f                   	pop    edi
c00011c7:	5d                   	pop    ebp
c00011c8:	e9 13 fa ff ff       	jmp    c0000be0 <sYSMALLOc>
c00011cd:	31 c0                	xor    eax,eax
c00011cf:	83 c4 1c             	add    esp,0x1c
c00011d2:	5b                   	pop    ebx
c00011d3:	5e                   	pop    esi
c00011d4:	5f                   	pop    edi
c00011d5:	5d                   	pop    ebp
c00011d6:	c3                   	ret    

c00011d7 <iALLOc>:
c00011d7:	55                   	push   ebp
c00011d8:	89 c5                	mov    ebp,eax
c00011da:	57                   	push   edi
c00011db:	56                   	push   esi
c00011dc:	53                   	push   ebx
c00011dd:	83 ec 2c             	sub    esp,0x2c
c00011e0:	83 3d 00 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c00,0x0
c00011e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011eb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011f3:	75 12                	jne    c0001207 <iALLOc+0x30>
c00011f5:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c00011fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011fe:	e8 01 f8 ff ff       	call   c0000a04 <malloc_consolidate>
c0001203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001207:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120c:	74 12                	je     c0001220 <iALLOc+0x49>
c000120e:	85 ed                	test   ebp,ebp
c0001210:	0f 84 64 01 00 00    	je     c000137a <iALLOc+0x1a3>
c0001216:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121e:	eb 33                	jmp    c0001253 <iALLOc+0x7c>
c0001220:	85 ed                	test   ebp,ebp
c0001222:	75 14                	jne    c0001238 <iALLOc+0x61>
c0001224:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122c:	83 c4 2c             	add    esp,0x2c
c000122f:	5b                   	pop    ebx
c0001230:	5e                   	pop    esi
c0001231:	5f                   	pop    edi
c0001232:	5d                   	pop    ebp
c0001233:	e9 11 fc ff ff       	jmp    c0000e49 <dlmalloc>
c0001238:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123f:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001247:	83 f8 0f             	cmp    eax,0xf
c000124a:	76 07                	jbe    c0001253 <iALLOc+0x7c>
c000124c:	83 e0 f8             	and    eax,0xfffffff8
c000124f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001253:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001258:	75 09                	jne    c0001263 <iALLOc+0x8c>
c000125a:	89 d0                	mov    eax,edx
c000125c:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125f:	31 f6                	xor    esi,esi
c0001261:	eb 3b                	jmp    c000129e <iALLOc+0xc7>
c0001263:	8b 02                	mov    eax,DWORD PTR [edx]
c0001265:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126d:	83 c0 0b             	add    eax,0xb
c0001270:	83 f8 0f             	cmp    eax,0xf
c0001273:	76 07                	jbe    c000127c <iALLOc+0xa5>
c0001275:	83 e0 f8             	and    eax,0xfffffff8
c0001278:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001280:	0f af f5             	imul   esi,ebp
c0001283:	eb 25                	jmp    c00012aa <iALLOc+0xd3>
c0001285:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001287:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000128a:	bb 10 00 00 00       	mov    ebx,0x10
c000128f:	83 f9 0f             	cmp    ecx,0xf
c0001292:	76 05                	jbe    c0001299 <iALLOc+0xc2>
c0001294:	83 e1 f8             	and    ecx,0xfffffff8
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	01 de                	add    esi,ebx
c000129b:	83 c0 04             	add    eax,0x4
c000129e:	39 c7                	cmp    edi,eax
c00012a0:	75 e3                	jne    c0001285 <iALLOc+0xae>
c00012a2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ae:	83 ec 0c             	sub    esp,0xc
c00012b1:	8b 1d 54 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f54
c00012b7:	c7 05 54 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f54,0x0
c00012c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c5:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c9:	50                   	push   eax
c00012ca:	e8 7a fb ff ff       	call   c0000e49 <dlmalloc>
c00012cf:	83 c4 10             	add    esp,0x10
c00012d2:	89 1d 54 3f 02 c0    	mov    DWORD PTR ds:0xc0023f54,ebx
c00012d8:	85 c0                	test   eax,eax
c00012da:	0f 84 92 00 00 00    	je     c0001372 <iALLOc+0x19b>
c00012e0:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e3:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e6:	83 e3 fc             	and    ebx,0xfffffffc
c00012e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012ed:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f2:	74 1e                	je     c0001312 <iALLOc+0x13b>
c00012f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f8:	89 d9                	mov    ecx,ebx
c00012fa:	52                   	push   edx
c00012fb:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012ff:	83 e9 04             	sub    ecx,0x4
c0001302:	51                   	push   ecx
c0001303:	6a 00                	push   0x0
c0001305:	50                   	push   eax
c0001306:	e8 fd f2 ff ff       	call   c0000608 <memset>
c000130b:	83 c4 10             	add    esp,0x10
c000130e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001312:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001317:	75 14                	jne    c000132d <iALLOc+0x156>
c0001319:	8d 04 37             	lea    eax,[edi+esi*1]
c000131c:	29 f3                	sub    ebx,esi
c000131e:	83 cb 01             	or     ebx,0x1
c0001321:	8d 48 08             	lea    ecx,[eax+0x8]
c0001324:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001327:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000132b:	89 f3                	mov    ebx,esi
c000132d:	31 c0                	xor    eax,eax
c000132f:	4d                   	dec    ebp
c0001330:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001334:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001337:	39 c5                	cmp    ebp,eax
c0001339:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133c:	74 2c                	je     c000136a <iALLOc+0x193>
c000133e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001342:	85 c9                	test   ecx,ecx
c0001344:	75 15                	jne    c000135b <iALLOc+0x184>
c0001346:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001349:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134c:	b9 10 00 00 00       	mov    ecx,0x10
c0001351:	83 fe 0f             	cmp    esi,0xf
c0001354:	76 05                	jbe    c000135b <iALLOc+0x184>
c0001356:	83 e6 f8             	and    esi,0xfffffff8
c0001359:	89 f1                	mov    ecx,esi
c000135b:	89 ce                	mov    esi,ecx
c000135d:	29 cb                	sub    ebx,ecx
c000135f:	83 ce 01             	or     esi,0x1
c0001362:	40                   	inc    eax
c0001363:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001366:	01 cf                	add    edi,ecx
c0001368:	eb c6                	jmp    c0001330 <iALLOc+0x159>
c000136a:	83 cb 01             	or     ebx,0x1
c000136d:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001370:	eb 08                	jmp    c000137a <iALLOc+0x1a3>
c0001372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000137a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137e:	83 c4 2c             	add    esp,0x2c
c0001381:	5b                   	pop    ebx
c0001382:	5e                   	pop    esi
c0001383:	5f                   	pop    edi
c0001384:	5d                   	pop    ebp
c0001385:	c3                   	ret    

c0001386 <dlrealloc>:
c0001386:	55                   	push   ebp
c0001387:	57                   	push   edi
c0001388:	56                   	push   esi
c0001389:	53                   	push   ebx
c000138a:	83 ec 1c             	sub    esp,0x1c
c000138d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001391:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001395:	85 db                	test   ebx,ebx
c0001397:	75 10                	jne    c00013a9 <dlrealloc+0x23>
c0001399:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139d:	83 c4 1c             	add    esp,0x1c
c00013a0:	5b                   	pop    ebx
c00013a1:	5e                   	pop    esi
c00013a2:	5f                   	pop    edi
c00013a3:	5d                   	pop    ebp
c00013a4:	e9 a0 fa ff ff       	jmp    c0000e49 <dlmalloc>
c00013a9:	83 f8 df             	cmp    eax,0xffffffdf
c00013ac:	76 07                	jbe    c00013b5 <dlrealloc+0x2f>
c00013ae:	31 db                	xor    ebx,ebx
c00013b0:	e9 7c 01 00 00       	jmp    c0001531 <dlrealloc+0x1ab>
c00013b5:	83 c0 0b             	add    eax,0xb
c00013b8:	bf 10 00 00 00       	mov    edi,0x10
c00013bd:	83 f8 0f             	cmp    eax,0xf
c00013c0:	76 05                	jbe    c00013c7 <dlrealloc+0x41>
c00013c2:	83 e0 f8             	and    eax,0xfffffff8
c00013c5:	89 c7                	mov    edi,eax
c00013c7:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013ca:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013cd:	89 c6                	mov    esi,eax
c00013cf:	83 e6 fc             	and    esi,0xfffffffc
c00013d2:	a8 02                	test   al,0x2
c00013d4:	75 d8                	jne    c00013ae <dlrealloc+0x28>
c00013d6:	39 f7                	cmp    edi,esi
c00013d8:	0f 86 15 01 00 00    	jbe    c00014f3 <dlrealloc+0x16d>
c00013de:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013e2:	39 15 2c 3c 02 c0    	cmp    DWORD PTR ds:0xc0023c2c,edx
c00013e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013eb:	75 33                	jne    c0001420 <dlrealloc+0x9a>
c00013ed:	83 e1 fc             	and    ecx,0xfffffffc
c00013f0:	01 f1                	add    ecx,esi
c00013f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f6:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f9:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fd:	77 49                	ja     c0001448 <dlrealloc+0xc2>
c00013ff:	83 e0 01             	and    eax,0x1
c0001402:	01 fd                	add    ebp,edi
c0001404:	09 f8                	or     eax,edi
c0001406:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140d:	29 f8                	sub    eax,edi
c000140f:	89 2d 2c 3c 02 c0    	mov    DWORD PTR ds:0xc0023c2c,ebp
c0001415:	83 c8 01             	or     eax,0x1
c0001418:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000141b:	e9 11 01 00 00       	jmp    c0001531 <dlrealloc+0x1ab>
c0001420:	89 c8                	mov    eax,ecx
c0001422:	83 e0 fe             	and    eax,0xfffffffe
c0001425:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000142a:	75 1c                	jne    c0001448 <dlrealloc+0xc2>
c000142c:	83 e1 fc             	and    ecx,0xfffffffc
c000142f:	01 f1                	add    ecx,esi
c0001431:	39 cf                	cmp    edi,ecx
c0001433:	77 13                	ja     c0001448 <dlrealloc+0xc2>
c0001435:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001438:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000143b:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143e:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001441:	89 ce                	mov    esi,ecx
c0001443:	e9 ab 00 00 00       	jmp    c00014f3 <dlrealloc+0x16d>
c0001448:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	8d 47 f9             	lea    eax,[edi-0x7]
c0001452:	50                   	push   eax
c0001453:	e8 f1 f9 ff ff       	call   c0000e49 <dlmalloc>
c0001458:	83 c4 10             	add    esp,0x10
c000145b:	89 c1                	mov    ecx,eax
c000145d:	85 c0                	test   eax,eax
c000145f:	0f 84 49 ff ff ff    	je     c00013ae <dlrealloc+0x28>
c0001465:	8d 40 f8             	lea    eax,[eax-0x8]
c0001468:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000146c:	39 c2                	cmp    edx,eax
c000146e:	75 0a                	jne    c000147a <dlrealloc+0xf4>
c0001470:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001473:	83 e0 fc             	and    eax,0xfffffffc
c0001476:	01 c6                	add    esi,eax
c0001478:	eb 79                	jmp    c00014f3 <dlrealloc+0x16d>
c000147a:	83 ee 04             	sub    esi,0x4
c000147d:	83 fe 27             	cmp    esi,0x27
c0001480:	76 16                	jbe    c0001498 <dlrealloc+0x112>
c0001482:	50                   	push   eax
c0001483:	56                   	push   esi
c0001484:	53                   	push   ebx
c0001485:	51                   	push   ecx
c0001486:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000148a:	e8 43 f1 ff ff       	call   c00005d2 <memcpy>
c000148f:	83 c4 10             	add    esp,0x10
c0001492:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001496:	eb 43                	jmp    c00014db <dlrealloc+0x155>
c0001498:	8b 03                	mov    eax,DWORD PTR [ebx]
c000149a:	83 fe 13             	cmp    esi,0x13
c000149d:	89 01                	mov    DWORD PTR [ecx],eax
c000149f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00014a2:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a8:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014ab:	76 2e                	jbe    c00014db <dlrealloc+0x155>
c00014ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014b0:	83 fe 1b             	cmp    esi,0x1b
c00014b3:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b9:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014bc:	76 1d                	jbe    c00014db <dlrealloc+0x155>
c00014be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014c1:	83 fe 23             	cmp    esi,0x23
c00014c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014ca:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014cd:	76 0c                	jbe    c00014db <dlrealloc+0x155>
c00014cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014d2:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d8:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014df:	83 ec 0c             	sub    esp,0xc
c00014e2:	53                   	push   ebx
c00014e3:	e8 03 f6 ff ff       	call   c0000aeb <dlfree>
c00014e8:	83 c4 10             	add    esp,0x10
c00014eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ef:	89 cb                	mov    ebx,ecx
c00014f1:	eb 3e                	jmp    c0001531 <dlrealloc+0x1ab>
c00014f3:	89 f2                	mov    edx,esi
c00014f5:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f8:	29 fa                	sub    edx,edi
c00014fa:	83 e1 01             	and    ecx,0x1
c00014fd:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001501:	83 fa 0f             	cmp    edx,0xf
c0001504:	77 0b                	ja     c0001511 <dlrealloc+0x18b>
c0001506:	09 ce                	or     esi,ecx
c0001508:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000150b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150f:	eb 20                	jmp    c0001531 <dlrealloc+0x1ab>
c0001511:	01 fd                	add    ebp,edi
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	09 cf                	or     edi,ecx
c0001518:	83 ec 0c             	sub    esp,0xc
c000151b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000151e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0001521:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001525:	83 c5 08             	add    ebp,0x8
c0001528:	55                   	push   ebp
c0001529:	e8 bd f5 ff ff       	call   c0000aeb <dlfree>
c000152e:	83 c4 10             	add    esp,0x10
c0001531:	83 c4 1c             	add    esp,0x1c
c0001534:	89 d8                	mov    eax,ebx
c0001536:	5b                   	pop    ebx
c0001537:	5e                   	pop    esi
c0001538:	5f                   	pop    edi
c0001539:	5d                   	pop    ebp
c000153a:	c3                   	ret    

c000153b <dlmemalign>:
c000153b:	55                   	push   ebp
c000153c:	57                   	push   edi
c000153d:	56                   	push   esi
c000153e:	53                   	push   ebx
c000153f:	83 ec 0c             	sub    esp,0xc
c0001542:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001546:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000154a:	83 fa 08             	cmp    edx,0x8
c000154d:	77 10                	ja     c000155f <dlmemalign+0x24>
c000154f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001553:	83 c4 0c             	add    esp,0xc
c0001556:	5b                   	pop    ebx
c0001557:	5e                   	pop    esi
c0001558:	5f                   	pop    edi
c0001559:	5d                   	pop    ebp
c000155a:	e9 ea f8 ff ff       	jmp    c0000e49 <dlmalloc>
c000155f:	bf 10 00 00 00       	mov    edi,0x10
c0001564:	83 fa 0f             	cmp    edx,0xf
c0001567:	76 13                	jbe    c000157c <dlmemalign+0x41>
c0001569:	8d 4a ff             	lea    ecx,[edx-0x1]
c000156c:	85 d1                	test   ecx,edx
c000156e:	75 04                	jne    c0001574 <dlmemalign+0x39>
c0001570:	89 d7                	mov    edi,edx
c0001572:	eb 08                	jmp    c000157c <dlmemalign+0x41>
c0001574:	39 d7                	cmp    edi,edx
c0001576:	73 04                	jae    c000157c <dlmemalign+0x41>
c0001578:	01 ff                	add    edi,edi
c000157a:	eb f8                	jmp    c0001574 <dlmemalign+0x39>
c000157c:	83 f8 df             	cmp    eax,0xffffffdf
c000157f:	76 07                	jbe    c0001588 <dlmemalign+0x4d>
c0001581:	31 c0                	xor    eax,eax
c0001583:	e9 ce 00 00 00       	jmp    c0001656 <dlmemalign+0x11b>
c0001588:	83 c0 0b             	add    eax,0xb
c000158b:	bd 10 00 00 00       	mov    ebp,0x10
c0001590:	83 f8 0f             	cmp    eax,0xf
c0001593:	76 05                	jbe    c000159a <dlmemalign+0x5f>
c0001595:	83 e0 f8             	and    eax,0xfffffff8
c0001598:	89 c5                	mov    ebp,eax
c000159a:	83 ec 0c             	sub    esp,0xc
c000159d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00015a1:	50                   	push   eax
c00015a2:	e8 a2 f8 ff ff       	call   c0000e49 <dlmalloc>
c00015a7:	83 c4 10             	add    esp,0x10
c00015aa:	89 c1                	mov    ecx,eax
c00015ac:	85 c0                	test   eax,eax
c00015ae:	74 d1                	je     c0001581 <dlmemalign+0x46>
c00015b0:	31 d2                	xor    edx,edx
c00015b2:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b5:	f7 f7                	div    edi
c00015b7:	85 d2                	test   edx,edx
c00015b9:	74 62                	je     c000161d <dlmemalign+0xe2>
c00015bb:	89 f8                	mov    eax,edi
c00015bd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015c1:	f7 d8                	neg    eax
c00015c3:	21 c3                	and    ebx,eax
c00015c5:	83 eb 08             	sub    ebx,0x8
c00015c8:	89 d8                	mov    eax,ebx
c00015ca:	29 f0                	sub    eax,esi
c00015cc:	83 f8 0f             	cmp    eax,0xf
c00015cf:	77 02                	ja     c00015d3 <dlmemalign+0x98>
c00015d1:	01 fb                	add    ebx,edi
c00015d3:	89 d8                	mov    eax,ebx
c00015d5:	29 f0                	sub    eax,esi
c00015d7:	89 c6                	mov    esi,eax
c00015d9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015dc:	89 c2                	mov    edx,eax
c00015de:	83 e2 fc             	and    edx,0xfffffffc
c00015e1:	29 f2                	sub    edx,esi
c00015e3:	a8 02                	test   al,0x2
c00015e5:	74 10                	je     c00015f7 <dlmemalign+0xbc>
c00015e7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015ea:	83 ca 02             	or     edx,0x2
c00015ed:	8d 43 08             	lea    eax,[ebx+0x8]
c00015f0:	89 33                	mov    DWORD PTR [ebx],esi
c00015f2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f5:	eb 5f                	jmp    c0001656 <dlmemalign+0x11b>
c00015f7:	89 d0                	mov    eax,edx
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	83 c8 01             	or     eax,0x1
c00015ff:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001602:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001607:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000160a:	83 e0 01             	and    eax,0x1
c000160d:	09 f0                	or     eax,esi
c000160f:	89 de                	mov    esi,ebx
c0001611:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001614:	51                   	push   ecx
c0001615:	e8 d1 f4 ff ff       	call   c0000aeb <dlfree>
c000161a:	83 c4 10             	add    esp,0x10
c000161d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001620:	a8 02                	test   al,0x2
c0001622:	75 2f                	jne    c0001653 <dlmemalign+0x118>
c0001624:	83 e0 fc             	and    eax,0xfffffffc
c0001627:	8d 55 10             	lea    edx,[ebp+0x10]
c000162a:	39 c2                	cmp    edx,eax
c000162c:	73 25                	jae    c0001653 <dlmemalign+0x118>
c000162e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001631:	29 e8                	sub    eax,ebp
c0001633:	83 c8 01             	or     eax,0x1
c0001636:	83 ec 0c             	sub    esp,0xc
c0001639:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000163c:	83 c2 08             	add    edx,0x8
c000163f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001642:	83 e0 01             	and    eax,0x1
c0001645:	09 c5                	or     ebp,eax
c0001647:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000164a:	52                   	push   edx
c000164b:	e8 9b f4 ff ff       	call   c0000aeb <dlfree>
c0001650:	83 c4 10             	add    esp,0x10
c0001653:	8d 46 08             	lea    eax,[esi+0x8]
c0001656:	83 c4 0c             	add    esp,0xc
c0001659:	5b                   	pop    ebx
c000165a:	5e                   	pop    esi
c000165b:	5f                   	pop    edi
c000165c:	5d                   	pop    ebp
c000165d:	c3                   	ret    

c000165e <dlcalloc>:
c000165e:	53                   	push   ebx
c000165f:	83 ec 14             	sub    esp,0x14
c0001662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001666:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000166b:	50                   	push   eax
c000166c:	e8 d8 f7 ff ff       	call   c0000e49 <dlmalloc>
c0001671:	83 c4 10             	add    esp,0x10
c0001674:	89 c3                	mov    ebx,eax
c0001676:	85 c0                	test   eax,eax
c0001678:	74 77                	je     c00016f1 <dlcalloc+0x93>
c000167a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000167d:	89 d0                	mov    eax,edx
c000167f:	83 e0 fc             	and    eax,0xfffffffc
c0001682:	80 e2 02             	and    dl,0x2
c0001685:	75 5a                	jne    c00016e1 <dlcalloc+0x83>
c0001687:	83 e8 04             	sub    eax,0x4
c000168a:	83 f8 27             	cmp    eax,0x27
c000168d:	76 03                	jbe    c0001692 <dlcalloc+0x34>
c000168f:	51                   	push   ecx
c0001690:	eb 53                	jmp    c00016e5 <dlcalloc+0x87>
c0001692:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001698:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a6:	83 f8 13             	cmp    eax,0x13
c00016a9:	76 46                	jbe    c00016f1 <dlcalloc+0x93>
c00016ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016b2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b9:	83 f8 1b             	cmp    eax,0x1b
c00016bc:	76 33                	jbe    c00016f1 <dlcalloc+0x93>
c00016be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016cc:	83 f8 23             	cmp    eax,0x23
c00016cf:	76 20                	jbe    c00016f1 <dlcalloc+0x93>
c00016d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016df:	eb 10                	jmp    c00016f1 <dlcalloc+0x93>
c00016e1:	83 e8 08             	sub    eax,0x8
c00016e4:	52                   	push   edx
c00016e5:	50                   	push   eax
c00016e6:	6a 00                	push   0x0
c00016e8:	53                   	push   ebx
c00016e9:	e8 1a ef ff ff       	call   c0000608 <memset>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 08             	add    esp,0x8
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	c3                   	ret    

c00016f8 <dlcfree>:
c00016f8:	e9 ee f3 ff ff       	jmp    c0000aeb <dlfree>

c00016fd <dlindependent_calloc>:
c00016fd:	83 ec 28             	sub    esp,0x28
c0001700:	b9 03 00 00 00       	mov    ecx,0x3
c0001705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001709:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000170d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001715:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001719:	e8 b9 fa ff ff       	call   c00011d7 <iALLOc>
c000171e:	83 c4 2c             	add    esp,0x2c
c0001721:	c3                   	ret    

c0001722 <dlindependent_comalloc>:
c0001722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000172a:	31 c9                	xor    ecx,ecx
c000172c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001734:	e9 9e fa ff ff       	jmp    c00011d7 <iALLOc>

c0001739 <dlvalloc>:
c0001739:	83 ec 0c             	sub    esp,0xc
c000173c:	83 3d 00 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c00,0x0
c0001743:	75 0a                	jne    c000174f <dlvalloc+0x16>
c0001745:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c000174a:	e8 b5 f2 ff ff       	call   c0000a04 <malloc_consolidate>
c000174f:	50                   	push   eax
c0001750:	50                   	push   eax
c0001751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001755:	ff 35 5c 3f 02 c0    	push   DWORD PTR ds:0xc0023f5c
c000175b:	e8 db fd ff ff       	call   c000153b <dlmemalign>
c0001760:	83 c4 1c             	add    esp,0x1c
c0001763:	c3                   	ret    

c0001764 <dlpvalloc>:
c0001764:	83 ec 0c             	sub    esp,0xc
c0001767:	83 3d 00 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c00,0x0
c000176e:	75 0a                	jne    c000177a <dlpvalloc+0x16>
c0001770:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0001775:	e8 8a f2 ff ff       	call   c0000a04 <malloc_consolidate>
c000177a:	52                   	push   edx
c000177b:	a1 5c 3f 02 c0       	mov    eax,ds:0xc0023f5c
c0001780:	52                   	push   edx
c0001781:	89 c1                	mov    ecx,eax
c0001783:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001787:	f7 d9                	neg    ecx
c0001789:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000178d:	21 ca                	and    edx,ecx
c000178f:	52                   	push   edx
c0001790:	50                   	push   eax
c0001791:	e8 a5 fd ff ff       	call   c000153b <dlmemalign>
c0001796:	83 c4 1c             	add    esp,0x1c
c0001799:	c3                   	ret    

c000179a <dlmalloc_trim>:
c000179a:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c000179f:	e8 60 f2 ff ff       	call   c0000a04 <malloc_consolidate>
c00017a4:	31 c0                	xor    eax,eax
c00017a6:	c3                   	ret    

c00017a7 <dlmalloc_usable_size>:
c00017a7:	53                   	push   ebx
c00017a8:	31 c0                	xor    eax,eax
c00017aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017ae:	85 c9                	test   ecx,ecx
c00017b0:	74 24                	je     c00017d6 <dlmalloc_usable_size+0x2f>
c00017b2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b5:	f6 c2 02             	test   dl,0x2
c00017b8:	74 08                	je     c00017c2 <dlmalloc_usable_size+0x1b>
c00017ba:	83 e2 fc             	and    edx,0xfffffffc
c00017bd:	8d 42 f8             	lea    eax,[edx-0x8]
c00017c0:	eb 14                	jmp    c00017d6 <dlmalloc_usable_size+0x2f>
c00017c2:	89 d3                	mov    ebx,edx
c00017c4:	31 c0                	xor    eax,eax
c00017c6:	83 e3 fe             	and    ebx,0xfffffffe
c00017c9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ce:	74 06                	je     c00017d6 <dlmalloc_usable_size+0x2f>
c00017d0:	83 e2 fc             	and    edx,0xfffffffc
c00017d3:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d6:	5b                   	pop    ebx
c00017d7:	c3                   	ret    

c00017d8 <dlmallinfo>:
c00017d8:	55                   	push   ebp
c00017d9:	57                   	push   edi
c00017da:	56                   	push   esi
c00017db:	53                   	push   ebx
c00017dc:	83 ec 08             	sub    esp,0x8
c00017df:	83 3d 2c 3c 02 c0 00 	cmp    DWORD PTR ds:0xc0023c2c,0x0
c00017e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017ea:	75 0a                	jne    c00017f6 <dlmallinfo+0x1e>
c00017ec:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c00017f1:	e8 0e f2 ff ff       	call   c0000a04 <malloc_consolidate>
c00017f6:	a1 2c 3c 02 c0       	mov    eax,ds:0xc0023c2c
c00017fb:	31 ed                	xor    ebp,ebp
c00017fd:	31 c9                	xor    ecx,ecx
c00017ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001802:	83 e0 fc             	and    eax,0xfffffffc
c0001805:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001809:	31 c0                	xor    eax,eax
c000180b:	8b 14 85 04 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc3fc]
c0001812:	85 d2                	test   edx,edx
c0001814:	74 0e                	je     c0001824 <dlmallinfo+0x4c>
c0001816:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001819:	45                   	inc    ebp
c000181a:	83 e6 fc             	and    esi,0xfffffffc
c000181d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001820:	01 f1                	add    ecx,esi
c0001822:	eb ee                	jmp    c0001812 <dlmallinfo+0x3a>
c0001824:	40                   	inc    eax
c0001825:	83 f8 0a             	cmp    eax,0xa
c0001828:	75 e1                	jne    c000180b <dlmallinfo+0x33>
c000182a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000182e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001835:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001838:	b8 34 3c 02 c0       	mov    eax,0xc0023c34
c000183d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001840:	39 f0                	cmp    eax,esi
c0001842:	74 10                	je     c0001854 <dlmallinfo+0x7c>
c0001844:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001847:	ff 04 24             	inc    DWORD PTR [esp]
c000184a:	83 e7 fc             	and    edi,0xfffffffc
c000184d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001850:	01 fa                	add    edx,edi
c0001852:	eb ec                	jmp    c0001840 <dlmallinfo+0x68>
c0001854:	83 c0 08             	add    eax,0x8
c0001857:	3d 2c 3f 02 c0       	cmp    eax,0xc0023f2c
c000185c:	75 df                	jne    c000183d <dlmallinfo+0x65>
c000185e:	a1 68 3f 02 c0       	mov    eax,ds:0xc0023f68
c0001863:	8b 35 50 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023f50
c0001869:	89 03                	mov    DWORD PTR [ebx],eax
c000186b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186e:	29 d0                	sub    eax,edx
c0001870:	8b 35 64 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023f64
c0001876:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001879:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000187f:	8b 35 74 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023f74
c0001885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001889:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000188c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188f:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001892:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001895:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001898:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000189b:	83 c4 08             	add    esp,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	5b                   	pop    ebx
c00018a1:	5e                   	pop    esi
c00018a2:	5f                   	pop    edi
c00018a3:	5d                   	pop    ebp
c00018a4:	c2 04 00             	ret    0x4

c00018a7 <dlmalloc_stats>:
c00018a7:	83 ec 30             	sub    esp,0x30
c00018aa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018ae:	50                   	push   eax
c00018af:	e8 24 ff ff ff       	call   c00017d8 <dlmallinfo>
c00018b4:	83 c4 30             	add    esp,0x30
c00018b7:	c3                   	ret    

c00018b8 <dlmallopt>:
c00018b8:	56                   	push   esi
c00018b9:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c00018be:	53                   	push   ebx
c00018bf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c7:	e8 38 f1 ff ff       	call   c0000a04 <malloc_consolidate>
c00018cc:	8d 46 04             	lea    eax,[esi+0x4]
c00018cf:	83 f8 05             	cmp    eax,0x5
c00018d2:	77 67                	ja     c000193b <dlmallopt+0x83>
c00018d4:	ff 24 85 c4 fc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe033c]
c00018db:	83 fb 50             	cmp    ebx,0x50
c00018de:	77 5b                	ja     c000193b <dlmallopt+0x83>
c00018e0:	ba 08 00 00 00       	mov    edx,0x8
c00018e5:	85 db                	test   ebx,ebx
c00018e7:	74 12                	je     c00018fb <dlmallopt+0x43>
c00018e9:	83 c3 0b             	add    ebx,0xb
c00018ec:	ba 10 00 00 00       	mov    edx,0x10
c00018f1:	83 fb 0f             	cmp    ebx,0xf
c00018f4:	76 05                	jbe    c00018fb <dlmallopt+0x43>
c00018f6:	89 da                	mov    edx,ebx
c00018f8:	83 e2 f8             	and    edx,0xfffffff8
c00018fb:	a1 00 3c 02 c0       	mov    eax,ds:0xc0023c00
c0001900:	83 e0 03             	and    eax,0x3
c0001903:	09 d0                	or     eax,edx
c0001905:	a3 00 3c 02 c0       	mov    ds:0xc0023c00,eax
c000190a:	eb 31                	jmp    c000193d <dlmallopt+0x85>
c000190c:	89 1d 44 3f 02 c0    	mov    DWORD PTR ds:0xc0023f44,ebx
c0001912:	eb 06                	jmp    c000191a <dlmallopt+0x62>
c0001914:	89 1d 48 3f 02 c0    	mov    DWORD PTR ds:0xc0023f48,ebx
c000191a:	be 01 00 00 00       	mov    esi,0x1
c000191f:	eb 1c                	jmp    c000193d <dlmallopt+0x85>
c0001921:	89 1d 4c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f4c,ebx
c0001927:	eb f1                	jmp    c000191a <dlmallopt+0x62>
c0001929:	31 f6                	xor    esi,esi
c000192b:	85 db                	test   ebx,ebx
c000192d:	75 0e                	jne    c000193d <dlmallopt+0x85>
c000192f:	c7 05 54 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f54,0x0
c0001939:	eb df                	jmp    c000191a <dlmallopt+0x62>
c000193b:	31 f6                	xor    esi,esi
c000193d:	5b                   	pop    ebx
c000193e:	89 f0                	mov    eax,esi
c0001940:	5e                   	pop    esi
c0001941:	c3                   	ret    

c0001942 <disk_status>:
c0001942:	31 c0                	xor    eax,eax
c0001944:	c3                   	ret    

c0001945 <disk_initialize>:
c0001945:	31 c0                	xor    eax,eax
c0001947:	c3                   	ret    

c0001948 <disk_read>:
c0001948:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194d:	0f b6 04 85 20 55 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdaae0]
c0001955:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001959:	e9 0e 87 01 00       	jmp    c001a06c <fatWrapperReadDisk>

c000195e <disk_write>:
c000195e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001963:	0f b6 04 85 20 55 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdaae0]
c000196b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196f:	e9 43 87 01 00       	jmp    c001a0b7 <fatWrapperWriteDisk>

c0001974 <disk_ioctl>:
c0001974:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000197d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001982:	0f b6 04 85 20 55 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdaae0]
c000198a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000198e:	e9 6f 87 01 00       	jmp    c001a102 <fatWrapperIoctl>

c0001993 <ld_word>:
c0001993:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001997:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199a:	c1 e2 08             	shl    edx,0x8
c000199d:	09 d0                	or     eax,edx
c000199f:	c3                   	ret    

c00019a0 <ld_dword>:
c00019a0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00019a4:	89 d1                	mov    ecx,edx
c00019a6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019aa:	c1 e1 08             	shl    ecx,0x8
c00019ad:	09 ca                	or     edx,ecx
c00019af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019b2:	c1 e2 08             	shl    edx,0x8
c00019b5:	09 d0                	or     eax,edx
c00019b7:	c3                   	ret    

c00019b8 <ld_qword>:
c00019b8:	57                   	push   edi
c00019b9:	56                   	push   esi
c00019ba:	53                   	push   ebx
c00019bb:	31 db                	xor    ebx,ebx
c00019bd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019c0:	89 df                	mov    edi,ebx
c00019c2:	89 ce                	mov    esi,ecx
c00019c4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c8:	0f a4 f7 08          	shld   edi,esi,0x8
c00019cc:	c1 e6 08             	shl    esi,0x8
c00019cf:	09 f2                	or     edx,esi
c00019d1:	89 d6                	mov    esi,edx
c00019d3:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d7:	0f a4 f7 08          	shld   edi,esi,0x8
c00019db:	c1 e6 08             	shl    esi,0x8
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d6                	mov    esi,edx
c00019e2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e6:	0f a4 f7 08          	shld   edi,esi,0x8
c00019ea:	c1 e6 08             	shl    esi,0x8
c00019ed:	89 fb                	mov    ebx,edi
c00019ef:	09 f2                	or     edx,esi
c00019f1:	89 d1                	mov    ecx,edx
c00019f3:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f7:	89 da                	mov    edx,ebx
c00019f9:	5b                   	pop    ebx
c00019fa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019fd:	c1 e1 08             	shl    ecx,0x8
c0001a00:	5e                   	pop    esi
c0001a01:	09 c8                	or     eax,ecx
c0001a03:	5f                   	pop    edi
c0001a04:	c3                   	ret    

c0001a05 <st_word>:
c0001a05:	66 89 10             	mov    WORD PTR [eax],dx
c0001a08:	c3                   	ret    

c0001a09 <st_dword>:
c0001a09:	89 10                	mov    DWORD PTR [eax],edx
c0001a0b:	c3                   	ret    

c0001a0c <st_qword>:
c0001a0c:	89 10                	mov    DWORD PTR [eax],edx
c0001a0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a11:	c3                   	ret    

c0001a12 <mem_cpy>:
c0001a12:	85 c9                	test   ecx,ecx
c0001a14:	74 10                	je     c0001a26 <mem_cpy+0x14>
c0001a16:	57                   	push   edi
c0001a17:	01 c1                	add    ecx,eax
c0001a19:	56                   	push   esi
c0001a1a:	89 c7                	mov    edi,eax
c0001a1c:	89 d6                	mov    esi,edx
c0001a1e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1f:	39 f9                	cmp    ecx,edi
c0001a21:	75 fb                	jne    c0001a1e <mem_cpy+0xc>
c0001a23:	5e                   	pop    esi
c0001a24:	5f                   	pop    edi
c0001a25:	c3                   	ret    
c0001a26:	c3                   	ret    

c0001a27 <mem_set>:
c0001a27:	01 c1                	add    ecx,eax
c0001a29:	40                   	inc    eax
c0001a2a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a2d:	39 c8                	cmp    eax,ecx
c0001a2f:	75 f8                	jne    c0001a29 <mem_set+0x2>
c0001a31:	c3                   	ret    

c0001a32 <mem_cmp>:
c0001a32:	57                   	push   edi
c0001a33:	56                   	push   esi
c0001a34:	89 c6                	mov    esi,eax
c0001a36:	53                   	push   ebx
c0001a37:	46                   	inc    esi
c0001a38:	42                   	inc    edx
c0001a39:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a3d:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a41:	29 fb                	sub    ebx,edi
c0001a43:	89 cf                	mov    edi,ecx
c0001a45:	29 f7                	sub    edi,esi
c0001a47:	01 c7                	add    edi,eax
c0001a49:	74 04                	je     c0001a4f <mem_cmp+0x1d>
c0001a4b:	85 db                	test   ebx,ebx
c0001a4d:	74 e8                	je     c0001a37 <mem_cmp+0x5>
c0001a4f:	89 d8                	mov    eax,ebx
c0001a51:	5b                   	pop    ebx
c0001a52:	5e                   	pop    esi
c0001a53:	5f                   	pop    edi
c0001a54:	c3                   	ret    

c0001a55 <chk_chr>:
c0001a55:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a58:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a5b:	74 07                	je     c0001a64 <chk_chr+0xf>
c0001a5d:	39 d1                	cmp    ecx,edx
c0001a5f:	74 03                	je     c0001a64 <chk_chr+0xf>
c0001a61:	40                   	inc    eax
c0001a62:	eb f1                	jmp    c0001a55 <chk_chr>
c0001a64:	89 c8                	mov    eax,ecx
c0001a66:	c3                   	ret    

c0001a67 <dbc_1st>:
c0001a67:	31 c0                	xor    eax,eax
c0001a69:	c3                   	ret    

c0001a6a <dbc_2nd>:
c0001a6a:	31 c0                	xor    eax,eax
c0001a6c:	c3                   	ret    

c0001a6d <tchar2uni>:
c0001a6d:	57                   	push   edi
c0001a6e:	89 c7                	mov    edi,eax
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a74:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a76:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a79:	84 c9                	test   cl,cl
c0001a7b:	78 0a                	js     c0001a87 <tchar2uni+0x1a>
c0001a7d:	0f b6 d1             	movzx  edx,cl
c0001a80:	89 f3                	mov    ebx,esi
c0001a82:	e9 9f 00 00 00       	jmp    c0001b26 <tchar2uni+0xb9>
c0001a87:	88 ca                	mov    dl,cl
c0001a89:	83 e2 e0             	and    edx,0xffffffe0
c0001a8c:	80 fa c0             	cmp    dl,0xc0
c0001a8f:	75 0c                	jne    c0001a9d <tchar2uni+0x30>
c0001a91:	89 ca                	mov    edx,ecx
c0001a93:	b9 01 00 00 00       	mov    ecx,0x1
c0001a98:	83 e2 1f             	and    edx,0x1f
c0001a9b:	eb 2e                	jmp    c0001acb <tchar2uni+0x5e>
c0001a9d:	88 ca                	mov    dl,cl
c0001a9f:	83 e2 f0             	and    edx,0xfffffff0
c0001aa2:	80 fa e0             	cmp    dl,0xe0
c0001aa5:	75 0c                	jne    c0001ab3 <tchar2uni+0x46>
c0001aa7:	89 ca                	mov    edx,ecx
c0001aa9:	b9 02 00 00 00       	mov    ecx,0x2
c0001aae:	83 e2 0f             	and    edx,0xf
c0001ab1:	eb 18                	jmp    c0001acb <tchar2uni+0x5e>
c0001ab3:	88 ca                	mov    dl,cl
c0001ab5:	83 e2 f8             	and    edx,0xfffffff8
c0001ab8:	88 d0                	mov    al,dl
c0001aba:	83 ca ff             	or     edx,0xffffffff
c0001abd:	3c f0                	cmp    al,0xf0
c0001abf:	75 6c                	jne    c0001b2d <tchar2uni+0xc0>
c0001ac1:	89 ca                	mov    edx,ecx
c0001ac3:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac8:	83 e2 07             	and    edx,0x7
c0001acb:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001acf:	46                   	inc    esi
c0001ad0:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ad3:	88 c8                	mov    al,cl
c0001ad5:	83 e0 c0             	and    eax,0xffffffc0
c0001ad8:	3c 80                	cmp    al,0x80
c0001ada:	75 4e                	jne    c0001b2a <tchar2uni+0xbd>
c0001adc:	c1 e2 06             	shl    edx,0x6
c0001adf:	83 e1 3f             	and    ecx,0x3f
c0001ae2:	09 ca                	or     edx,ecx
c0001ae4:	39 de                	cmp    esi,ebx
c0001ae6:	75 e7                	jne    c0001acf <tchar2uni+0x62>
c0001ae8:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001aee:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001af4:	76 34                	jbe    c0001b2a <tchar2uni+0xbd>
c0001af6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001af9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aff:	77 29                	ja     c0001b2a <tchar2uni+0xbd>
c0001b01:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b07:	76 1d                	jbe    c0001b26 <tchar2uni+0xb9>
c0001b09:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b15:	c1 e1 06             	shl    ecx,0x6
c0001b18:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b1e:	09 ca                	or     edx,ecx
c0001b20:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b26:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b28:	eb 03                	jmp    c0001b2d <tchar2uni+0xc0>
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	5b                   	pop    ebx
c0001b2e:	89 d0                	mov    eax,edx
c0001b30:	5e                   	pop    esi
c0001b31:	5f                   	pop    edi
c0001b32:	c3                   	ret    

c0001b33 <put_utf>:
c0001b33:	53                   	push   ebx
c0001b34:	83 f8 7f             	cmp    eax,0x7f
c0001b37:	89 c3                	mov    ebx,eax
c0001b39:	b0 00                	mov    al,0x0
c0001b3b:	77 11                	ja     c0001b4e <put_utf+0x1b>
c0001b3d:	85 c9                	test   ecx,ecx
c0001b3f:	0f 84 e5 00 00 00    	je     c0001c2a <put_utf+0xf7>
c0001b45:	88 1a                	mov    BYTE PTR [edx],bl
c0001b47:	b0 01                	mov    al,0x1
c0001b49:	e9 dc 00 00 00       	jmp    c0001c2a <put_utf+0xf7>
c0001b4e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b54:	77 23                	ja     c0001b79 <put_utf+0x46>
c0001b56:	83 f9 01             	cmp    ecx,0x1
c0001b59:	0f 86 cb 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b5f:	89 d8                	mov    eax,ebx
c0001b61:	83 e3 3f             	and    ebx,0x3f
c0001b64:	c1 e8 06             	shr    eax,0x6
c0001b67:	83 cb 80             	or     ebx,0xffffff80
c0001b6a:	83 c8 c0             	or     eax,0xffffffc0
c0001b6d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b70:	88 02                	mov    BYTE PTR [edx],al
c0001b72:	b0 02                	mov    al,0x2
c0001b74:	e9 b1 00 00 00       	jmp    c0001c2a <put_utf+0xf7>
c0001b79:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7f:	77 40                	ja     c0001bc1 <put_utf+0x8e>
c0001b81:	83 f9 02             	cmp    ecx,0x2
c0001b84:	0f 86 a0 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b8a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b90:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b96:	0f 86 8e 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b9c:	89 d8                	mov    eax,ebx
c0001b9e:	c1 e8 0c             	shr    eax,0xc
c0001ba1:	83 c8 e0             	or     eax,0xffffffe0
c0001ba4:	88 02                	mov    BYTE PTR [edx],al
c0001ba6:	89 d8                	mov    eax,ebx
c0001ba8:	c1 e8 06             	shr    eax,0x6
c0001bab:	83 e3 3f             	and    ebx,0x3f
c0001bae:	83 e0 3f             	and    eax,0x3f
c0001bb1:	83 cb 80             	or     ebx,0xffffff80
c0001bb4:	83 c8 80             	or     eax,0xffffff80
c0001bb7:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bbd:	b0 03                	mov    al,0x3
c0001bbf:	eb 69                	jmp    c0001c2a <put_utf+0xf7>
c0001bc1:	83 f9 03             	cmp    ecx,0x3
c0001bc4:	76 64                	jbe    c0001c2a <put_utf+0xf7>
c0001bc6:	89 d9                	mov    ecx,ebx
c0001bc8:	66 31 c9             	xor    cx,cx
c0001bcb:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd1:	0f b7 c3             	movzx  eax,bx
c0001bd4:	c1 e9 06             	shr    ecx,0x6
c0001bd7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bdd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be3:	77 43                	ja     c0001c28 <put_utf+0xf5>
c0001be5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001beb:	77 3b                	ja     c0001c28 <put_utf+0xf5>
c0001bed:	09 cb                	or     ebx,ecx
c0001bef:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf5:	89 d8                	mov    eax,ebx
c0001bf7:	c1 e8 12             	shr    eax,0x12
c0001bfa:	83 c8 f0             	or     eax,0xfffffff0
c0001bfd:	88 02                	mov    BYTE PTR [edx],al
c0001bff:	89 d8                	mov    eax,ebx
c0001c01:	c1 e8 0c             	shr    eax,0xc
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	83 c8 80             	or     eax,0xffffff80
c0001c0a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c0d:	89 d8                	mov    eax,ebx
c0001c0f:	c1 e8 06             	shr    eax,0x6
c0001c12:	83 e3 3f             	and    ebx,0x3f
c0001c15:	83 e0 3f             	and    eax,0x3f
c0001c18:	83 cb 80             	or     ebx,0xffffff80
c0001c1b:	83 c8 80             	or     eax,0xffffff80
c0001c1e:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c21:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c24:	b0 04                	mov    al,0x4
c0001c26:	eb 02                	jmp    c0001c2a <put_utf+0xf7>
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	5b                   	pop    ebx
c0001c2b:	c3                   	ret    

c0001c2c <clst2sect>:
c0001c2c:	89 c1                	mov    ecx,eax
c0001c2e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c31:	83 ea 02             	sub    edx,0x2
c0001c34:	83 e8 02             	sub    eax,0x2
c0001c37:	39 d0                	cmp    eax,edx
c0001c39:	76 0d                	jbe    c0001c48 <clst2sect+0x1c>
c0001c3b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3f:	f7 e2                	mul    edx
c0001c41:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c44:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c47:	c3                   	ret    
c0001c48:	31 c0                	xor    eax,eax
c0001c4a:	31 d2                	xor    edx,edx
c0001c4c:	c3                   	ret    

c0001c4d <clmt_clust>:
c0001c4d:	57                   	push   edi
c0001c4e:	89 cf                	mov    edi,ecx
c0001c50:	56                   	push   esi
c0001c51:	89 d6                	mov    esi,edx
c0001c53:	53                   	push   ebx
c0001c54:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c59:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c5d:	c1 ef 09             	shr    edi,0x9
c0001c60:	89 f2                	mov    edx,esi
c0001c62:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c65:	89 f9                	mov    ecx,edi
c0001c67:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c6b:	31 ff                	xor    edi,edi
c0001c6d:	57                   	push   edi
c0001c6e:	56                   	push   esi
c0001c6f:	51                   	push   ecx
c0001c70:	52                   	push   edx
c0001c71:	e8 46 d1 01 00       	call   c001edbc <__udivdi3>
c0001c76:	83 c4 10             	add    esp,0x10
c0001c79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c7b:	85 d2                	test   edx,edx
c0001c7d:	74 10                	je     c0001c8f <clmt_clust+0x42>
c0001c7f:	39 d0                	cmp    eax,edx
c0001c81:	72 07                	jb     c0001c8a <clmt_clust+0x3d>
c0001c83:	29 d0                	sub    eax,edx
c0001c85:	83 c3 08             	add    ebx,0x8
c0001c88:	eb ef                	jmp    c0001c79 <clmt_clust+0x2c>
c0001c8a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c8d:	89 c2                	mov    edx,eax
c0001c8f:	5b                   	pop    ebx
c0001c90:	89 d0                	mov    eax,edx
c0001c92:	5e                   	pop    esi
c0001c93:	5f                   	pop    edi
c0001c94:	c3                   	ret    

c0001c95 <pick_lfn>:
c0001c95:	55                   	push   ebp
c0001c96:	57                   	push   edi
c0001c97:	56                   	push   esi
c0001c98:	89 d6                	mov    esi,edx
c0001c9a:	53                   	push   ebx
c0001c9b:	89 c3                	mov    ebx,eax
c0001c9d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ca0:	e8 ee fc ff ff       	call   c0001993 <ld_word>
c0001ca5:	66 85 c0             	test   ax,ax
c0001ca8:	74 04                	je     c0001cae <pick_lfn+0x19>
c0001caa:	31 c0                	xor    eax,eax
c0001cac:	eb 5c                	jmp    c0001d0a <pick_lfn+0x75>
c0001cae:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb9:	49                   	dec    ecx
c0001cba:	31 ff                	xor    edi,edi
c0001cbc:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cbf:	0f b6 87 e0 fd 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0220]
c0001cc6:	01 f0                	add    eax,esi
c0001cc8:	e8 c6 fc ff ff       	call   c0001993 <ld_word>
c0001ccd:	66 85 ed             	test   bp,bp
c0001cd0:	74 11                	je     c0001ce3 <pick_lfn+0x4e>
c0001cd2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd8:	77 d0                	ja     c0001caa <pick_lfn+0x15>
c0001cda:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cde:	89 c5                	mov    ebp,eax
c0001ce0:	41                   	inc    ecx
c0001ce1:	eb 04                	jmp    c0001ce7 <pick_lfn+0x52>
c0001ce3:	66 40                	inc    ax
c0001ce5:	75 c3                	jne    c0001caa <pick_lfn+0x15>
c0001ce7:	47                   	inc    edi
c0001ce8:	83 ff 0d             	cmp    edi,0xd
c0001ceb:	75 d2                	jne    c0001cbf <pick_lfn+0x2a>
c0001ced:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cf0:	74 13                	je     c0001d05 <pick_lfn+0x70>
c0001cf2:	66 85 ed             	test   bp,bp
c0001cf5:	74 0e                	je     c0001d05 <pick_lfn+0x70>
c0001cf7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cfd:	77 ab                	ja     c0001caa <pick_lfn+0x15>
c0001cff:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d05:	b8 01 00 00 00       	mov    eax,0x1
c0001d0a:	5b                   	pop    ebx
c0001d0b:	5e                   	pop    esi
c0001d0c:	5f                   	pop    edi
c0001d0d:	5d                   	pop    ebp
c0001d0e:	c3                   	ret    

c0001d0f <put_lfn>:
c0001d0f:	55                   	push   ebp
c0001d10:	31 ed                	xor    ebp,ebp
c0001d12:	57                   	push   edi
c0001d13:	89 d7                	mov    edi,edx
c0001d15:	56                   	push   esi
c0001d16:	31 f6                	xor    esi,esi
c0001d18:	53                   	push   ebx
c0001d19:	83 ec 08             	sub    esp,0x8
c0001d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d23:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d26:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d2c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2f:	31 d2                	xor    edx,edx
c0001d31:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d35:	e8 cb fc ff ff       	call   c0001a05 <st_word>
c0001d3a:	0f b6 d9             	movzx  ebx,cl
c0001d3d:	4b                   	dec    ebx
c0001d3e:	6b db 0d             	imul   ebx,ebx,0xd
c0001d41:	66 83 fe ff          	cmp    si,0xffff
c0001d45:	74 08                	je     c0001d4f <put_lfn+0x40>
c0001d47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d4a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d4e:	43                   	inc    ebx
c0001d4f:	0f b6 85 e0 fd 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0220]
c0001d56:	0f b7 d6             	movzx  edx,si
c0001d59:	01 f8                	add    eax,edi
c0001d5b:	e8 a5 fc ff ff       	call   c0001a05 <st_word>
c0001d60:	66 85 f6             	test   si,si
c0001d63:	75 03                	jne    c0001d68 <put_lfn+0x59>
c0001d65:	83 ce ff             	or     esi,0xffffffff
c0001d68:	45                   	inc    ebp
c0001d69:	83 fd 0d             	cmp    ebp,0xd
c0001d6c:	75 d3                	jne    c0001d41 <put_lfn+0x32>
c0001d6e:	66 46                	inc    si
c0001d70:	74 0a                	je     c0001d7c <put_lfn+0x6d>
c0001d72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d75:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d7a:	75 09                	jne    c0001d85 <put_lfn+0x76>
c0001d7c:	88 c8                	mov    al,cl
c0001d7e:	83 c8 40             	or     eax,0x40
c0001d81:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d89:	88 07                	mov    BYTE PTR [edi],al
c0001d8b:	83 c4 08             	add    esp,0x8
c0001d8e:	5b                   	pop    ebx
c0001d8f:	5e                   	pop    esi
c0001d90:	5f                   	pop    edi
c0001d91:	5d                   	pop    ebp
c0001d92:	c3                   	ret    

c0001d93 <gen_numname>:
c0001d93:	57                   	push   edi
c0001d94:	89 cf                	mov    edi,ecx
c0001d96:	56                   	push   esi
c0001d97:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d9c:	53                   	push   ebx
c0001d9d:	89 c6                	mov    esi,eax
c0001d9f:	83 ec 10             	sub    esp,0x10
c0001da2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da6:	e8 67 fc ff ff       	call   c0001a12 <mem_cpy>
c0001dab:	83 fb 05             	cmp    ebx,0x5
c0001dae:	76 2d                	jbe    c0001ddd <gen_numname+0x4a>
c0001db0:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001db3:	66 85 c0             	test   ax,ax
c0001db6:	74 25                	je     c0001ddd <gen_numname+0x4a>
c0001db8:	83 c7 02             	add    edi,0x2
c0001dbb:	ba 10 00 00 00       	mov    edx,0x10
c0001dc0:	89 c1                	mov    ecx,eax
c0001dc2:	01 db                	add    ebx,ebx
c0001dc4:	66 d1 e8             	shr    ax,1
c0001dc7:	83 e1 01             	and    ecx,0x1
c0001dca:	01 cb                	add    ebx,ecx
c0001dcc:	0f ba e3 10          	bt     ebx,0x10
c0001dd0:	73 06                	jae    c0001dd8 <gen_numname+0x45>
c0001dd2:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd8:	4a                   	dec    edx
c0001dd9:	75 e5                	jne    c0001dc0 <gen_numname+0x2d>
c0001ddb:	eb d3                	jmp    c0001db0 <gen_numname+0x1d>
c0001ddd:	b8 07 00 00 00       	mov    eax,0x7
c0001de2:	88 d9                	mov    cl,bl
c0001de4:	83 e1 0f             	and    ecx,0xf
c0001de7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dea:	80 fa 39             	cmp    dl,0x39
c0001ded:	76 03                	jbe    c0001df2 <gen_numname+0x5f>
c0001def:	8d 51 37             	lea    edx,[ecx+0x37]
c0001df2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df9:	89 da                	mov    edx,ebx
c0001dfb:	c1 ea 04             	shr    edx,0x4
c0001dfe:	83 fb 0f             	cmp    ebx,0xf
c0001e01:	76 06                	jbe    c0001e09 <gen_numname+0x76>
c0001e03:	89 c8                	mov    eax,ecx
c0001e05:	89 d3                	mov    ebx,edx
c0001e07:	eb d9                	jmp    c0001de2 <gen_numname+0x4f>
c0001e09:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e0e:	31 d2                	xor    edx,edx
c0001e10:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e13:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e16:	39 ca                	cmp    edx,ecx
c0001e18:	73 18                	jae    c0001e32 <gen_numname+0x9f>
c0001e1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e1d:	3c 20                	cmp    al,0x20
c0001e1f:	74 11                	je     c0001e32 <gen_numname+0x9f>
c0001e21:	e8 41 fc ff ff       	call   c0001a67 <dbc_1st>
c0001e26:	85 c0                	test   eax,eax
c0001e28:	74 05                	je     c0001e2f <gen_numname+0x9c>
c0001e2a:	39 d3                	cmp    ebx,edx
c0001e2c:	74 04                	je     c0001e32 <gen_numname+0x9f>
c0001e2e:	42                   	inc    edx
c0001e2f:	42                   	inc    edx
c0001e30:	eb e1                	jmp    c0001e13 <gen_numname+0x80>
c0001e32:	b0 20                	mov    al,0x20
c0001e34:	83 f9 07             	cmp    ecx,0x7
c0001e37:	77 05                	ja     c0001e3e <gen_numname+0xab>
c0001e39:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e3d:	41                   	inc    ecx
c0001e3e:	42                   	inc    edx
c0001e3f:	83 fa 07             	cmp    edx,0x7
c0001e42:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e46:	76 ea                	jbe    c0001e32 <gen_numname+0x9f>
c0001e48:	83 c4 10             	add    esp,0x10
c0001e4b:	5b                   	pop    ebx
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    

c0001e4f <sum_sfn>:
c0001e4f:	31 c9                	xor    ecx,ecx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	d0 ca                	ror    dl,1
c0001e55:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e58:	41                   	inc    ecx
c0001e59:	83 f9 0b             	cmp    ecx,0xb
c0001e5c:	75 f5                	jne    c0001e53 <sum_sfn+0x4>
c0001e5e:	88 d0                	mov    al,dl
c0001e60:	c3                   	ret    

c0001e61 <xdir_sum>:
c0001e61:	56                   	push   esi
c0001e62:	31 c9                	xor    ecx,ecx
c0001e64:	53                   	push   ebx
c0001e65:	31 d2                	xor    edx,edx
c0001e67:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e6b:	43                   	inc    ebx
c0001e6c:	c1 e3 05             	shl    ebx,0x5
c0001e6f:	83 fa 02             	cmp    edx,0x2
c0001e72:	74 0b                	je     c0001e7f <xdir_sum+0x1e>
c0001e74:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e78:	66 d1 c9             	ror    cx,1
c0001e7b:	01 f1                	add    ecx,esi
c0001e7d:	eb 05                	jmp    c0001e84 <xdir_sum+0x23>
c0001e7f:	ba 03 00 00 00       	mov    edx,0x3
c0001e84:	42                   	inc    edx
c0001e85:	39 d3                	cmp    ebx,edx
c0001e87:	77 e6                	ja     c0001e6f <xdir_sum+0xe>
c0001e89:	5b                   	pop    ebx
c0001e8a:	89 c8                	mov    eax,ecx
c0001e8c:	5e                   	pop    esi
c0001e8d:	c3                   	ret    

c0001e8e <xsum32>:
c0001e8e:	d1 ca                	ror    edx,1
c0001e90:	0f b6 c0             	movzx  eax,al
c0001e93:	01 d0                	add    eax,edx
c0001e95:	c3                   	ret    

c0001e96 <get_xfileinfo>:
c0001e96:	55                   	push   ebp
c0001e97:	31 c9                	xor    ecx,ecx
c0001e99:	57                   	push   edi
c0001e9a:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9f:	56                   	push   esi
c0001ea0:	31 ff                	xor    edi,edi
c0001ea2:	53                   	push   ebx
c0001ea3:	89 c6                	mov    esi,eax
c0001ea5:	83 ec 0c             	sub    esp,0xc
c0001ea8:	89 d3                	mov    ebx,edx
c0001eaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eb1:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb8:	76 6d                	jbe    c0001f27 <get_xfileinfo+0x91>
c0001eba:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ec0:	76 0b                	jbe    c0001ecd <get_xfileinfo+0x37>
c0001ec2:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec6:	bf 01 00 00 00       	mov    edi,0x1
c0001ecb:	eb 63                	jmp    c0001f30 <get_xfileinfo+0x9a>
c0001ecd:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ed3:	75 03                	jne    c0001ed8 <get_xfileinfo+0x42>
c0001ed5:	83 c5 02             	add    ebp,0x2
c0001ed8:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001edb:	83 c5 02             	add    ebp,0x2
c0001ede:	e8 b0 fa ff ff       	call   c0001993 <ld_word>
c0001ee3:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee6:	66 85 c9             	test   cx,cx
c0001ee9:	75 0d                	jne    c0001ef8 <get_xfileinfo+0x62>
c0001eeb:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001ef1:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef6:	76 2b                	jbe    c0001f23 <get_xfileinfo+0x8d>
c0001ef8:	c1 e1 10             	shl    ecx,0x10
c0001efb:	ba ff 00 00 00       	mov    edx,0xff
c0001f00:	29 fa                	sub    edx,edi
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	0f b7 c0             	movzx  eax,ax
c0001f0d:	09 c8                	or     eax,ecx
c0001f0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f13:	e8 1b fc ff ff       	call   c0001b33 <put_utf>
c0001f18:	84 c0                	test   al,al
c0001f1a:	74 a6                	je     c0001ec2 <get_xfileinfo+0x2c>
c0001f1c:	0f b6 c0             	movzx  eax,al
c0001f1f:	01 c7                	add    edi,eax
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	89 c1                	mov    ecx,eax
c0001f25:	eb 8a                	jmp    c0001eb1 <get_xfileinfo+0x1b>
c0001f27:	85 ff                	test   edi,edi
c0001f29:	74 97                	je     c0001ec2 <get_xfileinfo+0x2c>
c0001f2b:	66 85 c9             	test   cx,cx
c0001f2e:	75 92                	jne    c0001ec2 <get_xfileinfo+0x2c>
c0001f30:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f35:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f39:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3c:	31 c0                	xor    eax,eax
c0001f3e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f41:	31 d2                	xor    edx,edx
c0001f43:	80 e1 10             	and    cl,0x10
c0001f46:	75 08                	jne    c0001f50 <get_xfileinfo+0xba>
c0001f48:	8d 46 38             	lea    eax,[esi+0x38]
c0001f4b:	e8 68 fa ff ff       	call   c00019b8 <ld_qword>
c0001f50:	89 03                	mov    DWORD PTR [ebx],eax
c0001f52:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f55:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f58:	e8 36 fa ff ff       	call   c0001993 <ld_word>
c0001f5d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f61:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f64:	e8 2a fa ff ff       	call   c0001993 <ld_word>
c0001f69:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f6d:	83 c4 0c             	add    esp,0xc
c0001f70:	5b                   	pop    ebx
c0001f71:	5e                   	pop    esi
c0001f72:	5f                   	pop    edi
c0001f73:	5d                   	pop    ebp
c0001f74:	c3                   	ret    

c0001f75 <get_ldnumber>:
c0001f75:	57                   	push   edi
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	83 cb ff             	or     ebx,0xffffffff
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 34                	je     c0001fb5 <get_ldnumber+0x40>
c0001f81:	89 c7                	mov    edi,eax
c0001f83:	89 d1                	mov    ecx,edx
c0001f85:	41                   	inc    ecx
c0001f86:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0001f89:	3c 1f                	cmp    al,0x1f
c0001f8b:	76 04                	jbe    c0001f91 <get_ldnumber+0x1c>
c0001f8d:	3c 3a                	cmp    al,0x3a
c0001f8f:	75 f4                	jne    c0001f85 <get_ldnumber+0x10>
c0001f91:	31 db                	xor    ebx,ebx
c0001f93:	3c 3a                	cmp    al,0x3a
c0001f95:	75 1e                	jne    c0001fb5 <get_ldnumber+0x40>
c0001f97:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f9a:	83 cb ff             	or     ebx,0xffffffff
c0001f9d:	8d 46 d0             	lea    eax,[esi-0x30]
c0001fa0:	3c 09                	cmp    al,0x9
c0001fa2:	77 11                	ja     c0001fb5 <get_ldnumber+0x40>
c0001fa4:	83 c2 02             	add    edx,0x2
c0001fa7:	39 d1                	cmp    ecx,edx
c0001fa9:	75 0a                	jne    c0001fb5 <get_ldnumber+0x40>
c0001fab:	89 f0                	mov    eax,esi
c0001fad:	89 0f                	mov    DWORD PTR [edi],ecx
c0001faf:	0f be d8             	movsx  ebx,al
c0001fb2:	83 eb 30             	sub    ebx,0x30
c0001fb5:	89 d8                	mov    eax,ebx
c0001fb7:	5b                   	pop    ebx
c0001fb8:	5e                   	pop    esi
c0001fb9:	5f                   	pop    edi
c0001fba:	c3                   	ret    

c0001fbb <crc32>:
c0001fbb:	56                   	push   esi
c0001fbc:	89 d6                	mov    esi,edx
c0001fbe:	53                   	push   ebx
c0001fbf:	b2 01                	mov    dl,0x1
c0001fc1:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc6:	89 f1                	mov    ecx,esi
c0001fc8:	84 d1                	test   cl,dl
c0001fca:	0f 95 c1             	setne  cl
c0001fcd:	0f b6 c9             	movzx  ecx,cl
c0001fd0:	31 c1                	xor    ecx,eax
c0001fd2:	89 c8                	mov    eax,ecx
c0001fd4:	d1 e8                	shr    eax,1
c0001fd6:	80 e1 01             	and    cl,0x1
c0001fd9:	74 05                	je     c0001fe0 <crc32+0x25>
c0001fdb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe0:	01 d2                	add    edx,edx
c0001fe2:	4b                   	dec    ebx
c0001fe3:	75 e1                	jne    c0001fc6 <crc32+0xb>
c0001fe5:	5b                   	pop    ebx
c0001fe6:	5e                   	pop    esi
c0001fe7:	c3                   	ret    

c0001fe8 <test_gpt_header>:
c0001fe8:	55                   	push   ebp
c0001fe9:	b9 10 00 00 00       	mov    ecx,0x10
c0001fee:	57                   	push   edi
c0001fef:	ba e0 fc 01 c0       	mov    edx,0xc001fce0
c0001ff4:	56                   	push   esi
c0001ff5:	31 ff                	xor    edi,edi
c0001ff7:	53                   	push   ebx
c0001ff8:	89 c3                	mov    ebx,eax
c0001ffa:	e8 33 fa ff ff       	call   c0001a32 <mem_cmp>
c0001fff:	85 c0                	test   eax,eax
c0002001:	75 55                	jne    c0002058 <test_gpt_header+0x70>
c0002003:	89 c7                	mov    edi,eax
c0002005:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200a:	83 ce ff             	or     esi,0xffffffff
c000200d:	31 d2                	xor    edx,edx
c000200f:	83 fd 03             	cmp    ebp,0x3
c0002012:	76 05                	jbe    c0002019 <test_gpt_header+0x31>
c0002014:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002019:	89 f0                	mov    eax,esi
c000201b:	45                   	inc    ebp
c000201c:	e8 9a ff ff ff       	call   c0001fbb <crc32>
c0002021:	83 fd 4c             	cmp    ebp,0x4c
c0002024:	89 c6                	mov    esi,eax
c0002026:	75 e5                	jne    c000200d <test_gpt_header+0x25>
c0002028:	8d 43 10             	lea    eax,[ebx+0x10]
c000202b:	e8 70 f9 ff ff       	call   c00019a0 <ld_dword>
c0002030:	f7 d6                	not    esi
c0002032:	39 c6                	cmp    esi,eax
c0002034:	75 22                	jne    c0002058 <test_gpt_header+0x70>
c0002036:	8d 43 54             	lea    eax,[ebx+0x54]
c0002039:	e8 62 f9 ff ff       	call   c00019a0 <ld_dword>
c000203e:	83 c0 80             	add    eax,0xffffff80
c0002041:	75 15                	jne    c0002058 <test_gpt_header+0x70>
c0002043:	8d 43 50             	lea    eax,[ebx+0x50]
c0002046:	e8 55 f9 ff ff       	call   c00019a0 <ld_dword>
c000204b:	3d 80 00 00 00       	cmp    eax,0x80
c0002050:	0f 96 c0             	setbe  al
c0002053:	0f b6 c0             	movzx  eax,al
c0002056:	89 c7                	mov    edi,eax
c0002058:	5b                   	pop    ebx
c0002059:	89 f8                	mov    eax,edi
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	5d                   	pop    ebp
c000205e:	c3                   	ret    

c000205f <make_rand>:
c000205f:	56                   	push   esi
c0002060:	85 c0                	test   eax,eax
c0002062:	53                   	push   ebx
c0002063:	75 05                	jne    c000206a <make_rand+0xb>
c0002065:	b8 01 00 00 00       	mov    eax,0x1
c000206a:	01 d1                	add    ecx,edx
c000206c:	bb 08 00 00 00       	mov    ebx,0x8
c0002071:	89 c6                	mov    esi,eax
c0002073:	d1 e8                	shr    eax,1
c0002075:	83 e6 01             	and    esi,0x1
c0002078:	85 f6                	test   esi,esi
c000207a:	74 05                	je     c0002081 <make_rand+0x22>
c000207c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002081:	4b                   	dec    ebx
c0002082:	75 ed                	jne    c0002071 <make_rand+0x12>
c0002084:	42                   	inc    edx
c0002085:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002088:	39 ca                	cmp    edx,ecx
c000208a:	75 e0                	jne    c000206c <make_rand+0xd>
c000208c:	5b                   	pop    ebx
c000208d:	5e                   	pop    esi
c000208e:	c3                   	ret    

c000208f <validate>:
c000208f:	56                   	push   esi
c0002090:	89 d6                	mov    esi,edx
c0002092:	53                   	push   ebx
c0002093:	85 c0                	test   eax,eax
c0002095:	51                   	push   ecx
c0002096:	75 09                	jne    c00020a1 <validate+0x12>
c0002098:	b8 09 00 00 00       	mov    eax,0x9
c000209d:	31 c9                	xor    ecx,ecx
c000209f:	eb 2f                	jmp    c00020d0 <validate+0x41>
c00020a1:	89 c3                	mov    ebx,eax
c00020a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a5:	85 c0                	test   eax,eax
c00020a7:	74 ef                	je     c0002098 <validate+0x9>
c00020a9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ac:	74 ea                	je     c0002098 <validate+0x9>
c00020ae:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b2:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b6:	75 e0                	jne    c0002098 <validate+0x9>
c00020b8:	83 ec 0c             	sub    esp,0xc
c00020bb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020bf:	50                   	push   eax
c00020c0:	e8 7d f8 ff ff       	call   c0001942 <disk_status>
c00020c5:	83 c4 10             	add    esp,0x10
c00020c8:	a8 01                	test   al,0x1
c00020ca:	75 cc                	jne    c0002098 <validate+0x9>
c00020cc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020ce:	31 c0                	xor    eax,eax
c00020d0:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d2:	5a                   	pop    edx
c00020d3:	5b                   	pop    ebx
c00020d4:	5e                   	pop    esi
c00020d5:	c3                   	ret    

c00020d6 <sync_window>:
c00020d6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020da:	0f 84 85 00 00 00    	je     c0002165 <sync_window+0x8f>
c00020e0:	55                   	push   ebp
c00020e1:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e4:	57                   	push   edi
c00020e5:	56                   	push   esi
c00020e6:	53                   	push   ebx
c00020e7:	89 c3                	mov    ebx,eax
c00020e9:	83 ec 28             	sub    esp,0x28
c00020ec:	6a 01                	push   0x1
c00020ee:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f4:	55                   	push   ebp
c00020f5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020f9:	50                   	push   eax
c00020fa:	e8 5f f8 ff ff       	call   c000195e <disk_write>
c00020ff:	83 c4 20             	add    esp,0x20
c0002102:	ba 01 00 00 00       	mov    edx,0x1
c0002107:	85 c0                	test   eax,eax
c0002109:	75 50                	jne    c000215b <sync_window+0x85>
c000210b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000210e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002111:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002115:	89 c6                	mov    esi,eax
c0002117:	31 ff                	xor    edi,edi
c0002119:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000211c:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000211f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002123:	89 d7                	mov    edi,edx
c0002125:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002129:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002130:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002134:	73 23                	jae    c0002159 <sync_window+0x83>
c0002136:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213a:	75 1d                	jne    c0002159 <sync_window+0x83>
c000213c:	83 ec 0c             	sub    esp,0xc
c000213f:	6a 01                	push   0x1
c0002141:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002145:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002149:	52                   	push   edx
c000214a:	50                   	push   eax
c000214b:	55                   	push   ebp
c000214c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002150:	50                   	push   eax
c0002151:	e8 08 f8 ff ff       	call   c000195e <disk_write>
c0002156:	83 c4 20             	add    esp,0x20
c0002159:	31 d2                	xor    edx,edx
c000215b:	83 c4 1c             	add    esp,0x1c
c000215e:	89 d0                	mov    eax,edx
c0002160:	5b                   	pop    ebx
c0002161:	5e                   	pop    esi
c0002162:	5f                   	pop    edi
c0002163:	5d                   	pop    ebp
c0002164:	c3                   	ret    
c0002165:	31 d2                	xor    edx,edx
c0002167:	89 d0                	mov    eax,edx
c0002169:	c3                   	ret    

c000216a <move_window>:
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 14             	sub    esp,0x14
c0002171:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002174:	75 07                	jne    c000217d <move_window+0x13>
c0002176:	31 f6                	xor    esi,esi
c0002178:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217b:	74 59                	je     c00021d6 <move_window+0x6c>
c000217d:	89 d8                	mov    eax,ebx
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	e8 4a ff ff ff       	call   c00020d6 <sync_window>
c000218c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002190:	89 c6                	mov    esi,eax
c0002192:	85 c0                	test   eax,eax
c0002194:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002198:	75 3c                	jne    c00021d6 <move_window+0x6c>
c000219a:	83 ec 0c             	sub    esp,0xc
c000219d:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a0:	6a 01                	push   0x1
c00021a2:	51                   	push   ecx
c00021a3:	52                   	push   edx
c00021a4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021a8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ac:	50                   	push   eax
c00021ad:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b1:	50                   	push   eax
c00021b2:	e8 91 f7 ff ff       	call   c0001948 <disk_read>
c00021b7:	83 c4 20             	add    esp,0x20
c00021ba:	85 c0                	test   eax,eax
c00021bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c4:	74 0a                	je     c00021d0 <move_window+0x66>
c00021c6:	83 ca ff             	or     edx,0xffffffff
c00021c9:	be 01 00 00 00       	mov    esi,0x1
c00021ce:	89 d1                	mov    ecx,edx
c00021d0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d6:	83 c4 14             	add    esp,0x14
c00021d9:	89 f0                	mov    eax,esi
c00021db:	5b                   	pop    ebx
c00021dc:	5e                   	pop    esi
c00021dd:	c3                   	ret    

c00021de <check_fs>:
c00021de:	53                   	push   ebx
c00021df:	89 c3                	mov    ebx,eax
c00021e1:	83 ec 08             	sub    esp,0x8
c00021e4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021e8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021ef:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f6:	e8 6f ff ff ff       	call   c000216a <move_window>
c00021fb:	ba 04 00 00 00       	mov    edx,0x4
c0002200:	85 c0                	test   eax,eax
c0002202:	0f 85 89 00 00 00    	jne    c0002291 <check_fs+0xb3>
c0002208:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000220e:	e8 80 f7 ff ff       	call   c0001993 <ld_word>
c0002213:	ba 03 00 00 00       	mov    edx,0x3
c0002218:	66 3d 55 aa          	cmp    ax,0xaa55
c000221c:	75 73                	jne    c0002291 <check_fs+0xb3>
c000221e:	ba 00 fe 01 c0       	mov    edx,0xc001fe00
c0002223:	8d 43 54             	lea    eax,[ebx+0x54]
c0002226:	b9 0b 00 00 00       	mov    ecx,0xb
c000222b:	e8 02 f8 ff ff       	call   c0001a32 <mem_cmp>
c0002230:	ba 01 00 00 00       	mov    edx,0x1
c0002235:	85 c0                	test   eax,eax
c0002237:	74 58                	je     c0002291 <check_fs+0xb3>
c0002239:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223c:	8d 50 18             	lea    edx,[eax+0x18]
c000223f:	80 fa 01             	cmp    dl,0x1
c0002242:	76 09                	jbe    c000224d <check_fs+0x6f>
c0002244:	ba 02 00 00 00       	mov    edx,0x2
c0002249:	3c eb                	cmp    al,0xeb
c000224b:	75 44                	jne    c0002291 <check_fs+0xb3>
c000224d:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c0002252:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002258:	b9 03 00 00 00       	mov    ecx,0x3
c000225d:	e8 d0 f7 ff ff       	call   c0001a32 <mem_cmp>
c0002262:	31 d2                	xor    edx,edx
c0002264:	85 c0                	test   eax,eax
c0002266:	74 29                	je     c0002291 <check_fs+0xb3>
c0002268:	ba 0c fe 01 c0       	mov    edx,0xc001fe0c
c000226d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002273:	b9 05 00 00 00       	mov    ecx,0x5
c0002278:	e8 b5 f7 ff ff       	call   c0001a32 <mem_cmp>
c000227d:	31 d2                	xor    edx,edx
c000227f:	85 c0                	test   eax,eax
c0002281:	74 0e                	je     c0002291 <check_fs+0xb3>
c0002283:	31 d2                	xor    edx,edx
c0002285:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228c:	0f 95 c2             	setne  dl
c000228f:	01 d2                	add    edx,edx
c0002291:	83 c4 08             	add    esp,0x8
c0002294:	89 d0                	mov    eax,edx
c0002296:	5b                   	pop    ebx
c0002297:	c3                   	ret    

c0002298 <find_volume>:
c0002298:	55                   	push   ebp
c0002299:	31 c9                	xor    ecx,ecx
c000229b:	57                   	push   edi
c000229c:	56                   	push   esi
c000229d:	89 d6                	mov    esi,edx
c000229f:	53                   	push   ebx
c00022a0:	31 d2                	xor    edx,edx
c00022a2:	83 ec 3c             	sub    esp,0x3c
c00022a5:	89 c3                	mov    ebx,eax
c00022a7:	e8 32 ff ff ff       	call   c00021de <check_fs>
c00022ac:	83 f8 02             	cmp    eax,0x2
c00022af:	74 0e                	je     c00022bf <find_volume+0x27>
c00022b1:	0f 87 56 01 00 00    	ja     c000240d <find_volume+0x175>
c00022b7:	85 f6                	test   esi,esi
c00022b9:	0f 84 4e 01 00 00    	je     c000240d <find_volume+0x175>
c00022bf:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c6:	0f 85 df 00 00 00    	jne    c00023ab <find_volume+0x113>
c00022cc:	31 c9                	xor    ecx,ecx
c00022ce:	ba 01 00 00 00       	mov    edx,0x1
c00022d3:	89 d8                	mov    eax,ebx
c00022d5:	e8 90 fe ff ff       	call   c000216a <move_window>
c00022da:	85 c0                	test   eax,eax
c00022dc:	74 0a                	je     c00022e8 <find_volume+0x50>
c00022de:	b8 04 00 00 00       	mov    eax,0x4
c00022e3:	e9 25 01 00 00       	jmp    c000240d <find_volume+0x175>
c00022e8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022eb:	89 e8                	mov    eax,ebp
c00022ed:	e8 f6 fc ff ff       	call   c0001fe8 <test_gpt_header>
c00022f2:	85 c0                	test   eax,eax
c00022f4:	75 0a                	jne    c0002300 <find_volume+0x68>
c00022f6:	b8 03 00 00 00       	mov    eax,0x3
c00022fb:	e9 0d 01 00 00       	jmp    c000240d <find_volume+0x175>
c0002300:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002306:	e8 95 f6 ff ff       	call   c00019a0 <ld_dword>
c000230b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000230f:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002315:	e8 9e f6 ff ff       	call   c00019b8 <ld_qword>
c000231a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002326:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002332:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002336:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233a:	74 ba                	je     c00022f6 <find_volume+0x5e>
c000233c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002340:	31 c9                	xor    ecx,ecx
c0002342:	c1 e7 07             	shl    edi,0x7
c0002345:	89 d8                	mov    eax,ebx
c0002347:	89 fa                	mov    edx,edi
c0002349:	c1 ea 09             	shr    edx,0x9
c000234c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002350:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002354:	e8 11 fe ff ff       	call   c000216a <move_window>
c0002359:	85 c0                	test   eax,eax
c000235b:	75 81                	jne    c00022de <find_volume+0x46>
c000235d:	81 e7 80 01 00 00    	and    edi,0x180
c0002363:	b9 10 00 00 00       	mov    ecx,0x10
c0002368:	ba f0 fd 01 c0       	mov    edx,0xc001fdf0
c000236d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002371:	e8 bc f6 ff ff       	call   c0001a32 <mem_cmp>
c0002376:	85 c0                	test   eax,eax
c0002378:	75 2b                	jne    c00023a5 <find_volume+0x10d>
c000237a:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000237e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002382:	e8 31 f6 ff ff       	call   c00019b8 <ld_qword>
c0002387:	89 d1                	mov    ecx,edx
c0002389:	89 c2                	mov    edx,eax
c000238b:	89 d8                	mov    eax,ebx
c000238d:	e8 4c fe ff ff       	call   c00021de <check_fs>
c0002392:	85 f6                	test   esi,esi
c0002394:	75 05                	jne    c000239b <find_volume+0x103>
c0002396:	83 f8 01             	cmp    eax,0x1
c0002399:	76 72                	jbe    c000240d <find_volume+0x175>
c000239b:	85 f6                	test   esi,esi
c000239d:	74 06                	je     c00023a5 <find_volume+0x10d>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 68                	je     c000240d <find_volume+0x175>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 87                	jmp    c0002332 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 f8                	mov    eax,edi
c00023c3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c7:	e8 d4 f5 ff ff       	call   c00019a0 <ld_dword>
c00023cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d0:	83 c7 10             	add    edi,0x10
c00023d3:	83 c1 04             	add    ecx,0x4
c00023d6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00023d9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dd:	75 e2                	jne    c00023c1 <find_volume+0x129>
c00023df:	31 ff                	xor    edi,edi
c00023e1:	85 f6                	test   esi,esi
c00023e3:	74 03                	je     c00023e8 <find_volume+0x150>
c00023e5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023ec:	b8 03 00 00 00       	mov    eax,0x3
c00023f1:	85 d2                	test   edx,edx
c00023f3:	74 09                	je     c00023fe <find_volume+0x166>
c00023f5:	31 c9                	xor    ecx,ecx
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	e8 e0 fd ff ff       	call   c00021de <check_fs>
c00023fe:	85 f6                	test   esi,esi
c0002400:	75 0b                	jne    c000240d <find_volume+0x175>
c0002402:	83 f8 01             	cmp    eax,0x1
c0002405:	76 06                	jbe    c000240d <find_volume+0x175>
c0002407:	47                   	inc    edi
c0002408:	83 ff 03             	cmp    edi,0x3
c000240b:	76 db                	jbe    c00023e8 <find_volume+0x150>
c000240d:	83 c4 3c             	add    esp,0x3c
c0002410:	5b                   	pop    ebx
c0002411:	5e                   	pop    esi
c0002412:	5f                   	pop    edi
c0002413:	5d                   	pop    ebp
c0002414:	c3                   	ret    

c0002415 <mount_volume>:
c0002415:	55                   	push   ebp
c0002416:	57                   	push   edi
c0002417:	89 cf                	mov    edi,ecx
c0002419:	56                   	push   esi
c000241a:	53                   	push   ebx
c000241b:	bb 0b 00 00 00       	mov    ebx,0xb
c0002420:	83 ec 3c             	sub    esp,0x3c
c0002423:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002429:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000242d:	e8 43 fb ff ff       	call   c0001f75 <get_ldnumber>
c0002432:	85 c0                	test   eax,eax
c0002434:	0f 88 3b 05 00 00    	js     c0002975 <mount_volume+0x560>
c000243a:	8b 2c 85 a0 3f 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc060]
c0002441:	89 c6                	mov    esi,eax
c0002443:	bb 0c 00 00 00       	mov    ebx,0xc
c0002448:	85 ed                	test   ebp,ebp
c000244a:	0f 84 25 05 00 00    	je     c0002975 <mount_volume+0x560>
c0002450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002454:	83 e7 fe             	and    edi,0xfffffffe
c0002457:	89 2a                	mov    DWORD PTR [edx],ebp
c0002459:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000245d:	74 32                	je     c0002491 <mount_volume+0x7c>
c000245f:	83 ec 0c             	sub    esp,0xc
c0002462:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002466:	50                   	push   eax
c0002467:	e8 d6 f4 ff ff       	call   c0001942 <disk_status>
c000246c:	83 c4 10             	add    esp,0x10
c000246f:	a8 01                	test   al,0x1
c0002471:	75 1e                	jne    c0002491 <mount_volume+0x7c>
c0002473:	89 f9                	mov    ecx,edi
c0002475:	31 db                	xor    ebx,ebx
c0002477:	84 c9                	test   cl,cl
c0002479:	0f 84 f6 04 00 00    	je     c0002975 <mount_volume+0x560>
c000247f:	a8 04                	test   al,0x4
c0002481:	0f 84 ee 04 00 00    	je     c0002975 <mount_volume+0x560>
c0002487:	bb 0a 00 00 00       	mov    ebx,0xa
c000248c:	e9 e4 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c0002491:	83 ec 0c             	sub    esp,0xc
c0002494:	89 f0                	mov    eax,esi
c0002496:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000249a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000249d:	0f b6 f0             	movzx  esi,al
c00024a0:	56                   	push   esi
c00024a1:	e8 9f f4 ff ff       	call   c0001945 <disk_initialize>
c00024a6:	bb 03 00 00 00       	mov    ebx,0x3
c00024ab:	83 c4 10             	add    esp,0x10
c00024ae:	a8 01                	test   al,0x1
c00024b0:	0f 85 bf 04 00 00    	jne    c0002975 <mount_volume+0x560>
c00024b6:	89 f9                	mov    ecx,edi
c00024b8:	84 c9                	test   cl,cl
c00024ba:	74 04                	je     c00024c0 <mount_volume+0xab>
c00024bc:	a8 04                	test   al,0x4
c00024be:	75 c7                	jne    c0002487 <mount_volume+0x72>
c00024c0:	31 d2                	xor    edx,edx
c00024c2:	89 e8                	mov    eax,ebp
c00024c4:	e8 cf fd ff ff       	call   c0002298 <find_volume>
c00024c9:	83 f8 04             	cmp    eax,0x4
c00024cc:	75 0a                	jne    c00024d8 <mount_volume+0xc3>
c00024ce:	bb 01 00 00 00       	mov    ebx,0x1
c00024d3:	e9 9d 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c00024d8:	83 f8 01             	cmp    eax,0x1
c00024db:	76 0a                	jbe    c00024e7 <mount_volume+0xd2>
c00024dd:	bb 0d 00 00 00       	mov    ebx,0xd
c00024e2:	e9 8e 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c00024e7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024ea:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024f5:	75 17                	jne    c000250e <mount_volume+0xf9>
c00024f7:	b8 0b 00 00 00       	mov    eax,0xb
c00024fc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002501:	75 da                	jne    c00024dd <mount_volume+0xc8>
c0002503:	40                   	inc    eax
c0002504:	83 f8 40             	cmp    eax,0x40
c0002507:	75 f3                	jne    c00024fc <mount_volume+0xe7>
c0002509:	e9 5a 02 00 00       	jmp    c0002768 <mount_volume+0x353>
c000250e:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002511:	e8 7d f4 ff ff       	call   c0001993 <ld_word>
c0002516:	66 3d 00 02          	cmp    ax,0x200
c000251a:	75 c1                	jne    c00024dd <mount_volume+0xc8>
c000251c:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000251f:	e8 6f f4 ff ff       	call   c0001993 <ld_word>
c0002524:	0f b7 c0             	movzx  eax,ax
c0002527:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000252b:	85 c0                	test   eax,eax
c000252d:	75 0c                	jne    c000253b <mount_volume+0x126>
c000252f:	8d 45 78             	lea    eax,[ebp+0x78]
c0002532:	e8 69 f4 ff ff       	call   c00019a0 <ld_dword>
c0002537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000253f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002542:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002545:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002549:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000254c:	48                   	dec    eax
c000254d:	3c 01                	cmp    al,0x1
c000254f:	77 8c                	ja     c00024dd <mount_volume+0xc8>
c0002551:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002555:	89 c3                	mov    ebx,eax
c0002557:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000255b:	66 85 c0             	test   ax,ax
c000255e:	0f 84 79 ff ff ff    	je     c00024dd <mount_volume+0xc8>
c0002564:	8d 40 ff             	lea    eax,[eax-0x1]
c0002567:	85 d8                	test   eax,ebx
c0002569:	0f 85 6e ff ff ff    	jne    c00024dd <mount_volume+0xc8>
c000256f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002572:	e8 1c f4 ff ff       	call   c0001993 <ld_word>
c0002577:	89 c7                	mov    edi,eax
c0002579:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000257d:	a8 0f                	test   al,0xf
c000257f:	0f 85 58 ff ff ff    	jne    c00024dd <mount_volume+0xc8>
c0002585:	8d 45 67             	lea    eax,[ebp+0x67]
c0002588:	e8 06 f4 ff ff       	call   c0001993 <ld_word>
c000258d:	0f b7 f0             	movzx  esi,ax
c0002590:	85 f6                	test   esi,esi
c0002592:	75 0a                	jne    c000259e <mount_volume+0x189>
c0002594:	8d 45 74             	lea    eax,[ebp+0x74]
c0002597:	e8 04 f4 ff ff       	call   c00019a0 <ld_dword>
c000259c:	89 c6                	mov    esi,eax
c000259e:	8d 45 62             	lea    eax,[ebp+0x62]
c00025a1:	e8 ed f3 ff ff       	call   c0001993 <ld_word>
c00025a6:	66 85 c0             	test   ax,ax
c00025a9:	0f 84 2e ff ff ff    	je     c00024dd <mount_volume+0xc8>
c00025af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025b4:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025bd:	89 fa                	mov    edx,edi
c00025bf:	66 c1 ea 04          	shr    dx,0x4
c00025c3:	0f b7 d2             	movzx  edx,dx
c00025c6:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025ca:	0f b7 c8             	movzx  ecx,ax
c00025cd:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025d4:	39 c6                	cmp    esi,eax
c00025d6:	0f 82 01 ff ff ff    	jb     c00024dd <mount_volume+0xc8>
c00025dc:	29 c6                	sub    esi,eax
c00025de:	31 d2                	xor    edx,edx
c00025e0:	89 f0                	mov    eax,esi
c00025e2:	f7 f3                	div    ebx
c00025e4:	39 de                	cmp    esi,ebx
c00025e6:	0f 82 f1 fe ff ff    	jb     c00024dd <mount_volume+0xc8>
c00025ec:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025f1:	0f 87 e6 fe ff ff    	ja     c00024dd <mount_volume+0xc8>
c00025f7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025fc:	0f 86 63 03 00 00    	jbe    c0002965 <mount_volume+0x550>
c0002602:	bb 03 00 00 00       	mov    ebx,0x3
c0002607:	8d 70 02             	lea    esi,[eax+0x2]
c000260a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002612:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002615:	89 c8                	mov    eax,ecx
c0002617:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261a:	31 d2                	xor    edx,edx
c000261c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002620:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002624:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002628:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000262f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002633:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002636:	31 d2                	xor    edx,edx
c0002638:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000263c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002640:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002643:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002646:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002649:	83 fb 03             	cmp    ebx,0x3
c000264c:	75 2b                	jne    c0002679 <mount_volume+0x264>
c000264e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002651:	e8 3d f3 ff ff       	call   c0001993 <ld_word>
c0002656:	66 09 c7             	or     di,ax
c0002659:	0f 85 7e fe ff ff    	jne    c00024dd <mount_volume+0xc8>
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002668:	e8 33 f3 ff ff       	call   c00019a0 <ld_dword>
c000266d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002674:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002677:	eb 30                	jmp    c00026a9 <mount_volume+0x294>
c0002679:	66 85 ff             	test   di,di
c000267c:	0f 84 5b fe ff ff    	je     c00024dd <mount_volume+0xc8>
c0002682:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002686:	31 d2                	xor    edx,edx
c0002688:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000268c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002690:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002693:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002696:	83 fb 02             	cmp    ebx,0x2
c0002699:	75 04                	jne    c000269f <mount_volume+0x28a>
c000269b:	01 f6                	add    esi,esi
c000269d:	eb 0a                	jmp    c00026a9 <mount_volume+0x294>
c000269f:	8d 04 76             	lea    eax,[esi+esi*2]
c00026a2:	83 e6 01             	and    esi,0x1
c00026a5:	d1 e8                	shr    eax,1
c00026a7:	01 c6                	add    esi,eax
c00026a9:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026af:	c1 ee 09             	shr    esi,0x9
c00026b2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b6:	0f 87 21 fe ff ff    	ja     c00024dd <mount_volume+0xc8>
c00026bc:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026c3:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026ca:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026ce:	83 fb 03             	cmp    ebx,0x3
c00026d1:	75 7a                	jne    c000274d <mount_volume+0x338>
c00026d3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d9:	e8 b5 f2 ff ff       	call   c0001993 <ld_word>
c00026de:	66 48                	dec    ax
c00026e0:	75 6b                	jne    c000274d <mount_volume+0x338>
c00026e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026ea:	83 c2 01             	add    edx,0x1
c00026ed:	89 e8                	mov    eax,ebp
c00026ef:	83 d1 00             	adc    ecx,0x0
c00026f2:	e8 73 fa ff ff       	call   c000216a <move_window>
c00026f7:	85 c0                	test   eax,eax
c00026f9:	75 52                	jne    c000274d <mount_volume+0x338>
c00026fb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026ff:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002705:	e8 89 f2 ff ff       	call   c0001993 <ld_word>
c000270a:	66 3d 55 aa          	cmp    ax,0xaa55
c000270e:	75 3d                	jne    c000274d <mount_volume+0x338>
c0002710:	8d 45 54             	lea    eax,[ebp+0x54]
c0002713:	e8 88 f2 ff ff       	call   c00019a0 <ld_dword>
c0002718:	3d 52 52 61 41       	cmp    eax,0x41615252
c000271d:	75 2e                	jne    c000274d <mount_volume+0x338>
c000271f:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002725:	e8 76 f2 ff ff       	call   c00019a0 <ld_dword>
c000272a:	3d 72 72 41 61       	cmp    eax,0x61417272
c000272f:	75 1c                	jne    c000274d <mount_volume+0x338>
c0002731:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002737:	e8 64 f2 ff ff       	call   c00019a0 <ld_dword>
c000273c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000273f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002745:	e8 56 f2 ff ff       	call   c00019a0 <ld_dword>
c000274a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000274d:	66 a1 80 3f 02 c0    	mov    ax,ds:0xc0023f80
c0002753:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002756:	40                   	inc    eax
c0002757:	31 db                	xor    ebx,ebx
c0002759:	66 a3 80 3f 02 c0    	mov    ds:0xc0023f80,ax
c000275f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002763:	e9 0d 02 00 00       	jmp    c0002975 <mount_volume+0x560>
c0002768:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000276e:	e8 20 f2 ff ff       	call   c0001993 <ld_word>
c0002773:	66 3d 00 01          	cmp    ax,0x100
c0002777:	0f 85 60 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c000277d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002784:	0f 85 53 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c000278a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002790:	e8 23 f2 ff ff       	call   c00019b8 <ld_qword>
c0002795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002799:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a3:	e8 f8 f1 ff ff       	call   c00019a0 <ld_dword>
c00027a8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027ab:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027b1:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027b4:	fe c8                	dec    al
c00027b6:	0f 85 21 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c00027bc:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027c3:	bb 01 00 00 00       	mov    ebx,0x1
c00027c8:	d3 e3                	shl    ebx,cl
c00027ca:	66 85 db             	test   bx,bx
c00027cd:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d1:	0f 84 06 fd ff ff    	je     c00024dd <mount_volume+0xc8>
c00027d7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027dd:	e8 be f1 ff ff       	call   c00019a0 <ld_dword>
c00027e2:	89 c6                	mov    esi,eax
c00027e4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e9:	0f 87 ee fc ff ff    	ja     c00024dd <mount_volume+0xc8>
c00027ef:	8d 40 02             	lea    eax,[eax+0x2]
c00027f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002800:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002803:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002809:	e8 92 f1 ff ff       	call   c00019a0 <ld_dword>
c000280e:	31 d2                	xor    edx,edx
c0002810:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002814:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002818:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002822:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000282c:	e8 6f f1 ff ff       	call   c00019a0 <ld_dword>
c0002831:	31 d2                	xor    edx,edx
c0002833:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002837:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000283b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000283f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002842:	0f b7 c3             	movzx  eax,bx
c0002845:	0f af f0             	imul   esi,eax
c0002848:	89 f0                	mov    eax,esi
c000284a:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284d:	31 d2                	xor    edx,edx
c000284f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002853:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002857:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000285b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002863:	39 c1                	cmp    ecx,eax
c0002865:	89 df                	mov    edi,ebx
c0002867:	19 d7                	sbb    edi,edx
c0002869:	0f 82 6e fc ff ff    	jb     c00024dd <mount_volume+0xc8>
c000286f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002875:	31 db                	xor    ebx,ebx
c0002877:	e8 24 f1 ff ff       	call   c00019a0 <ld_dword>
c000287c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002883:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002886:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000288e:	85 db                	test   ebx,ebx
c0002890:	75 39                	jne    c00028cb <mount_volume+0x4b6>
c0002892:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002896:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000289a:	0f 86 3d fc ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028a0:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028a3:	89 e8                	mov    eax,ebp
c00028a5:	e8 82 f3 ff ff       	call   c0001c2c <clst2sect>
c00028aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ae:	31 ff                	xor    edi,edi
c00028b0:	01 c6                	add    esi,eax
c00028b2:	11 d7                	adc    edi,edx
c00028b4:	89 e8                	mov    eax,ebp
c00028b6:	89 f2                	mov    edx,esi
c00028b8:	89 f9                	mov    ecx,edi
c00028ba:	e8 ab f8 ff ff       	call   c000216a <move_window>
c00028bf:	85 c0                	test   eax,eax
c00028c1:	0f 85 07 fc ff ff    	jne    c00024ce <mount_volume+0xb9>
c00028c7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028cb:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d0:	74 0b                	je     c00028dd <mount_volume+0x4c8>
c00028d2:	83 c3 20             	add    ebx,0x20
c00028d5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028db:	eb b1                	jmp    c000288e <mount_volume+0x479>
c00028dd:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028e4:	e8 b7 f0 ff ff       	call   c00019a0 <ld_dword>
c00028e9:	89 c3                	mov    ebx,eax
c00028eb:	83 f8 01             	cmp    eax,0x1
c00028ee:	0f 86 e9 fb ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028f4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f7:	0f 86 e0 fb ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028fd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002901:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002904:	0f af c2             	imul   eax,edx
c0002907:	31 d2                	xor    edx,edx
c0002909:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000290c:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000290f:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002912:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002915:	89 da                	mov    edx,ebx
c0002917:	31 c9                	xor    ecx,ecx
c0002919:	c1 ea 07             	shr    edx,0x7
c000291c:	89 e8                	mov    eax,ebp
c000291e:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002921:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002924:	e8 41 f8 ff ff       	call   c000216a <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	0f 85 9d fb ff ff    	jne    c00024ce <mount_volume+0xb9>
c0002931:	89 d8                	mov    eax,ebx
c0002933:	83 e0 7f             	and    eax,0x7f
c0002936:	8d 04 86             	lea    eax,[esi+eax*4]
c0002939:	e8 62 f0 ff ff       	call   c00019a0 <ld_dword>
c000293e:	83 f8 ff             	cmp    eax,0xffffffff
c0002941:	74 0a                	je     c000294d <mount_volume+0x538>
c0002943:	43                   	inc    ebx
c0002944:	39 d8                	cmp    eax,ebx
c0002946:	74 cd                	je     c0002915 <mount_volume+0x500>
c0002948:	e9 90 fb ff ff       	jmp    c00024dd <mount_volume+0xc8>
c000294d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002954:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000295b:	bb 04 00 00 00       	mov    ebx,0x4
c0002960:	e9 e8 fd ff ff       	jmp    c000274d <mount_volume+0x338>
c0002965:	31 db                	xor    ebx,ebx
c0002967:	3d f5 0f 00 00       	cmp    eax,0xff5
c000296c:	0f 97 c3             	seta   bl
c000296f:	43                   	inc    ebx
c0002970:	e9 92 fc ff ff       	jmp    c0002607 <mount_volume+0x1f2>
c0002975:	83 c4 3c             	add    esp,0x3c
c0002978:	89 d8                	mov    eax,ebx
c000297a:	5b                   	pop    ebx
c000297b:	5e                   	pop    esi
c000297c:	5f                   	pop    edi
c000297d:	5d                   	pop    ebp
c000297e:	c3                   	ret    

c000297f <find_bitmap>:
c000297f:	55                   	push   ebp
c0002980:	57                   	push   edi
c0002981:	89 c7                	mov    edi,eax
c0002983:	56                   	push   esi
c0002984:	8d 72 fe             	lea    esi,[edx-0x2]
c0002987:	53                   	push   ebx
c0002988:	83 ec 1c             	sub    esp,0x1c
c000298b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000298e:	83 e8 02             	sub    eax,0x2
c0002991:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002995:	39 f0                	cmp    eax,esi
c0002997:	77 02                	ja     c000299b <find_bitmap+0x1c>
c0002999:	31 f6                	xor    esi,esi
c000299b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000299f:	89 f3                	mov    ebx,esi
c00029a1:	31 ed                	xor    ebp,ebp
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	31 c9                	xor    ecx,ecx
c00029a7:	c1 ea 0c             	shr    edx,0xc
c00029aa:	89 f8                	mov    eax,edi
c00029ac:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029af:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029b2:	e8 b3 f7 ff ff       	call   c000216a <move_window>
c00029b7:	85 c0                	test   eax,eax
c00029b9:	75 68                	jne    c0002a23 <find_bitmap+0xa4>
c00029bb:	89 d9                	mov    ecx,ebx
c00029bd:	b8 01 00 00 00       	mov    eax,0x1
c00029c2:	83 e1 07             	and    ecx,0x7
c00029c5:	89 da                	mov    edx,ebx
c00029c7:	d3 e0                	shl    eax,cl
c00029c9:	c1 ea 03             	shr    edx,0x3
c00029cc:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029cf:	83 e9 02             	sub    ecx,0x2
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029dc:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e0:	43                   	inc    ebx
c00029e1:	21 c1                	and    ecx,eax
c00029e3:	01 c0                	add    eax,eax
c00029e5:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e9:	77 09                	ja     c00029f4 <find_bitmap+0x75>
c00029eb:	31 db                	xor    ebx,ebx
c00029ed:	ba 00 02 00 00       	mov    edx,0x200
c00029f2:	31 c0                	xor    eax,eax
c00029f4:	84 c9                	test   cl,cl
c00029f6:	75 10                	jne    c0002a08 <find_bitmap+0x89>
c00029f8:	45                   	inc    ebp
c00029f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029fd:	75 0f                	jne    c0002a0e <find_bitmap+0x8f>
c00029ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a03:	83 c0 02             	add    eax,0x2
c0002a06:	eb 22                	jmp    c0002a2a <find_bitmap+0xab>
c0002a08:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a0c:	31 ed                	xor    ebp,ebp
c0002a0e:	39 de                	cmp    esi,ebx
c0002a10:	74 16                	je     c0002a28 <find_bitmap+0xa9>
c0002a12:	84 c0                	test   al,al
c0002a14:	75 c6                	jne    c00029dc <find_bitmap+0x5d>
c0002a16:	42                   	inc    edx
c0002a17:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a1d:	77 84                	ja     c00029a3 <find_bitmap+0x24>
c0002a1f:	b0 01                	mov    al,0x1
c0002a21:	eb b9                	jmp    c00029dc <find_bitmap+0x5d>
c0002a23:	83 c8 ff             	or     eax,0xffffffff
c0002a26:	eb 02                	jmp    c0002a2a <find_bitmap+0xab>
c0002a28:	31 c0                	xor    eax,eax
c0002a2a:	83 c4 1c             	add    esp,0x1c
c0002a2d:	5b                   	pop    ebx
c0002a2e:	5e                   	pop    esi
c0002a2f:	5f                   	pop    edi
c0002a30:	5d                   	pop    ebp
c0002a31:	c3                   	ret    

c0002a32 <change_bitmap>:
c0002a32:	55                   	push   ebp
c0002a33:	89 cd                	mov    ebp,ecx
c0002a35:	57                   	push   edi
c0002a36:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a39:	56                   	push   esi
c0002a3a:	89 c7                	mov    edi,eax
c0002a3c:	53                   	push   ebx
c0002a3d:	89 c8                	mov    eax,ecx
c0002a3f:	83 ec 1c             	sub    esp,0x1c
c0002a42:	31 d2                	xor    edx,edx
c0002a44:	c1 e8 0c             	shr    eax,0xc
c0002a47:	89 ce                	mov    esi,ecx
c0002a49:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4c:	bb 01 00 00 00       	mov    ebx,0x1
c0002a51:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a54:	83 e1 07             	and    ecx,0x7
c0002a57:	c1 ee 03             	shr    esi,0x3
c0002a5a:	d3 e3                	shl    ebx,cl
c0002a5c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a62:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a66:	89 c1                	mov    ecx,eax
c0002a68:	89 d3                	mov    ebx,edx
c0002a6a:	83 c1 01             	add    ecx,0x1
c0002a6d:	83 d3 00             	adc    ebx,0x0
c0002a70:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a74:	89 d1                	mov    ecx,edx
c0002a76:	89 c2                	mov    edx,eax
c0002a78:	89 f8                	mov    eax,edi
c0002a7a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a7e:	e8 e7 f6 ff ff       	call   c000216a <move_window>
c0002a83:	89 c1                	mov    ecx,eax
c0002a85:	85 c0                	test   eax,eax
c0002a87:	75 48                	jne    c0002ad1 <change_bitmap+0x9f>
c0002a89:	31 d2                	xor    edx,edx
c0002a8b:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a8f:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a93:	0f 95 c2             	setne  dl
c0002a96:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a9a:	74 3c                	je     c0002ad8 <change_bitmap+0xa6>
c0002a9c:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa0:	4d                   	dec    ebp
c0002aa1:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aa5:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa9:	74 32                	je     c0002add <change_bitmap+0xab>
c0002aab:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aaf:	75 d8                	jne    c0002a89 <change_bitmap+0x57>
c0002ab1:	8d 46 01             	lea    eax,[esi+0x1]
c0002ab4:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab9:	89 c3                	mov    ebx,eax
c0002abb:	31 f6                	xor    esi,esi
c0002abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ac5:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002acb:	74 99                	je     c0002a66 <change_bitmap+0x34>
c0002acd:	89 de                	mov    esi,ebx
c0002acf:	eb b8                	jmp    c0002a89 <change_bitmap+0x57>
c0002ad1:	b9 01 00 00 00       	mov    ecx,0x1
c0002ad6:	eb 05                	jmp    c0002add <change_bitmap+0xab>
c0002ad8:	b9 02 00 00 00       	mov    ecx,0x2
c0002add:	83 c4 1c             	add    esp,0x1c
c0002ae0:	89 c8                	mov    eax,ecx
c0002ae2:	5b                   	pop    ebx
c0002ae3:	5e                   	pop    esi
c0002ae4:	5f                   	pop    edi
c0002ae5:	5d                   	pop    ebp
c0002ae6:	c3                   	ret    

c0002ae7 <put_fat>:
c0002ae7:	83 fa 01             	cmp    edx,0x1
c0002aea:	0f 86 7b 01 00 00    	jbe    c0002c6b <put_fat+0x184>
c0002af0:	55                   	push   ebp
c0002af1:	57                   	push   edi
c0002af2:	89 cf                	mov    edi,ecx
c0002af4:	56                   	push   esi
c0002af5:	b9 02 00 00 00       	mov    ecx,0x2
c0002afa:	53                   	push   ebx
c0002afb:	89 c6                	mov    esi,eax
c0002afd:	83 ec 1c             	sub    esp,0x1c
c0002b00:	89 d3                	mov    ebx,edx
c0002b02:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b05:	0f 86 68 01 00 00    	jbe    c0002c73 <put_fat+0x18c>
c0002b0b:	8a 00                	mov    al,BYTE PTR [eax]
c0002b0d:	3c 02                	cmp    al,0x2
c0002b0f:	0f 84 c7 00 00 00    	je     c0002bdc <put_fat+0xf5>
c0002b15:	77 09                	ja     c0002b20 <put_fat+0x39>
c0002b17:	fe c8                	dec    al
c0002b19:	74 17                	je     c0002b32 <put_fat+0x4b>
c0002b1b:	e9 53 01 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002b20:	b9 02 00 00 00       	mov    ecx,0x2
c0002b25:	3c 04                	cmp    al,0x4
c0002b27:	0f 86 e1 00 00 00    	jbe    c0002c0e <put_fat+0x127>
c0002b2d:	e9 41 01 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002b32:	89 d5                	mov    ebp,edx
c0002b34:	31 c9                	xor    ecx,ecx
c0002b36:	d1 ed                	shr    ebp,1
c0002b38:	89 f0                	mov    eax,esi
c0002b3a:	01 d5                	add    ebp,edx
c0002b3c:	89 ea                	mov    edx,ebp
c0002b3e:	c1 ea 09             	shr    edx,0x9
c0002b41:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b44:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b47:	e8 1e f6 ff ff       	call   c000216a <move_window>
c0002b4c:	89 c1                	mov    ecx,eax
c0002b4e:	85 c0                	test   eax,eax
c0002b50:	0f 85 1d 01 00 00    	jne    c0002c73 <put_fat+0x18c>
c0002b56:	8d 46 54             	lea    eax,[esi+0x54]
c0002b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b5d:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b60:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b6a:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b6e:	83 e3 01             	and    ebx,0x1
c0002b71:	89 f8                	mov    eax,edi
c0002b73:	74 0d                	je     c0002b82 <put_fat+0x9b>
c0002b75:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b78:	89 fa                	mov    edx,edi
c0002b7a:	c1 e2 04             	shl    edx,0x4
c0002b7d:	83 e0 0f             	and    eax,0xf
c0002b80:	09 d0                	or     eax,edx
c0002b82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b86:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b89:	c1 ea 09             	shr    edx,0x9
c0002b8c:	31 c9                	xor    ecx,ecx
c0002b8e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b91:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b98:	89 f0                	mov    eax,esi
c0002b9a:	e8 cb f5 ff ff       	call   c000216a <move_window>
c0002b9f:	89 c1                	mov    ecx,eax
c0002ba1:	85 c0                	test   eax,eax
c0002ba3:	0f 85 ca 00 00 00    	jne    c0002c73 <put_fat+0x18c>
c0002ba9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bb3:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb7:	85 db                	test   ebx,ebx
c0002bb9:	74 07                	je     c0002bc2 <put_fat+0xdb>
c0002bbb:	c1 ef 04             	shr    edi,0x4
c0002bbe:	89 fa                	mov    edx,edi
c0002bc0:	eb 0e                	jmp    c0002bd0 <put_fat+0xe9>
c0002bc2:	c1 ef 08             	shr    edi,0x8
c0002bc5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bc8:	83 e2 f0             	and    edx,0xfffffff0
c0002bcb:	83 e7 0f             	and    edi,0xf
c0002bce:	09 fa                	or     edx,edi
c0002bd0:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bd3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd7:	e9 97 00 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002bdc:	c1 ea 08             	shr    edx,0x8
c0002bdf:	31 c9                	xor    ecx,ecx
c0002be1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002be4:	89 f0                	mov    eax,esi
c0002be6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be9:	e8 7c f5 ff ff       	call   c000216a <move_window>
c0002bee:	89 c1                	mov    ecx,eax
c0002bf0:	85 c0                	test   eax,eax
c0002bf2:	75 7f                	jne    c0002c73 <put_fat+0x18c>
c0002bf4:	01 db                	add    ebx,ebx
c0002bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bfa:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c00:	0f b7 d7             	movzx  edx,di
c0002c03:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c07:	e8 f9 ed ff ff       	call   c0001a05 <st_word>
c0002c0c:	eb 53                	jmp    c0002c61 <put_fat+0x17a>
c0002c0e:	c1 ea 07             	shr    edx,0x7
c0002c11:	31 c9                	xor    ecx,ecx
c0002c13:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c16:	89 f0                	mov    eax,esi
c0002c18:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c1b:	e8 4a f5 ff ff       	call   c000216a <move_window>
c0002c20:	89 c1                	mov    ecx,eax
c0002c22:	85 c0                	test   eax,eax
c0002c24:	75 4d                	jne    c0002c73 <put_fat+0x18c>
c0002c26:	c1 e3 02             	shl    ebx,0x2
c0002c29:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c2f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c32:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c36:	74 1c                	je     c0002c54 <put_fat+0x16d>
c0002c38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c3c:	89 d8                	mov    eax,ebx
c0002c3e:	e8 5d ed ff ff       	call   c00019a0 <ld_dword>
c0002c43:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c49:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c52:	09 c7                	or     edi,eax
c0002c54:	89 fa                	mov    edx,edi
c0002c56:	89 d8                	mov    eax,ebx
c0002c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c5c:	e8 a8 ed ff ff       	call   c0001a09 <st_dword>
c0002c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c69:	eb 08                	jmp    c0002c73 <put_fat+0x18c>
c0002c6b:	b9 02 00 00 00       	mov    ecx,0x2
c0002c70:	89 c8                	mov    eax,ecx
c0002c72:	c3                   	ret    
c0002c73:	83 c4 1c             	add    esp,0x1c
c0002c76:	89 c8                	mov    eax,ecx
c0002c78:	5b                   	pop    ebx
c0002c79:	5e                   	pop    esi
c0002c7a:	5f                   	pop    edi
c0002c7b:	5d                   	pop    ebp
c0002c7c:	c3                   	ret    

c0002c7d <fill_last_frag>:
c0002c7d:	57                   	push   edi
c0002c7e:	89 cf                	mov    edi,ecx
c0002c80:	56                   	push   esi
c0002c81:	89 d6                	mov    esi,edx
c0002c83:	53                   	push   ebx
c0002c84:	89 c3                	mov    ebx,eax
c0002c86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c89:	85 c0                	test   eax,eax
c0002c8b:	74 21                	je     c0002cae <fill_last_frag+0x31>
c0002c8d:	89 f9                	mov    ecx,edi
c0002c8f:	83 f8 01             	cmp    eax,0x1
c0002c92:	76 05                	jbe    c0002c99 <fill_last_frag+0x1c>
c0002c94:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c97:	29 c1                	sub    ecx,eax
c0002c99:	8d 56 01             	lea    edx,[esi+0x1]
c0002c9c:	29 c2                	sub    edx,eax
c0002c9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca0:	e8 42 fe ff ff       	call   c0002ae7 <put_fat>
c0002ca5:	85 c0                	test   eax,eax
c0002ca7:	75 05                	jne    c0002cae <fill_last_frag+0x31>
c0002ca9:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cac:	eb d8                	jmp    c0002c86 <fill_last_frag+0x9>
c0002cae:	5b                   	pop    ebx
c0002caf:	5e                   	pop    esi
c0002cb0:	5f                   	pop    edi
c0002cb1:	c3                   	ret    

c0002cb2 <fill_first_frag>:
c0002cb2:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cb6:	75 2d                	jne    c0002ce5 <fill_first_frag+0x33>
c0002cb8:	57                   	push   edi
c0002cb9:	56                   	push   esi
c0002cba:	53                   	push   ebx
c0002cbb:	89 c3                	mov    ebx,eax
c0002cbd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc0:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cc3:	01 d7                	add    edi,edx
c0002cc5:	39 fa                	cmp    edx,edi
c0002cc7:	74 14                	je     c0002cdd <fill_first_frag+0x2b>
c0002cc9:	8d 72 01             	lea    esi,[edx+0x1]
c0002ccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cce:	89 f1                	mov    ecx,esi
c0002cd0:	e8 12 fe ff ff       	call   c0002ae7 <put_fat>
c0002cd5:	89 f2                	mov    edx,esi
c0002cd7:	85 c0                	test   eax,eax
c0002cd9:	74 ea                	je     c0002cc5 <fill_first_frag+0x13>
c0002cdb:	eb 0b                	jmp    c0002ce8 <fill_first_frag+0x36>
c0002cdd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce1:	31 c0                	xor    eax,eax
c0002ce3:	eb 03                	jmp    c0002ce8 <fill_first_frag+0x36>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	c3                   	ret    
c0002ce8:	5b                   	pop    ebx
c0002ce9:	5e                   	pop    esi
c0002cea:	5f                   	pop    edi
c0002ceb:	c3                   	ret    

c0002cec <get_fat>:
c0002cec:	83 fa 01             	cmp    edx,0x1
c0002cef:	0f 86 db 01 00 00    	jbe    c0002ed0 <get_fat+0x1e4>
c0002cf5:	55                   	push   ebp
c0002cf6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cfb:	57                   	push   edi
c0002cfc:	56                   	push   esi
c0002cfd:	53                   	push   ebx
c0002cfe:	83 ec 1c             	sub    esp,0x1c
c0002d01:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d03:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d06:	0f 86 cc 01 00 00    	jbe    c0002ed8 <get_fat+0x1ec>
c0002d0c:	89 c3                	mov    ebx,eax
c0002d0e:	8a 07                	mov    al,BYTE PTR [edi]
c0002d10:	89 d6                	mov    esi,edx
c0002d12:	3c 02                	cmp    al,0x2
c0002d14:	0f 84 99 00 00 00    	je     c0002db3 <get_fat+0xc7>
c0002d1a:	77 09                	ja     c0002d25 <get_fat+0x39>
c0002d1c:	fe c8                	dec    al
c0002d1e:	74 1a                	je     c0002d3a <get_fat+0x4e>
c0002d20:	e9 b3 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	0f 84 b5 00 00 00    	je     c0002de2 <get_fat+0xf6>
c0002d2d:	3c 04                	cmp    al,0x4
c0002d2f:	0f 84 e3 00 00 00    	je     c0002e18 <get_fat+0x12c>
c0002d35:	e9 9e 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d3a:	89 d3                	mov    ebx,edx
c0002d3c:	31 c9                	xor    ecx,ecx
c0002d3e:	d1 eb                	shr    ebx,1
c0002d40:	89 f8                	mov    eax,edi
c0002d42:	01 d3                	add    ebx,edx
c0002d44:	89 da                	mov    edx,ebx
c0002d46:	c1 ea 09             	shr    edx,0x9
c0002d49:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d4c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d4f:	e8 16 f4 ff ff       	call   c000216a <move_window>
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 08                	je     c0002d60 <get_fat+0x74>
c0002d58:	83 c9 ff             	or     ecx,0xffffffff
c0002d5b:	e9 78 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d60:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d63:	31 c9                	xor    ecx,ecx
c0002d65:	89 ea                	mov    edx,ebp
c0002d67:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d6d:	c1 ea 09             	shr    edx,0x9
c0002d70:	89 f8                	mov    eax,edi
c0002d72:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d7c:	e8 e9 f3 ff ff       	call   c000216a <move_window>
c0002d81:	85 c0                	test   eax,eax
c0002d83:	75 d3                	jne    c0002d58 <get_fat+0x6c>
c0002d85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d8b:	0f b6 c3             	movzx  eax,bl
c0002d8e:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d93:	c1 e3 08             	shl    ebx,0x8
c0002d96:	09 c3                	or     ebx,eax
c0002d98:	89 d9                	mov    ecx,ebx
c0002d9a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da0:	83 e6 01             	and    esi,0x1
c0002da3:	0f 84 2f 01 00 00    	je     c0002ed8 <get_fat+0x1ec>
c0002da9:	89 d9                	mov    ecx,ebx
c0002dab:	c1 e9 04             	shr    ecx,0x4
c0002dae:	e9 25 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	31 c9                	xor    ecx,ecx
c0002db8:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dbb:	89 f8                	mov    eax,edi
c0002dbd:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc0:	e8 a5 f3 ff ff       	call   c000216a <move_window>
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 8f                	jne    c0002d58 <get_fat+0x6c>
c0002dc9:	01 f6                	add    esi,esi
c0002dcb:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dd5:	e8 b9 eb ff ff       	call   c0001993 <ld_word>
c0002dda:	0f b7 c8             	movzx  ecx,ax
c0002ddd:	e9 f6 00 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002de2:	c1 ea 07             	shr    edx,0x7
c0002de5:	31 c9                	xor    ecx,ecx
c0002de7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dea:	89 f8                	mov    eax,edi
c0002dec:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002def:	e8 76 f3 ff ff       	call   c000216a <move_window>
c0002df4:	85 c0                	test   eax,eax
c0002df6:	0f 85 5c ff ff ff    	jne    c0002d58 <get_fat+0x6c>
c0002dfc:	c1 e6 02             	shl    esi,0x2
c0002dff:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e05:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e09:	e8 92 eb ff ff       	call   c00019a0 <ld_dword>
c0002e0e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e13:	e9 b4 00 00 00       	jmp    c0002ecc <get_fat+0x1e0>
c0002e18:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e1e:	89 d1                	mov    ecx,edx
c0002e20:	09 c1                	or     ecx,eax
c0002e22:	74 06                	je     c0002e2a <get_fat+0x13e>
c0002e24:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e28:	75 0f                	jne    c0002e39 <get_fat+0x14d>
c0002e2a:	b9 01 00 00 00       	mov    ecx,0x1
c0002e2f:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e33:	0f 85 9f 00 00 00    	jne    c0002ed8 <get_fat+0x1ec>
c0002e39:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e3d:	89 f5                	mov    ebp,esi
c0002e3f:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e44:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e47:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4a:	80 f9 02             	cmp    cl,0x2
c0002e4d:	75 35                	jne    c0002e84 <get_fat+0x198>
c0002e4f:	83 c0 ff             	add    eax,0xffffffff
c0002e52:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e57:	83 d2 ff             	adc    edx,0xffffffff
c0002e5a:	31 db                	xor    ebx,ebx
c0002e5c:	53                   	push   ebx
c0002e5d:	51                   	push   ecx
c0002e5e:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e62:	c1 ea 09             	shr    edx,0x9
c0002e65:	52                   	push   edx
c0002e66:	50                   	push   eax
c0002e67:	e8 50 bf 01 00       	call   c001edbc <__udivdi3>
c0002e6c:	83 c4 10             	add    esp,0x10
c0002e6f:	b9 01 00 00 00       	mov    ecx,0x1
c0002e74:	39 c5                	cmp    ebp,eax
c0002e76:	77 60                	ja     c0002ed8 <get_fat+0x1ec>
c0002e78:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e7d:	74 59                	je     c0002ed8 <get_fat+0x1ec>
c0002e7f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e82:	eb 54                	jmp    c0002ed8 <get_fat+0x1ec>
c0002e84:	80 f9 03             	cmp    cl,0x3
c0002e87:	75 05                	jne    c0002e8e <get_fat+0x1a2>
c0002e89:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e8c:	77 f1                	ja     c0002e7f <get_fat+0x193>
c0002e8e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e93:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e97:	75 3f                	jne    c0002ed8 <get_fat+0x1ec>
c0002e99:	89 f2                	mov    edx,esi
c0002e9b:	31 c9                	xor    ecx,ecx
c0002e9d:	c1 ea 07             	shr    edx,0x7
c0002ea0:	89 f8                	mov    eax,edi
c0002ea2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea8:	e8 bd f2 ff ff       	call   c000216a <move_window>
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	0f 85 a3 fe ff ff    	jne    c0002d58 <get_fat+0x6c>
c0002eb5:	c1 e6 02             	shl    esi,0x2
c0002eb8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec2:	e8 d9 ea ff ff       	call   c00019a0 <ld_dword>
c0002ec7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ecc:	89 c1                	mov    ecx,eax
c0002ece:	eb 08                	jmp    c0002ed8 <get_fat+0x1ec>
c0002ed0:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed5:	89 c8                	mov    eax,ecx
c0002ed7:	c3                   	ret    
c0002ed8:	83 c4 1c             	add    esp,0x1c
c0002edb:	89 c8                	mov    eax,ecx
c0002edd:	5b                   	pop    ebx
c0002ede:	5e                   	pop    esi
c0002edf:	5f                   	pop    edi
c0002ee0:	5d                   	pop    ebp
c0002ee1:	c3                   	ret    

c0002ee2 <dir_sdi>:
c0002ee2:	55                   	push   ebp
c0002ee3:	57                   	push   edi
c0002ee4:	56                   	push   esi
c0002ee5:	53                   	push   ebx
c0002ee6:	89 c3                	mov    ebx,eax
c0002ee8:	83 ec 1c             	sub    esp,0x1c
c0002eeb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002eed:	31 c0                	xor    eax,eax
c0002eef:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002ef2:	0f 94 c0             	sete   al
c0002ef5:	48                   	dec    eax
c0002ef6:	25 00 00 20 f0       	and    eax,0xf0200000
c0002efb:	05 00 00 00 10       	add    eax,0x10000000
c0002f00:	39 d0                	cmp    eax,edx
c0002f02:	77 0a                	ja     c0002f0e <dir_sdi+0x2c>
c0002f04:	b8 02 00 00 00       	mov    eax,0x2
c0002f09:	e9 c4 00 00 00       	jmp    c0002fd2 <dir_sdi+0xf0>
c0002f0e:	89 d6                	mov    esi,edx
c0002f10:	f6 c2 1f             	test   dl,0x1f
c0002f13:	75 ef                	jne    c0002f04 <dir_sdi+0x22>
c0002f15:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f18:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f1b:	85 c9                	test   ecx,ecx
c0002f1d:	75 2d                	jne    c0002f4c <dir_sdi+0x6a>
c0002f1f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f22:	77 1b                	ja     c0002f3f <dir_sdi+0x5d>
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f2a:	c1 ea 05             	shr    edx,0x5
c0002f2d:	39 c2                	cmp    edx,eax
c0002f2f:	73 d3                	jae    c0002f04 <dir_sdi+0x22>
c0002f31:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f34:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f37:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f3a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f3d:	eb 4b                	jmp    c0002f8a <dir_sdi+0xa8>
c0002f3f:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f42:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 da                	je     c0002f24 <dir_sdi+0x42>
c0002f4a:	89 c1                	mov    ecx,eax
c0002f4c:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f50:	c1 e5 09             	shl    ebp,0x9
c0002f53:	89 ca                	mov    edx,ecx
c0002f55:	39 ee                	cmp    esi,ebp
c0002f57:	72 1c                	jb     c0002f75 <dir_sdi+0x93>
c0002f59:	89 d8                	mov    eax,ebx
c0002f5b:	e8 8c fd ff ff       	call   c0002cec <get_fat>
c0002f60:	89 c1                	mov    ecx,eax
c0002f62:	83 f8 ff             	cmp    eax,0xffffffff
c0002f65:	74 66                	je     c0002fcd <dir_sdi+0xeb>
c0002f67:	83 f8 01             	cmp    eax,0x1
c0002f6a:	76 98                	jbe    c0002f04 <dir_sdi+0x22>
c0002f6c:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f6f:	76 93                	jbe    c0002f04 <dir_sdi+0x22>
c0002f71:	29 ee                	sub    esi,ebp
c0002f73:	eb de                	jmp    c0002f53 <dir_sdi+0x71>
c0002f75:	89 f8                	mov    eax,edi
c0002f77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7b:	e8 ac ec ff ff       	call   c0001c2c <clst2sect>
c0002f80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f84:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f87:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f8a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f90:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f93:	89 d1                	mov    ecx,edx
c0002f95:	09 c1                	or     ecx,eax
c0002f97:	0f 84 67 ff ff ff    	je     c0002f04 <dir_sdi+0x22>
c0002f9d:	89 f1                	mov    ecx,esi
c0002f9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa7:	c1 e9 09             	shr    ecx,0x9
c0002faa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fb2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fb6:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fbc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fbf:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fc3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc9:	31 c0                	xor    eax,eax
c0002fcb:	eb 05                	jmp    c0002fd2 <dir_sdi+0xf0>
c0002fcd:	b8 01 00 00 00       	mov    eax,0x1
c0002fd2:	83 c4 1c             	add    esp,0x1c
c0002fd5:	5b                   	pop    ebx
c0002fd6:	5e                   	pop    esi
c0002fd7:	5f                   	pop    edi
c0002fd8:	5d                   	pop    ebp
c0002fd9:	c3                   	ret    

c0002fda <create_chain>:
c0002fda:	55                   	push   ebp
c0002fdb:	89 c5                	mov    ebp,eax
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 1c             	sub    esp,0x1c
c0002fe3:	85 d2                	test   edx,edx
c0002fe5:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002feb:	75 0e                	jne    c0002ffb <create_chain+0x21>
c0002fed:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff0:	85 ff                	test   edi,edi
c0002ff2:	74 39                	je     c000302d <create_chain+0x53>
c0002ff4:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff7:	77 39                	ja     c0003032 <create_chain+0x58>
c0002ff9:	eb 32                	jmp    c000302d <create_chain+0x53>
c0002ffb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fff:	e8 e8 fc ff ff       	call   c0002cec <get_fat>
c0003004:	89 c3                	mov    ebx,eax
c0003006:	83 f8 01             	cmp    eax,0x1
c0003009:	77 0a                	ja     c0003015 <create_chain+0x3b>
c000300b:	bb 01 00 00 00       	mov    ebx,0x1
c0003010:	e9 bc 01 00 00       	jmp    c00031d1 <create_chain+0x1f7>
c0003015:	83 f8 ff             	cmp    eax,0xffffffff
c0003018:	0f 84 60 01 00 00    	je     c000317e <create_chain+0x1a4>
c000301e:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003021:	0f 87 aa 01 00 00    	ja     c00031d1 <create_chain+0x1f7>
c0003027:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000302b:	eb 05                	jmp    c0003032 <create_chain+0x58>
c000302d:	bf 01 00 00 00       	mov    edi,0x1
c0003032:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003036:	75 07                	jne    c000303f <create_chain+0x65>
c0003038:	31 db                	xor    ebx,ebx
c000303a:	e9 92 01 00 00       	jmp    c00031d1 <create_chain+0x1f7>
c000303f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003042:	75 74                	jne    c00030b8 <create_chain+0xde>
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	89 fa                	mov    edx,edi
c000304b:	89 f0                	mov    eax,esi
c000304d:	e8 2d f9 ff ff       	call   c000297f <find_bitmap>
c0003052:	89 c3                	mov    ebx,eax
c0003054:	8d 40 ff             	lea    eax,[eax-0x1]
c0003057:	83 f8 fd             	cmp    eax,0xfffffffd
c000305a:	0f 87 71 01 00 00    	ja     c00031d1 <create_chain+0x1f7>
c0003060:	83 ec 0c             	sub    esp,0xc
c0003063:	b9 01 00 00 00       	mov    ecx,0x1
c0003068:	89 da                	mov    edx,ebx
c000306a:	89 f0                	mov    eax,esi
c000306c:	6a 01                	push   0x1
c000306e:	e8 bf f9 ff ff       	call   c0002a32 <change_bitmap>
c0003073:	83 c4 10             	add    esp,0x10
c0003076:	83 f8 02             	cmp    eax,0x2
c0003079:	74 90                	je     c000300b <create_chain+0x31>
c000307b:	83 f8 01             	cmp    eax,0x1
c000307e:	0f 84 fa 00 00 00    	je     c000317e <create_chain+0x1a4>
c0003084:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003089:	75 09                	jne    c0003094 <create_chain+0xba>
c000308b:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000308f:	e9 0e 01 00 00       	jmp    c00031a2 <create_chain+0x1c8>
c0003094:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003098:	0f 85 e9 00 00 00    	jne    c0003187 <create_chain+0x1ad>
c000309e:	8d 57 01             	lea    edx,[edi+0x1]
c00030a1:	39 da                	cmp    edx,ebx
c00030a3:	0f 84 f9 00 00 00    	je     c00031a2 <create_chain+0x1c8>
c00030a9:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030ac:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b0:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030b3:	e9 cf 00 00 00       	jmp    c0003187 <create_chain+0x1ad>
c00030b8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030bc:	75 41                	jne    c00030ff <create_chain+0x125>
c00030be:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c1:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030c4:	77 05                	ja     c00030cb <create_chain+0xf1>
c00030c6:	bb 02 00 00 00       	mov    ebx,0x2
c00030cb:	89 da                	mov    edx,ebx
c00030cd:	89 e8                	mov    eax,ebp
c00030cf:	e8 18 fc ff ff       	call   c0002cec <get_fat>
c00030d4:	83 f8 01             	cmp    eax,0x1
c00030d7:	0f 84 a6 00 00 00    	je     c0003183 <create_chain+0x1a9>
c00030dd:	83 f8 ff             	cmp    eax,0xffffffff
c00030e0:	0f 84 9d 00 00 00    	je     c0003183 <create_chain+0x1a9>
c00030e6:	85 c0                	test   eax,eax
c00030e8:	74 11                	je     c00030fb <create_chain+0x121>
c00030ea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030ed:	83 f8 01             	cmp    eax,0x1
c00030f0:	76 0d                	jbe    c00030ff <create_chain+0x125>
c00030f2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030f5:	76 08                	jbe    c00030ff <create_chain+0x125>
c00030f7:	89 c7                	mov    edi,eax
c00030f9:	eb 04                	jmp    c00030ff <create_chain+0x125>
c00030fb:	85 db                	test   ebx,ebx
c00030fd:	75 36                	jne    c0003135 <create_chain+0x15b>
c00030ff:	89 fb                	mov    ebx,edi
c0003101:	43                   	inc    ebx
c0003102:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003105:	77 0e                	ja     c0003115 <create_chain+0x13b>
c0003107:	83 ff 01             	cmp    edi,0x1
c000310a:	0f 86 28 ff ff ff    	jbe    c0003038 <create_chain+0x5e>
c0003110:	bb 02 00 00 00       	mov    ebx,0x2
c0003115:	89 da                	mov    edx,ebx
c0003117:	89 e8                	mov    eax,ebp
c0003119:	e8 ce fb ff ff       	call   c0002cec <get_fat>
c000311e:	85 c0                	test   eax,eax
c0003120:	74 13                	je     c0003135 <create_chain+0x15b>
c0003122:	83 f8 01             	cmp    eax,0x1
c0003125:	74 5c                	je     c0003183 <create_chain+0x1a9>
c0003127:	83 f8 ff             	cmp    eax,0xffffffff
c000312a:	74 57                	je     c0003183 <create_chain+0x1a9>
c000312c:	39 fb                	cmp    ebx,edi
c000312e:	75 d1                	jne    c0003101 <create_chain+0x127>
c0003130:	e9 03 ff ff ff       	jmp    c0003038 <create_chain+0x5e>
c0003135:	83 c9 ff             	or     ecx,0xffffffff
c0003138:	89 da                	mov    edx,ebx
c000313a:	89 f0                	mov    eax,esi
c000313c:	e8 a6 f9 ff ff       	call   c0002ae7 <put_fat>
c0003141:	85 c0                	test   eax,eax
c0003143:	75 14                	jne    c0003159 <create_chain+0x17f>
c0003145:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314a:	74 0d                	je     c0003159 <create_chain+0x17f>
c000314c:	89 d9                	mov    ecx,ebx
c000314e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003152:	89 f0                	mov    eax,esi
c0003154:	e8 8e f9 ff ff       	call   c0002ae7 <put_fat>
c0003159:	85 c0                	test   eax,eax
c000315b:	75 1a                	jne    c0003177 <create_chain+0x19d>
c000315d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003160:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003163:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003166:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003169:	39 d0                	cmp    eax,edx
c000316b:	77 04                	ja     c0003171 <create_chain+0x197>
c000316d:	48                   	dec    eax
c000316e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003171:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003175:	eb 5a                	jmp    c00031d1 <create_chain+0x1f7>
c0003177:	48                   	dec    eax
c0003178:	0f 85 8d fe ff ff    	jne    c000300b <create_chain+0x31>
c000317e:	83 cb ff             	or     ebx,0xffffffff
c0003181:	eb 4e                	jmp    c00031d1 <create_chain+0x1f7>
c0003183:	89 c3                	mov    ebx,eax
c0003185:	eb 4a                	jmp    c00031d1 <create_chain+0x1f7>
c0003187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000318b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000318e:	41                   	inc    ecx
c000318f:	39 d9                	cmp    ecx,ebx
c0003191:	75 19                	jne    c00031ac <create_chain+0x1d2>
c0003193:	b9 02 00 00 00       	mov    ecx,0x2
c0003198:	85 d2                	test   edx,edx
c000319a:	74 03                	je     c000319f <create_chain+0x1c5>
c000319c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000319f:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a2:	85 c0                	test   eax,eax
c00031a4:	0f 85 61 fe ff ff    	jne    c000300b <create_chain+0x31>
c00031aa:	eb b1                	jmp    c000315d <create_chain+0x183>
c00031ac:	85 d2                	test   edx,edx
c00031ae:	75 07                	jne    c00031b7 <create_chain+0x1dd>
c00031b0:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031b7:	89 d9                	mov    ecx,ebx
c00031b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031bd:	89 e8                	mov    eax,ebp
c00031bf:	e8 b9 fa ff ff       	call   c0002c7d <fill_last_frag>
c00031c4:	85 c0                	test   eax,eax
c00031c6:	75 af                	jne    c0003177 <create_chain+0x19d>
c00031c8:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031cf:	eb 8c                	jmp    c000315d <create_chain+0x183>
c00031d1:	83 c4 1c             	add    esp,0x1c
c00031d4:	89 d8                	mov    eax,ebx
c00031d6:	5b                   	pop    ebx
c00031d7:	5e                   	pop    esi
c00031d8:	5f                   	pop    edi
c00031d9:	5d                   	pop    ebp
c00031da:	c3                   	ret    

c00031db <remove_chain>:
c00031db:	55                   	push   ebp
c00031dc:	57                   	push   edi
c00031dd:	56                   	push   esi
c00031de:	53                   	push   ebx
c00031df:	83 ec 1c             	sub    esp,0x1c
c00031e2:	83 fa 01             	cmp    edx,0x1
c00031e5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031eb:	77 0a                	ja     c00031f7 <remove_chain+0x1c>
c00031ed:	b8 02 00 00 00       	mov    eax,0x2
c00031f2:	e9 24 01 00 00       	jmp    c000331b <remove_chain+0x140>
c00031f7:	89 d6                	mov    esi,edx
c00031f9:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031fc:	76 ef                	jbe    c00031ed <remove_chain+0x12>
c00031fe:	89 c7                	mov    edi,eax
c0003200:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003205:	75 06                	jne    c000320d <remove_chain+0x32>
c0003207:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000320b:	eb 54                	jmp    c0003261 <remove_chain+0x86>
c000320d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003210:	75 06                	jne    c0003218 <remove_chain+0x3d>
c0003212:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003216:	74 ef                	je     c0003207 <remove_chain+0x2c>
c0003218:	83 c9 ff             	or     ecx,0xffffffff
c000321b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000321f:	89 d8                	mov    eax,ebx
c0003221:	e8 c1 f8 ff ff       	call   c0002ae7 <put_fat>
c0003226:	85 c0                	test   eax,eax
c0003228:	74 dd                	je     c0003207 <remove_chain+0x2c>
c000322a:	e9 ec 00 00 00       	jmp    c000331b <remove_chain+0x140>
c000322f:	83 f8 01             	cmp    eax,0x1
c0003232:	74 b9                	je     c00031ed <remove_chain+0x12>
c0003234:	83 f8 ff             	cmp    eax,0xffffffff
c0003237:	74 6d                	je     c00032a6 <remove_chain+0xcb>
c0003239:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000323c:	75 6f                	jne    c00032ad <remove_chain+0xd2>
c000323e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003241:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003244:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003247:	39 d0                	cmp    eax,edx
c0003249:	73 08                	jae    c0003253 <remove_chain+0x78>
c000324b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000324f:	40                   	inc    eax
c0003250:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003253:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003256:	39 e9                	cmp    ecx,ebp
c0003258:	75 64                	jne    c00032be <remove_chain+0xe3>
c000325a:	89 ee                	mov    esi,ebp
c000325c:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000325f:	76 0f                	jbe    c0003270 <remove_chain+0x95>
c0003261:	89 f2                	mov    edx,esi
c0003263:	89 f8                	mov    eax,edi
c0003265:	e8 82 fa ff ff       	call   c0002cec <get_fat>
c000326a:	89 c5                	mov    ebp,eax
c000326c:	85 c0                	test   eax,eax
c000326e:	75 bf                	jne    c000322f <remove_chain+0x54>
c0003270:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003273:	0f 85 a0 00 00 00    	jne    c0003319 <remove_chain+0x13e>
c0003279:	eb 6c                	jmp    c00032e7 <remove_chain+0x10c>
c000327b:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000327e:	84 c0                	test   al,al
c0003280:	75 7d                	jne    c00032ff <remove_chain+0x124>
c0003282:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003285:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003289:	0f 84 86 00 00 00    	je     c0003315 <remove_chain+0x13a>
c000328f:	89 da                	mov    edx,ebx
c0003291:	89 f8                	mov    eax,edi
c0003293:	e8 54 fa ff ff       	call   c0002cec <get_fat>
c0003298:	83 f8 01             	cmp    eax,0x1
c000329b:	0f 86 4c ff ff ff    	jbe    c00031ed <remove_chain+0x12>
c00032a1:	83 f8 ff             	cmp    eax,0xffffffff
c00032a4:	75 4e                	jne    c00032f4 <remove_chain+0x119>
c00032a6:	b8 01 00 00 00       	mov    eax,0x1
c00032ab:	eb 6e                	jmp    c000331b <remove_chain+0x140>
c00032ad:	31 c9                	xor    ecx,ecx
c00032af:	89 f2                	mov    edx,esi
c00032b1:	89 d8                	mov    eax,ebx
c00032b3:	e8 2f f8 ff ff       	call   c0002ae7 <put_fat>
c00032b8:	85 c0                	test   eax,eax
c00032ba:	74 82                	je     c000323e <remove_chain+0x63>
c00032bc:	eb 5d                	jmp    c000331b <remove_chain+0x140>
c00032be:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c1:	75 1b                	jne    c00032de <remove_chain+0x103>
c00032c3:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032c7:	83 ec 0c             	sub    esp,0xc
c00032ca:	6a 00                	push   0x0
c00032cc:	89 d8                	mov    eax,ebx
c00032ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d2:	e8 5b f7 ff ff       	call   c0002a32 <change_bitmap>
c00032d7:	83 c4 10             	add    esp,0x10
c00032da:	85 c0                	test   eax,eax
c00032dc:	75 3d                	jne    c000331b <remove_chain+0x140>
c00032de:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e2:	e9 73 ff ff ff       	jmp    c000325a <remove_chain+0x7f>
c00032e7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ec:	75 8d                	jne    c000327b <remove_chain+0xa0>
c00032ee:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f2:	eb 25                	jmp    c0003319 <remove_chain+0x13e>
c00032f4:	8d 53 01             	lea    edx,[ebx+0x1]
c00032f7:	89 c3                	mov    ebx,eax
c00032f9:	39 c2                	cmp    edx,eax
c00032fb:	74 88                	je     c0003285 <remove_chain+0xaa>
c00032fd:	eb 1a                	jmp    c0003319 <remove_chain+0x13e>
c00032ff:	3c 03                	cmp    al,0x3
c0003301:	75 16                	jne    c0003319 <remove_chain+0x13e>
c0003303:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	77 0d                	ja     c0003319 <remove_chain+0x13e>
c000330c:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000330f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003313:	72 04                	jb     c0003319 <remove_chain+0x13e>
c0003315:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003319:	31 c0                	xor    eax,eax
c000331b:	83 c4 1c             	add    esp,0x1c
c000331e:	5b                   	pop    ebx
c000331f:	5e                   	pop    esi
c0003320:	5f                   	pop    edi
c0003321:	5d                   	pop    ebp
c0003322:	c3                   	ret    

c0003323 <dir_clear>:
c0003323:	55                   	push   ebp
c0003324:	57                   	push   edi
c0003325:	56                   	push   esi
c0003326:	89 c6                	mov    esi,eax
c0003328:	53                   	push   ebx
c0003329:	83 ec 1c             	sub    esp,0x1c
c000332c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003330:	e8 a1 ed ff ff       	call   c00020d6 <sync_window>
c0003335:	85 c0                	test   eax,eax
c0003337:	0f 85 de 00 00 00    	jne    c000341b <dir_clear+0xf8>
c000333d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003341:	89 f0                	mov    eax,esi
c0003343:	e8 e4 e8 ff ff       	call   c0001c2c <clst2sect>
c0003348:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003353:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003356:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003359:	b9 00 02 00 00       	mov    ecx,0x200
c000335e:	31 d2                	xor    edx,edx
c0003360:	89 e8                	mov    eax,ebp
c0003362:	e8 c0 e6 ff ff       	call   c0001a27 <mem_set>
c0003367:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000336b:	c1 e3 09             	shl    ebx,0x9
c000336e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003374:	76 1f                	jbe    c0003395 <dir_clear+0x72>
c0003376:	bb 00 80 00 00       	mov    ebx,0x8000
c000337b:	eb 18                	jmp    c0003395 <dir_clear+0x72>
c000337d:	83 ec 0c             	sub    esp,0xc
c0003380:	53                   	push   ebx
c0003381:	e8 f3 4d 00 00       	call   c0008179 <ff_memalloc>
c0003386:	83 c4 10             	add    esp,0x10
c0003389:	89 c7                	mov    edi,eax
c000338b:	85 c0                	test   eax,eax
c000338d:	0f 85 8f 00 00 00    	jne    c0003422 <dir_clear+0xff>
c0003393:	d1 eb                	shr    ebx,1
c0003395:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000339b:	77 e0                	ja     c000337d <dir_clear+0x5a>
c000339d:	31 db                	xor    ebx,ebx
c000339f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a3:	39 d8                	cmp    eax,ebx
c00033a5:	76 66                	jbe    c000340d <dir_clear+0xea>
c00033a7:	83 ec 0c             	sub    esp,0xc
c00033aa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ae:	6a 01                	push   0x1
c00033b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033b8:	55                   	push   ebp
c00033b9:	50                   	push   eax
c00033ba:	e8 9f e5 ff ff       	call   c000195e <disk_write>
c00033bf:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033c4:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c9:	83 c4 20             	add    esp,0x20
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 3d                	jne    c000340d <dir_clear+0xea>
c00033d0:	43                   	inc    ebx
c00033d1:	eb cc                	jmp    c000339f <dir_clear+0x7c>
c00033d3:	83 ec 0c             	sub    esp,0xc
c00033d6:	89 d8                	mov    eax,ebx
c00033d8:	31 d2                	xor    edx,edx
c00033da:	55                   	push   ebp
c00033db:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033df:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e3:	52                   	push   edx
c00033e4:	50                   	push   eax
c00033e5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e9:	57                   	push   edi
c00033ea:	50                   	push   eax
c00033eb:	e8 6e e5 ff ff       	call   c000195e <disk_write>
c00033f0:	83 c4 20             	add    esp,0x20
c00033f3:	85 c0                	test   eax,eax
c00033f5:	75 0a                	jne    c0003401 <dir_clear+0xde>
c00033f7:	01 eb                	add    ebx,ebp
c00033f9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033fd:	39 d8                	cmp    eax,ebx
c00033ff:	77 d2                	ja     c00033d3 <dir_clear+0xb0>
c0003401:	83 ec 0c             	sub    esp,0xc
c0003404:	57                   	push   edi
c0003405:	e8 85 4d 00 00       	call   c000818f <ff_memfree>
c000340a:	83 c4 10             	add    esp,0x10
c000340d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003411:	39 d8                	cmp    eax,ebx
c0003413:	0f 95 c0             	setne  al
c0003416:	0f b6 c0             	movzx  eax,al
c0003419:	eb 19                	jmp    c0003434 <dir_clear+0x111>
c000341b:	b8 01 00 00 00       	mov    eax,0x1
c0003420:	eb 12                	jmp    c0003434 <dir_clear+0x111>
c0003422:	89 d9                	mov    ecx,ebx
c0003424:	31 d2                	xor    edx,edx
c0003426:	c1 eb 09             	shr    ebx,0x9
c0003429:	e8 f9 e5 ff ff       	call   c0001a27 <mem_set>
c000342e:	89 dd                	mov    ebp,ebx
c0003430:	31 db                	xor    ebx,ebx
c0003432:	eb c5                	jmp    c00033f9 <dir_clear+0xd6>
c0003434:	83 c4 1c             	add    esp,0x1c
c0003437:	5b                   	pop    ebx
c0003438:	5e                   	pop    esi
c0003439:	5f                   	pop    edi
c000343a:	5d                   	pop    ebp
c000343b:	c3                   	ret    

c000343c <dir_next>:
c000343c:	55                   	push   ebp
c000343d:	57                   	push   edi
c000343e:	56                   	push   esi
c000343f:	53                   	push   ebx
c0003440:	89 c3                	mov    ebx,eax
c0003442:	83 ec 1c             	sub    esp,0x1c
c0003445:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003447:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000344a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000344e:	8d 78 20             	lea    edi,[eax+0x20]
c0003451:	31 c0                	xor    eax,eax
c0003453:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003457:	0f 94 c0             	sete   al
c000345a:	48                   	dec    eax
c000345b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003460:	05 00 00 00 10       	add    eax,0x10000000
c0003465:	39 f8                	cmp    eax,edi
c0003467:	77 0e                	ja     c0003477 <dir_next+0x3b>
c0003469:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003470:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003477:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000347a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000347d:	89 ce                	mov    esi,ecx
c000347f:	b8 04 00 00 00       	mov    eax,0x4
c0003484:	09 d6                	or     esi,edx
c0003486:	0f 84 da 00 00 00    	je     c0003566 <dir_next+0x12a>
c000348c:	89 f8                	mov    eax,edi
c000348e:	25 ff 01 00 00       	and    eax,0x1ff
c0003493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003497:	0f 85 b9 00 00 00    	jne    c0003556 <dir_next+0x11a>
c000349d:	83 c2 01             	add    edx,0x1
c00034a0:	83 d1 00             	adc    ecx,0x0
c00034a3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034ac:	85 d2                	test   edx,edx
c00034ae:	75 29                	jne    c00034d9 <dir_next+0x9d>
c00034b0:	89 fa                	mov    edx,edi
c00034b2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034b6:	c1 ea 05             	shr    edx,0x5
c00034b9:	39 c2                	cmp    edx,eax
c00034bb:	0f 82 95 00 00 00    	jb     c0003556 <dir_next+0x11a>
c00034c1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034cf:	b8 04 00 00 00       	mov    eax,0x4
c00034d4:	e9 8d 00 00 00       	jmp    c0003566 <dir_next+0x12a>
c00034d9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034dd:	89 f9                	mov    ecx,edi
c00034df:	48                   	dec    eax
c00034e0:	c1 e9 09             	shr    ecx,0x9
c00034e3:	85 c8                	test   eax,ecx
c00034e5:	75 6f                	jne    c0003556 <dir_next+0x11a>
c00034e7:	89 d8                	mov    eax,ebx
c00034e9:	e8 fe f7 ff ff       	call   c0002cec <get_fat>
c00034ee:	89 c6                	mov    esi,eax
c00034f0:	83 f8 01             	cmp    eax,0x1
c00034f3:	77 07                	ja     c00034fc <dir_next+0xc0>
c00034f5:	b8 02 00 00 00       	mov    eax,0x2
c00034fa:	eb 6a                	jmp    c0003566 <dir_next+0x12a>
c00034fc:	83 f8 ff             	cmp    eax,0xffffffff
c00034ff:	75 07                	jne    c0003508 <dir_next+0xcc>
c0003501:	b8 01 00 00 00       	mov    eax,0x1
c0003506:	eb 5e                	jmp    c0003566 <dir_next+0x12a>
c0003508:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000350b:	77 37                	ja     c0003544 <dir_next+0x108>
c000350d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003512:	74 ad                	je     c00034c1 <dir_next+0x85>
c0003514:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003517:	89 d8                	mov    eax,ebx
c0003519:	e8 bc fa ff ff       	call   c0002fda <create_chain>
c000351e:	89 c6                	mov    esi,eax
c0003520:	b8 07 00 00 00       	mov    eax,0x7
c0003525:	85 f6                	test   esi,esi
c0003527:	74 3d                	je     c0003566 <dir_next+0x12a>
c0003529:	83 fe 01             	cmp    esi,0x1
c000352c:	74 c7                	je     c00034f5 <dir_next+0xb9>
c000352e:	83 fe ff             	cmp    esi,0xffffffff
c0003531:	74 ce                	je     c0003501 <dir_next+0xc5>
c0003533:	89 f2                	mov    edx,esi
c0003535:	89 e8                	mov    eax,ebp
c0003537:	e8 e7 fd ff ff       	call   c0003323 <dir_clear>
c000353c:	85 c0                	test   eax,eax
c000353e:	75 c1                	jne    c0003501 <dir_next+0xc5>
c0003540:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003544:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003547:	89 f2                	mov    edx,esi
c0003549:	89 e8                	mov    eax,ebp
c000354b:	e8 dc e6 ff ff       	call   c0001c2c <clst2sect>
c0003550:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000355a:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000355d:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003561:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003564:	31 c0                	xor    eax,eax
c0003566:	83 c4 1c             	add    esp,0x1c
c0003569:	5b                   	pop    ebx
c000356a:	5e                   	pop    esi
c000356b:	5f                   	pop    edi
c000356c:	5d                   	pop    ebp
c000356d:	c3                   	ret    

c000356e <load_xdir>:
c000356e:	55                   	push   ebp
c000356f:	57                   	push   edi
c0003570:	56                   	push   esi
c0003571:	89 c6                	mov    esi,eax
c0003573:	53                   	push   ebx
c0003574:	83 ec 1c             	sub    esp,0x1c
c0003577:	8b 00                	mov    eax,DWORD PTR [eax]
c0003579:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000357c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000357f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003582:	e8 e3 eb ff ff       	call   c000216a <move_window>
c0003587:	89 c3                	mov    ebx,eax
c0003589:	85 c0                	test   eax,eax
c000358b:	0f 85 0c 01 00 00    	jne    c000369d <load_xdir+0x12f>
c0003591:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003594:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003597:	0f 85 fb 00 00 00    	jne    c0003698 <load_xdir+0x12a>
c000359d:	89 f8                	mov    eax,edi
c000359f:	b9 20 00 00 00       	mov    ecx,0x20
c00035a4:	e8 69 e4 ff ff       	call   c0001a12 <mem_cpy>
c00035a9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035ad:	40                   	inc    eax
c00035ae:	c1 e0 05             	shl    eax,0x5
c00035b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035b5:	83 e8 60             	sub    eax,0x60
c00035b8:	3d 00 02 00 00       	cmp    eax,0x200
c00035bd:	0f 87 d5 00 00 00    	ja     c0003698 <load_xdir+0x12a>
c00035c3:	31 d2                	xor    edx,edx
c00035c5:	89 f0                	mov    eax,esi
c00035c7:	e8 70 fe ff ff       	call   c000343c <dir_next>
c00035cc:	89 c3                	mov    ebx,eax
c00035ce:	83 f8 04             	cmp    eax,0x4
c00035d1:	0f 84 c1 00 00 00    	je     c0003698 <load_xdir+0x12a>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	0f 85 be 00 00 00    	jne    c000369d <load_xdir+0x12f>
c00035df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00035e7:	e8 7e eb ff ff       	call   c000216a <move_window>
c00035ec:	89 c3                	mov    ebx,eax
c00035ee:	85 c0                	test   eax,eax
c00035f0:	0f 85 a7 00 00 00    	jne    c000369d <load_xdir+0x12f>
c00035f6:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f9:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035fc:	0f 85 96 00 00 00    	jne    c0003698 <load_xdir+0x12a>
c0003602:	8d 47 20             	lea    eax,[edi+0x20]
c0003605:	b9 20 00 00 00       	mov    ecx,0x20
c000360a:	e8 03 e4 ff ff       	call   c0001a12 <mem_cpy>
c000360f:	31 d2                	xor    edx,edx
c0003611:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003615:	b9 0f 00 00 00       	mov    ecx,0xf
c000361a:	83 c0 2c             	add    eax,0x2c
c000361d:	f7 f1                	div    ecx
c000361f:	c1 e0 05             	shl    eax,0x5
c0003622:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003626:	77 70                	ja     c0003698 <load_xdir+0x12a>
c0003628:	bd 40 00 00 00       	mov    ebp,0x40
c000362d:	31 d2                	xor    edx,edx
c000362f:	89 f0                	mov    eax,esi
c0003631:	e8 06 fe ff ff       	call   c000343c <dir_next>
c0003636:	89 c3                	mov    ebx,eax
c0003638:	83 f8 04             	cmp    eax,0x4
c000363b:	74 5b                	je     c0003698 <load_xdir+0x12a>
c000363d:	85 c0                	test   eax,eax
c000363f:	75 5c                	jne    c000369d <load_xdir+0x12f>
c0003641:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003644:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003647:	8b 06                	mov    eax,DWORD PTR [esi]
c0003649:	e8 1c eb ff ff       	call   c000216a <move_window>
c000364e:	89 c3                	mov    ebx,eax
c0003650:	85 c0                	test   eax,eax
c0003652:	75 49                	jne    c000369d <load_xdir+0x12f>
c0003654:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003657:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000365a:	75 3c                	jne    c0003698 <load_xdir+0x12a>
c000365c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003662:	77 0d                	ja     c0003671 <load_xdir+0x103>
c0003664:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003667:	b9 20 00 00 00       	mov    ecx,0x20
c000366c:	e8 a1 e3 ff ff       	call   c0001a12 <mem_cpy>
c0003671:	83 c5 20             	add    ebp,0x20
c0003674:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003678:	77 b3                	ja     c000362d <load_xdir+0xbf>
c000367a:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003680:	77 1b                	ja     c000369d <load_xdir+0x12f>
c0003682:	89 f8                	mov    eax,edi
c0003684:	e8 d8 e7 ff ff       	call   c0001e61 <xdir_sum>
c0003689:	89 c1                	mov    ecx,eax
c000368b:	8d 47 02             	lea    eax,[edi+0x2]
c000368e:	e8 00 e3 ff ff       	call   c0001993 <ld_word>
c0003693:	66 39 c1             	cmp    cx,ax
c0003696:	74 05                	je     c000369d <load_xdir+0x12f>
c0003698:	bb 02 00 00 00       	mov    ebx,0x2
c000369d:	83 c4 1c             	add    esp,0x1c
c00036a0:	89 d8                	mov    eax,ebx
c00036a2:	5b                   	pop    ebx
c00036a3:	5e                   	pop    esi
c00036a4:	5f                   	pop    edi
c00036a5:	5d                   	pop    ebp
c00036a6:	c3                   	ret    

c00036a7 <load_obj_xdir>:
c00036a7:	53                   	push   ebx
c00036a8:	89 c3                	mov    ebx,eax
c00036aa:	83 ec 08             	sub    esp,0x8
c00036ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00036af:	89 03                	mov    DWORD PTR [ebx],eax
c00036b1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036b7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036ba:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036c7:	30 c0                	xor    al,al
c00036c9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d3:	89 d8                	mov    eax,ebx
c00036d5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036d8:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036db:	e8 02 f8 ff ff       	call   c0002ee2 <dir_sdi>
c00036e0:	85 c0                	test   eax,eax
c00036e2:	75 0b                	jne    c00036ef <load_obj_xdir+0x48>
c00036e4:	83 c4 08             	add    esp,0x8
c00036e7:	89 d8                	mov    eax,ebx
c00036e9:	5b                   	pop    ebx
c00036ea:	e9 7f fe ff ff       	jmp    c000356e <load_xdir>
c00036ef:	83 c4 08             	add    esp,0x8
c00036f2:	5b                   	pop    ebx
c00036f3:	c3                   	ret    

c00036f4 <dir_read>:
c00036f4:	55                   	push   ebp
c00036f5:	bd 04 00 00 00       	mov    ebp,0x4
c00036fa:	57                   	push   edi
c00036fb:	56                   	push   esi
c00036fc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003701:	53                   	push   ebx
c0003702:	89 c3                	mov    ebx,eax
c0003704:	83 ec 1c             	sub    esp,0x1c
c0003707:	8b 38                	mov    edi,DWORD PTR [eax]
c0003709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000370d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003712:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003715:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003718:	89 c8                	mov    eax,ecx
c000371a:	09 d0                	or     eax,edx
c000371c:	0f 84 25 01 00 00    	je     c0003847 <dir_read+0x153>
c0003722:	89 f8                	mov    eax,edi
c0003724:	e8 41 ea ff ff       	call   c000216a <move_window>
c0003729:	89 c5                	mov    ebp,eax
c000372b:	85 c0                	test   eax,eax
c000372d:	0f 85 23 01 00 00    	jne    c0003856 <dir_read+0x162>
c0003733:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003736:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003738:	84 c9                	test   cl,cl
c000373a:	0f 84 11 01 00 00    	je     c0003851 <dir_read+0x15d>
c0003740:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003743:	75 48                	jne    c000378d <dir_read+0x99>
c0003745:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000374a:	74 10                	je     c000375c <dir_read+0x68>
c000374c:	80 f9 83             	cmp    cl,0x83
c000374f:	0f 85 dd 00 00 00    	jne    c0003832 <dir_read+0x13e>
c0003755:	31 ed                	xor    ebp,ebp
c0003757:	e9 08 01 00 00       	jmp    c0003864 <dir_read+0x170>
c000375c:	80 f9 85             	cmp    cl,0x85
c000375f:	0f 85 cd 00 00 00    	jne    c0003832 <dir_read+0x13e>
c0003765:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003768:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000376b:	89 d8                	mov    eax,ebx
c000376d:	e8 fc fd ff ff       	call   c000356e <load_xdir>
c0003772:	89 c5                	mov    ebp,eax
c0003774:	85 c0                	test   eax,eax
c0003776:	0f 85 da 00 00 00    	jne    c0003856 <dir_read+0x162>
c000377c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000377f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003782:	83 e0 3f             	and    eax,0x3f
c0003785:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003788:	e9 d7 00 00 00       	jmp    c0003864 <dir_read+0x170>
c000378d:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003790:	83 e0 3f             	and    eax,0x3f
c0003793:	80 f9 e5             	cmp    cl,0xe5
c0003796:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000379a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000379d:	0f 84 8a 00 00 00    	je     c000382d <dir_read+0x139>
c00037a3:	80 f9 2e             	cmp    cl,0x2e
c00037a6:	0f 84 81 00 00 00    	je     c000382d <dir_read+0x139>
c00037ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b0:	83 e0 1f             	and    eax,0x1f
c00037b3:	83 f8 08             	cmp    eax,0x8
c00037b6:	0f 94 c0             	sete   al
c00037b9:	0f b6 c0             	movzx  eax,al
c00037bc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c0:	75 6b                	jne    c000382d <dir_read+0x139>
c00037c2:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037c7:	75 44                	jne    c000380d <dir_read+0x119>
c00037c9:	f6 c1 40             	test   cl,0x40
c00037cc:	74 12                	je     c00037e0 <dir_read+0xec>
c00037ce:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d1:	83 e1 bf             	and    ecx,0xffffffbf
c00037d4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037db:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037de:	eb 06                	jmp    c00037e6 <dir_read+0xf2>
c00037e0:	89 f0                	mov    eax,esi
c00037e2:	38 c8                	cmp    al,cl
c00037e4:	75 47                	jne    c000382d <dir_read+0x139>
c00037e6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037ea:	be ff ff ff ff       	mov    esi,0xffffffff
c00037ef:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f2:	75 3e                	jne    c0003832 <dir_read+0x13e>
c00037f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fb:	e8 95 e4 ff ff       	call   c0001c95 <pick_lfn>
c0003800:	85 c0                	test   eax,eax
c0003802:	74 2e                	je     c0003832 <dir_read+0x13e>
c0003804:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003808:	8d 71 ff             	lea    esi,[ecx-0x1]
c000380b:	eb 25                	jmp    c0003832 <dir_read+0x13e>
c000380d:	89 f0                	mov    eax,esi
c000380f:	84 c0                	test   al,al
c0003811:	75 11                	jne    c0003824 <dir_read+0x130>
c0003813:	89 d0                	mov    eax,edx
c0003815:	e8 35 e6 ff ff       	call   c0001e4f <sum_sfn>
c000381a:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000381e:	0f 84 31 ff ff ff    	je     c0003755 <dir_read+0x61>
c0003824:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000382b:	eb 37                	jmp    c0003864 <dir_read+0x170>
c000382d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003832:	31 d2                	xor    edx,edx
c0003834:	89 d8                	mov    eax,ebx
c0003836:	e8 01 fc ff ff       	call   c000343c <dir_next>
c000383b:	89 c5                	mov    ebp,eax
c000383d:	85 c0                	test   eax,eax
c000383f:	0f 84 cd fe ff ff    	je     c0003712 <dir_read+0x1e>
c0003845:	eb 0f                	jmp    c0003856 <dir_read+0x162>
c0003847:	85 ed                	test   ebp,ebp
c0003849:	0f 84 06 ff ff ff    	je     c0003755 <dir_read+0x61>
c000384f:	eb 05                	jmp    c0003856 <dir_read+0x162>
c0003851:	bd 04 00 00 00       	mov    ebp,0x4
c0003856:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000385d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003864:	83 c4 1c             	add    esp,0x1c
c0003867:	89 e8                	mov    eax,ebp
c0003869:	5b                   	pop    ebx
c000386a:	5e                   	pop    esi
c000386b:	5f                   	pop    edi
c000386c:	5d                   	pop    ebp
c000386d:	c3                   	ret    

c000386e <dir_alloc>:
c000386e:	55                   	push   ebp
c000386f:	89 d5                	mov    ebp,edx
c0003871:	57                   	push   edi
c0003872:	31 d2                	xor    edx,edx
c0003874:	56                   	push   esi
c0003875:	53                   	push   ebx
c0003876:	89 c3                	mov    ebx,eax
c0003878:	83 ec 0c             	sub    esp,0xc
c000387b:	8b 38                	mov    edi,DWORD PTR [eax]
c000387d:	e8 60 f6 ff ff       	call   c0002ee2 <dir_sdi>
c0003882:	85 c0                	test   eax,eax
c0003884:	75 4e                	jne    c00038d4 <dir_alloc+0x66>
c0003886:	31 f6                	xor    esi,esi
c0003888:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000388b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000388e:	89 f8                	mov    eax,edi
c0003890:	e8 d5 e8 ff ff       	call   c000216a <move_window>
c0003895:	85 c0                	test   eax,eax
c0003897:	75 3b                	jne    c00038d4 <dir_alloc+0x66>
c0003899:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000389c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000389f:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a1:	75 07                	jne    c00038aa <dir_alloc+0x3c>
c00038a3:	f7 d2                	not    edx
c00038a5:	c0 ea 07             	shr    dl,0x7
c00038a8:	eb 0d                	jmp    c00038b7 <dir_alloc+0x49>
c00038aa:	80 fa e5             	cmp    dl,0xe5
c00038ad:	0f 94 c1             	sete   cl
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c2             	sete   dl
c00038b5:	09 ca                	or     edx,ecx
c00038b7:	84 d2                	test   dl,dl
c00038b9:	74 07                	je     c00038c2 <dir_alloc+0x54>
c00038bb:	46                   	inc    esi
c00038bc:	39 ee                	cmp    esi,ebp
c00038be:	75 04                	jne    c00038c4 <dir_alloc+0x56>
c00038c0:	eb 1c                	jmp    c00038de <dir_alloc+0x70>
c00038c2:	31 f6                	xor    esi,esi
c00038c4:	ba 01 00 00 00       	mov    edx,0x1
c00038c9:	89 d8                	mov    eax,ebx
c00038cb:	e8 6c fb ff ff       	call   c000343c <dir_next>
c00038d0:	85 c0                	test   eax,eax
c00038d2:	74 b4                	je     c0003888 <dir_alloc+0x1a>
c00038d4:	83 f8 04             	cmp    eax,0x4
c00038d7:	75 05                	jne    c00038de <dir_alloc+0x70>
c00038d9:	b8 07 00 00 00       	mov    eax,0x7
c00038de:	83 c4 0c             	add    esp,0xc
c00038e1:	5b                   	pop    ebx
c00038e2:	5e                   	pop    esi
c00038e3:	5f                   	pop    edi
c00038e4:	5d                   	pop    ebp
c00038e5:	c3                   	ret    

c00038e6 <store_xdir>:
c00038e6:	55                   	push   ebp
c00038e7:	57                   	push   edi
c00038e8:	89 c7                	mov    edi,eax
c00038ea:	56                   	push   esi
c00038eb:	53                   	push   ebx
c00038ec:	83 ec 0c             	sub    esp,0xc
c00038ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f1:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038f4:	89 e8                	mov    eax,ebp
c00038f6:	e8 66 e5 ff ff       	call   c0001e61 <xdir_sum>
c00038fb:	0f b7 d0             	movzx  edx,ax
c00038fe:	8d 45 02             	lea    eax,[ebp+0x2]
c0003901:	e8 ff e0 ff ff       	call   c0001a05 <st_word>
c0003906:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003909:	89 f8                	mov    eax,edi
c000390b:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c000390f:	e8 ce f5 ff ff       	call   c0002ee2 <dir_sdi>
c0003914:	89 c6                	mov    esi,eax
c0003916:	85 f6                	test   esi,esi
c0003918:	75 3d                	jne    c0003957 <store_xdir+0x71>
c000391a:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c000391d:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003920:	8b 07                	mov    eax,DWORD PTR [edi]
c0003922:	e8 43 e8 ff ff       	call   c000216a <move_window>
c0003927:	89 c6                	mov    esi,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 2a                	jne    c0003957 <store_xdir+0x71>
c000392d:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003930:	b9 20 00 00 00       	mov    ecx,0x20
c0003935:	89 ea                	mov    edx,ebp
c0003937:	e8 d6 e0 ff ff       	call   c0001a12 <mem_cpy>
c000393c:	8b 07                	mov    eax,DWORD PTR [edi]
c000393e:	85 db                	test   ebx,ebx
c0003940:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003944:	74 11                	je     c0003957 <store_xdir+0x71>
c0003946:	31 d2                	xor    edx,edx
c0003948:	89 f8                	mov    eax,edi
c000394a:	e8 ed fa ff ff       	call   c000343c <dir_next>
c000394f:	83 c5 20             	add    ebp,0x20
c0003952:	89 c6                	mov    esi,eax
c0003954:	4b                   	dec    ebx
c0003955:	eb bf                	jmp    c0003916 <store_xdir+0x30>
c0003957:	89 f0                	mov    eax,esi
c0003959:	83 fe 02             	cmp    esi,0x2
c000395c:	76 05                	jbe    c0003963 <store_xdir+0x7d>
c000395e:	b8 02 00 00 00       	mov    eax,0x2
c0003963:	83 c4 0c             	add    esp,0xc
c0003966:	5b                   	pop    ebx
c0003967:	5e                   	pop    esi
c0003968:	5f                   	pop    edi
c0003969:	5d                   	pop    ebp
c000396a:	c3                   	ret    

c000396b <dir_remove>:
c000396b:	57                   	push   edi
c000396c:	56                   	push   esi
c000396d:	53                   	push   ebx
c000396e:	89 c3                	mov    ebx,eax
c0003970:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003973:	8b 30                	mov    esi,DWORD PTR [eax]
c0003975:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003978:	83 fa ff             	cmp    edx,0xffffffff
c000397b:	74 09                	je     c0003986 <dir_remove+0x1b>
c000397d:	e8 60 f5 ff ff       	call   c0002ee2 <dir_sdi>
c0003982:	85 c0                	test   eax,eax
c0003984:	75 41                	jne    c00039c7 <dir_remove+0x5c>
c0003986:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003989:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000398c:	89 f0                	mov    eax,esi
c000398e:	e8 d7 e7 ff ff       	call   c000216a <move_window>
c0003993:	85 c0                	test   eax,eax
c0003995:	75 26                	jne    c00039bd <dir_remove+0x52>
c0003997:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000399a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000399d:	75 05                	jne    c00039a4 <dir_remove+0x39>
c000399f:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a2:	eb 03                	jmp    c00039a7 <dir_remove+0x3c>
c00039a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039ab:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039ae:	73 17                	jae    c00039c7 <dir_remove+0x5c>
c00039b0:	31 d2                	xor    edx,edx
c00039b2:	89 d8                	mov    eax,ebx
c00039b4:	e8 83 fa ff ff       	call   c000343c <dir_next>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	74 c9                	je     c0003986 <dir_remove+0x1b>
c00039bd:	83 f8 04             	cmp    eax,0x4
c00039c0:	75 05                	jne    c00039c7 <dir_remove+0x5c>
c00039c2:	b8 02 00 00 00       	mov    eax,0x2
c00039c7:	5b                   	pop    ebx
c00039c8:	5e                   	pop    esi
c00039c9:	5f                   	pop    edi
c00039ca:	c3                   	ret    

c00039cb <create_name>:
c00039cb:	55                   	push   ebp
c00039cc:	89 d5                	mov    ebp,edx
c00039ce:	57                   	push   edi
c00039cf:	89 c7                	mov    edi,eax
c00039d1:	56                   	push   esi
c00039d2:	31 f6                	xor    esi,esi
c00039d4:	53                   	push   ebx
c00039d5:	83 ec 3c             	sub    esp,0x3c
c00039d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00039da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039de:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039e7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039eb:	e8 7d e0 ff ff       	call   c0001a6d <tchar2uni>
c00039f0:	89 c3                	mov    ebx,eax
c00039f2:	83 f8 ff             	cmp    eax,0xffffffff
c00039f5:	75 0a                	jne    c0003a01 <create_name+0x36>
c00039f7:	b8 06 00 00 00       	mov    eax,0x6
c00039fc:	e9 83 02 00 00       	jmp    c0003c84 <create_name+0x2b9>
c0003a01:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a06:	76 0c                	jbe    c0003a14 <create_name+0x49>
c0003a08:	c1 e8 10             	shr    eax,0x10
c0003a0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a0f:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a13:	46                   	inc    esi
c0003a14:	66 83 fb 1f          	cmp    bx,0x1f
c0003a18:	89 d8                	mov    eax,ebx
c0003a1a:	76 36                	jbe    c0003a52 <create_name+0x87>
c0003a1c:	66 83 fb 2f          	cmp    bx,0x2f
c0003a20:	74 30                	je     c0003a52 <create_name+0x87>
c0003a22:	66 83 fb 5c          	cmp    bx,0x5c
c0003a26:	74 39                	je     c0003a61 <create_name+0x96>
c0003a28:	66 83 fb 7f          	cmp    bx,0x7f
c0003a2c:	77 11                	ja     c0003a3f <create_name+0x74>
c0003a2e:	0f b7 d3             	movzx  edx,bx
c0003a31:	b8 12 fe 01 c0       	mov    eax,0xc001fe12
c0003a36:	e8 1a e0 ff ff       	call   c0001a55 <chk_chr>
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 b8                	jne    c00039f7 <create_name+0x2c>
c0003a3f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a45:	77 b0                	ja     c00039f7 <create_name+0x2c>
c0003a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a4b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a4f:	46                   	inc    esi
c0003a50:	eb 95                	jmp    c00039e7 <create_name+0x1c>
c0003a52:	66 83 f8 1f          	cmp    ax,0x1f
c0003a56:	b3 04                	mov    bl,0x4
c0003a58:	76 19                	jbe    c0003a73 <create_name+0xa8>
c0003a5a:	eb 05                	jmp    c0003a61 <create_name+0x96>
c0003a5c:	40                   	inc    eax
c0003a5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a65:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a67:	80 fa 2f             	cmp    dl,0x2f
c0003a6a:	74 f0                	je     c0003a5c <create_name+0x91>
c0003a6c:	80 fa 5c             	cmp    dl,0x5c
c0003a6f:	74 eb                	je     c0003a5c <create_name+0x91>
c0003a71:	31 db                	xor    ebx,ebx
c0003a73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a77:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a7a:	85 f6                	test   esi,esi
c0003a7c:	74 18                	je     c0003a96 <create_name+0xcb>
c0003a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a82:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a87:	66 83 f8 20          	cmp    ax,0x20
c0003a8b:	74 06                	je     c0003a93 <create_name+0xc8>
c0003a8d:	66 83 f8 2e          	cmp    ax,0x2e
c0003a91:	75 03                	jne    c0003a96 <create_name+0xcb>
c0003a93:	4e                   	dec    esi
c0003a94:	eb e4                	jmp    c0003a7a <create_name+0xaf>
c0003a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a9a:	31 ed                	xor    ebp,ebp
c0003a9c:	85 f6                	test   esi,esi
c0003a9e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa4:	0f 84 4d ff ff ff    	je     c00039f7 <create_name+0x2c>
c0003aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003aae:	8d 55 01             	lea    edx,[ebp+0x1]
c0003ab1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab5:	66 83 f8 20          	cmp    ax,0x20
c0003ab9:	75 04                	jne    c0003abf <create_name+0xf4>
c0003abb:	89 d5                	mov    ebp,edx
c0003abd:	eb eb                	jmp    c0003aaa <create_name+0xdf>
c0003abf:	85 ed                	test   ebp,ebp
c0003ac1:	75 06                	jne    c0003ac9 <create_name+0xfe>
c0003ac3:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac7:	75 08                	jne    c0003ad1 <create_name+0x106>
c0003ac9:	83 cb 03             	or     ebx,0x3
c0003acc:	eb 03                	jmp    c0003ad1 <create_name+0x106>
c0003ace:	4e                   	dec    esi
c0003acf:	74 0c                	je     c0003add <create_name+0x112>
c0003ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ad5:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003adb:	75 f1                	jne    c0003ace <create_name+0x103>
c0003add:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae2:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae5:	ba 20 00 00 00       	mov    edx,0x20
c0003aea:	e8 38 df ff ff       	call   c0001a27 <mem_set>
c0003aef:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003af7:	31 c9                	xor    ecx,ecx
c0003af9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003afe:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b09:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0d:	66 85 ed             	test   bp,bp
c0003b10:	0f 84 1f 01 00 00    	je     c0003c35 <create_name+0x26a>
c0003b16:	66 83 fd 20          	cmp    bp,0x20
c0003b1a:	74 0c                	je     c0003b28 <create_name+0x15d>
c0003b1c:	66 83 fd 2e          	cmp    bp,0x2e
c0003b20:	75 0f                	jne    c0003b31 <create_name+0x166>
c0003b22:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b26:	74 09                	je     c0003b31 <create_name+0x166>
c0003b28:	83 cb 03             	or     ebx,0x3
c0003b2b:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003b2f:	eb cd                	jmp    c0003afe <create_name+0x133>
c0003b31:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003b35:	73 06                	jae    c0003b3d <create_name+0x172>
c0003b37:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b3b:	75 3a                	jne    c0003b77 <create_name+0x1ac>
c0003b3d:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003b42:	75 08                	jne    c0003b4c <create_name+0x181>
c0003b44:	83 cb 03             	or     ebx,0x3
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x26a>
c0003b4c:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x194>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x26a>
c0003b5f:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003b64:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003b68:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb b4                	jmp    c0003b2b <create_name+0x160>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x21a>
c0003b7d:	88 da                	mov    dl,bl
c0003b7f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 0f 46 00 00       	call   c00081a6 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1e9>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad 60 fd 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe02a0]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x213>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x213>
c0003bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x204>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003bca:	e9 5c ff ff ff       	jmp    c0003b2b <create_name+0x160>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x25e>
c0003bde:	66 85 ed             	test   bp,bp
c0003be1:	88 d3                	mov    bl,dl
c0003be3:	74 19                	je     c0003bfe <create_name+0x233>
c0003be5:	0f b7 d5             	movzx  edx,bp
c0003be8:	b8 1b fe 01 c0       	mov    eax,0xc001fe1b
c0003bed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf1:	e8 5f de ff ff       	call   c0001a55 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x23d>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x25e>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x24d>
c0003c11:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x25e>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x25e>
c0003c21:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 f6 fe ff ff       	jmp    c0003b2b <create_name+0x160>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x274>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x280>
c0003c46:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x296>
c0003c56:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x29b>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2b4>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2b4>
c0003c6b:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2aa>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2b4>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	83 c4 3c             	add    esp,0x3c
c0003c87:	5b                   	pop    ebx
c0003c88:	5e                   	pop    esi
c0003c89:	5f                   	pop    edi
c0003c8a:	5d                   	pop    ebp
c0003c8b:	c3                   	ret    

c0003c8c <xname_sum>:
c0003c8c:	56                   	push   esi
c0003c8d:	89 c6                	mov    esi,eax
c0003c8f:	53                   	push   ebx
c0003c90:	31 db                	xor    ebx,ebx
c0003c92:	51                   	push   ecx
c0003c93:	83 c6 02             	add    esi,0x2
c0003c96:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003c9a:	66 85 c0             	test   ax,ax
c0003c9d:	74 1f                	je     c0003cbe <xname_sum+0x32>
c0003c9f:	66 d1 cb             	ror    bx,1
c0003ca2:	83 ec 0c             	sub    esp,0xc
c0003ca5:	50                   	push   eax
c0003ca6:	e8 00 46 00 00       	call   c00082ab <ff_wtoupper>
c0003cab:	0f b6 d0             	movzx  edx,al
c0003cae:	01 d3                	add    ebx,edx
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	66 c1 e8 08          	shr    ax,0x8
c0003cb7:	66 d1 cb             	ror    bx,1
c0003cba:	01 c3                	add    ebx,eax
c0003cbc:	eb d5                	jmp    c0003c93 <xname_sum+0x7>
c0003cbe:	5a                   	pop    edx
c0003cbf:	89 d8                	mov    eax,ebx
c0003cc1:	5b                   	pop    ebx
c0003cc2:	5e                   	pop    esi
c0003cc3:	c3                   	ret    

c0003cc4 <create_xdir>:
c0003cc4:	55                   	push   ebp
c0003cc5:	b9 40 00 00 00       	mov    ecx,0x40
c0003cca:	57                   	push   edi
c0003ccb:	bd 01 00 00 00       	mov    ebp,0x1
c0003cd0:	56                   	push   esi
c0003cd1:	31 ff                	xor    edi,edi
c0003cd3:	53                   	push   ebx
c0003cd4:	89 c3                	mov    ebx,eax
c0003cd6:	83 ec 1c             	sub    esp,0x1c
c0003cd9:	be 40 00 00 00       	mov    esi,0x40
c0003cde:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ce2:	31 d2                	xor    edx,edx
c0003ce4:	e8 3e dd ff ff       	call   c0001a27 <mem_set>
c0003ce9:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cec:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003cf0:	31 c9                	xor    ecx,ecx
c0003cf2:	8d 46 01             	lea    eax,[esi+0x1]
c0003cf5:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003cf9:	83 c6 02             	add    esi,0x2
c0003cfc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d00:	66 85 ed             	test   bp,bp
c0003d03:	74 12                	je     c0003d17 <create_xdir+0x53>
c0003d05:	0f b6 c1             	movzx  eax,cl
c0003d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d0c:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d10:	66 83 fd 01          	cmp    bp,0x1
c0003d14:	80 d9 ff             	sbb    cl,0xff
c0003d17:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	0f b7 d5             	movzx  edx,bp
c0003d20:	e8 e0 dc ff ff       	call   c0001a05 <st_word>
c0003d25:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d2b:	75 d3                	jne    c0003d00 <create_xdir+0x3c>
c0003d2d:	8d 47 01             	lea    eax,[edi+0x1]
c0003d30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d38:	0f b6 c1             	movzx  eax,cl
c0003d3b:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d40:	74 07                	je     c0003d49 <create_xdir+0x85>
c0003d42:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d47:	eb a9                	jmp    c0003cf2 <create_xdir+0x2e>
c0003d49:	8d 47 02             	lea    eax,[edi+0x2]
c0003d4c:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d4f:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d52:	89 d0                	mov    eax,edx
c0003d54:	e8 33 ff ff ff       	call   c0003c8c <xname_sum>
c0003d59:	83 c4 1c             	add    esp,0x1c
c0003d5c:	0f b7 d0             	movzx  edx,ax
c0003d5f:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d62:	5b                   	pop    ebx
c0003d63:	5e                   	pop    esi
c0003d64:	5f                   	pop    edi
c0003d65:	5d                   	pop    ebp
c0003d66:	e9 9a dc ff ff       	jmp    c0001a05 <st_word>

c0003d6b <cmp_lfn>:
c0003d6b:	55                   	push   ebp
c0003d6c:	57                   	push   edi
c0003d6d:	89 d7                	mov    edi,edx
c0003d6f:	56                   	push   esi
c0003d70:	53                   	push   ebx
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d78:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d7b:	e8 13 dc ff ff       	call   c0001993 <ld_word>
c0003d80:	66 85 c0             	test   ax,ax
c0003d83:	74 07                	je     c0003d8c <cmp_lfn+0x21>
c0003d85:	31 c0                	xor    eax,eax
c0003d87:	e9 9a 00 00 00       	jmp    c0003e26 <cmp_lfn+0xbb>
c0003d8c:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003d8e:	bd 01 00 00 00       	mov    ebp,0x1
c0003d93:	83 e3 3f             	and    ebx,0x3f
c0003d96:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003d9e:	4b                   	dec    ebx
c0003d9f:	6b db 0d             	imul   ebx,ebx,0xd
c0003da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003da6:	0f b6 80 e0 fd 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0220]
c0003dad:	01 f8                	add    eax,edi
c0003daf:	e8 df db ff ff       	call   c0001993 <ld_word>
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	89 c6                	mov    esi,eax
c0003db9:	74 3c                	je     c0003df7 <cmp_lfn+0x8c>
c0003dbb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dc1:	77 c2                	ja     c0003d85 <cmp_lfn+0x1a>
c0003dc3:	83 ec 0c             	sub    esp,0xc
c0003dc6:	0f b7 c0             	movzx  eax,ax
c0003dc9:	50                   	push   eax
c0003dca:	e8 dc 44 00 00       	call   c00082ab <ff_wtoupper>
c0003dcf:	89 c5                	mov    ebp,eax
c0003dd1:	8d 43 01             	lea    eax,[ebx+0x1]
c0003dd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ddc:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0003de3:	e8 c3 44 00 00       	call   c00082ab <ff_wtoupper>
c0003de8:	83 c4 10             	add    esp,0x10
c0003deb:	39 c5                	cmp    ebp,eax
c0003ded:	75 96                	jne    c0003d85 <cmp_lfn+0x1a>
c0003def:	89 f5                	mov    ebp,esi
c0003df1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003df5:	eb 04                	jmp    c0003dfb <cmp_lfn+0x90>
c0003df7:	66 46                	inc    si
c0003df9:	75 8a                	jne    c0003d85 <cmp_lfn+0x1a>
c0003dfb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003dff:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e04:	75 9c                	jne    c0003da2 <cmp_lfn+0x37>
c0003e06:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e09:	74 16                	je     c0003e21 <cmp_lfn+0xb6>
c0003e0b:	66 85 ed             	test   bp,bp
c0003e0e:	74 11                	je     c0003e21 <cmp_lfn+0xb6>
c0003e10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e14:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e19:	0f 94 c0             	sete   al
c0003e1c:	0f b6 c0             	movzx  eax,al
c0003e1f:	eb 05                	jmp    c0003e26 <cmp_lfn+0xbb>
c0003e21:	b8 01 00 00 00       	mov    eax,0x1
c0003e26:	83 c4 1c             	add    esp,0x1c
c0003e29:	5b                   	pop    ebx
c0003e2a:	5e                   	pop    esi
c0003e2b:	5f                   	pop    edi
c0003e2c:	5d                   	pop    ebp
c0003e2d:	c3                   	ret    

c0003e2e <dir_find>:
c0003e2e:	55                   	push   ebp
c0003e2f:	31 d2                	xor    edx,edx
c0003e31:	57                   	push   edi
c0003e32:	56                   	push   esi
c0003e33:	53                   	push   ebx
c0003e34:	89 c3                	mov    ebx,eax
c0003e36:	83 ec 1c             	sub    esp,0x1c
c0003e39:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e3b:	e8 a2 f0 ff ff       	call   c0002ee2 <dir_sdi>
c0003e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e43:	85 c0                	test   eax,eax
c0003e45:	0f 85 9f 01 00 00    	jne    c0003fea <dir_find+0x1bc>
c0003e4b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e4e:	0f 85 8e 00 00 00    	jne    c0003ee2 <dir_find+0xb4>
c0003e54:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e57:	e8 30 fe ff ff       	call   c0003c8c <xname_sum>
c0003e5c:	89 c5                	mov    ebp,eax
c0003e5e:	31 d2                	xor    edx,edx
c0003e60:	89 d8                	mov    eax,ebx
c0003e62:	e8 8d f8 ff ff       	call   c00036f4 <dir_read>
c0003e67:	85 c0                	test   eax,eax
c0003e69:	0f 85 5f 01 00 00    	jne    c0003fce <dir_find+0x1a0>
c0003e6f:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e72:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e75:	e8 19 db ff ff       	call   c0001993 <ld_word>
c0003e7a:	66 39 e8             	cmp    ax,bp
c0003e7d:	75 df                	jne    c0003e5e <dir_find+0x30>
c0003e7f:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003e83:	31 ff                	xor    edi,edi
c0003e85:	ba 40 00 00 00       	mov    edx,0x40
c0003e8a:	39 f9                	cmp    ecx,edi
c0003e8c:	0f 84 4a 01 00 00    	je     c0003fdc <dir_find+0x1ae>
c0003e92:	f6 c2 1f             	test   dl,0x1f
c0003e95:	75 03                	jne    c0003e9a <dir_find+0x6c>
c0003e97:	83 c2 02             	add    edx,0x2
c0003e9a:	89 d0                	mov    eax,edx
c0003e9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ea0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ea3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ea7:	e8 e7 da ff ff       	call   c0001993 <ld_word>
c0003eac:	83 ec 0c             	sub    esp,0xc
c0003eaf:	0f b7 c0             	movzx  eax,ax
c0003eb2:	50                   	push   eax
c0003eb3:	e8 f3 43 00 00       	call   c00082ab <ff_wtoupper>
c0003eb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ebc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ebf:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec6:	e8 e0 43 00 00       	call   c00082ab <ff_wtoupper>
c0003ecb:	83 c4 10             	add    esp,0x10
c0003ece:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ed2:	75 8a                	jne    c0003e5e <dir_find+0x30>
c0003ed4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ed8:	47                   	inc    edi
c0003ed9:	83 c2 02             	add    edx,0x2
c0003edc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee0:	eb a8                	jmp    c0003e8a <dir_find+0x5c>
c0003ee2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ee9:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eee:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ef3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ef6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ef9:	89 f0                	mov    eax,esi
c0003efb:	e8 6a e2 ff ff       	call   c000216a <move_window>
c0003f00:	85 c0                	test   eax,eax
c0003f02:	0f 85 c6 00 00 00    	jne    c0003fce <dir_find+0x1a0>
c0003f08:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f0b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f0e:	84 c9                	test   cl,cl
c0003f10:	0f 84 bd 00 00 00    	je     c0003fd3 <dir_find+0x1a5>
c0003f16:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f19:	88 d0                	mov    al,dl
c0003f1b:	83 e0 3f             	and    eax,0x3f
c0003f1e:	80 f9 e5             	cmp    cl,0xe5
c0003f21:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f24:	0f 84 87 00 00 00    	je     c0003fb1 <dir_find+0x183>
c0003f2a:	80 e2 08             	and    dl,0x8
c0003f2d:	74 06                	je     c0003f35 <dir_find+0x107>
c0003f2f:	3c 0f                	cmp    al,0xf
c0003f31:	75 7e                	jne    c0003fb1 <dir_find+0x183>
c0003f33:	eb 04                	jmp    c0003f39 <dir_find+0x10b>
c0003f35:	3c 0f                	cmp    al,0xf
c0003f37:	75 4c                	jne    c0003f85 <dir_find+0x157>
c0003f39:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f3d:	75 7e                	jne    c0003fbd <dir_find+0x18f>
c0003f3f:	f6 c1 40             	test   cl,0x40
c0003f42:	74 12                	je     c0003f56 <dir_find+0x128>
c0003f44:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f47:	83 e1 bf             	and    ecx,0xffffffbf
c0003f4a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f4e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f51:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f54:	eb 06                	jmp    c0003f5c <dir_find+0x12e>
c0003f56:	89 f8                	mov    eax,edi
c0003f58:	38 c8                	cmp    al,cl
c0003f5a:	75 5c                	jne    c0003fb8 <dir_find+0x18a>
c0003f5c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f60:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f65:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f68:	75 53                	jne    c0003fbd <dir_find+0x18f>
c0003f6a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f6d:	89 ea                	mov    edx,ebp
c0003f6f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003f73:	e8 f3 fd ff ff       	call   c0003d6b <cmp_lfn>
c0003f78:	85 c0                	test   eax,eax
c0003f7a:	74 41                	je     c0003fbd <dir_find+0x18f>
c0003f7c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003f80:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f83:	eb 38                	jmp    c0003fbd <dir_find+0x18f>
c0003f85:	89 f8                	mov    eax,edi
c0003f87:	84 c0                	test   al,al
c0003f89:	75 0d                	jne    c0003f98 <dir_find+0x16a>
c0003f8b:	89 e8                	mov    eax,ebp
c0003f8d:	e8 bd de ff ff       	call   c0001e4f <sum_sfn>
c0003f92:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003f96:	74 52                	je     c0003fea <dir_find+0x1bc>
c0003f98:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003f9c:	75 13                	jne    c0003fb1 <dir_find+0x183>
c0003f9e:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fa1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fa6:	89 e8                	mov    eax,ebp
c0003fa8:	e8 85 da ff ff       	call   c0001a32 <mem_cmp>
c0003fad:	85 c0                	test   eax,eax
c0003faf:	74 39                	je     c0003fea <dir_find+0x1bc>
c0003fb1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fb8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fbd:	31 d2                	xor    edx,edx
c0003fbf:	89 d8                	mov    eax,ebx
c0003fc1:	e8 76 f4 ff ff       	call   c000343c <dir_next>
c0003fc6:	85 c0                	test   eax,eax
c0003fc8:	0f 84 25 ff ff ff    	je     c0003ef3 <dir_find+0xc5>
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	eb 17                	jmp    c0003fea <dir_find+0x1bc>
c0003fd3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003fda:	eb 0e                	jmp    c0003fea <dir_find+0x1bc>
c0003fdc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fdf:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0003fe4:	0f 85 74 fe ff ff    	jne    c0003e5e <dir_find+0x30>
c0003fea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003fed:	83 c4 1c             	add    esp,0x1c
c0003ff0:	5b                   	pop    ebx
c0003ff1:	5e                   	pop    esi
c0003ff2:	5f                   	pop    edi
c0003ff3:	5d                   	pop    ebp
c0003ff4:	c3                   	ret    

c0003ff5 <dir_register>:
c0003ff5:	55                   	push   ebp
c0003ff6:	57                   	push   edi
c0003ff7:	56                   	push   esi
c0003ff8:	be 06 00 00 00       	mov    esi,0x6
c0003ffd:	53                   	push   ebx
c0003ffe:	83 ec 6c             	sub    esp,0x6c
c0004001:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004005:	0f 85 63 02 00 00    	jne    c000426e <dir_register+0x279>
c000400b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000400d:	31 ff                	xor    edi,edi
c000400f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004012:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004017:	74 03                	je     c000401c <dir_register+0x27>
c0004019:	47                   	inc    edi
c000401a:	eb f6                	jmp    c0004012 <dir_register+0x1d>
c000401c:	89 c3                	mov    ebx,eax
c000401e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004022:	0f 85 e1 00 00 00    	jne    c0004109 <dir_register+0x114>
c0004028:	83 c7 0e             	add    edi,0xe
c000402b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004030:	89 f8                	mov    eax,edi
c0004032:	31 d2                	xor    edx,edx
c0004034:	f7 f1                	div    ecx
c0004036:	89 c7                	mov    edi,eax
c0004038:	8d 50 02             	lea    edx,[eax+0x2]
c000403b:	89 d8                	mov    eax,ebx
c000403d:	e8 2c f8 ff ff       	call   c000386e <dir_alloc>
c0004042:	89 c6                	mov    esi,eax
c0004044:	85 c0                	test   eax,eax
c0004046:	0f 85 22 02 00 00    	jne    c000426e <dir_register+0x279>
c000404c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004052:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004055:	c1 e7 05             	shl    edi,0x5
c0004058:	29 f8                	sub    eax,edi
c000405a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000405d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004060:	a8 04                	test   al,0x4
c0004062:	0f 84 91 00 00 00    	je     c00040f9 <dir_register+0x104>
c0004068:	83 e0 fb             	and    eax,0xfffffffb
c000406b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000406e:	89 d8                	mov    eax,ebx
c0004070:	e8 3d ec ff ff       	call   c0002cb2 <fill_first_frag>
c0004075:	85 c0                	test   eax,eax
c0004077:	0f 85 ef 01 00 00    	jne    c000426c <dir_register+0x277>
c000407d:	83 c9 ff             	or     ecx,0xffffffff
c0004080:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004083:	89 d8                	mov    eax,ebx
c0004085:	e8 f3 eb ff ff       	call   c0002c7d <fill_last_frag>
c000408a:	85 c0                	test   eax,eax
c000408c:	0f 85 da 01 00 00    	jne    c000426c <dir_register+0x277>
c0004092:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004096:	74 61                	je     c00040f9 <dir_register+0x104>
c0004098:	89 da                	mov    edx,ebx
c000409a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000409e:	e8 04 f6 ff ff       	call   c00036a7 <load_obj_xdir>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 85 c1 01 00 00    	jne    c000426c <dir_register+0x277>
c00040ab:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040af:	c1 e2 09             	shl    edx,0x9
c00040b2:	31 c9                	xor    ecx,ecx
c00040b4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040b7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040ba:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040bd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040c3:	83 c0 38             	add    eax,0x38
c00040c6:	e8 41 d9 ff ff       	call   c0001a0c <st_qword>
c00040cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ce:	83 c0 28             	add    eax,0x28
c00040d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040d4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040d7:	e8 30 d9 ff ff       	call   c0001a0c <st_qword>
c00040dc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040df:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040e2:	83 c8 01             	or     eax,0x1
c00040e5:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040ec:	e8 f5 f7 ff ff       	call   c00038e6 <store_xdir>
c00040f1:	85 c0                	test   eax,eax
c00040f3:	0f 85 73 01 00 00    	jne    c000426c <dir_register+0x277>
c00040f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ff:	e8 c0 fb ff ff       	call   c0003cc4 <create_xdir>
c0004104:	e9 65 01 00 00       	jmp    c000426e <dir_register+0x279>
c0004109:	8d 40 3c             	lea    eax,[eax+0x3c]
c000410c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004115:	89 c2                	mov    edx,eax
c0004117:	8d 44 24 14          	lea    eax,[esp+0x14]
c000411b:	e8 f2 d8 ff ff       	call   c0001a12 <mem_cpy>
c0004120:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004125:	74 58                	je     c000417f <dir_register+0x18a>
c0004127:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000412b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004133:	83 ec 0c             	sub    esp,0xc
c0004136:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000413d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004141:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004145:	e8 49 dc ff ff       	call   c0001d93 <gen_numname>
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 dd fc ff ff       	call   c0003e2e <dir_find>
c0004151:	83 c4 10             	add    esp,0x10
c0004154:	89 c6                	mov    esi,eax
c0004156:	85 c0                	test   eax,eax
c0004158:	75 15                	jne    c000416f <dir_register+0x17a>
c000415a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000415e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004163:	75 ce                	jne    c0004133 <dir_register+0x13e>
c0004165:	be 07 00 00 00       	mov    esi,0x7
c000416a:	e9 ff 00 00 00       	jmp    c000426e <dir_register+0x279>
c000416f:	83 f8 04             	cmp    eax,0x4
c0004172:	0f 85 f6 00 00 00    	jne    c000426e <dir_register+0x279>
c0004178:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000417c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000417f:	b9 01 00 00 00       	mov    ecx,0x1
c0004184:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004189:	74 0f                	je     c000419a <dir_register+0x1a5>
c000418b:	b9 0d 00 00 00       	mov    ecx,0xd
c0004190:	8d 47 0c             	lea    eax,[edi+0xc]
c0004193:	31 d2                	xor    edx,edx
c0004195:	f7 f1                	div    ecx
c0004197:	8d 48 01             	lea    ecx,[eax+0x1]
c000419a:	89 ca                	mov    edx,ecx
c000419c:	89 d8                	mov    eax,ebx
c000419e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041a2:	e8 c7 f6 ff ff       	call   c000386e <dir_alloc>
c00041a7:	89 c6                	mov    esi,eax
c00041a9:	85 c0                	test   eax,eax
c00041ab:	0f 85 bd 00 00 00    	jne    c000426e <dir_register+0x279>
c00041b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041b5:	89 cf                	mov    edi,ecx
c00041b7:	4f                   	dec    edi
c00041b8:	74 6d                	je     c0004227 <dir_register+0x232>
c00041ba:	89 f8                	mov    eax,edi
c00041bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041bf:	c1 e0 05             	shl    eax,0x5
c00041c2:	29 c2                	sub    edx,eax
c00041c4:	89 d8                	mov    eax,ebx
c00041c6:	e8 17 ed ff ff       	call   c0002ee2 <dir_sdi>
c00041cb:	89 c6                	mov    esi,eax
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 99 00 00 00    	jne    c000426e <dir_register+0x279>
c00041d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041d9:	e8 71 dc ff ff       	call   c0001e4f <sum_sfn>
c00041de:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00041e2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041e8:	89 e8                	mov    eax,ebp
c00041ea:	e8 7b df ff ff       	call   c000216a <move_window>
c00041ef:	89 c6                	mov    esi,eax
c00041f1:	85 c0                	test   eax,eax
c00041f3:	75 79                	jne    c000426e <dir_register+0x279>
c00041f5:	83 ec 0c             	sub    esp,0xc
c00041f8:	89 f8                	mov    eax,edi
c00041fa:	0f b6 c8             	movzx  ecx,al
c00041fd:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0004202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004205:	52                   	push   edx
c0004206:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004209:	e8 01 db ff ff       	call   c0001d0f <put_lfn>
c000420e:	31 d2                	xor    edx,edx
c0004210:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004214:	89 d8                	mov    eax,ebx
c0004216:	e8 21 f2 ff ff       	call   c000343c <dir_next>
c000421b:	83 c4 10             	add    esp,0x10
c000421e:	89 c6                	mov    esi,eax
c0004220:	85 c0                	test   eax,eax
c0004222:	75 4a                	jne    c000426e <dir_register+0x279>
c0004224:	4f                   	dec    edi
c0004225:	75 bb                	jne    c00041e2 <dir_register+0x1ed>
c0004227:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000422a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000422d:	89 e8                	mov    eax,ebp
c000422f:	e8 36 df ff ff       	call   c000216a <move_window>
c0004234:	89 c6                	mov    esi,eax
c0004236:	85 c0                	test   eax,eax
c0004238:	75 34                	jne    c000426e <dir_register+0x279>
c000423a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000423d:	b9 20 00 00 00       	mov    ecx,0x20
c0004242:	31 d2                	xor    edx,edx
c0004244:	e8 de d7 ff ff       	call   c0001a27 <mem_set>
c0004249:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004250:	b9 0b 00 00 00       	mov    ecx,0xb
c0004255:	e8 b8 d7 ff ff       	call   c0001a12 <mem_cpy>
c000425a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000425d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004260:	83 e0 18             	and    eax,0x18
c0004263:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004266:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000426a:	eb 02                	jmp    c000426e <dir_register+0x279>
c000426c:	89 c6                	mov    esi,eax
c000426e:	83 c4 6c             	add    esp,0x6c
c0004271:	89 f0                	mov    eax,esi
c0004273:	5b                   	pop    ebx
c0004274:	5e                   	pop    esi
c0004275:	5f                   	pop    edi
c0004276:	5d                   	pop    ebp
c0004277:	c3                   	ret    

c0004278 <sync_fs>:
c0004278:	56                   	push   esi
c0004279:	53                   	push   ebx
c000427a:	53                   	push   ebx
c000427b:	89 c3                	mov    ebx,eax
c000427d:	e8 54 de ff ff       	call   c00020d6 <sync_window>
c0004282:	85 c0                	test   eax,eax
c0004284:	0f 85 b1 00 00 00    	jne    c000433b <sync_fs+0xc3>
c000428a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000428d:	0f 85 8e 00 00 00    	jne    c0004321 <sync_fs+0xa9>
c0004293:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004297:	0f 85 84 00 00 00    	jne    c0004321 <sync_fs+0xa9>
c000429d:	8d 73 54             	lea    esi,[ebx+0x54]
c00042a0:	b9 00 02 00 00       	mov    ecx,0x200
c00042a5:	31 d2                	xor    edx,edx
c00042a7:	89 f0                	mov    eax,esi
c00042a9:	e8 79 d7 ff ff       	call   c0001a27 <mem_set>
c00042ae:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042b4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042b9:	e8 47 d7 ff ff       	call   c0001a05 <st_word>
c00042be:	ba 52 52 61 41       	mov    edx,0x41615252
c00042c3:	89 f0                	mov    eax,esi
c00042c5:	e8 3f d7 ff ff       	call   c0001a09 <st_dword>
c00042ca:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042d0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042d5:	e8 2f d7 ff ff       	call   c0001a09 <st_dword>
c00042da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042dd:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042e3:	e8 21 d7 ff ff       	call   c0001a09 <st_dword>
c00042e8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042eb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00042f1:	e8 13 d7 ff ff       	call   c0001a09 <st_dword>
c00042f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00042f9:	83 c0 01             	add    eax,0x1
c00042fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042ff:	83 d2 00             	adc    edx,0x0
c0004302:	83 ec 0c             	sub    esp,0xc
c0004305:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004308:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000430b:	6a 01                	push   0x1
c000430d:	52                   	push   edx
c000430e:	50                   	push   eax
c000430f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004313:	56                   	push   esi
c0004314:	50                   	push   eax
c0004315:	e8 44 d6 ff ff       	call   c000195e <disk_write>
c000431a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000431e:	83 c4 20             	add    esp,0x20
c0004321:	51                   	push   ecx
c0004322:	6a 00                	push   0x0
c0004324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004328:	6a 00                	push   0x0
c000432a:	50                   	push   eax
c000432b:	e8 44 d6 ff ff       	call   c0001974 <disk_ioctl>
c0004330:	83 c4 10             	add    esp,0x10
c0004333:	85 c0                	test   eax,eax
c0004335:	0f 95 c0             	setne  al
c0004338:	0f b6 c0             	movzx  eax,al
c000433b:	5a                   	pop    edx
c000433c:	5b                   	pop    ebx
c000433d:	5e                   	pop    esi
c000433e:	c3                   	ret    

c000433f <create_partition>:
c000433f:	55                   	push   ebp
c0004340:	57                   	push   edi
c0004341:	56                   	push   esi
c0004342:	53                   	push   ebx
c0004343:	83 ec 60             	sub    esp,0x60
c0004346:	0f b6 c0             	movzx  eax,al
c0004349:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000434d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004351:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004355:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004359:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000435d:	50                   	push   eax
c000435e:	6a 01                	push   0x1
c0004360:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004364:	e8 0b d6 ff ff       	call   c0001974 <disk_ioctl>
c0004369:	83 c4 10             	add    esp,0x10
c000436c:	85 c0                	test   eax,eax
c000436e:	74 0a                	je     c000437a <create_partition+0x3b>
c0004370:	b8 01 00 00 00       	mov    eax,0x1
c0004375:	e9 73 05 00 00       	jmp    c00048ed <create_partition+0x5ae>
c000437a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000437e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000438a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000438f:	0f 86 ed 03 00 00    	jbe    c0004782 <create_partition+0x443>
c0004395:	83 c0 df             	add    eax,0xffffffdf
c0004398:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043a0:	83 d2 ff             	adc    edx,0xffffffff
c00043a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043af:	83 c0 bd             	add    eax,0xffffffbd
c00043b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043b6:	83 d2 ff             	adc    edx,0xffffffff
c00043b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043c1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043d0:	be 22 00 00 00       	mov    esi,0x22
c00043d5:	31 ff                	xor    edi,edi
c00043d7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043df:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00043f3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00043f9:	75 0e                	jne    c0004409 <create_partition+0xca>
c00043fb:	b9 00 02 00 00       	mov    ecx,0x200
c0004400:	31 d2                	xor    edx,edx
c0004402:	89 d8                	mov    eax,ebx
c0004404:	e8 1e d6 ff ff       	call   c0001a27 <mem_set>
c0004409:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000440d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004415:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004418:	0f 84 23 01 00 00    	je     c0004541 <create_partition+0x202>
c000441e:	89 f0                	mov    eax,esi
c0004420:	89 fa                	mov    edx,edi
c0004422:	05 ff 07 00 00       	add    eax,0x7ff
c0004427:	83 d2 00             	adc    edx,0x0
c000442a:	89 c1                	mov    ecx,eax
c000442c:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004436:	89 ce                	mov    esi,ecx
c0004438:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000443c:	89 d7                	mov    edi,edx
c000443e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004442:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004446:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004449:	89 04 24             	mov    DWORD PTR [esp],eax
c000444c:	b8 64 00 00 00       	mov    eax,0x64
c0004451:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004454:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004458:	b8 00 00 00 00       	mov    eax,0x0
c000445d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004461:	72 41                	jb     c00044a4 <create_partition+0x165>
c0004463:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000446b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004470:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004474:	01 c1                	add    ecx,eax
c0004476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000447a:	f7 24 24             	mul    DWORD PTR [esp]
c000447d:	6a 00                	push   0x0
c000447f:	01 ca                	add    edx,ecx
c0004481:	6a 64                	push   0x64
c0004483:	52                   	push   edx
c0004484:	50                   	push   eax
c0004485:	e8 32 a9 01 00       	call   c001edbc <__udivdi3>
c000448a:	83 c4 10             	add    esp,0x10
c000448d:	05 ff 07 00 00       	add    eax,0x7ff
c0004492:	83 d2 00             	adc    edx,0x0
c0004495:	89 c1                	mov    ecx,eax
c0004497:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000449d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044a1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ab:	01 f0                	add    eax,esi
c00044ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044b1:	11 fa                	adc    edx,edi
c00044b3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044b7:	19 d1                	sbb    ecx,edx
c00044b9:	73 2e                	jae    c00044e9 <create_partition+0x1aa>
c00044bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044bf:	89 f8                	mov    eax,edi
c00044c1:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044d4:	73 6b                	jae    c0004541 <create_partition+0x202>
c00044d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044de:	29 f0                	sub    eax,esi
c00044e0:	19 fa                	sbb    edx,edi
c00044e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ed:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f0:	74 4f                	je     c0004541 <create_partition+0x202>
c00044f2:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00044f5:	b9 10 00 00 00       	mov    ecx,0x10
c00044fa:	ba f0 fd 01 c0       	mov    edx,0xc001fdf0
c00044ff:	e8 0e d5 ff ff       	call   c0001a12 <mem_cpy>
c0004504:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004508:	b9 10 00 00 00       	mov    ecx,0x10
c000450d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004511:	e8 49 db ff ff       	call   c000205f <make_rand>
c0004516:	89 f2                	mov    edx,esi
c0004518:	89 f9                	mov    ecx,edi
c000451a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000451e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004522:	e8 e5 d4 ff ff       	call   c0001a0c <st_qword>
c0004527:	03 34 24             	add    esi,DWORD PTR [esp]
c000452a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000452e:	89 f2                	mov    edx,esi
c0004530:	89 f9                	mov    ecx,edi
c0004532:	83 c2 ff             	add    edx,0xffffffff
c0004535:	83 d1 ff             	adc    ecx,0xffffffff
c0004538:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453c:	e8 cb d4 ff ff       	call   c0001a0c <st_qword>
c0004541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004545:	83 e8 80             	sub    eax,0xffffff80
c0004548:	89 c5                	mov    ebp,eax
c000454a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000454e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004554:	75 6b                	jne    c00045c1 <create_partition+0x282>
c0004556:	45                   	inc    ebp
c0004557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000455b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004560:	e8 56 da ff ff       	call   c0001fbb <crc32>
c0004565:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000456b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000456f:	75 e5                	jne    c0004556 <create_partition+0x217>
c0004571:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004575:	83 ec 0c             	sub    esp,0xc
c0004578:	c1 ed 09             	shr    ebp,0x9
c000457b:	31 d2                	xor    edx,edx
c000457d:	6a 01                	push   0x1
c000457f:	52                   	push   edx
c0004580:	8d 45 02             	lea    eax,[ebp+0x2]
c0004583:	50                   	push   eax
c0004584:	53                   	push   ebx
c0004585:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004589:	e8 d0 d3 ff ff       	call   c000195e <disk_write>
c000458e:	83 c4 20             	add    esp,0x20
c0004591:	85 c0                	test   eax,eax
c0004593:	0f 85 d7 fd ff ff    	jne    c0004370 <create_partition+0x31>
c0004599:	83 ec 0c             	sub    esp,0xc
c000459c:	89 e8                	mov    eax,ebp
c000459e:	31 d2                	xor    edx,edx
c00045a0:	6a 01                	push   0x1
c00045a2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045a6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045aa:	52                   	push   edx
c00045ab:	50                   	push   eax
c00045ac:	53                   	push   ebx
c00045ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045b1:	e8 a8 d3 ff ff       	call   c000195e <disk_write>
c00045b6:	83 c4 20             	add    esp,0x20
c00045b9:	85 c0                	test   eax,eax
c00045bb:	0f 85 af fd ff ff    	jne    c0004370 <create_partition+0x31>
c00045c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045c9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ce:	74 0d                	je     c00045dd <create_partition+0x29e>
c00045d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045d8:	e9 12 fe ff ff       	jmp    c00043ef <create_partition+0xb0>
c00045dd:	31 d2                	xor    edx,edx
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	89 d8                	mov    eax,ebx
c00045e6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045e9:	e8 39 d4 ff ff       	call   c0001a27 <mem_set>
c00045ee:	b9 10 00 00 00       	mov    ecx,0x10
c00045f3:	ba e0 fc 01 c0       	mov    edx,0xc001fce0
c00045f8:	89 d8                	mov    eax,ebx
c00045fa:	e8 13 d4 ff ff       	call   c0001a12 <mem_cpy>
c00045ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004603:	f7 d2                	not    edx
c0004605:	8d 43 58             	lea    eax,[ebx+0x58]
c0004608:	8d 7b 48             	lea    edi,[ebx+0x48]
c000460b:	e8 f9 d3 ff ff       	call   c0001a09 <st_dword>
c0004610:	8d 43 18             	lea    eax,[ebx+0x18]
c0004613:	31 c9                	xor    ecx,ecx
c0004615:	ba 01 00 00 00       	mov    edx,0x1
c000461a:	89 04 24             	mov    DWORD PTR [esp],eax
c000461d:	e8 ea d3 ff ff       	call   c0001a0c <st_qword>
c0004622:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004626:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000462a:	83 c2 ff             	add    edx,0xffffffff
c000462d:	89 e8                	mov    eax,ebp
c000462f:	83 d1 ff             	adc    ecx,0xffffffff
c0004632:	e8 d5 d3 ff ff       	call   c0001a0c <st_qword>
c0004637:	31 c9                	xor    ecx,ecx
c0004639:	8d 43 28             	lea    eax,[ebx+0x28]
c000463c:	ba 22 00 00 00       	mov    edx,0x22
c0004641:	e8 c6 d3 ff ff       	call   c0001a0c <st_qword>
c0004646:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000464a:	83 c2 de             	add    edx,0xffffffde
c000464d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004651:	83 d1 ff             	adc    ecx,0xffffffff
c0004654:	8d 43 30             	lea    eax,[ebx+0x30]
c0004657:	e8 b0 d3 ff ff       	call   c0001a0c <st_qword>
c000465c:	8d 43 54             	lea    eax,[ebx+0x54]
c000465f:	ba 80 00 00 00       	mov    edx,0x80
c0004664:	31 f6                	xor    esi,esi
c0004666:	e8 9e d3 ff ff       	call   c0001a09 <st_dword>
c000466b:	8d 43 50             	lea    eax,[ebx+0x50]
c000466e:	ba 80 00 00 00       	mov    edx,0x80
c0004673:	e8 91 d3 ff ff       	call   c0001a09 <st_dword>
c0004678:	ba 02 00 00 00       	mov    edx,0x2
c000467d:	89 f8                	mov    eax,edi
c000467f:	e8 85 d3 ff ff       	call   c0001a09 <st_dword>
c0004684:	8d 53 38             	lea    edx,[ebx+0x38]
c0004687:	b9 10 00 00 00       	mov    ecx,0x10
c000468c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004690:	e8 ca d9 ff ff       	call   c000205f <make_rand>
c0004695:	83 c8 ff             	or     eax,0xffffffff
c0004698:	46                   	inc    esi
c0004699:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000469e:	e8 18 d9 ff ff       	call   c0001fbb <crc32>
c00046a3:	83 fe 5c             	cmp    esi,0x5c
c00046a6:	75 f0                	jne    c0004698 <create_partition+0x359>
c00046a8:	f7 d0                	not    eax
c00046aa:	8d 73 10             	lea    esi,[ebx+0x10]
c00046ad:	89 c2                	mov    edx,eax
c00046af:	89 f0                	mov    eax,esi
c00046b1:	e8 53 d3 ff ff       	call   c0001a09 <st_dword>
c00046b6:	83 ec 0c             	sub    esp,0xc
c00046b9:	6a 01                	push   0x1
c00046bb:	6a 00                	push   0x0
c00046bd:	6a 01                	push   0x1
c00046bf:	53                   	push   ebx
c00046c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046c4:	e8 95 d2 ff ff       	call   c000195e <disk_write>
c00046c9:	83 c4 20             	add    esp,0x20
c00046cc:	85 c0                	test   eax,eax
c00046ce:	0f 85 9c fc ff ff    	jne    c0004370 <create_partition+0x31>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046e2:	83 d1 ff             	adc    ecx,0xffffffff
c00046e5:	e8 22 d3 ff ff       	call   c0001a0c <st_qword>
c00046ea:	ba 01 00 00 00       	mov    edx,0x1
c00046ef:	31 c9                	xor    ecx,ecx
c00046f1:	89 e8                	mov    eax,ebp
c00046f3:	e8 14 d3 ff ff       	call   c0001a0c <st_qword>
c00046f8:	89 f8                	mov    eax,edi
c00046fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00046fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004702:	e8 05 d3 ff ff       	call   c0001a0c <st_qword>
c0004707:	89 f0                	mov    eax,esi
c0004709:	31 d2                	xor    edx,edx
c000470b:	31 ff                	xor    edi,edi
c000470d:	e8 f7 d2 ff ff       	call   c0001a09 <st_dword>
c0004712:	83 c8 ff             	or     eax,0xffffffff
c0004715:	47                   	inc    edi
c0004716:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000471b:	e8 9b d8 ff ff       	call   c0001fbb <crc32>
c0004720:	83 ff 5c             	cmp    edi,0x5c
c0004723:	75 f0                	jne    c0004715 <create_partition+0x3d6>
c0004725:	f7 d0                	not    eax
c0004727:	89 c2                	mov    edx,eax
c0004729:	89 f0                	mov    eax,esi
c000472b:	e8 d9 d2 ff ff       	call   c0001a09 <st_dword>
c0004730:	83 ec 0c             	sub    esp,0xc
c0004733:	6a 01                	push   0x1
c0004735:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004739:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000473d:	83 c0 ff             	add    eax,0xffffffff
c0004740:	83 d2 ff             	adc    edx,0xffffffff
c0004743:	52                   	push   edx
c0004744:	50                   	push   eax
c0004745:	53                   	push   ebx
c0004746:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000474a:	e8 0f d2 ff ff       	call   c000195e <disk_write>
c000474f:	83 c4 20             	add    esp,0x20
c0004752:	85 c0                	test   eax,eax
c0004754:	0f 85 16 fc ff ff    	jne    c0004370 <create_partition+0x31>
c000475a:	31 d2                	xor    edx,edx
c000475c:	89 d8                	mov    eax,ebx
c000475e:	b9 00 02 00 00       	mov    ecx,0x200
c0004763:	e8 bf d2 ff ff       	call   c0001a27 <mem_set>
c0004768:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000476e:	b9 10 00 00 00       	mov    ecx,0x10
c0004773:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c0004778:	e8 95 d2 ff ff       	call   c0001a12 <mem_cpy>
c000477d:	e9 3d 01 00 00       	jmp    c00048bf <create_partition+0x580>
c0004782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004786:	b9 05 00 00 00       	mov    ecx,0x5
c000478b:	89 04 24             	mov    DWORD PTR [esp],eax
c000478e:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004793:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004798:	31 d2                	xor    edx,edx
c000479a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000479d:	f7 f6                	div    esi
c000479f:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047a4:	76 0c                	jbe    c00047b2 <create_partition+0x473>
c00047a6:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c00047aa:	49                   	dec    ecx
c00047ab:	75 e6                	jne    c0004793 <create_partition+0x454>
c00047ad:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c00047b2:	b9 00 02 00 00       	mov    ecx,0x200
c00047b7:	31 d2                	xor    edx,edx
c00047b9:	89 d8                	mov    eax,ebx
c00047bb:	bd 3f 00 00 00       	mov    ebp,0x3f
c00047c0:	e8 62 d2 ff ff       	call   c0001a27 <mem_set>
c00047c5:	b9 64 00 00 00       	mov    ecx,0x64
c00047ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cd:	31 d2                	xor    edx,edx
c00047cf:	f7 f1                	div    ecx
c00047d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00047d5:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c00047db:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00047e3:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00047e8:	0f 96 c2             	setbe  dl
c00047eb:	85 ed                	test   ebp,ebp
c00047ed:	0f 95 c0             	setne  al
c00047f0:	84 c2                	test   dl,al
c00047f2:	0f 84 c7 00 00 00    	je     c00048bf <create_partition+0x580>
c00047f8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00047fb:	0f 83 be 00 00 00    	jae    c00048bf <create_partition+0x580>
c0004801:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004805:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0004809:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c000480c:	83 fe 64             	cmp    esi,0x64
c000480f:	77 0c                	ja     c000481d <create_partition+0x4de>
c0004811:	74 07                	je     c000481a <create_partition+0x4db>
c0004813:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c0004818:	eb 03                	jmp    c000481d <create_partition+0x4de>
c000481a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000481d:	89 e8                	mov    eax,ebp
c000481f:	01 f0                	add    eax,esi
c0004821:	72 05                	jb     c0004828 <create_partition+0x4e9>
c0004823:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004826:	76 07                	jbe    c000482f <create_partition+0x4f0>
c0004828:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000482b:	29 ee                	sub    esi,ebp
c000482d:	eb 08                	jmp    c0004837 <create_partition+0x4f8>
c000482f:	85 f6                	test   esi,esi
c0004831:	0f 84 88 00 00 00    	je     c00048bf <create_partition+0x580>
c0004837:	89 c8                	mov    eax,ecx
c0004839:	89 ea                	mov    edx,ebp
c000483b:	e8 c9 d1 ff ff       	call   c0001a09 <st_dword>
c0004840:	89 f2                	mov    edx,esi
c0004842:	bf 3f 00 00 00       	mov    edi,0x3f
c0004847:	8d 41 04             	lea    eax,[ecx+0x4]
c000484a:	e8 ba d1 ff ff       	call   c0001a09 <st_dword>
c000484f:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004853:	31 d2                	xor    edx,edx
c0004855:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004859:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000485c:	83 c1 10             	add    ecx,0x10
c000485f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004864:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004868:	89 e8                	mov    eax,ebp
c000486a:	f7 f7                	div    edi
c000486c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004870:	31 d2                	xor    edx,edx
c0004872:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004876:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004879:	89 c2                	mov    edx,eax
c000487b:	c1 ea 02             	shr    edx,0x2
c000487e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004882:	47                   	inc    edi
c0004883:	01 f5                	add    ebp,esi
c0004885:	83 e2 c0             	and    edx,0xffffffc0
c0004888:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000488b:	09 fa                	or     edx,edi
c000488d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004890:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004893:	bf 3f 00 00 00       	mov    edi,0x3f
c0004898:	31 d2                	xor    edx,edx
c000489a:	f7 f7                	div    edi
c000489c:	89 d6                	mov    esi,edx
c000489e:	31 d2                	xor    edx,edx
c00048a0:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00048a4:	89 c7                	mov    edi,eax
c00048a6:	46                   	inc    esi
c00048a7:	c1 ef 02             	shr    edi,0x2
c00048aa:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c00048ad:	83 e7 c0             	and    edi,0xffffffc0
c00048b0:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c00048b3:	09 fe                	or     esi,edi
c00048b5:	89 f2                	mov    edx,esi
c00048b7:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c00048ba:	e9 24 ff ff ff       	jmp    c00047e3 <create_partition+0x4a4>
c00048bf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048ca:	e8 36 d1 ff ff       	call   c0001a05 <st_word>
c00048cf:	83 ec 0c             	sub    esp,0xc
c00048d2:	6a 01                	push   0x1
c00048d4:	6a 00                	push   0x0
c00048d6:	6a 00                	push   0x0
c00048d8:	53                   	push   ebx
c00048d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048dd:	e8 7c d0 ff ff       	call   c000195e <disk_write>
c00048e2:	83 c4 20             	add    esp,0x20
c00048e5:	85 c0                	test   eax,eax
c00048e7:	0f 95 c0             	setne  al
c00048ea:	0f b6 c0             	movzx  eax,al
c00048ed:	83 c4 5c             	add    esp,0x5c
c00048f0:	5b                   	pop    ebx
c00048f1:	5e                   	pop    esi
c00048f2:	5f                   	pop    edi
c00048f3:	5d                   	pop    ebp
c00048f4:	c3                   	ret    

c00048f5 <get_fileinfo>:
c00048f5:	55                   	push   ebp
c00048f6:	57                   	push   edi
c00048f7:	56                   	push   esi
c00048f8:	53                   	push   ebx
c00048f9:	83 ec 1c             	sub    esp,0x1c
c00048fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00048fe:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004902:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004905:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004909:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000490c:	0f 84 dc 01 00 00    	je     c0004aee <get_fileinfo+0x1f9>
c0004912:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004915:	75 0f                	jne    c0004926 <get_fileinfo+0x31>
c0004917:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491a:	83 c4 1c             	add    esp,0x1c
c000491d:	5b                   	pop    ebx
c000491e:	5e                   	pop    esi
c000491f:	5f                   	pop    edi
c0004920:	5d                   	pop    ebp
c0004921:	e9 70 d5 ff ff       	jmp    c0001e96 <get_xfileinfo>
c0004926:	89 d3                	mov    ebx,edx
c0004928:	89 c6                	mov    esi,eax
c000492a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c000492e:	74 6a                	je     c000499a <get_fileinfo+0xa5>
c0004930:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004938:	31 ed                	xor    ebp,ebp
c000493a:	31 ff                	xor    edi,edi
c000493c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004944:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004947:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494b:	66 85 d2             	test   dx,dx
c000494e:	74 3e                	je     c000498e <get_fileinfo+0x99>
c0004950:	66 85 ed             	test   bp,bp
c0004953:	75 0c                	jne    c0004961 <get_fileinfo+0x6c>
c0004955:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495b:	66 3d ff 07          	cmp    ax,0x7ff
c000495f:	76 22                	jbe    c0004983 <get_fileinfo+0x8e>
c0004961:	89 e8                	mov    eax,ebp
c0004963:	b9 ff 00 00 00       	mov    ecx,0xff
c0004968:	c1 e0 10             	shl    eax,0x10
c000496b:	29 f9                	sub    ecx,edi
c000496d:	09 d0                	or     eax,edx
c000496f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004973:	e8 bb d1 ff ff       	call   c0001b33 <put_utf>
c0004978:	84 c0                	test   al,al
c000497a:	74 10                	je     c000498c <get_fileinfo+0x97>
c000497c:	0f b6 c0             	movzx  eax,al
c000497f:	01 c7                	add    edi,eax
c0004981:	31 d2                	xor    edx,edx
c0004983:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004988:	89 d5                	mov    ebp,edx
c000498a:	eb b0                	jmp    c000493c <get_fileinfo+0x47>
c000498c:	31 ff                	xor    edi,edi
c000498e:	66 85 ed             	test   bp,bp
c0004991:	74 02                	je     c0004995 <get_fileinfo+0xa0>
c0004993:	31 ff                	xor    edi,edi
c0004995:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499a:	31 ff                	xor    edi,edi
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	83 f9 0a             	cmp    ecx,0xa
c00049a1:	0f 87 ad 00 00 00    	ja     c0004a54 <get_fileinfo+0x15f>
c00049a7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049aa:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049ad:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b1:	66 83 fa 20          	cmp    dx,0x20
c00049b5:	0f 84 92 00 00 00    	je     c0004a4d <get_fileinfo+0x158>
c00049bb:	66 83 fa 05          	cmp    dx,0x5
c00049bf:	75 05                	jne    c00049c6 <get_fileinfo+0xd1>
c00049c1:	ba e5 00 00 00       	mov    edx,0xe5
c00049c6:	83 fd 09             	cmp    ebp,0x9
c00049c9:	75 0b                	jne    c00049d6 <get_fileinfo+0xe1>
c00049cb:	83 ff 0b             	cmp    edi,0xb
c00049ce:	77 06                	ja     c00049d6 <get_fileinfo+0xe1>
c00049d0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d5:	47                   	inc    edi
c00049d6:	0f b7 c2             	movzx  eax,dx
c00049d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049dd:	e8 85 d0 ff ff       	call   c0001a67 <dbc_1st>
c00049e2:	85 c0                	test   eax,eax
c00049e4:	74 2f                	je     c0004a15 <get_fileinfo+0x120>
c00049e6:	83 fd 08             	cmp    ebp,0x8
c00049e9:	74 2a                	je     c0004a15 <get_fileinfo+0x120>
c00049eb:	83 fd 0b             	cmp    ebp,0xb
c00049ee:	74 25                	je     c0004a15 <get_fileinfo+0x120>
c00049f0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049f7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049fb:	e8 6a d0 ff ff       	call   c0001a6a <dbc_2nd>
c0004a00:	85 c0                	test   eax,eax
c0004a02:	74 11                	je     c0004a15 <get_fileinfo+0x120>
c0004a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a08:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a0b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a10:	c1 e2 08             	shl    edx,0x8
c0004a13:	09 c2                	or     edx,eax
c0004a15:	50                   	push   eax
c0004a16:	50                   	push   eax
c0004a17:	68 b5 01 00 00       	push   0x1b5
c0004a1c:	0f b7 d2             	movzx  edx,dx
c0004a1f:	52                   	push   edx
c0004a20:	e8 17 38 00 00       	call   c000823c <ff_oem2uni>
c0004a25:	83 c4 10             	add    esp,0x10
c0004a28:	66 85 c0             	test   ax,ax
c0004a2b:	75 04                	jne    c0004a31 <get_fileinfo+0x13c>
c0004a2d:	31 ff                	xor    edi,edi
c0004a2f:	eb 23                	jmp    c0004a54 <get_fileinfo+0x15f>
c0004a31:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a36:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3a:	29 f9                	sub    ecx,edi
c0004a3c:	0f b7 c0             	movzx  eax,ax
c0004a3f:	e8 ef d0 ff ff       	call   c0001b33 <put_utf>
c0004a44:	84 c0                	test   al,al
c0004a46:	74 e5                	je     c0004a2d <get_fileinfo+0x138>
c0004a48:	0f b6 c0             	movzx  eax,al
c0004a4b:	01 c7                	add    edi,eax
c0004a4d:	89 e9                	mov    ecx,ebp
c0004a4f:	e9 4a ff ff ff       	jmp    c000499e <get_fileinfo+0xa9>
c0004a54:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a59:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a5d:	75 54                	jne    c0004ab3 <get_fileinfo+0x1be>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <get_fileinfo+0x179>
c0004a63:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a67:	ba 01 00 00 00       	mov    edx,0x1
c0004a6c:	eb 33                	jmp    c0004aa1 <get_fileinfo+0x1ac>
c0004a6e:	b1 08                	mov    cl,0x8
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a78:	84 c0                	test   al,al
c0004a7a:	74 25                	je     c0004aa1 <get_fileinfo+0x1ac>
c0004a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0004a80:	74 16                	je     c0004a98 <get_fileinfo+0x1a3>
c0004a82:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a85:	66 83 ff 19          	cmp    di,0x19
c0004a89:	77 0f                	ja     c0004a9a <get_fileinfo+0x1a5>
c0004a8b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a8e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a91:	74 07                	je     c0004a9a <get_fileinfo+0x1a5>
c0004a93:	83 c0 20             	add    eax,0x20
c0004a96:	eb 02                	jmp    c0004a9a <get_fileinfo+0x1a5>
c0004a98:	b1 10                	mov    cl,0x10
c0004a9a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004a9e:	42                   	inc    edx
c0004a9f:	eb d1                	jmp    c0004a72 <get_fileinfo+0x17d>
c0004aa1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aa6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004aad:	75 04                	jne    c0004ab3 <get_fileinfo+0x1be>
c0004aaf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ab9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004abc:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abf:	83 c0 1c             	add    eax,0x1c
c0004ac2:	e8 d9 ce ff ff       	call   c00019a0 <ld_dword>
c0004ac7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ace:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad3:	83 c0 16             	add    eax,0x16
c0004ad6:	e8 b8 ce ff ff       	call   c0001993 <ld_word>
c0004adb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004adf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae2:	83 c0 18             	add    eax,0x18
c0004ae5:	e8 a9 ce ff ff       	call   c0001993 <ld_word>
c0004aea:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004aee:	83 c4 1c             	add    esp,0x1c
c0004af1:	5b                   	pop    ebx
c0004af2:	5e                   	pop    esi
c0004af3:	5f                   	pop    edi
c0004af4:	5d                   	pop    ebp
c0004af5:	c3                   	ret    

c0004af6 <ld_clust.isra.0>:
c0004af6:	56                   	push   esi
c0004af7:	89 c6                	mov    esi,eax
c0004af9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004afc:	53                   	push   ebx
c0004afd:	89 d3                	mov    ebx,edx
c0004aff:	e8 8f ce ff ff       	call   c0001993 <ld_word>
c0004b04:	0f b7 c8             	movzx  ecx,ax
c0004b07:	89 f0                	mov    eax,esi
c0004b09:	3c 03                	cmp    al,0x3
c0004b0b:	75 0d                	jne    c0004b1a <ld_clust.isra.0+0x24>
c0004b0d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b10:	e8 7e ce ff ff       	call   c0001993 <ld_word>
c0004b15:	c1 e0 10             	shl    eax,0x10
c0004b18:	09 c1                	or     ecx,eax
c0004b1a:	5b                   	pop    ebx
c0004b1b:	89 c8                	mov    eax,ecx
c0004b1d:	5e                   	pop    esi
c0004b1e:	c3                   	ret    

c0004b1f <st_clust.isra.1>:
c0004b1f:	56                   	push   esi
c0004b20:	89 c6                	mov    esi,eax
c0004b22:	53                   	push   ebx
c0004b23:	89 d3                	mov    ebx,edx
c0004b25:	0f b7 d1             	movzx  edx,cx
c0004b28:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2b:	e8 d5 ce ff ff       	call   c0001a05 <st_word>
c0004b30:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b33:	75 0f                	jne    c0004b44 <st_clust.isra.1+0x25>
c0004b35:	c1 e9 10             	shr    ecx,0x10
c0004b38:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3b:	89 ca                	mov    edx,ecx
c0004b3d:	5b                   	pop    ebx
c0004b3e:	5e                   	pop    esi
c0004b3f:	e9 c1 ce ff ff       	jmp    c0001a05 <st_word>
c0004b44:	5b                   	pop    ebx
c0004b45:	5e                   	pop    esi
c0004b46:	c3                   	ret    

c0004b47 <init_alloc_info.isra.2>:
c0004b47:	56                   	push   esi
c0004b48:	89 c6                	mov    esi,eax
c0004b4a:	53                   	push   ebx
c0004b4b:	89 d3                	mov    ebx,edx
c0004b4d:	51                   	push   ecx
c0004b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b50:	83 c0 34             	add    eax,0x34
c0004b53:	e8 48 ce ff ff       	call   c00019a0 <ld_dword>
c0004b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b5d:	83 c0 38             	add    eax,0x38
c0004b60:	e8 53 ce ff ff       	call   c00019b8 <ld_qword>
c0004b65:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b68:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b6d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b70:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b77:	83 e0 02             	and    eax,0x2
c0004b7a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b7d:	5b                   	pop    ebx
c0004b7e:	5b                   	pop    ebx
c0004b7f:	5e                   	pop    esi
c0004b80:	c3                   	ret    

c0004b81 <follow_path>:
c0004b81:	56                   	push   esi
c0004b82:	53                   	push   ebx
c0004b83:	89 c3                	mov    ebx,eax
c0004b85:	83 ec 14             	sub    esp,0x14
c0004b88:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b92:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b94:	80 fa 2f             	cmp    dl,0x2f
c0004b97:	75 07                	jne    c0004ba0 <follow_path+0x1f>
c0004b99:	40                   	inc    eax
c0004b9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b9e:	eb ee                	jmp    c0004b8e <follow_path+0xd>
c0004ba0:	80 fa 5c             	cmp    dl,0x5c
c0004ba3:	74 f4                	je     c0004b99 <follow_path+0x18>
c0004ba5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bb6:	77 52                	ja     c0004c0a <follow_path+0x89>
c0004bb8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bbc:	31 d2                	xor    edx,edx
c0004bbe:	89 d8                	mov    eax,ebx
c0004bc0:	e8 1d e3 ff ff       	call   c0002ee2 <dir_sdi>
c0004bc5:	eb 7c                	jmp    c0004c43 <follow_path+0xc2>
c0004bc7:	89 d8                	mov    eax,ebx
c0004bc9:	e8 60 f2 ff ff       	call   c0003e2e <dir_find>
c0004bce:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd1:	85 c0                	test   eax,eax
c0004bd3:	75 46                	jne    c0004c1b <follow_path+0x9a>
c0004bd5:	80 e2 04             	and    dl,0x4
c0004bd8:	75 69                	jne    c0004c43 <follow_path+0xc2>
c0004bda:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bde:	74 5e                	je     c0004c3e <follow_path+0xbd>
c0004be0:	8a 06                	mov    al,BYTE PTR [esi]
c0004be2:	3c 04                	cmp    al,0x4
c0004be4:	75 41                	jne    c0004c27 <follow_path+0xa6>
c0004be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004be9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bed:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf3:	30 c0                	xor    al,al
c0004bf5:	09 d0                	or     eax,edx
c0004bf7:	89 da                	mov    edx,ebx
c0004bf9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004bfc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004bff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c02:	8d 46 10             	lea    eax,[esi+0x10]
c0004c05:	e8 3d ff ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004c0a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c0e:	89 d8                	mov    eax,ebx
c0004c10:	e8 b6 ed ff ff       	call   c00039cb <create_name>
c0004c15:	85 c0                	test   eax,eax
c0004c17:	74 ae                	je     c0004bc7 <follow_path+0x46>
c0004c19:	eb 28                	jmp    c0004c43 <follow_path+0xc2>
c0004c1b:	83 f8 04             	cmp    eax,0x4
c0004c1e:	75 23                	jne    c0004c43 <follow_path+0xc2>
c0004c20:	80 e2 04             	and    dl,0x4
c0004c23:	74 19                	je     c0004c3e <follow_path+0xbd>
c0004c25:	eb 1c                	jmp    c0004c43 <follow_path+0xc2>
c0004c27:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c30:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c34:	e8 bd fe ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004c39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c3c:	eb cc                	jmp    c0004c0a <follow_path+0x89>
c0004c3e:	b8 05 00 00 00       	mov    eax,0x5
c0004c43:	83 c4 14             	add    esp,0x14
c0004c46:	5b                   	pop    ebx
c0004c47:	5e                   	pop    esi
c0004c48:	c3                   	ret    

c0004c49 <f_mount>:
c0004c49:	53                   	push   ebx
c0004c4a:	83 ec 18             	sub    esp,0x18
c0004c4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c51:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c5d:	e8 13 d3 ff ff       	call   c0001f75 <get_ldnumber>
c0004c62:	89 c2                	mov    edx,eax
c0004c64:	b8 0b 00 00 00       	mov    eax,0xb
c0004c69:	85 d2                	test   edx,edx
c0004c6b:	78 39                	js     c0004ca6 <f_mount+0x5d>
c0004c6d:	8b 04 95 a0 3f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc060]
c0004c74:	85 c0                	test   eax,eax
c0004c76:	74 03                	je     c0004c7b <f_mount+0x32>
c0004c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c7f:	85 c0                	test   eax,eax
c0004c81:	74 03                	je     c0004c86 <f_mount+0x3d>
c0004c83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8a:	89 04 95 a0 3f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc060],eax
c0004c91:	31 c0                	xor    eax,eax
c0004c93:	84 db                	test   bl,bl
c0004c95:	74 0f                	je     c0004ca6 <f_mount+0x5d>
c0004c97:	31 c9                	xor    ecx,ecx
c0004c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004c9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca1:	e8 6f d7 ff ff       	call   c0002415 <mount_volume>
c0004ca6:	83 c4 18             	add    esp,0x18
c0004ca9:	5b                   	pop    ebx
c0004caa:	c3                   	ret    

c0004cab <f_open>:
c0004cab:	55                   	push   ebp
c0004cac:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	83 ec 7c             	sub    esp,0x7c
c0004cb7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cbe:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc5:	85 db                	test   ebx,ebx
c0004cc7:	0f 84 10 04 00 00    	je     c00050dd <f_open+0x432>
c0004ccd:	89 fe                	mov    esi,edi
c0004ccf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd3:	83 e6 3f             	and    esi,0x3f
c0004cd6:	89 f0                	mov    eax,esi
c0004cd8:	0f b6 c8             	movzx  ecx,al
c0004cdb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce2:	e8 2e d7 ff ff       	call   c0002415 <mount_volume>
c0004ce7:	89 c5                	mov    ebp,eax
c0004ce9:	85 c0                	test   eax,eax
c0004ceb:	0f 85 e6 03 00 00    	jne    c00050d7 <f_open+0x42c>
c0004cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf5:	83 ec 0c             	sub    esp,0xc
c0004cf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004cfc:	bd 11 00 00 00       	mov    ebp,0x11
c0004d01:	68 60 04 00 00       	push   0x460
c0004d06:	e8 6e 34 00 00       	call   c0008179 <ff_memalloc>
c0004d0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d17:	0f 84 c0 03 00 00    	je     c00050dd <f_open+0x432>
c0004d1d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d31:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d3c:	e8 40 fe ff ff       	call   c0004b81 <follow_path>
c0004d41:	89 c5                	mov    ebp,eax
c0004d43:	85 c0                	test   eax,eax
c0004d45:	75 0c                	jne    c0004d53 <f_open+0xa8>
c0004d47:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d4c:	79 05                	jns    c0004d53 <f_open+0xa8>
c0004d4e:	bd 06 00 00 00       	mov    ebp,0x6
c0004d53:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d59:	0f 84 84 01 00 00    	je     c0004ee3 <f_open+0x238>
c0004d5f:	85 ed                	test   ebp,ebp
c0004d61:	74 20                	je     c0004d83 <f_open+0xd8>
c0004d63:	83 fd 04             	cmp    ebp,0x4
c0004d66:	0f 85 58 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	83 ce 08             	or     esi,0x8
c0004d73:	e8 7d f2 ff ff       	call   c0003ff5 <dir_register>
c0004d78:	89 c5                	mov    ebp,eax
c0004d7a:	85 c0                	test   eax,eax
c0004d7c:	74 2f                	je     c0004dad <f_open+0x102>
c0004d7e:	e9 41 03 00 00       	jmp    c00050c4 <f_open+0x419>
c0004d83:	bd 07 00 00 00       	mov    ebp,0x7
c0004d88:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d8d:	0f 85 31 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004d93:	bd 08 00 00 00       	mov    ebp,0x8
c0004d98:	f7 c7 04 00 00 00    	test   edi,0x4
c0004d9e:	0f 85 20 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004da4:	83 e7 08             	and    edi,0x8
c0004da7:	0f 84 65 01 00 00    	je     c0004f12 <f_open+0x267>
c0004dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db1:	8a 02                	mov    al,BYTE PTR [edx]
c0004db3:	3c 04                	cmp    al,0x4
c0004db5:	0f 85 97 00 00 00    	jne    c0004e52 <f_open+0x1a7>
c0004dbb:	8d 42 10             	lea    eax,[edx+0x10]
c0004dbe:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc0:	89 da                	mov    edx,ebx
c0004dc2:	e8 80 fd ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dcb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dce:	31 d2                	xor    edx,edx
c0004dd0:	83 c0 02             	add    eax,0x2
c0004dd3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd8:	e8 4a cc ff ff       	call   c0001a27 <mem_set>
c0004ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de9:	83 c0 26             	add    eax,0x26
c0004dec:	31 d2                	xor    edx,edx
c0004dee:	e8 34 cc ff ff       	call   c0001a27 <mem_set>
c0004df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfa:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004dfe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e06:	83 c0 08             	add    eax,0x8
c0004e09:	e8 fb cb ff ff       	call   c0001a09 <st_dword>
c0004e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e15:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e1d:	e8 c4 ea ff ff       	call   c00038e6 <store_xdir>
c0004e22:	89 c5                	mov    ebp,eax
c0004e24:	85 c0                	test   eax,eax
c0004e26:	0f 85 98 02 00 00    	jne    c00050c4 <f_open+0x419>
c0004e2c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e2f:	85 d2                	test   edx,edx
c0004e31:	0f 84 db 00 00 00    	je     c0004f12 <f_open+0x267>
c0004e37:	31 c9                	xor    ecx,ecx
c0004e39:	89 d8                	mov    eax,ebx
c0004e3b:	e8 9b e3 ff ff       	call   c00031db <remove_chain>
c0004e40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e44:	89 c5                	mov    ebp,eax
c0004e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e49:	48                   	dec    eax
c0004e4a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e4d:	e9 b8 00 00 00       	jmp    c0004f0a <f_open+0x25f>
c0004e52:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e56:	89 ea                	mov    edx,ebp
c0004e58:	e8 99 fc ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004e5d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e62:	89 c7                	mov    edi,eax
c0004e64:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e67:	e8 9d cb ff ff       	call   c0001a09 <st_dword>
c0004e6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e70:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	e8 9c fc ff ff       	call   c0004b1f <st_clust.isra.1>
c0004e83:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e87:	83 c0 1c             	add    eax,0x1c
c0004e8a:	31 d2                	xor    edx,edx
c0004e8c:	e8 78 cb ff ff       	call   c0001a09 <st_dword>
c0004e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e95:	85 ff                	test   edi,edi
c0004e97:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9b:	74 75                	je     c0004f12 <f_open+0x267>
c0004e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea1:	31 c9                	xor    ecx,ecx
c0004ea3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004ea6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	e8 1f e3 ff ff       	call   c00031db <remove_chain>
c0004ebc:	89 c5                	mov    ebp,eax
c0004ebe:	85 c0                	test   eax,eax
c0004ec0:	0f 85 fe 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004ec6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004eca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed2:	4f                   	dec    edi
c0004ed3:	e8 92 d2 ff ff       	call   c000216a <move_window>
c0004ed8:	89 c5                	mov    ebp,eax
c0004eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ede:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee1:	eb 27                	jmp    c0004f0a <f_open+0x25f>
c0004ee3:	85 ed                	test   ebp,ebp
c0004ee5:	0f 85 d9 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004eeb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004eef:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef4:	a8 10                	test   al,0x10
c0004ef6:	0f 85 c8 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004efc:	83 e7 02             	and    edi,0x2
c0004eff:	74 11                	je     c0004f12 <f_open+0x267>
c0004f01:	bd 07 00 00 00       	mov    ebp,0x7
c0004f06:	a8 01                	test   al,0x1
c0004f08:	eb 02                	jmp    c0004f0c <f_open+0x261>
c0004f0a:	85 ed                	test   ebp,ebp
c0004f0c:	0f 85 b2 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004f12:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f18:	74 03                	je     c0004f1d <f_open+0x272>
c0004f1a:	83 ce 40             	or     esi,0x40
c0004f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f21:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f24:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f27:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2a:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f34:	8a 02                	mov    al,BYTE PTR [edx]
c0004f36:	3c 04                	cmp    al,0x4
c0004f38:	75 2a                	jne    c0004f64 <f_open+0x2b9>
c0004f3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f3e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f45:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f4a:	30 c0                	xor    al,al
c0004f4c:	09 c8                	or     eax,ecx
c0004f4e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f51:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f58:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5b:	89 da                	mov    edx,ebx
c0004f5d:	e8 e5 fb ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004f62:	eb 1c                	jmp    c0004f80 <f_open+0x2d5>
c0004f64:	89 fa                	mov    edx,edi
c0004f66:	e8 8b fb ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004f6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f71:	e8 2a ca ff ff       	call   c00019a0 <ld_dword>
c0004f76:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8b:	89 03                	mov    DWORD PTR [ebx],eax
c0004f8d:	31 d2                	xor    edx,edx
c0004f8f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f93:	b9 00 02 00 00       	mov    ecx,0x200
c0004f98:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004f9c:	89 f0                	mov    eax,esi
c0004f9e:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fa1:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa5:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fa8:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004faf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fbd:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fc8:	e8 5a ca ff ff       	call   c0001a27 <mem_set>
c0004fcd:	83 e6 20             	and    esi,0x20
c0004fd0:	75 07                	jne    c0004fd9 <f_open+0x32e>
c0004fd2:	31 ed                	xor    ebp,ebp
c0004fd4:	e9 eb 00 00 00       	jmp    c00050c4 <f_open+0x419>
c0004fd9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fdc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004feb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004fef:	74 e1                	je     c0004fd2 <f_open+0x327>
c0004ff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ff9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0004ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005006:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500a:	c1 e5 09             	shl    ebp,0x9
c000500d:	31 ff                	xor    edi,edi
c000500f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005013:	89 f8                	mov    eax,edi
c0005015:	89 ee                	mov    esi,ebp
c0005017:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501b:	73 22                	jae    c000503f <f_open+0x394>
c000501d:	89 d8                	mov    eax,ebx
c000501f:	e8 c8 dc ff ff       	call   c0002cec <get_fat>
c0005024:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005028:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000502c:	89 c2                	mov    edx,eax
c000502e:	83 f8 01             	cmp    eax,0x1
c0005031:	76 10                	jbe    c0005043 <f_open+0x398>
c0005033:	83 f8 ff             	cmp    eax,0xffffffff
c0005036:	75 d5                	jne    c000500d <f_open+0x362>
c0005038:	bd 01 00 00 00       	mov    ebp,0x1
c000503d:	eb 09                	jmp    c0005048 <f_open+0x39d>
c000503f:	31 ed                	xor    ebp,ebp
c0005041:	eb 05                	jmp    c0005048 <f_open+0x39d>
c0005043:	bd 02 00 00 00       	mov    ebp,0x2
c0005048:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504b:	85 ed                	test   ebp,ebp
c000504d:	75 75                	jne    c00050c4 <f_open+0x419>
c000504f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005053:	25 ff 01 00 00       	and    eax,0x1ff
c0005058:	0f 84 74 ff ff ff    	je     c0004fd2 <f_open+0x327>
c000505e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005062:	bd 02 00 00 00       	mov    ebp,0x2
c0005067:	89 c8                	mov    eax,ecx
c0005069:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000506d:	e8 ba cb ff ff       	call   c0001c2c <clst2sect>
c0005072:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005076:	89 d7                	mov    edi,edx
c0005078:	09 c7                	or     edi,eax
c000507a:	74 48                	je     c00050c4 <f_open+0x419>
c000507c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005080:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005084:	0f ac fe 09          	shrd   esi,edi,0x9
c0005088:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000508c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005094:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005098:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000509c:	83 ec 0c             	sub    esp,0xc
c000509f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050a2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a5:	6a 01                	push   0x1
c00050a7:	52                   	push   edx
c00050a8:	50                   	push   eax
c00050a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b1:	50                   	push   eax
c00050b2:	e8 91 c8 ff ff       	call   c0001948 <disk_read>
c00050b7:	83 c4 20             	add    esp,0x20
c00050ba:	85 c0                	test   eax,eax
c00050bc:	0f 95 c0             	setne  al
c00050bf:	0f b6 c0             	movzx  eax,al
c00050c2:	89 c5                	mov    ebp,eax
c00050c4:	83 ec 0c             	sub    esp,0xc
c00050c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cb:	e8 bf 30 00 00       	call   c000818f <ff_memfree>
c00050d0:	83 c4 10             	add    esp,0x10
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	74 06                	je     c00050dd <f_open+0x432>
c00050d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050dd:	83 c4 7c             	add    esp,0x7c
c00050e0:	89 e8                	mov    eax,ebp
c00050e2:	5b                   	pop    ebx
c00050e3:	5e                   	pop    esi
c00050e4:	5f                   	pop    edi
c00050e5:	5d                   	pop    ebp
c00050e6:	c3                   	ret    

c00050e7 <f_read>:
c00050e7:	55                   	push   ebp
c00050e8:	57                   	push   edi
c00050e9:	56                   	push   esi
c00050ea:	53                   	push   ebx
c00050eb:	83 ec 2c             	sub    esp,0x2c
c00050ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050f6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	89 d8                	mov    eax,ebx
c0005102:	e8 88 cf ff ff       	call   c000208f <validate>
c0005107:	89 c5                	mov    ebp,eax
c0005109:	85 c0                	test   eax,eax
c000510b:	0f 85 4c 02 00 00    	jne    c000535d <f_read+0x276>
c0005111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005115:	85 ed                	test   ebp,ebp
c0005117:	0f 85 40 02 00 00    	jne    c000535d <f_read+0x276>
c000511d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005121:	0f 84 31 02 00 00    	je     c0005358 <f_read+0x271>
c0005127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000512d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005130:	bf 00 00 00 00       	mov    edi,0x0
c0005135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000513c:	89 d1                	mov    ecx,edx
c000513e:	19 f9                	sbb    ecx,edi
c0005140:	0f 83 cf 00 00 00    	jae    c0005215 <f_read+0x12e>
c0005146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514a:	e9 c6 00 00 00       	jmp    c0005215 <f_read+0x12e>
c000514f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005152:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005155:	89 d0                	mov    eax,edx
c0005157:	25 ff 01 00 00       	and    eax,0x1ff
c000515c:	0f 85 c9 01 00 00    	jne    c000532b <f_read+0x244>
c0005162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005166:	89 d6                	mov    esi,edx
c0005168:	89 cf                	mov    edi,ecx
c000516a:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000516e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005172:	48                   	dec    eax
c0005173:	21 f0                	and    eax,esi
c0005175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005179:	0f 84 a6 00 00 00    	je     c0005225 <f_read+0x13e>
c000517f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005183:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005186:	89 c8                	mov    eax,ecx
c0005188:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518b:	e8 9c ca ff ff       	call   c0001c2c <clst2sect>
c0005190:	89 d7                	mov    edi,edx
c0005192:	09 c7                	or     edi,eax
c0005194:	0f 84 b4 00 00 00    	je     c000524e <f_read+0x167>
c000519a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000519e:	31 ff                	xor    edi,edi
c00051a0:	01 c6                	add    esi,eax
c00051a2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a5:	11 d7                	adc    edi,edx
c00051a7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051af:	0f 86 fd 00 00 00    	jbe    c00052b2 <f_read+0x1cb>
c00051b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051bd:	c1 e8 09             	shr    eax,0x9
c00051c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c3:	03 14 24             	add    edx,DWORD PTR [esp]
c00051c6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051ca:	39 c2                	cmp    edx,eax
c00051cc:	76 07                	jbe    c00051d5 <f_read+0xee>
c00051ce:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d5:	83 ec 0c             	sub    esp,0xc
c00051d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051dc:	57                   	push   edi
c00051dd:	56                   	push   esi
c00051de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051e6:	50                   	push   eax
c00051e7:	e8 5c c7 ff ff       	call   c0001948 <disk_read>
c00051ec:	83 c4 20             	add    esp,0x20
c00051ef:	85 c0                	test   eax,eax
c00051f1:	75 6e                	jne    c0005261 <f_read+0x17a>
c00051f3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051f7:	78 7e                	js     c0005277 <f_read+0x190>
c00051f9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00051fc:	c1 e6 09             	shl    esi,0x9
c00051ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	01 30                	add    DWORD PTR [eax],esi
c000520b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000520f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005212:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521a:	0f 85 2f ff ff ff    	jne    c000514f <f_read+0x68>
c0005220:	e9 38 01 00 00       	jmp    c000535d <f_read+0x276>
c0005225:	89 c8                	mov    eax,ecx
c0005227:	09 d0                	or     eax,edx
c0005229:	75 05                	jne    c0005230 <f_read+0x149>
c000522b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000522e:	eb 19                	jmp    c0005249 <f_read+0x162>
c0005230:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005234:	74 09                	je     c000523f <f_read+0x158>
c0005236:	89 d8                	mov    eax,ebx
c0005238:	e8 10 ca ff ff       	call   c0001c4d <clmt_clust>
c000523d:	eb 0a                	jmp    c0005249 <f_read+0x162>
c000523f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005242:	89 d8                	mov    eax,ebx
c0005244:	e8 a3 da ff ff       	call   c0002cec <get_fat>
c0005249:	83 f8 01             	cmp    eax,0x1
c000524c:	77 0e                	ja     c000525c <f_read+0x175>
c000524e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	e9 01 01 00 00       	jmp    c000535d <f_read+0x276>
c000525c:	83 f8 ff             	cmp    eax,0xffffffff
c000525f:	75 0e                	jne    c000526f <f_read+0x188>
c0005261:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005265:	bd 01 00 00 00       	mov    ebp,0x1
c000526a:	e9 ee 00 00 00       	jmp    c000535d <f_read+0x276>
c000526f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005272:	e9 08 ff ff ff       	jmp    c000517f <f_read+0x98>
c0005277:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000527d:	29 f0                	sub    eax,esi
c000527f:	19 fa                	sbb    edx,edi
c0005281:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005284:	89 d7                	mov    edi,edx
c0005286:	ba 00 00 00 00       	mov    edx,0x0
c000528b:	89 f9                	mov    ecx,edi
c000528d:	19 d1                	sbb    ecx,edx
c000528f:	0f 83 64 ff ff ff    	jae    c00051f9 <f_read+0x112>
c0005295:	89 c7                	mov    edi,eax
c0005297:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000529b:	c1 e7 09             	shl    edi,0x9
c000529e:	8d 53 50             	lea    edx,[ebx+0x50]
c00052a1:	01 f8                	add    eax,edi
c00052a3:	b9 00 02 00 00       	mov    ecx,0x200
c00052a8:	e8 65 c7 ff ff       	call   c0001a12 <mem_cpy>
c00052ad:	e9 47 ff ff ff       	jmp    c00051f9 <f_read+0x112>
c00052b2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c3:	75 05                	jne    c00052ca <f_read+0x1e3>
c00052c5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052c8:	74 5b                	je     c0005325 <f_read+0x23e>
c00052ca:	8d 43 50             	lea    eax,[ebx+0x50]
c00052cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	79 2a                	jns    c0005301 <f_read+0x21a>
c00052d7:	83 ec 0c             	sub    esp,0xc
c00052da:	6a 01                	push   0x1
c00052dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052e8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ec:	50                   	push   eax
c00052ed:	e8 6c c6 ff ff       	call   c000195e <disk_write>
c00052f2:	83 c4 20             	add    esp,0x20
c00052f5:	85 c0                	test   eax,eax
c00052f7:	0f 85 64 ff ff ff    	jne    c0005261 <f_read+0x17a>
c00052fd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005301:	83 ec 0c             	sub    esp,0xc
c0005304:	6a 01                	push   0x1
c0005306:	57                   	push   edi
c0005307:	56                   	push   esi
c0005308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000530c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005310:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005314:	50                   	push   eax
c0005315:	e8 2e c6 ff ff       	call   c0001948 <disk_read>
c000531a:	83 c4 20             	add    esp,0x20
c000531d:	85 c0                	test   eax,eax
c000531f:	0f 85 3c ff ff ff    	jne    c0005261 <f_read+0x17a>
c0005325:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005328:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000532e:	ba 00 02 00 00       	mov    edx,0x200
c0005333:	25 ff 01 00 00       	and    eax,0x1ff
c0005338:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000533c:	29 c2                	sub    edx,eax
c000533e:	39 d6                	cmp    esi,edx
c0005340:	76 02                	jbe    c0005344 <f_read+0x25d>
c0005342:	89 d6                	mov    esi,edx
c0005344:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005348:	89 f1                	mov    ecx,esi
c000534a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534e:	e8 bf c6 ff ff       	call   c0001a12 <mem_cpy>
c0005353:	e9 a7 fe ff ff       	jmp    c00051ff <f_read+0x118>
c0005358:	bd 07 00 00 00       	mov    ebp,0x7
c000535d:	83 c4 2c             	add    esp,0x2c
c0005360:	89 e8                	mov    eax,ebp
c0005362:	5b                   	pop    ebx
c0005363:	5e                   	pop    esi
c0005364:	5f                   	pop    edi
c0005365:	5d                   	pop    ebp
c0005366:	c3                   	ret    

c0005367 <f_write>:
c0005367:	55                   	push   ebp
c0005368:	57                   	push   edi
c0005369:	56                   	push   esi
c000536a:	53                   	push   ebx
c000536b:	83 ec 2c             	sub    esp,0x2c
c000536e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005372:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005376:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	89 d8                	mov    eax,ebx
c0005382:	e8 08 cd ff ff       	call   c000208f <validate>
c0005387:	89 c5                	mov    ebp,eax
c0005389:	85 c0                	test   eax,eax
c000538b:	0f 85 86 02 00 00    	jne    c0005617 <f_write+0x2b0>
c0005391:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005395:	85 ed                	test   ebp,ebp
c0005397:	0f 85 7a 02 00 00    	jne    c0005617 <f_write+0x2b0>
c000539d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a1:	0f 84 6b 02 00 00    	je     c0005612 <f_write+0x2ab>
c00053a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053ab:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053ae:	0f 84 43 01 00 00    	je     c00054f7 <f_write+0x190>
c00053b4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b7:	89 c1                	mov    ecx,eax
c00053b9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053bd:	0f 83 34 01 00 00    	jae    c00054f7 <f_write+0x190>
c00053c3:	f7 d0                	not    eax
c00053c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053c9:	e9 29 01 00 00       	jmp    c00054f7 <f_write+0x190>
c00053ce:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d4:	89 d0                	mov    eax,edx
c00053d6:	25 ff 01 00 00       	and    eax,0x1ff
c00053db:	0f 85 00 02 00 00    	jne    c00055e1 <f_write+0x27a>
c00053e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e5:	89 d6                	mov    esi,edx
c00053e7:	89 cf                	mov    edi,ecx
c00053e9:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ed:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f1:	48                   	dec    eax
c00053f2:	21 f0                	and    eax,esi
c00053f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053f8:	0f 84 06 01 00 00    	je     c0005504 <f_write+0x19d>
c00053fe:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005402:	0f 88 6e 01 00 00    	js     c0005576 <f_write+0x20f>
c0005408:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000540c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000540f:	89 c8                	mov    eax,ecx
c0005411:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005415:	e8 12 c8 ff ff       	call   c0001c2c <clst2sect>
c000541a:	89 d1                	mov    ecx,edx
c000541c:	09 c1                	or     ecx,eax
c000541e:	0f 84 1c 01 00 00    	je     c0005540 <f_write+0x1d9>
c0005424:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005428:	31 ff                	xor    edi,edi
c000542a:	01 c6                	add    esi,eax
c000542c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005430:	11 d7                	adc    edi,edx
c0005432:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543a:	0f 86 63 01 00 00    	jbe    c00055a3 <f_write+0x23c>
c0005440:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005444:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005448:	c1 e8 09             	shr    eax,0x9
c000544b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000544f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	39 c2                	cmp    edx,eax
c0005459:	76 08                	jbe    c0005463 <f_write+0xfc>
c000545b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000545f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005463:	83 ec 0c             	sub    esp,0xc
c0005466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546a:	57                   	push   edi
c000546b:	56                   	push   esi
c000546c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005470:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005474:	50                   	push   eax
c0005475:	e8 e4 c4 ff ff       	call   c000195e <disk_write>
c000547a:	83 c4 20             	add    esp,0x20
c000547d:	85 c0                	test   eax,eax
c000547f:	0f 85 ce 00 00 00    	jne    c0005553 <f_write+0x1ec>
c0005485:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005488:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548b:	29 f0                	sub    eax,esi
c000548d:	19 fa                	sbb    edx,edi
c000548f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005493:	89 d7                	mov    edi,edx
c0005495:	ba 00 00 00 00       	mov    edx,0x0
c000549a:	89 f9                	mov    ecx,edi
c000549c:	19 d1                	sbb    ecx,edx
c000549e:	73 1c                	jae    c00054bc <f_write+0x155>
c00054a0:	89 c7                	mov    edi,eax
c00054a2:	b9 00 02 00 00       	mov    ecx,0x200
c00054a7:	c1 e7 09             	shl    edi,0x9
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b1:	89 fa                	mov    edx,edi
c00054b3:	e8 5a c5 ff ff       	call   c0001a12 <mem_cpy>
c00054b8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054bc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c0:	c1 e6 09             	shl    esi,0x9
c00054c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054d6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054dc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054df:	89 c1                	mov    ecx,eax
c00054e1:	39 f2                	cmp    edx,esi
c00054e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054e6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054e9:	19 f9                	sbb    ecx,edi
c00054eb:	73 04                	jae    c00054f1 <f_write+0x18a>
c00054ed:	89 f2                	mov    edx,esi
c00054ef:	89 f8                	mov    eax,edi
c00054f1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054f7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054fc:	0f 85 cc fe ff ff    	jne    c00053ce <f_write+0x67>
c0005502:	eb 2e                	jmp    c0005532 <f_write+0x1cb>
c0005504:	89 c8                	mov    eax,ecx
c0005506:	09 d0                	or     eax,edx
c0005508:	75 0b                	jne    c0005515 <f_write+0x1ae>
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	31 d2                	xor    edx,edx
c000550f:	85 c0                	test   eax,eax
c0005511:	75 28                	jne    c000553b <f_write+0x1d4>
c0005513:	eb 12                	jmp    c0005527 <f_write+0x1c0>
c0005515:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005519:	74 09                	je     c0005524 <f_write+0x1bd>
c000551b:	89 d8                	mov    eax,ebx
c000551d:	e8 2b c7 ff ff       	call   c0001c4d <clmt_clust>
c0005522:	eb 0a                	jmp    c000552e <f_write+0x1c7>
c0005524:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005527:	89 d8                	mov    eax,ebx
c0005529:	e8 ac da ff ff       	call   c0002fda <create_chain>
c000552e:	85 c0                	test   eax,eax
c0005530:	75 09                	jne    c000553b <f_write+0x1d4>
c0005532:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005536:	e9 dc 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c000553b:	83 f8 01             	cmp    eax,0x1
c000553e:	75 0e                	jne    c000554e <f_write+0x1e7>
c0005540:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005544:	bd 02 00 00 00       	mov    ebp,0x2
c0005549:	e9 c9 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c000554e:	83 f8 ff             	cmp    eax,0xffffffff
c0005551:	75 0e                	jne    c0005561 <f_write+0x1fa>
c0005553:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005557:	bd 01 00 00 00       	mov    ebp,0x1
c000555c:	e9 b6 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c0005561:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005564:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005568:	0f 85 90 fe ff ff    	jne    c00053fe <f_write+0x97>
c000556e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005571:	e9 88 fe ff ff       	jmp    c00053fe <f_write+0x97>
c0005576:	83 ec 0c             	sub    esp,0xc
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	6a 01                	push   0x1
c000557e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005581:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005584:	50                   	push   eax
c0005585:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005589:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000558d:	50                   	push   eax
c000558e:	e8 cb c3 ff ff       	call   c000195e <disk_write>
c0005593:	83 c4 20             	add    esp,0x20
c0005596:	85 c0                	test   eax,eax
c0005598:	75 b9                	jne    c0005553 <f_write+0x1ec>
c000559a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000559e:	e9 65 fe ff ff       	jmp    c0005408 <f_write+0xa1>
c00055a3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055a6:	75 05                	jne    c00055ad <f_write+0x246>
c00055a8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055ab:	74 2e                	je     c00055db <f_write+0x274>
c00055ad:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055b6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055b9:	73 20                	jae    c00055db <f_write+0x274>
c00055bb:	83 ec 0c             	sub    esp,0xc
c00055be:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c1:	6a 01                	push   0x1
c00055c3:	57                   	push   edi
c00055c4:	56                   	push   esi
c00055c5:	50                   	push   eax
c00055c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ca:	50                   	push   eax
c00055cb:	e8 78 c3 ff ff       	call   c0001948 <disk_read>
c00055d0:	83 c4 20             	add    esp,0x20
c00055d3:	85 c0                	test   eax,eax
c00055d5:	0f 85 78 ff ff ff    	jne    c0005553 <f_write+0x1ec>
c00055db:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055de:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e4:	ba 00 02 00 00       	mov    edx,0x200
c00055e9:	25 ff 01 00 00       	and    eax,0x1ff
c00055ee:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f2:	29 c2                	sub    edx,eax
c00055f4:	39 d6                	cmp    esi,edx
c00055f6:	76 02                	jbe    c00055fa <f_write+0x293>
c00055f8:	89 d6                	mov    esi,edx
c00055fa:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00055fe:	89 f1                	mov    ecx,esi
c0005600:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005604:	e8 09 c4 ff ff       	call   c0001a12 <mem_cpy>
c0005609:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000560d:	e9 b1 fe ff ff       	jmp    c00054c3 <f_write+0x15c>
c0005612:	bd 07 00 00 00       	mov    ebp,0x7
c0005617:	83 c4 2c             	add    esp,0x2c
c000561a:	89 e8                	mov    eax,ebp
c000561c:	5b                   	pop    ebx
c000561d:	5e                   	pop    esi
c000561e:	5f                   	pop    edi
c000561f:	5d                   	pop    ebp
c0005620:	c3                   	ret    

c0005621 <f_sync>:
c0005621:	56                   	push   esi
c0005622:	53                   	push   ebx
c0005623:	83 ec 64             	sub    esp,0x64
c0005626:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000562e:	89 d8                	mov    eax,ebx
c0005630:	e8 5a ca ff ff       	call   c000208f <validate>
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 ba 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000563d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005640:	f6 c2 40             	test   dl,0x40
c0005643:	0f 84 ae 01 00 00    	je     c00057f7 <f_sync+0x1d6>
c0005649:	84 d2                	test   dl,dl
c000564b:	79 33                	jns    c0005680 <f_sync+0x5f>
c000564d:	83 ec 0c             	sub    esp,0xc
c0005650:	8d 43 50             	lea    eax,[ebx+0x50]
c0005653:	6a 01                	push   0x1
c0005655:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005658:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565b:	50                   	push   eax
c000565c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005660:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 f4 c2 ff ff       	call   c000195e <disk_write>
c000566a:	89 c2                	mov    edx,eax
c000566c:	83 c4 20             	add    esp,0x20
c000566f:	b8 01 00 00 00       	mov    eax,0x1
c0005674:	85 d2                	test   edx,edx
c0005676:	0f 85 7b 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000567c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005684:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005687:	0f 85 11 01 00 00    	jne    c000579e <f_sync+0x17d>
c000568d:	89 d8                	mov    eax,ebx
c000568f:	e8 1e d6 ff ff       	call   c0002cb2 <fill_first_frag>
c0005694:	85 c0                	test   eax,eax
c0005696:	0f 85 5b 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000569c:	83 c9 ff             	or     ecx,0xffffffff
c000569f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a2:	89 d8                	mov    eax,ebx
c00056a4:	e8 d4 d5 ff ff       	call   c0002c7d <fill_last_frag>
c00056a9:	85 c0                	test   eax,eax
c00056ab:	0f 85 46 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c00056b1:	83 ec 0c             	sub    esp,0xc
c00056b4:	68 60 04 00 00       	push   0x460
c00056b9:	e8 bb 2a 00 00       	call   c0008179 <ff_memalloc>
c00056be:	89 c6                	mov    esi,eax
c00056c0:	83 c4 10             	add    esp,0x10
c00056c3:	b8 11 00 00 00       	mov    eax,0x11
c00056c8:	85 f6                	test   esi,esi
c00056ca:	0f 84 27 01 00 00    	je     c00057f7 <f_sync+0x1d6>
c00056d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056dd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e0:	89 da                	mov    edx,ebx
c00056e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056e6:	e8 bc df ff ff       	call   c00036a7 <load_obj_xdir>
c00056eb:	85 c0                	test   eax,eax
c00056ed:	0f 85 95 00 00 00    	jne    c0005788 <f_sync+0x167>
c00056f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fa:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00056fe:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005701:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005704:	83 ca 01             	or     edx,0x1
c0005707:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000570d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005710:	83 c0 34             	add    eax,0x34
c0005713:	e8 f1 c2 ff ff       	call   c0001a09 <st_dword>
c0005718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000571f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005722:	83 c0 38             	add    eax,0x38
c0005725:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005728:	e8 df c2 ff ff       	call   c0001a0c <st_qword>
c000572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005731:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005734:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005737:	83 c0 28             	add    eax,0x28
c000573a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573d:	e8 ca c2 ff ff       	call   c0001a0c <st_qword>
c0005742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005746:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005749:	ba 00 00 21 50       	mov    edx,0x50210000
c000574e:	83 c0 0c             	add    eax,0xc
c0005751:	e8 b3 c2 ff ff       	call   c0001a09 <st_dword>
c0005756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000575d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005761:	31 d2                	xor    edx,edx
c0005763:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005766:	83 c0 10             	add    eax,0x10
c0005769:	e8 9b c2 ff ff       	call   c0001a09 <st_dword>
c000576e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005772:	e8 6f e1 ff ff       	call   c00038e6 <store_xdir>
c0005777:	85 c0                	test   eax,eax
c0005779:	75 0d                	jne    c0005788 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	e8 f4 ea ff ff       	call   c0004278 <sync_fs>
c0005784:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000578c:	83 ec 0c             	sub    esp,0xc
c000578f:	56                   	push   esi
c0005790:	e8 fa 29 00 00       	call   c000818f <ff_memfree>
c0005795:	83 c4 10             	add    esp,0x10
c0005798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000579c:	eb 59                	jmp    c00057f7 <f_sync+0x1d6>
c000579e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a4:	e8 c1 c9 ff ff       	call   c000216a <move_window>
c00057a9:	85 c0                	test   eax,eax
c00057ab:	75 4a                	jne    c00057f7 <f_sync+0x1d6>
c00057ad:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b0:	89 f2                	mov    edx,esi
c00057b2:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bb:	e8 5f f3 ff ff       	call   c0004b1f <st_clust.isra.1>
c00057c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057c6:	e8 3e c2 ff ff       	call   c0001a09 <st_dword>
c00057cb:	8d 46 16             	lea    eax,[esi+0x16]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	e8 31 c2 ff ff       	call   c0001a09 <st_dword>
c00057d8:	8d 46 12             	lea    eax,[esi+0x12]
c00057db:	31 d2                	xor    edx,edx
c00057dd:	e8 23 c2 ff ff       	call   c0001a05 <st_word>
c00057e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ee:	e8 85 ea ff ff       	call   c0004278 <sync_fs>
c00057f3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057f7:	83 c4 64             	add    esp,0x64
c00057fa:	5b                   	pop    ebx
c00057fb:	5e                   	pop    esi
c00057fc:	c3                   	ret    

c00057fd <f_close>:
c00057fd:	53                   	push   ebx
c00057fe:	83 ec 24             	sub    esp,0x24
c0005801:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005805:	53                   	push   ebx
c0005806:	e8 16 fe ff ff       	call   c0005621 <f_sync>
c000580b:	83 c4 10             	add    esp,0x10
c000580e:	85 c0                	test   eax,eax
c0005810:	75 15                	jne    c0005827 <f_close+0x2a>
c0005812:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005816:	89 d8                	mov    eax,ebx
c0005818:	e8 72 c8 ff ff       	call   c000208f <validate>
c000581d:	85 c0                	test   eax,eax
c000581f:	75 06                	jne    c0005827 <f_close+0x2a>
c0005821:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005827:	83 c4 18             	add    esp,0x18
c000582a:	5b                   	pop    ebx
c000582b:	c3                   	ret    

c000582c <f_lseek>:
c000582c:	55                   	push   ebp
c000582d:	57                   	push   edi
c000582e:	56                   	push   esi
c000582f:	53                   	push   ebx
c0005830:	83 ec 3c             	sub    esp,0x3c
c0005833:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005837:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000583f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005842:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005846:	89 d8                	mov    eax,ebx
c0005848:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000584c:	e8 3e c8 ff ff       	call   c000208f <validate>
c0005851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005855:	85 c0                	test   eax,eax
c0005857:	0f 85 28 04 00 00    	jne    c0005c85 <f_lseek+0x459>
c000585d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005865:	85 c0                	test   eax,eax
c0005867:	0f 85 18 04 00 00    	jne    c0005c85 <f_lseek+0x459>
c000586d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005871:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005874:	74 0c                	je     c0005882 <f_lseek+0x56>
c0005876:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005879:	85 c0                	test   eax,eax
c000587b:	75 1f                	jne    c000589c <f_lseek+0x70>
c000587d:	e9 8b 01 00 00       	jmp    c0005a0d <f_lseek+0x1e1>
c0005882:	83 c9 ff             	or     ecx,0xffffffff
c0005885:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005888:	89 d8                	mov    eax,ebx
c000588a:	e8 ee d3 ff ff       	call   c0002c7d <fill_last_frag>
c000588f:	85 c0                	test   eax,eax
c0005891:	74 e3                	je     c0005876 <f_lseek+0x4a>
c0005893:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005897:	e9 e9 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c000589c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a1:	0f 85 ac 00 00 00    	jne    c0005953 <f_lseek+0x127>
c00058a7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058ab:	0f 85 a2 00 00 00    	jne    c0005953 <f_lseek+0x127>
c00058b1:	8d 78 04             	lea    edi,[eax+0x4]
c00058b4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00058b9:	be 02 00 00 00       	mov    esi,0x2
c00058be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058c2:	85 ed                	test   ebp,ebp
c00058c4:	74 73                	je     c0005939 <f_lseek+0x10d>
c00058c6:	89 e9                	mov    ecx,ebp
c00058c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058cf:	89 ca                	mov    edx,ecx
c00058d1:	89 d8                	mov    eax,ebx
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058da:	e8 0d d4 ff ff       	call   c0002cec <get_fat>
c00058df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e3:	83 f8 01             	cmp    eax,0x1
c00058e6:	77 11                	ja     c00058f9 <f_lseek+0xcd>
c00058e8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ec:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00058f4:	e9 8c 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c00058f9:	83 f8 ff             	cmp    eax,0xffffffff
c00058fc:	75 11                	jne    c000590f <f_lseek+0xe3>
c00058fe:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005902:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000590a:	e9 76 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c000590f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005912:	89 c1                	mov    ecx,eax
c0005914:	39 c2                	cmp    edx,eax
c0005916:	74 b7                	je     c00058cf <f_lseek+0xa3>
c0005918:	83 c6 02             	add    esi,0x2
c000591b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c000591f:	72 0b                	jb     c000592c <f_lseek+0x100>
c0005921:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005924:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005927:	89 0f                	mov    DWORD PTR [edi],ecx
c0005929:	83 c7 08             	add    edi,0x8
c000592c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005930:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005933:	76 04                	jbe    c0005939 <f_lseek+0x10d>
c0005935:	89 c5                	mov    ebp,eax
c0005937:	eb 8d                	jmp    c00058c6 <f_lseek+0x9a>
c0005939:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593c:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c0005940:	89 30                	mov    DWORD PTR [eax],esi
c0005942:	0f 87 35 03 00 00    	ja     c0005c7d <f_lseek+0x451>
c0005948:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c000594e:	e9 32 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c0005953:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005956:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005959:	39 34 24             	cmp    DWORD PTR [esp],esi
c000595c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005960:	19 f8                	sbb    eax,edi
c0005962:	73 07                	jae    c000596b <f_lseek+0x13f>
c0005964:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005967:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000596b:	89 f8                	mov    eax,edi
c000596d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005970:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005973:	09 f0                	or     eax,esi
c0005975:	0f 84 0a 03 00 00    	je     c0005c85 <f_lseek+0x459>
c000597b:	89 f0                	mov    eax,esi
c000597d:	89 fa                	mov    edx,edi
c000597f:	83 c0 ff             	add    eax,0xffffffff
c0005982:	83 d2 ff             	adc    edx,0xffffffff
c0005985:	89 04 24             	mov    DWORD PTR [esp],eax
c0005988:	89 d1                	mov    ecx,edx
c000598a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000598e:	89 c2                	mov    edx,eax
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 b6 c2 ff ff       	call   c0001c4d <clmt_clust>
c0005997:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000599b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000599e:	89 c2                	mov    edx,eax
c00059a0:	89 c8                	mov    eax,ecx
c00059a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00059a6:	e8 81 c2 ff ff       	call   c0001c2c <clst2sect>
c00059ab:	89 d1                	mov    ecx,edx
c00059ad:	09 c1                	or     ecx,eax
c00059af:	0f 84 33 ff ff ff    	je     c00058e8 <f_lseek+0xbc>
c00059b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00059bb:	0f 84 c4 02 00 00    	je     c0005c85 <f_lseek+0x459>
c00059c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00059c5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059cc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059d0:	0f ac fe 09          	shrd   esi,edi,0x9
c00059d4:	4d                   	dec    ebp
c00059d5:	31 ff                	xor    edi,edi
c00059d7:	21 ee                	and    esi,ebp
c00059d9:	01 c6                	add    esi,eax
c00059db:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00059de:	11 d7                	adc    edi,edx
c00059e0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00059e3:	39 fa                	cmp    edx,edi
c00059e5:	75 08                	jne    c00059ef <f_lseek+0x1c3>
c00059e7:	39 f0                	cmp    eax,esi
c00059e9:	0f 84 96 02 00 00    	je     c0005c85 <f_lseek+0x459>
c00059ef:	8d 6b 50             	lea    ebp,[ebx+0x50]
c00059f2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00059f6:	0f 89 58 02 00 00    	jns    c0005c54 <f_lseek+0x428>
c00059fc:	83 ec 0c             	sub    esp,0xc
c00059ff:	6a 01                	push   0x1
c0005a01:	52                   	push   edx
c0005a02:	50                   	push   eax
c0005a03:	55                   	push   ebp
c0005a04:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a08:	e9 32 02 00 00       	jmp    c0005c3f <f_lseek+0x413>
c0005a0d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a11:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a14:	74 16                	je     c0005a2c <f_lseek+0x200>
c0005a16:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a1b:	76 0f                	jbe    c0005a2c <f_lseek+0x200>
c0005a1d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a24:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a32:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a35:	89 c7                	mov    edi,eax
c0005a37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a3b:	73 0d                	jae    c0005a4a <f_lseek+0x21e>
c0005a3d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a41:	75 07                	jne    c0005a4a <f_lseek+0x21e>
c0005a43:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a54:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a5b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a62:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a65:	75 09                	jne    c0005a70 <f_lseek+0x244>
c0005a67:	31 f6                	xor    esi,esi
c0005a69:	31 ff                	xor    edi,edi
c0005a6b:	e9 87 01 00 00       	jmp    c0005bf7 <f_lseek+0x3cb>
c0005a70:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005a74:	c1 e1 09             	shl    ecx,0x9
c0005a77:	89 d7                	mov    edi,edx
c0005a79:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a7d:	09 c7                	or     edi,eax
c0005a7f:	74 6b                	je     c0005aec <f_lseek+0x2c0>
c0005a81:	83 c0 ff             	add    eax,0xffffffff
c0005a84:	89 cf                	mov    edi,ecx
c0005a86:	83 d2 ff             	adc    edx,0xffffffff
c0005a89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a90:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005a94:	83 c0 ff             	add    eax,0xffffffff
c0005a97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a9b:	83 d2 ff             	adc    edx,0xffffffff
c0005a9e:	31 ed                	xor    ebp,ebp
c0005aa0:	55                   	push   ebp
c0005aa1:	51                   	push   ecx
c0005aa2:	52                   	push   edx
c0005aa3:	50                   	push   eax
c0005aa4:	e8 13 93 01 00       	call   c001edbc <__udivdi3>
c0005aa9:	83 c4 10             	add    esp,0x10
c0005aac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab0:	89 d6                	mov    esi,edx
c0005ab2:	55                   	push   ebp
c0005ab3:	57                   	push   edi
c0005ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005abc:	e8 fb 92 01 00       	call   c001edbc <__udivdi3>
c0005ac1:	83 c4 10             	add    esp,0x10
c0005ac4:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005ac8:	19 d6                	sbb    esi,edx
c0005aca:	72 20                	jb     c0005aec <f_lseek+0x2c0>
c0005acc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005ad0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ad4:	f7 d9                	neg    ecx
c0005ad6:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005ada:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005add:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ae0:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ae3:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ae7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005aea:	eb 28                	jmp    c0005b14 <f_lseek+0x2e8>
c0005aec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005aef:	85 c0                	test   eax,eax
c0005af1:	75 1e                	jne    c0005b11 <f_lseek+0x2e5>
c0005af3:	31 d2                	xor    edx,edx
c0005af5:	89 d8                	mov    eax,ebx
c0005af7:	e8 de d4 ff ff       	call   c0002fda <create_chain>
c0005afc:	83 f8 01             	cmp    eax,0x1
c0005aff:	0f 84 e3 fd ff ff    	je     c00058e8 <f_lseek+0xbc>
c0005b05:	83 f8 ff             	cmp    eax,0xffffffff
c0005b08:	0f 84 f0 fd ff ff    	je     c00058fe <f_lseek+0xd2>
c0005b0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b11:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b14:	85 c0                	test   eax,eax
c0005b16:	0f 84 4b ff ff ff    	je     c0005a67 <f_lseek+0x23b>
c0005b1c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005b20:	31 ff                	xor    edi,edi
c0005b22:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b25:	89 fd                	mov    ebp,edi
c0005b27:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005b2b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b2e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b31:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005b35:	73 7d                	jae    c0005bb4 <f_lseek+0x388>
c0005b37:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b3a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b3e:	01 d6                	add    esi,edx
c0005b40:	11 cf                	adc    edi,ecx
c0005b42:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005b45:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005b48:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005b4b:	f6 c2 02             	test   dl,0x2
c0005b4e:	74 25                	je     c0005b75 <f_lseek+0x349>
c0005b50:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005b53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005b56:	19 f9                	sbb    ecx,edi
c0005b58:	73 0c                	jae    c0005b66 <f_lseek+0x33a>
c0005b5a:	83 ca 40             	or     edx,0x40
c0005b5d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005b60:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005b63:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005b66:	89 c2                	mov    edx,eax
c0005b68:	89 d8                	mov    eax,ebx
c0005b6a:	e8 6b d4 ff ff       	call   c0002fda <create_chain>
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	75 0b                	jne    c0005b7e <f_lseek+0x352>
c0005b73:	eb 30                	jmp    c0005ba5 <f_lseek+0x379>
c0005b75:	89 c2                	mov    edx,eax
c0005b77:	89 d8                	mov    eax,ebx
c0005b79:	e8 6e d1 ff ff       	call   c0002cec <get_fat>
c0005b7e:	83 f8 ff             	cmp    eax,0xffffffff
c0005b81:	0f 84 77 fd ff ff    	je     c00058fe <f_lseek+0xd2>
c0005b87:	83 f8 01             	cmp    eax,0x1
c0005b8a:	0f 86 58 fd ff ff    	jbe    c00058e8 <f_lseek+0xbc>
c0005b90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b94:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b97:	0f 86 4b fd ff ff    	jbe    c00058e8 <f_lseek+0xbc>
c0005b9d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba0:	e9 77 ff ff ff       	jmp    c0005b1c <f_lseek+0x2f0>
c0005ba5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005bb4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005bb7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005bbb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005bbe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005bc1:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005bc4:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005bca:	0f 84 97 fe ff ff    	je     c0005a67 <f_lseek+0x23b>
c0005bd0:	89 c2                	mov    edx,eax
c0005bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005bd6:	e8 51 c0 ff ff       	call   c0001c2c <clst2sect>
c0005bdb:	89 d7                	mov    edi,edx
c0005bdd:	09 c7                	or     edi,eax
c0005bdf:	0f 84 03 fd ff ff    	je     c00058e8 <f_lseek+0xbc>
c0005be5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005be9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bec:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bf0:	c1 ef 09             	shr    edi,0x9
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	11 d7                	adc    edi,edx
c0005bf7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005bfa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005bfd:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c00:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c03:	19 d1                	sbb    ecx,edx
c0005c05:	73 0a                	jae    c0005c11 <f_lseek+0x3e5>
c0005c07:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c0b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c0e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c11:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c16:	74 6d                	je     c0005c85 <f_lseek+0x459>
c0005c18:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c1e:	39 fa                	cmp    edx,edi
c0005c20:	75 04                	jne    c0005c26 <f_lseek+0x3fa>
c0005c22:	39 f0                	cmp    eax,esi
c0005c24:	74 5f                	je     c0005c85 <f_lseek+0x459>
c0005c26:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c29:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c2d:	79 25                	jns    c0005c54 <f_lseek+0x428>
c0005c2f:	83 ec 0c             	sub    esp,0xc
c0005c32:	6a 01                	push   0x1
c0005c34:	52                   	push   edx
c0005c35:	50                   	push   eax
c0005c36:	55                   	push   ebp
c0005c37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c3b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c3f:	50                   	push   eax
c0005c40:	e8 19 bd ff ff       	call   c000195e <disk_write>
c0005c45:	83 c4 20             	add    esp,0x20
c0005c48:	85 c0                	test   eax,eax
c0005c4a:	0f 85 ae fc ff ff    	jne    c00058fe <f_lseek+0xd2>
c0005c50:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	6a 01                	push   0x1
c0005c59:	57                   	push   edi
c0005c5a:	56                   	push   esi
c0005c5b:	55                   	push   ebp
c0005c5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c60:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c64:	50                   	push   eax
c0005c65:	e8 de bc ff ff       	call   c0001948 <disk_read>
c0005c6a:	83 c4 20             	add    esp,0x20
c0005c6d:	85 c0                	test   eax,eax
c0005c6f:	0f 85 89 fc ff ff    	jne    c00058fe <f_lseek+0xd2>
c0005c75:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005c78:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005c7b:	eb 08                	jmp    c0005c85 <f_lseek+0x459>
c0005c7d:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c89:	83 c4 3c             	add    esp,0x3c
c0005c8c:	5b                   	pop    ebx
c0005c8d:	5e                   	pop    esi
c0005c8e:	5f                   	pop    edi
c0005c8f:	5d                   	pop    ebp
c0005c90:	c3                   	ret    

c0005c91 <f_opendir>:
c0005c91:	56                   	push   esi
c0005c92:	b8 09 00 00 00       	mov    eax,0x9
c0005c97:	53                   	push   ebx
c0005c98:	83 ec 24             	sub    esp,0x24
c0005c9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005c9f:	85 db                	test   ebx,ebx
c0005ca1:	0f 84 e6 00 00 00    	je     c0005d8d <f_opendir+0xfc>
c0005ca7:	31 c9                	xor    ecx,ecx
c0005ca9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005cad:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005cb1:	e8 5f c7 ff ff       	call   c0002415 <mount_volume>
c0005cb6:	85 c0                	test   eax,eax
c0005cb8:	0f 85 c9 00 00 00    	jne    c0005d87 <f_opendir+0xf6>
c0005cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cc2:	83 ec 0c             	sub    esp,0xc
c0005cc5:	89 03                	mov    DWORD PTR [ebx],eax
c0005cc7:	68 60 04 00 00       	push   0x460
c0005ccc:	e8 a8 24 00 00       	call   c0008179 <ff_memalloc>
c0005cd1:	89 c6                	mov    esi,eax
c0005cd3:	83 c4 10             	add    esp,0x10
c0005cd6:	b8 11 00 00 00       	mov    eax,0x11
c0005cdb:	85 f6                	test   esi,esi
c0005cdd:	0f 84 aa 00 00 00    	je     c0005d8d <f_opendir+0xfc>
c0005ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ce7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ced:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005cf0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005cf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 83 ee ff ff       	call   c0004b81 <follow_path>
c0005cfe:	85 c0                	test   eax,eax
c0005d00:	75 61                	jne    c0005d63 <f_opendir+0xd2>
c0005d02:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d06:	78 46                	js     c0005d4e <f_opendir+0xbd>
c0005d08:	b8 05 00 00 00       	mov    eax,0x5
c0005d0d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d11:	74 50                	je     c0005d63 <f_opendir+0xd2>
c0005d13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d17:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d19:	3c 04                	cmp    al,0x4
c0005d1b:	75 26                	jne    c0005d43 <f_opendir+0xb2>
c0005d1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d20:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d23:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d26:	30 d2                	xor    dl,dl
c0005d28:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d2c:	09 c2                	or     edx,eax
c0005d2e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d31:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d34:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d37:	89 da                	mov    edx,ebx
c0005d39:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d3c:	e8 06 ee ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0005d41:	eb 0b                	jmp    c0005d4e <f_opendir+0xbd>
c0005d43:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d46:	e8 ab ed ff ff       	call   c0004af6 <ld_clust.isra.0>
c0005d4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d52:	31 d2                	xor    edx,edx
c0005d54:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005d58:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 7f d1 ff ff       	call   c0002ee2 <dir_sdi>
c0005d63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d67:	83 ec 0c             	sub    esp,0xc
c0005d6a:	56                   	push   esi
c0005d6b:	e8 1f 24 00 00       	call   c000818f <ff_memfree>
c0005d70:	83 c4 10             	add    esp,0x10
c0005d73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d77:	83 f8 04             	cmp    eax,0x4
c0005d7a:	74 06                	je     c0005d82 <f_opendir+0xf1>
c0005d7c:	85 c0                	test   eax,eax
c0005d7e:	74 0d                	je     c0005d8d <f_opendir+0xfc>
c0005d80:	eb 05                	jmp    c0005d87 <f_opendir+0xf6>
c0005d82:	b8 05 00 00 00       	mov    eax,0x5
c0005d87:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005d8d:	83 c4 24             	add    esp,0x24
c0005d90:	5b                   	pop    ebx
c0005d91:	5e                   	pop    esi
c0005d92:	c3                   	ret    

c0005d93 <f_closedir>:
c0005d93:	53                   	push   ebx
c0005d94:	83 ec 18             	sub    esp,0x18
c0005d97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005d9b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005d9f:	89 d8                	mov    eax,ebx
c0005da1:	e8 e9 c2 ff ff       	call   c000208f <validate>
c0005da6:	85 c0                	test   eax,eax
c0005da8:	75 06                	jne    c0005db0 <f_closedir+0x1d>
c0005daa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005db0:	83 c4 18             	add    esp,0x18
c0005db3:	5b                   	pop    ebx
c0005db4:	c3                   	ret    

c0005db5 <f_readdir>:
c0005db5:	57                   	push   edi
c0005db6:	56                   	push   esi
c0005db7:	53                   	push   ebx
c0005db8:	83 ec 20             	sub    esp,0x20
c0005dbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dbf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc3:	89 d8                	mov    eax,ebx
c0005dc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005dc9:	e8 c1 c2 ff ff       	call   c000208f <validate>
c0005dce:	85 c0                	test   eax,eax
c0005dd0:	75 77                	jne    c0005e49 <f_readdir+0x94>
c0005dd2:	85 ff                	test   edi,edi
c0005dd4:	75 0b                	jne    c0005de1 <f_readdir+0x2c>
c0005dd6:	31 d2                	xor    edx,edx
c0005dd8:	89 d8                	mov    eax,ebx
c0005dda:	e8 03 d1 ff ff       	call   c0002ee2 <dir_sdi>
c0005ddf:	eb 68                	jmp    c0005e49 <f_readdir+0x94>
c0005de1:	83 ec 0c             	sub    esp,0xc
c0005de4:	68 60 04 00 00       	push   0x460
c0005de9:	e8 8b 23 00 00       	call   c0008179 <ff_memalloc>
c0005dee:	89 c6                	mov    esi,eax
c0005df0:	83 c4 10             	add    esp,0x10
c0005df3:	b8 11 00 00 00       	mov    eax,0x11
c0005df8:	85 f6                	test   esi,esi
c0005dfa:	74 4d                	je     c0005e49 <f_readdir+0x94>
c0005dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e00:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e09:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e0c:	31 d2                	xor    edx,edx
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 df d8 ff ff       	call   c00036f4 <dir_read>
c0005e15:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e1a:	75 19                	jne    c0005e35 <f_readdir+0x80>
c0005e1c:	89 fa                	mov    edx,edi
c0005e1e:	89 d8                	mov    eax,ebx
c0005e20:	e8 d0 ea ff ff       	call   c00048f5 <get_fileinfo>
c0005e25:	31 d2                	xor    edx,edx
c0005e27:	89 d8                	mov    eax,ebx
c0005e29:	e8 0e d6 ff ff       	call   c000343c <dir_next>
c0005e2e:	83 f8 04             	cmp    eax,0x4
c0005e31:	75 02                	jne    c0005e35 <f_readdir+0x80>
c0005e33:	31 c0                	xor    eax,eax
c0005e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e39:	83 ec 0c             	sub    esp,0xc
c0005e3c:	56                   	push   esi
c0005e3d:	e8 4d 23 00 00       	call   c000818f <ff_memfree>
c0005e42:	83 c4 10             	add    esp,0x10
c0005e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e49:	83 c4 20             	add    esp,0x20
c0005e4c:	5b                   	pop    ebx
c0005e4d:	5e                   	pop    esi
c0005e4e:	5f                   	pop    edi
c0005e4f:	c3                   	ret    

c0005e50 <f_stat>:
c0005e50:	57                   	push   edi
c0005e51:	31 c9                	xor    ecx,ecx
c0005e53:	56                   	push   esi
c0005e54:	53                   	push   ebx
c0005e55:	83 ec 50             	sub    esp,0x50
c0005e58:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005e5c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005e60:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005e64:	e8 ac c5 ff ff       	call   c0002415 <mount_volume>
c0005e69:	89 c3                	mov    ebx,eax
c0005e6b:	85 c0                	test   eax,eax
c0005e6d:	75 67                	jne    c0005ed6 <f_stat+0x86>
c0005e6f:	83 ec 0c             	sub    esp,0xc
c0005e72:	bb 11 00 00 00       	mov    ebx,0x11
c0005e77:	68 60 04 00 00       	push   0x460
c0005e7c:	e8 f8 22 00 00       	call   c0008179 <ff_memalloc>
c0005e81:	83 c4 10             	add    esp,0x10
c0005e84:	89 c6                	mov    esi,eax
c0005e86:	85 c0                	test   eax,eax
c0005e88:	74 4c                	je     c0005ed6 <f_stat+0x86>
c0005e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e8e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e97:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e9a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005e9e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ea2:	e8 da ec ff ff       	call   c0004b81 <follow_path>
c0005ea7:	89 c3                	mov    ebx,eax
c0005ea9:	85 c0                	test   eax,eax
c0005eab:	75 1d                	jne    c0005eca <f_stat+0x7a>
c0005ead:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005eb2:	78 11                	js     c0005ec5 <f_stat+0x75>
c0005eb4:	85 ff                	test   edi,edi
c0005eb6:	74 12                	je     c0005eca <f_stat+0x7a>
c0005eb8:	89 fa                	mov    edx,edi
c0005eba:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ebe:	e8 32 ea ff ff       	call   c00048f5 <get_fileinfo>
c0005ec3:	eb 05                	jmp    c0005eca <f_stat+0x7a>
c0005ec5:	bb 06 00 00 00       	mov    ebx,0x6
c0005eca:	83 ec 0c             	sub    esp,0xc
c0005ecd:	56                   	push   esi
c0005ece:	e8 bc 22 00 00       	call   c000818f <ff_memfree>
c0005ed3:	83 c4 10             	add    esp,0x10
c0005ed6:	83 c4 50             	add    esp,0x50
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	5b                   	pop    ebx
c0005edc:	5e                   	pop    esi
c0005edd:	5f                   	pop    edi
c0005ede:	c3                   	ret    

c0005edf <f_getfree>:
c0005edf:	55                   	push   ebp
c0005ee0:	31 c9                	xor    ecx,ecx
c0005ee2:	57                   	push   edi
c0005ee3:	56                   	push   esi
c0005ee4:	53                   	push   ebx
c0005ee5:	83 ec 5c             	sub    esp,0x5c
c0005ee8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005eec:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005ef0:	e8 20 c5 ff ff       	call   c0002415 <mount_volume>
c0005ef5:	89 c5                	mov    ebp,eax
c0005ef7:	85 c0                	test   eax,eax
c0005ef9:	0f 85 be 01 00 00    	jne    c00060bd <f_getfree+0x1de>
c0005eff:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f07:	89 02                	mov    DWORD PTR [edx],eax
c0005f09:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005f0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005f13:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005f16:	39 f2                	cmp    edx,esi
c0005f18:	77 0b                	ja     c0005f25 <f_getfree+0x46>
c0005f1a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f1e:	89 10                	mov    DWORD PTR [eax],edx
c0005f20:	e9 98 01 00 00       	jmp    c00060bd <f_getfree+0x1de>
c0005f25:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f27:	80 fa 01             	cmp    dl,0x1
c0005f2a:	75 3a                	jne    c0005f66 <f_getfree+0x87>
c0005f2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f30:	be 02 00 00 00       	mov    esi,0x2
c0005f35:	31 db                	xor    ebx,ebx
c0005f37:	89 f2                	mov    edx,esi
c0005f39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f3d:	e8 aa cd ff ff       	call   c0002cec <get_fat>
c0005f42:	83 f8 ff             	cmp    eax,0xffffffff
c0005f45:	0f 84 51 01 00 00    	je     c000609c <f_getfree+0x1bd>
c0005f4b:	83 f8 01             	cmp    eax,0x1
c0005f4e:	0f 84 4f 01 00 00    	je     c00060a3 <f_getfree+0x1c4>
c0005f54:	83 d3 00             	adc    ebx,0x0
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	46                   	inc    esi
c0005f5c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005f5f:	77 d6                	ja     c0005f37 <f_getfree+0x58>
c0005f61:	e9 46 01 00 00       	jmp    c00060ac <f_getfree+0x1cd>
c0005f66:	80 fa 04             	cmp    dl,0x4
c0005f69:	0f 85 94 00 00 00    	jne    c0006003 <f_getfree+0x124>
c0005f6f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005f72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f7d:	31 ff                	xor    edi,edi
c0005f7f:	31 db                	xor    ebx,ebx
c0005f81:	85 ff                	test   edi,edi
c0005f83:	75 3f                	jne    c0005fc4 <f_getfree+0xe5>
c0005f85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f8d:	83 c0 01             	add    eax,0x1
c0005f90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f94:	83 d2 00             	adc    edx,0x0
c0005f97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005f9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005f9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005fa7:	e8 be c1 ff ff       	call   c000216a <move_window>
c0005fac:	85 c0                	test   eax,eax
c0005fae:	0f 85 f6 00 00 00    	jne    c00060aa <f_getfree+0x1cb>
c0005fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005fc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc8:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0005fcc:	88 c2                	mov    dl,al
c0005fce:	b8 08 00 00 00       	mov    eax,0x8
c0005fd3:	29 f0                	sub    eax,esi
c0005fd5:	89 c1                	mov    ecx,eax
c0005fd7:	01 f1                	add    ecx,esi
c0005fd9:	74 18                	je     c0005ff3 <f_getfree+0x114>
c0005fdb:	85 f6                	test   esi,esi
c0005fdd:	74 14                	je     c0005ff3 <f_getfree+0x114>
c0005fdf:	88 d1                	mov    cl,dl
c0005fe1:	83 e1 01             	and    ecx,0x1
c0005fe4:	80 f9 01             	cmp    cl,0x1
c0005fe7:	88 d1                	mov    cl,dl
c0005fe9:	83 d3 00             	adc    ebx,0x0
c0005fec:	4e                   	dec    esi
c0005fed:	d0 e9                	shr    cl,1
c0005fef:	88 ca                	mov    dl,cl
c0005ff1:	eb e2                	jmp    c0005fd5 <f_getfree+0xf6>
c0005ff3:	47                   	inc    edi
c0005ff4:	81 e7 ff 01 00 00    	and    edi,0x1ff
c0005ffa:	85 f6                	test   esi,esi
c0005ffc:	75 83                	jne    c0005f81 <f_getfree+0xa2>
c0005ffe:	e9 a9 00 00 00       	jmp    c00060ac <f_getfree+0x1cd>
c0006003:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006006:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006009:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006011:	31 db                	xor    ebx,ebx
c0006013:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006018:	75 1b                	jne    c0006035 <f_getfree+0x156>
c000601a:	89 d6                	mov    esi,edx
c000601c:	89 cf                	mov    edi,ecx
c000601e:	83 c6 01             	add    esi,0x1
c0006021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006025:	83 d7 00             	adc    edi,0x0
c0006028:	e8 3d c1 ff ff       	call   c000216a <move_window>
c000602d:	85 c0                	test   eax,eax
c000602f:	75 79                	jne    c00060aa <f_getfree+0x1cb>
c0006031:	89 f2                	mov    edx,esi
c0006033:	89 f9                	mov    ecx,edi
c0006035:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006039:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000603d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006041:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006045:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006049:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000604d:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006050:	75 15                	jne    c0006067 <f_getfree+0x188>
c0006052:	e8 3c b9 ff ff       	call   c0001993 <ld_word>
c0006057:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000605b:	66 83 f8 01          	cmp    ax,0x1
c000605f:	83 d3 00             	adc    ebx,0x0
c0006062:	83 c6 02             	add    esi,0x2
c0006065:	eb 17                	jmp    c000607e <f_getfree+0x19f>
c0006067:	e8 34 b9 ff ff       	call   c00019a0 <ld_dword>
c000606c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006070:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006075:	83 f8 01             	cmp    eax,0x1
c0006078:	83 d3 00             	adc    ebx,0x0
c000607b:	83 c6 04             	add    esi,0x4
c000607e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006084:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006088:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000608c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006090:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006094:	0f 85 79 ff ff ff    	jne    c0006013 <f_getfree+0x134>
c000609a:	eb 10                	jmp    c00060ac <f_getfree+0x1cd>
c000609c:	bd 01 00 00 00       	mov    ebp,0x1
c00060a1:	eb 09                	jmp    c00060ac <f_getfree+0x1cd>
c00060a3:	bd 02 00 00 00       	mov    ebp,0x2
c00060a8:	eb 02                	jmp    c00060ac <f_getfree+0x1cd>
c00060aa:	89 c5                	mov    ebp,eax
c00060ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060b0:	89 18                	mov    DWORD PTR [eax],ebx
c00060b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b6:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060ba:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060bd:	83 c4 5c             	add    esp,0x5c
c00060c0:	89 e8                	mov    eax,ebp
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <f_truncate>:
c00060c7:	56                   	push   esi
c00060c8:	53                   	push   ebx
c00060c9:	83 ec 14             	sub    esp,0x14
c00060cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d4:	89 d8                	mov    eax,ebx
c00060d6:	e8 b4 bf ff ff       	call   c000208f <validate>
c00060db:	89 c6                	mov    esi,eax
c00060dd:	85 c0                	test   eax,eax
c00060df:	0f 85 d2 00 00 00    	jne    c00061b7 <f_truncate+0xf0>
c00060e5:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00060e9:	85 f6                	test   esi,esi
c00060eb:	0f 85 c6 00 00 00    	jne    c00061b7 <f_truncate+0xf0>
c00060f1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00060f5:	0f 84 b7 00 00 00    	je     c00061b2 <f_truncate+0xeb>
c00060fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00060fe:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006101:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006104:	89 d1                	mov    ecx,edx
c0006106:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006109:	0f 83 a8 00 00 00    	jae    c00061b7 <f_truncate+0xf0>
c000610f:	09 c2                	or     edx,eax
c0006111:	75 15                	jne    c0006128 <f_truncate+0x61>
c0006113:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006116:	31 c9                	xor    ecx,ecx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 bc d0 ff ff       	call   c00031db <remove_chain>
c000611f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006126:	eb 35                	jmp    c000615d <f_truncate+0x96>
c0006128:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000612b:	89 d8                	mov    eax,ebx
c000612d:	e8 ba cb ff ff       	call   c0002cec <get_fat>
c0006132:	89 c2                	mov    edx,eax
c0006134:	b8 01 00 00 00       	mov    eax,0x1
c0006139:	83 fa ff             	cmp    edx,0xffffffff
c000613c:	74 1f                	je     c000615d <f_truncate+0x96>
c000613e:	b8 02 00 00 00       	mov    eax,0x2
c0006143:	83 fa 01             	cmp    edx,0x1
c0006146:	74 15                	je     c000615d <f_truncate+0x96>
c0006148:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000614c:	31 c0                	xor    eax,eax
c000614e:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006151:	76 0a                	jbe    c000615d <f_truncate+0x96>
c0006153:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e d0 ff ff       	call   c00031db <remove_chain>
c000615d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006160:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006163:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006166:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006169:	83 ca 40             	or     edx,0x40
c000616c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000616f:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006172:	85 c0                	test   eax,eax
c0006174:	75 35                	jne    c00061ab <f_truncate+0xe4>
c0006176:	84 d2                	test   dl,dl
c0006178:	79 3d                	jns    c00061b7 <f_truncate+0xf0>
c000617a:	83 ec 0c             	sub    esp,0xc
c000617d:	8d 43 50             	lea    eax,[ebx+0x50]
c0006180:	6a 01                	push   0x1
c0006182:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006185:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006188:	50                   	push   eax
c0006189:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000618d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006191:	50                   	push   eax
c0006192:	e8 c7 b7 ff ff       	call   c000195e <disk_write>
c0006197:	83 c4 20             	add    esp,0x20
c000619a:	85 c0                	test   eax,eax
c000619c:	75 08                	jne    c00061a6 <f_truncate+0xdf>
c000619e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061a2:	31 f6                	xor    esi,esi
c00061a4:	eb 11                	jmp    c00061b7 <f_truncate+0xf0>
c00061a6:	b8 01 00 00 00       	mov    eax,0x1
c00061ab:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061ae:	89 c6                	mov    esi,eax
c00061b0:	eb 05                	jmp    c00061b7 <f_truncate+0xf0>
c00061b2:	be 07 00 00 00       	mov    esi,0x7
c00061b7:	83 c4 14             	add    esp,0x14
c00061ba:	89 f0                	mov    eax,esi
c00061bc:	5b                   	pop    ebx
c00061bd:	5e                   	pop    esi
c00061be:	c3                   	ret    

c00061bf <f_unlink>:
c00061bf:	56                   	push   esi
c00061c0:	b9 02 00 00 00       	mov    ecx,0x2
c00061c5:	53                   	push   ebx
c00061c6:	81 ec e4 00 00 00    	sub    esp,0xe4
c00061cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00061d0:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00061d7:	e8 39 c2 ff ff       	call   c0002415 <mount_volume>
c00061dc:	85 c0                	test   eax,eax
c00061de:	0f 85 53 01 00 00    	jne    c0006337 <f_unlink+0x178>
c00061e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00061e8:	83 ec 0c             	sub    esp,0xc
c00061eb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00061ef:	68 60 04 00 00       	push   0x460
c00061f4:	e8 80 1f 00 00       	call   c0008179 <ff_memalloc>
c00061f9:	89 c3                	mov    ebx,eax
c00061fb:	83 c4 10             	add    esp,0x10
c00061fe:	b8 11 00 00 00       	mov    eax,0x11
c0006203:	85 db                	test   ebx,ebx
c0006205:	0f 84 2c 01 00 00    	je     c0006337 <f_unlink+0x178>
c000620b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000620f:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006215:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006218:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000621b:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006222:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006226:	e8 56 e9 ff ff       	call   c0004b81 <follow_path>
c000622b:	85 c0                	test   eax,eax
c000622d:	0f 85 f0 00 00 00    	jne    c0006323 <f_unlink+0x164>
c0006233:	b8 06 00 00 00       	mov    eax,0x6
c0006238:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006240:	0f 88 dd 00 00 00    	js     c0006323 <f_unlink+0x164>
c0006246:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000624b:	74 0a                	je     c0006257 <f_unlink+0x98>
c000624d:	b8 07 00 00 00       	mov    eax,0x7
c0006252:	e9 cc 00 00 00       	jmp    c0006323 <f_unlink+0x164>
c0006257:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000625b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000625f:	8a 02                	mov    al,BYTE PTR [edx]
c0006261:	3c 04                	cmp    al,0x4
c0006263:	75 12                	jne    c0006277 <f_unlink+0xb8>
c0006265:	8d 42 10             	lea    eax,[edx+0x10]
c0006268:	8d 54 24 20          	lea    edx,[esp+0x20]
c000626c:	e8 d6 e8 ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0006271:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006275:	eb 0e                	jmp    c0006285 <f_unlink+0xc6>
c0006277:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000627e:	e8 73 e8 ff ff       	call   c0004af6 <ld_clust.isra.0>
c0006283:	89 c6                	mov    esi,eax
c0006285:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000628a:	75 20                	jne    c00062ac <f_unlink+0xed>
c000628c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006290:	e8 d6 d6 ff ff       	call   c000396b <dir_remove>
c0006295:	85 c0                	test   eax,eax
c0006297:	75 7d                	jne    c0006316 <f_unlink+0x157>
c0006299:	85 f6                	test   esi,esi
c000629b:	74 79                	je     c0006316 <f_unlink+0x157>
c000629d:	31 c9                	xor    ecx,ecx
c000629f:	89 f2                	mov    edx,esi
c00062a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062a5:	e8 31 cf ff ff       	call   c00031db <remove_chain>
c00062aa:	eb 6a                	jmp    c0006316 <f_unlink+0x157>
c00062ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b0:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062b7:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062c1:	75 21                	jne    c00062e4 <f_unlink+0x125>
c00062c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062cb:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062d2:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00062d6:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00062dd:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00062e4:	31 d2                	xor    edx,edx
c00062e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00062ed:	e8 f0 cb ff ff       	call   c0002ee2 <dir_sdi>
c00062f2:	85 c0                	test   eax,eax
c00062f4:	75 2d                	jne    c0006323 <f_unlink+0x164>
c00062f6:	31 d2                	xor    edx,edx
c00062f8:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00062ff:	e8 f0 d3 ff ff       	call   c00036f4 <dir_read>
c0006304:	85 c0                	test   eax,eax
c0006306:	0f 84 41 ff ff ff    	je     c000624d <f_unlink+0x8e>
c000630c:	83 f8 04             	cmp    eax,0x4
c000630f:	75 12                	jne    c0006323 <f_unlink+0x164>
c0006311:	e9 76 ff ff ff       	jmp    c000628c <f_unlink+0xcd>
c0006316:	85 c0                	test   eax,eax
c0006318:	75 09                	jne    c0006323 <f_unlink+0x164>
c000631a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000631e:	e8 55 df ff ff       	call   c0004278 <sync_fs>
c0006323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006327:	83 ec 0c             	sub    esp,0xc
c000632a:	53                   	push   ebx
c000632b:	e8 5f 1e 00 00       	call   c000818f <ff_memfree>
c0006330:	83 c4 10             	add    esp,0x10
c0006333:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006337:	81 c4 e4 00 00 00    	add    esp,0xe4
c000633d:	5b                   	pop    ebx
c000633e:	5e                   	pop    esi
c000633f:	c3                   	ret    

c0006340 <f_mkdir>:
c0006340:	57                   	push   edi
c0006341:	b9 02 00 00 00       	mov    ecx,0x2
c0006346:	56                   	push   esi
c0006347:	53                   	push   ebx
c0006348:	83 c4 80             	add    esp,0xffffff80
c000634b:	8d 54 24 08          	lea    edx,[esp+0x8]
c000634f:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006356:	e8 ba c0 ff ff       	call   c0002415 <mount_volume>
c000635b:	89 c3                	mov    ebx,eax
c000635d:	85 c0                	test   eax,eax
c000635f:	0f 85 fe 01 00 00    	jne    c0006563 <f_mkdir+0x223>
c0006365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006369:	83 ec 0c             	sub    esp,0xc
c000636c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006370:	bb 11 00 00 00       	mov    ebx,0x11
c0006375:	68 60 04 00 00       	push   0x460
c000637a:	e8 fa 1d 00 00       	call   c0008179 <ff_memalloc>
c000637f:	83 c4 10             	add    esp,0x10
c0006382:	89 c7                	mov    edi,eax
c0006384:	85 c0                	test   eax,eax
c0006386:	0f 84 d7 01 00 00    	je     c0006563 <f_mkdir+0x223>
c000638c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006390:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006396:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006399:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000639c:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063a3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063a7:	e8 d5 e7 ff ff       	call   c0004b81 <follow_path>
c00063ac:	89 c3                	mov    ebx,eax
c00063ae:	85 c0                	test   eax,eax
c00063b0:	74 3e                	je     c00063f0 <f_mkdir+0xb0>
c00063b2:	83 f8 04             	cmp    eax,0x4
c00063b5:	75 3e                	jne    c00063f5 <f_mkdir+0xb5>
c00063b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063bb:	31 d2                	xor    edx,edx
c00063bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00063c5:	e8 10 cc ff ff       	call   c0002fda <create_chain>
c00063ca:	89 c6                	mov    esi,eax
c00063cc:	85 c0                	test   eax,eax
c00063ce:	74 0c                	je     c00063dc <f_mkdir+0x9c>
c00063d0:	bb 02 00 00 00       	mov    ebx,0x2
c00063d5:	83 f8 01             	cmp    eax,0x1
c00063d8:	74 07                	je     c00063e1 <f_mkdir+0xa1>
c00063da:	eb 2a                	jmp    c0006406 <f_mkdir+0xc6>
c00063dc:	bb 07 00 00 00       	mov    ebx,0x7
c00063e1:	31 c9                	xor    ecx,ecx
c00063e3:	89 f2                	mov    edx,esi
c00063e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00063e9:	e8 ed cd ff ff       	call   c00031db <remove_chain>
c00063ee:	eb 05                	jmp    c00063f5 <f_mkdir+0xb5>
c00063f0:	bb 08 00 00 00       	mov    ebx,0x8
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	57                   	push   edi
c00063f9:	e8 91 1d 00 00       	call   c000818f <ff_memfree>
c00063fe:	83 c4 10             	add    esp,0x10
c0006401:	e9 5d 01 00 00       	jmp    c0006563 <f_mkdir+0x223>
c0006406:	bb 01 00 00 00       	mov    ebx,0x1
c000640b:	83 f8 ff             	cmp    eax,0xffffffff
c000640e:	74 d1                	je     c00063e1 <f_mkdir+0xa1>
c0006410:	89 f2                	mov    edx,esi
c0006412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006416:	e8 08 cf ff ff       	call   c0003323 <dir_clear>
c000641b:	89 c3                	mov    ebx,eax
c000641d:	85 c0                	test   eax,eax
c000641f:	75 c0                	jne    c00063e1 <f_mkdir+0xa1>
c0006421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006425:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006428:	74 69                	je     c0006493 <f_mkdir+0x153>
c000642a:	b9 0b 00 00 00       	mov    ecx,0xb
c000642f:	83 c0 54             	add    eax,0x54
c0006432:	ba 20 00 00 00       	mov    edx,0x20
c0006437:	e8 eb b5 ff ff       	call   c0001a27 <mem_set>
c000643c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006440:	83 c0 6a             	add    eax,0x6a
c0006443:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006447:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c000644b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006450:	e8 b4 b5 ff ff       	call   c0001a09 <st_dword>
c0006455:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006459:	89 f1                	mov    ecx,esi
c000645b:	8d 50 54             	lea    edx,[eax+0x54]
c000645e:	e8 bc e6 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006467:	b9 20 00 00 00       	mov    ecx,0x20
c000646c:	8d 50 54             	lea    edx,[eax+0x54]
c000646f:	83 c0 74             	add    eax,0x74
c0006472:	e8 9b b5 ff ff       	call   c0001a12 <mem_cpy>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000647f:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006483:	8d 50 74             	lea    edx,[eax+0x74]
c0006486:	e8 94 e6 ff ff       	call   c0004b1f <st_clust.isra.1>
c000648b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006493:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006497:	e8 59 db ff ff       	call   c0003ff5 <dir_register>
c000649c:	89 c3                	mov    ebx,eax
c000649e:	85 c0                	test   eax,eax
c00064a0:	0f 85 3b ff ff ff    	jne    c00063e1 <f_mkdir+0xa1>
c00064a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064aa:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064ad:	75 74                	jne    c0006523 <f_mkdir+0x1e3>
c00064af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064b2:	ba 00 00 21 50       	mov    edx,0x50210000
c00064b7:	83 c0 0c             	add    eax,0xc
c00064ba:	e8 4a b5 ff ff       	call   c0001a09 <st_dword>
c00064bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064c6:	89 f2                	mov    edx,esi
c00064c8:	83 c0 34             	add    eax,0x34
c00064cb:	e8 39 b5 ff ff       	call   c0001a09 <st_dword>
c00064d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00064d8:	c1 e2 09             	shl    edx,0x9
c00064db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064de:	83 c0 38             	add    eax,0x38
c00064e1:	e8 23 b5 ff ff       	call   c0001a09 <st_dword>
c00064e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ea:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00064ee:	c1 e2 09             	shl    edx,0x9
c00064f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064f4:	83 c0 28             	add    eax,0x28
c00064f7:	e8 0d b5 ff ff       	call   c0001a09 <st_dword>
c00064fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006500:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006503:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006507:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000650a:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000650e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006512:	e8 cf d3 ff ff       	call   c00038e6 <store_xdir>
c0006517:	89 c3                	mov    ebx,eax
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 85 d4 fe ff ff    	jne    c00063f5 <f_mkdir+0xb5>
c0006521:	eb 30                	jmp    c0006553 <f_mkdir+0x213>
c0006523:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006527:	ba 00 00 21 50       	mov    edx,0x50210000
c000652c:	83 c0 16             	add    eax,0x16
c000652f:	e8 d5 b4 ff ff       	call   c0001a09 <st_dword>
c0006534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006538:	89 f1                	mov    ecx,esi
c000653a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000653e:	e8 dc e5 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006543:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006547:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000654b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	e8 1c dd ff ff       	call   c0004278 <sync_fs>
c000655c:	89 c3                	mov    ebx,eax
c000655e:	e9 92 fe ff ff       	jmp    c00063f5 <f_mkdir+0xb5>
c0006563:	83 ec 80             	sub    esp,0xffffff80
c0006566:	89 d8                	mov    eax,ebx
c0006568:	5b                   	pop    ebx
c0006569:	5e                   	pop    esi
c000656a:	5f                   	pop    edi
c000656b:	c3                   	ret    

c000656c <f_rename>:
c000656c:	55                   	push   ebp
c000656d:	57                   	push   edi
c000656e:	56                   	push   esi
c000656f:	53                   	push   ebx
c0006570:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006576:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000657d:	e8 f3 b9 ff ff       	call   c0001f75 <get_ldnumber>
c0006582:	b9 02 00 00 00       	mov    ecx,0x2
c0006587:	8d 54 24 14          	lea    edx,[esp+0x14]
c000658b:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006592:	e8 7e be ff ff       	call   c0002415 <mount_volume>
c0006597:	85 c0                	test   eax,eax
c0006599:	0f 85 b5 02 00 00    	jne    c0006854 <f_rename+0x2e8>
c000659f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065aa:	68 60 04 00 00       	push   0x460
c00065af:	e8 c5 1b 00 00       	call   c0008179 <ff_memalloc>
c00065b4:	89 c3                	mov    ebx,eax
c00065b6:	83 c4 10             	add    esp,0x10
c00065b9:	b8 11 00 00 00       	mov    eax,0x11
c00065be:	85 db                	test   ebx,ebx
c00065c0:	0f 84 8e 02 00 00    	je     c0006854 <f_rename+0x2e8>
c00065c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ca:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00065d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00065d6:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00065dd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00065e1:	e8 9b e5 ff ff       	call   c0004b81 <follow_path>
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 52 02 00 00    	jne    c0006840 <f_rename+0x2d4>
c00065ee:	b8 06 00 00 00       	mov    eax,0x6
c00065f3:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00065fb:	0f 85 3f 02 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006608:	0f 85 05 01 00 00    	jne    c0006713 <f_rename+0x1a7>
c000660e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006611:	b9 40 00 00 00       	mov    ecx,0x40
c0006616:	8d 44 24 18          	lea    eax,[esp+0x18]
c000661a:	e8 f3 b3 ff ff       	call   c0001a12 <mem_cpy>
c000661f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006624:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006628:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000662f:	e8 de b3 ff ff       	call   c0001a12 <mem_cpy>
c0006634:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000663b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006642:	e8 3a e5 ff ff       	call   c0004b81 <follow_path>
c0006647:	85 c0                	test   eax,eax
c0006649:	75 29                	jne    c0006674 <f_rename+0x108>
c000664b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000664f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006656:	74 0a                	je     c0006662 <f_rename+0xf6>
c0006658:	b8 08 00 00 00       	mov    eax,0x8
c000665d:	e9 de 01 00 00       	jmp    c0006840 <f_rename+0x2d4>
c0006662:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006669:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006670:	75 e6                	jne    c0006658 <f_rename+0xec>
c0006672:	eb 09                	jmp    c000667d <f_rename+0x111>
c0006674:	83 f8 04             	cmp    eax,0x4
c0006677:	0f 85 c3 01 00 00    	jne    c0006840 <f_rename+0x2d4>
c000667d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006684:	e8 6c d9 ff ff       	call   c0003ff5 <dir_register>
c0006689:	85 c0                	test   eax,eax
c000668b:	0f 85 af 01 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006695:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006698:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000669b:	89 c5                	mov    ebp,eax
c000669d:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066a4:	8d 46 24             	lea    eax,[esi+0x24]
c00066a7:	e8 e7 b2 ff ff       	call   c0001993 <ld_word>
c00066ac:	b9 40 00 00 00       	mov    ecx,0x40
c00066b1:	89 c7                	mov    edi,eax
c00066b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066b7:	89 f0                	mov    eax,esi
c00066b9:	e8 54 b3 ff ff       	call   c0001a12 <mem_cpy>
c00066be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c5:	89 e9                	mov    ecx,ebp
c00066c7:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00066ca:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d5:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00066d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066db:	83 c0 24             	add    eax,0x24
c00066de:	0f b7 d7             	movzx  edx,di
c00066e1:	e8 1f b3 ff ff       	call   c0001a05 <st_word>
c00066e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066ed:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00066f0:	a8 10                	test   al,0x10
c00066f2:	75 06                	jne    c00066fa <f_rename+0x18e>
c00066f4:	83 c8 20             	or     eax,0x20
c00066f7:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 e0 d1 ff ff       	call   c00038e6 <store_xdir>
c0006706:	85 c0                	test   eax,eax
c0006708:	0f 84 1c 01 00 00    	je     c000682a <f_rename+0x2be>
c000670e:	e9 2d 01 00 00       	jmp    c0006840 <f_rename+0x2d4>
c0006713:	b9 20 00 00 00       	mov    ecx,0x20
c0006718:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000671f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006723:	e8 ea b2 ff ff       	call   c0001a12 <mem_cpy>
c0006728:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006731:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006738:	e8 d5 b2 ff ff       	call   c0001a12 <mem_cpy>
c000673d:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 31 e4 ff ff       	call   c0004b81 <follow_path>
c0006750:	85 c0                	test   eax,eax
c0006752:	75 27                	jne    c000677b <f_rename+0x20f>
c0006754:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006758:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675f:	0f 85 f3 fe ff ff    	jne    c0006658 <f_rename+0xec>
c0006765:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006773:	0f 85 df fe ff ff    	jne    c0006658 <f_rename+0xec>
c0006779:	eb 09                	jmp    c0006784 <f_rename+0x218>
c000677b:	83 f8 04             	cmp    eax,0x4
c000677e:	0f 85 bc 00 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006784:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678b:	e8 65 d8 ff ff       	call   c0003ff5 <dir_register>
c0006790:	85 c0                	test   eax,eax
c0006792:	0f 85 a8 00 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006798:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000679f:	b9 13 00 00 00       	mov    ecx,0x13
c00067a4:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067a8:	8d 46 0d             	lea    eax,[esi+0xd]
c00067ab:	e8 62 b2 ff ff       	call   c0001a12 <mem_cpy>
c00067b0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067b4:	a8 10                	test   al,0x10
c00067b6:	75 03                	jne    c00067bb <f_rename+0x24f>
c00067b8:	83 c8 20             	or     eax,0x20
c00067bb:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067c6:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00067ca:	74 5e                	je     c000682a <f_rename+0x2be>
c00067cc:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00067d3:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00067d7:	74 51                	je     c000682a <f_rename+0x2be>
c00067d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00067dd:	89 f2                	mov    edx,esi
c00067df:	8a 07                	mov    al,BYTE PTR [edi]
c00067e1:	e8 10 e3 ff ff       	call   c0004af6 <ld_clust.isra.0>
c00067e6:	89 c2                	mov    edx,eax
c00067e8:	89 f8                	mov    eax,edi
c00067ea:	e8 3d b4 ff ff       	call   c0001c2c <clst2sect>
c00067ef:	89 c6                	mov    esi,eax
c00067f1:	89 d1                	mov    ecx,edx
c00067f3:	b8 02 00 00 00       	mov    eax,0x2
c00067f8:	09 f2                	or     edx,esi
c00067fa:	74 44                	je     c0006840 <f_rename+0x2d4>
c00067fc:	89 f2                	mov    edx,esi
c00067fe:	89 f8                	mov    eax,edi
c0006800:	e8 65 b9 ff ff       	call   c000216a <move_window>
c0006805:	85 c0                	test   eax,eax
c0006807:	75 37                	jne    c0006840 <f_rename+0x2d4>
c0006809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680d:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006811:	75 17                	jne    c000682a <f_rename+0x2be>
c0006813:	8d 50 74             	lea    edx,[eax+0x74]
c0006816:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000681d:	e8 fd e2 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006826:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000682a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000682e:	e8 38 d1 ff ff       	call   c000396b <dir_remove>
c0006833:	85 c0                	test   eax,eax
c0006835:	75 09                	jne    c0006840 <f_rename+0x2d4>
c0006837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000683b:	e8 38 da ff ff       	call   c0004278 <sync_fs>
c0006840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006844:	83 ec 0c             	sub    esp,0xc
c0006847:	53                   	push   ebx
c0006848:	e8 42 19 00 00       	call   c000818f <ff_memfree>
c000684d:	83 c4 10             	add    esp,0x10
c0006850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006854:	81 c4 fc 00 00 00    	add    esp,0xfc
c000685a:	5b                   	pop    ebx
c000685b:	5e                   	pop    esi
c000685c:	5f                   	pop    edi
c000685d:	5d                   	pop    ebp
c000685e:	c3                   	ret    

c000685f <f_chmod>:
c000685f:	57                   	push   edi
c0006860:	b9 02 00 00 00       	mov    ecx,0x2
c0006865:	56                   	push   esi
c0006866:	53                   	push   ebx
c0006867:	83 ec 60             	sub    esp,0x60
c000686a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000686e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006872:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006876:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000687a:	e8 96 bb ff ff       	call   c0002415 <mount_volume>
c000687f:	85 c0                	test   eax,eax
c0006881:	0f 85 af 00 00 00    	jne    c0006936 <f_chmod+0xd7>
c0006887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000688b:	83 ec 0c             	sub    esp,0xc
c000688e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006892:	68 60 04 00 00       	push   0x460
c0006897:	e8 dd 18 00 00       	call   c0008179 <ff_memalloc>
c000689c:	89 c6                	mov    esi,eax
c000689e:	83 c4 10             	add    esp,0x10
c00068a1:	b8 11 00 00 00       	mov    eax,0x11
c00068a6:	85 f6                	test   esi,esi
c00068a8:	0f 84 88 00 00 00    	je     c0006936 <f_chmod+0xd7>
c00068ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068b2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068bb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068be:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068c6:	e8 b6 e2 ff ff       	call   c0004b81 <follow_path>
c00068cb:	85 c0                	test   eax,eax
c00068cd:	75 53                	jne    c0006922 <f_chmod+0xc3>
c00068cf:	b8 06 00 00 00       	mov    eax,0x6
c00068d4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00068d9:	75 47                	jne    c0006922 <f_chmod+0xc3>
c00068db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068df:	89 f9                	mov    ecx,edi
c00068e1:	83 e1 27             	and    ecx,0x27
c00068e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068e7:	75 1d                	jne    c0006906 <f_chmod+0xa7>
c00068e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ec:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00068ef:	21 cb                	and    ebx,ecx
c00068f1:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00068f4:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00068f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068fb:	e8 e6 cf ff ff       	call   c00038e6 <store_xdir>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 1e                	jne    c0006922 <f_chmod+0xc3>
c0006904:	eb 13                	jmp    c0006919 <f_chmod+0xba>
c0006906:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000690a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000690d:	21 cb                	and    ebx,ecx
c000690f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006912:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006915:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691d:	e8 56 d9 ff ff       	call   c0004278 <sync_fs>
c0006922:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006926:	83 ec 0c             	sub    esp,0xc
c0006929:	56                   	push   esi
c000692a:	e8 60 18 00 00       	call   c000818f <ff_memfree>
c000692f:	83 c4 10             	add    esp,0x10
c0006932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006936:	83 c4 60             	add    esp,0x60
c0006939:	5b                   	pop    ebx
c000693a:	5e                   	pop    esi
c000693b:	5f                   	pop    edi
c000693c:	c3                   	ret    

c000693d <f_utime>:
c000693d:	56                   	push   esi
c000693e:	b9 02 00 00 00       	mov    ecx,0x2
c0006943:	53                   	push   ebx
c0006944:	83 ec 64             	sub    esp,0x64
c0006947:	8d 54 24 10          	lea    edx,[esp+0x10]
c000694b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000694f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006953:	e8 bd ba ff ff       	call   c0002415 <mount_volume>
c0006958:	85 c0                	test   eax,eax
c000695a:	0f 85 b5 00 00 00    	jne    c0006a15 <f_utime+0xd8>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	83 ec 0c             	sub    esp,0xc
c0006967:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000696b:	68 60 04 00 00       	push   0x460
c0006970:	e8 04 18 00 00       	call   c0008179 <ff_memalloc>
c0006975:	89 c3                	mov    ebx,eax
c0006977:	83 c4 10             	add    esp,0x10
c000697a:	b8 11 00 00 00       	mov    eax,0x11
c000697f:	85 db                	test   ebx,ebx
c0006981:	0f 84 8e 00 00 00    	je     c0006a15 <f_utime+0xd8>
c0006987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000698b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006991:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006994:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006997:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000699b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000699f:	e8 dd e1 ff ff       	call   c0004b81 <follow_path>
c00069a4:	85 c0                	test   eax,eax
c00069a6:	75 59                	jne    c0006a01 <f_utime+0xc4>
c00069a8:	b8 06 00 00 00       	mov    eax,0x6
c00069ad:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069b2:	75 4d                	jne    c0006a01 <f_utime+0xc4>
c00069b4:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069bc:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069c0:	c1 e2 10             	shl    edx,0x10
c00069c3:	09 ca                	or     edx,ecx
c00069c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069c8:	75 1a                	jne    c00069e4 <f_utime+0xa7>
c00069ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069cd:	83 c0 0c             	add    eax,0xc
c00069d0:	e8 34 b0 ff ff       	call   c0001a09 <st_dword>
c00069d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069d9:	e8 08 cf ff ff       	call   c00038e6 <store_xdir>
c00069de:	85 c0                	test   eax,eax
c00069e0:	75 1f                	jne    c0006a01 <f_utime+0xc4>
c00069e2:	eb 14                	jmp    c00069f8 <f_utime+0xbb>
c00069e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00069e8:	83 c0 16             	add    eax,0x16
c00069eb:	e8 19 b0 ff ff       	call   c0001a09 <st_dword>
c00069f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069fc:	e8 77 d8 ff ff       	call   c0004278 <sync_fs>
c0006a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a05:	83 ec 0c             	sub    esp,0xc
c0006a08:	53                   	push   ebx
c0006a09:	e8 81 17 00 00       	call   c000818f <ff_memfree>
c0006a0e:	83 c4 10             	add    esp,0x10
c0006a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a15:	83 c4 64             	add    esp,0x64
c0006a18:	5b                   	pop    ebx
c0006a19:	5e                   	pop    esi
c0006a1a:	c3                   	ret    

c0006a1b <f_getlabel>:
c0006a1b:	55                   	push   ebp
c0006a1c:	31 c9                	xor    ecx,ecx
c0006a1e:	57                   	push   edi
c0006a1f:	56                   	push   esi
c0006a20:	53                   	push   ebx
c0006a21:	83 ec 6c             	sub    esp,0x6c
c0006a24:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a28:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a2f:	e8 e1 b9 ff ff       	call   c0002415 <mount_volume>
c0006a34:	89 c3                	mov    ebx,eax
c0006a36:	85 c0                	test   eax,eax
c0006a38:	0f 85 73 01 00 00    	jne    c0006bb1 <f_getlabel+0x196>
c0006a3e:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a46:	0f 84 65 01 00 00    	je     c0006bb1 <f_getlabel+0x196>
c0006a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a50:	31 d2                	xor    edx,edx
c0006a52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a62:	e8 7b c4 ff ff       	call   c0002ee2 <dir_sdi>
c0006a67:	89 c3                	mov    ebx,eax
c0006a69:	85 c0                	test   eax,eax
c0006a6b:	0f 85 2f 01 00 00    	jne    c0006ba0 <f_getlabel+0x185>
c0006a71:	ba 01 00 00 00       	mov    edx,0x1
c0006a76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a7a:	e8 75 cc ff ff       	call   c00036f4 <dir_read>
c0006a7f:	89 c3                	mov    ebx,eax
c0006a81:	85 c0                	test   eax,eax
c0006a83:	0f 85 17 01 00 00    	jne    c0006ba0 <f_getlabel+0x185>
c0006a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a90:	74 09                	je     c0006a9b <f_getlabel+0x80>
c0006a92:	31 f6                	xor    esi,esi
c0006a94:	31 c9                	xor    ecx,ecx
c0006a96:	e9 c8 00 00 00       	jmp    c0006b63 <f_getlabel+0x148>
c0006a9b:	31 ed                	xor    ebp,ebp
c0006a9d:	31 f6                	xor    esi,esi
c0006a9f:	31 ff                	xor    edi,edi
c0006aa1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa5:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aa9:	39 fa                	cmp    edx,edi
c0006aab:	76 4b                	jbe    c0006af8 <f_getlabel+0xdd>
c0006aad:	47                   	inc    edi
c0006aae:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ab1:	01 d0                	add    eax,edx
c0006ab3:	e8 db ae ff ff       	call   c0001993 <ld_word>
c0006ab8:	66 85 ed             	test   bp,bp
c0006abb:	75 0d                	jne    c0006aca <f_getlabel+0xaf>
c0006abd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ac3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ac8:	76 28                	jbe    c0006af2 <f_getlabel+0xd7>
c0006aca:	89 e9                	mov    ecx,ebp
c0006acc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ad3:	c1 e1 10             	shl    ecx,0x10
c0006ad6:	01 f2                	add    edx,esi
c0006ad8:	0f b7 c0             	movzx  eax,ax
c0006adb:	09 c8                	or     eax,ecx
c0006add:	b9 04 00 00 00       	mov    ecx,0x4
c0006ae2:	e8 4c b0 ff ff       	call   c0001b33 <put_utf>
c0006ae7:	84 c0                	test   al,al
c0006ae9:	74 0b                	je     c0006af6 <f_getlabel+0xdb>
c0006aeb:	0f b6 c0             	movzx  eax,al
c0006aee:	01 c6                	add    esi,eax
c0006af0:	31 c0                	xor    eax,eax
c0006af2:	89 c5                	mov    ebp,eax
c0006af4:	eb ab                	jmp    c0006aa1 <f_getlabel+0x86>
c0006af6:	31 f6                	xor    esi,esi
c0006af8:	66 85 ed             	test   bp,bp
c0006afb:	74 02                	je     c0006aff <f_getlabel+0xe4>
c0006afd:	31 f6                	xor    esi,esi
c0006aff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b06:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006b0a:	e9 a2 00 00 00       	jmp    c0006bb1 <f_getlabel+0x196>
c0006b0f:	83 ff 0b             	cmp    edi,0xb
c0006b12:	74 11                	je     c0006b25 <f_getlabel+0x10a>
c0006b14:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1d:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b20:	c1 e0 08             	shl    eax,0x8
c0006b23:	09 c2                	or     edx,eax
c0006b25:	50                   	push   eax
c0006b26:	50                   	push   eax
c0006b27:	68 b5 01 00 00       	push   0x1b5
c0006b2c:	0f b7 d2             	movzx  edx,dx
c0006b2f:	52                   	push   edx
c0006b30:	e8 07 17 00 00       	call   c000823c <ff_oem2uni>
c0006b35:	83 c4 10             	add    esp,0x10
c0006b38:	66 85 c0             	test   ax,ax
c0006b3b:	74 46                	je     c0006b83 <f_getlabel+0x168>
c0006b3d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b44:	b9 04 00 00 00       	mov    ecx,0x4
c0006b49:	01 f2                	add    edx,esi
c0006b4b:	0f b7 c0             	movzx  eax,ax
c0006b4e:	e8 e0 af ff ff       	call   c0001b33 <put_utf>
c0006b53:	84 c0                	test   al,al
c0006b55:	74 2c                	je     c0006b83 <f_getlabel+0x168>
c0006b57:	0f b6 c0             	movzx  eax,al
c0006b5a:	01 c6                	add    esi,eax
c0006b5c:	83 ff 0b             	cmp    edi,0xb
c0006b5f:	74 24                	je     c0006b85 <f_getlabel+0x16a>
c0006b61:	89 f9                	mov    ecx,edi
c0006b63:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b67:	8d 79 01             	lea    edi,[ecx+0x1]
c0006b6a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006b6f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006b74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b78:	e8 ea ae ff ff       	call   c0001a67 <dbc_1st>
c0006b7d:	85 c0                	test   eax,eax
c0006b7f:	74 a4                	je     c0006b25 <f_getlabel+0x10a>
c0006b81:	eb 8c                	jmp    c0006b0f <f_getlabel+0xf4>
c0006b83:	31 f6                	xor    esi,esi
c0006b85:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006b8c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006b8f:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006b96:	74 19                	je     c0006bb1 <f_getlabel+0x196>
c0006b98:	4e                   	dec    esi
c0006b99:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006b9c:	74 ee                	je     c0006b8c <f_getlabel+0x171>
c0006b9e:	eb 11                	jmp    c0006bb1 <f_getlabel+0x196>
c0006ba0:	83 fb 04             	cmp    ebx,0x4
c0006ba3:	75 0c                	jne    c0006bb1 <f_getlabel+0x196>
c0006ba5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bac:	31 db                	xor    ebx,ebx
c0006bae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bb1:	85 db                	test   ebx,ebx
c0006bb3:	75 50                	jne    c0006c05 <f_getlabel+0x1ea>
c0006bb5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bbd:	74 46                	je     c0006c05 <f_getlabel+0x1ea>
c0006bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bc6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bc9:	e8 9c b5 ff ff       	call   c000216a <move_window>
c0006bce:	89 c3                	mov    ebx,eax
c0006bd0:	85 c0                	test   eax,eax
c0006bd2:	75 31                	jne    c0006c05 <f_getlabel+0x1ea>
c0006bd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006bd8:	b8 43 00 00 00       	mov    eax,0x43
c0006bdd:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006bdf:	80 f9 03             	cmp    cl,0x3
c0006be2:	74 0f                	je     c0006bf3 <f_getlabel+0x1d8>
c0006be4:	31 c0                	xor    eax,eax
c0006be6:	80 f9 04             	cmp    cl,0x4
c0006be9:	0f 94 c0             	sete   al
c0006bec:	48                   	dec    eax
c0006bed:	83 e0 c3             	and    eax,0xffffffc3
c0006bf0:	83 c0 64             	add    eax,0x64
c0006bf3:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006bf7:	e8 a4 ad ff ff       	call   c00019a0 <ld_dword>
c0006bfc:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c03:	89 07                	mov    DWORD PTR [edi],eax
c0006c05:	83 c4 6c             	add    esp,0x6c
c0006c08:	89 d8                	mov    eax,ebx
c0006c0a:	5b                   	pop    ebx
c0006c0b:	5e                   	pop    esi
c0006c0c:	5f                   	pop    edi
c0006c0d:	5d                   	pop    ebp
c0006c0e:	c3                   	ret    

c0006c0f <f_setlabel>:
c0006c0f:	56                   	push   esi
c0006c10:	b9 02 00 00 00       	mov    ecx,0x2
c0006c15:	53                   	push   ebx
c0006c16:	83 ec 74             	sub    esp,0x74
c0006c19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c24:	e8 ec b7 ff ff       	call   c0002415 <mount_volume>
c0006c29:	89 c6                	mov    esi,eax
c0006c2b:	85 c0                	test   eax,eax
c0006c2d:	0f 85 41 02 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006c33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c3a:	0f 85 8e 00 00 00    	jne    c0006cce <f_setlabel+0xbf>
c0006c40:	b9 16 00 00 00       	mov    ecx,0x16
c0006c45:	31 d2                	xor    edx,edx
c0006c47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c4b:	31 db                	xor    ebx,ebx
c0006c4d:	e8 d5 ad ff ff       	call   c0001a27 <mem_set>
c0006c52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c5c:	0f 86 0a 01 00 00    	jbe    c0006d6c <f_setlabel+0x15d>
c0006c62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c69:	e8 ff ad ff ff       	call   c0001a6d <tchar2uni>
c0006c6e:	89 c6                	mov    esi,eax
c0006c70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006c75:	76 2a                	jbe    c0006ca1 <f_setlabel+0x92>
c0006c77:	83 f8 ff             	cmp    eax,0xffffffff
c0006c7a:	74 05                	je     c0006c81 <f_setlabel+0x72>
c0006c7c:	83 fb 09             	cmp    ebx,0x9
c0006c7f:	76 0a                	jbe    c0006c8b <f_setlabel+0x7c>
c0006c81:	be 06 00 00 00       	mov    esi,0x6
c0006c86:	e9 e9 01 00 00       	jmp    c0006e74 <f_setlabel+0x265>
c0006c8b:	89 c2                	mov    edx,eax
c0006c8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006c91:	c1 ea 10             	shr    edx,0x10
c0006c94:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006c97:	01 c8                	add    eax,ecx
c0006c99:	43                   	inc    ebx
c0006c9a:	e8 66 ad ff ff       	call   c0001a05 <st_word>
c0006c9f:	eb 04                	jmp    c0006ca5 <f_setlabel+0x96>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 dc                	je     c0006c81 <f_setlabel+0x72>
c0006ca5:	89 f2                	mov    edx,esi
c0006ca7:	b8 37 fd 01 c0       	mov    eax,0xc001fd37
c0006cac:	e8 a4 ad ff ff       	call   c0001a55 <chk_chr>
c0006cb1:	85 c0                	test   eax,eax
c0006cb3:	75 cc                	jne    c0006c81 <f_setlabel+0x72>
c0006cb5:	83 fb 0a             	cmp    ebx,0xa
c0006cb8:	77 c7                	ja     c0006c81 <f_setlabel+0x72>
c0006cba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc1:	0f b7 d6             	movzx  edx,si
c0006cc4:	01 c8                	add    eax,ecx
c0006cc6:	43                   	inc    ebx
c0006cc7:	e8 39 ad ff ff       	call   c0001a05 <st_word>
c0006ccc:	eb 84                	jmp    c0006c52 <f_setlabel+0x43>
c0006cce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006cd3:	ba 20 00 00 00       	mov    edx,0x20
c0006cd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cdc:	31 db                	xor    ebx,ebx
c0006cde:	e8 44 ad ff ff       	call   c0001a27 <mem_set>
c0006ce3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006cea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ced:	76 60                	jbe    c0006d4f <f_setlabel+0x140>
c0006cef:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cf6:	e8 72 ad ff ff       	call   c0001a6d <tchar2uni>
c0006cfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d00:	0f 87 7b ff ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006d06:	83 ec 0c             	sub    esp,0xc
c0006d09:	50                   	push   eax
c0006d0a:	e8 9c 15 00 00       	call   c00082ab <ff_wtoupper>
c0006d0f:	5a                   	pop    edx
c0006d10:	59                   	pop    ecx
c0006d11:	68 b5 01 00 00       	push   0x1b5
c0006d16:	50                   	push   eax
c0006d17:	e8 8a 14 00 00       	call   c00081a6 <ff_uni2oem>
c0006d1c:	83 c4 10             	add    esp,0x10
c0006d1f:	89 c6                	mov    esi,eax
c0006d21:	66 85 c0             	test   ax,ax
c0006d24:	0f 84 57 ff ff ff    	je     c0006c81 <f_setlabel+0x72>
c0006d2a:	0f b7 d0             	movzx  edx,ax
c0006d2d:	b8 30 fd 01 c0       	mov    eax,0xc001fd30
c0006d32:	e8 1e ad ff ff       	call   c0001a55 <chk_chr>
c0006d37:	85 c0                	test   eax,eax
c0006d39:	0f 85 42 ff ff ff    	jne    c0006c81 <f_setlabel+0x72>
c0006d3f:	66 81 fe ff 00       	cmp    si,0xff
c0006d44:	0f 87 14 01 00 00    	ja     c0006e5e <f_setlabel+0x24f>
c0006d4a:	e9 fa 00 00 00       	jmp    c0006e49 <f_setlabel+0x23a>
c0006d4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d54:	0f 84 27 ff ff ff    	je     c0006c81 <f_setlabel+0x72>
c0006d5a:	85 db                	test   ebx,ebx
c0006d5c:	74 0e                	je     c0006d6c <f_setlabel+0x15d>
c0006d5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d66:	75 04                	jne    c0006d6c <f_setlabel+0x15d>
c0006d68:	89 c3                	mov    ebx,eax
c0006d6a:	eb ee                	jmp    c0006d5a <f_setlabel+0x14b>
c0006d6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d70:	31 d2                	xor    edx,edx
c0006d72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006d76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006d7a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006d82:	e8 5b c1 ff ff       	call   c0002ee2 <dir_sdi>
c0006d87:	89 c6                	mov    esi,eax
c0006d89:	85 c0                	test   eax,eax
c0006d8b:	0f 85 e3 00 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006d91:	ba 01 00 00 00       	mov    edx,0x1
c0006d96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006d9a:	e8 55 c9 ff ff       	call   c00036f4 <dir_read>
c0006d9f:	85 c0                	test   eax,eax
c0006da1:	75 21                	jne    c0006dc4 <f_setlabel+0x1b5>
c0006da3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006da7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006dab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006dae:	74 5d                	je     c0006e0d <f_setlabel+0x1fe>
c0006db0:	85 db                	test   ebx,ebx
c0006db2:	74 0b                	je     c0006dbf <f_setlabel+0x1b0>
c0006db4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006db9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006dbd:	eb 70                	jmp    c0006e2f <f_setlabel+0x220>
c0006dbf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006dc2:	eb 70                	jmp    c0006e34 <f_setlabel+0x225>
c0006dc4:	83 f8 04             	cmp    eax,0x4
c0006dc7:	75 7c                	jne    c0006e45 <f_setlabel+0x236>
c0006dc9:	85 db                	test   ebx,ebx
c0006dcb:	0f 84 a3 00 00 00    	je     c0006e74 <f_setlabel+0x265>
c0006dd1:	ba 01 00 00 00       	mov    edx,0x1
c0006dd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dda:	e8 8f ca ff ff       	call   c000386e <dir_alloc>
c0006ddf:	89 c6                	mov    esi,eax
c0006de1:	85 c0                	test   eax,eax
c0006de3:	0f 85 8b 00 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006de9:	31 d2                	xor    edx,edx
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	b9 20 00 00 00       	mov    ecx,0x20
c0006df4:	e8 2e ac ff ff       	call   c0001a27 <mem_set>
c0006df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006dfd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e04:	75 18                	jne    c0006e1e <f_setlabel+0x20f>
c0006e06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e10:	b9 16 00 00 00       	mov    ecx,0x16
c0006e15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e19:	83 c0 02             	add    eax,0x2
c0006e1c:	eb 9b                	jmp    c0006db9 <f_setlabel+0x1aa>
c0006e1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e2f:	e8 de ab ff ff       	call   c0001a12 <mem_cpy>
c0006e34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	e8 33 d4 ff ff       	call   c0004278 <sync_fs>
c0006e45:	89 c6                	mov    esi,eax
c0006e47:	eb 2b                	jmp    c0006e74 <f_setlabel+0x265>
c0006e49:	83 fb 0a             	cmp    ebx,0xa
c0006e4c:	0f 87 2f fe ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006e52:	89 f0                	mov    eax,esi
c0006e54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e58:	43                   	inc    ebx
c0006e59:	e9 85 fe ff ff       	jmp    c0006ce3 <f_setlabel+0xd4>
c0006e5e:	83 fb 09             	cmp    ebx,0x9
c0006e61:	0f 87 1a fe ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006e67:	89 f0                	mov    eax,esi
c0006e69:	66 c1 e8 08          	shr    ax,0x8
c0006e6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e71:	43                   	inc    ebx
c0006e72:	eb de                	jmp    c0006e52 <f_setlabel+0x243>
c0006e74:	83 c4 74             	add    esp,0x74
c0006e77:	89 f0                	mov    eax,esi
c0006e79:	5b                   	pop    ebx
c0006e7a:	5e                   	pop    esi
c0006e7b:	c3                   	ret    

c0006e7c <f_forward>:
c0006e7c:	55                   	push   ebp
c0006e7d:	57                   	push   edi
c0006e7e:	56                   	push   esi
c0006e7f:	53                   	push   ebx
c0006e80:	83 ec 2c             	sub    esp,0x2c
c0006e83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006e8b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006e8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006e95:	89 d8                	mov    eax,ebx
c0006e97:	e8 f3 b1 ff ff       	call   c000208f <validate>
c0006e9c:	89 c5                	mov    ebp,eax
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	0f 85 aa 01 00 00    	jne    c0007050 <f_forward+0x1d4>
c0006ea6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eaa:	85 ed                	test   ebp,ebp
c0006eac:	0f 85 9e 01 00 00    	jne    c0007050 <f_forward+0x1d4>
c0006eb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006eb6:	0f 84 8f 01 00 00    	je     c000704b <f_forward+0x1cf>
c0006ebc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006ebf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006ec2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006ec5:	bf 00 00 00 00       	mov    edi,0x0
c0006eca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006ecd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ed1:	89 d1                	mov    ecx,edx
c0006ed3:	19 f9                	sbb    ecx,edi
c0006ed5:	0f 83 cf 00 00 00    	jae    c0006faa <f_forward+0x12e>
c0006edb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006edf:	e9 c6 00 00 00       	jmp    c0006faa <f_forward+0x12e>
c0006ee4:	50                   	push   eax
c0006ee5:	50                   	push   eax
c0006ee6:	6a 00                	push   0x0
c0006ee8:	6a 00                	push   0x0
c0006eea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006eee:	83 c4 10             	add    esp,0x10
c0006ef1:	85 c0                	test   eax,eax
c0006ef3:	0f 84 57 01 00 00    	je     c0007050 <f_forward+0x1d4>
c0006ef9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006efd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f00:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f03:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f07:	89 d7                	mov    edi,edx
c0006f09:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f12:	21 ce                	and    esi,ecx
c0006f14:	89 c1                	mov    ecx,eax
c0006f16:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f1c:	0f 84 98 00 00 00    	je     c0006fba <f_forward+0x13e>
c0006f22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f26:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f29:	89 c8                	mov    eax,ecx
c0006f2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f2f:	e8 f8 ac ff ff       	call   c0001c2c <clst2sect>
c0006f34:	89 d7                	mov    edi,edx
c0006f36:	09 c7                	or     edi,eax
c0006f38:	0f 84 9e 00 00 00    	je     c0006fdc <f_forward+0x160>
c0006f3e:	31 ff                	xor    edi,edi
c0006f40:	01 c6                	add    esi,eax
c0006f42:	11 d7                	adc    edi,edx
c0006f44:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f47:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f4e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f51:	39 fa                	cmp    edx,edi
c0006f53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f57:	0f 85 a2 00 00 00    	jne    c0006fff <f_forward+0x183>
c0006f5d:	39 f0                	cmp    eax,esi
c0006f5f:	0f 85 9a 00 00 00    	jne    c0006fff <f_forward+0x183>
c0006f65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f68:	ba 00 02 00 00       	mov    edx,0x200
c0006f6d:	25 ff 01 00 00       	and    eax,0x1ff
c0006f72:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006f76:	29 c2                	sub    edx,eax
c0006f78:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006f7b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006f7e:	39 d1                	cmp    ecx,edx
c0006f80:	76 02                	jbe    c0006f84 <f_forward+0x108>
c0006f82:	89 d1                	mov    ecx,edx
c0006f84:	52                   	push   edx
c0006f85:	8d 73 50             	lea    esi,[ebx+0x50]
c0006f88:	52                   	push   edx
c0006f89:	01 c6                	add    esi,eax
c0006f8b:	51                   	push   ecx
c0006f8c:	56                   	push   esi
c0006f8d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f91:	83 c4 10             	add    esp,0x10
c0006f94:	85 c0                	test   eax,eax
c0006f96:	74 44                	je     c0006fdc <f_forward+0x160>
c0006f98:	31 ff                	xor    edi,edi
c0006f9a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006f9d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fa0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fa4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fa8:	01 07                	add    DWORD PTR [edi],eax
c0006faa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006faf:	0f 85 2f ff ff ff    	jne    c0006ee4 <f_forward+0x68>
c0006fb5:	e9 96 00 00 00       	jmp    c0007050 <f_forward+0x1d4>
c0006fba:	85 f6                	test   esi,esi
c0006fbc:	0f 85 60 ff ff ff    	jne    c0006f22 <f_forward+0xa6>
c0006fc2:	89 d7                	mov    edi,edx
c0006fc4:	09 c7                	or     edi,eax
c0006fc6:	75 05                	jne    c0006fcd <f_forward+0x151>
c0006fc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006fcb:	eb 0a                	jmp    c0006fd7 <f_forward+0x15b>
c0006fcd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fd0:	89 d8                	mov    eax,ebx
c0006fd2:	e8 15 bd ff ff       	call   c0002cec <get_fat>
c0006fd7:	83 f8 01             	cmp    eax,0x1
c0006fda:	77 0b                	ja     c0006fe7 <f_forward+0x16b>
c0006fdc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0006fe0:	bd 02 00 00 00       	mov    ebp,0x2
c0006fe5:	eb 69                	jmp    c0007050 <f_forward+0x1d4>
c0006fe7:	83 f8 ff             	cmp    eax,0xffffffff
c0006fea:	75 0b                	jne    c0006ff7 <f_forward+0x17b>
c0006fec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0006ff0:	bd 01 00 00 00       	mov    ebp,0x1
c0006ff5:	eb 59                	jmp    c0007050 <f_forward+0x1d4>
c0006ff7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0006ffa:	e9 23 ff ff ff       	jmp    c0006f22 <f_forward+0xa6>
c0006fff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007003:	79 20                	jns    c0007025 <f_forward+0x1a9>
c0007005:	83 ec 0c             	sub    esp,0xc
c0007008:	6a 01                	push   0x1
c000700a:	52                   	push   edx
c000700b:	50                   	push   eax
c000700c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007010:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007014:	50                   	push   eax
c0007015:	e8 44 a9 ff ff       	call   c000195e <disk_write>
c000701a:	83 c4 20             	add    esp,0x20
c000701d:	85 c0                	test   eax,eax
c000701f:	75 cb                	jne    c0006fec <f_forward+0x170>
c0007021:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	6a 01                	push   0x1
c000702a:	57                   	push   edi
c000702b:	56                   	push   esi
c000702c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007030:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007034:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007038:	50                   	push   eax
c0007039:	e8 0a a9 ff ff       	call   c0001948 <disk_read>
c000703e:	83 c4 20             	add    esp,0x20
c0007041:	85 c0                	test   eax,eax
c0007043:	0f 84 1c ff ff ff    	je     c0006f65 <f_forward+0xe9>
c0007049:	eb a1                	jmp    c0006fec <f_forward+0x170>
c000704b:	bd 07 00 00 00       	mov    ebp,0x7
c0007050:	83 c4 2c             	add    esp,0x2c
c0007053:	89 e8                	mov    eax,ebp
c0007055:	5b                   	pop    ebx
c0007056:	5e                   	pop    esi
c0007057:	5f                   	pop    edi
c0007058:	5d                   	pop    ebp
c0007059:	c3                   	ret    

c000705a <f_mkfs>:
c000705a:	55                   	push   ebp
c000705b:	57                   	push   edi
c000705c:	56                   	push   esi
c000705d:	53                   	push   ebx
c000705e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007063:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007069:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007070:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007077:	e8 f9 ae ff ff       	call   c0001f75 <get_ldnumber>
c000707c:	85 c0                	test   eax,eax
c000707e:	0f 88 e8 10 00 00    	js     c000816c <f_mkfs+0x1112>
c0007084:	8b 14 85 a0 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc060]
c000708b:	85 d2                	test   edx,edx
c000708d:	74 03                	je     c0007092 <f_mkfs+0x38>
c000708f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007092:	85 f6                	test   esi,esi
c0007094:	75 05                	jne    c000709b <f_mkfs+0x41>
c0007096:	be 20 fd 01 c0       	mov    esi,0xc001fd20
c000709b:	0f b6 c0             	movzx  eax,al
c000709e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a2:	83 ec 0c             	sub    esp,0xc
c00070a5:	bb 03 00 00 00       	mov    ebx,0x3
c00070aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070ae:	e8 92 a8 ff ff       	call   c0001945 <disk_initialize>
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	a8 01                	test   al,0x1
c00070b8:	0f 85 ae 10 00 00    	jne    c000816c <f_mkfs+0x1112>
c00070be:	bb 0a 00 00 00       	mov    ebx,0xa
c00070c3:	a8 04                	test   al,0x4
c00070c5:	0f 85 a1 10 00 00    	jne    c000816c <f_mkfs+0x1112>
c00070cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00070ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00070d2:	85 c0                	test   eax,eax
c00070d4:	75 20                	jne    c00070f6 <f_mkfs+0x9c>
c00070d6:	51                   	push   ecx
c00070d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00070db:	50                   	push   eax
c00070dc:	6a 03                	push   0x3
c00070de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070e2:	e8 8d a8 ff ff       	call   c0001974 <disk_ioctl>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	85 c0                	test   eax,eax
c00070ec:	74 08                	je     c00070f6 <f_mkfs+0x9c>
c00070ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00070f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00070fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00070fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007102:	77 04                	ja     c0007108 <f_mkfs+0xae>
c0007104:	85 c2                	test   edx,eax
c0007106:	74 08                	je     c0007110 <f_mkfs+0xb6>
c0007108:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007110:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007113:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c0007117:	48                   	dec    eax
c0007118:	3c 01                	cmp    al,0x1
c000711a:	76 05                	jbe    c0007121 <f_mkfs+0xc7>
c000711c:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c0007121:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007124:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007128:	48                   	dec    eax
c0007129:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000712e:	77 07                	ja     c0007137 <f_mkfs+0xdd>
c0007130:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007135:	74 08                	je     c000713f <f_mkfs+0xe5>
c0007137:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000713f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007142:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007148:	77 07                	ja     c0007151 <f_mkfs+0xf7>
c000714a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000714d:	85 d8                	test   eax,ebx
c000714f:	74 02                	je     c0007153 <f_mkfs+0xf9>
c0007151:	31 db                	xor    ebx,ebx
c0007153:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000715e:	77 0a                	ja     c000716a <f_mkfs+0x110>
c0007160:	bb 11 00 00 00       	mov    ebx,0x11
c0007165:	e9 02 10 00 00       	jmp    c000816c <f_mkfs+0x1112>
c000716a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007171:	8b 36                	mov    esi,DWORD PTR [esi]
c0007173:	85 ed                	test   ebp,ebp
c0007175:	75 1e                	jne    c0007195 <f_mkfs+0x13b>
c0007177:	83 ec 0c             	sub    esp,0xc
c000717a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007181:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007186:	50                   	push   eax
c0007187:	e8 ed 0f 00 00       	call   c0008179 <ff_memalloc>
c000718c:	83 c4 10             	add    esp,0x10
c000718f:	89 c5                	mov    ebp,eax
c0007191:	85 c0                	test   eax,eax
c0007193:	74 cb                	je     c0007160 <f_mkfs+0x106>
c0007195:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000719d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071a5:	52                   	push   edx
c00071a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071aa:	50                   	push   eax
c00071ab:	6a 01                	push   0x1
c00071ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071b1:	e8 be a7 ff ff       	call   c0001974 <disk_ioctl>
c00071b6:	83 c4 10             	add    esp,0x10
c00071b9:	85 c0                	test   eax,eax
c00071bb:	0f 85 46 0f 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00071c1:	89 f1                	mov    ecx,esi
c00071c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00071cb:	83 e1 0f             	and    ecx,0xf
c00071ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00071da:	83 e6 08             	and    esi,0x8
c00071dd:	75 56                	jne    c0007235 <f_mkfs+0x1db>
c00071df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00071e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00071e7:	83 ff 00             	cmp    edi,0x0
c00071ea:	76 20                	jbe    c000720c <f_mkfs+0x1b2>
c00071ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00071f1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00071f7:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00071ff:	83 d7 ff             	adc    edi,0xffffffff
c0007202:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007206:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000720a:	eb 21                	jmp    c000722d <f_mkfs+0x1d3>
c000720c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007211:	39 f2                	cmp    edx,esi
c0007213:	19 f8                	sbb    eax,edi
c0007215:	73 1e                	jae    c0007235 <f_mkfs+0x1db>
c0007217:	83 c6 c1             	add    esi,0xffffffc1
c000721a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007222:	83 d7 ff             	adc    edi,0xffffffff
c0007225:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007229:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000722d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007235:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007239:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000723d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007240:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007244:	ba 7f 00 00 00       	mov    edx,0x7f
c0007249:	31 c0                	xor    eax,eax
c000724b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000724e:	89 c7                	mov    edi,eax
c0007250:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007254:	0f 83 c1 0a 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c000725a:	89 df                	mov    edi,ebx
c000725c:	c1 ef 09             	shr    edi,0x9
c000725f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007263:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000726a:	c1 ef 09             	shr    edi,0x9
c000726d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007272:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007276:	74 29                	je     c00072a1 <f_mkfs+0x247>
c0007278:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000727d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007283:	0f 97 c2             	seta   dl
c0007286:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007289:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000728d:	0f 92 c0             	setb   al
c0007290:	08 c2                	or     dl,al
c0007292:	75 5b                	jne    c00072ef <f_mkfs+0x295>
c0007294:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007298:	83 e0 07             	and    eax,0x7
c000729b:	3c 04                	cmp    al,0x4
c000729d:	74 50                	je     c00072ef <f_mkfs+0x295>
c000729f:	eb 1b                	jmp    c00072bc <f_mkfs+0x262>
c00072a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072a6:	0f 87 6f 0a 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c00072ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072b2:	76 08                	jbe    c00072bc <f_mkfs+0x262>
c00072b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00072bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00072c4:	83 e0 01             	and    eax,0x1
c00072c7:	80 e1 02             	and    cl,0x2
c00072ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00072ce:	74 0d                	je     c00072dd <f_mkfs+0x283>
c00072d0:	84 c0                	test   al,al
c00072d2:	0f 84 4f 09 00 00    	je     c0007c27 <f_mkfs+0xbcd>
c00072d8:	e9 0e 08 00 00       	jmp    c0007aeb <f_mkfs+0xa91>
c00072dd:	bb 13 00 00 00       	mov    ebx,0x13
c00072e2:	84 c0                	test   al,al
c00072e4:	0f 85 01 08 00 00    	jne    c0007aeb <f_mkfs+0xa91>
c00072ea:	e9 35 0e 00 00       	jmp    c0008124 <f_mkfs+0x10ca>
c00072ef:	ba ff 0f 00 00       	mov    edx,0xfff
c00072f4:	31 c0                	xor    eax,eax
c00072f6:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00072f9:	89 c7                	mov    edi,eax
c00072fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00072ff:	0f 83 16 0a 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c0007305:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000730b:	77 39                	ja     c0007346 <f_mkfs+0x2ec>
c000730d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007312:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000731a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000731d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007321:	73 08                	jae    c000732b <f_mkfs+0x2d1>
c0007323:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000732b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007330:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007333:	b8 00 00 00 00       	mov    eax,0x0
c0007338:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733c:	73 08                	jae    c0007346 <f_mkfs+0x2ec>
c000733e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000734a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000734e:	83 c0 20             	add    eax,0x20
c0007351:	83 d2 00             	adc    edx,0x0
c0007354:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007358:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000735c:	31 d2                	xor    edx,edx
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	52                   	push   edx
c0007363:	50                   	push   eax
c0007364:	31 ff                	xor    edi,edi
c0007366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000736a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000736e:	e8 49 7a 01 00       	call   c001edbc <__udivdi3>
c0007373:	83 c4 10             	add    esp,0x10
c0007376:	c1 e0 02             	shl    eax,0x2
c0007379:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000737d:	05 07 02 00 00       	add    eax,0x207
c0007382:	89 f1                	mov    ecx,esi
c0007384:	c1 e8 09             	shr    eax,0x9
c0007387:	89 fb                	mov    ebx,edi
c0007389:	83 c1 ff             	add    ecx,0xffffffff
c000738c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007390:	83 d3 ff             	adc    ebx,0xffffffff
c0007393:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007397:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000739b:	31 d2                	xor    edx,edx
c000739d:	01 c8                	add    eax,ecx
c000739f:	11 da                	adc    edx,ebx
c00073a1:	89 c1                	mov    ecx,eax
c00073a3:	f7 de                	neg    esi
c00073a5:	83 d7 00             	adc    edi,0x0
c00073a8:	21 f1                	and    ecx,esi
c00073aa:	f7 df                	neg    edi
c00073ac:	89 d0                	mov    eax,edx
c00073ae:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073b2:	21 f8                	and    eax,edi
c00073b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00073b8:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00073bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00073c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073c8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00073cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00073d3:	d1 ea                	shr    edx,1
c00073d5:	89 df                	mov    edi,ebx
c00073d7:	39 c1                	cmp    ecx,eax
c00073d9:	19 d7                	sbb    edi,edx
c00073db:	0f 83 3a 09 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c00073e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073e5:	31 d2                	xor    edx,edx
c00073e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00073eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00073ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00073f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00073fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00073fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007402:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007406:	83 f8 0f             	cmp    eax,0xf
c0007409:	0f 86 0c 09 00 00    	jbe    c0007d1b <f_mkfs+0xcc1>
c000740f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007417:	0f 87 fe 08 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c000741d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007421:	31 d2                	xor    edx,edx
c0007423:	83 c0 07             	add    eax,0x7
c0007426:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000742e:	c1 e8 03             	shr    eax,0x3
c0007431:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007439:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000743d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007441:	c1 e0 09             	shl    eax,0x9
c0007444:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000744b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000744f:	48                   	dec    eax
c0007450:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007454:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007458:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000745c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007460:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746b:	31 d2                	xor    edx,edx
c000746d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007472:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007476:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000747a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000747e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007482:	31 ff                	xor    edi,edi
c0007484:	31 f6                	xor    esi,esi
c0007486:	31 db                	xor    ebx,ebx
c0007488:	85 ff                	test   edi,edi
c000748a:	74 05                	je     c0007491 <f_mkfs+0x437>
c000748c:	4f                   	dec    edi
c000748d:	74 44                	je     c00074d3 <f_mkfs+0x479>
c000748f:	eb 4f                	jmp    c00074e0 <f_mkfs+0x486>
c0007491:	83 ec 0c             	sub    esp,0xc
c0007494:	0f b7 c3             	movzx  eax,bx
c0007497:	50                   	push   eax
c0007498:	e8 0e 0e 00 00       	call   c00082ab <ff_wtoupper>
c000749d:	83 c4 10             	add    esp,0x10
c00074a0:	89 c1                	mov    ecx,eax
c00074a2:	66 39 c3             	cmp    bx,ax
c00074a5:	8d 53 01             	lea    edx,[ebx+0x1]
c00074a8:	75 3e                	jne    c00074e8 <f_mkfs+0x48e>
c00074aa:	be 01 00 00 00       	mov    esi,0x1
c00074af:	89 df                	mov    edi,ebx
c00074b1:	66 01 f7             	add    di,si
c00074b4:	75 07                	jne    c00074bd <f_mkfs+0x463>
c00074b6:	83 fe 7f             	cmp    esi,0x7f
c00074b9:	77 31                	ja     c00074ec <f_mkfs+0x492>
c00074bb:	eb 16                	jmp    c00074d3 <f_mkfs+0x479>
c00074bd:	83 ec 0c             	sub    esp,0xc
c00074c0:	0f b7 ff             	movzx  edi,di
c00074c3:	57                   	push   edi
c00074c4:	e8 e2 0d 00 00       	call   c00082ab <ff_wtoupper>
c00074c9:	83 c4 10             	add    esp,0x10
c00074cc:	39 c7                	cmp    edi,eax
c00074ce:	75 e6                	jne    c00074b6 <f_mkfs+0x45c>
c00074d0:	46                   	inc    esi
c00074d1:	eb dc                	jmp    c00074af <f_mkfs+0x455>
c00074d3:	31 c0                	xor    eax,eax
c00074d5:	4e                   	dec    esi
c00074d6:	0f 95 c0             	setne  al
c00074d9:	89 d9                	mov    ecx,ebx
c00074db:	89 c7                	mov    edi,eax
c00074dd:	43                   	inc    ebx
c00074de:	eb 14                	jmp    c00074f4 <f_mkfs+0x49a>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	01 f3                	add    ebx,esi
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	eb 0c                	jmp    c00074f4 <f_mkfs+0x49a>
c00074e8:	89 d3                	mov    ebx,edx
c00074ea:	eb 08                	jmp    c00074f4 <f_mkfs+0x49a>
c00074ec:	bf 02 00 00 00       	mov    edi,0x2
c00074f1:	83 c9 ff             	or     ecx,0xffffffff
c00074f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00074fb:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00074ff:	0f b6 c1             	movzx  eax,cl
c0007502:	e8 87 a9 ff ff       	call   c0001e8e <xsum32>
c0007507:	66 c1 e9 08          	shr    cx,0x8
c000750b:	89 c2                	mov    edx,eax
c000750d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007510:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007514:	0f b7 c1             	movzx  eax,cx
c0007517:	e8 72 a9 ff ff       	call   c0001e8e <xsum32>
c000751c:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007521:	66 85 db             	test   bx,bx
c0007524:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007528:	74 1f                	je     c0007549 <f_mkfs+0x4ef>
c000752a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000752d:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007534:	83 c0 02             	add    eax,0x2
c0007537:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000753d:	39 c2                	cmp    edx,eax
c000753f:	74 08                	je     c0007549 <f_mkfs+0x4ef>
c0007541:	89 04 24             	mov    DWORD PTR [esp],eax
c0007544:	e9 3f ff ff ff       	jmp    c0007488 <f_mkfs+0x42e>
c0007549:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000754c:	83 ec 0c             	sub    esp,0xc
c000754f:	05 01 02 00 00       	add    eax,0x201
c0007554:	c1 e8 09             	shr    eax,0x9
c0007557:	50                   	push   eax
c0007558:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000755c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007560:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007564:	55                   	push   ebp
c0007565:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007569:	e8 f0 a3 ff ff       	call   c000195e <disk_write>
c000756e:	83 c4 20             	add    esp,0x20
c0007571:	85 c0                	test   eax,eax
c0007573:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007576:	0f 85 8b 0b 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c000757c:	89 d0                	mov    eax,edx
c000757e:	31 d2                	xor    edx,edx
c0007580:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007584:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007588:	66 85 db             	test   bx,bx
c000758b:	74 04                	je     c0007591 <f_mkfs+0x537>
c000758d:	31 c0                	xor    eax,eax
c000758f:	eb b0                	jmp    c0007541 <f_mkfs+0x4e7>
c0007591:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007595:	31 d2                	xor    edx,edx
c0007597:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000759b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000759f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075a3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00075aa:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00075ae:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075b4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075b8:	8d 70 01             	lea    esi,[eax+0x1]
c00075bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c3:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075ce:	c1 eb 09             	shr    ebx,0x9
c00075d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00075d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00075d9:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00075e0:	31 d2                	xor    edx,edx
c00075e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ea:	89 c1                	mov    ecx,eax
c00075ec:	89 e8                	mov    eax,ebp
c00075ee:	e8 34 a4 ff ff       	call   c0001a27 <mem_set>
c00075f3:	31 c0                	xor    eax,eax
c00075f5:	83 fe 07             	cmp    esi,0x7
c00075f8:	76 10                	jbe    c000760a <f_mkfs+0x5b0>
c00075fa:	39 04 24             	cmp    DWORD PTR [esp],eax
c00075fd:	76 0b                	jbe    c000760a <f_mkfs+0x5b0>
c00075ff:	40                   	inc    eax
c0007600:	83 ee 08             	sub    esi,0x8
c0007603:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007608:	eb eb                	jmp    c00075f5 <f_mkfs+0x59b>
c000760a:	b2 01                	mov    dl,0x1
c000760c:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007610:	85 f6                	test   esi,esi
c0007612:	74 0c                	je     c0007620 <f_mkfs+0x5c6>
c0007614:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007617:	76 07                	jbe    c0007620 <f_mkfs+0x5c6>
c0007619:	08 11                	or     BYTE PTR [ecx],dl
c000761b:	4e                   	dec    esi
c000761c:	01 d2                	add    edx,edx
c000761e:	eb f0                	jmp    c0007610 <f_mkfs+0x5b6>
c0007620:	89 df                	mov    edi,ebx
c0007622:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007626:	76 04                	jbe    c000762c <f_mkfs+0x5d2>
c0007628:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000762c:	83 ec 0c             	sub    esp,0xc
c000762f:	57                   	push   edi
c0007630:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007634:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007638:	55                   	push   ebp
c0007639:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000763d:	e8 1c a3 ff ff       	call   c000195e <disk_write>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	85 c0                	test   eax,eax
c0007647:	0f 85 ba 0a 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c000764d:	31 d2                	xor    edx,edx
c000764f:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007653:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007657:	29 fb                	sub    ebx,edi
c0007659:	0f 85 7a ff ff ff    	jne    c00075d9 <f_mkfs+0x57f>
c000765f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007663:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000766b:	31 f6                	xor    esi,esi
c000766d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007671:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007674:	31 d2                	xor    edx,edx
c0007676:	89 e8                	mov    eax,ebp
c0007678:	e8 aa a3 ff ff       	call   c0001a27 <mem_set>
c000767d:	31 c9                	xor    ecx,ecx
c000767f:	85 db                	test   ebx,ebx
c0007681:	75 40                	jne    c00076c3 <f_mkfs+0x669>
c0007683:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007688:	89 e8                	mov    eax,ebp
c000768a:	e8 7a a3 ff ff       	call   c0001a09 <st_dword>
c000768f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007692:	83 ca ff             	or     edx,0xffffffff
c0007695:	bb 02 00 00 00       	mov    ebx,0x2
c000769a:	e8 6a a3 ff ff       	call   c0001a09 <st_dword>
c000769f:	b9 08 00 00 00       	mov    ecx,0x8
c00076a4:	eb 1d                	jmp    c00076c3 <f_mkfs+0x669>
c00076a6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076a9:	76 3b                	jbe    c00076e6 <f_mkfs+0x68c>
c00076ab:	43                   	inc    ebx
c00076ac:	83 fe 01             	cmp    esi,0x1
c00076af:	89 da                	mov    edx,ebx
c00076b1:	77 03                	ja     c00076b6 <f_mkfs+0x65c>
c00076b3:	83 ca ff             	or     edx,0xffffffff
c00076b6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00076ba:	4e                   	dec    esi
c00076bb:	e8 49 a3 ff ff       	call   c0001a09 <st_dword>
c00076c0:	83 c1 04             	add    ecx,0x4
c00076c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00076c7:	85 f6                	test   esi,esi
c00076c9:	75 db                	jne    c00076a6 <f_mkfs+0x64c>
c00076cb:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00076d0:	77 14                	ja     c00076e6 <f_mkfs+0x68c>
c00076d2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00076d9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00076dd:	85 f6                	test   esi,esi
c00076df:	74 05                	je     c00076e6 <f_mkfs+0x68c>
c00076e1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076e4:	77 dd                	ja     c00076c3 <f_mkfs+0x669>
c00076e6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00076ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00076ee:	39 cf                	cmp    edi,ecx
c00076f0:	76 02                	jbe    c00076f4 <f_mkfs+0x69a>
c00076f2:	89 cf                	mov    edi,ecx
c00076f4:	83 ec 0c             	sub    esp,0xc
c00076f7:	57                   	push   edi
c00076f8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00076fc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007700:	55                   	push   ebp
c0007701:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007705:	e8 54 a2 ff ff       	call   c000195e <disk_write>
c000770a:	83 c4 20             	add    esp,0x20
c000770d:	85 c0                	test   eax,eax
c000770f:	0f 85 f2 09 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007715:	31 d2                	xor    edx,edx
c0007717:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c000771b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000771f:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c0007723:	0f 85 48 ff ff ff    	jne    c0007671 <f_mkfs+0x617>
c0007729:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772c:	31 d2                	xor    edx,edx
c000772e:	89 e8                	mov    eax,ebp
c0007730:	31 ff                	xor    edi,edi
c0007732:	e8 f0 a2 ff ff       	call   c0001a27 <mem_set>
c0007737:	8d 45 34             	lea    eax,[ebp+0x34]
c000773a:	ba 02 00 00 00       	mov    edx,0x2
c000773f:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007743:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007747:	e8 bd a2 ff ff       	call   c0001a09 <st_dword>
c000774c:	8d 45 38             	lea    eax,[ebp+0x38]
c000774f:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007753:	e8 b1 a2 ff ff       	call   c0001a09 <st_dword>
c0007758:	8d 45 44             	lea    eax,[ebp+0x44]
c000775b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000775f:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007763:	e8 a1 a2 ff ff       	call   c0001a09 <st_dword>
c0007768:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000776c:	8d 45 54             	lea    eax,[ebp+0x54]
c000776f:	83 c2 02             	add    edx,0x2
c0007772:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007776:	e8 8e a2 ff ff       	call   c0001a09 <st_dword>
c000777b:	8d 45 58             	lea    eax,[ebp+0x58]
c000777e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007782:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007786:	e8 7e a2 ff ff       	call   c0001a09 <st_dword>
c000778b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000778f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007794:	89 c6                	mov    esi,eax
c0007796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000779e:	89 04 24             	mov    DWORD PTR [esp],eax
c00077a1:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077a5:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ac:	39 cb                	cmp    ebx,ecx
c00077ae:	76 02                	jbe    c00077b2 <f_mkfs+0x758>
c00077b0:	89 cb                	mov    ebx,ecx
c00077b2:	83 ec 0c             	sub    esp,0xc
c00077b5:	53                   	push   ebx
c00077b6:	57                   	push   edi
c00077b7:	56                   	push   esi
c00077b8:	55                   	push   ebp
c00077b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077bd:	e8 9c a1 ff ff       	call   c000195e <disk_write>
c00077c2:	83 c4 20             	add    esp,0x20
c00077c5:	85 c0                	test   eax,eax
c00077c7:	0f 85 3a 09 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00077cd:	31 d2                	xor    edx,edx
c00077cf:	b9 00 02 00 00       	mov    ecx,0x200
c00077d4:	89 e8                	mov    eax,ebp
c00077d6:	e8 4c a2 ff ff       	call   c0001a27 <mem_set>
c00077db:	31 d2                	xor    edx,edx
c00077dd:	01 de                	add    esi,ebx
c00077df:	11 d7                	adc    edi,edx
c00077e1:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00077e4:	75 bf                	jne    c00077a5 <f_mkfs+0x74b>
c00077e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00077ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00077ee:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00077f6:	b9 00 02 00 00       	mov    ecx,0x200
c00077fb:	31 d2                	xor    edx,edx
c00077fd:	89 e8                	mov    eax,ebp
c00077ff:	e8 23 a2 ff ff       	call   c0001a27 <mem_set>
c0007804:	b9 0b 00 00 00       	mov    ecx,0xb
c0007809:	ba 00 fe 01 c0       	mov    edx,0xc001fe00
c000780e:	89 e8                	mov    eax,ebp
c0007810:	e8 fd a1 ff ff       	call   c0001a12 <mem_cpy>
c0007815:	8d 45 40             	lea    eax,[ebp+0x40]
c0007818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000781c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007820:	e8 e7 a1 ff ff       	call   c0001a0c <st_qword>
c0007825:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007829:	8d 45 48             	lea    eax,[ebp+0x48]
c000782c:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007830:	e8 d7 a1 ff ff       	call   c0001a0c <st_qword>
c0007835:	8d 45 50             	lea    eax,[ebp+0x50]
c0007838:	ba 20 00 00 00       	mov    edx,0x20
c000783d:	e8 c7 a1 ff ff       	call   c0001a09 <st_dword>
c0007842:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007846:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000784a:	e8 ba a1 ff ff       	call   c0001a09 <st_dword>
c000784f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007853:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007857:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000785b:	e8 a9 a1 ff ff       	call   c0001a09 <st_dword>
c0007860:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007863:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007867:	e8 9d a1 ff ff       	call   c0001a09 <st_dword>
c000786c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007870:	8d 50 02             	lea    edx,[eax+0x2]
c0007873:	8d 45 60             	lea    eax,[ebp+0x60]
c0007876:	e8 8e a1 ff ff       	call   c0001a09 <st_dword>
c000787b:	8d 45 64             	lea    eax,[ebp+0x64]
c000787e:	ba 00 00 21 50       	mov    edx,0x50210000
c0007883:	e8 81 a1 ff ff       	call   c0001a09 <st_dword>
c0007888:	8d 45 68             	lea    eax,[ebp+0x68]
c000788b:	ba 00 01 00 00       	mov    edx,0x100
c0007890:	e8 70 a1 ff ff       	call   c0001a05 <st_word>
c0007895:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007899:	b8 0a 00 00 00       	mov    eax,0xa
c000789e:	48                   	dec    eax
c000789f:	74 05                	je     c00078a6 <f_mkfs+0x84c>
c00078a1:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078a4:	eb f8                	jmp    c000789e <f_mkfs+0x844>
c00078a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078aa:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078b2:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078b6:	74 05                	je     c00078bd <f_mkfs+0x863>
c00078b8:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00078bb:	eb f5                	jmp    c00078b2 <f_mkfs+0x858>
c00078bd:	8d 45 78             	lea    eax,[ebp+0x78]
c00078c0:	ba eb fe 00 00       	mov    edx,0xfeeb
c00078c5:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00078cb:	31 db                	xor    ebx,ebx
c00078cd:	e8 33 a1 ff ff       	call   c0001a05 <st_word>
c00078d2:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00078d8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00078dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e0:	e8 20 a1 ff ff       	call   c0001a05 <st_word>
c00078e5:	31 c9                	xor    ecx,ecx
c00078e7:	8d 41 96             	lea    eax,[ecx-0x6a]
c00078ea:	83 f8 01             	cmp    eax,0x1
c00078ed:	76 13                	jbe    c0007902 <f_mkfs+0x8a8>
c00078ef:	83 f9 70             	cmp    ecx,0x70
c00078f2:	74 0e                	je     c0007902 <f_mkfs+0x8a8>
c00078f4:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00078f9:	89 da                	mov    edx,ebx
c00078fb:	e8 8e a5 ff ff       	call   c0001e8e <xsum32>
c0007900:	89 c3                	mov    ebx,eax
c0007902:	41                   	inc    ecx
c0007903:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007909:	75 dc                	jne    c00078e7 <f_mkfs+0x88d>
c000790b:	89 f0                	mov    eax,esi
c000790d:	89 fa                	mov    edx,edi
c000790f:	83 c0 01             	add    eax,0x1
c0007912:	83 d2 00             	adc    edx,0x0
c0007915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007919:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	6a 01                	push   0x1
c0007922:	57                   	push   edi
c0007923:	56                   	push   esi
c0007924:	55                   	push   ebp
c0007925:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007929:	e8 30 a0 ff ff       	call   c000195e <disk_write>
c000792e:	83 c4 20             	add    esp,0x20
c0007931:	85 c0                	test   eax,eax
c0007933:	0f 85 ce 07 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007939:	31 d2                	xor    edx,edx
c000793b:	b9 00 02 00 00       	mov    ecx,0x200
c0007940:	89 e8                	mov    eax,ebp
c0007942:	e8 e0 a0 ff ff       	call   c0001a27 <mem_set>
c0007947:	ba 55 aa 00 00       	mov    edx,0xaa55
c000794c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000794f:	e8 b1 a0 ff ff       	call   c0001a05 <st_word>
c0007954:	89 f0                	mov    eax,esi
c0007956:	83 c0 09             	add    eax,0x9
c0007959:	89 fa                	mov    edx,edi
c000795b:	83 d2 00             	adc    edx,0x0
c000795e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007961:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007965:	31 c9                	xor    ecx,ecx
c0007967:	41                   	inc    ecx
c0007968:	89 da                	mov    edx,ebx
c000796a:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c000796f:	e8 1a a5 ff ff       	call   c0001e8e <xsum32>
c0007974:	89 c3                	mov    ebx,eax
c0007976:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000797c:	75 e9                	jne    c0007967 <f_mkfs+0x90d>
c000797e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007982:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007986:	83 c0 01             	add    eax,0x1
c0007989:	83 d2 00             	adc    edx,0x0
c000798c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007990:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007994:	83 ec 0c             	sub    esp,0xc
c0007997:	6a 01                	push   0x1
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079a1:	55                   	push   ebp
c00079a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a6:	e8 b3 9f ff ff       	call   c000195e <disk_write>
c00079ab:	83 c4 20             	add    esp,0x20
c00079ae:	85 c0                	test   eax,eax
c00079b0:	0f 85 51 07 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00079b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079ba:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00079be:	75 09                	jne    c00079c9 <f_mkfs+0x96f>
c00079c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079c3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00079c7:	74 12                	je     c00079db <f_mkfs+0x981>
c00079c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00079d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d9:	eb 8a                	jmp    c0007965 <f_mkfs+0x90b>
c00079db:	31 d2                	xor    edx,edx
c00079dd:	b9 00 02 00 00       	mov    ecx,0x200
c00079e2:	89 e8                	mov    eax,ebp
c00079e4:	e8 3e a0 ff ff       	call   c0001a27 <mem_set>
c00079e9:	83 c6 0b             	add    esi,0xb
c00079ec:	83 d7 00             	adc    edi,0x0
c00079ef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00079f3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	41                   	inc    ecx
c00079fa:	89 da                	mov    edx,ebx
c00079fc:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a01:	e8 88 a4 ff ff       	call   c0001e8e <xsum32>
c0007a06:	89 c3                	mov    ebx,eax
c0007a08:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0e:	75 e9                	jne    c00079f9 <f_mkfs+0x99f>
c0007a10:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a17:	83 c6 01             	add    esi,0x1
c0007a1a:	83 d7 00             	adc    edi,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	6a 01                	push   0x1
c0007a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a2a:	55                   	push   ebp
c0007a2b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2f:	e8 2a 9f ff ff       	call   c000195e <disk_write>
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	0f 85 c8 06 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007a3f:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a43:	75 06                	jne    c0007a4b <f_mkfs+0x9f1>
c0007a45:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a49:	74 09                	je     c0007a54 <f_mkfs+0x9fa>
c0007a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a4e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a52:	eb a3                	jmp    c00079f7 <f_mkfs+0x99d>
c0007a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a58:	89 da                	mov    edx,ebx
c0007a5a:	01 e8                	add    eax,ebp
c0007a5c:	e8 a8 9f ff ff       	call   c0001a09 <st_dword>
c0007a61:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007a66:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007a6e:	75 e4                	jne    c0007a54 <f_mkfs+0x9fa>
c0007a70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a77:	83 c6 02             	add    esi,0x2
c0007a7a:	83 d7 00             	adc    edi,0x0
c0007a7d:	83 ec 0c             	sub    esp,0xc
c0007a80:	6a 01                	push   0x1
c0007a82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007a86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007a8a:	55                   	push   ebp
c0007a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a8f:	e8 ca 9e ff ff       	call   c000195e <disk_write>
c0007a94:	83 c4 20             	add    esp,0x20
c0007a97:	85 c0                	test   eax,eax
c0007a99:	0f 85 68 06 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007a9f:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aa4:	74 0d                	je     c0007ab3 <f_mkfs+0xa59>
c0007aa6:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007aae:	e9 43 fd ff ff       	jmp    c00077f6 <f_mkfs+0x79c>
c0007ab3:	b1 07                	mov    cl,0x7
c0007ab5:	e9 e3 05 00 00       	jmp    c000809d <f_mkfs+0x1043>
c0007aba:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007abf:	0f 85 4f 02 00 00    	jne    c0007d14 <f_mkfs+0xcba>
c0007ac5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007aca:	0f 86 22 02 00 00    	jbe    c0007cf2 <f_mkfs+0xc98>
c0007ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ad5:	0f 85 81 06 00 00    	jne    c000815c <f_mkfs+0x1102>
c0007adb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ae2:	83 f8 40             	cmp    eax,0x40
c0007ae5:	0f 87 51 06 00 00    	ja     c000813c <f_mkfs+0x10e2>
c0007aeb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007aef:	85 ff                	test   edi,edi
c0007af1:	75 1c                	jne    c0007b0f <f_mkfs+0xab5>
c0007af3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007af6:	ba 00 fd 01 c0       	mov    edx,0xc001fd00
c0007afb:	c1 e9 0c             	shr    ecx,0xc
c0007afe:	bf 01 00 00 00       	mov    edi,0x1
c0007b03:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b06:	66 85 c0             	test   ax,ax
c0007b09:	0f 85 95 01 00 00    	jne    c0007ca4 <f_mkfs+0xc4a>
c0007b0f:	31 d2                	xor    edx,edx
c0007b11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b14:	f7 f7                	div    edi
c0007b16:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b1b:	0f 86 95 01 00 00    	jbe    c0007cb6 <f_mkfs+0xc5c>
c0007b21:	83 c0 02             	add    eax,0x2
c0007b24:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b29:	01 c0                	add    eax,eax
c0007b2b:	05 ff 01 00 00       	add    eax,0x1ff
c0007b30:	be 01 00 00 00       	mov    esi,0x1
c0007b35:	c1 e8 09             	shr    eax,0x9
c0007b38:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b40:	c1 e0 05             	shl    eax,0x5
c0007b43:	c1 e8 09             	shr    eax,0x9
c0007b46:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007b4a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007b4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b53:	89 f0                	mov    eax,esi
c0007b55:	31 d2                	xor    edx,edx
c0007b57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007b5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007b5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007b63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007b67:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007b6b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007b70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007b74:	31 d2                	xor    edx,edx
c0007b76:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007b7a:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	01 c8                	add    eax,ecx
c0007b82:	11 da                	adc    edx,ebx
c0007b84:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007b88:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007b8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007b90:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007b94:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007b98:	f7 da                	neg    edx
c0007b9a:	21 d1                	and    ecx,edx
c0007b9c:	29 d9                	sub    ecx,ebx
c0007b9e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ba3:	0f 85 20 01 00 00    	jne    c0007cc9 <f_mkfs+0xc6f>
c0007ba9:	31 db                	xor    ebx,ebx
c0007bab:	01 ce                	add    esi,ecx
c0007bad:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bb1:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bb5:	89 f8                	mov    eax,edi
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	c1 e0 04             	shl    eax,0x4
c0007bbc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007bc0:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007bc4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007bc8:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007bcc:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007bd0:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007bd3:	19 d3                	sbb    ebx,edx
c0007bd5:	0f 82 40 01 00 00    	jb     c0007d1b <f_mkfs+0xcc1>
c0007bdb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007be2:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007be7:	89 c8                	mov    eax,ecx
c0007be9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007bed:	29 f0                	sub    eax,esi
c0007bef:	29 d0                	sub    eax,edx
c0007bf1:	31 d2                	xor    edx,edx
c0007bf3:	f7 f7                	div    edi
c0007bf5:	89 c3                	mov    ebx,eax
c0007bf7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007bfc:	0f 85 b8 fe ff ff    	jne    c0007aba <f_mkfs+0xa60>
c0007c02:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c07:	0f 87 1d 01 00 00    	ja     c0007d2a <f_mkfs+0xcd0>
c0007c0d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c12:	0f 85 03 01 00 00    	jne    c0007d1b <f_mkfs+0xcc1>
c0007c18:	83 ff 01             	cmp    edi,0x1
c0007c1b:	0f 86 fa 00 00 00    	jbe    c0007d1b <f_mkfs+0xcc1>
c0007c21:	d1 ef                	shr    edi,1
c0007c23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c27:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c2e:	85 db                	test   ebx,ebx
c0007c30:	75 2d                	jne    c0007c5f <f_mkfs+0xc05>
c0007c32:	89 cb                	mov    ebx,ecx
c0007c34:	ba 10 fd 01 c0       	mov    edx,0xc001fd10
c0007c39:	c1 eb 11             	shr    ebx,0x11
c0007c3c:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c44:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c47:	66 85 c0             	test   ax,ax
c0007c4a:	74 11                	je     c0007c5d <f_mkfs+0xc03>
c0007c4c:	83 c2 02             	add    edx,0x2
c0007c4f:	39 d8                	cmp    eax,ebx
c0007c51:	77 0a                	ja     c0007c5d <f_mkfs+0xc03>
c0007c53:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c57:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007c5b:	eb e7                	jmp    c0007c44 <f_mkfs+0xbea>
c0007c5d:	31 db                	xor    ebx,ebx
c0007c5f:	31 d2                	xor    edx,edx
c0007c61:	89 c8                	mov    eax,ecx
c0007c63:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007c67:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007c6e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007c73:	c1 ea 09             	shr    edx,0x9
c0007c76:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007c7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c7f:	0f 87 96 00 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c0007c85:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c89:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007c91:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c95:	be 20 00 00 00       	mov    esi,0x20
c0007c9a:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007c9f:	e9 a6 fe ff ff       	jmp    c0007b4a <f_mkfs+0xaf0>
c0007ca4:	83 c2 02             	add    edx,0x2
c0007ca7:	39 c8                	cmp    eax,ecx
c0007ca9:	0f 87 60 fe ff ff    	ja     c0007b0f <f_mkfs+0xab5>
c0007caf:	01 ff                	add    edi,edi
c0007cb1:	e9 4d fe ff ff       	jmp    c0007b03 <f_mkfs+0xaa9>
c0007cb6:	8d 04 40             	lea    eax,[eax+eax*2]
c0007cb9:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007cbe:	40                   	inc    eax
c0007cbf:	d1 e8                	shr    eax,1
c0007cc1:	83 c0 03             	add    eax,0x3
c0007cc4:	e9 62 fe ff ff       	jmp    c0007b2b <f_mkfs+0xad1>
c0007cc9:	31 d2                	xor    edx,edx
c0007ccb:	89 c8                	mov    eax,ecx
c0007ccd:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007cd1:	85 d2                	test   edx,edx
c0007cd3:	74 0c                	je     c0007ce1 <f_mkfs+0xc87>
c0007cd5:	49                   	dec    ecx
c0007cd6:	46                   	inc    esi
c0007cd7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007cdc:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ce1:	89 c8                	mov    eax,ecx
c0007ce3:	31 d2                	xor    edx,edx
c0007ce5:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007ce9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007ced:	e9 c3 fe ff ff       	jmp    c0007bb5 <f_mkfs+0xb5b>
c0007cf2:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007cf7:	77 31                	ja     c0007d2a <f_mkfs+0xcd0>
c0007cf9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cfe:	75 1b                	jne    c0007d1b <f_mkfs+0xcc1>
c0007d00:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d07:	3d 80 00 00 00       	cmp    eax,0x80
c0007d0c:	0f 86 d9 fd ff ff    	jbe    c0007aeb <f_mkfs+0xa91>
c0007d12:	eb 07                	jmp    c0007d1b <f_mkfs+0xcc1>
c0007d14:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d19:	76 0a                	jbe    c0007d25 <f_mkfs+0xccb>
c0007d1b:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d20:	e9 ff 03 00 00       	jmp    c0008124 <f_mkfs+0x10ca>
c0007d25:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	b9 00 02 00 00       	mov    ecx,0x200
c0007d31:	89 e8                	mov    eax,ebp
c0007d33:	e8 ef 9c ff ff       	call   c0001a27 <mem_set>
c0007d38:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d3d:	ba 22 fe 01 c0       	mov    edx,0xc001fe22
c0007d42:	89 e8                	mov    eax,ebp
c0007d44:	e8 c9 9c ff ff       	call   c0001a12 <mem_cpy>
c0007d49:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d4c:	ba 00 02 00 00       	mov    edx,0x200
c0007d51:	e8 af 9c ff ff       	call   c0001a05 <st_word>
c0007d56:	89 f8                	mov    eax,edi
c0007d58:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007d5b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007d5e:	0f b7 d6             	movzx  edx,si
c0007d61:	e8 9f 9c ff ff       	call   c0001a05 <st_word>
c0007d66:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007d6a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007d6d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d72:	75 08                	jne    c0007d7c <f_mkfs+0xd22>
c0007d74:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007d7c:	8d 45 11             	lea    eax,[ebp+0x11]
c0007d7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007d83:	e8 7d 9c ff ff       	call   c0001a05 <st_word>
c0007d88:	b8 ff ff 00 00       	mov    eax,0xffff
c0007d8d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d91:	39 d0                	cmp    eax,edx
c0007d93:	b8 00 00 00 00       	mov    eax,0x0
c0007d98:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007d9c:	72 0a                	jb     c0007da8 <f_mkfs+0xd4e>
c0007d9e:	8d 45 13             	lea    eax,[ebp+0x13]
c0007da1:	e8 5f 9c ff ff       	call   c0001a05 <st_word>
c0007da6:	eb 08                	jmp    c0007db0 <f_mkfs+0xd56>
c0007da8:	8d 45 20             	lea    eax,[ebp+0x20]
c0007dab:	e8 59 9c ff ff       	call   c0001a09 <st_dword>
c0007db0:	8d 45 18             	lea    eax,[ebp+0x18]
c0007db3:	ba 3f 00 00 00       	mov    edx,0x3f
c0007db8:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007dbc:	e8 44 9c ff ff       	call   c0001a05 <st_word>
c0007dc1:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007dc4:	ba ff 00 00 00       	mov    edx,0xff
c0007dc9:	e8 37 9c ff ff       	call   c0001a05 <st_word>
c0007dce:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007dd5:	e8 2f 9c ff ff       	call   c0001a09 <st_dword>
c0007dda:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ddf:	75 57                	jne    c0007e38 <f_mkfs+0xdde>
c0007de1:	8d 45 43             	lea    eax,[ebp+0x43]
c0007de4:	ba 00 00 21 50       	mov    edx,0x50210000
c0007de9:	e8 1b 9c ff ff       	call   c0001a09 <st_dword>
c0007dee:	8d 45 24             	lea    eax,[ebp+0x24]
c0007df1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007df5:	e8 0f 9c ff ff       	call   c0001a09 <st_dword>
c0007dfa:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007dfd:	ba 02 00 00 00       	mov    edx,0x2
c0007e02:	e8 02 9c ff ff       	call   c0001a09 <st_dword>
c0007e07:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e0a:	ba 01 00 00 00       	mov    edx,0x1
c0007e0f:	e8 f1 9b ff ff       	call   c0001a05 <st_word>
c0007e14:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e17:	ba 06 00 00 00       	mov    edx,0x6
c0007e1c:	e8 e4 9b ff ff       	call   c0001a05 <st_word>
c0007e21:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e25:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e29:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e2c:	b9 13 00 00 00       	mov    ecx,0x13
c0007e31:	ba 2e fe 01 c0       	mov    edx,0xc001fe2e
c0007e36:	eb 2f                	jmp    c0007e67 <f_mkfs+0xe0d>
c0007e38:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e3b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e40:	e8 c4 9b ff ff       	call   c0001a09 <st_dword>
c0007e45:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e48:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e4d:	e8 b3 9b ff ff       	call   c0001a05 <st_word>
c0007e52:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e56:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007e5a:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007e5d:	b9 13 00 00 00       	mov    ecx,0x13
c0007e62:	ba 42 fe 01 c0       	mov    edx,0xc001fe42
c0007e67:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007e6d:	e8 a0 9b ff ff       	call   c0001a12 <mem_cpy>
c0007e72:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e77:	89 f0                	mov    eax,esi
c0007e79:	e8 87 9b ff ff       	call   c0001a05 <st_word>
c0007e7e:	83 ec 0c             	sub    esp,0xc
c0007e81:	6a 01                	push   0x1
c0007e83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007e87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007e8b:	55                   	push   ebp
c0007e8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e90:	e8 c9 9a ff ff       	call   c000195e <disk_write>
c0007e95:	83 c4 20             	add    esp,0x20
c0007e98:	85 c0                	test   eax,eax
c0007e9a:	0f 85 67 02 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007ea0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea5:	0f 85 b7 00 00 00    	jne    c0007f62 <f_mkfs+0xf08>
c0007eab:	83 ec 0c             	sub    esp,0xc
c0007eae:	6a 01                	push   0x1
c0007eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007eb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007eb8:	83 c0 06             	add    eax,0x6
c0007ebb:	83 d2 00             	adc    edx,0x0
c0007ebe:	52                   	push   edx
c0007ebf:	50                   	push   eax
c0007ec0:	55                   	push   ebp
c0007ec1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ec5:	e8 94 9a ff ff       	call   c000195e <disk_write>
c0007eca:	83 c4 20             	add    esp,0x20
c0007ecd:	b9 00 02 00 00       	mov    ecx,0x200
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	89 e8                	mov    eax,ebp
c0007ed6:	e8 4c 9b ff ff       	call   c0001a27 <mem_set>
c0007edb:	ba 52 52 61 41       	mov    edx,0x41615252
c0007ee0:	89 e8                	mov    eax,ebp
c0007ee2:	e8 22 9b ff ff       	call   c0001a09 <st_dword>
c0007ee7:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007eed:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ef2:	e8 12 9b ff ff       	call   c0001a09 <st_dword>
c0007ef7:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007efa:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f00:	e8 04 9b ff ff       	call   c0001a09 <st_dword>
c0007f05:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f0b:	ba 02 00 00 00       	mov    edx,0x2
c0007f10:	e8 f4 9a ff ff       	call   c0001a09 <st_dword>
c0007f15:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f1a:	89 f0                	mov    eax,esi
c0007f1c:	e8 e4 9a ff ff       	call   c0001a05 <st_word>
c0007f21:	83 ec 0c             	sub    esp,0xc
c0007f24:	6a 01                	push   0x1
c0007f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f2e:	83 c0 07             	add    eax,0x7
c0007f31:	83 d2 00             	adc    edx,0x0
c0007f34:	52                   	push   edx
c0007f35:	50                   	push   eax
c0007f36:	55                   	push   ebp
c0007f37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f3b:	e8 1e 9a ff ff       	call   c000195e <disk_write>
c0007f40:	83 c4 14             	add    esp,0x14
c0007f43:	6a 01                	push   0x1
c0007f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f4d:	83 c0 01             	add    eax,0x1
c0007f50:	83 d2 00             	adc    edx,0x0
c0007f53:	52                   	push   edx
c0007f54:	50                   	push   eax
c0007f55:	55                   	push   ebp
c0007f56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5a:	e8 ff 99 ff ff       	call   c000195e <disk_write>
c0007f5f:	83 c4 20             	add    esp,0x20
c0007f62:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007f69:	31 d2                	xor    edx,edx
c0007f6b:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007f71:	31 db                	xor    ebx,ebx
c0007f73:	89 e8                	mov    eax,ebp
c0007f75:	e8 ad 9a ff ff       	call   c0001a27 <mem_set>
c0007f7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007f81:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007f86:	0f 94 c3             	sete   bl
c0007f89:	4b                   	dec    ebx
c0007f8a:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007f90:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007f96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f9b:	75 21                	jne    c0007fbe <f_mkfs+0xf64>
c0007f9d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fa2:	89 e8                	mov    eax,ebp
c0007fa4:	e8 60 9a ff ff       	call   c0001a09 <st_dword>
c0007fa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0007fac:	83 ca ff             	or     edx,0xffffffff
c0007faf:	e8 55 9a ff ff       	call   c0001a09 <st_dword>
c0007fb4:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fb7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0007fbc:	eb 04                	jmp    c0007fc2 <f_mkfs+0xf68>
c0007fbe:	89 da                	mov    edx,ebx
c0007fc0:	89 e8                	mov    eax,ebp
c0007fc2:	e8 42 9a ff ff       	call   c0001a09 <st_dword>
c0007fc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fcf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007fd7:	39 ce                	cmp    esi,ecx
c0007fd9:	76 02                	jbe    c0007fdd <f_mkfs+0xf83>
c0007fdb:	89 ce                	mov    esi,ecx
c0007fdd:	83 ec 0c             	sub    esp,0xc
c0007fe0:	56                   	push   esi
c0007fe1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007fe5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007fe9:	55                   	push   ebp
c0007fea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fee:	e8 6b 99 ff ff       	call   c000195e <disk_write>
c0007ff3:	83 c4 20             	add    esp,0x20
c0007ff6:	85 c0                	test   eax,eax
c0007ff8:	0f 85 09 01 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	b9 00 02 00 00       	mov    ecx,0x200
c0008005:	89 e8                	mov    eax,ebp
c0008007:	e8 1b 9a ff ff       	call   c0001a27 <mem_set>
c000800c:	31 d2                	xor    edx,edx
c000800e:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008012:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008016:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000801a:	75 b3                	jne    c0007fcf <f_mkfs+0xf75>
c000801c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000801f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008026:	40                   	inc    eax
c0008027:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c000802b:	0f 87 65 ff ff ff    	ja     c0007f96 <f_mkfs+0xf3c>
c0008031:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008036:	74 04                	je     c000803c <f_mkfs+0xfe2>
c0008038:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000803c:	89 fb                	mov    ebx,edi
c000803e:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008042:	76 04                	jbe    c0008048 <f_mkfs+0xfee>
c0008044:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008048:	83 ec 0c             	sub    esp,0xc
c000804b:	53                   	push   ebx
c000804c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008050:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008054:	55                   	push   ebp
c0008055:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008059:	e8 00 99 ff ff       	call   c000195e <disk_write>
c000805e:	83 c4 20             	add    esp,0x20
c0008061:	85 c0                	test   eax,eax
c0008063:	0f 85 9e 00 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0008069:	31 d2                	xor    edx,edx
c000806b:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000806f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008073:	29 df                	sub    edi,ebx
c0008075:	75 c5                	jne    c000803c <f_mkfs+0xfe2>
c0008077:	b1 0c                	mov    cl,0xc
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 1d                	je     c000809d <f_mkfs+0x1043>
c0008080:	b8 ff ff 00 00       	mov    eax,0xffff
c0008085:	b1 06                	mov    cl,0x6
c0008087:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000808b:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000808f:	72 0c                	jb     c000809d <f_mkfs+0x1043>
c0008091:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008096:	0f 94 c1             	sete   cl
c0008099:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000809d:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080a2:	75 4c                	jne    c00080f0 <f_mkfs+0x1096>
c00080a4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080a8:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080ac:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080b3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00080ba:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00080c5:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00080d0:	83 ec 0c             	sub    esp,0xc
c00080d3:	0f b6 c9             	movzx  ecx,cl
c00080d6:	55                   	push   ebp
c00080d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00080e2:	e8 58 c2 ff ff       	call   c000433f <create_partition>
c00080e7:	83 c4 10             	add    esp,0x10
c00080ea:	89 c3                	mov    ebx,eax
c00080ec:	85 c0                	test   eax,eax
c00080ee:	75 34                	jne    c0008124 <f_mkfs+0x10ca>
c00080f0:	50                   	push   eax
c00080f1:	31 db                	xor    ebx,ebx
c00080f3:	6a 00                	push   0x0
c00080f5:	6a 00                	push   0x0
c00080f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00080fb:	e8 74 98 ff ff       	call   c0001974 <disk_ioctl>
c0008100:	83 c4 10             	add    esp,0x10
c0008103:	85 c0                	test   eax,eax
c0008105:	74 1d                	je     c0008124 <f_mkfs+0x10ca>
c0008107:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000810f:	75 0c                	jne    c000811d <f_mkfs+0x10c3>
c0008111:	83 ec 0c             	sub    esp,0xc
c0008114:	55                   	push   ebp
c0008115:	e8 75 00 00 00       	call   c000818f <ff_memfree>
c000811a:	83 c4 10             	add    esp,0x10
c000811d:	bb 01 00 00 00       	mov    ebx,0x1
c0008122:	eb 48                	jmp    c000816c <f_mkfs+0x1112>
c0008124:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000812c:	75 3e                	jne    c000816c <f_mkfs+0x1112>
c000812e:	83 ec 0c             	sub    esp,0xc
c0008131:	55                   	push   ebp
c0008132:	e8 58 00 00 00       	call   c000818f <ff_memfree>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	eb 30                	jmp    c000816c <f_mkfs+0x1112>
c000813c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008141:	0f 85 eb fa ff ff    	jne    c0007c32 <f_mkfs+0xbd8>
c0008147:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000814b:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008151:	0f 86 b8 f9 ff ff    	jbe    c0007b0f <f_mkfs+0xab5>
c0008157:	e9 bf fb ff ff       	jmp    c0007d1b <f_mkfs+0xcc1>
c000815c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008161:	0f 85 c0 fa ff ff    	jne    c0007c27 <f_mkfs+0xbcd>
c0008167:	e9 af fb ff ff       	jmp    c0007d1b <f_mkfs+0xcc1>
c000816c:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008172:	89 d8                	mov    eax,ebx
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    

c0008179 <ff_memalloc>:
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	83 ec 0c             	sub    esp,0xc
c000817f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008183:	e8 79 3d 00 00       	call   c000bf01 <malloc>
c0008188:	83 c4 10             	add    esp,0x10
c000818b:	83 c4 0c             	add    esp,0xc
c000818e:	c3                   	ret    

c000818f <ff_memfree>:
c000818f:	83 ec 0c             	sub    esp,0xc
c0008192:	83 ec 0c             	sub    esp,0xc
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 73 3d 00 00       	call   c000bf11 <free>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <ff_uni2oem>:
c00081a6:	83 ec 14             	sub    esp,0x14
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081b1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00081b8:	c7 44 24 0c 60 01 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020160
c00081c0:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00081c5:	77 0b                	ja     c00081d2 <ff_uni2oem+0x2c>
c00081c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00081d0:	eb 61                	jmp    c0008233 <ff_uni2oem+0x8d>
c00081d2:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00081da:	77 57                	ja     c0008233 <ff_uni2oem+0x8d>
c00081dc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00081e2:	75 4f                	jne    c0008233 <ff_uni2oem+0x8d>
c00081e4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00081eb:	eb 0b                	jmp    c00081f8 <ff_uni2oem+0x52>
c00081ed:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00081f2:	40                   	inc    eax
c00081f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00081f8:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00081fe:	77 21                	ja     c0008221 <ff_uni2oem+0x7b>
c0008200:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008205:	25 ff ff 00 00       	and    eax,0xffff
c000820a:	8d 14 00             	lea    edx,[eax+eax*1]
c000820d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008211:	01 d0                	add    eax,edx
c0008213:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008216:	25 ff ff 00 00       	and    eax,0xffff
c000821b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000821f:	75 cc                	jne    c00081ed <ff_uni2oem+0x47>
c0008221:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008226:	83 e8 80             	sub    eax,0xffffff80
c0008229:	25 ff 00 00 00       	and    eax,0xff
c000822e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008233:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008238:	83 c4 14             	add    esp,0x14
c000823b:	c3                   	ret    

c000823c <ff_oem2uni>:
c000823c:	83 ec 18             	sub    esp,0x18
c000823f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008247:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000824c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008250:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008257:	c7 44 24 10 60 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020160
c000825f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008265:	77 0b                	ja     c0008272 <ff_oem2uni+0x36>
c0008267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008270:	eb 30                	jmp    c00082a2 <ff_oem2uni+0x66>
c0008272:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008278:	75 28                	jne    c00082a2 <ff_oem2uni+0x66>
c000827a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008281:	77 1f                	ja     c00082a2 <ff_oem2uni+0x66>
c0008283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008287:	25 ff ff 00 00       	and    eax,0xffff
c000828c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008291:	8d 14 00             	lea    edx,[eax+eax*1]
c0008294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008298:	01 d0                	add    eax,edx
c000829a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000829d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082a2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082a7:	83 c4 18             	add    esp,0x18
c00082aa:	c3                   	ret    

c00082ab <ff_wtoupper>:
c00082ab:	83 ec 10             	sub    esp,0x10
c00082ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082b6:	0f 87 62 01 00 00    	ja     c000841e <ff_wtoupper+0x173>
c00082bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00082c5:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00082cc:	77 07                	ja     c00082d5 <ff_wtoupper+0x2a>
c00082ce:	b8 60 ff 01 c0       	mov    eax,0xc001ff60
c00082d3:	eb 05                	jmp    c00082da <ff_wtoupper+0x2f>
c00082d5:	b8 a0 fe 01 c0       	mov    eax,0xc001fea0
c00082da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e2:	8d 50 02             	lea    edx,[eax+0x2]
c00082e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00082e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082ec:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00082f1:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00082f7:	0f 84 13 01 00 00    	je     c0008410 <ff_wtoupper+0x165>
c00082fd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008302:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008307:	0f 82 03 01 00 00    	jb     c0008410 <ff_wtoupper+0x165>
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	8d 50 02             	lea    edx,[eax+0x2]
c0008314:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008318:	66 8b 00             	mov    ax,WORD PTR [eax]
c000831b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008320:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008325:	66 c1 e8 08          	shr    ax,0x8
c0008329:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000832e:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008335:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000833a:	31 d2                	xor    edx,edx
c000833c:	66 89 c2             	mov    dx,ax
c000833f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008343:	31 c9                	xor    ecx,ecx
c0008345:	66 89 c1             	mov    cx,ax
c0008348:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000834d:	25 ff ff 00 00       	and    eax,0xffff
c0008352:	01 c8                	add    eax,ecx
c0008354:	39 c2                	cmp    edx,eax
c0008356:	0f 8d 92 00 00 00    	jge    c00083ee <ff_wtoupper+0x143>
c000835c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008360:	25 ff ff 00 00       	and    eax,0xffff
c0008365:	83 f8 08             	cmp    eax,0x8
c0008368:	0f 87 a1 00 00 00    	ja     c000840f <ff_wtoupper+0x164>
c000836e:	8b 04 85 60 fe 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe01a0]
c0008375:	ff e0                	jmp    eax
c0008377:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000837c:	31 d2                	xor    edx,edx
c000837e:	66 89 c2             	mov    dx,ax
c0008381:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008385:	25 ff ff 00 00       	and    eax,0xffff
c000838a:	29 c2                	sub    edx,eax
c000838c:	89 d0                	mov    eax,edx
c000838e:	8d 14 00             	lea    edx,[eax+eax*1]
c0008391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008395:	01 d0                	add    eax,edx
c0008397:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000839f:	eb 4b                	jmp    c00083ec <ff_wtoupper+0x141>
c00083a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083aa:	83 e0 01             	and    eax,0x1
c00083ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083b2:	eb 38                	jmp    c00083ec <ff_wtoupper+0x141>
c00083b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083ba:	eb 30                	jmp    c00083ec <ff_wtoupper+0x141>
c00083bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083c2:	eb 28                	jmp    c00083ec <ff_wtoupper+0x141>
c00083c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ca:	eb 20                	jmp    c00083ec <ff_wtoupper+0x141>
c00083cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083d2:	eb 18                	jmp    c00083ec <ff_wtoupper+0x141>
c00083d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083da:	eb 10                	jmp    c00083ec <ff_wtoupper+0x141>
c00083dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00083e2:	eb 08                	jmp    c00083ec <ff_wtoupper+0x141>
c00083e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00083eb:	90                   	nop
c00083ec:	eb 21                	jmp    c000840f <ff_wtoupper+0x164>
c00083ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00083f4:	0f 85 e4 fe ff ff    	jne    c00082de <ff_wtoupper+0x33>
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c0                	add    eax,eax
c0008406:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000840a:	e9 cf fe ff ff       	jmp    c00082de <ff_wtoupper+0x33>
c000840f:	90                   	nop
c0008410:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008415:	25 ff ff 00 00       	and    eax,0xffff
c000841a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000841e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008422:	83 c4 10             	add    esp,0x10
c0008425:	c3                   	ret    

c0008426 <is_bad_src_ratio>:
c0008426:	83 ec 0c             	sub    esp,0xc
c0008429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008430:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008434:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008438:	dd 04 24             	fld    QWORD PTR [esp]
c000843b:	dd 05 20 07 02 c0    	fld    QWORD PTR ds:0xc0020720
c0008441:	de d9                	fcompp 
c0008443:	df e0                	fnstsw ax
c0008445:	f6 c4 45             	test   ah,0x45
c0008448:	74 10                	je     c000845a <is_bad_src_ratio+0x34>
c000844a:	dd 04 24             	fld    QWORD PTR [esp]
c000844d:	dc 1d 28 07 02 c0    	fcomp  QWORD PTR ds:0xc0020728
c0008453:	df e0                	fnstsw ax
c0008455:	f6 c4 45             	test   ah,0x45
c0008458:	75 07                	jne    c0008461 <is_bad_src_ratio+0x3b>
c000845a:	b8 01 00 00 00       	mov    eax,0x1
c000845f:	eb 05                	jmp    c0008466 <is_bad_src_ratio+0x40>
c0008461:	b8 00 00 00 00       	mov    eax,0x0
c0008466:	83 c4 0c             	add    esp,0xc
c0008469:	c3                   	ret    

c000846a <psrc_set_converter>:
c000846a:	56                   	push   esi
c000846b:	89 d6                	mov    esi,edx
c000846d:	53                   	push   ebx
c000846e:	89 c3                	mov    ebx,eax
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	52                   	push   edx
c0008474:	50                   	push   eax
c0008475:	e8 21 24 00 00       	call   c000a89b <sinc_set_converter>
c000847a:	83 c4 10             	add    esp,0x10
c000847d:	85 c0                	test   eax,eax
c000847f:	74 25                	je     c00084a6 <psrc_set_converter+0x3c>
c0008481:	50                   	push   eax
c0008482:	50                   	push   eax
c0008483:	56                   	push   esi
c0008484:	53                   	push   ebx
c0008485:	e8 1c 28 00 00       	call   c000aca6 <zoh_set_converter>
c000848a:	83 c4 10             	add    esp,0x10
c000848d:	85 c0                	test   eax,eax
c000848f:	74 15                	je     c00084a6 <psrc_set_converter+0x3c>
c0008491:	51                   	push   ecx
c0008492:	51                   	push   ecx
c0008493:	56                   	push   esi
c0008494:	53                   	push   ebx
c0008495:	e8 0c 0a 00 00       	call   c0008ea6 <linear_set_converter>
c000849a:	83 c4 10             	add    esp,0x10
c000849d:	ba 0a 00 00 00       	mov    edx,0xa
c00084a2:	85 c0                	test   eax,eax
c00084a4:	75 02                	jne    c00084a8 <psrc_set_converter+0x3e>
c00084a6:	31 d2                	xor    edx,edx
c00084a8:	89 d0                	mov    eax,edx
c00084aa:	5a                   	pop    edx
c00084ab:	5b                   	pop    ebx
c00084ac:	5e                   	pop    esi
c00084ad:	c3                   	ret    

c00084ae <src_delete>:
c00084ae:	53                   	push   ebx
c00084af:	83 ec 08             	sub    esp,0x8
c00084b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084b6:	85 db                	test   ebx,ebx
c00084b8:	74 29                	je     c00084e3 <src_delete+0x35>
c00084ba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084bd:	85 c0                	test   eax,eax
c00084bf:	74 0c                	je     c00084cd <src_delete+0x1f>
c00084c1:	83 ec 0c             	sub    esp,0xc
c00084c4:	50                   	push   eax
c00084c5:	e8 47 3a 00 00       	call   c000bf11 <free>
c00084ca:	83 c4 10             	add    esp,0x10
c00084cd:	50                   	push   eax
c00084ce:	6a 3c                	push   0x3c
c00084d0:	6a 00                	push   0x0
c00084d2:	53                   	push   ebx
c00084d3:	e8 30 81 ff ff       	call   c0000608 <memset>
c00084d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084db:	e8 31 3a 00 00       	call   c000bf11 <free>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 c4 08             	add    esp,0x8
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	5b                   	pop    ebx
c00084e9:	c3                   	ret    

c00084ea <src_process>:
c00084ea:	56                   	push   esi
c00084eb:	53                   	push   ebx
c00084ec:	53                   	push   ebx
c00084ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00084f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00084f5:	85 f6                	test   esi,esi
c00084f7:	0f 84 e2 00 00 00    	je     c00085df <src_process+0xf5>
c00084fd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008501:	0f 84 df 00 00 00    	je     c00085e6 <src_process+0xfc>
c0008507:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000850b:	0f 84 d5 00 00 00    	je     c00085e6 <src_process+0xfc>
c0008511:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008518:	0f 85 cf 00 00 00    	jne    c00085ed <src_process+0x103>
c000851e:	85 db                	test   ebx,ebx
c0008520:	0f 84 ce 00 00 00    	je     c00085f4 <src_process+0x10a>
c0008526:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008529:	0f 84 cc 00 00 00    	je     c00085fb <src_process+0x111>
c000852f:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008533:	0f 84 c2 00 00 00    	je     c00085fb <src_process+0x111>
c0008539:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000853c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000853f:	e8 e2 fe ff ff       	call   c0008426 <is_bad_src_ratio>
c0008544:	5a                   	pop    edx
c0008545:	85 c0                	test   eax,eax
c0008547:	59                   	pop    ecx
c0008548:	0f 85 b4 00 00 00    	jne    c0008602 <src_process+0x118>
c000854e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008552:	79 07                	jns    c000855b <src_process+0x71>
c0008554:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000855b:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000855f:	79 07                	jns    c0008568 <src_process+0x7e>
c0008561:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008568:	8b 13                	mov    edx,DWORD PTR [ebx]
c000856a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000856d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008570:	39 ca                	cmp    edx,ecx
c0008572:	73 0b                	jae    c000857f <src_process+0x95>
c0008574:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008578:	8d 04 82             	lea    eax,[edx+eax*4]
c000857b:	39 c1                	cmp    ecx,eax
c000857d:	eb 09                	jmp    c0008588 <src_process+0x9e>
c000857f:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008583:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008586:	39 c2                	cmp    edx,eax
c0008588:	72 7f                	jb     c0008609 <src_process+0x11f>
c000858a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008591:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008598:	d9 05 40 07 02 c0    	fld    DWORD PTR ds:0xc0020740
c000859e:	dc 1e                	fcomp  QWORD PTR [esi]
c00085a0:	df e0                	fnstsw ax
c00085a2:	9e                   	sahf   
c00085a3:	76 05                	jbe    c00085aa <src_process+0xc0>
c00085a5:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085a8:	dd 1e                	fstp   QWORD PTR [esi]
c00085aa:	dd 06                	fld    QWORD PTR [esi]
c00085ac:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085af:	83 ec 10             	sub    esp,0x10
c00085b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085b5:	e8 26 6a 01 00       	call   c001efe0 <fabs>
c00085ba:	83 c4 10             	add    esp,0x10
c00085bd:	dd 05 30 07 02 c0    	fld    QWORD PTR ds:0xc0020730
c00085c3:	de d9                	fcompp 
c00085c5:	df e0                	fnstsw ax
c00085c7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085cb:	9e                   	sahf   
c00085cc:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085d0:	76 05                	jbe    c00085d7 <src_process+0xed>
c00085d2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085d5:	eb 03                	jmp    c00085da <src_process+0xf0>
c00085d7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085da:	59                   	pop    ecx
c00085db:	5b                   	pop    ebx
c00085dc:	5e                   	pop    esi
c00085dd:	ff e0                	jmp    eax
c00085df:	b8 02 00 00 00       	mov    eax,0x2
c00085e4:	eb 28                	jmp    c000860e <src_process+0x124>
c00085e6:	b8 07 00 00 00       	mov    eax,0x7
c00085eb:	eb 21                	jmp    c000860e <src_process+0x124>
c00085ed:	b8 12 00 00 00       	mov    eax,0x12
c00085f2:	eb 1a                	jmp    c000860e <src_process+0x124>
c00085f4:	b8 03 00 00 00       	mov    eax,0x3
c00085f9:	eb 13                	jmp    c000860e <src_process+0x124>
c00085fb:	b8 04 00 00 00       	mov    eax,0x4
c0008600:	eb 0c                	jmp    c000860e <src_process+0x124>
c0008602:	b8 06 00 00 00       	mov    eax,0x6
c0008607:	eb 05                	jmp    c000860e <src_process+0x124>
c0008609:	b8 10 00 00 00       	mov    eax,0x10
c000860e:	5a                   	pop    edx
c000860f:	5b                   	pop    ebx
c0008610:	5e                   	pop    esi
c0008611:	c3                   	ret    

c0008612 <src_callback_read>:
c0008612:	55                   	push   ebp
c0008613:	57                   	push   edi
c0008614:	56                   	push   esi
c0008615:	53                   	push   ebx
c0008616:	83 ec 4c             	sub    esp,0x4c
c0008619:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000861d:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008621:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008625:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008629:	85 ff                	test   edi,edi
c000862b:	0f 8e 36 01 00 00    	jle    c0008767 <src_callback_read+0x155>
c0008631:	85 db                	test   ebx,ebx
c0008633:	0f 84 2e 01 00 00    	je     c0008767 <src_callback_read+0x155>
c0008639:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008640:	74 0c                	je     c000864e <src_callback_read+0x3c>
c0008642:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008649:	e9 19 01 00 00       	jmp    c0008767 <src_callback_read+0x155>
c000864e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008652:	75 0c                	jne    c0008660 <src_callback_read+0x4e>
c0008654:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000865b:	e9 07 01 00 00       	jmp    c0008767 <src_callback_read+0x155>
c0008660:	51                   	push   ecx
c0008661:	6a 24                	push   0x24
c0008663:	6a 00                	push   0x0
c0008665:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008669:	50                   	push   eax
c000866a:	e8 99 7f ff ff       	call   c0000608 <memset>
c000866f:	5e                   	pop    esi
c0008670:	5d                   	pop    ebp
c0008671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008679:	e8 a8 fd ff ff       	call   c0008426 <is_bad_src_ratio>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	85 c0                	test   eax,eax
c0008683:	74 0c                	je     c0008691 <src_callback_read+0x7f>
c0008685:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000868c:	e9 d6 00 00 00       	jmp    c0008767 <src_callback_read+0x155>
c0008691:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008695:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008699:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000869d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086a1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086a8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086ab:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086b3:	31 f6                	xor    esi,esi
c00086b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086ba:	75 30                	jne    c00086ec <src_callback_read+0xda>
c00086bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c4:	52                   	push   edx
c00086c5:	52                   	push   edx
c00086c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086ca:	50                   	push   eax
c00086cb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086ce:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086dd:	83 c4 10             	add    esp,0x10
c00086e0:	85 c0                	test   eax,eax
c00086e2:	75 08                	jne    c00086ec <src_callback_read+0xda>
c00086e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086ec:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00086f3:	50                   	push   eax
c00086f4:	50                   	push   eax
c00086f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00086f9:	50                   	push   eax
c00086fa:	53                   	push   ebx
c00086fb:	e8 ea fd ff ff       	call   c00084ea <src_process>
c0008700:	83 c4 10             	add    esp,0x10
c0008703:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000870a:	85 c0                	test   eax,eax
c000870c:	75 42                	jne    c0008750 <src_callback_read+0x13e>
c000870e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008712:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008715:	89 e9                	mov    ecx,ebp
c0008717:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c000871b:	0f af ca             	imul   ecx,edx
c000871e:	c1 e1 02             	shl    ecx,0x2
c0008721:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008725:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008729:	0f af d1             	imul   edx,ecx
c000872c:	c1 e2 02             	shl    edx,0x2
c000872f:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008733:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008737:	8d 14 31             	lea    edx,[ecx+esi*1]
c000873a:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000873f:	75 04                	jne    c0008745 <src_callback_read+0x133>
c0008741:	85 c9                	test   ecx,ecx
c0008743:	74 0b                	je     c0008750 <src_callback_read+0x13e>
c0008745:	39 d7                	cmp    edi,edx
c0008747:	7e 09                	jle    c0008752 <src_callback_read+0x140>
c0008749:	89 d6                	mov    esi,edx
c000874b:	e9 65 ff ff ff       	jmp    c00086b5 <src_callback_read+0xa3>
c0008750:	89 f2                	mov    edx,esi
c0008752:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008756:	85 c0                	test   eax,eax
c0008758:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000875b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000875f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008762:	74 05                	je     c0008769 <src_callback_read+0x157>
c0008764:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008767:	31 d2                	xor    edx,edx
c0008769:	83 c4 4c             	add    esp,0x4c
c000876c:	89 d0                	mov    eax,edx
c000876e:	5b                   	pop    ebx
c000876f:	5e                   	pop    esi
c0008770:	5f                   	pop    edi
c0008771:	5d                   	pop    ebp
c0008772:	c3                   	ret    

c0008773 <src_set_ratio>:
c0008773:	53                   	push   ebx
c0008774:	b8 02 00 00 00       	mov    eax,0x2
c0008779:	83 ec 08             	sub    esp,0x8
c000877c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008780:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008784:	85 db                	test   ebx,ebx
c0008786:	74 33                	je     c00087bb <src_set_ratio+0x48>
c0008788:	b8 07 00 00 00       	mov    eax,0x7
c000878d:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008791:	74 2c                	je     c00087bf <src_set_ratio+0x4c>
c0008793:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008797:	74 2a                	je     c00087c3 <src_set_ratio+0x50>
c0008799:	50                   	push   eax
c000879a:	50                   	push   eax
c000879b:	dd 14 24             	fst    QWORD PTR [esp]
c000879e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087a2:	e8 7f fc ff ff       	call   c0008426 <is_bad_src_ratio>
c00087a7:	5a                   	pop    edx
c00087a8:	59                   	pop    ecx
c00087a9:	85 c0                	test   eax,eax
c00087ab:	75 07                	jne    c00087b4 <src_set_ratio+0x41>
c00087ad:	dd 04 24             	fld    QWORD PTR [esp]
c00087b0:	dd 1b                	fstp   QWORD PTR [ebx]
c00087b2:	eb 11                	jmp    c00087c5 <src_set_ratio+0x52>
c00087b4:	b8 06 00 00 00       	mov    eax,0x6
c00087b9:	eb 0a                	jmp    c00087c5 <src_set_ratio+0x52>
c00087bb:	dd d8                	fstp   st(0)
c00087bd:	eb 06                	jmp    c00087c5 <src_set_ratio+0x52>
c00087bf:	dd d8                	fstp   st(0)
c00087c1:	eb 02                	jmp    c00087c5 <src_set_ratio+0x52>
c00087c3:	dd d8                	fstp   st(0)
c00087c5:	83 c4 08             	add    esp,0x8
c00087c8:	5b                   	pop    ebx
c00087c9:	c3                   	ret    

c00087ca <src_get_channels>:
c00087ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087ce:	b8 02 00 00 00       	mov    eax,0x2
c00087d3:	85 d2                	test   edx,edx
c00087d5:	74 14                	je     c00087eb <src_get_channels+0x21>
c00087d7:	b8 07 00 00 00       	mov    eax,0x7
c00087dc:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087e0:	74 09                	je     c00087eb <src_get_channels+0x21>
c00087e2:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00087e6:	74 03                	je     c00087eb <src_get_channels+0x21>
c00087e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00087eb:	c3                   	ret    

c00087ec <src_reset>:
c00087ec:	53                   	push   ebx
c00087ed:	b8 02 00 00 00       	mov    eax,0x2
c00087f2:	83 ec 08             	sub    esp,0x8
c00087f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087f9:	85 db                	test   ebx,ebx
c00087fb:	74 2e                	je     c000882b <src_reset+0x3f>
c00087fd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008800:	85 c0                	test   eax,eax
c0008802:	74 09                	je     c000880d <src_reset+0x21>
c0008804:	83 ec 0c             	sub    esp,0xc
c0008807:	53                   	push   ebx
c0008808:	ff d0                	call   eax
c000880a:	83 c4 10             	add    esp,0x10
c000880d:	d9 ee                	fldz   
c000880f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008816:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000881d:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008820:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008827:	31 c0                	xor    eax,eax
c0008829:	dd 1b                	fstp   QWORD PTR [ebx]
c000882b:	83 c4 08             	add    esp,0x8
c000882e:	5b                   	pop    ebx
c000882f:	c3                   	ret    

c0008830 <src_new>:
c0008830:	57                   	push   edi
c0008831:	56                   	push   esi
c0008832:	53                   	push   ebx
c0008833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008837:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000883b:	85 f6                	test   esi,esi
c000883d:	74 73                	je     c00088b2 <src_new+0x82>
c000883f:	85 ff                	test   edi,edi
c0008841:	7f 08                	jg     c000884b <src_new+0x1b>
c0008843:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008849:	eb 1e                	jmp    c0008869 <src_new+0x39>
c000884b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008851:	50                   	push   eax
c0008852:	50                   	push   eax
c0008853:	6a 3c                	push   0x3c
c0008855:	6a 01                	push   0x1
c0008857:	e8 d5 36 00 00       	call   c000bf31 <calloc>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 c3                	mov    ebx,eax
c0008861:	85 c0                	test   eax,eax
c0008863:	75 10                	jne    c0008875 <src_new+0x45>
c0008865:	85 f6                	test   esi,esi
c0008867:	75 04                	jne    c000886d <src_new+0x3d>
c0008869:	31 db                	xor    ebx,ebx
c000886b:	eb 4b                	jmp    c00088b8 <src_new+0x88>
c000886d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008873:	eb 43                	jmp    c00088b8 <src_new+0x88>
c0008875:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008878:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000887f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008883:	e8 e2 fb ff ff       	call   c000846a <psrc_set_converter>
c0008888:	85 c0                	test   eax,eax
c000888a:	74 18                	je     c00088a4 <src_new+0x74>
c000888c:	85 f6                	test   esi,esi
c000888e:	74 06                	je     c0008896 <src_new+0x66>
c0008890:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008896:	83 ec 0c             	sub    esp,0xc
c0008899:	53                   	push   ebx
c000889a:	31 db                	xor    ebx,ebx
c000889c:	e8 70 36 00 00       	call   c000bf11 <free>
c00088a1:	83 c4 10             	add    esp,0x10
c00088a4:	83 ec 0c             	sub    esp,0xc
c00088a7:	53                   	push   ebx
c00088a8:	e8 3f ff ff ff       	call   c00087ec <src_reset>
c00088ad:	83 c4 10             	add    esp,0x10
c00088b0:	eb 06                	jmp    c00088b8 <src_new+0x88>
c00088b2:	85 ff                	test   edi,edi
c00088b4:	7f 9b                	jg     c0008851 <src_new+0x21>
c00088b6:	eb b1                	jmp    c0008869 <src_new+0x39>
c00088b8:	89 d8                	mov    eax,ebx
c00088ba:	5b                   	pop    ebx
c00088bb:	5e                   	pop    esi
c00088bc:	5f                   	pop    edi
c00088bd:	c3                   	ret    

c00088be <src_callback_new>:
c00088be:	56                   	push   esi
c00088bf:	53                   	push   ebx
c00088c0:	53                   	push   ebx
c00088c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088c9:	85 f6                	test   esi,esi
c00088cb:	75 0e                	jne    c00088db <src_callback_new+0x1d>
c00088cd:	31 db                	xor    ebx,ebx
c00088cf:	85 c0                	test   eax,eax
c00088d1:	74 47                	je     c000891a <src_callback_new+0x5c>
c00088d3:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088d9:	eb 3f                	jmp    c000891a <src_callback_new+0x5c>
c00088db:	85 c0                	test   eax,eax
c00088dd:	74 06                	je     c00088e5 <src_callback_new+0x27>
c00088df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e5:	51                   	push   ecx
c00088e6:	50                   	push   eax
c00088e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00088eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00088ef:	e8 3c ff ff ff       	call   c0008830 <src_new>
c00088f4:	83 c4 10             	add    esp,0x10
c00088f7:	89 c3                	mov    ebx,eax
c00088f9:	85 c0                	test   eax,eax
c00088fb:	74 1d                	je     c000891a <src_callback_new+0x5c>
c00088fd:	83 ec 0c             	sub    esp,0xc
c0008900:	50                   	push   eax
c0008901:	e8 e6 fe ff ff       	call   c00087ec <src_reset>
c0008906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000890a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008911:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008914:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008917:	83 c4 10             	add    esp,0x10
c000891a:	5a                   	pop    edx
c000891b:	89 d8                	mov    eax,ebx
c000891d:	5b                   	pop    ebx
c000891e:	5e                   	pop    esi
c000891f:	c3                   	ret    

c0008920 <src_get_name>:
c0008920:	53                   	push   ebx
c0008921:	83 ec 14             	sub    esp,0x14
c0008924:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008928:	53                   	push   ebx
c0008929:	e8 47 1f 00 00       	call   c000a875 <sinc_get_name>
c000892e:	83 c4 10             	add    esp,0x10
c0008931:	85 c0                	test   eax,eax
c0008933:	75 1d                	jne    c0008952 <src_get_name+0x32>
c0008935:	83 ec 0c             	sub    esp,0xc
c0008938:	53                   	push   ebx
c0008939:	e8 4a 23 00 00       	call   c000ac88 <zoh_get_name>
c000893e:	83 c4 10             	add    esp,0x10
c0008941:	85 c0                	test   eax,eax
c0008943:	75 0d                	jne    c0008952 <src_get_name+0x32>
c0008945:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008949:	83 c4 08             	add    esp,0x8
c000894c:	5b                   	pop    ebx
c000894d:	e9 36 05 00 00       	jmp    c0008e88 <linear_get_name>
c0008952:	83 c4 08             	add    esp,0x8
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    

c0008957 <src_get_description>:
c0008957:	53                   	push   ebx
c0008958:	83 ec 14             	sub    esp,0x14
c000895b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000895f:	53                   	push   ebx
c0008960:	e8 23 1f 00 00       	call   c000a888 <sinc_get_description>
c0008965:	83 c4 10             	add    esp,0x10
c0008968:	85 c0                	test   eax,eax
c000896a:	75 1d                	jne    c0008989 <src_get_description+0x32>
c000896c:	83 ec 0c             	sub    esp,0xc
c000896f:	53                   	push   ebx
c0008970:	e8 22 23 00 00       	call   c000ac97 <zoh_get_description>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	75 0d                	jne    c0008989 <src_get_description+0x32>
c000897c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008980:	83 c4 08             	add    esp,0x8
c0008983:	5b                   	pop    ebx
c0008984:	e9 0e 05 00 00       	jmp    c0008e97 <linear_get_description>
c0008989:	83 c4 08             	add    esp,0x8
c000898c:	5b                   	pop    ebx
c000898d:	c3                   	ret    

c000898e <src_get_version>:
c000898e:	b8 60 02 02 c0       	mov    eax,0xc0020260
c0008993:	c3                   	ret    

c0008994 <src_is_valid_ratio>:
c0008994:	50                   	push   eax
c0008995:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008999:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000899d:	e8 84 fa ff ff       	call   c0008426 <is_bad_src_ratio>
c00089a2:	85 c0                	test   eax,eax
c00089a4:	0f 94 c0             	sete   al
c00089a7:	0f b6 c0             	movzx  eax,al
c00089aa:	83 c4 0c             	add    esp,0xc
c00089ad:	c3                   	ret    

c00089ae <src_error>:
c00089ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089b2:	31 c0                	xor    eax,eax
c00089b4:	85 d2                	test   edx,edx
c00089b6:	74 03                	je     c00089bb <src_error+0xd>
c00089b8:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089bb:	c3                   	ret    

c00089bc <src_strerror>:
c00089bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	83 fa 17             	cmp    edx,0x17
c00089c5:	77 07                	ja     c00089ce <src_strerror+0x12>
c00089c7:	8b 04 95 c0 06 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf940]
c00089ce:	c3                   	ret    

c00089cf <src_simple>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	83 ec 18             	sub    esp,0x18
c00089d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089dc:	50                   	push   eax
c00089dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089e5:	e8 46 fe ff ff       	call   c0008830 <src_new>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	85 c0                	test   eax,eax
c00089ef:	75 06                	jne    c00089f7 <src_simple+0x28>
c00089f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089f5:	eb 25                	jmp    c0008a1c <src_simple+0x4d>
c00089f7:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c00089fe:	89 c3                	mov    ebx,eax
c0008a00:	50                   	push   eax
c0008a01:	50                   	push   eax
c0008a02:	56                   	push   esi
c0008a03:	53                   	push   ebx
c0008a04:	e8 e1 fa ff ff       	call   c00084ea <src_process>
c0008a09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a10:	e8 99 fa ff ff       	call   c00084ae <src_delete>
c0008a15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	83 c4 14             	add    esp,0x14
c0008a1f:	5b                   	pop    ebx
c0008a20:	5e                   	pop    esi
c0008a21:	c3                   	ret    

c0008a22 <src_short_to_float_array>:
c0008a22:	83 ec 0c             	sub    esp,0xc
c0008a25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a29:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a31:	85 c0                	test   eax,eax
c0008a33:	74 0f                	je     c0008a44 <src_short_to_float_array+0x22>
c0008a35:	48                   	dec    eax
c0008a36:	d9 05 44 07 02 c0    	fld    DWORD PTR ds:0xc0020744
c0008a3c:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a3f:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a42:	eb ed                	jmp    c0008a31 <src_short_to_float_array+0xf>
c0008a44:	83 c4 0c             	add    esp,0xc
c0008a47:	c3                   	ret    

c0008a48 <src_float_to_short_array>:
c0008a48:	56                   	push   esi
c0008a49:	53                   	push   ebx
c0008a4a:	52                   	push   edx
c0008a4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a53:	85 db                	test   ebx,ebx
c0008a55:	74 51                	je     c0008aa8 <src_float_to_short_array+0x60>
c0008a57:	4b                   	dec    ebx
c0008a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5c:	d9 05 48 07 02 c0    	fld    DWORD PTR ds:0xc0020748
c0008a62:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a65:	dc 15 38 07 02 c0    	fcom   QWORD PTR ds:0xc0020738
c0008a6b:	df e0                	fnstsw ax
c0008a6d:	9e                   	sahf   
c0008a6e:	72 0a                	jb     c0008a7a <src_float_to_short_array+0x32>
c0008a70:	dd d8                	fstp   st(0)
c0008a72:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a78:	eb d9                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008a7a:	d9 05 4c 07 02 c0    	fld    DWORD PTR ds:0xc002074c
c0008a80:	d8 d9                	fcomp  st(1)
c0008a82:	df e0                	fnstsw ax
c0008a84:	9e                   	sahf   
c0008a85:	72 0a                	jb     c0008a91 <src_float_to_short_array+0x49>
c0008a87:	dd d8                	fstp   st(0)
c0008a89:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008a8f:	eb c2                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008a91:	83 ec 10             	sub    esp,0x10
c0008a94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008a97:	e8 64 65 01 00       	call   c001f000 <lrint>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	c1 f8 10             	sar    eax,0x10
c0008aa2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008aa6:	eb ab                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008aa8:	58                   	pop    eax
c0008aa9:	5b                   	pop    ebx
c0008aaa:	5e                   	pop    esi
c0008aab:	c3                   	ret    

c0008aac <src_int_to_float_array>:
c0008aac:	83 ec 0c             	sub    esp,0xc
c0008aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008abb:	85 c0                	test   eax,eax
c0008abd:	74 0f                	je     c0008ace <src_int_to_float_array+0x22>
c0008abf:	48                   	dec    eax
c0008ac0:	d9 05 50 07 02 c0    	fld    DWORD PTR ds:0xc0020750
c0008ac6:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ac9:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008acc:	eb ed                	jmp    c0008abb <src_int_to_float_array+0xf>
c0008ace:	83 c4 0c             	add    esp,0xc
c0008ad1:	c3                   	ret    

c0008ad2 <src_float_to_int_array>:
c0008ad2:	56                   	push   esi
c0008ad3:	53                   	push   ebx
c0008ad4:	52                   	push   edx
c0008ad5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008add:	85 db                	test   ebx,ebx
c0008adf:	74 4f                	je     c0008b30 <src_float_to_int_array+0x5e>
c0008ae1:	4b                   	dec    ebx
c0008ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae6:	d9 05 48 07 02 c0    	fld    DWORD PTR ds:0xc0020748
c0008aec:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008aef:	dc 15 38 07 02 c0    	fcom   QWORD PTR ds:0xc0020738
c0008af5:	df e0                	fnstsw ax
c0008af7:	9e                   	sahf   
c0008af8:	72 0b                	jb     c0008b05 <src_float_to_int_array+0x33>
c0008afa:	dd d8                	fstp   st(0)
c0008afc:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b03:	eb d8                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b05:	d9 05 4c 07 02 c0    	fld    DWORD PTR ds:0xc002074c
c0008b0b:	d8 d9                	fcomp  st(1)
c0008b0d:	df e0                	fnstsw ax
c0008b0f:	9e                   	sahf   
c0008b10:	72 0b                	jb     c0008b1d <src_float_to_int_array+0x4b>
c0008b12:	dd d8                	fstp   st(0)
c0008b14:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b1b:	eb c0                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b1d:	83 ec 10             	sub    esp,0x10
c0008b20:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b23:	e8 d8 64 01 00       	call   c001f000 <lrint>
c0008b28:	83 c4 10             	add    esp,0x10
c0008b2b:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b2e:	eb ad                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b30:	58                   	pop    eax
c0008b31:	5b                   	pop    ebx
c0008b32:	5e                   	pop    esi
c0008b33:	c3                   	ret    

c0008b34 <is_bad_src_ratio>:
c0008b34:	83 ec 0c             	sub    esp,0xc
c0008b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b46:	dd 04 24             	fld    QWORD PTR [esp]
c0008b49:	dd 05 20 07 02 c0    	fld    QWORD PTR ds:0xc0020720
c0008b4f:	de d9                	fcompp 
c0008b51:	df e0                	fnstsw ax
c0008b53:	f6 c4 45             	test   ah,0x45
c0008b56:	74 10                	je     c0008b68 <is_bad_src_ratio+0x34>
c0008b58:	dd 04 24             	fld    QWORD PTR [esp]
c0008b5b:	dc 1d 28 07 02 c0    	fcomp  QWORD PTR ds:0xc0020728
c0008b61:	df e0                	fnstsw ax
c0008b63:	f6 c4 45             	test   ah,0x45
c0008b66:	75 07                	jne    c0008b6f <is_bad_src_ratio+0x3b>
c0008b68:	b8 01 00 00 00       	mov    eax,0x1
c0008b6d:	eb 05                	jmp    c0008b74 <is_bad_src_ratio+0x40>
c0008b6f:	b8 00 00 00 00       	mov    eax,0x0
c0008b74:	83 c4 0c             	add    esp,0xc
c0008b77:	c3                   	ret    

c0008b78 <fmod_one>:
c0008b78:	83 ec 2c             	sub    esp,0x2c
c0008b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008b87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b8b:	83 ec 08             	sub    esp,0x8
c0008b8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b96:	e8 65 64 01 00       	call   c001f000 <lrint>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ba2:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ba6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008baa:	de e1                	fsubrp st(1),st
c0008bac:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bb0:	d9 ee                	fldz   
c0008bb2:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bb6:	df e0                	fnstsw ax
c0008bb8:	f6 c4 45             	test   ah,0x45
c0008bbb:	75 0a                	jne    c0008bc7 <fmod_one+0x4f>
c0008bbd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bc1:	d9 e8                	fld1   
c0008bc3:	de c1                	faddp  st(1),st
c0008bc5:	eb 04                	jmp    c0008bcb <fmod_one+0x53>
c0008bc7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bcb:	83 c4 2c             	add    esp,0x2c
c0008bce:	c3                   	ret    

c0008bcf <linear_vari_process>:
c0008bcf:	55                   	push   ebp
c0008bd0:	57                   	push   edi
c0008bd1:	56                   	push   esi
c0008bd2:	53                   	push   ebx
c0008bd3:	83 ec 2c             	sub    esp,0x2c
c0008bd6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bda:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008be6:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008bea:	0f 8e 5a 02 00 00    	jle    c0008e4a <linear_vari_process+0x27b>
c0008bf0:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008bf3:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008bfb:	85 db                	test   ebx,ebx
c0008bfd:	0f 84 47 02 00 00    	je     c0008e4a <linear_vari_process+0x27b>
c0008c03:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c06:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c0a:	74 19                	je     c0008c25 <linear_vari_process+0x56>
c0008c0c:	31 d2                	xor    edx,edx
c0008c0e:	39 c2                	cmp    edx,eax
c0008c10:	7d 0c                	jge    c0008c1e <linear_vari_process+0x4f>
c0008c12:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c14:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c17:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c1b:	42                   	inc    edx
c0008c1c:	eb f0                	jmp    c0008c0e <linear_vari_process+0x3f>
c0008c1e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c25:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c28:	0f af d0             	imul   edx,eax
c0008c2b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c2e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c32:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c39:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c3c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c43:	dd 07                	fld    QWORD PTR [edi]
c0008c45:	dd 14 24             	fst    QWORD PTR [esp]
c0008c48:	50                   	push   eax
c0008c49:	50                   	push   eax
c0008c4a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c4d:	e8 e2 fe ff ff       	call   c0008b34 <is_bad_src_ratio>
c0008c52:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c56:	5a                   	pop    edx
c0008c57:	59                   	pop    ecx
c0008c58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c5d:	0f 85 df 01 00 00    	jne    c0008e42 <linear_vari_process+0x273>
c0008c63:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c66:	d9 e8                	fld1   
c0008c68:	d8 d1                	fcom   st(1)
c0008c6a:	df e0                	fnstsw ax
c0008c6c:	9e                   	sahf   
c0008c6d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c71:	0f 86 97 00 00 00    	jbe    c0008d0e <linear_vari_process+0x13f>
c0008c77:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c7a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c7d:	0f 8d 8b 00 00 00    	jge    c0008d0e <linear_vari_process+0x13f>
c0008c83:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c87:	d8 c1                	fadd   st,st(1)
c0008c89:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008c8c:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008c8f:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008c92:	df e0                	fnstsw ax
c0008c94:	9e                   	sahf   
c0008c95:	73 77                	jae    c0008d0e <linear_vari_process+0x13f>
c0008c97:	85 d2                	test   edx,edx
c0008c99:	7e 36                	jle    c0008cd1 <linear_vari_process+0x102>
c0008c9b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008c9f:	dd 07                	fld    QWORD PTR [edi]
c0008ca1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008ca4:	83 ec 10             	sub    esp,0x10
c0008ca7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008caa:	e8 31 63 01 00       	call   c001efe0 <fabs>
c0008caf:	83 c4 10             	add    esp,0x10
c0008cb2:	dc 1d 98 07 02 c0    	fcomp  QWORD PTR ds:0xc0020798
c0008cb8:	df e0                	fnstsw ax
c0008cba:	9e                   	sahf   
c0008cbb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cbf:	76 10                	jbe    c0008cd1 <linear_vari_process+0x102>
c0008cc1:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008cc4:	dc 27                	fsub   QWORD PTR [edi]
c0008cc6:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008cc9:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ccc:	dc 07                	fadd   QWORD PTR [edi]
c0008cce:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cd1:	31 c0                	xor    eax,eax
c0008cd3:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cd6:	7e 1f                	jle    c0008cf7 <linear_vari_process+0x128>
c0008cd8:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cda:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cdd:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008ce1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ce5:	d8 e1                	fsub   st,st(1)
c0008ce7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008cea:	40                   	inc    eax
c0008ceb:	d8 ca                	fmul   st,st(2)
c0008ced:	de c1                	faddp  st(1),st
c0008cef:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008cf2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008cf5:	eb dc                	jmp    c0008cd3 <linear_vari_process+0x104>
c0008cf7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008cfb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008cfe:	de c1                	faddp  st(1),st
c0008d00:	e9 61 ff ff ff       	jmp    c0008c66 <linear_vari_process+0x97>
c0008d05:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d09:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d0c:	de c1                	faddp  st(1),st
c0008d0e:	83 ec 10             	sub    esp,0x10
c0008d11:	dd 14 24             	fst    QWORD PTR [esp]
c0008d14:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d18:	e8 5b fe ff ff       	call   c0008b78 <fmod_one>
c0008d1d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d20:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d24:	d8 e1                	fsub   st,st(1)
c0008d26:	d9 c9                	fxch   st(1)
c0008d28:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d2f:	e8 cc 62 01 00       	call   c001f000 <lrint>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	0f af e8             	imul   ebp,eax
c0008d3a:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d3d:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d40:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d47:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d4a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d4d:	0f 8d 95 00 00 00    	jge    c0008de8 <linear_vari_process+0x219>
c0008d53:	d9 c0                	fld    st(0)
c0008d55:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d5c:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d64:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d68:	de d9                	fcompp 
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	76 79                	jbe    c0008de8 <linear_vari_process+0x219>
c0008d6f:	85 ed                	test   ebp,ebp
c0008d71:	7e 36                	jle    c0008da9 <linear_vari_process+0x1da>
c0008d73:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d77:	dd 07                	fld    QWORD PTR [edi]
c0008d79:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d7c:	83 ec 10             	sub    esp,0x10
c0008d7f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d82:	e8 59 62 01 00       	call   c001efe0 <fabs>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	dc 1d 98 07 02 c0    	fcomp  QWORD PTR ds:0xc0020798
c0008d90:	df e0                	fnstsw ax
c0008d92:	9e                   	sahf   
c0008d93:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d97:	76 10                	jbe    c0008da9 <linear_vari_process+0x1da>
c0008d99:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d9c:	dc 27                	fsub   QWORD PTR [edi]
c0008d9e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008da1:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008da4:	dc 07                	fadd   QWORD PTR [edi]
c0008da6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da9:	31 c0                	xor    eax,eax
c0008dab:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dae:	39 c2                	cmp    edx,eax
c0008db0:	0f 8e 4f ff ff ff    	jle    c0008d05 <linear_vari_process+0x136>
c0008db6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008db8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dbb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dbf:	89 e9                	mov    ecx,ebp
c0008dc1:	29 d1                	sub    ecx,edx
c0008dc3:	01 c5                	add    ebp,eax
c0008dc5:	89 ca                	mov    edx,ecx
c0008dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dcb:	01 c2                	add    edx,eax
c0008dcd:	40                   	inc    eax
c0008dce:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008dd1:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008dd4:	d8 e1                	fsub   st,st(1)
c0008dd6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008dd9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ddc:	d8 ca                	fmul   st,st(2)
c0008dde:	de c1                	faddp  st(1),st
c0008de0:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008de3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008de6:	eb c3                	jmp    c0008dab <linear_vari_process+0x1dc>
c0008de8:	39 d1                	cmp    ecx,edx
c0008dea:	7d 13                	jge    c0008dff <linear_vari_process+0x230>
c0008dec:	89 d0                	mov    eax,edx
c0008dee:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008df1:	29 c8                	sub    eax,ecx
c0008df3:	99                   	cdq    
c0008df4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dfb:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008dff:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e05:	85 c0                	test   eax,eax
c0008e07:	7f 1b                	jg     c0008e24 <linear_vari_process+0x255>
c0008e09:	dd 04 24             	fld    QWORD PTR [esp]
c0008e0c:	dd 1f                	fstp   QWORD PTR [edi]
c0008e0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e11:	99                   	cdq    
c0008e12:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e15:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e18:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e1b:	99                   	cdq    
c0008e1c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e1f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e22:	eb 26                	jmp    c0008e4a <linear_vari_process+0x27b>
c0008e24:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e27:	31 d2                	xor    edx,edx
c0008e29:	29 c8                	sub    eax,ecx
c0008e2b:	c1 e0 02             	shl    eax,0x2
c0008e2e:	39 d1                	cmp    ecx,edx
c0008e30:	7e d7                	jle    c0008e09 <linear_vari_process+0x23a>
c0008e32:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e34:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e38:	83 c0 04             	add    eax,0x4
c0008e3b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e3f:	42                   	inc    edx
c0008e40:	eb ec                	jmp    c0008e2e <linear_vari_process+0x25f>
c0008e42:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e4e:	83 c4 2c             	add    esp,0x2c
c0008e51:	5b                   	pop    ebx
c0008e52:	5e                   	pop    esi
c0008e53:	5f                   	pop    edi
c0008e54:	5d                   	pop    ebp
c0008e55:	c3                   	ret    

c0008e56 <linear_reset>:
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e60:	85 c0                	test   eax,eax
c0008e62:	74 20                	je     c0008e84 <linear_reset+0x2e>
c0008e64:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e67:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008e6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008e71:	51                   	push   ecx
c0008e72:	c1 e2 02             	shl    edx,0x2
c0008e75:	83 c0 1c             	add    eax,0x1c
c0008e78:	52                   	push   edx
c0008e79:	6a 00                	push   0x0
c0008e7b:	50                   	push   eax
c0008e7c:	e8 87 77 ff ff       	call   c0000608 <memset>
c0008e81:	83 c4 10             	add    esp,0x10
c0008e84:	83 c4 0c             	add    esp,0xc
c0008e87:	c3                   	ret    

c0008e88 <linear_get_name>:
c0008e88:	31 c0                	xor    eax,eax
c0008e8a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008e8f:	75 05                	jne    c0008e96 <linear_get_name+0xe>
c0008e91:	b8 54 07 02 c0       	mov    eax,0xc0020754
c0008e96:	c3                   	ret    

c0008e97 <linear_get_description>:
c0008e97:	31 c0                	xor    eax,eax
c0008e99:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008e9e:	75 05                	jne    c0008ea5 <linear_get_description+0xe>
c0008ea0:	b8 68 07 02 c0       	mov    eax,0xc0020768
c0008ea5:	c3                   	ret    

c0008ea6 <linear_set_converter>:
c0008ea6:	53                   	push   ebx
c0008ea7:	b8 0a 00 00 00       	mov    eax,0xa
c0008eac:	83 ec 08             	sub    esp,0x8
c0008eaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008eb3:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008eb8:	75 6e                	jne    c0008f28 <linear_set_converter+0x82>
c0008eba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008ebd:	85 c0                	test   eax,eax
c0008ebf:	74 13                	je     c0008ed4 <linear_set_converter+0x2e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	50                   	push   eax
c0008ec5:	e8 47 30 00 00       	call   c000bf11 <free>
c0008eca:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	50                   	push   eax
c0008ed5:	50                   	push   eax
c0008ed6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ed9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008ee0:	50                   	push   eax
c0008ee1:	6a 01                	push   0x1
c0008ee3:	e8 49 30 00 00       	call   c000bf31 <calloc>
c0008ee8:	89 c2                	mov    edx,eax
c0008eea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	b8 01 00 00 00       	mov    eax,0x1
c0008ef5:	85 d2                	test   edx,edx
c0008ef7:	74 2f                	je     c0008f28 <linear_set_converter+0x82>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008eff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f02:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f08:	c7 43 24 cf 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bcf
c0008f0f:	c7 43 20 cf 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bcf
c0008f16:	c7 43 28 56 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e56
c0008f1d:	53                   	push   ebx
c0008f1e:	e8 33 ff ff ff       	call   c0008e56 <linear_reset>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	31 c0                	xor    eax,eax
c0008f28:	83 c4 08             	add    esp,0x8
c0008f2b:	5b                   	pop    ebx
c0008f2c:	c3                   	ret    

c0008f2d <is_bad_src_ratio>:
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f34:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f3f:	dd 04 24             	fld    QWORD PTR [esp]
c0008f42:	dd 05 20 07 02 c0    	fld    QWORD PTR ds:0xc0020720
c0008f48:	de d9                	fcompp 
c0008f4a:	df e0                	fnstsw ax
c0008f4c:	f6 c4 45             	test   ah,0x45
c0008f4f:	74 10                	je     c0008f61 <is_bad_src_ratio+0x34>
c0008f51:	dd 04 24             	fld    QWORD PTR [esp]
c0008f54:	dc 1d 28 07 02 c0    	fcomp  QWORD PTR ds:0xc0020728
c0008f5a:	df e0                	fnstsw ax
c0008f5c:	f6 c4 45             	test   ah,0x45
c0008f5f:	75 07                	jne    c0008f68 <is_bad_src_ratio+0x3b>
c0008f61:	b8 01 00 00 00       	mov    eax,0x1
c0008f66:	eb 05                	jmp    c0008f6d <is_bad_src_ratio+0x40>
c0008f68:	b8 00 00 00 00       	mov    eax,0x0
c0008f6d:	83 c4 0c             	add    esp,0xc
c0008f70:	c3                   	ret    

c0008f71 <int_to_fp>:
c0008f71:	c1 e0 0c             	shl    eax,0xc
c0008f74:	c3                   	ret    

c0008f75 <fp_to_int>:
c0008f75:	c1 f8 0c             	sar    eax,0xc
c0008f78:	c3                   	ret    

c0008f79 <fp_fraction_part>:
c0008f79:	25 ff 0f 00 00       	and    eax,0xfff
c0008f7e:	c3                   	ret    

c0008f7f <fp_to_double>:
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	e8 f2 ff ff ff       	call   c0008f79 <fp_fraction_part>
c0008f87:	d9 05 28 09 02 c0    	fld    DWORD PTR ds:0xc0020928
c0008f8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f91:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008f95:	83 c4 0c             	add    esp,0xc
c0008f98:	c3                   	ret    

c0008f99 <calc_output_single>:
c0008f99:	55                   	push   ebp
c0008f9a:	57                   	push   edi
c0008f9b:	89 c7                	mov    edi,eax
c0008f9d:	56                   	push   esi
c0008f9e:	53                   	push   ebx
c0008f9f:	89 d3                	mov    ebx,edx
c0008fa1:	83 ec 24             	sub    esp,0x24
c0008fa4:	89 de                	mov    esi,ebx
c0008fa6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fa9:	e8 c3 ff ff ff       	call   c0008f71 <int_to_fp>
c0008fae:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fb5:	29 c8                	sub    eax,ecx
c0008fb7:	99                   	cdq    
c0008fb8:	f7 fb                	idiv   ebx
c0008fba:	0f af f0             	imul   esi,eax
c0008fbd:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008fc0:	01 ce                	add    esi,ecx
c0008fc2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008fc6:	29 c2                	sub    edx,eax
c0008fc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fd7:	8d 14 97             	lea    edx,[edi+edx*4]
c0008fda:	89 f0                	mov    eax,esi
c0008fdc:	e8 9e ff ff ff       	call   c0008f7f <fp_to_double>
c0008fe1:	89 f0                	mov    eax,esi
c0008fe3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008fe7:	e8 89 ff ff ff       	call   c0008f75 <fp_to_int>
c0008fec:	83 c2 04             	add    edx,0x4
c0008fef:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ff3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0008ff7:	d8 e1                	fsub   st,st(1)
c0008ff9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ffd:	de c9                	fmulp  st(1),st
c0008fff:	de c1                	faddp  st(1),st
c0009001:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009007:	29 de                	sub    esi,ebx
c0009009:	dc 04 24             	fadd   QWORD PTR [esp]
c000900c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900f:	79 c9                	jns    c0008fda <calc_output_single+0x41>
c0009011:	89 d8                	mov    eax,ebx
c0009013:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009017:	29 c8                	sub    eax,ecx
c0009019:	89 c1                	mov    ecx,eax
c000901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901f:	29 c8                	sub    eax,ecx
c0009021:	99                   	cdq    
c0009022:	f7 fb                	idiv   ebx
c0009024:	89 da                	mov    edx,ebx
c0009026:	0f af d0             	imul   edx,eax
c0009029:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000902d:	01 d1                	add    ecx,edx
c000902f:	d9 ee                	fldz   
c0009031:	8d 14 87             	lea    edx,[edi+eax*4]
c0009034:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009038:	89 c8                	mov    eax,ecx
c000903a:	e8 40 ff ff ff       	call   c0008f7f <fp_to_double>
c000903f:	89 c8                	mov    eax,ecx
c0009041:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009045:	e8 2b ff ff ff       	call   c0008f75 <fp_to_int>
c000904a:	29 d9                	sub    ecx,ebx
c000904c:	83 ea 04             	sub    edx,0x4
c000904f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009053:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009057:	d8 e1                	fsub   st,st(1)
c0009059:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000905d:	de c9                	fmulp  st(1),st
c000905f:	de c1                	faddp  st(1),st
c0009061:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009067:	85 c9                	test   ecx,ecx
c0009069:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000906d:	de c1                	faddp  st(1),st
c000906f:	7f c3                	jg     c0009034 <calc_output_single+0x9b>
c0009071:	dd 04 24             	fld    QWORD PTR [esp]
c0009074:	de c1                	faddp  st(1),st
c0009076:	83 c4 24             	add    esp,0x24
c0009079:	5b                   	pop    ebx
c000907a:	5e                   	pop    esi
c000907b:	5f                   	pop    edi
c000907c:	5d                   	pop    ebp
c000907d:	c3                   	ret    

c000907e <calc_output_stereo>:
c000907e:	55                   	push   ebp
c000907f:	57                   	push   edi
c0009080:	89 c7                	mov    edi,eax
c0009082:	56                   	push   esi
c0009083:	53                   	push   ebx
c0009084:	89 d3                	mov    ebx,edx
c0009086:	83 ec 44             	sub    esp,0x44
c0009089:	89 de                	mov    esi,ebx
c000908b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000908e:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009092:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009096:	e8 d6 fe ff ff       	call   c0008f71 <int_to_fp>
c000909b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000909e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090a2:	29 c8                	sub    eax,ecx
c00090a4:	99                   	cdq    
c00090a5:	f7 fb                	idiv   ebx
c00090a7:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00090b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090b6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090b9:	0f af f0             	imul   esi,eax
c00090bc:	0f af c2             	imul   eax,edx
c00090bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00090c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090c7:	d9 ee                	fldz   
c00090c9:	29 c2                	sub    edx,eax
c00090cb:	01 ce                	add    esi,ecx
c00090cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090d0:	8d 14 97             	lea    edx,[edi+edx*4]
c00090d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00090db:	89 f0                	mov    eax,esi
c00090dd:	e8 9d fe ff ff       	call   c0008f7f <fp_to_double>
c00090e2:	89 f0                	mov    eax,esi
c00090e4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090e8:	e8 88 fe ff ff       	call   c0008f75 <fp_to_int>
c00090ed:	83 c2 08             	add    edx,0x8
c00090f0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090f4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090f8:	d8 e1                	fsub   st,st(1)
c00090fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00090fe:	de c9                	fmulp  st(1),st
c0009100:	de c1                	faddp  st(1),st
c0009102:	d9 c0                	fld    st(0)
c0009104:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000910a:	dc 04 24             	fadd   QWORD PTR [esp]
c000910d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009110:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009116:	29 de                	sub    esi,ebx
c0009118:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000911c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009120:	79 b9                	jns    c00090db <calc_output_stereo+0x5d>
c0009122:	89 d8                	mov    eax,ebx
c0009124:	29 c8                	sub    eax,ecx
c0009126:	89 c1                	mov    ecx,eax
c0009128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000912c:	29 c8                	sub    eax,ecx
c000912e:	99                   	cdq    
c000912f:	f7 fb                	idiv   ebx
c0009131:	89 da                	mov    edx,ebx
c0009133:	0f af d0             	imul   edx,eax
c0009136:	40                   	inc    eax
c0009137:	01 d1                	add    ecx,edx
c0009139:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c000913e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0009142:	d9 ee                	fldz   
c0009144:	d9 ee                	fldz   
c0009146:	8d 14 87             	lea    edx,[edi+eax*4]
c0009149:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000914d:	89 c8                	mov    eax,ecx
c000914f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009153:	e8 27 fe ff ff       	call   c0008f7f <fp_to_double>
c0009158:	89 c8                	mov    eax,ecx
c000915a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000915e:	e8 12 fe ff ff       	call   c0008f75 <fp_to_int>
c0009163:	29 d9                	sub    ecx,ebx
c0009165:	83 ea 08             	sub    edx,0x8
c0009168:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000916c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009170:	d8 e1                	fsub   st,st(1)
c0009172:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009176:	de c9                	fmulp  st(1),st
c0009178:	de c1                	faddp  st(1),st
c000917a:	d9 c0                	fld    st(0)
c000917c:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009182:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009186:	de c1                	faddp  st(1),st
c0009188:	d9 c9                	fxch   st(1)
c000918a:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009190:	85 c9                	test   ecx,ecx
c0009192:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009196:	de c1                	faddp  st(1),st
c0009198:	7f af                	jg     c0009149 <calc_output_stereo+0xcb>
c000919a:	dd 04 24             	fld    QWORD PTR [esp]
c000919d:	de c2                	faddp  st(2),st
c000919f:	d9 c9                	fxch   st(1)
c00091a1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091a5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00091a9:	d9 18                	fstp   DWORD PTR [eax]
c00091ab:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00091af:	de c1                	faddp  st(1),st
c00091b1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00091b5:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091b8:	83 c4 44             	add    esp,0x44
c00091bb:	5b                   	pop    ebx
c00091bc:	5e                   	pop    esi
c00091bd:	5f                   	pop    edi
c00091be:	5d                   	pop    ebp
c00091bf:	c3                   	ret    

c00091c0 <calc_output_quad>:
c00091c0:	55                   	push   ebp
c00091c1:	57                   	push   edi
c00091c2:	56                   	push   esi
c00091c3:	89 c6                	mov    esi,eax
c00091c5:	53                   	push   ebx
c00091c6:	89 d3                	mov    ebx,edx
c00091c8:	83 ec 5c             	sub    esp,0x5c
c00091cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ce:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091d2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091d9:	e8 93 fd ff ff       	call   c0008f71 <int_to_fp>
c00091de:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00091e5:	29 c8                	sub    eax,ecx
c00091e7:	99                   	cdq    
c00091e8:	f7 fb                	idiv   ebx
c00091ea:	89 da                	mov    edx,ebx
c00091ec:	0f af d0             	imul   edx,eax
c00091ef:	01 ca                	add    edx,ecx
c00091f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091f5:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00091f8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00091fc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00091ff:	0f af c2             	imul   eax,edx
c0009202:	d9 ee                	fldz   
c0009204:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009208:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000920c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009210:	29 c2                	sub    edx,eax
c0009212:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0009216:	8d 14 96             	lea    edx,[esi+edx*4]
c0009219:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000921d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009225:	e8 55 fd ff ff       	call   c0008f7f <fp_to_double>
c000922a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922e:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009232:	e8 3e fd ff ff       	call   c0008f75 <fp_to_int>
c0009237:	83 c2 10             	add    edx,0x10
c000923a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000923e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009242:	d8 e1                	fsub   st,st(1)
c0009244:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009248:	de c9                	fmulp  st(1),st
c000924a:	de c1                	faddp  st(1),st
c000924c:	d9 c0                	fld    st(0)
c000924e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009254:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009258:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000925c:	d9 c0                	fld    st(0)
c000925e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009264:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009268:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000926c:	d9 c0                	fld    st(0)
c000926e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009274:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009278:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000927c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009282:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009286:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000928a:	de c1                	faddp  st(1),st
c000928c:	79 8f                	jns    c000921d <calc_output_quad+0x5d>
c000928e:	89 d8                	mov    eax,ebx
c0009290:	29 c8                	sub    eax,ecx
c0009292:	89 c1                	mov    ecx,eax
c0009294:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009298:	29 c8                	sub    eax,ecx
c000929a:	99                   	cdq    
c000929b:	f7 fb                	idiv   ebx
c000929d:	89 da                	mov    edx,ebx
c000929f:	0f af d0             	imul   edx,eax
c00092a2:	40                   	inc    eax
c00092a3:	01 d1                	add    ecx,edx
c00092a5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092aa:	d9 ee                	fldz   
c00092ac:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092b0:	d9 ee                	fldz   
c00092b2:	d9 ee                	fldz   
c00092b4:	d9 ee                	fldz   
c00092b6:	8d 14 86             	lea    edx,[esi+eax*4]
c00092b9:	eb 0a                	jmp    c00092c5 <calc_output_quad+0x105>
c00092bb:	d9 cc                	fxch   st(4)
c00092bd:	d9 ca                	fxch   st(2)
c00092bf:	d9 c9                	fxch   st(1)
c00092c1:	d9 cb                	fxch   st(3)
c00092c3:	d9 c9                	fxch   st(1)
c00092c5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092c9:	d9 c9                	fxch   st(1)
c00092cb:	89 c8                	mov    eax,ecx
c00092cd:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092d1:	d9 c9                	fxch   st(1)
c00092d3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092d7:	d9 c9                	fxch   st(1)
c00092d9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092dd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092e1:	e8 99 fc ff ff       	call   c0008f7f <fp_to_double>
c00092e6:	89 c8                	mov    eax,ecx
c00092e8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00092ec:	e8 84 fc ff ff       	call   c0008f75 <fp_to_int>
c00092f1:	29 d9                	sub    ecx,ebx
c00092f3:	83 ea 10             	sub    edx,0x10
c00092f6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092fa:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092fe:	d8 e1                	fsub   st,st(1)
c0009300:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009304:	de c9                	fmulp  st(1),st
c0009306:	de c1                	faddp  st(1),st
c0009308:	d9 c0                	fld    st(0)
c000930a:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c0009310:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009314:	de c1                	faddp  st(1),st
c0009316:	d9 c1                	fld    st(1)
c0009318:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000931e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009322:	de c1                	faddp  st(1),st
c0009324:	d9 c2                	fld    st(2)
c0009326:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c000932c:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009330:	de c1                	faddp  st(1),st
c0009332:	d9 cb                	fxch   st(3)
c0009334:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c000933a:	85 c9                	test   ecx,ecx
c000933c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009340:	de c1                	faddp  st(1),st
c0009342:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009346:	0f 8f 6f ff ff ff    	jg     c00092bb <calc_output_quad+0xfb>
c000934c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009350:	de c4                	faddp  st(4),st
c0009352:	d9 cb                	fxch   st(3)
c0009354:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009357:	d9 1f                	fstp   DWORD PTR [edi]
c0009359:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000935d:	de c2                	faddp  st(2),st
c000935f:	d9 c9                	fxch   st(1)
c0009361:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009364:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009367:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000936b:	de c3                	faddp  st(3),st
c000936d:	d9 ca                	fxch   st(2)
c000936f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009372:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009375:	de c1                	faddp  st(1),st
c0009377:	dc 0c 24             	fmul   QWORD PTR [esp]
c000937a:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000937d:	83 c4 5c             	add    esp,0x5c
c0009380:	5b                   	pop    ebx
c0009381:	5e                   	pop    esi
c0009382:	5f                   	pop    edi
c0009383:	5d                   	pop    ebp
c0009384:	c3                   	ret    

c0009385 <calc_output_hex>:
c0009385:	55                   	push   ebp
c0009386:	57                   	push   edi
c0009387:	89 c7                	mov    edi,eax
c0009389:	56                   	push   esi
c000938a:	53                   	push   ebx
c000938b:	89 d3                	mov    ebx,edx
c000938d:	83 ec 7c             	sub    esp,0x7c
c0009390:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009393:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000939a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093a4:	e8 c8 fb ff ff       	call   c0008f71 <int_to_fp>
c00093a9:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00093b0:	29 c8                	sub    eax,ecx
c00093b2:	99                   	cdq    
c00093b3:	f7 fb                	idiv   ebx
c00093b5:	89 da                	mov    edx,ebx
c00093b7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00093bf:	0f af d0             	imul   edx,eax
c00093c2:	01 ca                	add    edx,ecx
c00093c4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00093cc:	d9 ee                	fldz   
c00093ce:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093d2:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093d5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00093d9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093dc:	0f af c2             	imul   eax,edx
c00093df:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093e3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00093e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00093eb:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093ef:	29 c2                	sub    edx,eax
c00093f1:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093f5:	8d 14 97             	lea    edx,[edi+edx*4]
c00093f8:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093fc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009404:	e8 76 fb ff ff       	call   c0008f7f <fp_to_double>
c0009409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	e8 5f fb ff ff       	call   c0008f75 <fp_to_int>
c0009416:	83 c2 18             	add    edx,0x18
c0009419:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000941d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009421:	d8 e1                	fsub   st,st(1)
c0009423:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009427:	de c9                	fmulp  st(1),st
c0009429:	de c1                	faddp  st(1),st
c000942b:	d9 c0                	fld    st(0)
c000942d:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009433:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009437:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000943b:	d9 c0                	fld    st(0)
c000943d:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009443:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009447:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000944b:	d9 c0                	fld    st(0)
c000944d:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009453:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009457:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000945b:	d9 c0                	fld    st(0)
c000945d:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009463:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009467:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000946b:	d9 c0                	fld    st(0)
c000946d:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009473:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009477:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000947b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009481:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009485:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009489:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000948d:	0f 89 6d ff ff ff    	jns    c0009400 <calc_output_hex+0x7b>
c0009493:	89 d8                	mov    eax,ebx
c0009495:	29 c8                	sub    eax,ecx
c0009497:	89 c1                	mov    ecx,eax
c0009499:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000949d:	29 c8                	sub    eax,ecx
c000949f:	99                   	cdq    
c00094a0:	f7 fb                	idiv   ebx
c00094a2:	89 da                	mov    edx,ebx
c00094a4:	0f af d0             	imul   edx,eax
c00094a7:	40                   	inc    eax
c00094a8:	01 d1                	add    ecx,edx
c00094aa:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c00094af:	d9 ee                	fldz   
c00094b1:	d9 ee                	fldz   
c00094b3:	d9 ee                	fldz   
c00094b5:	d9 ca                	fxch   st(2)
c00094b7:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c00094bb:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094bf:	d9 ee                	fldz   
c00094c1:	8d 14 87             	lea    edx,[edi+eax*4]
c00094c4:	d9 ee                	fldz   
c00094c6:	d9 ca                	fxch   st(2)
c00094c8:	eb 0a                	jmp    c00094d4 <calc_output_hex+0x14f>
c00094ca:	d9 c9                	fxch   st(1)
c00094cc:	d9 cc                	fxch   st(4)
c00094ce:	d9 cb                	fxch   st(3)
c00094d0:	d9 ca                	fxch   st(2)
c00094d2:	d9 c9                	fxch   st(1)
c00094d4:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094d8:	89 c8                	mov    eax,ecx
c00094da:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094de:	d9 ca                	fxch   st(2)
c00094e0:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094e4:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094e8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094ec:	e8 8e fa ff ff       	call   c0008f7f <fp_to_double>
c00094f1:	89 c8                	mov    eax,ecx
c00094f3:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00094f7:	e8 79 fa ff ff       	call   c0008f75 <fp_to_int>
c00094fc:	29 d9                	sub    ecx,ebx
c00094fe:	83 ea 18             	sub    edx,0x18
c0009501:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009505:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009509:	d8 e1                	fsub   st,st(1)
c000950b:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000950f:	de c9                	fmulp  st(1),st
c0009511:	de c1                	faddp  st(1),st
c0009513:	d9 c0                	fld    st(0)
c0009515:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c000951b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000951f:	de c1                	faddp  st(1),st
c0009521:	d9 c1                	fld    st(1)
c0009523:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009529:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000952d:	de c1                	faddp  st(1),st
c000952f:	d9 c2                	fld    st(2)
c0009531:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009537:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000953b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000953f:	d9 c2                	fld    st(2)
c0009541:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009547:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000954b:	de c1                	faddp  st(1),st
c000954d:	d9 c3                	fld    st(3)
c000954f:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009555:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009559:	de c1                	faddp  st(1),st
c000955b:	d9 cc                	fxch   st(4)
c000955d:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009563:	85 c9                	test   ecx,ecx
c0009565:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009569:	de c1                	faddp  st(1),st
c000956b:	0f 8f 59 ff ff ff    	jg     c00094ca <calc_output_hex+0x145>
c0009571:	d9 cb                	fxch   st(3)
c0009573:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009577:	dc 0c 24             	fmul   QWORD PTR [esp]
c000957a:	d9 1e                	fstp   DWORD PTR [esi]
c000957c:	d9 c9                	fxch   st(1)
c000957e:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009582:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009585:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009588:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000958c:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009590:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009593:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009596:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000959a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000959d:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095a0:	d9 c9                	fxch   st(1)
c00095a2:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095a6:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a9:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095ac:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095b0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b3:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095b6:	83 c4 7c             	add    esp,0x7c
c00095b9:	5b                   	pop    ebx
c00095ba:	5e                   	pop    esi
c00095bb:	5f                   	pop    edi
c00095bc:	5d                   	pop    ebp
c00095bd:	c3                   	ret    

c00095be <sinc_reset>:
c00095be:	56                   	push   esi
c00095bf:	53                   	push   ebx
c00095c0:	51                   	push   ecx
c00095c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095c5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095c8:	85 db                	test   ebx,ebx
c00095ca:	74 51                	je     c000961d <sinc_reset+0x5f>
c00095cc:	d9 ee                	fldz   
c00095ce:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095d5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095dc:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00095df:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095e6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095ec:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00095ef:	52                   	push   edx
c00095f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00095f3:	c1 e0 02             	shl    eax,0x2
c00095f6:	50                   	push   eax
c00095f7:	6a 00                	push   0x0
c00095f9:	56                   	push   esi
c00095fa:	e8 09 70 ff ff       	call   c0000608 <memset>
c00095ff:	83 c4 0c             	add    esp,0xc
c0009602:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009605:	c1 e0 02             	shl    eax,0x2
c0009608:	50                   	push   eax
c0009609:	68 aa 00 00 00       	push   0xaa
c000960e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009611:	8d 04 86             	lea    eax,[esi+eax*4]
c0009614:	50                   	push   eax
c0009615:	e8 ee 6f ff ff       	call   c0000608 <memset>
c000961a:	83 c4 10             	add    esp,0x10
c000961d:	58                   	pop    eax
c000961e:	5b                   	pop    ebx
c000961f:	5e                   	pop    esi
c0009620:	c3                   	ret    

c0009621 <calc_output_multi>:
c0009621:	55                   	push   ebp
c0009622:	57                   	push   edi
c0009623:	8d 78 44             	lea    edi,[eax+0x44]
c0009626:	56                   	push   esi
c0009627:	89 c6                	mov    esi,eax
c0009629:	53                   	push   ebx
c000962a:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009630:	83 ec 4c             	sub    esp,0x4c
c0009633:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000963b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000963e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009642:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009646:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000964a:	e8 22 f9 ff ff       	call   c0008f71 <int_to_fp>
c000964f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009653:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009657:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000965b:	99                   	cdq    
c000965c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009664:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009667:	0f af d0             	imul   edx,eax
c000966a:	0f af c3             	imul   eax,ebx
c000966d:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009671:	29 c5                	sub    ebp,eax
c0009673:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000967a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000967e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009682:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009686:	52                   	push   edx
c0009687:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968b:	6a 00                	push   0x0
c000968d:	57                   	push   edi
c000968e:	e8 75 6f ff ff       	call   c0000608 <memset>
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000969a:	e8 e0 f8 ff ff       	call   c0008f7f <fp_to_double>
c000969f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096a3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096a7:	e8 c9 f8 ff ff       	call   c0008f75 <fp_to_int>
c00096ac:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096af:	89 d9                	mov    ecx,ebx
c00096b1:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096b4:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096b8:	d8 e1                	fsub   st,st(1)
c00096ba:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096be:	de c9                	fmulp  st(1),st
c00096c0:	de c1                	faddp  st(1),st
c00096c2:	89 c8                	mov    eax,ecx
c00096c4:	bd 08 00 00 00       	mov    ebp,0x8
c00096c9:	99                   	cdq    
c00096ca:	f7 fd                	idiv   ebp
c00096cc:	4a                   	dec    edx
c00096cd:	83 fa 06             	cmp    edx,0x6
c00096d0:	77 07                	ja     c00096d9 <calc_output_multi+0xb8>
c00096d2:	ff 24 95 a0 07 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf860]
c00096d9:	49                   	dec    ecx
c00096da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096de:	d9 c0                	fld    st(0)
c00096e0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096e7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00096ea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096ee:	dc 00                	fadd   QWORD PTR [eax]
c00096f0:	dd 18                	fstp   QWORD PTR [eax]
c00096f2:	49                   	dec    ecx
c00096f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096f7:	d9 c0                	fld    st(0)
c00096f9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009700:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009703:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009707:	dc 00                	fadd   QWORD PTR [eax]
c0009709:	dd 18                	fstp   QWORD PTR [eax]
c000970b:	49                   	dec    ecx
c000970c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009710:	d9 c0                	fld    st(0)
c0009712:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009719:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009720:	dc 00                	fadd   QWORD PTR [eax]
c0009722:	dd 18                	fstp   QWORD PTR [eax]
c0009724:	49                   	dec    ecx
c0009725:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009729:	d9 c0                	fld    st(0)
c000972b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009732:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009735:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009739:	dc 00                	fadd   QWORD PTR [eax]
c000973b:	dd 18                	fstp   QWORD PTR [eax]
c000973d:	49                   	dec    ecx
c000973e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009742:	d9 c0                	fld    st(0)
c0009744:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000974b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009752:	dc 00                	fadd   QWORD PTR [eax]
c0009754:	dd 18                	fstp   QWORD PTR [eax]
c0009756:	49                   	dec    ecx
c0009757:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000975b:	d9 c0                	fld    st(0)
c000975d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009764:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009767:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000976b:	dc 00                	fadd   QWORD PTR [eax]
c000976d:	dd 18                	fstp   QWORD PTR [eax]
c000976f:	49                   	dec    ecx
c0009770:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009774:	d9 c0                	fld    st(0)
c0009776:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000977d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009780:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009784:	dc 00                	fadd   QWORD PTR [eax]
c0009786:	dd 18                	fstp   QWORD PTR [eax]
c0009788:	49                   	dec    ecx
c0009789:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000978d:	d9 c0                	fld    st(0)
c000978f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009796:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009799:	85 c9                	test   ecx,ecx
c000979b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000979f:	dc 00                	fadd   QWORD PTR [eax]
c00097a1:	dd 18                	fstp   QWORD PTR [eax]
c00097a3:	0f 8f 19 ff ff ff    	jg     c00096c2 <calc_output_multi+0xa1>
c00097a9:	dd d8                	fstp   st(0)
c00097ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097af:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00097b3:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00097b7:	0f 89 d9 fe ff ff    	jns    c0009696 <calc_output_multi+0x75>
c00097bd:	89 d1                	mov    ecx,edx
c00097bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097c3:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c00097c7:	29 c8                	sub    eax,ecx
c00097c9:	99                   	cdq    
c00097ca:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c00097ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097d2:	0f af d0             	imul   edx,eax
c00097d5:	40                   	inc    eax
c00097d6:	01 d1                	add    ecx,edx
c00097d8:	0f af c3             	imul   eax,ebx
c00097db:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00097de:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00097e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00097e6:	50                   	push   eax
c00097e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097eb:	6a 00                	push   0x0
c00097ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00097f1:	e8 12 6e ff ff       	call   c0000608 <memset>
c00097f6:	83 c4 10             	add    esp,0x10
c00097f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00097fd:	e8 7d f7 ff ff       	call   c0008f7f <fp_to_double>
c0009802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009806:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000980a:	e8 66 f7 ff ff       	call   c0008f75 <fp_to_int>
c000980f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009812:	89 d9                	mov    ecx,ebx
c0009814:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009817:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000981b:	d8 e1                	fsub   st,st(1)
c000981d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009821:	de c9                	fmulp  st(1),st
c0009823:	de c1                	faddp  st(1),st
c0009825:	89 c8                	mov    eax,ecx
c0009827:	bd 08 00 00 00       	mov    ebp,0x8
c000982c:	99                   	cdq    
c000982d:	f7 fd                	idiv   ebp
c000982f:	4a                   	dec    edx
c0009830:	83 fa 06             	cmp    edx,0x6
c0009833:	77 07                	ja     c000983c <calc_output_multi+0x21b>
c0009835:	ff 24 95 bc 07 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf844]
c000983c:	49                   	dec    ecx
c000983d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009845:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984c:	d9 c0                	fld    st(0)
c000984e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009852:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009855:	dc 00                	fadd   QWORD PTR [eax]
c0009857:	dd 18                	fstp   QWORD PTR [eax]
c0009859:	49                   	dec    ecx
c000985a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000985e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009862:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009869:	d9 c0                	fld    st(0)
c000986b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000986f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009872:	dc 00                	fadd   QWORD PTR [eax]
c0009874:	dd 18                	fstp   QWORD PTR [eax]
c0009876:	49                   	dec    ecx
c0009877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000987b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000987f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009886:	d9 c0                	fld    st(0)
c0009888:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000988c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000988f:	dc 00                	fadd   QWORD PTR [eax]
c0009891:	dd 18                	fstp   QWORD PTR [eax]
c0009893:	49                   	dec    ecx
c0009894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000989c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098a3:	d9 c0                	fld    st(0)
c00098a5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ac:	dc 00                	fadd   QWORD PTR [eax]
c00098ae:	dd 18                	fstp   QWORD PTR [eax]
c00098b0:	49                   	dec    ecx
c00098b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098c0:	d9 c0                	fld    st(0)
c00098c2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c6:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098c9:	dc 00                	fadd   QWORD PTR [eax]
c00098cb:	dd 18                	fstp   QWORD PTR [eax]
c00098cd:	49                   	dec    ecx
c00098ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098dd:	d9 c0                	fld    st(0)
c00098df:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098e3:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098e6:	dc 00                	fadd   QWORD PTR [eax]
c00098e8:	dd 18                	fstp   QWORD PTR [eax]
c00098ea:	49                   	dec    ecx
c00098eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fa:	d9 c0                	fld    st(0)
c00098fc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009900:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009903:	dc 00                	fadd   QWORD PTR [eax]
c0009905:	dd 18                	fstp   QWORD PTR [eax]
c0009907:	49                   	dec    ecx
c0009908:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000990c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009910:	85 c9                	test   ecx,ecx
c0009912:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009919:	d9 c0                	fld    st(0)
c000991b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000991f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009922:	dc 00                	fadd   QWORD PTR [eax]
c0009924:	dd 18                	fstp   QWORD PTR [eax]
c0009926:	0f 8f f9 fe ff ff    	jg     c0009825 <calc_output_multi+0x204>
c000992c:	dd d8                	fstp   st(0)
c000992e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009932:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c0009936:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c000993a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000993f:	0f 8f b4 fe ff ff    	jg     c00097f9 <calc_output_multi+0x1d8>
c0009945:	b9 08 00 00 00       	mov    ecx,0x8
c000994a:	89 d8                	mov    eax,ebx
c000994c:	99                   	cdq    
c000994d:	f7 f9                	idiv   ecx
c000994f:	4a                   	dec    edx
c0009950:	83 fa 06             	cmp    edx,0x6
c0009953:	77 07                	ja     c000995c <calc_output_multi+0x33b>
c0009955:	ff 24 95 d8 07 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf828]
c000995c:	4b                   	dec    ebx
c000995d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009961:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009964:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009967:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000996b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c000996f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009972:	4b                   	dec    ebx
c0009973:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009977:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c000997a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c000997d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009981:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009985:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009988:	4b                   	dec    ebx
c0009989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000998d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009990:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009993:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009997:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c000999b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c000999e:	4b                   	dec    ebx
c000999f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a3:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a6:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099a9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ad:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099b1:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b4:	4b                   	dec    ebx
c00099b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b9:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bc:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099bf:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c3:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099c7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ca:	4b                   	dec    ebx
c00099cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099dd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099e0:	4b                   	dec    ebx
c00099e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e5:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e8:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099eb:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ef:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099f3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f6:	4b                   	dec    ebx
c00099f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099fb:	85 db                	test   ebx,ebx
c00099fd:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a00:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a03:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a07:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a0b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a0e:	0f 8f 36 ff ff ff    	jg     c000994a <calc_output_multi+0x329>
c0009a14:	83 c4 4c             	add    esp,0x4c
c0009a17:	5b                   	pop    ebx
c0009a18:	5e                   	pop    esi
c0009a19:	5f                   	pop    edi
c0009a1a:	5d                   	pop    ebp
c0009a1b:	c3                   	ret    

c0009a1c <double_to_fp>:
c0009a1c:	d9 05 2c 09 02 c0    	fld    DWORD PTR ds:0xc002092c
c0009a22:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a26:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a2a:	e9 d1 55 01 00       	jmp    c001f000 <lrint>

c0009a2f <fmod_one>:
c0009a2f:	83 ec 2c             	sub    esp,0x2c
c0009a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a42:	83 ec 08             	sub    esp,0x8
c0009a45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4d:	e8 ae 55 01 00       	call   c001f000 <lrint>
c0009a52:	83 c4 10             	add    esp,0x10
c0009a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a59:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a5d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a61:	de e1                	fsubrp st(1),st
c0009a63:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a67:	d9 ee                	fldz   
c0009a69:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a6d:	df e0                	fnstsw ax
c0009a6f:	f6 c4 45             	test   ah,0x45
c0009a72:	75 0a                	jne    c0009a7e <fmod_one+0x4f>
c0009a74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a78:	d9 e8                	fld1   
c0009a7a:	de c1                	faddp  st(1),st
c0009a7c:	eb 04                	jmp    c0009a82 <fmod_one+0x53>
c0009a7e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a82:	83 c4 2c             	add    esp,0x2c
c0009a85:	c3                   	ret    

c0009a86 <prepare_data>:
c0009a86:	55                   	push   ebp
c0009a87:	57                   	push   edi
c0009a88:	56                   	push   esi
c0009a89:	53                   	push   ebx
c0009a8a:	83 ec 1c             	sub    esp,0x1c
c0009a8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009a91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009a95:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009a99:	0f 89 57 01 00 00    	jns    c0009bf6 <prepare_data+0x170>
c0009a9f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009aa2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009aa5:	85 d2                	test   edx,edx
c0009aa7:	75 0d                	jne    c0009ab6 <prepare_data+0x30>
c0009aa9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009aac:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009aaf:	29 d0                	sub    eax,edx
c0009ab1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ab4:	eb 44                	jmp    c0009afa <prepare_data+0x74>
c0009ab6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009ab9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009abc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009abf:	39 c1                	cmp    ecx,eax
c0009ac1:	7d 04                	jge    c0009ac7 <prepare_data+0x41>
c0009ac3:	29 d0                	sub    eax,edx
c0009ac5:	eb 2d                	jmp    c0009af4 <prepare_data+0x6e>
c0009ac7:	29 d7                	sub    edi,edx
c0009ac9:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009acf:	01 f7                	add    edi,esi
c0009ad1:	29 f2                	sub    edx,esi
c0009ad3:	51                   	push   ecx
c0009ad4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009adb:	8d 14 90             	lea    edx,[eax+edx*4]
c0009ade:	51                   	push   ecx
c0009adf:	52                   	push   edx
c0009ae0:	50                   	push   eax
c0009ae1:	e8 b4 6a ff ff       	call   c000059a <memmove>
c0009ae6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ae9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009aec:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009aef:	29 f0                	sub    eax,esi
c0009af1:	83 c4 10             	add    esp,0x10
c0009af4:	29 f0                	sub    eax,esi
c0009af6:	79 02                	jns    c0009afa <prepare_data+0x74>
c0009af8:	31 c0                	xor    eax,eax
c0009afa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009afd:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b00:	29 ef                	sub    edi,ebp
c0009b02:	39 c7                	cmp    edi,eax
c0009b04:	7e 02                	jle    c0009b08 <prepare_data+0x82>
c0009b06:	89 c7                	mov    edi,eax
c0009b08:	89 f8                	mov    eax,edi
c0009b0a:	99                   	cdq    
c0009b0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b0e:	29 d7                	sub    edi,edx
c0009b10:	b8 15 00 00 00       	mov    eax,0x15
c0009b15:	0f 88 dd 00 00 00    	js     c0009bf8 <prepare_data+0x172>
c0009b1b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b1e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b21:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b24:	0f 8f ce 00 00 00    	jg     c0009bf8 <prepare_data+0x172>
c0009b2a:	50                   	push   eax
c0009b2b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b32:	50                   	push   eax
c0009b33:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b3f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b42:	50                   	push   eax
c0009b43:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b46:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b4a:	50                   	push   eax
c0009b4b:	e8 82 6a ff ff       	call   c00005d2 <memcpy>
c0009b50:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b53:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	01 fd                	add    ebp,edi
c0009b5b:	01 f9                	add    ecx,edi
c0009b5d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b60:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b63:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	0f 85 86 00 00 00    	jne    c0009bf6 <prepare_data+0x170>
c0009b70:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b73:	89 e8                	mov    eax,ebp
c0009b75:	29 c8                	sub    eax,ecx
c0009b77:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b7a:	39 f8                	cmp    eax,edi
c0009b7c:	7d 78                	jge    c0009bf6 <prepare_data+0x170>
c0009b7e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009b82:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009b86:	74 6e                	je     c0009bf6 <prepare_data+0x170>
c0009b88:	8d 7e 04             	lea    edi,[esi+0x4]
c0009b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009b8f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009b92:	29 ef                	sub    edi,ebp
c0009b94:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009b98:	7c 29                	jl     c0009bc3 <prepare_data+0x13d>
c0009b9a:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009b9d:	29 f1                	sub    ecx,esi
c0009b9f:	55                   	push   ebp
c0009ba0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ba7:	50                   	push   eax
c0009ba8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bab:	50                   	push   eax
c0009bac:	52                   	push   edx
c0009bad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bb1:	e8 e4 69 ff ff       	call   c000059a <memmove>
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bbc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009bc6:	83 c6 05             	add    esi,0x5
c0009bc9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bcc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bcf:	78 07                	js     c0009bd8 <prepare_data+0x152>
c0009bd1:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bd4:	39 cf                	cmp    edi,ecx
c0009bd6:	7e 04                	jle    c0009bdc <prepare_data+0x156>
c0009bd8:	89 ce                	mov    esi,ecx
c0009bda:	29 c6                	sub    esi,eax
c0009bdc:	51                   	push   ecx
c0009bdd:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009be4:	51                   	push   ecx
c0009be5:	8d 04 82             	lea    eax,[edx+eax*4]
c0009be8:	6a 00                	push   0x0
c0009bea:	50                   	push   eax
c0009beb:	e8 18 6a ff ff       	call   c0000608 <memset>
c0009bf0:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	31 c0                	xor    eax,eax
c0009bf8:	83 c4 1c             	add    esp,0x1c
c0009bfb:	5b                   	pop    ebx
c0009bfc:	5e                   	pop    esi
c0009bfd:	5f                   	pop    edi
c0009bfe:	5d                   	pop    ebp
c0009bff:	c3                   	ret    

c0009c00 <sinc_multichan_vari_process>:
c0009c00:	55                   	push   ebp
c0009c01:	b8 05 00 00 00       	mov    eax,0x5
c0009c06:	57                   	push   edi
c0009c07:	56                   	push   esi
c0009c08:	53                   	push   ebx
c0009c09:	83 ec 3c             	sub    esp,0x3c
c0009c0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c10:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c14:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c17:	85 db                	test   ebx,ebx
c0009c19:	0f 84 5b 02 00 00    	je     c0009e7a <sinc_multichan_vari_process+0x27a>
c0009c1f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c25:	0f af d0             	imul   edx,eax
c0009c28:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c2b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c2f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c36:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c39:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c40:	dd 06                	fld    QWORD PTR [esi]
c0009c42:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c46:	55                   	push   ebp
c0009c47:	55                   	push   ebp
c0009c48:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c4b:	e8 dd f2 ff ff       	call   c0008f2d <is_bad_src_ratio>
c0009c50:	89 c2                	mov    edx,eax
c0009c52:	58                   	pop    eax
c0009c53:	59                   	pop    ecx
c0009c54:	b8 16 00 00 00       	mov    eax,0x16
c0009c59:	85 d2                	test   edx,edx
c0009c5b:	0f 85 19 02 00 00    	jne    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009c61:	d9 05 30 09 02 c0    	fld    DWORD PTR ds:0xc0020930
c0009c67:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c6a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c6d:	dd 06                	fld    QWORD PTR [esi]
c0009c6f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c72:	d8 d1                	fcom   st(1)
c0009c74:	df e0                	fnstsw ax
c0009c76:	9e                   	sahf   
c0009c77:	76 0f                	jbe    c0009c88 <sinc_multichan_vari_process+0x88>
c0009c79:	dd d8                	fstp   st(0)
c0009c7b:	d9 e8                	fld1   
c0009c7d:	d8 d9                	fcomp  st(1)
c0009c7f:	df e0                	fnstsw ax
c0009c81:	9e                   	sahf   
c0009c82:	77 0f                	ja     c0009c93 <sinc_multichan_vari_process+0x93>
c0009c84:	dd d8                	fstp   st(0)
c0009c86:	eb 11                	jmp    c0009c99 <sinc_multichan_vari_process+0x99>
c0009c88:	dd d9                	fstp   st(1)
c0009c8a:	d9 e8                	fld1   
c0009c8c:	d8 d9                	fcomp  st(1)
c0009c8e:	df e0                	fnstsw ax
c0009c90:	9e                   	sahf   
c0009c91:	76 04                	jbe    c0009c97 <sinc_multichan_vari_process+0x97>
c0009c93:	de f9                	fdivp  st(1),st
c0009c95:	eb 02                	jmp    c0009c99 <sinc_multichan_vari_process+0x99>
c0009c97:	dd d8                	fstp   st(0)
c0009c99:	83 ec 10             	sub    esp,0x10
c0009c9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009c9f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ca2:	e8 59 53 01 00       	call   c001f000 <lrint>
c0009ca7:	40                   	inc    eax
c0009ca8:	0f af c5             	imul   eax,ebp
c0009cab:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009cae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cb2:	dd 14 24             	fst    QWORD PTR [esp]
c0009cb5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cb9:	e8 71 fd ff ff       	call   c0009a2f <fmod_one>
c0009cbe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009cc1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cc8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ccc:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cd0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cd4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cd7:	e8 24 53 01 00       	call   c001f000 <lrint>
c0009cdc:	d9 e8                	fld1   
c0009cde:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009ce2:	0f af e8             	imul   ebp,eax
c0009ce5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ce9:	01 e8                	add    eax,ebp
c0009ceb:	99                   	cdq    
c0009cec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009cef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009cf2:	dc 05 98 07 02 c0    	fadd   QWORD PTR ds:0xc0020798
c0009cf8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cfc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009cff:	83 c4 10             	add    esp,0x10
c0009d02:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d05:	7d 4b                	jge    c0009d52 <sinc_multichan_vari_process+0x152>
c0009d07:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d0a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d0d:	01 c8                	add    eax,ecx
c0009d0f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d12:	99                   	cdq    
c0009d13:	f7 f9                	idiv   ecx
c0009d15:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d19:	7d 09                	jge    c0009d24 <sinc_multichan_vari_process+0x124>
c0009d1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d1e:	85 c0                	test   eax,eax
c0009d20:	79 57                	jns    c0009d79 <sinc_multichan_vari_process+0x179>
c0009d22:	eb 70                	jmp    c0009d94 <sinc_multichan_vari_process+0x194>
c0009d24:	51                   	push   ecx
c0009d25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d29:	57                   	push   edi
c0009d2a:	53                   	push   ebx
c0009d2b:	e8 56 fd ff ff       	call   c0009a86 <prepare_data>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d36:	85 c0                	test   eax,eax
c0009d38:	0f 85 3c 01 00 00    	jne    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009d3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d41:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d44:	01 c8                	add    eax,ecx
c0009d46:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d49:	99                   	cdq    
c0009d4a:	f7 f9                	idiv   ecx
c0009d4c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d50:	7c c9                	jl     c0009d1b <sinc_multichan_vari_process+0x11b>
c0009d52:	dd 04 24             	fld    QWORD PTR [esp]
c0009d55:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d5c:	dd 1e                	fstp   QWORD PTR [esi]
c0009d5e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d61:	99                   	cdq    
c0009d62:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d65:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d6b:	99                   	cdq    
c0009d6c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d6f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d72:	31 c0                	xor    eax,eax
c0009d74:	e9 01 01 00 00       	jmp    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009d79:	dd 04 24             	fld    QWORD PTR [esp]
c0009d7c:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009d7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d83:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009d87:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009d8b:	d9 c9                	fxch   st(1)
c0009d8d:	de d9                	fcompp 
c0009d8f:	df e0                	fnstsw ax
c0009d91:	9e                   	sahf   
c0009d92:	73 be                	jae    c0009d52 <sinc_multichan_vari_process+0x152>
c0009d94:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009d98:	7e 2f                	jle    c0009dc9 <sinc_multichan_vari_process+0x1c9>
c0009d9a:	dd 06                	fld    QWORD PTR [esi]
c0009d9c:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009d9f:	83 ec 10             	sub    esp,0x10
c0009da2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009da5:	e8 36 52 01 00       	call   c001efe0 <fabs>
c0009daa:	83 c4 10             	add    esp,0x10
c0009dad:	dc 1d 20 09 02 c0    	fcomp  QWORD PTR ds:0xc0020920
c0009db3:	df e0                	fnstsw ax
c0009db5:	9e                   	sahf   
c0009db6:	76 11                	jbe    c0009dc9 <sinc_multichan_vari_process+0x1c9>
c0009db8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009dbb:	dc 26                	fsub   QWORD PTR [esi]
c0009dbd:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009dc0:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009dc3:	dc 06                	fadd   QWORD PTR [esi]
c0009dc5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dc9:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009dcc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009dd0:	d9 e8                	fld1   
c0009dd2:	d8 d9                	fcomp  st(1)
c0009dd4:	df e0                	fnstsw ax
c0009dd6:	9e                   	sahf   
c0009dd7:	77 04                	ja     c0009ddd <sinc_multichan_vari_process+0x1dd>
c0009dd9:	dd d8                	fstp   st(0)
c0009ddb:	d9 e8                	fld1   
c0009ddd:	de c9                	fmulp  st(1),st
c0009ddf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009de3:	50                   	push   eax
c0009de4:	50                   	push   eax
c0009de5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009de9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ded:	e8 2a fc ff ff       	call   c0009a1c <double_to_fp>
c0009df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009df6:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009dfa:	89 c5                	mov    ebp,eax
c0009dfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dff:	e8 18 fc ff ff       	call   c0009a1c <double_to_fp>
c0009e04:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e07:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e0a:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e0d:	89 c1                	mov    ecx,eax
c0009e0f:	52                   	push   edx
c0009e10:	89 d8                	mov    eax,ebx
c0009e12:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e16:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e19:	52                   	push   edx
c0009e1a:	52                   	push   edx
c0009e1b:	89 ea                	mov    edx,ebp
c0009e1d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e20:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e23:	e8 f9 f7 ff ff       	call   c0009621 <calc_output_multi>
c0009e28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e2b:	d9 e8                	fld1   
c0009e2d:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e31:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e34:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e38:	83 c4 10             	add    esp,0x10
c0009e3b:	dd 14 24             	fst    QWORD PTR [esp]
c0009e3e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e42:	e8 e8 fb ff ff       	call   c0009a2f <fmod_one>
c0009e47:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e4a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e51:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e55:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e59:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e5d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e60:	e8 9b 51 01 00       	call   c001f000 <lrint>
c0009e65:	0f af e8             	imul   ebp,eax
c0009e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e6c:	01 e8                	add    eax,ebp
c0009e6e:	99                   	cdq    
c0009e6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e75:	e9 82 fe ff ff       	jmp    c0009cfc <sinc_multichan_vari_process+0xfc>
c0009e7a:	83 c4 3c             	add    esp,0x3c
c0009e7d:	5b                   	pop    ebx
c0009e7e:	5e                   	pop    esi
c0009e7f:	5f                   	pop    edi
c0009e80:	5d                   	pop    ebp
c0009e81:	c3                   	ret    

c0009e82 <sinc_hex_vari_process>:
c0009e82:	55                   	push   ebp
c0009e83:	b8 05 00 00 00       	mov    eax,0x5
c0009e88:	57                   	push   edi
c0009e89:	56                   	push   esi
c0009e8a:	53                   	push   ebx
c0009e8b:	83 ec 3c             	sub    esp,0x3c
c0009e8e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009e92:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009e96:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009e99:	85 db                	test   ebx,ebx
c0009e9b:	0f 84 56 02 00 00    	je     c000a0f7 <sinc_hex_vari_process+0x275>
c0009ea1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ea4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ea7:	0f af d0             	imul   edx,eax
c0009eaa:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ead:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009eb1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009eb8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ebb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ec2:	dd 06                	fld    QWORD PTR [esi]
c0009ec4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009ec8:	55                   	push   ebp
c0009ec9:	55                   	push   ebp
c0009eca:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ecd:	e8 5b f0 ff ff       	call   c0008f2d <is_bad_src_ratio>
c0009ed2:	89 c2                	mov    edx,eax
c0009ed4:	58                   	pop    eax
c0009ed5:	59                   	pop    ecx
c0009ed6:	b8 16 00 00 00       	mov    eax,0x16
c0009edb:	85 d2                	test   edx,edx
c0009edd:	0f 85 14 02 00 00    	jne    c000a0f7 <sinc_hex_vari_process+0x275>
c0009ee3:	d9 05 30 09 02 c0    	fld    DWORD PTR ds:0xc0020930
c0009ee9:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009eec:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009eef:	dd 06                	fld    QWORD PTR [esi]
c0009ef1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ef4:	d8 d1                	fcom   st(1)
c0009ef6:	df e0                	fnstsw ax
c0009ef8:	9e                   	sahf   
c0009ef9:	76 0f                	jbe    c0009f0a <sinc_hex_vari_process+0x88>
c0009efb:	dd d8                	fstp   st(0)
c0009efd:	d9 e8                	fld1   
c0009eff:	d8 d9                	fcomp  st(1)
c0009f01:	df e0                	fnstsw ax
c0009f03:	9e                   	sahf   
c0009f04:	77 0f                	ja     c0009f15 <sinc_hex_vari_process+0x93>
c0009f06:	dd d8                	fstp   st(0)
c0009f08:	eb 11                	jmp    c0009f1b <sinc_hex_vari_process+0x99>
c0009f0a:	dd d9                	fstp   st(1)
c0009f0c:	d9 e8                	fld1   
c0009f0e:	d8 d9                	fcomp  st(1)
c0009f10:	df e0                	fnstsw ax
c0009f12:	9e                   	sahf   
c0009f13:	76 04                	jbe    c0009f19 <sinc_hex_vari_process+0x97>
c0009f15:	de f9                	fdivp  st(1),st
c0009f17:	eb 02                	jmp    c0009f1b <sinc_hex_vari_process+0x99>
c0009f19:	dd d8                	fstp   st(0)
c0009f1b:	83 ec 10             	sub    esp,0x10
c0009f1e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f24:	e8 d7 50 01 00       	call   c001f000 <lrint>
c0009f29:	40                   	inc    eax
c0009f2a:	0f af c5             	imul   eax,ebp
c0009f2d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f34:	dd 14 24             	fst    QWORD PTR [esp]
c0009f37:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f3b:	e8 ef fa ff ff       	call   c0009a2f <fmod_one>
c0009f40:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f4a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f4e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f52:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f59:	e8 a2 50 01 00       	call   c001f000 <lrint>
c0009f5e:	d9 e8                	fld1   
c0009f60:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f64:	0f af e8             	imul   ebp,eax
c0009f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6b:	01 e8                	add    eax,ebp
c0009f6d:	99                   	cdq    
c0009f6e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f71:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f74:	dc 05 98 07 02 c0    	fadd   QWORD PTR ds:0xc0020798
c0009f7a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009f87:	7d 4b                	jge    c0009fd4 <sinc_hex_vari_process+0x152>
c0009f89:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f8c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f8f:	01 c8                	add    eax,ecx
c0009f91:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009f94:	99                   	cdq    
c0009f95:	f7 f9                	idiv   ecx
c0009f97:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009f9b:	7d 09                	jge    c0009fa6 <sinc_hex_vari_process+0x124>
c0009f9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fa0:	85 c0                	test   eax,eax
c0009fa2:	79 57                	jns    c0009ffb <sinc_hex_vari_process+0x179>
c0009fa4:	eb 70                	jmp    c000a016 <sinc_hex_vari_process+0x194>
c0009fa6:	51                   	push   ecx
c0009fa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fab:	57                   	push   edi
c0009fac:	53                   	push   ebx
c0009fad:	e8 d4 fa ff ff       	call   c0009a86 <prepare_data>
c0009fb2:	83 c4 10             	add    esp,0x10
c0009fb5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fb8:	85 c0                	test   eax,eax
c0009fba:	0f 85 37 01 00 00    	jne    c000a0f7 <sinc_hex_vari_process+0x275>
c0009fc0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fc6:	01 c8                	add    eax,ecx
c0009fc8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fcb:	99                   	cdq    
c0009fcc:	f7 f9                	idiv   ecx
c0009fce:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fd2:	7c c9                	jl     c0009f9d <sinc_hex_vari_process+0x11b>
c0009fd4:	dd 04 24             	fld    QWORD PTR [esp]
c0009fd7:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fda:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009fde:	dd 1e                	fstp   QWORD PTR [esi]
c0009fe0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009fe3:	99                   	cdq    
c0009fe4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009fe7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009fea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009fed:	99                   	cdq    
c0009fee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009ff1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009ff4:	31 c0                	xor    eax,eax
c0009ff6:	e9 fc 00 00 00       	jmp    c000a0f7 <sinc_hex_vari_process+0x275>
c0009ffb:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffe:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a001:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a005:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a009:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a00d:	d9 c9                	fxch   st(1)
c000a00f:	de d9                	fcompp 
c000a011:	df e0                	fnstsw ax
c000a013:	9e                   	sahf   
c000a014:	73 be                	jae    c0009fd4 <sinc_hex_vari_process+0x152>
c000a016:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a01a:	7e 2f                	jle    c000a04b <sinc_hex_vari_process+0x1c9>
c000a01c:	dd 06                	fld    QWORD PTR [esi]
c000a01e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a021:	83 ec 10             	sub    esp,0x10
c000a024:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a027:	e8 b4 4f 01 00       	call   c001efe0 <fabs>
c000a02c:	83 c4 10             	add    esp,0x10
c000a02f:	dc 1d 20 09 02 c0    	fcomp  QWORD PTR ds:0xc0020920
c000a035:	df e0                	fnstsw ax
c000a037:	9e                   	sahf   
c000a038:	76 11                	jbe    c000a04b <sinc_hex_vari_process+0x1c9>
c000a03a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a03d:	dc 26                	fsub   QWORD PTR [esi]
c000a03f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a042:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a045:	dc 06                	fadd   QWORD PTR [esi]
c000a047:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a04b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a04e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a052:	d9 e8                	fld1   
c000a054:	d8 d9                	fcomp  st(1)
c000a056:	df e0                	fnstsw ax
c000a058:	9e                   	sahf   
c000a059:	77 04                	ja     c000a05f <sinc_hex_vari_process+0x1dd>
c000a05b:	dd d8                	fstp   st(0)
c000a05d:	d9 e8                	fld1   
c000a05f:	de c9                	fmulp  st(1),st
c000a061:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a065:	50                   	push   eax
c000a066:	50                   	push   eax
c000a067:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06f:	e8 a8 f9 ff ff       	call   c0009a1c <double_to_fp>
c000a074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a078:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a07c:	89 c5                	mov    ebp,eax
c000a07e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a081:	e8 96 f9 ff ff       	call   c0009a1c <double_to_fp>
c000a086:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a089:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a08c:	83 c4 0c             	add    esp,0xc
c000a08f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a092:	89 c1                	mov    ecx,eax
c000a094:	52                   	push   edx
c000a095:	89 d8                	mov    eax,ebx
c000a097:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a09b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a09e:	52                   	push   edx
c000a09f:	52                   	push   edx
c000a0a0:	89 ea                	mov    edx,ebp
c000a0a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a5:	e8 db f2 ff ff       	call   c0009385 <calc_output_hex>
c000a0aa:	d9 e8                	fld1   
c000a0ac:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0b0:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0b4:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0b8:	dd 14 24             	fst    QWORD PTR [esp]
c000a0bb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0bf:	e8 6b f9 ff ff       	call   c0009a2f <fmod_one>
c000a0c4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0c7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0ce:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0d6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a0da:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0dd:	e8 1e 4f 01 00       	call   c001f000 <lrint>
c000a0e2:	0f af e8             	imul   ebp,eax
c000a0e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0e9:	01 e8                	add    eax,ebp
c000a0eb:	99                   	cdq    
c000a0ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a0ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a0f2:	e9 87 fe ff ff       	jmp    c0009f7e <sinc_hex_vari_process+0xfc>
c000a0f7:	83 c4 3c             	add    esp,0x3c
c000a0fa:	5b                   	pop    ebx
c000a0fb:	5e                   	pop    esi
c000a0fc:	5f                   	pop    edi
c000a0fd:	5d                   	pop    ebp
c000a0fe:	c3                   	ret    

c000a0ff <sinc_quad_vari_process>:
c000a0ff:	55                   	push   ebp
c000a100:	b8 05 00 00 00       	mov    eax,0x5
c000a105:	57                   	push   edi
c000a106:	56                   	push   esi
c000a107:	53                   	push   ebx
c000a108:	83 ec 3c             	sub    esp,0x3c
c000a10b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a10f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a113:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a116:	85 db                	test   ebx,ebx
c000a118:	0f 84 56 02 00 00    	je     c000a374 <sinc_quad_vari_process+0x275>
c000a11e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a121:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a124:	0f af d0             	imul   edx,eax
c000a127:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a12a:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a12e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a135:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a138:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a13f:	dd 06                	fld    QWORD PTR [esi]
c000a141:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a145:	55                   	push   ebp
c000a146:	55                   	push   ebp
c000a147:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a14a:	e8 de ed ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a14f:	89 c2                	mov    edx,eax
c000a151:	58                   	pop    eax
c000a152:	59                   	pop    ecx
c000a153:	b8 16 00 00 00       	mov    eax,0x16
c000a158:	85 d2                	test   edx,edx
c000a15a:	0f 85 14 02 00 00    	jne    c000a374 <sinc_quad_vari_process+0x275>
c000a160:	d9 05 30 09 02 c0    	fld    DWORD PTR ds:0xc0020930
c000a166:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a169:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a16c:	dd 06                	fld    QWORD PTR [esi]
c000a16e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a171:	d8 d1                	fcom   st(1)
c000a173:	df e0                	fnstsw ax
c000a175:	9e                   	sahf   
c000a176:	76 0f                	jbe    c000a187 <sinc_quad_vari_process+0x88>
c000a178:	dd d8                	fstp   st(0)
c000a17a:	d9 e8                	fld1   
c000a17c:	d8 d9                	fcomp  st(1)
c000a17e:	df e0                	fnstsw ax
c000a180:	9e                   	sahf   
c000a181:	77 0f                	ja     c000a192 <sinc_quad_vari_process+0x93>
c000a183:	dd d8                	fstp   st(0)
c000a185:	eb 11                	jmp    c000a198 <sinc_quad_vari_process+0x99>
c000a187:	dd d9                	fstp   st(1)
c000a189:	d9 e8                	fld1   
c000a18b:	d8 d9                	fcomp  st(1)
c000a18d:	df e0                	fnstsw ax
c000a18f:	9e                   	sahf   
c000a190:	76 04                	jbe    c000a196 <sinc_quad_vari_process+0x97>
c000a192:	de f9                	fdivp  st(1),st
c000a194:	eb 02                	jmp    c000a198 <sinc_quad_vari_process+0x99>
c000a196:	dd d8                	fstp   st(0)
c000a198:	83 ec 10             	sub    esp,0x10
c000a19b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a19e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a1:	e8 5a 4e 01 00       	call   c001f000 <lrint>
c000a1a6:	40                   	inc    eax
c000a1a7:	0f af c5             	imul   eax,ebp
c000a1aa:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1b1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1b8:	e8 72 f8 ff ff       	call   c0009a2f <fmod_one>
c000a1bd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1c7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1cb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1cf:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1d3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1d6:	e8 25 4e 01 00       	call   c001f000 <lrint>
c000a1db:	d9 e8                	fld1   
c000a1dd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a1e1:	0f af e8             	imul   ebp,eax
c000a1e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1e8:	01 e8                	add    eax,ebp
c000a1ea:	99                   	cdq    
c000a1eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1f1:	dc 05 98 07 02 c0    	fadd   QWORD PTR ds:0xc0020798
c000a1f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a204:	7d 4b                	jge    c000a251 <sinc_quad_vari_process+0x152>
c000a206:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a209:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a20c:	01 c8                	add    eax,ecx
c000a20e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a211:	99                   	cdq    
c000a212:	f7 f9                	idiv   ecx
c000a214:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a218:	7d 09                	jge    c000a223 <sinc_quad_vari_process+0x124>
c000a21a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a21d:	85 c0                	test   eax,eax
c000a21f:	79 57                	jns    c000a278 <sinc_quad_vari_process+0x179>
c000a221:	eb 70                	jmp    c000a293 <sinc_quad_vari_process+0x194>
c000a223:	51                   	push   ecx
c000a224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a228:	57                   	push   edi
c000a229:	53                   	push   ebx
c000a22a:	e8 57 f8 ff ff       	call   c0009a86 <prepare_data>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a235:	85 c0                	test   eax,eax
c000a237:	0f 85 37 01 00 00    	jne    c000a374 <sinc_quad_vari_process+0x275>
c000a23d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a240:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a243:	01 c8                	add    eax,ecx
c000a245:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a248:	99                   	cdq    
c000a249:	f7 f9                	idiv   ecx
c000a24b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a24f:	7c c9                	jl     c000a21a <sinc_quad_vari_process+0x11b>
c000a251:	dd 04 24             	fld    QWORD PTR [esp]
c000a254:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a257:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a25b:	dd 1e                	fstp   QWORD PTR [esi]
c000a25d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a260:	99                   	cdq    
c000a261:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a264:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a267:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a26a:	99                   	cdq    
c000a26b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a26e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a271:	31 c0                	xor    eax,eax
c000a273:	e9 fc 00 00 00       	jmp    c000a374 <sinc_quad_vari_process+0x275>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a27e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a282:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a286:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a28a:	d9 c9                	fxch   st(1)
c000a28c:	de d9                	fcompp 
c000a28e:	df e0                	fnstsw ax
c000a290:	9e                   	sahf   
c000a291:	73 be                	jae    c000a251 <sinc_quad_vari_process+0x152>
c000a293:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a297:	7e 2f                	jle    c000a2c8 <sinc_quad_vari_process+0x1c9>
c000a299:	dd 06                	fld    QWORD PTR [esi]
c000a29b:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a29e:	83 ec 10             	sub    esp,0x10
c000a2a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2a4:	e8 37 4d 01 00       	call   c001efe0 <fabs>
c000a2a9:	83 c4 10             	add    esp,0x10
c000a2ac:	dc 1d 20 09 02 c0    	fcomp  QWORD PTR ds:0xc0020920
c000a2b2:	df e0                	fnstsw ax
c000a2b4:	9e                   	sahf   
c000a2b5:	76 11                	jbe    c000a2c8 <sinc_quad_vari_process+0x1c9>
c000a2b7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2ba:	dc 26                	fsub   QWORD PTR [esi]
c000a2bc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2bf:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2c2:	dc 06                	fadd   QWORD PTR [esi]
c000a2c4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2c8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2cb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2cf:	d9 e8                	fld1   
c000a2d1:	d8 d9                	fcomp  st(1)
c000a2d3:	df e0                	fnstsw ax
c000a2d5:	9e                   	sahf   
c000a2d6:	77 04                	ja     c000a2dc <sinc_quad_vari_process+0x1dd>
c000a2d8:	dd d8                	fstp   st(0)
c000a2da:	d9 e8                	fld1   
c000a2dc:	de c9                	fmulp  st(1),st
c000a2de:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a2e2:	50                   	push   eax
c000a2e3:	50                   	push   eax
c000a2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2ec:	e8 2b f7 ff ff       	call   c0009a1c <double_to_fp>
c000a2f1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a2f5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a2f9:	89 c5                	mov    ebp,eax
c000a2fb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2fe:	e8 19 f7 ff ff       	call   c0009a1c <double_to_fp>
c000a303:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a306:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a309:	83 c4 0c             	add    esp,0xc
c000a30c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a30f:	89 c1                	mov    ecx,eax
c000a311:	52                   	push   edx
c000a312:	89 d8                	mov    eax,ebx
c000a314:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a318:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a31b:	52                   	push   edx
c000a31c:	52                   	push   edx
c000a31d:	89 ea                	mov    edx,ebp
c000a31f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a322:	e8 99 ee ff ff       	call   c00091c0 <calc_output_quad>
c000a327:	d9 e8                	fld1   
c000a329:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a32d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a331:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a335:	dd 14 24             	fst    QWORD PTR [esp]
c000a338:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a33c:	e8 ee f6 ff ff       	call   c0009a2f <fmod_one>
c000a341:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a344:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a34b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a34f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a353:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a357:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a35a:	e8 a1 4c 01 00       	call   c001f000 <lrint>
c000a35f:	0f af e8             	imul   ebp,eax
c000a362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a366:	01 e8                	add    eax,ebp
c000a368:	99                   	cdq    
c000a369:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a36c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a36f:	e9 87 fe ff ff       	jmp    c000a1fb <sinc_quad_vari_process+0xfc>
c000a374:	83 c4 3c             	add    esp,0x3c
c000a377:	5b                   	pop    ebx
c000a378:	5e                   	pop    esi
c000a379:	5f                   	pop    edi
c000a37a:	5d                   	pop    ebp
c000a37b:	c3                   	ret    

c000a37c <sinc_stereo_vari_process>:
c000a37c:	55                   	push   ebp
c000a37d:	b8 05 00 00 00       	mov    eax,0x5
c000a382:	57                   	push   edi
c000a383:	56                   	push   esi
c000a384:	53                   	push   ebx
c000a385:	83 ec 3c             	sub    esp,0x3c
c000a388:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a38c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a390:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a393:	85 db                	test   ebx,ebx
c000a395:	0f 84 56 02 00 00    	je     c000a5f1 <sinc_stereo_vari_process+0x275>
c000a39b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a39e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3a1:	0f af d0             	imul   edx,eax
c000a3a4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3a7:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3b2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3bc:	dd 06                	fld    QWORD PTR [esi]
c000a3be:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3c2:	55                   	push   ebp
c000a3c3:	55                   	push   ebp
c000a3c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c7:	e8 61 eb ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a3cc:	89 c2                	mov    edx,eax
c000a3ce:	58                   	pop    eax
c000a3cf:	59                   	pop    ecx
c000a3d0:	b8 16 00 00 00       	mov    eax,0x16
c000a3d5:	85 d2                	test   edx,edx
c000a3d7:	0f 85 14 02 00 00    	jne    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a3dd:	d9 05 30 09 02 c0    	fld    DWORD PTR ds:0xc0020930
c000a3e3:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a3e6:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e9:	dd 06                	fld    QWORD PTR [esi]
c000a3eb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a3ee:	d8 d1                	fcom   st(1)
c000a3f0:	df e0                	fnstsw ax
c000a3f2:	9e                   	sahf   
c000a3f3:	76 0f                	jbe    c000a404 <sinc_stereo_vari_process+0x88>
c000a3f5:	dd d8                	fstp   st(0)
c000a3f7:	d9 e8                	fld1   
c000a3f9:	d8 d9                	fcomp  st(1)
c000a3fb:	df e0                	fnstsw ax
c000a3fd:	9e                   	sahf   
c000a3fe:	77 0f                	ja     c000a40f <sinc_stereo_vari_process+0x93>
c000a400:	dd d8                	fstp   st(0)
c000a402:	eb 11                	jmp    c000a415 <sinc_stereo_vari_process+0x99>
c000a404:	dd d9                	fstp   st(1)
c000a406:	d9 e8                	fld1   
c000a408:	d8 d9                	fcomp  st(1)
c000a40a:	df e0                	fnstsw ax
c000a40c:	9e                   	sahf   
c000a40d:	76 04                	jbe    c000a413 <sinc_stereo_vari_process+0x97>
c000a40f:	de f9                	fdivp  st(1),st
c000a411:	eb 02                	jmp    c000a415 <sinc_stereo_vari_process+0x99>
c000a413:	dd d8                	fstp   st(0)
c000a415:	83 ec 10             	sub    esp,0x10
c000a418:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a41b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a41e:	e8 dd 4b 01 00       	call   c001f000 <lrint>
c000a423:	40                   	inc    eax
c000a424:	0f af c5             	imul   eax,ebp
c000a427:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a42a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a42e:	dd 14 24             	fst    QWORD PTR [esp]
c000a431:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a435:	e8 f5 f5 ff ff       	call   c0009a2f <fmod_one>
c000a43a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a43d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a444:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a44c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a450:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a453:	e8 a8 4b 01 00       	call   c001f000 <lrint>
c000a458:	d9 e8                	fld1   
c000a45a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a45e:	0f af e8             	imul   ebp,eax
c000a461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a465:	01 e8                	add    eax,ebp
c000a467:	99                   	cdq    
c000a468:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a46b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a46e:	dc 05 98 07 02 c0    	fadd   QWORD PTR ds:0xc0020798
c000a474:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a478:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a47b:	83 c4 10             	add    esp,0x10
c000a47e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a481:	7d 4b                	jge    c000a4ce <sinc_stereo_vari_process+0x152>
c000a483:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a486:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a489:	01 c8                	add    eax,ecx
c000a48b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a48e:	99                   	cdq    
c000a48f:	f7 f9                	idiv   ecx
c000a491:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a495:	7d 09                	jge    c000a4a0 <sinc_stereo_vari_process+0x124>
c000a497:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a49a:	85 c0                	test   eax,eax
c000a49c:	79 57                	jns    c000a4f5 <sinc_stereo_vari_process+0x179>
c000a49e:	eb 70                	jmp    c000a510 <sinc_stereo_vari_process+0x194>
c000a4a0:	51                   	push   ecx
c000a4a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4a5:	57                   	push   edi
c000a4a6:	53                   	push   ebx
c000a4a7:	e8 da f5 ff ff       	call   c0009a86 <prepare_data>
c000a4ac:	83 c4 10             	add    esp,0x10
c000a4af:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4b2:	85 c0                	test   eax,eax
c000a4b4:	0f 85 37 01 00 00    	jne    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a4ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4c0:	01 c8                	add    eax,ecx
c000a4c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4c5:	99                   	cdq    
c000a4c6:	f7 f9                	idiv   ecx
c000a4c8:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4cc:	7c c9                	jl     c000a497 <sinc_stereo_vari_process+0x11b>
c000a4ce:	dd 04 24             	fld    QWORD PTR [esp]
c000a4d1:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4d4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a4d8:	dd 1e                	fstp   QWORD PTR [esi]
c000a4da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a4dd:	99                   	cdq    
c000a4de:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4e1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a4e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a4e7:	99                   	cdq    
c000a4e8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4eb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a4ee:	31 c0                	xor    eax,eax
c000a4f0:	e9 fc 00 00 00       	jmp    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a4f5:	dd 04 24             	fld    QWORD PTR [esp]
c000a4f8:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a4fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ff:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a503:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a507:	d9 c9                	fxch   st(1)
c000a509:	de d9                	fcompp 
c000a50b:	df e0                	fnstsw ax
c000a50d:	9e                   	sahf   
c000a50e:	73 be                	jae    c000a4ce <sinc_stereo_vari_process+0x152>
c000a510:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a514:	7e 2f                	jle    c000a545 <sinc_stereo_vari_process+0x1c9>
c000a516:	dd 06                	fld    QWORD PTR [esi]
c000a518:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a51b:	83 ec 10             	sub    esp,0x10
c000a51e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a521:	e8 ba 4a 01 00       	call   c001efe0 <fabs>
c000a526:	83 c4 10             	add    esp,0x10
c000a529:	dc 1d 20 09 02 c0    	fcomp  QWORD PTR ds:0xc0020920
c000a52f:	df e0                	fnstsw ax
c000a531:	9e                   	sahf   
c000a532:	76 11                	jbe    c000a545 <sinc_stereo_vari_process+0x1c9>
c000a534:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a537:	dc 26                	fsub   QWORD PTR [esi]
c000a539:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a53c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a53f:	dc 06                	fadd   QWORD PTR [esi]
c000a541:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a545:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a548:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a54c:	d9 e8                	fld1   
c000a54e:	d8 d9                	fcomp  st(1)
c000a550:	df e0                	fnstsw ax
c000a552:	9e                   	sahf   
c000a553:	77 04                	ja     c000a559 <sinc_stereo_vari_process+0x1dd>
c000a555:	dd d8                	fstp   st(0)
c000a557:	d9 e8                	fld1   
c000a559:	de c9                	fmulp  st(1),st
c000a55b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a55f:	50                   	push   eax
c000a560:	50                   	push   eax
c000a561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a565:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a569:	e8 ae f4 ff ff       	call   c0009a1c <double_to_fp>
c000a56e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a572:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a576:	89 c5                	mov    ebp,eax
c000a578:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a57b:	e8 9c f4 ff ff       	call   c0009a1c <double_to_fp>
c000a580:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a583:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a58c:	89 c1                	mov    ecx,eax
c000a58e:	52                   	push   edx
c000a58f:	89 d8                	mov    eax,ebx
c000a591:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a595:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a598:	52                   	push   edx
c000a599:	52                   	push   edx
c000a59a:	89 ea                	mov    edx,ebp
c000a59c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a59f:	e8 da ea ff ff       	call   c000907e <calc_output_stereo>
c000a5a4:	d9 e8                	fld1   
c000a5a6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5aa:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5b2:	dd 14 24             	fst    QWORD PTR [esp]
c000a5b5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5b9:	e8 71 f4 ff ff       	call   c0009a2f <fmod_one>
c000a5be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5c1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5c8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5d0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d7:	e8 24 4a 01 00       	call   c001f000 <lrint>
c000a5dc:	0f af e8             	imul   ebp,eax
c000a5df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a5e3:	01 e8                	add    eax,ebp
c000a5e5:	99                   	cdq    
c000a5e6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a5e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a5ec:	e9 87 fe ff ff       	jmp    c000a478 <sinc_stereo_vari_process+0xfc>
c000a5f1:	83 c4 3c             	add    esp,0x3c
c000a5f4:	5b                   	pop    ebx
c000a5f5:	5e                   	pop    esi
c000a5f6:	5f                   	pop    edi
c000a5f7:	5d                   	pop    ebp
c000a5f8:	c3                   	ret    

c000a5f9 <sinc_mono_vari_process>:
c000a5f9:	55                   	push   ebp
c000a5fa:	b8 05 00 00 00       	mov    eax,0x5
c000a5ff:	57                   	push   edi
c000a600:	56                   	push   esi
c000a601:	53                   	push   ebx
c000a602:	83 ec 3c             	sub    esp,0x3c
c000a605:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a609:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a60d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a610:	85 db                	test   ebx,ebx
c000a612:	0f 84 55 02 00 00    	je     c000a86d <sinc_mono_vari_process+0x274>
c000a618:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a61b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a61e:	0f af d0             	imul   edx,eax
c000a621:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a624:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a628:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a62f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a639:	dd 06                	fld    QWORD PTR [esi]
c000a63b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a63f:	51                   	push   ecx
c000a640:	51                   	push   ecx
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 e4 e8 ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a649:	5d                   	pop    ebp
c000a64a:	89 c2                	mov    edx,eax
c000a64c:	58                   	pop    eax
c000a64d:	85 d2                	test   edx,edx
c000a64f:	b8 16 00 00 00       	mov    eax,0x16
c000a654:	0f 85 13 02 00 00    	jne    c000a86d <sinc_mono_vari_process+0x274>
c000a65a:	d9 05 30 09 02 c0    	fld    DWORD PTR ds:0xc0020930
c000a660:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a663:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a666:	dd 06                	fld    QWORD PTR [esi]
c000a668:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a66b:	d8 d1                	fcom   st(1)
c000a66d:	df e0                	fnstsw ax
c000a66f:	9e                   	sahf   
c000a670:	76 0f                	jbe    c000a681 <sinc_mono_vari_process+0x88>
c000a672:	dd d8                	fstp   st(0)
c000a674:	d9 e8                	fld1   
c000a676:	d8 d9                	fcomp  st(1)
c000a678:	df e0                	fnstsw ax
c000a67a:	9e                   	sahf   
c000a67b:	77 0f                	ja     c000a68c <sinc_mono_vari_process+0x93>
c000a67d:	dd d8                	fstp   st(0)
c000a67f:	eb 11                	jmp    c000a692 <sinc_mono_vari_process+0x99>
c000a681:	dd d9                	fstp   st(1)
c000a683:	d9 e8                	fld1   
c000a685:	d8 d9                	fcomp  st(1)
c000a687:	df e0                	fnstsw ax
c000a689:	9e                   	sahf   
c000a68a:	76 04                	jbe    c000a690 <sinc_mono_vari_process+0x97>
c000a68c:	de f9                	fdivp  st(1),st
c000a68e:	eb 02                	jmp    c000a692 <sinc_mono_vari_process+0x99>
c000a690:	dd d8                	fstp   st(0)
c000a692:	83 ec 10             	sub    esp,0x10
c000a695:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a698:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a69b:	e8 60 49 01 00       	call   c001f000 <lrint>
c000a6a0:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6a3:	40                   	inc    eax
c000a6a4:	dd 14 24             	fst    QWORD PTR [esp]
c000a6a7:	0f af e8             	imul   ebp,eax
c000a6aa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6ae:	e8 7c f3 ff ff       	call   c0009a2f <fmod_one>
c000a6b3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6bd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6c1:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6c5:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6d0:	e8 2b 49 01 00       	call   c001f000 <lrint>
c000a6d5:	d9 e8                	fld1   
c000a6d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a6db:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a6e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6e4:	99                   	cdq    
c000a6e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6eb:	dc 05 98 07 02 c0    	fadd   QWORD PTR ds:0xc0020798
c000a6f1:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a6f8:	83 c4 10             	add    esp,0x10
c000a6fb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a6fe:	7d 44                	jge    c000a744 <sinc_mono_vari_process+0x14b>
c000a700:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a703:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a706:	01 c8                	add    eax,ecx
c000a708:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a70b:	99                   	cdq    
c000a70c:	f7 f9                	idiv   ecx
c000a70e:	39 d5                	cmp    ebp,edx
c000a710:	7d 09                	jge    c000a71b <sinc_mono_vari_process+0x122>
c000a712:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a715:	85 c0                	test   eax,eax
c000a717:	79 52                	jns    c000a76b <sinc_mono_vari_process+0x172>
c000a719:	eb 6b                	jmp    c000a786 <sinc_mono_vari_process+0x18d>
c000a71b:	52                   	push   edx
c000a71c:	55                   	push   ebp
c000a71d:	57                   	push   edi
c000a71e:	53                   	push   ebx
c000a71f:	e8 62 f3 ff ff       	call   c0009a86 <prepare_data>
c000a724:	83 c4 10             	add    esp,0x10
c000a727:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a72a:	85 c0                	test   eax,eax
c000a72c:	0f 85 3b 01 00 00    	jne    c000a86d <sinc_mono_vari_process+0x274>
c000a732:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a735:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a738:	01 c8                	add    eax,ecx
c000a73a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a73d:	99                   	cdq    
c000a73e:	f7 f9                	idiv   ecx
c000a740:	39 d5                	cmp    ebp,edx
c000a742:	7c ce                	jl     c000a712 <sinc_mono_vari_process+0x119>
c000a744:	dd 04 24             	fld    QWORD PTR [esp]
c000a747:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a74a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a74e:	dd 1e                	fstp   QWORD PTR [esi]
c000a750:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a753:	99                   	cdq    
c000a754:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a757:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a75a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a75d:	99                   	cdq    
c000a75e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a761:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a764:	31 c0                	xor    eax,eax
c000a766:	e9 02 01 00 00       	jmp    c000a86d <sinc_mono_vari_process+0x274>
c000a76b:	dd 04 24             	fld    QWORD PTR [esp]
c000a76e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a771:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a775:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a779:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a77d:	d9 c9                	fxch   st(1)
c000a77f:	de d9                	fcompp 
c000a781:	df e0                	fnstsw ax
c000a783:	9e                   	sahf   
c000a784:	77 be                	ja     c000a744 <sinc_mono_vari_process+0x14b>
c000a786:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a78a:	7e 2f                	jle    c000a7bb <sinc_mono_vari_process+0x1c2>
c000a78c:	dd 06                	fld    QWORD PTR [esi]
c000a78e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a791:	83 ec 10             	sub    esp,0x10
c000a794:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a797:	e8 44 48 01 00       	call   c001efe0 <fabs>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	dc 1d 20 09 02 c0    	fcomp  QWORD PTR ds:0xc0020920
c000a7a5:	df e0                	fnstsw ax
c000a7a7:	9e                   	sahf   
c000a7a8:	76 11                	jbe    c000a7bb <sinc_mono_vari_process+0x1c2>
c000a7aa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7ad:	dc 26                	fsub   QWORD PTR [esi]
c000a7af:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7b2:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7b5:	dc 06                	fadd   QWORD PTR [esi]
c000a7b7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7bb:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7be:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7c2:	d9 e8                	fld1   
c000a7c4:	d8 d9                	fcomp  st(1)
c000a7c6:	df e0                	fnstsw ax
c000a7c8:	9e                   	sahf   
c000a7c9:	77 04                	ja     c000a7cf <sinc_mono_vari_process+0x1d6>
c000a7cb:	dd d8                	fstp   st(0)
c000a7cd:	d9 e8                	fld1   
c000a7cf:	de c9                	fmulp  st(1),st
c000a7d1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a7d5:	50                   	push   eax
c000a7d6:	50                   	push   eax
c000a7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7df:	e8 38 f2 ff ff       	call   c0009a1c <double_to_fp>
c000a7e4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a7e8:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a7ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7f0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7f3:	e8 24 f2 ff ff       	call   c0009a1c <double_to_fp>
c000a7f8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a7fc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a800:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a803:	89 c1                	mov    ecx,eax
c000a805:	89 d8                	mov    eax,ebx
c000a807:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a80b:	e8 89 e7 ff ff       	call   c0008f99 <calc_output_single>
c000a810:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a813:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a817:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a81a:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a81d:	d9 e8                	fld1   
c000a81f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a823:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a826:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a82a:	dd 14 24             	fst    QWORD PTR [esp]
c000a82d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a831:	e8 f9 f1 ff ff       	call   c0009a2f <fmod_one>
c000a836:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a839:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a840:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a844:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a848:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a84c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a850:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a853:	e8 a8 47 01 00       	call   c001f000 <lrint>
c000a858:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a85d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a861:	99                   	cdq    
c000a862:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a865:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a868:	e9 88 fe ff ff       	jmp    c000a6f5 <sinc_mono_vari_process+0xfc>
c000a86d:	83 c4 3c             	add    esp,0x3c
c000a870:	5b                   	pop    ebx
c000a871:	5e                   	pop    esi
c000a872:	5f                   	pop    edi
c000a873:	5d                   	pop    ebp
c000a874:	c3                   	ret    

c000a875 <sinc_get_name>:
c000a875:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a879:	31 c0                	xor    eax,eax
c000a87b:	83 fa 02             	cmp    edx,0x2
c000a87e:	77 07                	ja     c000a887 <sinc_get_name+0x12>
c000a880:	8b 04 95 00 08 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf800]
c000a887:	c3                   	ret    

c000a888 <sinc_get_description>:
c000a888:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a88c:	31 c0                	xor    eax,eax
c000a88e:	83 fa 02             	cmp    edx,0x2
c000a891:	77 07                	ja     c000a89a <sinc_get_description+0x12>
c000a893:	8b 04 95 f4 07 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf80c]
c000a89a:	c3                   	ret    

c000a89b <sinc_set_converter>:
c000a89b:	53                   	push   ebx
c000a89c:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8a2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 13                	je     c000a8c3 <sinc_set_converter+0x28>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	50                   	push   eax
c000a8b4:	e8 58 16 00 00       	call   c000bf11 <free>
c000a8b9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	50                   	push   eax
c000a8c4:	68 44 08 00 00       	push   0x844
c000a8c9:	6a 00                	push   0x0
c000a8cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8cf:	50                   	push   eax
c000a8d0:	e8 33 5d ff ff       	call   c0000608 <memset>
c000a8d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8d8:	83 c4 10             	add    esp,0x10
c000a8db:	b8 0b 00 00 00       	mov    eax,0xb
c000a8e0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a8e6:	7f 6e                	jg     c000a956 <sinc_set_converter+0xbb>
c000a8e8:	83 fa 01             	cmp    edx,0x1
c000a8eb:	75 10                	jne    c000a8fd <sinc_set_converter+0x62>
c000a8ed:	c7 43 24 f9 a5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a5f9
c000a8f4:	c7 43 20 f9 a5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a5f9
c000a8fb:	eb 4d                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a8fd:	83 fa 02             	cmp    edx,0x2
c000a900:	75 10                	jne    c000a912 <sinc_set_converter+0x77>
c000a902:	c7 43 24 7c a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a37c
c000a909:	c7 43 20 7c a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a37c
c000a910:	eb 38                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a912:	83 fa 04             	cmp    edx,0x4
c000a915:	75 10                	jne    c000a927 <sinc_set_converter+0x8c>
c000a917:	c7 43 24 ff a0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a0ff
c000a91e:	c7 43 20 ff a0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a0ff
c000a925:	eb 23                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a927:	83 fa 06             	cmp    edx,0x6
c000a92a:	75 10                	jne    c000a93c <sinc_set_converter+0xa1>
c000a92c:	c7 43 24 82 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009e82
c000a933:	c7 43 20 82 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009e82
c000a93a:	eb 0e                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a93c:	c7 43 24 00 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c00
c000a943:	c7 43 20 00 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c00
c000a94a:	c7 43 28 be 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095be
c000a951:	b8 0a 00 00 00       	mov    eax,0xa
c000a956:	81 c4 58 08 00 00    	add    esp,0x858
c000a95c:	5b                   	pop    ebx
c000a95d:	c3                   	ret    

c000a95e <is_bad_src_ratio>:
c000a95e:	83 ec 0c             	sub    esp,0xc
c000a961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a965:	89 04 24             	mov    DWORD PTR [esp],eax
c000a968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a96c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a970:	dd 04 24             	fld    QWORD PTR [esp]
c000a973:	dd 05 20 07 02 c0    	fld    QWORD PTR ds:0xc0020720
c000a979:	de d9                	fcompp 
c000a97b:	df e0                	fnstsw ax
c000a97d:	f6 c4 45             	test   ah,0x45
c000a980:	74 10                	je     c000a992 <is_bad_src_ratio+0x34>
c000a982:	dd 04 24             	fld    QWORD PTR [esp]
c000a985:	dc 1d 28 07 02 c0    	fcomp  QWORD PTR ds:0xc0020728
c000a98b:	df e0                	fnstsw ax
c000a98d:	f6 c4 45             	test   ah,0x45
c000a990:	75 07                	jne    c000a999 <is_bad_src_ratio+0x3b>
c000a992:	b8 01 00 00 00       	mov    eax,0x1
c000a997:	eb 05                	jmp    c000a99e <is_bad_src_ratio+0x40>
c000a999:	b8 00 00 00 00       	mov    eax,0x0
c000a99e:	83 c4 0c             	add    esp,0xc
c000a9a1:	c3                   	ret    

c000a9a2 <fmod_one>:
c000a9a2:	83 ec 2c             	sub    esp,0x2c
c000a9a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9b5:	83 ec 08             	sub    esp,0x8
c000a9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c0:	e8 3b 46 01 00       	call   c001f000 <lrint>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9cc:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9d0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a9d4:	de e1                	fsubrp st(1),st
c000a9d6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a9da:	d9 ee                	fldz   
c000a9dc:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000a9e0:	df e0                	fnstsw ax
c000a9e2:	f6 c4 45             	test   ah,0x45
c000a9e5:	75 0a                	jne    c000a9f1 <fmod_one+0x4f>
c000a9e7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000a9eb:	d9 e8                	fld1   
c000a9ed:	de c1                	faddp  st(1),st
c000a9ef:	eb 04                	jmp    c000a9f5 <fmod_one+0x53>
c000a9f1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000a9f5:	83 c4 2c             	add    esp,0x2c
c000a9f8:	c3                   	ret    

c000a9f9 <zoh_vari_process>:
c000a9f9:	55                   	push   ebp
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	53                   	push   ebx
c000a9fd:	83 ec 2c             	sub    esp,0x2c
c000aa00:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa04:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa10:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa14:	0f 8e 30 02 00 00    	jle    c000ac4a <zoh_vari_process+0x251>
c000aa1a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa1d:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa25:	85 db                	test   ebx,ebx
c000aa27:	0f 84 1d 02 00 00    	je     c000ac4a <zoh_vari_process+0x251>
c000aa2d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa30:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa34:	74 19                	je     c000aa4f <zoh_vari_process+0x56>
c000aa36:	31 d2                	xor    edx,edx
c000aa38:	39 c2                	cmp    edx,eax
c000aa3a:	7d 0c                	jge    c000aa48 <zoh_vari_process+0x4f>
c000aa3c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa3e:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa41:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa45:	42                   	inc    edx
c000aa46:	eb f0                	jmp    c000aa38 <zoh_vari_process+0x3f>
c000aa48:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa4f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa52:	0f af d0             	imul   edx,eax
c000aa55:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa58:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa5c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa63:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa66:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa6d:	dd 07                	fld    QWORD PTR [edi]
c000aa6f:	dd 14 24             	fst    QWORD PTR [esp]
c000aa72:	50                   	push   eax
c000aa73:	50                   	push   eax
c000aa74:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa77:	e8 e2 fe ff ff       	call   c000a95e <is_bad_src_ratio>
c000aa7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa80:	5a                   	pop    edx
c000aa81:	59                   	pop    ecx
c000aa82:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aa87:	0f 85 b5 01 00 00    	jne    c000ac42 <zoh_vari_process+0x249>
c000aa8d:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aa90:	d9 e8                	fld1   
c000aa92:	d8 d1                	fcom   st(1)
c000aa94:	df e0                	fnstsw ax
c000aa96:	9e                   	sahf   
c000aa97:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa9b:	0f 86 83 00 00 00    	jbe    c000ab24 <zoh_vari_process+0x12b>
c000aaa1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aaa4:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aaa7:	7d 7b                	jge    c000ab24 <zoh_vari_process+0x12b>
c000aaa9:	d9 c0                	fld    st(0)
c000aaab:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aaae:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aab1:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aab4:	df e0                	fnstsw ax
c000aab6:	9e                   	sahf   
c000aab7:	73 6b                	jae    c000ab24 <zoh_vari_process+0x12b>
c000aab9:	85 d2                	test   edx,edx
c000aabb:	7e 36                	jle    c000aaf3 <zoh_vari_process+0xfa>
c000aabd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aac1:	dd 07                	fld    QWORD PTR [edi]
c000aac3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aac6:	83 ec 10             	sub    esp,0x10
c000aac9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aacc:	e8 0f 45 01 00       	call   c001efe0 <fabs>
c000aad1:	83 c4 10             	add    esp,0x10
c000aad4:	dc 1d 98 07 02 c0    	fcomp  QWORD PTR ds:0xc0020798
c000aada:	df e0                	fnstsw ax
c000aadc:	9e                   	sahf   
c000aadd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aae1:	76 10                	jbe    c000aaf3 <zoh_vari_process+0xfa>
c000aae3:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000aae6:	dc 27                	fsub   QWORD PTR [edi]
c000aae8:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aaeb:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aaee:	dc 07                	fadd   QWORD PTR [edi]
c000aaf0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf3:	31 c0                	xor    eax,eax
c000aaf5:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000aaf8:	7e 13                	jle    c000ab0d <zoh_vari_process+0x114>
c000aafa:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000aafe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab01:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab04:	40                   	inc    eax
c000ab05:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab08:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab0b:	eb e8                	jmp    c000aaf5 <zoh_vari_process+0xfc>
c000ab0d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab11:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab14:	de c1                	faddp  st(1),st
c000ab16:	e9 75 ff ff ff       	jmp    c000aa90 <zoh_vari_process+0x97>
c000ab1b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab1f:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab22:	de c1                	faddp  st(1),st
c000ab24:	83 ec 10             	sub    esp,0x10
c000ab27:	dd 14 24             	fst    QWORD PTR [esp]
c000ab2a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab2e:	e8 6f fe ff ff       	call   c000a9a2 <fmod_one>
c000ab33:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab36:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab3a:	d8 e1                	fsub   st,st(1)
c000ab3c:	d9 c9                	fxch   st(1)
c000ab3e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab42:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab45:	e8 b6 44 01 00       	call   c001f000 <lrint>
c000ab4a:	83 c4 10             	add    esp,0x10
c000ab4d:	0f af e8             	imul   ebp,eax
c000ab50:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab5a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab5d:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab60:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab63:	0f 8d 80 00 00 00    	jge    c000abe9 <zoh_vari_process+0x1f0>
c000ab69:	d9 c0                	fld    st(0)
c000ab6b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab6e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab72:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ab76:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ab7a:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ab7e:	de d9                	fcompp 
c000ab80:	df e0                	fnstsw ax
c000ab82:	9e                   	sahf   
c000ab83:	72 64                	jb     c000abe9 <zoh_vari_process+0x1f0>
c000ab85:	85 d2                	test   edx,edx
c000ab87:	7e 36                	jle    c000abbf <zoh_vari_process+0x1c6>
c000ab89:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab8d:	dd 07                	fld    QWORD PTR [edi]
c000ab8f:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab92:	83 ec 10             	sub    esp,0x10
c000ab95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab98:	e8 43 44 01 00       	call   c001efe0 <fabs>
c000ab9d:	83 c4 10             	add    esp,0x10
c000aba0:	dc 1d 98 07 02 c0    	fcomp  QWORD PTR ds:0xc0020798
c000aba6:	df e0                	fnstsw ax
c000aba8:	9e                   	sahf   
c000aba9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abad:	76 10                	jbe    c000abbf <zoh_vari_process+0x1c6>
c000abaf:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abb2:	dc 27                	fsub   QWORD PTR [edi]
c000abb4:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abb7:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abba:	dc 07                	fadd   QWORD PTR [edi]
c000abbc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abbf:	31 d2                	xor    edx,edx
c000abc1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abc4:	39 d0                	cmp    eax,edx
c000abc6:	0f 8e 4f ff ff ff    	jle    c000ab1b <zoh_vari_process+0x122>
c000abcc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000abcf:	29 c1                	sub    ecx,eax
c000abd1:	89 c8                	mov    eax,ecx
c000abd3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000abd5:	01 d0                	add    eax,edx
c000abd7:	42                   	inc    edx
c000abd8:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000abdb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abde:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000abe1:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000abe4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abe7:	eb d8                	jmp    c000abc1 <zoh_vari_process+0x1c8>
c000abe9:	39 e9                	cmp    ecx,ebp
c000abeb:	7d 13                	jge    c000ac00 <zoh_vari_process+0x207>
c000abed:	89 e8                	mov    eax,ebp
c000abef:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000abf2:	29 c8                	sub    eax,ecx
c000abf4:	99                   	cdq    
c000abf5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000abf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abfc:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac00:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac06:	85 c0                	test   eax,eax
c000ac08:	7f 1b                	jg     c000ac25 <zoh_vari_process+0x22c>
c000ac0a:	dd 04 24             	fld    QWORD PTR [esp]
c000ac0d:	dd 1f                	fstp   QWORD PTR [edi]
c000ac0f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac12:	99                   	cdq    
c000ac13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac16:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac19:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac1c:	99                   	cdq    
c000ac1d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac20:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac23:	eb 25                	jmp    c000ac4a <zoh_vari_process+0x251>
c000ac25:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac28:	31 d2                	xor    edx,edx
c000ac2a:	29 e8                	sub    eax,ebp
c000ac2c:	c1 e0 02             	shl    eax,0x2
c000ac2f:	39 d5                	cmp    ebp,edx
c000ac31:	7e d7                	jle    c000ac0a <zoh_vari_process+0x211>
c000ac33:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac35:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac38:	83 c0 04             	add    eax,0x4
c000ac3b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac3f:	42                   	inc    edx
c000ac40:	eb ed                	jmp    c000ac2f <zoh_vari_process+0x236>
c000ac42:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac4e:	83 c4 2c             	add    esp,0x2c
c000ac51:	5b                   	pop    ebx
c000ac52:	5e                   	pop    esi
c000ac53:	5f                   	pop    edi
c000ac54:	5d                   	pop    ebp
c000ac55:	c3                   	ret    

c000ac56 <zoh_reset>:
c000ac56:	83 ec 0c             	sub    esp,0xc
c000ac59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac60:	85 c0                	test   eax,eax
c000ac62:	74 20                	je     c000ac84 <zoh_reset+0x2e>
c000ac64:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac67:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ac6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac71:	51                   	push   ecx
c000ac72:	c1 e2 02             	shl    edx,0x2
c000ac75:	83 c0 1c             	add    eax,0x1c
c000ac78:	52                   	push   edx
c000ac79:	6a 00                	push   0x0
c000ac7b:	50                   	push   eax
c000ac7c:	e8 87 59 ff ff       	call   c0000608 <memset>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <zoh_get_name>:
c000ac88:	31 c0                	xor    eax,eax
c000ac8a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ac8f:	75 05                	jne    c000ac96 <zoh_get_name+0xe>
c000ac91:	b8 34 09 02 c0       	mov    eax,0xc0020934
c000ac96:	c3                   	ret    

c000ac97 <zoh_get_description>:
c000ac97:	31 c0                	xor    eax,eax
c000ac99:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ac9e:	75 05                	jne    c000aca5 <zoh_get_description+0xe>
c000aca0:	b8 45 09 02 c0       	mov    eax,0xc0020945
c000aca5:	c3                   	ret    

c000aca6 <zoh_set_converter>:
c000aca6:	53                   	push   ebx
c000aca7:	b8 0a 00 00 00       	mov    eax,0xa
c000acac:	83 ec 08             	sub    esp,0x8
c000acaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000acb3:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000acb8:	75 6e                	jne    c000ad28 <zoh_set_converter+0x82>
c000acba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	74 13                	je     c000acd4 <zoh_set_converter+0x2e>
c000acc1:	83 ec 0c             	sub    esp,0xc
c000acc4:	50                   	push   eax
c000acc5:	e8 47 12 00 00       	call   c000bf11 <free>
c000acca:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000acd1:	83 c4 10             	add    esp,0x10
c000acd4:	50                   	push   eax
c000acd5:	50                   	push   eax
c000acd6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000acd9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ace0:	50                   	push   eax
c000ace1:	6a 01                	push   0x1
c000ace3:	e8 49 12 00 00       	call   c000bf31 <calloc>
c000ace8:	89 c2                	mov    edx,eax
c000acea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000aced:	83 c4 10             	add    esp,0x10
c000acf0:	b8 01 00 00 00       	mov    eax,0x1
c000acf5:	85 d2                	test   edx,edx
c000acf7:	74 2f                	je     c000ad28 <zoh_set_converter+0x82>
c000acf9:	83 ec 0c             	sub    esp,0xc
c000acfc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000acff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad02:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad08:	c7 43 24 f9 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a9f9
c000ad0f:	c7 43 20 f9 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a9f9
c000ad16:	c7 43 28 56 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac56
c000ad1d:	53                   	push   ebx
c000ad1e:	e8 33 ff ff ff       	call   c000ac56 <zoh_reset>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	31 c0                	xor    eax,eax
c000ad28:	83 c4 08             	add    esp,0x8
c000ad2b:	5b                   	pop    ebx
c000ad2c:	c3                   	ret    
c000ad2d:	90                   	nop

c000ad2e <Computer::close(int, int, void*)>:
c000ad2e:	57                   	push   edi
c000ad2f:	56                   	push   esi
c000ad30:	53                   	push   ebx
c000ad31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad3d:	83 ec 0c             	sub    esp,0xc
c000ad40:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad46:	50                   	push   eax
c000ad47:	e8 72 59 00 00       	call   c00106be <Device::closeAll()>
c000ad4c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad52:	83 c4 10             	add    esp,0x10
c000ad55:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad57:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad5b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad6b:	5b                   	pop    ebx
c000ad6c:	5e                   	pop    esi
c000ad6d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad70:	5f                   	pop    edi
c000ad71:	ff e0                	jmp    eax
c000ad73:	90                   	nop

c000ad74 <Computer::Computer()>:
c000ad74:	83 ec 0c             	sub    esp,0xc
c000ad77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7b:	83 ec 08             	sub    esp,0x8
c000ad7e:	68 7c 09 02 c0       	push   0xc002097c
c000ad83:	50                   	push   eax
c000ad84:	e8 af 59 00 00       	call   c0010738 <Device::Device(char const*)>
c000ad89:	83 c4 10             	add    esp,0x10
c000ad8c:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c000ad91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad95:	89 10                	mov    DWORD PTR [eax],edx
c000ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adbd:	83 ca 04             	or     edx,0x4
c000adc0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000add0:	31 d2                	xor    edx,edx
c000add2:	88 c2                	mov    dl,al
c000add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add8:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ade9:	31 d2                	xor    edx,edx
c000adeb:	88 c2                	mov    dl,al
c000aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000adf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae00:	8d 50 01             	lea    edx,[eax+0x1]
c000ae03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae07:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae0d:	31 d2                	xor    edx,edx
c000ae0f:	88 c2                	mov    dl,al
c000ae11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae15:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae19:	83 e1 3f             	and    ecx,0x3f
c000ae1c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2a:	31 d2                	xor    edx,edx
c000ae2c:	88 c2                	mov    dl,al
c000ae2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae32:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae43:	31 d2                	xor    edx,edx
c000ae45:	88 c2                	mov    dl,al
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ae5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae67:	31 d2                	xor    edx,edx
c000ae69:	88 c2                	mov    dl,al
c000ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae73:	83 e1 3f             	and    ecx,0x3f
c000ae76:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae84:	31 d2                	xor    edx,edx
c000ae86:	88 c2                	mov    dl,al
c000ae88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8c:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	88 c2                	mov    dl,al
c000aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb4:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aebb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec1:	31 d2                	xor    edx,edx
c000aec3:	88 c2                	mov    dl,al
c000aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aecd:	83 e1 3f             	and    ecx,0x3f
c000aed0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed4:	90                   	nop
c000aed5:	83 c4 0c             	add    esp,0xc
c000aed8:	c3                   	ret    
c000aed9:	90                   	nop

c000aeda <Computer::setBootMessage(char const*)>:
c000aeda:	c3                   	ret    
c000aedb:	90                   	nop

c000aedc <Computer::start()>:
c000aedc:	56                   	push   esi
c000aedd:	53                   	push   ebx
c000aede:	50                   	push   eax
c000aedf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aee3:	e8 13 d4 00 00       	call   c00182fb <lockScheduler()>
c000aee8:	e8 57 d7 00 00       	call   c0018644 <schedule()>
c000aeed:	e8 0b d4 00 00       	call   c00182fd <unlockScheduler()>
c000aef2:	fb                   	sti    
c000aef3:	83 ec 0c             	sub    esp,0xc
c000aef6:	68 3b 07 00 00       	push   0x73b
c000aefb:	e8 fe 40 00 00       	call   c000effe <operator new(unsigned long)>
c000af00:	8b 15 54 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025454
c000af06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af0d:	52                   	push   edx
c000af0e:	89 c6                	mov    esi,eax
c000af10:	68 85 09 02 c0       	push   0xc0020985
c000af15:	6a 01                	push   0x1
c000af17:	50                   	push   eax
c000af18:	e8 35 d2 00 00       	call   c0018152 <Process::Process(bool, char const*, Process*, char**)>
c000af1d:	83 c4 20             	add    esp,0x20
c000af20:	68 ff 00 00 00       	push   0xff
c000af25:	6a 00                	push   0x0
c000af27:	68 8f b8 00 c0       	push   0xc000b88f
c000af2c:	56                   	push   esi
c000af2d:	e8 fe d4 00 00       	call   c0018430 <Process::createThread(void (*)(void*), void*, int)>
c000af32:	6a 7a                	push   0x7a
c000af34:	8b 0d 54 54 02 c0    	mov    ecx,DWORD PTR ds:0xc0025454
c000af3a:	6a 00                	push   0x0
c000af3c:	68 75 8c 01 c0       	push   0xc0018c75
c000af41:	51                   	push   ecx
c000af42:	e8 e9 d4 00 00       	call   c0018430 <Process::createThread(void (*)(void*), void*, int)>
c000af47:	83 c4 20             	add    esp,0x20
c000af4a:	a3 08 54 02 c0       	mov    ds:0xc0025408,eax
c000af4f:	c6 05 0d 40 02 c0 01 	mov    BYTE PTR ds:0xc002400d,0x1
c000af56:	e8 3b 45 00 00       	call   c000f496 <initVFS()>
c000af5b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af61:	8b 10                	mov    edx,DWORD PTR [eax]
c000af63:	6a 00                	push   0x0
c000af65:	6a 00                	push   0x0
c000af67:	6a 00                	push   0x0
c000af69:	50                   	push   eax
c000af6a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af6d:	e8 d7 bb 00 00       	call   c0016b49 <setupSystemCalls()>
c000af72:	e8 1d 50 00 00       	call   c000ff94 <loadClockSettings()>
c000af77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af7a:	e8 13 57 00 00       	call   c0010692 <Device::loadDriversForAll()>
c000af7f:	5e                   	pop    esi
c000af80:	58                   	pop    eax
c000af81:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c000af87:	6a 01                	push   0x1
c000af89:	68 92 09 02 c0       	push   0xc0020992
c000af8e:	e8 82 cd 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c000af93:	5a                   	pop    edx
c000af94:	59                   	pop    ecx
c000af95:	53                   	push   ebx
c000af96:	50                   	push   eax
c000af97:	e8 3f cf 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c000af9c:	c7 04 24 5c 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b5c
c000afa3:	e8 8b 41 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	83 ec 0c             	sub    esp,0xc
c000afae:	6a 02                	push   0x2
c000afb0:	e8 e8 d7 00 00       	call   c001879d <blockTask(TaskState)>
c000afb5:	83 c4 10             	add    esp,0x10
c000afb8:	eb f1                	jmp    c000afab <Computer::start()+0xcf>

c000afba <firstTask()>:
c000afba:	83 ec 18             	sub    esp,0x18
c000afbd:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000afc2:	50                   	push   eax
c000afc3:	e8 14 ff ff ff       	call   c000aedc <Computer::start()>

c000afc8 <Computer::detectFeatures()>:
c000afc8:	55                   	push   ebp
c000afc9:	57                   	push   edi
c000afca:	56                   	push   esi
c000afcb:	53                   	push   ebx
c000afcc:	83 ec 1c             	sub    esp,0x1c
c000afcf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afd3:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000afd9:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000afdf:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000afe5:	e8 d5 52 ff ff       	call   c00002bf <detectCPUID>
c000afea:	85 c0                	test   eax,eax
c000afec:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000aff2:	0f 95 c2             	setne  dl
c000aff5:	01 d2                	add    edx,edx
c000aff7:	83 e0 fd             	and    eax,0xfffffffd
c000affa:	09 d0                	or     eax,edx
c000affc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b002:	a8 02                	test   al,0x2
c000b004:	75 4e                	jne    c000b054 <Computer::detectFeatures()+0x8c>
c000b006:	f6 05 21 40 02 c0 04 	test   BYTE PTR ds:0xc0024021,0x4
c000b00d:	74 0f                	je     c000b01e <Computer::detectFeatures()+0x56>
c000b00f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b015:	83 e0 fb             	and    eax,0xfffffffb
c000b018:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01e:	e8 63 3a 01 00       	call   c001ea86 <x87Detect>
c000b023:	83 e0 01             	and    eax,0x1
c000b026:	c1 e0 04             	shl    eax,0x4
c000b029:	88 c2                	mov    dl,al
c000b02b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b031:	83 e0 ef             	and    eax,0xffffffef
c000b034:	09 d0                	or     eax,edx
c000b036:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b03c:	a8 10                	test   al,0x10
c000b03e:	0f 85 20 01 00 00    	jne    c000b164 <Computer::detectFeatures()+0x19c>
c000b044:	84 c0                	test   al,al
c000b046:	0f 88 3b 01 00 00    	js     c000b187 <Computer::detectFeatures()+0x1bf>
c000b04c:	83 c4 1c             	add    esp,0x1c
c000b04f:	5b                   	pop    ebx
c000b050:	5e                   	pop    esi
c000b051:	5f                   	pop    edi
c000b052:	5d                   	pop    ebp
c000b053:	c3                   	ret    
c000b054:	83 ec 0c             	sub    esp,0xc
c000b057:	6a 20                	push   0x20
c000b059:	e8 71 90 00 00       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c000b05e:	83 e0 01             	and    eax,0x1
c000b061:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b068:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b06e:	83 e0 f7             	and    eax,0xfffffff7
c000b071:	09 d0                	or     eax,edx
c000b073:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b079:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b080:	e8 4a 90 00 00       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c000b085:	83 e0 01             	and    eax,0x1
c000b088:	88 c2                	mov    dl,al
c000b08a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b090:	83 e0 fe             	and    eax,0xfffffffe
c000b093:	09 d0                	or     eax,edx
c000b095:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b09b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0a2:	e8 28 90 00 00       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c000b0a7:	c1 e0 07             	shl    eax,0x7
c000b0aa:	88 c2                	mov    dl,al
c000b0ac:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0b2:	83 e0 7f             	and    eax,0x7f
c000b0b5:	09 d0                	or     eax,edx
c000b0b7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0bd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0c4:	e8 06 90 00 00       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	83 e0 01             	and    eax,0x1
c000b0cf:	c1 e0 05             	shl    eax,0x5
c000b0d2:	88 c2                	mov    dl,al
c000b0d4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0da:	83 e0 df             	and    eax,0xffffffdf
c000b0dd:	09 d0                	or     eax,edx
c000b0df:	f7 05 20 40 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024020,0x401
c000b0e9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0ef:	0f 84 b8 00 00 00    	je     c000b1ad <Computer::detectFeatures()+0x1e5>
c000b0f5:	83 ec 0c             	sub    esp,0xc
c000b0f8:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b0fe:	83 e1 fe             	and    ecx,0xfffffffe
c000b101:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b105:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b10b:	50                   	push   eax
c000b10c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b110:	55                   	push   ebp
c000b111:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b115:	57                   	push   edi
c000b116:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b11a:	56                   	push   esi
c000b11b:	68 00 00 00 80       	push   0x80000000
c000b120:	e8 27 8f 00 00       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b125:	83 c4 20             	add    esp,0x20
c000b128:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b12f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b133:	0f 86 cd fe ff ff    	jbe    c000b006 <Computer::detectFeatures()+0x3e>
c000b139:	83 ec 0c             	sub    esp,0xc
c000b13c:	50                   	push   eax
c000b13d:	55                   	push   ebp
c000b13e:	57                   	push   edi
c000b13f:	56                   	push   esi
c000b140:	68 01 00 00 80       	push   0x80000001
c000b145:	e8 02 8f 00 00       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b14a:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b150:	83 c4 20             	add    esp,0x20
c000b153:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b159:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b15f:	e9 a2 fe ff ff       	jmp    c000b006 <Computer::detectFeatures()+0x3e>
c000b164:	e8 d7 38 01 00       	call   c001ea40 <sseDetect>
c000b169:	88 c2                	mov    dl,al
c000b16b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b171:	c1 e2 07             	shl    edx,0x7
c000b174:	83 e0 7f             	and    eax,0x7f
c000b177:	09 d0                	or     eax,edx
c000b179:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b17f:	84 c0                	test   al,al
c000b181:	0f 89 c5 fe ff ff    	jns    c000b04c <Computer::detectFeatures()+0x84>
c000b187:	e8 a4 38 01 00       	call   c001ea30 <avxDetect>
c000b18c:	83 e0 01             	and    eax,0x1
c000b18f:	c1 e0 05             	shl    eax,0x5
c000b192:	88 c2                	mov    dl,al
c000b194:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19a:	83 e0 df             	and    eax,0xffffffdf
c000b19d:	09 d0                	or     eax,edx
c000b19f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a5:	83 c4 1c             	add    esp,0x1c
c000b1a8:	5b                   	pop    ebx
c000b1a9:	5e                   	pop    esi
c000b1aa:	5f                   	pop    edi
c000b1ab:	5d                   	pop    ebp
c000b1ac:	c3                   	ret    
c000b1ad:	83 ec 0c             	sub    esp,0xc
c000b1b0:	68 00 02 00 00       	push   0x200
c000b1b5:	e8 15 8f 00 00       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	e9 33 ff ff ff       	jmp    c000b0f5 <Computer::detectFeatures()+0x12d>

c000b1c2 <Computer::displayFeatures()>:
c000b1c2:	53                   	push   ebx
c000b1c3:	83 ec 14             	sub    esp,0x14
c000b1c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b1ca:	68 b5 09 02 c0       	push   0xc00209b5
c000b1cf:	e8 5f 3f 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b1d4:	83 c4 10             	add    esp,0x10
c000b1d7:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b1dc:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b1e3:	74 05                	je     c000b1ea <Computer::displayFeatures()+0x28>
c000b1e5:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b1ea:	51                   	push   ecx
c000b1eb:	51                   	push   ecx
c000b1ec:	50                   	push   eax
c000b1ed:	68 c8 09 02 c0       	push   0xc00209c8
c000b1f2:	e8 3c 3f 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b1f7:	83 c4 10             	add    esp,0x10
c000b1fa:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b1ff:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b206:	75 05                	jne    c000b20d <Computer::displayFeatures()+0x4b>
c000b208:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b20d:	52                   	push   edx
c000b20e:	52                   	push   edx
c000b20f:	50                   	push   eax
c000b210:	68 d9 09 02 c0       	push   0xc00209d9
c000b215:	e8 19 3f 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b21a:	83 c4 10             	add    esp,0x10
c000b21d:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b222:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b229:	75 05                	jne    c000b230 <Computer::displayFeatures()+0x6e>
c000b22b:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b230:	51                   	push   ecx
c000b231:	51                   	push   ecx
c000b232:	50                   	push   eax
c000b233:	68 ea 09 02 c0       	push   0xc00209ea
c000b238:	e8 f6 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b245:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b24c:	75 05                	jne    c000b253 <Computer::displayFeatures()+0x91>
c000b24e:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b253:	52                   	push   edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	68 fb 09 02 c0       	push   0xc00209fb
c000b25b:	e8 d3 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b260:	83 c4 10             	add    esp,0x10
c000b263:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b268:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b26f:	75 05                	jne    c000b276 <Computer::displayFeatures()+0xb4>
c000b271:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b276:	51                   	push   ecx
c000b277:	51                   	push   ecx
c000b278:	50                   	push   eax
c000b279:	68 0c 0a 02 c0       	push   0xc0020a0c
c000b27e:	e8 b0 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b283:	83 c4 10             	add    esp,0x10
c000b286:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b28b:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b292:	75 05                	jne    c000b299 <Computer::displayFeatures()+0xd7>
c000b294:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b299:	52                   	push   edx
c000b29a:	52                   	push   edx
c000b29b:	50                   	push   eax
c000b29c:	68 1d 0a 02 c0       	push   0xc0020a1d
c000b2a1:	e8 8d 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b2ae:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b2b5:	75 05                	jne    c000b2bc <Computer::displayFeatures()+0xfa>
c000b2b7:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b2bc:	51                   	push   ecx
c000b2bd:	51                   	push   ecx
c000b2be:	50                   	push   eax
c000b2bf:	68 2e 0a 02 c0       	push   0xc0020a2e
c000b2c4:	e8 6a 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b2c9:	83 c4 10             	add    esp,0x10
c000b2cc:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b2d1:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b2d8:	78 05                	js     c000b2df <Computer::displayFeatures()+0x11d>
c000b2da:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b2df:	52                   	push   edx
c000b2e0:	52                   	push   edx
c000b2e1:	50                   	push   eax
c000b2e2:	68 3f 0a 02 c0       	push   0xc0020a3f
c000b2e7:	e8 47 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b2f4:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b2fb:	0f 84 93 01 00 00    	je     c000b494 <Computer::displayFeatures()+0x2d2>
c000b301:	51                   	push   ecx
c000b302:	51                   	push   ecx
c000b303:	50                   	push   eax
c000b304:	68 50 0a 02 c0       	push   0xc0020a50
c000b309:	e8 25 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b30e:	83 c4 10             	add    esp,0x10
c000b311:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b316:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b31d:	0f 84 67 01 00 00    	je     c000b48a <Computer::displayFeatures()+0x2c8>
c000b323:	52                   	push   edx
c000b324:	52                   	push   edx
c000b325:	50                   	push   eax
c000b326:	68 61 0a 02 c0       	push   0xc0020a61
c000b32b:	e8 03 3e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b338:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b33f:	0f 84 3b 01 00 00    	je     c000b480 <Computer::displayFeatures()+0x2be>
c000b345:	51                   	push   ecx
c000b346:	51                   	push   ecx
c000b347:	50                   	push   eax
c000b348:	68 72 0a 02 c0       	push   0xc0020a72
c000b34d:	e8 e1 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b352:	83 c4 10             	add    esp,0x10
c000b355:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b35a:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b361:	0f 84 0f 01 00 00    	je     c000b476 <Computer::displayFeatures()+0x2b4>
c000b367:	52                   	push   edx
c000b368:	52                   	push   edx
c000b369:	50                   	push   eax
c000b36a:	68 83 0a 02 c0       	push   0xc0020a83
c000b36f:	e8 bf 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b374:	83 c4 10             	add    esp,0x10
c000b377:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b37c:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b383:	0f 84 e3 00 00 00    	je     c000b46c <Computer::displayFeatures()+0x2aa>
c000b389:	51                   	push   ecx
c000b38a:	51                   	push   ecx
c000b38b:	50                   	push   eax
c000b38c:	68 94 0a 02 c0       	push   0xc0020a94
c000b391:	e8 9d 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b396:	83 c4 10             	add    esp,0x10
c000b399:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b39e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b3a5:	0f 84 b7 00 00 00    	je     c000b462 <Computer::displayFeatures()+0x2a0>
c000b3ab:	52                   	push   edx
c000b3ac:	52                   	push   edx
c000b3ad:	50                   	push   eax
c000b3ae:	68 a5 0a 02 c0       	push   0xc0020aa5
c000b3b3:	e8 7b 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b3c0:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b3c7:	0f 84 8b 00 00 00    	je     c000b458 <Computer::displayFeatures()+0x296>
c000b3cd:	51                   	push   ecx
c000b3ce:	51                   	push   ecx
c000b3cf:	50                   	push   eax
c000b3d0:	68 b6 0a 02 c0       	push   0xc0020ab6
c000b3d5:	e8 59 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b3e2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b3e9:	78 05                	js     c000b3f0 <Computer::displayFeatures()+0x22e>
c000b3eb:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b3f0:	52                   	push   edx
c000b3f1:	52                   	push   edx
c000b3f2:	50                   	push   eax
c000b3f3:	68 c7 0a 02 c0       	push   0xc0020ac7
c000b3f8:	e8 36 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b3fd:	83 c4 10             	add    esp,0x10
c000b400:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b405:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b40c:	74 43                	je     c000b451 <Computer::displayFeatures()+0x28f>
c000b40e:	51                   	push   ecx
c000b40f:	51                   	push   ecx
c000b410:	50                   	push   eax
c000b411:	68 d8 0a 02 c0       	push   0xc0020ad8
c000b416:	e8 18 3d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c000b423:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b42a:	74 1e                	je     c000b44a <Computer::displayFeatures()+0x288>
c000b42c:	52                   	push   edx
c000b42d:	52                   	push   edx
c000b42e:	50                   	push   eax
c000b42f:	68 e9 0a 02 c0       	push   0xc0020ae9
c000b434:	e8 fa 3c 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b439:	c7 44 24 20 3a 21 02 c0 	mov    DWORD PTR [esp+0x20],0xc002213a
c000b441:	83 c4 18             	add    esp,0x18
c000b444:	5b                   	pop    ebx
c000b445:	e9 e9 3c 00 00       	jmp    c000f133 <Dbg::kprintf(char const*, ...)>
c000b44a:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b44f:	eb db                	jmp    c000b42c <Computer::displayFeatures()+0x26a>
c000b451:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b456:	eb b6                	jmp    c000b40e <Computer::displayFeatures()+0x24c>
c000b458:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b45d:	e9 6b ff ff ff       	jmp    c000b3cd <Computer::displayFeatures()+0x20b>
c000b462:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b467:	e9 3f ff ff ff       	jmp    c000b3ab <Computer::displayFeatures()+0x1e9>
c000b46c:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b471:	e9 13 ff ff ff       	jmp    c000b389 <Computer::displayFeatures()+0x1c7>
c000b476:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b47b:	e9 e7 fe ff ff       	jmp    c000b367 <Computer::displayFeatures()+0x1a5>
c000b480:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b485:	e9 bb fe ff ff       	jmp    c000b345 <Computer::displayFeatures()+0x183>
c000b48a:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b48f:	e9 8f fe ff ff       	jmp    c000b323 <Computer::displayFeatures()+0x161>
c000b494:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c000b499:	e9 63 fe ff ff       	jmp    c000b301 <Computer::displayFeatures()+0x13f>

c000b49e <Computer::rdmsr(unsigned int)>:
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b4ac:	74 0a                	je     c000b4b8 <Computer::rdmsr(unsigned int)+0x1a>
c000b4ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4b2:	0f 32                	rdmsr  
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	c3                   	ret    
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	68 fa 0a 02 c0       	push   0xc0020afa
c000b4c0:	e8 2d 9e 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000b4c5:	83 c4 10             	add    esp,0x10
c000b4c8:	eb e4                	jmp    c000b4ae <Computer::rdmsr(unsigned int)+0x10>

c000b4ca <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b4ca:	57                   	push   edi
c000b4cb:	56                   	push   esi
c000b4cc:	52                   	push   edx
c000b4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b4d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b4d9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b4e0:	74 0e                	je     c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b4e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4e6:	89 f0                	mov    eax,esi
c000b4e8:	89 fa                	mov    edx,edi
c000b4ea:	0f 30                	wrmsr  
c000b4ec:	58                   	pop    eax
c000b4ed:	5e                   	pop    esi
c000b4ee:	5f                   	pop    edi
c000b4ef:	c3                   	ret    
c000b4f0:	83 ec 0c             	sub    esp,0xc
c000b4f3:	68 00 0b 02 c0       	push   0xc0020b00
c000b4f8:	e8 f5 9d 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	eb e0                	jmp    c000b4e2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b502 <Computer::nmiEnabled()>:
c000b502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b506:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b50c:	c3                   	ret    
c000b50d:	90                   	nop

c000b50e <Computer::readCMOS(unsigned char)>:
c000b50e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b516:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b51d:	19 c0                	sbb    eax,eax
c000b51f:	83 e0 80             	and    eax,0xffffff80
c000b522:	09 d0                	or     eax,edx
c000b524:	e6 70                	out    0x70,al
c000b526:	e4 71                	in     al,0x71
c000b528:	c3                   	ret    
c000b529:	90                   	nop

c000b52a <Computer::enableNMI(bool)>:
c000b52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b532:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b538:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b540:	eb cc                	jmp    c000b50e <Computer::readCMOS(unsigned char)>

c000b542 <Computer::open(int, int, void*)>:
c000b542:	56                   	push   esi
c000b543:	53                   	push   ebx
c000b544:	83 ec 10             	sub    esp,0x10
c000b547:	f6 05 20 40 02 c0 04 	test   BYTE PTR ds:0xc0024020,0x4
c000b54e:	0f 94 05 40 34 02 c0 	sete   BYTE PTR ds:0xc0023440
c000b555:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b559:	68 68 22 00 00       	push   0x2268
c000b55e:	e8 9b 3a 00 00       	call   c000effe <operator new(unsigned long)>
c000b563:	89 c6                	mov    esi,eax
c000b565:	89 04 24             	mov    DWORD PTR [esp],eax
c000b568:	e8 4f 81 00 00       	call   c00136bc <ACPI::ACPI()>
c000b56d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b573:	59                   	pop    ecx
c000b574:	58                   	pop    eax
c000b575:	56                   	push   esi
c000b576:	53                   	push   ebx
c000b577:	e8 cc 4f 00 00       	call   c0010548 <Device::addChild(Device*)>
c000b57c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b57f:	e8 44 fa ff ff       	call   c000afc8 <Computer::detectFeatures()>
c000b584:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b587:	e8 36 fc ff ff       	call   c000b1c2 <Computer::displayFeatures()>
c000b58c:	58                   	pop    eax
c000b58d:	5a                   	pop    edx
c000b58e:	6a 01                	push   0x1
c000b590:	53                   	push   ebx
c000b591:	e8 94 ff ff ff       	call   c000b52a <Computer::enableNMI(bool)>
c000b596:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b59d:	e8 5c 3a 00 00       	call   c000effe <operator new(unsigned long)>
c000b5a2:	89 c6                	mov    esi,eax
c000b5a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a7:	e8 ee 8b 00 00       	call   c001419a <CPU::CPU()>
c000b5ac:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b5b2:	59                   	pop    ecx
c000b5b3:	58                   	pop    eax
c000b5b4:	56                   	push   esi
c000b5b5:	53                   	push   ebx
c000b5b6:	e8 8d 4f 00 00       	call   c0010548 <Device::addChild(Device*)>
c000b5bb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b5c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5c7:	51                   	push   ecx
c000b5c8:	6a 00                	push   0x0
c000b5ca:	6a 00                	push   0x0
c000b5cc:	50                   	push   eax
c000b5cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b5d0:	83 c4 20             	add    esp,0x20
c000b5d3:	e8 d8 54 00 00       	call   c0010ab0 <setupFPU()>
c000b5d8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b5de:	85 c0                	test   eax,eax
c000b5e0:	74 1e                	je     c000b600 <Computer::open(int, int, void*)+0xbe>
c000b5e2:	52                   	push   edx
c000b5e3:	52                   	push   edx
c000b5e4:	50                   	push   eax
c000b5e5:	53                   	push   ebx
c000b5e6:	e8 5d 4f 00 00       	call   c0010548 <Device::addChild(Device*)>
c000b5eb:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b5f1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5f3:	6a 00                	push   0x0
c000b5f5:	6a 00                	push   0x0
c000b5f7:	6a 00                	push   0x0
c000b5f9:	50                   	push   eax
c000b5fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b5fd:	83 c4 20             	add    esp,0x20
c000b600:	83 ec 0c             	sub    esp,0xc
c000b603:	68 ba af 00 c0       	push   0xc000afba
c000b608:	e8 22 cf 00 00       	call   c001852f <setupMultitasking(void (*)())>
c000b60d:	83 c4 14             	add    esp,0x14
c000b610:	83 c8 ff             	or     eax,0xffffffff
c000b613:	5b                   	pop    ebx
c000b614:	5e                   	pop    esi
c000b615:	c3                   	ret    

c000b616 <Computer::disableNMI()>:
c000b616:	6a 00                	push   0x0
c000b618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61c:	50                   	push   eax
c000b61d:	e8 08 ff ff ff       	call   c000b52a <Computer::enableNMI(bool)>
c000b622:	5a                   	pop    edx
c000b623:	59                   	pop    ecx
c000b624:	c3                   	ret    
c000b625:	90                   	nop

c000b626 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b62a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b62e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b635:	19 c0                	sbb    eax,eax
c000b637:	83 e0 80             	and    eax,0xffffff80
c000b63a:	09 d0                	or     eax,edx
c000b63c:	e6 70                	out    0x70,al
c000b63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b642:	e6 71                	out    0x71,al
c000b644:	c3                   	ret    
c000b645:	90                   	nop

c000b646 <Computer::handleNMI()>:
c000b646:	56                   	push   esi
c000b647:	53                   	push   ebx
c000b648:	83 ec 10             	sub    esp,0x10
c000b64b:	e4 92                	in     al,0x92
c000b64d:	89 c6                	mov    esi,eax
c000b64f:	e4 61                	in     al,0x61
c000b651:	68 06 0b 02 c0       	push   0xc0020b06
c000b656:	88 c3                	mov    bl,al
c000b658:	e8 d6 3a 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b65d:	83 c4 10             	add    esp,0x10
c000b660:	83 e6 10             	and    esi,0x10
c000b663:	75 0d                	jne    c000b672 <Computer::handleNMI()+0x2c>
c000b665:	f6 c3 40             	test   bl,0x40
c000b668:	75 1d                	jne    c000b687 <Computer::handleNMI()+0x41>
c000b66a:	84 db                	test   bl,bl
c000b66c:	78 2d                	js     c000b69b <Computer::handleNMI()+0x55>
c000b66e:	58                   	pop    eax
c000b66f:	5b                   	pop    ebx
c000b670:	5e                   	pop    esi
c000b671:	c3                   	ret    
c000b672:	83 ec 0c             	sub    esp,0xc
c000b675:	68 17 0b 02 c0       	push   0xc0020b17
c000b67a:	e8 73 9c 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000b67f:	83 c4 10             	add    esp,0x10
c000b682:	f6 c3 40             	test   bl,0x40
c000b685:	74 e3                	je     c000b66a <Computer::handleNMI()+0x24>
c000b687:	83 ec 0c             	sub    esp,0xc
c000b68a:	68 24 0b 02 c0       	push   0xc0020b24
c000b68f:	e8 5e 9c 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000b694:	83 c4 10             	add    esp,0x10
c000b697:	84 db                	test   bl,bl
c000b699:	79 d3                	jns    c000b66e <Computer::handleNMI()+0x28>
c000b69b:	c7 44 24 10 2e 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b2e
c000b6a3:	5a                   	pop    edx
c000b6a4:	5b                   	pop    ebx
c000b6a5:	5e                   	pop    esi
c000b6a6:	e9 47 9c 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c000b6ab:	90                   	nop

c000b6ac <Computer::setDiskActivityLight(int, bool)>:
c000b6ac:	56                   	push   esi
c000b6ad:	53                   	push   ebx
c000b6ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b6b2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b6b7:	77 1c                	ja     c000b6d5 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b6b9:	e4 92                	in     al,0x92
c000b6bb:	bb 40 00 00 00       	mov    ebx,0x40
c000b6c0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b6c4:	89 da                	mov    edx,ebx
c000b6c6:	d3 e2                	shl    edx,cl
c000b6c8:	83 f2 ff             	xor    edx,0xffffffff
c000b6cb:	89 f1                	mov    ecx,esi
c000b6cd:	21 d0                	and    eax,edx
c000b6cf:	d3 e3                	shl    ebx,cl
c000b6d1:	09 d8                	or     eax,ebx
c000b6d3:	e6 92                	out    0x92,al
c000b6d5:	5b                   	pop    ebx
c000b6d6:	5e                   	pop    esi
c000b6d7:	c3                   	ret    

c000b6d8 <GDTEntry::setBase(unsigned int)>:
c000b6d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b6e0:	89 c1                	mov    ecx,eax
c000b6e2:	c1 e9 10             	shr    ecx,0x10
c000b6e5:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b6e9:	c1 e8 18             	shr    eax,0x18
c000b6ec:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b6ef:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b6f2:	c3                   	ret    
c000b6f3:	90                   	nop

c000b6f4 <GDTEntry::setLimit(unsigned int)>:
c000b6f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b6f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b6ff:	66 89 01             	mov    WORD PTR [ecx],ax
c000b702:	c1 e8 10             	shr    eax,0x10
c000b705:	83 e2 f0             	and    edx,0xfffffff0
c000b708:	83 e0 0f             	and    eax,0xf
c000b70b:	09 d0                	or     eax,edx
c000b70d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b710:	c3                   	ret    
c000b711:	90                   	nop

c000b712 <GDT::GDT()>:
c000b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b716:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b720:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b726:	90                   	nop
c000b727:	c3                   	ret    

c000b728 <GDT::addEntry(GDTEntry)>:
c000b728:	53                   	push   ebx
c000b729:	83 ec 0c             	sub    esp,0xc
c000b72c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b730:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b732:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b739:	52                   	push   edx
c000b73a:	50                   	push   eax
c000b73b:	68 68 0b 02 c0       	push   0xc0020b68
c000b740:	e8 ee 39 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000b745:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b747:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b74b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b74f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b753:	8d 50 01             	lea    edx,[eax+0x1]
c000b756:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b75a:	89 13                	mov    DWORD PTR [ebx],edx
c000b75c:	c1 e0 03             	shl    eax,0x3
c000b75f:	83 c4 18             	add    esp,0x18
c000b762:	5b                   	pop    ebx
c000b763:	c3                   	ret    

c000b764 <GDT::getNumberOfEntries()>:
c000b764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b768:	8b 00                	mov    eax,DWORD PTR [eax]
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <GDT::flush()>:
c000b76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b770:	83 c0 04             	add    eax,0x4
c000b773:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b776:	a3 12 40 02 c0       	mov    ds:0xc0024012,eax
c000b77b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b782:	66 89 15 10 40 02 c0 	mov    WORD PTR ds:0xc0024010,dx
c000b789:	e9 a5 4b ff ff       	jmp    c0000333 <loadGDT>

c000b78e <GDT::setup()>:
c000b78e:	55                   	push   ebp
c000b78f:	57                   	push   edi
c000b790:	56                   	push   esi
c000b791:	53                   	push   ebx
c000b792:	83 ec 3c             	sub    esp,0x3c
c000b795:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b799:	6a 00                	push   0x0
c000b79b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b79f:	53                   	push   ebx
c000b7a0:	e8 33 ff ff ff       	call   c000b6d8 <GDTEntry::setBase(unsigned int)>
c000b7a5:	6a 00                	push   0x0
c000b7a7:	53                   	push   ebx
c000b7a8:	e8 47 ff ff ff       	call   c000b6f4 <GDTEntry::setLimit(unsigned int)>
c000b7ad:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b7b5:	6a 00                	push   0x0
c000b7b7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b7bb:	53                   	push   ebx
c000b7bc:	e8 17 ff ff ff       	call   c000b6d8 <GDTEntry::setBase(unsigned int)>
c000b7c1:	68 ff ff ff 00       	push   0xffffff
c000b7c6:	53                   	push   ebx
c000b7c7:	e8 28 ff ff ff       	call   c000b6f4 <GDTEntry::setLimit(unsigned int)>
c000b7cc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7d0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b7d5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b7da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b7de:	83 c4 20             	add    esp,0x20
c000b7e1:	6a 00                	push   0x0
c000b7e3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b7e7:	53                   	push   ebx
c000b7e8:	e8 eb fe ff ff       	call   c000b6d8 <GDTEntry::setBase(unsigned int)>
c000b7ed:	68 ff ff ff 00       	push   0xffffff
c000b7f2:	53                   	push   ebx
c000b7f3:	e8 fc fe ff ff       	call   c000b6f4 <GDTEntry::setLimit(unsigned int)>
c000b7f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b7fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b800:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b805:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b809:	0d 00 92 c0 00       	or     eax,0xc09200
c000b80e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b812:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b816:	89 d8                	mov    eax,ebx
c000b818:	80 cc 60             	or     ah,0x60
c000b81b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b81f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b823:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b827:	83 c4 0c             	add    esp,0xc
c000b82a:	89 f8                	mov    eax,edi
c000b82c:	80 cc 60             	or     ah,0x60
c000b82f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b833:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b837:	89 c7                	mov    edi,eax
c000b839:	55                   	push   ebp
c000b83a:	e8 e9 fe ff ff       	call   c000b728 <GDT::addEntry(GDTEntry)>
c000b83f:	83 c4 0c             	add    esp,0xc
c000b842:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b84a:	55                   	push   ebp
c000b84b:	e8 d8 fe ff ff       	call   c000b728 <GDT::addEntry(GDTEntry)>
c000b850:	83 c4 0c             	add    esp,0xc
c000b853:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b857:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b85b:	55                   	push   ebp
c000b85c:	e8 c7 fe ff ff       	call   c000b728 <GDT::addEntry(GDTEntry)>
c000b861:	83 c4 0c             	add    esp,0xc
c000b864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b868:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b86c:	53                   	push   ebx
c000b86d:	51                   	push   ecx
c000b86e:	55                   	push   ebp
c000b86f:	e8 b4 fe ff ff       	call   c000b728 <GDT::addEntry(GDTEntry)>
c000b874:	83 c4 0c             	add    esp,0xc
c000b877:	57                   	push   edi
c000b878:	56                   	push   esi
c000b879:	55                   	push   ebp
c000b87a:	e8 a9 fe ff ff       	call   c000b728 <GDT::addEntry(GDTEntry)>
c000b87f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b882:	e8 e5 fe ff ff       	call   c000b76c <GDT::flush()>
c000b887:	83 c4 4c             	add    esp,0x4c
c000b88a:	5b                   	pop    ebx
c000b88b:	5e                   	pop    esi
c000b88c:	5f                   	pop    edi
c000b88d:	5d                   	pop    ebp
c000b88e:	c3                   	ret    

c000b88f <idleFunction(void*)>:
c000b88f:	53                   	push   ebx
c000b890:	83 ec 08             	sub    esp,0x8
c000b893:	e8 65 ca 00 00       	call   c00182fd <unlockScheduler()>
c000b898:	e8 e9 88 00 00       	call   c0014186 <thisCPU()>
c000b89d:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b8a4:	74 41                	je     c000b8e7 <idleFunction(void*)+0x58>
c000b8a6:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000b8ab:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b8b2:	74 33                	je     c000b8e7 <idleFunction(void*)+0x58>
c000b8b4:	52                   	push   edx
c000b8b5:	31 db                	xor    ebx,ebx
c000b8b7:	52                   	push   edx
c000b8b8:	68 e1 00 00 00       	push   0xe1
c000b8bd:	50                   	push   eax
c000b8be:	e8 db fb ff ff       	call   c000b49e <Computer::rdmsr(unsigned int)>
c000b8c3:	53                   	push   ebx
c000b8c4:	83 e0 02             	and    eax,0x2
c000b8c7:	50                   	push   eax
c000b8c8:	68 e1 00 00 00       	push   0xe1
c000b8cd:	ff 35 08 40 02 c0    	push   DWORD PTR ds:0xc0024008
c000b8d3:	e8 f2 fb ff ff       	call   c000b4ca <Computer::wrmsr(unsigned int, unsigned long long)>
c000b8d8:	83 c4 20             	add    esp,0x20
c000b8db:	e8 70 48 ff ff       	call   c0000150 <doTPAUSE>
c000b8e0:	e8 9b 37 01 00       	call   c001f080 <idleCommon()>
c000b8e5:	eb f4                	jmp    c000b8db <idleFunction(void*)+0x4c>
c000b8e7:	fb                   	sti    
c000b8e8:	f4                   	hlt    
c000b8e9:	e8 92 37 01 00       	call   c001f080 <idleCommon()>
c000b8ee:	eb f7                	jmp    c000b8e7 <idleFunction(void*)+0x58>

c000b8f0 <IDTEntry::IDTEntry(bool)>:
c000b8f0:	83 ec 04             	sub    esp,0x4
c000b8f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8f7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fe:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b908:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b90c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b910:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b913:	83 e2 f0             	and    edx,0xfffffff0
c000b916:	83 ca 0e             	or     edx,0xe
c000b919:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b920:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b923:	83 e2 ef             	and    edx,0xffffffef
c000b926:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b929:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b92d:	74 04                	je     c000b933 <IDTEntry::IDTEntry(bool)+0x43>
c000b92f:	b2 03                	mov    dl,0x3
c000b931:	eb 02                	jmp    c000b935 <IDTEntry::IDTEntry(bool)+0x45>
c000b933:	b2 00                	mov    dl,0x0
c000b935:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b939:	83 e2 03             	and    edx,0x3
c000b93c:	88 d1                	mov    cl,dl
c000b93e:	c1 e1 05             	shl    ecx,0x5
c000b941:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b944:	83 e2 9f             	and    edx,0xffffff9f
c000b947:	09 ca                	or     edx,ecx
c000b949:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b94c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b950:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b953:	83 ca 80             	or     edx,0xffffff80
c000b956:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b959:	90                   	nop
c000b95a:	83 c4 04             	add    esp,0x4
c000b95d:	c3                   	ret    

c000b95e <IDTEntry::setOffset(unsigned int)>:
c000b95e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b966:	66 89 02             	mov    WORD PTR [edx],ax
c000b969:	c1 e8 10             	shr    eax,0x10
c000b96c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b970:	c3                   	ret    
c000b971:	90                   	nop

c000b972 <IDT::IDT()>:
c000b972:	90                   	nop
c000b973:	c3                   	ret    

c000b974 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b978:	83 c0 30             	add    eax,0x30
c000b97b:	c3                   	ret    

c000b97c <IDT::addEntry(IDTEntry, int)>:
c000b97c:	53                   	push   ebx
c000b97d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b985:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b989:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b98d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b990:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b994:	5b                   	pop    ebx
c000b995:	c3                   	ret    

c000b996 <IDT::addEntry(int, void (*)(), bool)>:
c000b996:	53                   	push   ebx
c000b997:	83 ec 10             	sub    esp,0x10
c000b99a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b99f:	50                   	push   eax
c000b9a0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b9a4:	53                   	push   ebx
c000b9a5:	e8 46 ff ff ff       	call   c000b8f0 <IDTEntry::IDTEntry(bool)>
c000b9aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b9ae:	53                   	push   ebx
c000b9af:	e8 aa ff ff ff       	call   c000b95e <IDTEntry::setOffset(unsigned int)>
c000b9b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b9b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9c4:	e8 b3 ff ff ff       	call   c000b97c <IDT::addEntry(IDTEntry, int)>
c000b9c9:	83 c4 30             	add    esp,0x30
c000b9cc:	5b                   	pop    ebx
c000b9cd:	c3                   	ret    

c000b9ce <IDT::flush()>:
c000b9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9d2:	66 c7 05 18 40 02 c0 ff 07 	mov    WORD PTR ds:0xc0024018,0x7ff
c000b9db:	a3 1a 40 02 c0       	mov    ds:0xc002401a,eax
c000b9e0:	0f 01 1d 18 40 02 c0 	lidtd  ds:0xc0024018
c000b9e7:	c3                   	ret    

c000b9e8 <IDT::setup()>:
c000b9e8:	57                   	push   edi
c000b9e9:	56                   	push   esi
c000b9ea:	53                   	push   ebx
c000b9eb:	83 ec 10             	sub    esp,0x10
c000b9ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9f2:	6a 00                	push   0x0
c000b9f4:	68 53 03 00 c0       	push   0xc0000353
c000b9f9:	6a 00                	push   0x0
c000b9fb:	53                   	push   ebx
c000b9fc:	e8 95 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba01:	6a 00                	push   0x0
c000ba03:	68 63 03 00 c0       	push   0xc0000363
c000ba08:	6a 01                	push   0x1
c000ba0a:	53                   	push   ebx
c000ba0b:	e8 86 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba10:	83 c4 20             	add    esp,0x20
c000ba13:	6a 00                	push   0x0
c000ba15:	68 6d 03 00 c0       	push   0xc000036d
c000ba1a:	6a 02                	push   0x2
c000ba1c:	53                   	push   ebx
c000ba1d:	e8 74 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba22:	6a 00                	push   0x0
c000ba24:	68 77 03 00 c0       	push   0xc0000377
c000ba29:	6a 03                	push   0x3
c000ba2b:	53                   	push   ebx
c000ba2c:	e8 65 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba31:	83 c4 20             	add    esp,0x20
c000ba34:	6a 00                	push   0x0
c000ba36:	68 81 03 00 c0       	push   0xc0000381
c000ba3b:	6a 04                	push   0x4
c000ba3d:	53                   	push   ebx
c000ba3e:	e8 53 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba43:	6a 00                	push   0x0
c000ba45:	68 8b 03 00 c0       	push   0xc000038b
c000ba4a:	6a 05                	push   0x5
c000ba4c:	53                   	push   ebx
c000ba4d:	e8 44 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba52:	83 c4 20             	add    esp,0x20
c000ba55:	6a 00                	push   0x0
c000ba57:	68 95 03 00 c0       	push   0xc0000395
c000ba5c:	6a 06                	push   0x6
c000ba5e:	53                   	push   ebx
c000ba5f:	e8 32 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba64:	6a 00                	push   0x0
c000ba66:	68 9f 03 00 c0       	push   0xc000039f
c000ba6b:	6a 07                	push   0x7
c000ba6d:	53                   	push   ebx
c000ba6e:	e8 23 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba73:	83 c4 20             	add    esp,0x20
c000ba76:	6a 00                	push   0x0
c000ba78:	68 a9 03 00 c0       	push   0xc00003a9
c000ba7d:	6a 08                	push   0x8
c000ba7f:	53                   	push   ebx
c000ba80:	e8 11 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba85:	6a 00                	push   0x0
c000ba87:	68 b1 03 00 c0       	push   0xc00003b1
c000ba8c:	6a 09                	push   0x9
c000ba8e:	53                   	push   ebx
c000ba8f:	e8 02 ff ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000ba94:	83 c4 20             	add    esp,0x20
c000ba97:	6a 00                	push   0x0
c000ba99:	68 bb 03 00 c0       	push   0xc00003bb
c000ba9e:	6a 0a                	push   0xa
c000baa0:	53                   	push   ebx
c000baa1:	e8 f0 fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000baa6:	6a 00                	push   0x0
c000baa8:	68 c3 03 00 c0       	push   0xc00003c3
c000baad:	6a 0b                	push   0xb
c000baaf:	53                   	push   ebx
c000bab0:	e8 e1 fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bab5:	83 c4 20             	add    esp,0x20
c000bab8:	6a 00                	push   0x0
c000baba:	68 cb 03 00 c0       	push   0xc00003cb
c000babf:	6a 0c                	push   0xc
c000bac1:	53                   	push   ebx
c000bac2:	e8 cf fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bac7:	6a 00                	push   0x0
c000bac9:	68 d3 03 00 c0       	push   0xc00003d3
c000bace:	6a 0d                	push   0xd
c000bad0:	53                   	push   ebx
c000bad1:	e8 c0 fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bad6:	83 c4 20             	add    esp,0x20
c000bad9:	6a 00                	push   0x0
c000badb:	68 db 03 00 c0       	push   0xc00003db
c000bae0:	6a 0e                	push   0xe
c000bae2:	53                   	push   ebx
c000bae3:	e8 ae fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bae8:	6a 00                	push   0x0
c000baea:	68 e3 03 00 c0       	push   0xc00003e3
c000baef:	6a 0f                	push   0xf
c000baf1:	53                   	push   ebx
c000baf2:	e8 9f fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000baf7:	83 c4 20             	add    esp,0x20
c000bafa:	6a 00                	push   0x0
c000bafc:	68 ed 03 00 c0       	push   0xc00003ed
c000bb01:	6a 10                	push   0x10
c000bb03:	53                   	push   ebx
c000bb04:	e8 8d fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb09:	6a 00                	push   0x0
c000bb0b:	68 f7 03 00 c0       	push   0xc00003f7
c000bb10:	6a 11                	push   0x11
c000bb12:	53                   	push   ebx
c000bb13:	e8 7e fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb18:	83 c4 20             	add    esp,0x20
c000bb1b:	6a 00                	push   0x0
c000bb1d:	68 01 04 00 c0       	push   0xc0000401
c000bb22:	6a 12                	push   0x12
c000bb24:	53                   	push   ebx
c000bb25:	e8 6c fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb2a:	6a 01                	push   0x1
c000bb2c:	68 0b 04 00 c0       	push   0xc000040b
c000bb31:	6a 60                	push   0x60
c000bb33:	53                   	push   ebx
c000bb34:	e8 5d fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb39:	83 c4 20             	add    esp,0x20
c000bb3c:	6a 00                	push   0x0
c000bb3e:	68 15 04 00 c0       	push   0xc0000415
c000bb43:	6a 20                	push   0x20
c000bb45:	53                   	push   ebx
c000bb46:	e8 4b fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb4b:	6a 00                	push   0x0
c000bb4d:	68 1f 04 00 c0       	push   0xc000041f
c000bb52:	6a 21                	push   0x21
c000bb54:	53                   	push   ebx
c000bb55:	e8 3c fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb5a:	83 c4 20             	add    esp,0x20
c000bb5d:	6a 00                	push   0x0
c000bb5f:	68 29 04 00 c0       	push   0xc0000429
c000bb64:	6a 22                	push   0x22
c000bb66:	53                   	push   ebx
c000bb67:	e8 2a fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb6c:	6a 00                	push   0x0
c000bb6e:	68 33 04 00 c0       	push   0xc0000433
c000bb73:	6a 23                	push   0x23
c000bb75:	53                   	push   ebx
c000bb76:	e8 1b fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb7b:	83 c4 20             	add    esp,0x20
c000bb7e:	6a 00                	push   0x0
c000bb80:	68 3d 04 00 c0       	push   0xc000043d
c000bb85:	6a 24                	push   0x24
c000bb87:	53                   	push   ebx
c000bb88:	e8 09 fe ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb8d:	6a 00                	push   0x0
c000bb8f:	68 47 04 00 c0       	push   0xc0000447
c000bb94:	6a 25                	push   0x25
c000bb96:	53                   	push   ebx
c000bb97:	e8 fa fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bb9c:	83 c4 20             	add    esp,0x20
c000bb9f:	6a 00                	push   0x0
c000bba1:	68 51 04 00 c0       	push   0xc0000451
c000bba6:	6a 26                	push   0x26
c000bba8:	53                   	push   ebx
c000bba9:	e8 e8 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bbae:	6a 00                	push   0x0
c000bbb0:	68 5b 04 00 c0       	push   0xc000045b
c000bbb5:	6a 27                	push   0x27
c000bbb7:	53                   	push   ebx
c000bbb8:	e8 d9 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bbbd:	83 c4 20             	add    esp,0x20
c000bbc0:	6a 00                	push   0x0
c000bbc2:	68 65 04 00 c0       	push   0xc0000465
c000bbc7:	6a 28                	push   0x28
c000bbc9:	53                   	push   ebx
c000bbca:	e8 c7 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bbcf:	6a 00                	push   0x0
c000bbd1:	68 6f 04 00 c0       	push   0xc000046f
c000bbd6:	6a 29                	push   0x29
c000bbd8:	53                   	push   ebx
c000bbd9:	e8 b8 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bbde:	83 c4 20             	add    esp,0x20
c000bbe1:	6a 00                	push   0x0
c000bbe3:	68 79 04 00 c0       	push   0xc0000479
c000bbe8:	6a 2a                	push   0x2a
c000bbea:	53                   	push   ebx
c000bbeb:	e8 a6 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bbf0:	6a 00                	push   0x0
c000bbf2:	68 83 04 00 c0       	push   0xc0000483
c000bbf7:	6a 2b                	push   0x2b
c000bbf9:	53                   	push   ebx
c000bbfa:	e8 97 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bbff:	83 c4 20             	add    esp,0x20
c000bc02:	6a 00                	push   0x0
c000bc04:	68 8d 04 00 c0       	push   0xc000048d
c000bc09:	6a 2c                	push   0x2c
c000bc0b:	53                   	push   ebx
c000bc0c:	e8 85 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc11:	6a 00                	push   0x0
c000bc13:	68 97 04 00 c0       	push   0xc0000497
c000bc18:	6a 2d                	push   0x2d
c000bc1a:	53                   	push   ebx
c000bc1b:	e8 76 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc20:	83 c4 20             	add    esp,0x20
c000bc23:	6a 00                	push   0x0
c000bc25:	68 a1 04 00 c0       	push   0xc00004a1
c000bc2a:	6a 2e                	push   0x2e
c000bc2c:	53                   	push   ebx
c000bc2d:	e8 64 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc32:	6a 00                	push   0x0
c000bc34:	68 ab 04 00 c0       	push   0xc00004ab
c000bc39:	6a 2f                	push   0x2f
c000bc3b:	53                   	push   ebx
c000bc3c:	e8 55 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc41:	83 c4 20             	add    esp,0x20
c000bc44:	6a 00                	push   0x0
c000bc46:	68 b5 04 00 c0       	push   0xc00004b5
c000bc4b:	6a 30                	push   0x30
c000bc4d:	53                   	push   ebx
c000bc4e:	e8 43 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc53:	6a 00                	push   0x0
c000bc55:	68 bf 04 00 c0       	push   0xc00004bf
c000bc5a:	6a 31                	push   0x31
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 34 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc62:	83 c4 20             	add    esp,0x20
c000bc65:	6a 00                	push   0x0
c000bc67:	68 c9 04 00 c0       	push   0xc00004c9
c000bc6c:	6a 32                	push   0x32
c000bc6e:	53                   	push   ebx
c000bc6f:	e8 22 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc74:	6a 00                	push   0x0
c000bc76:	68 d3 04 00 c0       	push   0xc00004d3
c000bc7b:	6a 33                	push   0x33
c000bc7d:	53                   	push   ebx
c000bc7e:	e8 13 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc83:	83 c4 20             	add    esp,0x20
c000bc86:	6a 00                	push   0x0
c000bc88:	68 dd 04 00 c0       	push   0xc00004dd
c000bc8d:	6a 34                	push   0x34
c000bc8f:	53                   	push   ebx
c000bc90:	e8 01 fd ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bc95:	6a 00                	push   0x0
c000bc97:	68 e7 04 00 c0       	push   0xc00004e7
c000bc9c:	6a 35                	push   0x35
c000bc9e:	53                   	push   ebx
c000bc9f:	e8 f2 fc ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bca4:	83 c4 20             	add    esp,0x20
c000bca7:	6a 00                	push   0x0
c000bca9:	68 f1 04 00 c0       	push   0xc00004f1
c000bcae:	6a 36                	push   0x36
c000bcb0:	53                   	push   ebx
c000bcb1:	e8 e0 fc ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bcb6:	6a 00                	push   0x0
c000bcb8:	68 fb 04 00 c0       	push   0xc00004fb
c000bcbd:	6a 37                	push   0x37
c000bcbf:	53                   	push   ebx
c000bcc0:	e8 d1 fc ff ff       	call   c000b996 <IDT::addEntry(int, void (*)(), bool)>
c000bcc5:	83 c4 20             	add    esp,0x20
c000bcc8:	e8 d8 25 00 00       	call   c000e2a5 <Virt::getAKernelVAS()>
c000bccd:	52                   	push   edx
c000bcce:	6a 03                	push   0x3
c000bcd0:	6a 02                	push   0x2
c000bcd2:	50                   	push   eax
c000bcd3:	e8 0e 2c 00 00       	call   c000e8e6 <VAS::allocatePages(int, int)>
c000bcd8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bcdf:	89 c6                	mov    esi,eax
c000bce1:	e8 18 33 00 00       	call   c000effe <operator new(unsigned long)>
c000bce6:	81 c6 00 20 00 00    	add    esi,0x2000
c000bcec:	89 04 24             	mov    DWORD PTR [esp],eax
c000bcef:	89 c7                	mov    edi,eax
c000bcf1:	e8 ee 1c 00 00       	call   c000d9e4 <TSS::TSS()>
c000bcf6:	83 c4 0c             	add    esp,0xc
c000bcf9:	68 a9 03 00 c0       	push   0xc00003a9
c000bcfe:	56                   	push   esi
c000bcff:	57                   	push   edi
c000bd00:	e8 1f 1d 00 00       	call   c000da24 <TSS::setup(unsigned long, unsigned long)>
c000bd05:	59                   	pop    ecx
c000bd06:	89 c6                	mov    esi,eax
c000bd08:	5f                   	pop    edi
c000bd09:	6a 00                	push   0x0
c000bd0b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bd0f:	50                   	push   eax
c000bd10:	e8 db fb ff ff       	call   c000b8f0 <IDTEntry::IDTEntry(bool)>
c000bd15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd19:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bd1e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bd24:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000bd2b:	80 ce 05             	or     dh,0x5
c000bd2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd36:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000bd39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd3d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000bd40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bd43:	e8 86 fc ff ff       	call   c000b9ce <IDT::flush()>
c000bd48:	83 c4 20             	add    esp,0x20
c000bd4b:	5b                   	pop    ebx
c000bd4c:	5e                   	pop    esi
c000bd4d:	5f                   	pop    edi
c000bd4e:	c3                   	ret    

c000bd4f <sbrk>:
c000bd4f:	55                   	push   ebp
c000bd50:	57                   	push   edi
c000bd51:	56                   	push   esi
c000bd52:	53                   	push   ebx
c000bd53:	83 ec 1c             	sub    esp,0x1c
c000bd56:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bd5a:	85 db                	test   ebx,ebx
c000bd5c:	a1 2c 34 02 c0       	mov    eax,ds:0xc002342c
c000bd61:	0f 84 e4 00 00 00    	je     c000be4b <sbrk+0xfc>
c000bd67:	78 3d                	js     c000bda6 <sbrk+0x57>
c000bd69:	e8 18 84 00 00       	call   c0014186 <thisCPU()>
c000bd6e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bd74:	83 e0 01             	and    eax,0x1
c000bd77:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bd7b:	a1 2c 34 02 c0       	mov    eax,ds:0xc002342c
c000bd80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd84:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bd8a:	89 d8                	mov    eax,ebx
c000bd8c:	c1 f8 1f             	sar    eax,0x1f
c000bd8f:	25 ff 0f 00 00       	and    eax,0xfff
c000bd94:	01 c3                	add    ebx,eax
c000bd96:	c1 fb 0c             	sar    ebx,0xc
c000bd99:	89 df                	mov    edi,ebx
c000bd9b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bd9f:	be 00 00 00 00       	mov    esi,0x0
c000bda4:	eb 2a                	jmp    c000bdd0 <sbrk+0x81>
c000bda6:	83 ec 08             	sub    esp,0x8
c000bda9:	53                   	push   ebx
c000bdaa:	68 84 0b 02 c0       	push   0xc0020b84
c000bdaf:	e8 7f 33 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000bdb4:	83 c4 10             	add    esp,0x10
c000bdb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bdbc:	e9 8a 00 00 00       	jmp    c000be4b <sbrk+0xfc>
c000bdc1:	81 05 2c 34 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002342c,0x1000
c000bdcb:	46                   	inc    esi
c000bdcc:	39 f7                	cmp    edi,esi
c000bdce:	74 34                	je     c000be04 <sbrk+0xb5>
c000bdd0:	e8 d0 24 00 00       	call   c000e2a5 <Virt::getAKernelVAS()>
c000bdd5:	89 c3                	mov    ebx,eax
c000bdd7:	8b 2d 2c 34 02 c0    	mov    ebp,DWORD PTR ds:0xc002342c
c000bddd:	e8 f5 06 00 00       	call   c000c4d7 <Phys::allocatePage()>
c000bde2:	68 01 04 00 00       	push   0x401
c000bde7:	55                   	push   ebp
c000bde8:	50                   	push   eax
c000bde9:	53                   	push   ebx
c000bdea:	e8 f5 29 00 00       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bdef:	83 c4 10             	add    esp,0x10
c000bdf2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bdf7:	74 c8                	je     c000bdc1 <sbrk+0x72>
c000bdf9:	8b 1d 2c 34 02 c0    	mov    ebx,DWORD PTR ds:0xc002342c
c000bdff:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be02:	eb bd                	jmp    c000bdc1 <sbrk+0x72>
c000be04:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be09:	74 48                	je     c000be53 <sbrk+0x104>
c000be0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be0f:	89 d3                	mov    ebx,edx
c000be11:	c1 eb 0a             	shr    ebx,0xa
c000be14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000be1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000be20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be24:	c1 e0 0c             	shl    eax,0xc
c000be27:	01 d0                	add    eax,edx
c000be29:	c1 e8 0a             	shr    eax,0xa
c000be2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be31:	2d 00 00 40 00       	sub    eax,0x400000
c000be36:	39 c3                	cmp    ebx,eax
c000be38:	77 0d                	ja     c000be47 <sbrk+0xf8>
c000be3a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be43:	39 d8                	cmp    eax,ebx
c000be45:	73 f3                	jae    c000be3a <sbrk+0xeb>
c000be47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be4b:	83 c4 1c             	add    esp,0x1c
c000be4e:	5b                   	pop    ebx
c000be4f:	5e                   	pop    esi
c000be50:	5f                   	pop    edi
c000be51:	5d                   	pop    ebp
c000be52:	c3                   	ret    
c000be53:	e8 3d 32 01 00       	call   c001f095 <CPU::readCR3()>
c000be58:	83 ec 0c             	sub    esp,0xc
c000be5b:	50                   	push   eax
c000be5c:	e8 46 32 01 00       	call   c001f0a7 <CPU::writeCR3(unsigned long)>
c000be61:	83 c4 10             	add    esp,0x10
c000be64:	eb e1                	jmp    c000be47 <sbrk+0xf8>

c000be66 <mmap>:
c000be66:	83 ec 18             	sub    esp,0x18
c000be69:	68 b4 0b 02 c0       	push   0xc0020bb4
c000be6e:	e8 7f 94 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000be73:	b8 00 00 00 00       	mov    eax,0x0
c000be78:	83 c4 1c             	add    esp,0x1c
c000be7b:	c3                   	ret    

c000be7c <munmap>:
c000be7c:	83 ec 18             	sub    esp,0x18
c000be7f:	68 b9 0b 02 c0       	push   0xc0020bb9
c000be84:	e8 69 94 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000be89:	b8 00 00 00 00       	mov    eax,0x0
c000be8e:	83 c4 1c             	add    esp,0x1c
c000be91:	c3                   	ret    

c000be92 <liballoc_lock()>:
c000be92:	83 ec 0c             	sub    esp,0xc
c000be95:	e8 61 c4 00 00       	call   c00182fb <lockScheduler()>
c000be9a:	b8 00 00 00 00       	mov    eax,0x0
c000be9f:	83 c4 0c             	add    esp,0xc
c000bea2:	c3                   	ret    

c000bea3 <liballoc_unlock()>:
c000bea3:	83 ec 0c             	sub    esp,0xc
c000bea6:	e8 52 c4 00 00       	call   c00182fd <unlockScheduler()>
c000beab:	b8 00 00 00 00       	mov    eax,0x0
c000beb0:	83 c4 0c             	add    esp,0xc
c000beb3:	c3                   	ret    

c000beb4 <liballoc_alloc(int)>:
c000beb4:	83 ec 0c             	sub    esp,0xc
c000beb7:	e8 e9 23 00 00       	call   c000e2a5 <Virt::getAKernelVAS()>
c000bebc:	83 ec 04             	sub    esp,0x4
c000bebf:	6a 01                	push   0x1
c000bec1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bec5:	50                   	push   eax
c000bec6:	e8 1b 2a 00 00       	call   c000e8e6 <VAS::allocatePages(int, int)>
c000becb:	83 c4 1c             	add    esp,0x1c
c000bece:	c3                   	ret    

c000becf <liballoc_free(void*, int)>:
c000becf:	83 ec 0c             	sub    esp,0xc
c000bed2:	e8 ce 23 00 00       	call   c000e2a5 <Virt::getAKernelVAS()>
c000bed7:	83 ec 08             	sub    esp,0x8
c000beda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bede:	50                   	push   eax
c000bedf:	e8 a2 26 00 00       	call   c000e586 <VAS::freeAllocatedPages(unsigned long)>
c000bee4:	b8 00 00 00 00       	mov    eax,0x0
c000bee9:	83 c4 1c             	add    esp,0x1c
c000beec:	c3                   	ret    

c000beed <realloc>:
c000beed:	83 ec 14             	sub    esp,0x14
c000bef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bef8:	e8 89 54 ff ff       	call   c0001386 <dlrealloc>
c000befd:	83 c4 1c             	add    esp,0x1c
c000bf00:	c3                   	ret    

c000bf01 <malloc>:
c000bf01:	83 ec 18             	sub    esp,0x18
c000bf04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf08:	e8 3c 4f ff ff       	call   c0000e49 <dlmalloc>
c000bf0d:	83 c4 1c             	add    esp,0x1c
c000bf10:	c3                   	ret    

c000bf11 <free>:
c000bf11:	83 ec 18             	sub    esp,0x18
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ce 4b ff ff       	call   c0000aeb <dlfree>
c000bf1d:	83 c4 1c             	add    esp,0x1c
c000bf20:	c3                   	ret    

c000bf21 <rfree>:
c000bf21:	83 ec 18             	sub    esp,0x18
c000bf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf28:	e8 e4 ff ff ff       	call   c000bf11 <free>
c000bf2d:	83 c4 1c             	add    esp,0x1c
c000bf30:	c3                   	ret    

c000bf31 <calloc>:
c000bf31:	56                   	push   esi
c000bf32:	53                   	push   ebx
c000bf33:	83 ec 10             	sub    esp,0x10
c000bf36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf3a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bf3f:	53                   	push   ebx
c000bf40:	e8 bc ff ff ff       	call   c000bf01 <malloc>
c000bf45:	89 c6                	mov    esi,eax
c000bf47:	83 c4 0c             	add    esp,0xc
c000bf4a:	53                   	push   ebx
c000bf4b:	6a 00                	push   0x0
c000bf4d:	50                   	push   eax
c000bf4e:	e8 b5 46 ff ff       	call   c0000608 <memset>
c000bf53:	89 f0                	mov    eax,esi
c000bf55:	83 c4 14             	add    esp,0x14
c000bf58:	5b                   	pop    ebx
c000bf59:	5e                   	pop    esi
c000bf5a:	c3                   	ret    

c000bf5b <hwTextMode_loadInData(VgaText*)>:
c000bf5b:	57                   	push   edi
c000bf5c:	56                   	push   esi
c000bf5d:	53                   	push   ebx
c000bf5e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bf62:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bf68:	85 c0                	test   eax,eax
c000bf6a:	7e 30                	jle    c000bf9c <hwTextMode_loadInData(VgaText*)+0x41>
c000bf6c:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bf6f:	31 f6                	xor    esi,esi
c000bf71:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bf74:	31 c0                	xor    eax,eax
c000bf76:	c1 e1 05             	shl    ecx,0x5
c000bf79:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bf7f:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bf83:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bf87:	40                   	inc    eax
c000bf88:	83 f8 50             	cmp    eax,0x50
c000bf8b:	75 f2                	jne    c000bf7f <hwTextMode_loadInData(VgaText*)+0x24>
c000bf8d:	46                   	inc    esi
c000bf8e:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bf94:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bf9a:	7f d5                	jg     c000bf71 <hwTextMode_loadInData(VgaText*)+0x16>
c000bf9c:	5b                   	pop    ebx
c000bf9d:	5e                   	pop    esi
c000bf9e:	5f                   	pop    edi
c000bf9f:	c3                   	ret    

c000bfa0 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bfa0:	56                   	push   esi
c000bfa1:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bfa6:	53                   	push   ebx
c000bfa7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfaf:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bfb5:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bfbb:	c1 e0 04             	shl    eax,0x4
c000bfbe:	83 e6 0f             	and    esi,0xf
c000bfc1:	25 ff 00 00 00       	and    eax,0xff
c000bfc6:	83 c2 02             	add    edx,0x2
c000bfc9:	09 f0                	or     eax,esi
c000bfcb:	41                   	inc    ecx
c000bfcc:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bfd0:	c1 e0 08             	shl    eax,0x8
c000bfd3:	81 e6 ff 00 00 00    	and    esi,0xff
c000bfd9:	09 f0                	or     eax,esi
c000bfdb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bfdf:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bfe5:	75 c8                	jne    c000bfaf <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bfe7:	5b                   	pop    ebx
c000bfe8:	5e                   	pop    esi
c000bfe9:	c3                   	ret    

c000bfea <hwTextMode_showCursor(VgaText*, bool)>:
c000bfea:	56                   	push   esi
c000bfeb:	53                   	push   ebx
c000bfec:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bff1:	74 38                	je     c000c02b <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bff3:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bff8:	b0 0a                	mov    al,0xa
c000bffa:	89 da                	mov    edx,ebx
c000bffc:	ee                   	out    dx,al
c000bffd:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c002:	89 ca                	mov    edx,ecx
c000c004:	ec                   	in     al,dx
c000c005:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c009:	b2 0f                	mov    dl,0xf
c000c00b:	83 e0 c0             	and    eax,0xffffffc0
c000c00e:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c014:	09 d0                	or     eax,edx
c000c016:	89 ca                	mov    edx,ecx
c000c018:	ee                   	out    dx,al
c000c019:	b0 0b                	mov    al,0xb
c000c01b:	89 da                	mov    edx,ebx
c000c01d:	ee                   	out    dx,al
c000c01e:	89 ca                	mov    edx,ecx
c000c020:	ec                   	in     al,dx
c000c021:	83 e0 e0             	and    eax,0xffffffe0
c000c024:	83 c8 0f             	or     eax,0xf
c000c027:	ee                   	out    dx,al
c000c028:	5b                   	pop    ebx
c000c029:	5e                   	pop    esi
c000c02a:	c3                   	ret    
c000c02b:	b0 0a                	mov    al,0xa
c000c02d:	ba d4 03 00 00       	mov    edx,0x3d4
c000c032:	ee                   	out    dx,al
c000c033:	b0 20                	mov    al,0x20
c000c035:	ba d5 03 00 00       	mov    edx,0x3d5
c000c03a:	ee                   	out    dx,al
c000c03b:	5b                   	pop    ebx
c000c03c:	5e                   	pop    esi
c000c03d:	c3                   	ret    

c000c03e <hwTextMode_update(VgaText*)>:
c000c03e:	c3                   	ret    

c000c03f <hwTextMode_updateCursor(VgaText*)>:
c000c03f:	56                   	push   esi
c000c040:	b9 19 00 00 00       	mov    ecx,0x19
c000c045:	53                   	push   ebx
c000c046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c04a:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c050:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c056:	29 d1                	sub    ecx,edx
c000c058:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c05e:	01 d9                	add    ecx,ebx
c000c060:	b0 0f                	mov    al,0xf
c000c062:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c065:	c1 e1 04             	shl    ecx,0x4
c000c068:	01 f1                	add    ecx,esi
c000c06a:	be d4 03 00 00       	mov    esi,0x3d4
c000c06f:	89 f2                	mov    edx,esi
c000c071:	ee                   	out    dx,al
c000c072:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c077:	88 c8                	mov    al,cl
c000c079:	89 da                	mov    edx,ebx
c000c07b:	ee                   	out    dx,al
c000c07c:	b0 0e                	mov    al,0xe
c000c07e:	89 f2                	mov    edx,esi
c000c080:	ee                   	out    dx,al
c000c081:	89 c8                	mov    eax,ecx
c000c083:	89 da                	mov    edx,ebx
c000c085:	66 c1 e8 08          	shr    ax,0x8
c000c089:	ee                   	out    dx,al
c000c08a:	5b                   	pop    ebx
c000c08b:	5e                   	pop    esi
c000c08c:	c3                   	ret    

c000c08d <hwTextMode_disableBlink(VgaText*, bool)>:
c000c08d:	ba da 03 00 00       	mov    edx,0x3da
c000c092:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c097:	75 18                	jne    c000c0b1 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c099:	ec                   	in     al,dx
c000c09a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c09f:	b0 30                	mov    al,0x30
c000c0a1:	89 ca                	mov    edx,ecx
c000c0a3:	ee                   	out    dx,al
c000c0a4:	ba c1 03 00 00       	mov    edx,0x3c1
c000c0a9:	ec                   	in     al,dx
c000c0aa:	83 c8 08             	or     eax,0x8
c000c0ad:	89 ca                	mov    edx,ecx
c000c0af:	ee                   	out    dx,al
c000c0b0:	c3                   	ret    
c000c0b1:	ec                   	in     al,dx
c000c0b2:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c0b7:	b0 30                	mov    al,0x30
c000c0b9:	89 ca                	mov    edx,ecx
c000c0bb:	ee                   	out    dx,al
c000c0bc:	ba c1 03 00 00       	mov    edx,0x3c1
c000c0c1:	ec                   	in     al,dx
c000c0c2:	83 e0 f7             	and    eax,0xfffffff7
c000c0c5:	89 ca                	mov    edx,ecx
c000c0c7:	ee                   	out    dx,al
c000c0c8:	c3                   	ret    

c000c0c9 <hwTextMode_scrollScreen(VgaText*)>:
c000c0c9:	55                   	push   ebp
c000c0ca:	bd 02 00 00 00       	mov    ebp,0x2
c000c0cf:	57                   	push   edi
c000c0d0:	56                   	push   esi
c000c0d1:	53                   	push   ebx
c000c0d2:	83 ec 1c             	sub    esp,0x1c
c000c0d5:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c0dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0e1:	31 c0                	xor    eax,eax
c000c0e3:	eb 0b                	jmp    c000c0f0 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c0e5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c0eb:	74 58                	je     c000c145 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c0ed:	43                   	inc    ebx
c000c0ee:	89 f0                	mov    eax,esi
c000c0f0:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c0f6:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c0fc:	88 13                	mov    BYTE PTR [ebx],dl
c000c0fe:	8d 70 01             	lea    esi,[eax+0x1]
c000c101:	83 fd 18             	cmp    ebp,0x18
c000c104:	75 df                	jne    c000c0e5 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c106:	a8 01                	test   al,0x1
c000c108:	75 13                	jne    c000c11d <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c10a:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c10d:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c113:	75 d8                	jne    c000c0ed <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c115:	83 c4 1c             	add    esp,0x1c
c000c118:	5b                   	pop    ebx
c000c119:	5e                   	pop    esi
c000c11a:	5f                   	pop    edi
c000c11b:	5d                   	pop    ebp
c000c11c:	c3                   	ret    
c000c11d:	52                   	push   edx
c000c11e:	31 c0                	xor    eax,eax
c000c120:	52                   	push   edx
c000c121:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c125:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c12b:	50                   	push   eax
c000c12c:	31 c0                	xor    eax,eax
c000c12e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c132:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c138:	50                   	push   eax
c000c139:	e8 84 0b 00 00       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	88 07                	mov    BYTE PTR [edi],al
c000c143:	eb c8                	jmp    c000c10d <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c149:	45                   	inc    ebp
c000c14a:	05 a0 00 00 00       	add    eax,0xa0
c000c14f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c153:	eb 88                	jmp    c000c0dd <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c155 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c155:	56                   	push   esi
c000c156:	31 c0                	xor    eax,eax
c000c158:	53                   	push   ebx
c000c159:	83 ec 0c             	sub    esp,0xc
c000c15c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c160:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c164:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c168:	50                   	push   eax
c000c169:	31 c0                	xor    eax,eax
c000c16b:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c16f:	50                   	push   eax
c000c170:	e8 4d 0b 00 00       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000c175:	5a                   	pop    edx
c000c176:	25 ff 00 00 00       	and    eax,0xff
c000c17b:	59                   	pop    ecx
c000c17c:	50                   	push   eax
c000c17d:	89 f0                	mov    eax,esi
c000c17f:	0f be f0             	movsx  esi,al
c000c182:	56                   	push   esi
c000c183:	e8 e0 0b 00 00       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000c188:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c18c:	ba 19 00 00 00       	mov    edx,0x19
c000c191:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c197:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c19a:	29 f2                	sub    edx,esi
c000c19c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c1a0:	c1 e1 04             	shl    ecx,0x4
c000c1a3:	8d 14 92             	lea    edx,[edx+edx*4]
c000c1a6:	01 d9                	add    ecx,ebx
c000c1a8:	c1 e2 04             	shl    edx,0x4
c000c1ab:	01 ca                	add    edx,ecx
c000c1ad:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c1b5:	83 c4 14             	add    esp,0x14
c000c1b8:	5b                   	pop    ebx
c000c1b9:	5e                   	pop    esi
c000c1ba:	c3                   	ret    

c000c1bb <setupTextMode()>:
c000c1bb:	c7 05 b8 40 02 c0 8d c0 00 c0 	mov    DWORD PTR ds:0xc00240b8,0xc000c08d
c000c1c5:	c7 05 a4 40 02 c0 5b bf 00 c0 	mov    DWORD PTR ds:0xc00240a4,0xc000bf5b
c000c1cf:	c7 05 a0 40 02 c0 a0 bf 00 c0 	mov    DWORD PTR ds:0xc00240a0,0xc000bfa0
c000c1d9:	c7 05 ac 40 02 c0 c9 c0 00 c0 	mov    DWORD PTR ds:0xc00240ac,0xc000c0c9
c000c1e3:	c7 05 b4 40 02 c0 ea bf 00 c0 	mov    DWORD PTR ds:0xc00240b4,0xc000bfea
c000c1ed:	c7 05 a8 40 02 c0 3e c0 00 c0 	mov    DWORD PTR ds:0xc00240a8,0xc000c03e
c000c1f7:	c7 05 b0 40 02 c0 3f c0 00 c0 	mov    DWORD PTR ds:0xc00240b0,0xc000c03f
c000c201:	c7 05 bc 40 02 c0 55 c1 00 c0 	mov    DWORD PTR ds:0xc00240bc,0xc000c155
c000c20b:	c3                   	ret    

c000c20c <kernel_main>:
c000c20c:	57                   	push   edi
c000c20d:	bf f9 03 00 00       	mov    edi,0x3f9
c000c212:	56                   	push   esi
c000c213:	31 f6                	xor    esi,esi
c000c215:	53                   	push   ebx
c000c216:	83 ec 10             	sub    esp,0x10
c000c219:	e8 fe 08 00 00       	call   c000cb1c <installVgaTextImplementation()>
c000c21e:	e8 98 ff ff ff       	call   c000c1bb <setupTextMode()>
c000c223:	89 f0                	mov    eax,esi
c000c225:	89 fa                	mov    edx,edi
c000c227:	ee                   	out    dx,al
c000c228:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c22d:	b0 80                	mov    al,0x80
c000c22f:	89 da                	mov    edx,ebx
c000c231:	ee                   	out    dx,al
c000c232:	b1 03                	mov    cl,0x3
c000c234:	ba f8 03 00 00       	mov    edx,0x3f8
c000c239:	88 c8                	mov    al,cl
c000c23b:	ee                   	out    dx,al
c000c23c:	89 f0                	mov    eax,esi
c000c23e:	89 fa                	mov    edx,edi
c000c240:	ee                   	out    dx,al
c000c241:	88 c8                	mov    al,cl
c000c243:	89 da                	mov    edx,ebx
c000c245:	ee                   	out    dx,al
c000c246:	b0 c7                	mov    al,0xc7
c000c248:	ba fa 03 00 00       	mov    edx,0x3fa
c000c24d:	ee                   	out    dx,al
c000c24e:	b0 0b                	mov    al,0xb
c000c250:	ba fc 03 00 00       	mov    edx,0x3fc
c000c255:	ee                   	out    dx,al
c000c256:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c25b:	83 ec 0c             	sub    esp,0xc
c000c25e:	05 ff 0f 00 00       	add    eax,0xfff
c000c263:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c268:	50                   	push   eax
c000c269:	e8 6d 03 00 00       	call   c000c5db <Phys::physicalMemorySetup(unsigned int)>
c000c26e:	e8 b6 1f 00 00       	call   c000e229 <Virt::virtualMemorySetup()>
c000c273:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c282:	75 0e                	jne    c000c292 <kernel_main+0x86>
c000c284:	89 d8                	mov    eax,ebx
c000c286:	25 48 03 00 00       	and    eax,0x348
c000c28b:	3d 00 03 00 00       	cmp    eax,0x300
c000c290:	74 10                	je     c000c2a2 <kernel_main+0x96>
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	68 3b 21 02 c0       	push   0xc002213b
c000c29a:	e8 53 90 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	83 ec 0c             	sub    esp,0xc
c000c2a5:	89 1d 20 40 02 c0    	mov    DWORD PTR ds:0xc0024020,ebx
c000c2ab:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c2af:	53                   	push   ebx
c000c2b0:	e8 11 21 00 00       	call   c000e3c6 <VAS::VAS()>
c000c2b5:	89 1d 64 41 02 c0    	mov    DWORD PTR ds:0xc0024164,ebx
c000c2bb:	e8 60 3d ff ff       	call   c0000020 <callGlobalConstructors>
c000c2c0:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c2c7:	e8 32 2d 00 00       	call   c000effe <operator new(unsigned long)>
c000c2cc:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2cf:	89 c6                	mov    esi,eax
c000c2d1:	e8 9e ea ff ff       	call   c000ad74 <Computer::Computer()>
c000c2d6:	6a 00                	push   0x0
c000c2d8:	6a 00                	push   0x0
c000c2da:	89 35 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,esi
c000c2e0:	6a 00                	push   0x0
c000c2e2:	56                   	push   esi
c000c2e3:	e8 5a f2 ff ff       	call   c000b542 <Computer::open(int, int, void*)>
c000c2e8:	83 c4 14             	add    esp,0x14
c000c2eb:	53                   	push   ebx
c000c2ec:	e8 87 23 00 00       	call   c000e678 <VAS::~VAS()>
c000c2f1:	c7 04 24 c0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc0
c000c2f8:	e8 f5 8f 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000c2fd:	83 c4 20             	add    esp,0x20
c000c300:	5b                   	pop    ebx
c000c301:	5e                   	pop    esi
c000c302:	5f                   	pop    edi
c000c303:	c3                   	ret    

c000c304 <Phys::allocateDMA(unsigned long)>:
c000c304:	57                   	push   edi
c000c305:	31 d2                	xor    edx,edx
c000c307:	56                   	push   esi
c000c308:	31 ff                	xor    edi,edi
c000c30a:	53                   	push   ebx
c000c30b:	31 c9                	xor    ecx,ecx
c000c30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c311:	31 f6                	xor    esi,esi
c000c313:	05 ff 0f 00 00       	add    eax,0xfff
c000c318:	c1 e8 0c             	shr    eax,0xc
c000c31b:	eb 17                	jmp    c000c334 <Phys::allocateDMA(unsigned long)+0x30>
c000c31d:	85 c9                	test   ecx,ecx
c000c31f:	75 04                	jne    c000c325 <Phys::allocateDMA(unsigned long)+0x21>
c000c321:	89 d7                	mov    edi,edx
c000c323:	89 d6                	mov    esi,edx
c000c325:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c328:	39 d8                	cmp    eax,ebx
c000c32a:	74 1f                	je     c000c34b <Phys::allocateDMA(unsigned long)+0x47>
c000c32c:	42                   	inc    edx
c000c32d:	89 d9                	mov    ecx,ebx
c000c32f:	83 fa 2f             	cmp    edx,0x2f
c000c332:	7f 11                	jg     c000c345 <Phys::allocateDMA(unsigned long)+0x41>
c000c334:	80 ba 60 40 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbfa0],0x0
c000c33b:	74 e0                	je     c000c31d <Phys::allocateDMA(unsigned long)+0x19>
c000c33d:	31 c9                	xor    ecx,ecx
c000c33f:	42                   	inc    edx
c000c340:	83 fa 2f             	cmp    edx,0x2f
c000c343:	7e ef                	jle    c000c334 <Phys::allocateDMA(unsigned long)+0x30>
c000c345:	5b                   	pop    ebx
c000c346:	31 c0                	xor    eax,eax
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c34f:	89 d3                	mov    ebx,edx
c000c351:	c1 fb 1f             	sar    ebx,0x1f
c000c354:	83 e3 0f             	and    ebx,0xf
c000c357:	01 d3                	add    ebx,edx
c000c359:	89 f2                	mov    edx,esi
c000c35b:	c1 fb 04             	sar    ebx,0x4
c000c35e:	c1 fa 04             	sar    edx,0x4
c000c361:	39 da                	cmp    edx,ebx
c000c363:	75 30                	jne    c000c395 <Phys::allocateDMA(unsigned long)+0x91>
c000c365:	85 c0                	test   eax,eax
c000c367:	74 1b                	je     c000c384 <Phys::allocateDMA(unsigned long)+0x80>
c000c369:	bf 60 40 02 c0       	mov    edi,0xc0024060
c000c36e:	8d 96 60 40 02 c0    	lea    edx,[esi-0x3ffdbfa0]
c000c374:	83 f7 ff             	xor    edi,0xffffffff
c000c377:	29 f7                	sub    edi,esi
c000c379:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c37c:	42                   	inc    edx
c000c37d:	8d 04 17             	lea    eax,[edi+edx*1]
c000c380:	39 c1                	cmp    ecx,eax
c000c382:	7f f5                	jg     c000c379 <Phys::allocateDMA(unsigned long)+0x75>
c000c384:	85 db                	test   ebx,ebx
c000c386:	74 13                	je     c000c39b <Phys::allocateDMA(unsigned long)+0x97>
c000c388:	5b                   	pop    ebx
c000c389:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c38f:	c1 e0 0c             	shl    eax,0xc
c000c392:	5e                   	pop    esi
c000c393:	5f                   	pop    edi
c000c394:	c3                   	ret    
c000c395:	89 fa                	mov    edx,edi
c000c397:	31 c9                	xor    ecx,ecx
c000c399:	eb a4                	jmp    c000c33f <Phys::allocateDMA(unsigned long)+0x3b>
c000c39b:	c1 e6 0c             	shl    esi,0xc
c000c39e:	5b                   	pop    ebx
c000c39f:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c3a5:	5e                   	pop    esi
c000c3a6:	5f                   	pop    edi
c000c3a7:	c3                   	ret    

c000c3a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c3a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c3b6:	c1 e9 0c             	shr    ecx,0xc
c000c3b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c3be:	76 25                	jbe    c000c3e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c3c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c3c5:	c1 e8 0c             	shr    eax,0xc
c000c3c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c3cb:	85 c9                	test   ecx,ecx
c000c3cd:	74 15                	je     c000c3e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c3cf:	8d 82 60 40 02 c0    	lea    eax,[edx-0x3ffdbfa0]
c000c3d5:	8d 94 11 60 40 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbfa0]
c000c3dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c3df:	40                   	inc    eax
c000c3e0:	39 d0                	cmp    eax,edx
c000c3e2:	75 f8                	jne    c000c3dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c3e4:	c3                   	ret    
c000c3e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c3eb:	c1 ea 0c             	shr    edx,0xc
c000c3ee:	eb db                	jmp    c000c3cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c3f0 <Phys::setPageState(unsigned long, bool)>:
c000c3f0:	56                   	push   esi
c000c3f1:	ba 01 00 00 00       	mov    edx,0x1
c000c3f6:	53                   	push   ebx
c000c3f7:	8b 35 30 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023430
c000c3fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c405:	89 c8                	mov    eax,ecx
c000c407:	83 e1 07             	and    ecx,0x7
c000c40a:	c1 e8 03             	shr    eax,0x3
c000c40d:	01 c6                	add    esi,eax
c000c40f:	d3 e2                	shl    edx,cl
c000c411:	83 f2 ff             	xor    edx,0xffffffff
c000c414:	20 16                	and    BYTE PTR [esi],dl
c000c416:	8b 15 30 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023430
c000c41c:	01 d0                	add    eax,edx
c000c41e:	d3 e3                	shl    ebx,cl
c000c420:	8a 08                	mov    cl,BYTE PTR [eax]
c000c422:	09 d9                	or     ecx,ebx
c000c424:	88 08                	mov    BYTE PTR [eax],cl
c000c426:	5b                   	pop    ebx
c000c427:	5e                   	pop    esi
c000c428:	c3                   	ret    

c000c429 <Phys::getPageState(unsigned long)>:
c000c429:	53                   	push   ebx
c000c42a:	8b 15 30 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023430
c000c430:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c434:	31 db                	xor    ebx,ebx
c000c436:	89 c8                	mov    eax,ecx
c000c438:	83 e1 07             	and    ecx,0x7
c000c43b:	c1 e8 03             	shr    eax,0x3
c000c43e:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c441:	89 d8                	mov    eax,ebx
c000c443:	5b                   	pop    ebx
c000c444:	d3 f8                	sar    eax,cl
c000c446:	83 e0 01             	and    eax,0x1
c000c449:	c3                   	ret    

c000c44a <Phys::freePage(unsigned long)>:
c000c44a:	53                   	push   ebx
c000c44b:	83 ec 08             	sub    esp,0x8
c000c44e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c452:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c458:	76 5a                	jbe    c000c4b4 <Phys::freePage(unsigned long)+0x6a>
c000c45a:	c1 eb 0c             	shr    ebx,0xc
c000c45d:	53                   	push   ebx
c000c45e:	e8 c6 ff ff ff       	call   c000c429 <Phys::getPageState(unsigned long)>
c000c463:	5a                   	pop    edx
c000c464:	84 c0                	test   al,al
c000c466:	74 5e                	je     c000c4c6 <Phys::freePage(unsigned long)+0x7c>
c000c468:	a1 4c 40 02 c0       	mov    eax,ds:0xc002404c
c000c46d:	48                   	dec    eax
c000c46e:	a3 4c 40 02 c0       	mov    ds:0xc002404c,eax
c000c473:	8d 04 80             	lea    eax,[eax+eax*4]
c000c476:	8d 04 80             	lea    eax,[eax+eax*4]
c000c479:	c1 e0 02             	shl    eax,0x2
c000c47c:	89 c2                	mov    edx,eax
c000c47e:	c1 fa 1f             	sar    edx,0x1f
c000c481:	f7 3d 50 40 02 c0    	idiv   DWORD PTR ds:0xc0024050
c000c487:	39 05 48 40 02 c0    	cmp    DWORD PTR ds:0xc0024048,eax
c000c48d:	75 12                	jne    c000c4a1 <Phys::freePage(unsigned long)+0x57>
c000c48f:	51                   	push   ecx
c000c490:	51                   	push   ecx
c000c491:	6a 00                	push   0x0
c000c493:	53                   	push   ebx
c000c494:	e8 57 ff ff ff       	call   c000c3f0 <Phys::setPageState(unsigned long, bool)>
c000c499:	83 c4 10             	add    esp,0x10
c000c49c:	83 c4 08             	add    esp,0x8
c000c49f:	5b                   	pop    ebx
c000c4a0:	c3                   	ret    
c000c4a1:	83 ec 0c             	sub    esp,0xc
c000c4a4:	a3 48 40 02 c0       	mov    ds:0xc0024048,eax
c000c4a9:	50                   	push   eax
c000c4aa:	e8 01 0a 00 00       	call   c000ceb0 <VgaText::updateRAMUsageDisplay(int)>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	eb db                	jmp    c000c48f <Phys::freePage(unsigned long)+0x45>
c000c4b4:	68 00 10 00 00       	push   0x1000
c000c4b9:	53                   	push   ebx
c000c4ba:	e8 e9 fe ff ff       	call   c000c3a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c4bf:	59                   	pop    ecx
c000c4c0:	5b                   	pop    ebx
c000c4c1:	83 c4 08             	add    esp,0x8
c000c4c4:	5b                   	pop    ebx
c000c4c5:	c3                   	ret    
c000c4c6:	c7 44 24 10 db 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bdb
c000c4ce:	83 c4 08             	add    esp,0x8
c000c4d1:	5b                   	pop    ebx
c000c4d2:	e9 1b 8e 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>

c000c4d7 <Phys::allocatePage()>:
c000c4d7:	56                   	push   esi
c000c4d8:	53                   	push   ebx
c000c4d9:	51                   	push   ecx
c000c4da:	8b 35 40 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024040
c000c4e0:	89 f3                	mov    ebx,esi
c000c4e2:	eb 0a                	jmp    c000c4ee <Phys::allocatePage()+0x17>
c000c4e4:	89 1d 40 40 02 c0    	mov    DWORD PTR ds:0xc0024040,ebx
c000c4ea:	39 de                	cmp    esi,ebx
c000c4ec:	74 24                	je     c000c512 <Phys::allocatePage()+0x3b>
c000c4ee:	53                   	push   ebx
c000c4ef:	e8 35 ff ff ff       	call   c000c429 <Phys::getPageState(unsigned long)>
c000c4f4:	5a                   	pop    edx
c000c4f5:	84 c0                	test   al,al
c000c4f7:	74 5a                	je     c000c553 <Phys::allocatePage()+0x7c>
c000c4f9:	43                   	inc    ebx
c000c4fa:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c500:	75 e2                	jne    c000c4e4 <Phys::allocatePage()+0xd>
c000c502:	31 db                	xor    ebx,ebx
c000c504:	c7 05 40 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024040,0x0
c000c50e:	39 de                	cmp    esi,ebx
c000c510:	75 dc                	jne    c000c4ee <Phys::allocatePage()+0x17>
c000c512:	83 ec 0c             	sub    esp,0xc
c000c515:	68 f1 0b 02 c0       	push   0xc0020bf1
c000c51a:	e8 14 2c 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000c51f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c526:	e8 d9 fd ff ff       	call   c000c304 <Phys::allocateDMA(unsigned long)>
c000c52b:	83 c4 10             	add    esp,0x10
c000c52e:	85 c0                	test   eax,eax
c000c530:	75 5a                	jne    c000c58c <Phys::allocatePage()+0xb5>
c000c532:	83 ec 0c             	sub    esp,0xc
c000c535:	68 02 0c 02 c0       	push   0xc0020c02
c000c53a:	e8 b3 8d 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000c53f:	83 c4 10             	add    esp,0x10
c000c542:	8b 1d 40 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024040
c000c548:	53                   	push   ebx
c000c549:	e8 db fe ff ff       	call   c000c429 <Phys::getPageState(unsigned long)>
c000c54e:	5a                   	pop    edx
c000c54f:	84 c0                	test   al,al
c000c551:	75 a6                	jne    c000c4f9 <Phys::allocatePage()+0x22>
c000c553:	6a 01                	push   0x1
c000c555:	53                   	push   ebx
c000c556:	e8 95 fe ff ff       	call   c000c3f0 <Phys::setPageState(unsigned long, bool)>
c000c55b:	a1 4c 40 02 c0       	mov    eax,ds:0xc002404c
c000c560:	59                   	pop    ecx
c000c561:	40                   	inc    eax
c000c562:	5b                   	pop    ebx
c000c563:	a3 4c 40 02 c0       	mov    ds:0xc002404c,eax
c000c568:	8d 04 80             	lea    eax,[eax+eax*4]
c000c56b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c56e:	c1 e0 02             	shl    eax,0x2
c000c571:	89 c2                	mov    edx,eax
c000c573:	c1 fa 1f             	sar    edx,0x1f
c000c576:	f7 3d 50 40 02 c0    	idiv   DWORD PTR ds:0xc0024050
c000c57c:	39 05 48 40 02 c0    	cmp    DWORD PTR ds:0xc0024048,eax
c000c582:	75 0c                	jne    c000c590 <Phys::allocatePage()+0xb9>
c000c584:	a1 40 40 02 c0       	mov    eax,ds:0xc0024040
c000c589:	c1 e0 0c             	shl    eax,0xc
c000c58c:	5a                   	pop    edx
c000c58d:	5b                   	pop    ebx
c000c58e:	5e                   	pop    esi
c000c58f:	c3                   	ret    
c000c590:	83 ec 0c             	sub    esp,0xc
c000c593:	a3 48 40 02 c0       	mov    ds:0xc0024048,eax
c000c598:	50                   	push   eax
c000c599:	e8 12 09 00 00       	call   c000ceb0 <VgaText::updateRAMUsageDisplay(int)>
c000c59e:	83 c4 10             	add    esp,0x10
c000c5a1:	eb e1                	jmp    c000c584 <Phys::allocatePage()+0xad>

c000c5a3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c5a3:	56                   	push   esi
c000c5a4:	53                   	push   ebx
c000c5a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5a9:	39 1d 44 40 02 c0    	cmp    DWORD PTR ds:0xc0024044,ebx
c000c5af:	73 06                	jae    c000c5b7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c5b1:	89 1d 44 40 02 c0    	mov    DWORD PTR ds:0xc0024044,ebx
c000c5b7:	c1 eb 0c             	shr    ebx,0xc
c000c5ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5be:	c1 e8 0c             	shr    eax,0xc
c000c5c1:	39 d8                	cmp    eax,ebx
c000c5c3:	73 13                	jae    c000c5d8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c5c5:	6a 00                	push   0x0
c000c5c7:	8d 70 01             	lea    esi,[eax+0x1]
c000c5ca:	50                   	push   eax
c000c5cb:	e8 20 fe ff ff       	call   c000c3f0 <Phys::setPageState(unsigned long, bool)>
c000c5d0:	5a                   	pop    edx
c000c5d1:	89 f0                	mov    eax,esi
c000c5d3:	59                   	pop    ecx
c000c5d4:	39 f3                	cmp    ebx,esi
c000c5d6:	75 ed                	jne    c000c5c5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c5d8:	5b                   	pop    ebx
c000c5d9:	5e                   	pop    esi
c000c5da:	c3                   	ret    

c000c5db <Phys::physicalMemorySetup(unsigned int)>:
c000c5db:	55                   	push   ebp
c000c5dc:	57                   	push   edi
c000c5dd:	56                   	push   esi
c000c5de:	53                   	push   ebx
c000c5df:	31 db                	xor    ebx,ebx
c000c5e1:	83 ec 40             	sub    esp,0x40
c000c5e4:	6a 30                	push   0x30
c000c5e6:	6a 00                	push   0x0
c000c5e8:	68 60 40 02 c0       	push   0xc0024060
c000c5ed:	e8 16 40 ff ff       	call   c0000608 <memset>
c000c5f2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c5f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c5fb:	05 00 10 00 00       	add    eax,0x1000
c000c600:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c604:	83 c4 10             	add    esp,0x10
c000c607:	56                   	push   esi
c000c608:	56                   	push   esi
c000c609:	6a 01                	push   0x1
c000c60b:	53                   	push   ebx
c000c60c:	43                   	inc    ebx
c000c60d:	e8 de fd ff ff       	call   c000c3f0 <Phys::setPageState(unsigned long, bool)>
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c61b:	75 ea                	jne    c000c607 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c61d:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c623:	66 85 c0             	test   ax,ax
c000c626:	0f 84 3b 01 00 00    	je     c000c767 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c62c:	89 c7                	mov    edi,eax
c000c62e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c636:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c63c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c641:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c645:	eb 6d                	jmp    c000c6b4 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c647:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c64b:	89 c1                	mov    ecx,eax
c000c64d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c651:	0f 83 bc 00 00 00    	jae    c000c713 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c657:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c65b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c660:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c664:	39 f2                	cmp    edx,esi
c000c666:	19 f8                	sbb    eax,edi
c000c668:	73 07                	jae    c000c671 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c66a:	be 00 00 0a 00       	mov    esi,0xa0000
c000c66f:	31 ff                	xor    edi,edi
c000c671:	89 f2                	mov    edx,esi
c000c673:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c678:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c67e:	89 f9                	mov    ecx,edi
c000c680:	83 d1 ff             	adc    ecx,0xffffffff
c000c683:	39 d0                	cmp    eax,edx
c000c685:	b8 00 00 00 00       	mov    eax,0x0
c000c68a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c68e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c692:	19 c8                	sbb    eax,ecx
c000c694:	0f 82 0d 01 00 00    	jb     c000c7a7 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c69a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c69e:	83 c3 18             	add    ebx,0x18
c000c6a1:	41                   	inc    ecx
c000c6a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c6a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6aa:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c6ae:	0f 84 c3 00 00 00    	je     c000c777 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c6b4:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c6b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c6b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c6bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6c0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c6c3:	01 f0                	add    eax,esi
c000c6c5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c6c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c6d0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c6d4:	11 fa                	adc    edx,edi
c000c6d6:	55                   	push   ebp
c000c6d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c6df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c6e3:	51                   	push   ecx
c000c6e4:	56                   	push   esi
c000c6e5:	68 3c 0c 02 c0       	push   0xc0020c3c
c000c6ea:	e8 44 2a 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000c6ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c6f3:	83 c4 10             	add    esp,0x10
c000c6f6:	09 f8                	or     eax,edi
c000c6f8:	75 7d                	jne    c000c777 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c6fa:	83 fd 01             	cmp    ebp,0x1
c000c6fd:	75 11                	jne    c000c710 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c6ff:	ba 00 00 08 00       	mov    edx,0x80000
c000c704:	89 c1                	mov    ecx,eax
c000c706:	39 f2                	cmp    edx,esi
c000c708:	19 f9                	sbb    ecx,edi
c000c70a:	0f 83 37 ff ff ff    	jae    c000c647 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c710:	4d                   	dec    ebp
c000c711:	75 87                	jne    c000c69a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c713:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c717:	31 d2                	xor    edx,edx
c000c719:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c71d:	89 c8                	mov    eax,ecx
c000c71f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c723:	19 d1                	sbb    ecx,edx
c000c725:	0f 82 6f ff ff ff    	jb     c000c69a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c72b:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c730:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c734:	b9 00 00 00 00       	mov    ecx,0x0
c000c739:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c73d:	0f 83 57 ff ff ff    	jae    c000c69a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c743:	39 c6                	cmp    esi,eax
c000c745:	19 d7                	sbb    edi,edx
c000c747:	73 6a                	jae    c000c7b3 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c749:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c74d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c751:	29 c7                	sub    edi,eax
c000c753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c757:	19 d5                	sbb    ebp,edx
c000c759:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c75d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c761:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c765:	eb 4c                	jmp    c000c7b3 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	68 10 0c 02 c0       	push   0xc0020c10
c000c76f:	e8 7e 8b 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000c774:	83 c4 10             	add    esp,0x10
c000c777:	bb 40 01 00 00       	mov    ebx,0x140
c000c77c:	50                   	push   eax
c000c77d:	50                   	push   eax
c000c77e:	6a 00                	push   0x0
c000c780:	53                   	push   ebx
c000c781:	e8 6a fc ff ff       	call   c000c3f0 <Phys::setPageState(unsigned long, bool)>
c000c786:	8b 15 50 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024050
c000c78c:	43                   	inc    ebx
c000c78d:	42                   	inc    edx
c000c78e:	83 c4 10             	add    esp,0x10
c000c791:	89 15 50 40 02 c0    	mov    DWORD PTR ds:0xc0024050,edx
c000c797:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c79d:	75 dd                	jne    c000c77c <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c79f:	83 c4 3c             	add    esp,0x3c
c000c7a2:	5b                   	pop    ebx
c000c7a3:	5e                   	pop    esi
c000c7a4:	5f                   	pop    edi
c000c7a5:	5d                   	pop    ebp
c000c7a6:	c3                   	ret    
c000c7a7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c7ab:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c7b3:	56                   	push   esi
c000c7b4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c7b8:	56                   	push   esi
c000c7b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c7bd:	57                   	push   edi
c000c7be:	68 60 0c 02 c0       	push   0xc0020c60
c000c7c3:	e8 6b 29 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000c7c8:	5d                   	pop    ebp
c000c7c9:	58                   	pop    eax
c000c7ca:	56                   	push   esi
c000c7cb:	57                   	push   edi
c000c7cc:	e8 d2 fd ff ff       	call   c000c5a3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c7d1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c7d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c7dd:	8b 15 50 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024050
c000c7e3:	83 c4 0c             	add    esp,0xc
c000c7e6:	01 d0                	add    eax,edx
c000c7e8:	a3 50 40 02 c0       	mov    ds:0xc0024050,eax
c000c7ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c7f4:	52                   	push   edx
c000c7f5:	50                   	push   eax
c000c7f6:	68 1e 0c 02 c0       	push   0xc0020c1e
c000c7fb:	e8 33 29 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000c800:	83 c4 10             	add    esp,0x10
c000c803:	e9 92 fe ff ff       	jmp    c000c69a <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c808 <Pipe::isAtty()>:
c000c808:	31 c0                	xor    eax,eax
c000c80a:	c3                   	ret    
c000c80b:	90                   	nop

c000c80c <Pipe::~Pipe()>:
c000c80c:	83 ec 0c             	sub    esp,0xc
c000c80f:	ba cc 0c 02 c0       	mov    edx,0xc0020ccc
c000c814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c818:	89 10                	mov    DWORD PTR [eax],edx
c000c81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c81e:	83 ec 0c             	sub    esp,0xc
c000c821:	50                   	push   eax
c000c822:	e8 5d 16 00 00       	call   c000de84 <UnixFile::~UnixFile()>
c000c827:	83 c4 10             	add    esp,0x10
c000c82a:	90                   	nop
c000c82b:	83 c4 0c             	add    esp,0xc
c000c82e:	c3                   	ret    
c000c82f:	90                   	nop

c000c830 <Pipe::~Pipe()>:
c000c830:	83 ec 0c             	sub    esp,0xc
c000c833:	83 ec 0c             	sub    esp,0xc
c000c836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83a:	e8 cd ff ff ff       	call   c000c80c <Pipe::~Pipe()>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	83 ec 08             	sub    esp,0x8
c000c845:	6a 20                	push   0x20
c000c847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c84b:	e8 bd 27 00 00       	call   c000f00d <operator delete(void*, unsigned long)>
c000c850:	83 c4 10             	add    esp,0x10
c000c853:	83 c4 0c             	add    esp,0xc
c000c856:	c3                   	ret    
c000c857:	90                   	nop

c000c858 <Pipe::read(unsigned long long, void*, int*)>:
c000c858:	55                   	push   ebp
c000c859:	57                   	push   edi
c000c85a:	56                   	push   esi
c000c85b:	53                   	push   ebx
c000c85c:	83 ec 1c             	sub    esp,0x1c
c000c85f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c863:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c867:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c86b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c86e:	89 c8                	mov    eax,ecx
c000c870:	99                   	cdq    
c000c871:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c875:	74 19                	je     c000c890 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c877:	39 f9                	cmp    ecx,edi
c000c879:	89 d1                	mov    ecx,edx
c000c87b:	19 f1                	sbb    ecx,esi
c000c87d:	73 11                	jae    c000c890 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c87f:	e8 77 ba 00 00       	call   c00182fb <lockScheduler()>
c000c884:	e8 bb bd 00 00       	call   c0018644 <schedule()>
c000c889:	e8 6f ba 00 00       	call   c00182fd <unlockScheduler()>
c000c88e:	eb db                	jmp    c000c86b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c890:	39 f8                	cmp    eax,edi
c000c892:	89 d1                	mov    ecx,edx
c000c894:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c898:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c89c:	19 f1                	sbb    ecx,esi
c000c89e:	73 08                	jae    c000c8a8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c8a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c8ab:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c8ae:	29 c6                	sub    esi,eax
c000c8b0:	89 f1                	mov    ecx,esi
c000c8b2:	c1 f9 1f             	sar    ecx,0x1f
c000c8b5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c8b9:	89 ca                	mov    edx,ecx
c000c8bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8bf:	19 d1                	sbb    ecx,edx
c000c8c1:	73 04                	jae    c000c8c7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c8c3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c8c7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c8cb:	89 fd                	mov    ebp,edi
c000c8cd:	29 f5                	sub    ebp,esi
c000c8cf:	85 f6                	test   esi,esi
c000c8d1:	74 12                	je     c000c8e5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c8d3:	52                   	push   edx
c000c8d4:	56                   	push   esi
c000c8d5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c8dd:	e8 f0 3c ff ff       	call   c00005d2 <memcpy>
c000c8e2:	83 c4 10             	add    esp,0x10
c000c8e5:	85 ed                	test   ebp,ebp
c000c8e7:	74 12                	je     c000c8fb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c8e9:	50                   	push   eax
c000c8ea:	55                   	push   ebp
c000c8eb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c8ee:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c8f2:	56                   	push   esi
c000c8f3:	e8 da 3c ff ff       	call   c00005d2 <memcpy>
c000c8f8:	83 c4 10             	add    esp,0x10
c000c8fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c8fe:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c901:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c904:	99                   	cdq    
c000c905:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c909:	89 f7                	mov    edi,esi
c000c90b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c90f:	c1 ff 1f             	sar    edi,0x1f
c000c912:	57                   	push   edi
c000c913:	56                   	push   esi
c000c914:	52                   	push   edx
c000c915:	50                   	push   eax
c000c916:	e8 a1 25 01 00       	call   c001eebc <__umoddi3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c921:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c926:	75 10                	jne    c000c938 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c928:	83 ec 0c             	sub    esp,0xc
c000c92b:	68 89 0c 02 c0       	push   0xc0020c89
c000c930:	e8 bd 89 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000c935:	83 c4 10             	add    esp,0x10
c000c938:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c93c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c940:	89 10                	mov    DWORD PTR [eax],edx
c000c942:	83 c4 1c             	add    esp,0x1c
c000c945:	31 c0                	xor    eax,eax
c000c947:	5b                   	pop    ebx
c000c948:	5e                   	pop    esi
c000c949:	5f                   	pop    edi
c000c94a:	5d                   	pop    ebp
c000c94b:	c3                   	ret    

c000c94c <Pipe::write(unsigned long long, void*, int*)>:
c000c94c:	55                   	push   ebp
c000c94d:	57                   	push   edi
c000c94e:	56                   	push   esi
c000c94f:	53                   	push   ebx
c000c950:	83 ec 1c             	sub    esp,0x1c
c000c953:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c95b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c95f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c962:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c965:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c968:	89 de                	mov    esi,ebx
c000c96a:	89 df                	mov    edi,ebx
c000c96c:	c1 ff 1f             	sar    edi,0x1f
c000c96f:	01 c6                	add    esi,eax
c000c971:	89 c8                	mov    eax,ecx
c000c973:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c977:	11 d7                	adc    edi,edx
c000c979:	99                   	cdq    
c000c97a:	89 d0                	mov    eax,edx
c000c97c:	39 f1                	cmp    ecx,esi
c000c97e:	19 f8                	sbb    eax,edi
c000c980:	b8 01 00 00 00       	mov    eax,0x1
c000c985:	0f 82 80 00 00 00    	jb     c000ca0b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c98b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c98e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c991:	01 d8                	add    eax,ebx
c000c993:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c997:	99                   	cdq    
c000c998:	f7 f9                	idiv   ecx
c000c99a:	29 d1                	sub    ecx,edx
c000c99c:	89 d7                	mov    edi,edx
c000c99e:	89 c8                	mov    eax,ecx
c000c9a0:	99                   	cdq    
c000c9a1:	39 ce                	cmp    esi,ecx
c000c9a3:	19 d3                	sbb    ebx,edx
c000c9a5:	bb 00 00 00 00       	mov    ebx,0x0
c000c9aa:	72 04                	jb     c000c9b0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c9ac:	89 f3                	mov    ebx,esi
c000c9ae:	29 cb                	sub    ebx,ecx
c000c9b0:	89 f1                	mov    ecx,esi
c000c9b2:	29 d9                	sub    ecx,ebx
c000c9b4:	74 1a                	je     c000c9d0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c9b6:	52                   	push   edx
c000c9b7:	51                   	push   ecx
c000c9b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c9bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c9c0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c9c3:	57                   	push   edi
c000c9c4:	e8 09 3c ff ff       	call   c00005d2 <memcpy>
c000c9c9:	83 c4 10             	add    esp,0x10
c000c9cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9d0:	85 db                	test   ebx,ebx
c000c9d2:	74 12                	je     c000c9e6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c9d4:	50                   	push   eax
c000c9d5:	53                   	push   ebx
c000c9d6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c9da:	51                   	push   ecx
c000c9db:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c9de:	e8 ef 3b ff ff       	call   c00005d2 <memcpy>
c000c9e3:	83 c4 10             	add    esp,0x10
c000c9e6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c9e9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c9ee:	75 10                	jne    c000ca00 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c9f0:	83 ec 0c             	sub    esp,0xc
c000c9f3:	68 a5 0c 02 c0       	push   0xc0020ca5
c000c9f8:	e8 f5 88 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000c9fd:	83 c4 10             	add    esp,0x10
c000ca00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ca07:	89 38                	mov    DWORD PTR [eax],edi
c000ca09:	31 c0                	xor    eax,eax
c000ca0b:	83 c4 1c             	add    esp,0x1c
c000ca0e:	5b                   	pop    ebx
c000ca0f:	5e                   	pop    esi
c000ca10:	5f                   	pop    edi
c000ca11:	5d                   	pop    ebp
c000ca12:	c3                   	ret    
c000ca13:	90                   	nop

c000ca14 <Pipe::Pipe(int)>:
c000ca14:	83 ec 0c             	sub    esp,0xc
c000ca17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1b:	83 ec 08             	sub    esp,0x8
c000ca1e:	6a 00                	push   0x0
c000ca20:	50                   	push   eax
c000ca21:	e8 bc 12 00 00       	call   c000dce2 <UnixFile::UnixFile(int)>
c000ca26:	83 c4 10             	add    esp,0x10
c000ca29:	ba cc 0c 02 c0       	mov    edx,0xc0020ccc
c000ca2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca32:	89 10                	mov    DWORD PTR [eax],edx
c000ca34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca3c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ca3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca43:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ca4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ca55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca59:	83 ec 0c             	sub    esp,0xc
c000ca5c:	50                   	push   eax
c000ca5d:	e8 9f f4 ff ff       	call   c000bf01 <malloc>
c000ca62:	83 c4 10             	add    esp,0x10
c000ca65:	89 c2                	mov    edx,eax
c000ca67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ca6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca72:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ca76:	90                   	nop
c000ca77:	83 c4 0c             	add    esp,0xc
c000ca7a:	c3                   	ret    
c000ca7b:	90                   	nop

c000ca7c <VgaText::isAtty()>:
c000ca7c:	b0 01                	mov    al,0x1
c000ca7e:	c3                   	ret    
c000ca7f:	90                   	nop

c000ca80 <VgaText::~VgaText()>:
c000ca80:	83 ec 0c             	sub    esp,0xc
c000ca83:	ba 88 0d 02 c0       	mov    edx,0xc0020d88
c000ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8c:	89 10                	mov    DWORD PTR [eax],edx
c000ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca92:	83 ec 0c             	sub    esp,0xc
c000ca95:	50                   	push   eax
c000ca96:	e8 e9 13 00 00       	call   c000de84 <UnixFile::~UnixFile()>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	90                   	nop
c000ca9f:	83 c4 0c             	add    esp,0xc
c000caa2:	c3                   	ret    
c000caa3:	90                   	nop

c000caa4 <VgaText::~VgaText()>:
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	83 ec 0c             	sub    esp,0xc
c000caaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caae:	e8 cd ff ff ff       	call   c000ca80 <VgaText::~VgaText()>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	83 ec 08             	sub    esp,0x8
c000cab9:	68 60 12 00 00       	push   0x1260
c000cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac2:	e8 46 25 00 00       	call   c000f00d <operator delete(void*, unsigned long)>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	83 c4 0c             	add    esp,0xc
c000cacd:	c3                   	ret    

c000cace <VgaText::read(unsigned long long, void*, int*)>:
c000cace:	83 ec 10             	sub    esp,0x10
c000cad1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cad5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cadd:	e8 f9 51 00 00       	call   c0011cdb <readKeyboard(VgaText*, char*, unsigned long)>
c000cae2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cae6:	89 02                	mov    DWORD PTR [edx],eax
c000cae8:	31 c0                	xor    eax,eax
c000caea:	83 c4 1c             	add    esp,0x1c
c000caed:	c3                   	ret    

c000caee <setTerminalScrollLock(bool)>:
c000caee:	c3                   	ret    

c000caef <addToTerminalCycle(VgaText*)>:
c000caef:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c000caf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000caf9:	85 d2                	test   edx,edx
c000cafb:	75 0c                	jne    c000cb09 <addToTerminalCycle(VgaText*)+0x1a>
c000cafd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cb03:	a3 c0 40 02 c0       	mov    ds:0xc00240c0,eax
c000cb08:	c3                   	ret    
c000cb09:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cb0f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cb15:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cb1b:	c3                   	ret    

c000cb1c <installVgaTextImplementation()>:
c000cb1c:	83 ec 10             	sub    esp,0x10
c000cb1f:	6a 20                	push   0x20
c000cb21:	6a 00                	push   0x0
c000cb23:	68 a0 40 02 c0       	push   0xc00240a0
c000cb28:	e8 db 3a ff ff       	call   c0000608 <memset>
c000cb2d:	83 c4 1c             	add    esp,0x1c
c000cb30:	c3                   	ret    

c000cb31 <scrollTerminalScrollLock(int)>:
c000cb31:	c3                   	ret    

c000cb32 <VgaText::load()>:
c000cb32:	53                   	push   ebx
c000cb33:	31 c0                	xor    eax,eax
c000cb35:	83 ec 58             	sub    esp,0x58
c000cb38:	89 e2                	mov    edx,esp
c000cb3a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cb3e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cb42:	40                   	inc    eax
c000cb43:	83 f8 50             	cmp    eax,0x50
c000cb46:	75 f6                	jne    c000cb3e <VgaText::load()+0xc>
c000cb48:	31 c0                	xor    eax,eax
c000cb4a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cb51:	84 c9                	test   cl,cl
c000cb53:	74 06                	je     c000cb5b <VgaText::load()+0x29>
c000cb55:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cb58:	40                   	inc    eax
c000cb59:	eb ef                	jmp    c000cb4a <VgaText::load()+0x18>
c000cb5b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cb61:	85 c0                	test   eax,eax
c000cb63:	74 09                	je     c000cb6e <VgaText::load()+0x3c>
c000cb65:	51                   	push   ecx
c000cb66:	51                   	push   ecx
c000cb67:	52                   	push   edx
c000cb68:	53                   	push   ebx
c000cb69:	ff d0                	call   eax
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cb74:	85 c0                	test   eax,eax
c000cb76:	74 09                	je     c000cb81 <VgaText::load()+0x4f>
c000cb78:	83 ec 0c             	sub    esp,0xc
c000cb7b:	53                   	push   ebx
c000cb7c:	ff d0                	call   eax
c000cb7e:	83 c4 10             	add    esp,0x10
c000cb81:	83 c4 58             	add    esp,0x58
c000cb84:	5b                   	pop    ebx
c000cb85:	c3                   	ret    

c000cb86 <VgaText::updateCursor()>:
c000cb86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb8a:	39 05 c4 40 02 c0    	cmp    DWORD PTR ds:0xc00240c4,eax
c000cb90:	75 0c                	jne    c000cb9e <VgaText::updateCursor()+0x18>
c000cb92:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cb98:	85 c0                	test   eax,eax
c000cb9a:	74 02                	je     c000cb9e <VgaText::updateCursor()+0x18>
c000cb9c:	ff e0                	jmp    eax
c000cb9e:	c3                   	ret    
c000cb9f:	90                   	nop

c000cba0 <VgaText::showCursor(bool)>:
c000cba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cba8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cbae:	c3                   	ret    
c000cbaf:	90                   	nop

c000cbb0 <VgaText::disableBlink(bool)>:
c000cbb0:	56                   	push   esi
c000cbb1:	53                   	push   ebx
c000cbb2:	51                   	push   ecx
c000cbb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cbb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cbbb:	39 1d c4 40 02 c0    	cmp    DWORD PTR ds:0xc00240c4,ebx
c000cbc1:	75 18                	jne    c000cbdb <VgaText::disableBlink(bool)+0x2b>
c000cbc3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cbc9:	85 c0                	test   eax,eax
c000cbcb:	74 0e                	je     c000cbdb <VgaText::disableBlink(bool)+0x2b>
c000cbcd:	89 f1                	mov    ecx,esi
c000cbcf:	52                   	push   edx
c000cbd0:	52                   	push   edx
c000cbd1:	0f b6 d1             	movzx  edx,cl
c000cbd4:	52                   	push   edx
c000cbd5:	53                   	push   ebx
c000cbd6:	ff d0                	call   eax
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	89 f0                	mov    eax,esi
c000cbdd:	83 f0 01             	xor    eax,0x1
c000cbe0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000cbe6:	58                   	pop    eax
c000cbe7:	5b                   	pop    ebx
c000cbe8:	5e                   	pop    esi
c000cbe9:	c3                   	ret    

c000cbea <VgaText::doANSI_SGR(int)>:
c000cbea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbf2:	85 d2                	test   edx,edx
c000cbf4:	75 14                	jne    c000cc0a <VgaText::doANSI_SGR(int)+0x20>
c000cbf6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cbfc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc02:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cc08:	eb 65                	jmp    c000cc6f <VgaText::doANSI_SGR(int)+0x85>
c000cc0a:	83 fa 07             	cmp    edx,0x7
c000cc0d:	75 14                	jne    c000cc23 <VgaText::doANSI_SGR(int)+0x39>
c000cc0f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cc15:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cc1b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cc21:	eb 4c                	jmp    c000cc6f <VgaText::doANSI_SGR(int)+0x85>
c000cc23:	83 fa 1b             	cmp    edx,0x1b
c000cc26:	74 ce                	je     c000cbf6 <VgaText::doANSI_SGR(int)+0xc>
c000cc28:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cc2b:	83 f9 07             	cmp    ecx,0x7
c000cc2e:	77 09                	ja     c000cc39 <VgaText::doANSI_SGR(int)+0x4f>
c000cc30:	8b 14 8d 60 34 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcba0]
c000cc37:	eb 20                	jmp    c000cc59 <VgaText::doANSI_SGR(int)+0x6f>
c000cc39:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cc3c:	83 f9 07             	cmp    ecx,0x7
c000cc3f:	77 09                	ja     c000cc4a <VgaText::doANSI_SGR(int)+0x60>
c000cc41:	8b 14 8d 60 34 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcba0]
c000cc48:	eb 25                	jmp    c000cc6f <VgaText::doANSI_SGR(int)+0x85>
c000cc4a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cc4d:	83 f9 07             	cmp    ecx,0x7
c000cc50:	77 0e                	ja     c000cc60 <VgaText::doANSI_SGR(int)+0x76>
c000cc52:	8b 14 95 18 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcce8]
c000cc59:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc5f:	c3                   	ret    
c000cc60:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cc63:	83 f9 07             	cmp    ecx,0x7
c000cc66:	77 0d                	ja     c000cc75 <VgaText::doANSI_SGR(int)+0x8b>
c000cc68:	8b 14 95 f0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd10]
c000cc6f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cc75:	c3                   	ret    

c000cc76 <VgaText::setDefaultBgColour(VgaColour)>:
c000cc76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc7e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cc84:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cc8a:	c3                   	ret    
c000cc8b:	90                   	nop

c000cc8c <VgaText::setDefaultFgColour(VgaColour)>:
c000cc8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc94:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cc9a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cca0:	c3                   	ret    
c000cca1:	90                   	nop

c000cca2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cca2:	53                   	push   ebx
c000cca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cca7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ccab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ccaf:	51                   	push   ecx
c000ccb0:	e8 c1 ff ff ff       	call   c000cc76 <VgaText::setDefaultBgColour(VgaColour)>
c000ccb5:	58                   	pop    eax
c000ccb6:	5a                   	pop    edx
c000ccb7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ccbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ccbf:	5b                   	pop    ebx
c000ccc0:	eb ca                	jmp    c000cc8c <VgaText::setDefaultFgColour(VgaColour)>

c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ccc2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ccc7:	c1 e2 04             	shl    edx,0x4
c000ccca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ccce:	83 e0 0f             	and    eax,0xf
c000ccd1:	09 d0                	or     eax,edx
c000ccd3:	c3                   	ret    

c000ccd4 <VgaText::scrollScreen()>:
c000ccd4:	57                   	push   edi
c000ccd5:	56                   	push   esi
c000ccd6:	be 01 00 00 00       	mov    esi,0x1
c000ccdb:	53                   	push   ebx
c000ccdc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cce0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cce6:	31 ff                	xor    edi,edi
c000cce8:	01 d9                	add    ecx,ebx
c000ccea:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cced:	83 fe 17             	cmp    esi,0x17
c000ccf0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ccf6:	75 28                	jne    c000cd20 <VgaText::scrollScreen()+0x4c>
c000ccf8:	f7 c7 01 00 00 00    	test   edi,0x1
c000ccfe:	74 1c                	je     c000cd1c <VgaText::scrollScreen()+0x48>
c000cd00:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cd07:	50                   	push   eax
c000cd08:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cd0f:	50                   	push   eax
c000cd10:	e8 ad ff ff ff       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cd15:	5a                   	pop    edx
c000cd16:	5a                   	pop    edx
c000cd17:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cd1a:	eb 04                	jmp    c000cd20 <VgaText::scrollScreen()+0x4c>
c000cd1c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cd20:	47                   	inc    edi
c000cd21:	41                   	inc    ecx
c000cd22:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cd28:	75 c0                	jne    c000ccea <VgaText::scrollScreen()+0x16>
c000cd2a:	46                   	inc    esi
c000cd2b:	83 fe 18             	cmp    esi,0x18
c000cd2e:	75 b0                	jne    c000cce0 <VgaText::scrollScreen()+0xc>
c000cd30:	39 1d c4 40 02 c0    	cmp    DWORD PTR ds:0xc00240c4,ebx
c000cd36:	75 24                	jne    c000cd5c <VgaText::scrollScreen()+0x88>
c000cd38:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cd3f:	74 08                	je     c000cd49 <VgaText::scrollScreen()+0x75>
c000cd41:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000cd47:	eb 13                	jmp    c000cd5c <VgaText::scrollScreen()+0x88>
c000cd49:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000cd4f:	85 c0                	test   eax,eax
c000cd51:	74 09                	je     c000cd5c <VgaText::scrollScreen()+0x88>
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	53                   	push   ebx
c000cd57:	ff d0                	call   eax
c000cd59:	83 c4 10             	add    esp,0x10
c000cd5c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cd60:	5b                   	pop    ebx
c000cd61:	5e                   	pop    esi
c000cd62:	5f                   	pop    edi
c000cd63:	e9 1e fe ff ff       	jmp    c000cb86 <VgaText::updateCursor()>

c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>:
c000cd68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000cd6d:	c1 e0 08             	shl    eax,0x8
c000cd70:	89 c2                	mov    edx,eax
c000cd72:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000cd77:	09 d0                	or     eax,edx
c000cd79:	c3                   	ret    

c000cd7a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000cd7a:	53                   	push   ebx
c000cd7b:	83 ec 08             	sub    esp,0x8
c000cd7e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cd83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cd87:	50                   	push   eax
c000cd88:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cd8d:	50                   	push   eax
c000cd8e:	e8 2f ff ff ff       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cd93:	5a                   	pop    edx
c000cd94:	5b                   	pop    ebx
c000cd95:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cd9a:	0f b6 c0             	movzx  eax,al
c000cd9d:	50                   	push   eax
c000cd9e:	53                   	push   ebx
c000cd9f:	e8 c4 ff ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cda4:	5a                   	pop    edx
c000cda5:	5a                   	pop    edx
c000cda6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cdac:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cdb0:	0f b7 d2             	movzx  edx,dx
c000cdb3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cdb8:	39 0d c4 40 02 c0    	cmp    DWORD PTR ds:0xc00240c4,ecx
c000cdbe:	75 14                	jne    c000cdd4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cdc0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cdc6:	85 c0                	test   eax,eax
c000cdc8:	74 0a                	je     c000cdd4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cdca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cdce:	83 c4 08             	add    esp,0x8
c000cdd1:	5b                   	pop    ebx
c000cdd2:	ff e0                	jmp    eax
c000cdd4:	83 c4 08             	add    esp,0x8
c000cdd7:	5b                   	pop    ebx
c000cdd8:	c3                   	ret    
c000cdd9:	90                   	nop

c000cdda <VgaText::getCursorX()>:
c000cdda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdde:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cde4:	c3                   	ret    
c000cde5:	90                   	nop

c000cde6 <VgaText::getCursorY()>:
c000cde6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdea:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cdf0:	c3                   	ret    
c000cdf1:	90                   	nop

c000cdf2 <VgaText::setCursor(int, int)>:
c000cdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdfa:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ce00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce04:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ce0a:	e9 77 fd ff ff       	jmp    c000cb86 <VgaText::updateCursor()>
c000ce0f:	90                   	nop

c000ce10 <VgaText::setCursorX(int)>:
c000ce10:	83 ec 10             	sub    esp,0x10
c000ce13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce17:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ce1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce21:	50                   	push   eax
c000ce22:	e8 cb ff ff ff       	call   c000cdf2 <VgaText::setCursor(int, int)>
c000ce27:	83 c4 1c             	add    esp,0x1c
c000ce2a:	c3                   	ret    
c000ce2b:	90                   	nop

c000ce2c <VgaText::setCursorY(int)>:
c000ce2c:	83 ec 10             	sub    esp,0x10
c000ce2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce37:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ce3d:	50                   	push   eax
c000ce3e:	e8 af ff ff ff       	call   c000cdf2 <VgaText::setCursor(int, int)>
c000ce43:	83 c4 1c             	add    esp,0x1c
c000ce46:	c3                   	ret    
c000ce47:	90                   	nop

c000ce48 <VgaText::incrementCursor(bool)>:
c000ce48:	56                   	push   esi
c000ce49:	53                   	push   ebx
c000ce4a:	51                   	push   ecx
c000ce4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce53:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000ce59:	40                   	inc    eax
c000ce5a:	83 f8 50             	cmp    eax,0x50
c000ce5d:	74 08                	je     c000ce67 <VgaText::incrementCursor(bool)+0x1f>
c000ce5f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000ce65:	eb 33                	jmp    c000ce9a <VgaText::incrementCursor(bool)+0x52>
c000ce67:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce6d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce77:	8d 50 01             	lea    edx,[eax+0x1]
c000ce7a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ce80:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce86:	75 12                	jne    c000ce9a <VgaText::incrementCursor(bool)+0x52>
c000ce88:	83 ec 0c             	sub    esp,0xc
c000ce8b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce91:	53                   	push   ebx
c000ce92:	e8 3d fe ff ff       	call   c000ccd4 <VgaText::scrollScreen()>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	89 f0                	mov    eax,esi
c000ce9c:	84 c0                	test   al,al
c000ce9e:	74 0c                	je     c000ceac <VgaText::incrementCursor(bool)+0x64>
c000cea0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cea4:	5a                   	pop    edx
c000cea5:	5b                   	pop    ebx
c000cea6:	5e                   	pop    esi
c000cea7:	e9 da fc ff ff       	jmp    c000cb86 <VgaText::updateCursor()>
c000ceac:	58                   	pop    eax
c000cead:	5b                   	pop    ebx
c000ceae:	5e                   	pop    esi
c000ceaf:	c3                   	ret    

c000ceb0 <VgaText::updateRAMUsageDisplay(int)>:
c000ceb0:	53                   	push   ebx
c000ceb1:	bb 0a 00 00 00       	mov    ebx,0xa
c000ceb6:	6a 0f                	push   0xf
c000ceb8:	6a 00                	push   0x0
c000ceba:	e8 03 fe ff ff       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cebf:	5a                   	pop    edx
c000cec0:	59                   	pop    ecx
c000cec1:	0f b6 c8             	movzx  ecx,al
c000cec4:	51                   	push   ecx
c000cec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cec9:	99                   	cdq    
c000ceca:	f7 fb                	idiv   ebx
c000cecc:	83 c0 30             	add    eax,0x30
c000cecf:	89 d3                	mov    ebx,edx
c000ced1:	0f be c0             	movsx  eax,al
c000ced4:	50                   	push   eax
c000ced5:	e8 8e fe ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000ceda:	5a                   	pop    edx
c000cedb:	83 c3 30             	add    ebx,0x30
c000cede:	5a                   	pop    edx
c000cedf:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cee5:	0f b6 db             	movzx  ebx,bl
c000cee8:	51                   	push   ecx
c000cee9:	53                   	push   ebx
c000ceea:	e8 79 fe ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000ceef:	5b                   	pop    ebx
c000cef0:	5a                   	pop    edx
c000cef1:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cef7:	51                   	push   ecx
c000cef8:	6a 25                	push   0x25
c000cefa:	e8 69 fe ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000ceff:	59                   	pop    ecx
c000cf00:	5b                   	pop    ebx
c000cf01:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cf07:	5b                   	pop    ebx
c000cf08:	c3                   	ret    
c000cf09:	90                   	nop

c000cf0a <VgaText::updateDiskUsage()>:
c000cf0a:	55                   	push   ebp
c000cf0b:	bd 10 27 00 00       	mov    ebp,0x2710
c000cf10:	57                   	push   edi
c000cf11:	56                   	push   esi
c000cf12:	53                   	push   ebx
c000cf13:	6a 0f                	push   0xf
c000cf15:	6a 00                	push   0x0
c000cf17:	e8 a6 fd ff ff       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf1c:	0f b6 d8             	movzx  ebx,al
c000cf1f:	a1 a4 5d 02 c0       	mov    eax,ds:0xc0025da4
c000cf24:	5a                   	pop    edx
c000cf25:	99                   	cdq    
c000cf26:	f7 fd                	idiv   ebp
c000cf28:	59                   	pop    ecx
c000cf29:	b9 0a 00 00 00       	mov    ecx,0xa
c000cf2e:	99                   	cdq    
c000cf2f:	f7 f9                	idiv   ecx
c000cf31:	53                   	push   ebx
c000cf32:	8d 42 30             	lea    eax,[edx+0x30]
c000cf35:	0f b6 c0             	movzx  eax,al
c000cf38:	50                   	push   eax
c000cf39:	e8 2a fe ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf3e:	5e                   	pop    esi
c000cf3f:	5f                   	pop    edi
c000cf40:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cf46:	a1 a4 5d 02 c0       	mov    eax,ds:0xc0025da4
c000cf4b:	bf e8 03 00 00       	mov    edi,0x3e8
c000cf50:	99                   	cdq    
c000cf51:	f7 ff                	idiv   edi
c000cf53:	99                   	cdq    
c000cf54:	f7 f9                	idiv   ecx
c000cf56:	53                   	push   ebx
c000cf57:	8d 42 30             	lea    eax,[edx+0x30]
c000cf5a:	0f b6 c0             	movzx  eax,al
c000cf5d:	50                   	push   eax
c000cf5e:	e8 05 fe ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf63:	5a                   	pop    edx
c000cf64:	5e                   	pop    esi
c000cf65:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cf6b:	a1 a4 5d 02 c0       	mov    eax,ds:0xc0025da4
c000cf70:	be 64 00 00 00       	mov    esi,0x64
c000cf75:	99                   	cdq    
c000cf76:	f7 fe                	idiv   esi
c000cf78:	99                   	cdq    
c000cf79:	f7 f9                	idiv   ecx
c000cf7b:	53                   	push   ebx
c000cf7c:	8d 42 30             	lea    eax,[edx+0x30]
c000cf7f:	0f b6 c0             	movzx  eax,al
c000cf82:	50                   	push   eax
c000cf83:	e8 e0 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf88:	5a                   	pop    edx
c000cf89:	5a                   	pop    edx
c000cf8a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cf90:	a1 a4 5d 02 c0       	mov    eax,ds:0xc0025da4
c000cf95:	53                   	push   ebx
c000cf96:	99                   	cdq    
c000cf97:	f7 f9                	idiv   ecx
c000cf99:	99                   	cdq    
c000cf9a:	f7 f9                	idiv   ecx
c000cf9c:	8d 42 30             	lea    eax,[edx+0x30]
c000cf9f:	0f b6 c0             	movzx  eax,al
c000cfa2:	50                   	push   eax
c000cfa3:	e8 c0 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfa8:	5a                   	pop    edx
c000cfa9:	5a                   	pop    edx
c000cfaa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cfb0:	a1 a4 5d 02 c0       	mov    eax,ds:0xc0025da4
c000cfb5:	53                   	push   ebx
c000cfb6:	99                   	cdq    
c000cfb7:	f7 f9                	idiv   ecx
c000cfb9:	8d 42 30             	lea    eax,[edx+0x30]
c000cfbc:	0f b6 c0             	movzx  eax,al
c000cfbf:	50                   	push   eax
c000cfc0:	e8 a3 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc5:	5a                   	pop    edx
c000cfc6:	5a                   	pop    edx
c000cfc7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cfcd:	a1 a0 5d 02 c0       	mov    eax,ds:0xc0025da0
c000cfd2:	53                   	push   ebx
c000cfd3:	99                   	cdq    
c000cfd4:	f7 fd                	idiv   ebp
c000cfd6:	99                   	cdq    
c000cfd7:	f7 f9                	idiv   ecx
c000cfd9:	8d 42 30             	lea    eax,[edx+0x30]
c000cfdc:	0f b6 c0             	movzx  eax,al
c000cfdf:	50                   	push   eax
c000cfe0:	e8 83 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe5:	5d                   	pop    ebp
c000cfe6:	5a                   	pop    edx
c000cfe7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cfed:	a1 a0 5d 02 c0       	mov    eax,ds:0xc0025da0
c000cff2:	53                   	push   ebx
c000cff3:	99                   	cdq    
c000cff4:	f7 ff                	idiv   edi
c000cff6:	99                   	cdq    
c000cff7:	f7 f9                	idiv   ecx
c000cff9:	8d 42 30             	lea    eax,[edx+0x30]
c000cffc:	0f b6 c0             	movzx  eax,al
c000cfff:	50                   	push   eax
c000d000:	e8 63 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000d005:	5f                   	pop    edi
c000d006:	5d                   	pop    ebp
c000d007:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d00d:	53                   	push   ebx
c000d00e:	a1 a0 5d 02 c0       	mov    eax,ds:0xc0025da0
c000d013:	99                   	cdq    
c000d014:	f7 fe                	idiv   esi
c000d016:	99                   	cdq    
c000d017:	f7 f9                	idiv   ecx
c000d019:	8d 42 30             	lea    eax,[edx+0x30]
c000d01c:	0f b6 c0             	movzx  eax,al
c000d01f:	50                   	push   eax
c000d020:	e8 43 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000d025:	5a                   	pop    edx
c000d026:	5e                   	pop    esi
c000d027:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d02d:	a1 a0 5d 02 c0       	mov    eax,ds:0xc0025da0
c000d032:	53                   	push   ebx
c000d033:	99                   	cdq    
c000d034:	f7 f9                	idiv   ecx
c000d036:	99                   	cdq    
c000d037:	f7 f9                	idiv   ecx
c000d039:	8d 42 30             	lea    eax,[edx+0x30]
c000d03c:	0f b6 c0             	movzx  eax,al
c000d03f:	50                   	push   eax
c000d040:	e8 23 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000d045:	5f                   	pop    edi
c000d046:	5d                   	pop    ebp
c000d047:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d04d:	a1 a0 5d 02 c0       	mov    eax,ds:0xc0025da0
c000d052:	53                   	push   ebx
c000d053:	99                   	cdq    
c000d054:	f7 f9                	idiv   ecx
c000d056:	83 c2 30             	add    edx,0x30
c000d059:	0f b6 d2             	movzx  edx,dl
c000d05c:	52                   	push   edx
c000d05d:	e8 06 fd ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000d062:	5a                   	pop    edx
c000d063:	59                   	pop    ecx
c000d064:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d06a:	5b                   	pop    ebx
c000d06b:	5e                   	pop    esi
c000d06c:	5f                   	pop    edi
c000d06d:	5d                   	pop    ebp
c000d06e:	c3                   	ret    
c000d06f:	90                   	nop

c000d070 <VgaText::updateTitle()>:
c000d070:	53                   	push   ebx
c000d071:	31 c0                	xor    eax,eax
c000d073:	83 ec 58             	sub    esp,0x58
c000d076:	89 e1                	mov    ecx,esp
c000d078:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d07c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d080:	40                   	inc    eax
c000d081:	83 f8 50             	cmp    eax,0x50
c000d084:	75 f6                	jne    c000d07c <VgaText::updateTitle()+0xc>
c000d086:	31 c0                	xor    eax,eax
c000d088:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d08f:	84 db                	test   bl,bl
c000d091:	74 06                	je     c000d099 <VgaText::updateTitle()+0x29>
c000d093:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d096:	40                   	inc    eax
c000d097:	eb ef                	jmp    c000d088 <VgaText::updateTitle()+0x18>
c000d099:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d09f:	85 c0                	test   eax,eax
c000d0a1:	74 09                	je     c000d0ac <VgaText::updateTitle()+0x3c>
c000d0a3:	53                   	push   ebx
c000d0a4:	53                   	push   ebx
c000d0a5:	51                   	push   ecx
c000d0a6:	52                   	push   edx
c000d0a7:	ff d0                	call   eax
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	e8 59 fe ff ff       	call   c000cf0a <VgaText::updateDiskUsage()>
c000d0b1:	83 c4 58             	add    esp,0x58
c000d0b4:	5b                   	pop    ebx
c000d0b5:	c3                   	ret    

c000d0b6 <VgaText::setTitleTextColour(VgaColour)>:
c000d0b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0be:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d0c4:	eb aa                	jmp    c000d070 <VgaText::updateTitle()>

c000d0c6 <VgaText::setTitleColour(VgaColour)>:
c000d0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0ce:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d0d4:	eb 9a                	jmp    c000d070 <VgaText::updateTitle()>

c000d0d6 <VgaText::setTitle(char*)>:
c000d0d6:	53                   	push   ebx
c000d0d7:	83 ec 10             	sub    esp,0x10
c000d0da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d0e8:	50                   	push   eax
c000d0e9:	e8 b9 35 ff ff       	call   c00006a7 <strcpy>
c000d0ee:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d0f2:	83 c4 18             	add    esp,0x18
c000d0f5:	5b                   	pop    ebx
c000d0f6:	e9 75 ff ff ff       	jmp    c000d070 <VgaText::updateTitle()>
c000d0fb:	90                   	nop

c000d0fc <VgaText::decrementCursor(bool)>:
c000d0fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d100:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d104:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d10a:	85 c0                	test   eax,eax
c000d10c:	74 07                	je     c000d115 <VgaText::decrementCursor(bool)+0x19>
c000d10e:	48                   	dec    eax
c000d10f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d115:	84 c9                	test   cl,cl
c000d117:	74 09                	je     c000d122 <VgaText::decrementCursor(bool)+0x26>
c000d119:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d11d:	e9 64 fa ff ff       	jmp    c000cb86 <VgaText::updateCursor()>
c000d122:	c3                   	ret    
c000d123:	90                   	nop

c000d124 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d124:	53                   	push   ebx
c000d125:	83 ec 08             	sub    esp,0x8
c000d128:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d12c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d130:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d134:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d138:	3c 07                	cmp    al,0x7
c000d13a:	75 2a                	jne    c000d166 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d13c:	a1 6c 41 02 c0       	mov    eax,ds:0xc002416c
c000d141:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d149:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d151:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d159:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d15d:	83 c4 08             	add    esp,0x8
c000d160:	5b                   	pop    ebx
c000d161:	e9 c0 2d 00 00       	jmp    c000ff26 <Buzzer::beep(int, int, bool)>
c000d166:	3c 0d                	cmp    al,0xd
c000d168:	75 0c                	jne    c000d176 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d16a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d174:	eb 3b                	jmp    c000d1b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d176:	3c 0a                	cmp    al,0xa
c000d178:	75 40                	jne    c000d1ba <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d17a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d180:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d18a:	8d 50 01             	lea    edx,[eax+0x1]
c000d18d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d193:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d199:	75 12                	jne    c000d1ad <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d19b:	83 ec 0c             	sub    esp,0xc
c000d19e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 2a fb ff ff       	call   c000ccd4 <VgaText::scrollScreen()>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1b1:	83 c4 08             	add    esp,0x8
c000d1b4:	5b                   	pop    ebx
c000d1b5:	e9 cc f9 ff ff       	jmp    c000cb86 <VgaText::updateCursor()>
c000d1ba:	3c 08                	cmp    al,0x8
c000d1bc:	75 31                	jne    c000d1ef <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d1be:	50                   	push   eax
c000d1bf:	50                   	push   eax
c000d1c0:	6a 01                	push   0x1
c000d1c2:	53                   	push   ebx
c000d1c3:	e8 34 ff ff ff       	call   c000d0fc <VgaText::decrementCursor(bool)>
c000d1c8:	5a                   	pop    edx
c000d1c9:	59                   	pop    ecx
c000d1ca:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d1d0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d1d6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1dc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1e2:	6a 20                	push   0x20
c000d1e4:	53                   	push   ebx
c000d1e5:	e8 90 fb ff ff       	call   c000cd7a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1ea:	83 c4 28             	add    esp,0x28
c000d1ed:	5b                   	pop    ebx
c000d1ee:	c3                   	ret    
c000d1ef:	83 ec 08             	sub    esp,0x8
c000d1f2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d1f8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d1fe:	0f be c0             	movsx  eax,al
c000d201:	51                   	push   ecx
c000d202:	52                   	push   edx
c000d203:	50                   	push   eax
c000d204:	53                   	push   ebx
c000d205:	e8 70 fb ff ff       	call   c000cd7a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d20a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d20e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d216:	83 c4 28             	add    esp,0x28
c000d219:	5b                   	pop    ebx
c000d21a:	e9 29 fc ff ff       	jmp    c000ce48 <VgaText::incrementCursor(bool)>
c000d21f:	90                   	nop

c000d220 <VgaText::isShowingCursor()>:
c000d220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d224:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d22a:	c3                   	ret    
c000d22b:	90                   	nop

c000d22c <VgaText::isBlinkDisabled()>:
c000d22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d230:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d236:	83 f0 01             	xor    eax,0x1
c000d239:	c3                   	ret    

c000d23a <VgaText::setCursorHeight(int)>:
c000d23a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d23e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d242:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d248:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d24f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d253:	e9 48 f9 ff ff       	jmp    c000cba0 <VgaText::showCursor(bool)>

c000d258 <VgaText::getCursorHeight()>:
c000d258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d262:	c3                   	ret    

c000d263 <setActiveTerminal(VgaText*)>:
c000d263:	53                   	push   ebx
c000d264:	83 ec 08             	sub    esp,0x8
c000d267:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d26b:	85 db                	test   ebx,ebx
c000d26d:	75 11                	jne    c000d280 <setActiveTerminal(VgaText*)+0x1d>
c000d26f:	c7 44 24 10 e0 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ce0
c000d277:	83 c4 08             	add    esp,0x8
c000d27a:	5b                   	pop    ebx
c000d27b:	e9 72 80 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c000d280:	50                   	push   eax
c000d281:	50                   	push   eax
c000d282:	53                   	push   ebx
c000d283:	68 ee 0c 02 c0       	push   0xc0020cee
c000d288:	e8 a6 1e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000d28d:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c000d292:	83 c4 10             	add    esp,0x10
c000d295:	85 c0                	test   eax,eax
c000d297:	74 0c                	je     c000d2a5 <setActiveTerminal(VgaText*)+0x42>
c000d299:	83 ec 0c             	sub    esp,0xc
c000d29c:	50                   	push   eax
c000d29d:	e8 e4 f8 ff ff       	call   c000cb86 <VgaText::updateCursor()>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	51                   	push   ecx
c000d2a6:	89 1d c4 40 02 c0    	mov    DWORD PTR ds:0xc00240c4,ebx
c000d2ac:	51                   	push   ecx
c000d2ad:	53                   	push   ebx
c000d2ae:	68 06 0d 02 c0       	push   0xc0020d06
c000d2b3:	e8 7b 1e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000d2b8:	83 c4 0c             	add    esp,0xc
c000d2bb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2c1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2c7:	53                   	push   ebx
c000d2c8:	e8 25 fb ff ff       	call   c000cdf2 <VgaText::setCursor(int, int)>
c000d2cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d2d0:	e8 57 ff ff ff       	call   c000d22c <VgaText::isBlinkDisabled()>
c000d2d5:	5a                   	pop    edx
c000d2d6:	59                   	pop    ecx
c000d2d7:	0f b6 c0             	movzx  eax,al
c000d2da:	50                   	push   eax
c000d2db:	53                   	push   ebx
c000d2dc:	e8 cf f8 ff ff       	call   c000cbb0 <VgaText::disableBlink(bool)>
c000d2e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d2e4:	e8 6f ff ff ff       	call   c000d258 <VgaText::getCursorHeight()>
c000d2e9:	5a                   	pop    edx
c000d2ea:	59                   	pop    ecx
c000d2eb:	50                   	push   eax
c000d2ec:	53                   	push   ebx
c000d2ed:	e8 48 ff ff ff       	call   c000d23a <VgaText::setCursorHeight(int)>
c000d2f2:	83 c4 10             	add    esp,0x10
c000d2f5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d2fc:	75 0a                	jne    c000d308 <setActiveTerminal(VgaText*)+0xa5>
c000d2fe:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d308:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d30c:	83 c4 08             	add    esp,0x8
c000d30f:	5b                   	pop    ebx
c000d310:	e9 1d f8 ff ff       	jmp    c000cb32 <VgaText::load()>

c000d315 <doTerminalCycle()>:
c000d315:	83 ec 18             	sub    esp,0x18
c000d318:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c000d31d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d323:	50                   	push   eax
c000d324:	a3 c0 40 02 c0       	mov    ds:0xc00240c0,eax
c000d329:	e8 35 ff ff ff       	call   c000d263 <setActiveTerminal(VgaText*)>
c000d32e:	83 c4 1c             	add    esp,0x1c
c000d331:	c3                   	ret    

c000d332 <VgaText::doUpdate()>:
c000d332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d336:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d33c:	85 c0                	test   eax,eax
c000d33e:	74 02                	je     c000d342 <VgaText::doUpdate()+0x10>
c000d340:	ff e0                	jmp    eax
c000d342:	c3                   	ret    
c000d343:	90                   	nop

c000d344 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d344:	55                   	push   ebp
c000d345:	57                   	push   edi
c000d346:	56                   	push   esi
c000d347:	53                   	push   ebx
c000d348:	83 ec 1c             	sub    esp,0x1c
c000d34b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d34f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d354:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d35b:	50                   	push   eax
c000d35c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d361:	50                   	push   eax
c000d362:	e8 5b f9 ff ff       	call   c000ccc2 <VgaText::combineColours(unsigned char, unsigned char)>
c000d367:	59                   	pop    ecx
c000d368:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d36b:	5b                   	pop    ebx
c000d36c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d374:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d37a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d37e:	0f b7 db             	movzx  ebx,bx
c000d381:	01 db                	add    ebx,ebx
c000d383:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d387:	01 fb                	add    ebx,edi
c000d389:	31 c0                	xor    eax,eax
c000d38b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d38e:	84 c9                	test   cl,cl
c000d390:	0f 84 3d 01 00 00    	je     c000d4d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d396:	80 f9 0d             	cmp    cl,0xd
c000d399:	75 0f                	jne    c000d3aa <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d39b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3a5:	e9 23 01 00 00       	jmp    c000d4cd <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d3aa:	80 f9 0a             	cmp    cl,0xa
c000d3ad:	75 5b                	jne    c000d40a <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d3af:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d3b5:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3bf:	8d 48 01             	lea    ecx,[eax+0x1]
c000d3c2:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d3c8:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d3ce:	75 12                	jne    c000d3e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d3d0:	83 ec 0c             	sub    esp,0xc
c000d3d3:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d3d9:	55                   	push   ebp
c000d3da:	e8 f5 f8 ff ff       	call   c000ccd4 <VgaText::scrollScreen()>
c000d3df:	83 c4 10             	add    esp,0x10
c000d3e2:	83 ec 0c             	sub    esp,0xc
c000d3e5:	55                   	push   ebp
c000d3e6:	e8 9b f7 ff ff       	call   c000cb86 <VgaText::updateCursor()>
c000d3eb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d3f3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	0f b7 db             	movzx  ebx,bx
c000d3ff:	01 db                	add    ebx,ebx
c000d401:	31 c0                	xor    eax,eax
c000d403:	01 fb                	add    ebx,edi
c000d405:	e9 c3 00 00 00       	jmp    c000d4cd <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d40a:	80 f9 08             	cmp    cl,0x8
c000d40d:	75 4e                	jne    c000d45d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d40f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d413:	50                   	push   eax
c000d414:	50                   	push   eax
c000d415:	6a 01                	push   0x1
c000d417:	55                   	push   ebp
c000d418:	e8 df fc ff ff       	call   c000d0fc <VgaText::decrementCursor(bool)>
c000d41d:	58                   	pop    eax
c000d41e:	5a                   	pop    edx
c000d41f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d425:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d42b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d431:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d437:	6a 20                	push   0x20
c000d439:	55                   	push   ebp
c000d43a:	e8 3b f9 ff ff       	call   c000cd7a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d43f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d447:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d44d:	83 c4 20             	add    esp,0x20
c000d450:	0f b7 db             	movzx  ebx,bx
c000d453:	01 db                	add    ebx,ebx
c000d455:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d459:	01 fb                	add    ebx,edi
c000d45b:	eb 70                	jmp    c000d4cd <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d45d:	50                   	push   eax
c000d45e:	50                   	push   eax
c000d45f:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d464:	50                   	push   eax
c000d465:	51                   	push   ecx
c000d466:	e8 fd f8 ff ff       	call   c000cd68 <VgaText::combineCharAndColour(char, unsigned char)>
c000d46b:	66 89 03             	mov    WORD PTR [ebx],ax
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	39 2d c4 40 02 c0    	cmp    DWORD PTR ds:0xc00240c4,ebp
c000d477:	75 2a                	jne    c000d4a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d479:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d47f:	85 c0                	test   eax,eax
c000d481:	74 20                	je     c000d4a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d483:	52                   	push   edx
c000d484:	52                   	push   edx
c000d485:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d48b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d491:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d499:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d49c:	51                   	push   ecx
c000d49d:	55                   	push   ebp
c000d49e:	ff d0                	call   eax
c000d4a0:	83 c4 20             	add    esp,0x20
c000d4a3:	50                   	push   eax
c000d4a4:	83 c3 02             	add    ebx,0x2
c000d4a7:	50                   	push   eax
c000d4a8:	6a 00                	push   0x0
c000d4aa:	55                   	push   ebp
c000d4ab:	e8 98 f9 ff ff       	call   c000ce48 <VgaText::incrementCursor(bool)>
c000d4b0:	83 c4 10             	add    esp,0x10
c000d4b3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d4ba:	75 0f                	jne    c000d4cb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4bc:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4c4:	0f b7 db             	movzx  ebx,bx
c000d4c7:	01 db                	add    ebx,ebx
c000d4c9:	01 fb                	add    ebx,edi
c000d4cb:	b0 01                	mov    al,0x1
c000d4cd:	46                   	inc    esi
c000d4ce:	e9 b8 fe ff ff       	jmp    c000d38b <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d4d3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d4d7:	83 ec 0c             	sub    esp,0xc
c000d4da:	55                   	push   ebp
c000d4db:	e8 a6 f6 ff ff       	call   c000cb86 <VgaText::updateCursor()>
c000d4e0:	83 c4 10             	add    esp,0x10
c000d4e3:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d4e7:	84 c0                	test   al,al
c000d4e9:	74 0c                	je     c000d4f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	55                   	push   ebp
c000d4ef:	e8 3e fe ff ff       	call   c000d332 <VgaText::doUpdate()>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d4fe:	83 c4 1c             	add    esp,0x1c
c000d501:	5b                   	pop    ebx
c000d502:	5e                   	pop    esi
c000d503:	5f                   	pop    edi
c000d504:	5d                   	pop    ebp
c000d505:	c3                   	ret    

c000d506 <VgaText::clearScreen()>:
c000d506:	57                   	push   edi
c000d507:	56                   	push   esi
c000d508:	31 f6                	xor    esi,esi
c000d50a:	53                   	push   ebx
c000d50b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d50f:	52                   	push   edx
c000d510:	6a 00                	push   0x0
c000d512:	6a 00                	push   0x0
c000d514:	53                   	push   ebx
c000d515:	e8 d8 f8 ff ff       	call   c000cdf2 <VgaText::setCursor(int, int)>
c000d51a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d521:	83 c4 10             	add    esp,0x10
c000d524:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d52a:	7e 26                	jle    c000d552 <VgaText::clearScreen()+0x4c>
c000d52c:	31 ff                	xor    edi,edi
c000d52e:	50                   	push   eax
c000d52f:	50                   	push   eax
c000d530:	56                   	push   esi
c000d531:	57                   	push   edi
c000d532:	47                   	inc    edi
c000d533:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d539:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d53f:	6a 20                	push   0x20
c000d541:	53                   	push   ebx
c000d542:	e8 33 f8 ff ff       	call   c000cd7a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d547:	83 c4 20             	add    esp,0x20
c000d54a:	83 ff 50             	cmp    edi,0x50
c000d54d:	75 df                	jne    c000d52e <VgaText::clearScreen()+0x28>
c000d54f:	46                   	inc    esi
c000d550:	eb d2                	jmp    c000d524 <VgaText::clearScreen()+0x1e>
c000d552:	83 ec 0c             	sub    esp,0xc
c000d555:	53                   	push   ebx
c000d556:	e8 d7 fd ff ff       	call   c000d332 <VgaText::doUpdate()>
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d565:	5b                   	pop    ebx
c000d566:	5e                   	pop    esi
c000d567:	5f                   	pop    edi
c000d568:	c3                   	ret    
c000d569:	90                   	nop

c000d56a <VgaText::putchar(char)>:
c000d56a:	56                   	push   esi
c000d56b:	53                   	push   ebx
c000d56c:	83 ec 14             	sub    esp,0x14
c000d56f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d573:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d577:	3c 5b                	cmp    al,0x5b
c000d579:	75 21                	jne    c000d59c <VgaText::putchar(char)+0x32>
c000d57b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d582:	74 28                	je     c000d5ac <VgaText::putchar(char)+0x42>
c000d584:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d58d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d597:	e9 e2 00 00 00       	jmp    c000d67e <VgaText::putchar(char)+0x114>
c000d59c:	3c 1b                	cmp    al,0x1b
c000d59e:	75 0c                	jne    c000d5ac <VgaText::putchar(char)+0x42>
c000d5a0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d5a7:	e9 d2 00 00 00       	jmp    c000d67e <VgaText::putchar(char)+0x114>
c000d5ac:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d5b2:	84 c9                	test   cl,cl
c000d5b4:	0f 84 ab 00 00 00    	je     c000d665 <VgaText::putchar(char)+0xfb>
c000d5ba:	8d 50 c0             	lea    edx,[eax-0x40]
c000d5bd:	80 fa 3e             	cmp    dl,0x3e
c000d5c0:	0f 87 82 00 00 00    	ja     c000d648 <VgaText::putchar(char)+0xde>
c000d5c6:	3c 6d                	cmp    al,0x6d
c000d5c8:	75 4d                	jne    c000d617 <VgaText::putchar(char)+0xad>
c000d5ca:	31 f6                	xor    esi,esi
c000d5cc:	31 d2                	xor    edx,edx
c000d5ce:	31 c0                	xor    eax,eax
c000d5d0:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d5d6:	7e 30                	jle    c000d608 <VgaText::putchar(char)+0x9e>
c000d5d8:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d5e0:	80 fa 3b             	cmp    dl,0x3b
c000d5e3:	75 17                	jne    c000d5fc <VgaText::putchar(char)+0x92>
c000d5e5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d5e9:	50                   	push   eax
c000d5ea:	53                   	push   ebx
c000d5eb:	e8 fa f5 ff ff       	call   c000cbea <VgaText::doANSI_SGR(int)>
c000d5f0:	59                   	pop    ecx
c000d5f1:	31 d2                	xor    edx,edx
c000d5f3:	58                   	pop    eax
c000d5f4:	31 c0                	xor    eax,eax
c000d5f6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d5fa:	eb 09                	jmp    c000d605 <VgaText::putchar(char)+0x9b>
c000d5fc:	6b c0 0a             	imul   eax,eax,0xa
c000d5ff:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d603:	88 ca                	mov    dl,cl
c000d605:	46                   	inc    esi
c000d606:	eb c8                	jmp    c000d5d0 <VgaText::putchar(char)+0x66>
c000d608:	84 d2                	test   dl,dl
c000d60a:	74 31                	je     c000d63d <VgaText::putchar(char)+0xd3>
c000d60c:	50                   	push   eax
c000d60d:	53                   	push   ebx
c000d60e:	e8 d7 f5 ff ff       	call   c000cbea <VgaText::doANSI_SGR(int)>
c000d613:	58                   	pop    eax
c000d614:	5a                   	pop    edx
c000d615:	eb 26                	jmp    c000d63d <VgaText::putchar(char)+0xd3>
c000d617:	3c 4a                	cmp    al,0x4a
c000d619:	75 22                	jne    c000d63d <VgaText::putchar(char)+0xd3>
c000d61b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d622:	75 19                	jne    c000d63d <VgaText::putchar(char)+0xd3>
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	53                   	push   ebx
c000d628:	e8 d9 fe ff ff       	call   c000d506 <VgaText::clearScreen()>
c000d62d:	83 c4 0c             	add    esp,0xc
c000d630:	6a 00                	push   0x0
c000d632:	6a 00                	push   0x0
c000d634:	53                   	push   ebx
c000d635:	e8 b8 f7 ff ff       	call   c000cdf2 <VgaText::setCursor(int, int)>
c000d63a:	83 c4 10             	add    esp,0x10
c000d63d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d646:	eb 36                	jmp    c000d67e <VgaText::putchar(char)+0x114>
c000d648:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d64e:	83 fa 0e             	cmp    edx,0xe
c000d651:	7f 2b                	jg     c000d67e <VgaText::putchar(char)+0x114>
c000d653:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d656:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d65c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d663:	eb 19                	jmp    c000d67e <VgaText::putchar(char)+0x114>
c000d665:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d66b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d671:	0f be c0             	movsx  eax,al
c000d674:	50                   	push   eax
c000d675:	53                   	push   ebx
c000d676:	e8 a9 fa ff ff       	call   c000d124 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	83 c4 14             	add    esp,0x14
c000d681:	5b                   	pop    ebx
c000d682:	5e                   	pop    esi
c000d683:	c3                   	ret    

c000d684 <VgaText::puts(char const*)>:
c000d684:	53                   	push   ebx
c000d685:	83 ec 08             	sub    esp,0x8
c000d688:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d68c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d68f:	84 c0                	test   al,al
c000d691:	74 12                	je     c000d6a5 <VgaText::puts(char const*)+0x21>
c000d693:	51                   	push   ecx
c000d694:	43                   	inc    ebx
c000d695:	51                   	push   ecx
c000d696:	50                   	push   eax
c000d697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69b:	e8 ca fe ff ff       	call   c000d56a <VgaText::putchar(char)>
c000d6a0:	83 c4 10             	add    esp,0x10
c000d6a3:	eb e7                	jmp    c000d68c <VgaText::puts(char const*)+0x8>
c000d6a5:	83 c4 08             	add    esp,0x8
c000d6a8:	5b                   	pop    ebx
c000d6a9:	c3                   	ret    

c000d6aa <VgaText::putx(unsigned int)>:
c000d6aa:	57                   	push   edi
c000d6ab:	b9 11 00 00 00       	mov    ecx,0x11
c000d6b0:	56                   	push   esi
c000d6b1:	be 22 0d 02 c0       	mov    esi,0xc0020d22
c000d6b6:	53                   	push   ebx
c000d6b7:	83 ec 20             	sub    esp,0x20
c000d6ba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d6be:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d6c2:	fc                   	cld    
c000d6c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6c5:	be 08 00 00 00       	mov    esi,0x8
c000d6ca:	50                   	push   eax
c000d6cb:	50                   	push   eax
c000d6cc:	89 d8                	mov    eax,ebx
c000d6ce:	c1 e8 1c             	shr    eax,0x1c
c000d6d1:	c1 e3 04             	shl    ebx,0x4
c000d6d4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d6d9:	50                   	push   eax
c000d6da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6de:	e8 87 fe ff ff       	call   c000d56a <VgaText::putchar(char)>
c000d6e3:	83 c4 10             	add    esp,0x10
c000d6e6:	4e                   	dec    esi
c000d6e7:	75 e1                	jne    c000d6ca <VgaText::putx(unsigned int)+0x20>
c000d6e9:	83 c4 20             	add    esp,0x20
c000d6ec:	5b                   	pop    ebx
c000d6ed:	5e                   	pop    esi
c000d6ee:	5f                   	pop    edi
c000d6ef:	c3                   	ret    

c000d6f0 <VgaText::VgaText(char const*)>:
c000d6f0:	57                   	push   edi
c000d6f1:	56                   	push   esi
c000d6f2:	53                   	push   ebx
c000d6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f7:	83 ec 08             	sub    esp,0x8
c000d6fa:	6a 00                	push   0x0
c000d6fc:	50                   	push   eax
c000d6fd:	e8 e0 05 00 00       	call   c000dce2 <UnixFile::UnixFile(int)>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	ba 88 0d 02 c0       	mov    edx,0xc0020d88
c000d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70e:	89 10                	mov    DWORD PTR [eax],edx
c000d710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d714:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d722:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d730:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d746:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d778:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d77e:	bb a0 40 02 c0       	mov    ebx,0xc00240a0
c000d783:	b8 08 00 00 00       	mov    eax,0x8
c000d788:	fc                   	cld    
c000d789:	89 d7                	mov    edi,edx
c000d78b:	89 de                	mov    esi,ebx
c000d78d:	89 c1                	mov    ecx,eax
c000d78f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d795:	05 1e 10 00 00       	add    eax,0x101e
c000d79a:	83 ec 08             	sub    esp,0x8
c000d79d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a1:	50                   	push   eax
c000d7a2:	e8 00 2f ff ff       	call   c00006a7 <strcpy>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ae:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7bc:	83 c0 0c             	add    eax,0xc
c000d7bf:	83 ec 04             	sub    esp,0x4
c000d7c2:	68 00 0f 00 00       	push   0xf00
c000d7c7:	6a 00                	push   0x0
c000d7c9:	50                   	push   eax
c000d7ca:	e8 39 2e ff ff       	call   c0000608 <memset>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	83 ec 04             	sub    esp,0x4
c000d7d5:	6a 00                	push   0x0
c000d7d7:	6a 07                	push   0x7
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	e8 c0 f4 ff ff       	call   c000cca2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	83 ec 08             	sub    esp,0x8
c000d7e8:	6a 02                	push   0x2
c000d7ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ee:	e8 47 fa ff ff       	call   c000d23a <VgaText::setCursorHeight(int)>
c000d7f3:	83 c4 10             	add    esp,0x10
c000d7f6:	83 ec 04             	sub    esp,0x4
c000d7f9:	6a 00                	push   0x0
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	e8 ec f5 ff ff       	call   c000cdf2 <VgaText::setCursor(int, int)>
c000d806:	83 c4 10             	add    esp,0x10
c000d809:	83 ec 08             	sub    esp,0x8
c000d80c:	6a 01                	push   0x1
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 89 f3 ff ff       	call   c000cba0 <VgaText::showCursor(bool)>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	83 ec 08             	sub    esp,0x8
c000d81d:	6a 01                	push   0x1
c000d81f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d823:	e8 88 f3 ff ff       	call   c000cbb0 <VgaText::disableBlink(bool)>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	83 ec 0c             	sub    esp,0xc
c000d82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d832:	e8 cf fc ff ff       	call   c000d506 <VgaText::clearScreen()>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d849:	05 9e 10 00 00       	add    eax,0x109e
c000d84e:	83 ec 04             	sub    esp,0x4
c000d851:	68 96 00 00 00       	push   0x96
c000d856:	6a 00                	push   0x0
c000d858:	50                   	push   eax
c000d859:	e8 aa 2d ff ff       	call   c0000608 <memset>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d865:	05 34 11 00 00       	add    eax,0x1134
c000d86a:	83 ec 04             	sub    esp,0x4
c000d86d:	68 2c 01 00 00       	push   0x12c
c000d872:	6a 00                	push   0x0
c000d874:	50                   	push   eax
c000d875:	e8 8e 2d ff ff       	call   c0000608 <memset>
c000d87a:	83 c4 10             	add    esp,0x10
c000d87d:	90                   	nop
c000d87e:	5b                   	pop    ebx
c000d87f:	5e                   	pop    esi
c000d880:	5f                   	pop    edi
c000d881:	c3                   	ret    

c000d882 <VgaText::receiveKey(unsigned char)>:
c000d882:	55                   	push   ebp
c000d883:	57                   	push   edi
c000d884:	56                   	push   esi
c000d885:	53                   	push   ebx
c000d886:	83 ec 1c             	sub    esp,0x1c
c000d889:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d88d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d891:	84 db                	test   bl,bl
c000d893:	0f 84 c9 00 00 00    	je     c000d962 <VgaText::receiveKey(unsigned char)+0xe0>
c000d899:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d89f:	80 fb 08             	cmp    bl,0x8
c000d8a2:	75 2c                	jne    c000d8d0 <VgaText::receiveKey(unsigned char)+0x4e>
c000d8a4:	83 ec 0c             	sub    esp,0xc
c000d8a7:	57                   	push   edi
c000d8a8:	e8 78 2d ff ff       	call   c0000625 <strlen>
c000d8ad:	83 c4 10             	add    esp,0x10
c000d8b0:	85 c0                	test   eax,eax
c000d8b2:	74 41                	je     c000d8f5 <VgaText::receiveKey(unsigned char)+0x73>
c000d8b4:	50                   	push   eax
c000d8b5:	50                   	push   eax
c000d8b6:	6a 08                	push   0x8
c000d8b8:	56                   	push   esi
c000d8b9:	e8 ac fc ff ff       	call   c000d56a <VgaText::putchar(char)>
c000d8be:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8c1:	e8 5f 2d ff ff       	call   c0000625 <strlen>
c000d8c6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d8ce:	eb 22                	jmp    c000d8f2 <VgaText::receiveKey(unsigned char)+0x70>
c000d8d0:	52                   	push   edx
c000d8d1:	52                   	push   edx
c000d8d2:	0f be c3             	movsx  eax,bl
c000d8d5:	50                   	push   eax
c000d8d6:	56                   	push   esi
c000d8d7:	e8 8e fc ff ff       	call   c000d56a <VgaText::putchar(char)>
c000d8dc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d8e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d8e5:	59                   	pop    ecx
c000d8e6:	5d                   	pop    ebp
c000d8e7:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d8eb:	50                   	push   eax
c000d8ec:	57                   	push   edi
c000d8ed:	e8 6c 2e ff ff       	call   c000075e <strcat>
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d8fc:	75 05                	jne    c000d903 <VgaText::receiveKey(unsigned char)+0x81>
c000d8fe:	80 fb 0a             	cmp    bl,0xa
c000d901:	75 53                	jne    c000d956 <VgaText::receiveKey(unsigned char)+0xd4>
c000d903:	83 ec 0c             	sub    esp,0xc
c000d906:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d90c:	53                   	push   ebx
c000d90d:	e8 13 2d ff ff       	call   c0000625 <strlen>
c000d912:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d915:	89 c5                	mov    ebp,eax
c000d917:	e8 09 2d ff ff       	call   c0000625 <strlen>
c000d91c:	83 c4 10             	add    esp,0x10
c000d91f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d923:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d928:	76 10                	jbe    c000d93a <VgaText::receiveKey(unsigned char)+0xb8>
c000d92a:	83 ec 0c             	sub    esp,0xc
c000d92d:	68 33 0d 02 c0       	push   0xc0020d33
c000d932:	e8 bb 79 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000d937:	83 c4 10             	add    esp,0x10
c000d93a:	50                   	push   eax
c000d93b:	50                   	push   eax
c000d93c:	57                   	push   edi
c000d93d:	53                   	push   ebx
c000d93e:	e8 1b 2e ff ff       	call   c000075e <strcat>
c000d943:	83 c4 0c             	add    esp,0xc
c000d946:	68 96 00 00 00       	push   0x96
c000d94b:	6a 00                	push   0x0
c000d94d:	57                   	push   edi
c000d94e:	e8 b5 2c ff ff       	call   c0000608 <memset>
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	83 ec 0c             	sub    esp,0xc
c000d959:	56                   	push   esi
c000d95a:	e8 d3 f9 ff ff       	call   c000d332 <VgaText::doUpdate()>
c000d95f:	83 c4 10             	add    esp,0x10
c000d962:	83 c4 1c             	add    esp,0x1c
c000d965:	5b                   	pop    ebx
c000d966:	5e                   	pop    esi
c000d967:	5f                   	pop    edi
c000d968:	5d                   	pop    ebp
c000d969:	c3                   	ret    

c000d96a <VgaText::write(unsigned long long, void*, int*)>:
c000d96a:	55                   	push   ebp
c000d96b:	57                   	push   edi
c000d96c:	56                   	push   esi
c000d96d:	53                   	push   ebx
c000d96e:	83 ec 0c             	sub    esp,0xc
c000d971:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d975:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d979:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d97d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d984:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d987:	39 eb                	cmp    ebx,ebp
c000d989:	74 13                	je     c000d99e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d98b:	50                   	push   eax
c000d98c:	43                   	inc    ebx
c000d98d:	50                   	push   eax
c000d98e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d992:	50                   	push   eax
c000d993:	56                   	push   esi
c000d994:	e8 d1 fb ff ff       	call   c000d56a <VgaText::putchar(char)>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	eb e9                	jmp    c000d987 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d99e:	83 ec 0c             	sub    esp,0xc
c000d9a1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d9a8:	56                   	push   esi
c000d9a9:	e8 84 f9 ff ff       	call   c000d332 <VgaText::doUpdate()>
c000d9ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d9b2:	89 38                	mov    DWORD PTR [eax],edi
c000d9b4:	83 c4 1c             	add    esp,0x1c
c000d9b7:	31 c0                	xor    eax,eax
c000d9b9:	5b                   	pop    ebx
c000d9ba:	5e                   	pop    esi
c000d9bb:	5f                   	pop    edi
c000d9bc:	5d                   	pop    ebp
c000d9bd:	c3                   	ret    

c000d9be <newTerminal(char*)>:
c000d9be:	83 ec 28             	sub    esp,0x28
c000d9c1:	68 60 12 00 00       	push   0x1260
c000d9c6:	e8 33 16 00 00       	call   c000effe <operator new(unsigned long)>
c000d9cb:	5a                   	pop    edx
c000d9cc:	59                   	pop    ecx
c000d9cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9d1:	50                   	push   eax
c000d9d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9d6:	e8 15 fd ff ff       	call   c000d6f0 <VgaText::VgaText(char const*)>
c000d9db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9df:	83 c4 2c             	add    esp,0x2c
c000d9e2:	c3                   	ret    
c000d9e3:	90                   	nop

c000d9e4 <TSS::TSS()>:
c000d9e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d9ef:	90                   	nop
c000d9f0:	c3                   	ret    
c000d9f1:	90                   	nop

c000d9f2 <TSS::setESP(unsigned long)>:
c000d9f2:	55                   	push   ebp
c000d9f3:	89 e5                	mov    ebp,esp
c000d9f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d9fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d9fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da01:	90                   	nop
c000da02:	5d                   	pop    ebp
c000da03:	c3                   	ret    

c000da04 <TSS::flush()>:
c000da04:	55                   	push   ebp
c000da05:	89 e5                	mov    ebp,esp
c000da07:	83 ec 10             	sub    esp,0x10
c000da0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000da0f:	83 c8 03             	or     eax,0x3
c000da12:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000da16:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000da1a:	66 89 d0             	mov    ax,dx
c000da1d:	0f 00 d8             	ltr    ax
c000da20:	90                   	nop
c000da21:	c9                   	leave  
c000da22:	c3                   	ret    
c000da23:	90                   	nop

c000da24 <TSS::setup(unsigned long, unsigned long)>:
c000da24:	55                   	push   ebp
c000da25:	89 e5                	mov    ebp,esp
c000da27:	53                   	push   ebx
c000da28:	83 ec 14             	sub    esp,0x14
c000da2b:	83 ec 0c             	sub    esp,0xc
c000da2e:	6a 68                	push   0x68
c000da30:	e8 cc e4 ff ff       	call   c000bf01 <malloc>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	89 c2                	mov    edx,eax
c000da3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da46:	83 ec 04             	sub    esp,0x4
c000da49:	6a 68                	push   0x68
c000da4b:	6a 00                	push   0x0
c000da4d:	50                   	push   eax
c000da4e:	e8 b5 2b ff ff       	call   c0000608 <memset>
c000da53:	83 c4 10             	add    esp,0x10
c000da56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da5c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000da62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da68:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000da6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000da77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da80:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000da86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da8c:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000da92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da98:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000da9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daa4:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000daaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dab0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dab3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dab9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dabc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dabf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dac5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dac8:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dacf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad2:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dad5:	e8 bb 15 01 00       	call   c001f095 <CPU::readCR3()>
c000dada:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dadd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae3:	83 ec 08             	sub    esp,0x8
c000dae6:	50                   	push   eax
c000dae7:	8d 45 f0             	lea    eax,[ebp-0x10]
c000daea:	50                   	push   eax
c000daeb:	e8 e8 db ff ff       	call   c000b6d8 <GDTEntry::setBase(unsigned int)>
c000daf0:	83 c4 10             	add    esp,0x10
c000daf3:	83 ec 08             	sub    esp,0x8
c000daf6:	6a 68                	push   0x68
c000daf8:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dafb:	50                   	push   eax
c000dafc:	e8 f3 db ff ff       	call   c000b6f4 <GDTEntry::setLimit(unsigned int)>
c000db01:	83 c4 10             	add    esp,0x10
c000db04:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000db08:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db0b:	83 e0 0f             	and    eax,0xf
c000db0e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db11:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db14:	83 c8 40             	or     eax,0x40
c000db17:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db1a:	e8 67 66 00 00       	call   c0014186 <thisCPU()>
c000db1f:	05 78 01 00 00       	add    eax,0x178
c000db24:	83 ec 04             	sub    esp,0x4
c000db27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000db2a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000db2d:	50                   	push   eax
c000db2e:	e8 f5 db ff ff       	call   c000b728 <GDT::addEntry(GDTEntry)>
c000db33:	83 c4 10             	add    esp,0x10
c000db36:	89 c2                	mov    edx,eax
c000db38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db3b:	89 10                	mov    DWORD PTR [eax],edx
c000db3d:	e8 44 66 00 00       	call   c0014186 <thisCPU()>
c000db42:	05 78 01 00 00       	add    eax,0x178
c000db47:	83 ec 0c             	sub    esp,0xc
c000db4a:	50                   	push   eax
c000db4b:	e8 1c dc ff ff       	call   c000b76c <GDT::flush()>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db56:	8b 00                	mov    eax,DWORD PTR [eax]
c000db58:	83 ec 08             	sub    esp,0x8
c000db5b:	50                   	push   eax
c000db5c:	68 9c 0d 02 c0       	push   0xc0020d9c
c000db61:	e8 cd 15 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000db66:	83 c4 10             	add    esp,0x10
c000db69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000db6e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000db71:	c9                   	leave  
c000db72:	c3                   	ret    
c000db73:	90                   	nop

c000db74 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000db74:	55                   	push   ebp
c000db75:	57                   	push   edi
c000db76:	56                   	push   esi
c000db77:	53                   	push   ebx
c000db78:	83 ec 0c             	sub    esp,0xc
c000db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000db83:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000db87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000db92:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000db97:	75 08                	jne    c000dba1 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000db99:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000db9f:	eb 5e                	jmp    c000dbff <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dba1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dba6:	75 3d                	jne    c000dbe5 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	68 ba 0d 02 c0       	push   0xc0020dba
c000dbb0:	e8 7e 15 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000dbb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dbbd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dbc3:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbc5:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dbc9:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dbcd:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dbd1:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dbd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbd9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dbdc:	83 c4 1c             	add    esp,0x1c
c000dbdf:	5b                   	pop    ebx
c000dbe0:	5e                   	pop    esi
c000dbe1:	5f                   	pop    edi
c000dbe2:	5d                   	pop    ebp
c000dbe3:	ff e0                	jmp    eax
c000dbe5:	89 c2                	mov    edx,eax
c000dbe7:	83 e2 fd             	and    edx,0xfffffffd
c000dbea:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dbf0:	74 a7                	je     c000db99 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dbf2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dbf7:	83 e0 ef             	and    eax,0xffffffef
c000dbfa:	83 f8 08             	cmp    eax,0x8
c000dbfd:	76 9a                	jbe    c000db99 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dbff:	83 c4 0c             	add    esp,0xc
c000dc02:	31 c0                	xor    eax,eax
c000dc04:	5b                   	pop    ebx
c000dc05:	5e                   	pop    esi
c000dc06:	5f                   	pop    edi
c000dc07:	5d                   	pop    ebp
c000dc08:	c3                   	ret    
c000dc09:	90                   	nop

c000dc0a <ReservedFilename::isAtty()>:
c000dc0a:	83 ec 18             	sub    esp,0x18
c000dc0d:	68 c7 0d 02 c0       	push   0xc0020dc7
c000dc12:	e8 1c 15 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc1e:	31 c0                	xor    eax,eax
c000dc20:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dc27:	75 12                	jne    c000dc3b <ReservedFilename::isAtty()+0x31>
c000dc29:	83 ec 0c             	sub    esp,0xc
c000dc2c:	68 dd 0d 02 c0       	push   0xc0020ddd
c000dc31:	e8 fd 14 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000dc36:	83 c4 10             	add    esp,0x10
c000dc39:	b0 01                	mov    al,0x1
c000dc3b:	83 c4 0c             	add    esp,0xc
c000dc3e:	c3                   	ret    
c000dc3f:	90                   	nop

c000dc40 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dc40:	55                   	push   ebp
c000dc41:	57                   	push   edi
c000dc42:	56                   	push   esi
c000dc43:	53                   	push   ebx
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc4f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc53:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc5a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc5e:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc63:	75 08                	jne    c000dc6d <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dc65:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc6b:	eb 63                	jmp    c000dcd0 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dc6d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc72:	75 3d                	jne    c000dcb1 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dc74:	83 ec 0c             	sub    esp,0xc
c000dc77:	68 f0 0d 02 c0       	push   0xc0020df0
c000dc7c:	e8 b2 14 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000dc81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc86:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc89:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc8f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc91:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dc95:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dc99:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc9d:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dca1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dca5:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dca8:	83 c4 1c             	add    esp,0x1c
c000dcab:	5b                   	pop    ebx
c000dcac:	5e                   	pop    esi
c000dcad:	5f                   	pop    edi
c000dcae:	5d                   	pop    ebp
c000dcaf:	ff e0                	jmp    eax
c000dcb1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcb6:	75 04                	jne    c000dcbc <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dcb8:	89 33                	mov    DWORD PTR [ebx],esi
c000dcba:	eb 14                	jmp    c000dcd0 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dcbc:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dcc1:	74 a2                	je     c000dc65 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dcc3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcc8:	83 e0 ef             	and    eax,0xffffffef
c000dccb:	83 f8 08             	cmp    eax,0x8
c000dcce:	76 95                	jbe    c000dc65 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dcd0:	83 c4 0c             	add    esp,0xc
c000dcd3:	31 c0                	xor    eax,eax
c000dcd5:	5b                   	pop    ebx
c000dcd6:	5e                   	pop    esi
c000dcd7:	5f                   	pop    edi
c000dcd8:	5d                   	pop    ebp
c000dcd9:	c3                   	ret    

c000dcda <UnixFile::getFileDescriptor()>:
c000dcda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dce1:	c3                   	ret    

c000dce2 <UnixFile::UnixFile(int)>:
c000dce2:	53                   	push   ebx
c000dce3:	83 ec 18             	sub    esp,0x18
c000dce6:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c000dceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcef:	89 10                	mov    DWORD PTR [eax],edx
c000dcf1:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dcf9:	0f 8f 4d 01 00 00    	jg     c000de4c <UnixFile::UnixFile(int)+0x16a>
c000dcff:	a1 a0 34 02 c0       	mov    eax,ds:0xc00234a0
c000dd04:	8d 50 01             	lea    edx,[eax+0x1]
c000dd07:	89 15 a0 34 02 c0    	mov    DWORD PTR ds:0xc00234a0,edx
c000dd0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd11:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd14:	83 ec 08             	sub    esp,0x8
c000dd17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd1b:	68 58 41 02 c0       	push   0xc0024158
c000dd20:	e8 e5 13 01 00       	call   c001f10a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd25:	83 c4 10             	add    esp,0x10
c000dd28:	a0 54 41 02 c0       	mov    al,ds:0xc0024154
c000dd2d:	83 f0 01             	xor    eax,0x1
c000dd30:	84 c0                	test   al,al
c000dd32:	0f 84 15 01 00 00    	je     c000de4d <UnixFile::UnixFile(int)+0x16b>
c000dd38:	c6 05 54 41 02 c0 01 	mov    BYTE PTR ds:0xc0024154,0x1
c000dd3f:	83 ec 0c             	sub    esp,0xc
c000dd42:	6a 0c                	push   0xc
c000dd44:	e8 b5 12 00 00       	call   c000effe <operator new(unsigned long)>
c000dd49:	83 c4 10             	add    esp,0x10
c000dd4c:	89 c3                	mov    ebx,eax
c000dd4e:	83 ec 08             	sub    esp,0x8
c000dd51:	68 03 ff ff 0f       	push   0xfffff03
c000dd56:	53                   	push   ebx
c000dd57:	e8 f6 00 00 00       	call   c000de52 <ReservedFilename::ReservedFilename(int)>
c000dd5c:	83 c4 10             	add    esp,0x10
c000dd5f:	89 1d 4c 41 02 c0    	mov    DWORD PTR ds:0xc002414c,ebx
c000dd65:	83 ec 0c             	sub    esp,0xc
c000dd68:	6a 0c                	push   0xc
c000dd6a:	e8 8f 12 00 00       	call   c000effe <operator new(unsigned long)>
c000dd6f:	83 c4 10             	add    esp,0x10
c000dd72:	89 c3                	mov    ebx,eax
c000dd74:	83 ec 08             	sub    esp,0x8
c000dd77:	68 01 ff ff 0f       	push   0xfffff01
c000dd7c:	53                   	push   ebx
c000dd7d:	e8 d0 00 00 00       	call   c000de52 <ReservedFilename::ReservedFilename(int)>
c000dd82:	83 c4 10             	add    esp,0x10
c000dd85:	89 1d 50 41 02 c0    	mov    DWORD PTR ds:0xc0024150,ebx
c000dd8b:	83 ec 0c             	sub    esp,0xc
c000dd8e:	6a 0c                	push   0xc
c000dd90:	e8 69 12 00 00       	call   c000effe <operator new(unsigned long)>
c000dd95:	83 c4 10             	add    esp,0x10
c000dd98:	89 c3                	mov    ebx,eax
c000dd9a:	83 ec 08             	sub    esp,0x8
c000dd9d:	68 00 ff ff 0f       	push   0xfffff00
c000dda2:	53                   	push   ebx
c000dda3:	e8 aa 00 00 00       	call   c000de52 <ReservedFilename::ReservedFilename(int)>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	89 1d 44 41 02 c0    	mov    DWORD PTR ds:0xc0024144,ebx
c000ddb1:	83 ec 0c             	sub    esp,0xc
c000ddb4:	6a 0c                	push   0xc
c000ddb6:	e8 43 12 00 00       	call   c000effe <operator new(unsigned long)>
c000ddbb:	83 c4 10             	add    esp,0x10
c000ddbe:	89 c3                	mov    ebx,eax
c000ddc0:	83 ec 08             	sub    esp,0x8
c000ddc3:	68 02 ff ff 0f       	push   0xfffff02
c000ddc8:	53                   	push   ebx
c000ddc9:	e8 84 00 00 00       	call   c000de52 <ReservedFilename::ReservedFilename(int)>
c000ddce:	83 c4 10             	add    esp,0x10
c000ddd1:	89 1d 48 41 02 c0    	mov    DWORD PTR ds:0xc0024148,ebx
c000ddd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dddf:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dde4:	7f 67                	jg     c000de4d <UnixFile::UnixFile(int)+0x16b>
c000dde6:	83 ec 0c             	sub    esp,0xc
c000dde9:	6a 0c                	push   0xc
c000ddeb:	e8 0e 12 00 00       	call   c000effe <operator new(unsigned long)>
c000ddf0:	83 c4 10             	add    esp,0x10
c000ddf3:	89 c3                	mov    ebx,eax
c000ddf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddf9:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ddfe:	83 ec 08             	sub    esp,0x8
c000de01:	50                   	push   eax
c000de02:	53                   	push   ebx
c000de03:	e8 4a 00 00 00       	call   c000de52 <ReservedFilename::ReservedFilename(int)>
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de0f:	89 1c 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],ebx
c000de16:	83 ec 0c             	sub    esp,0xc
c000de19:	6a 0c                	push   0xc
c000de1b:	e8 de 11 00 00       	call   c000effe <operator new(unsigned long)>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 c3                	mov    ebx,eax
c000de25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de29:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de2e:	83 ec 08             	sub    esp,0x8
c000de31:	50                   	push   eax
c000de32:	53                   	push   ebx
c000de33:	e8 1a 00 00 00       	call   c000de52 <ReservedFilename::ReservedFilename(int)>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de3f:	89 1c 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],ebx
c000de46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de4a:	eb 93                	jmp    c000dddf <UnixFile::UnixFile(int)+0xfd>
c000de4c:	90                   	nop
c000de4d:	83 c4 18             	add    esp,0x18
c000de50:	5b                   	pop    ebx
c000de51:	c3                   	ret    

c000de52 <ReservedFilename::ReservedFilename(int)>:
c000de52:	83 ec 0c             	sub    esp,0xc
c000de55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de59:	83 ec 08             	sub    esp,0x8
c000de5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de60:	50                   	push   eax
c000de61:	e8 7c fe ff ff       	call   c000dce2 <UnixFile::UnixFile(int)>
c000de66:	83 c4 10             	add    esp,0x10
c000de69:	ba 28 0f 02 c0       	mov    edx,0xc0020f28
c000de6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de72:	89 10                	mov    DWORD PTR [eax],edx
c000de74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000de7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000de7f:	90                   	nop
c000de80:	83 c4 0c             	add    esp,0xc
c000de83:	c3                   	ret    

c000de84 <UnixFile::~UnixFile()>:
c000de84:	83 ec 1c             	sub    esp,0x1c
c000de87:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c000de8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de90:	89 10                	mov    DWORD PTR [eax],edx
c000de92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de99:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000de9e:	7f 73                	jg     c000df13 <UnixFile::~UnixFile()+0x8f>
c000dea0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dea8:	83 ec 0c             	sub    esp,0xc
c000deab:	68 58 41 02 c0       	push   0xc0024158
c000deb0:	e8 29 13 01 00       	call   c001f1de <LinkedList<UnixFile>::getFirstElement()>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000debc:	83 ec 0c             	sub    esp,0xc
c000debf:	68 58 41 02 c0       	push   0xc0024158
c000dec4:	e8 1d 13 01 00       	call   c001f1e6 <LinkedList<UnixFile>::removeFirst()>
c000dec9:	83 c4 10             	add    esp,0x10
c000decc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ded0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ded4:	74 40                	je     c000df16 <UnixFile::~UnixFile()+0x92>
c000ded6:	83 ec 08             	sub    esp,0x8
c000ded9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dedd:	68 58 41 02 c0       	push   0xc0024158
c000dee2:	e8 23 12 01 00       	call   c001f10a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deee:	8d 50 01             	lea    edx,[eax+0x1]
c000def1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000def5:	3d 88 13 00 00       	cmp    eax,0x1388
c000defa:	0f 94 c0             	sete   al
c000defd:	84 c0                	test   al,al
c000deff:	74 a7                	je     c000dea8 <UnixFile::~UnixFile()+0x24>
c000df01:	83 ec 0c             	sub    esp,0xc
c000df04:	68 e4 0e 02 c0       	push   0xc0020ee4
c000df09:	e8 e4 73 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	eb 95                	jmp    c000dea8 <UnixFile::~UnixFile()+0x24>
c000df13:	90                   	nop
c000df14:	eb 01                	jmp    c000df17 <UnixFile::~UnixFile()+0x93>
c000df16:	90                   	nop
c000df17:	90                   	nop
c000df18:	83 c4 1c             	add    esp,0x1c
c000df1b:	c3                   	ret    

c000df1c <UnixFile::~UnixFile()>:
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	83 ec 0c             	sub    esp,0xc
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	e8 59 ff ff ff       	call   c000de84 <UnixFile::~UnixFile()>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	83 ec 08             	sub    esp,0x8
c000df31:	6a 0c                	push   0xc
c000df33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df37:	e8 d1 10 00 00       	call   c000f00d <operator delete(void*, unsigned long)>
c000df3c:	83 c4 10             	add    esp,0x10
c000df3f:	83 c4 0c             	add    esp,0xc
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <ReservedFilename::~ReservedFilename()>:
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	ba 28 0f 02 c0       	mov    edx,0xc0020f28
c000df4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df50:	89 10                	mov    DWORD PTR [eax],edx
c000df52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df56:	83 ec 0c             	sub    esp,0xc
c000df59:	50                   	push   eax
c000df5a:	e8 25 ff ff ff       	call   c000de84 <UnixFile::~UnixFile()>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	90                   	nop
c000df63:	83 c4 0c             	add    esp,0xc
c000df66:	c3                   	ret    
c000df67:	90                   	nop

c000df68 <ReservedFilename::~ReservedFilename()>:
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	83 ec 0c             	sub    esp,0xc
c000df6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df72:	e8 cd ff ff ff       	call   c000df44 <ReservedFilename::~ReservedFilename()>
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	83 ec 08             	sub    esp,0x8
c000df7d:	6a 0c                	push   0xc
c000df7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df83:	e8 85 10 00 00       	call   c000f00d <operator delete(void*, unsigned long)>
c000df88:	83 c4 10             	add    esp,0x10
c000df8b:	83 c4 0c             	add    esp,0xc
c000df8e:	c3                   	ret    

c000df8f <getFromFileDescriptor(int)>:
c000df8f:	53                   	push   ebx
c000df90:	83 ec 08             	sub    esp,0x8
c000df93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df97:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000df9d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfa3:	7f 33                	jg     c000dfd8 <getFromFileDescriptor(int)+0x49>
c000dfa5:	83 ec 0c             	sub    esp,0xc
c000dfa8:	68 58 41 02 c0       	push   0xc0024158
c000dfad:	e8 2c 12 01 00       	call   c001f1de <LinkedList<UnixFile>::getFirstElement()>
c000dfb2:	83 c4 10             	add    esp,0x10
c000dfb5:	85 c0                	test   eax,eax
c000dfb7:	75 07                	jne    c000dfc0 <getFromFileDescriptor(int)+0x31>
c000dfb9:	31 c0                	xor    eax,eax
c000dfbb:	e9 98 00 00 00       	jmp    c000e058 <getFromFileDescriptor(int)+0xc9>
c000dfc0:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dfc3:	0f 84 8f 00 00 00    	je     c000e058 <getFromFileDescriptor(int)+0xc9>
c000dfc9:	52                   	push   edx
c000dfca:	52                   	push   edx
c000dfcb:	50                   	push   eax
c000dfcc:	68 58 41 02 c0       	push   0xc0024158
c000dfd1:	e8 b2 12 01 00       	call   c001f288 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dfd6:	eb da                	jmp    c000dfb2 <getFromFileDescriptor(int)+0x23>
c000dfd8:	83 ec 0c             	sub    esp,0xc
c000dfdb:	68 fd 0d 02 c0       	push   0xc0020dfd
c000dfe0:	e8 4e 11 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000dfe5:	83 c4 10             	add    esp,0x10
c000dfe8:	a1 4c 41 02 c0       	mov    eax,ds:0xc002414c
c000dfed:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dff3:	74 63                	je     c000e058 <getFromFileDescriptor(int)+0xc9>
c000dff5:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dffb:	75 17                	jne    c000e014 <getFromFileDescriptor(int)+0x85>
c000dffd:	83 ec 0c             	sub    esp,0xc
c000e000:	68 24 0e 02 c0       	push   0xc0020e24
c000e005:	e8 29 11 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e00a:	a1 50 41 02 c0       	mov    eax,ds:0xc0024150
c000e00f:	83 c4 10             	add    esp,0x10
c000e012:	eb 44                	jmp    c000e058 <getFromFileDescriptor(int)+0xc9>
c000e014:	a1 48 41 02 c0       	mov    eax,ds:0xc0024148
c000e019:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e01f:	74 37                	je     c000e058 <getFromFileDescriptor(int)+0xc9>
c000e021:	a1 44 41 02 c0       	mov    eax,ds:0xc0024144
c000e026:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e02c:	74 2a                	je     c000e058 <getFromFileDescriptor(int)+0xc9>
c000e02e:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e034:	83 f8 08             	cmp    eax,0x8
c000e037:	77 09                	ja     c000e042 <getFromFileDescriptor(int)+0xb3>
c000e039:	8b 04 85 20 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbee0]
c000e040:	eb 16                	jmp    c000e058 <getFromFileDescriptor(int)+0xc9>
c000e042:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e048:	83 fb 08             	cmp    ebx,0x8
c000e04b:	0f 87 68 ff ff ff    	ja     c000dfb9 <getFromFileDescriptor(int)+0x2a>
c000e051:	8b 04 9d e0 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf20]
c000e058:	83 c4 08             	add    esp,0x8
c000e05b:	5b                   	pop    ebx
c000e05c:	c3                   	ret    

c000e05d <__static_initialization_and_destruction_0(int, int)>:
c000e05d:	83 ec 0c             	sub    esp,0xc
c000e060:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e065:	75 34                	jne    c000e09b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e067:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e06f:	75 2a                	jne    c000e09b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e071:	83 ec 0c             	sub    esp,0xc
c000e074:	68 58 41 02 c0       	push   0xc0024158
c000e079:	e8 34 10 01 00       	call   c001f0b2 <LinkedList<UnixFile>::LinkedList()>
c000e07e:	83 c4 10             	add    esp,0x10
c000e081:	83 ec 04             	sub    esp,0x4
c000e084:	68 28 34 02 c0       	push   0xc0023428
c000e089:	68 58 41 02 c0       	push   0xc0024158
c000e08e:	68 b0 f0 01 c0       	push   0xc001f0b0
c000e093:	e8 f1 0e 00 00       	call   c000ef89 <__cxa_atexit>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	90                   	nop
c000e09c:	83 c4 0c             	add    esp,0xc
c000e09f:	c3                   	ret    

c000e0a0 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	83 ec 08             	sub    esp,0x8
c000e0a6:	68 ff ff 00 00       	push   0xffff
c000e0ab:	6a 01                	push   0x1
c000e0ad:	e8 ab ff ff ff       	call   c000e05d <__static_initialization_and_destruction_0(int, int)>
c000e0b2:	83 c4 10             	add    esp,0x10
c000e0b5:	83 c4 0c             	add    esp,0xc
c000e0b8:	c3                   	ret    
c000e0b9:	90                   	nop

c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0ba:	53                   	push   ebx
c000e0bb:	8b 15 a8 34 02 c0    	mov    edx,DWORD PTR ds:0xc00234a8
c000e0c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0c9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0cf:	89 c8                	mov    eax,ecx
c000e0d1:	d1 e8                	shr    eax,1
c000e0d3:	01 d0                	add    eax,edx
c000e0d5:	83 e1 01             	and    ecx,0x1
c000e0d8:	8a 10                	mov    dl,BYTE PTR [eax]
c000e0da:	75 09                	jne    c000e0e5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e0dc:	83 e2 f0             	and    edx,0xfffffff0
c000e0df:	09 da                	or     edx,ebx
c000e0e1:	88 10                	mov    BYTE PTR [eax],dl
c000e0e3:	5b                   	pop    ebx
c000e0e4:	c3                   	ret    
c000e0e5:	c1 e3 04             	shl    ebx,0x4
c000e0e8:	83 e2 0f             	and    edx,0xf
c000e0eb:	09 da                	or     edx,ebx
c000e0ed:	88 10                	mov    BYTE PTR [eax],dl
c000e0ef:	5b                   	pop    ebx
c000e0f0:	c3                   	ret    

c000e0f1 <Virt::getPageState(unsigned long)>:
c000e0f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0f5:	8b 0d a8 34 02 c0    	mov    ecx,DWORD PTR ds:0xc00234a8
c000e0fb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e101:	89 d0                	mov    eax,edx
c000e103:	d1 e8                	shr    eax,1
c000e105:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e108:	88 c8                	mov    al,cl
c000e10a:	c0 e8 04             	shr    al,0x4
c000e10d:	83 e2 01             	and    edx,0x1
c000e110:	75 05                	jne    c000e117 <Virt::getPageState(unsigned long)+0x26>
c000e112:	88 c8                	mov    al,cl
c000e114:	83 e0 0f             	and    eax,0xf
c000e117:	c3                   	ret    

c000e118 <Virt::allocateKernelVirtualPages(int)>:
c000e118:	55                   	push   ebp
c000e119:	31 ed                	xor    ebp,ebp
c000e11b:	57                   	push   edi
c000e11c:	56                   	push   esi
c000e11d:	53                   	push   ebx
c000e11e:	31 db                	xor    ebx,ebx
c000e120:	83 ec 1c             	sub    esp,0x1c
c000e123:	8b 3d a4 34 02 c0    	mov    edi,DWORD PTR ds:0xc00234a4
c000e129:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e12d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e132:	57                   	push   edi
c000e133:	e8 b9 ff ff ff       	call   c000e0f1 <Virt::getPageState(unsigned long)>
c000e138:	5a                   	pop    edx
c000e139:	84 c0                	test   al,al
c000e13b:	75 3a                	jne    c000e177 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e13d:	85 db                	test   ebx,ebx
c000e13f:	75 02                	jne    c000e143 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e141:	89 fd                	mov    ebp,edi
c000e143:	43                   	inc    ebx
c000e144:	39 f3                	cmp    ebx,esi
c000e146:	74 5a                	je     c000e1a2 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e148:	47                   	inc    edi
c000e149:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e14f:	76 31                	jbe    c000e182 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e151:	c7 05 a4 34 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00234a4,0xc8000
c000e15b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e160:	75 28                	jne    c000e18a <Virt::allocateKernelVirtualPages(int)+0x72>
c000e162:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e167:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e16c:	57                   	push   edi
c000e16d:	e8 7f ff ff ff       	call   c000e0f1 <Virt::getPageState(unsigned long)>
c000e172:	5a                   	pop    edx
c000e173:	84 c0                	test   al,al
c000e175:	74 c6                	je     c000e13d <Virt::allocateKernelVirtualPages(int)+0x25>
c000e177:	47                   	inc    edi
c000e178:	31 db                	xor    ebx,ebx
c000e17a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e180:	77 cf                	ja     c000e151 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e182:	89 3d a4 34 02 c0    	mov    DWORD PTR ds:0xc00234a4,edi
c000e188:	eb a8                	jmp    c000e132 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e18a:	83 ec 0c             	sub    esp,0xc
c000e18d:	68 3c 0f 02 c0       	push   0xc0020f3c
c000e192:	e8 5b 71 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e197:	8b 3d a4 34 02 c0    	mov    edi,DWORD PTR ds:0xc00234a4
c000e19d:	83 c4 10             	add    esp,0x10
c000e1a0:	eb 90                	jmp    c000e132 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1a2:	89 2d a4 34 02 c0    	mov    DWORD PTR ds:0xc00234a4,ebp
c000e1a8:	4b                   	dec    ebx
c000e1a9:	74 5f                	je     c000e20a <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1ab:	85 f6                	test   esi,esi
c000e1ad:	74 3d                	je     c000e1ec <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1af:	89 e8                	mov    eax,ebp
c000e1b1:	31 db                	xor    ebx,ebx
c000e1b3:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1b6:	eb 14                	jmp    c000e1cc <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1b8:	6a 01                	push   0x1
c000e1ba:	43                   	inc    ebx
c000e1bb:	50                   	push   eax
c000e1bc:	e8 f9 fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1c1:	58                   	pop    eax
c000e1c2:	39 f3                	cmp    ebx,esi
c000e1c4:	5a                   	pop    edx
c000e1c5:	74 25                	je     c000e1ec <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1c7:	a1 a4 34 02 c0       	mov    eax,ds:0xc00234a4
c000e1cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e1cf:	85 db                	test   ebx,ebx
c000e1d1:	89 15 a4 34 02 c0    	mov    DWORD PTR ds:0xc00234a4,edx
c000e1d7:	74 20                	je     c000e1f9 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1d9:	39 df                	cmp    edi,ebx
c000e1db:	75 db                	jne    c000e1b8 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e1dd:	6a 03                	push   0x3
c000e1df:	43                   	inc    ebx
c000e1e0:	50                   	push   eax
c000e1e1:	e8 d4 fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e6:	59                   	pop    ecx
c000e1e7:	39 f3                	cmp    ebx,esi
c000e1e9:	58                   	pop    eax
c000e1ea:	75 db                	jne    c000e1c7 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e1ec:	83 c4 1c             	add    esp,0x1c
c000e1ef:	89 e8                	mov    eax,ebp
c000e1f1:	c1 e0 0c             	shl    eax,0xc
c000e1f4:	5b                   	pop    ebx
c000e1f5:	5e                   	pop    esi
c000e1f6:	5f                   	pop    edi
c000e1f7:	5d                   	pop    ebp
c000e1f8:	c3                   	ret    
c000e1f9:	6a 02                	push   0x2
c000e1fb:	bb 01 00 00 00       	mov    ebx,0x1
c000e200:	50                   	push   eax
c000e201:	e8 b4 fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e206:	58                   	pop    eax
c000e207:	5a                   	pop    edx
c000e208:	eb bd                	jmp    c000e1c7 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e20a:	6a 04                	push   0x4
c000e20c:	8d 45 01             	lea    eax,[ebp+0x1]
c000e20f:	55                   	push   ebp
c000e210:	a3 a4 34 02 c0       	mov    ds:0xc00234a4,eax
c000e215:	e8 a0 fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e21a:	59                   	pop    ecx
c000e21b:	5b                   	pop    ebx
c000e21c:	89 e8                	mov    eax,ebp
c000e21e:	c1 e0 0c             	shl    eax,0xc
c000e221:	83 c4 1c             	add    esp,0x1c
c000e224:	5b                   	pop    ebx
c000e225:	5e                   	pop    esi
c000e226:	5f                   	pop    edi
c000e227:	5d                   	pop    ebp
c000e228:	c3                   	ret    

c000e229 <Virt::virtualMemorySetup()>:
c000e229:	53                   	push   ebx
c000e22a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e22f:	83 ec 08             	sub    esp,0x8
c000e232:	6a 0f                	push   0xf
c000e234:	53                   	push   ebx
c000e235:	43                   	inc    ebx
c000e236:	e8 7f fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e23b:	59                   	pop    ecx
c000e23c:	58                   	pop    eax
c000e23d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e243:	75 ed                	jne    c000e232 <Virt::virtualMemorySetup()+0x9>
c000e245:	50                   	push   eax
c000e246:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e24b:	50                   	push   eax
c000e24c:	68 00 00 00 c8       	push   0xc8000000
c000e251:	68 c3 10 02 c0       	push   0xc00210c3
c000e256:	e8 d8 0e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e25b:	58                   	pop    eax
c000e25c:	5a                   	pop    edx
c000e25d:	68 00 f0 ff ef       	push   0xeffff000
c000e262:	68 d7 10 02 c0       	push   0xc00210d7
c000e267:	e8 c7 0e 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e26c:	83 c4 10             	add    esp,0x10
c000e26f:	50                   	push   eax
c000e270:	50                   	push   eax
c000e271:	6a 00                	push   0x0
c000e273:	53                   	push   ebx
c000e274:	43                   	inc    ebx
c000e275:	e8 40 fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e27a:	83 c4 10             	add    esp,0x10
c000e27d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e283:	75 ea                	jne    c000e26f <Virt::virtualMemorySetup()+0x46>
c000e285:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e28a:	51                   	push   ecx
c000e28b:	51                   	push   ecx
c000e28c:	6a 0f                	push   0xf
c000e28e:	53                   	push   ebx
c000e28f:	43                   	inc    ebx
c000e290:	e8 25 fe ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e295:	83 c4 10             	add    esp,0x10
c000e298:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e29e:	75 ea                	jne    c000e28a <Virt::virtualMemorySetup()+0x61>
c000e2a0:	83 c4 08             	add    esp,0x8
c000e2a3:	5b                   	pop    ebx
c000e2a4:	c3                   	ret    

c000e2a5 <Virt::getAKernelVAS()>:
c000e2a5:	a1 64 41 02 c0       	mov    eax,ds:0xc0024164
c000e2aa:	c3                   	ret    

c000e2ab <Virt::setupPageSwapping(int)>:
c000e2ab:	57                   	push   edi
c000e2ac:	56                   	push   esi
c000e2ad:	53                   	push   ebx
c000e2ae:	83 ec 1c             	sub    esp,0x1c
c000e2b1:	68 14 01 00 00       	push   0x114
c000e2b6:	e8 43 0d 00 00       	call   c000effe <operator new(unsigned long)>
c000e2bb:	83 c4 0c             	add    esp,0xc
c000e2be:	8b 3d 54 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025454
c000e2c4:	89 c6                	mov    esi,eax
c000e2c6:	57                   	push   edi
c000e2c7:	68 eb 10 02 c0       	push   0xc00210eb
c000e2cc:	50                   	push   eax
c000e2cd:	e8 98 13 00 00       	call   c000f66a <File::File(char const*, Process*)>
c000e2d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2d5:	e8 6c 15 00 00       	call   c000f846 <File::unlink()>
c000e2da:	58                   	pop    eax
c000e2db:	5a                   	pop    edx
c000e2dc:	6a 12                	push   0x12
c000e2de:	56                   	push   esi
c000e2df:	e8 ea 13 00 00       	call   c000f6ce <File::open(FileOpenMode)>
c000e2e4:	83 c4 10             	add    esp,0x10
c000e2e7:	85 c0                	test   eax,eax
c000e2e9:	0f 85 b6 00 00 00    	jne    c000e3a5 <Virt::setupPageSwapping(int)+0xfa>
c000e2ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e2f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e2fb:	c1 e3 08             	shl    ebx,0x8
c000e2fe:	83 ec 0c             	sub    esp,0xc
c000e301:	c1 fb 04             	sar    ebx,0x4
c000e304:	68 00 00 01 00       	push   0x10000
c000e309:	e8 f3 db ff ff       	call   c000bf01 <malloc>
c000e30e:	83 c4 0c             	add    esp,0xc
c000e311:	89 c7                	mov    edi,eax
c000e313:	68 00 00 01 00       	push   0x10000
c000e318:	6a 00                	push   0x0
c000e31a:	50                   	push   eax
c000e31b:	e8 e8 22 ff ff       	call   c0000608 <memset>
c000e320:	83 c4 10             	add    esp,0x10
c000e323:	4b                   	dec    ebx
c000e324:	83 fb ff             	cmp    ebx,0xffffffff
c000e327:	74 4a                	je     c000e373 <Virt::setupPageSwapping(int)+0xc8>
c000e329:	83 ec 0c             	sub    esp,0xc
c000e32c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e32e:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e332:	52                   	push   edx
c000e333:	57                   	push   edi
c000e334:	6a 00                	push   0x0
c000e336:	68 00 00 01 00       	push   0x10000
c000e33b:	56                   	push   esi
c000e33c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e33f:	83 c4 20             	add    esp,0x20
c000e342:	85 c0                	test   eax,eax
c000e344:	75 4d                	jne    c000e393 <Virt::setupPageSwapping(int)+0xe8>
c000e346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e34a:	3d 00 00 01 00       	cmp    eax,0x10000
c000e34f:	74 d2                	je     c000e323 <Virt::setupPageSwapping(int)+0x78>
c000e351:	52                   	push   edx
c000e352:	4b                   	dec    ebx
c000e353:	52                   	push   edx
c000e354:	50                   	push   eax
c000e355:	68 3e 11 02 c0       	push   0xc002113e
c000e35a:	e8 d4 0d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e35f:	c7 04 24 47 11 02 c0 	mov    DWORD PTR [esp],0xc0021147
c000e366:	e8 87 6f 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e36b:	83 c4 10             	add    esp,0x10
c000e36e:	83 fb ff             	cmp    ebx,0xffffffff
c000e371:	75 b6                	jne    c000e329 <Virt::setupPageSwapping(int)+0x7e>
c000e373:	83 ec 0c             	sub    esp,0xc
c000e376:	56                   	push   esi
c000e377:	e8 b0 13 00 00       	call   c000f72c <File::close()>
c000e37c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e37f:	e8 9d db ff ff       	call   c000bf21 <rfree>
c000e384:	8b 06                	mov    eax,DWORD PTR [esi]
c000e386:	89 34 24             	mov    DWORD PTR [esp],esi
c000e389:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e38c:	83 c4 20             	add    esp,0x20
c000e38f:	5b                   	pop    ebx
c000e390:	5e                   	pop    esi
c000e391:	5f                   	pop    edi
c000e392:	c3                   	ret    
c000e393:	51                   	push   ecx
c000e394:	51                   	push   ecx
c000e395:	50                   	push   eax
c000e396:	68 26 11 02 c0       	push   0xc0021126
c000e39b:	e8 93 0d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e3a0:	83 c4 10             	add    esp,0x10
c000e3a3:	eb a1                	jmp    c000e346 <Virt::setupPageSwapping(int)+0x9b>
c000e3a5:	53                   	push   ebx
c000e3a6:	53                   	push   ebx
c000e3a7:	50                   	push   eax
c000e3a8:	68 02 11 02 c0       	push   0xc0021102
c000e3ad:	e8 81 0d 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e3b2:	c7 04 24 0b 11 02 c0 	mov    DWORD PTR [esp],0xc002110b
c000e3b9:	e8 34 6f 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e3be:	83 c4 10             	add    esp,0x10
c000e3c1:	e9 29 ff ff ff       	jmp    c000e2ef <Virt::setupPageSwapping(int)+0x44>

c000e3c6 <VAS::VAS()>:
c000e3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3d5:	a3 64 41 02 c0       	mov    ds:0xc0024164,eax
c000e3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3de:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e3e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ed:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e3f4:	90                   	nop
c000e3f5:	c3                   	ret    

c000e3f6 <VAS::VAS(VAS*)>:
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e404:	83 ec 0c             	sub    esp,0xc
c000e407:	68 5c 0f 02 c0       	push   0xc0020f5c
c000e40c:	e8 e1 6e 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e411:	83 c4 10             	add    esp,0x10
c000e414:	90                   	nop
c000e415:	83 c4 0c             	add    esp,0xc
c000e418:	c3                   	ret    
c000e419:	90                   	nop

c000e41a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e41a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e41e:	89 c2                	mov    edx,eax
c000e420:	c1 ea 16             	shr    edx,0x16
c000e423:	c1 e8 0a             	shr    eax,0xa
c000e426:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e42b:	19 c9                	sbb    ecx,ecx
c000e42d:	25 fc 0f 00 00       	and    eax,0xffc
c000e432:	c1 e2 0c             	shl    edx,0xc
c000e435:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e43b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e442:	01 d0                	add    eax,edx
c000e444:	c3                   	ret    
c000e445:	90                   	nop

c000e446 <VAS::getPageTableEntry(unsigned long)>:
c000e446:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e44a:	89 ca                	mov    edx,ecx
c000e44c:	c1 ea 16             	shr    edx,0x16
c000e44f:	c1 e9 0a             	shr    ecx,0xa
c000e452:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e458:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e45e:	c1 e0 0c             	shl    eax,0xc
c000e461:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e464:	c3                   	ret    

c000e465 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e465:	57                   	push   edi
c000e466:	56                   	push   esi
c000e467:	be 01 00 00 00       	mov    esi,0x1
c000e46c:	53                   	push   ebx
c000e46d:	83 ec 10             	sub    esp,0x10
c000e470:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e474:	c1 eb 0c             	shr    ebx,0xc
c000e477:	eb 3e                	jmp    c000e4b7 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e479:	e8 27 fe ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c000e47e:	51                   	push   ecx
c000e47f:	51                   	push   ecx
c000e480:	57                   	push   edi
c000e481:	50                   	push   eax
c000e482:	e8 bf ff ff ff       	call   c000e446 <VAS::getPageTableEntry(unsigned long)>
c000e487:	83 c4 10             	add    esp,0x10
c000e48a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e48e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e490:	f6 c4 04             	test   ah,0x4
c000e493:	75 5f                	jne    c000e4f4 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e495:	80 fa 04             	cmp    dl,0x4
c000e498:	74 78                	je     c000e512 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e49a:	80 fa 02             	cmp    dl,0x2
c000e49d:	0f 84 88 00 00 00    	je     c000e52b <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4a3:	80 fa 03             	cmp    dl,0x3
c000e4a6:	0f 84 ac 00 00 00    	je     c000e558 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4ac:	fe ca                	dec    dl
c000e4ae:	0f 84 92 00 00 00    	je     c000e546 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4b4:	43                   	inc    ebx
c000e4b5:	31 f6                	xor    esi,esi
c000e4b7:	53                   	push   ebx
c000e4b8:	e8 34 fc ff ff       	call   c000e0f1 <Virt::getPageState(unsigned long)>
c000e4bd:	5f                   	pop    edi
c000e4be:	89 df                	mov    edi,ebx
c000e4c0:	c1 e7 0c             	shl    edi,0xc
c000e4c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4c7:	84 c0                	test   al,al
c000e4c9:	75 ae                	jne    c000e479 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4cb:	83 ec 0c             	sub    esp,0xc
c000e4ce:	68 4d 11 02 c0       	push   0xc002114d
c000e4d3:	e8 1a 6e 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e4d8:	e8 c8 fd ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c000e4dd:	5a                   	pop    edx
c000e4de:	59                   	pop    ecx
c000e4df:	57                   	push   edi
c000e4e0:	50                   	push   eax
c000e4e1:	e8 60 ff ff ff       	call   c000e446 <VAS::getPageTableEntry(unsigned long)>
c000e4e6:	83 c4 10             	add    esp,0x10
c000e4e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4ef:	f6 c4 04             	test   ah,0x4
c000e4f2:	74 c0                	je     c000e4b4 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e4f4:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e500:	50                   	push   eax
c000e501:	e8 44 df ff ff       	call   c000c44a <Phys::freePage(unsigned long)>
c000e506:	83 c4 10             	add    esp,0x10
c000e509:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e50d:	80 fa 04             	cmp    dl,0x4
c000e510:	75 88                	jne    c000e49a <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e512:	89 f0                	mov    eax,esi
c000e514:	84 c0                	test   al,al
c000e516:	75 46                	jne    c000e55e <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e518:	c7 44 24 20 80 0f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020f80
c000e520:	83 c4 10             	add    esp,0x10
c000e523:	5b                   	pop    ebx
c000e524:	5e                   	pop    esi
c000e525:	5f                   	pop    edi
c000e526:	e9 c7 6d 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c000e52b:	89 f0                	mov    eax,esi
c000e52d:	84 c0                	test   al,al
c000e52f:	75 15                	jne    c000e546 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e531:	83 ec 0c             	sub    esp,0xc
c000e534:	68 69 11 02 c0       	push   0xc0021169
c000e539:	e8 b4 6d 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e53e:	83 c4 10             	add    esp,0x10
c000e541:	e9 6e ff ff ff       	jmp    c000e4b4 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e546:	50                   	push   eax
c000e547:	50                   	push   eax
c000e548:	6a 00                	push   0x0
c000e54a:	53                   	push   ebx
c000e54b:	e8 6a fb ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e550:	83 c4 10             	add    esp,0x10
c000e553:	e9 5c ff ff ff       	jmp    c000e4b4 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e558:	89 f0                	mov    eax,esi
c000e55a:	84 c0                	test   al,al
c000e55c:	75 14                	jne    c000e572 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e55e:	52                   	push   edx
c000e55f:	52                   	push   edx
c000e560:	6a 00                	push   0x0
c000e562:	53                   	push   ebx
c000e563:	e8 52 fb ff ff       	call   c000e0ba <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e568:	83 c4 10             	add    esp,0x10
c000e56b:	83 c4 10             	add    esp,0x10
c000e56e:	5b                   	pop    ebx
c000e56f:	5e                   	pop    esi
c000e570:	5f                   	pop    edi
c000e571:	c3                   	ret    
c000e572:	c7 44 24 20 85 11 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021185
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	5b                   	pop    ebx
c000e57e:	5e                   	pop    esi
c000e57f:	5f                   	pop    edi
c000e580:	e9 6d 6d 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c000e585:	90                   	nop

c000e586 <VAS::freeAllocatedPages(unsigned long)>:
c000e586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e58a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e58e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e592:	74 09                	je     c000e59d <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e594:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e598:	e9 c8 fe ff ff       	jmp    c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c000e59d:	c7 44 24 04 a4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fa4
c000e5a5:	e9 89 0b 00 00       	jmp    c000f133 <Dbg::kprintf(char const*, ...)>

c000e5aa <VAS::virtualToPhysical(unsigned long)>:
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	50                   	push   eax
c000e5af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5b3:	52                   	push   edx
c000e5b4:	e8 8d fe ff ff       	call   c000e446 <VAS::getPageTableEntry(unsigned long)>
c000e5b9:	59                   	pop    ecx
c000e5ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5bc:	5a                   	pop    edx
c000e5bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5c2:	c3                   	ret    
c000e5c3:	90                   	nop

c000e5c4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5c4:	55                   	push   ebp
c000e5c5:	57                   	push   edi
c000e5c6:	56                   	push   esi
c000e5c7:	53                   	push   ebx
c000e5c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5d0:	89 c3                	mov    ebx,eax
c000e5d2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5d6:	c1 e3 0c             	shl    ebx,0xc
c000e5d9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e5dd:	01 f3                	add    ebx,esi
c000e5df:	85 c0                	test   eax,eax
c000e5e1:	7e 1f                	jle    c000e602 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e5e3:	56                   	push   esi
c000e5e4:	81 c6 00 10 00 00    	add    esi,0x1000
c000e5ea:	55                   	push   ebp
c000e5eb:	e8 56 fe ff ff       	call   c000e446 <VAS::getPageTableEntry(unsigned long)>
c000e5f0:	5a                   	pop    edx
c000e5f1:	59                   	pop    ecx
c000e5f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5f4:	21 f9                	and    ecx,edi
c000e5f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e5fa:	09 d1                	or     ecx,edx
c000e5fc:	39 f3                	cmp    ebx,esi
c000e5fe:	89 08                	mov    DWORD PTR [eax],ecx
c000e600:	75 e1                	jne    c000e5e3 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e602:	5b                   	pop    ebx
c000e603:	5e                   	pop    esi
c000e604:	5f                   	pop    edi
c000e605:	5d                   	pop    ebp
c000e606:	c3                   	ret    
c000e607:	90                   	nop

c000e608 <VAS::setToWriteCombining(unsigned long, int)>:
c000e608:	83 ec 0c             	sub    esp,0xc
c000e60b:	e8 76 5b 00 00       	call   c0014186 <thisCPU()>
c000e610:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e617:	75 04                	jne    c000e61d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e619:	83 c4 0c             	add    esp,0xc
c000e61c:	c3                   	ret    
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	68 80 00 00 00       	push   0x80
c000e625:	6a ff                	push   0xffffffff
c000e627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e62b:	50                   	push   eax
c000e62c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e630:	52                   	push   edx
c000e631:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e635:	51                   	push   ecx
c000e636:	e8 89 ff ff ff       	call   c000e5c4 <VAS::reflagRange(unsigned long, int, int, int)>
c000e63b:	83 c4 20             	add    esp,0x20
c000e63e:	83 c4 0c             	add    esp,0xc
c000e641:	c3                   	ret    

c000e642 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e642:	83 ec 0c             	sub    esp,0xc
c000e645:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e649:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e64e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e655:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e658:	19 c0                	sbb    eax,eax
c000e65a:	83 ca 03             	or     edx,0x3
c000e65d:	83 e0 fc             	and    eax,0xfffffffc
c000e660:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e667:	e8 29 0a 01 00       	call   c001f095 <CPU::readCR3()>
c000e66c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e670:	83 c4 0c             	add    esp,0xc
c000e673:	e9 2f 0a 01 00       	jmp    c001f0a7 <CPU::writeCR3(unsigned long)>

c000e678 <VAS::~VAS()>:
c000e678:	83 ec 2c             	sub    esp,0x2c
c000e67b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e683:	e8 73 9c 00 00       	call   c00182fb <lockScheduler()>
c000e688:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e68d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e68f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e692:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e698:	83 ec 04             	sub    esp,0x4
c000e69b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e69f:	6a 01                	push   0x1
c000e6a1:	50                   	push   eax
c000e6a2:	e8 9b ff ff ff       	call   c000e642 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6a7:	83 c4 10             	add    esp,0x10
c000e6aa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6b2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6ba:	0f 8f d7 00 00 00    	jg     c000e797 <VAS::~VAS()+0x11f>
c000e6c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6cb:	c1 e2 02             	shl    edx,0x2
c000e6ce:	01 d0                	add    eax,edx
c000e6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6da:	83 e0 01             	and    eax,0x1
c000e6dd:	0f 84 ab 00 00 00    	je     c000e78e <VAS::~VAS()+0x116>
c000e6e3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e6eb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e6f3:	7f 75                	jg     c000e76a <VAS::~VAS()+0xf2>
c000e6f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6f9:	c1 e0 0a             	shl    eax,0xa
c000e6fc:	89 c2                	mov    edx,eax
c000e6fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e702:	01 d0                	add    eax,edx
c000e704:	c1 e0 0c             	shl    eax,0xc
c000e707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e70b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e710:	8b 00                	mov    eax,DWORD PTR [eax]
c000e712:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e715:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e71b:	83 ec 04             	sub    esp,0x4
c000e71e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e722:	6a 01                	push   0x1
c000e724:	50                   	push   eax
c000e725:	e8 f0 fc ff ff       	call   c000e41a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e72a:	83 c4 10             	add    esp,0x10
c000e72d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e731:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e735:	8b 00                	mov    eax,DWORD PTR [eax]
c000e737:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e73b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e73f:	25 01 04 00 00       	and    eax,0x401
c000e744:	3d 01 04 00 00       	cmp    eax,0x401
c000e749:	75 19                	jne    c000e764 <VAS::~VAS()+0xec>
c000e74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e74f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	50                   	push   eax
c000e758:	e8 ed dc ff ff       	call   c000c44a <Phys::freePage(unsigned long)>
c000e75d:	83 c4 10             	add    esp,0x10
c000e760:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e764:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e768:	eb 81                	jmp    c000e6eb <VAS::~VAS()+0x73>
c000e76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76e:	25 00 04 00 00       	and    eax,0x400
c000e773:	74 19                	je     c000e78e <VAS::~VAS()+0x116>
c000e775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e779:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77e:	83 ec 0c             	sub    esp,0xc
c000e781:	50                   	push   eax
c000e782:	e8 c3 dc ff ff       	call   c000c44a <Phys::freePage(unsigned long)>
c000e787:	83 c4 10             	add    esp,0x10
c000e78a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e792:	e9 1b ff ff ff       	jmp    c000e6b2 <VAS::~VAS()+0x3a>
c000e797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e79b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	50                   	push   eax
c000e7a2:	e8 be fc ff ff       	call   c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7b1:	83 ec 0c             	sub    esp,0xc
c000e7b4:	50                   	push   eax
c000e7b5:	e8 90 dc ff ff       	call   c000c44a <Phys::freePage(unsigned long)>
c000e7ba:	83 c4 10             	add    esp,0x10
c000e7bd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7c5:	c1 e0 02             	shl    eax,0x2
c000e7c8:	83 ec 08             	sub    esp,0x8
c000e7cb:	50                   	push   eax
c000e7cc:	68 c8 0f 02 c0       	push   0xc0020fc8
c000e7d1:	e8 5d 09 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e7d6:	83 c4 10             	add    esp,0x10
c000e7d9:	e8 1f 9b 00 00       	call   c00182fd <unlockScheduler()>
c000e7de:	90                   	nop
c000e7df:	83 c4 2c             	add    esp,0x2c
c000e7e2:	c3                   	ret    
c000e7e3:	90                   	nop

c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e7e4:	55                   	push   ebp
c000e7e5:	57                   	push   edi
c000e7e6:	56                   	push   esi
c000e7e7:	53                   	push   ebx
c000e7e8:	83 ec 1c             	sub    esp,0x1c
c000e7eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e7ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e7f3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e7f9:	77 08                	ja     c000e803 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e7fb:	0f 20 d8             	mov    eax,cr3
c000e7fe:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e801:	75 49                	jne    c000e84c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e803:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e807:	09 d8                	or     eax,ebx
c000e809:	a9 ff 0f 00 00       	test   eax,0xfff
c000e80e:	75 59                	jne    c000e869 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e810:	89 de                	mov    esi,ebx
c000e812:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e815:	c1 ee 16             	shr    esi,0x16
c000e818:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e81f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e823:	74 56                	je     c000e87b <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e825:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e82b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e82f:	c1 eb 0a             	shr    ebx,0xa
c000e832:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e836:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e83c:	09 d0                	or     eax,edx
c000e83e:	c1 e6 0c             	shl    esi,0xc
c000e841:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e844:	83 c4 1c             	add    esp,0x1c
c000e847:	5b                   	pop    ebx
c000e848:	5e                   	pop    esi
c000e849:	5f                   	pop    edi
c000e84a:	5d                   	pop    ebp
c000e84b:	c3                   	ret    
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	68 e8 0f 02 c0       	push   0xc0020fe8
c000e854:	e8 da 08 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000e859:	83 c4 10             	add    esp,0x10
c000e85c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e860:	09 d8                	or     eax,ebx
c000e862:	a9 ff 0f 00 00       	test   eax,0xfff
c000e867:	74 a7                	je     c000e810 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e869:	83 ec 0c             	sub    esp,0xc
c000e86c:	68 50 10 02 c0       	push   0xc0021050
c000e871:	e8 7c 6a 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e876:	83 c4 10             	add    esp,0x10
c000e879:	eb 95                	jmp    c000e810 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e87b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e87f:	e8 53 dc ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000e884:	89 c5                	mov    ebp,eax
c000e886:	e8 1a fa ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c000e88b:	83 ec 0c             	sub    esp,0xc
c000e88e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e892:	6a 01                	push   0x1
c000e894:	e8 7f f8 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c000e899:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8a0:	6a 01                	push   0x1
c000e8a2:	50                   	push   eax
c000e8a3:	55                   	push   ebp
c000e8a4:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8ae:	51                   	push   ecx
c000e8af:	e8 22 02 00 00       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8b4:	83 c4 1c             	add    esp,0x1c
c000e8b7:	68 00 10 00 00       	push   0x1000
c000e8bc:	6a 00                	push   0x0
c000e8be:	50                   	push   eax
c000e8bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8c3:	e8 40 1d ff ff       	call   c0000608 <memset>
c000e8c8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8cc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8cf:	e8 91 fb ff ff       	call   c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c000e8d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8d8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8db:	83 c4 10             	add    esp,0x10
c000e8de:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e8e1:	e9 3f ff ff ff       	jmp    c000e825 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e8e6 <VAS::allocatePages(int, int)>:
c000e8e6:	55                   	push   ebp
c000e8e7:	57                   	push   edi
c000e8e8:	56                   	push   esi
c000e8e9:	53                   	push   ebx
c000e8ea:	83 ec 1c             	sub    esp,0x1c
c000e8ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8f1:	e8 90 58 00 00       	call   c0014186 <thisCPU()>
c000e8f6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e8fc:	83 e0 01             	and    eax,0x1
c000e8ff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e903:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e907:	0f 85 d5 00 00 00    	jne    c000e9e2 <VAS::allocatePages(int, int)+0xfc>
c000e90d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e914:	85 c0                	test   eax,eax
c000e916:	0f 84 aa 00 00 00    	je     c000e9c6 <VAS::allocatePages(int, int)+0xe0>
c000e91c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e920:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e924:	c1 e6 0c             	shl    esi,0xc
c000e927:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e92b:	01 de                	add    esi,ebx
c000e92d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e931:	81 cd 00 04 00 00    	or     ebp,0x400
c000e937:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e93a:	85 c0                	test   eax,eax
c000e93c:	7e 25                	jle    c000e963 <VAS::allocatePages(int, int)+0x7d>
c000e93e:	e8 94 db ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000e943:	55                   	push   ebp
c000e944:	53                   	push   ebx
c000e945:	50                   	push   eax
c000e946:	57                   	push   edi
c000e947:	e8 98 fe ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e94c:	83 c4 10             	add    esp,0x10
c000e94f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e954:	74 03                	je     c000e959 <VAS::allocatePages(int, int)+0x73>
c000e956:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e959:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e95f:	39 de                	cmp    esi,ebx
c000e961:	75 db                	jne    c000e93e <VAS::allocatePages(int, int)+0x58>
c000e963:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e968:	74 3f                	je     c000e9a9 <VAS::allocatePages(int, int)+0xc3>
c000e96a:	c1 ee 0a             	shr    esi,0xa
c000e96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e971:	c1 eb 0a             	shr    ebx,0xa
c000e974:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e97a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e980:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e986:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e98c:	39 f3                	cmp    ebx,esi
c000e98e:	77 0d                	ja     c000e99d <VAS::allocatePages(int, int)+0xb7>
c000e990:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e993:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e999:	39 de                	cmp    esi,ebx
c000e99b:	73 f3                	jae    c000e990 <VAS::allocatePages(int, int)+0xaa>
c000e99d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9a1:	83 c4 1c             	add    esp,0x1c
c000e9a4:	5b                   	pop    ebx
c000e9a5:	5e                   	pop    esi
c000e9a6:	5f                   	pop    edi
c000e9a7:	5d                   	pop    ebp
c000e9a8:	c3                   	ret    
c000e9a9:	e8 e7 06 01 00       	call   c001f095 <CPU::readCR3()>
c000e9ae:	83 ec 0c             	sub    esp,0xc
c000e9b1:	50                   	push   eax
c000e9b2:	e8 f0 06 01 00       	call   c001f0a7 <CPU::writeCR3(unsigned long)>
c000e9b7:	83 c4 10             	add    esp,0x10
c000e9ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9be:	83 c4 1c             	add    esp,0x1c
c000e9c1:	5b                   	pop    ebx
c000e9c2:	5e                   	pop    esi
c000e9c3:	5f                   	pop    edi
c000e9c4:	5d                   	pop    ebp
c000e9c5:	c3                   	ret    
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	68 74 10 02 c0       	push   0xc0021074
c000e9ce:	e8 1f 69 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000e9d3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9da:	83 c4 10             	add    esp,0x10
c000e9dd:	e9 3a ff ff ff       	jmp    c000e91c <VAS::allocatePages(int, int)+0x36>
c000e9e2:	83 ec 0c             	sub    esp,0xc
c000e9e5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9e9:	53                   	push   ebx
c000e9ea:	e8 29 f7 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c000e9ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9f3:	83 c4 10             	add    esp,0x10
c000e9f6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e9fb:	0f 87 94 00 00 00    	ja     c000ea95 <VAS::allocatePages(int, int)+0x1af>
c000ea01:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea05:	85 d2                	test   edx,edx
c000ea07:	7e 3c                	jle    c000ea45 <VAS::allocatePages(int, int)+0x15f>
c000ea09:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea0d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea11:	c1 e5 0c             	shl    ebp,0xc
c000ea14:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea18:	81 ce 00 04 00 00    	or     esi,0x400
c000ea1e:	01 dd                	add    ebp,ebx
c000ea20:	e8 b2 da ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000ea25:	56                   	push   esi
c000ea26:	53                   	push   ebx
c000ea27:	50                   	push   eax
c000ea28:	57                   	push   edi
c000ea29:	e8 b6 fd ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea2e:	83 c4 10             	add    esp,0x10
c000ea31:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea36:	74 03                	je     c000ea3b <VAS::allocatePages(int, int)+0x155>
c000ea38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea41:	39 dd                	cmp    ebp,ebx
c000ea43:	75 db                	jne    c000ea20 <VAS::allocatePages(int, int)+0x13a>
c000ea45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea4a:	0f 84 59 ff ff ff    	je     c000e9a9 <VAS::allocatePages(int, int)+0xc3>
c000ea50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea58:	c1 e0 0c             	shl    eax,0xc
c000ea5b:	89 d3                	mov    ebx,edx
c000ea5d:	c1 eb 0a             	shr    ebx,0xa
c000ea60:	01 d0                	add    eax,edx
c000ea62:	c1 e8 0a             	shr    eax,0xa
c000ea65:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea70:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea76:	2d 00 00 40 00       	sub    eax,0x400000
c000ea7b:	39 c3                	cmp    ebx,eax
c000ea7d:	0f 87 1a ff ff ff    	ja     c000e99d <VAS::allocatePages(int, int)+0xb7>
c000ea83:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea86:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea8c:	39 d8                	cmp    eax,ebx
c000ea8e:	73 f3                	jae    c000ea83 <VAS::allocatePages(int, int)+0x19d>
c000ea90:	e9 08 ff ff ff       	jmp    c000e99d <VAS::allocatePages(int, int)+0xb7>
c000ea95:	e8 ec 56 00 00       	call   c0014186 <thisCPU()>
c000ea9a:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eaa1:	0f 84 5a ff ff ff    	je     c000ea01 <VAS::allocatePages(int, int)+0x11b>
c000eaa7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaab:	80 cd 01             	or     ch,0x1
c000eaae:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eab2:	e9 4a ff ff ff       	jmp    c000ea01 <VAS::allocatePages(int, int)+0x11b>
c000eab7:	90                   	nop

c000eab8 <VAS::setCPUSpecific(unsigned long)>:
c000eab8:	83 ec 0c             	sub    esp,0xc
c000eabb:	6a 05                	push   0x5
c000eabd:	68 00 00 40 c2       	push   0xc2400000
c000eac2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eac6:	50                   	push   eax
c000eac7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eacb:	52                   	push   edx
c000eacc:	e8 13 fd ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ead1:	83 c4 1c             	add    esp,0x1c
c000ead4:	c3                   	ret    
c000ead5:	90                   	nop

c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ead6:	55                   	push   ebp
c000ead7:	57                   	push   edi
c000ead8:	56                   	push   esi
c000ead9:	53                   	push   ebx
c000eada:	83 ec 1c             	sub    esp,0x1c
c000eadd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eae1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eae5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eae9:	e8 98 56 00 00       	call   c0014186 <thisCPU()>
c000eaee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eaf4:	83 e0 01             	and    eax,0x1
c000eaf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eafb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaff:	85 c0                	test   eax,eax
c000eb01:	7e 39                	jle    c000eb3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb07:	89 f3                	mov    ebx,esi
c000eb09:	c1 e0 0c             	shl    eax,0xc
c000eb0c:	01 f0                	add    eax,esi
c000eb0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb12:	55                   	push   ebp
c000eb13:	53                   	push   ebx
c000eb14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb18:	29 f0                	sub    eax,esi
c000eb1a:	01 d8                	add    eax,ebx
c000eb1c:	50                   	push   eax
c000eb1d:	57                   	push   edi
c000eb1e:	e8 c1 fc ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb23:	83 c4 10             	add    esp,0x10
c000eb26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb2b:	74 03                	je     c000eb30 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb2d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb30:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb36:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb3a:	75 d6                	jne    c000eb12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb3c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb41:	74 42                	je     c000eb85 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb47:	89 f3                	mov    ebx,esi
c000eb49:	c1 e0 0c             	shl    eax,0xc
c000eb4c:	c1 eb 0a             	shr    ebx,0xa
c000eb4f:	01 f0                	add    eax,esi
c000eb51:	c1 e8 0a             	shr    eax,0xa
c000eb54:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb5f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb65:	2d 00 00 40 00       	sub    eax,0x400000
c000eb6a:	39 c3                	cmp    ebx,eax
c000eb6c:	77 0d                	ja     c000eb7b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb6e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb71:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb77:	39 d8                	cmp    eax,ebx
c000eb79:	73 f3                	jae    c000eb6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eb7b:	83 c4 1c             	add    esp,0x1c
c000eb7e:	89 f0                	mov    eax,esi
c000eb80:	5b                   	pop    ebx
c000eb81:	5e                   	pop    esi
c000eb82:	5f                   	pop    edi
c000eb83:	5d                   	pop    ebp
c000eb84:	c3                   	ret    
c000eb85:	e8 0b 05 01 00       	call   c001f095 <CPU::readCR3()>
c000eb8a:	83 ec 0c             	sub    esp,0xc
c000eb8d:	50                   	push   eax
c000eb8e:	e8 14 05 01 00       	call   c001f0a7 <CPU::writeCR3(unsigned long)>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	89 f0                	mov    eax,esi
c000eb98:	83 c4 1c             	add    esp,0x1c
c000eb9b:	5b                   	pop    ebx
c000eb9c:	5e                   	pop    esi
c000eb9d:	5f                   	pop    edi
c000eb9e:	5d                   	pop    ebp
c000eb9f:	c3                   	ret    

c000eba0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000eba0:	55                   	push   ebp
c000eba1:	57                   	push   edi
c000eba2:	56                   	push   esi
c000eba3:	53                   	push   ebx
c000eba4:	83 ec 1c             	sub    esp,0x1c
c000eba7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebab:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebaf:	09 f0                	or     eax,esi
c000ebb1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebb5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebb9:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebbe:	75 4c                	jne    c000ec0c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebc0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebc4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebc7:	c1 eb 16             	shr    ebx,0x16
c000ebca:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebd1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebd5:	74 4f                	je     c000ec26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebdb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ebdf:	c1 e8 0a             	shr    eax,0xa
c000ebe2:	80 fa 01             	cmp    dl,0x1
c000ebe5:	19 d2                	sbb    edx,edx
c000ebe7:	25 fc 0f 00 00       	and    eax,0xffc
c000ebec:	c1 e3 0c             	shl    ebx,0xc
c000ebef:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ebf5:	01 d8                	add    eax,ebx
c000ebf7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ebfb:	09 d9                	or     ecx,ebx
c000ebfd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec04:	83 c4 1c             	add    esp,0x1c
c000ec07:	5b                   	pop    ebx
c000ec08:	5e                   	pop    esi
c000ec09:	5f                   	pop    edi
c000ec0a:	5d                   	pop    ebp
c000ec0b:	c3                   	ret    
c000ec0c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec10:	83 ec 0c             	sub    esp,0xc
c000ec13:	68 a0 10 02 c0       	push   0xc00210a0
c000ec18:	e8 d5 66 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000ec1d:	83 c4 10             	add    esp,0x10
c000ec20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec24:	eb 9a                	jmp    c000ebc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec2a:	e8 a8 d8 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000ec2f:	89 c5                	mov    ebp,eax
c000ec31:	e8 6f f6 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c000ec36:	83 ec 0c             	sub    esp,0xc
c000ec39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec3d:	6a 01                	push   0x1
c000ec3f:	e8 d4 f4 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c000ec44:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec4b:	6a 01                	push   0x1
c000ec4d:	50                   	push   eax
c000ec4e:	55                   	push   ebp
c000ec4f:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec55:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec59:	51                   	push   ecx
c000ec5a:	e8 77 fe ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec5f:	83 c4 1c             	add    esp,0x1c
c000ec62:	68 00 10 00 00       	push   0x1000
c000ec67:	6a 00                	push   0x0
c000ec69:	50                   	push   eax
c000ec6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec6e:	e8 95 19 ff ff       	call   c0000608 <memset>
c000ec73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ec7a:	e8 e6 f7 ff ff       	call   c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c000ec7f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec82:	83 c4 10             	add    esp,0x10
c000ec85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec89:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ec8c:	e9 46 ff ff ff       	jmp    c000ebd7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ec91:	90                   	nop

c000ec92 <VAS::VAS(bool)>:
c000ec92:	53                   	push   ebx
c000ec93:	83 ec 28             	sub    esp,0x28
c000ec96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec9a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ec9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eca2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecad:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecb1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecb4:	e8 1e d8 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000ecb9:	89 c2                	mov    edx,eax
c000ecbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecc2:	e8 de f5 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c000ecc7:	89 c3                	mov    ebx,eax
c000ecc9:	83 ec 0c             	sub    esp,0xc
c000eccc:	6a 01                	push   0x1
c000ecce:	e8 45 f4 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c000ecd3:	83 c4 10             	add    esp,0x10
c000ecd6:	89 c2                	mov    edx,eax
c000ecd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ecdf:	83 ec 0c             	sub    esp,0xc
c000ece2:	6a 03                	push   0x3
c000ece4:	6a 01                	push   0x1
c000ece6:	52                   	push   edx
c000ece7:	50                   	push   eax
c000ece8:	53                   	push   ebx
c000ece9:	e8 e8 fd ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ecee:	83 c4 20             	add    esp,0x20
c000ecf1:	89 c2                	mov    edx,eax
c000ecf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ecfa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed02:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed0a:	7f 1c                	jg     c000ed28 <VAS::VAS(bool)+0x96>
c000ed0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed10:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed17:	c1 e2 02             	shl    edx,0x2
c000ed1a:	01 d0                	add    eax,edx
c000ed1c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed26:	eb da                	jmp    c000ed02 <VAS::VAS(bool)+0x70>
c000ed28:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed30:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed38:	7f 71                	jg     c000edab <VAS::VAS(bool)+0x119>
c000ed3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed3e:	2d 00 02 00 00       	sub    eax,0x200
c000ed43:	c1 e0 0c             	shl    eax,0xc
c000ed46:	83 c8 03             	or     eax,0x3
c000ed49:	89 c3                	mov    ebx,eax
c000ed4b:	e8 36 54 00 00       	call   c0014186 <thisCPU()>
c000ed50:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed56:	83 e0 10             	and    eax,0x10
c000ed59:	84 c0                	test   al,al
c000ed5b:	74 07                	je     c000ed64 <VAS::VAS(bool)+0xd2>
c000ed5d:	b8 00 01 00 00       	mov    eax,0x100
c000ed62:	eb 05                	jmp    c000ed69 <VAS::VAS(bool)+0xd7>
c000ed64:	b8 00 00 00 00       	mov    eax,0x0
c000ed69:	09 d8                	or     eax,ebx
c000ed6b:	89 c1                	mov    ecx,eax
c000ed6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed78:	c1 e2 02             	shl    edx,0x2
c000ed7b:	01 d0                	add    eax,edx
c000ed7d:	89 ca                	mov    edx,ecx
c000ed7f:	89 10                	mov    DWORD PTR [eax],edx
c000ed81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed85:	2d 40 03 00 00       	sub    eax,0x340
c000ed8a:	83 f8 7f             	cmp    eax,0x7f
c000ed8d:	77 16                	ja     c000eda5 <VAS::VAS(bool)+0x113>
c000ed8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed9a:	c1 e2 02             	shl    edx,0x2
c000ed9d:	01 d0                	add    eax,edx
c000ed9f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000eda5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eda9:	eb 85                	jmp    c000ed30 <VAS::VAS(bool)+0x9e>
c000edab:	e8 d6 53 00 00       	call   c0014186 <thisCPU()>
c000edb0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000edb6:	83 e0 10             	and    eax,0x10
c000edb9:	84 c0                	test   al,al
c000edbb:	74 07                	je     c000edc4 <VAS::VAS(bool)+0x132>
c000edbd:	b8 03 41 00 00       	mov    eax,0x4103
c000edc2:	eb 05                	jmp    c000edc9 <VAS::VAS(bool)+0x137>
c000edc4:	b8 03 40 00 00       	mov    eax,0x4003
c000edc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edcd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edd0:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edd6:	89 02                	mov    DWORD PTR [edx],eax
c000edd8:	e8 a9 53 00 00       	call   c0014186 <thisCPU()>
c000eddd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ede3:	83 ec 08             	sub    esp,0x8
c000ede6:	50                   	push   eax
c000ede7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edeb:	e8 c8 fc ff ff       	call   c000eab8 <VAS::setCPUSpecific(unsigned long)>
c000edf0:	83 c4 10             	add    esp,0x10
c000edf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf7:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000edfa:	e8 87 53 00 00       	call   c0014186 <thisCPU()>
c000edff:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee05:	83 e0 10             	and    eax,0x10
c000ee08:	84 c0                	test   al,al
c000ee0a:	74 07                	je     c000ee13 <VAS::VAS(bool)+0x181>
c000ee0c:	b8 00 01 00 00       	mov    eax,0x100
c000ee11:	eb 05                	jmp    c000ee18 <VAS::VAS(bool)+0x186>
c000ee13:	b8 00 00 00 00       	mov    eax,0x0
c000ee18:	09 d8                	or     eax,ebx
c000ee1a:	89 c2                	mov    edx,eax
c000ee1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee23:	05 fc 0f 00 00       	add    eax,0xffc
c000ee28:	83 ca 03             	or     edx,0x3
c000ee2b:	89 10                	mov    DWORD PTR [eax],edx
c000ee2d:	e8 54 53 00 00       	call   c0014186 <thisCPU()>
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	50                   	push   eax
c000ee36:	e8 ef 19 00 00       	call   c001082a <Device::getName()>
c000ee3b:	83 c4 10             	add    esp,0x10
c000ee3e:	83 ec 08             	sub    esp,0x8
c000ee41:	68 9f 11 02 c0       	push   0xc002119f
c000ee46:	50                   	push   eax
c000ee47:	e8 ac 18 ff ff       	call   c00006f8 <strcmp>
c000ee4c:	83 c4 10             	add    esp,0x10
c000ee4f:	85 c0                	test   eax,eax
c000ee51:	0f 94 c0             	sete   al
c000ee54:	84 c0                	test   al,al
c000ee56:	74 64                	je     c000eebc <VAS::VAS(bool)+0x22a>
c000ee58:	e8 7c 94 00 00       	call   c00182d9 <disableIRQs()>
c000ee5d:	e8 24 53 00 00       	call   c0014186 <thisCPU()>
c000ee62:	05 7c 09 00 00       	add    eax,0x97c
c000ee67:	83 ec 0c             	sub    esp,0xc
c000ee6a:	50                   	push   eax
c000ee6b:	e8 04 cb ff ff       	call   c000b974 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee70:	83 c4 10             	add    esp,0x10
c000ee73:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee78:	89 c3                	mov    ebx,eax
c000ee7a:	e8 07 53 00 00       	call   c0014186 <thisCPU()>
c000ee7f:	05 7c 09 00 00       	add    eax,0x97c
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	50                   	push   eax
c000ee88:	e8 e7 ca ff ff       	call   c000b974 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	83 ec 08             	sub    esp,0x8
c000ee93:	50                   	push   eax
c000ee94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee98:	e8 a9 f5 ff ff       	call   c000e446 <VAS::getPageTableEntry(unsigned long)>
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	8b 00                	mov    eax,DWORD PTR [eax]
c000eea2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eea7:	6a 11                	push   0x11
c000eea9:	53                   	push   ebx
c000eeaa:	50                   	push   eax
c000eeab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eeaf:	e8 30 f9 ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eeb4:	83 c4 10             	add    esp,0x10
c000eeb7:	e8 30 94 00 00       	call   c00182ec <enableIRQs()>
c000eebc:	90                   	nop
c000eebd:	83 c4 28             	add    esp,0x28
c000eec0:	5b                   	pop    ebx
c000eec1:	c3                   	ret    

c000eec2 <mapVASFirstTime>:
c000eec2:	55                   	push   ebp
c000eec3:	57                   	push   edi
c000eec4:	56                   	push   esi
c000eec5:	53                   	push   ebx
c000eec6:	83 ec 0c             	sub    esp,0xc
c000eec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eece:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eed1:	4a                   	dec    edx
c000eed2:	0f 84 99 00 00 00    	je     c000ef71 <mapVASFirstTime+0xaf>
c000eed8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eedb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eede:	c1 e5 15             	shl    ebp,0x15
c000eee1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eee6:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eeeb:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eef1:	29 eb                	sub    ebx,ebp
c000eef3:	29 ee                	sub    esi,ebp
c000eef5:	e8 dd d5 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000eefa:	83 ec 0c             	sub    esp,0xc
c000eefd:	68 03 04 00 00       	push   0x403
c000ef02:	6a 01                	push   0x1
c000ef04:	53                   	push   ebx
c000ef05:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef0b:	50                   	push   eax
c000ef0c:	57                   	push   edi
c000ef0d:	e8 c4 fb ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef12:	83 c4 20             	add    esp,0x20
c000ef15:	39 f3                	cmp    ebx,esi
c000ef17:	75 dc                	jne    c000eef5 <mapVASFirstTime+0x33>
c000ef19:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef1e:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef23:	29 e8                	sub    eax,ebp
c000ef25:	29 ee                	sub    esi,ebp
c000ef27:	89 c5                	mov    ebp,eax
c000ef29:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef2d:	19 db                	sbb    ebx,ebx
c000ef2f:	e8 a3 d5 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c000ef34:	83 e3 04             	and    ebx,0x4
c000ef37:	83 ec 0c             	sub    esp,0xc
c000ef3a:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef40:	53                   	push   ebx
c000ef41:	6a 01                	push   0x1
c000ef43:	56                   	push   esi
c000ef44:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef4a:	50                   	push   eax
c000ef4b:	57                   	push   edi
c000ef4c:	e8 85 fb ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef51:	83 c4 20             	add    esp,0x20
c000ef54:	39 f5                	cmp    ebp,esi
c000ef56:	75 d1                	jne    c000ef29 <mapVASFirstTime+0x67>
c000ef58:	e8 38 01 01 00       	call   c001f095 <CPU::readCR3()>
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	50                   	push   eax
c000ef61:	e8 41 01 01 00       	call   c001f0a7 <CPU::writeCR3(unsigned long)>
c000ef66:	83 c4 10             	add    esp,0x10
c000ef69:	83 c4 0c             	add    esp,0xc
c000ef6c:	5b                   	pop    ebx
c000ef6d:	5e                   	pop    esi
c000ef6e:	5f                   	pop    edi
c000ef6f:	5d                   	pop    ebp
c000ef70:	c3                   	ret    
c000ef71:	83 ec 0c             	sub    esp,0xc
c000ef74:	68 ad 11 02 c0       	push   0xc00211ad
c000ef79:	e8 b5 01 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000ef7e:	83 c4 10             	add    esp,0x10
c000ef81:	83 c4 0c             	add    esp,0xc
c000ef84:	5b                   	pop    ebx
c000ef85:	5e                   	pop    esi
c000ef86:	5f                   	pop    edi
c000ef87:	5d                   	pop    ebp
c000ef88:	c3                   	ret    

c000ef89 <__cxa_atexit>:
c000ef89:	31 c0                	xor    eax,eax
c000ef8b:	c3                   	ret    

c000ef8c <__cxa_finalize>:
c000ef8c:	c3                   	ret    

c000ef8d <__stack_chk_fail>:
c000ef8d:	55                   	push   ebp
c000ef8e:	89 e5                	mov    ebp,esp
c000ef90:	83 ec 10             	sub    esp,0x10
c000ef93:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef96:	68 c6 11 02 c0       	push   0xc00211c6
c000ef9b:	e8 93 01 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000efa0:	58                   	pop    eax
c000efa1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efa4:	5a                   	pop    edx
c000efa5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efa8:	68 c6 11 02 c0       	push   0xc00211c6
c000efad:	e8 81 01 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000efb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efb5:	59                   	pop    ecx
c000efb6:	5a                   	pop    edx
c000efb7:	8b 00                	mov    eax,DWORD PTR [eax]
c000efb9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efbc:	68 c6 11 02 c0       	push   0xc00211c6
c000efc1:	e8 6d 01 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000efc6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efc9:	59                   	pop    ecx
c000efca:	5a                   	pop    edx
c000efcb:	8b 00                	mov    eax,DWORD PTR [eax]
c000efcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efcf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efd2:	68 c6 11 02 c0       	push   0xc00211c6
c000efd7:	e8 57 01 00 00       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c000efdc:	c7 04 24 ce 11 02 c0 	mov    DWORD PTR [esp],0xc00211ce
c000efe3:	e8 0a 63 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000efe8:	83 c4 10             	add    esp,0x10
c000efeb:	c9                   	leave  
c000efec:	c3                   	ret    

c000efed <__cxa_pure_virtual>:
c000efed:	83 ec 18             	sub    esp,0x18
c000eff0:	68 e6 11 02 c0       	push   0xc00211e6
c000eff5:	e8 f8 62 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c000effa:	83 c4 1c             	add    esp,0x1c
c000effd:	c3                   	ret    

c000effe <operator new(unsigned long)>:
c000effe:	e9 fe ce ff ff       	jmp    c000bf01 <malloc>

c000f003 <operator new[](unsigned long)>:
c000f003:	e9 f9 ce ff ff       	jmp    c000bf01 <malloc>

c000f008 <operator delete(void*)>:
c000f008:	e9 14 cf ff ff       	jmp    c000bf21 <rfree>

c000f00d <operator delete(void*, unsigned long)>:
c000f00d:	e9 0f cf ff ff       	jmp    c000bf21 <rfree>

c000f012 <operator delete[](void*)>:
c000f012:	e9 0a cf ff ff       	jmp    c000bf21 <rfree>

c000f017 <operator delete[](void*, unsigned long)>:
c000f017:	e9 05 cf ff ff       	jmp    c000bf21 <rfree>

c000f01c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f01c:	57                   	push   edi
c000f01d:	56                   	push   esi
c000f01e:	be fd 11 02 c0       	mov    esi,0xc00211fd
c000f023:	53                   	push   ebx
c000f024:	83 ec 40             	sub    esp,0x40
c000f027:	a0 fc 11 02 c0       	mov    al,ds:0xc00211fc
c000f02c:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f030:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f034:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f038:	b8 3e 00 00 00       	mov    eax,0x3e
c000f03d:	f7 c7 02 00 00 00    	test   edi,0x2
c000f043:	75 69                	jne    c000f0ae <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f045:	89 c1                	mov    ecx,eax
c000f047:	c1 e9 02             	shr    ecx,0x2
c000f04a:	fc                   	cld    
c000f04b:	31 d2                	xor    edx,edx
c000f04d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f04f:	a8 02                	test   al,0x2
c000f051:	74 0b                	je     c000f05e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f053:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f056:	66 89 17             	mov    WORD PTR [edi],dx
c000f059:	ba 02 00 00 00       	mov    edx,0x2
c000f05e:	a8 01                	test   al,0x1
c000f060:	74 06                	je     c000f068 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f062:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f065:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f068:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f06c:	83 f9 3e             	cmp    ecx,0x3e
c000f06f:	7e 05                	jle    c000f076 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f071:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f076:	89 df                	mov    edi,ebx
c000f078:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f07c:	eb 02                	jmp    c000f080 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f07e:	89 c7                	mov    edi,eax
c000f080:	31 d2                	xor    edx,edx
c000f082:	89 f8                	mov    eax,edi
c000f084:	46                   	inc    esi
c000f085:	f7 f1                	div    ecx
c000f087:	39 cf                	cmp    edi,ecx
c000f089:	73 f3                	jae    c000f07e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f08b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f08e:	eb 02                	jmp    c000f092 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f090:	89 c3                	mov    ebx,eax
c000f092:	31 d2                	xor    edx,edx
c000f094:	89 d8                	mov    eax,ebx
c000f096:	f7 f1                	div    ecx
c000f098:	4e                   	dec    esi
c000f099:	39 cb                	cmp    ebx,ecx
c000f09b:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f09f:	88 16                	mov    BYTE PTR [esi],dl
c000f0a1:	73 ed                	jae    c000f090 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0a7:	83 c4 40             	add    esp,0x40
c000f0aa:	5b                   	pop    ebx
c000f0ab:	5e                   	pop    esi
c000f0ac:	5f                   	pop    edi
c000f0ad:	c3                   	ret    
c000f0ae:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0b1:	83 c7 02             	add    edi,0x2
c000f0b4:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0b8:	83 c6 02             	add    esi,0x2
c000f0bb:	83 e8 02             	sub    eax,0x2
c000f0be:	eb 85                	jmp    c000f045 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0c0 <Dbg::logc(char)>:
c000f0c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0c4:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0c9:	ec                   	in     al,dx
c000f0ca:	a8 20                	test   al,0x20
c000f0cc:	74 fb                	je     c000f0c9 <Dbg::logc(char)+0x9>
c000f0ce:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0d3:	88 c8                	mov    al,cl
c000f0d5:	ee                   	out    dx,al
c000f0d6:	c3                   	ret    

c000f0d7 <Dbg::logs(char*)>:
c000f0d7:	53                   	push   ebx
c000f0d8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0dc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0df:	84 c0                	test   al,al
c000f0e1:	74 0f                	je     c000f0f2 <Dbg::logs(char*)+0x1b>
c000f0e3:	43                   	inc    ebx
c000f0e4:	50                   	push   eax
c000f0e5:	e8 d6 ff ff ff       	call   c000f0c0 <Dbg::logc(char)>
c000f0ea:	5a                   	pop    edx
c000f0eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0ee:	84 c0                	test   al,al
c000f0f0:	75 f1                	jne    c000f0e3 <Dbg::logs(char*)+0xc>
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <Dbg::logWriteInt(unsigned int)>:
c000f0f4:	83 ec 10             	sub    esp,0x10
c000f0f7:	6a 0a                	push   0xa
c000f0f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0fd:	50                   	push   eax
c000f0fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f102:	50                   	push   eax
c000f103:	e8 14 ff ff ff       	call   c000f01c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f108:	50                   	push   eax
c000f109:	e8 c9 ff ff ff       	call   c000f0d7 <Dbg::logs(char*)>
c000f10e:	83 c4 20             	add    esp,0x20
c000f111:	c3                   	ret    

c000f112 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f112:	83 ec 10             	sub    esp,0x10
c000f115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f119:	50                   	push   eax
c000f11a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f11e:	50                   	push   eax
c000f11f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f123:	52                   	push   edx
c000f124:	e8 f3 fe ff ff       	call   c000f01c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f129:	50                   	push   eax
c000f12a:	e8 a8 ff ff ff       	call   c000f0d7 <Dbg::logs(char*)>
c000f12f:	83 c4 20             	add    esp,0x20
c000f132:	c3                   	ret    

c000f133 <Dbg::kprintf(char const*, ...)>:
c000f133:	55                   	push   ebp
c000f134:	57                   	push   edi
c000f135:	56                   	push   esi
c000f136:	53                   	push   ebx
c000f137:	83 ec 0c             	sub    esp,0xc
c000f13a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f13e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f142:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f146:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f149:	84 c0                	test   al,al
c000f14b:	74 4d                	je     c000f19a <Dbg::kprintf(char const*, ...)+0x67>
c000f14d:	31 ff                	xor    edi,edi
c000f14f:	8d 77 01             	lea    esi,[edi+0x1]
c000f152:	3c 25                	cmp    al,0x25
c000f154:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f157:	0f 85 ec 00 00 00    	jne    c000f249 <Dbg::kprintf(char const*, ...)+0x116>
c000f15d:	83 c7 02             	add    edi,0x2
c000f160:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f163:	83 e8 25             	sub    eax,0x25
c000f166:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f169:	3c 53                	cmp    al,0x53
c000f16b:	0f 87 c0 00 00 00    	ja     c000f231 <Dbg::kprintf(char const*, ...)+0xfe>
c000f171:	25 ff 00 00 00       	and    eax,0xff
c000f176:	ff 24 85 3c 12 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdedc4]
c000f17d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f181:	89 c8                	mov    eax,ecx
c000f183:	83 c1 04             	add    ecx,0x4
c000f186:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f18a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f18c:	50                   	push   eax
c000f18d:	e8 45 ff ff ff       	call   c000f0d7 <Dbg::logs(char*)>
c000f192:	58                   	pop    eax
c000f193:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f196:	84 c0                	test   al,al
c000f198:	75 b5                	jne    c000f14f <Dbg::kprintf(char const*, ...)+0x1c>
c000f19a:	83 c4 0c             	add    esp,0xc
c000f19d:	5b                   	pop    ebx
c000f19e:	5e                   	pop    esi
c000f19f:	5f                   	pop    edi
c000f1a0:	5d                   	pop    ebp
c000f1a1:	c3                   	ret    
c000f1a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1a6:	89 d0                	mov    eax,edx
c000f1a8:	83 c2 04             	add    edx,0x4
c000f1ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b1:	50                   	push   eax
c000f1b2:	e8 3d ff ff ff       	call   c000f0f4 <Dbg::logWriteInt(unsigned int)>
c000f1b7:	58                   	pop    eax
c000f1b8:	eb d9                	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f1ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1be:	89 d0                	mov    eax,edx
c000f1c0:	83 c2 04             	add    edx,0x4
c000f1c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1c7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1ca:	50                   	push   eax
c000f1cb:	e8 f0 fe ff ff       	call   c000f0c0 <Dbg::logc(char)>
c000f1d0:	58                   	pop    eax
c000f1d1:	eb c0                	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f1d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1d7:	89 c8                	mov    eax,ecx
c000f1d9:	83 c1 04             	add    ecx,0x4
c000f1dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1e0:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f1e2:	55                   	push   ebp
c000f1e3:	e8 0c ff ff ff       	call   c000f0f4 <Dbg::logWriteInt(unsigned int)>
c000f1e8:	58                   	pop    eax
c000f1e9:	eb a8                	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f1eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1ef:	89 c8                	mov    eax,ecx
c000f1f1:	83 c1 04             	add    ecx,0x4
c000f1f4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1f8:	6a 10                	push   0x10
c000f1fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1fc:	51                   	push   ecx
c000f1fd:	e8 10 ff ff ff       	call   c000f112 <Dbg::logWriteIntBase(unsigned int, int)>
c000f202:	5d                   	pop    ebp
c000f203:	58                   	pop    eax
c000f204:	eb 8d                	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f206:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f20a:	89 d0                	mov    eax,edx
c000f20c:	83 c2 08             	add    edx,0x8
c000f20f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f213:	6a 10                	push   0x10
c000f215:	8b 00                	mov    eax,DWORD PTR [eax]
c000f217:	50                   	push   eax
c000f218:	e8 f5 fe ff ff       	call   c000f112 <Dbg::logWriteIntBase(unsigned int, int)>
c000f21d:	58                   	pop    eax
c000f21e:	5a                   	pop    edx
c000f21f:	e9 6f ff ff ff       	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f224:	6a 25                	push   0x25
c000f226:	e8 95 fe ff ff       	call   c000f0c0 <Dbg::logc(char)>
c000f22b:	5a                   	pop    edx
c000f22c:	e9 62 ff ff ff       	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f231:	6a 25                	push   0x25
c000f233:	e8 88 fe ff ff       	call   c000f0c0 <Dbg::logc(char)>
c000f238:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f23c:	50                   	push   eax
c000f23d:	e8 7e fe ff ff       	call   c000f0c0 <Dbg::logc(char)>
c000f242:	5a                   	pop    edx
c000f243:	59                   	pop    ecx
c000f244:	e9 4a ff ff ff       	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f249:	50                   	push   eax
c000f24a:	89 f7                	mov    edi,esi
c000f24c:	e8 6f fe ff ff       	call   c000f0c0 <Dbg::logc(char)>
c000f251:	89 ee                	mov    esi,ebp
c000f253:	58                   	pop    eax
c000f254:	e9 3a ff ff ff       	jmp    c000f193 <Dbg::kprintf(char const*, ...)+0x60>
c000f259:	90                   	nop

c000f25a <File::read(unsigned long long, void*, int*)>:
c000f25a:	53                   	push   ebx
c000f25b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f25f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f263:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f26a:	3c 19                	cmp    al,0x19
c000f26c:	77 35                	ja     c000f2a3 <File::read(unsigned long long, void*, int*)+0x49>
c000f26e:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c000f275:	85 c0                	test   eax,eax
c000f277:	74 2a                	je     c000f2a3 <File::read(unsigned long long, void*, int*)+0x49>
c000f279:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f27f:	85 c0                	test   eax,eax
c000f281:	74 20                	je     c000f2a3 <File::read(unsigned long long, void*, int*)+0x49>
c000f283:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f287:	74 21                	je     c000f2aa <File::read(unsigned long long, void*, int*)+0x50>
c000f289:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f28b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f28f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f29d:	5b                   	pop    ebx
c000f29e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2a1:	ff e0                	jmp    eax
c000f2a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f2a8:	eb 05                	jmp    c000f2af <File::read(unsigned long long, void*, int*)+0x55>
c000f2aa:	b8 05 00 00 00       	mov    eax,0x5
c000f2af:	5b                   	pop    ebx
c000f2b0:	c3                   	ret    
c000f2b1:	90                   	nop

c000f2b2 <File::write(unsigned long long, void*, int*)>:
c000f2b2:	53                   	push   ebx
c000f2b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2bb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2c2:	3c 19                	cmp    al,0x19
c000f2c4:	77 35                	ja     c000f2fb <File::write(unsigned long long, void*, int*)+0x49>
c000f2c6:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c000f2cd:	85 c0                	test   eax,eax
c000f2cf:	74 2a                	je     c000f2fb <File::write(unsigned long long, void*, int*)+0x49>
c000f2d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2d7:	85 c0                	test   eax,eax
c000f2d9:	74 20                	je     c000f2fb <File::write(unsigned long long, void*, int*)+0x49>
c000f2db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2df:	74 21                	je     c000f302 <File::write(unsigned long long, void*, int*)+0x50>
c000f2e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2e7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2f5:	5b                   	pop    ebx
c000f2f6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2f9:	ff e0                	jmp    eax
c000f2fb:	b8 0b 00 00 00       	mov    eax,0xb
c000f300:	eb 05                	jmp    c000f307 <File::write(unsigned long long, void*, int*)+0x55>
c000f302:	b8 05 00 00 00       	mov    eax,0x5
c000f307:	5b                   	pop    ebx
c000f308:	c3                   	ret    
c000f309:	90                   	nop

c000f30a <Directory::read(unsigned long long, void*, int*)>:
c000f30a:	53                   	push   ebx
c000f30b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f30f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f313:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f31a:	3c 19                	cmp    al,0x19
c000f31c:	77 35                	ja     c000f353 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f31e:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c000f325:	85 c0                	test   eax,eax
c000f327:	74 2a                	je     c000f353 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f329:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f32f:	85 c0                	test   eax,eax
c000f331:	74 20                	je     c000f353 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f333:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f337:	74 21                	je     c000f35a <Directory::read(unsigned long long, void*, int*)+0x50>
c000f339:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f33b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f33f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f345:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f349:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f34d:	5b                   	pop    ebx
c000f34e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f351:	ff e0                	jmp    eax
c000f353:	b8 0b 00 00 00       	mov    eax,0xb
c000f358:	eb 05                	jmp    c000f35f <Directory::read(unsigned long long, void*, int*)+0x55>
c000f35a:	b8 05 00 00 00       	mov    eax,0x5
c000f35f:	5b                   	pop    ebx
c000f360:	c3                   	ret    
c000f361:	90                   	nop

c000f362 <Directory::write(unsigned long long, void*, int*)>:
c000f362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f366:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f36d:	b8 0b 00 00 00       	mov    eax,0xb
c000f372:	80 fa 19             	cmp    dl,0x19
c000f375:	77 18                	ja     c000f38f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f377:	8b 14 95 00 46 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdba00]
c000f37e:	85 d2                	test   edx,edx
c000f380:	74 0d                	je     c000f38f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f382:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f389:	19 c0                	sbb    eax,eax
c000f38b:	83 e0 0a             	and    eax,0xa
c000f38e:	40                   	inc    eax
c000f38f:	c3                   	ret    

c000f390 <File::isAtty()>:
c000f390:	31 c0                	xor    eax,eax
c000f392:	c3                   	ret    
c000f393:	90                   	nop

c000f394 <Directory::isAtty()>:
c000f394:	31 c0                	xor    eax,eax
c000f396:	c3                   	ret    
c000f397:	90                   	nop

c000f398 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f398:	b8 0a 00 00 00       	mov    eax,0xa
c000f39d:	c3                   	ret    

c000f39e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f39e:	b8 0a 00 00 00       	mov    eax,0xa
c000f3a3:	c3                   	ret    

c000f3a4 <File::~File()>:
c000f3a4:	83 ec 0c             	sub    esp,0xc
c000f3a7:	ba f8 13 02 c0       	mov    edx,0xc00213f8
c000f3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b0:	89 10                	mov    DWORD PTR [eax],edx
c000f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b6:	83 ec 0c             	sub    esp,0xc
c000f3b9:	50                   	push   eax
c000f3ba:	e8 c5 ea ff ff       	call   c000de84 <UnixFile::~UnixFile()>
c000f3bf:	83 c4 10             	add    esp,0x10
c000f3c2:	90                   	nop
c000f3c3:	83 c4 0c             	add    esp,0xc
c000f3c6:	c3                   	ret    
c000f3c7:	90                   	nop

c000f3c8 <File::~File()>:
c000f3c8:	83 ec 0c             	sub    esp,0xc
c000f3cb:	83 ec 0c             	sub    esp,0xc
c000f3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3d2:	e8 cd ff ff ff       	call   c000f3a4 <File::~File()>
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	83 ec 08             	sub    esp,0x8
c000f3dd:	68 14 01 00 00       	push   0x114
c000f3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3e6:	e8 22 fc ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c000f3eb:	83 c4 10             	add    esp,0x10
c000f3ee:	83 c4 0c             	add    esp,0xc
c000f3f1:	c3                   	ret    

c000f3f2 <Directory::~Directory()>:
c000f3f2:	83 ec 0c             	sub    esp,0xc
c000f3f5:	ba 14 14 02 c0       	mov    edx,0xc0021414
c000f3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3fe:	89 10                	mov    DWORD PTR [eax],edx
c000f400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f404:	83 ec 0c             	sub    esp,0xc
c000f407:	50                   	push   eax
c000f408:	e8 77 ea ff ff       	call   c000de84 <UnixFile::~UnixFile()>
c000f40d:	83 c4 10             	add    esp,0x10
c000f410:	90                   	nop
c000f411:	83 c4 0c             	add    esp,0xc
c000f414:	c3                   	ret    
c000f415:	90                   	nop

c000f416 <Directory::~Directory()>:
c000f416:	83 ec 0c             	sub    esp,0xc
c000f419:	83 ec 0c             	sub    esp,0xc
c000f41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f420:	e8 cd ff ff ff       	call   c000f3f2 <Directory::~Directory()>
c000f425:	83 c4 10             	add    esp,0x10
c000f428:	83 ec 08             	sub    esp,0x8
c000f42b:	68 14 01 00 00       	push   0x114
c000f430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f434:	e8 d4 fb ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c000f439:	83 c4 10             	add    esp,0x10
c000f43c:	83 c4 0c             	add    esp,0xc
c000f43f:	c3                   	ret    

c000f440 <Filesystem::Filesystem()>:
c000f440:	ba 94 13 02 c0       	mov    edx,0xc0021394
c000f445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f449:	89 10                	mov    DWORD PTR [eax],edx
c000f44b:	8b 15 68 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024168
c000f451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f455:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f45c:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c000f461:	90                   	nop
c000f462:	c3                   	ret    
c000f463:	90                   	nop

c000f464 <Filesystem::~Filesystem()>:
c000f464:	ba 94 13 02 c0       	mov    edx,0xc0021394
c000f469:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46d:	89 10                	mov    DWORD PTR [eax],edx
c000f46f:	90                   	nop
c000f470:	c3                   	ret    
c000f471:	90                   	nop

c000f472 <Filesystem::~Filesystem()>:
c000f472:	83 ec 0c             	sub    esp,0xc
c000f475:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f479:	e8 e6 ff ff ff       	call   c000f464 <Filesystem::~Filesystem()>
c000f47e:	83 c4 04             	add    esp,0x4
c000f481:	83 ec 08             	sub    esp,0x8
c000f484:	6a 08                	push   0x8
c000f486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f48a:	e8 7e fb ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c000f48f:	83 c4 10             	add    esp,0x10
c000f492:	83 c4 0c             	add    esp,0xc
c000f495:	c3                   	ret    

c000f496 <initVFS()>:
c000f496:	83 ec 18             	sub    esp,0x18
c000f499:	6a 08                	push   0x8
c000f49b:	e8 5e fb ff ff       	call   c000effe <operator new(unsigned long)>
c000f4a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4a3:	e8 6a ad 00 00       	call   c001a212 <FAT::FAT()>
c000f4a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4af:	e8 4a fb ff ff       	call   c000effe <operator new(unsigned long)>
c000f4b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4b7:	e8 f6 bf 00 00       	call   c001b4b2 <ISO9660::ISO9660()>
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <standardiseFiles(char*, char const*, char const*)>:
c000f4c0:	55                   	push   ebp
c000f4c1:	57                   	push   edi
c000f4c2:	56                   	push   esi
c000f4c3:	53                   	push   ebx
c000f4c4:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4df:	68 00 04 00 00       	push   0x400
c000f4e4:	6a 00                	push   0x0
c000f4e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4ea:	56                   	push   esi
c000f4eb:	e8 18 11 ff ff       	call   c0000608 <memset>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4f7:	75 0b                	jne    c000f504 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4f9:	50                   	push   eax
c000f4fa:	50                   	push   eax
c000f4fb:	57                   	push   edi
c000f4fc:	56                   	push   esi
c000f4fd:	e8 a5 11 ff ff       	call   c00006a7 <strcpy>
c000f502:	eb 41                	jmp    c000f545 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f504:	8a 07                	mov    al,BYTE PTR [edi]
c000f506:	3c 5c                	cmp    al,0x5c
c000f508:	74 04                	je     c000f50e <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f50a:	3c 2f                	cmp    al,0x2f
c000f50c:	75 18                	jne    c000f526 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f50e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f511:	3c 60                	cmp    al,0x60
c000f513:	7e 03                	jle    c000f518 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f515:	83 e8 20             	sub    eax,0x20
c000f518:	88 04 24             	mov    BYTE PTR [esp],al
c000f51b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f522:	50                   	push   eax
c000f523:	50                   	push   eax
c000f524:	eb 18                	jmp    c000f53e <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f526:	50                   	push   eax
c000f527:	50                   	push   eax
c000f528:	55                   	push   ebp
c000f529:	56                   	push   esi
c000f52a:	e8 78 11 ff ff       	call   c00006a7 <strcpy>
c000f52f:	5a                   	pop    edx
c000f530:	59                   	pop    ecx
c000f531:	68 c0 26 02 c0       	push   0xc00226c0
c000f536:	56                   	push   esi
c000f537:	e8 22 12 ff ff       	call   c000075e <strcat>
c000f53c:	5d                   	pop    ebp
c000f53d:	58                   	pop    eax
c000f53e:	57                   	push   edi
c000f53f:	56                   	push   esi
c000f540:	e8 19 12 ff ff       	call   c000075e <strcat>
c000f545:	83 c4 10             	add    esp,0x10
c000f548:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f54b:	3c 60                	cmp    al,0x60
c000f54d:	7e 03                	jle    c000f552 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f54f:	83 e8 20             	sub    eax,0x20
c000f552:	88 04 24             	mov    BYTE PTR [esp],al
c000f555:	88 03                	mov    BYTE PTR [ebx],al
c000f557:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f55e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f564:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f568:	bf 03 00 00 00       	mov    edi,0x3
c000f56d:	b8 03 00 00 00       	mov    eax,0x3
c000f572:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f575:	84 d2                	test   dl,dl
c000f577:	0f 84 91 00 00 00    	je     c000f60e <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f57d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f580:	80 fa 2f             	cmp    dl,0x2f
c000f583:	74 05                	je     c000f58a <standardiseFiles(char*, char const*, char const*)+0xca>
c000f585:	80 fa 5c             	cmp    dl,0x5c
c000f588:	75 12                	jne    c000f59c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f58a:	89 c5                	mov    ebp,eax
c000f58c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f591:	74 09                	je     c000f59c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f593:	40                   	inc    eax
c000f594:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f598:	89 cf                	mov    edi,ecx
c000f59a:	eb d6                	jmp    c000f572 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f59c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5a1:	75 5b                	jne    c000f5fe <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5a3:	80 fa 2e             	cmp    dl,0x2e
c000f5a6:	75 56                	jne    c000f5fe <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5ac:	74 19                	je     c000f5c7 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5b3:	74 53                	je     c000f608 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5b5:	89 f9                	mov    ecx,edi
c000f5b7:	41                   	inc    ecx
c000f5b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5bb:	80 fa 5c             	cmp    dl,0x5c
c000f5be:	74 f7                	je     c000f5b7 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5c0:	80 fa 2f             	cmp    dl,0x2f
c000f5c3:	74 f2                	je     c000f5b7 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5c5:	eb d1                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5cc:	74 3a                	je     c000f608 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5ce:	83 f8 03             	cmp    eax,0x3
c000f5d1:	74 c5                	je     c000f598 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5d3:	41                   	inc    ecx
c000f5d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5d7:	80 fa 2f             	cmp    dl,0x2f
c000f5da:	74 f7                	je     c000f5d3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5dc:	80 fa 5c             	cmp    dl,0x5c
c000f5df:	74 f2                	je     c000f5d3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5e1:	48                   	dec    eax
c000f5e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5e6:	75 06                	jne    c000f5ee <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5ec:	eb f3                	jmp    c000f5e1 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5f2:	74 07                	je     c000f5fb <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5f8:	48                   	dec    eax
c000f5f9:	eb f3                	jmp    c000f5ee <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5fb:	40                   	inc    eax
c000f5fc:	eb 9a                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5fe:	80 fa 2f             	cmp    dl,0x2f
c000f601:	74 95                	je     c000f598 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f603:	80 fa 5c             	cmp    dl,0x5c
c000f606:	74 90                	je     c000f598 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f608:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f60b:	40                   	inc    eax
c000f60c:	eb 8a                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f60e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f612:	83 ec 0c             	sub    esp,0xc
c000f615:	53                   	push   ebx
c000f616:	e8 0a 10 ff ff       	call   c0000625 <strlen>
c000f61b:	83 c4 10             	add    esp,0x10
c000f61e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f623:	75 26                	jne    c000f64b <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f625:	83 ec 0c             	sub    esp,0xc
c000f628:	53                   	push   ebx
c000f629:	e8 f7 0f ff ff       	call   c0000625 <strlen>
c000f62e:	83 c4 10             	add    esp,0x10
c000f631:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f636:	74 26                	je     c000f65e <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	53                   	push   ebx
c000f63c:	e8 e4 0f ff ff       	call   c0000625 <strlen>
c000f641:	83 c4 10             	add    esp,0x10
c000f644:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f649:	eb c7                	jmp    c000f612 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f64b:	83 ec 0c             	sub    esp,0xc
c000f64e:	53                   	push   ebx
c000f64f:	e8 d1 0f ff ff       	call   c0000625 <strlen>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f65c:	74 c7                	je     c000f625 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f65e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f664:	5b                   	pop    ebx
c000f665:	5e                   	pop    esi
c000f666:	5f                   	pop    edi
c000f667:	5d                   	pop    ebp
c000f668:	c3                   	ret    
c000f669:	90                   	nop

c000f66a <File::File(char const*, Process*)>:
c000f66a:	83 ec 0c             	sub    esp,0xc
c000f66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f671:	83 ec 08             	sub    esp,0x8
c000f674:	6a 00                	push   0x0
c000f676:	50                   	push   eax
c000f677:	e8 66 e6 ff ff       	call   c000dce2 <UnixFile::UnixFile(int)>
c000f67c:	83 c4 10             	add    esp,0x10
c000f67f:	ba f8 13 02 c0       	mov    edx,0xc00213f8
c000f684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f688:	89 10                	mov    DWORD PTR [eax],edx
c000f68a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f68e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f698:	83 c0 0d             	add    eax,0xd
c000f69b:	83 ec 04             	sub    esp,0x4
c000f69e:	52                   	push   edx
c000f69f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a3:	50                   	push   eax
c000f6a4:	e8 17 fe ff ff       	call   c000f4c0 <standardiseFiles(char*, char const*, char const*)>
c000f6a9:	83 c4 10             	add    esp,0x10
c000f6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6b3:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6c8:	90                   	nop
c000f6c9:	83 c4 0c             	add    esp,0xc
c000f6cc:	c3                   	ret    
c000f6cd:	90                   	nop

c000f6ce <File::open(FileOpenMode)>:
c000f6ce:	53                   	push   ebx
c000f6cf:	b8 0b 00 00 00       	mov    eax,0xb
c000f6d4:	83 ec 08             	sub    esp,0x8
c000f6d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6db:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6e2:	80 fa 19             	cmp    dl,0x19
c000f6e5:	77 40                	ja     c000f727 <File::open(FileOpenMode)+0x59>
c000f6e7:	8b 14 95 00 46 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdba00]
c000f6ee:	85 d2                	test   edx,edx
c000f6f0:	74 35                	je     c000f727 <File::open(FileOpenMode)+0x59>
c000f6f2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6f8:	85 d2                	test   edx,edx
c000f6fa:	74 2b                	je     c000f727 <File::open(FileOpenMode)+0x59>
c000f6fc:	b8 06 00 00 00       	mov    eax,0x6
c000f701:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f705:	75 20                	jne    c000f727 <File::open(FileOpenMode)+0x59>
c000f707:	8b 02                	mov    eax,DWORD PTR [edx]
c000f709:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f70f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f713:	51                   	push   ecx
c000f714:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f717:	51                   	push   ecx
c000f718:	52                   	push   edx
c000f719:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f71c:	83 c4 10             	add    esp,0x10
c000f71f:	85 c0                	test   eax,eax
c000f721:	75 04                	jne    c000f727 <File::open(FileOpenMode)+0x59>
c000f723:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f727:	83 c4 08             	add    esp,0x8
c000f72a:	5b                   	pop    ebx
c000f72b:	c3                   	ret    

c000f72c <File::close()>:
c000f72c:	53                   	push   ebx
c000f72d:	b8 0b 00 00 00       	mov    eax,0xb
c000f732:	83 ec 08             	sub    esp,0x8
c000f735:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f739:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f740:	80 fa 19             	cmp    dl,0x19
c000f743:	77 41                	ja     c000f786 <File::close()+0x5a>
c000f745:	8b 1c 95 00 46 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdba00]
c000f74c:	85 db                	test   ebx,ebx
c000f74e:	74 36                	je     c000f786 <File::close()+0x5a>
c000f750:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f757:	74 2d                	je     c000f786 <File::close()+0x5a>
c000f759:	b8 05 00 00 00       	mov    eax,0x5
c000f75e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f762:	74 22                	je     c000f786 <File::close()+0x5a>
c000f764:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f768:	8b 04 95 00 46 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdba00]
c000f76f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f775:	53                   	push   ebx
c000f776:	53                   	push   ebx
c000f777:	8b 10                	mov    edx,DWORD PTR [eax]
c000f779:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f77f:	50                   	push   eax
c000f780:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f783:	83 c4 10             	add    esp,0x10
c000f786:	83 c4 08             	add    esp,0x8
c000f789:	5b                   	pop    ebx
c000f78a:	c3                   	ret    
c000f78b:	90                   	nop

c000f78c <File::seek(unsigned long long)>:
c000f78c:	56                   	push   esi
c000f78d:	b8 0b 00 00 00       	mov    eax,0xb
c000f792:	53                   	push   ebx
c000f793:	51                   	push   ecx
c000f794:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f798:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f79c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7a0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7a7:	80 fa 19             	cmp    dl,0x19
c000f7aa:	77 31                	ja     c000f7dd <File::seek(unsigned long long)+0x51>
c000f7ac:	8b 14 95 00 46 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdba00]
c000f7b3:	85 d2                	test   edx,edx
c000f7b5:	74 26                	je     c000f7dd <File::seek(unsigned long long)+0x51>
c000f7b7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7bd:	85 d2                	test   edx,edx
c000f7bf:	74 1c                	je     c000f7dd <File::seek(unsigned long long)+0x51>
c000f7c1:	b8 05 00 00 00       	mov    eax,0x5
c000f7c6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7ca:	74 11                	je     c000f7dd <File::seek(unsigned long long)+0x51>
c000f7cc:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7ce:	53                   	push   ebx
c000f7cf:	51                   	push   ecx
c000f7d0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7d6:	52                   	push   edx
c000f7d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7da:	83 c4 10             	add    esp,0x10
c000f7dd:	5a                   	pop    edx
c000f7de:	5b                   	pop    ebx
c000f7df:	5e                   	pop    esi
c000f7e0:	c3                   	ret    
c000f7e1:	90                   	nop

c000f7e2 <File::tell(unsigned long long*)>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	b8 0b 00 00 00       	mov    eax,0xb
c000f7ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7ee:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7f5:	80 fa 19             	cmp    dl,0x19
c000f7f8:	77 34                	ja     c000f82e <File::tell(unsigned long long*)+0x4c>
c000f7fa:	8b 14 95 00 46 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdba00]
c000f801:	85 d2                	test   edx,edx
c000f803:	74 29                	je     c000f82e <File::tell(unsigned long long*)+0x4c>
c000f805:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f80b:	85 d2                	test   edx,edx
c000f80d:	74 1f                	je     c000f82e <File::tell(unsigned long long*)+0x4c>
c000f80f:	b8 05 00 00 00       	mov    eax,0x5
c000f814:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f818:	74 14                	je     c000f82e <File::tell(unsigned long long*)+0x4c>
c000f81a:	50                   	push   eax
c000f81b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f81d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f821:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f827:	52                   	push   edx
c000f828:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f82b:	83 c4 10             	add    esp,0x10
c000f82e:	83 c4 0c             	add    esp,0xc
c000f831:	c3                   	ret    

c000f832 <File::rewind()>:
c000f832:	83 ec 10             	sub    esp,0x10
c000f835:	6a 00                	push   0x0
c000f837:	6a 00                	push   0x0
c000f839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83d:	e8 4a ff ff ff       	call   c000f78c <File::seek(unsigned long long)>
c000f842:	83 c4 1c             	add    esp,0x1c
c000f845:	c3                   	ret    

c000f846 <File::unlink()>:
c000f846:	83 ec 0c             	sub    esp,0xc
c000f849:	b8 0b 00 00 00       	mov    eax,0xb
c000f84e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f852:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f859:	80 f9 19             	cmp    cl,0x19
c000f85c:	77 2f                	ja     c000f88d <File::unlink()+0x47>
c000f85e:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000f865:	85 c9                	test   ecx,ecx
c000f867:	74 24                	je     c000f88d <File::unlink()+0x47>
c000f869:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f86f:	85 c9                	test   ecx,ecx
c000f871:	74 1a                	je     c000f88d <File::unlink()+0x47>
c000f873:	b8 06 00 00 00       	mov    eax,0x6
c000f878:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f87c:	75 0f                	jne    c000f88d <File::unlink()+0x47>
c000f87e:	50                   	push   eax
c000f87f:	83 c2 0d             	add    edx,0xd
c000f882:	50                   	push   eax
c000f883:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f885:	52                   	push   edx
c000f886:	51                   	push   ecx
c000f887:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	83 c4 0c             	add    esp,0xc
c000f890:	c3                   	ret    
c000f891:	90                   	nop

c000f892 <File::rename(char const*)>:
c000f892:	83 ec 0c             	sub    esp,0xc
c000f895:	b8 0b 00 00 00       	mov    eax,0xb
c000f89a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f89e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8a5:	80 f9 19             	cmp    cl,0x19
c000f8a8:	77 32                	ja     c000f8dc <File::rename(char const*)+0x4a>
c000f8aa:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000f8b1:	85 c9                	test   ecx,ecx
c000f8b3:	74 27                	je     c000f8dc <File::rename(char const*)+0x4a>
c000f8b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8bb:	85 c9                	test   ecx,ecx
c000f8bd:	74 1d                	je     c000f8dc <File::rename(char const*)+0x4a>
c000f8bf:	b8 06 00 00 00       	mov    eax,0x6
c000f8c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8c8:	75 12                	jne    c000f8dc <File::rename(char const*)+0x4a>
c000f8ca:	50                   	push   eax
c000f8cb:	83 c2 0d             	add    edx,0xd
c000f8ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8d4:	52                   	push   edx
c000f8d5:	51                   	push   ecx
c000f8d6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8d9:	83 c4 10             	add    esp,0x10
c000f8dc:	83 c4 0c             	add    esp,0xc
c000f8df:	c3                   	ret    

c000f8e0 <File::chfatattr(unsigned char, unsigned char)>:
c000f8e0:	57                   	push   edi
c000f8e1:	b8 0b 00 00 00       	mov    eax,0xb
c000f8e6:	56                   	push   esi
c000f8e7:	53                   	push   ebx
c000f8e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8fb:	80 f9 19             	cmp    cl,0x19
c000f8fe:	77 37                	ja     c000f937 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f900:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000f907:	85 c9                	test   ecx,ecx
c000f909:	74 2c                	je     c000f937 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f90b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f911:	85 c9                	test   ecx,ecx
c000f913:	74 22                	je     c000f937 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f915:	b8 06 00 00 00       	mov    eax,0x6
c000f91a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f91e:	75 17                	jne    c000f937 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f920:	89 f0                	mov    eax,esi
c000f922:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f924:	0f b6 f0             	movzx  esi,al
c000f927:	56                   	push   esi
c000f928:	83 c2 0d             	add    edx,0xd
c000f92b:	0f b6 db             	movzx  ebx,bl
c000f92e:	53                   	push   ebx
c000f92f:	52                   	push   edx
c000f930:	51                   	push   ecx
c000f931:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f934:	83 c4 10             	add    esp,0x10
c000f937:	5b                   	pop    ebx
c000f938:	5e                   	pop    esi
c000f939:	5f                   	pop    edi
c000f93a:	c3                   	ret    
c000f93b:	90                   	nop

c000f93c <File::exists()>:
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	31 c0                	xor    eax,eax
c000f941:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f945:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f94c:	80 f9 19             	cmp    cl,0x19
c000f94f:	77 24                	ja     c000f975 <File::exists()+0x39>
c000f951:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000f958:	85 c9                	test   ecx,ecx
c000f95a:	74 19                	je     c000f975 <File::exists()+0x39>
c000f95c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f962:	85 c9                	test   ecx,ecx
c000f964:	74 0f                	je     c000f975 <File::exists()+0x39>
c000f966:	50                   	push   eax
c000f967:	83 c2 0d             	add    edx,0xd
c000f96a:	50                   	push   eax
c000f96b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f96d:	52                   	push   edx
c000f96e:	51                   	push   ecx
c000f96f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f972:	83 c4 10             	add    esp,0x10
c000f975:	83 c4 0c             	add    esp,0xc
c000f978:	c3                   	ret    
c000f979:	90                   	nop

c000f97a <File::stat(unsigned long long*, bool*)>:
c000f97a:	56                   	push   esi
c000f97b:	53                   	push   ebx
c000f97c:	50                   	push   eax
c000f97d:	b8 0b 00 00 00       	mov    eax,0xb
c000f982:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f986:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f98a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f98e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f995:	80 f9 19             	cmp    cl,0x19
c000f998:	77 3d                	ja     c000f9d7 <File::stat(unsigned long long*, bool*)+0x5d>
c000f99a:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000f9a1:	85 c9                	test   ecx,ecx
c000f9a3:	74 32                	je     c000f9d7 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9ab:	85 c9                	test   ecx,ecx
c000f9ad:	74 28                	je     c000f9d7 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9b5:	74 13                	je     c000f9ca <File::stat(unsigned long long*, bool*)+0x50>
c000f9b7:	83 ec 04             	sub    esp,0x4
c000f9ba:	56                   	push   esi
c000f9bb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9c1:	51                   	push   ecx
c000f9c2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9c5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9c8:	eb 0a                	jmp    c000f9d4 <File::stat(unsigned long long*, bool*)+0x5a>
c000f9ca:	53                   	push   ebx
c000f9cb:	83 c2 0d             	add    edx,0xd
c000f9ce:	56                   	push   esi
c000f9cf:	52                   	push   edx
c000f9d0:	51                   	push   ecx
c000f9d1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	5a                   	pop    edx
c000f9d8:	5b                   	pop    ebx
c000f9d9:	5e                   	pop    esi
c000f9da:	c3                   	ret    

c000f9db <getcwd(Process*, char*, int)>:
c000f9db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9df:	31 c0                	xor    eax,eax
c000f9e1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9e8:	7d 15                	jge    c000f9ff <getcwd(Process*, char*, int)+0x24>
c000f9ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9ee:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9f5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9f8:	84 c9                	test   cl,cl
c000f9fa:	74 06                	je     c000fa02 <getcwd(Process*, char*, int)+0x27>
c000f9fc:	40                   	inc    eax
c000f9fd:	eb e2                	jmp    c000f9e1 <getcwd(Process*, char*, int)+0x6>
c000f9ff:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa02:	31 c0                	xor    eax,eax
c000fa04:	c3                   	ret    

c000fa05 <setcwd(Process*, char*)>:
c000fa05:	55                   	push   ebp
c000fa06:	57                   	push   edi
c000fa07:	56                   	push   esi
c000fa08:	53                   	push   ebx
c000fa09:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa0f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa16:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa1c:	57                   	push   edi
c000fa1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa24:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa28:	56                   	push   esi
c000fa29:	e8 92 fa ff ff       	call   c000f4c0 <standardiseFiles(char*, char const*, char const*)>
c000fa2e:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa31:	e8 ef 0b ff ff       	call   c0000625 <strlen>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	83 f8 02             	cmp    eax,0x2
c000fa3c:	77 17                	ja     c000fa55 <setcwd(Process*, char*)+0x50>
c000fa3e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa43:	83 e8 41             	sub    eax,0x41
c000fa46:	83 f8 19             	cmp    eax,0x19
c000fa49:	76 24                	jbe    c000fa6f <setcwd(Process*, char*)+0x6a>
c000fa4b:	b8 03 00 00 00       	mov    eax,0x3
c000fa50:	e9 cb 00 00 00       	jmp    c000fb20 <setcwd(Process*, char*)+0x11b>
c000fa55:	83 ec 0c             	sub    esp,0xc
c000fa58:	56                   	push   esi
c000fa59:	e8 c7 0b ff ff       	call   c0000625 <strlen>
c000fa5e:	83 c4 10             	add    esp,0x10
c000fa61:	83 f8 03             	cmp    eax,0x3
c000fa64:	75 33                	jne    c000fa99 <setcwd(Process*, char*)+0x94>
c000fa66:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa6b:	75 2c                	jne    c000fa99 <setcwd(Process*, char*)+0x94>
c000fa6d:	eb cf                	jmp    c000fa3e <setcwd(Process*, char*)+0x39>
c000fa6f:	8b 14 85 00 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdba00]
c000fa76:	b8 05 00 00 00       	mov    eax,0x5
c000fa7b:	85 d2                	test   edx,edx
c000fa7d:	0f 84 9d 00 00 00    	je     c000fb20 <setcwd(Process*, char*)+0x11b>
c000fa83:	b8 06 00 00 00       	mov    eax,0x6
c000fa88:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa8f:	0f 84 8b 00 00 00    	je     c000fb20 <setcwd(Process*, char*)+0x11b>
c000fa95:	51                   	push   ecx
c000fa96:	51                   	push   ecx
c000fa97:	eb 7b                	jmp    c000fb14 <setcwd(Process*, char*)+0x10f>
c000fa99:	83 ec 0c             	sub    esp,0xc
c000fa9c:	68 14 01 00 00       	push   0x114
c000faa1:	e8 58 f5 ff ff       	call   c000effe <operator new(unsigned long)>
c000faa6:	83 c4 0c             	add    esp,0xc
c000faa9:	89 c3                	mov    ebx,eax
c000faab:	55                   	push   ebp
c000faac:	56                   	push   esi
c000faad:	50                   	push   eax
c000faae:	e8 b7 fb ff ff       	call   c000f66a <File::File(char const*, Process*)>
c000fab3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fab8:	83 c4 0c             	add    esp,0xc
c000fabb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fabf:	50                   	push   eax
c000fac0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fac4:	50                   	push   eax
c000fac5:	53                   	push   ebx
c000fac6:	e8 af fe ff ff       	call   c000f97a <File::stat(unsigned long long*, bool*)>
c000facb:	83 c4 10             	add    esp,0x10
c000face:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fad0:	83 f8 02             	cmp    eax,0x2
c000fad3:	75 09                	jne    c000fade <setcwd(Process*, char*)+0xd9>
c000fad5:	83 ec 0c             	sub    esp,0xc
c000fad8:	53                   	push   ebx
c000fad9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fadc:	eb 0d                	jmp    c000faeb <setcwd(Process*, char*)+0xe6>
c000fade:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fae1:	85 c0                	test   eax,eax
c000fae3:	74 10                	je     c000faf5 <setcwd(Process*, char*)+0xf0>
c000fae5:	83 ec 0c             	sub    esp,0xc
c000fae8:	53                   	push   ebx
c000fae9:	ff d2                	call   edx
c000faeb:	83 c4 10             	add    esp,0x10
c000faee:	b8 01 00 00 00       	mov    eax,0x1
c000faf3:	eb 2b                	jmp    c000fb20 <setcwd(Process*, char*)+0x11b>
c000faf5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fafa:	75 10                	jne    c000fb0c <setcwd(Process*, char*)+0x107>
c000fafc:	83 ec 0c             	sub    esp,0xc
c000faff:	53                   	push   ebx
c000fb00:	ff d2                	call   edx
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	b8 02 00 00 00       	mov    eax,0x2
c000fb0a:	eb 14                	jmp    c000fb20 <setcwd(Process*, char*)+0x11b>
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	53                   	push   ebx
c000fb10:	ff d2                	call   edx
c000fb12:	58                   	pop    eax
c000fb13:	5a                   	pop    edx
c000fb14:	56                   	push   esi
c000fb15:	57                   	push   edi
c000fb16:	e8 8c 0b ff ff       	call   c00006a7 <strcpy>
c000fb1b:	83 c4 10             	add    esp,0x10
c000fb1e:	31 c0                	xor    eax,eax
c000fb20:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb26:	5b                   	pop    ebx
c000fb27:	5e                   	pop    esi
c000fb28:	5f                   	pop    edi
c000fb29:	5d                   	pop    ebp
c000fb2a:	c3                   	ret    
c000fb2b:	90                   	nop

c000fb2c <Directory::Directory(char const*, Process*)>:
c000fb2c:	83 ec 0c             	sub    esp,0xc
c000fb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb33:	83 ec 08             	sub    esp,0x8
c000fb36:	6a 00                	push   0x0
c000fb38:	50                   	push   eax
c000fb39:	e8 a4 e1 ff ff       	call   c000dce2 <UnixFile::UnixFile(int)>
c000fb3e:	83 c4 10             	add    esp,0x10
c000fb41:	ba 14 14 02 c0       	mov    edx,0xc0021414
c000fb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb4a:	89 10                	mov    DWORD PTR [eax],edx
c000fb4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb50:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb5a:	83 c0 0d             	add    eax,0xd
c000fb5d:	83 ec 04             	sub    esp,0x4
c000fb60:	52                   	push   edx
c000fb61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb65:	50                   	push   eax
c000fb66:	e8 55 f9 ff ff       	call   c000f4c0 <standardiseFiles(char*, char const*, char const*)>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb72:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb75:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb7c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb86:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb8a:	90                   	nop
c000fb8b:	83 c4 0c             	add    esp,0xc
c000fb8e:	c3                   	ret    
c000fb8f:	90                   	nop

c000fb90 <Directory::open()>:
c000fb90:	53                   	push   ebx
c000fb91:	b8 0b 00 00 00       	mov    eax,0xb
c000fb96:	83 ec 08             	sub    esp,0x8
c000fb99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb9d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fba4:	80 fa 19             	cmp    dl,0x19
c000fba7:	77 3d                	ja     c000fbe6 <Directory::open()+0x56>
c000fba9:	8b 14 95 00 46 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdba00]
c000fbb0:	85 d2                	test   edx,edx
c000fbb2:	74 32                	je     c000fbe6 <Directory::open()+0x56>
c000fbb4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbba:	85 d2                	test   edx,edx
c000fbbc:	74 28                	je     c000fbe6 <Directory::open()+0x56>
c000fbbe:	b8 06 00 00 00       	mov    eax,0x6
c000fbc3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbc7:	75 1d                	jne    c000fbe6 <Directory::open()+0x56>
c000fbc9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbcf:	50                   	push   eax
c000fbd0:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbd2:	51                   	push   ecx
c000fbd3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbd6:	51                   	push   ecx
c000fbd7:	52                   	push   edx
c000fbd8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	85 c0                	test   eax,eax
c000fbe0:	75 04                	jne    c000fbe6 <Directory::open()+0x56>
c000fbe2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbe6:	83 c4 08             	add    esp,0x8
c000fbe9:	5b                   	pop    ebx
c000fbea:	c3                   	ret    
c000fbeb:	90                   	nop

c000fbec <Directory::close()>:
c000fbec:	53                   	push   ebx
c000fbed:	b8 0b 00 00 00       	mov    eax,0xb
c000fbf2:	83 ec 08             	sub    esp,0x8
c000fbf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbf9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc00:	80 fa 19             	cmp    dl,0x19
c000fc03:	77 41                	ja     c000fc46 <Directory::close()+0x5a>
c000fc05:	8b 1c 95 00 46 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdba00]
c000fc0c:	85 db                	test   ebx,ebx
c000fc0e:	74 36                	je     c000fc46 <Directory::close()+0x5a>
c000fc10:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc17:	74 2d                	je     c000fc46 <Directory::close()+0x5a>
c000fc19:	b8 05 00 00 00       	mov    eax,0x5
c000fc1e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc22:	74 22                	je     c000fc46 <Directory::close()+0x5a>
c000fc24:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc28:	8b 04 95 00 46 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdba00]
c000fc2f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc35:	53                   	push   ebx
c000fc36:	53                   	push   ebx
c000fc37:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc39:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc3f:	50                   	push   eax
c000fc40:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc43:	83 c4 10             	add    esp,0x10
c000fc46:	83 c4 08             	add    esp,0x8
c000fc49:	5b                   	pop    ebx
c000fc4a:	c3                   	ret    
c000fc4b:	90                   	nop

c000fc4c <Directory::unlink()>:
c000fc4c:	83 ec 0c             	sub    esp,0xc
c000fc4f:	b8 0b 00 00 00       	mov    eax,0xb
c000fc54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc5f:	80 f9 19             	cmp    cl,0x19
c000fc62:	77 2f                	ja     c000fc93 <Directory::unlink()+0x47>
c000fc64:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000fc6b:	85 c9                	test   ecx,ecx
c000fc6d:	74 24                	je     c000fc93 <Directory::unlink()+0x47>
c000fc6f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc75:	85 c9                	test   ecx,ecx
c000fc77:	74 1a                	je     c000fc93 <Directory::unlink()+0x47>
c000fc79:	b8 06 00 00 00       	mov    eax,0x6
c000fc7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc82:	75 0f                	jne    c000fc93 <Directory::unlink()+0x47>
c000fc84:	50                   	push   eax
c000fc85:	83 c2 0d             	add    edx,0xd
c000fc88:	50                   	push   eax
c000fc89:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc8b:	52                   	push   edx
c000fc8c:	51                   	push   ecx
c000fc8d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc90:	83 c4 10             	add    esp,0x10
c000fc93:	83 c4 0c             	add    esp,0xc
c000fc96:	c3                   	ret    
c000fc97:	90                   	nop

c000fc98 <Directory::rename(char const*)>:
c000fc98:	83 ec 0c             	sub    esp,0xc
c000fc9b:	b8 0b 00 00 00       	mov    eax,0xb
c000fca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fca4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcab:	80 f9 19             	cmp    cl,0x19
c000fcae:	77 32                	ja     c000fce2 <Directory::rename(char const*)+0x4a>
c000fcb0:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000fcb7:	85 c9                	test   ecx,ecx
c000fcb9:	74 27                	je     c000fce2 <Directory::rename(char const*)+0x4a>
c000fcbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcc1:	85 c9                	test   ecx,ecx
c000fcc3:	74 1d                	je     c000fce2 <Directory::rename(char const*)+0x4a>
c000fcc5:	b8 06 00 00 00       	mov    eax,0x6
c000fcca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcce:	75 12                	jne    c000fce2 <Directory::rename(char const*)+0x4a>
c000fcd0:	50                   	push   eax
c000fcd1:	83 c2 0d             	add    edx,0xd
c000fcd4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcda:	52                   	push   edx
c000fcdb:	51                   	push   ecx
c000fcdc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	83 c4 0c             	add    esp,0xc
c000fce5:	c3                   	ret    

c000fce6 <Directory::exists()>:
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	31 c0                	xor    eax,eax
c000fceb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcf6:	80 f9 19             	cmp    cl,0x19
c000fcf9:	77 24                	ja     c000fd1f <Directory::exists()+0x39>
c000fcfb:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000fd02:	85 c9                	test   ecx,ecx
c000fd04:	74 19                	je     c000fd1f <Directory::exists()+0x39>
c000fd06:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd0c:	85 c9                	test   ecx,ecx
c000fd0e:	74 0f                	je     c000fd1f <Directory::exists()+0x39>
c000fd10:	50                   	push   eax
c000fd11:	83 c2 0d             	add    edx,0xd
c000fd14:	50                   	push   eax
c000fd15:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd17:	52                   	push   edx
c000fd18:	51                   	push   ecx
c000fd19:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	83 c4 0c             	add    esp,0xc
c000fd22:	c3                   	ret    
c000fd23:	90                   	nop

c000fd24 <Directory::read(dirent*)>:
c000fd24:	83 ec 1c             	sub    esp,0x1c
c000fd27:	b8 0b 00 00 00       	mov    eax,0xb
c000fd2c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd30:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd37:	80 fa 19             	cmp    dl,0x19
c000fd3a:	77 30                	ja     c000fd6c <Directory::read(dirent*)+0x48>
c000fd3c:	8b 14 95 00 46 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdba00]
c000fd43:	85 d2                	test   edx,edx
c000fd45:	74 25                	je     c000fd6c <Directory::read(dirent*)+0x48>
c000fd47:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd4e:	74 1c                	je     c000fd6c <Directory::read(dirent*)+0x48>
c000fd50:	83 ec 0c             	sub    esp,0xc
c000fd53:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd55:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd59:	52                   	push   edx
c000fd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd5e:	6a 00                	push   0x0
c000fd60:	68 10 01 00 00       	push   0x110
c000fd65:	51                   	push   ecx
c000fd66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd69:	83 c4 20             	add    esp,0x20
c000fd6c:	83 c4 1c             	add    esp,0x1c
c000fd6f:	c3                   	ret    

c000fd70 <Directory::create()>:
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	b8 0b 00 00 00       	mov    eax,0xb
c000fd78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd83:	80 f9 19             	cmp    cl,0x19
c000fd86:	77 2f                	ja     c000fdb7 <Directory::create()+0x47>
c000fd88:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c000fd8f:	85 c9                	test   ecx,ecx
c000fd91:	74 24                	je     c000fdb7 <Directory::create()+0x47>
c000fd93:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd99:	85 c9                	test   ecx,ecx
c000fd9b:	74 1a                	je     c000fdb7 <Directory::create()+0x47>
c000fd9d:	b8 06 00 00 00       	mov    eax,0x6
c000fda2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fda6:	75 0f                	jne    c000fdb7 <Directory::create()+0x47>
c000fda8:	50                   	push   eax
c000fda9:	83 c2 0d             	add    edx,0xd
c000fdac:	50                   	push   eax
c000fdad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdaf:	52                   	push   edx
c000fdb0:	51                   	push   ecx
c000fdb1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	83 c4 0c             	add    esp,0xc
c000fdba:	c3                   	ret    
c000fdbb:	90                   	nop

c000fdbc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fdbc:	b8 0a 00 00 00       	mov    eax,0xa
c000fdc1:	c3                   	ret    

c000fdc2 <Bus::Bus(char const*)>:
c000fdc2:	83 ec 0c             	sub    esp,0xc
c000fdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc9:	83 ec 08             	sub    esp,0x8
c000fdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdd0:	50                   	push   eax
c000fdd1:	e8 62 09 00 00       	call   c0010738 <Device::Device(char const*)>
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	ba 30 14 02 c0       	mov    edx,0xc0021430
c000fdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde2:	89 10                	mov    DWORD PTR [eax],edx
c000fde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdf2:	90                   	nop
c000fdf3:	83 c4 0c             	add    esp,0xc
c000fdf6:	c3                   	ret    
c000fdf7:	90                   	nop

c000fdf8 <Bus::~Bus()>:
c000fdf8:	83 ec 0c             	sub    esp,0xc
c000fdfb:	ba 30 14 02 c0       	mov    edx,0xc0021430
c000fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe04:	89 10                	mov    DWORD PTR [eax],edx
c000fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0a:	83 ec 0c             	sub    esp,0xc
c000fe0d:	50                   	push   eax
c000fe0e:	e8 db 05 00 00       	call   c00103ee <Device::~Device()>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	90                   	nop
c000fe17:	83 c4 0c             	add    esp,0xc
c000fe1a:	c3                   	ret    
c000fe1b:	90                   	nop

c000fe1c <Bus::~Bus()>:
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe26:	e8 cd ff ff ff       	call   c000fdf8 <Bus::~Bus()>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	68 58 01 00 00       	push   0x158
c000fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3a:	e8 ce f1 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	83 c4 0c             	add    esp,0xc
c000fe45:	c3                   	ret    

c000fe46 <Buzzer::Buzzer(char const*)>:
c000fe46:	83 ec 0c             	sub    esp,0xc
c000fe49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4d:	83 ec 08             	sub    esp,0x8
c000fe50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe54:	50                   	push   eax
c000fe55:	e8 de 08 00 00       	call   c0010738 <Device::Device(char const*)>
c000fe5a:	83 c4 10             	add    esp,0x10
c000fe5d:	ba 5c 14 02 c0       	mov    edx,0xc002145c
c000fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe66:	89 10                	mov    DWORD PTR [eax],edx
c000fe68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe84:	90                   	nop
c000fe85:	83 c4 0c             	add    esp,0xc
c000fe88:	c3                   	ret    
c000fe89:	90                   	nop

c000fe8a <Buzzer::~Buzzer()>:
c000fe8a:	83 ec 0c             	sub    esp,0xc
c000fe8d:	ba 5c 14 02 c0       	mov    edx,0xc002145c
c000fe92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe96:	89 10                	mov    DWORD PTR [eax],edx
c000fe98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9c:	83 ec 0c             	sub    esp,0xc
c000fe9f:	50                   	push   eax
c000fea0:	e8 49 05 00 00       	call   c00103ee <Device::~Device()>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	90                   	nop
c000fea9:	83 c4 0c             	add    esp,0xc
c000feac:	c3                   	ret    
c000fead:	90                   	nop

c000feae <Buzzer::~Buzzer()>:
c000feae:	83 ec 0c             	sub    esp,0xc
c000feb1:	83 ec 0c             	sub    esp,0xc
c000feb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb8:	e8 cd ff ff ff       	call   c000fe8a <Buzzer::~Buzzer()>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 ec 08             	sub    esp,0x8
c000fec3:	68 5c 01 00 00       	push   0x15c
c000fec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fecc:	e8 3c f1 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c000fed1:	83 c4 10             	add    esp,0x10
c000fed4:	83 c4 0c             	add    esp,0xc
c000fed7:	c3                   	ret    

c000fed8 <Buzzer::stop()>:
c000fed8:	83 ec 14             	sub    esp,0x14
c000fedb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fedf:	8b 10                	mov    edx,DWORD PTR [eax]
c000fee1:	6a 00                	push   0x0
c000fee3:	50                   	push   eax
c000fee4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fee7:	83 c4 1c             	add    esp,0x1c
c000feea:	c3                   	ret    

c000feeb <beepThread(void*)>:
c000feeb:	53                   	push   ebx
c000feec:	83 ec 08             	sub    esp,0x8
c000feef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fef3:	e8 05 84 00 00       	call   c00182fd <unlockScheduler()>
c000fef8:	52                   	push   edx
c000fef9:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fefe:	52                   	push   edx
c000feff:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff05:	52                   	push   edx
c000ff06:	50                   	push   eax
c000ff07:	e8 4d 89 00 00       	call   c0018859 <nanoSleep(unsigned long long)>
c000ff0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff0f:	e8 c4 ff ff ff       	call   c000fed8 <Buzzer::stop()>
c000ff14:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff1c:	83 c4 18             	add    esp,0x18
c000ff1f:	5b                   	pop    ebx
c000ff20:	e9 78 88 00 00       	jmp    c001879d <blockTask(TaskState)>
c000ff25:	90                   	nop

c000ff26 <Buzzer::beep(int, int, bool)>:
c000ff26:	57                   	push   edi
c000ff27:	56                   	push   esi
c000ff28:	53                   	push   ebx
c000ff29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff2d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff35:	52                   	push   edx
c000ff36:	52                   	push   edx
c000ff37:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff3d:	56                   	push   esi
c000ff3e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff41:	89 f8                	mov    eax,edi
c000ff43:	83 c4 10             	add    esp,0x10
c000ff46:	84 c0                	test   al,al
c000ff48:	74 1f                	je     c000ff69 <Buzzer::beep(int, int, bool)+0x43>
c000ff4a:	50                   	push   eax
c000ff4b:	50                   	push   eax
c000ff4c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff52:	99                   	cdq    
c000ff53:	52                   	push   edx
c000ff54:	50                   	push   eax
c000ff55:	e8 ff 88 00 00       	call   c0018859 <nanoSleep(unsigned long long)>
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff61:	5b                   	pop    ebx
c000ff62:	5e                   	pop    esi
c000ff63:	5f                   	pop    edi
c000ff64:	e9 6f ff ff ff       	jmp    c000fed8 <Buzzer::stop()>
c000ff69:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff6f:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c000ff74:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff7c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff80:	c7 44 24 14 eb fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000feeb
c000ff88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff8c:	5b                   	pop    ebx
c000ff8d:	5e                   	pop    esi
c000ff8e:	5f                   	pop    edi
c000ff8f:	e9 9c 84 00 00       	jmp    c0018430 <Process::createThread(void (*)(void*), void*, int)>

c000ff94 <loadClockSettings()>:
c000ff94:	c7 05 74 41 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024174,0xa
c000ff9e:	c6 05 71 41 02 c0 00 	mov    BYTE PTR ds:0xc0024171,0x0
c000ffa5:	c6 05 70 41 02 c0 01 	mov    BYTE PTR ds:0xc0024170,0x1
c000ffac:	c3                   	ret    
c000ffad:	90                   	nop

c000ffae <Clock::Clock(char const*)>:
c000ffae:	83 ec 0c             	sub    esp,0xc
c000ffb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb5:	83 ec 08             	sub    esp,0x8
c000ffb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffbc:	50                   	push   eax
c000ffbd:	e8 76 07 00 00       	call   c0010738 <Device::Device(char const*)>
c000ffc2:	83 c4 10             	add    esp,0x10
c000ffc5:	ba 8c 14 02 c0       	mov    edx,0xc002148c
c000ffca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffce:	89 10                	mov    DWORD PTR [eax],edx
c000ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffde:	90                   	nop
c000ffdf:	83 c4 0c             	add    esp,0xc
c000ffe2:	c3                   	ret    
c000ffe3:	90                   	nop

c000ffe4 <Clock::~Clock()>:
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	ba 8c 14 02 c0       	mov    edx,0xc002148c
c000ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff0:	89 10                	mov    DWORD PTR [eax],edx
c000fff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff6:	83 ec 0c             	sub    esp,0xc
c000fff9:	50                   	push   eax
c000fffa:	e8 ef 03 00 00       	call   c00103ee <Device::~Device()>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	90                   	nop
c0010003:	83 c4 0c             	add    esp,0xc
c0010006:	c3                   	ret    
c0010007:	90                   	nop

c0010008 <Clock::~Clock()>:
c0010008:	83 ec 0c             	sub    esp,0xc
c001000b:	83 ec 0c             	sub    esp,0xc
c001000e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010012:	e8 cd ff ff ff       	call   c000ffe4 <Clock::~Clock()>
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	83 ec 08             	sub    esp,0x8
c001001d:	68 58 01 00 00       	push   0x158
c0010022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010026:	e8 e2 ef ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001002b:	83 c4 10             	add    esp,0x10
c001002e:	83 c4 0c             	add    esp,0xc
c0010031:	c3                   	ret    

c0010032 <Clock::timeInSecondsLocal()>:
c0010032:	53                   	push   ebx
c0010033:	83 ec 14             	sub    esp,0x14
c0010036:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001003a:	8b 10                	mov    edx,DWORD PTR [eax]
c001003c:	50                   	push   eax
c001003d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010040:	0f b6 0d 70 41 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024170
c0010047:	03 0d 74 41 02 c0    	add    ecx,DWORD PTR ds:0xc0024174
c001004d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010053:	89 cb                	mov    ebx,ecx
c0010055:	c1 fb 1f             	sar    ebx,0x1f
c0010058:	01 c8                	add    eax,ecx
c001005a:	11 da                	adc    edx,ebx
c001005c:	83 c4 10             	add    esp,0x10
c001005f:	31 c9                	xor    ecx,ecx
c0010061:	80 3d 71 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024171,0x0
c0010068:	74 05                	je     c001006f <Clock::timeInSecondsLocal()+0x3d>
c001006a:	b9 08 07 00 00       	mov    ecx,0x708
c001006f:	31 db                	xor    ebx,ebx
c0010071:	01 c8                	add    eax,ecx
c0010073:	11 da                	adc    edx,ebx
c0010075:	83 c4 08             	add    esp,0x8
c0010078:	5b                   	pop    ebx
c0010079:	c3                   	ret    

c001007a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001007a:	57                   	push   edi
c001007b:	56                   	push   esi
c001007c:	53                   	push   ebx
c001007d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010081:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010085:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010089:	8b 01                	mov    eax,DWORD PTR [ecx]
c001008b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001008e:	0f b6 05 70 41 02 c0 	movzx  eax,BYTE PTR ds:0xc0024170
c0010095:	03 05 74 41 02 c0    	add    eax,DWORD PTR ds:0xc0024174
c001009b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100a1:	99                   	cdq    
c00100a2:	29 c6                	sub    esi,eax
c00100a4:	19 d7                	sbb    edi,edx
c00100a6:	89 f0                	mov    eax,esi
c00100a8:	89 fa                	mov    edx,edi
c00100aa:	31 f6                	xor    esi,esi
c00100ac:	80 3d 71 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024171,0x0
c00100b3:	74 05                	je     c00100ba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100b5:	be 08 07 00 00       	mov    esi,0x708
c00100ba:	31 ff                	xor    edi,edi
c00100bc:	29 f0                	sub    eax,esi
c00100be:	19 fa                	sbb    edx,edi
c00100c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100c4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100c8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100cc:	89 d8                	mov    eax,ebx
c00100ce:	5b                   	pop    ebx
c00100cf:	5e                   	pop    esi
c00100d0:	5f                   	pop    edi
c00100d1:	ff e0                	jmp    eax

c00100d3 <datetimeToSeconds(datetime_t)>:
c00100d3:	55                   	push   ebp
c00100d4:	57                   	push   edi
c00100d5:	56                   	push   esi
c00100d6:	53                   	push   ebx
c00100d7:	83 ec 14             	sub    esp,0x14
c00100da:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100e2:	0f b6 f5             	movzx  esi,ch
c00100e5:	6b f6 3c             	imul   esi,esi,0x3c
c00100e8:	89 cf                	mov    edi,ecx
c00100ea:	89 d3                	mov    ebx,edx
c00100ec:	0f b6 c9             	movzx  ecx,cl
c00100ef:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100f5:	0f b6 c6             	movzx  eax,dh
c00100f8:	c1 ef 10             	shr    edi,0x10
c00100fb:	48                   	dec    eax
c00100fc:	c1 eb 10             	shr    ebx,0x10
c00100ff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010103:	89 f8                	mov    eax,edi
c0010105:	0f b6 f8             	movzx  edi,al
c0010108:	01 fe                	add    esi,edi
c001010a:	01 f1                	add    ecx,esi
c001010c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010110:	c1 f9 1f             	sar    ecx,0x1f
c0010113:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010117:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001011c:	0f b6 d2             	movzx  edx,dl
c001011f:	66 81 eb 6c 07       	sub    bx,0x76c
c0010124:	8b 0c 8d c0 14 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdeb40]
c001012b:	0f b7 f3             	movzx  esi,bx
c001012e:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010132:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010137:	76 29                	jbe    c0010162 <datetimeToSeconds(datetime_t)+0x8f>
c0010139:	f6 c3 03             	test   bl,0x3
c001013c:	75 24                	jne    c0010162 <datetimeToSeconds(datetime_t)+0x8f>
c001013e:	31 d2                	xor    edx,edx
c0010140:	bf 64 00 00 00       	mov    edi,0x64
c0010145:	89 d8                	mov    eax,ebx
c0010147:	66 f7 f7             	div    di
c001014a:	66 85 d2             	test   dx,dx
c001014d:	75 12                	jne    c0010161 <datetimeToSeconds(datetime_t)+0x8e>
c001014f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010155:	bf 90 01 00 00       	mov    edi,0x190
c001015a:	99                   	cdq    
c001015b:	f7 ff                	idiv   edi
c001015d:	85 d2                	test   edx,edx
c001015f:	75 01                	jne    c0010162 <datetimeToSeconds(datetime_t)+0x8f>
c0010161:	41                   	inc    ecx
c0010162:	66 83 fb 46          	cmp    bx,0x46
c0010166:	76 45                	jbe    c00101ad <datetimeToSeconds(datetime_t)+0xda>
c0010168:	bb 46 00 00 00       	mov    ebx,0x46
c001016d:	bf 64 00 00 00       	mov    edi,0x64
c0010172:	bd 90 01 00 00       	mov    ebp,0x190
c0010177:	b8 6d 01 00 00       	mov    eax,0x16d
c001017c:	f6 c3 03             	test   bl,0x3
c001017f:	75 23                	jne    c00101a4 <datetimeToSeconds(datetime_t)+0xd1>
c0010181:	89 d8                	mov    eax,ebx
c0010183:	99                   	cdq    
c0010184:	f7 ff                	idiv   edi
c0010186:	85 d2                	test   edx,edx
c0010188:	b8 6e 01 00 00       	mov    eax,0x16e
c001018d:	75 15                	jne    c00101a4 <datetimeToSeconds(datetime_t)+0xd1>
c001018f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010195:	99                   	cdq    
c0010196:	f7 fd                	idiv   ebp
c0010198:	31 c0                	xor    eax,eax
c001019a:	85 d2                	test   edx,edx
c001019c:	0f 94 c0             	sete   al
c001019f:	05 6d 01 00 00       	add    eax,0x16d
c00101a4:	43                   	inc    ebx
c00101a5:	01 c1                	add    ecx,eax
c00101a7:	39 f3                	cmp    ebx,esi
c00101a9:	7c cc                	jl     c0010177 <datetimeToSeconds(datetime_t)+0xa4>
c00101ab:	eb 3b                	jmp    c00101e8 <datetimeToSeconds(datetime_t)+0x115>
c00101ad:	74 39                	je     c00101e8 <datetimeToSeconds(datetime_t)+0x115>
c00101af:	b8 45 00 00 00       	mov    eax,0x45
c00101b4:	89 c2                	mov    edx,eax
c00101b6:	83 e2 03             	and    edx,0x3
c00101b9:	39 f0                	cmp    eax,esi
c00101bb:	7e 13                	jle    c00101d0 <datetimeToSeconds(datetime_t)+0xfd>
c00101bd:	85 d2                	test   edx,edx
c00101bf:	0f 94 c2             	sete   dl
c00101c2:	0f b6 d2             	movzx  edx,dl
c00101c5:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101cb:	48                   	dec    eax
c00101cc:	29 d1                	sub    ecx,edx
c00101ce:	eb e4                	jmp    c00101b4 <datetimeToSeconds(datetime_t)+0xe1>
c00101d0:	b8 6d 01 00 00       	mov    eax,0x16d
c00101d5:	85 d2                	test   edx,edx
c00101d7:	75 0d                	jne    c00101e6 <datetimeToSeconds(datetime_t)+0x113>
c00101d9:	31 c0                	xor    eax,eax
c00101db:	66 85 db             	test   bx,bx
c00101de:	0f 95 c0             	setne  al
c00101e1:	05 6d 01 00 00       	add    eax,0x16d
c00101e6:	29 c1                	sub    ecx,eax
c00101e8:	b8 80 51 01 00       	mov    eax,0x15180
c00101ed:	f7 e9                	imul   ecx
c00101ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101f3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101f7:	83 c4 14             	add    esp,0x14
c00101fa:	5b                   	pop    ebx
c00101fb:	5e                   	pop    esi
c00101fc:	5f                   	pop    edi
c00101fd:	5d                   	pop    ebp
c00101fe:	c3                   	ret    
c00101ff:	90                   	nop

c0010200 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010200:	57                   	push   edi
c0010201:	56                   	push   esi
c0010202:	53                   	push   ebx
c0010203:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010207:	8b 06                	mov    eax,DWORD PTR [esi]
c0010209:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001020c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010210:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010214:	e8 ba fe ff ff       	call   c00100d3 <datetimeToSeconds(datetime_t)>
c0010219:	59                   	pop    ecx
c001021a:	0f b6 0d 70 41 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024170
c0010221:	03 0d 74 41 02 c0    	add    ecx,DWORD PTR ds:0xc0024174
c0010227:	5b                   	pop    ebx
c0010228:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001022e:	89 cb                	mov    ebx,ecx
c0010230:	c1 fb 1f             	sar    ebx,0x1f
c0010233:	29 c8                	sub    eax,ecx
c0010235:	19 da                	sbb    edx,ebx
c0010237:	31 c9                	xor    ecx,ecx
c0010239:	80 3d 71 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024171,0x0
c0010240:	74 05                	je     c0010247 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010242:	b9 08 07 00 00       	mov    ecx,0x708
c0010247:	31 db                	xor    ebx,ebx
c0010249:	29 c8                	sub    eax,ecx
c001024b:	19 da                	sbb    edx,ebx
c001024d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010251:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010255:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010259:	5b                   	pop    ebx
c001025a:	89 f8                	mov    eax,edi
c001025c:	5e                   	pop    esi
c001025d:	5f                   	pop    edi
c001025e:	ff e0                	jmp    eax

c0010260 <secondsToDatetime(unsigned long long)>:
c0010260:	55                   	push   ebp
c0010261:	57                   	push   edi
c0010262:	56                   	push   esi
c0010263:	53                   	push   ebx
c0010264:	83 ec 1c             	sub    esp,0x1c
c0010267:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001026b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001026f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010273:	6a 00                	push   0x0
c0010275:	68 80 51 01 00       	push   0x15180
c001027a:	55                   	push   ebp
c001027b:	57                   	push   edi
c001027c:	e8 3b eb 00 00       	call   c001edbc <__udivdi3>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010288:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001028e:	6a 00                	push   0x0
c0010290:	68 80 51 01 00       	push   0x15180
c0010295:	55                   	push   ebp
c0010296:	57                   	push   edi
c0010297:	e8 20 ec 00 00       	call   c001eebc <__umoddi3>
c001029c:	bf 10 0e 00 00       	mov    edi,0xe10
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	99                   	cdq    
c00102a5:	f7 ff                	idiv   edi
c00102a7:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102aa:	89 d0                	mov    eax,edx
c00102ac:	99                   	cdq    
c00102ad:	bf 3c 00 00 00       	mov    edi,0x3c
c00102b2:	f7 ff                	idiv   edi
c00102b4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102b7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102ba:	85 db                	test   ebx,ebx
c00102bc:	79 11                	jns    c00102cf <secondsToDatetime(unsigned long long)+0x6f>
c00102be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102c2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102c8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102cd:	eb 07                	jmp    c00102d6 <secondsToDatetime(unsigned long long)+0x76>
c00102cf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102d4:	89 d8                	mov    eax,ebx
c00102d6:	99                   	cdq    
c00102d7:	f7 f9                	idiv   ecx
c00102d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102dd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102e2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102ea:	01 c3                	add    ebx,eax
c00102ec:	31 d2                	xor    edx,edx
c00102ee:	89 d8                	mov    eax,ebx
c00102f0:	bf b4 05 00 00       	mov    edi,0x5b4
c00102f5:	f7 f1                	div    ecx
c00102f7:	31 d2                	xor    edx,edx
c00102f9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00102fe:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010301:	89 d8                	mov    eax,ebx
c0010303:	f7 f7                	div    edi
c0010305:	29 c1                	sub    ecx,eax
c0010307:	31 d2                	xor    edx,edx
c0010309:	89 d8                	mov    eax,ebx
c001030b:	f7 f5                	div    ebp
c001030d:	29 c1                	sub    ecx,eax
c001030f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010314:	89 c8                	mov    eax,ecx
c0010316:	31 d2                	xor    edx,edx
c0010318:	f7 f5                	div    ebp
c001031a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001031e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010323:	89 c8                	mov    eax,ecx
c0010325:	31 d2                	xor    edx,edx
c0010327:	f7 f5                	div    ebp
c0010329:	01 c3                	add    ebx,eax
c001032b:	31 d2                	xor    edx,edx
c001032d:	89 c8                	mov    eax,ecx
c001032f:	f7 f7                	div    edi
c0010331:	29 c3                	sub    ebx,eax
c0010333:	bf 99 00 00 00       	mov    edi,0x99
c0010338:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010340:	29 c3                	sub    ebx,eax
c0010342:	31 d2                	xor    edx,edx
c0010344:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010347:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001034a:	83 c1 02             	add    ecx,0x2
c001034d:	bb 05 00 00 00       	mov    ebx,0x5
c0010352:	89 c8                	mov    eax,ecx
c0010354:	f7 f7                	div    edi
c0010356:	89 c7                	mov    edi,eax
c0010358:	31 d2                	xor    edx,edx
c001035a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010360:	83 c0 02             	add    eax,0x2
c0010363:	f7 f3                	div    ebx
c0010365:	89 eb                	mov    ebx,ebp
c0010367:	29 c3                	sub    ebx,eax
c0010369:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001036f:	19 c0                	sbb    eax,eax
c0010371:	31 d2                	xor    edx,edx
c0010373:	83 e0 0c             	and    eax,0xc
c0010376:	88 1e                	mov    BYTE PTR [esi],bl
c0010378:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001037c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010384:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010388:	83 f9 01             	cmp    ecx,0x1
c001038b:	0f 96 c2             	setbe  dl
c001038e:	01 d0                	add    eax,edx
c0010390:	41                   	inc    ecx
c0010391:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010395:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010398:	83 c4 1c             	add    esp,0x1c
c001039b:	89 f0                	mov    eax,esi
c001039d:	5b                   	pop    ebx
c001039e:	5e                   	pop    esi
c001039f:	5f                   	pop    edi
c00103a0:	5d                   	pop    ebp
c00103a1:	c2 04 00             	ret    0x4

c00103a4 <Clock::timeInDatetimeLocal()>:
c00103a4:	53                   	push   ebx
c00103a5:	83 ec 14             	sub    esp,0x14
c00103a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103b0:	e8 7d fc ff ff       	call   c0010032 <Clock::timeInSecondsLocal()>
c00103b5:	83 c4 0c             	add    esp,0xc
c00103b8:	52                   	push   edx
c00103b9:	50                   	push   eax
c00103ba:	53                   	push   ebx
c00103bb:	e8 a0 fe ff ff       	call   c0010260 <secondsToDatetime(unsigned long long)>
c00103c0:	83 c4 14             	add    esp,0x14
c00103c3:	89 d8                	mov    eax,ebx
c00103c5:	5b                   	pop    ebx
c00103c6:	c2 04 00             	ret    0x4
c00103c9:	90                   	nop

c00103ca <Device::hibernate()>:
c00103ca:	c3                   	ret    
c00103cb:	90                   	nop

c00103cc <Device::wake()>:
c00103cc:	c3                   	ret    
c00103cd:	90                   	nop

c00103ce <Device::detect()>:
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <Device::disableLegacy()>:
c00103d0:	c3                   	ret    
c00103d1:	90                   	nop

c00103d2 <Device::powerSaving(PowerSavingLevel)>:
c00103d2:	c3                   	ret    
c00103d3:	90                   	nop

c00103d4 <DriverlessDevice::close(int, int, void*)>:
c00103d4:	31 c0                	xor    eax,eax
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <DriverlessDevice::detect()>:
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <DriverlessDevice::open(int, int, void*)>:
c00103da:	83 ec 18             	sub    esp,0x18
c00103dd:	68 f0 14 02 c0       	push   0xc00214f0
c00103e2:	e8 0b 4f 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c00103e7:	83 c8 ff             	or     eax,0xffffffff
c00103ea:	83 c4 1c             	add    esp,0x1c
c00103ed:	c3                   	ret    

c00103ee <Device::~Device()>:
c00103ee:	ba 18 15 02 c0       	mov    edx,0xc0021518
c00103f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f7:	89 10                	mov    DWORD PTR [eax],edx
c00103f9:	90                   	nop
c00103fa:	c3                   	ret    
c00103fb:	90                   	nop

c00103fc <Device::~Device()>:
c00103fc:	83 ec 0c             	sub    esp,0xc
c00103ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010403:	e8 e6 ff ff ff       	call   c00103ee <Device::~Device()>
c0010408:	83 c4 04             	add    esp,0x4
c001040b:	83 ec 08             	sub    esp,0x8
c001040e:	68 58 01 00 00       	push   0x158
c0010413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010417:	e8 f1 eb ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	83 c4 0c             	add    esp,0xc
c0010422:	c3                   	ret    
c0010423:	90                   	nop

c0010424 <Device::findAndLoadDriver()>:
c0010424:	c3                   	ret    
c0010425:	90                   	nop

c0010426 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010426:	57                   	push   edi
c0010427:	b9 09 00 00 00       	mov    ecx,0x9
c001042c:	56                   	push   esi
c001042d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010431:	81 c7 18 01 00 00    	add    edi,0x118
c0010437:	8d 74 24 10          	lea    esi,[esp+0x10]
c001043b:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010442:	fc                   	cld    
c0010443:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010445:	5e                   	pop    esi
c0010446:	5f                   	pop    edi
c0010447:	c3                   	ret    

c0010448 <Device::preOpenACPI(void*, char*, char*)>:
c0010448:	56                   	push   esi
c0010449:	53                   	push   ebx
c001044a:	83 ec 08             	sub    esp,0x8
c001044d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010455:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010459:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001045f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010469:	6a 1e                	push   0x1e
c001046b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010471:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010475:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001047b:	50                   	push   eax
c001047c:	e8 51 01 ff ff       	call   c00005d2 <memcpy>
c0010481:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010485:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010489:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010491:	83 c4 14             	add    esp,0x14
c0010494:	5b                   	pop    ebx
c0010495:	5e                   	pop    esi
c0010496:	e9 37 01 ff ff       	jmp    c00005d2 <memcpy>
c001049b:	90                   	nop

c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001049c:	55                   	push   ebp
c001049d:	57                   	push   edi
c001049e:	56                   	push   esi
c001049f:	53                   	push   ebx
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104a7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104ab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104b3:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104b8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104bf:	75 0b                	jne    c00104cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00104c3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104c7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104ca:	eb 24                	jmp    c00104f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104cc:	e8 b5 3c 00 00       	call   c0014186 <thisCPU()>
c00104d1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00104d9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104dd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104e1:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104e5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104ed:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104f0:	83 c4 0c             	add    esp,0xc
c00104f3:	5b                   	pop    ebx
c00104f4:	5e                   	pop    esi
c00104f5:	5f                   	pop    edi
c00104f6:	5d                   	pop    ebp
c00104f7:	ff e0                	jmp    eax
c00104f9:	90                   	nop

c00104fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104fa:	57                   	push   edi
c00104fb:	56                   	push   esi
c00104fc:	53                   	push   ebx
c00104fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010501:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010505:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010509:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001050e:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010515:	75 0b                	jne    c0010522 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010517:	8b 00                	mov    eax,DWORD PTR [eax]
c0010519:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001051d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010520:	eb 20                	jmp    c0010542 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010522:	e8 5f 3c 00 00       	call   c0014186 <thisCPU()>
c0010527:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001052d:	8b 10                	mov    edx,DWORD PTR [eax]
c001052f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010533:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010537:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001053b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001053f:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010542:	5b                   	pop    ebx
c0010543:	5e                   	pop    esi
c0010544:	5f                   	pop    edi
c0010545:	ff e0                	jmp    eax
c0010547:	90                   	nop

c0010548 <Device::addChild(Device*)>:
c0010548:	53                   	push   ebx
c0010549:	83 ec 08             	sub    esp,0x8
c001054c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010550:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010554:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001055a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010560:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010562:	85 d2                	test   edx,edx
c0010564:	74 04                	je     c001056a <Device::addChild(Device*)+0x22>
c0010566:	89 d3                	mov    ebx,edx
c0010568:	eb f6                	jmp    c0010560 <Device::addChild(Device*)+0x18>
c001056a:	83 ec 0c             	sub    esp,0xc
c001056d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010570:	6a 08                	push   0x8
c0010572:	e8 87 ea ff ff       	call   c000effe <operator new(unsigned long)>
c0010577:	89 03                	mov    DWORD PTR [ebx],eax
c0010579:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001057f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010586:	83 c4 18             	add    esp,0x18
c0010589:	5b                   	pop    ebx
c001058a:	c3                   	ret    
c001058b:	90                   	nop

c001058c <Device::removeAllChildren()>:
c001058c:	56                   	push   esi
c001058d:	53                   	push   ebx
c001058e:	52                   	push   edx
c001058f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010593:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010599:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001059c:	74 17                	je     c00105b5 <Device::removeAllChildren()+0x29>
c001059e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105a1:	85 c0                	test   eax,eax
c00105a3:	74 0c                	je     c00105b1 <Device::removeAllChildren()+0x25>
c00105a5:	83 ec 0c             	sub    esp,0xc
c00105a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00105aa:	50                   	push   eax
c00105ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105b3:	eb e4                	jmp    c0010599 <Device::removeAllChildren()+0xd>
c00105b5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105c1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ce:	58                   	pop    eax
c00105cf:	5b                   	pop    ebx
c00105d0:	5e                   	pop    esi
c00105d1:	c3                   	ret    

c00105d2 <Device::hibernateAll()>:
c00105d2:	53                   	push   ebx
c00105d3:	83 ec 14             	sub    esp,0x14
c00105d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105dc:	53                   	push   ebx
c00105dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105e6:	83 c4 10             	add    esp,0x10
c00105e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105ec:	74 0f                	je     c00105fd <Device::hibernateAll()+0x2b>
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105f4:	e8 d9 ff ff ff       	call   c00105d2 <Device::hibernateAll()>
c00105f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105fb:	eb e9                	jmp    c00105e6 <Device::hibernateAll()+0x14>
c00105fd:	83 c4 08             	add    esp,0x8
c0010600:	5b                   	pop    ebx
c0010601:	c3                   	ret    

c0010602 <Device::wakeAll()>:
c0010602:	53                   	push   ebx
c0010603:	83 ec 14             	sub    esp,0x14
c0010606:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001060a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001060c:	53                   	push   ebx
c001060d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010610:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010616:	83 c4 10             	add    esp,0x10
c0010619:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001061c:	74 0f                	je     c001062d <Device::wakeAll()+0x2b>
c001061e:	83 ec 0c             	sub    esp,0xc
c0010621:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010624:	e8 d9 ff ff ff       	call   c0010602 <Device::wakeAll()>
c0010629:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001062b:	eb e9                	jmp    c0010616 <Device::wakeAll()+0x14>
c001062d:	83 c4 08             	add    esp,0x8
c0010630:	5b                   	pop    ebx
c0010631:	c3                   	ret    

c0010632 <Device::detectAll()>:
c0010632:	53                   	push   ebx
c0010633:	83 ec 14             	sub    esp,0x14
c0010636:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001063a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001063c:	53                   	push   ebx
c001063d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010640:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001064c:	74 0f                	je     c001065d <Device::detectAll()+0x2b>
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010654:	e8 d9 ff ff ff       	call   c0010632 <Device::detectAll()>
c0010659:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001065b:	eb e9                	jmp    c0010646 <Device::detectAll()+0x14>
c001065d:	83 c4 08             	add    esp,0x8
c0010660:	5b                   	pop    ebx
c0010661:	c3                   	ret    

c0010662 <Device::disableLegacyAll()>:
c0010662:	53                   	push   ebx
c0010663:	83 ec 14             	sub    esp,0x14
c0010666:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001066a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001066c:	53                   	push   ebx
c001066d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010670:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001067c:	74 0f                	je     c001068d <Device::disableLegacyAll()+0x2b>
c001067e:	83 ec 0c             	sub    esp,0xc
c0010681:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010684:	e8 d9 ff ff ff       	call   c0010662 <Device::disableLegacyAll()>
c0010689:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001068b:	eb e9                	jmp    c0010676 <Device::disableLegacyAll()+0x14>
c001068d:	83 c4 08             	add    esp,0x8
c0010690:	5b                   	pop    ebx
c0010691:	c3                   	ret    

c0010692 <Device::loadDriversForAll()>:
c0010692:	53                   	push   ebx
c0010693:	83 ec 08             	sub    esp,0x8
c0010696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106a0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106a2:	85 db                	test   ebx,ebx
c00106a4:	74 12                	je     c00106b8 <Device::loadDriversForAll()+0x26>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106ac:	e8 e1 ff ff ff       	call   c0010692 <Device::loadDriversForAll()>
c00106b1:	83 c4 10             	add    esp,0x10
c00106b4:	89 d8                	mov    eax,ebx
c00106b6:	eb e8                	jmp    c00106a0 <Device::loadDriversForAll()+0xe>
c00106b8:	83 c4 08             	add    esp,0x8
c00106bb:	5b                   	pop    ebx
c00106bc:	c3                   	ret    
c00106bd:	90                   	nop

c00106be <Device::closeAll()>:
c00106be:	53                   	push   ebx
c00106bf:	83 ec 08             	sub    esp,0x8
c00106c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106c8:	6a 00                	push   0x0
c00106ca:	6a 00                	push   0x0
c00106cc:	6a 00                	push   0x0
c00106ce:	53                   	push   ebx
c00106cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106d8:	83 c4 10             	add    esp,0x10
c00106db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106de:	74 0f                	je     c00106ef <Device::closeAll()+0x31>
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106e6:	e8 d3 ff ff ff       	call   c00106be <Device::closeAll()>
c00106eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106ed:	eb e9                	jmp    c00106d8 <Device::closeAll()+0x1a>
c00106ef:	83 c4 08             	add    esp,0x8
c00106f2:	5b                   	pop    ebx
c00106f3:	c3                   	ret    

c00106f4 <Device::powerSavingAll(PowerSavingLevel)>:
c00106f4:	56                   	push   esi
c00106f5:	53                   	push   ebx
c00106f6:	83 ec 0c             	sub    esp,0xc
c00106f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106fd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010701:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010703:	56                   	push   esi
c0010704:	53                   	push   ebx
c0010705:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0010708:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001070e:	83 c4 10             	add    esp,0x10
c0010711:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010714:	74 0f                	je     c0010725 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010716:	52                   	push   edx
c0010717:	52                   	push   edx
c0010718:	56                   	push   esi
c0010719:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001071c:	e8 d3 ff ff ff       	call   c00106f4 <Device::powerSavingAll(PowerSavingLevel)>
c0010721:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010723:	eb e9                	jmp    c001070e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010725:	58                   	pop    eax
c0010726:	5b                   	pop    ebx
c0010727:	5e                   	pop    esi
c0010728:	c3                   	ret    
c0010729:	90                   	nop

c001072a <Device::setName(char const*)>:
c001072a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010732:	e9 70 ff fe ff       	jmp    c00006a7 <strcpy>
c0010737:	90                   	nop

c0010738 <Device::Device(char const*)>:
c0010738:	83 ec 0c             	sub    esp,0xc
c001073b:	ba 18 15 02 c0       	mov    edx,0xc0021518
c0010740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010744:	89 10                	mov    DWORD PTR [eax],edx
c0010746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001074a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010758:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010766:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010774:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001077e:	83 ec 08             	sub    esp,0x8
c0010781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010785:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010789:	e8 9c ff ff ff       	call   c001072a <Device::setName(char const*)>
c001078e:	83 c4 10             	add    esp,0x10
c0010791:	83 ec 0c             	sub    esp,0xc
c0010794:	6a 08                	push   0x8
c0010796:	e8 63 e8 ff ff       	call   c000effe <operator new(unsigned long)>
c001079b:	83 c4 10             	add    esp,0x10
c001079e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107af:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107da:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fe:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010824:	90                   	nop
c0010825:	83 c4 0c             	add    esp,0xc
c0010828:	c3                   	ret    
c0010829:	90                   	nop

c001082a <Device::getName()>:
c001082a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082e:	05 d0 00 00 00       	add    eax,0xd0
c0010833:	c3                   	ret    

c0010834 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010834:	83 ec 0c             	sub    esp,0xc
c0010837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083b:	83 ec 08             	sub    esp,0x8
c001083e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010842:	50                   	push   eax
c0010843:	e8 f0 fe ff ff       	call   c0010738 <Device::Device(char const*)>
c0010848:	83 c4 10             	add    esp,0x10
c001084b:	ba 44 15 02 c0       	mov    edx,0xc0021544
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	89 10                	mov    DWORD PTR [eax],edx
c0010856:	90                   	nop
c0010857:	83 c4 0c             	add    esp,0xc
c001085a:	c3                   	ret    
c001085b:	90                   	nop

c001085c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001085c:	57                   	push   edi
c001085d:	56                   	push   esi
c001085e:	53                   	push   ebx
c001085f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010863:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010867:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001086b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010871:	75 0c                	jne    c001087f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010873:	52                   	push   edx
c0010874:	52                   	push   edx
c0010875:	53                   	push   ebx
c0010876:	56                   	push   esi
c0010877:	e8 58 ea 00 00       	call   c001f2d4 <LinkedList<Device>::addElement(Device*)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010885:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010888:	74 12                	je     c001089c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001088a:	50                   	push   eax
c001088b:	57                   	push   edi
c001088c:	56                   	push   esi
c001088d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010890:	e8 c7 ff ff ff       	call   c001085c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010895:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010897:	83 c4 10             	add    esp,0x10
c001089a:	eb e9                	jmp    c0010885 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001089c:	5b                   	pop    ebx
c001089d:	5e                   	pop    esi
c001089e:	5f                   	pop    edi
c001089f:	c3                   	ret    

c00108a0 <getDevicesOfType(DeviceType)>:
c00108a0:	53                   	push   ebx
c00108a1:	83 ec 14             	sub    esp,0x14
c00108a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108a8:	53                   	push   ebx
c00108a9:	e8 02 eb 00 00       	call   c001f3b0 <LinkedList<Device>::LinkedList()>
c00108ae:	83 c4 0c             	add    esp,0xc
c00108b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b5:	53                   	push   ebx
c00108b6:	ff 35 08 40 02 c0    	push   DWORD PTR ds:0xc0024008
c00108bc:	e8 9b ff ff ff       	call   c001085c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108c1:	83 c4 18             	add    esp,0x18
c00108c4:	89 d8                	mov    eax,ebx
c00108c6:	5b                   	pop    ebx
c00108c7:	c2 04 00             	ret    0x4

c00108ca <HardDiskController::HardDiskController(char const*)>:
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d1:	83 ec 08             	sub    esp,0x8
c00108d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d8:	50                   	push   eax
c00108d9:	e8 5a fe ff ff       	call   c0010738 <Device::Device(char const*)>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	ba 70 15 02 c0       	mov    edx,0xc0021570
c00108e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ea:	89 10                	mov    DWORD PTR [eax],edx
c00108ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108fa:	90                   	nop
c00108fb:	83 c4 0c             	add    esp,0xc
c00108fe:	c3                   	ret    
c00108ff:	90                   	nop

c0010900 <HardDiskController::~HardDiskController()>:
c0010900:	83 ec 0c             	sub    esp,0xc
c0010903:	ba 70 15 02 c0       	mov    edx,0xc0021570
c0010908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090c:	89 10                	mov    DWORD PTR [eax],edx
c001090e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	50                   	push   eax
c0010916:	e8 d3 fa ff ff       	call   c00103ee <Device::~Device()>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	90                   	nop
c001091f:	83 c4 0c             	add    esp,0xc
c0010922:	c3                   	ret    
c0010923:	90                   	nop

c0010924 <HardDiskController::~HardDiskController()>:
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	83 ec 0c             	sub    esp,0xc
c001092a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092e:	e8 cd ff ff ff       	call   c0010900 <HardDiskController::~HardDiskController()>
c0010933:	83 c4 10             	add    esp,0x10
c0010936:	83 ec 08             	sub    esp,0x8
c0010939:	68 58 01 00 00       	push   0x158
c001093e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010942:	e8 c6 e6 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0010947:	83 c4 10             	add    esp,0x10
c001094a:	83 c4 0c             	add    esp,0xc
c001094d:	c3                   	ret    

c001094e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001094e:	83 ec 0c             	sub    esp,0xc
c0010951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010955:	83 ec 08             	sub    esp,0x8
c0010958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001095c:	50                   	push   eax
c001095d:	e8 d6 fd ff ff       	call   c0010738 <Device::Device(char const*)>
c0010962:	83 c4 10             	add    esp,0x10
c0010965:	ba 9c 15 02 c0       	mov    edx,0xc002159c
c001096a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096e:	89 10                	mov    DWORD PTR [eax],edx
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001097b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010998:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001099c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109b0:	90                   	nop
c00109b1:	83 c4 0c             	add    esp,0xc
c00109b4:	c3                   	ret    
c00109b5:	90                   	nop

c00109b6 <PhysicalDisk::startCache()>:
c00109b6:	56                   	push   esi
c00109b7:	53                   	push   ebx
c00109b8:	83 ec 10             	sub    esp,0x10
c00109bb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109bf:	6a 30                	push   0x30
c00109c1:	e8 38 e6 ff ff       	call   c000effe <operator new(unsigned long)>
c00109c6:	89 c6                	mov    esi,eax
c00109c8:	58                   	pop    eax
c00109c9:	5a                   	pop    edx
c00109ca:	53                   	push   ebx
c00109cb:	56                   	push   esi
c00109cc:	e8 cb 1e 00 00       	call   c001289c <VCache::VCache(PhysicalDisk*)>
c00109d1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109d7:	83 c4 14             	add    esp,0x14
c00109da:	5b                   	pop    ebx
c00109db:	5e                   	pop    esi
c00109dc:	c3                   	ret    
c00109dd:	90                   	nop

c00109de <PhysicalDisk::~PhysicalDisk()>:
c00109de:	83 ec 0c             	sub    esp,0xc
c00109e1:	ba 9c 15 02 c0       	mov    edx,0xc002159c
c00109e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ea:	89 10                	mov    DWORD PTR [eax],edx
c00109ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	50                   	push   eax
c00109f4:	e8 f5 f9 ff ff       	call   c00103ee <Device::~Device()>
c00109f9:	83 c4 10             	add    esp,0x10
c00109fc:	90                   	nop
c00109fd:	83 c4 0c             	add    esp,0xc
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <PhysicalDisk::~PhysicalDisk()>:
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	83 ec 0c             	sub    esp,0xc
c0010a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0c:	e8 cd ff ff ff       	call   c00109de <PhysicalDisk::~PhysicalDisk()>
c0010a11:	83 c4 10             	add    esp,0x10
c0010a14:	83 ec 08             	sub    esp,0x8
c0010a17:	68 6c 01 00 00       	push   0x16c
c0010a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a20:	e8 e8 e5 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	83 c4 0c             	add    esp,0xc
c0010a2b:	c3                   	ret    

c0010a2c <FPU::FPU(char const*)>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a33:	83 ec 08             	sub    esp,0x8
c0010a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3a:	50                   	push   eax
c0010a3b:	e8 f8 fc ff ff       	call   c0010738 <Device::Device(char const*)>
c0010a40:	83 c4 10             	add    esp,0x10
c0010a43:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c0010a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4c:	89 10                	mov    DWORD PTR [eax],edx
c0010a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a52:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a5c:	90                   	nop
c0010a5d:	83 c4 0c             	add    esp,0xc
c0010a60:	c3                   	ret    
c0010a61:	90                   	nop

c0010a62 <FPU::~FPU()>:
c0010a62:	83 ec 0c             	sub    esp,0xc
c0010a65:	ba dc 15 02 c0       	mov    edx,0xc00215dc
c0010a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6e:	89 10                	mov    DWORD PTR [eax],edx
c0010a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a74:	83 ec 0c             	sub    esp,0xc
c0010a77:	50                   	push   eax
c0010a78:	e8 71 f9 ff ff       	call   c00103ee <Device::~Device()>
c0010a7d:	83 c4 10             	add    esp,0x10
c0010a80:	90                   	nop
c0010a81:	83 c4 0c             	add    esp,0xc
c0010a84:	c3                   	ret    
c0010a85:	90                   	nop

c0010a86 <FPU::~FPU()>:
c0010a86:	83 ec 0c             	sub    esp,0xc
c0010a89:	83 ec 0c             	sub    esp,0xc
c0010a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a90:	e8 cd ff ff ff       	call   c0010a62 <FPU::~FPU()>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	83 ec 08             	sub    esp,0x8
c0010a9b:	68 58 01 00 00       	push   0x158
c0010aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa4:	e8 64 e5 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0010aa9:	83 c4 10             	add    esp,0x10
c0010aac:	83 c4 0c             	add    esp,0xc
c0010aaf:	c3                   	ret    

c0010ab0 <setupFPU()>:
c0010ab0:	53                   	push   ebx
c0010ab1:	83 ec 08             	sub    esp,0x8
c0010ab4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0010ab9:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ac0:	74 19                	je     c0010adb <setupFPU()+0x2b>
c0010ac2:	83 ec 0c             	sub    esp,0xc
c0010ac5:	68 58 01 00 00       	push   0x158
c0010aca:	e8 2f e5 ff ff       	call   c000effe <operator new(unsigned long)>
c0010acf:	89 c3                	mov    ebx,eax
c0010ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ad4:	e8 27 cf 00 00       	call   c001da00 <AVX::AVX()>
c0010ad9:	eb 5b                	jmp    c0010b36 <setupFPU()+0x86>
c0010adb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010ae1:	84 c0                	test   al,al
c0010ae3:	79 19                	jns    c0010afe <setupFPU()+0x4e>
c0010ae5:	83 ec 0c             	sub    esp,0xc
c0010ae8:	68 58 01 00 00       	push   0x158
c0010aed:	e8 0c e5 ff ff       	call   c000effe <operator new(unsigned long)>
c0010af2:	89 c3                	mov    ebx,eax
c0010af4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010af7:	e8 2a d0 00 00       	call   c001db26 <SSE::SSE()>
c0010afc:	eb 38                	jmp    c0010b36 <setupFPU()+0x86>
c0010afe:	a8 20                	test   al,0x20
c0010b00:	74 19                	je     c0010b1b <setupFPU()+0x6b>
c0010b02:	83 ec 0c             	sub    esp,0xc
c0010b05:	68 58 01 00 00       	push   0x158
c0010b0a:	e8 ef e4 ff ff       	call   c000effe <operator new(unsigned long)>
c0010b0f:	89 c3                	mov    ebx,eax
c0010b11:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b14:	e8 77 cf 00 00       	call   c001da90 <MMX::MMX()>
c0010b19:	eb 1b                	jmp    c0010b36 <setupFPU()+0x86>
c0010b1b:	a8 10                	test   al,0x10
c0010b1d:	74 1c                	je     c0010b3b <setupFPU()+0x8b>
c0010b1f:	83 ec 0c             	sub    esp,0xc
c0010b22:	68 58 01 00 00       	push   0x158
c0010b27:	e8 d2 e4 ff ff       	call   c000effe <operator new(unsigned long)>
c0010b2c:	89 c3                	mov    ebx,eax
c0010b2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b31:	e8 7e d0 00 00       	call   c001dbb4 <x87::x87()>
c0010b36:	83 c4 10             	add    esp,0x10
c0010b39:	eb 2c                	jmp    c0010b67 <setupFPU()+0xb7>
c0010b3b:	83 ec 0c             	sub    esp,0xc
c0010b3e:	31 db                	xor    ebx,ebx
c0010b40:	68 c8 15 02 c0       	push   0xc00215c8
c0010b45:	e8 e9 e5 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010b4a:	e8 37 36 00 00       	call   c0014186 <thisCPU()>
c0010b4f:	e8 32 36 00 00       	call   c0014186 <thisCPU()>
c0010b54:	e8 af e8 00 00       	call   c001f408 <CPU::readCR0()>
c0010b59:	83 c8 04             	or     eax,0x4
c0010b5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b5f:	e8 b6 e8 00 00       	call   c001f41a <CPU::writeCR0(unsigned long)>
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	83 c4 08             	add    esp,0x8
c0010b6a:	89 d8                	mov    eax,ebx
c0010b6c:	5b                   	pop    ebx
c0010b6d:	c3                   	ret    

c0010b6e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b76:	c1 e0 04             	shl    eax,0x4
c0010b79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b7d:	01 d0                	add    eax,edx
c0010b7f:	8d 50 10             	lea    edx,[eax+0x10]
c0010b82:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b88:	74 08                	je     c0010b92 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x24>
c0010b8a:	83 c0 04             	add    eax,0x4
c0010b8d:	39 d0                	cmp    eax,edx
c0010b8f:	75 f1                	jne    c0010b82 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x14>
c0010b91:	c3                   	ret    
c0010b92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b9c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010ba6:	eb e2                	jmp    c0010b8a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1c>

c0010ba8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010ba8:	57                   	push   edi
c0010ba9:	31 c0                	xor    eax,eax
c0010bab:	56                   	push   esi
c0010bac:	53                   	push   ebx
c0010bad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bb5:	89 da                	mov    edx,ebx
c0010bb7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bbb:	c1 e2 04             	shl    edx,0x4
c0010bbe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010bc2:	01 ca                	add    edx,ecx
c0010bc4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bcc:	74 16                	je     c0010be4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bce:	40                   	inc    eax
c0010bcf:	83 f8 04             	cmp    eax,0x4
c0010bd2:	75 f0                	jne    c0010bc4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bd4:	c7 44 24 10 0c 16 02 c0 	mov    DWORD PTR [esp+0x10],0xc002160c
c0010bdc:	5b                   	pop    ebx
c0010bdd:	5e                   	pop    esi
c0010bde:	5f                   	pop    edi
c0010bdf:	e9 0e 47 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c0010be4:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010be7:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010bea:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010bf0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010bf6:	5b                   	pop    ebx
c0010bf7:	5e                   	pop    esi
c0010bf8:	5f                   	pop    edi
c0010bf9:	c3                   	ret    

c0010bfa <doubleFault(regs*, void*)>:
c0010bfa:	c7 44 24 04 3c 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002173c
c0010c02:	e9 eb 46 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c0010c07:	90                   	nop

c0010c08 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c08:	56                   	push   esi
c0010c09:	53                   	push   ebx
c0010c0a:	50                   	push   eax
c0010c0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c13:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c18:	75 33                	jne    c0010c4d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x45>
c0010c1a:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c1d:	31 d2                	xor    edx,edx
c0010c1f:	89 c1                	mov    ecx,eax
c0010c21:	c1 e1 04             	shl    ecx,0x4
c0010c24:	01 f1                	add    ecx,esi
c0010c26:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c2e:	74 3f                	je     c0010c6f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0010c30:	42                   	inc    edx
c0010c31:	83 fa 04             	cmp    edx,0x4
c0010c34:	75 f0                	jne    c0010c26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	68 80 16 02 c0       	push   0xc0021680
c0010c3e:	e8 af 46 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	83 c8 ff             	or     eax,0xffffffff
c0010c49:	5a                   	pop    edx
c0010c4a:	5b                   	pop    ebx
c0010c4b:	5e                   	pop    esi
c0010c4c:	c3                   	ret    
c0010c4d:	83 ec 0c             	sub    esp,0xc
c0010c50:	56                   	push   esi
c0010c51:	e8 d4 fb ff ff       	call   c001082a <Device::getName()>
c0010c56:	83 c4 10             	add    esp,0x10
c0010c59:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c5c:	75 bc                	jne    c0010c1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c5e:	83 fb 0f             	cmp    ebx,0xf
c0010c61:	7f 2c                	jg     c0010c8f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x87>
c0010c63:	31 c0                	xor    eax,eax
c0010c65:	8a 83 60 37 02 c0    	mov    al,BYTE PTR [ebx-0x3ffdc8a0]
c0010c6b:	89 c3                	mov    ebx,eax
c0010c6d:	eb ab                	jmp    c0010c1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c6f:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c76:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c83:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c89:	89 d8                	mov    eax,ebx
c0010c8b:	5a                   	pop    edx
c0010c8c:	5b                   	pop    ebx
c0010c8d:	5e                   	pop    esi
c0010c8e:	c3                   	ret    
c0010c8f:	83 ec 0c             	sub    esp,0xc
c0010c92:	68 48 16 02 c0       	push   0xc0021648
c0010c97:	e8 56 46 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	e9 76 ff ff ff       	jmp    c0010c1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>

c0010ca4 <InterruptController::clearAllHandlers(int, bool)>:
c0010ca4:	56                   	push   esi
c0010ca5:	53                   	push   ebx
c0010ca6:	52                   	push   edx
c0010ca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010caf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010cb4:	75 61                	jne    c0010d17 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010cb6:	8d 46 20             	lea    eax,[esi+0x20]
c0010cb9:	c1 e0 04             	shl    eax,0x4
c0010cbc:	c1 e6 04             	shl    esi,0x4
c0010cbf:	01 d8                	add    eax,ebx
c0010cc1:	01 de                	add    esi,ebx
c0010cc3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010ccd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cd7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010ce1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010ceb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010cf5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010cff:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d09:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d13:	58                   	pop    eax
c0010d14:	5b                   	pop    ebx
c0010d15:	5e                   	pop    esi
c0010d16:	c3                   	ret    
c0010d17:	83 ec 0c             	sub    esp,0xc
c0010d1a:	53                   	push   ebx
c0010d1b:	e8 0a fb ff ff       	call   c001082a <Device::getName()>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d26:	75 8e                	jne    c0010cb6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d28:	83 fe 0f             	cmp    esi,0xf
c0010d2b:	7f 12                	jg     c0010d3f <InterruptController::clearAllHandlers(int, bool)+0x9b>
c0010d2d:	8a 86 60 37 02 c0    	mov    al,BYTE PTR [esi-0x3ffdc8a0]
c0010d33:	25 ff 00 00 00       	and    eax,0xff
c0010d38:	89 c6                	mov    esi,eax
c0010d3a:	e9 77 ff ff ff       	jmp    c0010cb6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d3f:	83 ec 0c             	sub    esp,0xc
c0010d42:	68 bc 16 02 c0       	push   0xc00216bc
c0010d47:	e8 a6 45 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	e9 62 ff ff ff       	jmp    c0010cb6 <InterruptController::clearAllHandlers(int, bool)+0x12>

c0010d54 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d54:	56                   	push   esi
c0010d55:	53                   	push   ebx
c0010d56:	52                   	push   edx
c0010d57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d5f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d64:	75 3a                	jne    c0010da0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d6a:	8d 50 20             	lea    edx,[eax+0x20]
c0010d6d:	c1 e2 04             	shl    edx,0x4
c0010d70:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d73:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d77:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d7d:	74 0b                	je     c0010d8a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d7f:	83 c0 04             	add    eax,0x4
c0010d82:	39 d0                	cmp    eax,edx
c0010d84:	75 f1                	jne    c0010d77 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d86:	58                   	pop    eax
c0010d87:	5b                   	pop    ebx
c0010d88:	5e                   	pop    esi
c0010d89:	c3                   	ret    
c0010d8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d94:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d9e:	eb df                	jmp    c0010d7f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	56                   	push   esi
c0010da4:	e8 81 fa ff ff       	call   c001082a <Device::getName()>
c0010da9:	83 c4 10             	add    esp,0x10
c0010dac:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010daf:	75 b5                	jne    c0010d66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010db1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010db6:	7f 12                	jg     c0010dca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x76>
c0010db8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010dbc:	31 c0                	xor    eax,eax
c0010dbe:	8a 81 60 37 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdc8a0]
c0010dc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010dc8:	eb 9c                	jmp    c0010d66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dca:	83 ec 0c             	sub    esp,0xc
c0010dcd:	68 bc 16 02 c0       	push   0xc00216bc
c0010dd2:	e8 1b 45 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	eb 8a                	jmp    c0010d66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ddc <nmiHandler(regs*, void*)>:
c0010ddc:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0010de1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010de5:	e9 5c a8 ff ff       	jmp    c000b646 <Computer::handleNMI()>

c0010dea <int_handler>:
c0010dea:	55                   	push   ebp
c0010deb:	57                   	push   edi
c0010dec:	56                   	push   esi
c0010ded:	53                   	push   ebx
c0010dee:	83 ec 0c             	sub    esp,0xc
c0010df1:	80 3d 54 4a 02 c0 00 	cmp    BYTE PTR ds:0xc0024a54,0x0
c0010df8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010dfc:	74 0b                	je     c0010e09 <int_handler+0x1f>
c0010dfe:	fa                   	cli    
c0010dff:	f4                   	hlt    
c0010e00:	80 3d 54 4a 02 c0 00 	cmp    BYTE PTR ds:0xc0024a54,0x0
c0010e07:	75 f5                	jne    c0010dfe <int_handler+0x14>
c0010e09:	e8 78 33 00 00       	call   c0014186 <thisCPU()>
c0010e0e:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e11:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e17:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e1a:	83 f8 17             	cmp    eax,0x17
c0010e1d:	77 14                	ja     c0010e33 <int_handler+0x49>
c0010e1f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e22:	55                   	push   ebp
c0010e23:	55                   	push   ebp
c0010e24:	25 ff 00 00 00       	and    eax,0xff
c0010e29:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e2b:	50                   	push   eax
c0010e2c:	57                   	push   edi
c0010e2d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e30:	83 c4 10             	add    esp,0x10
c0010e33:	83 c3 15             	add    ebx,0x15
c0010e36:	c1 e3 04             	shl    ebx,0x4
c0010e39:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e3d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e44:	31 db                	xor    ebx,ebx
c0010e46:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e4a:	85 c0                	test   eax,eax
c0010e4c:	74 12                	je     c0010e60 <int_handler+0x76>
c0010e4e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e51:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e55:	74 1b                	je     c0010e72 <int_handler+0x88>
c0010e57:	51                   	push   ecx
c0010e58:	51                   	push   ecx
c0010e59:	52                   	push   edx
c0010e5a:	56                   	push   esi
c0010e5b:	ff d0                	call   eax
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	43                   	inc    ebx
c0010e61:	83 fb 04             	cmp    ebx,0x4
c0010e64:	75 e0                	jne    c0010e46 <int_handler+0x5c>
c0010e66:	83 c4 0c             	add    esp,0xc
c0010e69:	31 c0                	xor    eax,eax
c0010e6b:	31 d2                	xor    edx,edx
c0010e6d:	5b                   	pop    ebx
c0010e6e:	5e                   	pop    esi
c0010e6f:	5f                   	pop    edi
c0010e70:	5d                   	pop    ebp
c0010e71:	c3                   	ret    
c0010e72:	53                   	push   ebx
c0010e73:	53                   	push   ebx
c0010e74:	52                   	push   edx
c0010e75:	56                   	push   esi
c0010e76:	ff d0                	call   eax
c0010e78:	83 c4 10             	add    esp,0x10
c0010e7b:	83 c4 0c             	add    esp,0xc
c0010e7e:	5b                   	pop    ebx
c0010e7f:	5e                   	pop    esi
c0010e80:	5f                   	pop    edi
c0010e81:	5d                   	pop    ebp
c0010e82:	c3                   	ret    
c0010e83:	90                   	nop

c0010e84 <InterruptController::InterruptController(char const*)>:
c0010e84:	83 ec 1c             	sub    esp,0x1c
c0010e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8b:	83 ec 08             	sub    esp,0x8
c0010e8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e92:	50                   	push   eax
c0010e93:	e8 a0 f8 ff ff       	call   c0010738 <Device::Device(char const*)>
c0010e98:	83 c4 10             	add    esp,0x10
c0010e9b:	ba d8 18 02 c0       	mov    edx,0xc00218d8
c0010ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea4:	89 10                	mov    DWORD PTR [eax],edx
c0010ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eaa:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010eb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ebc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010ec4:	7f 5e                	jg     c0010f24 <InterruptController::InterruptController(char const*)+0xa0>
c0010ec6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ece:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ed3:	7f 49                	jg     c0010f1e <InterruptController::InterruptController(char const*)+0x9a>
c0010ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010edd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ee8:	01 ca                	add    edx,ecx
c0010eea:	83 c2 54             	add    edx,0x54
c0010eed:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ef9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010efd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f08:	01 ca                	add    edx,ecx
c0010f0a:	81 c2 54 04 00 00    	add    edx,0x454
c0010f10:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f18:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f1c:	eb b0                	jmp    c0010ece <InterruptController::InterruptController(char const*)+0x4a>
c0010f1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f22:	eb 98                	jmp    c0010ebc <InterruptController::InterruptController(char const*)+0x38>
c0010f24:	90                   	nop
c0010f25:	83 c4 1c             	add    esp,0x1c
c0010f28:	c3                   	ret    
c0010f29:	90                   	nop

c0010f2a <InterruptController::~InterruptController()>:
c0010f2a:	83 ec 0c             	sub    esp,0xc
c0010f2d:	ba d8 18 02 c0       	mov    edx,0xc00218d8
c0010f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f36:	89 10                	mov    DWORD PTR [eax],edx
c0010f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3c:	83 ec 0c             	sub    esp,0xc
c0010f3f:	50                   	push   eax
c0010f40:	e8 a9 f4 ff ff       	call   c00103ee <Device::~Device()>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	90                   	nop
c0010f49:	83 c4 0c             	add    esp,0xc
c0010f4c:	c3                   	ret    
c0010f4d:	90                   	nop

c0010f4e <InterruptController::~InterruptController()>:
c0010f4e:	83 ec 0c             	sub    esp,0xc
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f58:	e8 cd ff ff ff       	call   c0010f2a <InterruptController::~InterruptController()>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	83 ec 08             	sub    esp,0x8
c0010f63:	68 58 21 00 00       	push   0x2158
c0010f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6c:	e8 9c e0 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0010f71:	83 c4 10             	add    esp,0x10
c0010f74:	83 c4 0c             	add    esp,0xc
c0010f77:	c3                   	ret    

c0010f78 <displayDebugInfo(regs*)>:
c0010f78:	55                   	push   ebp
c0010f79:	57                   	push   edi
c0010f7a:	56                   	push   esi
c0010f7b:	53                   	push   ebx
c0010f7c:	83 ec 24             	sub    esp,0x24
c0010f7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f83:	0f 20 c2             	mov    edx,cr0
c0010f86:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f8a:	0f 20 d7             	mov    edi,cr2
c0010f8d:	0f 20 de             	mov    esi,cr3
c0010f90:	0f 20 e5             	mov    ebp,cr4
c0010f93:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f96:	50                   	push   eax
c0010f97:	68 49 17 02 c0       	push   0xc0021749
c0010f9c:	e8 92 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010fa1:	5a                   	pop    edx
c0010fa2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fa5:	59                   	pop    ecx
c0010fa6:	50                   	push   eax
c0010fa7:	68 54 17 02 c0       	push   0xc0021754
c0010fac:	e8 82 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010fb1:	58                   	pop    eax
c0010fb2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010fb5:	5a                   	pop    edx
c0010fb6:	51                   	push   ecx
c0010fb7:	68 5f 17 02 c0       	push   0xc002175f
c0010fbc:	e8 72 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010fc1:	58                   	pop    eax
c0010fc2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010fc5:	5a                   	pop    edx
c0010fc6:	51                   	push   ecx
c0010fc7:	68 6a 17 02 c0       	push   0xc002176a
c0010fcc:	e8 62 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010fd1:	58                   	pop    eax
c0010fd2:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010fd5:	5a                   	pop    edx
c0010fd6:	51                   	push   ecx
c0010fd7:	68 75 17 02 c0       	push   0xc0021775
c0010fdc:	e8 52 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010fe1:	58                   	pop    eax
c0010fe2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0010fe5:	5a                   	pop    edx
c0010fe6:	51                   	push   ecx
c0010fe7:	68 80 17 02 c0       	push   0xc0021780
c0010fec:	e8 42 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0010ff1:	58                   	pop    eax
c0010ff2:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0010ff5:	5a                   	pop    edx
c0010ff6:	51                   	push   ecx
c0010ff7:	68 9a 17 02 c0       	push   0xc002179a
c0010ffc:	e8 32 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011001:	58                   	pop    eax
c0011002:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0011005:	5a                   	pop    edx
c0011006:	51                   	push   ecx
c0011007:	68 8b 17 02 c0       	push   0xc002178b
c001100c:	e8 22 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011011:	58                   	pop    eax
c0011012:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0011015:	5a                   	pop    edx
c0011016:	51                   	push   ecx
c0011017:	68 96 17 02 c0       	push   0xc0021796
c001101c:	e8 12 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011021:	58                   	pop    eax
c0011022:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0011025:	5a                   	pop    edx
c0011026:	51                   	push   ecx
c0011027:	68 a5 17 02 c0       	push   0xc00217a5
c001102c:	e8 02 e1 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011031:	58                   	pop    eax
c0011032:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0011035:	5a                   	pop    edx
c0011036:	51                   	push   ecx
c0011037:	68 b0 17 02 c0       	push   0xc00217b0
c001103c:	e8 f2 e0 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011041:	58                   	pop    eax
c0011042:	5a                   	pop    edx
c0011043:	57                   	push   edi
c0011044:	68 bb 17 02 c0       	push   0xc00217bb
c0011049:	e8 e5 e0 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001104e:	59                   	pop    ecx
c001104f:	58                   	pop    eax
c0011050:	56                   	push   esi
c0011051:	68 c6 17 02 c0       	push   0xc00217c6
c0011056:	e8 d8 e0 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001105b:	58                   	pop    eax
c001105c:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011061:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011067:	50                   	push   eax
c0011068:	e8 f6 c1 ff ff       	call   c000d263 <setActiveTerminal(VgaText*)>
c001106d:	58                   	pop    eax
c001106e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011071:	c1 e0 05             	shl    eax,0x5
c0011074:	5a                   	pop    edx
c0011075:	05 c0 34 02 c0       	add    eax,0xc00234c0
c001107a:	50                   	push   eax
c001107b:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011080:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011086:	51                   	push   ecx
c0011087:	e8 f8 c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001108c:	58                   	pop    eax
c001108d:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011092:	5a                   	pop    edx
c0011093:	68 d1 17 02 c0       	push   0xc00217d1
c0011098:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001109e:	51                   	push   ecx
c001109f:	e8 e0 c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00110a4:	58                   	pop    eax
c00110a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110aa:	5a                   	pop    edx
c00110ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110ae:	83 c0 0c             	add    eax,0xc
c00110b1:	50                   	push   eax
c00110b2:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00110b7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110bd:	51                   	push   ecx
c00110be:	e8 c1 c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00110c3:	58                   	pop    eax
c00110c4:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00110c9:	5a                   	pop    edx
c00110ca:	68 da 17 02 c0       	push   0xc00217da
c00110cf:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110d5:	51                   	push   ecx
c00110d6:	e8 a9 c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00110db:	58                   	pop    eax
c00110dc:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00110df:	5a                   	pop    edx
c00110e0:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00110e5:	51                   	push   ecx
c00110e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110ec:	50                   	push   eax
c00110ed:	e8 b8 c5 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00110f2:	58                   	pop    eax
c00110f3:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00110f8:	5a                   	pop    edx
c00110f9:	68 e2 17 02 c0       	push   0xc00217e2
c00110fe:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011104:	51                   	push   ecx
c0011105:	e8 7a c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001110a:	58                   	pop    eax
c001110b:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c001110e:	5a                   	pop    edx
c001110f:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011114:	51                   	push   ecx
c0011115:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001111b:	50                   	push   eax
c001111c:	e8 89 c5 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011121:	58                   	pop    eax
c0011122:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011127:	5a                   	pop    edx
c0011128:	68 ea 17 02 c0       	push   0xc00217ea
c001112d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011133:	51                   	push   ecx
c0011134:	e8 4b c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0011139:	58                   	pop    eax
c001113a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001113d:	5a                   	pop    edx
c001113e:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011143:	51                   	push   ecx
c0011144:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001114a:	50                   	push   eax
c001114b:	e8 5a c5 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011150:	58                   	pop    eax
c0011151:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011156:	5a                   	pop    edx
c0011157:	68 f2 17 02 c0       	push   0xc00217f2
c001115c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011162:	51                   	push   ecx
c0011163:	e8 1c c5 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0011168:	58                   	pop    eax
c0011169:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001116c:	5a                   	pop    edx
c001116d:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011172:	51                   	push   ecx
c0011173:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011179:	50                   	push   eax
c001117a:	e8 2b c5 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c001117f:	58                   	pop    eax
c0011180:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011185:	5a                   	pop    edx
c0011186:	68 fa 17 02 c0       	push   0xc00217fa
c001118b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011191:	51                   	push   ecx
c0011192:	e8 ed c4 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0011197:	58                   	pop    eax
c0011198:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001119b:	5a                   	pop    edx
c001119c:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00111a1:	51                   	push   ecx
c00111a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111a8:	50                   	push   eax
c00111a9:	e8 fc c4 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00111ae:	58                   	pop    eax
c00111af:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00111b4:	5a                   	pop    edx
c00111b5:	68 02 18 02 c0       	push   0xc0021802
c00111ba:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00111c0:	51                   	push   ecx
c00111c1:	e8 be c4 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00111c6:	58                   	pop    eax
c00111c7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00111ca:	5a                   	pop    edx
c00111cb:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00111d0:	51                   	push   ecx
c00111d1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111d7:	53                   	push   ebx
c00111d8:	e8 cd c4 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00111dd:	58                   	pop    eax
c00111de:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00111e3:	5a                   	pop    edx
c00111e4:	68 0a 18 02 c0       	push   0xc002180a
c00111e9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00111ef:	51                   	push   ecx
c00111f0:	e8 8f c4 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00111f5:	5b                   	pop    ebx
c00111f6:	58                   	pop    eax
c00111f7:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00111fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011200:	52                   	push   edx
c0011201:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011207:	50                   	push   eax
c0011208:	e8 9d c4 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c001120d:	58                   	pop    eax
c001120e:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011213:	5a                   	pop    edx
c0011214:	68 13 18 02 c0       	push   0xc0021813
c0011219:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001121f:	51                   	push   ecx
c0011220:	e8 5f c4 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0011225:	5b                   	pop    ebx
c0011226:	58                   	pop    eax
c0011227:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001122c:	57                   	push   edi
c001122d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011233:	50                   	push   eax
c0011234:	e8 71 c4 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011239:	58                   	pop    eax
c001123a:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001123f:	5a                   	pop    edx
c0011240:	68 1b 18 02 c0       	push   0xc002181b
c0011245:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001124b:	51                   	push   ecx
c001124c:	e8 33 c4 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0011251:	5b                   	pop    ebx
c0011252:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011257:	5f                   	pop    edi
c0011258:	56                   	push   esi
c0011259:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001125f:	50                   	push   eax
c0011260:	e8 45 c4 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011265:	58                   	pop    eax
c0011266:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001126b:	5a                   	pop    edx
c001126c:	68 23 18 02 c0       	push   0xc0021823
c0011271:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011277:	51                   	push   ecx
c0011278:	e8 07 c4 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001127d:	5b                   	pop    ebx
c001127e:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011283:	5e                   	pop    esi
c0011284:	55                   	push   ebp
c0011285:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001128b:	57                   	push   edi
c001128c:	e8 19 c4 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011291:	5d                   	pop    ebp
c0011292:	58                   	pop    eax
c0011293:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011298:	68 2b 18 02 c0       	push   0xc002182b
c001129d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112a3:	50                   	push   eax
c00112a4:	e8 db c3 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00112a9:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00112ae:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112b4:	e8 6a e1 00 00       	call   c001f423 <CPU::readDR0()>
c00112b9:	5a                   	pop    edx
c00112ba:	59                   	pop    ecx
c00112bb:	50                   	push   eax
c00112bc:	53                   	push   ebx
c00112bd:	e8 e8 c3 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00112c2:	5b                   	pop    ebx
c00112c3:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00112c8:	5e                   	pop    esi
c00112c9:	68 34 18 02 c0       	push   0xc0021834
c00112ce:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00112d4:	57                   	push   edi
c00112d5:	e8 aa c3 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00112da:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00112df:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112e5:	e8 4b e1 00 00       	call   c001f435 <CPU::readDR1()>
c00112ea:	5d                   	pop    ebp
c00112eb:	5a                   	pop    edx
c00112ec:	50                   	push   eax
c00112ed:	53                   	push   ebx
c00112ee:	e8 b7 c3 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00112f3:	59                   	pop    ecx
c00112f4:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00112f9:	5b                   	pop    ebx
c00112fa:	68 3c 18 02 c0       	push   0xc002183c
c00112ff:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0011305:	56                   	push   esi
c0011306:	e8 79 c3 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001130b:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011310:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011316:	e8 2c e1 00 00       	call   c001f447 <CPU::readDR2()>
c001131b:	5f                   	pop    edi
c001131c:	5d                   	pop    ebp
c001131d:	50                   	push   eax
c001131e:	53                   	push   ebx
c001131f:	e8 86 c3 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011324:	58                   	pop    eax
c0011325:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001132a:	5a                   	pop    edx
c001132b:	68 44 18 02 c0       	push   0xc0021844
c0011330:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011336:	51                   	push   ecx
c0011337:	e8 48 c3 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001133c:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011341:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011347:	e8 0d e1 00 00       	call   c001f459 <CPU::readDR3()>
c001134c:	5e                   	pop    esi
c001134d:	5f                   	pop    edi
c001134e:	50                   	push   eax
c001134f:	53                   	push   ebx
c0011350:	e8 55 c3 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011355:	5d                   	pop    ebp
c0011356:	58                   	pop    eax
c0011357:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001135c:	68 4c 18 02 c0       	push   0xc002184c
c0011361:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011367:	50                   	push   eax
c0011368:	e8 17 c3 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001136d:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011372:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011378:	e8 ee e0 00 00       	call   c001f46b <CPU::readDR6()>
c001137d:	5a                   	pop    edx
c001137e:	59                   	pop    ecx
c001137f:	50                   	push   eax
c0011380:	53                   	push   ebx
c0011381:	e8 24 c3 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0011386:	5b                   	pop    ebx
c0011387:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001138c:	5e                   	pop    esi
c001138d:	68 54 18 02 c0       	push   0xc0021854
c0011392:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0011398:	57                   	push   edi
c0011399:	e8 e6 c2 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001139e:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00113a3:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113a9:	e8 cf e0 00 00       	call   c001f47d <CPU::readDR7()>
c00113ae:	5d                   	pop    ebp
c00113af:	5a                   	pop    edx
c00113b0:	50                   	push   eax
c00113b1:	53                   	push   ebx
c00113b2:	e8 f3 c2 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00113b7:	fa                   	cli    
c00113b8:	f4                   	hlt    
c00113b9:	83 c4 10             	add    esp,0x10
c00113bc:	eb fe                	jmp    c00113bc <displayDebugInfo(regs*)+0x444>

c00113be <x87EmulHandler(regs*, void*)>:
c00113be:	53                   	push   ebx
c00113bf:	83 ec 08             	sub    esp,0x8
c00113c2:	a1 94 41 02 c0       	mov    eax,ds:0xc0024194
c00113c7:	85 c0                	test   eax,eax
c00113c9:	74 16                	je     c00113e1 <x87EmulHandler(regs*, void*)+0x23>
c00113cb:	83 ec 0c             	sub    esp,0xc
c00113ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113d2:	53                   	push   ebx
c00113d3:	ff d0                	call   eax
c00113d5:	83 c4 10             	add    esp,0x10
c00113d8:	84 c0                	test   al,al
c00113da:	74 2e                	je     c001140a <x87EmulHandler(regs*, void*)+0x4c>
c00113dc:	83 c4 08             	add    esp,0x8
c00113df:	5b                   	pop    ebx
c00113e0:	c3                   	ret    
c00113e1:	50                   	push   eax
c00113e2:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c00113e8:	50                   	push   eax
c00113e9:	6a 01                	push   0x1
c00113eb:	68 5c 18 02 c0       	push   0xc002185c
c00113f0:	e8 20 69 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c00113f5:	5a                   	pop    edx
c00113f6:	59                   	pop    ecx
c00113f7:	53                   	push   ebx
c00113f8:	50                   	push   eax
c00113f9:	e8 dd 6a 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c00113fe:	a1 94 41 02 c0       	mov    eax,ds:0xc0024194
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	85 c0                	test   eax,eax
c0011408:	75 c1                	jne    c00113cb <x87EmulHandler(regs*, void*)+0xd>
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	68 79 18 02 c0       	push   0xc0021879
c0011412:	e8 1c dd ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011417:	59                   	pop    ecx
c0011418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001141c:	e8 57 fb ff ff       	call   c0010f78 <displayDebugInfo(regs*)>

c0011421 <gpFault(regs*, void*)>:
c0011421:	53                   	push   ebx
c0011422:	83 ec 14             	sub    esp,0x14
c0011425:	c7 05 90 41 02 c0 8d 91 01 c0 	mov    DWORD PTR ds:0xc0024190,0xc001918d
c001142f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011433:	53                   	push   ebx
c0011434:	e8 54 7d 00 00       	call   c001918d <Vm::faultHandler(regs*)>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	84 c0                	test   al,al
c001143e:	74 05                	je     c0011445 <gpFault(regs*, void*)+0x24>
c0011440:	83 c4 08             	add    esp,0x8
c0011443:	5b                   	pop    ebx
c0011444:	c3                   	ret    
c0011445:	83 ec 0c             	sub    esp,0xc
c0011448:	68 79 18 02 c0       	push   0xc0021879
c001144d:	e8 e1 dc ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011452:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011455:	e8 1e fb ff ff       	call   c0010f78 <displayDebugInfo(regs*)>

c001145a <pgFault(regs*, void*)>:
c001145a:	83 ec 18             	sub    esp,0x18
c001145d:	68 94 18 02 c0       	push   0xc0021894
c0011462:	e8 cc dc ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011467:	58                   	pop    eax
c0011468:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001146c:	52                   	push   edx
c001146d:	e8 06 fb ff ff       	call   c0010f78 <displayDebugInfo(regs*)>

c0011472 <otherISRHandler(regs*, void*)>:
c0011472:	53                   	push   ebx
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001147a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001147d:	50                   	push   eax
c001147e:	50                   	push   eax
c001147f:	68 a1 18 02 c0       	push   0xc00218a1
c0011484:	e8 aa dc ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0011489:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001148c:	e8 e7 fa ff ff       	call   c0010f78 <displayDebugInfo(regs*)>

c0011491 <opcodeFault(regs*, void*)>:
c0011491:	53                   	push   ebx
c0011492:	83 ec 08             	sub    esp,0x8
c0011495:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011499:	e8 e8 2c 00 00       	call   c0014186 <thisCPU()>
c001149e:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00114a5:	74 1b                	je     c00114c2 <opcodeFault(regs*, void*)+0x31>
c00114a7:	83 ec 0c             	sub    esp,0xc
c00114aa:	68 f8 16 02 c0       	push   0xc00216f8
c00114af:	e8 7f dc ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00114b4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00114b7:	83 c0 19             	add    eax,0x19
c00114ba:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00114bd:	83 c4 18             	add    esp,0x18
c00114c0:	5b                   	pop    ebx
c00114c1:	c3                   	ret    
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	68 be 18 02 c0       	push   0xc00218be
c00114ca:	e8 64 dc ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00114cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00114d2:	31 d2                	xor    edx,edx
c00114d4:	c1 e0 04             	shl    eax,0x4
c00114d7:	31 c9                	xor    ecx,ecx
c00114d9:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00114dc:	8a 50 03             	mov    dl,BYTE PTR [eax+0x3]
c00114df:	89 14 24             	mov    DWORD PTR [esp],edx
c00114e2:	31 d2                	xor    edx,edx
c00114e4:	8a 50 02             	mov    dl,BYTE PTR [eax+0x2]
c00114e7:	52                   	push   edx
c00114e8:	31 d2                	xor    edx,edx
c00114ea:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c00114ed:	52                   	push   edx
c00114ee:	8a 08                	mov    cl,BYTE PTR [eax]
c00114f0:	89 c8                	mov    eax,ecx
c00114f2:	50                   	push   eax
c00114f3:	68 1c 17 02 c0       	push   0xc002171c
c00114f8:	e8 36 dc ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00114fd:	83 c4 14             	add    esp,0x14
c0011500:	53                   	push   ebx
c0011501:	e8 72 fa ff ff       	call   c0010f78 <displayDebugInfo(regs*)>

c0011506 <displayProgramFault(char const*)>:
c0011506:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001150b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001150e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011514:	85 c0                	test   eax,eax
c0011516:	74 16                	je     c001152e <displayProgramFault(char const*)+0x28>
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	6a 04                	push   0x4
c001151d:	6a 0f                	push   0xf
c001151f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011523:	52                   	push   edx
c0011524:	50                   	push   eax
c0011525:	e8 1a be ff ff       	call   c000d344 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001152a:	83 c4 1c             	add    esp,0x1c
c001152d:	c3                   	ret    
c001152e:	c3                   	ret    
c001152f:	90                   	nop

c0011530 <InterruptController::convertLegacyIRQNumber(int)>:
c0011530:	53                   	push   ebx
c0011531:	83 ec 14             	sub    esp,0x14
c0011534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011538:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001153c:	50                   	push   eax
c001153d:	e8 e8 f2 ff ff       	call   c001082a <Device::getName()>
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011548:	74 07                	je     c0011551 <InterruptController::convertLegacyIRQNumber(int)+0x21>
c001154a:	83 c4 08             	add    esp,0x8
c001154d:	89 d8                	mov    eax,ebx
c001154f:	5b                   	pop    ebx
c0011550:	c3                   	ret    
c0011551:	83 fb 0f             	cmp    ebx,0xf
c0011554:	7f 11                	jg     c0011567 <InterruptController::convertLegacyIRQNumber(int)+0x37>
c0011556:	31 c0                	xor    eax,eax
c0011558:	8a 83 60 37 02 c0    	mov    al,BYTE PTR [ebx-0x3ffdc8a0]
c001155e:	83 c4 08             	add    esp,0x8
c0011561:	89 c3                	mov    ebx,eax
c0011563:	89 d8                	mov    eax,ebx
c0011565:	5b                   	pop    ebx
c0011566:	c3                   	ret    
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	68 48 16 02 c0       	push   0xc0021648
c001156f:	e8 7e 3d 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	89 d8                	mov    eax,ebx
c0011579:	83 c4 08             	add    esp,0x8
c001157c:	5b                   	pop    ebx
c001157d:	c3                   	ret    

c001157e <setupInterruptController()>:
c001157e:	56                   	push   esi
c001157f:	53                   	push   ebx
c0011580:	50                   	push   eax
c0011581:	e8 fd 2b 00 00       	call   c0014183 <getCPUNumber()>
c0011586:	85 c0                	test   eax,eax
c0011588:	0f 85 10 02 00 00    	jne    c001179e <setupInterruptController()+0x220>
c001158e:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0011593:	83 ec 0c             	sub    esp,0xc
c0011596:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001159c:	68 58 21 00 00       	push   0x2158
c00115a1:	83 e0 01             	and    eax,0x1
c00115a4:	89 c6                	mov    esi,eax
c00115a6:	e8 53 da ff ff       	call   c000effe <operator new(unsigned long)>
c00115ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00115ae:	89 c3                	mov    ebx,eax
c00115b0:	e8 b3 cc 00 00       	call   c001e268 <PIC::PIC()>
c00115b5:	6a 00                	push   0x0
c00115b7:	6a 00                	push   0x0
c00115b9:	6a 00                	push   0x0
c00115bb:	53                   	push   ebx
c00115bc:	e8 0b d0 00 00       	call   c001e5cc <PIC::open(int, int, void*)>
c00115c1:	89 f0                	mov    eax,esi
c00115c3:	83 c4 20             	add    esp,0x20
c00115c6:	84 c0                	test   al,al
c00115c8:	0f 85 92 01 00 00    	jne    c0011760 <setupInterruptController()+0x1e2>
c00115ce:	51                   	push   ecx
c00115cf:	8b 35 08 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024008
c00115d5:	51                   	push   ecx
c00115d6:	53                   	push   ebx
c00115d7:	56                   	push   esi
c00115d8:	e8 6b ef ff ff       	call   c0010548 <Device::addChild(Device*)>
c00115dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115df:	6a 00                	push   0x0
c00115e1:	68 72 14 01 c0       	push   0xc0011472
c00115e6:	6a 00                	push   0x0
c00115e8:	53                   	push   ebx
c00115e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115ec:	83 c4 20             	add    esp,0x20
c00115ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115f1:	6a 00                	push   0x0
c00115f3:	68 72 14 01 c0       	push   0xc0011472
c00115f8:	6a 01                	push   0x1
c00115fa:	53                   	push   ebx
c00115fb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011600:	6a 00                	push   0x0
c0011602:	68 dc 0d 01 c0       	push   0xc0010ddc
c0011607:	6a 02                	push   0x2
c0011609:	53                   	push   ebx
c001160a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001160d:	83 c4 20             	add    esp,0x20
c0011610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011612:	6a 00                	push   0x0
c0011614:	68 72 14 01 c0       	push   0xc0011472
c0011619:	6a 03                	push   0x3
c001161b:	53                   	push   ebx
c001161c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001161f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011621:	6a 00                	push   0x0
c0011623:	68 72 14 01 c0       	push   0xc0011472
c0011628:	6a 04                	push   0x4
c001162a:	53                   	push   ebx
c001162b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001162e:	83 c4 20             	add    esp,0x20
c0011631:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011633:	6a 00                	push   0x0
c0011635:	68 72 14 01 c0       	push   0xc0011472
c001163a:	6a 05                	push   0x5
c001163c:	53                   	push   ebx
c001163d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011640:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011642:	6a 00                	push   0x0
c0011644:	68 91 14 01 c0       	push   0xc0011491
c0011649:	6a 06                	push   0x6
c001164b:	53                   	push   ebx
c001164c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001164f:	83 c4 20             	add    esp,0x20
c0011652:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011654:	6a 00                	push   0x0
c0011656:	68 be 13 01 c0       	push   0xc00113be
c001165b:	6a 07                	push   0x7
c001165d:	53                   	push   ebx
c001165e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011661:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011663:	6a 00                	push   0x0
c0011665:	68 fa 0b 01 c0       	push   0xc0010bfa
c001166a:	6a 08                	push   0x8
c001166c:	53                   	push   ebx
c001166d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011670:	83 c4 20             	add    esp,0x20
c0011673:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011675:	6a 00                	push   0x0
c0011677:	68 72 14 01 c0       	push   0xc0011472
c001167c:	6a 09                	push   0x9
c001167e:	53                   	push   ebx
c001167f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011682:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011684:	6a 00                	push   0x0
c0011686:	68 72 14 01 c0       	push   0xc0011472
c001168b:	6a 0a                	push   0xa
c001168d:	53                   	push   ebx
c001168e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011691:	83 c4 20             	add    esp,0x20
c0011694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011696:	6a 00                	push   0x0
c0011698:	68 72 14 01 c0       	push   0xc0011472
c001169d:	6a 0b                	push   0xb
c001169f:	53                   	push   ebx
c00116a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116a5:	6a 00                	push   0x0
c00116a7:	68 72 14 01 c0       	push   0xc0011472
c00116ac:	6a 0c                	push   0xc
c00116ae:	53                   	push   ebx
c00116af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116b2:	83 c4 20             	add    esp,0x20
c00116b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b7:	6a 00                	push   0x0
c00116b9:	68 21 14 01 c0       	push   0xc0011421
c00116be:	6a 0d                	push   0xd
c00116c0:	53                   	push   ebx
c00116c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c6:	6a 00                	push   0x0
c00116c8:	68 5a 14 01 c0       	push   0xc001145a
c00116cd:	6a 0e                	push   0xe
c00116cf:	53                   	push   ebx
c00116d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116d3:	83 c4 20             	add    esp,0x20
c00116d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d8:	6a 00                	push   0x0
c00116da:	68 72 14 01 c0       	push   0xc0011472
c00116df:	6a 0f                	push   0xf
c00116e1:	53                   	push   ebx
c00116e2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116e7:	6a 00                	push   0x0
c00116e9:	68 72 14 01 c0       	push   0xc0011472
c00116ee:	6a 10                	push   0x10
c00116f0:	53                   	push   ebx
c00116f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116f4:	83 c4 20             	add    esp,0x20
c00116f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116f9:	6a 00                	push   0x0
c00116fb:	68 72 14 01 c0       	push   0xc0011472
c0011700:	6a 11                	push   0x11
c0011702:	53                   	push   ebx
c0011703:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011706:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011708:	6a 00                	push   0x0
c001170a:	68 72 14 01 c0       	push   0xc0011472
c001170f:	6a 12                	push   0x12
c0011711:	53                   	push   ebx
c0011712:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011715:	83 c4 20             	add    esp,0x20
c0011718:	8b 03                	mov    eax,DWORD PTR [ebx]
c001171a:	6a 00                	push   0x0
c001171c:	68 72 14 01 c0       	push   0xc0011472
c0011721:	6a 13                	push   0x13
c0011723:	53                   	push   ebx
c0011724:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011729:	6a 00                	push   0x0
c001172b:	68 72 14 01 c0       	push   0xc0011472
c0011730:	6a 14                	push   0x14
c0011732:	53                   	push   ebx
c0011733:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011736:	83 c4 20             	add    esp,0x20
c0011739:	8b 03                	mov    eax,DWORD PTR [ebx]
c001173b:	6a 00                	push   0x0
c001173d:	68 72 14 01 c0       	push   0xc0011472
c0011742:	6a 1e                	push   0x1e
c0011744:	53                   	push   ebx
c0011745:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011748:	8b 03                	mov    eax,DWORD PTR [ebx]
c001174a:	6a 00                	push   0x0
c001174c:	68 02 6d 01 c0       	push   0xc0016d02
c0011751:	6a 60                	push   0x60
c0011753:	53                   	push   ebx
c0011754:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011757:	83 c4 20             	add    esp,0x20
c001175a:	89 d8                	mov    eax,ebx
c001175c:	5a                   	pop    edx
c001175d:	5b                   	pop    ebx
c001175e:	5e                   	pop    esi
c001175f:	c3                   	ret    
c0011760:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011762:	6a 00                	push   0x0
c0011764:	6a 00                	push   0x0
c0011766:	6a 00                	push   0x0
c0011768:	53                   	push   ebx
c0011769:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001176c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001176e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011771:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0011774:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c001177b:	e8 7e d8 ff ff       	call   c000effe <operator new(unsigned long)>
c0011780:	89 04 24             	mov    DWORD PTR [esp],eax
c0011783:	89 c3                	mov    ebx,eax
c0011785:	e8 e4 c5 00 00       	call   c001dd6e <APIC::APIC()>
c001178a:	6a 00                	push   0x0
c001178c:	6a 00                	push   0x0
c001178e:	6a 00                	push   0x0
c0011790:	53                   	push   ebx
c0011791:	e8 e6 c4 00 00       	call   c001dc7c <APIC::open(int, int, void*)>
c0011796:	83 c4 20             	add    esp,0x20
c0011799:	e9 30 fe ff ff       	jmp    c00115ce <setupInterruptController()+0x50>
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	68 58 21 00 00       	push   0x2158
c00117a6:	e8 53 d8 ff ff       	call   c000effe <operator new(unsigned long)>
c00117ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00117ae:	89 c3                	mov    ebx,eax
c00117b0:	e8 b9 c5 00 00       	call   c001dd6e <APIC::APIC()>
c00117b5:	6a 00                	push   0x0
c00117b7:	6a 00                	push   0x0
c00117b9:	6a 00                	push   0x0
c00117bb:	53                   	push   ebx
c00117bc:	e8 bb c4 00 00       	call   c001dc7c <APIC::open(int, int, void*)>
c00117c1:	83 c4 18             	add    esp,0x18
c00117c4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00117c9:	53                   	push   ebx
c00117ca:	50                   	push   eax
c00117cb:	e8 78 ed ff ff       	call   c0010548 <Device::addChild(Device*)>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	89 d8                	mov    eax,ebx
c00117d5:	5a                   	pop    edx
c00117d6:	5b                   	pop    ebx
c00117d7:	5e                   	pop    esi
c00117d8:	c3                   	ret    
c00117d9:	90                   	nop

c00117da <startGUI(void*)>:
c00117da:	55                   	push   ebp
c00117db:	89 e5                	mov    ebp,esp
c00117dd:	53                   	push   ebx
c00117de:	83 ec 04             	sub    esp,0x4
c00117e1:	e8 17 6b 00 00       	call   c00182fd <unlockScheduler()>
c00117e6:	e8 fb 6a 00 00       	call   c00182e6 <getIRQNestingLevel()>
c00117eb:	83 ec 08             	sub    esp,0x8
c00117ee:	50                   	push   eax
c00117ef:	68 18 19 02 c0       	push   0xc0021918
c00117f4:	e8 3a d9 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	6a 01                	push   0x1
c0011807:	68 32 19 02 c0       	push   0xc0021932
c001180c:	e8 04 65 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	83 ec 08             	sub    esp,0x8
c0011817:	53                   	push   ebx
c0011818:	50                   	push   eax
c0011819:	e8 bd 66 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c0011827:	83 ec 08             	sub    esp,0x8
c001182a:	6a 01                	push   0x1
c001182c:	68 4c 19 02 c0       	push   0xc002194c
c0011831:	e8 df 64 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	83 ec 08             	sub    esp,0x8
c001183c:	53                   	push   ebx
c001183d:	50                   	push   eax
c001183e:	e8 98 66 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	90                   	nop
c0011847:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001184a:	c9                   	leave  
c001184b:	c3                   	ret    

c001184c <sendKeyToTerminal(unsigned char)>:
c001184c:	55                   	push   ebp
c001184d:	89 e5                	mov    ebp,esp
c001184f:	83 ec 28             	sub    esp,0x28
c0011852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011855:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011858:	8b 15 c4 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c4
c001185e:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011861:	25 ff 00 00 00       	and    eax,0xff
c0011866:	83 ec 08             	sub    esp,0x8
c0011869:	50                   	push   eax
c001186a:	52                   	push   edx
c001186b:	e8 12 c0 ff ff       	call   c000d882 <VgaText::receiveKey(unsigned char)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011877:	75 41                	jne    c00118ba <sendKeyToTerminal(unsigned char)+0x6e>
c0011879:	e8 a4 6a 00 00       	call   c0018322 <lockStuff()>
c001187e:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c0011883:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011886:	c7 05 a0 41 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00241a0,0x0
c0011890:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011894:	74 1f                	je     c00118b5 <sendKeyToTerminal(unsigned char)+0x69>
c0011896:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011899:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001189c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001189f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00118a5:	83 ec 0c             	sub    esp,0xc
c00118a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00118ab:	e8 6f 70 00 00       	call   c001891f <unblockTask(ThreadControlBlock*)>
c00118b0:	83 c4 10             	add    esp,0x10
c00118b3:	eb db                	jmp    c0011890 <sendKeyToTerminal(unsigned char)+0x44>
c00118b5:	e8 0f 6e 00 00       	call   c00186c9 <unlockStuff()>
c00118ba:	90                   	nop
c00118bb:	c9                   	leave  
c00118bc:	c3                   	ret    

c00118bd <sendKeyboardToken(KeyboardToken)>:
c00118bd:	55                   	push   ebp
c00118be:	89 e5                	mov    ebp,esp
c00118c0:	83 ec 18             	sub    esp,0x18
c00118c3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00118c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c9:	25 ff ff 00 00       	and    eax,0xffff
c00118ce:	83 f2 01             	xor    edx,0x1
c00118d1:	88 90 c0 41 02 c0    	mov    BYTE PTR [eax-0x3ffdbe40],dl
c00118d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118da:	66 3d 03 02          	cmp    ax,0x203
c00118de:	75 07                	jne    c00118e7 <sendKeyboardToken(KeyboardToken)+0x2a>
c00118e0:	a0 c0 42 02 c0       	mov    al,ds:0xc00242c0
c00118e5:	84 c0                	test   al,al
c00118e7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00118eb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00118ee:	a0 c8 45 02 c0       	mov    al,ds:0xc00245c8
c00118f3:	38 c2                	cmp    dl,al
c00118f5:	74 1e                	je     c0011915 <sendKeyboardToken(KeyboardToken)+0x58>
c00118f7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00118fa:	a2 c8 45 02 c0       	mov    ds:0xc00245c8,al
c00118ff:	a0 c8 45 02 c0       	mov    al,ds:0xc00245c8
c0011904:	25 ff 00 00 00       	and    eax,0xff
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	50                   	push   eax
c001190d:	e8 dc b1 ff ff       	call   c000caee <setTerminalScrollLock(bool)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011918:	84 c0                	test   al,al
c001191a:	0f 84 ae 00 00 00    	je     c00119ce <sendKeyboardToken(KeyboardToken)+0x111>
c0011920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011923:	66 3d 10 03          	cmp    ax,0x310
c0011927:	75 06                	jne    c001192f <sendKeyboardToken(KeyboardToken)+0x72>
c0011929:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001192f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011932:	66 3d 11 03          	cmp    ax,0x311
c0011936:	75 06                	jne    c001193e <sendKeyboardToken(KeyboardToken)+0x81>
c0011938:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001193e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011941:	66 3d 12 03          	cmp    ax,0x312
c0011945:	75 06                	jne    c001194d <sendKeyboardToken(KeyboardToken)+0x90>
c0011947:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001194d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011950:	66 3d 13 03          	cmp    ax,0x313
c0011954:	75 06                	jne    c001195c <sendKeyboardToken(KeyboardToken)+0x9f>
c0011956:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001195c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195f:	66 3d 14 03          	cmp    ax,0x314
c0011963:	75 06                	jne    c001196b <sendKeyboardToken(KeyboardToken)+0xae>
c0011965:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001196b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196e:	66 3d 15 03          	cmp    ax,0x315
c0011972:	75 06                	jne    c001197a <sendKeyboardToken(KeyboardToken)+0xbd>
c0011974:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001197a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197d:	66 3d 16 03          	cmp    ax,0x316
c0011981:	75 06                	jne    c0011989 <sendKeyboardToken(KeyboardToken)+0xcc>
c0011983:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198c:	66 3d 17 03          	cmp    ax,0x317
c0011990:	75 06                	jne    c0011998 <sendKeyboardToken(KeyboardToken)+0xdb>
c0011992:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199b:	66 3d 18 03          	cmp    ax,0x318
c001199f:	75 06                	jne    c00119a7 <sendKeyboardToken(KeyboardToken)+0xea>
c00119a1:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00119a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119aa:	66 3d 19 03          	cmp    ax,0x319
c00119ae:	75 06                	jne    c00119b6 <sendKeyboardToken(KeyboardToken)+0xf9>
c00119b0:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00119b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b9:	66 3d 1a 03          	cmp    ax,0x31a
c00119bd:	0f 85 c9 00 00 00    	jne    c0011a8c <sendKeyboardToken(KeyboardToken)+0x1cf>
c00119c3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00119c9:	e9 be 00 00 00       	jmp    c0011a8c <sendKeyboardToken(KeyboardToken)+0x1cf>
c00119ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d1:	66 3d 10 03          	cmp    ax,0x310
c00119d5:	75 0a                	jne    c00119e1 <sendKeyboardToken(KeyboardToken)+0x124>
c00119d7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00119dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e4:	66 3d 11 03          	cmp    ax,0x311
c00119e8:	75 0a                	jne    c00119f4 <sendKeyboardToken(KeyboardToken)+0x137>
c00119ea:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00119f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	66 3d 12 03          	cmp    ax,0x312
c00119fb:	75 0a                	jne    c0011a07 <sendKeyboardToken(KeyboardToken)+0x14a>
c00119fd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011a03:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0a:	66 3d 13 03          	cmp    ax,0x313
c0011a0e:	75 0a                	jne    c0011a1a <sendKeyboardToken(KeyboardToken)+0x15d>
c0011a10:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011a16:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1d:	66 3d 14 03          	cmp    ax,0x314
c0011a21:	75 0a                	jne    c0011a2d <sendKeyboardToken(KeyboardToken)+0x170>
c0011a23:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0011a29:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a30:	66 3d 15 03          	cmp    ax,0x315
c0011a34:	75 0a                	jne    c0011a40 <sendKeyboardToken(KeyboardToken)+0x183>
c0011a36:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011a3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a43:	66 3d 16 03          	cmp    ax,0x316
c0011a47:	75 0a                	jne    c0011a53 <sendKeyboardToken(KeyboardToken)+0x196>
c0011a49:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0011a4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a56:	66 3d 17 03          	cmp    ax,0x317
c0011a5a:	75 0a                	jne    c0011a66 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0011a5c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011a62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a69:	66 3d 18 03          	cmp    ax,0x318
c0011a6d:	75 0a                	jne    c0011a79 <sendKeyboardToken(KeyboardToken)+0x1bc>
c0011a6f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011a75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7c:	66 3d 19 03          	cmp    ax,0x319
c0011a80:	75 0a                	jne    c0011a8c <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011a82:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011a88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8f:	66 3d 00 02          	cmp    ax,0x200
c0011a93:	75 2a                	jne    c0011abf <sendKeyboardToken(KeyboardToken)+0x202>
c0011a95:	a0 c0 45 02 c0       	mov    al,ds:0xc00245c0
c0011a9a:	83 f0 01             	xor    eax,0x1
c0011a9d:	84 c0                	test   al,al
c0011a9f:	74 1e                	je     c0011abf <sendKeyboardToken(KeyboardToken)+0x202>
c0011aa1:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0011aa6:	6a 01                	push   0x1
c0011aa8:	6a 00                	push   0x0
c0011aaa:	68 da 17 01 c0       	push   0xc00117da
c0011aaf:	50                   	push   eax
c0011ab0:	e8 7b 69 00 00       	call   c0018430 <Process::createThread(void (*)(void*), void*, int)>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	c6 05 c0 45 02 c0 01 	mov    BYTE PTR ds:0xc00245c0,0x1
c0011abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac2:	66 3d 1d 03          	cmp    ax,0x31d
c0011ac6:	75 06                	jne    c0011ace <sendKeyboardToken(KeyboardToken)+0x211>
c0011ac8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad1:	66 3d 1c 03          	cmp    ax,0x31c
c0011ad5:	75 06                	jne    c0011add <sendKeyboardToken(KeyboardToken)+0x220>
c0011ad7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ae0:	66 3d 1b 03          	cmp    ax,0x31b
c0011ae4:	75 06                	jne    c0011aec <sendKeyboardToken(KeyboardToken)+0x22f>
c0011ae6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aef:	66 3d 1e 03          	cmp    ax,0x31e
c0011af3:	75 06                	jne    c0011afb <sendKeyboardToken(KeyboardToken)+0x23e>
c0011af5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011afe:	66 3d 1f 03          	cmp    ax,0x31f
c0011b02:	75 06                	jne    c0011b0a <sendKeyboardToken(KeyboardToken)+0x24d>
c0011b04:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b0d:	66 3d 1a 03          	cmp    ax,0x31a
c0011b11:	75 06                	jne    c0011b19 <sendKeyboardToken(KeyboardToken)+0x25c>
c0011b13:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011b19:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011b1d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011b20:	83 f0 01             	xor    eax,0x1
c0011b23:	84 c0                	test   al,al
c0011b25:	74 7b                	je     c0011ba2 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0011b27:	a0 c1 42 02 c0       	mov    al,ds:0xc00242c1
c0011b2c:	84 c0                	test   al,al
c0011b2e:	74 43                	je     c0011b73 <sendKeyboardToken(KeyboardToken)+0x2b6>
c0011b30:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011b34:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011b38:	74 2d                	je     c0011b67 <sendKeyboardToken(KeyboardToken)+0x2aa>
c0011b3a:	8b 15 c4 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c4
c0011b40:	89 d0                	mov    eax,edx
c0011b42:	c1 e0 02             	shl    eax,0x2
c0011b45:	01 d0                	add    eax,edx
c0011b47:	01 c0                	add    eax,eax
c0011b49:	a3 c4 45 02 c0       	mov    ds:0xc00245c4,eax
c0011b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b51:	25 ff ff 00 00       	and    eax,0xffff
c0011b56:	8d 50 d0             	lea    edx,[eax-0x30]
c0011b59:	a1 c4 45 02 c0       	mov    eax,ds:0xc00245c4
c0011b5e:	01 d0                	add    eax,edx
c0011b60:	a3 c4 45 02 c0       	mov    ds:0xc00245c4,eax
c0011b65:	eb 71                	jmp    c0011bd8 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011b67:	c7 05 c4 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245c4,0x0
c0011b71:	eb 65                	jmp    c0011bd8 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011b73:	a1 c4 45 02 c0       	mov    eax,ds:0xc00245c4
c0011b78:	85 c0                	test   eax,eax
c0011b7a:	74 1a                	je     c0011b96 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0011b7c:	a1 c4 45 02 c0       	mov    eax,ds:0xc00245c4
c0011b81:	25 ff 00 00 00       	and    eax,0xff
c0011b86:	83 ec 0c             	sub    esp,0xc
c0011b89:	50                   	push   eax
c0011b8a:	e8 bd fc ff ff       	call   c001184c <sendKeyToTerminal(unsigned char)>
c0011b8f:	83 c4 10             	add    esp,0x10
c0011b92:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011b96:	c7 05 c4 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245c4,0x0
c0011ba0:	eb 36                	jmp    c0011bd8 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ba5:	66 3d 01 01          	cmp    ax,0x101
c0011ba9:	75 2d                	jne    c0011bd8 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011bab:	a1 c4 45 02 c0       	mov    eax,ds:0xc00245c4
c0011bb0:	85 c0                	test   eax,eax
c0011bb2:	74 1a                	je     c0011bce <sendKeyboardToken(KeyboardToken)+0x311>
c0011bb4:	a1 c4 45 02 c0       	mov    eax,ds:0xc00245c4
c0011bb9:	25 ff 00 00 00       	and    eax,0xff
c0011bbe:	83 ec 0c             	sub    esp,0xc
c0011bc1:	50                   	push   eax
c0011bc2:	e8 85 fc ff ff       	call   c001184c <sendKeyToTerminal(unsigned char)>
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011bce:	c7 05 c4 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00245c4,0x0
c0011bd8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011bdb:	83 f0 01             	xor    eax,0x1
c0011bde:	84 c0                	test   al,al
c0011be0:	74 4e                	je     c0011c30 <sendKeyboardToken(KeyboardToken)+0x373>
c0011be2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011be5:	83 f0 01             	xor    eax,0x1
c0011be8:	84 c0                	test   al,al
c0011bea:	74 44                	je     c0011c30 <sendKeyboardToken(KeyboardToken)+0x373>
c0011bec:	a0 c0 42 02 c0       	mov    al,ds:0xc00242c0
c0011bf1:	83 f0 01             	xor    eax,0x1
c0011bf4:	84 c0                	test   al,al
c0011bf6:	74 38                	je     c0011c30 <sendKeyboardToken(KeyboardToken)+0x373>
c0011bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bfb:	66 83 f8 1f          	cmp    ax,0x1f
c0011bff:	76 09                	jbe    c0011c0a <sendKeyboardToken(KeyboardToken)+0x34d>
c0011c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c04:	66 83 f8 7e          	cmp    ax,0x7e
c0011c08:	76 12                	jbe    c0011c1c <sendKeyboardToken(KeyboardToken)+0x35f>
c0011c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c0d:	66 83 f8 0a          	cmp    ax,0xa
c0011c11:	74 09                	je     c0011c1c <sendKeyboardToken(KeyboardToken)+0x35f>
c0011c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c16:	66 83 f8 08          	cmp    ax,0x8
c0011c1a:	75 14                	jne    c0011c30 <sendKeyboardToken(KeyboardToken)+0x373>
c0011c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c1f:	25 ff 00 00 00       	and    eax,0xff
c0011c24:	83 ec 0c             	sub    esp,0xc
c0011c27:	50                   	push   eax
c0011c28:	e8 1f fc ff ff       	call   c001184c <sendKeyToTerminal(unsigned char)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011c33:	83 f0 01             	xor    eax,0x1
c0011c36:	84 c0                	test   al,al
c0011c38:	74 51                	je     c0011c8b <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011c3a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011c3d:	83 f0 01             	xor    eax,0x1
c0011c40:	84 c0                	test   al,al
c0011c42:	74 47                	je     c0011c8b <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011c44:	a0 c0 42 02 c0       	mov    al,ds:0xc00242c0
c0011c49:	84 c0                	test   al,al
c0011c4b:	74 3e                	je     c0011c8b <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c50:	66 83 f8 3f          	cmp    ax,0x3f
c0011c54:	76 35                	jbe    c0011c8b <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c59:	66 83 f8 7f          	cmp    ax,0x7f
c0011c5d:	77 2c                	ja     c0011c8b <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c62:	88 c2                	mov    dl,al
c0011c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c67:	66 83 f8 5f          	cmp    ax,0x5f
c0011c6b:	76 04                	jbe    c0011c71 <sendKeyboardToken(KeyboardToken)+0x3b4>
c0011c6d:	b0 20                	mov    al,0x20
c0011c6f:	eb 02                	jmp    c0011c73 <sendKeyboardToken(KeyboardToken)+0x3b6>
c0011c71:	b0 00                	mov    al,0x0
c0011c73:	29 c2                	sub    edx,eax
c0011c75:	88 d0                	mov    al,dl
c0011c77:	83 e8 40             	sub    eax,0x40
c0011c7a:	25 ff 00 00 00       	and    eax,0xff
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	50                   	push   eax
c0011c83:	e8 c4 fb ff ff       	call   c001184c <sendKeyToTerminal(unsigned char)>
c0011c88:	83 c4 10             	add    esp,0x10
c0011c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c8e:	66 3d 00 03          	cmp    ax,0x300
c0011c92:	75 0f                	jne    c0011ca3 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0011c94:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011c97:	83 f0 01             	xor    eax,0x1
c0011c9a:	84 c0                	test   al,al
c0011c9c:	74 05                	je     c0011ca3 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0011c9e:	e8 72 b6 ff ff       	call   c000d315 <doTerminalCycle()>
c0011ca3:	90                   	nop
c0011ca4:	c9                   	leave  
c0011ca5:	c3                   	ret    

c0011ca6 <clearInternalKeybuffer(VgaText*)>:
c0011ca6:	55                   	push   ebp
c0011ca7:	89 e5                	mov    ebp,esp
c0011ca9:	83 ec 08             	sub    esp,0x8
c0011cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011caf:	05 34 11 00 00       	add    eax,0x1134
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	50                   	push   eax
c0011cb8:	e8 68 e9 fe ff       	call   c0000625 <strlen>
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011cc3:	81 c2 34 11 00 00    	add    edx,0x1134
c0011cc9:	83 ec 04             	sub    esp,0x4
c0011ccc:	50                   	push   eax
c0011ccd:	6a 00                	push   0x0
c0011ccf:	52                   	push   edx
c0011cd0:	e8 33 e9 fe ff       	call   c0000608 <memset>
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	90                   	nop
c0011cd9:	c9                   	leave  
c0011cda:	c3                   	ret    

c0011cdb <readKeyboard(VgaText*, char*, unsigned long)>:
c0011cdb:	55                   	push   ebp
c0011cdc:	89 e5                	mov    ebp,esp
c0011cde:	83 ec 18             	sub    esp,0x18
c0011ce1:	fb                   	sti    
c0011ce2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011ce9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011ced:	74 77                	je     c0011d66 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cf2:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011cf8:	84 c0                	test   al,al
c0011cfa:	75 02                	jne    c0011cfe <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011cfc:	eb f1                	jmp    c0011cef <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011cfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011d01:	8d 50 01             	lea    edx,[eax+0x1]
c0011d04:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011d07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011d0a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011d10:	88 10                	mov    BYTE PTR [eax],dl
c0011d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d15:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011d1b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d21:	05 34 11 00 00       	add    eax,0x1134
c0011d26:	83 ec 0c             	sub    esp,0xc
c0011d29:	50                   	push   eax
c0011d2a:	e8 f6 e8 fe ff       	call   c0000625 <strlen>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011d35:	81 c2 34 11 00 00    	add    edx,0x1134
c0011d3b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011d41:	81 c2 34 11 00 00    	add    edx,0x1134
c0011d47:	83 ec 04             	sub    esp,0x4
c0011d4a:	50                   	push   eax
c0011d4b:	51                   	push   ecx
c0011d4c:	52                   	push   edx
c0011d4d:	e8 48 e8 fe ff       	call   c000059a <memmove>
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011d58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011d5b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011d5f:	75 88                	jne    c0011ce9 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011d61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d64:	eb 03                	jmp    c0011d69 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011d66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d69:	c9                   	leave  
c0011d6a:	c3                   	ret    
c0011d6b:	90                   	nop

c0011d6c <Keyboard::Keyboard(char const*)>:
c0011d6c:	83 ec 0c             	sub    esp,0xc
c0011d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d73:	83 ec 08             	sub    esp,0x8
c0011d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d7a:	50                   	push   eax
c0011d7b:	e8 b8 e9 ff ff       	call   c0010738 <Device::Device(char const*)>
c0011d80:	83 c4 10             	add    esp,0x10
c0011d83:	ba 70 19 02 c0       	mov    edx,0xc0021970
c0011d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d8c:	89 10                	mov    DWORD PTR [eax],edx
c0011d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d92:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011d9c:	c6 05 a4 41 02 c0 01 	mov    BYTE PTR ds:0xc00241a4,0x1
c0011da3:	90                   	nop
c0011da4:	83 c4 0c             	add    esp,0xc
c0011da7:	c3                   	ret    

c0011da8 <Keyboard::~Keyboard()>:
c0011da8:	83 ec 0c             	sub    esp,0xc
c0011dab:	ba 70 19 02 c0       	mov    edx,0xc0021970
c0011db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db4:	89 10                	mov    DWORD PTR [eax],edx
c0011db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dba:	83 ec 0c             	sub    esp,0xc
c0011dbd:	50                   	push   eax
c0011dbe:	e8 2b e6 ff ff       	call   c00103ee <Device::~Device()>
c0011dc3:	83 c4 10             	add    esp,0x10
c0011dc6:	90                   	nop
c0011dc7:	83 c4 0c             	add    esp,0xc
c0011dca:	c3                   	ret    
c0011dcb:	90                   	nop

c0011dcc <Keyboard::~Keyboard()>:
c0011dcc:	83 ec 0c             	sub    esp,0xc
c0011dcf:	83 ec 0c             	sub    esp,0xc
c0011dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dd6:	e8 cd ff ff ff       	call   c0011da8 <Keyboard::~Keyboard()>
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	83 ec 08             	sub    esp,0x8
c0011de1:	68 5c 01 00 00       	push   0x15c
c0011de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dea:	e8 1e d2 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0011def:	83 c4 10             	add    esp,0x10
c0011df2:	83 c4 0c             	add    esp,0xc
c0011df5:	c3                   	ret    

c0011df6 <LogicalDisk::close(int, int, void*)>:
c0011df6:	83 c8 ff             	or     eax,0xffffffff
c0011df9:	c3                   	ret    

c0011dfa <LogicalDisk::~LogicalDisk()>:
c0011dfa:	83 ec 0c             	sub    esp,0xc
c0011dfd:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c0011e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e06:	89 10                	mov    DWORD PTR [eax],edx
c0011e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e0c:	83 ec 0c             	sub    esp,0xc
c0011e0f:	50                   	push   eax
c0011e10:	e8 d9 e5 ff ff       	call   c00103ee <Device::~Device()>
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	90                   	nop
c0011e19:	83 c4 0c             	add    esp,0xc
c0011e1c:	c3                   	ret    
c0011e1d:	90                   	nop

c0011e1e <LogicalDisk::~LogicalDisk()>:
c0011e1e:	83 ec 0c             	sub    esp,0xc
c0011e21:	83 ec 0c             	sub    esp,0xc
c0011e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e28:	e8 cd ff ff ff       	call   c0011dfa <LogicalDisk::~LogicalDisk()>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	83 ec 08             	sub    esp,0x8
c0011e33:	68 74 01 00 00       	push   0x174
c0011e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e3c:	e8 cc d1 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0011e41:	83 c4 10             	add    esp,0x10
c0011e44:	83 c4 0c             	add    esp,0xc
c0011e47:	c3                   	ret    

c0011e48 <LogicalDisk::open(int, int, void*)>:
c0011e48:	83 ec 18             	sub    esp,0x18
c0011e4b:	68 9c 19 02 c0       	push   0xc002199c
c0011e50:	e8 9d 34 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0011e55:	83 c8 ff             	or     eax,0xffffffff
c0011e58:	83 c4 1c             	add    esp,0x1c
c0011e5b:	c3                   	ret    

c0011e5c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011e5c:	53                   	push   ebx
c0011e5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e69:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011e6f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011e75:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011e7b:	77 10                	ja     c0011e8d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011e7d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011e83:	89 d3                	mov    ebx,edx
c0011e85:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011e8b:	72 05                	jb     c0011e92 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011e8d:	83 c8 ff             	or     eax,0xffffffff
c0011e90:	89 c2                	mov    edx,eax
c0011e92:	5b                   	pop    ebx
c0011e93:	c3                   	ret    

c0011e94 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011e94:	56                   	push   esi
c0011e95:	83 c8 ff             	or     eax,0xffffffff
c0011e98:	53                   	push   ebx
c0011e99:	89 c2                	mov    edx,eax
c0011e9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e9f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011ea3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011ea7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ead:	77 27                	ja     c0011ed6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011eaf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011eb5:	89 d8                	mov    eax,ebx
c0011eb7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011ebd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec2:	89 c2                	mov    edx,eax
c0011ec4:	73 10                	jae    c0011ed6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011ec6:	89 c8                	mov    eax,ecx
c0011ec8:	89 da                	mov    edx,ebx
c0011eca:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011ed0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011ed6:	5b                   	pop    ebx
c0011ed7:	5e                   	pop    esi
c0011ed8:	c3                   	ret    
c0011ed9:	90                   	nop

c0011eda <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011eda:	83 ec 1c             	sub    esp,0x1c
c0011edd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ee1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011eed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ef1:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ef4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ef8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f00:	83 ec 08             	sub    esp,0x8
c0011f03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011f07:	50                   	push   eax
c0011f08:	e8 2b e8 ff ff       	call   c0010738 <Device::Device(char const*)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	ba 20 1a 02 c0       	mov    edx,0xc0021a20
c0011f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f19:	89 10                	mov    DWORD PTR [eax],edx
c0011f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f1f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f2a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f35:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011f3f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011f43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f4b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011f51:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011f57:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011f5b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011f5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011f62:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011f68:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f76:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f80:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f8a:	90                   	nop
c0011f8b:	83 c4 1c             	add    esp,0x1c
c0011f8e:	c3                   	ret    
c0011f8f:	90                   	nop

c0011f90 <LogicalDisk::assignDriveLetter()>:
c0011f90:	55                   	push   ebp
c0011f91:	57                   	push   edi
c0011f92:	56                   	push   esi
c0011f93:	53                   	push   ebx
c0011f94:	83 ec 14             	sub    esp,0x14
c0011f97:	8b 3d e0 45 02 c0    	mov    edi,DWORD PTR ds:0xc00245e0
c0011f9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fa1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011fa5:	8b 3d e4 45 02 c0    	mov    edi,DWORD PTR ds:0xc00245e4
c0011fab:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011fb1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011fb5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011fbb:	3c 01                	cmp    al,0x1
c0011fbd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011fc1:	19 c0                	sbb    eax,eax
c0011fc3:	83 e0 02             	and    eax,0x2
c0011fc6:	83 c0 41             	add    eax,0x41
c0011fc9:	0f be e8             	movsx  ebp,al
c0011fcc:	3c 43                	cmp    al,0x43
c0011fce:	75 10                	jne    c0011fe0 <LogicalDisk::assignDriveLetter()+0x50>
c0011fd0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011fd7:	75 5d                	jne    c0012036 <LogicalDisk::assignDriveLetter()+0xa6>
c0011fd9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011fde:	75 56                	jne    c0012036 <LogicalDisk::assignDriveLetter()+0xa6>
c0011fe0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011fe3:	ba 01 00 00 00       	mov    edx,0x1
c0011fe8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011fec:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011ff0:	d3 e2                	shl    edx,cl
c0011ff2:	89 d7                	mov    edi,edx
c0011ff4:	89 d6                	mov    esi,edx
c0011ff6:	c1 ff 1f             	sar    edi,0x1f
c0011ff9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011ffd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012001:	21 f9                	and    ecx,edi
c0012003:	09 d1                	or     ecx,edx
c0012005:	75 2f                	jne    c0012036 <LogicalDisk::assignDriveLetter()+0xa6>
c0012007:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001200b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001200f:	09 f2                	or     edx,esi
c0012011:	89 15 e0 45 02 c0    	mov    DWORD PTR ds:0xc00245e0,edx
c0012017:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001201b:	09 fa                	or     edx,edi
c001201d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012021:	89 15 e4 45 02 c0    	mov    DWORD PTR ds:0xc00245e4,edx
c0012027:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001202d:	89 1c bd 00 46 02 c0 	mov    DWORD PTR [edi*4-0x3ffdba00],ebx
c0012034:	eb 08                	jmp    c001203e <LogicalDisk::assignDriveLetter()+0xae>
c0012036:	40                   	inc    eax
c0012037:	45                   	inc    ebp
c0012038:	3c 5b                	cmp    al,0x5b
c001203a:	75 90                	jne    c0011fcc <LogicalDisk::assignDriveLetter()+0x3c>
c001203c:	31 c0                	xor    eax,eax
c001203e:	83 c4 14             	add    esp,0x14
c0012041:	5b                   	pop    ebx
c0012042:	5e                   	pop    esi
c0012043:	5f                   	pop    edi
c0012044:	5d                   	pop    ebp
c0012045:	c3                   	ret    

c0012046 <LogicalDisk::mount()>:
c0012046:	56                   	push   esi
c0012047:	53                   	push   ebx
c0012048:	51                   	push   ecx
c0012049:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001204d:	8b 1d 68 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024168
c0012053:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001205d:	85 db                	test   ebx,ebx
c001205f:	74 50                	je     c00120b1 <LogicalDisk::mount()+0x6b>
c0012061:	e8 80 62 00 00       	call   c00182e6 <getIRQNestingLevel()>
c0012066:	52                   	push   edx
c0012067:	52                   	push   edx
c0012068:	50                   	push   eax
c0012069:	68 c0 19 02 c0       	push   0xc00219c0
c001206e:	e8 c0 d0 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0012073:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001207a:	83 c4 0c             	add    esp,0xc
c001207d:	83 e8 41             	sub    eax,0x41
c0012080:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012082:	50                   	push   eax
c0012083:	56                   	push   esi
c0012084:	53                   	push   ebx
c0012085:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012088:	83 c4 10             	add    esp,0x10
c001208b:	84 c0                	test   al,al
c001208d:	74 08                	je     c0012097 <LogicalDisk::mount()+0x51>
c001208f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0012095:	eb 1c                	jmp    c00120b3 <LogicalDisk::mount()+0x6d>
c0012097:	e8 4a 62 00 00       	call   c00182e6 <getIRQNestingLevel()>
c001209c:	51                   	push   ecx
c001209d:	51                   	push   ecx
c001209e:	50                   	push   eax
c001209f:	68 db 19 02 c0       	push   0xc00219db
c00120a4:	e8 8a d0 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00120a9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00120ac:	83 c4 10             	add    esp,0x10
c00120af:	eb ac                	jmp    c001205d <LogicalDisk::mount()+0x17>
c00120b1:	31 c0                	xor    eax,eax
c00120b3:	5a                   	pop    edx
c00120b4:	5b                   	pop    ebx
c00120b5:	5e                   	pop    esi
c00120b6:	c3                   	ret    
c00120b7:	90                   	nop

c00120b8 <LogicalDisk::unmount()>:
c00120b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120bc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00120c6:	c3                   	ret    
c00120c7:	90                   	nop

c00120c8 <LogicalDisk::unassignDriveLetter()>:
c00120c8:	57                   	push   edi
c00120c9:	56                   	push   esi
c00120ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120ce:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00120d5:	84 c9                	test   cl,cl
c00120d7:	75 0f                	jne    c00120e8 <LogicalDisk::unassignDriveLetter()+0x20>
c00120d9:	c7 44 24 0c f6 19 02 c0 	mov    DWORD PTR [esp+0xc],0xc00219f6
c00120e1:	5e                   	pop    esi
c00120e2:	5f                   	pop    edi
c00120e3:	e9 0a 32 00 00       	jmp    c00152f2 <Krnl::panic(char const*)>
c00120e8:	83 e9 41             	sub    ecx,0x41
c00120eb:	b8 01 00 00 00       	mov    eax,0x1
c00120f0:	d3 e0                	shl    eax,cl
c00120f2:	89 c7                	mov    edi,eax
c00120f4:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00120fb:	c1 ff 1f             	sar    edi,0x1f
c00120fe:	c7 04 8d 00 46 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdba00],0x0
c0012109:	89 fe                	mov    esi,edi
c001210b:	f7 d6                	not    esi
c001210d:	f7 d0                	not    eax
c001210f:	21 35 e4 45 02 c0    	and    DWORD PTR ds:0xc00245e4,esi
c0012115:	5e                   	pop    esi
c0012116:	21 05 e0 45 02 c0    	and    DWORD PTR ds:0xc00245e0,eax
c001211c:	5f                   	pop    edi
c001211d:	c3                   	ret    

c001211e <LogicalDisk::read(unsigned long long, int, void*)>:
c001211e:	57                   	push   edi
c001211f:	56                   	push   esi
c0012120:	53                   	push   ebx
c0012121:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012125:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012129:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001212d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012131:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012137:	77 41                	ja     c001217a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012139:	99                   	cdq    
c001213a:	01 c8                	add    eax,ecx
c001213c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012142:	11 da                	adc    edx,ebx
c0012144:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001214a:	19 d7                	sbb    edi,edx
c001214c:	72 33                	jb     c0012181 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001214e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012154:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001215a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001215e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012162:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012168:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001216e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012172:	5b                   	pop    ebx
c0012173:	5e                   	pop    esi
c0012174:	5f                   	pop    edi
c0012175:	e9 9a 09 00 00       	jmp    c0012b14 <VCache::read(unsigned long long, int, void*)>
c001217a:	b8 05 00 00 00       	mov    eax,0x5
c001217f:	eb 05                	jmp    c0012186 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012181:	b8 07 00 00 00       	mov    eax,0x7
c0012186:	5b                   	pop    ebx
c0012187:	5e                   	pop    esi
c0012188:	5f                   	pop    edi
c0012189:	c3                   	ret    

c001218a <LogicalDisk::write(unsigned long long, int, void*)>:
c001218a:	57                   	push   edi
c001218b:	56                   	push   esi
c001218c:	53                   	push   ebx
c001218d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012195:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001219d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00121a3:	77 41                	ja     c00121e6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00121a5:	99                   	cdq    
c00121a6:	01 c8                	add    eax,ecx
c00121a8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00121ae:	11 da                	adc    edx,ebx
c00121b0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00121b6:	19 d7                	sbb    edi,edx
c00121b8:	72 33                	jb     c00121ed <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00121ba:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00121c0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00121c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00121ca:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00121ce:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00121d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00121da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121de:	5b                   	pop    ebx
c00121df:	5e                   	pop    esi
c00121e0:	5f                   	pop    edi
c00121e1:	e9 4a 08 00 00       	jmp    c0012a30 <VCache::write(unsigned long long, int, void*)>
c00121e6:	b8 05 00 00 00       	mov    eax,0x5
c00121eb:	eb 05                	jmp    c00121f2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00121ed:	b8 07 00 00 00       	mov    eax,0x7
c00121f2:	5b                   	pop    ebx
c00121f3:	5e                   	pop    esi
c00121f4:	5f                   	pop    edi
c00121f5:	c3                   	ret    

c00121f6 <Mouse::Mouse(char const*)>:
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121fd:	83 ec 08             	sub    esp,0x8
c0012200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012204:	50                   	push   eax
c0012205:	e8 2e e5 ff ff       	call   c0010738 <Device::Device(char const*)>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c0012212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012216:	89 10                	mov    DWORD PTR [eax],edx
c0012218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001221c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012226:	90                   	nop
c0012227:	83 c4 0c             	add    esp,0xc
c001222a:	c3                   	ret    
c001222b:	90                   	nop

c001222c <Mouse::~Mouse()>:
c001222c:	83 ec 0c             	sub    esp,0xc
c001222f:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c0012234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012238:	89 10                	mov    DWORD PTR [eax],edx
c001223a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001223e:	83 ec 0c             	sub    esp,0xc
c0012241:	50                   	push   eax
c0012242:	e8 a7 e1 ff ff       	call   c00103ee <Device::~Device()>
c0012247:	83 c4 10             	add    esp,0x10
c001224a:	90                   	nop
c001224b:	83 c4 0c             	add    esp,0xc
c001224e:	c3                   	ret    
c001224f:	90                   	nop

c0012250 <Mouse::~Mouse()>:
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001225a:	e8 cd ff ff ff       	call   c001222c <Mouse::~Mouse()>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	83 ec 08             	sub    esp,0x8
c0012265:	68 58 01 00 00       	push   0x158
c001226a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001226e:	e8 9a cd ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	83 c4 0c             	add    esp,0xc
c0012279:	c3                   	ret    

c001227a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001227a:	55                   	push   ebp
c001227b:	57                   	push   edi
c001227c:	56                   	push   esi
c001227d:	53                   	push   ebx
c001227e:	81 ec 28 01 00 00    	sub    esp,0x128
c0012284:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001228b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012292:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012299:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00122a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122a4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00122a8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00122af:	e8 76 e5 ff ff       	call   c001082a <Device::getName()>
c00122b4:	5a                   	pop    edx
c00122b5:	59                   	pop    ecx
c00122b6:	50                   	push   eax
c00122b7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00122bb:	55                   	push   ebp
c00122bc:	e8 e6 e3 fe ff       	call   c00006a7 <strcpy>
c00122c1:	5b                   	pop    ebx
c00122c2:	58                   	pop    eax
c00122c3:	68 70 1a 02 c0       	push   0xc0021a70
c00122c8:	55                   	push   ebp
c00122c9:	e8 90 e4 fe ff       	call   c000075e <strcat>
c00122ce:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00122d5:	e8 24 cd ff ff       	call   c000effe <operator new(unsigned long)>
c00122da:	83 c4 0c             	add    esp,0xc
c00122dd:	89 c3                	mov    ebx,eax
c00122df:	57                   	push   edi
c00122e0:	56                   	push   esi
c00122e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122e9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00122f0:	55                   	push   ebp
c00122f1:	50                   	push   eax
c00122f2:	e8 e3 fb ff ff       	call   c0011eda <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00122f7:	83 c4 14             	add    esp,0x14
c00122fa:	53                   	push   ebx
c00122fb:	e8 90 fc ff ff       	call   c0011f90 <LogicalDisk::assignDriveLetter()>
c0012300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012303:	e8 3e fd ff ff       	call   c0012046 <LogicalDisk::mount()>
c0012308:	58                   	pop    eax
c0012309:	5a                   	pop    edx
c001230a:	53                   	push   ebx
c001230b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012312:	e8 31 e2 ff ff       	call   c0010548 <Device::addChild(Device*)>
c0012317:	81 c4 2c 01 00 00    	add    esp,0x12c
c001231d:	5b                   	pop    ebx
c001231e:	5e                   	pop    esi
c001231f:	5f                   	pop    edi
c0012320:	5d                   	pop    ebp
c0012321:	c3                   	ret    

c0012322 <createPartitionsForDisk(PhysicalDisk*)>:
c0012322:	55                   	push   ebp
c0012323:	57                   	push   edi
c0012324:	56                   	push   esi
c0012325:	53                   	push   ebx
c0012326:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001232c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012333:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012339:	3d 00 02 00 00       	cmp    eax,0x200
c001233e:	74 27                	je     c0012367 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012340:	83 ec 10             	sub    esp,0x10
c0012343:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012349:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001234f:	99                   	cdq    
c0012350:	52                   	push   edx
c0012351:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012355:	50                   	push   eax
c0012356:	89 fd                	mov    ebp,edi
c0012358:	c1 e6 0a             	shl    esi,0xa
c001235b:	55                   	push   ebp
c001235c:	56                   	push   esi
c001235d:	e8 5a ca 00 00       	call   c001edbc <__udivdi3>
c0012362:	e9 b1 00 00 00       	jmp    c0012418 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012367:	83 ec 0c             	sub    esp,0xc
c001236a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001236c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012370:	56                   	push   esi
c0012371:	6a 01                	push   0x1
c0012373:	6a 00                	push   0x0
c0012375:	6a 00                	push   0x0
c0012377:	53                   	push   ebx
c0012378:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001237b:	83 c4 20             	add    esp,0x20
c001237e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012386:	75 0a                	jne    c0012392 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012388:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012390:	74 2c                	je     c00123be <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012392:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012398:	83 ec 10             	sub    esp,0x10
c001239b:	89 f7                	mov    edi,esi
c001239d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00123a3:	c1 ff 1f             	sar    edi,0x1f
c00123a6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00123ac:	57                   	push   edi
c00123ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00123b1:	c1 e0 0a             	shl    eax,0xa
c00123b4:	56                   	push   esi
c00123b5:	52                   	push   edx
c00123b6:	50                   	push   eax
c00123b7:	e8 00 ca 00 00       	call   c001edbc <__udivdi3>
c00123bc:	eb 5a                	jmp    c0012418 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00123be:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00123c5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00123cc:	83 e0 7f             	and    eax,0x7f
c00123cf:	83 e1 7f             	and    ecx,0x7f
c00123d2:	01 c1                	add    ecx,eax
c00123d4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00123db:	83 e0 7f             	and    eax,0x7f
c00123de:	01 c1                	add    ecx,eax
c00123e0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00123e7:	83 e0 7f             	and    eax,0x7f
c00123ea:	00 c1                	add    cl,al
c00123ec:	74 41                	je     c001242f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00123ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00123f4:	83 ec 10             	sub    esp,0x10
c00123f7:	89 f7                	mov    edi,esi
c00123f9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00123ff:	c1 ff 1f             	sar    edi,0x1f
c0012402:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012408:	57                   	push   edi
c0012409:	0f a4 c2 0a          	shld   edx,eax,0xa
c001240d:	c1 e0 0a             	shl    eax,0xa
c0012410:	56                   	push   esi
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	e8 a4 c9 00 00       	call   c001edbc <__udivdi3>
c0012418:	83 c4 14             	add    esp,0x14
c001241b:	52                   	push   edx
c001241c:	50                   	push   eax
c001241d:	6a 00                	push   0x0
c001241f:	6a 00                	push   0x0
c0012421:	53                   	push   ebx
c0012422:	e8 53 fe ff ff       	call   c001227a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012427:	83 c4 20             	add    esp,0x20
c001242a:	e9 79 01 00 00       	jmp    c00125a8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001242f:	89 f0                	mov    eax,esi
c0012431:	31 f6                	xor    esi,esi
c0012433:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001243a:	75 02                	jne    c001243e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001243c:	89 f1                	mov    ecx,esi
c001243e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012445:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001244c:	c1 e2 08             	shl    edx,0x8
c001244f:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012457:	c1 e7 10             	shl    edi,0x10
c001245a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012462:	09 fa                	or     edx,edi
c0012464:	83 c0 10             	add    eax,0x10
c0012467:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c001246e:	09 fa                	or     edx,edi
c0012470:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012477:	c1 e7 18             	shl    edi,0x18
c001247a:	09 fa                	or     edx,edi
c001247c:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012480:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012487:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001248e:	c1 e7 10             	shl    edi,0x10
c0012491:	c1 e2 08             	shl    edx,0x8
c0012494:	09 fa                	or     edx,edi
c0012496:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001249d:	09 fa                	or     edx,edi
c001249f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00124a6:	c1 e7 18             	shl    edi,0x18
c00124a9:	09 fa                	or     edx,edi
c00124ab:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00124af:	46                   	inc    esi
c00124b0:	83 fe 04             	cmp    esi,0x4
c00124b3:	0f 85 7a ff ff ff    	jne    c0012433 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00124b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124bd:	83 f0 01             	xor    eax,0x1
c00124c0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00124c4:	75 57                	jne    c001251d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00124c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124ca:	83 f0 01             	xor    eax,0x1
c00124cd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00124d1:	75 4a                	jne    c001251d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00124d3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00124d9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00124dd:	89 f7                	mov    edi,esi
c00124df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00124e7:	c1 ff 1f             	sar    edi,0x1f
c00124ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00124f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00124fe:	57                   	push   edi
c00124ff:	56                   	push   esi
c0012500:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012504:	c1 e0 0a             	shl    eax,0xa
c0012507:	52                   	push   edx
c0012508:	50                   	push   eax
c0012509:	e8 ae c8 00 00       	call   c001edbc <__udivdi3>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012515:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012519:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001251d:	84 c9                	test   cl,cl
c001251f:	74 53                	je     c0012574 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012521:	0f b6 c9             	movzx  ecx,cl
c0012524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012528:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001252c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012530:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012534:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012538:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001253c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012544:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001254c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012550:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012554:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012558:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001255c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012560:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012564:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012568:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001256c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012570:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012574:	31 ed                	xor    ebp,ebp
c0012576:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001257a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001257e:	89 f8                	mov    eax,edi
c0012580:	09 f0                	or     eax,esi
c0012582:	74 1e                	je     c00125a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012584:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012588:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001258c:	89 d1                	mov    ecx,edx
c001258e:	09 c1                	or     ecx,eax
c0012590:	74 10                	je     c00125a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012592:	83 ec 0c             	sub    esp,0xc
c0012595:	57                   	push   edi
c0012596:	56                   	push   esi
c0012597:	52                   	push   edx
c0012598:	50                   	push   eax
c0012599:	53                   	push   ebx
c001259a:	e8 db fc ff ff       	call   c001227a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001259f:	83 c4 20             	add    esp,0x20
c00125a2:	45                   	inc    ebp
c00125a3:	83 fd 04             	cmp    ebp,0x4
c00125a6:	75 ce                	jne    c0012576 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00125a8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00125ae:	5b                   	pop    ebx
c00125af:	5e                   	pop    esi
c00125b0:	5f                   	pop    edi
c00125b1:	5d                   	pop    ebp
c00125b2:	c3                   	ret    
c00125b3:	90                   	nop

c00125b4 <Timer::Timer(char const*)>:
c00125b4:	83 ec 0c             	sub    esp,0xc
c00125b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125bb:	83 ec 08             	sub    esp,0x8
c00125be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125c2:	50                   	push   eax
c00125c3:	e8 70 e1 ff ff       	call   c0010738 <Device::Device(char const*)>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c00125d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d4:	89 10                	mov    DWORD PTR [eax],edx
c00125d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125da:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00125e4:	90                   	nop
c00125e5:	83 c4 0c             	add    esp,0xc
c00125e8:	c3                   	ret    
c00125e9:	90                   	nop

c00125ea <Timer::~Timer()>:
c00125ea:	83 ec 0c             	sub    esp,0xc
c00125ed:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c00125f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f6:	89 10                	mov    DWORD PTR [eax],edx
c00125f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fc:	83 ec 0c             	sub    esp,0xc
c00125ff:	50                   	push   eax
c0012600:	e8 e9 dd ff ff       	call   c00103ee <Device::~Device()>
c0012605:	83 c4 10             	add    esp,0x10
c0012608:	90                   	nop
c0012609:	83 c4 0c             	add    esp,0xc
c001260c:	c3                   	ret    
c001260d:	90                   	nop

c001260e <Timer::~Timer()>:
c001260e:	83 ec 0c             	sub    esp,0xc
c0012611:	83 ec 0c             	sub    esp,0xc
c0012614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012618:	e8 cd ff ff ff       	call   c00125ea <Timer::~Timer()>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	83 ec 08             	sub    esp,0x8
c0012623:	68 5c 01 00 00       	push   0x15c
c0012628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001262c:	e8 dc c9 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0012631:	83 c4 10             	add    esp,0x10
c0012634:	83 c4 0c             	add    esp,0xc
c0012637:	c3                   	ret    

c0012638 <Timer::read()>:
c0012638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001263c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012642:	c3                   	ret    

c0012643 <timerHandler(unsigned long long)>:
c0012643:	55                   	push   ebp
c0012644:	57                   	push   edi
c0012645:	56                   	push   esi
c0012646:	53                   	push   ebx
c0012647:	83 ec 0c             	sub    esp,0xc
c001264a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001264e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012652:	01 35 70 46 02 c0    	add    DWORD PTR ds:0xc0024670,esi
c0012658:	11 3d 74 46 02 c0    	adc    DWORD PTR ds:0xc0024674,edi
c001265e:	80 3d 0d 40 02 c0 00 	cmp    BYTE PTR ds:0xc002400d,0x0
c0012665:	0f 84 07 01 00 00    	je     c0012772 <timerHandler(unsigned long long)+0x12f>
c001266b:	e8 b2 5c 00 00       	call   c0018322 <lockStuff()>
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	68 3c 54 02 c0       	push   0xc002543c
c0012678:	e8 13 ce 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001267d:	c7 04 24 3c 54 02 c0 	mov    DWORD PTR [esp],0xc002543c
c0012684:	89 c3                	mov    ebx,eax
c0012686:	e8 0d ce 00 00       	call   c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001268b:	83 c4 10             	add    esp,0x10
c001268e:	84 c0                	test   al,al
c0012690:	74 60                	je     c00126f2 <timerHandler(unsigned long long)+0xaf>
c0012692:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012698:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001269b:	85 c0                	test   eax,eax
c001269d:	0f 85 91 00 00 00    	jne    c0012734 <timerHandler(unsigned long long)+0xf1>
c00126a3:	e9 be 00 00 00       	jmp    c0012766 <timerHandler(unsigned long long)+0x123>
c00126a8:	83 ec 0c             	sub    esp,0xc
c00126ab:	55                   	push   ebp
c00126ac:	e8 6e 62 00 00       	call   c001891f <unblockTask(ThreadControlBlock*)>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	39 eb                	cmp    ebx,ebp
c00126b6:	75 12                	jne    c00126ca <timerHandler(unsigned long long)+0x87>
c00126b8:	83 ec 0c             	sub    esp,0xc
c00126bb:	68 3c 54 02 c0       	push   0xc002543c
c00126c0:	e8 cb cd 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00126c5:	89 c3                	mov    ebx,eax
c00126c7:	83 c4 10             	add    esp,0x10
c00126ca:	83 ec 0c             	sub    esp,0xc
c00126cd:	68 3c 54 02 c0       	push   0xc002543c
c00126d2:	e8 c1 cd 00 00       	call   c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	84 c0                	test   al,al
c00126dc:	75 b4                	jne    c0012692 <timerHandler(unsigned long long)+0x4f>
c00126de:	83 ec 0c             	sub    esp,0xc
c00126e1:	68 3c 54 02 c0       	push   0xc002543c
c00126e6:	e8 a5 cd 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00126eb:	83 c4 10             	add    esp,0x10
c00126ee:	39 d8                	cmp    eax,ebx
c00126f0:	74 a0                	je     c0012692 <timerHandler(unsigned long long)+0x4f>
c00126f2:	83 ec 0c             	sub    esp,0xc
c00126f5:	68 3c 54 02 c0       	push   0xc002543c
c00126fa:	e8 91 cd 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00126ff:	89 c5                	mov    ebp,eax
c0012701:	c7 04 24 3c 54 02 c0 	mov    DWORD PTR [esp],0xc002543c
c0012708:	e8 a7 cd 00 00       	call   c001f4b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012713:	a1 74 46 02 c0       	mov    eax,ds:0xc0024674
c0012718:	39 15 70 46 02 c0    	cmp    DWORD PTR ds:0xc0024670,edx
c001271e:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012721:	19 c8                	sbb    eax,ecx
c0012723:	73 83                	jae    c00126a8 <timerHandler(unsigned long long)+0x65>
c0012725:	50                   	push   eax
c0012726:	50                   	push   eax
c0012727:	55                   	push   ebp
c0012728:	68 3c 54 02 c0       	push   0xc002543c
c001272d:	e8 30 ce 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012732:	eb 93                	jmp    c00126c7 <timerHandler(unsigned long long)+0x84>
c0012734:	80 3d 0c 40 02 c0 00 	cmp    BYTE PTR ds:0xc002400c,0x0
c001273b:	74 29                	je     c0012766 <timerHandler(unsigned long long)+0x123>
c001273d:	39 c6                	cmp    esi,eax
c001273f:	bb 00 00 00 00       	mov    ebx,0x0
c0012744:	19 df                	sbb    edi,ebx
c0012746:	72 19                	jb     c0012761 <timerHandler(unsigned long long)+0x11e>
c0012748:	e8 ae 5b 00 00       	call   c00182fb <lockScheduler()>
c001274d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012752:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012755:	e8 ea 5e 00 00       	call   c0018644 <schedule()>
c001275a:	e8 9e 5b 00 00       	call   c00182fd <unlockScheduler()>
c001275f:	eb 05                	jmp    c0012766 <timerHandler(unsigned long long)+0x123>
c0012761:	29 f0                	sub    eax,esi
c0012763:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012766:	83 c4 0c             	add    esp,0xc
c0012769:	5b                   	pop    ebx
c001276a:	5e                   	pop    esi
c001276b:	5f                   	pop    edi
c001276c:	5d                   	pop    ebp
c001276d:	e9 57 5f 00 00       	jmp    c00186c9 <unlockStuff()>
c0012772:	83 c4 0c             	add    esp,0xc
c0012775:	5b                   	pop    ebx
c0012776:	5e                   	pop    esi
c0012777:	5f                   	pop    edi
c0012778:	5d                   	pop    ebp
c0012779:	c3                   	ret    

c001277a <setupTimer(int)>:
c001277a:	57                   	push   edi
c001277b:	56                   	push   esi
c001277c:	53                   	push   ebx
c001277d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012781:	e8 fd 19 00 00       	call   c0014183 <getCPUNumber()>
c0012786:	85 c0                	test   eax,eax
c0012788:	74 32                	je     c00127bc <setupTimer(int)+0x42>
c001278a:	83 ec 0c             	sub    esp,0xc
c001278d:	68 60 01 00 00       	push   0x160
c0012792:	e8 67 c8 ff ff       	call   c000effe <operator new(unsigned long)>
c0012797:	89 04 24             	mov    DWORD PTR [esp],eax
c001279a:	89 c3                	mov    ebx,eax
c001279c:	e8 a7 c0 00 00       	call   c001e848 <APICTimer::APICTimer()>
c00127a1:	6a 00                	push   0x0
c00127a3:	6a 00                	push   0x0
c00127a5:	56                   	push   esi
c00127a6:	53                   	push   ebx
c00127a7:	e8 96 bf 00 00       	call   c001e742 <APICTimer::open(int, int, void*)>
c00127ac:	83 c4 20             	add    esp,0x20
c00127af:	e8 d2 19 00 00       	call   c0014186 <thisCPU()>
c00127b4:	56                   	push   esi
c00127b5:	56                   	push   esi
c00127b6:	53                   	push   ebx
c00127b7:	e9 96 00 00 00       	jmp    c0012852 <setupTimer(int)+0xd8>
c00127bc:	e8 c5 19 00 00       	call   c0014186 <thisCPU()>
c00127c1:	83 ec 0c             	sub    esp,0xc
c00127c4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00127ca:	e8 5b e0 ff ff       	call   c001082a <Device::getName()>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00127d5:	0f 85 87 00 00 00    	jne    c0012862 <setupTimer(int)+0xe8>
c00127db:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00127e0:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00127e7:	74 79                	je     c0012862 <setupTimer(int)+0xe8>
c00127e9:	83 ec 0c             	sub    esp,0xc
c00127ec:	68 5c 01 00 00       	push   0x15c
c00127f1:	e8 08 c8 ff ff       	call   c000effe <operator new(unsigned long)>
c00127f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00127f9:	89 c3                	mov    ebx,eax
c00127fb:	e8 a4 c1 00 00       	call   c001e9a4 <PIT::PIT()>
c0012800:	59                   	pop    ecx
c0012801:	5f                   	pop    edi
c0012802:	53                   	push   ebx
c0012803:	ff 35 08 40 02 c0    	push   DWORD PTR ds:0xc0024008
c0012809:	e8 3a dd ff ff       	call   c0010548 <Device::addChild(Device*)>
c001280e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012810:	6a 00                	push   0x0
c0012812:	6a 00                	push   0x0
c0012814:	56                   	push   esi
c0012815:	53                   	push   ebx
c0012816:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012819:	83 c4 14             	add    esp,0x14
c001281c:	68 60 01 00 00       	push   0x160
c0012821:	e8 d8 c7 ff ff       	call   c000effe <operator new(unsigned long)>
c0012826:	89 04 24             	mov    DWORD PTR [esp],eax
c0012829:	89 c7                	mov    edi,eax
c001282b:	e8 18 c0 00 00       	call   c001e848 <APICTimer::APICTimer()>
c0012830:	6a 00                	push   0x0
c0012832:	6a 00                	push   0x0
c0012834:	56                   	push   esi
c0012835:	57                   	push   edi
c0012836:	e8 07 bf 00 00       	call   c001e742 <APICTimer::open(int, int, void*)>
c001283b:	83 c4 20             	add    esp,0x20
c001283e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012840:	6a 00                	push   0x0
c0012842:	6a 00                	push   0x0
c0012844:	6a 00                	push   0x0
c0012846:	53                   	push   ebx
c0012847:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001284a:	e8 37 19 00 00       	call   c0014186 <thisCPU()>
c001284f:	5a                   	pop    edx
c0012850:	59                   	pop    ecx
c0012851:	57                   	push   edi
c0012852:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012858:	e8 eb dc ff ff       	call   c0010548 <Device::addChild(Device*)>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	eb 33                	jmp    c0012895 <setupTimer(int)+0x11b>
c0012862:	83 ec 0c             	sub    esp,0xc
c0012865:	68 5c 01 00 00       	push   0x15c
c001286a:	e8 8f c7 ff ff       	call   c000effe <operator new(unsigned long)>
c001286f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012872:	89 c3                	mov    ebx,eax
c0012874:	e8 2b c1 00 00       	call   c001e9a4 <PIT::PIT()>
c0012879:	58                   	pop    eax
c001287a:	5a                   	pop    edx
c001287b:	53                   	push   ebx
c001287c:	ff 35 08 40 02 c0    	push   DWORD PTR ds:0xc0024008
c0012882:	e8 c1 dc ff ff       	call   c0010548 <Device::addChild(Device*)>
c0012887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012889:	6a 00                	push   0x0
c001288b:	6a 00                	push   0x0
c001288d:	56                   	push   esi
c001288e:	53                   	push   ebx
c001288f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012892:	83 c4 20             	add    esp,0x20
c0012895:	89 d8                	mov    eax,ebx
c0012897:	5b                   	pop    ebx
c0012898:	5e                   	pop    esi
c0012899:	5f                   	pop    edi
c001289a:	c3                   	ret    
c001289b:	90                   	nop

c001289c <VCache::VCache(PhysicalDisk*)>:
c001289c:	53                   	push   ebx
c001289d:	83 ec 08             	sub    esp,0x8
c00128a0:	ba b4 1a 02 c0       	mov    edx,0xc0021ab4
c00128a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a9:	89 10                	mov    DWORD PTR [eax],edx
c00128ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128af:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00128b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00128c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00128cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00128d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00128de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00128e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00128f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	6a 10                	push   0x10
c00128fd:	e8 fc c6 ff ff       	call   c000effe <operator new(unsigned long)>
c0012902:	83 c4 10             	add    esp,0x10
c0012905:	89 c3                	mov    ebx,eax
c0012907:	83 ec 0c             	sub    esp,0xc
c001290a:	53                   	push   ebx
c001290b:	e8 0e 5b 00 00       	call   c001841e <Mutex::Mutex()>
c0012910:	83 c4 10             	add    esp,0x10
c0012913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012917:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001291a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012922:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012929:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012930:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012934:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001293a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012941:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012945:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001294b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012951:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012955:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012958:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001295b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295f:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012967:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001296d:	c1 e0 06             	shl    eax,0x6
c0012970:	83 ec 0c             	sub    esp,0xc
c0012973:	50                   	push   eax
c0012974:	e8 88 95 ff ff       	call   c000bf01 <malloc>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	89 c2                	mov    edx,eax
c001297e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012982:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012985:	90                   	nop
c0012986:	83 c4 08             	add    esp,0x8
c0012989:	5b                   	pop    ebx
c001298a:	c3                   	ret    
c001298b:	90                   	nop

c001298c <VCache::writeWriteBuffer()>:
c001298c:	53                   	push   ebx
c001298d:	83 ec 14             	sub    esp,0x14
c0012990:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012994:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012997:	8b 10                	mov    edx,DWORD PTR [eax]
c0012999:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001299c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001299f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00129a2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00129a5:	50                   	push   eax
c00129a6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00129a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00129b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00129b7:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00129bb:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00129c2:	83 c4 28             	add    esp,0x28
c00129c5:	5b                   	pop    ebx
c00129c6:	c3                   	ret    
c00129c7:	90                   	nop

c00129c8 <VCache::~VCache()>:
c00129c8:	83 ec 0c             	sub    esp,0xc
c00129cb:	ba b4 1a 02 c0       	mov    edx,0xc0021ab4
c00129d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d4:	89 10                	mov    DWORD PTR [eax],edx
c00129d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129da:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00129dd:	84 c0                	test   al,al
c00129df:	74 0f                	je     c00129f0 <VCache::~VCache()+0x28>
c00129e1:	83 ec 0c             	sub    esp,0xc
c00129e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e8:	e8 9f ff ff ff       	call   c001298c <VCache::writeWriteBuffer()>
c00129ed:	83 c4 10             	add    esp,0x10
c00129f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00129f7:	83 ec 0c             	sub    esp,0xc
c00129fa:	50                   	push   eax
c00129fb:	e8 11 95 ff ff       	call   c000bf11 <free>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	90                   	nop
c0012a04:	83 c4 0c             	add    esp,0xc
c0012a07:	c3                   	ret    

c0012a08 <VCache::~VCache()>:
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	83 ec 0c             	sub    esp,0xc
c0012a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a12:	e8 b1 ff ff ff       	call   c00129c8 <VCache::~VCache()>
c0012a17:	83 c4 10             	add    esp,0x10
c0012a1a:	83 ec 08             	sub    esp,0x8
c0012a1d:	6a 30                	push   0x30
c0012a1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a23:	e8 e5 c5 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	83 c4 0c             	add    esp,0xc
c0012a2e:	c3                   	ret    
c0012a2f:	90                   	nop

c0012a30 <VCache::write(unsigned long long, int, void*)>:
c0012a30:	55                   	push   ebp
c0012a31:	57                   	push   edi
c0012a32:	56                   	push   esi
c0012a33:	53                   	push   ebx
c0012a34:	83 ec 28             	sub    esp,0x28
c0012a37:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012a3f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012a43:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012a47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012a4a:	e8 3d 5e 00 00       	call   c001888c <Semaphore::acquire()>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012a56:	74 66                	je     c0012abe <VCache::write(unsigned long long, int, void*)+0x8e>
c0012a58:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a5b:	99                   	cdq    
c0012a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a60:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0012a63:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0012a66:	89 c1                	mov    ecx,eax
c0012a68:	31 f1                	xor    ecx,esi
c0012a6a:	89 d0                	mov    eax,edx
c0012a6c:	31 f8                	xor    eax,edi
c0012a6e:	89 ca                	mov    edx,ecx
c0012a70:	09 c2                	or     edx,eax
c0012a72:	75 3e                	jne    c0012ab2 <VCache::write(unsigned long long, int, void*)+0x82>
c0012a74:	83 fd 01             	cmp    ebp,0x1
c0012a77:	75 39                	jne    c0012ab2 <VCache::write(unsigned long long, int, void*)+0x82>
c0012a79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a7c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a82:	51                   	push   ecx
c0012a83:	50                   	push   eax
c0012a84:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012a88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a8c:	0f af c8             	imul   ecx,eax
c0012a8f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012a92:	51                   	push   ecx
c0012a93:	e8 3a db fe ff       	call   c00005d2 <memcpy>
c0012a98:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a9b:	83 c4 10             	add    esp,0x10
c0012a9e:	40                   	inc    eax
c0012a9f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012aa2:	83 f8 40             	cmp    eax,0x40
c0012aa5:	75 57                	jne    c0012afe <VCache::write(unsigned long long, int, void*)+0xce>
c0012aa7:	83 ec 0c             	sub    esp,0xc
c0012aaa:	53                   	push   ebx
c0012aab:	e8 dc fe ff ff       	call   c001298c <VCache::writeWriteBuffer()>
c0012ab0:	eb 34                	jmp    c0012ae6 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012ab2:	83 ec 0c             	sub    esp,0xc
c0012ab5:	53                   	push   ebx
c0012ab6:	e8 d1 fe ff ff       	call   c001298c <VCache::writeWriteBuffer()>
c0012abb:	83 c4 10             	add    esp,0x10
c0012abe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012ac1:	83 fd 3f             	cmp    ebp,0x3f
c0012ac4:	7f 25                	jg     c0012aeb <VCache::write(unsigned long long, int, void*)+0xbb>
c0012ac6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012ac9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012acc:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012acf:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012ad3:	52                   	push   edx
c0012ad4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012ada:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012ade:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012ae1:	e8 ec da fe ff       	call   c00005d2 <memcpy>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	eb 13                	jmp    c0012afe <VCache::write(unsigned long long, int, void*)+0xce>
c0012aeb:	83 ec 0c             	sub    esp,0xc
c0012aee:	8b 10                	mov    edx,DWORD PTR [eax]
c0012af0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012af4:	55                   	push   ebp
c0012af5:	57                   	push   edi
c0012af6:	56                   	push   esi
c0012af7:	50                   	push   eax
c0012af8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012afb:	83 c4 20             	add    esp,0x20
c0012afe:	83 ec 0c             	sub    esp,0xc
c0012b01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012b04:	e8 0f 63 00 00       	call   c0018e18 <Semaphore::release()>
c0012b09:	83 c4 2c             	add    esp,0x2c
c0012b0c:	5b                   	pop    ebx
c0012b0d:	31 c0                	xor    eax,eax
c0012b0f:	5e                   	pop    esi
c0012b10:	5f                   	pop    edi
c0012b11:	5d                   	pop    ebp
c0012b12:	c3                   	ret    
c0012b13:	90                   	nop

c0012b14 <VCache::read(unsigned long long, int, void*)>:
c0012b14:	57                   	push   edi
c0012b15:	56                   	push   esi
c0012b16:	53                   	push   ebx
c0012b17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b1b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012b23:	83 ec 0c             	sub    esp,0xc
c0012b26:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012b29:	e8 5e 5d 00 00       	call   c001888c <Semaphore::acquire()>
c0012b2e:	83 c4 10             	add    esp,0x10
c0012b31:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012b35:	74 0c                	je     c0012b43 <VCache::read(unsigned long long, int, void*)+0x2f>
c0012b37:	83 ec 0c             	sub    esp,0xc
c0012b3a:	53                   	push   ebx
c0012b3b:	e8 4c fe ff ff       	call   c001298c <VCache::writeWriteBuffer()>
c0012b40:	83 c4 10             	add    esp,0x10
c0012b43:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012b46:	83 ec 0c             	sub    esp,0xc
c0012b49:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b53:	57                   	push   edi
c0012b54:	56                   	push   esi
c0012b55:	50                   	push   eax
c0012b56:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012b59:	83 c4 14             	add    esp,0x14
c0012b5c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012b5f:	e8 b4 62 00 00       	call   c0018e18 <Semaphore::release()>
c0012b64:	83 c4 10             	add    esp,0x10
c0012b67:	5b                   	pop    ebx
c0012b68:	31 c0                	xor    eax,eax
c0012b6a:	5e                   	pop    esi
c0012b6b:	5f                   	pop    edi
c0012b6c:	c3                   	ret    
c0012b6d:	90                   	nop

c0012b6e <Video::putrect(int, int, int, int, unsigned int)>:
c0012b6e:	55                   	push   ebp
c0012b6f:	57                   	push   edi
c0012b70:	56                   	push   esi
c0012b71:	53                   	push   ebx
c0012b72:	83 ec 1c             	sub    esp,0x1c
c0012b75:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012b79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b7d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012b81:	01 e8                	add    eax,ebp
c0012b83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012b87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012b8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b8f:	01 df                	add    edi,ebx
c0012b91:	39 fb                	cmp    ebx,edi
c0012b93:	7d 1b                	jge    c0012bb0 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012b95:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012b99:	7d 12                	jge    c0012bad <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012b9b:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012ba1:	53                   	push   ebx
c0012ba2:	55                   	push   ebp
c0012ba3:	45                   	inc    ebp
c0012ba4:	56                   	push   esi
c0012ba5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	eb e8                	jmp    c0012b95 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012bad:	43                   	inc    ebx
c0012bae:	eb e1                	jmp    c0012b91 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012bb0:	83 c4 1c             	add    esp,0x1c
c0012bb3:	5b                   	pop    ebx
c0012bb4:	5e                   	pop    esi
c0012bb5:	5f                   	pop    edi
c0012bb6:	5d                   	pop    ebp
c0012bb7:	c3                   	ret    

c0012bb8 <Video::blit(unsigned int*, int, int, int, int)>:
c0012bb8:	55                   	push   ebp
c0012bb9:	57                   	push   edi
c0012bba:	56                   	push   esi
c0012bbb:	53                   	push   ebx
c0012bbc:	83 ec 1c             	sub    esp,0x1c
c0012bbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012bc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012bc7:	85 c0                	test   eax,eax
c0012bc9:	79 02                	jns    c0012bcd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012bcb:	31 c0                	xor    eax,eax
c0012bcd:	c1 e0 02             	shl    eax,0x2
c0012bd0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012bd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012bd8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012bdc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012be0:	39 d8                	cmp    eax,ebx
c0012be2:	7e 49                	jle    c0012c2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012be4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012bea:	7c 41                	jl     c0012c2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012bec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012bf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012bf4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012bf8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012bfc:	39 f9                	cmp    ecx,edi
c0012bfe:	7e 22                	jle    c0012c22 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012c00:	83 c5 04             	add    ebp,0x4
c0012c03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012c09:	7c 14                	jl     c0012c1f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012c0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012c0d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012c10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012c14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012c18:	56                   	push   esi
c0012c19:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012c1c:	83 c4 10             	add    esp,0x10
c0012c1f:	47                   	inc    edi
c0012c20:	eb d2                	jmp    c0012bf4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c26:	43                   	inc    ebx
c0012c27:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012c2b:	eb ab                	jmp    c0012bd8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012c2d:	83 c4 1c             	add    esp,0x1c
c0012c30:	5b                   	pop    ebx
c0012c31:	5e                   	pop    esi
c0012c32:	5f                   	pop    edi
c0012c33:	5d                   	pop    ebp
c0012c34:	c3                   	ret    
c0012c35:	90                   	nop

c0012c36 <Video::clearScreen(unsigned int)>:
c0012c36:	57                   	push   edi
c0012c37:	56                   	push   esi
c0012c38:	53                   	push   ebx
c0012c39:	31 db                	xor    ebx,ebx
c0012c3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c3f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012c45:	7e 1f                	jle    c0012c66 <Video::clearScreen(unsigned int)+0x30>
c0012c47:	31 ff                	xor    edi,edi
c0012c49:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012c4f:	7e 12                	jle    c0012c63 <Video::clearScreen(unsigned int)+0x2d>
c0012c51:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c57:	53                   	push   ebx
c0012c58:	57                   	push   edi
c0012c59:	47                   	inc    edi
c0012c5a:	56                   	push   esi
c0012c5b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	eb e6                	jmp    c0012c49 <Video::clearScreen(unsigned int)+0x13>
c0012c63:	43                   	inc    ebx
c0012c64:	eb d9                	jmp    c0012c3f <Video::clearScreen(unsigned int)+0x9>
c0012c66:	5b                   	pop    ebx
c0012c67:	5e                   	pop    esi
c0012c68:	5f                   	pop    edi
c0012c69:	c3                   	ret    

c0012c6a <Video::putpixel(int, int, unsigned int)>:
c0012c6a:	c7 44 24 04 bc 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021abc
c0012c72:	e9 bc c4 ff ff       	jmp    c000f133 <Dbg::kprintf(char const*, ...)>
c0012c77:	90                   	nop

c0012c78 <Video::Video(char const*)>:
c0012c78:	83 ec 0c             	sub    esp,0xc
c0012c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7f:	83 ec 08             	sub    esp,0x8
c0012c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c86:	50                   	push   eax
c0012c87:	e8 ac da ff ff       	call   c0010738 <Device::Device(char const*)>
c0012c8c:	83 c4 10             	add    esp,0x10
c0012c8f:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c0012c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c98:	89 10                	mov    DWORD PTR [eax],edx
c0012c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012ca8:	90                   	nop
c0012ca9:	83 c4 0c             	add    esp,0xc
c0012cac:	c3                   	ret    
c0012cad:	90                   	nop

c0012cae <Video::~Video()>:
c0012cae:	83 ec 0c             	sub    esp,0xc
c0012cb1:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c0012cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cba:	89 10                	mov    DWORD PTR [eax],edx
c0012cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	50                   	push   eax
c0012cc4:	e8 25 d7 ff ff       	call   c00103ee <Device::~Device()>
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	90                   	nop
c0012ccd:	83 c4 0c             	add    esp,0xc
c0012cd0:	c3                   	ret    
c0012cd1:	90                   	nop

c0012cd2 <Video::~Video()>:
c0012cd2:	83 ec 0c             	sub    esp,0xc
c0012cd5:	83 ec 0c             	sub    esp,0xc
c0012cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cdc:	e8 cd ff ff ff       	call   c0012cae <Video::~Video()>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	83 ec 08             	sub    esp,0x8
c0012ce7:	68 64 01 00 00       	push   0x164
c0012cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf0:	e8 18 c3 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0012cf5:	83 c4 10             	add    esp,0x10
c0012cf8:	83 c4 0c             	add    esp,0xc
c0012cfb:	c3                   	ret    

c0012cfc <Video::isMonochrome()>:
c0012cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d00:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012d06:	c3                   	ret    
c0012d07:	90                   	nop

c0012d08 <Video::getWidth()>:
c0012d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <Video::getHeight()>:
c0012d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012d1e:	c3                   	ret    
c0012d1f:	90                   	nop

c0012d20 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012d20:	55                   	push   ebp
c0012d21:	57                   	push   edi
c0012d22:	56                   	push   esi
c0012d23:	53                   	push   ebx
c0012d24:	83 ec 2c             	sub    esp,0x2c
c0012d27:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012d2b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012d2f:	83 f8 01             	cmp    eax,0x1
c0012d32:	19 c9                	sbb    ecx,ecx
c0012d34:	31 db                	xor    ebx,ebx
c0012d36:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012d3a:	89 cd                	mov    ebp,ecx
c0012d3c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012d44:	f7 d5                	not    ebp
c0012d46:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012d4c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012d50:	01 d8                	add    eax,ebx
c0012d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d56:	56                   	push   esi
c0012d57:	e8 b8 ff ff ff       	call   c0012d14 <Video::getHeight()>
c0012d5c:	59                   	pop    ecx
c0012d5d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012d61:	7e 70                	jle    c0012dd3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012d63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012d67:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012d6b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012d6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012d72:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012d76:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012d7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012d81:	89 f8                	mov    eax,edi
c0012d83:	83 c0 20             	add    eax,0x20
c0012d86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d8a:	56                   	push   esi
c0012d8b:	e8 78 ff ff ff       	call   c0012d08 <Video::getWidth()>
c0012d90:	5a                   	pop    edx
c0012d91:	39 c7                	cmp    edi,eax
c0012d93:	7d 34                	jge    c0012dc9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012d95:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012d9a:	74 05                	je     c0012da1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012d9c:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d9e:	55                   	push   ebp
c0012d9f:	eb 0d                	jmp    c0012dae <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012da1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012da6:	74 12                	je     c0012dba <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012da8:	8b 06                	mov    eax,DWORD PTR [esi]
c0012daa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012db2:	57                   	push   edi
c0012db3:	56                   	push   esi
c0012db4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	47                   	inc    edi
c0012dbb:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012dbf:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012dc3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012dc7:	75 c1                	jne    c0012d8a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012dc9:	43                   	inc    ebx
c0012dca:	83 fb 20             	cmp    ebx,0x20
c0012dcd:	0f 85 79 ff ff ff    	jne    c0012d4c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012dd3:	83 c4 2c             	add    esp,0x2c
c0012dd6:	5b                   	pop    ebx
c0012dd7:	5e                   	pop    esi
c0012dd8:	5f                   	pop    edi
c0012dd9:	5d                   	pop    ebp
c0012dda:	c3                   	ret    
c0012ddb:	90                   	nop

c0012ddc <ACPI::close(int, int, void*)>:
c0012ddc:	83 ec 1c             	sub    esp,0x1c
c0012ddf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012de7:	74 0a                	je     c0012df3 <ACPI::close(int, int, void*)+0x17>
c0012de9:	b8 00 00 00 00       	mov    eax,0x0
c0012dee:	e9 9e 00 00 00       	jmp    c0012e91 <ACPI::close(int, int, void*)+0xb5>
c0012df3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012df8:	75 37                	jne    c0012e31 <ACPI::close(int, int, void*)+0x55>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	68 0c 1b 02 c0       	push   0xc0021b0c
c0012e02:	e8 2c c3 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	a1 88 46 02 c0       	mov    eax,ds:0xc0024688
c0012e0f:	85 c0                	test   eax,eax
c0012e11:	74 07                	je     c0012e1a <ACPI::close(int, int, void*)+0x3e>
c0012e13:	a1 88 46 02 c0       	mov    eax,ds:0xc0024688
c0012e18:	ff d0                	call   eax
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	68 e0 1b 02 c0       	push   0xc0021be0
c0012e22:	e8 cb 24 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012e2f:	eb 60                	jmp    c0012e91 <ACPI::close(int, int, void*)+0xb5>
c0012e31:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012e36:	75 54                	jne    c0012e8c <ACPI::close(int, int, void*)+0xb0>
c0012e38:	a1 84 46 02 c0       	mov    eax,ds:0xc0024684
c0012e3d:	85 c0                	test   eax,eax
c0012e3f:	74 07                	je     c0012e48 <ACPI::close(int, int, void*)+0x6c>
c0012e41:	a1 84 46 02 c0       	mov    eax,ds:0xc0024684
c0012e46:	ff d0                	call   eax
c0012e48:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012e4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e51:	25 ff 00 00 00       	and    eax,0xff
c0012e56:	83 e0 02             	and    eax,0x2
c0012e59:	74 1c                	je     c0012e77 <ACPI::close(int, int, void*)+0x9b>
c0012e5b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012e62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e66:	89 c2                	mov    edx,eax
c0012e68:	ec                   	in     al,dx
c0012e69:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e6d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012e71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012e75:	eb d6                	jmp    c0012e4d <ACPI::close(int, int, void*)+0x71>
c0012e77:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012e7e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012e83:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012e87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e8b:	ee                   	out    dx,al
c0012e8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012e91:	83 c4 1c             	add    esp,0x1c
c0012e94:	c3                   	ret    

c0012e95 <findRSDP()>:
c0012e95:	83 ec 1c             	sub    esp,0x1c
c0012e98:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0012e9d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ea3:	83 e0 04             	and    eax,0x4
c0012ea6:	84 c0                	test   al,al
c0012ea8:	75 07                	jne    c0012eb1 <findRSDP()+0x1c>
c0012eaa:	b8 00 00 00 00       	mov    eax,0x0
c0012eaf:	eb 6a                	jmp    c0012f1b <findRSDP()+0x86>
c0012eb1:	a1 50 40 02 c0       	mov    eax,ds:0xc0024050
c0012eb6:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012ebb:	7f 1b                	jg     c0012ed8 <findRSDP()+0x43>
c0012ebd:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0012ec2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012ec8:	83 e2 fb             	and    edx,0xfffffffb
c0012ecb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012ed1:	b8 00 00 00 00       	mov    eax,0x0
c0012ed6:	eb 43                	jmp    c0012f1b <findRSDP()+0x86>
c0012ed8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012ee0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012ee8:	77 2c                	ja     c0012f16 <findRSDP()+0x81>
c0012eea:	83 ec 04             	sub    esp,0x4
c0012eed:	6a 08                	push   0x8
c0012eef:	68 19 1b 02 c0       	push   0xc0021b19
c0012ef4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ef8:	e8 72 d6 fe ff       	call   c000056f <memcmp>
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	85 c0                	test   eax,eax
c0012f02:	0f 94 c0             	sete   al
c0012f05:	84 c0                	test   al,al
c0012f07:	74 06                	je     c0012f0f <findRSDP()+0x7a>
c0012f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f0d:	eb 0c                	jmp    c0012f1b <findRSDP()+0x86>
c0012f0f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012f14:	eb ca                	jmp    c0012ee0 <findRSDP()+0x4b>
c0012f16:	b8 00 00 00 00       	mov    eax,0x0
c0012f1b:	83 c4 1c             	add    esp,0x1c
c0012f1e:	c3                   	ret    

c0012f1f <loadACPITables(unsigned char*)>:
c0012f1f:	56                   	push   esi
c0012f20:	53                   	push   ebx
c0012f21:	83 ec 44             	sub    esp,0x44
c0012f24:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0012f29:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f2f:	83 e0 04             	and    eax,0x4
c0012f32:	84 c0                	test   al,al
c0012f34:	0f 84 05 02 00 00    	je     c001313f <loadACPITables(unsigned char*)+0x220>
c0012f3a:	a0 a0 48 02 c0       	mov    al,ds:0xc00248a0
c0012f3f:	84 c0                	test   al,al
c0012f41:	74 75                	je     c0012fb8 <loadACPITables(unsigned char*)+0x99>
c0012f43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012f47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012f4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f52:	83 e8 24             	sub    eax,0x24
c0012f55:	c1 e8 03             	shr    eax,0x3
c0012f58:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012f5c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012f64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012f68:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012f6c:	0f 8d b2 00 00 00    	jge    c0013024 <loadACPITables(unsigned char*)+0x105>
c0012f72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012f76:	83 c0 24             	add    eax,0x24
c0012f79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012f81:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012f85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012f89:	c1 e0 03             	shl    eax,0x3
c0012f8c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012f90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012f97:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f99:	89 c1                	mov    ecx,eax
c0012f9b:	a1 8c 46 02 c0       	mov    eax,ds:0xc002468c
c0012fa0:	8d 50 01             	lea    edx,[eax+0x1]
c0012fa3:	89 15 8c 46 02 c0    	mov    DWORD PTR ds:0xc002468c,edx
c0012fa9:	89 ca                	mov    edx,ecx
c0012fab:	89 14 c5 a4 46 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb95c],edx
c0012fb2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012fb6:	eb ac                	jmp    c0012f64 <loadACPITables(unsigned char*)+0x45>
c0012fb8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012fbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fc7:	83 e8 24             	sub    eax,0x24
c0012fca:	c1 e8 02             	shr    eax,0x2
c0012fcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fd1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012fd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012fdd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012fe1:	7d 41                	jge    c0013024 <loadACPITables(unsigned char*)+0x105>
c0012fe3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012fe7:	83 c0 24             	add    eax,0x24
c0012fea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012fee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012ff6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ffa:	c1 e0 02             	shl    eax,0x2
c0012ffd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013005:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013007:	a1 8c 46 02 c0       	mov    eax,ds:0xc002468c
c001300c:	8d 50 01             	lea    edx,[eax+0x1]
c001300f:	89 15 8c 46 02 c0    	mov    DWORD PTR ds:0xc002468c,edx
c0013015:	89 ca                	mov    edx,ecx
c0013017:	89 14 c5 a4 46 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb95c],edx
c001301e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013022:	eb b5                	jmp    c0012fd9 <loadACPITables(unsigned char*)+0xba>
c0013024:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001302c:	a1 8c 46 02 c0       	mov    eax,ds:0xc002468c
c0013031:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013035:	0f 8d 05 01 00 00    	jge    c0013140 <loadACPITables(unsigned char*)+0x221>
c001303b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001303f:	8b 04 c5 a4 46 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb95c]
c0013046:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013056:	25 ff 0f 00 00       	and    eax,0xfff
c001305b:	89 c6                	mov    esi,eax
c001305d:	e8 43 b2 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c0013062:	89 c3                	mov    ebx,eax
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	6a 01                	push   0x1
c0013069:	e8 aa b0 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c001306e:	83 c4 10             	add    esp,0x10
c0013071:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013075:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001307b:	83 ec 0c             	sub    esp,0xc
c001307e:	6a 01                	push   0x1
c0013080:	6a 01                	push   0x1
c0013082:	50                   	push   eax
c0013083:	52                   	push   edx
c0013084:	53                   	push   ebx
c0013085:	e8 4c ba ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001308a:	83 c4 20             	add    esp,0x20
c001308d:	09 f0                	or     eax,esi
c001308f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013093:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013097:	c1 e0 03             	shl    eax,0x3
c001309a:	05 a0 46 02 c0       	add    eax,0xc00246a0
c001309f:	83 ec 04             	sub    esp,0x4
c00130a2:	6a 04                	push   0x4
c00130a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130a8:	50                   	push   eax
c00130a9:	e8 24 d5 fe ff       	call   c00005d2 <memcpy>
c00130ae:	83 c4 10             	add    esp,0x10
c00130b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130c0:	05 00 10 00 00       	add    eax,0x1000
c00130c5:	c1 e8 0c             	shr    eax,0xc
c00130c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00130d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d7:	25 ff 0f 00 00       	and    eax,0xfff
c00130dc:	89 c6                	mov    esi,eax
c00130de:	e8 c2 b1 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c00130e3:	89 c3                	mov    ebx,eax
c00130e5:	83 ec 0c             	sub    esp,0xc
c00130e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130ec:	e8 27 b0 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c00130f1:	83 c4 10             	add    esp,0x10
c00130f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00130fe:	83 ec 0c             	sub    esp,0xc
c0013101:	6a 01                	push   0x1
c0013103:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013107:	50                   	push   eax
c0013108:	52                   	push   edx
c0013109:	53                   	push   ebx
c001310a:	e8 c7 b9 ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001310f:	83 c4 20             	add    esp,0x20
c0013112:	09 f0                	or     eax,esi
c0013114:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013118:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001311b:	83 ec 0c             	sub    esp,0xc
c001311e:	50                   	push   eax
c001311f:	e8 41 b3 ff ff       	call   c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001312b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001312f:	89 14 c5 a4 46 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb95c],edx
c0013136:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001313a:	e9 ed fe ff ff       	jmp    c001302c <loadACPITables(unsigned char*)+0x10d>
c001313f:	90                   	nop
c0013140:	83 c4 44             	add    esp,0x44
c0013143:	5b                   	pop    ebx
c0013144:	5e                   	pop    esi
c0013145:	c3                   	ret    

c0013146 <findRSDT(unsigned char*)>:
c0013146:	56                   	push   esi
c0013147:	53                   	push   ebx
c0013148:	83 ec 44             	sub    esp,0x44
c001314b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013150:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013156:	83 e0 04             	and    eax,0x4
c0013159:	84 c0                	test   al,al
c001315b:	75 0a                	jne    c0013167 <findRSDT(unsigned char*)+0x21>
c001315d:	b8 00 00 00 00       	mov    eax,0x0
c0013162:	e9 f7 00 00 00       	jmp    c001325e <findRSDT(unsigned char*)+0x118>
c0013167:	83 ec 04             	sub    esp,0x4
c001316a:	6a 24                	push   0x24
c001316c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013170:	8d 44 24 18          	lea    eax,[esp+0x18]
c0013174:	50                   	push   eax
c0013175:	e8 58 d4 fe ff       	call   c00005d2 <memcpy>
c001317a:	83 c4 10             	add    esp,0x10
c001317d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013181:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013185:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001318d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013191:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013195:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001319d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00131a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131a5:	25 ff 0f 00 00       	and    eax,0xfff
c00131aa:	89 c6                	mov    esi,eax
c00131ac:	e8 f4 b0 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c00131b1:	89 c3                	mov    ebx,eax
c00131b3:	83 ec 0c             	sub    esp,0xc
c00131b6:	6a 02                	push   0x2
c00131b8:	e8 5b af ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00131c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00131ca:	83 ec 0c             	sub    esp,0xc
c00131cd:	6a 01                	push   0x1
c00131cf:	6a 02                	push   0x2
c00131d1:	50                   	push   eax
c00131d2:	52                   	push   edx
c00131d3:	53                   	push   ebx
c00131d4:	e8 fd b8 ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00131d9:	83 c4 20             	add    esp,0x20
c00131dc:	09 f0                	or     eax,esi
c00131de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00131e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131e6:	25 ff 0f 00 00       	and    eax,0xfff
c00131eb:	89 c6                	mov    esi,eax
c00131ed:	e8 b3 b0 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c00131f2:	89 c3                	mov    ebx,eax
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	6a 02                	push   0x2
c00131f9:	e8 1a af ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c00131fe:	83 c4 10             	add    esp,0x10
c0013201:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013205:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001320b:	83 ec 0c             	sub    esp,0xc
c001320e:	6a 01                	push   0x1
c0013210:	6a 02                	push   0x2
c0013212:	50                   	push   eax
c0013213:	52                   	push   edx
c0013214:	53                   	push   ebx
c0013215:	e8 bc b8 ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001321a:	83 c4 20             	add    esp,0x20
c001321d:	09 f0                	or     eax,esi
c001321f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013223:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013228:	75 11                	jne    c001323b <findRSDT(unsigned char*)+0xf5>
c001322a:	c6 05 a0 48 02 c0 00 	mov    BYTE PTR ds:0xc00248a0,0x0
c0013231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013235:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013239:	eb 1f                	jmp    c001325a <findRSDT(unsigned char*)+0x114>
c001323b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013240:	75 11                	jne    c0013253 <findRSDT(unsigned char*)+0x10d>
c0013242:	c6 05 a0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248a0,0x1
c0013249:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001324d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013251:	eb 07                	jmp    c001325a <findRSDT(unsigned char*)+0x114>
c0013253:	b8 00 00 00 00       	mov    eax,0x0
c0013258:	eb 04                	jmp    c001325e <findRSDT(unsigned char*)+0x118>
c001325a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001325e:	83 c4 44             	add    esp,0x44
c0013261:	5b                   	pop    ebx
c0013262:	5e                   	pop    esi
c0013263:	c3                   	ret    

c0013264 <findDataTable(unsigned char*, char*)>:
c0013264:	83 ec 1c             	sub    esp,0x1c
c0013267:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001326c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013272:	83 e0 04             	and    eax,0x4
c0013275:	84 c0                	test   al,al
c0013277:	75 07                	jne    c0013280 <findDataTable(unsigned char*, char*)+0x1c>
c0013279:	b8 00 00 00 00       	mov    eax,0x0
c001327e:	eb 7c                	jmp    c00132fc <findDataTable(unsigned char*, char*)+0x98>
c0013280:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013288:	a1 8c 46 02 c0       	mov    eax,ds:0xc002468c
c001328d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013291:	7d 3a                	jge    c00132cd <findDataTable(unsigned char*, char*)+0x69>
c0013293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013297:	c1 e0 03             	shl    eax,0x3
c001329a:	05 a0 46 02 c0       	add    eax,0xc00246a0
c001329f:	83 ec 04             	sub    esp,0x4
c00132a2:	6a 04                	push   0x4
c00132a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a8:	50                   	push   eax
c00132a9:	e8 c1 d2 fe ff       	call   c000056f <memcmp>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	85 c0                	test   eax,eax
c00132b3:	0f 94 c0             	sete   al
c00132b6:	84 c0                	test   al,al
c00132b8:	74 0d                	je     c00132c7 <findDataTable(unsigned char*, char*)+0x63>
c00132ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132be:	8b 04 c5 a4 46 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb95c]
c00132c5:	eb 35                	jmp    c00132fc <findDataTable(unsigned char*, char*)+0x98>
c00132c7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00132cb:	eb bb                	jmp    c0013288 <findDataTable(unsigned char*, char*)+0x24>
c00132cd:	a0 a0 48 02 c0       	mov    al,ds:0xc00248a0
c00132d2:	84 c0                	test   al,al
c00132d4:	74 07                	je     c00132dd <findDataTable(unsigned char*, char*)+0x79>
c00132d6:	b8 58 00 00 00       	mov    eax,0x58
c00132db:	eb 05                	jmp    c00132e2 <findDataTable(unsigned char*, char*)+0x7e>
c00132dd:	b8 52 00 00 00       	mov    eax,0x52
c00132e2:	83 ec 04             	sub    esp,0x4
c00132e5:	50                   	push   eax
c00132e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132ea:	68 04 1c 02 c0       	push   0xc0021c04
c00132ef:	e8 3f be ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	b8 00 00 00 00       	mov    eax,0x0
c00132fc:	83 c4 1c             	add    esp,0x1c
c00132ff:	c3                   	ret    

c0013300 <scanMADT()>:
c0013300:	83 ec 2c             	sub    esp,0x2c
c0013303:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013308:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001330e:	83 e0 04             	and    eax,0x4
c0013311:	84 c0                	test   al,al
c0013313:	0f 84 9a 03 00 00    	je     c00136b3 <scanMADT()+0x3b3>
c0013319:	e8 77 fb ff ff       	call   c0012e95 <findRSDP()>
c001331e:	a3 ac 48 02 c0       	mov    ds:0xc00248ac,eax
c0013323:	a1 ac 48 02 c0       	mov    eax,ds:0xc00248ac
c0013328:	85 c0                	test   eax,eax
c001332a:	75 19                	jne    c0013345 <scanMADT()+0x45>
c001332c:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013331:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013337:	83 e2 fb             	and    edx,0xfffffffb
c001333a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013340:	e9 72 03 00 00       	jmp    c00136b7 <scanMADT()+0x3b7>
c0013345:	a1 ac 48 02 c0       	mov    eax,ds:0xc00248ac
c001334a:	83 ec 0c             	sub    esp,0xc
c001334d:	50                   	push   eax
c001334e:	e8 f3 fd ff ff       	call   c0013146 <findRSDT(unsigned char*)>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	a3 a8 48 02 c0       	mov    ds:0xc00248a8,eax
c001335b:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0013360:	85 c0                	test   eax,eax
c0013362:	75 19                	jne    c001337d <scanMADT()+0x7d>
c0013364:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013369:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001336f:	83 e2 fb             	and    edx,0xfffffffb
c0013372:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013378:	e9 3a 03 00 00       	jmp    c00136b7 <scanMADT()+0x3b7>
c001337d:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0013382:	83 ec 0c             	sub    esp,0xc
c0013385:	50                   	push   eax
c0013386:	e8 94 fb ff ff       	call   c0012f1f <loadACPITables(unsigned char*)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0013393:	83 ec 08             	sub    esp,0x8
c0013396:	68 22 1b 02 c0       	push   0xc0021b22
c001339b:	50                   	push   eax
c001339c:	e8 c3 fe ff ff       	call   c0013264 <findDataTable(unsigned char*, char*)>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133a8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133ad:	75 19                	jne    c00133c8 <scanMADT()+0xc8>
c00133af:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00133b4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00133ba:	83 e2 fe             	and    edx,0xfffffffe
c00133bd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00133c3:	e9 ef 02 00 00       	jmp    c00136b7 <scanMADT()+0x3b7>
c00133c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133d7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00133db:	0f 87 d6 02 00 00    	ja     c00136b7 <scanMADT()+0x3b7>
c00133e1:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00133e9:	0f 87 c8 02 00 00    	ja     c00136b7 <scanMADT()+0x3b7>
c00133ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133fb:	8d 50 01             	lea    edx,[eax+0x1]
c00133fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013406:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001340a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001340e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013412:	8d 50 01             	lea    edx,[eax+0x1]
c0013415:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013419:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001341d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013421:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013425:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001342a:	0f 86 86 02 00 00    	jbe    c00136b6 <scanMADT()+0x3b6>
c0013430:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013435:	75 5b                	jne    c0013492 <scanMADT()+0x192>
c0013437:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001343b:	8d 50 01             	lea    edx,[eax+0x1]
c001343e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013442:	8a 15 e0 49 02 c0    	mov    dl,BYTE PTR ds:0xc00249e0
c0013448:	81 e2 ff 00 00 00    	and    edx,0xff
c001344e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013452:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013456:	88 82 20 4a 02 c0    	mov    BYTE PTR [edx-0x3ffdb5e0],al
c001345c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013460:	8d 42 01             	lea    eax,[edx+0x1]
c0013463:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013467:	a0 e0 49 02 c0       	mov    al,ds:0xc00249e0
c001346c:	8d 48 01             	lea    ecx,[eax+0x1]
c001346f:	88 0d e0 49 02 c0    	mov    BYTE PTR ds:0xc00249e0,cl
c0013475:	25 ff 00 00 00       	and    eax,0xff
c001347a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001347e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013482:	88 90 00 4a 02 c0    	mov    BYTE PTR [eax-0x3ffdb600],dl
c0013488:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001348d:	e9 0a 02 00 00       	jmp    c001369c <scanMADT()+0x39c>
c0013492:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013497:	0f 85 29 01 00 00    	jne    c00135c6 <scanMADT()+0x2c6>
c001349d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a1:	8d 50 01             	lea    edx,[eax+0x1]
c00134a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00134a8:	8a 15 b0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248b0
c00134ae:	81 e2 ff 00 00 00    	and    edx,0xff
c00134b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00134b8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00134bc:	88 82 c0 48 02 c0    	mov    BYTE PTR [edx-0x3ffdb740],al
c00134c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00134c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00134ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134ce:	01 d0                	add    eax,edx
c00134d0:	83 c0 2c             	add    eax,0x2c
c00134d3:	8a 00                	mov    al,BYTE PTR [eax]
c00134d5:	31 d2                	xor    edx,edx
c00134d7:	88 c2                	mov    dl,al
c00134d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134dd:	8d 48 01             	lea    ecx,[eax+0x1]
c00134e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134e4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00134e8:	25 ff 00 00 00       	and    eax,0xff
c00134ed:	c1 e0 08             	shl    eax,0x8
c00134f0:	89 d1                	mov    ecx,edx
c00134f2:	09 c1                	or     ecx,eax
c00134f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f8:	8d 50 02             	lea    edx,[eax+0x2]
c00134fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013503:	25 ff 00 00 00       	and    eax,0xff
c0013508:	c1 e0 10             	shl    eax,0x10
c001350b:	09 c1                	or     ecx,eax
c001350d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013511:	8d 50 03             	lea    edx,[eax+0x3]
c0013514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013518:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001351c:	25 ff 00 00 00       	and    eax,0xff
c0013521:	c1 e0 18             	shl    eax,0x18
c0013524:	09 c1                	or     ecx,eax
c0013526:	89 ca                	mov    edx,ecx
c0013528:	a0 b0 48 02 c0       	mov    al,ds:0xc00248b0
c001352d:	25 ff 00 00 00       	and    eax,0xff
c0013532:	89 14 85 e0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb720],edx
c0013539:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001353e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013542:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013546:	01 d0                	add    eax,edx
c0013548:	83 c0 2c             	add    eax,0x2c
c001354b:	8a 00                	mov    al,BYTE PTR [eax]
c001354d:	31 d2                	xor    edx,edx
c001354f:	88 c2                	mov    dl,al
c0013551:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013555:	8d 48 01             	lea    ecx,[eax+0x1]
c0013558:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001355c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013560:	25 ff 00 00 00       	and    eax,0xff
c0013565:	c1 e0 08             	shl    eax,0x8
c0013568:	89 d1                	mov    ecx,edx
c001356a:	09 c1                	or     ecx,eax
c001356c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013570:	8d 50 02             	lea    edx,[eax+0x2]
c0013573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013577:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001357b:	25 ff 00 00 00       	and    eax,0xff
c0013580:	c1 e0 10             	shl    eax,0x10
c0013583:	09 c1                	or     ecx,eax
c0013585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013589:	8d 50 03             	lea    edx,[eax+0x3]
c001358c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013590:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013594:	25 ff 00 00 00       	and    eax,0xff
c0013599:	c1 e0 18             	shl    eax,0x18
c001359c:	09 c1                	or     ecx,eax
c001359e:	89 ca                	mov    edx,ecx
c00135a0:	a0 b0 48 02 c0       	mov    al,ds:0xc00248b0
c00135a5:	25 ff 00 00 00       	and    eax,0xff
c00135aa:	89 14 85 60 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6a0],edx
c00135b1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00135b6:	a0 b0 48 02 c0       	mov    al,ds:0xc00248b0
c00135bb:	40                   	inc    eax
c00135bc:	a2 b0 48 02 c0       	mov    ds:0xc00248b0,al
c00135c1:	e9 d6 00 00 00       	jmp    c001369c <scanMADT()+0x39c>
c00135c6:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00135cb:	0f 85 b1 00 00 00    	jne    c0013682 <scanMADT()+0x382>
c00135d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d5:	8d 50 01             	lea    edx,[eax+0x1]
c00135d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00135dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135e0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00135e4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00135e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135ec:	8d 50 01             	lea    edx,[eax+0x1]
c00135ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00135f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135f7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00135fb:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00135ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013607:	01 d0                	add    eax,edx
c0013609:	83 c0 2c             	add    eax,0x2c
c001360c:	8a 00                	mov    al,BYTE PTR [eax]
c001360e:	31 d2                	xor    edx,edx
c0013610:	88 c2                	mov    dl,al
c0013612:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013616:	8d 48 01             	lea    ecx,[eax+0x1]
c0013619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001361d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013621:	25 ff 00 00 00       	and    eax,0xff
c0013626:	c1 e0 08             	shl    eax,0x8
c0013629:	89 d1                	mov    ecx,edx
c001362b:	09 c1                	or     ecx,eax
c001362d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013631:	8d 50 02             	lea    edx,[eax+0x2]
c0013634:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013638:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001363c:	25 ff 00 00 00       	and    eax,0xff
c0013641:	c1 e0 10             	shl    eax,0x10
c0013644:	09 c1                	or     ecx,eax
c0013646:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364a:	8d 50 03             	lea    edx,[eax+0x3]
c001364d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013651:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013655:	25 ff 00 00 00       	and    eax,0xff
c001365a:	c1 e0 18             	shl    eax,0x18
c001365d:	09 c8                	or     eax,ecx
c001365f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013663:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013668:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c001366d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013671:	25 ff 00 00 00       	and    eax,0xff
c0013676:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001367a:	88 90 60 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc8a0],dl
c0013680:	eb 1a                	jmp    c001369c <scanMADT()+0x39c>
c0013682:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013687:	75 07                	jne    c0013690 <scanMADT()+0x390>
c0013689:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001368e:	eb 0c                	jmp    c001369c <scanMADT()+0x39c>
c0013690:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013695:	75 05                	jne    c001369c <scanMADT()+0x39c>
c0013697:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001369c:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c00136a0:	31 d2                	xor    edx,edx
c00136a2:	88 c2                	mov    dl,al
c00136a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136a8:	01 d0                	add    eax,edx
c00136aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00136ae:	e9 1d fd ff ff       	jmp    c00133d0 <scanMADT()+0xd0>
c00136b3:	90                   	nop
c00136b4:	eb 01                	jmp    c00136b7 <scanMADT()+0x3b7>
c00136b6:	90                   	nop
c00136b7:	83 c4 2c             	add    esp,0x2c
c00136ba:	c3                   	ret    
c00136bb:	90                   	nop

c00136bc <ACPI::ACPI()>:
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c3:	83 ec 08             	sub    esp,0x8
c00136c6:	68 27 1b 02 c0       	push   0xc0021b27
c00136cb:	50                   	push   eax
c00136cc:	e8 67 d0 ff ff       	call   c0010738 <Device::Device(char const*)>
c00136d1:	83 c4 10             	add    esp,0x10
c00136d4:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00136d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136dd:	89 10                	mov    DWORD PTR [eax],edx
c00136df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00136ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ee:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00136f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fc:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013711:	e8 ea fb ff ff       	call   c0013300 <scanMADT()>
c0013716:	90                   	nop
c0013717:	83 c4 0c             	add    esp,0xc
c001371a:	c3                   	ret    
c001371b:	90                   	nop

c001371c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001371c:	83 ec 2c             	sub    esp,0x2c
c001371f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013723:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013727:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001372b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001372f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013734:	88 d0                	mov    al,dl
c0013736:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001373a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001373f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013747:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001374b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013751:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013755:	0f 8d 97 00 00 00    	jge    c00137f2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001375b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001375f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013763:	83 c2 2a             	add    edx,0x2a
c0013766:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001376a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001376f:	75 78                	jne    c00137e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013771:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013775:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013779:	83 c2 2a             	add    edx,0x2a
c001377c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013780:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013784:	75 63                	jne    c00137e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013786:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001378b:	74 3a                	je     c00137c7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001378d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013791:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013795:	83 c2 2a             	add    edx,0x2a
c0013798:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001379c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137a3:	39 c2                	cmp    edx,eax
c00137a5:	74 10                	je     c00137b7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00137a7:	83 ec 0c             	sub    esp,0xc
c00137aa:	68 34 1c 02 c0       	push   0xc0021c34
c00137af:	e8 3e 1b 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	83 ec 0c             	sub    esp,0xc
c00137ba:	68 2c 1b 02 c0       	push   0xc0021b2c
c00137bf:	e8 2e 1b 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00137cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00137d3:	83 c2 2a             	add    edx,0x2a
c00137d6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00137da:	8b 02                	mov    eax,DWORD PTR [edx]
c00137dc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00137df:	89 01                	mov    DWORD PTR [ecx],eax
c00137e1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00137e4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00137e9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00137ed:	e9 55 ff ff ff       	jmp    c0013747 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00137f2:	90                   	nop
c00137f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137f7:	83 c4 2c             	add    esp,0x2c
c00137fa:	c2 04 00             	ret    0x4
c00137fd:	90                   	nop

c00137fe <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00137fe:	56                   	push   esi
c00137ff:	53                   	push   ebx
c0013800:	83 ec 14             	sub    esp,0x14
c0013803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013807:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001380b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001380f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013814:	88 c8                	mov    al,cl
c0013816:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001381a:	88 d0                	mov    al,dl
c001381c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013824:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001382a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001382e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013834:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013838:	31 c9                	xor    ecx,ecx
c001383a:	88 c1                	mov    cl,al
c001383c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013840:	31 d2                	xor    edx,edx
c0013842:	88 c2                	mov    dl,al
c0013844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013848:	25 ff ff 00 00       	and    eax,0xffff
c001384d:	83 ec 04             	sub    esp,0x4
c0013850:	56                   	push   esi
c0013851:	53                   	push   ebx
c0013852:	51                   	push   ecx
c0013853:	52                   	push   edx
c0013854:	50                   	push   eax
c0013855:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013859:	68 64 1c 02 c0       	push   0xc0021c64
c001385e:	e8 d0 b8 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0013863:	83 c4 20             	add    esp,0x20
c0013866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001386a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013874:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013877:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001387b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001387f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013883:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013889:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001388d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013894:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001389d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00138a3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00138a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00138aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138ae:	83 c2 2a             	add    edx,0x2a
c00138b1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00138b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138b9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00138bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138c3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00138c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00138ca:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00138ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138d2:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00138d8:	8d 50 01             	lea    edx,[eax+0x1]
c00138db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138df:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00138e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138e9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00138ef:	3d 00 08 00 00       	cmp    eax,0x800
c00138f4:	75 10                	jne    c0013906 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c00138f6:	83 ec 0c             	sub    esp,0xc
c00138f9:	68 3b 1b 02 c0       	push   0xc0021b3b
c00138fe:	e8 ef 19 00 00       	call   c00152f2 <Krnl::panic(char const*)>
c0013903:	83 c4 10             	add    esp,0x10
c0013906:	90                   	nop
c0013907:	83 c4 14             	add    esp,0x14
c001390a:	5b                   	pop    ebx
c001390b:	5e                   	pop    esi
c001390c:	c3                   	ret    
c001390d:	90                   	nop

c001390e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001390e:	b8 00 00 00 00       	mov    eax,0x0
c0013913:	c3                   	ret    

c0013914 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013914:	83 ec 1c             	sub    esp,0x1c
c0013917:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001391b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001391e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013922:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c0013928:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001392c:	25 ff 00 00 00       	and    eax,0xff
c0013931:	83 ec 08             	sub    esp,0x8
c0013934:	50                   	push   eax
c0013935:	52                   	push   edx
c0013936:	e8 d3 7b ff ff       	call   c000b50e <Computer::readCMOS(unsigned char)>
c001393b:	83 c4 10             	add    esp,0x10
c001393e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013942:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c0013948:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001394c:	25 ff 00 00 00       	and    eax,0xff
c0013951:	83 ec 04             	sub    esp,0x4
c0013954:	6a 01                	push   0x1
c0013956:	50                   	push   eax
c0013957:	52                   	push   edx
c0013958:	e8 c9 7c ff ff       	call   c000b626 <Computer::writeCMOS(unsigned char, unsigned char)>
c001395d:	83 c4 10             	add    esp,0x10
c0013960:	90                   	nop
c0013961:	83 c4 1c             	add    esp,0x1c
c0013964:	c3                   	ret    
c0013965:	90                   	nop

c0013966 <ACPI::open(int, int, void*)>:
c0013966:	53                   	push   ebx
c0013967:	83 ec 18             	sub    esp,0x18
c001396a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001396e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013979:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001397f:	84 c0                	test   al,al
c0013981:	74 60                	je     c00139e3 <ACPI::open(int, int, void*)+0x7d>
c0013983:	83 ec 0c             	sub    esp,0xc
c0013986:	68 58 01 00 00       	push   0x158
c001398b:	e8 6e b6 ff ff       	call   c000effe <operator new(unsigned long)>
c0013990:	83 c4 10             	add    esp,0x10
c0013993:	89 c3                	mov    ebx,eax
c0013995:	83 ec 0c             	sub    esp,0xc
c0013998:	53                   	push   ebx
c0013999:	e8 a8 80 00 00       	call   c001ba46 <PCI::PCI()>
c001399e:	83 c4 10             	add    esp,0x10
c00139a1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00139a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139a9:	83 ec 08             	sub    esp,0x8
c00139ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00139b0:	50                   	push   eax
c00139b1:	e8 92 cb ff ff       	call   c0010548 <Device::addChild(Device*)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00139bf:	83 c0 08             	add    eax,0x8
c00139c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00139c4:	6a 00                	push   0x0
c00139c6:	6a 00                	push   0x0
c00139c8:	6a 00                	push   0x0
c00139ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139ce:	ff d0                	call   eax
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	83 ec 0c             	sub    esp,0xc
c00139d6:	68 58 1b 02 c0       	push   0xc0021b58
c00139db:	e8 53 b7 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00139e0:	83 c4 10             	add    esp,0x10
c00139e3:	83 ec 0c             	sub    esp,0xc
c00139e6:	68 63 1b 02 c0       	push   0xc0021b63
c00139eb:	e8 43 38 00 00       	call   c0017233 <Thr::loadKernelSymbolTable(char const*)>
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c00139f9:	83 ec 08             	sub    esp,0x8
c00139fc:	6a 01                	push   0x1
c00139fe:	68 81 1b 02 c0       	push   0xc0021b81
c0013a03:	e8 0d 43 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	83 ec 08             	sub    esp,0x8
c0013a0e:	53                   	push   ebx
c0013a0f:	50                   	push   eax
c0013a10:	e8 c6 44 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c0013a15:	83 c4 10             	add    esp,0x10
c0013a18:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c0013a1e:	83 ec 08             	sub    esp,0x8
c0013a21:	6a 01                	push   0x1
c0013a23:	68 9e 1b 02 c0       	push   0xc0021b9e
c0013a28:	e8 e8 42 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	83 ec 08             	sub    esp,0x8
c0013a33:	53                   	push   ebx
c0013a34:	50                   	push   eax
c0013a35:	e8 a1 44 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c0013a3a:	83 c4 10             	add    esp,0x10
c0013a3d:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013a42:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a48:	83 e0 04             	and    eax,0x4
c0013a4b:	84 c0                	test   al,al
c0013a4d:	0f 84 cf 00 00 00    	je     c0013b22 <ACPI::open(int, int, void*)+0x1bc>
c0013a53:	83 ec 0c             	sub    esp,0xc
c0013a56:	68 14 01 00 00       	push   0x114
c0013a5b:	e8 9e b5 ff ff       	call   c000effe <operator new(unsigned long)>
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	89 c3                	mov    ebx,eax
c0013a65:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0013a6a:	83 ec 04             	sub    esp,0x4
c0013a6d:	50                   	push   eax
c0013a6e:	68 bb 1b 02 c0       	push   0xc0021bbb
c0013a73:	53                   	push   ebx
c0013a74:	e8 f1 bb ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013a80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a85:	74 17                	je     c0013a9e <ACPI::open(int, int, void*)+0x138>
c0013a87:	83 ec 0c             	sub    esp,0xc
c0013a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a8e:	e8 a9 be ff ff       	call   c000f93c <File::exists()>
c0013a93:	83 c4 10             	add    esp,0x10
c0013a96:	84 c0                	test   al,al
c0013a98:	74 04                	je     c0013a9e <ACPI::open(int, int, void*)+0x138>
c0013a9a:	b0 01                	mov    al,0x1
c0013a9c:	eb 02                	jmp    c0013aa0 <ACPI::open(int, int, void*)+0x13a>
c0013a9e:	b0 00                	mov    al,0x0
c0013aa0:	84 c0                	test   al,al
c0013aa2:	74 25                	je     c0013ac9 <ACPI::open(int, int, void*)+0x163>
c0013aa4:	8b 1d 08 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024008
c0013aaa:	83 ec 08             	sub    esp,0x8
c0013aad:	6a 01                	push   0x1
c0013aaf:	68 bb 1b 02 c0       	push   0xc0021bbb
c0013ab4:	e8 5c 42 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	83 ec 08             	sub    esp,0x8
c0013abf:	53                   	push   ebx
c0013ac0:	50                   	push   eax
c0013ac1:	e8 15 44 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ace:	74 1e                	je     c0013aee <ACPI::open(int, int, void*)+0x188>
c0013ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ad5:	74 17                	je     c0013aee <ACPI::open(int, int, void*)+0x188>
c0013ad7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0013add:	83 c0 08             	add    eax,0x8
c0013ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ae9:	ff d0                	call   eax
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	a1 a8 48 02 c0       	mov    eax,ds:0xc00248a8
c0013af3:	83 ec 08             	sub    esp,0x8
c0013af6:	68 d8 1b 02 c0       	push   0xc0021bd8
c0013afb:	50                   	push   eax
c0013afc:	e8 63 f7 ff ff       	call   c0013264 <findDataTable(unsigned char*, char*)>
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b08:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013b0d:	74 13                	je     c0013b22 <ACPI::open(int, int, void*)+0x1bc>
c0013b0f:	83 ec 08             	sub    esp,0x8
c0013b12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013b16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b1a:	e8 f5 fd ff ff       	call   c0013914 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013b1f:	83 c4 10             	add    esp,0x10
c0013b22:	b8 00 00 00 00       	mov    eax,0x0
c0013b27:	83 c4 18             	add    esp,0x18
c0013b2a:	5b                   	pop    ebx
c0013b2b:	c3                   	ret    

c0013b2c <ACPI::sleep()>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	a1 80 46 02 c0       	mov    eax,ds:0xc0024680
c0013b34:	85 c0                	test   eax,eax
c0013b36:	74 07                	je     c0013b3f <ACPI::sleep()+0x13>
c0013b38:	a1 80 46 02 c0       	mov    eax,ds:0xc0024680
c0013b3d:	ff d0                	call   eax
c0013b3f:	90                   	nop
c0013b40:	83 c4 0c             	add    esp,0xc
c0013b43:	c3                   	ret    

c0013b44 <CPU::close(int, int, void*)>:
c0013b44:	31 c0                	xor    eax,eax
c0013b46:	c3                   	ret    

c0013b47 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013b47:	55                   	push   ebp
c0013b48:	57                   	push   edi
c0013b49:	56                   	push   esi
c0013b4a:	53                   	push   ebx
c0013b4b:	51                   	push   ecx
c0013b4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b50:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b54:	89 d6                	mov    esi,edx
c0013b56:	89 cd                	mov    ebp,ecx
c0013b58:	80 fa 04             	cmp    dl,0x4
c0013b5b:	75 28                	jne    c0013b85 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c0013b5d:	8d 41 f9             	lea    eax,[ecx-0x7]
c0013b60:	3c 03                	cmp    al,0x3
c0013b62:	0f 86 64 01 00 00    	jbe    c0013ccc <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0013b68:	80 f9 03             	cmp    cl,0x3
c0013b6b:	0f 84 5b 01 00 00    	je     c0013ccc <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0013b71:	8d 79 f2             	lea    edi,[ecx-0xe]
c0013b74:	b8 30 39 02 c0       	mov    eax,0xc0023930
c0013b79:	89 fb                	mov    ebx,edi
c0013b7b:	80 fb 01             	cmp    bl,0x1
c0013b7e:	77 4e                	ja     c0013bce <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c0013b80:	e9 61 01 00 00       	jmp    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013b85:	80 fa 05             	cmp    dl,0x5
c0013b88:	75 4d                	jne    c0013bd7 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c0013b8a:	b8 40 39 02 c0       	mov    eax,0xc0023940
c0013b8f:	80 f9 03             	cmp    cl,0x3
c0013b92:	0f 86 4e 01 00 00    	jbe    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013b98:	8d 79 fa             	lea    edi,[ecx-0x6]
c0013b9b:	b8 50 39 02 c0       	mov    eax,0xc0023950
c0013ba0:	89 fb                	mov    ebx,edi
c0013ba2:	80 fb 01             	cmp    bl,0x1
c0013ba5:	0f 86 3b 01 00 00    	jbe    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013bab:	b8 60 39 02 c0       	mov    eax,0xc0023960
c0013bb0:	80 f9 08             	cmp    cl,0x8
c0013bb3:	0f 84 2d 01 00 00    	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013bb9:	89 cf                	mov    edi,ecx
c0013bbb:	b8 70 39 02 c0       	mov    eax,0xc0023970
c0013bc0:	83 e7 fb             	and    edi,0xfffffffb
c0013bc3:	89 fb                	mov    ebx,edi
c0013bc5:	80 fb 09             	cmp    bl,0x9
c0013bc8:	0f 84 18 01 00 00    	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013bce:	31 c0                	xor    eax,eax
c0013bd0:	89 eb                	mov    ebx,ebp
c0013bd2:	0f b6 fb             	movzx  edi,bl
c0013bd5:	eb 30                	jmp    c0013c07 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0013bd7:	31 c0                	xor    eax,eax
c0013bd9:	80 fa 06             	cmp    dl,0x6
c0013bdc:	75 f2                	jne    c0013bd0 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013bde:	80 f9 0a             	cmp    cl,0xa
c0013be1:	77 ed                	ja     c0013bd0 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013be3:	bf de 05 00 00       	mov    edi,0x5de
c0013be8:	0f a3 cf             	bt     edi,ecx
c0013beb:	73 e3                	jae    c0013bd0 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013bed:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0013bf2:	e9 ef 00 00 00       	jmp    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013bf7:	39 c7                	cmp    edi,eax
c0013bf9:	0f 84 d4 00 00 00    	je     c0013cd3 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0013bff:	40                   	inc    eax
c0013c00:	3d d0 00 00 00       	cmp    eax,0xd0
c0013c05:	74 09                	je     c0013c10 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0013c07:	89 f3                	mov    ebx,esi
c0013c09:	80 fb 0f             	cmp    bl,0xf
c0013c0c:	75 f1                	jne    c0013bff <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0013c0e:	eb e7                	jmp    c0013bf7 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0013c10:	80 fa 10             	cmp    dl,0x10
c0013c13:	75 19                	jne    c0013c2e <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0013c15:	8d 41 fc             	lea    eax,[ecx-0x4]
c0013c18:	83 e0 fb             	and    eax,0xfffffffb
c0013c1b:	3c 02                	cmp    al,0x2
c0013c1d:	0f 86 b7 00 00 00    	jbe    c0013cda <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0013c23:	80 f9 02             	cmp    cl,0x2
c0013c26:	0f 84 ae 00 00 00    	je     c0013cda <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0013c2c:	eb 13                	jmp    c0013c41 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0013c2e:	80 fa 11             	cmp    dl,0x11
c0013c31:	75 0e                	jne    c0013c41 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0013c33:	b8 90 39 02 c0       	mov    eax,0xc0023990
c0013c38:	80 f9 03             	cmp    cl,0x3
c0013c3b:	0f 84 a5 00 00 00    	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c41:	80 fa 12             	cmp    dl,0x12
c0013c44:	75 0e                	jne    c0013c54 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0013c46:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c0013c4b:	80 f9 01             	cmp    cl,0x1
c0013c4e:	0f 84 92 00 00 00    	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c54:	80 fa 14             	cmp    dl,0x14
c0013c57:	be 01 00 00 00       	mov    esi,0x1
c0013c5c:	0f 94 c3             	sete   bl
c0013c5f:	80 f9 13             	cmp    cl,0x13
c0013c62:	77 0c                	ja     c0013c70 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013c64:	be 04 00 09 00       	mov    esi,0x90004
c0013c69:	d3 ee                	shr    esi,cl
c0013c6b:	f7 d6                	not    esi
c0013c6d:	83 e6 01             	and    esi,0x1
c0013c70:	8d 41 ff             	lea    eax,[ecx-0x1]
c0013c73:	3c 01                	cmp    al,0x1
c0013c75:	b8 b0 39 02 c0       	mov    eax,0xc00239b0
c0013c7a:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c0013c7f:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c0013c83:	75 61                	jne    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c85:	80 fa 15             	cmp    dl,0x15
c0013c88:	75 1f                	jne    c0013ca9 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c0013c8a:	b8 c0 39 02 c0       	mov    eax,0xc00239c0
c0013c8f:	80 f9 01             	cmp    cl,0x1
c0013c92:	74 52                	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c94:	89 f3                	mov    ebx,esi
c0013c96:	b8 d0 39 02 c0       	mov    eax,0xc00239d0
c0013c9b:	84 db                	test   bl,bl
c0013c9d:	74 47                	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c9f:	b8 e0 39 02 c0       	mov    eax,0xc00239e0
c0013ca4:	80 f9 30             	cmp    cl,0x30
c0013ca7:	74 3d                	je     c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013ca9:	80 fa 16             	cmp    dl,0x16
c0013cac:	0f 94 c2             	sete   dl
c0013caf:	84 c9                	test   cl,cl
c0013cb1:	75 09                	jne    c0013cbc <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0013cb3:	b8 f0 39 02 c0       	mov    eax,0xc00239f0
c0013cb8:	84 d2                	test   dl,dl
c0013cba:	75 2a                	jne    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cbc:	80 f9 30             	cmp    cl,0x30
c0013cbf:	75 20                	jne    c0013ce1 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0013cc1:	b8 00 3a 02 c0       	mov    eax,0xc0023a00
c0013cc6:	84 d2                	test   dl,dl
c0013cc8:	75 1c                	jne    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cca:	eb 15                	jmp    c0013ce1 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0013ccc:	b8 20 39 02 c0       	mov    eax,0xc0023920
c0013cd1:	eb 13                	jmp    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cd3:	b8 90 39 02 c0       	mov    eax,0xc0023990
c0013cd8:	eb 0c                	jmp    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cda:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c0013cdf:	eb 05                	jmp    c0013ce6 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013ce1:	b8 e6 1f 02 c0       	mov    eax,0xc0021fe6
c0013ce6:	5a                   	pop    edx
c0013ce7:	5b                   	pop    ebx
c0013ce8:	5e                   	pop    esi
c0013ce9:	5f                   	pop    edi
c0013cea:	5d                   	pop    ebp
c0013ceb:	c3                   	ret    

c0013cec <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013cec:	53                   	push   ebx
c0013ced:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013cf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cf5:	80 f9 04             	cmp    cl,0x4
c0013cf8:	75 6a                	jne    c0013d64 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013cfa:	b8 80 37 02 c0       	mov    eax,0xc0023780
c0013cff:	80 fa 01             	cmp    dl,0x1
c0013d02:	0f 86 9b 02 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d08:	b8 90 37 02 c0       	mov    eax,0xc0023790
c0013d0d:	80 fa 02             	cmp    dl,0x2
c0013d10:	0f 84 8d 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d16:	b8 a0 37 02 c0       	mov    eax,0xc00237a0
c0013d1b:	80 fa 03             	cmp    dl,0x3
c0013d1e:	0f 84 7f 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d24:	b8 b0 37 02 c0       	mov    eax,0xc00237b0
c0013d29:	80 fa 04             	cmp    dl,0x4
c0013d2c:	0f 84 71 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d32:	b8 c0 37 02 c0       	mov    eax,0xc00237c0
c0013d37:	80 fa 05             	cmp    dl,0x5
c0013d3a:	0f 84 63 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d40:	b8 a0 37 02 c0       	mov    eax,0xc00237a0
c0013d45:	80 fa 07             	cmp    dl,0x7
c0013d48:	0f 84 55 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d4e:	8d 5a f8             	lea    ebx,[edx-0x8]
c0013d51:	b8 d0 37 02 c0       	mov    eax,0xc00237d0
c0013d56:	80 fb 01             	cmp    bl,0x1
c0013d59:	0f 87 e0 01 00 00    	ja     c0013f3f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0013d5f:	e9 3f 02 00 00       	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d64:	80 f9 05             	cmp    cl,0x5
c0013d67:	75 3e                	jne    c0013da7 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c0013d69:	8d 5a ff             	lea    ebx,[edx-0x1]
c0013d6c:	b8 e0 37 02 c0       	mov    eax,0xc00237e0
c0013d71:	80 fb 02             	cmp    bl,0x2
c0013d74:	0f 86 29 02 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d7a:	80 fa 04             	cmp    dl,0x4
c0013d7d:	0f 84 f1 01 00 00    	je     c0013f74 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c0013d83:	80 fa 07             	cmp    dl,0x7
c0013d86:	0f 84 17 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d8c:	b8 f0 37 02 c0       	mov    eax,0xc00237f0
c0013d91:	80 fa 08             	cmp    dl,0x8
c0013d94:	0f 84 09 02 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013d9a:	b8 00 38 02 c0       	mov    eax,0xc0023800
c0013d9f:	80 fa 09             	cmp    dl,0x9
c0013da2:	e9 96 01 00 00       	jmp    c0013f3d <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c0013da7:	80 f9 06             	cmp    cl,0x6
c0013daa:	0f 85 80 01 00 00    	jne    c0013f30 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0013db0:	b8 10 38 02 c0       	mov    eax,0xc0023810
c0013db5:	80 fa 01             	cmp    dl,0x1
c0013db8:	0f 84 e5 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013dbe:	8d 42 fb             	lea    eax,[edx-0x5]
c0013dc1:	3c 01                	cmp    al,0x1
c0013dc3:	0f 86 b2 01 00 00    	jbe    c0013f7b <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0013dc9:	80 fa 03             	cmp    dl,0x3
c0013dcc:	0f 84 a9 01 00 00    	je     c0013f7b <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0013dd2:	8d 5a f9             	lea    ebx,[edx-0x7]
c0013dd5:	b8 30 38 02 c0       	mov    eax,0xc0023830
c0013dda:	80 fb 01             	cmp    bl,0x1
c0013ddd:	0f 86 c0 01 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013de3:	80 fa 09             	cmp    dl,0x9
c0013de6:	0f 84 96 01 00 00    	je     c0013f82 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013dec:	8d 5a f6             	lea    ebx,[edx-0xa]
c0013def:	80 fb 01             	cmp    bl,0x1
c0013df2:	0f 86 ab 01 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013df8:	b8 40 38 02 c0       	mov    eax,0xc0023840
c0013dfd:	80 fa 0d             	cmp    dl,0xd
c0013e00:	0f 84 9d 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e06:	b8 50 38 02 c0       	mov    eax,0xc0023850
c0013e0b:	80 fa 0e             	cmp    dl,0xe
c0013e0e:	0f 84 8f 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e14:	b8 60 38 02 c0       	mov    eax,0xc0023860
c0013e19:	80 fa 0f             	cmp    dl,0xf
c0013e1c:	0f 84 81 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e22:	b8 40 38 02 c0       	mov    eax,0xc0023840
c0013e27:	80 fa 15             	cmp    dl,0x15
c0013e2a:	0f 84 73 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e30:	8d 5a ea             	lea    ebx,[edx-0x16]
c0013e33:	b8 60 38 02 c0       	mov    eax,0xc0023860
c0013e38:	80 fb 01             	cmp    bl,0x1
c0013e3b:	0f 86 62 01 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e41:	80 fa 1a             	cmp    dl,0x1a
c0013e44:	0f 84 3f 01 00 00    	je     c0013f89 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0013e4a:	80 fa 1c             	cmp    dl,0x1c
c0013e4d:	0f 84 3d 01 00 00    	je     c0013f90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c0013e53:	80 fa 1d             	cmp    dl,0x1d
c0013e56:	0f 84 47 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e5c:	b8 90 38 02 c0       	mov    eax,0xc0023890
c0013e61:	80 fa 25             	cmp    dl,0x25
c0013e64:	0f 84 39 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e6a:	8d 5a da             	lea    ebx,[edx-0x26]
c0013e6d:	b8 80 38 02 c0       	mov    eax,0xc0023880
c0013e72:	80 fb 01             	cmp    bl,0x1
c0013e75:	0f 86 28 01 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e7b:	b8 a0 38 02 c0       	mov    eax,0xc00238a0
c0013e80:	80 fa 2a             	cmp    dl,0x2a
c0013e83:	0f 84 1a 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e89:	b8 90 38 02 c0       	mov    eax,0xc0023890
c0013e8e:	80 fa 2c             	cmp    dl,0x2c
c0013e91:	0f 84 0c 01 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e97:	b8 a0 38 02 c0       	mov    eax,0xc00238a0
c0013e9c:	80 fa 2d             	cmp    dl,0x2d
c0013e9f:	0f 84 fe 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ea5:	b8 70 38 02 c0       	mov    eax,0xc0023870
c0013eaa:	80 fa 2e             	cmp    dl,0x2e
c0013ead:	0f 84 f0 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013eb3:	b8 90 38 02 c0       	mov    eax,0xc0023890
c0013eb8:	80 fa 2f             	cmp    dl,0x2f
c0013ebb:	0f 84 e2 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ec1:	8d 5a cb             	lea    ebx,[edx-0x35]
c0013ec4:	b8 80 38 02 c0       	mov    eax,0xc0023880
c0013ec9:	80 fb 01             	cmp    bl,0x1
c0013ecc:	0f 86 d1 00 00 00    	jbe    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ed2:	b8 b0 38 02 c0       	mov    eax,0xc00238b0
c0013ed7:	80 fa 37             	cmp    dl,0x37
c0013eda:	0f 84 c3 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ee0:	b8 c0 38 02 c0       	mov    eax,0xc00238c0
c0013ee5:	80 fa 3a             	cmp    dl,0x3a
c0013ee8:	0f 84 b5 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013eee:	b8 d0 38 02 c0       	mov    eax,0xc00238d0
c0013ef3:	80 fa 3c             	cmp    dl,0x3c
c0013ef6:	0f 84 a7 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013efc:	b8 e0 38 02 c0       	mov    eax,0xc00238e0
c0013f01:	80 fa 3d             	cmp    dl,0x3d
c0013f04:	0f 84 99 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f0a:	b8 c0 38 02 c0       	mov    eax,0xc00238c0
c0013f0f:	80 fa 3e             	cmp    dl,0x3e
c0013f12:	0f 84 8b 00 00 00    	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f18:	8d 42 bb             	lea    eax,[edx-0x45]
c0013f1b:	3c 01                	cmp    al,0x1
c0013f1d:	76 78                	jbe    c0013f97 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0013f1f:	80 fa 3f             	cmp    dl,0x3f
c0013f22:	74 73                	je     c0013f97 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0013f24:	80 fa 4a             	cmp    dl,0x4a
c0013f27:	74 75                	je     c0013f9e <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0013f29:	80 fa 4d             	cmp    dl,0x4d
c0013f2c:	75 11                	jne    c0013f3f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0013f2e:	eb 6e                	jmp    c0013f9e <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0013f30:	80 f9 0b             	cmp    cl,0xb
c0013f33:	75 0a                	jne    c0013f3f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0013f35:	b8 f0 38 02 c0       	mov    eax,0xc00238f0
c0013f3a:	80 fa 01             	cmp    dl,0x1
c0013f3d:	74 64                	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f3f:	80 f9 0f             	cmp    cl,0xf
c0013f42:	b8 00 39 02 c0       	mov    eax,0xc0023900
c0013f47:	0f 94 c1             	sete   cl
c0013f4a:	80 fa 02             	cmp    dl,0x2
c0013f4d:	0f 96 c3             	setbe  bl
c0013f50:	84 cb                	test   bl,cl
c0013f52:	75 4f                	jne    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f54:	8d 42 fd             	lea    eax,[edx-0x3]
c0013f57:	3c 01                	cmp    al,0x1
c0013f59:	0f 96 c0             	setbe  al
c0013f5c:	80 fa 06             	cmp    dl,0x6
c0013f5f:	0f 94 c2             	sete   dl
c0013f62:	09 c2                	or     edx,eax
c0013f64:	b8 e6 1f 02 c0       	mov    eax,0xc0021fe6
c0013f69:	84 ca                	test   dl,cl
c0013f6b:	74 36                	je     c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f6d:	b8 10 39 02 c0       	mov    eax,0xc0023910
c0013f72:	eb 2f                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f74:	b8 f0 37 02 c0       	mov    eax,0xc00237f0
c0013f79:	eb 28                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f7b:	b8 20 38 02 c0       	mov    eax,0xc0023820
c0013f80:	eb 21                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f82:	b8 40 38 02 c0       	mov    eax,0xc0023840
c0013f87:	eb 1a                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f89:	b8 70 38 02 c0       	mov    eax,0xc0023870
c0013f8e:	eb 13                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f90:	b8 80 38 02 c0       	mov    eax,0xc0023880
c0013f95:	eb 0c                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f97:	b8 d0 38 02 c0       	mov    eax,0xc00238d0
c0013f9c:	eb 05                	jmp    c0013fa3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f9e:	b8 b0 38 02 c0       	mov    eax,0xc00238b0
c0013fa3:	5b                   	pop    ebx
c0013fa4:	c3                   	ret    

c0013fa5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013fa5:	60                   	pusha  
c0013fa6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013faa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fb2:	9c                   	pushf  
c0013fb3:	fa                   	cli    
c0013fb4:	0f 09                	wbinvd 
c0013fb6:	0f 30                	wrmsr  
c0013fb8:	9d                   	popf   
c0013fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fbd:	89 02                	mov    DWORD PTR [edx],eax
c0013fbf:	61                   	popa   
c0013fc0:	c3                   	ret    

c0013fc1 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013fc1:	60                   	pusha  
c0013fc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013fc6:	9c                   	pushf  
c0013fc7:	fa                   	cli    
c0013fc8:	0f 09                	wbinvd 
c0013fca:	31 c0                	xor    eax,eax
c0013fcc:	31 d2                	xor    edx,edx
c0013fce:	0f 32                	rdmsr  
c0013fd0:	9d                   	popf   
c0013fd1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fd5:	89 02                	mov    DWORD PTR [edx],eax
c0013fd7:	61                   	popa   
c0013fd8:	c3                   	ret    

c0013fd9 <AMD_K6_writeback(int, int, int)>:
c0013fd9:	56                   	push   esi
c0013fda:	53                   	push   ebx
c0013fdb:	83 ec 10             	sub    esp,0x10
c0013fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe2:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013fe7:	75 5d                	jne    c0014046 <AMD_K6_writeback(int, int, int)+0x6d>
c0013fe9:	83 f8 08             	cmp    eax,0x8
c0013fec:	75 09                	jne    c0013ff7 <AMD_K6_writeback(int, int, int)+0x1e>
c0013fee:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013ff3:	7e 13                	jle    c0014008 <AMD_K6_writeback(int, int, int)+0x2f>
c0013ff5:	eb 30                	jmp    c0014027 <AMD_K6_writeback(int, int, int)+0x4e>
c0013ff7:	83 f8 06             	cmp    eax,0x6
c0013ffa:	7c 4a                	jl     c0014046 <AMD_K6_writeback(int, int, int)+0x6d>
c0013ffc:	83 f8 07             	cmp    eax,0x7
c0013fff:	7e 07                	jle    c0014008 <AMD_K6_writeback(int, int, int)+0x2f>
c0014001:	83 f8 09             	cmp    eax,0x9
c0014004:	74 21                	je     c0014027 <AMD_K6_writeback(int, int, int)+0x4e>
c0014006:	eb 3e                	jmp    c0014046 <AMD_K6_writeback(int, int, int)+0x6d>
c0014008:	89 e6                	mov    esi,esp
c001400a:	8b 1d 44 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024044
c0014010:	c1 eb 15             	shr    ebx,0x15
c0014013:	56                   	push   esi
c0014014:	68 82 00 00 c0       	push   0xc0000082
c0014019:	e8 a3 ff ff ff       	call   c0013fc1 <AMD_K6_read_msr(unsigned int, REGS*)>
c001401e:	56                   	push   esi
c001401f:	83 e3 7e             	and    ebx,0x7e
c0014022:	6a 00                	push   0x0
c0014024:	53                   	push   ebx
c0014025:	eb 12                	jmp    c0014039 <AMD_K6_writeback(int, int, int)+0x60>
c0014027:	89 e3                	mov    ebx,esp
c0014029:	53                   	push   ebx
c001402a:	68 82 00 00 c0       	push   0xc0000082
c001402f:	e8 8d ff ff ff       	call   c0013fc1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014034:	53                   	push   ebx
c0014035:	6a 00                	push   0x0
c0014037:	6a 00                	push   0x0
c0014039:	68 82 00 00 c0       	push   0xc0000082
c001403e:	e8 62 ff ff ff       	call   c0013fa5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014043:	83 c4 18             	add    esp,0x18
c0014046:	83 c4 10             	add    esp,0x10
c0014049:	5b                   	pop    ebx
c001404a:	5e                   	pop    esi
c001404b:	c3                   	ret    

c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001404c:	55                   	push   ebp
c001404d:	57                   	push   edi
c001404e:	56                   	push   esi
c001404f:	53                   	push   ebx
c0014050:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014054:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014058:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001405c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014060:	39 05 20 3a 02 c0    	cmp    DWORD PTR ds:0xc0023a20,eax
c0014066:	75 23                	jne    c001408b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0014068:	a1 4c 4a 02 c0       	mov    eax,ds:0xc0024a4c
c001406d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014071:	89 06                	mov    DWORD PTR [esi],eax
c0014073:	a1 48 4a 02 c0       	mov    eax,ds:0xc0024a48
c0014078:	89 07                	mov    DWORD PTR [edi],eax
c001407a:	a1 44 4a 02 c0       	mov    eax,ds:0xc0024a44
c001407f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014082:	a1 40 4a 02 c0       	mov    eax,ds:0xc0024a40
c0014087:	89 02                	mov    DWORD PTR [edx],eax
c0014089:	eb 3f                	jmp    c00140ca <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001408b:	31 c9                	xor    ecx,ecx
c001408d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014091:	0f a2                	cpuid  
c0014093:	89 06                	mov    DWORD PTR [esi],eax
c0014095:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014099:	89 1f                	mov    DWORD PTR [edi],ebx
c001409b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001409e:	89 10                	mov    DWORD PTR [eax],edx
c00140a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140a4:	a3 20 3a 02 c0       	mov    ds:0xc0023a20,eax
c00140a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00140ab:	a3 4c 4a 02 c0       	mov    ds:0xc0024a4c,eax
c00140b0:	8b 07                	mov    eax,DWORD PTR [edi]
c00140b2:	a3 48 4a 02 c0       	mov    ds:0xc0024a48,eax
c00140b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00140ba:	a3 44 4a 02 c0       	mov    ds:0xc0024a44,eax
c00140bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00140c5:	a3 40 4a 02 c0       	mov    ds:0xc0024a40,eax
c00140ca:	5b                   	pop    ebx
c00140cb:	5e                   	pop    esi
c00140cc:	5f                   	pop    edi
c00140cd:	5d                   	pop    ebp
c00140ce:	c3                   	ret    

c00140cf <cpuidCheckEDX(unsigned int)>:
c00140cf:	83 ec 10             	sub    esp,0x10
c00140d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00140d6:	50                   	push   eax
c00140d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00140db:	50                   	push   eax
c00140dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00140e0:	50                   	push   eax
c00140e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00140e5:	50                   	push   eax
c00140e6:	6a 01                	push   0x1
c00140e8:	e8 5f ff ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00140ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140f1:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00140f5:	0f 95 c0             	setne  al
c00140f8:	83 c4 24             	add    esp,0x24
c00140fb:	c3                   	ret    

c00140fc <cpuidCheckECX(unsigned int)>:
c00140fc:	83 ec 10             	sub    esp,0x10
c00140ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014103:	50                   	push   eax
c0014104:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014108:	50                   	push   eax
c0014109:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001410d:	50                   	push   eax
c001410e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014112:	50                   	push   eax
c0014113:	6a 01                	push   0x1
c0014115:	e8 32 ff ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001411a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001411e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014122:	0f 95 c0             	setne  al
c0014125:	83 c4 24             	add    esp,0x24
c0014128:	c3                   	ret    

c0014129 <cpuidCheckExtendedEBX(unsigned int)>:
c0014129:	83 ec 10             	sub    esp,0x10
c001412c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014130:	50                   	push   eax
c0014131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014135:	50                   	push   eax
c0014136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001413a:	50                   	push   eax
c001413b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001413f:	50                   	push   eax
c0014140:	6a 07                	push   0x7
c0014142:	e8 05 ff ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014147:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001414b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001414f:	0f 95 c0             	setne  al
c0014152:	83 c4 24             	add    esp,0x24
c0014155:	c3                   	ret    

c0014156 <cpuidCheckExtendedECX(unsigned int)>:
c0014156:	83 ec 10             	sub    esp,0x10
c0014159:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001415d:	50                   	push   eax
c001415e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014162:	50                   	push   eax
c0014163:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014167:	50                   	push   eax
c0014168:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001416c:	50                   	push   eax
c001416d:	6a 07                	push   0x7
c001416f:	e8 d8 fe ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014174:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014178:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001417c:	0f 95 c0             	setne  al
c001417f:	83 c4 24             	add    esp,0x24
c0014182:	c3                   	ret    

c0014183 <getCPUNumber()>:
c0014183:	31 c0                	xor    eax,eax
c0014185:	c3                   	ret    

c0014186 <thisCPU()>:
c0014186:	e8 f8 ff ff ff       	call   c0014183 <getCPUNumber()>
c001418b:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c0014191:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0014198:	c3                   	ret    
c0014199:	90                   	nop

c001419a <CPU::CPU()>:
c001419a:	83 ec 0c             	sub    esp,0xc
c001419d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a1:	83 ec 08             	sub    esp,0x8
c00141a4:	68 e6 1f 02 c0       	push   0xc0021fe6
c00141a9:	50                   	push   eax
c00141aa:	e8 89 c5 ff ff       	call   c0010738 <Device::Device(char const*)>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c00141b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141bb:	89 10                	mov    DWORD PTR [eax],edx
c00141bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00141cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141cf:	05 78 01 00 00       	add    eax,0x178
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	50                   	push   eax
c00141d8:	e8 35 75 ff ff       	call   c000b712 <GDT::GDT()>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e4:	05 7c 09 00 00       	add    eax,0x97c
c00141e9:	83 ec 0c             	sub    esp,0xc
c00141ec:	50                   	push   eax
c00141ed:	e8 80 77 ff ff       	call   c000b972 <IDT::IDT()>
c00141f2:	83 c4 10             	add    esp,0x10
c00141f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f9:	05 7c 11 00 00       	add    eax,0x117c
c00141fe:	83 ec 0c             	sub    esp,0xc
c0014201:	50                   	push   eax
c0014202:	e8 dd 97 ff ff       	call   c000d9e4 <TSS::TSS()>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014219:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014223:	90                   	nop
c0014224:	83 c4 0c             	add    esp,0xc
c0014227:	c3                   	ret    

c0014228 <CPU::displayFeatures()>:
c0014228:	53                   	push   ebx
c0014229:	83 ec 10             	sub    esp,0x10
c001422c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014230:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014236:	68 f4 1c 02 c0       	push   0xc0021cf4
c001423b:	e8 f3 ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014240:	59                   	pop    ecx
c0014241:	58                   	pop    eax
c0014242:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014248:	50                   	push   eax
c0014249:	68 05 1d 02 c0       	push   0xc0021d05
c001424e:	e8 e0 ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014253:	58                   	pop    eax
c0014254:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001425a:	c1 e8 0e             	shr    eax,0xe
c001425d:	5a                   	pop    edx
c001425e:	0f b6 c0             	movzx  eax,al
c0014261:	50                   	push   eax
c0014262:	68 16 1d 02 c0       	push   0xc0021d16
c0014267:	e8 c7 ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001426c:	59                   	pop    ecx
c001426d:	58                   	pop    eax
c001426e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014274:	66 c1 e8 06          	shr    ax,0x6
c0014278:	0f b6 c0             	movzx  eax,al
c001427b:	50                   	push   eax
c001427c:	68 27 1d 02 c0       	push   0xc0021d27
c0014281:	e8 ad ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014286:	c7 04 24 3a 21 02 c0 	mov    DWORD PTR [esp],0xc002213a
c001428d:	e8 a1 ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014292:	83 c4 10             	add    esp,0x10
c0014295:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c001429a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00142a1:	74 05                	je     c00142a8 <CPU::displayFeatures()+0x80>
c00142a3:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c00142a8:	52                   	push   edx
c00142a9:	52                   	push   edx
c00142aa:	50                   	push   eax
c00142ab:	68 38 1d 02 c0       	push   0xc0021d38
c00142b0:	e8 7e ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c00142bd:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00142c4:	78 05                	js     c00142cb <CPU::displayFeatures()+0xa3>
c00142c6:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c00142cb:	51                   	push   ecx
c00142cc:	51                   	push   ecx
c00142cd:	50                   	push   eax
c00142ce:	68 4f 1d 02 c0       	push   0xc0021d4f
c00142d3:	e8 5b ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c00142e0:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00142e7:	75 05                	jne    c00142ee <CPU::displayFeatures()+0xc6>
c00142e9:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c00142ee:	52                   	push   edx
c00142ef:	52                   	push   edx
c00142f0:	50                   	push   eax
c00142f1:	68 66 1d 02 c0       	push   0xc0021d66
c00142f6:	e8 38 ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00142fb:	83 c4 10             	add    esp,0x10
c00142fe:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c0014303:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001430a:	75 05                	jne    c0014311 <CPU::displayFeatures()+0xe9>
c001430c:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c0014311:	51                   	push   ecx
c0014312:	51                   	push   ecx
c0014313:	50                   	push   eax
c0014314:	68 7d 1d 02 c0       	push   0xc0021d7d
c0014319:	e8 15 ae ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c0014326:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001432d:	75 05                	jne    c0014334 <CPU::displayFeatures()+0x10c>
c001432f:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c0014334:	52                   	push   edx
c0014335:	52                   	push   edx
c0014336:	50                   	push   eax
c0014337:	68 94 1d 02 c0       	push   0xc0021d94
c001433c:	e8 f2 ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014341:	83 c4 10             	add    esp,0x10
c0014344:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c0014349:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014350:	75 05                	jne    c0014357 <CPU::displayFeatures()+0x12f>
c0014352:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c0014357:	51                   	push   ecx
c0014358:	51                   	push   ecx
c0014359:	50                   	push   eax
c001435a:	68 ab 1d 02 c0       	push   0xc0021dab
c001435f:	e8 cf ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c001436c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014373:	75 05                	jne    c001437a <CPU::displayFeatures()+0x152>
c0014375:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c001437a:	52                   	push   edx
c001437b:	52                   	push   edx
c001437c:	50                   	push   eax
c001437d:	68 c2 1d 02 c0       	push   0xc0021dc2
c0014382:	e8 ac ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014387:	83 c4 10             	add    esp,0x10
c001438a:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c001438f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014396:	75 05                	jne    c001439d <CPU::displayFeatures()+0x175>
c0014398:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c001439d:	51                   	push   ecx
c001439e:	51                   	push   ecx
c001439f:	50                   	push   eax
c00143a0:	68 d9 1d 02 c0       	push   0xc0021dd9
c00143a5:	e8 89 ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00143aa:	83 c4 10             	add    esp,0x10
c00143ad:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c00143b2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00143b9:	75 05                	jne    c00143c0 <CPU::displayFeatures()+0x198>
c00143bb:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c00143c0:	52                   	push   edx
c00143c1:	52                   	push   edx
c00143c2:	50                   	push   eax
c00143c3:	68 f0 1d 02 c0       	push   0xc0021df0
c00143c8:	e8 66 ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00143cd:	83 c4 10             	add    esp,0x10
c00143d0:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c00143d5:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00143dc:	75 05                	jne    c00143e3 <CPU::displayFeatures()+0x1bb>
c00143de:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c00143e3:	51                   	push   ecx
c00143e4:	51                   	push   ecx
c00143e5:	50                   	push   eax
c00143e6:	68 07 1e 02 c0       	push   0xc0021e07
c00143eb:	e8 43 ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00143f0:	83 c4 10             	add    esp,0x10
c00143f3:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c00143f8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00143ff:	75 05                	jne    c0014406 <CPU::displayFeatures()+0x1de>
c0014401:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c0014406:	52                   	push   edx
c0014407:	52                   	push   edx
c0014408:	50                   	push   eax
c0014409:	68 1e 1e 02 c0       	push   0xc0021e1e
c001440e:	e8 20 ad ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014413:	83 c4 10             	add    esp,0x10
c0014416:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c001441b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014422:	75 05                	jne    c0014429 <CPU::displayFeatures()+0x201>
c0014424:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c0014429:	51                   	push   ecx
c001442a:	51                   	push   ecx
c001442b:	50                   	push   eax
c001442c:	68 35 1e 02 c0       	push   0xc0021e35
c0014431:	e8 fd ac ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c001443e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014445:	75 05                	jne    c001444c <CPU::displayFeatures()+0x224>
c0014447:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c001444c:	52                   	push   edx
c001444d:	52                   	push   edx
c001444e:	50                   	push   eax
c001444f:	68 4c 1e 02 c0       	push   0xc0021e4c
c0014454:	e8 da ac ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c0014461:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014468:	78 05                	js     c001446f <CPU::displayFeatures()+0x247>
c001446a:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c001446f:	51                   	push   ecx
c0014470:	51                   	push   ecx
c0014471:	50                   	push   eax
c0014472:	68 63 1e 02 c0       	push   0xc0021e63
c0014477:	e8 b7 ac ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	b8 ae 09 02 c0       	mov    eax,0xc00209ae
c0014484:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001448b:	75 05                	jne    c0014492 <CPU::displayFeatures()+0x26a>
c001448d:	b8 b2 09 02 c0       	mov    eax,0xc00209b2
c0014492:	52                   	push   edx
c0014493:	52                   	push   edx
c0014494:	50                   	push   eax
c0014495:	68 7a 1e 02 c0       	push   0xc0021e7a
c001449a:	e8 94 ac ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001449f:	83 c4 18             	add    esp,0x18
c00144a2:	5b                   	pop    ebx
c00144a3:	c3                   	ret    

c00144a4 <CPU::detectFeatures()>:
c00144a4:	55                   	push   ebp
c00144a5:	57                   	push   edi
c00144a6:	56                   	push   esi
c00144a7:	53                   	push   ebx
c00144a8:	83 ec 50             	sub    esp,0x50
c00144ab:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00144af:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00144b9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00144c0:	6a 0d                	push   0xd
c00144c2:	6a 00                	push   0x0
c00144c4:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00144ca:	57                   	push   edi
c00144cb:	e8 38 c1 fe ff       	call   c0000608 <memset>
c00144d0:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00144d5:	83 c4 10             	add    esp,0x10
c00144d8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00144df:	0f 84 04 09 00 00    	je     c0014de9 <CPU::detectFeatures()+0x945>
c00144e5:	83 ec 0c             	sub    esp,0xc
c00144e8:	6a 10                	push   0x10
c00144ea:	e8 e0 fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c00144ef:	83 e0 01             	and    eax,0x1
c00144f2:	8d 14 00             	lea    edx,[eax+eax*1]
c00144f5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00144fb:	83 e0 fd             	and    eax,0xfffffffd
c00144fe:	09 d0                	or     eax,edx
c0014500:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014506:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001450d:	e8 bd fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c0014512:	83 e0 01             	and    eax,0x1
c0014515:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001451c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014522:	83 e0 fb             	and    eax,0xfffffffb
c0014525:	09 d0                	or     eax,edx
c0014527:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001452d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014534:	e8 96 fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c0014539:	83 e0 01             	and    eax,0x1
c001453c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014543:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014549:	83 e0 f7             	and    eax,0xfffffff7
c001454c:	09 d0                	or     eax,edx
c001454e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014554:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001455b:	e8 6f fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c0014560:	83 e0 01             	and    eax,0x1
c0014563:	c1 e0 04             	shl    eax,0x4
c0014566:	88 c2                	mov    dl,al
c0014568:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001456e:	83 e0 ef             	and    eax,0xffffffef
c0014571:	09 d0                	or     eax,edx
c0014573:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014579:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014580:	e8 4a fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c0014585:	83 e0 01             	and    eax,0x1
c0014588:	c1 e0 05             	shl    eax,0x5
c001458b:	88 c2                	mov    dl,al
c001458d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014593:	83 e0 df             	and    eax,0xffffffdf
c0014596:	09 d0                	or     eax,edx
c0014598:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001459e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00145a5:	e8 25 fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c00145aa:	83 e0 01             	and    eax,0x1
c00145ad:	8d 14 00             	lea    edx,[eax+eax*1]
c00145b0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00145b6:	83 e0 fd             	and    eax,0xfffffffd
c00145b9:	09 d0                	or     eax,edx
c00145bb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145c1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00145c8:	e8 02 fb ff ff       	call   c00140cf <cpuidCheckEDX(unsigned int)>
c00145cd:	83 e0 01             	and    eax,0x1
c00145d0:	c1 e0 06             	shl    eax,0x6
c00145d3:	88 c2                	mov    dl,al
c00145d5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00145db:	83 e0 bf             	and    eax,0xffffffbf
c00145de:	09 d0                	or     eax,edx
c00145e0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00145e6:	58                   	pop    eax
c00145e7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00145eb:	56                   	push   esi
c00145ec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00145f0:	55                   	push   ebp
c00145f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00145f5:	50                   	push   eax
c00145f6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00145fa:	52                   	push   edx
c00145fb:	6a 00                	push   0x0
c00145fd:	e8 4a fa ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014602:	83 c4 1c             	add    esp,0x1c
c0014605:	6a 04                	push   0x4
c0014607:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001460b:	50                   	push   eax
c001460c:	57                   	push   edi
c001460d:	e8 c0 bf fe ff       	call   c00005d2 <memcpy>
c0014612:	83 c4 0c             	add    esp,0xc
c0014615:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001461b:	6a 04                	push   0x4
c001461d:	56                   	push   esi
c001461e:	50                   	push   eax
c001461f:	e8 ae bf fe ff       	call   c00005d2 <memcpy>
c0014624:	83 c4 0c             	add    esp,0xc
c0014627:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001462d:	6a 04                	push   0x4
c001462f:	55                   	push   ebp
c0014630:	50                   	push   eax
c0014631:	e8 9c bf fe ff       	call   c00005d2 <memcpy>
c0014636:	58                   	pop    eax
c0014637:	5a                   	pop    edx
c0014638:	68 91 1e 02 c0       	push   0xc0021e91
c001463d:	57                   	push   edi
c001463e:	e8 b5 c0 fe ff       	call   c00006f8 <strcmp>
c0014643:	83 c4 10             	add    esp,0x10
c0014646:	85 c0                	test   eax,eax
c0014648:	75 0f                	jne    c0014659 <CPU::detectFeatures()+0x1b5>
c001464a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014654:	e9 22 02 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014659:	50                   	push   eax
c001465a:	50                   	push   eax
c001465b:	68 9e 1e 02 c0       	push   0xc0021e9e
c0014660:	57                   	push   edi
c0014661:	e8 92 c0 fe ff       	call   c00006f8 <strcmp>
c0014666:	83 c4 10             	add    esp,0x10
c0014669:	85 c0                	test   eax,eax
c001466b:	74 dd                	je     c001464a <CPU::detectFeatures()+0x1a6>
c001466d:	51                   	push   ecx
c001466e:	51                   	push   ecx
c001466f:	68 ab 1e 02 c0       	push   0xc0021eab
c0014674:	57                   	push   edi
c0014675:	e8 7e c0 fe ff       	call   c00006f8 <strcmp>
c001467a:	83 c4 10             	add    esp,0x10
c001467d:	85 c0                	test   eax,eax
c001467f:	74 2a                	je     c00146ab <CPU::detectFeatures()+0x207>
c0014681:	52                   	push   edx
c0014682:	52                   	push   edx
c0014683:	68 b8 1e 02 c0       	push   0xc0021eb8
c0014688:	57                   	push   edi
c0014689:	e8 6a c0 fe ff       	call   c00006f8 <strcmp>
c001468e:	83 c4 10             	add    esp,0x10
c0014691:	85 c0                	test   eax,eax
c0014693:	74 16                	je     c00146ab <CPU::detectFeatures()+0x207>
c0014695:	50                   	push   eax
c0014696:	50                   	push   eax
c0014697:	68 c5 1e 02 c0       	push   0xc0021ec5
c001469c:	57                   	push   edi
c001469d:	e8 56 c0 fe ff       	call   c00006f8 <strcmp>
c00146a2:	83 c4 10             	add    esp,0x10
c00146a5:	85 c0                	test   eax,eax
c00146a7:	74 48                	je     c00146f1 <CPU::detectFeatures()+0x24d>
c00146a9:	eb 0f                	jmp    c00146ba <CPU::detectFeatures()+0x216>
c00146ab:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00146b5:	e9 c1 01 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c00146ba:	50                   	push   eax
c00146bb:	50                   	push   eax
c00146bc:	68 d2 1e 02 c0       	push   0xc0021ed2
c00146c1:	57                   	push   edi
c00146c2:	e8 31 c0 fe ff       	call   c00006f8 <strcmp>
c00146c7:	83 c4 10             	add    esp,0x10
c00146ca:	85 c0                	test   eax,eax
c00146cc:	74 23                	je     c00146f1 <CPU::detectFeatures()+0x24d>
c00146ce:	50                   	push   eax
c00146cf:	50                   	push   eax
c00146d0:	68 df 1e 02 c0       	push   0xc0021edf
c00146d5:	57                   	push   edi
c00146d6:	e8 1d c0 fe ff       	call   c00006f8 <strcmp>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	85 c0                	test   eax,eax
c00146e0:	75 1e                	jne    c0014700 <CPU::detectFeatures()+0x25c>
c00146e2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00146ec:	e9 8a 01 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c00146f1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00146fb:	e9 7b 01 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014700:	50                   	push   eax
c0014701:	50                   	push   eax
c0014702:	68 ec 1e 02 c0       	push   0xc0021eec
c0014707:	57                   	push   edi
c0014708:	e8 eb bf fe ff       	call   c00006f8 <strcmp>
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	85 c0                	test   eax,eax
c0014712:	75 0f                	jne    c0014723 <CPU::detectFeatures()+0x27f>
c0014714:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001471e:	e9 58 01 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014723:	50                   	push   eax
c0014724:	50                   	push   eax
c0014725:	68 ab 1e 02 c0       	push   0xc0021eab
c001472a:	57                   	push   edi
c001472b:	e8 c8 bf fe ff       	call   c00006f8 <strcmp>
c0014730:	83 c4 10             	add    esp,0x10
c0014733:	85 c0                	test   eax,eax
c0014735:	75 0f                	jne    c0014746 <CPU::detectFeatures()+0x2a2>
c0014737:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014741:	e9 35 01 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014746:	50                   	push   eax
c0014747:	50                   	push   eax
c0014748:	68 f9 1e 02 c0       	push   0xc0021ef9
c001474d:	57                   	push   edi
c001474e:	e8 a5 bf fe ff       	call   c00006f8 <strcmp>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	85 c0                	test   eax,eax
c0014758:	75 0f                	jne    c0014769 <CPU::detectFeatures()+0x2c5>
c001475a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014764:	e9 12 01 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014769:	51                   	push   ecx
c001476a:	51                   	push   ecx
c001476b:	68 06 1f 02 c0       	push   0xc0021f06
c0014770:	57                   	push   edi
c0014771:	e8 82 bf fe ff       	call   c00006f8 <strcmp>
c0014776:	83 c4 10             	add    esp,0x10
c0014779:	85 c0                	test   eax,eax
c001477b:	75 0f                	jne    c001478c <CPU::detectFeatures()+0x2e8>
c001477d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014787:	e9 ef 00 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c001478c:	52                   	push   edx
c001478d:	52                   	push   edx
c001478e:	68 13 1f 02 c0       	push   0xc0021f13
c0014793:	57                   	push   edi
c0014794:	e8 5f bf fe ff       	call   c00006f8 <strcmp>
c0014799:	83 c4 10             	add    esp,0x10
c001479c:	85 c0                	test   eax,eax
c001479e:	75 0f                	jne    c00147af <CPU::detectFeatures()+0x30b>
c00147a0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00147aa:	e9 cc 00 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c00147af:	50                   	push   eax
c00147b0:	50                   	push   eax
c00147b1:	68 20 1f 02 c0       	push   0xc0021f20
c00147b6:	57                   	push   edi
c00147b7:	e8 3c bf fe ff       	call   c00006f8 <strcmp>
c00147bc:	83 c4 10             	add    esp,0x10
c00147bf:	85 c0                	test   eax,eax
c00147c1:	75 0f                	jne    c00147d2 <CPU::detectFeatures()+0x32e>
c00147c3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00147cd:	e9 a9 00 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c00147d2:	50                   	push   eax
c00147d3:	50                   	push   eax
c00147d4:	68 2d 1f 02 c0       	push   0xc0021f2d
c00147d9:	57                   	push   edi
c00147da:	e8 19 bf fe ff       	call   c00006f8 <strcmp>
c00147df:	83 c4 10             	add    esp,0x10
c00147e2:	85 c0                	test   eax,eax
c00147e4:	75 0f                	jne    c00147f5 <CPU::detectFeatures()+0x351>
c00147e6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00147f0:	e9 86 00 00 00       	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c00147f5:	50                   	push   eax
c00147f6:	50                   	push   eax
c00147f7:	68 3a 1f 02 c0       	push   0xc0021f3a
c00147fc:	57                   	push   edi
c00147fd:	e8 f6 be fe ff       	call   c00006f8 <strcmp>
c0014802:	83 c4 10             	add    esp,0x10
c0014805:	85 c0                	test   eax,eax
c0014807:	75 0c                	jne    c0014815 <CPU::detectFeatures()+0x371>
c0014809:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014813:	eb 66                	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014815:	50                   	push   eax
c0014816:	50                   	push   eax
c0014817:	68 47 1f 02 c0       	push   0xc0021f47
c001481c:	57                   	push   edi
c001481d:	e8 d6 be fe ff       	call   c00006f8 <strcmp>
c0014822:	83 c4 10             	add    esp,0x10
c0014825:	85 c0                	test   eax,eax
c0014827:	75 0c                	jne    c0014835 <CPU::detectFeatures()+0x391>
c0014829:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014833:	eb 46                	jmp    c001487b <CPU::detectFeatures()+0x3d7>
c0014835:	50                   	push   eax
c0014836:	50                   	push   eax
c0014837:	68 54 1f 02 c0       	push   0xc0021f54
c001483c:	57                   	push   edi
c001483d:	e8 b6 be fe ff       	call   c00006f8 <strcmp>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	85 c0                	test   eax,eax
c0014847:	74 e0                	je     c0014829 <CPU::detectFeatures()+0x385>
c0014849:	50                   	push   eax
c001484a:	50                   	push   eax
c001484b:	68 61 1f 02 c0       	push   0xc0021f61
c0014850:	57                   	push   edi
c0014851:	e8 a2 be fe ff       	call   c00006f8 <strcmp>
c0014856:	83 c4 10             	add    esp,0x10
c0014859:	85 c0                	test   eax,eax
c001485b:	74 cc                	je     c0014829 <CPU::detectFeatures()+0x385>
c001485d:	51                   	push   ecx
c001485e:	51                   	push   ecx
c001485f:	68 6e 1f 02 c0       	push   0xc0021f6e
c0014864:	57                   	push   edi
c0014865:	e8 8e be fe ff       	call   c00006f8 <strcmp>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	85 c0                	test   eax,eax
c001486f:	74 b8                	je     c0014829 <CPU::detectFeatures()+0x385>
c0014871:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001487b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014880:	0f 86 be 00 00 00    	jbe    c0014944 <CPU::detectFeatures()+0x4a0>
c0014886:	83 ec 0c             	sub    esp,0xc
c0014889:	68 80 00 00 00       	push   0x80
c001488e:	e8 96 f8 ff ff       	call   c0014129 <cpuidCheckExtendedEBX(unsigned int)>
c0014893:	83 e0 01             	and    eax,0x1
c0014896:	c1 e0 06             	shl    eax,0x6
c0014899:	88 c2                	mov    dl,al
c001489b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00148a1:	83 e0 bf             	and    eax,0xffffffbf
c00148a4:	09 d0                	or     eax,edx
c00148a6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00148ac:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00148b3:	e8 71 f8 ff ff       	call   c0014129 <cpuidCheckExtendedEBX(unsigned int)>
c00148b8:	83 e0 01             	and    eax,0x1
c00148bb:	c1 e0 04             	shl    eax,0x4
c00148be:	88 c2                	mov    dl,al
c00148c0:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00148c6:	83 e0 ef             	and    eax,0xffffffef
c00148c9:	09 d0                	or     eax,edx
c00148cb:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00148d1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00148d8:	e8 4c f8 ff ff       	call   c0014129 <cpuidCheckExtendedEBX(unsigned int)>
c00148dd:	c1 e0 07             	shl    eax,0x7
c00148e0:	88 c2                	mov    dl,al
c00148e2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00148e8:	83 e0 7f             	and    eax,0x7f
c00148eb:	09 d0                	or     eax,edx
c00148ed:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00148f3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00148fa:	e8 57 f8 ff ff       	call   c0014156 <cpuidCheckExtendedECX(unsigned int)>
c00148ff:	83 e0 01             	and    eax,0x1
c0014902:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014909:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001490f:	83 e0 f7             	and    eax,0xfffffff7
c0014912:	09 d0                	or     eax,edx
c0014914:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001491a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014921:	e8 30 f8 ff ff       	call   c0014156 <cpuidCheckExtendedECX(unsigned int)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	83 e0 01             	and    eax,0x1
c001492c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014933:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014939:	83 e0 fb             	and    eax,0xfffffffb
c001493c:	09 d0                	or     eax,edx
c001493e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014944:	83 ec 0c             	sub    esp,0xc
c0014947:	56                   	push   esi
c0014948:	55                   	push   ebp
c0014949:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001494d:	57                   	push   edi
c001494e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014952:	50                   	push   eax
c0014953:	6a 01                	push   0x1
c0014955:	e8 f2 f6 ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001495a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001495e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014964:	88 c1                	mov    cl,al
c0014966:	83 e2 f0             	and    edx,0xfffffff0
c0014969:	83 e1 0f             	and    ecx,0xf
c001496c:	09 ca                	or     edx,ecx
c001496e:	88 c1                	mov    cl,al
c0014970:	c0 e9 04             	shr    cl,0x4
c0014973:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014979:	0f b6 d1             	movzx  edx,cl
c001497c:	c1 e2 06             	shl    edx,0x6
c001497f:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0014983:	89 d5                	mov    ebp,edx
c0014985:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001498b:	66 81 e2 3f c0       	and    dx,0xc03f
c0014990:	83 c4 20             	add    esp,0x20
c0014993:	09 ea                	or     edx,ebp
c0014995:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001499c:	89 c2                	mov    edx,eax
c001499e:	c1 ea 08             	shr    edx,0x8
c00149a1:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00149a7:	83 e2 0f             	and    edx,0xf
c00149aa:	83 e1 3f             	and    ecx,0x3f
c00149ad:	89 d5                	mov    ebp,edx
c00149af:	c1 e5 06             	shl    ebp,0x6
c00149b2:	09 cd                	or     ebp,ecx
c00149b4:	89 e9                	mov    ecx,ebp
c00149b6:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00149bc:	88 d1                	mov    cl,dl
c00149be:	c0 e9 02             	shr    cl,0x2
c00149c1:	89 cd                	mov    ebp,ecx
c00149c3:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00149c9:	83 e1 c0             	and    ecx,0xffffffc0
c00149cc:	09 cd                	or     ebp,ecx
c00149ce:	89 e9                	mov    ecx,ebp
c00149d0:	89 c5                	mov    ebp,eax
c00149d2:	c1 ed 0c             	shr    ebp,0xc
c00149d5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00149db:	83 e5 03             	and    ebp,0x3
c00149de:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00149e4:	c1 e5 04             	shl    ebp,0x4
c00149e7:	83 e1 cf             	and    ecx,0xffffffcf
c00149ea:	09 cd                	or     ebp,ecx
c00149ec:	80 fa 06             	cmp    dl,0x6
c00149ef:	89 e9                	mov    ecx,ebp
c00149f1:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00149f7:	74 05                	je     c00149fe <CPU::detectFeatures()+0x55a>
c00149f9:	80 fa 0f             	cmp    dl,0xf
c00149fc:	75 5d                	jne    c0014a5b <CPU::detectFeatures()+0x5b7>
c00149fe:	89 c5                	mov    ebp,eax
c0014a00:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014a04:	c1 ed 10             	shr    ebp,0x10
c0014a07:	c1 e5 04             	shl    ebp,0x4
c0014a0a:	09 e9                	or     ecx,ebp
c0014a0c:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014a12:	0f b6 c9             	movzx  ecx,cl
c0014a15:	c1 e1 06             	shl    ecx,0x6
c0014a18:	66 81 e5 3f c0       	and    bp,0xc03f
c0014a1d:	09 e9                	or     ecx,ebp
c0014a1f:	80 fa 0f             	cmp    dl,0xf
c0014a22:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0014a29:	75 30                	jne    c0014a5b <CPU::detectFeatures()+0x5b7>
c0014a2b:	c1 e8 14             	shr    eax,0x14
c0014a2e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014a34:	83 c0 0f             	add    eax,0xf
c0014a37:	83 e2 3f             	and    edx,0x3f
c0014a3a:	88 c1                	mov    cl,al
c0014a3c:	c1 e1 06             	shl    ecx,0x6
c0014a3f:	c0 e8 02             	shr    al,0x2
c0014a42:	09 ca                	or     edx,ecx
c0014a44:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014a4a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014a50:	83 e2 c0             	and    edx,0xffffffc0
c0014a53:	09 d0                	or     eax,edx
c0014a55:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0014a5b:	83 ec 0c             	sub    esp,0xc
c0014a5e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014a65:	56                   	push   esi
c0014a66:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014a6a:	50                   	push   eax
c0014a6b:	57                   	push   edi
c0014a6c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014a70:	55                   	push   ebp
c0014a71:	68 00 00 00 80       	push   0x80000000
c0014a76:	e8 d1 f5 ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014a7b:	83 c4 20             	add    esp,0x20
c0014a7e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014a86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014a8a:	76 1e                	jbe    c0014aaa <CPU::detectFeatures()+0x606>
c0014a8c:	83 ec 0c             	sub    esp,0xc
c0014a8f:	56                   	push   esi
c0014a90:	50                   	push   eax
c0014a91:	57                   	push   edi
c0014a92:	55                   	push   ebp
c0014a93:	68 01 00 00 80       	push   0x80000001
c0014a98:	e8 af f5 ff ff       	call   c001404c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014a9d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014aa7:	83 c4 20             	add    esp,0x20
c0014aaa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014ab0:	83 f8 01             	cmp    eax,0x1
c0014ab3:	75 6f                	jne    c0014b24 <CPU::detectFeatures()+0x680>
c0014ab5:	51                   	push   ecx
c0014ab6:	51                   	push   ecx
c0014ab7:	68 7a 1f 02 c0       	push   0xc0021f7a
c0014abc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014ac0:	56                   	push   esi
c0014ac1:	e8 e1 bb fe ff       	call   c00006a7 <strcpy>
c0014ac6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014acc:	5f                   	pop    edi
c0014acd:	66 c1 e8 06          	shr    ax,0x6
c0014ad1:	5d                   	pop    ebp
c0014ad2:	0f b6 c0             	movzx  eax,al
c0014ad5:	50                   	push   eax
c0014ad6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014adc:	c1 e8 0e             	shr    eax,0xe
c0014adf:	0f b6 c0             	movzx  eax,al
c0014ae2:	50                   	push   eax
c0014ae3:	e8 04 f2 ff ff       	call   c0013cec <lookupIntelCPUName(unsigned char, unsigned char)>
c0014ae8:	5a                   	pop    edx
c0014ae9:	59                   	pop    ecx
c0014aea:	50                   	push   eax
c0014aeb:	56                   	push   esi
c0014aec:	e8 6d bc fe ff       	call   c000075e <strcat>
c0014af1:	5f                   	pop    edi
c0014af2:	5d                   	pop    ebp
c0014af3:	56                   	push   esi
c0014af4:	53                   	push   ebx
c0014af5:	e8 30 bc ff ff       	call   c001072a <Device::setName(char const*)>
c0014afa:	58                   	pop    eax
c0014afb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014b01:	5a                   	pop    edx
c0014b02:	68 81 1f 02 c0       	push   0xc0021f81
c0014b07:	50                   	push   eax
c0014b08:	e8 eb bb fe ff       	call   c00006f8 <strcmp>
c0014b0d:	83 c4 10             	add    esp,0x10
c0014b10:	85 c0                	test   eax,eax
c0014b12:	0f 85 53 03 00 00    	jne    c0014e6b <CPU::detectFeatures()+0x9c7>
c0014b18:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014b1f:	e9 47 03 00 00       	jmp    c0014e6b <CPU::detectFeatures()+0x9c7>
c0014b24:	83 f8 02             	cmp    eax,0x2
c0014b27:	0f 85 b5 00 00 00    	jne    c0014be2 <CPU::detectFeatures()+0x73e>
c0014b2d:	57                   	push   edi
c0014b2e:	57                   	push   edi
c0014b2f:	68 93 1f 02 c0       	push   0xc0021f93
c0014b34:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014b38:	56                   	push   esi
c0014b39:	e8 69 bb fe ff       	call   c00006a7 <strcpy>
c0014b3e:	5d                   	pop    ebp
c0014b3f:	58                   	pop    eax
c0014b40:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014b46:	66 c1 e8 06          	shr    ax,0x6
c0014b4a:	0f b6 c0             	movzx  eax,al
c0014b4d:	50                   	push   eax
c0014b4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014b54:	c1 e8 0e             	shr    eax,0xe
c0014b57:	0f b6 c0             	movzx  eax,al
c0014b5a:	50                   	push   eax
c0014b5b:	e8 e7 ef ff ff       	call   c0013b47 <lookupAMDCPUName(unsigned char, unsigned char)>
c0014b60:	5a                   	pop    edx
c0014b61:	59                   	pop    ecx
c0014b62:	50                   	push   eax
c0014b63:	56                   	push   esi
c0014b64:	e8 f5 bb fe ff       	call   c000075e <strcat>
c0014b69:	5f                   	pop    edi
c0014b6a:	5d                   	pop    ebp
c0014b6b:	56                   	push   esi
c0014b6c:	53                   	push   ebx
c0014b6d:	e8 b8 bb ff ff       	call   c001072a <Device::setName(char const*)>
c0014b72:	58                   	pop    eax
c0014b73:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014b79:	5a                   	pop    edx
c0014b7a:	68 98 1f 02 c0       	push   0xc0021f98
c0014b7f:	50                   	push   eax
c0014b80:	e8 73 bb fe ff       	call   c00006f8 <strcmp>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	85 c0                	test   eax,eax
c0014b8a:	75 20                	jne    c0014bac <CPU::detectFeatures()+0x708>
c0014b8c:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c0014b92:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014b98:	a8 01                	test   al,0x1
c0014b9a:	74 10                	je     c0014bac <CPU::detectFeatures()+0x708>
c0014b9c:	83 e0 fe             	and    eax,0xfffffffe
c0014b9f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014ba5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014bac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014bb2:	c1 e8 0e             	shr    eax,0xe
c0014bb5:	3c 05                	cmp    al,0x5
c0014bb7:	0f 85 ae 02 00 00    	jne    c0014e6b <CPU::detectFeatures()+0x9c7>
c0014bbd:	56                   	push   esi
c0014bbe:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014bc4:	83 e0 0f             	and    eax,0xf
c0014bc7:	50                   	push   eax
c0014bc8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014bce:	66 c1 e8 06          	shr    ax,0x6
c0014bd2:	0f b6 c0             	movzx  eax,al
c0014bd5:	50                   	push   eax
c0014bd6:	6a 05                	push   0x5
c0014bd8:	e8 fc f3 ff ff       	call   c0013fd9 <AMD_K6_writeback(int, int, int)>
c0014bdd:	e9 ff 01 00 00       	jmp    c0014de1 <CPU::detectFeatures()+0x93d>
c0014be2:	89 c1                	mov    ecx,eax
c0014be4:	83 e1 fd             	and    ecx,0xfffffffd
c0014be7:	83 f9 04             	cmp    ecx,0x4
c0014bea:	74 09                	je     c0014bf5 <CPU::detectFeatures()+0x751>
c0014bec:	83 f8 03             	cmp    eax,0x3
c0014bef:	0f 85 6f 01 00 00    	jne    c0014d64 <CPU::detectFeatures()+0x8c0>
c0014bf5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014bfb:	c1 ea 0e             	shr    edx,0xe
c0014bfe:	80 fa 05             	cmp    dl,0x5
c0014c01:	75 62                	jne    c0014c65 <CPU::detectFeatures()+0x7c1>
c0014c03:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014c09:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014c0e:	66 81 fa 00 01       	cmp    dx,0x100
c0014c13:	75 0c                	jne    c0014c21 <CPU::detectFeatures()+0x77d>
c0014c15:	51                   	push   ecx
c0014c16:	51                   	push   ecx
c0014c17:	68 9f 1f 02 c0       	push   0xc0021f9f
c0014c1c:	e9 ba 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014c21:	66 81 fa 00 02       	cmp    dx,0x200
c0014c26:	75 0c                	jne    c0014c34 <CPU::detectFeatures()+0x790>
c0014c28:	52                   	push   edx
c0014c29:	52                   	push   edx
c0014c2a:	68 b2 1f 02 c0       	push   0xc0021fb2
c0014c2f:	e9 a7 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014c34:	66 81 fa 40 02       	cmp    dx,0x240
c0014c39:	75 0c                	jne    c0014c47 <CPU::detectFeatures()+0x7a3>
c0014c3b:	50                   	push   eax
c0014c3c:	50                   	push   eax
c0014c3d:	68 c4 1f 02 c0       	push   0xc0021fc4
c0014c42:	e9 94 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014c47:	83 f8 06             	cmp    eax,0x6
c0014c4a:	0f 84 ee 00 00 00    	je     c0014d3e <CPU::detectFeatures()+0x89a>
c0014c50:	83 f9 04             	cmp    ecx,0x4
c0014c53:	0f 84 f6 00 00 00    	je     c0014d4f <CPU::detectFeatures()+0x8ab>
c0014c59:	50                   	push   eax
c0014c5a:	50                   	push   eax
c0014c5b:	68 ea 1f 02 c0       	push   0xc0021fea
c0014c60:	e9 76 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014c65:	80 fa 06             	cmp    dl,0x6
c0014c68:	0f 85 cb 00 00 00    	jne    c0014d39 <CPU::detectFeatures()+0x895>
c0014c6e:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014c74:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014c79:	66 81 fa 80 01       	cmp    dx,0x180
c0014c7e:	75 0c                	jne    c0014c8c <CPU::detectFeatures()+0x7e8>
c0014c80:	50                   	push   eax
c0014c81:	50                   	push   eax
c0014c82:	68 f5 1f 02 c0       	push   0xc0021ff5
c0014c87:	e9 4f 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014c8c:	66 81 fa c0 01       	cmp    dx,0x1c0
c0014c91:	74 07                	je     c0014c9a <CPU::detectFeatures()+0x7f6>
c0014c93:	66 81 fa 00 02       	cmp    dx,0x200
c0014c98:	75 0c                	jne    c0014ca6 <CPU::detectFeatures()+0x802>
c0014c9a:	50                   	push   eax
c0014c9b:	50                   	push   eax
c0014c9c:	68 05 20 02 c0       	push   0xc0022005
c0014ca1:	e9 35 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014ca6:	66 81 fa 40 02       	cmp    dx,0x240
c0014cab:	75 0c                	jne    c0014cb9 <CPU::detectFeatures()+0x815>
c0014cad:	50                   	push   eax
c0014cae:	50                   	push   eax
c0014caf:	68 0c 20 02 c0       	push   0xc002200c
c0014cb4:	e9 22 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014cb9:	66 81 fa 80 02       	cmp    dx,0x280
c0014cbe:	74 07                	je     c0014cc7 <CPU::detectFeatures()+0x823>
c0014cc0:	66 81 fa 40 03       	cmp    dx,0x340
c0014cc5:	75 0c                	jne    c0014cd3 <CPU::detectFeatures()+0x82f>
c0014cc7:	50                   	push   eax
c0014cc8:	50                   	push   eax
c0014cc9:	68 15 20 02 c0       	push   0xc0022015
c0014cce:	e9 08 01 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014cd3:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014cd8:	75 0c                	jne    c0014ce6 <CPU::detectFeatures()+0x842>
c0014cda:	55                   	push   ebp
c0014cdb:	55                   	push   ebp
c0014cdc:	68 1c 20 02 c0       	push   0xc002201c
c0014ce1:	e9 f5 00 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014ce6:	83 f8 06             	cmp    eax,0x6
c0014ce9:	74 53                	je     c0014d3e <CPU::detectFeatures()+0x89a>
c0014ceb:	83 f9 04             	cmp    ecx,0x4
c0014cee:	74 5f                	je     c0014d4f <CPU::detectFeatures()+0x8ab>
c0014cf0:	57                   	push   edi
c0014cf1:	57                   	push   edi
c0014cf2:	68 25 20 02 c0       	push   0xc0022025
c0014cf7:	53                   	push   ebx
c0014cf8:	e8 2d ba ff ff       	call   c001072a <Device::setName(char const*)>
c0014cfd:	b1 c1                	mov    cl,0xc1
c0014cff:	88 c8                	mov    al,cl
c0014d01:	e6 22                	out    0x22,al
c0014d03:	e4 23                	in     al,0x23
c0014d05:	88 c2                	mov    dl,al
c0014d07:	88 c8                	mov    al,cl
c0014d09:	e6 22                	out    0x22,al
c0014d0b:	88 d0                	mov    al,dl
c0014d0d:	83 c8 10             	or     eax,0x10
c0014d10:	e6 23                	out    0x23,al
c0014d12:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014d19:	89 d0                	mov    eax,edx
c0014d1b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014d1e:	40                   	inc    eax
c0014d1f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014d25:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014d29:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014d2f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014d34:	e9 a8 00 00 00       	jmp    c0014de1 <CPU::detectFeatures()+0x93d>
c0014d39:	83 f8 06             	cmp    eax,0x6
c0014d3c:	75 0c                	jne    c0014d4a <CPU::detectFeatures()+0x8a6>
c0014d3e:	56                   	push   esi
c0014d3f:	56                   	push   esi
c0014d40:	68 d6 1f 02 c0       	push   0xc0021fd6
c0014d45:	e9 91 00 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d4a:	83 f9 04             	cmp    ecx,0x4
c0014d4d:	75 0c                	jne    c0014d5b <CPU::detectFeatures()+0x8b7>
c0014d4f:	51                   	push   ecx
c0014d50:	51                   	push   ecx
c0014d51:	68 e2 1f 02 c0       	push   0xc0021fe2
c0014d56:	e9 80 00 00 00       	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d5b:	52                   	push   edx
c0014d5c:	52                   	push   edx
c0014d5d:	68 30 20 02 c0       	push   0xc0022030
c0014d62:	eb 77                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d64:	83 f8 07             	cmp    eax,0x7
c0014d67:	75 09                	jne    c0014d72 <CPU::detectFeatures()+0x8ce>
c0014d69:	50                   	push   eax
c0014d6a:	50                   	push   eax
c0014d6b:	68 3a 20 02 c0       	push   0xc002203a
c0014d70:	eb 69                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d72:	83 f8 0a             	cmp    eax,0xa
c0014d75:	75 09                	jne    c0014d80 <CPU::detectFeatures()+0x8dc>
c0014d77:	50                   	push   eax
c0014d78:	50                   	push   eax
c0014d79:	68 45 20 02 c0       	push   0xc0022045
c0014d7e:	eb 5b                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d80:	83 f8 0b             	cmp    eax,0xb
c0014d83:	75 09                	jne    c0014d8e <CPU::detectFeatures()+0x8ea>
c0014d85:	50                   	push   eax
c0014d86:	50                   	push   eax
c0014d87:	68 4d 20 02 c0       	push   0xc002204d
c0014d8c:	eb 4d                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d8e:	83 f8 08             	cmp    eax,0x8
c0014d91:	75 09                	jne    c0014d9c <CPU::detectFeatures()+0x8f8>
c0014d93:	50                   	push   eax
c0014d94:	50                   	push   eax
c0014d95:	68 56 20 02 c0       	push   0xc0022056
c0014d9a:	eb 3f                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014d9c:	83 f8 09             	cmp    eax,0x9
c0014d9f:	75 09                	jne    c0014daa <CPU::detectFeatures()+0x906>
c0014da1:	50                   	push   eax
c0014da2:	50                   	push   eax
c0014da3:	68 5e 20 02 c0       	push   0xc002205e
c0014da8:	eb 31                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014daa:	83 f8 05             	cmp    eax,0x5
c0014dad:	75 09                	jne    c0014db8 <CPU::detectFeatures()+0x914>
c0014daf:	50                   	push   eax
c0014db0:	50                   	push   eax
c0014db1:	68 66 20 02 c0       	push   0xc0022066
c0014db6:	eb 23                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014db8:	83 f8 0c             	cmp    eax,0xc
c0014dbb:	75 09                	jne    c0014dc6 <CPU::detectFeatures()+0x922>
c0014dbd:	55                   	push   ebp
c0014dbe:	55                   	push   ebp
c0014dbf:	68 74 20 02 c0       	push   0xc0022074
c0014dc4:	eb 15                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014dc6:	83 f8 0d             	cmp    eax,0xd
c0014dc9:	75 09                	jne    c0014dd4 <CPU::detectFeatures()+0x930>
c0014dcb:	57                   	push   edi
c0014dcc:	57                   	push   edi
c0014dcd:	68 7f 20 02 c0       	push   0xc002207f
c0014dd2:	eb 07                	jmp    c0014ddb <CPU::detectFeatures()+0x937>
c0014dd4:	56                   	push   esi
c0014dd5:	56                   	push   esi
c0014dd6:	68 93 20 02 c0       	push   0xc0022093
c0014ddb:	53                   	push   ebx
c0014ddc:	e8 49 b9 ff ff       	call   c001072a <Device::setName(char const*)>
c0014de1:	83 c4 10             	add    esp,0x10
c0014de4:	e9 82 00 00 00       	jmp    c0014e6b <CPU::detectFeatures()+0x9c7>
c0014de9:	51                   	push   ecx
c0014dea:	51                   	push   ecx
c0014deb:	68 df 1e 02 c0       	push   0xc0021edf
c0014df0:	57                   	push   edi
c0014df1:	e8 b1 b8 fe ff       	call   c00006a7 <strcpy>
c0014df6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e00:	e8 7a b3 fe ff       	call   c000017f <is486>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	85 c0                	test   eax,eax
c0014e0a:	74 2d                	je     c0014e39 <CPU::detectFeatures()+0x995>
c0014e0c:	52                   	push   edx
c0014e0d:	52                   	push   edx
c0014e0e:	68 9f 20 02 c0       	push   0xc002209f
c0014e13:	53                   	push   ebx
c0014e14:	e8 11 b9 ff ff       	call   c001072a <Device::setName(char const*)>
c0014e19:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014e20:	e8 e3 a5 00 00       	call   c001f408 <CPU::readCR0()>
c0014e25:	83 c4 10             	add    esp,0x10
c0014e28:	83 e0 14             	and    eax,0x14
c0014e2b:	83 f8 04             	cmp    eax,0x4
c0014e2e:	75 1f                	jne    c0014e4f <CPU::detectFeatures()+0x9ab>
c0014e30:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014e37:	eb 32                	jmp    c0014e6b <CPU::detectFeatures()+0x9c7>
c0014e39:	50                   	push   eax
c0014e3a:	50                   	push   eax
c0014e3b:	68 aa 20 02 c0       	push   0xc00220aa
c0014e40:	53                   	push   ebx
c0014e41:	e8 e4 b8 ff ff       	call   c001072a <Device::setName(char const*)>
c0014e46:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014e4d:	eb d1                	jmp    c0014e20 <CPU::detectFeatures()+0x97c>
c0014e4f:	e8 06 b3 fe ff       	call   c000015a <hasLegacyFPU>
c0014e54:	83 e0 01             	and    eax,0x1
c0014e57:	8d 14 00             	lea    edx,[eax+eax*1]
c0014e5a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014e60:	83 e0 fd             	and    eax,0xfffffffd
c0014e63:	09 d0                	or     eax,edx
c0014e65:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014e6b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014e72:	83 c4 4c             	add    esp,0x4c
c0014e75:	5b                   	pop    ebx
c0014e76:	5e                   	pop    esi
c0014e77:	5f                   	pop    edi
c0014e78:	5d                   	pop    ebp
c0014e79:	c3                   	ret    

c0014e7a <CPU::setupSMEP()>:
c0014e7a:	83 ec 0c             	sub    esp,0xc
c0014e7d:	e8 50 a8 00 00       	call   c001f6d2 <CPU::readCR4()>
c0014e82:	0d 00 00 10 00       	or     eax,0x100000
c0014e87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e8b:	83 c4 0c             	add    esp,0xc
c0014e8e:	e9 5a a8 00 00       	jmp    c001f6ed <CPU::writeCR4(unsigned long)>
c0014e93:	90                   	nop

c0014e94 <CPU::setupUMIP()>:
c0014e94:	83 ec 0c             	sub    esp,0xc
c0014e97:	e8 36 a8 00 00       	call   c001f6d2 <CPU::readCR4()>
c0014e9c:	80 cc 08             	or     ah,0x8
c0014e9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ea3:	83 c4 0c             	add    esp,0xc
c0014ea6:	e9 42 a8 00 00       	jmp    c001f6ed <CPU::writeCR4(unsigned long)>
c0014eab:	90                   	nop

c0014eac <CPU::setupTSC()>:
c0014eac:	83 ec 0c             	sub    esp,0xc
c0014eaf:	e8 1e a8 00 00       	call   c001f6d2 <CPU::readCR4()>
c0014eb4:	83 c8 04             	or     eax,0x4
c0014eb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ebb:	83 c4 0c             	add    esp,0xc
c0014ebe:	e9 2a a8 00 00       	jmp    c001f6ed <CPU::writeCR4(unsigned long)>
c0014ec3:	90                   	nop

c0014ec4 <CPU::setupLargePages()>:
c0014ec4:	83 ec 0c             	sub    esp,0xc
c0014ec7:	e8 06 a8 00 00       	call   c001f6d2 <CPU::readCR4()>
c0014ecc:	83 c8 10             	or     eax,0x10
c0014ecf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ed3:	83 c4 0c             	add    esp,0xc
c0014ed6:	e9 12 a8 00 00       	jmp    c001f6ed <CPU::writeCR4(unsigned long)>
c0014edb:	90                   	nop

c0014edc <CPU::setupPAT()>:
c0014edc:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014ee1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014ee8:	74 2c                	je     c0014f16 <CPU::setupPAT()+0x3a>
c0014eea:	53                   	push   ebx
c0014eeb:	83 ec 10             	sub    esp,0x10
c0014eee:	68 77 02 00 00       	push   0x277
c0014ef3:	50                   	push   eax
c0014ef4:	e8 a5 65 ff ff       	call   c000b49e <Computer::rdmsr(unsigned int)>
c0014ef9:	83 e2 f8             	and    edx,0xfffffff8
c0014efc:	83 ca 01             	or     edx,0x1
c0014eff:	52                   	push   edx
c0014f00:	50                   	push   eax
c0014f01:	68 77 02 00 00       	push   0x277
c0014f06:	ff 35 08 40 02 c0    	push   DWORD PTR ds:0xc0024008
c0014f0c:	e8 b9 65 ff ff       	call   c000b4ca <Computer::wrmsr(unsigned int, unsigned long long)>
c0014f11:	83 c4 28             	add    esp,0x28
c0014f14:	5b                   	pop    ebx
c0014f15:	c3                   	ret    
c0014f16:	c3                   	ret    
c0014f17:	90                   	nop

c0014f18 <CPU::setupMTRR()>:
c0014f18:	c3                   	ret    
c0014f19:	90                   	nop

c0014f1a <CPU::setupGlobalPages()>:
c0014f1a:	83 ec 0c             	sub    esp,0xc
c0014f1d:	e8 b0 a7 00 00       	call   c001f6d2 <CPU::readCR4()>
c0014f22:	0c 80                	or     al,0x80
c0014f24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f28:	83 c4 0c             	add    esp,0xc
c0014f2b:	e9 bd a7 00 00       	jmp    c001f6ed <CPU::writeCR4(unsigned long)>

c0014f30 <CPU::allowUsermodeDataAccess()>:
c0014f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f34:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014f3b:	74 03                	je     c0014f40 <CPU::allowUsermodeDataAccess()+0x10>
c0014f3d:	0f 01 cb             	stac   
c0014f40:	c3                   	ret    
c0014f41:	90                   	nop

c0014f42 <CPU::prohibitUsermodeDataAccess()>:
c0014f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f46:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014f4d:	74 03                	je     c0014f52 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014f4f:	0f 01 ca             	clac   
c0014f52:	c3                   	ret    
c0014f53:	90                   	nop

c0014f54 <CPU::setupSMAP()>:
c0014f54:	53                   	push   ebx
c0014f55:	83 ec 08             	sub    esp,0x8
c0014f58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f5c:	e8 71 a7 00 00       	call   c001f6d2 <CPU::readCR4()>
c0014f61:	83 ec 0c             	sub    esp,0xc
c0014f64:	0d 00 00 20 00       	or     eax,0x200000
c0014f69:	50                   	push   eax
c0014f6a:	e8 7e a7 00 00       	call   c001f6ed <CPU::writeCR4(unsigned long)>
c0014f6f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014f73:	83 c4 18             	add    esp,0x18
c0014f76:	5b                   	pop    ebx
c0014f77:	eb c9                	jmp    c0014f42 <CPU::prohibitUsermodeDataAccess()>
c0014f79:	90                   	nop

c0014f7a <CPU::setupFeatures()>:
c0014f7a:	53                   	push   ebx
c0014f7b:	83 ec 08             	sub    esp,0x8
c0014f7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f82:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014f89:	74 0c                	je     c0014f97 <CPU::setupFeatures()+0x1d>
c0014f8b:	83 ec 0c             	sub    esp,0xc
c0014f8e:	53                   	push   ebx
c0014f8f:	e8 e6 fe ff ff       	call   c0014e7a <CPU::setupSMEP()>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014f9e:	74 0c                	je     c0014fac <CPU::setupFeatures()+0x32>
c0014fa0:	83 ec 0c             	sub    esp,0xc
c0014fa3:	53                   	push   ebx
c0014fa4:	e8 ab ff ff ff       	call   c0014f54 <CPU::setupSMAP()>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014fb3:	74 0c                	je     c0014fc1 <CPU::setupFeatures()+0x47>
c0014fb5:	83 ec 0c             	sub    esp,0xc
c0014fb8:	53                   	push   ebx
c0014fb9:	e8 d6 fe ff ff       	call   c0014e94 <CPU::setupUMIP()>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014fc8:	74 0c                	je     c0014fd6 <CPU::setupFeatures()+0x5c>
c0014fca:	83 ec 0c             	sub    esp,0xc
c0014fcd:	53                   	push   ebx
c0014fce:	e8 d9 fe ff ff       	call   c0014eac <CPU::setupTSC()>
c0014fd3:	83 c4 10             	add    esp,0x10
c0014fd6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014fdd:	74 0c                	je     c0014feb <CPU::setupFeatures()+0x71>
c0014fdf:	83 ec 0c             	sub    esp,0xc
c0014fe2:	53                   	push   ebx
c0014fe3:	e8 dc fe ff ff       	call   c0014ec4 <CPU::setupLargePages()>
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014ff2:	74 0c                	je     c0015000 <CPU::setupFeatures()+0x86>
c0014ff4:	83 ec 0c             	sub    esp,0xc
c0014ff7:	53                   	push   ebx
c0014ff8:	e8 1d ff ff ff       	call   c0014f1a <CPU::setupGlobalPages()>
c0014ffd:	83 c4 10             	add    esp,0x10
c0015000:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015007:	74 0d                	je     c0015016 <CPU::setupFeatures()+0x9c>
c0015009:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001500d:	83 c4 08             	add    esp,0x8
c0015010:	5b                   	pop    ebx
c0015011:	e9 c6 fe ff ff       	jmp    c0014edc <CPU::setupPAT()>
c0015016:	83 c4 08             	add    esp,0x8
c0015019:	5b                   	pop    ebx
c001501a:	c3                   	ret    
c001501b:	90                   	nop

c001501c <CPU::open(int, int, void*)>:
c001501c:	57                   	push   edi
c001501d:	56                   	push   esi
c001501e:	53                   	push   ebx
c001501f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015023:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015027:	83 ec 0c             	sub    esp,0xc
c001502a:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015030:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015036:	50                   	push   eax
c0015037:	e8 52 67 ff ff       	call   c000b78e <GDT::setup()>
c001503c:	83 c4 0c             	add    esp,0xc
c001503f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015045:	6a 00                	push   0x0
c0015047:	68 ef be ad de       	push   0xdeadbeef
c001504c:	57                   	push   edi
c001504d:	e8 d2 89 ff ff       	call   c000da24 <TSS::setup(unsigned long, unsigned long)>
c0015052:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015055:	e8 aa 89 ff ff       	call   c000da04 <TSS::flush()>
c001505a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0015060:	89 04 24             	mov    DWORD PTR [esp],eax
c0015063:	e8 80 69 ff ff       	call   c000b9e8 <IDT::setup()>
c0015068:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c001506f:	e8 70 a6 00 00       	call   c001f6e4 <CPU::writeDR7(unsigned long)>
c0015074:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001507e:	e8 54 74 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c0015083:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015089:	89 30                	mov    DWORD PTR [eax],esi
c001508b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015091:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015094:	58                   	pop    eax
c0015095:	5a                   	pop    edx
c0015096:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001509c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150a0:	e8 13 9a ff ff       	call   c000eab8 <VAS::setCPUSpecific(unsigned long)>
c00150a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150a8:	e8 f7 f3 ff ff       	call   c00144a4 <CPU::detectFeatures()>
c00150ad:	e8 cc c4 ff ff       	call   c001157e <setupInterruptController()>
c00150b2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00150b8:	a1 20 40 02 c0       	mov    eax,ds:0xc0024020
c00150bd:	83 e0 10             	and    eax,0x10
c00150c0:	83 f8 01             	cmp    eax,0x1
c00150c3:	19 c0                	sbb    eax,eax
c00150c5:	83 e0 46             	and    eax,0x46
c00150c8:	83 c0 1e             	add    eax,0x1e
c00150cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00150ce:	e8 a7 d6 ff ff       	call   c001277a <setupTimer(int)>
c00150d3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00150d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150dc:	e8 99 fe ff ff       	call   c0014f7a <CPU::setupFeatures()>
c00150e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150e4:	e8 3f f1 ff ff       	call   c0014228 <CPU::displayFeatures()>
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	5b                   	pop    ebx
c00150ed:	31 c0                	xor    eax,eax
c00150ef:	5e                   	pop    esi
c00150f0:	5f                   	pop    edi
c00150f1:	c3                   	ret    

c00150f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00150f2:	56                   	push   esi
c00150f3:	53                   	push   ebx
c00150f4:	51                   	push   ecx
c00150f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00150f9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00150fd:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015100:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015103:	88 c1                	mov    cl,al
c0015105:	c0 e9 06             	shr    cl,0x6
c0015108:	88 0c 24             	mov    BYTE PTR [esp],cl
c001510b:	88 c1                	mov    cl,al
c001510d:	66 c1 e8 03          	shr    ax,0x3
c0015111:	83 e1 07             	and    ecx,0x7
c0015114:	83 e0 07             	and    eax,0x7
c0015117:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001511b:	88 06                	mov    BYTE PTR [esi],al
c001511d:	74 7f                	je     c001519e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001511f:	80 f9 04             	cmp    cl,0x4
c0015122:	74 7a                	je     c001519e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015124:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015128:	75 05                	jne    c001512f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c001512a:	80 f9 05             	cmp    cl,0x5
c001512d:	74 6f                	je     c001519e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001512f:	84 c9                	test   cl,cl
c0015131:	75 05                	jne    c0015138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015133:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015136:	eb 3c                	jmp    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015138:	80 f9 01             	cmp    cl,0x1
c001513b:	75 05                	jne    c0015142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001513d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015140:	eb 32                	jmp    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015142:	80 f9 02             	cmp    cl,0x2
c0015145:	75 05                	jne    c001514c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015147:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001514a:	eb 28                	jmp    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001514c:	31 c0                	xor    eax,eax
c001514e:	80 f9 03             	cmp    cl,0x3
c0015151:	75 05                	jne    c0015158 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c0015153:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015156:	eb 1c                	jmp    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015158:	80 f9 05             	cmp    cl,0x5
c001515b:	75 05                	jne    c0015162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c001515d:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c0015160:	eb 12                	jmp    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015162:	80 f9 06             	cmp    cl,0x6
c0015165:	75 05                	jne    c001516c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c0015167:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001516a:	eb 08                	jmp    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001516c:	80 f9 07             	cmp    cl,0x7
c001516f:	75 03                	jne    c0015174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015171:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0015174:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015178:	75 10                	jne    c001518a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c001517a:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001517e:	b9 03 00 00 00       	mov    ecx,0x3
c0015183:	01 d0                	add    eax,edx
c0015185:	e9 42 01 00 00       	jmp    c00152cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001518a:	b9 02 00 00 00       	mov    ecx,0x2
c001518f:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c0015193:	0f 85 33 01 00 00    	jne    c00152cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015199:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001519c:	eb 18                	jmp    c00151b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c001519e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00151a2:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00151a7:	80 f9 05             	cmp    cl,0x5
c00151aa:	0f 94 c0             	sete   al
c00151ad:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00151b1:	74 0d                	je     c00151c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00151b3:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00151b6:	b9 06 00 00 00       	mov    ecx,0x6
c00151bb:	e9 0c 01 00 00       	jmp    c00152cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00151c0:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c00151c4:	0f 84 06 01 00 00    	je     c00152d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c00151ca:	80 f9 04             	cmp    cl,0x4
c00151cd:	0f 85 06 01 00 00    	jne    c00152d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00151d3:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c00151d6:	89 c6                	mov    esi,eax
c00151d8:	88 c1                	mov    cl,al
c00151da:	66 c1 ee 03          	shr    si,0x3
c00151de:	c0 e9 06             	shr    cl,0x6
c00151e1:	83 e6 07             	and    esi,0x7
c00151e4:	24 07                	and    al,0x7
c00151e6:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c00151ea:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00151ee:	89 f1                	mov    ecx,esi
c00151f0:	75 05                	jne    c00151f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c00151f2:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c00151f5:	eb 4b                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00151f7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00151fc:	75 05                	jne    c0015203 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c00151fe:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015201:	eb 3f                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015203:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015208:	75 05                	jne    c001520f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001520a:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001520d:	eb 33                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001520f:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015214:	75 05                	jne    c001521b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015216:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015219:	eb 27                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001521b:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015220:	75 05                	jne    c0015227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015222:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015225:	eb 1b                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015227:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001522c:	75 05                	jne    c0015233 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001522e:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015231:	eb 0f                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015233:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015238:	75 05                	jne    c001523f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c001523a:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001523d:	eb 03                	jmp    c0015242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001523f:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015242:	84 c9                	test   cl,cl
c0015244:	75 05                	jne    c001524b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015246:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015249:	eb 3c                	jmp    c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001524b:	80 f9 01             	cmp    cl,0x1
c001524e:	75 05                	jne    c0015255 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0015250:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015253:	eb 32                	jmp    c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015255:	80 f9 02             	cmp    cl,0x2
c0015258:	75 05                	jne    c001525f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001525a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001525d:	eb 28                	jmp    c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001525f:	80 f9 03             	cmp    cl,0x3
c0015262:	75 05                	jne    c0015269 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c0015264:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015267:	eb 1e                	jmp    c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015269:	31 c0                	xor    eax,eax
c001526b:	80 f9 04             	cmp    cl,0x4
c001526e:	74 17                	je     c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015270:	80 f9 05             	cmp    cl,0x5
c0015273:	75 05                	jne    c001527a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015275:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c0015278:	eb 0d                	jmp    c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001527a:	80 f9 06             	cmp    cl,0x6
c001527d:	75 05                	jne    c0015284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c001527f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0015282:	eb 03                	jmp    c0015287 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015284:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0015287:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001528c:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c0015290:	0f 94 c2             	sete   dl
c0015293:	d3 e0                	shl    eax,cl
c0015295:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c0015299:	74 07                	je     c00152a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c001529b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001529e:	31 d2                	xor    edx,edx
c00152a0:	eb 23                	jmp    c00152c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00152a2:	01 f0                	add    eax,esi
c00152a4:	b9 03 00 00 00       	mov    ecx,0x3
c00152a9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00152ad:	74 33                	je     c00152e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00152af:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00152b3:	75 0d                	jne    c00152c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00152b5:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00152b9:	01 c8                	add    eax,ecx
c00152bb:	b9 04 00 00 00       	mov    ecx,0x4
c00152c0:	eb 20                	jmp    c00152e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00152c2:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00152c5:	b9 07 00 00 00       	mov    ecx,0x7
c00152ca:	eb 16                	jmp    c00152e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00152cc:	31 d2                	xor    edx,edx
c00152ce:	eb 12                	jmp    c00152e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00152d0:	b9 02 00 00 00       	mov    ecx,0x2
c00152d5:	b2 01                	mov    dl,0x1
c00152d7:	eb 07                	jmp    c00152e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c00152d9:	31 d2                	xor    edx,edx
c00152db:	b9 02 00 00 00       	mov    ecx,0x2
c00152e0:	31 c0                	xor    eax,eax
c00152e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152e6:	89 0b                	mov    DWORD PTR [ebx],ecx
c00152e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00152ec:	88 11                	mov    BYTE PTR [ecx],dl
c00152ee:	5a                   	pop    edx
c00152ef:	5b                   	pop    ebx
c00152f0:	5e                   	pop    esi
c00152f1:	c3                   	ret    

c00152f2 <Krnl::panic(char const*)>:
c00152f2:	55                   	push   ebp
c00152f3:	89 e5                	mov    ebp,esp
c00152f5:	53                   	push   ebx
c00152f6:	51                   	push   ecx
c00152f7:	a1 50 4a 02 c0       	mov    eax,ds:0xc0024a50
c00152fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00152ff:	85 c0                	test   eax,eax
c0015301:	74 02                	je     c0015305 <Krnl::panic(char const*)+0x13>
c0015303:	ff d0                	call   eax
c0015305:	fa                   	cli    
c0015306:	50                   	push   eax
c0015307:	c6 05 54 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a54,0x1
c001530e:	50                   	push   eax
c001530f:	c6 05 40 34 02 c0 00 	mov    BYTE PTR ds:0xc0023440,0x0
c0015316:	53                   	push   ebx
c0015317:	68 e4 20 02 c0       	push   0xc00220e4
c001531c:	e8 12 9e ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0015321:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015326:	5a                   	pop    edx
c0015327:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001532d:	51                   	push   ecx
c001532e:	e8 30 7f ff ff       	call   c000d263 <setActiveTerminal(VgaText*)>
c0015333:	83 c4 0c             	add    esp,0xc
c0015336:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001533b:	6a 01                	push   0x1
c001533d:	6a 0f                	push   0xf
c001533f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015345:	50                   	push   eax
c0015346:	e8 57 79 ff ff       	call   c000cca2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001534b:	58                   	pop    eax
c001534c:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015351:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015357:	50                   	push   eax
c0015358:	e8 a9 81 ff ff       	call   c000d506 <VgaText::clearScreen()>
c001535d:	58                   	pop    eax
c001535e:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015363:	5a                   	pop    edx
c0015364:	68 fd 20 02 c0       	push   0xc00220fd
c0015369:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001536f:	51                   	push   ecx
c0015370:	e8 0f 83 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015375:	58                   	pop    eax
c0015376:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001537b:	5a                   	pop    edx
c001537c:	68 9c 21 02 c0       	push   0xc002219c
c0015381:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015387:	51                   	push   ecx
c0015388:	e8 f7 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001538d:	58                   	pop    eax
c001538e:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015393:	5a                   	pop    edx
c0015394:	68 19 21 02 c0       	push   0xc0022119
c0015399:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001539f:	51                   	push   ecx
c00153a0:	e8 df 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00153a5:	58                   	pop    eax
c00153a6:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00153ab:	5a                   	pop    edx
c00153ac:	53                   	push   ebx
c00153ad:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00153b3:	51                   	push   ecx
c00153b4:	e8 cb 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00153b9:	5b                   	pop    ebx
c00153ba:	58                   	pop    eax
c00153bb:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00153c0:	68 39 21 02 c0       	push   0xc0022139
c00153c5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00153cb:	50                   	push   eax
c00153cc:	e8 b3 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00153d1:	58                   	pop    eax
c00153d2:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00153d7:	5a                   	pop    edx
c00153d8:	68 d8 21 02 c0       	push   0xc00221d8
c00153dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00153e3:	51                   	push   ecx
c00153e4:	e8 9b 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00153e9:	5b                   	pop    ebx
c00153ea:	58                   	pop    eax
c00153eb:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00153f0:	68 19 21 02 c0       	push   0xc0022119
c00153f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00153fb:	50                   	push   eax
c00153fc:	e8 83 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015401:	58                   	pop    eax
c0015402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015407:	5a                   	pop    edx
c0015408:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001540b:	83 c0 0c             	add    eax,0xc
c001540e:	50                   	push   eax
c001540f:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015414:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001541a:	51                   	push   ecx
c001541b:	e8 64 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015420:	5b                   	pop    ebx
c0015421:	58                   	pop    eax
c0015422:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015427:	68 38 21 02 c0       	push   0xc0022138
c001542c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015432:	50                   	push   eax
c0015433:	e8 4c 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015438:	58                   	pop    eax
c0015439:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001543e:	5a                   	pop    edx
c001543f:	68 04 22 02 c0       	push   0xc0022204
c0015444:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001544a:	51                   	push   ecx
c001544b:	e8 34 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015450:	5b                   	pop    ebx
c0015451:	58                   	pop    eax
c0015452:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015457:	68 44 22 02 c0       	push   0xc0022244
c001545c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015462:	50                   	push   eax
c0015463:	e8 1c 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015468:	58                   	pop    eax
c0015469:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001546e:	5a                   	pop    edx
c001546f:	68 24 21 02 c0       	push   0xc0022124
c0015474:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001547a:	51                   	push   ecx
c001547b:	e8 04 82 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015480:	5b                   	pop    ebx
c0015481:	58                   	pop    eax
c0015482:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015485:	50                   	push   eax
c0015486:	68 3c 21 02 c0       	push   0xc002213c
c001548b:	e8 a3 9c ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0015490:	58                   	pop    eax
c0015491:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015494:	5a                   	pop    edx
c0015495:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015498:	51                   	push   ecx
c0015499:	68 45 21 02 c0       	push   0xc0022145
c001549e:	e8 90 9c ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00154a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00154a6:	5b                   	pop    ebx
c00154a7:	5a                   	pop    edx
c00154a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154aa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00154ad:	51                   	push   ecx
c00154ae:	68 bd 17 02 c0       	push   0xc00217bd
c00154b3:	e8 7b 9c ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00154b8:	5b                   	pop    ebx
c00154b9:	58                   	pop    eax
c00154ba:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00154bf:	68 88 22 02 c0       	push   0xc0022288
c00154c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154ca:	50                   	push   eax
c00154cb:	e8 b4 81 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00154d0:	58                   	pop    eax
c00154d1:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00154d6:	5a                   	pop    edx
c00154d7:	68 4e 21 02 c0       	push   0xc002214e
c00154dc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00154e2:	51                   	push   ecx
c00154e3:	e8 9c 81 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00154e8:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00154ed:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00154f3:	e8 10 9f 00 00       	call   c001f408 <CPU::readCR0()>
c00154f8:	5a                   	pop    edx
c00154f9:	59                   	pop    ecx
c00154fa:	50                   	push   eax
c00154fb:	53                   	push   ebx
c00154fc:	e8 a9 81 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0015501:	5b                   	pop    ebx
c0015502:	58                   	pop    eax
c0015503:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015508:	68 58 21 02 c0       	push   0xc0022158
c001550d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015513:	50                   	push   eax
c0015514:	e8 6b 81 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c0015519:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001551e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015524:	e8 cd a1 00 00       	call   c001f6f6 <CPU::readCR2()>
c0015529:	5a                   	pop    edx
c001552a:	59                   	pop    ecx
c001552b:	50                   	push   eax
c001552c:	53                   	push   ebx
c001552d:	e8 78 81 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0015532:	5b                   	pop    ebx
c0015533:	58                   	pop    eax
c0015534:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015539:	68 62 21 02 c0       	push   0xc0022162
c001553e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015544:	50                   	push   eax
c0015545:	e8 3a 81 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001554a:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001554f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015555:	e8 3b 9b 00 00       	call   c001f095 <CPU::readCR3()>
c001555a:	5a                   	pop    edx
c001555b:	59                   	pop    ecx
c001555c:	50                   	push   eax
c001555d:	53                   	push   ebx
c001555e:	e8 47 81 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0015563:	5b                   	pop    ebx
c0015564:	58                   	pop    eax
c0015565:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001556a:	68 75 21 02 c0       	push   0xc0022175
c001556f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015575:	50                   	push   eax
c0015576:	e8 09 81 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001557b:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015580:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015586:	e8 47 a1 00 00       	call   c001f6d2 <CPU::readCR4()>
c001558b:	5a                   	pop    edx
c001558c:	59                   	pop    ecx
c001558d:	50                   	push   eax
c001558e:	53                   	push   ebx
c001558f:	e8 16 81 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0015594:	5b                   	pop    ebx
c0015595:	58                   	pop    eax
c0015596:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c001559b:	68 7f 21 02 c0       	push   0xc002217f
c00155a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00155a6:	50                   	push   eax
c00155a7:	e8 d8 80 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00155ac:	5a                   	pop    edx
c00155ad:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00155b2:	59                   	pop    ecx
c00155b3:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c00155b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00155bc:	53                   	push   ebx
c00155bd:	50                   	push   eax
c00155be:	e8 e7 80 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00155c3:	58                   	pop    eax
c00155c4:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00155c9:	5a                   	pop    edx
c00155ca:	68 96 21 02 c0       	push   0xc0022196
c00155cf:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155d5:	51                   	push   ecx
c00155d6:	e8 a9 80 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c00155db:	5b                   	pop    ebx
c00155dc:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00155e1:	5a                   	pop    edx
c00155e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00155e5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00155eb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00155ee:	51                   	push   ecx
c00155ef:	50                   	push   eax
c00155f0:	e8 b5 80 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c00155f5:	5b                   	pop    ebx
c00155f6:	58                   	pop    eax
c00155f7:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c00155fc:	68 96 21 02 c0       	push   0xc0022196
c0015601:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015607:	50                   	push   eax
c0015608:	e8 77 80 ff ff       	call   c000d684 <VgaText::puts(char const*)>
c001560d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015610:	59                   	pop    ecx
c0015611:	a1 54 54 02 c0       	mov    eax,ds:0xc0025454
c0015616:	5b                   	pop    ebx
c0015617:	8b 12                	mov    edx,DWORD PTR [edx]
c0015619:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001561f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015622:	52                   	push   edx
c0015623:	50                   	push   eax
c0015624:	e8 81 80 ff ff       	call   c000d6aa <VgaText::putx(unsigned int)>
c0015629:	83 c4 10             	add    esp,0x10
c001562c:	b2 fe                	mov    dl,0xfe
c001562e:	e4 60                	in     al,0x60
c0015630:	3c 1c                	cmp    al,0x1c
c0015632:	74 04                	je     c0015638 <Krnl::panic(char const*)+0x346>
c0015634:	3c 5a                	cmp    al,0x5a
c0015636:	75 f6                	jne    c001562e <Krnl::panic(char const*)+0x33c>
c0015638:	e4 64                	in     al,0x64
c001563a:	a8 02                	test   al,0x2
c001563c:	75 fa                	jne    c0015638 <Krnl::panic(char const*)+0x346>
c001563e:	88 d0                	mov    al,dl
c0015640:	e6 64                	out    0x64,al
c0015642:	fa                   	cli    
c0015643:	f4                   	hlt    
c0015644:	eb e8                	jmp    c001562e <Krnl::panic(char const*)+0x33c>

c0015646 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015646:	55                   	push   ebp
c0015647:	57                   	push   edi
c0015648:	56                   	push   esi
c0015649:	53                   	push   ebx
c001564a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015650:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015657:	8d 46 01             	lea    eax,[esi+0x1]
c001565a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001565c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015660:	80 fb 40             	cmp    bl,0x40
c0015663:	75 19                	jne    c001567e <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015665:	8a 06                	mov    al,BYTE PTR [esi]
c0015667:	84 c0                	test   al,al
c0015669:	74 07                	je     c0015672 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c001566b:	3c 3a                	cmp    al,0x3a
c001566d:	74 03                	je     c0015672 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c001566f:	46                   	inc    esi
c0015670:	eb f3                	jmp    c0015665 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015672:	84 c0                	test   al,al
c0015674:	0f 84 1f 01 00 00    	je     c0015799 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001567a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001567d:	46                   	inc    esi
c001567e:	50                   	push   eax
c001567f:	6a 40                	push   0x40
c0015681:	6a 00                	push   0x0
c0015683:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015687:	50                   	push   eax
c0015688:	e8 7b af fe ff       	call   c0000608 <memset>
c001568d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015694:	31 d2                	xor    edx,edx
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8a 07                	mov    al,BYTE PTR [edi]
c001569b:	84 c0                	test   al,al
c001569d:	0f 84 f6 00 00 00    	je     c0015799 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00156a3:	81 fa c7 00 00 00    	cmp    edx,0xc7
c00156a9:	0f 8f ea 00 00 00    	jg     c0015799 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00156af:	3c 0a                	cmp    al,0xa
c00156b1:	0f 85 d3 00 00 00    	jne    c001578a <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c00156b7:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c00156bc:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c00156c0:	f6 c1 df             	test   cl,0xdf
c00156c3:	0f 94 c2             	sete   dl
c00156c6:	80 f9 23             	cmp    cl,0x23
c00156c9:	0f 94 c0             	sete   al
c00156cc:	08 c2                	or     dl,al
c00156ce:	75 47                	jne    c0015717 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00156d0:	8d 41 f7             	lea    eax,[ecx-0x9]
c00156d3:	3c 01                	cmp    al,0x1
c00156d5:	76 40                	jbe    c0015717 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00156d7:	80 f9 5b             	cmp    cl,0x5b
c00156da:	75 3f                	jne    c001571b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c00156dc:	80 fb 40             	cmp    bl,0x40
c00156df:	75 36                	jne    c0015717 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00156e1:	83 ec 0c             	sub    esp,0xc
c00156e4:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00156e8:	55                   	push   ebp
c00156e9:	e8 37 af fe ff       	call   c0000625 <strlen>
c00156ee:	83 c4 10             	add    esp,0x10
c00156f1:	83 f8 3f             	cmp    eax,0x3f
c00156f4:	0f 87 9f 00 00 00    	ja     c0015799 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00156fa:	50                   	push   eax
c00156fb:	50                   	push   eax
c00156fc:	55                   	push   ebp
c00156fd:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015701:	55                   	push   ebp
c0015702:	e8 a0 af fe ff       	call   c00006a7 <strcpy>
c0015707:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001570a:	e8 16 af fe ff       	call   c0000625 <strlen>
c001570f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	31 c9                	xor    ecx,ecx
c0015719:	eb 76                	jmp    c0015791 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c001571b:	80 fb 40             	cmp    bl,0x40
c001571e:	74 06                	je     c0015726 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015720:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015724:	eb 19                	jmp    c001573f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015726:	51                   	push   ecx
c0015727:	51                   	push   ecx
c0015728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001572c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015730:	50                   	push   eax
c0015731:	e8 c2 af fe ff       	call   c00006f8 <strcmp>
c0015736:	83 c4 10             	add    esp,0x10
c0015739:	85 c0                	test   eax,eax
c001573b:	75 da                	jne    c0015717 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c001573d:	eb e1                	jmp    c0015720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c001573f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015742:	84 c0                	test   al,al
c0015744:	0f 94 c1             	sete   cl
c0015747:	3c 3d                	cmp    al,0x3d
c0015749:	0f 94 c2             	sete   dl
c001574c:	08 d1                	or     cl,dl
c001574e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015752:	75 03                	jne    c0015757 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015754:	45                   	inc    ebp
c0015755:	eb e8                	jmp    c001573f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015757:	84 c0                	test   al,al
c0015759:	74 3e                	je     c0015799 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001575b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001575f:	52                   	push   edx
c0015760:	52                   	push   edx
c0015761:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015765:	50                   	push   eax
c0015766:	56                   	push   esi
c0015767:	e8 8c af fe ff       	call   c00006f8 <strcmp>
c001576c:	83 c4 10             	add    esp,0x10
c001576f:	85 c0                	test   eax,eax
c0015771:	75 a4                	jne    c0015717 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015773:	50                   	push   eax
c0015774:	8d 55 01             	lea    edx,[ebp+0x1]
c0015777:	50                   	push   eax
c0015778:	52                   	push   edx
c0015779:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015780:	e8 22 af fe ff       	call   c00006a7 <strcpy>
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	eb 14                	jmp    c001579e <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c001578a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001578d:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015791:	47                   	inc    edi
c0015792:	89 ca                	mov    edx,ecx
c0015794:	e9 00 ff ff ff       	jmp    c0015699 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015799:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001579e:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00157a2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00157a8:	5b                   	pop    ebx
c00157a9:	5e                   	pop    esi
c00157aa:	5f                   	pop    edi
c00157ab:	5d                   	pop    ebp
c00157ac:	c3                   	ret    

c00157ad <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00157ad:	57                   	push   edi
c00157ae:	56                   	push   esi
c00157af:	53                   	push   ebx
c00157b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00157b6:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00157bd:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c00157c4:	53                   	push   ebx
c00157c5:	e8 5b ae fe ff       	call   c0000625 <strlen>
c00157ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00157cd:	89 c7                	mov    edi,eax
c00157cf:	e8 51 ae fe ff       	call   c0000625 <strlen>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00157db:	31 ff                	xor    edi,edi
c00157dd:	3d ff 00 00 00       	cmp    eax,0xff
c00157e2:	0f 87 18 01 00 00    	ja     c0015900 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00157e8:	51                   	push   ecx
c00157e9:	51                   	push   ecx
c00157ea:	56                   	push   esi
c00157eb:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00157ef:	56                   	push   esi
c00157f0:	e8 b2 ae fe ff       	call   c00006a7 <strcpy>
c00157f5:	58                   	pop    eax
c00157f6:	5a                   	pop    edx
c00157f7:	68 c0 26 02 c0       	push   0xc00226c0
c00157fc:	56                   	push   esi
c00157fd:	e8 5c af fe ff       	call   c000075e <strcat>
c0015802:	59                   	pop    ecx
c0015803:	58                   	pop    eax
c0015804:	53                   	push   ebx
c0015805:	56                   	push   esi
c0015806:	e8 53 af fe ff       	call   c000075e <strcat>
c001580b:	58                   	pop    eax
c001580c:	5a                   	pop    edx
c001580d:	68 ae 22 02 c0       	push   0xc00222ae
c0015812:	56                   	push   esi
c0015813:	e8 46 af fe ff       	call   c000075e <strcat>
c0015818:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001581f:	e8 da 97 ff ff       	call   c000effe <operator new(unsigned long)>
c0015824:	83 c4 0c             	add    esp,0xc
c0015827:	89 c3                	mov    ebx,eax
c0015829:	ff 35 54 54 02 c0    	push   DWORD PTR ds:0xc0025454
c001582f:	56                   	push   esi
c0015830:	50                   	push   eax
c0015831:	e8 34 9e ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0015836:	59                   	pop    ecx
c0015837:	5e                   	pop    esi
c0015838:	6a 01                	push   0x1
c001583a:	53                   	push   ebx
c001583b:	e8 8e 9e ff ff       	call   c000f6ce <File::open(FileOpenMode)>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	85 c0                	test   eax,eax
c0015845:	74 08                	je     c001584f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015847:	83 ec 0c             	sub    esp,0xc
c001584a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001584c:	53                   	push   ebx
c001584d:	eb 2e                	jmp    c001587d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c001584f:	52                   	push   edx
c0015850:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015854:	50                   	push   eax
c0015855:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015859:	50                   	push   eax
c001585a:	53                   	push   ebx
c001585b:	e8 1a a1 ff ff       	call   c000f97a <File::stat(unsigned long long*, bool*)>
c0015860:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015864:	83 c4 10             	add    esp,0x10
c0015867:	89 c1                	mov    ecx,eax
c0015869:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001586d:	75 13                	jne    c0015882 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c001586f:	83 ec 0c             	sub    esp,0xc
c0015872:	53                   	push   ebx
c0015873:	e8 b4 9e ff ff       	call   c000f72c <File::close()>
c0015878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001587a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001587d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015880:	eb 7b                	jmp    c00158fd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015882:	83 ec 0c             	sub    esp,0xc
c0015885:	50                   	push   eax
c0015886:	e8 76 66 ff ff       	call   c000bf01 <malloc>
c001588b:	89 c6                	mov    esi,eax
c001588d:	58                   	pop    eax
c001588e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015890:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015894:	52                   	push   edx
c0015895:	56                   	push   esi
c0015896:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001589a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001589e:	53                   	push   ebx
c001589f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00158a2:	83 c4 20             	add    esp,0x20
c00158a5:	85 c0                	test   eax,eax
c00158a7:	75 0a                	jne    c00158b3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00158a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158ad:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00158b1:	74 18                	je     c00158cb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00158b3:	83 ec 0c             	sub    esp,0xc
c00158b6:	31 ff                	xor    edi,edi
c00158b8:	53                   	push   ebx
c00158b9:	e8 6e 9e ff ff       	call   c000f72c <File::close()>
c00158be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	eb 35                	jmp    c0015900 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00158cb:	83 ec 0c             	sub    esp,0xc
c00158ce:	53                   	push   ebx
c00158cf:	e8 58 9e ff ff       	call   c000f72c <File::close()>
c00158d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158dc:	83 c4 0c             	add    esp,0xc
c00158df:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00158e6:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00158ed:	56                   	push   esi
c00158ee:	e8 53 fd ff ff       	call   c0015646 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00158f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00158f6:	89 c7                	mov    edi,eax
c00158f8:	e8 14 66 ff ff       	call   c000bf11 <free>
c00158fd:	83 c4 10             	add    esp,0x10
c0015900:	81 c4 10 01 00 00    	add    esp,0x110
c0015906:	89 f8                	mov    eax,edi
c0015908:	5b                   	pop    ebx
c0015909:	5e                   	pop    esi
c001590a:	5f                   	pop    edi
c001590b:	c3                   	ret    

c001590c <Reg::getLine(char*, char*, char*)>:
c001590c:	57                   	push   edi
c001590d:	56                   	push   esi
c001590e:	53                   	push   ebx
c001590f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015917:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001591b:	57                   	push   edi
c001591c:	56                   	push   esi
c001591d:	53                   	push   ebx
c001591e:	68 b3 22 02 c0       	push   0xc00222b3
c0015923:	e8 85 fe ff ff       	call   c00157ad <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015928:	83 c4 10             	add    esp,0x10
c001592b:	84 c0                	test   al,al
c001592d:	75 10                	jne    c001593f <Reg::getLine(char*, char*, char*)+0x33>
c001592f:	57                   	push   edi
c0015930:	56                   	push   esi
c0015931:	53                   	push   ebx
c0015932:	68 d8 22 02 c0       	push   0xc00222d8
c0015937:	e8 71 fe ff ff       	call   c00157ad <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	5b                   	pop    ebx
c0015940:	5e                   	pop    esi
c0015941:	5f                   	pop    edi
c0015942:	c3                   	ret    

c0015943 <Reg::readInt(char*, char*, int*)>:
c0015943:	55                   	push   ebp
c0015944:	57                   	push   edi
c0015945:	56                   	push   esi
c0015946:	53                   	push   ebx
c0015947:	81 ec f0 00 00 00    	sub    esp,0xf0
c001594d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015951:	57                   	push   edi
c0015952:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015959:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015960:	e8 a7 ff ff ff       	call   c001590c <Reg::getLine(char*, char*, char*)>
c0015965:	83 c4 10             	add    esp,0x10
c0015968:	84 c0                	test   al,al
c001596a:	0f 84 b2 00 00 00    	je     c0015a22 <Reg::readInt(char*, char*, int*)+0xdf>
c0015970:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015974:	80 fa 2b             	cmp    dl,0x2b
c0015977:	74 0c                	je     c0015985 <Reg::readInt(char*, char*, int*)+0x42>
c0015979:	80 fa 2d             	cmp    dl,0x2d
c001597c:	75 0e                	jne    c001598c <Reg::readInt(char*, char*, int*)+0x49>
c001597e:	ba 01 00 00 00       	mov    edx,0x1
c0015983:	eb 0b                	jmp    c0015990 <Reg::readInt(char*, char*, int*)+0x4d>
c0015985:	ba 01 00 00 00       	mov    edx,0x1
c001598a:	eb 02                	jmp    c001598e <Reg::readInt(char*, char*, int*)+0x4b>
c001598c:	31 d2                	xor    edx,edx
c001598e:	31 c0                	xor    eax,eax
c0015990:	be 0a 00 00 00       	mov    esi,0xa
c0015995:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001599a:	75 20                	jne    c00159bc <Reg::readInt(char*, char*, int*)+0x79>
c001599c:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00159a0:	80 f9 78             	cmp    cl,0x78
c00159a3:	75 0a                	jne    c00159af <Reg::readInt(char*, char*, int*)+0x6c>
c00159a5:	83 c2 02             	add    edx,0x2
c00159a8:	be 10 00 00 00       	mov    esi,0x10
c00159ad:	eb 0d                	jmp    c00159bc <Reg::readInt(char*, char*, int*)+0x79>
c00159af:	80 f9 62             	cmp    cl,0x62
c00159b2:	75 08                	jne    c00159bc <Reg::readInt(char*, char*, int*)+0x79>
c00159b4:	83 c2 02             	add    edx,0x2
c00159b7:	be 02 00 00 00       	mov    esi,0x2
c00159bc:	01 d7                	add    edi,edx
c00159be:	31 d2                	xor    edx,edx
c00159c0:	8a 1f                	mov    bl,BYTE PTR [edi]
c00159c2:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00159c6:	84 db                	test   bl,bl
c00159c8:	0f 94 c3             	sete   bl
c00159cb:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c00159d0:	0f 94 c1             	sete   cl
c00159d3:	08 cb                	or     bl,cl
c00159d5:	75 3a                	jne    c0015a11 <Reg::readInt(char*, char*, int*)+0xce>
c00159d7:	0f af d6             	imul   edx,esi
c00159da:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00159df:	83 fe 10             	cmp    esi,0x10
c00159e2:	75 26                	jne    c0015a0a <Reg::readInt(char*, char*, int*)+0xc7>
c00159e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00159e8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00159eb:	89 e9                	mov    ecx,ebp
c00159ed:	80 f9 05             	cmp    cl,0x5
c00159f0:	77 06                	ja     c00159f8 <Reg::readInt(char*, char*, int*)+0xb5>
c00159f2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00159f6:	eb 16                	jmp    c0015a0e <Reg::readInt(char*, char*, int*)+0xcb>
c00159f8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00159fc:	83 e9 61             	sub    ecx,0x61
c00159ff:	80 f9 05             	cmp    cl,0x5
c0015a02:	77 06                	ja     c0015a0a <Reg::readInt(char*, char*, int*)+0xc7>
c0015a04:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015a08:	eb 04                	jmp    c0015a0e <Reg::readInt(char*, char*, int*)+0xcb>
c0015a0a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015a0e:	47                   	inc    edi
c0015a0f:	eb af                	jmp    c00159c0 <Reg::readInt(char*, char*, int*)+0x7d>
c0015a11:	84 c0                	test   al,al
c0015a13:	74 02                	je     c0015a17 <Reg::readInt(char*, char*, int*)+0xd4>
c0015a15:	f7 da                	neg    edx
c0015a17:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015a1e:	89 10                	mov    DWORD PTR [eax],edx
c0015a20:	88 d8                	mov    al,bl
c0015a22:	81 c4 ec 00 00 00    	add    esp,0xec
c0015a28:	5b                   	pop    ebx
c0015a29:	5e                   	pop    esi
c0015a2a:	5f                   	pop    edi
c0015a2b:	5d                   	pop    ebp
c0015a2c:	c3                   	ret    

c0015a2d <Reg::readString(char*, char*, char*, int)>:
c0015a2d:	57                   	push   edi
c0015a2e:	56                   	push   esi
c0015a2f:	53                   	push   ebx
c0015a30:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015a36:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015a3a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015a41:	57                   	push   edi
c0015a42:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015a49:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015a50:	e8 b7 fe ff ff       	call   c001590c <Reg::getLine(char*, char*, char*)>
c0015a55:	83 c4 10             	add    esp,0x10
c0015a58:	89 c6                	mov    esi,eax
c0015a5a:	84 c0                	test   al,al
c0015a5c:	74 44                	je     c0015aa2 <Reg::readString(char*, char*, char*, int)+0x75>
c0015a5e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015a65:	31 c0                	xor    eax,eax
c0015a67:	4a                   	dec    edx
c0015a68:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015a6b:	84 c9                	test   cl,cl
c0015a6d:	74 0f                	je     c0015a7e <Reg::readString(char*, char*, char*, int)+0x51>
c0015a6f:	39 c2                	cmp    edx,eax
c0015a71:	7e 0b                	jle    c0015a7e <Reg::readString(char*, char*, char*, int)+0x51>
c0015a73:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015a76:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015a7b:	40                   	inc    eax
c0015a7c:	eb ea                	jmp    c0015a68 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015a7e:	83 ec 0c             	sub    esp,0xc
c0015a81:	53                   	push   ebx
c0015a82:	e8 9e ab fe ff       	call   c0000625 <strlen>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015a8f:	75 11                	jne    c0015aa2 <Reg::readString(char*, char*, char*, int)+0x75>
c0015a91:	83 ec 0c             	sub    esp,0xc
c0015a94:	53                   	push   ebx
c0015a95:	e8 8b ab fe ff       	call   c0000625 <strlen>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015aa2:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015aa8:	89 f0                	mov    eax,esi
c0015aaa:	5b                   	pop    ebx
c0015aab:	5e                   	pop    esi
c0015aac:	5f                   	pop    edi
c0015aad:	c3                   	ret    

c0015aae <Reg::readBool(char*, char*, bool*)>:
c0015aae:	83 ec 20             	sub    esp,0x20
c0015ab1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015ab5:	50                   	push   eax
c0015ab6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015aba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015abe:	e8 80 fe ff ff       	call   c0015943 <Reg::readInt(char*, char*, int*)>
c0015ac3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015ac7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015acc:	0f 95 02             	setne  BYTE PTR [edx]
c0015acf:	83 c4 2c             	add    esp,0x2c
c0015ad2:	c3                   	ret    

c0015ad3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015ad3:	53                   	push   ebx
c0015ad4:	83 ec 1c             	sub    esp,0x1c
c0015ad7:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015adb:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015adf:	50                   	push   eax
c0015ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ae8:	e8 c1 ff ff ff       	call   c0015aae <Reg::readBool(char*, char*, bool*)>
c0015aed:	83 c4 10             	add    esp,0x10
c0015af0:	84 c0                	test   al,al
c0015af2:	74 04                	je     c0015af8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015af4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015af8:	83 c4 18             	add    esp,0x18
c0015afb:	88 d8                	mov    al,bl
c0015afd:	5b                   	pop    ebx
c0015afe:	c3                   	ret    

c0015aff <Reg::readIntWithDefault(char*, char*, int)>:
c0015aff:	53                   	push   ebx
c0015b00:	83 ec 1c             	sub    esp,0x1c
c0015b03:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015b07:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015b0b:	50                   	push   eax
c0015b0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b14:	e8 2a fe ff ff       	call   c0015943 <Reg::readInt(char*, char*, int*)>
c0015b19:	83 c4 10             	add    esp,0x10
c0015b1c:	84 c0                	test   al,al
c0015b1e:	74 04                	je     c0015b24 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015b20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015b24:	83 c4 18             	add    esp,0x18
c0015b27:	89 d8                	mov    eax,ebx
c0015b29:	5b                   	pop    ebx
c0015b2a:	c3                   	ret    

c0015b2b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015b2b:	56                   	push   esi
c0015b2c:	53                   	push   ebx
c0015b2d:	51                   	push   ecx
c0015b2e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015b32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b3a:	56                   	push   esi
c0015b3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b43:	e8 e5 fe ff ff       	call   c0015a2d <Reg::readString(char*, char*, char*, int)>
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	84 c0                	test   al,al
c0015b4d:	74 02                	je     c0015b51 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0015b4f:	89 f3                	mov    ebx,esi
c0015b51:	5a                   	pop    edx
c0015b52:	89 d8                	mov    eax,ebx
c0015b54:	5b                   	pop    ebx
c0015b55:	5e                   	pop    esi
c0015b56:	c3                   	ret    

c0015b57 <Sys::exit(regs*)>:
c0015b57:	83 ec 18             	sub    esp,0x18
c0015b5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b5e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015b61:	e8 c2 31 00 00       	call   c0018d28 <terminateTask(int)>
c0015b66:	83 c8 ff             	or     eax,0xffffffff
c0015b69:	89 c2                	mov    edx,eax
c0015b6b:	83 c4 1c             	add    esp,0x1c
c0015b6e:	c3                   	ret    

c0015b6f <Sys::loadDLL(regs*)>:
c0015b6f:	56                   	push   esi
c0015b70:	31 d2                	xor    edx,edx
c0015b72:	53                   	push   ebx
c0015b73:	b8 01 00 00 00       	mov    eax,0x1
c0015b78:	51                   	push   ecx
c0015b79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b7d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015b81:	74 7d                	je     c0015c00 <Sys::loadDLL(regs*)+0x91>
c0015b83:	83 ec 0c             	sub    esp,0xc
c0015b86:	68 14 01 00 00       	push   0x114
c0015b8b:	e8 6e 94 ff ff       	call   c000effe <operator new(unsigned long)>
c0015b90:	89 c3                	mov    ebx,eax
c0015b92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b97:	83 c4 0c             	add    esp,0xc
c0015b9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b9d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015ba0:	53                   	push   ebx
c0015ba1:	e8 c4 9a ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0015ba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ba9:	e8 8e 9d ff ff       	call   c000f93c <File::exists()>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	84 c0                	test   al,al
c0015bb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bb5:	75 11                	jne    c0015bc8 <Sys::loadDLL(regs*)+0x59>
c0015bb7:	83 ec 0c             	sub    esp,0xc
c0015bba:	53                   	push   ebx
c0015bbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	b8 03 00 00 00       	mov    eax,0x3
c0015bc6:	eb 36                	jmp    c0015bfe <Sys::loadDLL(regs*)+0x8f>
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	53                   	push   ebx
c0015bcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bcf:	58                   	pop    eax
c0015bd0:	5a                   	pop    edx
c0015bd1:	6a 00                	push   0x0
c0015bd3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015bd6:	e8 3a 21 00 00       	call   c0017d15 <Thr::loadDLL(char const*, bool)>
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	89 c1                	mov    ecx,eax
c0015be0:	31 d2                	xor    edx,edx
c0015be2:	b8 04 00 00 00       	mov    eax,0x4
c0015be7:	85 c9                	test   ecx,ecx
c0015be9:	74 15                	je     c0015c00 <Sys::loadDLL(regs*)+0x91>
c0015beb:	53                   	push   ebx
c0015bec:	53                   	push   ebx
c0015bed:	ff 35 08 40 02 c0    	push   DWORD PTR ds:0xc0024008
c0015bf3:	51                   	push   ecx
c0015bf4:	e8 e2 22 00 00       	call   c0017edb <Thr::executeDLL(unsigned long, void*)>
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	31 c0                	xor    eax,eax
c0015bfe:	31 d2                	xor    edx,edx
c0015c00:	59                   	pop    ecx
c0015c01:	5b                   	pop    ebx
c0015c02:	5e                   	pop    esi
c0015c03:	c3                   	ret    

c0015c04 <Sys::read(regs*)>:
c0015c04:	57                   	push   edi
c0015c05:	56                   	push   esi
c0015c06:	53                   	push   ebx
c0015c07:	83 ec 10             	sub    esp,0x10
c0015c0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015c11:	83 f8 02             	cmp    eax,0x2
c0015c14:	77 10                	ja     c0015c26 <Sys::read(regs*)+0x22>
c0015c16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c1e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c24:	eb 0e                	jmp    c0015c34 <Sys::read(regs*)+0x30>
c0015c26:	83 ec 0c             	sub    esp,0xc
c0015c29:	50                   	push   eax
c0015c2a:	e8 60 83 ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	89 c1                	mov    ecx,eax
c0015c34:	83 c8 ff             	or     eax,0xffffffff
c0015c37:	85 c9                	test   ecx,ecx
c0015c39:	89 c2                	mov    edx,eax
c0015c3b:	74 28                	je     c0015c65 <Sys::read(regs*)+0x61>
c0015c3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c45:	83 ec 0c             	sub    esp,0xc
c0015c48:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015c4a:	31 ff                	xor    edi,edi
c0015c4c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015c50:	52                   	push   edx
c0015c51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c54:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015c57:	57                   	push   edi
c0015c58:	56                   	push   esi
c0015c59:	51                   	push   ecx
c0015c5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c61:	83 c4 20             	add    esp,0x20
c0015c64:	99                   	cdq    
c0015c65:	83 c4 10             	add    esp,0x10
c0015c68:	5b                   	pop    ebx
c0015c69:	5e                   	pop    esi
c0015c6a:	5f                   	pop    edi
c0015c6b:	c3                   	ret    

c0015c6c <Sys::sbrk(regs*)>:
c0015c6c:	56                   	push   esi
c0015c6d:	53                   	push   ebx
c0015c6e:	50                   	push   eax
c0015c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c7b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015c7e:	85 db                	test   ebx,ebx
c0015c80:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015c86:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015c89:	74 02                	je     c0015c8d <Sys::sbrk(regs*)+0x21>
c0015c8b:	79 06                	jns    c0015c93 <Sys::sbrk(regs*)+0x27>
c0015c8d:	89 f0                	mov    eax,esi
c0015c8f:	31 d2                	xor    edx,edx
c0015c91:	eb 2a                	jmp    c0015cbd <Sys::sbrk(regs*)+0x51>
c0015c93:	83 c8 ff             	or     eax,0xffffffff
c0015c96:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015c9c:	89 c2                	mov    edx,eax
c0015c9e:	77 1d                	ja     c0015cbd <Sys::sbrk(regs*)+0x51>
c0015ca0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015ca6:	50                   	push   eax
c0015ca7:	c1 ea 0c             	shr    edx,0xc
c0015caa:	68 07 04 00 00       	push   0x407
c0015caf:	52                   	push   edx
c0015cb0:	51                   	push   ecx
c0015cb1:	e8 30 8c ff ff       	call   c000e8e6 <VAS::allocatePages(int, int)>
c0015cb6:	89 f0                	mov    eax,esi
c0015cb8:	31 d2                	xor    edx,edx
c0015cba:	83 c4 10             	add    esp,0x10
c0015cbd:	59                   	pop    ecx
c0015cbe:	5b                   	pop    ebx
c0015cbf:	5e                   	pop    esi
c0015cc0:	c3                   	ret    

c0015cc1 <Sys::write(regs*)>:
c0015cc1:	57                   	push   edi
c0015cc2:	56                   	push   esi
c0015cc3:	53                   	push   ebx
c0015cc4:	83 ec 18             	sub    esp,0x18
c0015cc7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ccb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015cce:	68 f3 22 02 c0       	push   0xc00222f3
c0015cd3:	e8 5b 94 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015cdf:	77 10                	ja     c0015cf1 <Sys::write(regs*)+0x30>
c0015ce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ce9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015cef:	eb 1b                	jmp    c0015d0c <Sys::write(regs*)+0x4b>
c0015cf1:	83 ec 0c             	sub    esp,0xc
c0015cf4:	68 12 23 02 c0       	push   0xc0022312
c0015cf9:	e8 35 94 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0015cfe:	58                   	pop    eax
c0015cff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015d02:	e8 88 82 ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	89 c1                	mov    ecx,eax
c0015d0c:	83 c8 ff             	or     eax,0xffffffff
c0015d0f:	85 c9                	test   ecx,ecx
c0015d11:	89 c2                	mov    edx,eax
c0015d13:	74 28                	je     c0015d3d <Sys::write(regs*)+0x7c>
c0015d15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d1d:	83 ec 0c             	sub    esp,0xc
c0015d20:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015d22:	31 ff                	xor    edi,edi
c0015d24:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015d28:	52                   	push   edx
c0015d29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d2c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d2f:	57                   	push   edi
c0015d30:	56                   	push   esi
c0015d31:	51                   	push   ecx
c0015d32:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015d35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d39:	83 c4 20             	add    esp,0x20
c0015d3c:	99                   	cdq    
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	5b                   	pop    ebx
c0015d41:	5e                   	pop    esi
c0015d42:	5f                   	pop    edi
c0015d43:	c3                   	ret    

c0015d44 <Sys::yield(regs*)>:
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	e8 af 25 00 00       	call   c00182fb <lockScheduler()>
c0015d4c:	e8 f3 28 00 00       	call   c0018644 <schedule()>
c0015d51:	e8 a7 25 00 00       	call   c00182fd <unlockScheduler()>
c0015d56:	31 c0                	xor    eax,eax
c0015d58:	31 d2                	xor    edx,edx
c0015d5a:	83 c4 0c             	add    esp,0xc
c0015d5d:	c3                   	ret    

c0015d5e <sysCallGetPID(regs*)>:
c0015d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d68:	89 c2                	mov    edx,eax
c0015d6a:	c1 fa 1f             	sar    edx,0x1f
c0015d6d:	c3                   	ret    

c0015d6e <sysCallSeekDir(regs*)>:
c0015d6e:	31 c0                	xor    eax,eax
c0015d70:	31 d2                	xor    edx,edx
c0015d72:	c3                   	ret    

c0015d73 <sysCallTellDir(regs*)>:
c0015d73:	31 c0                	xor    eax,eax
c0015d75:	31 d2                	xor    edx,edx
c0015d77:	c3                   	ret    

c0015d78 <sysCallVerify(regs*)>:
c0015d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d7c:	31 d2                	xor    edx,edx
c0015d7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d81:	c3                   	ret    

c0015d82 <sysCallFork(regs*)>:
c0015d82:	83 c8 ff             	or     eax,0xffffffff
c0015d85:	83 ca ff             	or     edx,0xffffffff
c0015d88:	c3                   	ret    

c0015d89 <sysCallExecve(regs*)>:
c0015d89:	83 c8 ff             	or     eax,0xffffffff
c0015d8c:	83 ca ff             	or     edx,0xffffffff
c0015d8f:	c3                   	ret    

c0015d90 <sysCallGetArgc(regs*)>:
c0015d90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d98:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015d9e:	89 c2                	mov    edx,eax
c0015da0:	c1 fa 1f             	sar    edx,0x1f
c0015da3:	c3                   	ret    

c0015da4 <sysFormatDisk(regs*)>:
c0015da4:	56                   	push   esi
c0015da5:	53                   	push   ebx
c0015da6:	50                   	push   eax
c0015da7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dab:	8b 1d 68 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024168
c0015db1:	eb 2a                	jmp    c0015ddd <sysFormatDisk(regs*)+0x39>
c0015db3:	83 ec 0c             	sub    esp,0xc
c0015db6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0015db9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015dbc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015dbe:	51                   	push   ecx
c0015dbf:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0015dc2:	51                   	push   ecx
c0015dc3:	50                   	push   eax
c0015dc4:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c0015dcb:	50                   	push   eax
c0015dcc:	53                   	push   ebx
c0015dcd:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015dd0:	83 c4 20             	add    esp,0x20
c0015dd3:	89 c1                	mov    ecx,eax
c0015dd5:	83 f8 08             	cmp    eax,0x8
c0015dd8:	75 12                	jne    c0015dec <sysFormatDisk(regs*)+0x48>
c0015dda:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ddd:	85 db                	test   ebx,ebx
c0015ddf:	75 d2                	jne    c0015db3 <sysFormatDisk(regs*)+0xf>
c0015de1:	b8 03 00 00 00       	mov    eax,0x3
c0015de6:	31 d2                	xor    edx,edx
c0015de8:	59                   	pop    ecx
c0015de9:	5b                   	pop    ebx
c0015dea:	5e                   	pop    esi
c0015deb:	c3                   	ret    
c0015dec:	85 c0                	test   eax,eax
c0015dee:	74 13                	je     c0015e03 <sysFormatDisk(regs*)+0x5f>
c0015df0:	31 d2                	xor    edx,edx
c0015df2:	b8 01 00 00 00       	mov    eax,0x1
c0015df7:	83 f9 09             	cmp    ecx,0x9
c0015dfa:	74 ec                	je     c0015de8 <sysFormatDisk(regs*)+0x44>
c0015dfc:	b8 02 00 00 00       	mov    eax,0x2
c0015e01:	eb e3                	jmp    c0015de6 <sysFormatDisk(regs*)+0x42>
c0015e03:	31 c0                	xor    eax,eax
c0015e05:	eb df                	jmp    c0015de6 <sysFormatDisk(regs*)+0x42>

c0015e07 <sysSetDiskVolumeLabel(regs*)>:
c0015e07:	56                   	push   esi
c0015e08:	53                   	push   ebx
c0015e09:	53                   	push   ebx
c0015e0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e0e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015e11:	83 f8 19             	cmp    eax,0x19
c0015e14:	77 2d                	ja     c0015e43 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e16:	8b 0c 85 00 46 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdba00]
c0015e1d:	85 c9                	test   ecx,ecx
c0015e1f:	74 22                	je     c0015e43 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e21:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015e24:	85 d2                	test   edx,edx
c0015e26:	74 1b                	je     c0015e43 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e28:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015e2e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015e30:	52                   	push   edx
c0015e31:	50                   	push   eax
c0015e32:	51                   	push   ecx
c0015e33:	53                   	push   ebx
c0015e34:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	89 c2                	mov    edx,eax
c0015e3c:	c1 fa 1f             	sar    edx,0x1f
c0015e3f:	59                   	pop    ecx
c0015e40:	5b                   	pop    ebx
c0015e41:	5e                   	pop    esi
c0015e42:	c3                   	ret    
c0015e43:	59                   	pop    ecx
c0015e44:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e49:	5b                   	pop    ebx
c0015e4a:	83 ca ff             	or     edx,0xffffffff
c0015e4d:	5e                   	pop    esi
c0015e4e:	c3                   	ret    

c0015e4f <sysGetDiskVolumeLabel(regs*)>:
c0015e4f:	57                   	push   edi
c0015e50:	56                   	push   esi
c0015e51:	53                   	push   ebx
c0015e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e56:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015e59:	83 fa 19             	cmp    edx,0x19
c0015e5c:	77 38                	ja     c0015e96 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e5e:	8b 0c 95 00 46 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdba00]
c0015e65:	85 c9                	test   ecx,ecx
c0015e67:	74 2d                	je     c0015e96 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e69:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015e6c:	85 db                	test   ebx,ebx
c0015e6e:	74 26                	je     c0015e96 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e70:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015e73:	85 c0                	test   eax,eax
c0015e75:	74 1f                	je     c0015e96 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e77:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0015e7d:	83 ec 0c             	sub    esp,0xc
c0015e80:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015e82:	50                   	push   eax
c0015e83:	53                   	push   ebx
c0015e84:	52                   	push   edx
c0015e85:	51                   	push   ecx
c0015e86:	56                   	push   esi
c0015e87:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015e8a:	83 c4 20             	add    esp,0x20
c0015e8d:	89 c2                	mov    edx,eax
c0015e8f:	c1 fa 1f             	sar    edx,0x1f
c0015e92:	5b                   	pop    ebx
c0015e93:	5e                   	pop    esi
c0015e94:	5f                   	pop    edi
c0015e95:	c3                   	ret    
c0015e96:	5b                   	pop    ebx
c0015e97:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e9c:	5e                   	pop    esi
c0015e9d:	83 ca ff             	or     edx,0xffffffff
c0015ea0:	5f                   	pop    edi
c0015ea1:	c3                   	ret    

c0015ea2 <sysShutdown(regs*)>:
c0015ea2:	57                   	push   edi
c0015ea3:	56                   	push   esi
c0015ea4:	56                   	push   esi
c0015ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ea9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015eac:	85 c0                	test   eax,eax
c0015eae:	74 18                	je     c0015ec8 <sysShutdown(regs*)+0x26>
c0015eb0:	83 f8 01             	cmp    eax,0x1
c0015eb3:	74 51                	je     c0015f06 <sysShutdown(regs*)+0x64>
c0015eb5:	83 ce ff             	or     esi,0xffffffff
c0015eb8:	83 cf ff             	or     edi,0xffffffff
c0015ebb:	83 f8 02             	cmp    eax,0x2
c0015ebe:	74 2a                	je     c0015eea <sysShutdown(regs*)+0x48>
c0015ec0:	59                   	pop    ecx
c0015ec1:	89 f0                	mov    eax,esi
c0015ec3:	5e                   	pop    esi
c0015ec4:	89 fa                	mov    edx,edi
c0015ec6:	5f                   	pop    edi
c0015ec7:	c3                   	ret    
c0015ec8:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0015ecd:	83 ce ff             	or     esi,0xffffffff
c0015ed0:	83 cf ff             	or     edi,0xffffffff
c0015ed3:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ed5:	6a 00                	push   0x0
c0015ed7:	6a 00                	push   0x0
c0015ed9:	6a 00                	push   0x0
c0015edb:	50                   	push   eax
c0015edc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	89 f0                	mov    eax,esi
c0015ee4:	89 fa                	mov    edx,edi
c0015ee6:	59                   	pop    ecx
c0015ee7:	5e                   	pop    esi
c0015ee8:	5f                   	pop    edi
c0015ee9:	c3                   	ret    
c0015eea:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0015eef:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ef1:	6a 00                	push   0x0
c0015ef3:	6a 00                	push   0x0
c0015ef5:	6a 01                	push   0x1
c0015ef7:	50                   	push   eax
c0015ef8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	89 f0                	mov    eax,esi
c0015f00:	89 fa                	mov    edx,edi
c0015f02:	59                   	pop    ecx
c0015f03:	5e                   	pop    esi
c0015f04:	5f                   	pop    edi
c0015f05:	c3                   	ret    
c0015f06:	a1 80 46 02 c0       	mov    eax,ds:0xc0024680
c0015f0b:	85 c0                	test   eax,eax
c0015f0d:	74 02                	je     c0015f11 <sysShutdown(regs*)+0x6f>
c0015f0f:	ff d0                	call   eax
c0015f11:	31 f6                	xor    esi,esi
c0015f13:	59                   	pop    ecx
c0015f14:	31 ff                	xor    edi,edi
c0015f16:	89 f0                	mov    eax,esi
c0015f18:	5e                   	pop    esi
c0015f19:	89 fa                	mov    edx,edi
c0015f1b:	5f                   	pop    edi
c0015f1c:	c3                   	ret    

c0015f1d <sysCallGetCwd(regs*)>:
c0015f1d:	83 ec 10             	sub    esp,0x10
c0015f20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f24:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015f27:	52                   	push   edx
c0015f28:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015f2b:	51                   	push   ecx
c0015f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f34:	50                   	push   eax
c0015f35:	e8 a1 9a ff ff       	call   c000f9db <getcwd(Process*, char*, int)>
c0015f3a:	89 c2                	mov    edx,eax
c0015f3c:	83 c4 1c             	add    esp,0x1c
c0015f3f:	c1 fa 1f             	sar    edx,0x1f
c0015f42:	c3                   	ret    

c0015f43 <sysCallSetCwd(regs*)>:
c0015f43:	83 ec 14             	sub    esp,0x14
c0015f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f4d:	50                   	push   eax
c0015f4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f53:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0015f56:	52                   	push   edx
c0015f57:	e8 a9 9a ff ff       	call   c000fa05 <setcwd(Process*, char*)>
c0015f5c:	89 c2                	mov    edx,eax
c0015f5e:	83 c4 1c             	add    esp,0x1c
c0015f61:	c1 fa 1f             	sar    edx,0x1f
c0015f64:	c3                   	ret    

c0015f65 <sysCallRealpath(regs*)>:
c0015f65:	53                   	push   ebx
c0015f66:	83 ec 08             	sub    esp,0x8
c0015f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f6d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015f70:	85 c9                	test   ecx,ecx
c0015f72:	74 35                	je     c0015fa9 <sysCallRealpath(regs*)+0x44>
c0015f74:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015f77:	31 d2                	xor    edx,edx
c0015f79:	b8 01 00 00 00       	mov    eax,0x1
c0015f7e:	85 db                	test   ebx,ebx
c0015f80:	75 05                	jne    c0015f87 <sysCallRealpath(regs*)+0x22>
c0015f82:	83 c4 08             	add    esp,0x8
c0015f85:	5b                   	pop    ebx
c0015f86:	c3                   	ret    
c0015f87:	50                   	push   eax
c0015f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f90:	05 0c 01 00 00       	add    eax,0x10c
c0015f95:	50                   	push   eax
c0015f96:	51                   	push   ecx
c0015f97:	53                   	push   ebx
c0015f98:	e8 23 95 ff ff       	call   c000f4c0 <standardiseFiles(char*, char const*, char const*)>
c0015f9d:	83 c4 10             	add    esp,0x10
c0015fa0:	31 c0                	xor    eax,eax
c0015fa2:	31 d2                	xor    edx,edx
c0015fa4:	83 c4 08             	add    esp,0x8
c0015fa7:	5b                   	pop    ebx
c0015fa8:	c3                   	ret    
c0015fa9:	b8 01 00 00 00       	mov    eax,0x1
c0015fae:	31 d2                	xor    edx,edx
c0015fb0:	eb f2                	jmp    c0015fa4 <sysCallRealpath(regs*)+0x3f>

c0015fb2 <sysCallReadDir(regs*)>:
c0015fb2:	53                   	push   ebx
c0015fb3:	83 ec 18             	sub    esp,0x18
c0015fb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015fba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015fbd:	83 f8 02             	cmp    eax,0x2
c0015fc0:	76 56                	jbe    c0016018 <sysCallReadDir(regs*)+0x66>
c0015fc2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015fc5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0015fcb:	77 57                	ja     c0016024 <sysCallReadDir(regs*)+0x72>
c0015fcd:	83 ec 0c             	sub    esp,0xc
c0015fd0:	50                   	push   eax
c0015fd1:	e8 b9 7f ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c0015fd6:	83 c4 10             	add    esp,0x10
c0015fd9:	85 c0                	test   eax,eax
c0015fdb:	74 57                	je     c0016034 <sysCallReadDir(regs*)+0x82>
c0015fdd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015fe5:	83 ec 0c             	sub    esp,0xc
c0015fe8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015fee:	51                   	push   ecx
c0015fef:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0015ff2:	51                   	push   ecx
c0015ff3:	6a 00                	push   0x0
c0015ff5:	68 10 01 00 00       	push   0x110
c0015ffa:	50                   	push   eax
c0015ffb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ffe:	83 c4 20             	add    esp,0x20
c0016001:	89 c1                	mov    ecx,eax
c0016003:	85 c0                	test   eax,eax
c0016005:	74 38                	je     c001603f <sysCallReadDir(regs*)+0x8d>
c0016007:	31 d2                	xor    edx,edx
c0016009:	b8 02 00 00 00       	mov    eax,0x2
c001600e:	83 f9 07             	cmp    ecx,0x7
c0016011:	74 05                	je     c0016018 <sysCallReadDir(regs*)+0x66>
c0016013:	83 c4 18             	add    esp,0x18
c0016016:	5b                   	pop    ebx
c0016017:	c3                   	ret    
c0016018:	b8 01 00 00 00       	mov    eax,0x1
c001601d:	31 d2                	xor    edx,edx
c001601f:	83 c4 18             	add    esp,0x18
c0016022:	5b                   	pop    ebx
c0016023:	c3                   	ret    
c0016024:	53                   	push   ebx
c0016025:	53                   	push   ebx
c0016026:	52                   	push   edx
c0016027:	68 34 23 02 c0       	push   0xc0022334
c001602c:	e8 02 91 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016031:	83 c4 10             	add    esp,0x10
c0016034:	83 c4 18             	add    esp,0x18
c0016037:	83 c8 ff             	or     eax,0xffffffff
c001603a:	83 ca ff             	or     edx,0xffffffff
c001603d:	5b                   	pop    ebx
c001603e:	c3                   	ret    
c001603f:	31 c0                	xor    eax,eax
c0016041:	31 d2                	xor    edx,edx
c0016043:	eb da                	jmp    c001601f <sysCallReadDir(regs*)+0x6d>

c0016045 <sysCallIsATTY(regs*)>:
c0016045:	83 ec 0c             	sub    esp,0xc
c0016048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001604f:	83 f8 02             	cmp    eax,0x2
c0016052:	76 07                	jbe    c001605b <sysCallIsATTY(regs*)+0x16>
c0016054:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016059:	75 28                	jne    c0016083 <sysCallIsATTY(regs*)+0x3e>
c001605b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016060:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016063:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016069:	85 c0                	test   eax,eax
c001606b:	74 26                	je     c0016093 <sysCallIsATTY(regs*)+0x4e>
c001606d:	83 ec 0c             	sub    esp,0xc
c0016070:	8b 10                	mov    edx,DWORD PTR [eax]
c0016072:	50                   	push   eax
c0016073:	ff 12                	call   DWORD PTR [edx]
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	25 ff 00 00 00       	and    eax,0xff
c001607d:	31 d2                	xor    edx,edx
c001607f:	83 c4 0c             	add    esp,0xc
c0016082:	c3                   	ret    
c0016083:	83 ec 0c             	sub    esp,0xc
c0016086:	50                   	push   eax
c0016087:	e8 03 7f ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c001608c:	83 c4 10             	add    esp,0x10
c001608f:	85 c0                	test   eax,eax
c0016091:	75 da                	jne    c001606d <sysCallIsATTY(regs*)+0x28>
c0016093:	83 c8 ff             	or     eax,0xffffffff
c0016096:	83 ca ff             	or     edx,0xffffffff
c0016099:	83 c4 0c             	add    esp,0xc
c001609c:	c3                   	ret    

c001609d <sysCallSeek(regs*)>:
c001609d:	53                   	push   ebx
c001609e:	83 ec 08             	sub    esp,0x8
c00160a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160a8:	83 f8 02             	cmp    eax,0x2
c00160ab:	76 4b                	jbe    c00160f8 <sysCallSeek(regs*)+0x5b>
c00160ad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00160b2:	77 34                	ja     c00160e8 <sysCallSeek(regs*)+0x4b>
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	50                   	push   eax
c00160b8:	e8 d2 7e ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c00160bd:	83 c4 0c             	add    esp,0xc
c00160c0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00160c3:	31 db                	xor    ebx,ebx
c00160c5:	53                   	push   ebx
c00160c6:	51                   	push   ecx
c00160c7:	50                   	push   eax
c00160c8:	e8 bf 96 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c00160cd:	83 c4 10             	add    esp,0x10
c00160d0:	85 c0                	test   eax,eax
c00160d2:	0f 95 c0             	setne  al
c00160d5:	25 ff 00 00 00       	and    eax,0xff
c00160da:	31 d2                	xor    edx,edx
c00160dc:	f7 d8                	neg    eax
c00160de:	83 d2 00             	adc    edx,0x0
c00160e1:	83 c4 08             	add    esp,0x8
c00160e4:	f7 da                	neg    edx
c00160e6:	5b                   	pop    ebx
c00160e7:	c3                   	ret    
c00160e8:	52                   	push   edx
c00160e9:	52                   	push   edx
c00160ea:	50                   	push   eax
c00160eb:	68 f0 23 02 c0       	push   0xc00223f0
c00160f0:	e8 3e 90 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00160f5:	83 c4 10             	add    esp,0x10
c00160f8:	83 c4 08             	add    esp,0x8
c00160fb:	83 c8 ff             	or     eax,0xffffffff
c00160fe:	83 ca ff             	or     edx,0xffffffff
c0016101:	5b                   	pop    ebx
c0016102:	c3                   	ret    

c0016103 <sysCallTell(regs*)>:
c0016103:	53                   	push   ebx
c0016104:	83 ec 08             	sub    esp,0x8
c0016107:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001610b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001610e:	83 f8 02             	cmp    eax,0x2
c0016111:	76 60                	jbe    c0016173 <sysCallTell(regs*)+0x70>
c0016113:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016118:	77 30                	ja     c001614a <sysCallTell(regs*)+0x47>
c001611a:	83 ec 0c             	sub    esp,0xc
c001611d:	50                   	push   eax
c001611e:	e8 6c 7e ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c0016123:	5a                   	pop    edx
c0016124:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016127:	59                   	pop    ecx
c0016128:	53                   	push   ebx
c0016129:	50                   	push   eax
c001612a:	e8 b3 96 ff ff       	call   c000f7e2 <File::tell(unsigned long long*)>
c001612f:	83 c4 10             	add    esp,0x10
c0016132:	85 c0                	test   eax,eax
c0016134:	0f 95 c0             	setne  al
c0016137:	25 ff 00 00 00       	and    eax,0xff
c001613c:	31 d2                	xor    edx,edx
c001613e:	f7 d8                	neg    eax
c0016140:	83 d2 00             	adc    edx,0x0
c0016143:	83 c4 08             	add    esp,0x8
c0016146:	f7 da                	neg    edx
c0016148:	5b                   	pop    ebx
c0016149:	c3                   	ret    
c001614a:	52                   	push   edx
c001614b:	52                   	push   edx
c001614c:	50                   	push   eax
c001614d:	68 0a 24 02 c0       	push   0xc002240a
c0016152:	e8 dc 8f ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016157:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	31 d2                	xor    edx,edx
c001615f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016165:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001616c:	83 c4 08             	add    esp,0x8
c001616f:	31 c0                	xor    eax,eax
c0016171:	5b                   	pop    ebx
c0016172:	c3                   	ret    
c0016173:	83 c4 08             	add    esp,0x8
c0016176:	83 c8 ff             	or     eax,0xffffffff
c0016179:	83 ca ff             	or     edx,0xffffffff
c001617c:	5b                   	pop    ebx
c001617d:	c3                   	ret    

c001617e <sysCallSizeFromFilename(regs*)>:
c001617e:	57                   	push   edi
c001617f:	56                   	push   esi
c0016180:	53                   	push   ebx
c0016181:	83 ec 10             	sub    esp,0x10
c0016184:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016188:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001618b:	83 fb 02             	cmp    ebx,0x2
c001618e:	0f 86 8b 00 00 00    	jbe    c001621f <sysCallSizeFromFilename(regs*)+0xa1>
c0016194:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001619a:	77 58                	ja     c00161f4 <sysCallSizeFromFilename(regs*)+0x76>
c001619c:	83 ec 0c             	sub    esp,0xc
c001619f:	68 14 01 00 00       	push   0x114
c00161a4:	e8 55 8e ff ff       	call   c000effe <operator new(unsigned long)>
c00161a9:	89 c7                	mov    edi,eax
c00161ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b0:	83 c4 0c             	add    esp,0xc
c00161b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00161b6:	50                   	push   eax
c00161b7:	53                   	push   ebx
c00161b8:	57                   	push   edi
c00161b9:	e8 ac 94 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c00161be:	83 c4 0c             	add    esp,0xc
c00161c1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00161c5:	50                   	push   eax
c00161c6:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00161c9:	52                   	push   edx
c00161ca:	57                   	push   edi
c00161cb:	e8 aa 97 ff ff       	call   c000f97a <File::stat(unsigned long long*, bool*)>
c00161d0:	89 c3                	mov    ebx,eax
c00161d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00161d4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161da:	31 c0                	xor    eax,eax
c00161dc:	83 c4 10             	add    esp,0x10
c00161df:	85 db                	test   ebx,ebx
c00161e1:	0f 95 c0             	setne  al
c00161e4:	31 d2                	xor    edx,edx
c00161e6:	f7 d8                	neg    eax
c00161e8:	83 d2 00             	adc    edx,0x0
c00161eb:	83 c4 10             	add    esp,0x10
c00161ee:	f7 da                	neg    edx
c00161f0:	5b                   	pop    ebx
c00161f1:	5e                   	pop    esi
c00161f2:	5f                   	pop    edi
c00161f3:	c3                   	ret    
c00161f4:	51                   	push   ecx
c00161f5:	51                   	push   ecx
c00161f6:	53                   	push   ebx
c00161f7:	68 24 24 02 c0       	push   0xc0022424
c00161fc:	e8 32 8f ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016201:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	31 d2                	xor    edx,edx
c0016209:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001620f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016216:	83 c4 10             	add    esp,0x10
c0016219:	31 c0                	xor    eax,eax
c001621b:	5b                   	pop    ebx
c001621c:	5e                   	pop    esi
c001621d:	5f                   	pop    edi
c001621e:	c3                   	ret    
c001621f:	83 c4 10             	add    esp,0x10
c0016222:	83 c8 ff             	or     eax,0xffffffff
c0016225:	83 ca ff             	or     edx,0xffffffff
c0016228:	5b                   	pop    ebx
c0016229:	5e                   	pop    esi
c001622a:	5f                   	pop    edi
c001622b:	c3                   	ret    

c001622c <sysCallSize(regs*)>:
c001622c:	53                   	push   ebx
c001622d:	83 ec 18             	sub    esp,0x18
c0016230:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016234:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016237:	83 f8 02             	cmp    eax,0x2
c001623a:	76 66                	jbe    c00162a2 <sysCallSize(regs*)+0x76>
c001623c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016241:	77 36                	ja     c0016279 <sysCallSize(regs*)+0x4d>
c0016243:	83 ec 0c             	sub    esp,0xc
c0016246:	50                   	push   eax
c0016247:	e8 43 7d ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c001624c:	83 c4 0c             	add    esp,0xc
c001624f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016253:	52                   	push   edx
c0016254:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016257:	52                   	push   edx
c0016258:	50                   	push   eax
c0016259:	e8 1c 97 ff ff       	call   c000f97a <File::stat(unsigned long long*, bool*)>
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	85 c0                	test   eax,eax
c0016263:	0f 95 c0             	setne  al
c0016266:	25 ff 00 00 00       	and    eax,0xff
c001626b:	31 d2                	xor    edx,edx
c001626d:	f7 d8                	neg    eax
c001626f:	83 d2 00             	adc    edx,0x0
c0016272:	83 c4 18             	add    esp,0x18
c0016275:	f7 da                	neg    edx
c0016277:	5b                   	pop    ebx
c0016278:	c3                   	ret    
c0016279:	51                   	push   ecx
c001627a:	51                   	push   ecx
c001627b:	50                   	push   eax
c001627c:	68 24 24 02 c0       	push   0xc0022424
c0016281:	e8 ad 8e ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016286:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016289:	83 c4 10             	add    esp,0x10
c001628c:	31 d2                	xor    edx,edx
c001628e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016294:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001629b:	83 c4 18             	add    esp,0x18
c001629e:	31 c0                	xor    eax,eax
c00162a0:	5b                   	pop    ebx
c00162a1:	c3                   	ret    
c00162a2:	83 c4 18             	add    esp,0x18
c00162a5:	83 c8 ff             	or     eax,0xffffffff
c00162a8:	83 ca ff             	or     edx,0xffffffff
c00162ab:	5b                   	pop    ebx
c00162ac:	c3                   	ret    

c00162ad <sysCallClose(regs*)>:
c00162ad:	53                   	push   ebx
c00162ae:	83 ec 08             	sub    esp,0x8
c00162b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162b8:	83 f8 02             	cmp    eax,0x2
c00162bb:	76 4f                	jbe    c001630c <sysCallClose(regs*)+0x5f>
c00162bd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00162c2:	74 53                	je     c0016317 <sysCallClose(regs*)+0x6a>
c00162c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00162c9:	74 5b                	je     c0016326 <sysCallClose(regs*)+0x79>
c00162cb:	77 2f                	ja     c00162fc <sysCallClose(regs*)+0x4f>
c00162cd:	83 ec 0c             	sub    esp,0xc
c00162d0:	50                   	push   eax
c00162d1:	e8 b9 7c ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c00162d6:	89 c3                	mov    ebx,eax
c00162d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00162db:	e8 4c 94 ff ff       	call   c000f72c <File::close()>
c00162e0:	83 c4 10             	add    esp,0x10
c00162e3:	85 db                	test   ebx,ebx
c00162e5:	74 0c                	je     c00162f3 <sysCallClose(regs*)+0x46>
c00162e7:	83 ec 0c             	sub    esp,0xc
c00162ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162ec:	53                   	push   ebx
c00162ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	83 c4 08             	add    esp,0x8
c00162f6:	31 c0                	xor    eax,eax
c00162f8:	31 d2                	xor    edx,edx
c00162fa:	5b                   	pop    ebx
c00162fb:	c3                   	ret    
c00162fc:	52                   	push   edx
c00162fd:	52                   	push   edx
c00162fe:	50                   	push   eax
c00162ff:	68 58 23 02 c0       	push   0xc0022358
c0016304:	e8 2a 8e ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016309:	83 c4 10             	add    esp,0x10
c001630c:	83 c4 08             	add    esp,0x8
c001630f:	83 c8 ff             	or     eax,0xffffffff
c0016312:	83 ca ff             	or     edx,0xffffffff
c0016315:	5b                   	pop    ebx
c0016316:	c3                   	ret    
c0016317:	83 ec 0c             	sub    esp,0xc
c001631a:	68 3f 24 02 c0       	push   0xc002243f
c001631f:	e8 0f 8e ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016324:	eb ca                	jmp    c00162f0 <sysCallClose(regs*)+0x43>
c0016326:	83 ec 0c             	sub    esp,0xc
c0016329:	68 4d 24 02 c0       	push   0xc002244d
c001632e:	eb ef                	jmp    c001631f <sysCallClose(regs*)+0x72>

c0016330 <sysCallOpenDir(regs*)>:
c0016330:	56                   	push   esi
c0016331:	53                   	push   ebx
c0016332:	50                   	push   eax
c0016333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016337:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001633a:	85 c0                	test   eax,eax
c001633c:	74 53                	je     c0016391 <sysCallOpenDir(regs*)+0x61>
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	68 14 01 00 00       	push   0x114
c0016346:	e8 b3 8c ff ff       	call   c000effe <operator new(unsigned long)>
c001634b:	89 c6                	mov    esi,eax
c001634d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016352:	83 c4 0c             	add    esp,0xc
c0016355:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016358:	50                   	push   eax
c0016359:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001635c:	50                   	push   eax
c001635d:	56                   	push   esi
c001635e:	e8 c9 97 ff ff       	call   c000fb2c <Directory::Directory(char const*, Process*)>
c0016363:	89 34 24             	mov    DWORD PTR [esp],esi
c0016366:	e8 25 98 ff ff       	call   c000fb90 <Directory::open()>
c001636b:	83 c4 10             	add    esp,0x10
c001636e:	85 c0                	test   eax,eax
c0016370:	75 1f                	jne    c0016391 <sysCallOpenDir(regs*)+0x61>
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	56                   	push   esi
c0016376:	e8 5f 79 ff ff       	call   c000dcda <UnixFile::getFileDescriptor()>
c001637b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001637e:	83 c4 10             	add    esp,0x10
c0016381:	89 02                	mov    DWORD PTR [edx],eax
c0016383:	c1 f8 1f             	sar    eax,0x1f
c0016386:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016389:	31 c0                	xor    eax,eax
c001638b:	59                   	pop    ecx
c001638c:	31 d2                	xor    edx,edx
c001638e:	5b                   	pop    ebx
c001638f:	5e                   	pop    esi
c0016390:	c3                   	ret    
c0016391:	59                   	pop    ecx
c0016392:	83 c8 ff             	or     eax,0xffffffff
c0016395:	5b                   	pop    ebx
c0016396:	83 ca ff             	or     edx,0xffffffff
c0016399:	5e                   	pop    esi
c001639a:	c3                   	ret    

c001639b <sysCallMakeDir(regs*)>:
c001639b:	56                   	push   esi
c001639c:	53                   	push   ebx
c001639d:	83 ec 10             	sub    esp,0x10
c00163a0:	68 14 01 00 00       	push   0x114
c00163a5:	e8 54 8c ff ff       	call   c000effe <operator new(unsigned long)>
c00163aa:	89 c3                	mov    ebx,eax
c00163ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b1:	83 c4 0c             	add    esp,0xc
c00163b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163b7:	50                   	push   eax
c00163b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163bc:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00163bf:	52                   	push   edx
c00163c0:	53                   	push   ebx
c00163c1:	e8 66 97 ff ff       	call   c000fb2c <Directory::Directory(char const*, Process*)>
c00163c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163c9:	e8 a2 99 ff ff       	call   c000fd70 <Directory::create()>
c00163ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163d1:	89 c6                	mov    esi,eax
c00163d3:	e8 14 98 ff ff       	call   c000fbec <Directory::close()>
c00163d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163e0:	31 c0                	xor    eax,eax
c00163e2:	85 f6                	test   esi,esi
c00163e4:	0f 95 c0             	setne  al
c00163e7:	31 d2                	xor    edx,edx
c00163e9:	f7 d8                	neg    eax
c00163eb:	83 d2 00             	adc    edx,0x0
c00163ee:	83 c4 14             	add    esp,0x14
c00163f1:	f7 da                	neg    edx
c00163f3:	5b                   	pop    ebx
c00163f4:	5e                   	pop    esi
c00163f5:	c3                   	ret    

c00163f6 <sysCallCloseDir(regs*)>:
c00163f6:	53                   	push   ebx
c00163f7:	83 ec 08             	sub    esp,0x8
c00163fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016401:	83 f8 02             	cmp    eax,0x2
c0016404:	76 46                	jbe    c001644c <sysCallCloseDir(regs*)+0x56>
c0016406:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001640b:	77 2f                	ja     c001643c <sysCallCloseDir(regs*)+0x46>
c001640d:	83 ec 0c             	sub    esp,0xc
c0016410:	50                   	push   eax
c0016411:	e8 79 7b ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c0016416:	89 c3                	mov    ebx,eax
c0016418:	89 04 24             	mov    DWORD PTR [esp],eax
c001641b:	e8 cc 97 ff ff       	call   c000fbec <Directory::close()>
c0016420:	83 c4 10             	add    esp,0x10
c0016423:	85 db                	test   ebx,ebx
c0016425:	74 0c                	je     c0016433 <sysCallCloseDir(regs*)+0x3d>
c0016427:	83 ec 0c             	sub    esp,0xc
c001642a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001642c:	53                   	push   ebx
c001642d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016430:	83 c4 10             	add    esp,0x10
c0016433:	83 c4 08             	add    esp,0x8
c0016436:	31 c0                	xor    eax,eax
c0016438:	31 d2                	xor    edx,edx
c001643a:	5b                   	pop    ebx
c001643b:	c3                   	ret    
c001643c:	52                   	push   edx
c001643d:	52                   	push   edx
c001643e:	50                   	push   eax
c001643f:	68 80 23 02 c0       	push   0xc0022380
c0016444:	e8 ea 8c ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	83 c4 08             	add    esp,0x8
c001644f:	83 c8 ff             	or     eax,0xffffffff
c0016452:	83 ca ff             	or     edx,0xffffffff
c0016455:	5b                   	pop    ebx
c0016456:	c3                   	ret    

c0016457 <sysCallWait(regs*)>:
c0016457:	83 ec 10             	sub    esp,0x10
c001645a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001645e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016461:	52                   	push   edx
c0016462:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016465:	51                   	push   ecx
c0016466:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016469:	50                   	push   eax
c001646a:	e8 4f 23 00 00       	call   c00187be <waitTask(int, int*, int)>
c001646f:	89 c2                	mov    edx,eax
c0016471:	83 c4 1c             	add    esp,0x1c
c0016474:	c1 fa 1f             	sar    edx,0x1f
c0016477:	c3                   	ret    

c0016478 <sysCallRmdir(regs*)>:
c0016478:	56                   	push   esi
c0016479:	53                   	push   ebx
c001647a:	83 ec 10             	sub    esp,0x10
c001647d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016481:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016484:	68 14 01 00 00       	push   0x114
c0016489:	e8 70 8b ff ff       	call   c000effe <operator new(unsigned long)>
c001648e:	83 c4 0c             	add    esp,0xc
c0016491:	89 c3                	mov    ebx,eax
c0016493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016498:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001649b:	50                   	push   eax
c001649c:	56                   	push   esi
c001649d:	53                   	push   ebx
c001649e:	e8 c7 91 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c00164a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164a6:	e8 9b 93 ff ff       	call   c000f846 <File::unlink()>
c00164ab:	89 c6                	mov    esi,eax
c00164ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164b5:	31 c0                	xor    eax,eax
c00164b7:	85 f6                	test   esi,esi
c00164b9:	0f 95 c0             	setne  al
c00164bc:	31 d2                	xor    edx,edx
c00164be:	f7 d8                	neg    eax
c00164c0:	83 d2 00             	adc    edx,0x0
c00164c3:	83 c4 14             	add    esp,0x14
c00164c6:	f7 da                	neg    edx
c00164c8:	5b                   	pop    ebx
c00164c9:	5e                   	pop    esi
c00164ca:	c3                   	ret    

c00164cb <sysCallUnlink(regs*)>:
c00164cb:	56                   	push   esi
c00164cc:	53                   	push   ebx
c00164cd:	83 ec 10             	sub    esp,0x10
c00164d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164d4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00164d7:	68 14 01 00 00       	push   0x114
c00164dc:	e8 1d 8b ff ff       	call   c000effe <operator new(unsigned long)>
c00164e1:	83 c4 0c             	add    esp,0xc
c00164e4:	89 c3                	mov    ebx,eax
c00164e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164ee:	50                   	push   eax
c00164ef:	56                   	push   esi
c00164f0:	53                   	push   ebx
c00164f1:	e8 74 91 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c00164f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164f9:	e8 48 93 ff ff       	call   c000f846 <File::unlink()>
c00164fe:	89 c6                	mov    esi,eax
c0016500:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016505:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016508:	31 c0                	xor    eax,eax
c001650a:	85 f6                	test   esi,esi
c001650c:	0f 95 c0             	setne  al
c001650f:	31 d2                	xor    edx,edx
c0016511:	f7 d8                	neg    eax
c0016513:	83 d2 00             	adc    edx,0x0
c0016516:	83 c4 14             	add    esp,0x14
c0016519:	f7 da                	neg    edx
c001651b:	5b                   	pop    ebx
c001651c:	5e                   	pop    esi
c001651d:	c3                   	ret    

c001651e <sysCallGetArgv(regs*)>:
c001651e:	83 ec 0c             	sub    esp,0xc
c0016521:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016525:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016528:	85 c0                	test   eax,eax
c001652a:	78 2b                	js     c0016557 <sysCallGetArgv(regs*)+0x39>
c001652c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016532:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016535:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001653b:	7d 1a                	jge    c0016557 <sysCallGetArgv(regs*)+0x39>
c001653d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016544:	85 c0                	test   eax,eax
c0016546:	74 17                	je     c001655f <sysCallGetArgv(regs*)+0x41>
c0016548:	51                   	push   ecx
c0016549:	51                   	push   ecx
c001654a:	50                   	push   eax
c001654b:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001654e:	50                   	push   eax
c001654f:	e8 53 a1 fe ff       	call   c00006a7 <strcpy>
c0016554:	83 c4 10             	add    esp,0x10
c0016557:	31 c0                	xor    eax,eax
c0016559:	31 d2                	xor    edx,edx
c001655b:	83 c4 0c             	add    esp,0xc
c001655e:	c3                   	ret    
c001655f:	b8 01 00 00 00       	mov    eax,0x1
c0016564:	31 d2                	xor    edx,edx
c0016566:	83 c4 0c             	add    esp,0xc
c0016569:	c3                   	ret    

c001656a <sysCallTTYName(regs*)>:
c001656a:	56                   	push   esi
c001656b:	53                   	push   ebx
c001656c:	50                   	push   eax
c001656d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016571:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016574:	85 c0                	test   eax,eax
c0016576:	74 4d                	je     c00165c5 <sysCallTTYName(regs*)+0x5b>
c0016578:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001657b:	83 f8 02             	cmp    eax,0x2
c001657e:	76 07                	jbe    c0016587 <sysCallTTYName(regs*)+0x1d>
c0016580:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016585:	75 54                	jne    c00165db <sysCallTTYName(regs*)+0x71>
c0016587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001658c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001658f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016595:	85 db                	test   ebx,ebx
c0016597:	74 2c                	je     c00165c5 <sysCallTTYName(regs*)+0x5b>
c0016599:	83 ec 0c             	sub    esp,0xc
c001659c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001659e:	53                   	push   ebx
c001659f:	ff 10                	call   DWORD PTR [eax]
c00165a1:	83 c4 10             	add    esp,0x10
c00165a4:	84 c0                	test   al,al
c00165a6:	74 28                	je     c00165d0 <sysCallTTYName(regs*)+0x66>
c00165a8:	50                   	push   eax
c00165a9:	81 c3 1e 10 00 00    	add    ebx,0x101e
c00165af:	50                   	push   eax
c00165b0:	53                   	push   ebx
c00165b1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00165b4:	50                   	push   eax
c00165b5:	e8 ed a0 fe ff       	call   c00006a7 <strcpy>
c00165ba:	83 c4 10             	add    esp,0x10
c00165bd:	31 c0                	xor    eax,eax
c00165bf:	31 d2                	xor    edx,edx
c00165c1:	59                   	pop    ecx
c00165c2:	5b                   	pop    ebx
c00165c3:	5e                   	pop    esi
c00165c4:	c3                   	ret    
c00165c5:	59                   	pop    ecx
c00165c6:	b8 01 00 00 00       	mov    eax,0x1
c00165cb:	5b                   	pop    ebx
c00165cc:	31 d2                	xor    edx,edx
c00165ce:	5e                   	pop    esi
c00165cf:	c3                   	ret    
c00165d0:	59                   	pop    ecx
c00165d1:	b8 02 00 00 00       	mov    eax,0x2
c00165d6:	5b                   	pop    ebx
c00165d7:	31 d2                	xor    edx,edx
c00165d9:	5e                   	pop    esi
c00165da:	c3                   	ret    
c00165db:	83 ec 0c             	sub    esp,0xc
c00165de:	50                   	push   eax
c00165df:	e8 ab 79 ff ff       	call   c000df8f <getFromFileDescriptor(int)>
c00165e4:	83 c4 10             	add    esp,0x10
c00165e7:	89 c3                	mov    ebx,eax
c00165e9:	eb aa                	jmp    c0016595 <sysCallTTYName(regs*)+0x2b>

c00165eb <sysCallGetEnv(regs*)>:
c00165eb:	83 ec 0c             	sub    esp,0xc
c00165ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00165f5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00165f8:	85 d2                	test   edx,edx
c00165fa:	75 22                	jne    c001661e <sysCallGetEnv(regs*)+0x33>
c00165fc:	31 c0                	xor    eax,eax
c00165fe:	31 d2                	xor    edx,edx
c0016600:	85 c9                	test   ecx,ecx
c0016602:	74 04                	je     c0016608 <sysCallGetEnv(regs*)+0x1d>
c0016604:	83 c4 0c             	add    esp,0xc
c0016607:	c3                   	ret    
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	68 a4 23 02 c0       	push   0xc00223a4
c0016610:	e8 10 a0 fe ff       	call   c0000625 <strlen>
c0016615:	83 c4 10             	add    esp,0x10
c0016618:	31 d2                	xor    edx,edx
c001661a:	83 c4 0c             	add    esp,0xc
c001661d:	c3                   	ret    
c001661e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016621:	85 c9                	test   ecx,ecx
c0016623:	74 0b                	je     c0016630 <sysCallGetEnv(regs*)+0x45>
c0016625:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016628:	31 c0                	xor    eax,eax
c001662a:	31 d2                	xor    edx,edx
c001662c:	83 c4 0c             	add    esp,0xc
c001662f:	c3                   	ret    
c0016630:	52                   	push   edx
c0016631:	52                   	push   edx
c0016632:	68 a4 23 02 c0       	push   0xc00223a4
c0016637:	50                   	push   eax
c0016638:	e8 6a a0 fe ff       	call   c00006a7 <strcpy>
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	eb e6                	jmp    c0016628 <sysCallGetEnv(regs*)+0x3d>

c0016642 <sysCallUSleep(regs*)>:
c0016642:	57                   	push   edi
c0016643:	56                   	push   esi
c0016644:	53                   	push   ebx
c0016645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016649:	52                   	push   edx
c001664a:	52                   	push   edx
c001664b:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c001664e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016651:	89 c8                	mov    eax,ecx
c0016653:	89 da                	mov    edx,ebx
c0016655:	0f a4 c2 05          	shld   edx,eax,0x5
c0016659:	c1 e0 05             	shl    eax,0x5
c001665c:	29 c8                	sub    eax,ecx
c001665e:	19 da                	sbb    edx,ebx
c0016660:	0f a4 c2 02          	shld   edx,eax,0x2
c0016664:	c1 e0 02             	shl    eax,0x2
c0016667:	01 c8                	add    eax,ecx
c0016669:	11 da                	adc    edx,ebx
c001666b:	0f a4 c2 03          	shld   edx,eax,0x3
c001666f:	c1 e0 03             	shl    eax,0x3
c0016672:	52                   	push   edx
c0016673:	50                   	push   eax
c0016674:	e8 e0 21 00 00       	call   c0018859 <nanoSleep(unsigned long long)>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	31 c0                	xor    eax,eax
c001667e:	31 d2                	xor    edx,edx
c0016680:	5b                   	pop    ebx
c0016681:	5e                   	pop    esi
c0016682:	5f                   	pop    edi
c0016683:	c3                   	ret    

c0016684 <sysCallSpawn(regs*)>:
c0016684:	56                   	push   esi
c0016685:	53                   	push   ebx
c0016686:	50                   	push   eax
c0016687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001668b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001668e:	85 c0                	test   eax,eax
c0016690:	75 08                	jne    c001669a <sysCallSpawn(regs*)+0x16>
c0016692:	59                   	pop    ecx
c0016693:	31 c0                	xor    eax,eax
c0016695:	5b                   	pop    ebx
c0016696:	31 d2                	xor    edx,edx
c0016698:	5e                   	pop    esi
c0016699:	c3                   	ret    
c001669a:	83 ec 0c             	sub    esp,0xc
c001669d:	68 3b 07 00 00       	push   0x73b
c00166a2:	e8 57 89 ff ff       	call   c000effe <operator new(unsigned long)>
c00166a7:	89 c6                	mov    esi,eax
c00166a9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00166ac:	50                   	push   eax
c00166ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166b5:	50                   	push   eax
c00166b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166b9:	50                   	push   eax
c00166ba:	56                   	push   esi
c00166bb:	e8 d6 18 00 00       	call   c0017f96 <Process::Process(char const*, Process*, char**)>
c00166c0:	83 c4 20             	add    esp,0x20
c00166c3:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c00166ca:	75 c6                	jne    c0016692 <sysCallSpawn(regs*)+0xe>
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	56                   	push   esi
c00166d0:	e8 3d 1e 00 00       	call   c0018512 <Process::createUserThread()>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00166da:	89 c2                	mov    edx,eax
c00166dc:	c1 fa 1f             	sar    edx,0x1f
c00166df:	59                   	pop    ecx
c00166e0:	5b                   	pop    ebx
c00166e1:	5e                   	pop    esi
c00166e2:	c3                   	ret    

c00166e3 <sysAppSettings(regs*)>:
c00166e3:	53                   	push   ebx
c00166e4:	31 d2                	xor    edx,edx
c00166e6:	83 ec 08             	sub    esp,0x8
c00166e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ed:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166f0:	b8 01 00 00 00       	mov    eax,0x1
c00166f5:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c00166fb:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016701:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016706:	75 30                	jne    c0016738 <sysAppSettings(regs*)+0x55>
c0016708:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001670e:	83 e0 1f             	and    eax,0x1f
c0016711:	3c 01                	cmp    al,0x1
c0016713:	74 28                	je     c001673d <sysAppSettings(regs*)+0x5a>
c0016715:	3c 07                	cmp    al,0x7
c0016717:	0f 84 be 00 00 00    	je     c00167db <sysAppSettings(regs*)+0xf8>
c001671d:	84 c0                	test   al,al
c001671f:	0f 84 da 00 00 00    	je     c00167ff <sysAppSettings(regs*)+0x11c>
c0016725:	3c 08                	cmp    al,0x8
c0016727:	74 6d                	je     c0016796 <sysAppSettings(regs*)+0xb3>
c0016729:	25 ff 00 00 00       	and    eax,0xff
c001672e:	05 e8 03 00 00       	add    eax,0x3e8
c0016733:	89 c2                	mov    edx,eax
c0016735:	c1 fa 1f             	sar    edx,0x1f
c0016738:	83 c4 08             	add    esp,0x8
c001673b:	5b                   	pop    ebx
c001673c:	c3                   	ret    
c001673d:	50                   	push   eax
c001673e:	68 00 01 00 00       	push   0x100
c0016743:	6a 00                	push   0x0
c0016745:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001674a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001674d:	83 c0 0c             	add    eax,0xc
c0016750:	50                   	push   eax
c0016751:	e8 b2 9e fe ff       	call   c0000608 <memset>
c0016756:	83 c4 0c             	add    esp,0xc
c0016759:	68 ff 00 00 00       	push   0xff
c001675e:	53                   	push   ebx
c001675f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016764:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016767:	83 c0 0c             	add    eax,0xc
c001676a:	50                   	push   eax
c001676b:	e8 62 9e fe ff       	call   c00005d2 <memcpy>
c0016770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016775:	5a                   	pop    edx
c0016776:	59                   	pop    ecx
c0016777:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001677a:	8d 50 0c             	lea    edx,[eax+0xc]
c001677d:	52                   	push   edx
c001677e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016784:	53                   	push   ebx
c0016785:	e8 4c 69 ff ff       	call   c000d0d6 <VgaText::setTitle(char*)>
c001678a:	83 c4 10             	add    esp,0x10
c001678d:	31 c0                	xor    eax,eax
c001678f:	31 d2                	xor    edx,edx
c0016791:	83 c4 08             	add    esp,0x8
c0016794:	5b                   	pop    ebx
c0016795:	c3                   	ret    
c0016796:	50                   	push   eax
c0016797:	50                   	push   eax
c0016798:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001679e:	83 e0 0f             	and    eax,0xf
c00167a1:	50                   	push   eax
c00167a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167aa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167b0:	50                   	push   eax
c00167b1:	e8 10 69 ff ff       	call   c000d0c6 <VgaText::setTitleColour(VgaColour)>
c00167b6:	58                   	pop    eax
c00167b7:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c00167bd:	c1 e8 04             	shr    eax,0x4
c00167c0:	5a                   	pop    edx
c00167c1:	83 e0 0f             	and    eax,0xf
c00167c4:	50                   	push   eax
c00167c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167cd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00167d3:	51                   	push   ecx
c00167d4:	e8 dd 68 ff ff       	call   c000d0b6 <VgaText::setTitleTextColour(VgaColour)>
c00167d9:	eb af                	jmp    c001678a <sysAppSettings(regs*)+0xa7>
c00167db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167e3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00167e9:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c00167ef:	c0 e8 06             	shr    al,0x6
c00167f2:	83 e0 01             	and    eax,0x1
c00167f5:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c00167fb:	31 c0                	xor    eax,eax
c00167fd:	eb 90                	jmp    c001678f <sysAppSettings(regs*)+0xac>
c00167ff:	b8 02 00 00 00       	mov    eax,0x2
c0016804:	31 d2                	xor    edx,edx
c0016806:	eb 89                	jmp    c0016791 <sysAppSettings(regs*)+0xae>

c0016808 <sysSetFatAttrib(regs*)>:
c0016808:	57                   	push   edi
c0016809:	56                   	push   esi
c001680a:	53                   	push   ebx
c001680b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001680f:	83 ec 0c             	sub    esp,0xc
c0016812:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016815:	68 14 01 00 00       	push   0x114
c001681a:	e8 df 87 ff ff       	call   c000effe <operator new(unsigned long)>
c001681f:	83 c4 0c             	add    esp,0xc
c0016822:	89 c3                	mov    ebx,eax
c0016824:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016829:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001682c:	50                   	push   eax
c001682d:	57                   	push   edi
c001682e:	53                   	push   ebx
c001682f:	e8 36 8e ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0016834:	83 c4 0c             	add    esp,0xc
c0016837:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001683a:	0f b6 d4             	movzx  edx,ah
c001683d:	52                   	push   edx
c001683e:	25 ff 00 00 00       	and    eax,0xff
c0016843:	50                   	push   eax
c0016844:	53                   	push   ebx
c0016845:	e8 96 90 ff ff       	call   c000f8e0 <File::chfatattr(unsigned char, unsigned char)>
c001684a:	89 c6                	mov    esi,eax
c001684c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001684e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016851:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016854:	83 c4 10             	add    esp,0x10
c0016857:	31 c0                	xor    eax,eax
c0016859:	85 f6                	test   esi,esi
c001685b:	0f 95 c0             	setne  al
c001685e:	5b                   	pop    ebx
c001685f:	31 d2                	xor    edx,edx
c0016861:	f7 d8                	neg    eax
c0016863:	83 d2 00             	adc    edx,0x0
c0016866:	5e                   	pop    esi
c0016867:	f7 da                	neg    edx
c0016869:	5f                   	pop    edi
c001686a:	c3                   	ret    

c001686b <sysPanic(regs*)>:
c001686b:	83 ec 18             	sub    esp,0x18
c001686e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016872:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016875:	50                   	push   eax
c0016876:	e8 77 ea ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001687b:	c7 04 24 5b 24 02 c0 	mov    DWORD PTR [esp],0xc002245b
c0016882:	e8 6b ea ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0016887:	b8 01 00 00 00       	mov    eax,0x1
c001688c:	31 d2                	xor    edx,edx
c001688e:	83 c4 1c             	add    esp,0x1c
c0016891:	c3                   	ret    

c0016892 <sysPipe(regs*)>:
c0016892:	57                   	push   edi
c0016893:	56                   	push   esi
c0016894:	53                   	push   ebx
c0016895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016899:	83 ec 0c             	sub    esp,0xc
c001689c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001689f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00168a2:	6a 20                	push   0x20
c00168a4:	e8 55 87 ff ff       	call   c000effe <operator new(unsigned long)>
c00168a9:	89 c3                	mov    ebx,eax
c00168ab:	58                   	pop    eax
c00168ac:	5a                   	pop    edx
c00168ad:	68 00 50 00 00       	push   0x5000
c00168b2:	53                   	push   ebx
c00168b3:	e8 5c 61 ff ff       	call   c000ca14 <Pipe::Pipe(int)>
c00168b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168bb:	e8 1a 74 ff ff       	call   c000dcda <UnixFile::getFileDescriptor()>
c00168c0:	89 07                	mov    DWORD PTR [edi],eax
c00168c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168c5:	e8 10 74 ff ff       	call   c000dcda <UnixFile::getFileDescriptor()>
c00168ca:	83 c4 10             	add    esp,0x10
c00168cd:	89 06                	mov    DWORD PTR [esi],eax
c00168cf:	31 d2                	xor    edx,edx
c00168d1:	5b                   	pop    ebx
c00168d2:	31 c0                	xor    eax,eax
c00168d4:	5e                   	pop    esi
c00168d5:	5f                   	pop    edi
c00168d6:	c3                   	ret    

c00168d7 <sysGetUnixTime(regs*)>:
c00168d7:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00168dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168e6:	e9 47 97 ff ff       	jmp    c0010032 <Clock::timeInSecondsLocal()>

c00168eb <string_ends_with(char const*, char const*)>:
c00168eb:	57                   	push   edi
c00168ec:	56                   	push   esi
c00168ed:	53                   	push   ebx
c00168ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	53                   	push   ebx
c00168fa:	e8 26 9d fe ff       	call   c0000625 <strlen>
c00168ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016902:	89 c6                	mov    esi,eax
c0016904:	e8 1c 9d fe ff       	call   c0000625 <strlen>
c0016909:	83 c4 10             	add    esp,0x10
c001690c:	31 d2                	xor    edx,edx
c001690e:	39 c6                	cmp    esi,eax
c0016910:	7d 06                	jge    c0016918 <string_ends_with(char const*, char const*)+0x2d>
c0016912:	5b                   	pop    ebx
c0016913:	89 d0                	mov    eax,edx
c0016915:	5e                   	pop    esi
c0016916:	5f                   	pop    edi
c0016917:	c3                   	ret    
c0016918:	52                   	push   edx
c0016919:	29 c6                	sub    esi,eax
c001691b:	52                   	push   edx
c001691c:	01 f3                	add    ebx,esi
c001691e:	57                   	push   edi
c001691f:	53                   	push   ebx
c0016920:	e8 d3 9d fe ff       	call   c00006f8 <strcmp>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	31 d2                	xor    edx,edx
c001692a:	85 c0                	test   eax,eax
c001692c:	5b                   	pop    ebx
c001692d:	0f 94 c2             	sete   dl
c0016930:	5e                   	pop    esi
c0016931:	89 d0                	mov    eax,edx
c0016933:	5f                   	pop    edi
c0016934:	c3                   	ret    

c0016935 <sysCallOpen(regs*)>:
c0016935:	56                   	push   esi
c0016936:	53                   	push   ebx
c0016937:	81 ec 04 01 00 00    	sub    esp,0x104
c001693d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016944:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016947:	85 c9                	test   ecx,ecx
c0016949:	0f 84 bb 00 00 00    	je     c0016a0a <sysCallOpen(regs*)+0xd5>
c001694f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016952:	85 c0                	test   eax,eax
c0016954:	0f 84 b0 00 00 00    	je     c0016a0a <sysCallOpen(regs*)+0xd5>
c001695a:	52                   	push   edx
c001695b:	68 6a 24 02 c0       	push   0xc002246a
c0016960:	50                   	push   eax
c0016961:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016965:	56                   	push   esi
c0016966:	e8 55 8b ff ff       	call   c000f4c0 <standardiseFiles(char*, char const*, char const*)>
c001696b:	89 34 24             	mov    DWORD PTR [esp],esi
c001696e:	e8 b2 9c fe ff       	call   c0000625 <strlen>
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	48                   	dec    eax
c0016977:	74 25                	je     c001699e <sysCallOpen(regs*)+0x69>
c0016979:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001697c:	80 fa 2e             	cmp    dl,0x2e
c001697f:	74 19                	je     c001699a <sysCallOpen(regs*)+0x65>
c0016981:	80 fa 3a             	cmp    dl,0x3a
c0016984:	74 14                	je     c001699a <sysCallOpen(regs*)+0x65>
c0016986:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001698a:	48                   	dec    eax
c001698b:	74 11                	je     c001699e <sysCallOpen(regs*)+0x69>
c001698d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016990:	80 fa 3a             	cmp    dl,0x3a
c0016993:	74 05                	je     c001699a <sysCallOpen(regs*)+0x65>
c0016995:	80 fa 2e             	cmp    dl,0x2e
c0016998:	75 ec                	jne    c0016986 <sysCallOpen(regs*)+0x51>
c001699a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001699e:	51                   	push   ecx
c001699f:	51                   	push   ecx
c00169a0:	68 6e 24 02 c0       	push   0xc002246e
c00169a5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169a8:	50                   	push   eax
c00169a9:	e8 3d ff ff ff       	call   c00168eb <string_ends_with(char const*, char const*)>
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	85 c0                	test   eax,eax
c00169b3:	75 17                	jne    c00169cc <sysCallOpen(regs*)+0x97>
c00169b5:	50                   	push   eax
c00169b6:	50                   	push   eax
c00169b7:	68 8f 24 02 c0       	push   0xc002248f
c00169bc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169bf:	50                   	push   eax
c00169c0:	e8 26 ff ff ff       	call   c00168eb <string_ends_with(char const*, char const*)>
c00169c5:	83 c4 10             	add    esp,0x10
c00169c8:	85 c0                	test   eax,eax
c00169ca:	74 4d                	je     c0016a19 <sysCallOpen(regs*)+0xe4>
c00169cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169cf:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00169d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169dc:	50                   	push   eax
c00169dd:	50                   	push   eax
c00169de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00169e3:	52                   	push   edx
c00169e4:	68 73 24 02 c0       	push   0xc0022473
c00169e9:	e8 45 87 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00169ee:	c7 04 24 82 24 02 c0 	mov    DWORD PTR [esp],0xc0022482
c00169f5:	e8 39 87 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	81 c4 04 01 00 00    	add    esp,0x104
c0016a03:	31 c0                	xor    eax,eax
c0016a05:	31 d2                	xor    edx,edx
c0016a07:	5b                   	pop    ebx
c0016a08:	5e                   	pop    esi
c0016a09:	c3                   	ret    
c0016a0a:	81 c4 04 01 00 00    	add    esp,0x104
c0016a10:	83 c8 ff             	or     eax,0xffffffff
c0016a13:	83 ca ff             	or     edx,0xffffffff
c0016a16:	5b                   	pop    ebx
c0016a17:	5e                   	pop    esi
c0016a18:	c3                   	ret    
c0016a19:	50                   	push   eax
c0016a1a:	50                   	push   eax
c0016a1b:	68 6f 24 02 c0       	push   0xc002246f
c0016a20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a23:	50                   	push   eax
c0016a24:	e8 cf 9c fe ff       	call   c00006f8 <strcmp>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	85 c0                	test   eax,eax
c0016a2e:	74 9c                	je     c00169cc <sysCallOpen(regs*)+0x97>
c0016a30:	50                   	push   eax
c0016a31:	50                   	push   eax
c0016a32:	68 6e 24 02 c0       	push   0xc002246e
c0016a37:	56                   	push   esi
c0016a38:	e8 ae fe ff ff       	call   c00168eb <string_ends_with(char const*, char const*)>
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	85 c0                	test   eax,eax
c0016a42:	75 88                	jne    c00169cc <sysCallOpen(regs*)+0x97>
c0016a44:	52                   	push   edx
c0016a45:	52                   	push   edx
c0016a46:	68 94 24 02 c0       	push   0xc0022494
c0016a4b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016a4e:	51                   	push   ecx
c0016a4f:	e8 97 fe ff ff       	call   c00168eb <string_ends_with(char const*, char const*)>
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	85 c0                	test   eax,eax
c0016a59:	0f 85 d5 00 00 00    	jne    c0016b34 <sysCallOpen(regs*)+0x1ff>
c0016a5f:	50                   	push   eax
c0016a60:	50                   	push   eax
c0016a61:	68 99 24 02 c0       	push   0xc0022499
c0016a66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a69:	50                   	push   eax
c0016a6a:	e8 7c fe ff ff       	call   c00168eb <string_ends_with(char const*, char const*)>
c0016a6f:	83 c4 10             	add    esp,0x10
c0016a72:	85 c0                	test   eax,eax
c0016a74:	0f 85 ba 00 00 00    	jne    c0016b34 <sysCallOpen(regs*)+0x1ff>
c0016a7a:	50                   	push   eax
c0016a7b:	50                   	push   eax
c0016a7c:	68 95 24 02 c0       	push   0xc0022495
c0016a81:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a84:	50                   	push   eax
c0016a85:	e8 6e 9c fe ff       	call   c00006f8 <strcmp>
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	85 c0                	test   eax,eax
c0016a8f:	0f 84 9f 00 00 00    	je     c0016b34 <sysCallOpen(regs*)+0x1ff>
c0016a95:	50                   	push   eax
c0016a96:	50                   	push   eax
c0016a97:	68 94 24 02 c0       	push   0xc0022494
c0016a9c:	56                   	push   esi
c0016a9d:	e8 49 fe ff ff       	call   c00168eb <string_ends_with(char const*, char const*)>
c0016aa2:	83 c4 10             	add    esp,0x10
c0016aa5:	85 c0                	test   eax,eax
c0016aa7:	0f 85 87 00 00 00    	jne    c0016b34 <sysCallOpen(regs*)+0x1ff>
c0016aad:	83 ec 0c             	sub    esp,0xc
c0016ab0:	68 14 01 00 00       	push   0x114
c0016ab5:	e8 44 85 ff ff       	call   c000effe <operator new(unsigned long)>
c0016aba:	89 c6                	mov    esi,eax
c0016abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ac1:	83 c4 0c             	add    esp,0xc
c0016ac4:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0016ac7:	51                   	push   ecx
c0016ac8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016acb:	50                   	push   eax
c0016acc:	56                   	push   esi
c0016acd:	e8 98 8b ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0016ad2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016ad5:	83 c4 10             	add    esp,0x10
c0016ad8:	89 d0                	mov    eax,edx
c0016ada:	25 ff 00 00 00       	and    eax,0xff
c0016adf:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016ae2:	89 d0                	mov    eax,edx
c0016ae4:	83 e0 01             	and    eax,0x1
c0016ae7:	f6 c2 02             	test   dl,0x2
c0016aea:	74 03                	je     c0016aef <sysCallOpen(regs*)+0x1ba>
c0016aec:	83 c8 02             	or     eax,0x2
c0016aef:	f6 c2 04             	test   dl,0x4
c0016af2:	74 03                	je     c0016af7 <sysCallOpen(regs*)+0x1c2>
c0016af4:	83 c8 04             	or     eax,0x4
c0016af7:	f6 c2 08             	test   dl,0x8
c0016afa:	74 03                	je     c0016aff <sysCallOpen(regs*)+0x1ca>
c0016afc:	83 c8 0a             	or     eax,0xa
c0016aff:	83 e2 10             	and    edx,0x10
c0016b02:	74 03                	je     c0016b07 <sysCallOpen(regs*)+0x1d2>
c0016b04:	83 c8 12             	or     eax,0x12
c0016b07:	52                   	push   edx
c0016b08:	52                   	push   edx
c0016b09:	50                   	push   eax
c0016b0a:	56                   	push   esi
c0016b0b:	e8 be 8b ff ff       	call   c000f6ce <File::open(FileOpenMode)>
c0016b10:	83 c4 10             	add    esp,0x10
c0016b13:	85 c0                	test   eax,eax
c0016b15:	0f 85 ef fe ff ff    	jne    c0016a0a <sysCallOpen(regs*)+0xd5>
c0016b1b:	83 ec 0c             	sub    esp,0xc
c0016b1e:	56                   	push   esi
c0016b1f:	e8 b6 71 ff ff       	call   c000dcda <UnixFile::getFileDescriptor()>
c0016b24:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b27:	89 02                	mov    DWORD PTR [edx],eax
c0016b29:	c1 f8 1f             	sar    eax,0x1f
c0016b2c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b2f:	e9 c6 fe ff ff       	jmp    c00169fa <sysCallOpen(regs*)+0xc5>
c0016b34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b37:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016b3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016b44:	e9 b4 fe ff ff       	jmp    c00169fd <sysCallOpen(regs*)+0xc8>

c0016b49 <setupSystemCalls()>:
c0016b49:	c7 05 60 4a 02 c0 44 5d 01 c0 	mov    DWORD PTR ds:0xc0024a60,0xc0015d44
c0016b53:	c7 05 64 4a 02 c0 57 5b 01 c0 	mov    DWORD PTR ds:0xc0024a64,0xc0015b57
c0016b5d:	c7 05 68 4a 02 c0 6c 5c 01 c0 	mov    DWORD PTR ds:0xc0024a68,0xc0015c6c
c0016b67:	c7 05 6c 4a 02 c0 c1 5c 01 c0 	mov    DWORD PTR ds:0xc0024a6c,0xc0015cc1
c0016b71:	c7 05 70 4a 02 c0 04 5c 01 c0 	mov    DWORD PTR ds:0xc0024a70,0xc0015c04
c0016b7b:	c7 05 74 4a 02 c0 5e 5d 01 c0 	mov    DWORD PTR ds:0xc0024a74,0xc0015d5e
c0016b85:	c7 05 78 4a 02 c0 1d 5f 01 c0 	mov    DWORD PTR ds:0xc0024a78,0xc0015f1d
c0016b8f:	c7 05 7c 4a 02 c0 43 5f 01 c0 	mov    DWORD PTR ds:0xc0024a7c,0xc0015f43
c0016b99:	c7 05 84 4a 02 c0 ad 62 01 c0 	mov    DWORD PTR ds:0xc0024a84,0xc00162ad
c0016ba3:	c7 05 80 4a 02 c0 35 69 01 c0 	mov    DWORD PTR ds:0xc0024a80,0xc0016935
c0016bad:	c7 05 88 4a 02 c0 30 63 01 c0 	mov    DWORD PTR ds:0xc0024a88,0xc0016330
c0016bb7:	c7 05 8c 4a 02 c0 b2 5f 01 c0 	mov    DWORD PTR ds:0xc0024a8c,0xc0015fb2
c0016bc1:	c7 05 90 4a 02 c0 6e 5d 01 c0 	mov    DWORD PTR ds:0xc0024a90,0xc0015d6e
c0016bcb:	c7 05 94 4a 02 c0 73 5d 01 c0 	mov    DWORD PTR ds:0xc0024a94,0xc0015d73
c0016bd5:	c7 05 98 4a 02 c0 9b 63 01 c0 	mov    DWORD PTR ds:0xc0024a98,0xc001639b
c0016bdf:	c7 05 9c 4a 02 c0 f6 63 01 c0 	mov    DWORD PTR ds:0xc0024a9c,0xc00163f6
c0016be9:	c7 05 a0 4a 02 c0 9d 60 01 c0 	mov    DWORD PTR ds:0xc0024aa0,0xc001609d
c0016bf3:	c7 05 a4 4a 02 c0 03 61 01 c0 	mov    DWORD PTR ds:0xc0024aa4,0xc0016103
c0016bfd:	c7 05 a8 4a 02 c0 2c 62 01 c0 	mov    DWORD PTR ds:0xc0024aa8,0xc001622c
c0016c07:	c7 05 ac 4a 02 c0 78 5d 01 c0 	mov    DWORD PTR ds:0xc0024aac,0xc0015d78
c0016c11:	c7 05 b0 4a 02 c0 57 64 01 c0 	mov    DWORD PTR ds:0xc0024ab0,0xc0016457
c0016c1b:	c7 05 b4 4a 02 c0 82 5d 01 c0 	mov    DWORD PTR ds:0xc0024ab4,0xc0015d82
c0016c25:	c7 05 b8 4a 02 c0 89 5d 01 c0 	mov    DWORD PTR ds:0xc0024ab8,0xc0015d89
c0016c2f:	c7 05 bc 4a 02 c0 78 64 01 c0 	mov    DWORD PTR ds:0xc0024abc,0xc0016478
c0016c39:	c7 05 c0 4a 02 c0 cb 64 01 c0 	mov    DWORD PTR ds:0xc0024ac0,0xc00164cb
c0016c43:	c7 05 c4 4a 02 c0 90 5d 01 c0 	mov    DWORD PTR ds:0xc0024ac4,0xc0015d90
c0016c4d:	c7 05 c8 4a 02 c0 1e 65 01 c0 	mov    DWORD PTR ds:0xc0024ac8,0xc001651e
c0016c57:	c7 05 cc 4a 02 c0 65 5f 01 c0 	mov    DWORD PTR ds:0xc0024acc,0xc0015f65
c0016c61:	c7 05 d0 4a 02 c0 6a 65 01 c0 	mov    DWORD PTR ds:0xc0024ad0,0xc001656a
c0016c6b:	c7 05 d4 4a 02 c0 45 60 01 c0 	mov    DWORD PTR ds:0xc0024ad4,0xc0016045
c0016c75:	c7 05 d8 4a 02 c0 42 66 01 c0 	mov    DWORD PTR ds:0xc0024ad8,0xc0016642
c0016c7f:	c7 05 dc 4a 02 c0 7e 61 01 c0 	mov    DWORD PTR ds:0xc0024adc,0xc001617e
c0016c89:	c7 05 e0 4a 02 c0 84 66 01 c0 	mov    DWORD PTR ds:0xc0024ae0,0xc0016684
c0016c93:	c7 05 e4 4a 02 c0 eb 65 01 c0 	mov    DWORD PTR ds:0xc0024ae4,0xc00165eb
c0016c9d:	c7 05 e8 4a 02 c0 e3 66 01 c0 	mov    DWORD PTR ds:0xc0024ae8,0xc00166e3
c0016ca7:	c7 05 ec 4a 02 c0 a4 5d 01 c0 	mov    DWORD PTR ds:0xc0024aec,0xc0015da4
c0016cb1:	c7 05 f0 4a 02 c0 07 5e 01 c0 	mov    DWORD PTR ds:0xc0024af0,0xc0015e07
c0016cbb:	c7 05 f4 4a 02 c0 4f 5e 01 c0 	mov    DWORD PTR ds:0xc0024af4,0xc0015e4f
c0016cc5:	c7 05 f8 4a 02 c0 08 68 01 c0 	mov    DWORD PTR ds:0xc0024af8,0xc0016808
c0016ccf:	c7 05 fc 4a 02 c0 6b 68 01 c0 	mov    DWORD PTR ds:0xc0024afc,0xc001686b
c0016cd9:	c7 05 00 4b 02 c0 a2 5e 01 c0 	mov    DWORD PTR ds:0xc0024b00,0xc0015ea2
c0016ce3:	c7 05 04 4b 02 c0 92 68 01 c0 	mov    DWORD PTR ds:0xc0024b04,0xc0016892
c0016ced:	c7 05 08 4b 02 c0 d7 68 01 c0 	mov    DWORD PTR ds:0xc0024b08,0xc00168d7
c0016cf7:	c7 05 0c 4b 02 c0 6f 5b 01 c0 	mov    DWORD PTR ds:0xc0024b0c,0xc0015b6f
c0016d01:	c3                   	ret    

c0016d02 <systemCall(regs*, void*)>:
c0016d02:	53                   	push   ebx
c0016d03:	83 ec 08             	sub    esp,0x8
c0016d06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d0d:	83 f8 7f             	cmp    eax,0x7f
c0016d10:	77 16                	ja     c0016d28 <systemCall(regs*, void*)+0x26>
c0016d12:	8b 14 85 60 4a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb5a0]
c0016d19:	85 d2                	test   edx,edx
c0016d1b:	74 0b                	je     c0016d28 <systemCall(regs*, void*)+0x26>
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	53                   	push   ebx
c0016d21:	ff d2                	call   edx
c0016d23:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d26:	eb 0d                	jmp    c0016d35 <systemCall(regs*, void*)+0x33>
c0016d28:	52                   	push   edx
c0016d29:	52                   	push   edx
c0016d2a:	50                   	push   eax
c0016d2b:	68 9e 24 02 c0       	push   0xc002249e
c0016d30:	e8 fe 83 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016d3d:	83 c4 08             	add    esp,0x8
c0016d40:	31 d2                	xor    edx,edx
c0016d42:	5b                   	pop    ebx
c0016d43:	c3                   	ret    

c0016d44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016d44:	55                   	push   ebp
c0016d45:	89 e5                	mov    ebp,esp
c0016d47:	57                   	push   edi
c0016d48:	56                   	push   esi
c0016d49:	53                   	push   ebx
c0016d4a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016d50:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016d53:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016d56:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016d5d:	74 27                	je     c0016d86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016d5f:	85 c0                	test   eax,eax
c0016d61:	74 23                	je     c0016d86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016d63:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016d67:	75 1d                	jne    c0016d86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016d69:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c0016d6c:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c0016d72:	89 d1                	mov    ecx,edx
c0016d74:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016d7a:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0016d80:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016d83:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016d8c:	05 ff 0f 00 00       	add    eax,0xfff
c0016d91:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016d97:	6a 01                	push   0x1
c0016d99:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016d9f:	e8 74 73 ff ff       	call   c000e118 <Virt::allocateKernelVirtualPages(int)>
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	89 c6                	mov    esi,eax
c0016da9:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016daf:	0f 86 21 01 00 00    	jbe    c0016ed6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0016db5:	c1 eb 0c             	shr    ebx,0xc
c0016db8:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016dc2:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016dc8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016dcb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016dce:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016dd4:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016dd7:	29 d8                	sub    eax,ebx
c0016dd9:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016ddf:	0f 83 f4 00 00 00    	jae    c0016ed9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0016de5:	83 ec 0c             	sub    esp,0xc
c0016de8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016deb:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016df1:	3d 00 10 00 00       	cmp    eax,0x1000
c0016df6:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016df8:	52                   	push   edx
c0016df9:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0016dff:	52                   	push   edx
c0016e00:	76 05                	jbe    c0016e07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0016e02:	b8 00 10 00 00       	mov    eax,0x1000
c0016e07:	31 d2                	xor    edx,edx
c0016e09:	52                   	push   edx
c0016e0a:	50                   	push   eax
c0016e0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016e0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e11:	83 c4 20             	add    esp,0x20
c0016e14:	85 c0                	test   eax,eax
c0016e16:	74 1f                	je     c0016e37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0016e18:	51                   	push   ecx
c0016e19:	51                   	push   ecx
c0016e1a:	50                   	push   eax
c0016e1b:	68 b2 24 02 c0       	push   0xc00224b2
c0016e20:	e8 0e 83 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0016e25:	89 34 24             	mov    DWORD PTR [esp],esi
c0016e28:	e8 38 76 ff ff       	call   c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c0016e2d:	83 c4 10             	add    esp,0x10
c0016e30:	31 c0                	xor    eax,eax
c0016e32:	e9 7c 01 00 00       	jmp    c0016fb3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0016e37:	e8 bf 14 00 00       	call   c00182fb <lockScheduler()>
c0016e3c:	e8 96 56 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c0016e41:	6a 07                	push   0x7
c0016e43:	56                   	push   esi
c0016e44:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016e4a:	50                   	push   eax
c0016e4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e51:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016e54:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016e5a:	e8 85 79 ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016e5f:	83 c4 0c             	add    esp,0xc
c0016e62:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016e68:	6a 00                	push   0x0
c0016e6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e70:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016e73:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016e79:	e8 c4 77 ff ff       	call   c000e642 <VAS::mapOtherVASIn(bool, VAS*)>
c0016e7e:	58                   	pop    eax
c0016e7f:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016e85:	5a                   	pop    edx
c0016e86:	68 07 04 00 00       	push   0x407
c0016e8b:	53                   	push   ebx
c0016e8c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016e92:	50                   	push   eax
c0016e93:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016e99:	6a 00                	push   0x0
c0016e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ea3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016ea9:	e8 f2 7c ff ff       	call   c000eba0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016eae:	83 c4 1c             	add    esp,0x1c
c0016eb1:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016eb7:	68 00 10 00 00       	push   0x1000
c0016ebc:	50                   	push   eax
c0016ebd:	56                   	push   esi
c0016ebe:	e8 0f 97 fe ff       	call   c00005d2 <memcpy>
c0016ec3:	e8 35 14 00 00       	call   c00182fd <unlockScheduler()>
c0016ec8:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016ece:	83 c4 10             	add    esp,0x10
c0016ed1:	e9 f5 fe ff ff       	jmp    c0016dcb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0016ed6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016ed9:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016ee3:	0f 86 bc 00 00 00    	jbe    c0016fa5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0016ee9:	e8 0d 14 00 00       	call   c00182fb <lockScheduler()>
c0016eee:	51                   	push   ecx
c0016eef:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016ef5:	6a 00                	push   0x0
c0016ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016f05:	e8 38 77 ff ff       	call   c000e642 <VAS::mapOtherVASIn(bool, VAS*)>
c0016f0a:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0016f10:	c1 e8 0c             	shr    eax,0xc
c0016f13:	83 c4 10             	add    esp,0x10
c0016f16:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016f1c:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0016f26:	e8 ac 55 ff ff       	call   c000c4d7 <Phys::allocatePage()>
c0016f2b:	6a 07                	push   0x7
c0016f2d:	56                   	push   esi
c0016f2e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016f34:	50                   	push   eax
c0016f35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f3b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016f3e:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0016f44:	e8 9b 78 ff ff       	call   c000e7e4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f49:	58                   	pop    eax
c0016f4a:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016f50:	5a                   	pop    edx
c0016f51:	68 07 04 00 00       	push   0x407
c0016f56:	53                   	push   ebx
c0016f57:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016f5d:	50                   	push   eax
c0016f5e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016f64:	6a 00                	push   0x0
c0016f66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f6e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016f74:	e8 27 7c ff ff       	call   c000eba0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016f79:	83 c4 1c             	add    esp,0x1c
c0016f7c:	68 00 10 00 00       	push   0x1000
c0016f81:	6a 00                	push   0x0
c0016f83:	56                   	push   esi
c0016f84:	e8 7f 96 fe ff       	call   c0000608 <memset>
c0016f89:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016f8f:	83 c4 10             	add    esp,0x10
c0016f92:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016f98:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016f9e:	77 86                	ja     c0016f26 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c0016fa0:	e8 58 13 00 00       	call   c00182fd <unlockScheduler()>
c0016fa5:	83 ec 0c             	sub    esp,0xc
c0016fa8:	56                   	push   esi
c0016fa9:	e8 b7 74 ff ff       	call   c000e465 <Virt::freeKernelVirtualPages(unsigned long)>
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	b0 01                	mov    al,0x1
c0016fb3:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016fb6:	5b                   	pop    ebx
c0016fb7:	5e                   	pop    esi
c0016fb8:	5f                   	pop    edi
c0016fb9:	5d                   	pop    ebp
c0016fba:	c3                   	ret    

c0016fbb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016fbb:	55                   	push   ebp
c0016fbc:	57                   	push   edi
c0016fbd:	56                   	push   esi
c0016fbe:	53                   	push   ebx
c0016fbf:	83 ec 48             	sub    esp,0x48
c0016fc2:	68 14 01 00 00       	push   0x114
c0016fc7:	e8 32 80 ff ff       	call   c000effe <operator new(unsigned long)>
c0016fcc:	83 c4 0c             	add    esp,0xc
c0016fcf:	89 c6                	mov    esi,eax
c0016fd1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fd5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016fd9:	50                   	push   eax
c0016fda:	e8 8b 86 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0016fdf:	58                   	pop    eax
c0016fe0:	5a                   	pop    edx
c0016fe1:	6a 01                	push   0x1
c0016fe3:	56                   	push   esi
c0016fe4:	e8 e5 86 ff ff       	call   c000f6ce <File::open(FileOpenMode)>
c0016fe9:	83 c4 10             	add    esp,0x10
c0016fec:	85 c0                	test   eax,eax
c0016fee:	0f 85 47 01 00 00    	jne    c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ff4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	6a 34                	push   0x34
c0017001:	e8 fb 4e ff ff       	call   c000bf01 <malloc>
c0017006:	89 c3                	mov    ebx,eax
c0017008:	58                   	pop    eax
c0017009:	8b 06                	mov    eax,DWORD PTR [esi]
c001700b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001700f:	57                   	push   edi
c0017010:	53                   	push   ebx
c0017011:	6a 00                	push   0x0
c0017013:	6a 34                	push   0x34
c0017015:	56                   	push   esi
c0017016:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017019:	83 c4 20             	add    esp,0x20
c001701c:	85 c0                	test   eax,eax
c001701e:	0f 85 17 01 00 00    	jne    c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017024:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001702a:	0f 85 0b 01 00 00    	jne    c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017030:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017033:	85 c0                	test   eax,eax
c0017035:	0f 84 00 01 00 00    	je     c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001703b:	31 d2                	xor    edx,edx
c001703d:	55                   	push   ebp
c001703e:	52                   	push   edx
c001703f:	50                   	push   eax
c0017040:	56                   	push   esi
c0017041:	e8 46 87 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c0017046:	83 c4 10             	add    esp,0x10
c0017049:	85 c0                	test   eax,eax
c001704b:	0f 85 ea 00 00 00    	jne    c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017051:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017054:	83 ec 0c             	sub    esp,0xc
c0017057:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001705b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001705f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017063:	0f af c2             	imul   eax,edx
c0017066:	50                   	push   eax
c0017067:	e8 95 4e ff ff       	call   c000bf01 <malloc>
c001706c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017070:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017073:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017077:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001707b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001707f:	0f af c2             	imul   eax,edx
c0017082:	99                   	cdq    
c0017083:	52                   	push   edx
c0017084:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017086:	50                   	push   eax
c0017087:	56                   	push   esi
c0017088:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001708b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001708e:	83 c4 20             	add    esp,0x20
c0017091:	85 c0                	test   eax,eax
c0017093:	0f 84 a2 00 00 00    	je     c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017099:	31 d2                	xor    edx,edx
c001709b:	51                   	push   ecx
c001709c:	52                   	push   edx
c001709d:	50                   	push   eax
c001709e:	56                   	push   esi
c001709f:	e8 e8 86 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	85 c0                	test   eax,eax
c00170a9:	0f 85 8c 00 00 00    	jne    c001713b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170af:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00170b3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00170b7:	0f af c2             	imul   eax,edx
c00170ba:	83 ec 0c             	sub    esp,0xc
c00170bd:	31 ed                	xor    ebp,ebp
c00170bf:	50                   	push   eax
c00170c0:	e8 3c 4e ff ff       	call   c000bf01 <malloc>
c00170c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00170cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170d0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00170d4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00170d8:	0f af c2             	imul   eax,edx
c00170db:	99                   	cdq    
c00170dc:	52                   	push   edx
c00170dd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170df:	50                   	push   eax
c00170e0:	56                   	push   esi
c00170e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170e4:	83 c4 20             	add    esp,0x20
c00170e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170ef:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00170f3:	0f 86 80 00 00 00    	jbe    c0017179 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00170f9:	0f b7 fd             	movzx  edi,bp
c00170fc:	c1 e7 05             	shl    edi,0x5
c00170ff:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017103:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017106:	75 6b                	jne    c0017173 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017108:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001710b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001710f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017116:	52                   	push   edx
c0017117:	31 d2                	xor    edx,edx
c0017119:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001711c:	52                   	push   edx
c001711d:	50                   	push   eax
c001711e:	56                   	push   esi
c001711f:	e8 68 86 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	85 c0                	test   eax,eax
c0017129:	74 17                	je     c0017142 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001712b:	83 ec 0c             	sub    esp,0xc
c001712e:	68 dd 24 02 c0       	push   0xc00224dd
c0017133:	e8 fb 7f ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0017138:	83 c4 10             	add    esp,0x10
c001713b:	31 c0                	xor    eax,eax
c001713d:	e9 87 00 00 00       	jmp    c00171c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017142:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017145:	83 ec 0c             	sub    esp,0xc
c0017148:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001714b:	50                   	push   eax
c001714c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017150:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017154:	56                   	push   esi
c0017155:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017159:	e8 e6 fb ff ff       	call   c0016d44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001715e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017162:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017166:	83 c4 20             	add    esp,0x20
c0017169:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001716d:	73 04                	jae    c0017173 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001716f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017173:	45                   	inc    ebp
c0017174:	e9 76 ff ff ff       	jmp    c00170ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017179:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001717d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017181:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017185:	83 ec 0c             	sub    esp,0xc
c0017188:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001718e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017193:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0017199:	05 00 10 00 00       	add    eax,0x1000
c001719e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00171a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a5:	e8 67 4d ff ff       	call   c000bf11 <free>
c00171aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00171ad:	e8 5f 4d ff ff       	call   c000bf11 <free>
c00171b2:	58                   	pop    eax
c00171b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171b7:	e8 55 4d ff ff       	call   c000bf11 <free>
c00171bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00171bf:	e8 68 85 ff ff       	call   c000f72c <File::close()>
c00171c4:	83 c4 10             	add    esp,0x10
c00171c7:	b0 01                	mov    al,0x1
c00171c9:	83 c4 3c             	add    esp,0x3c
c00171cc:	5b                   	pop    ebx
c00171cd:	5e                   	pop    esi
c00171ce:	5f                   	pop    edi
c00171cf:	5d                   	pop    ebp
c00171d0:	c3                   	ret    

c00171d1 <Thr::runtimeReferenceHelper()>:
c00171d1:	83 ec 18             	sub    esp,0x18
c00171d4:	68 e5 24 02 c0       	push   0xc00224e5
c00171d9:	e8 55 7f ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00171de:	fa                   	cli    
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	eb fe                	jmp    c00171e2 <Thr::runtimeReferenceHelper()+0x11>

c00171e4 <Thr::getAddressOfKernelSymbol(char const*)>:
c00171e4:	57                   	push   edi
c00171e5:	56                   	push   esi
c00171e6:	53                   	push   ebx
c00171e7:	31 db                	xor    ebx,ebx
c00171e9:	39 1d 00 54 02 c0    	cmp    DWORD PTR ds:0xc0025400,ebx
c00171ef:	7e 3c                	jle    c001722d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00171f1:	8b 34 9d 80 53 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdac80]
c00171f8:	31 ff                	xor    edi,edi
c00171fa:	39 3c 9d 80 52 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdad80],edi
c0017201:	7e 27                	jle    c001722a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017203:	50                   	push   eax
c0017204:	50                   	push   eax
c0017205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017209:	8b 06                	mov    eax,DWORD PTR [esi]
c001720b:	03 04 9d 00 53 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdad00]
c0017212:	50                   	push   eax
c0017213:	e8 e0 94 fe ff       	call   c00006f8 <strcmp>
c0017218:	83 c4 10             	add    esp,0x10
c001721b:	85 c0                	test   eax,eax
c001721d:	75 05                	jne    c0017224 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001721f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017222:	eb 0b                	jmp    c001722f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017224:	83 c6 10             	add    esi,0x10
c0017227:	47                   	inc    edi
c0017228:	eb d0                	jmp    c00171fa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001722a:	43                   	inc    ebx
c001722b:	eb bc                	jmp    c00171e9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001722d:	31 c0                	xor    eax,eax
c001722f:	5b                   	pop    ebx
c0017230:	5e                   	pop    esi
c0017231:	5f                   	pop    edi
c0017232:	c3                   	ret    

c0017233 <Thr::loadKernelSymbolTable(char const*)>:
c0017233:	55                   	push   ebp
c0017234:	57                   	push   edi
c0017235:	56                   	push   esi
c0017236:	53                   	push   ebx
c0017237:	83 ec 68             	sub    esp,0x68
c001723a:	8b 35 54 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025454
c0017240:	68 14 01 00 00       	push   0x114
c0017245:	e8 b4 7d ff ff       	call   c000effe <operator new(unsigned long)>
c001724a:	83 c4 0c             	add    esp,0xc
c001724d:	89 c3                	mov    ebx,eax
c001724f:	56                   	push   esi
c0017250:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017254:	50                   	push   eax
c0017255:	e8 10 84 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c001725a:	5e                   	pop    esi
c001725b:	5f                   	pop    edi
c001725c:	6a 01                	push   0x1
c001725e:	53                   	push   ebx
c001725f:	e8 6a 84 ff ff       	call   c000f6ce <File::open(FileOpenMode)>
c0017264:	83 c4 10             	add    esp,0x10
c0017267:	31 d2                	xor    edx,edx
c0017269:	85 c0                	test   eax,eax
c001726b:	0f 85 79 02 00 00    	jne    c00174ea <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017271:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017279:	83 ec 0c             	sub    esp,0xc
c001727c:	6a 34                	push   0x34
c001727e:	e8 7e 4c ff ff       	call   c000bf01 <malloc>
c0017283:	59                   	pop    ecx
c0017284:	89 c7                	mov    edi,eax
c0017286:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017288:	8d 74 24 34          	lea    esi,[esp+0x34]
c001728c:	56                   	push   esi
c001728d:	57                   	push   edi
c001728e:	6a 00                	push   0x0
c0017290:	6a 34                	push   0x34
c0017292:	53                   	push   ebx
c0017293:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017296:	83 c4 20             	add    esp,0x20
c0017299:	85 c0                	test   eax,eax
c001729b:	74 17                	je     c00172b4 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001729d:	83 ec 0c             	sub    esp,0xc
c00172a0:	68 07 25 02 c0       	push   0xc0022507
c00172a5:	e8 48 e0 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	31 d2                	xor    edx,edx
c00172af:	e9 36 02 00 00       	jmp    c00174ea <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00172b4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00172ba:	75 e1                	jne    c001729d <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00172bc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00172bf:	85 c0                	test   eax,eax
c00172c1:	74 da                	je     c001729d <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00172c3:	52                   	push   edx
c00172c4:	31 d2                	xor    edx,edx
c00172c6:	52                   	push   edx
c00172c7:	50                   	push   eax
c00172c8:	53                   	push   ebx
c00172c9:	e8 be 84 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c00172ce:	83 c4 10             	add    esp,0x10
c00172d1:	85 c0                	test   eax,eax
c00172d3:	75 c8                	jne    c001729d <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00172d5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172dd:	0f af c2             	imul   eax,edx
c00172e0:	83 ec 0c             	sub    esp,0xc
c00172e3:	31 ed                	xor    ebp,ebp
c00172e5:	50                   	push   eax
c00172e6:	e8 16 4c ff ff       	call   c000bf01 <malloc>
c00172eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00172ef:	89 34 24             	mov    DWORD PTR [esp],esi
c00172f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172f6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172fa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172fe:	0f af c2             	imul   eax,edx
c0017301:	99                   	cdq    
c0017302:	52                   	push   edx
c0017303:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017305:	50                   	push   eax
c0017306:	53                   	push   ebx
c0017307:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001730a:	83 c4 20             	add    esp,0x20
c001730d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017315:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001731d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017325:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001732d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017331:	0f 86 aa 00 00 00    	jbe    c00173e1 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017337:	0f b7 f5             	movzx  esi,bp
c001733a:	6b f6 28             	imul   esi,esi,0x28
c001733d:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017341:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017344:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017348:	50                   	push   eax
c0017349:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001734d:	6b c0 28             	imul   eax,eax,0x28
c0017350:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017354:	8b 16                	mov    edx,DWORD PTR [esi]
c0017356:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001735a:	89 d0                	mov    eax,edx
c001735c:	31 d2                	xor    edx,edx
c001735e:	52                   	push   edx
c001735f:	50                   	push   eax
c0017360:	53                   	push   ebx
c0017361:	e8 26 84 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c0017366:	83 c4 0c             	add    esp,0xc
c0017369:	6a 20                	push   0x20
c001736b:	6a 00                	push   0x0
c001736d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017371:	52                   	push   edx
c0017372:	e8 91 92 fe ff       	call   c0000608 <memset>
c0017377:	58                   	pop    eax
c0017378:	8b 03                	mov    eax,DWORD PTR [ebx]
c001737a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001737e:	51                   	push   ecx
c001737f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017383:	52                   	push   edx
c0017384:	6a 00                	push   0x0
c0017386:	6a 1f                	push   0x1f
c0017388:	53                   	push   ebx
c0017389:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001738c:	83 c4 18             	add    esp,0x18
c001738f:	68 1e 25 02 c0       	push   0xc002251e
c0017394:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017398:	52                   	push   edx
c0017399:	e8 5a 93 fe ff       	call   c00006f8 <strcmp>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	85 c0                	test   eax,eax
c00173a3:	75 0f                	jne    c00173b4 <Thr::loadKernelSymbolTable(char const*)+0x181>
c00173a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00173a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173b4:	50                   	push   eax
c00173b5:	50                   	push   eax
c00173b6:	68 26 25 02 c0       	push   0xc0022526
c00173bb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00173bf:	50                   	push   eax
c00173c0:	e8 33 93 fe ff       	call   c00006f8 <strcmp>
c00173c5:	83 c4 10             	add    esp,0x10
c00173c8:	85 c0                	test   eax,eax
c00173ca:	75 0f                	jne    c00173db <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c00173cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00173cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00173db:	45                   	inc    ebp
c00173dc:	e9 4c ff ff ff       	jmp    c001732d <Thr::loadKernelSymbolTable(char const*)+0xfa>
c00173e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00173e6:	75 10                	jne    c00173f8 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	68 2e 25 02 c0       	push   0xc002252e
c00173f0:	e8 fd de ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c00173f5:	83 c4 10             	add    esp,0x10
c00173f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00173fd:	75 10                	jne    c001740f <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00173ff:	83 ec 0c             	sub    esp,0xc
c0017402:	68 2e 25 02 c0       	push   0xc002252e
c0017407:	e8 e6 de ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001740c:	83 c4 10             	add    esp,0x10
c001740f:	31 d2                	xor    edx,edx
c0017411:	50                   	push   eax
c0017412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017416:	52                   	push   edx
c0017417:	50                   	push   eax
c0017418:	53                   	push   ebx
c0017419:	e8 6e 83 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c001741e:	5a                   	pop    edx
c001741f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017423:	e8 d9 4a ff ff       	call   c000bf01 <malloc>
c0017428:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017430:	89 c1                	mov    ecx,eax
c0017432:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017436:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001743a:	5e                   	pop    esi
c001743b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001743d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017441:	55                   	push   ebp
c0017442:	51                   	push   ecx
c0017443:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017447:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001744f:	53                   	push   ebx
c0017450:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017453:	83 c4 14             	add    esp,0x14
c0017456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001745a:	e8 a2 4a ff ff       	call   c000bf01 <malloc>
c001745f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017462:	89 c6                	mov    esi,eax
c0017464:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017466:	56                   	push   esi
c0017467:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001746f:	53                   	push   ebx
c0017470:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017473:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017477:	8b 15 00 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025400
c001747d:	c1 e8 04             	shr    eax,0x4
c0017480:	83 c4 1c             	add    esp,0x1c
c0017483:	89 04 95 80 52 02 c0 	mov    DWORD PTR [edx*4-0x3ffdad80],eax
c001748a:	31 d2                	xor    edx,edx
c001748c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017490:	52                   	push   edx
c0017491:	50                   	push   eax
c0017492:	53                   	push   ebx
c0017493:	e8 f4 82 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c0017498:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001749b:	31 d2                	xor    edx,edx
c001749d:	56                   	push   esi
c001749e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174a2:	52                   	push   edx
c00174a3:	50                   	push   eax
c00174a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174a6:	53                   	push   ebx
c00174a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174aa:	83 c4 14             	add    esp,0x14
c00174ad:	53                   	push   ebx
c00174ae:	e8 79 82 ff ff       	call   c000f72c <File::close()>
c00174b3:	5d                   	pop    ebp
c00174b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174b8:	e8 54 4a ff ff       	call   c000bf11 <free>
c00174bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174c0:	e8 4c 4a ff ff       	call   c000bf11 <free>
c00174c5:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c00174ca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00174ce:	8d 50 01             	lea    edx,[eax+0x1]
c00174d1:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c00174d7:	89 0c 85 80 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac80],ecx
c00174de:	89 34 85 00 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad00],esi
c00174e5:	83 c4 10             	add    esp,0x10
c00174e8:	b2 01                	mov    dl,0x1
c00174ea:	83 c4 5c             	add    esp,0x5c
c00174ed:	88 d0                	mov    al,dl
c00174ef:	5b                   	pop    ebx
c00174f0:	5e                   	pop    esi
c00174f1:	5f                   	pop    edi
c00174f2:	5d                   	pop    ebp
c00174f3:	c3                   	ret    

c00174f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00174f4:	55                   	push   ebp
c00174f5:	57                   	push   edi
c00174f6:	56                   	push   esi
c00174f7:	53                   	push   ebx
c00174f8:	81 ec 68 03 00 00    	sub    esp,0x368
c00174fe:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0017504:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001750b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001750f:	68 14 01 00 00       	push   0x114
c0017514:	e8 e5 7a ff ff       	call   c000effe <operator new(unsigned long)>
c0017519:	83 c4 0c             	add    esp,0xc
c001751c:	53                   	push   ebx
c001751d:	89 c7                	mov    edi,eax
c001751f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017526:	50                   	push   eax
c0017527:	e8 3e 81 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c001752c:	5e                   	pop    esi
c001752d:	5d                   	pop    ebp
c001752e:	6a 01                	push   0x1
c0017530:	57                   	push   edi
c0017531:	e8 98 81 ff ff       	call   c000f6ce <File::open(FileOpenMode)>
c0017536:	83 c4 10             	add    esp,0x10
c0017539:	85 c0                	test   eax,eax
c001753b:	0f 85 10 07 00 00    	jne    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017541:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	6a 34                	push   0x34
c001754e:	e8 ae 49 ff ff       	call   c000bf01 <malloc>
c0017553:	5b                   	pop    ebx
c0017554:	89 c5                	mov    ebp,eax
c0017556:	8b 07                	mov    eax,DWORD PTR [edi]
c0017558:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001755c:	53                   	push   ebx
c001755d:	55                   	push   ebp
c001755e:	6a 00                	push   0x0
c0017560:	6a 34                	push   0x34
c0017562:	57                   	push   edi
c0017563:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017566:	83 c4 20             	add    esp,0x20
c0017569:	85 c0                	test   eax,eax
c001756b:	0f 85 e0 06 00 00    	jne    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017571:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017578:	0f 85 d3 06 00 00    	jne    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001757e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017581:	85 c0                	test   eax,eax
c0017583:	0f 84 c8 06 00 00    	je     c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017589:	31 d2                	xor    edx,edx
c001758b:	51                   	push   ecx
c001758c:	52                   	push   edx
c001758d:	50                   	push   eax
c001758e:	57                   	push   edi
c001758f:	e8 f8 81 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c0017594:	83 c4 10             	add    esp,0x10
c0017597:	85 c0                	test   eax,eax
c0017599:	0f 85 b2 06 00 00    	jne    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001759f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00175a2:	83 ec 0c             	sub    esp,0xc
c00175a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00175a9:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00175ad:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00175b1:	0f af c2             	imul   eax,edx
c00175b4:	50                   	push   eax
c00175b5:	e8 47 49 ff ff       	call   c000bf01 <malloc>
c00175ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175c5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00175c9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00175cd:	0f af c2             	imul   eax,edx
c00175d0:	99                   	cdq    
c00175d1:	52                   	push   edx
c00175d2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00175d4:	50                   	push   eax
c00175d5:	57                   	push   edi
c00175d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175d9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00175dc:	83 c4 20             	add    esp,0x20
c00175df:	85 c0                	test   eax,eax
c00175e1:	0f 84 6a 06 00 00    	je     c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00175e7:	52                   	push   edx
c00175e8:	31 d2                	xor    edx,edx
c00175ea:	52                   	push   edx
c00175eb:	50                   	push   eax
c00175ec:	57                   	push   edi
c00175ed:	e8 9a 81 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c00175f2:	83 c4 10             	add    esp,0x10
c00175f5:	85 c0                	test   eax,eax
c00175f7:	0f 85 54 06 00 00    	jne    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00175fd:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017601:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017605:	0f af c2             	imul   eax,edx
c0017608:	83 ec 0c             	sub    esp,0xc
c001760b:	31 f6                	xor    esi,esi
c001760d:	50                   	push   eax
c001760e:	e8 ee 48 ff ff       	call   c000bf01 <malloc>
c0017613:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001761a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001761e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017622:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017626:	0f af c2             	imul   eax,edx
c0017629:	99                   	cdq    
c001762a:	52                   	push   edx
c001762b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001762d:	50                   	push   eax
c001762e:	57                   	push   edi
c001762f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017632:	83 c4 20             	add    esp,0x20
c0017635:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017639:	0f 86 af 00 00 00    	jbe    c00176ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001763f:	0f b7 de             	movzx  ebx,si
c0017642:	c1 e3 05             	shl    ebx,0x5
c0017645:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017649:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001764c:	0f 85 96 00 00 00    	jne    c00176e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017652:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017655:	31 d2                	xor    edx,edx
c0017657:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001765b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001765e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017662:	50                   	push   eax
c0017663:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017666:	52                   	push   edx
c0017667:	50                   	push   eax
c0017668:	57                   	push   edi
c0017669:	e8 1e 81 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	85 c0                	test   eax,eax
c0017673:	0f 85 d8 05 00 00    	jne    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017679:	52                   	push   edx
c001767a:	52                   	push   edx
c001767b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001767f:	68 48 25 02 c0       	push   0xc0022548
c0017684:	e8 aa 7a ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0017689:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017690:	31 d2                	xor    edx,edx
c0017692:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017696:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001769a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001769e:	59                   	pop    ecx
c001769f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00176a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176a8:	50                   	push   eax
c00176a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176b1:	52                   	push   edx
c00176b2:	50                   	push   eax
c00176b3:	57                   	push   edi
c00176b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176ba:	83 c4 18             	add    esp,0x18
c00176bd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00176c0:	50                   	push   eax
c00176c1:	68 6c 25 02 c0       	push   0xc002256c
c00176c6:	e8 68 7a ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00176cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176ce:	83 c4 0c             	add    esp,0xc
c00176d1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00176d4:	50                   	push   eax
c00176d5:	6a 00                	push   0x0
c00176d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176db:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00176df:	50                   	push   eax
c00176e0:	e8 23 8f fe ff       	call   c0000608 <memset>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	46                   	inc    esi
c00176e9:	e9 47 ff ff ff       	jmp    c0017635 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c00176ee:	50                   	push   eax
c00176ef:	31 db                	xor    ebx,ebx
c00176f1:	68 00 01 00 00       	push   0x100
c00176f6:	6a 00                	push   0x0
c00176f8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00176fc:	50                   	push   eax
c00176fd:	e8 06 8f fe ff       	call   c0000608 <memset>
c0017702:	83 c4 0c             	add    esp,0xc
c0017705:	68 00 01 00 00       	push   0x100
c001770a:	6a 00                	push   0x0
c001770c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017713:	50                   	push   eax
c0017714:	e8 ef 8e fe ff       	call   c0000608 <memset>
c0017719:	83 c4 10             	add    esp,0x10
c001771c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017724:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001772c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017734:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001773c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017744:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017748:	0f 86 2f 01 00 00    	jbe    c001787d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001774e:	0f b7 f3             	movzx  esi,bx
c0017751:	6b f6 28             	imul   esi,esi,0x28
c0017754:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017758:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001775b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001775f:	50                   	push   eax
c0017760:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017764:	6b d2 28             	imul   edx,edx,0x28
c0017767:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001776b:	8b 06                	mov    eax,DWORD PTR [esi]
c001776d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017771:	31 d2                	xor    edx,edx
c0017773:	52                   	push   edx
c0017774:	50                   	push   eax
c0017775:	57                   	push   edi
c0017776:	e8 11 80 ff ff       	call   c000f78c <File::seek(unsigned long long)>
c001777b:	83 c4 0c             	add    esp,0xc
c001777e:	6a 20                	push   0x20
c0017780:	6a 00                	push   0x0
c0017782:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017789:	51                   	push   ecx
c001778a:	e8 79 8e fe ff       	call   c0000608 <memset>
c001778f:	58                   	pop    eax
c0017790:	8b 07                	mov    eax,DWORD PTR [edi]
c0017792:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017796:	52                   	push   edx
c0017797:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001779e:	51                   	push   ecx
c001779f:	6a 00                	push   0x0
c00177a1:	6a 1f                	push   0x1f
c00177a3:	57                   	push   edi
c00177a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00177a7:	83 c4 1c             	add    esp,0x1c
c00177aa:	6a 09                	push   0x9
c00177ac:	68 89 25 02 c0       	push   0xc0022589
c00177b1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177b8:	51                   	push   ecx
c00177b9:	e8 b1 8d fe ff       	call   c000056f <memcmp>
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	85 c0                	test   eax,eax
c00177c3:	75 21                	jne    c00177e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c00177c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177cd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177d1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00177d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00177d8:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00177df:	89 c8                	mov    eax,ecx
c00177e1:	40                   	inc    eax
c00177e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177e6:	50                   	push   eax
c00177e7:	6a 09                	push   0x9
c00177e9:	68 93 25 02 c0       	push   0xc0022593
c00177ee:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177f5:	50                   	push   eax
c00177f6:	e8 74 8d fe ff       	call   c000056f <memcmp>
c00177fb:	83 c4 10             	add    esp,0x10
c00177fe:	85 c0                	test   eax,eax
c0017800:	75 21                	jne    c0017823 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017806:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001780a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001780e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017812:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017815:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001781c:	89 c8                	mov    eax,ecx
c001781e:	40                   	inc    eax
c001781f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017823:	50                   	push   eax
c0017824:	50                   	push   eax
c0017825:	68 1e 25 02 c0       	push   0xc002251e
c001782a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017831:	50                   	push   eax
c0017832:	e8 c1 8e fe ff       	call   c00006f8 <strcmp>
c0017837:	83 c4 10             	add    esp,0x10
c001783a:	85 c0                	test   eax,eax
c001783c:	75 0f                	jne    c001784d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001783e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017841:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017849:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001784d:	50                   	push   eax
c001784e:	50                   	push   eax
c001784f:	68 26 25 02 c0       	push   0xc0022526
c0017854:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001785b:	50                   	push   eax
c001785c:	e8 97 8e fe ff       	call   c00006f8 <strcmp>
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	85 c0                	test   eax,eax
c0017866:	75 0f                	jne    c0017877 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017868:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001786b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017873:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017877:	43                   	inc    ebx
c0017878:	e9 c7 fe ff ff       	jmp    c0017744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001787d:	31 d2                	xor    edx,edx
c001787f:	50                   	push   eax
c0017880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017884:	52                   	push   edx
c0017885:	50                   	push   eax
c0017886:	57                   	push   edi
c0017887:	e8 00 7f ff ff       	call   c000f78c <File::seek(unsigned long long)>
c001788c:	5a                   	pop    edx
c001788d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017891:	e8 6b 46 ff ff       	call   c000bf01 <malloc>
c0017896:	31 d2                	xor    edx,edx
c0017898:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001789c:	59                   	pop    ecx
c001789d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001789f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00178a3:	53                   	push   ebx
c00178a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178ac:	52                   	push   edx
c00178ad:	50                   	push   eax
c00178ae:	57                   	push   edi
c00178af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178b2:	83 c4 14             	add    esp,0x14
c00178b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178b9:	e8 43 46 ff ff       	call   c000bf01 <malloc>
c00178be:	31 d2                	xor    edx,edx
c00178c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178c4:	83 c4 0c             	add    esp,0xc
c00178c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178cb:	52                   	push   edx
c00178cc:	50                   	push   eax
c00178cd:	57                   	push   edi
c00178ce:	e8 b9 7e ff ff       	call   c000f78c <File::seek(unsigned long long)>
c00178d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178d6:	31 d2                	xor    edx,edx
c00178d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178e0:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00178e2:	52                   	push   edx
c00178e3:	50                   	push   eax
c00178e4:	57                   	push   edi
c00178e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178e8:	83 c4 20             	add    esp,0x20
c00178eb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00178f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178f7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c00178fb:	0f 84 54 03 00 00    	je     c0017c55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017901:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017908:	31 d2                	xor    edx,edx
c001790a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001790e:	c1 e8 03             	shr    eax,0x3
c0017911:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017915:	50                   	push   eax
c0017916:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001791a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001791e:	52                   	push   edx
c001791f:	50                   	push   eax
c0017920:	57                   	push   edi
c0017921:	e8 66 7e ff ff       	call   c000f78c <File::seek(unsigned long long)>
c0017926:	58                   	pop    eax
c0017927:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017932:	e8 ca 45 ff ff       	call   c000bf01 <malloc>
c0017937:	31 d2                	xor    edx,edx
c0017939:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001793d:	58                   	pop    eax
c001793e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017940:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017944:	50                   	push   eax
c0017945:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017949:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001794d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017954:	52                   	push   edx
c0017955:	50                   	push   eax
c0017956:	57                   	push   edi
c0017957:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001795a:	83 c4 20             	add    esp,0x20
c001795d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017965:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017969:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001796d:	0f 8d c6 02 00 00    	jge    c0017c39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017973:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001797b:	31 db                	xor    ebx,ebx
c001797d:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017980:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017984:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017988:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001798c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017990:	c1 e8 08             	shr    eax,0x8
c0017993:	89 c6                	mov    esi,eax
c0017995:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017999:	c1 e6 04             	shl    esi,0x4
c001799c:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00179a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00179a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179a7:	85 c0                	test   eax,eax
c00179a9:	0f 85 17 01 00 00    	jne    c0017ac6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00179af:	83 ec 0c             	sub    esp,0xc
c00179b2:	b3 01                	mov    bl,0x1
c00179b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179b8:	03 06                	add    eax,DWORD PTR [esi]
c00179ba:	50                   	push   eax
c00179bb:	e8 24 f8 ff ff       	call   c00171e4 <Thr::getAddressOfKernelSymbol(char const*)>
c00179c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00179cc:	0f 85 f4 00 00 00    	jne    c0017ac6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00179d2:	50                   	push   eax
c00179d3:	50                   	push   eax
c00179d4:	68 9d 25 02 c0       	push   0xc002259d
c00179d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00179dd:	03 06                	add    eax,DWORD PTR [esi]
c00179df:	50                   	push   eax
c00179e0:	e8 13 8d fe ff       	call   c00006f8 <strcmp>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	85 c0                	test   eax,eax
c00179ea:	75 0a                	jne    c00179f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c00179ec:	b8 bc ed 01 c0       	mov    eax,0xc001edbc
c00179f1:	e9 ca 00 00 00       	jmp    c0017ac0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c00179f6:	50                   	push   eax
c00179f7:	50                   	push   eax
c00179f8:	68 a7 25 02 c0       	push   0xc00225a7
c00179fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a01:	03 06                	add    eax,DWORD PTR [esi]
c0017a03:	50                   	push   eax
c0017a04:	e8 ef 8c fe ff       	call   c00006f8 <strcmp>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	85 c0                	test   eax,eax
c0017a0e:	75 0a                	jne    c0017a1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017a10:	b8 f0 ea 01 c0       	mov    eax,0xc001eaf0
c0017a15:	e9 a6 00 00 00       	jmp    c0017ac0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017a1a:	53                   	push   ebx
c0017a1b:	53                   	push   ebx
c0017a1c:	68 b0 25 02 c0       	push   0xc00225b0
c0017a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a25:	03 06                	add    eax,DWORD PTR [esi]
c0017a27:	50                   	push   eax
c0017a28:	e8 cb 8c fe ff       	call   c00006f8 <strcmp>
c0017a2d:	83 c4 10             	add    esp,0x10
c0017a30:	85 c0                	test   eax,eax
c0017a32:	75 0a                	jne    c0017a3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017a34:	b8 bc ee 01 c0       	mov    eax,0xc001eebc
c0017a39:	e9 82 00 00 00       	jmp    c0017ac0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017a3e:	51                   	push   ecx
c0017a3f:	51                   	push   ecx
c0017a40:	68 ba 25 02 c0       	push   0xc00225ba
c0017a45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a49:	03 06                	add    eax,DWORD PTR [esi]
c0017a4b:	50                   	push   eax
c0017a4c:	e8 a7 8c fe ff       	call   c00006f8 <strcmp>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	85 c0                	test   eax,eax
c0017a56:	74 63                	je     c0017abb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017a58:	50                   	push   eax
c0017a59:	50                   	push   eax
c0017a5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a5e:	03 06                	add    eax,DWORD PTR [esi]
c0017a60:	50                   	push   eax
c0017a61:	68 c3 25 02 c0       	push   0xc00225c3
c0017a66:	e8 c8 76 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0017a6b:	58                   	pop    eax
c0017a6c:	5a                   	pop    edx
c0017a6d:	68 dd 25 02 c0       	push   0xc00225dd
c0017a72:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017a79:	53                   	push   ebx
c0017a7a:	e8 28 8c fe ff       	call   c00006a7 <strcpy>
c0017a7f:	59                   	pop    ecx
c0017a80:	58                   	pop    eax
c0017a81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a85:	03 06                	add    eax,DWORD PTR [esi]
c0017a87:	50                   	push   eax
c0017a88:	53                   	push   ebx
c0017a89:	e8 d0 8c fe ff       	call   c000075e <strcat>
c0017a8e:	58                   	pop    eax
c0017a8f:	5a                   	pop    edx
c0017a90:	68 73 26 02 c0       	push   0xc0022673
c0017a95:	53                   	push   ebx
c0017a96:	e8 c3 8c fe ff       	call   c000075e <strcat>
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017aa3:	0f 84 4b 01 00 00    	je     c0017bf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017aa9:	83 ec 0c             	sub    esp,0xc
c0017aac:	53                   	push   ebx
c0017aad:	e8 40 d8 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017ab9:	eb 0b                	jmp    c0017ac6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017abb:	b8 3c ec 01 c0       	mov    eax,0xc001ec3c
c0017ac0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ac4:	b3 01                	mov    bl,0x1
c0017ac6:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017acb:	0f 85 80 00 00 00    	jne    c0017b51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0017ad1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017ad8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017adc:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017ae0:	01 ce                	add    esi,ecx
c0017ae2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017aea:	0f 94 c2             	sete   dl
c0017aed:	8b 06                	mov    eax,DWORD PTR [esi]
c0017aef:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017af7:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017afc:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017b00:	84 db                	test   bl,bl
c0017b02:	74 31                	je     c0017b35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0017b04:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017b08:	01 c3                	add    ebx,eax
c0017b0a:	84 d2                	test   dl,dl
c0017b0c:	75 0a                	jne    c0017b18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0017b0e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b12:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017b16:	76 32                	jbe    c0017b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017b18:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017b1d:	0f 84 d1 00 00 00    	je     c0017bf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017b23:	83 ec 0c             	sub    esp,0xc
c0017b26:	68 f4 25 02 c0       	push   0xc00225f4
c0017b2b:	e8 c2 d7 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	eb 15                	jmp    c0017b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017b35:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0017b38:	84 d2                	test   dl,dl
c0017b3a:	75 0e                	jne    c0017b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017b3c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b40:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017b44:	77 04                	ja     c0017b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017b46:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017b4a:	89 1e                	mov    DWORD PTR [esi],ebx
c0017b4c:	e9 df 00 00 00       	jmp    c0017c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017b51:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017b56:	75 6e                	jne    c0017bc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c0017b58:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017b5f:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017b63:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017b67:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017b6f:	74 17                	je     c0017b88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017b71:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017b79:	74 0d                	je     c0017b88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017b7b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b7f:	83 e8 04             	sub    eax,0x4
c0017b82:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017b86:	76 17                	jbe    c0017b9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017b88:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017b8d:	74 65                	je     c0017bf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017b8f:	83 ec 0c             	sub    esp,0xc
c0017b92:	68 10 26 02 c0       	push   0xc0022610
c0017b97:	e8 56 d7 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017ba1:	84 db                	test   bl,bl
c0017ba3:	74 13                	je     c0017bb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0017ba5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba9:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017bb0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017bb4:	01 d0                	add    eax,edx
c0017bb6:	eb 06                	jmp    c0017bbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0017bb8:	89 d0                	mov    eax,edx
c0017bba:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017bbe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017bc2:	89 06                	mov    DWORD PTR [esi],eax
c0017bc4:	eb 6a                	jmp    c0017c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017bc6:	50                   	push   eax
c0017bc7:	50                   	push   eax
c0017bc8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017bcd:	50                   	push   eax
c0017bce:	68 2c 26 02 c0       	push   0xc002262c
c0017bd3:	e8 5b 75 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017be0:	74 12                	je     c0017bf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017be2:	83 ec 0c             	sub    esp,0xc
c0017be5:	68 37 26 02 c0       	push   0xc0022637
c0017bea:	e8 03 d7 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	eb 3c                	jmp    c0017c30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017bf4:	83 ec 0c             	sub    esp,0xc
c0017bf7:	57                   	push   edi
c0017bf8:	e8 2f 7b ff ff       	call   c000f72c <File::close()>
c0017bfd:	8b 07                	mov    eax,DWORD PTR [edi]
c0017bff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c05:	59                   	pop    ecx
c0017c06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c0a:	e8 02 43 ff ff       	call   c000bf11 <free>
c0017c0f:	5b                   	pop    ebx
c0017c10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c14:	e8 f8 42 ff ff       	call   c000bf11 <free>
c0017c19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c1c:	e8 f0 42 ff ff       	call   c000bf11 <free>
c0017c21:	5e                   	pop    esi
c0017c22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017c26:	e8 e6 42 ff ff       	call   c000bf11 <free>
c0017c2b:	83 c4 10             	add    esp,0x10
c0017c2e:	eb 21                	jmp    c0017c51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c30:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017c34:	e9 2c fd ff ff       	jmp    c0017965 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0017c39:	83 ec 0c             	sub    esp,0xc
c0017c3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c40:	e8 cc 42 ff ff       	call   c000bf11 <free>
c0017c45:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	e9 a2 fc ff ff       	jmp    c00178f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0017c51:	31 c0                	xor    eax,eax
c0017c53:	eb 32                	jmp    c0017c87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0017c55:	83 ec 0c             	sub    esp,0xc
c0017c58:	57                   	push   edi
c0017c59:	e8 ce 7a ff ff       	call   c000f72c <File::close()>
c0017c5e:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c66:	58                   	pop    eax
c0017c67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c6b:	e8 a1 42 ff ff       	call   c000bf11 <free>
c0017c70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c73:	e8 99 42 ff ff       	call   c000bf11 <free>
c0017c78:	5a                   	pop    edx
c0017c79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017c7d:	e8 8f 42 ff ff       	call   c000bf11 <free>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	b0 01                	mov    al,0x1
c0017c87:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017c8d:	5b                   	pop    ebx
c0017c8e:	5e                   	pop    esi
c0017c8f:	5f                   	pop    edi
c0017c90:	5d                   	pop    ebp
c0017c91:	c3                   	ret    

c0017c92 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017c92:	56                   	push   esi
c0017c93:	31 d2                	xor    edx,edx
c0017c95:	53                   	push   ebx
c0017c96:	8b 1d 60 4c 02 c0    	mov    ebx,DWORD PTR ds:0xc0024c60
c0017c9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ca0:	39 d3                	cmp    ebx,edx
c0017ca2:	7e 1b                	jle    c0017cbf <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017ca4:	8b 04 95 80 4e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb180]
c0017cab:	39 c8                	cmp    eax,ecx
c0017cad:	77 0d                	ja     c0017cbc <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017caf:	8b 34 95 80 4c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb380]
c0017cb6:	01 c6                	add    esi,eax
c0017cb8:	39 ce                	cmp    esi,ecx
c0017cba:	77 05                	ja     c0017cc1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017cbc:	42                   	inc    edx
c0017cbd:	eb e1                	jmp    c0017ca0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017cbf:	31 c0                	xor    eax,eax
c0017cc1:	5b                   	pop    ebx
c0017cc2:	5e                   	pop    esi
c0017cc3:	c3                   	ret    

c0017cc4 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017cc4:	53                   	push   ebx
c0017cc5:	31 c0                	xor    eax,eax
c0017cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017ccb:	8b 1d 60 4c 02 c0    	mov    ebx,DWORD PTR ds:0xc0024c60
c0017cd1:	39 c3                	cmp    ebx,eax
c0017cd3:	7e 22                	jle    c0017cf7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017cd5:	8b 14 85 80 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb180]
c0017cdc:	39 ca                	cmp    edx,ecx
c0017cde:	77 14                	ja     c0017cf4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017ce0:	03 14 85 80 4c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb380]
c0017ce7:	39 ca                	cmp    edx,ecx
c0017ce9:	76 09                	jbe    c0017cf4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017ceb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0017cf2:	eb 05                	jmp    c0017cf9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017cf4:	40                   	inc    eax
c0017cf5:	eb da                	jmp    c0017cd1 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017cf7:	31 c0                	xor    eax,eax
c0017cf9:	5b                   	pop    ebx
c0017cfa:	c3                   	ret    

c0017cfb <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017cfb:	53                   	push   ebx
c0017cfc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d00:	53                   	push   ebx
c0017d01:	e8 8c ff ff ff       	call   c0017c92 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017d06:	5a                   	pop    edx
c0017d07:	31 d2                	xor    edx,edx
c0017d09:	85 c0                	test   eax,eax
c0017d0b:	74 04                	je     c0017d11 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017d0d:	89 da                	mov    edx,ebx
c0017d0f:	29 c2                	sub    edx,eax
c0017d11:	89 d0                	mov    eax,edx
c0017d13:	5b                   	pop    ebx
c0017d14:	c3                   	ret    

c0017d15 <Thr::loadDLL(char const*, bool)>:
c0017d15:	55                   	push   ebp
c0017d16:	57                   	push   edi
c0017d17:	56                   	push   esi
c0017d18:	53                   	push   ebx
c0017d19:	81 ec 34 01 00 00    	sub    esp,0x134
c0017d1f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017d26:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0017d2d:	56                   	push   esi
c0017d2e:	68 4f 26 02 c0       	push   0xc002264f
c0017d33:	e8 fb 73 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0017d38:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d3f:	e8 ba 72 ff ff       	call   c000effe <operator new(unsigned long)>
c0017d44:	83 c4 0c             	add    esp,0xc
c0017d47:	89 c3                	mov    ebx,eax
c0017d49:	ff 35 54 54 02 c0    	push   DWORD PTR ds:0xc0025454
c0017d4f:	56                   	push   esi
c0017d50:	50                   	push   eax
c0017d51:	e8 14 79 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0017d56:	83 c4 0c             	add    esp,0xc
c0017d59:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017d5d:	50                   	push   eax
c0017d5e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017d62:	50                   	push   eax
c0017d63:	53                   	push   ebx
c0017d64:	e8 11 7c ff ff       	call   c000f97a <File::stat(unsigned long long*, bool*)>
c0017d69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017d79:	75 0a                	jne    c0017d85 <Thr::loadDLL(char const*, bool)+0x70>
c0017d7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d7f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017d83:	75 3c                	jne    c0017dc1 <Thr::loadDLL(char const*, bool)+0xac>
c0017d85:	89 e8                	mov    eax,ebp
c0017d87:	84 c0                	test   al,al
c0017d89:	0f 84 3d 01 00 00    	je     c0017ecc <Thr::loadDLL(char const*, bool)+0x1b7>
c0017d8f:	50                   	push   eax
c0017d90:	50                   	push   eax
c0017d91:	68 60 26 02 c0       	push   0xc0022660
c0017d96:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017d9a:	53                   	push   ebx
c0017d9b:	e8 07 89 fe ff       	call   c00006a7 <strcpy>
c0017da0:	58                   	pop    eax
c0017da1:	5a                   	pop    edx
c0017da2:	56                   	push   esi
c0017da3:	53                   	push   ebx
c0017da4:	e8 b5 89 fe ff       	call   c000075e <strcat>
c0017da9:	59                   	pop    ecx
c0017daa:	5f                   	pop    edi
c0017dab:	68 73 26 02 c0       	push   0xc0022673
c0017db0:	53                   	push   ebx
c0017db1:	e8 a8 89 fe ff       	call   c000075e <strcat>
c0017db6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017db9:	e8 34 d5 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	e8 df 64 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c0017dc6:	51                   	push   ecx
c0017dc7:	6a 03                	push   0x3
c0017dc9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017dcd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017dd1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0017dd7:	83 d3 00             	adc    ebx,0x0
c0017dda:	89 ca                	mov    edx,ecx
c0017ddc:	89 d1                	mov    ecx,edx
c0017dde:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0017de2:	51                   	push   ecx
c0017de3:	50                   	push   eax
c0017de4:	e8 fd 6a ff ff       	call   c000e8e6 <VAS::allocatePages(int, int)>
c0017de9:	89 34 24             	mov    DWORD PTR [esp],esi
c0017dec:	89 c3                	mov    ebx,eax
c0017dee:	e8 32 88 fe ff       	call   c0000625 <strlen>
c0017df3:	8b 3d 60 4c 02 c0    	mov    edi,DWORD PTR ds:0xc0024c60
c0017df9:	40                   	inc    eax
c0017dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dfd:	e8 ff 40 ff ff       	call   c000bf01 <malloc>
c0017e02:	89 04 bd 80 50 02 c0 	mov    DWORD PTR [edi*4-0x3ffdaf80],eax
c0017e09:	5f                   	pop    edi
c0017e0a:	58                   	pop    eax
c0017e0b:	a1 60 4c 02 c0       	mov    eax,ds:0xc0024c60
c0017e10:	56                   	push   esi
c0017e11:	ff 34 85 80 50 02 c0 	push   DWORD PTR [eax*4-0x3ffdaf80]
c0017e18:	e8 8a 88 fe ff       	call   c00006a7 <strcpy>
c0017e1d:	a1 60 4c 02 c0       	mov    eax,ds:0xc0024c60
c0017e22:	8d 50 01             	lea    edx,[eax+0x1]
c0017e25:	89 1c 85 80 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb180],ebx
c0017e2c:	89 15 60 4c 02 c0    	mov    DWORD PTR ds:0xc0024c60,edx
c0017e32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e36:	83 c4 0c             	add    esp,0xc
c0017e39:	89 14 85 80 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb380],edx
c0017e40:	6a 01                	push   0x1
c0017e42:	53                   	push   ebx
c0017e43:	56                   	push   esi
c0017e44:	e8 ab f6 ff ff       	call   c00174f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017e49:	83 c4 10             	add    esp,0x10
c0017e4c:	89 c7                	mov    edi,eax
c0017e4e:	fe c8                	dec    al
c0017e50:	74 16                	je     c0017e68 <Thr::loadDLL(char const*, bool)+0x153>
c0017e52:	89 e8                	mov    eax,ebp
c0017e54:	84 c0                	test   al,al
c0017e56:	74 10                	je     c0017e68 <Thr::loadDLL(char const*, bool)+0x153>
c0017e58:	83 ec 0c             	sub    esp,0xc
c0017e5b:	68 75 26 02 c0       	push   0xc0022675
c0017e60:	e8 8d d4 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	31 f6                	xor    esi,esi
c0017e6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e72:	05 ff 0f 00 00       	add    eax,0xfff
c0017e77:	83 d2 00             	adc    edx,0x0
c0017e7a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017e7e:	c1 ea 0c             	shr    edx,0xc
c0017e81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e89:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0017e8d:	ba 00 00 00 00       	mov    edx,0x0
c0017e92:	89 d0                	mov    eax,edx
c0017e94:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0017e98:	73 2c                	jae    c0017ec6 <Thr::loadDLL(char const*, bool)+0x1b1>
c0017e9a:	e8 06 64 ff ff       	call   c000e2a5 <Virt::getAKernelVAS()>
c0017e9f:	89 f5                	mov    ebp,esi
c0017ea1:	c1 e5 0c             	shl    ebp,0xc
c0017ea4:	52                   	push   edx
c0017ea5:	52                   	push   edx
c0017ea6:	01 dd                	add    ebp,ebx
c0017ea8:	55                   	push   ebp
c0017ea9:	50                   	push   eax
c0017eaa:	e8 97 65 ff ff       	call   c000e446 <VAS::getPageTableEntry(unsigned long)>
c0017eaf:	83 c4 10             	add    esp,0x10
c0017eb2:	f6 00 60             	test   BYTE PTR [eax],0x60
c0017eb5:	75 0c                	jne    c0017ec3 <Thr::loadDLL(char const*, bool)+0x1ae>
c0017eb7:	83 ec 0c             	sub    esp,0xc
c0017eba:	55                   	push   ebp
c0017ebb:	e8 8a 45 ff ff       	call   c000c44a <Phys::freePage(unsigned long)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	46                   	inc    esi
c0017ec4:	eb a4                	jmp    c0017e6a <Thr::loadDLL(char const*, bool)+0x155>
c0017ec6:	89 f8                	mov    eax,edi
c0017ec8:	84 c0                	test   al,al
c0017eca:	75 02                	jne    c0017ece <Thr::loadDLL(char const*, bool)+0x1b9>
c0017ecc:	31 db                	xor    ebx,ebx
c0017ece:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017ed4:	89 d8                	mov    eax,ebx
c0017ed6:	5b                   	pop    ebx
c0017ed7:	5e                   	pop    esi
c0017ed8:	5f                   	pop    edi
c0017ed9:	5d                   	pop    ebp
c0017eda:	c3                   	ret    

c0017edb <Thr::executeDLL(unsigned long, void*)>:
c0017edb:	56                   	push   esi
c0017edc:	53                   	push   ebx
c0017edd:	51                   	push   ecx
c0017ede:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ee2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017ee6:	85 db                	test   ebx,ebx
c0017ee8:	75 10                	jne    c0017efa <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	68 94 26 02 c0       	push   0xc0022694
c0017ef2:	e8 fb d3 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017efe:	5a                   	pop    edx
c0017eff:	89 d8                	mov    eax,ebx
c0017f01:	5b                   	pop    ebx
c0017f02:	5e                   	pop    esi
c0017f03:	ff e0                	jmp    eax
c0017f05:	90                   	nop

c0017f06 <changeTSS>:
c0017f06:	83 ec 0c             	sub    esp,0xc
c0017f09:	e8 78 c2 ff ff       	call   c0014186 <thisCPU()>
c0017f0e:	52                   	push   edx
c0017f0f:	05 7c 11 00 00       	add    eax,0x117c
c0017f14:	52                   	push   edx
c0017f15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017f1b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017f1e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017f23:	c1 e1 15             	shl    ecx,0x15
c0017f26:	29 ca                	sub    edx,ecx
c0017f28:	52                   	push   edx
c0017f29:	50                   	push   eax
c0017f2a:	e8 c3 5a ff ff       	call   c000d9f2 <TSS::setESP(unsigned long)>
c0017f2f:	83 c4 1c             	add    esp,0x1c
c0017f32:	c3                   	ret    
c0017f33:	90                   	nop

c0017f34 <Process::addArgs(char**)>:
c0017f34:	57                   	push   edi
c0017f35:	56                   	push   esi
c0017f36:	53                   	push   ebx
c0017f37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f3f:	85 ff                	test   edi,edi
c0017f41:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017f4b:	74 45                	je     c0017f92 <Process::addArgs(char**)+0x5e>
c0017f4d:	8b 07                	mov    eax,DWORD PTR [edi]
c0017f4f:	85 c0                	test   eax,eax
c0017f51:	74 3f                	je     c0017f92 <Process::addArgs(char**)+0x5e>
c0017f53:	31 db                	xor    ebx,ebx
c0017f55:	83 ec 0c             	sub    esp,0xc
c0017f58:	50                   	push   eax
c0017f59:	e8 c7 86 fe ff       	call   c0000625 <strlen>
c0017f5e:	40                   	inc    eax
c0017f5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f62:	e8 9a 3f ff ff       	call   c000bf01 <malloc>
c0017f67:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017f6e:	5a                   	pop    edx
c0017f6f:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0017f72:	59                   	pop    ecx
c0017f73:	43                   	inc    ebx
c0017f74:	52                   	push   edx
c0017f75:	50                   	push   eax
c0017f76:	e8 2c 87 fe ff       	call   c00006a7 <strcpy>
c0017f7b:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	41                   	inc    ecx
c0017f85:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c0017f8b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017f8e:	85 c0                	test   eax,eax
c0017f90:	75 c3                	jne    c0017f55 <Process::addArgs(char**)+0x21>
c0017f92:	5b                   	pop    ebx
c0017f93:	5e                   	pop    esi
c0017f94:	5f                   	pop    edi
c0017f95:	c3                   	ret    

c0017f96 <Process::Process(char const*, Process*, char**)>:
c0017f96:	56                   	push   esi
c0017f97:	53                   	push   ebx
c0017f98:	83 ec 14             	sub    esp,0x14
c0017f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9f:	05 0c 02 00 00       	add    eax,0x20c
c0017fa4:	bb 07 00 00 00       	mov    ebx,0x7
c0017fa9:	89 c6                	mov    esi,eax
c0017fab:	85 db                	test   ebx,ebx
c0017fad:	78 12                	js     c0017fc1 <Process::Process(char const*, Process*, char**)+0x2b>
c0017faf:	83 ec 0c             	sub    esp,0xc
c0017fb2:	56                   	push   esi
c0017fb3:	e8 52 77 00 00       	call   c001f70a <ThreadControlBlock::ThreadControlBlock()>
c0017fb8:	83 c4 10             	add    esp,0x10
c0017fbb:	83 c6 63             	add    esi,0x63
c0017fbe:	4b                   	dec    ebx
c0017fbf:	eb ea                	jmp    c0017fab <Process::Process(char const*, Process*, char**)+0x15>
c0017fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc5:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd0:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017fd9:	a1 24 3a 02 c0       	mov    eax,ds:0xc0023a24
c0017fde:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe1:	89 15 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,edx
c0017fe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017feb:	89 02                	mov    DWORD PTR [edx],eax
c0017fed:	83 ec 0c             	sub    esp,0xc
c0017ff0:	6a 10                	push   0x10
c0017ff2:	e8 07 70 ff ff       	call   c000effe <operator new(unsigned long)>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	89 c3                	mov    ebx,eax
c0017ffc:	83 ec 08             	sub    esp,0x8
c0017fff:	6a 00                	push   0x0
c0018001:	53                   	push   ebx
c0018002:	e8 8b 6c ff ff       	call   c000ec92 <VAS::VAS(bool)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001800e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018018:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018026:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018034:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001803a:	85 c0                	test   eax,eax
c001803c:	74 42                	je     c0018080 <Process::Process(char const*, Process*, char**)+0xea>
c001803e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018042:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018048:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001804e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018052:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001805c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018062:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001806c:	05 0c 01 00 00       	add    eax,0x10c
c0018071:	83 ec 08             	sub    esp,0x8
c0018074:	52                   	push   edx
c0018075:	50                   	push   eax
c0018076:	e8 2c 86 fe ff       	call   c00006a7 <strcpy>
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	eb 5c                	jmp    c00180dc <Process::Process(char const*, Process*, char**)+0x146>
c0018080:	83 ec 0c             	sub    esp,0xc
c0018083:	68 60 12 00 00       	push   0x1260
c0018088:	e8 71 6f ff ff       	call   c000effe <operator new(unsigned long)>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	89 c3                	mov    ebx,eax
c0018092:	83 ec 08             	sub    esp,0x8
c0018095:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018099:	53                   	push   ebx
c001809a:	e8 51 56 ff ff       	call   c000d6f0 <VgaText::VgaText(char const*)>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00180ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180b0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00180b6:	83 ec 0c             	sub    esp,0xc
c00180b9:	50                   	push   eax
c00180ba:	e8 30 4a ff ff       	call   c000caef <addToTerminalCycle(VgaText*)>
c00180bf:	83 c4 10             	add    esp,0x10
c00180c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c6:	05 0c 01 00 00       	add    eax,0x10c
c00180cb:	83 ec 08             	sub    esp,0x8
c00180ce:	68 be 26 02 c0       	push   0xc00226be
c00180d3:	50                   	push   eax
c00180d4:	e8 ce 85 fe ff       	call   c00006a7 <strcpy>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e0:	83 c0 0c             	add    eax,0xc
c00180e3:	83 ec 08             	sub    esp,0x8
c00180e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180ea:	50                   	push   eax
c00180eb:	e8 b7 85 fe ff       	call   c00006a7 <strcpy>
c00180f0:	83 c4 10             	add    esp,0x10
c00180f3:	83 ec 08             	sub    esp,0x8
c00180f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00180fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180fe:	e8 31 fe ff ff       	call   c0017f34 <Process::addArgs(char**)>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	83 ec 08             	sub    esp,0x8
c0018109:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001810d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018111:	e8 a5 ee ff ff       	call   c0016fbb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001811d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018121:	83 f0 01             	xor    eax,0x1
c0018124:	88 c2                	mov    dl,al
c0018126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001812a:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018130:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018134:	25 ff 00 00 00       	and    eax,0xff
c0018139:	83 ec 08             	sub    esp,0x8
c001813c:	50                   	push   eax
c001813d:	68 bc 27 02 c0       	push   0xc00227bc
c0018142:	e8 ec 6f ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	90                   	nop
c001814b:	83 c4 14             	add    esp,0x14
c001814e:	5b                   	pop    ebx
c001814f:	5e                   	pop    esi
c0018150:	c3                   	ret    
c0018151:	90                   	nop

c0018152 <Process::Process(bool, char const*, Process*, char**)>:
c0018152:	56                   	push   esi
c0018153:	53                   	push   ebx
c0018154:	83 ec 14             	sub    esp,0x14
c0018157:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001815b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001815f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018163:	05 0c 02 00 00       	add    eax,0x20c
c0018168:	bb 07 00 00 00       	mov    ebx,0x7
c001816d:	89 c6                	mov    esi,eax
c001816f:	85 db                	test   ebx,ebx
c0018171:	78 12                	js     c0018185 <Process::Process(bool, char const*, Process*, char**)+0x33>
c0018173:	83 ec 0c             	sub    esp,0xc
c0018176:	56                   	push   esi
c0018177:	e8 8e 75 00 00       	call   c001f70a <ThreadControlBlock::ThreadControlBlock()>
c001817c:	83 c4 10             	add    esp,0x10
c001817f:	83 c6 63             	add    esi,0x63
c0018182:	4b                   	dec    ebx
c0018183:	eb ea                	jmp    c001816f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0018185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018189:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018194:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001819d:	a1 24 3a 02 c0       	mov    eax,ds:0xc0023a24
c00181a2:	8d 50 01             	lea    edx,[eax+0x1]
c00181a5:	89 15 24 3a 02 c0    	mov    DWORD PTR ds:0xc0023a24,edx
c00181ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181af:	89 02                	mov    DWORD PTR [edx],eax
c00181b1:	83 ec 0c             	sub    esp,0xc
c00181b4:	6a 10                	push   0x10
c00181b6:	e8 43 6e ff ff       	call   c000effe <operator new(unsigned long)>
c00181bb:	83 c4 10             	add    esp,0x10
c00181be:	89 c3                	mov    ebx,eax
c00181c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00181c4:	25 ff 00 00 00       	and    eax,0xff
c00181c9:	83 ec 08             	sub    esp,0x8
c00181cc:	50                   	push   eax
c00181cd:	53                   	push   ebx
c00181ce:	e8 bf 6a ff ff       	call   c000ec92 <VAS::VAS(bool)>
c00181d3:	83 c4 10             	add    esp,0x10
c00181d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181da:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00181e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e4:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00181ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181f6:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00181fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018200:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018206:	85 c0                	test   eax,eax
c0018208:	74 42                	je     c001824c <Process::Process(bool, char const*, Process*, char**)+0xfa>
c001820a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018214:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001821a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001821e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018228:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001822e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018238:	05 0c 01 00 00       	add    eax,0x10c
c001823d:	83 ec 08             	sub    esp,0x8
c0018240:	52                   	push   edx
c0018241:	50                   	push   eax
c0018242:	e8 60 84 fe ff       	call   c00006a7 <strcpy>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	eb 5c                	jmp    c00182a8 <Process::Process(bool, char const*, Process*, char**)+0x156>
c001824c:	83 ec 0c             	sub    esp,0xc
c001824f:	68 60 12 00 00       	push   0x1260
c0018254:	e8 a5 6d ff ff       	call   c000effe <operator new(unsigned long)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	89 c3                	mov    ebx,eax
c001825e:	83 ec 08             	sub    esp,0x8
c0018261:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018265:	53                   	push   ebx
c0018266:	e8 85 54 ff ff       	call   c000d6f0 <VgaText::VgaText(char const*)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018272:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018282:	83 ec 0c             	sub    esp,0xc
c0018285:	50                   	push   eax
c0018286:	e8 64 48 ff ff       	call   c000caef <addToTerminalCycle(VgaText*)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018292:	05 0c 01 00 00       	add    eax,0x10c
c0018297:	83 ec 08             	sub    esp,0x8
c001829a:	68 be 26 02 c0       	push   0xc00226be
c001829f:	50                   	push   eax
c00182a0:	e8 02 84 fe ff       	call   c00006a7 <strcpy>
c00182a5:	83 c4 10             	add    esp,0x10
c00182a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ac:	83 c0 0c             	add    eax,0xc
c00182af:	83 ec 08             	sub    esp,0x8
c00182b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182b6:	50                   	push   eax
c00182b7:	e8 eb 83 fe ff       	call   c00006a7 <strcpy>
c00182bc:	83 c4 10             	add    esp,0x10
c00182bf:	83 ec 08             	sub    esp,0x8
c00182c2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00182c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ca:	e8 65 fc ff ff       	call   c0017f34 <Process::addArgs(char**)>
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	90                   	nop
c00182d3:	83 c4 14             	add    esp,0x14
c00182d6:	5b                   	pop    ebx
c00182d7:	5e                   	pop    esi
c00182d8:	c3                   	ret    

c00182d9 <disableIRQs()>:
c00182d9:	fa                   	cli    
c00182da:	a1 2c 54 02 c0       	mov    eax,ds:0xc002542c
c00182df:	40                   	inc    eax
c00182e0:	a3 2c 54 02 c0       	mov    ds:0xc002542c,eax
c00182e5:	c3                   	ret    

c00182e6 <getIRQNestingLevel()>:
c00182e6:	a1 2c 54 02 c0       	mov    eax,ds:0xc002542c
c00182eb:	c3                   	ret    

c00182ec <enableIRQs()>:
c00182ec:	a1 2c 54 02 c0       	mov    eax,ds:0xc002542c
c00182f1:	48                   	dec    eax
c00182f2:	a3 2c 54 02 c0       	mov    ds:0xc002542c,eax
c00182f7:	75 01                	jne    c00182fa <enableIRQs()+0xe>
c00182f9:	fb                   	sti    
c00182fa:	c3                   	ret    

c00182fb <lockScheduler()>:
c00182fb:	eb dc                	jmp    c00182d9 <disableIRQs()>

c00182fd <unlockScheduler()>:
c00182fd:	eb ed                	jmp    c00182ec <enableIRQs()>

c00182ff <userModeEntryPoint(void*)>:
c00182ff:	83 ec 0c             	sub    esp,0xc
c0018302:	e8 f6 ff ff ff       	call   c00182fd <unlockScheduler()>
c0018307:	fb                   	sti    
c0018308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001830d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018310:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018316:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001831a:	83 c4 0c             	add    esp,0xc
c001831d:	e9 c4 7e fe ff       	jmp    c00001e6 <goToUsermode>

c0018322 <lockStuff()>:
c0018322:	e8 b2 ff ff ff       	call   c00182d9 <disableIRQs()>
c0018327:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c001832c:	40                   	inc    eax
c001832d:	a3 28 54 02 c0       	mov    ds:0xc0025428,eax
c0018332:	c3                   	ret    

c0018333 <taskStartupFunction>:
c0018333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018338:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001833b:	c3                   	ret    

c001833c <updateTimeUsed()>:
c001833c:	57                   	push   edi
c001833d:	56                   	push   esi
c001833e:	53                   	push   ebx
c001833f:	e8 42 be ff ff       	call   c0014186 <thisCPU()>
c0018344:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001834b:	74 49                	je     c0018396 <updateTimeUsed()+0x5a>
c001834d:	0f 31                	rdtsc  
c001834f:	89 c1                	mov    ecx,eax
c0018351:	a3 68 54 02 c0       	mov    ds:0xc0025468,eax
c0018356:	2b 0d 58 54 02 c0    	sub    ecx,DWORD PTR ds:0xc0025458
c001835c:	a3 58 54 02 c0       	mov    ds:0xc0025458,eax
c0018361:	89 0d 60 54 02 c0    	mov    DWORD PTR ds:0xc0025460,ecx
c0018367:	89 d3                	mov    ebx,edx
c0018369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001836e:	89 15 6c 54 02 c0    	mov    DWORD PTR ds:0xc002546c,edx
c0018374:	1b 1d 5c 54 02 c0    	sbb    ebx,DWORD PTR ds:0xc002545c
c001837a:	89 15 5c 54 02 c0    	mov    DWORD PTR ds:0xc002545c,edx
c0018380:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018383:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018386:	01 f1                	add    ecx,esi
c0018388:	89 1d 64 54 02 c0    	mov    DWORD PTR ds:0xc0025464,ebx
c001838e:	11 fb                	adc    ebx,edi
c0018390:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018393:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018396:	5b                   	pop    ebx
c0018397:	5e                   	pop    esi
c0018398:	5f                   	pop    edi
c0018399:	c3                   	ret    

c001839a <switchToThread(ThreadControlBlock*)>:
c001839a:	53                   	push   ebx
c001839b:	83 ec 08             	sub    esp,0x8
c001839e:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c00183a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183a7:	85 c0                	test   eax,eax
c00183a9:	75 36                	jne    c00183e1 <switchToThread(ThreadControlBlock*)+0x47>
c00183ab:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c00183ae:	80 fa ff             	cmp    dl,0xff
c00183b1:	74 2a                	je     c00183dd <switchToThread(ThreadControlBlock*)+0x43>
c00183b3:	81 e2 ff 00 00 00    	and    edx,0xff
c00183b9:	b8 84 03 00 00       	mov    eax,0x384
c00183be:	29 d0                	sub    eax,edx
c00183c0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00183c3:	c1 e0 10             	shl    eax,0x10
c00183c6:	01 c8                	add    eax,ecx
c00183c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00183cb:	e8 6c ff ff ff       	call   c001833c <updateTimeUsed()>
c00183d0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00183d4:	83 c4 08             	add    esp,0x8
c00183d7:	5b                   	pop    ebx
c00183d8:	e9 42 7e fe ff       	jmp    c000021f <switchToThreadASM>
c00183dd:	31 c0                	xor    eax,eax
c00183df:	eb e7                	jmp    c00183c8 <switchToThread(ThreadControlBlock*)+0x2e>
c00183e1:	c7 05 24 54 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025424,0x1
c00183eb:	83 c4 08             	add    esp,0x8
c00183ee:	5b                   	pop    ebx
c00183ef:	c3                   	ret    

c00183f0 <Semaphore::Semaphore(int)>:
c00183f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183f8:	89 10                	mov    DWORD PTR [eax],edx
c00183fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183fe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018405:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018409:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018414:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001841b:	90                   	nop
c001841c:	c3                   	ret    
c001841d:	90                   	nop

c001841e <Mutex::Mutex()>:
c001841e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018422:	6a 01                	push   0x1
c0018424:	50                   	push   eax
c0018425:	e8 c6 ff ff ff       	call   c00183f0 <Semaphore::Semaphore(int)>
c001842a:	83 c4 08             	add    esp,0x8
c001842d:	90                   	nop
c001842e:	c3                   	ret    
c001842f:	90                   	nop

c0018430 <Process::createThread(void (*)(void*), void*, int)>:
c0018430:	55                   	push   ebp
c0018431:	31 c9                	xor    ecx,ecx
c0018433:	57                   	push   edi
c0018434:	56                   	push   esi
c0018435:	53                   	push   ebx
c0018436:	83 ec 1c             	sub    esp,0x1c
c0018439:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001843d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018444:	89 f2                	mov    edx,esi
c0018446:	31 c0                	xor    eax,eax
c0018448:	66 89 d0             	mov    ax,dx
c001844b:	83 e2 01             	and    edx,0x1
c001844e:	74 14                	je     c0018464 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018450:	d1 f8                	sar    eax,1
c0018452:	41                   	inc    ecx
c0018453:	89 c2                	mov    edx,eax
c0018455:	83 f9 10             	cmp    ecx,0x10
c0018458:	75 ec                	jne    c0018446 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001845a:	83 c4 1c             	add    esp,0x1c
c001845d:	31 c0                	xor    eax,eax
c001845f:	5b                   	pop    ebx
c0018460:	5e                   	pop    esi
c0018461:	5f                   	pop    edi
c0018462:	5d                   	pop    ebp
c0018463:	c3                   	ret    
c0018464:	b8 01 00 00 00       	mov    eax,0x1
c0018469:	d3 e0                	shl    eax,cl
c001846b:	09 c6                	or     esi,eax
c001846d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018473:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001847a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001847d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018480:	89 f0                	mov    eax,esi
c0018482:	c1 e0 05             	shl    eax,0x5
c0018485:	01 c6                	add    esi,eax
c0018487:	8d 04 33             	lea    eax,[ebx+esi*1]
c001848a:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018490:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018494:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001849a:	89 ca                	mov    edx,ecx
c001849c:	f7 da                	neg    edx
c001849e:	c1 e2 15             	shl    edx,0x15
c00184a1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00184a7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00184ad:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00184b3:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00184b9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00184bd:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00184c3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184c7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00184d1:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00184d7:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00184e1:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00184eb:	52                   	push   edx
c00184ec:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c00184f3:	52                   	push   edx
c00184f4:	50                   	push   eax
c00184f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184f9:	68 48 54 02 c0       	push   0xc0025448
c00184fe:	e8 5f 70 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018503:	83 c4 10             	add    esp,0x10
c0018506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001850a:	83 c4 1c             	add    esp,0x1c
c001850d:	5b                   	pop    ebx
c001850e:	5e                   	pop    esi
c001850f:	5f                   	pop    edi
c0018510:	5d                   	pop    ebp
c0018511:	c3                   	ret    

c0018512 <Process::createUserThread()>:
c0018512:	83 ec 0c             	sub    esp,0xc
c0018515:	68 80 00 00 00       	push   0x80
c001851a:	6a 00                	push   0x0
c001851c:	68 ff 82 01 c0       	push   0xc00182ff
c0018521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018525:	50                   	push   eax
c0018526:	e8 05 ff ff ff       	call   c0018430 <Process::createThread(void (*)(void*), void*, int)>
c001852b:	83 c4 1c             	add    esp,0x1c
c001852e:	c3                   	ret    

c001852f <setupMultitasking(void (*)())>:
c001852f:	56                   	push   esi
c0018530:	53                   	push   ebx
c0018531:	51                   	push   ecx
c0018532:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018536:	eb 10                	jmp    c0018548 <setupMultitasking(void (*)())+0x19>
c0018538:	83 ec 0c             	sub    esp,0xc
c001853b:	68 48 54 02 c0       	push   0xc0025448
c0018540:	e8 6f 6f 00 00       	call   c001f4b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018545:	83 c4 10             	add    esp,0x10
c0018548:	83 ec 0c             	sub    esp,0xc
c001854b:	68 48 54 02 c0       	push   0xc0025448
c0018550:	e8 43 6f 00 00       	call   c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018555:	83 c4 10             	add    esp,0x10
c0018558:	84 c0                	test   al,al
c001855a:	74 dc                	je     c0018538 <setupMultitasking(void (*)())+0x9>
c001855c:	83 ec 0c             	sub    esp,0xc
c001855f:	68 3b 07 00 00       	push   0x73b
c0018564:	e8 95 6a ff ff       	call   c000effe <operator new(unsigned long)>
c0018569:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018570:	6a 00                	push   0x0
c0018572:	68 c2 26 02 c0       	push   0xc00226c2
c0018577:	89 c3                	mov    ebx,eax
c0018579:	6a 01                	push   0x1
c001857b:	50                   	push   eax
c001857c:	e8 d1 fb ff ff       	call   c0018152 <Process::Process(bool, char const*, Process*, char**)>
c0018581:	83 c4 18             	add    esp,0x18
c0018584:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c001858a:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0018590:	50                   	push   eax
c0018591:	68 e4 27 02 c0       	push   0xc00227e4
c0018596:	e8 98 6b ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001859b:	5a                   	pop    edx
c001859c:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c00185a2:	51                   	push   ecx
c00185a3:	e8 bb 4c ff ff       	call   c000d263 <setActiveTerminal(VgaText*)>
c00185a8:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c00185af:	83 c8 01             	or     eax,0x1
c00185b2:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c00185b9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00185bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185c2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00185cc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00185d2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00185dc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00185e6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00185ec:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00185f2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00185fc:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018602:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001860c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018616:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001861c:	58                   	pop    eax
c001861d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018623:	5a                   	pop    edx
c0018624:	68 be 26 02 c0       	push   0xc00226be
c0018629:	50                   	push   eax
c001862a:	e8 78 80 fe ff       	call   c00006a7 <strcpy>
c001862f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018636:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001863a:	83 c4 14             	add    esp,0x14
c001863d:	5b                   	pop    ebx
c001863e:	5e                   	pop    esi
c001863f:	e9 cd 7b fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0018644 <schedule()>:
c0018644:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c0018649:	85 c0                	test   eax,eax
c001864b:	74 0b                	je     c0018658 <schedule()+0x14>
c001864d:	c7 05 24 54 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025424,0x1
c0018657:	c3                   	ret    
c0018658:	53                   	push   ebx
c0018659:	83 ec 14             	sub    esp,0x14
c001865c:	68 48 54 02 c0       	push   0xc0025448
c0018661:	e8 32 6e 00 00       	call   c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	84 c0                	test   al,al
c001866b:	75 38                	jne    c00186a5 <schedule()+0x61>
c001866d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018672:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018675:	4a                   	dec    edx
c0018676:	74 32                	je     c00186aa <schedule()+0x66>
c0018678:	83 ec 0c             	sub    esp,0xc
c001867b:	68 48 54 02 c0       	push   0xc0025448
c0018680:	e8 0b 6e 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018685:	89 c3                	mov    ebx,eax
c0018687:	c7 04 24 48 54 02 c0 	mov    DWORD PTR [esp],0xc0025448
c001868e:	e8 21 6e 00 00       	call   c001f4b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018693:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001869a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001869d:	e8 f8 fc ff ff       	call   c001839a <switchToThread(ThreadControlBlock*)>
c00186a2:	83 c4 10             	add    esp,0x10
c00186a5:	83 c4 08             	add    esp,0x8
c00186a8:	5b                   	pop    ebx
c00186a9:	c3                   	ret    
c00186aa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00186b1:	51                   	push   ecx
c00186b2:	51                   	push   ecx
c00186b3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00186b9:	53                   	push   ebx
c00186ba:	68 48 54 02 c0       	push   0xc0025448
c00186bf:	e8 9e 6e 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	eb af                	jmp    c0018678 <schedule()+0x34>

c00186c9 <unlockStuff()>:
c00186c9:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c00186ce:	48                   	dec    eax
c00186cf:	a3 28 54 02 c0       	mov    ds:0xc0025428,eax
c00186d4:	75 09                	jne    c00186df <unlockStuff()+0x16>
c00186d6:	a1 24 54 02 c0       	mov    eax,ds:0xc0025424
c00186db:	85 c0                	test   eax,eax
c00186dd:	75 05                	jne    c00186e4 <unlockStuff()+0x1b>
c00186df:	e9 08 fc ff ff       	jmp    c00182ec <enableIRQs()>
c00186e4:	83 ec 0c             	sub    esp,0xc
c00186e7:	c7 05 24 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025424,0x0
c00186f1:	e8 4e ff ff ff       	call   c0018644 <schedule()>
c00186f6:	83 c4 0c             	add    esp,0xc
c00186f9:	e9 ee fb ff ff       	jmp    c00182ec <enableIRQs()>

c00186fe <Semaphore::tryAcquire()>:
c00186fe:	83 ec 0c             	sub    esp,0xc
c0018701:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018705:	e8 18 fc ff ff       	call   c0018322 <lockStuff()>
c001870a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001870d:	3b 02                	cmp    eax,DWORD PTR [edx]
c001870f:	7c 0b                	jl     c001871c <Semaphore::tryAcquire()+0x1e>
c0018711:	e8 b3 ff ff ff       	call   c00186c9 <unlockStuff()>
c0018716:	31 c0                	xor    eax,eax
c0018718:	83 c4 0c             	add    esp,0xc
c001871b:	c3                   	ret    
c001871c:	40                   	inc    eax
c001871d:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018720:	e8 a4 ff ff ff       	call   c00186c9 <unlockStuff()>
c0018725:	b0 01                	mov    al,0x1
c0018727:	83 c4 0c             	add    esp,0xc
c001872a:	c3                   	ret    
c001872b:	90                   	nop

c001872c <Semaphore::assertLocked(char const*)>:
c001872c:	83 ec 0c             	sub    esp,0xc
c001872f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018733:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018737:	e8 e6 fb ff ff       	call   c0018322 <lockStuff()>
c001873c:	8b 02                	mov    eax,DWORD PTR [edx]
c001873e:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018741:	7c 05                	jl     c0018748 <Semaphore::assertLocked(char const*)+0x1c>
c0018743:	83 c4 0c             	add    esp,0xc
c0018746:	eb 81                	jmp    c00186c9 <unlockStuff()>
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	51                   	push   ecx
c001874c:	e8 a1 cb ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	83 c4 0c             	add    esp,0xc
c0018757:	e9 6d ff ff ff       	jmp    c00186c9 <unlockStuff()>

c001875c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001875c:	83 ec 0c             	sub    esp,0xc
c001875f:	e8 82 fb ff ff       	call   c00182e6 <getIRQNestingLevel()>
c0018764:	52                   	push   edx
c0018765:	52                   	push   edx
c0018766:	50                   	push   eax
c0018767:	68 18 28 02 c0       	push   0xc0022818
c001876c:	e8 c2 69 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018771:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018776:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001877a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001877d:	e8 c2 fe ff ff       	call   c0018644 <schedule()>
c0018782:	e8 76 fb ff ff       	call   c00182fd <unlockScheduler()>
c0018787:	e8 5a fb ff ff       	call   c00182e6 <getIRQNestingLevel()>
c001878c:	59                   	pop    ecx
c001878d:	5a                   	pop    edx
c001878e:	50                   	push   eax
c001878f:	68 4c 28 02 c0       	push   0xc002284c
c0018794:	e8 9a 69 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018799:	83 c4 1c             	add    esp,0x1c
c001879c:	c3                   	ret    

c001879d <blockTask(TaskState)>:
c001879d:	83 ec 0c             	sub    esp,0xc
c00187a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187a4:	e8 52 fb ff ff       	call   c00182fb <lockScheduler()>
c00187a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00187b1:	e8 8e fe ff ff       	call   c0018644 <schedule()>
c00187b6:	83 c4 0c             	add    esp,0xc
c00187b9:	e9 3f fb ff ff       	jmp    c00182fd <unlockScheduler()>

c00187be <waitTask(int, int*, int)>:
c00187be:	83 ec 18             	sub    esp,0x18
c00187c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187ca:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00187cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187d6:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00187d9:	6a 07                	push   0x7
c00187db:	e8 bd ff ff ff       	call   c001879d <blockTask(TaskState)>
c00187e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187e5:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	85 d2                	test   edx,edx
c00187ed:	74 0a                	je     c00187f9 <waitTask(int, int*, int)+0x3b>
c00187ef:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c00187f2:	89 02                	mov    DWORD PTR [edx],eax
c00187f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f9:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c00187fc:	83 c4 0c             	add    esp,0xc
c00187ff:	c3                   	ret    

c0018800 <nanoSleepUntil(unsigned long long)>:
c0018800:	53                   	push   ebx
c0018801:	83 ec 08             	sub    esp,0x8
c0018804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018808:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001880c:	3b 0d 70 46 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024670
c0018812:	89 d8                	mov    eax,ebx
c0018814:	1b 05 74 46 02 c0    	sbb    eax,DWORD PTR ds:0xc0024674
c001881a:	73 05                	jae    c0018821 <nanoSleepUntil(unsigned long long)+0x21>
c001881c:	83 c4 08             	add    esp,0x8
c001881f:	5b                   	pop    ebx
c0018820:	c3                   	ret    
c0018821:	e8 fc fa ff ff       	call   c0018322 <lockStuff()>
c0018826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001882b:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c001882e:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018831:	51                   	push   ecx
c0018832:	51                   	push   ecx
c0018833:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018839:	53                   	push   ebx
c001883a:	68 3c 54 02 c0       	push   0xc002543c
c001883f:	e8 1e 6d 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018844:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001884b:	e8 4d ff ff ff       	call   c001879d <blockTask(TaskState)>
c0018850:	83 c4 18             	add    esp,0x18
c0018853:	5b                   	pop    ebx
c0018854:	e9 70 fe ff ff       	jmp    c00186c9 <unlockStuff()>

c0018859 <nanoSleep(unsigned long long)>:
c0018859:	a1 70 46 02 c0       	mov    eax,ds:0xc0024670
c001885e:	8b 15 74 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024674
c0018864:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018868:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001886c:	eb 92                	jmp    c0018800 <nanoSleepUntil(unsigned long long)>

c001886e <sleep(unsigned long long)>:
c001886e:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018873:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001887b:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001887f:	01 ca                	add    edx,ecx
c0018881:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018885:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018889:	eb ce                	jmp    c0018859 <nanoSleep(unsigned long long)>
c001888b:	90                   	nop

c001888c <Semaphore::acquire()>:
c001888c:	83 ec 0c             	sub    esp,0xc
c001888f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018893:	e8 8a fa ff ff       	call   c0018322 <lockStuff()>
c0018898:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001889b:	3b 02                	cmp    eax,DWORD PTR [edx]
c001889d:	7d 0c                	jge    c00188ab <Semaphore::acquire()+0x1f>
c001889f:	40                   	inc    eax
c00188a0:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00188a3:	83 c4 0c             	add    esp,0xc
c00188a6:	e9 1e fe ff ff       	jmp    c00186c9 <unlockStuff()>
c00188ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188b0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00188b7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00188ba:	85 c0                	test   eax,eax
c00188bc:	74 29                	je     c00188e7 <Semaphore::acquire()+0x5b>
c00188be:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00188c1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00188c7:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00188ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188cf:	83 ec 0c             	sub    esp,0xc
c00188d2:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00188d5:	6a 05                	push   0x5
c00188d7:	e8 c1 fe ff ff       	call   c001879d <blockTask(TaskState)>
c00188dc:	83 c4 10             	add    esp,0x10
c00188df:	83 c4 0c             	add    esp,0xc
c00188e2:	e9 e2 fd ff ff       	jmp    c00186c9 <unlockStuff()>
c00188e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00188ef:	eb d9                	jmp    c00188ca <Semaphore::acquire()+0x3e>

c00188f1 <taskReturned>:
c00188f1:	83 ec 18             	sub    esp,0x18
c00188f4:	68 80 28 02 c0       	push   0xc0022880
c00188f9:	e8 f4 c9 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c00188fe:	83 c4 10             	add    esp,0x10
c0018901:	83 ec 0c             	sub    esp,0xc
c0018904:	6a 02                	push   0x2
c0018906:	e8 92 fe ff ff       	call   c001879d <blockTask(TaskState)>
c001890b:	e8 eb f9 ff ff       	call   c00182fb <lockScheduler()>
c0018910:	e8 2f fd ff ff       	call   c0018644 <schedule()>
c0018915:	e8 e3 f9 ff ff       	call   c00182fd <unlockScheduler()>
c001891a:	83 c4 10             	add    esp,0x10
c001891d:	eb e2                	jmp    c0018901 <taskReturned+0x10>

c001891f <unblockTask(ThreadControlBlock*)>:
c001891f:	53                   	push   ebx
c0018920:	83 ec 08             	sub    esp,0x8
c0018923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018927:	e8 cf f9 ff ff       	call   c00182fb <lockScheduler()>
c001892c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001892f:	85 c0                	test   eax,eax
c0018931:	74 5b                	je     c001898e <unblockTask(ThreadControlBlock*)+0x6f>
c0018933:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018936:	48                   	dec    eax
c0018937:	74 30                	je     c0018969 <unblockTask(ThreadControlBlock*)+0x4a>
c0018939:	83 ec 0c             	sub    esp,0xc
c001893c:	68 48 54 02 c0       	push   0xc0025448
c0018941:	e8 4a 6b 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018946:	83 c4 10             	add    esp,0x10
c0018949:	85 c0                	test   eax,eax
c001894b:	75 16                	jne    c0018963 <unblockTask(ThreadControlBlock*)+0x44>
c001894d:	eb 64                	jmp    c00189b3 <unblockTask(ThreadControlBlock*)+0x94>
c001894f:	52                   	push   edx
c0018950:	52                   	push   edx
c0018951:	50                   	push   eax
c0018952:	68 48 54 02 c0       	push   0xc0025448
c0018957:	e8 44 6e 00 00       	call   c001f7a0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001895c:	83 c4 10             	add    esp,0x10
c001895f:	85 c0                	test   eax,eax
c0018961:	74 50                	je     c00189b3 <unblockTask(ThreadControlBlock*)+0x94>
c0018963:	39 c3                	cmp    ebx,eax
c0018965:	75 e8                	jne    c001894f <unblockTask(ThreadControlBlock*)+0x30>
c0018967:	eb 1c                	jmp    c0018985 <unblockTask(ThreadControlBlock*)+0x66>
c0018969:	83 ec 0c             	sub    esp,0xc
c001896c:	68 70 29 02 c0       	push   0xc0022970
c0018971:	e8 bd 67 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018976:	c7 04 24 fc 28 02 c0 	mov    DWORD PTR [esp],0xc00228fc
c001897d:	e8 b1 67 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018982:	83 c4 10             	add    esp,0x10
c0018985:	83 c4 08             	add    esp,0x8
c0018988:	5b                   	pop    ebx
c0018989:	e9 6f f9 ff ff       	jmp    c00182fd <unlockScheduler()>
c001898e:	83 ec 0c             	sub    esp,0xc
c0018991:	68 b4 28 02 c0       	push   0xc00228b4
c0018996:	e8 98 67 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001899b:	c7 04 24 fc 28 02 c0 	mov    DWORD PTR [esp],0xc00228fc
c00189a2:	e8 8c 67 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	83 c4 08             	add    esp,0x8
c00189ad:	5b                   	pop    ebx
c00189ae:	e9 4a f9 ff ff       	jmp    c00182fd <unlockScheduler()>
c00189b3:	50                   	push   eax
c00189b4:	50                   	push   eax
c00189b5:	53                   	push   ebx
c00189b6:	68 48 54 02 c0       	push   0xc0025448
c00189bb:	e8 a2 6b 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00189c0:	83 c4 10             	add    esp,0x10
c00189c3:	83 c4 08             	add    esp,0x8
c00189c6:	5b                   	pop    ebx
c00189c7:	e9 31 f9 ff ff       	jmp    c00182fd <unlockScheduler()>

c00189cc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00189cc:	55                   	push   ebp
c00189cd:	57                   	push   edi
c00189ce:	56                   	push   esi
c00189cf:	53                   	push   ebx
c00189d0:	83 ec 1c             	sub    esp,0x1c
c00189d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00189d7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00189da:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c00189e0:	85 ed                	test   ebp,ebp
c00189e2:	7e 21                	jle    c0018a05 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c00189e4:	31 f6                	xor    esi,esi
c00189e6:	83 ec 0c             	sub    esp,0xc
c00189e9:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c00189f0:	46                   	inc    esi
c00189f1:	57                   	push   edi
c00189f2:	e8 1a 35 ff ff       	call   c000bf11 <free>
c00189f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00189fa:	83 c4 10             	add    esp,0x10
c00189fd:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018a03:	7f e1                	jg     c00189e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018a05:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018a0f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018a14:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018a17:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018a1a:	d3 c0                	rol    eax,cl
c0018a1c:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0018a23:	21 c1                	and    ecx,eax
c0018a25:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0018a2c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018a2f:	89 f7                	mov    edi,esi
c0018a31:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018a39:	0f 85 4f 01 00 00    	jne    c0018b8e <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0018a3f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018a45:	85 c0                	test   eax,eax
c0018a47:	0f 84 aa 00 00 00    	je     c0018af7 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0018a4d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018a50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018a54:	31 c9                	xor    ecx,ecx
c0018a56:	eb 10                	jmp    c0018a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0018a58:	41                   	inc    ecx
c0018a59:	83 f9 10             	cmp    ecx,0x10
c0018a5c:	0f 84 95 00 00 00    	je     c0018af7 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0018a62:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018a68:	31 d2                	xor    edx,edx
c0018a6a:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c0018a71:	d3 fa                	sar    edx,cl
c0018a73:	83 e2 01             	and    edx,0x1
c0018a76:	74 e0                	je     c0018a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018a78:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0018a7b:	89 d5                	mov    ebp,edx
c0018a7d:	c1 e5 05             	shl    ebp,0x5
c0018a80:	01 ea                	add    edx,ebp
c0018a82:	01 d0                	add    eax,edx
c0018a84:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018a8a:	83 fd 07             	cmp    ebp,0x7
c0018a8d:	75 c9                	jne    c0018a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018a8f:	05 40 02 00 00       	add    eax,0x240
c0018a94:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018a97:	83 fd ff             	cmp    ebp,0xffffffff
c0018a9a:	0f 8c 07 01 00 00    	jl     c0018ba7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c0018aa0:	0f 84 b4 01 00 00    	je     c0018c5a <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0018aa6:	85 ed                	test   ebp,ebp
c0018aa8:	0f 84 9b 01 00 00    	je     c0018c49 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0018aae:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018ab0:	75 a6                	jne    c0018a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018ab2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018ab8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018abc:	01 d0                	add    eax,edx
c0018abe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018ac2:	83 ec 0c             	sub    esp,0xc
c0018ac5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018acb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ace:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018ad4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018adb:	50                   	push   eax
c0018adc:	e8 3e fe ff ff       	call   c001891f <unblockTask(ThreadControlBlock*)>
c0018ae1:	83 c4 10             	add    esp,0x10
c0018ae4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ae8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018aeb:	41                   	inc    ecx
c0018aec:	89 f7                	mov    edi,esi
c0018aee:	83 f9 10             	cmp    ecx,0x10
c0018af1:	0f 85 6b ff ff ff    	jne    c0018a62 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0018af7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018afd:	85 c0                	test   eax,eax
c0018aff:	74 5d                	je     c0018b5e <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0018b01:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018b07:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018b0d:	74 4f                	je     c0018b5e <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0018b0f:	83 ec 0c             	sub    esp,0xc
c0018b12:	68 48 54 02 c0       	push   0xc0025448
c0018b17:	e8 74 69 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b1c:	c7 04 24 48 54 02 c0 	mov    DWORD PTR [esp],0xc0025448
c0018b23:	89 c7                	mov    edi,eax
c0018b25:	e8 6e 69 00 00       	call   c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b2a:	83 c4 10             	add    esp,0x10
c0018b2d:	84 c0                	test   al,al
c0018b2f:	0f 84 e2 00 00 00    	je     c0018c17 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0018b35:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018b38:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018b3e:	85 d2                	test   edx,edx
c0018b40:	74 0f                	je     c0018b51 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0018b42:	83 ec 0c             	sub    esp,0xc
c0018b45:	8b 02                	mov    eax,DWORD PTR [edx]
c0018b47:	52                   	push   edx
c0018b48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018b4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018b4e:	83 c4 10             	add    esp,0x10
c0018b51:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018b5b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018b5e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018b64:	85 db                	test   ebx,ebx
c0018b66:	74 16                	je     c0018b7e <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c0018b68:	83 ec 0c             	sub    esp,0xc
c0018b6b:	53                   	push   ebx
c0018b6c:	e8 07 5b ff ff       	call   c000e678 <VAS::~VAS()>
c0018b71:	5a                   	pop    edx
c0018b72:	59                   	pop    ecx
c0018b73:	6a 10                	push   0x10
c0018b75:	53                   	push   ebx
c0018b76:	e8 92 64 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	83 ec 0c             	sub    esp,0xc
c0018b81:	68 c9 26 02 c0       	push   0xc00226c9
c0018b86:	e8 a8 65 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	50                   	push   eax
c0018b8f:	50                   	push   eax
c0018b90:	68 3b 07 00 00       	push   0x73b
c0018b95:	68 d7 26 02 c0       	push   0xc00226d7
c0018b9a:	e8 94 65 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018b9f:	83 c4 2c             	add    esp,0x2c
c0018ba2:	5b                   	pop    ebx
c0018ba3:	5e                   	pop    esi
c0018ba4:	5f                   	pop    edi
c0018ba5:	5d                   	pop    ebp
c0018ba6:	c3                   	ret    
c0018ba7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018bab:	83 ec 0c             	sub    esp,0xc
c0018bae:	68 b4 29 02 c0       	push   0xc00229b4
c0018bb3:	e8 3a c7 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0018bb8:	83 c4 10             	add    esp,0x10
c0018bbb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018bbe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bc2:	89 f7                	mov    edi,esi
c0018bc4:	e9 8f fe ff ff       	jmp    c0018a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018bc9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018bcf:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018bd5:	75 1c                	jne    c0018bf3 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018bd7:	83 ec 0c             	sub    esp,0xc
c0018bda:	68 1c 2a 02 c0       	push   0xc0022a1c
c0018bdf:	e8 4f 65 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018be4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018beb:	e8 ad fb ff ff       	call   c001879d <blockTask(TaskState)>
c0018bf0:	83 c4 10             	add    esp,0x10
c0018bf3:	55                   	push   ebp
c0018bf4:	55                   	push   ebp
c0018bf5:	56                   	push   esi
c0018bf6:	68 48 54 02 c0       	push   0xc0025448
c0018bfb:	e8 62 69 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c00:	c7 04 24 48 54 02 c0 	mov    DWORD PTR [esp],0xc0025448
c0018c07:	e8 84 68 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c0c:	83 c4 10             	add    esp,0x10
c0018c0f:	39 f8                	cmp    eax,edi
c0018c11:	0f 84 1e ff ff ff    	je     c0018b35 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0018c17:	83 ec 0c             	sub    esp,0xc
c0018c1a:	68 48 54 02 c0       	push   0xc0025448
c0018c1f:	e8 6c 68 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c24:	89 c6                	mov    esi,eax
c0018c26:	c7 04 24 48 54 02 c0 	mov    DWORD PTR [esp],0xc0025448
c0018c2d:	e8 82 68 00 00       	call   c001f4b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c32:	83 c4 10             	add    esp,0x10
c0018c35:	39 f3                	cmp    ebx,esi
c0018c37:	74 ba                	je     c0018bf3 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018c39:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018c3c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018c3f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018c45:	75 ac                	jne    c0018bf3 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018c47:	eb 80                	jmp    c0018bc9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0018c49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c4d:	83 ec 0c             	sub    esp,0xc
c0018c50:	68 e8 29 02 c0       	push   0xc00229e8
c0018c55:	e9 59 ff ff ff       	jmp    c0018bb3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c0018c5a:	8b 36                	mov    esi,DWORD PTR [esi]
c0018c5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c60:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018c63:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018c66:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018c6c:	01 d7                	add    edi,edx
c0018c6e:	89 f8                	mov    eax,edi
c0018c70:	e9 49 fe ff ff       	jmp    c0018abe <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c0018c75 <cleanerTaskFunction(void*)>:
c0018c75:	53                   	push   ebx
c0018c76:	83 ec 08             	sub    esp,0x8
c0018c79:	e8 7f f6 ff ff       	call   c00182fd <unlockScheduler()>
c0018c7e:	e8 78 f6 ff ff       	call   c00182fb <lockScheduler()>
c0018c83:	80 3d 0c 54 02 c0 00 	cmp    BYTE PTR ds:0xc002540c,0x0
c0018c8a:	0f 85 8e 00 00 00    	jne    c0018d1e <cleanerTaskFunction(void*)+0xa9>
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	6a 02                	push   0x2
c0018c95:	e8 c2 fa ff ff       	call   c001875c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018c9a:	83 c4 10             	add    esp,0x10
c0018c9d:	c6 05 0c 54 02 c0 00 	mov    BYTE PTR ds:0xc002540c,0x0
c0018ca4:	e8 79 f6 ff ff       	call   c0018322 <lockStuff()>
c0018ca9:	e8 4d f6 ff ff       	call   c00182fb <lockScheduler()>
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	68 30 54 02 c0       	push   0xc0025430
c0018cb6:	e8 dd 67 00 00       	call   c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018cbb:	83 c4 10             	add    esp,0x10
c0018cbe:	84 c0                	test   al,al
c0018cc0:	75 40                	jne    c0018d02 <cleanerTaskFunction(void*)+0x8d>
c0018cc2:	83 ec 0c             	sub    esp,0xc
c0018cc5:	68 30 54 02 c0       	push   0xc0025430
c0018cca:	e8 c1 67 00 00       	call   c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ccf:	89 c3                	mov    ebx,eax
c0018cd1:	c7 04 24 30 54 02 c0 	mov    DWORD PTR [esp],0xc0025430
c0018cd8:	e8 d7 67 00 00       	call   c001f4b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018cdd:	c7 04 24 ed 26 02 c0 	mov    DWORD PTR [esp],0xc00226ed
c0018ce4:	e8 4a 64 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018ce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018cec:	e8 db fc ff ff       	call   c00189cc <cleanupTerminatedTask(ThreadControlBlock*)>
c0018cf1:	c7 04 24 06 27 02 c0 	mov    DWORD PTR [esp],0xc0022706
c0018cf8:	e8 36 64 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018cfd:	83 c4 10             	add    esp,0x10
c0018d00:	eb ac                	jmp    c0018cae <cleanerTaskFunction(void*)+0x39>
c0018d02:	e8 f6 f5 ff ff       	call   c00182fd <unlockScheduler()>
c0018d07:	e8 bd f9 ff ff       	call   c00186c9 <unlockStuff()>
c0018d0c:	e8 ea f5 ff ff       	call   c00182fb <lockScheduler()>
c0018d11:	80 3d 0c 54 02 c0 00 	cmp    BYTE PTR ds:0xc002540c,0x0
c0018d18:	0f 84 72 ff ff ff    	je     c0018c90 <cleanerTaskFunction(void*)+0x1b>
c0018d1e:	e8 da f5 ff ff       	call   c00182fd <unlockScheduler()>
c0018d23:	e9 75 ff ff ff       	jmp    c0018c9d <cleanerTaskFunction(void*)+0x28>

c0018d28 <terminateTask(int)>:
c0018d28:	83 ec 14             	sub    esp,0x14
c0018d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018d33:	83 c0 0c             	add    eax,0xc
c0018d36:	50                   	push   eax
c0018d37:	68 44 2a 02 c0       	push   0xc0022a44
c0018d3c:	e8 f2 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018d41:	e8 dc f5 ff ff       	call   c0018322 <lockStuff()>
c0018d46:	e8 b0 f5 ff ff       	call   c00182fb <lockScheduler()>
c0018d4b:	c7 04 24 19 27 02 c0 	mov    DWORD PTR [esp],0xc0022719
c0018d52:	e8 dc 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018d57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d60:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018d63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d68:	59                   	pop    ecx
c0018d69:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018d6c:	5a                   	pop    edx
c0018d6d:	50                   	push   eax
c0018d6e:	68 30 54 02 c0       	push   0xc0025430
c0018d73:	e8 ea 67 00 00       	call   c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d7d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018d84:	c7 04 24 33 27 02 c0 	mov    DWORD PTR [esp],0xc0022733
c0018d8b:	e8 a3 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018d90:	8b 0d 08 54 02 c0    	mov    ecx,DWORD PTR ds:0xc0025408
c0018d96:	83 c4 10             	add    esp,0x10
c0018d99:	85 c9                	test   ecx,ecx
c0018d9b:	74 5b                	je     c0018df8 <terminateTask(int)+0xd0>
c0018d9d:	83 ec 0c             	sub    esp,0xc
c0018da0:	68 4d 27 02 c0       	push   0xc002274d
c0018da5:	e8 89 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018daa:	58                   	pop    eax
c0018dab:	8b 15 08 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025408
c0018db1:	52                   	push   edx
c0018db2:	c6 05 0c 54 02 c0 01 	mov    BYTE PTR ds:0xc002540c,0x1
c0018db9:	e8 61 fb ff ff       	call   c001891f <unblockTask(ThreadControlBlock*)>
c0018dbe:	c7 04 24 67 27 02 c0 	mov    DWORD PTR [esp],0xc0022767
c0018dc5:	e8 69 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018dca:	83 c4 10             	add    esp,0x10
c0018dcd:	e8 2b f5 ff ff       	call   c00182fd <unlockScheduler()>
c0018dd2:	e8 f2 f8 ff ff       	call   c00186c9 <unlockStuff()>
c0018dd7:	83 ec 0c             	sub    esp,0xc
c0018dda:	68 9f 27 02 c0       	push   0xc002279f
c0018ddf:	e8 4f 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018de4:	83 c4 10             	add    esp,0x10
c0018de7:	e8 0f f5 ff ff       	call   c00182fb <lockScheduler()>
c0018dec:	e8 53 f8 ff ff       	call   c0018644 <schedule()>
c0018df1:	e8 07 f5 ff ff       	call   c00182fd <unlockScheduler()>
c0018df6:	eb ef                	jmp    c0018de7 <terminateTask(int)+0xbf>
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	68 81 27 02 c0       	push   0xc0022781
c0018e00:	e8 2e 63 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	eb c3                	jmp    c0018dcd <terminateTask(int)+0xa5>

c0018e0a <Thr::terminateFromIRQ(int)>:
c0018e0a:	83 ec 18             	sub    esp,0x18
c0018e0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e11:	50                   	push   eax
c0018e12:	e8 11 ff ff ff       	call   c0018d28 <terminateTask(int)>
c0018e17:	90                   	nop

c0018e18 <Semaphore::release()>:
c0018e18:	83 ec 0c             	sub    esp,0xc
c0018e1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e1f:	e8 fe f4 ff ff       	call   c0018322 <lockStuff()>
c0018e24:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018e27:	85 c0                	test   eax,eax
c0018e29:	74 1a                	je     c0018e45 <Semaphore::release()+0x2d>
c0018e2b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0018e2e:	83 ec 0c             	sub    esp,0xc
c0018e31:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0018e34:	50                   	push   eax
c0018e35:	e8 e5 fa ff ff       	call   c001891f <unblockTask(ThreadControlBlock*)>
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	83 c4 0c             	add    esp,0xc
c0018e40:	e9 84 f8 ff ff       	jmp    c00186c9 <unlockStuff()>
c0018e45:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e48:	48                   	dec    eax
c0018e49:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e4c:	83 c4 0c             	add    esp,0xc
c0018e4f:	e9 75 f8 ff ff       	jmp    c00186c9 <unlockStuff()>

c0018e54 <__static_initialization_and_destruction_0(int, int)>:
c0018e54:	83 ec 0c             	sub    esp,0xc
c0018e57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018e5c:	0f 85 88 00 00 00    	jne    c0018eea <__static_initialization_and_destruction_0(int, int)+0x96>
c0018e62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018e6a:	75 7e                	jne    c0018eea <__static_initialization_and_destruction_0(int, int)+0x96>
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	68 48 54 02 c0       	push   0xc0025448
c0018e74:	e8 cf 68 00 00       	call   c001f748 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e79:	83 c4 10             	add    esp,0x10
c0018e7c:	83 ec 04             	sub    esp,0x4
c0018e7f:	68 28 34 02 c0       	push   0xc0023428
c0018e84:	68 48 54 02 c0       	push   0xc0025448
c0018e89:	68 08 f7 01 c0       	push   0xc001f708
c0018e8e:	e8 f6 60 ff ff       	call   c000ef89 <__cxa_atexit>
c0018e93:	83 c4 10             	add    esp,0x10
c0018e96:	83 ec 0c             	sub    esp,0xc
c0018e99:	68 3c 54 02 c0       	push   0xc002543c
c0018e9e:	e8 a5 68 00 00       	call   c001f748 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	83 ec 04             	sub    esp,0x4
c0018ea9:	68 28 34 02 c0       	push   0xc0023428
c0018eae:	68 3c 54 02 c0       	push   0xc002543c
c0018eb3:	68 08 f7 01 c0       	push   0xc001f708
c0018eb8:	e8 cc 60 ff ff       	call   c000ef89 <__cxa_atexit>
c0018ebd:	83 c4 10             	add    esp,0x10
c0018ec0:	83 ec 0c             	sub    esp,0xc
c0018ec3:	68 30 54 02 c0       	push   0xc0025430
c0018ec8:	e8 7b 68 00 00       	call   c001f748 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	83 ec 04             	sub    esp,0x4
c0018ed3:	68 28 34 02 c0       	push   0xc0023428
c0018ed8:	68 30 54 02 c0       	push   0xc0025430
c0018edd:	68 08 f7 01 c0       	push   0xc001f708
c0018ee2:	e8 a2 60 ff ff       	call   c000ef89 <__cxa_atexit>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	90                   	nop
c0018eeb:	83 c4 0c             	add    esp,0xc
c0018eee:	c3                   	ret    

c0018eef <_GLOBAL__sub_I_kernelProcess>:
c0018eef:	83 ec 0c             	sub    esp,0xc
c0018ef2:	83 ec 08             	sub    esp,0x8
c0018ef5:	68 ff ff 00 00       	push   0xffff
c0018efa:	6a 01                	push   0x1
c0018efc:	e8 53 ff ff ff       	call   c0018e54 <__static_initialization_and_destruction_0(int, int)>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	83 c4 0c             	add    esp,0xc
c0018f07:	c3                   	ret    

c0018f08 <Vm::vm8086EntryPoint(void*)>:
c0018f08:	83 ec 0c             	sub    esp,0xc
c0018f0b:	e8 ed f3 ff ff       	call   c00182fd <unlockScheduler()>
c0018f10:	fb                   	sti    
c0018f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f16:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018f1a:	52                   	push   edx
c0018f1b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018f1f:	52                   	push   edx
c0018f20:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018f24:	52                   	push   edx
c0018f25:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018f29:	50                   	push   eax
c0018f2a:	e8 86 72 fe ff       	call   c00001b5 <goToVM86>
c0018f2f:	83 c4 1c             	add    esp,0x1c
c0018f32:	c3                   	ret    

c0018f33 <Vm::inbv(unsigned short)>:
c0018f33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f37:	ec                   	in     al,dx
c0018f38:	c3                   	ret    

c0018f39 <Vm::outbv(unsigned short, unsigned char)>:
c0018f39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f41:	ee                   	out    dx,al
c0018f42:	c3                   	ret    

c0018f43 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018f48:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018f4d:	c1 e0 04             	shl    eax,0x4
c0018f50:	01 d0                	add    eax,edx
c0018f52:	c3                   	ret    

c0018f53 <Vm::getSegment(unsigned int)>:
c0018f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f57:	c1 e8 10             	shr    eax,0x10
c0018f5a:	c3                   	ret    

c0018f5b <Vm::getOffset(unsigned int)>:
c0018f5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f5f:	c3                   	ret    

c0018f60 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018f60:	55                   	push   ebp
c0018f61:	57                   	push   edi
c0018f62:	56                   	push   esi
c0018f63:	53                   	push   ebx
c0018f64:	83 ec 2c             	sub    esp,0x2c
c0018f67:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018f6b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018f6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f73:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018f77:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018f7b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018f7f:	e8 77 f3 ff ff       	call   c00182fb <lockScheduler()>
c0018f84:	68 80 00 00 00       	push   0x80
c0018f89:	6a 00                	push   0x0
c0018f8b:	68 08 8f 01 c0       	push   0xc0018f08
c0018f90:	55                   	push   ebp
c0018f91:	e8 9a f4 ff ff       	call   c0018430 <Process::createThread(void (*)(void*), void*, int)>
c0018f96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f9a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018f9e:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018fa2:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018fa6:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018faa:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018fae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018fb5:	e8 44 60 ff ff       	call   c000effe <operator new(unsigned long)>
c0018fba:	83 c4 0c             	add    esp,0xc
c0018fbd:	55                   	push   ebp
c0018fbe:	89 c3                	mov    ebx,eax
c0018fc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018fc4:	50                   	push   eax
c0018fc5:	e8 a0 66 ff ff       	call   c000f66a <File::File(char const*, Process*)>
c0018fca:	83 c4 0c             	add    esp,0xc
c0018fcd:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018fd1:	50                   	push   eax
c0018fd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018fd6:	50                   	push   eax
c0018fd7:	53                   	push   ebx
c0018fd8:	e8 9d 69 ff ff       	call   c000f97a <File::stat(unsigned long long*, bool*)>
c0018fdd:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	84 d2                	test   dl,dl
c0018fe6:	74 1c                	je     c0019004 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018fe8:	83 ec 0c             	sub    esp,0xc
c0018feb:	68 63 2a 02 c0       	push   0xc0022a63
c0018ff0:	e8 fd c2 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0018ff5:	e8 03 f3 ff ff       	call   c00182fd <unlockScheduler()>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	31 d2                	xor    edx,edx
c0018fff:	e9 81 00 00 00       	jmp    c0019085 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019004:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019008:	51                   	push   ecx
c0019009:	51                   	push   ecx
c001900a:	6a 01                	push   0x1
c001900c:	53                   	push   ebx
c001900d:	e8 bc 66 ff ff       	call   c000f6ce <File::open(FileOpenMode)>
c0019012:	83 c4 10             	add    esp,0x10
c0019015:	85 c0                	test   eax,eax
c0019017:	74 1b                	je     c0019034 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019019:	83 ec 0c             	sub    esp,0xc
c001901c:	68 7c 2a 02 c0       	push   0xc0022a7c
c0019021:	e8 cc c2 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0019026:	e8 d2 f2 ff ff       	call   c00182fd <unlockScheduler()>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019032:	eb 51                	jmp    c0019085 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019034:	83 ec 0c             	sub    esp,0xc
c0019037:	0f b7 ff             	movzx  edi,di
c001903a:	6a 07                	push   0x7
c001903c:	68 00 01 00 00       	push   0x100
c0019041:	6a 00                	push   0x0
c0019043:	6a 00                	push   0x0
c0019045:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001904b:	e8 86 5a ff ff       	call   c000ead6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019050:	83 c4 18             	add    esp,0x18
c0019053:	0f b7 f6             	movzx  esi,si
c0019056:	57                   	push   edi
c0019057:	56                   	push   esi
c0019058:	e8 e6 fe ff ff       	call   c0018f43 <Vm::realToLinear(unsigned short, unsigned short)>
c001905d:	5a                   	pop    edx
c001905e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019060:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019064:	51                   	push   ecx
c0019065:	50                   	push   eax
c0019066:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001906a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001906e:	53                   	push   ebx
c001906f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019072:	83 c4 14             	add    esp,0x14
c0019075:	53                   	push   ebx
c0019076:	e8 b1 66 ff ff       	call   c000f72c <File::close()>
c001907b:	e8 7d f2 ff ff       	call   c00182fd <unlockScheduler()>
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	b2 01                	mov    dl,0x1
c0019085:	83 c4 2c             	add    esp,0x2c
c0019088:	88 d0                	mov    al,dl
c001908a:	5b                   	pop    ebx
c001908b:	5e                   	pop    esi
c001908c:	5f                   	pop    edi
c001908d:	5d                   	pop    ebp
c001908e:	c3                   	ret    

c001908f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001908f:	57                   	push   edi
c0019090:	56                   	push   esi
c0019091:	53                   	push   ebx
c0019092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019096:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001909a:	83 e8 06             	sub    eax,0x6
c001909d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00190a1:	0f b7 c0             	movzx  eax,ax
c00190a4:	50                   	push   eax
c00190a5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00190aa:	50                   	push   eax
c00190ab:	e8 93 fe ff ff       	call   c0018f43 <Vm::realToLinear(unsigned short, unsigned short)>
c00190b0:	5a                   	pop    edx
c00190b1:	5e                   	pop    esi
c00190b2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00190b5:	8d 56 fa             	lea    edx,[esi-0x6]
c00190b8:	81 e2 ff ff 00 00    	and    edx,0xffff
c00190be:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00190c1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00190c4:	83 c2 02             	add    edx,0x2
c00190c7:	66 89 10             	mov    WORD PTR [eax],dx
c00190ca:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00190cd:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00190d1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00190d4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00190d8:	89 d6                	mov    esi,edx
c00190da:	66 81 e6 ff fd       	and    si,0xfdff
c00190df:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00190e5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00190e9:	74 07                	je     c00190f2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00190eb:	89 d6                	mov    esi,edx
c00190ed:	66 81 ce 00 02       	or     si,0x200
c00190f2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00190f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190fb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00190ff:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019107:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001910a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019112:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019115:	5b                   	pop    ebx
c0019116:	5e                   	pop    esi
c0019117:	5f                   	pop    edi
c0019118:	c3                   	ret    

c0019119 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019119:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001911e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019123:	c1 e0 04             	shl    eax,0x4
c0019126:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019129:	c3                   	ret    

c001912a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001912a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001912f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019134:	c1 e0 04             	shl    eax,0x4
c0019137:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001913b:	c3                   	ret    

c001913c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001913c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019141:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019146:	c1 e0 04             	shl    eax,0x4
c0019149:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001914c:	c3                   	ret    

c001914d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001914d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019152:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019157:	c1 e0 04             	shl    eax,0x4
c001915a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001915e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019161:	c3                   	ret    

c0019162 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019162:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019167:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001916c:	c1 e0 04             	shl    eax,0x4
c001916f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019173:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019177:	c3                   	ret    

c0019178 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019178:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001917d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019182:	c1 e0 04             	shl    eax,0x4
c0019185:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019189:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001918c:	c3                   	ret    

c001918d <Vm::faultHandler(regs*)>:
c001918d:	55                   	push   ebp
c001918e:	57                   	push   edi
c001918f:	56                   	push   esi
c0019190:	53                   	push   ebx
c0019191:	83 ec 1c             	sub    esp,0x1c
c0019194:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019198:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001919c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001919f:	52                   	push   edx
c00191a0:	0f b7 f0             	movzx  esi,ax
c00191a3:	0f b7 c0             	movzx  eax,ax
c00191a6:	50                   	push   eax
c00191a7:	e8 97 fd ff ff       	call   c0018f43 <Vm::realToLinear(unsigned short, unsigned short)>
c00191ac:	5a                   	pop    edx
c00191ad:	89 c7                	mov    edi,eax
c00191af:	59                   	pop    ecx
c00191b0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00191b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191b7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00191ba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00191bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00191c3:	0f b7 c5             	movzx  eax,bp
c00191c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191ca:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00191ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00191d2:	e8 6c fd ff ff       	call   c0018f43 <Vm::realToLinear(unsigned short, unsigned short)>
c00191d7:	5a                   	pop    edx
c00191d8:	59                   	pop    ecx
c00191d9:	b1 06                	mov    cl,0x6
c00191db:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00191e0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00191e5:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00191e8:	80 fa 9d             	cmp    dl,0x9d
c00191eb:	0f 84 1d 02 00 00    	je     c001940e <Vm::faultHandler(regs*)+0x281>
c00191f1:	0f 87 8e 00 00 00    	ja     c0019285 <Vm::faultHandler(regs*)+0xf8>
c00191f7:	80 fa 66             	cmp    dl,0x66
c00191fa:	0f 84 89 01 00 00    	je     c0019389 <Vm::faultHandler(regs*)+0x1fc>
c0019200:	77 44                	ja     c0019246 <Vm::faultHandler(regs*)+0xb9>
c0019202:	80 fa 36             	cmp    dl,0x36
c0019205:	0f 84 74 01 00 00    	je     c001937f <Vm::faultHandler(regs*)+0x1f2>
c001920b:	77 1a                	ja     c0019227 <Vm::faultHandler(regs*)+0x9a>
c001920d:	80 fa 26             	cmp    dl,0x26
c0019210:	0f 84 4b 01 00 00    	je     c0019361 <Vm::faultHandler(regs*)+0x1d4>
c0019216:	80 fa 2e             	cmp    dl,0x2e
c0019219:	0f 85 4a 05 00 00    	jne    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c001921f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019222:	31 c9                	xor    ecx,ecx
c0019224:	47                   	inc    edi
c0019225:	eb be                	jmp    c00191e5 <Vm::faultHandler(regs*)+0x58>
c0019227:	80 fa 64             	cmp    dl,0x64
c001922a:	0f 84 3b 01 00 00    	je     c001936b <Vm::faultHandler(regs*)+0x1de>
c0019230:	0f 87 3f 01 00 00    	ja     c0019375 <Vm::faultHandler(regs*)+0x1e8>
c0019236:	80 fa 3e             	cmp    dl,0x3e
c0019239:	0f 85 2a 05 00 00    	jne    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c001923f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019242:	b1 01                	mov    cl,0x1
c0019244:	eb de                	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c0019246:	80 fa 6d             	cmp    dl,0x6d
c0019249:	0f 84 bf 02 00 00    	je     c001950e <Vm::faultHandler(regs*)+0x381>
c001924f:	77 17                	ja     c0019268 <Vm::faultHandler(regs*)+0xdb>
c0019251:	80 fa 67             	cmp    dl,0x67
c0019254:	0f 84 3c 01 00 00    	je     c0019396 <Vm::faultHandler(regs*)+0x209>
c001925a:	80 fa 6c             	cmp    dl,0x6c
c001925d:	0f 84 5d 02 00 00    	je     c00194c0 <Vm::faultHandler(regs*)+0x333>
c0019263:	e9 01 05 00 00       	jmp    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c0019268:	80 fa 6f             	cmp    dl,0x6f
c001926b:	0f 84 8b 03 00 00    	je     c00195fc <Vm::faultHandler(regs*)+0x46f>
c0019271:	0f 82 0f 03 00 00    	jb     c0019586 <Vm::faultHandler(regs*)+0x3f9>
c0019277:	80 fa 9c             	cmp    dl,0x9c
c001927a:	0f 84 23 01 00 00    	je     c00193a3 <Vm::faultHandler(regs*)+0x216>
c0019280:	e9 e4 04 00 00       	jmp    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c0019285:	80 fa ec             	cmp    dl,0xec
c0019288:	0f 84 7f 04 00 00    	je     c001970d <Vm::faultHandler(regs*)+0x580>
c001928e:	77 7b                	ja     c001930b <Vm::faultHandler(regs*)+0x17e>
c0019290:	80 fa e4             	cmp    dl,0xe4
c0019293:	0f 84 fe 03 00 00    	je     c0019697 <Vm::faultHandler(regs*)+0x50a>
c0019299:	77 53                	ja     c00192ee <Vm::faultHandler(regs*)+0x161>
c001929b:	80 fa cd             	cmp    dl,0xcd
c001929e:	0f 84 cd 01 00 00    	je     c0019471 <Vm::faultHandler(regs*)+0x2e4>
c00192a4:	80 fa cf             	cmp    dl,0xcf
c00192a7:	0f 85 bc 04 00 00    	jne    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c00192ad:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00192b0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00192b3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00192b7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00192ba:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00192be:	81 ca 00 02 02 00    	or     edx,0x20200
c00192c4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00192c7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00192cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00192d1:	66 c1 e8 09          	shr    ax,0x9
c00192d5:	83 e0 01             	and    eax,0x1
c00192d8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00192db:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00192de:	83 c0 06             	add    eax,0x6
c00192e1:	25 ff ff 00 00       	and    eax,0xffff
c00192e6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00192e9:	e9 77 04 00 00       	jmp    c0019765 <Vm::faultHandler(regs*)+0x5d8>
c00192ee:	80 fa e6             	cmp    dl,0xe6
c00192f1:	0f 84 ea 03 00 00    	je     c00196e1 <Vm::faultHandler(regs*)+0x554>
c00192f7:	0f 82 b6 03 00 00    	jb     c00196b3 <Vm::faultHandler(regs*)+0x526>
c00192fd:	80 fa e7             	cmp    dl,0xe7
c0019300:	0f 84 f2 03 00 00    	je     c00196f8 <Vm::faultHandler(regs*)+0x56b>
c0019306:	e9 5e 04 00 00       	jmp    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c001930b:	80 fa ef             	cmp    dl,0xef
c001930e:	0f 84 3c 04 00 00    	je     c0019750 <Vm::faultHandler(regs*)+0x5c3>
c0019314:	77 28                	ja     c001933e <Vm::faultHandler(regs*)+0x1b1>
c0019316:	80 fa ed             	cmp    dl,0xed
c0019319:	0f 84 0a 04 00 00    	je     c0019729 <Vm::faultHandler(regs*)+0x59c>
c001931f:	80 fa ee             	cmp    dl,0xee
c0019322:	0f 85 41 04 00 00    	jne    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c0019328:	50                   	push   eax
c0019329:	50                   	push   eax
c001932a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001932e:	50                   	push   eax
c001932f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019333:	50                   	push   eax
c0019334:	e8 00 fc ff ff       	call   c0018f39 <Vm::outbv(unsigned short, unsigned char)>
c0019339:	e9 0a 04 00 00       	jmp    c0019748 <Vm::faultHandler(regs*)+0x5bb>
c001933e:	80 fa fa             	cmp    dl,0xfa
c0019341:	0f 84 5d 01 00 00    	je     c00194a4 <Vm::faultHandler(regs*)+0x317>
c0019347:	80 fa fb             	cmp    dl,0xfb
c001934a:	0f 84 62 01 00 00    	je     c00194b2 <Vm::faultHandler(regs*)+0x325>
c0019350:	80 fa f3             	cmp    dl,0xf3
c0019353:	0f 85 10 04 00 00    	jne    c0019769 <Vm::faultHandler(regs*)+0x5dc>
c0019359:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001935c:	e9 c3 fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c0019361:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019364:	b1 02                	mov    cl,0x2
c0019366:	e9 b9 fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c001936b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001936e:	b1 03                	mov    cl,0x3
c0019370:	e9 af fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c0019375:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019378:	b1 04                	mov    cl,0x4
c001937a:	e9 a5 fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c001937f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019382:	b1 05                	mov    cl,0x5
c0019384:	e9 9b fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c0019389:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001938c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019391:	e9 8e fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c0019396:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019399:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001939e:	e9 81 fe ff ff       	jmp    c0019224 <Vm::faultHandler(regs*)+0x97>
c00193a3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00193a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00193aa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193af:	74 30                	je     c00193e1 <Vm::faultHandler(regs*)+0x254>
c00193b1:	83 e9 04             	sub    ecx,0x4
c00193b4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00193ba:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00193c0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00193c3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00193c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00193cc:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00193d0:	0f 84 8c 03 00 00    	je     c0019762 <Vm::faultHandler(regs*)+0x5d5>
c00193d6:	80 ce 02             	or     dh,0x2
c00193d9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00193dc:	e9 81 03 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c00193e1:	83 e9 02             	sub    ecx,0x2
c00193e4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00193ea:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00193ed:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00193f1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00193f7:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00193fb:	74 05                	je     c0019402 <Vm::faultHandler(regs*)+0x275>
c00193fd:	80 ce 02             	or     dh,0x2
c0019400:	eb 03                	jmp    c0019405 <Vm::faultHandler(regs*)+0x278>
c0019402:	80 e6 fd             	and    dh,0xfd
c0019405:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019409:	e9 54 03 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c001940e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019413:	74 2a                	je     c001943f <Vm::faultHandler(regs*)+0x2b2>
c0019415:	8b 10                	mov    edx,DWORD PTR [eax]
c0019417:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001941d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019423:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019426:	8b 00                	mov    eax,DWORD PTR [eax]
c0019428:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001942e:	c1 e8 09             	shr    eax,0x9
c0019431:	83 e0 01             	and    eax,0x1
c0019434:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019437:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001943a:	83 c0 04             	add    eax,0x4
c001943d:	eb 25                	jmp    c0019464 <Vm::faultHandler(regs*)+0x2d7>
c001943f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019442:	81 ca 00 02 02 00    	or     edx,0x20200
c0019448:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001944b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001944e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019454:	66 c1 e8 09          	shr    ax,0x9
c0019458:	83 e0 01             	and    eax,0x1
c001945b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001945e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019461:	83 c0 02             	add    eax,0x2
c0019464:	25 ff ff 00 00       	and    eax,0xffff
c0019469:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001946c:	e9 f1 02 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c0019471:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019475:	3c ff                	cmp    al,0xff
c0019477:	75 10                	jne    c0019489 <Vm::faultHandler(regs*)+0x2fc>
c0019479:	83 ec 0c             	sub    esp,0xc
c001947c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001947f:	e8 86 f9 ff ff       	call   c0018e0a <Thr::terminateFromIRQ(int)>
c0019484:	e9 c2 02 00 00       	jmp    c001974b <Vm::faultHandler(regs*)+0x5be>
c0019489:	83 ec 0c             	sub    esp,0xc
c001948c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019494:	57                   	push   edi
c0019495:	50                   	push   eax
c0019496:	53                   	push   ebx
c0019497:	e8 f3 fb ff ff       	call   c001908f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001949c:	83 c4 20             	add    esp,0x20
c001949f:	e9 c1 02 00 00       	jmp    c0019765 <Vm::faultHandler(regs*)+0x5d8>
c00194a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194a9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00194ad:	e9 b0 02 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c00194b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194b7:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00194bb:	e9 a2 02 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c00194c0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00194c5:	74 0d                	je     c00194d4 <Vm::faultHandler(regs*)+0x347>
c00194c7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00194ce:	0f 87 e9 02 00 00    	ja     c00197bd <Vm::faultHandler(regs*)+0x630>
c00194d4:	83 ec 0c             	sub    esp,0xc
c00194d7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00194da:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194de:	50                   	push   eax
c00194df:	e8 4f fa ff ff       	call   c0018f33 <Vm::inbv(unsigned short)>
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	0f b6 c0             	movzx  eax,al
c00194ea:	50                   	push   eax
c00194eb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00194ef:	0f b7 c9             	movzx  ecx,cx
c00194f2:	50                   	push   eax
c00194f3:	51                   	push   ecx
c00194f4:	e8 54 fc ff ff       	call   c001914d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00194f9:	83 c4 10             	add    esp,0x10
c00194fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00194ff:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019503:	74 03                	je     c0019508 <Vm::faultHandler(regs*)+0x37b>
c0019505:	48                   	dec    eax
c0019506:	eb 01                	jmp    c0019509 <Vm::faultHandler(regs*)+0x37c>
c0019508:	40                   	inc    eax
c0019509:	0f b7 c0             	movzx  eax,ax
c001950c:	eb 70                	jmp    c001957e <Vm::faultHandler(regs*)+0x3f1>
c001950e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019511:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019514:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019519:	74 0c                	je     c0019527 <Vm::faultHandler(regs*)+0x39a>
c001951b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019521:	0f 87 96 02 00 00    	ja     c00197bd <Vm::faultHandler(regs*)+0x630>
c0019527:	0f b7 c9             	movzx  ecx,cx
c001952a:	0f b7 f6             	movzx  esi,si
c001952d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019530:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019535:	74 20                	je     c0019557 <Vm::faultHandler(regs*)+0x3ca>
c0019537:	ed                   	in     eax,dx
c0019538:	55                   	push   ebp
c0019539:	50                   	push   eax
c001953a:	51                   	push   ecx
c001953b:	56                   	push   esi
c001953c:	e8 37 fc ff ff       	call   c0019178 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019547:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001954b:	74 05                	je     c0019552 <Vm::faultHandler(regs*)+0x3c5>
c001954d:	83 e8 04             	sub    eax,0x4
c0019550:	eb 27                	jmp    c0019579 <Vm::faultHandler(regs*)+0x3ec>
c0019552:	83 c0 04             	add    eax,0x4
c0019555:	eb 22                	jmp    c0019579 <Vm::faultHandler(regs*)+0x3ec>
c0019557:	66 ed                	in     ax,dx
c0019559:	0f b7 c0             	movzx  eax,ax
c001955c:	57                   	push   edi
c001955d:	50                   	push   eax
c001955e:	51                   	push   ecx
c001955f:	56                   	push   esi
c0019560:	e8 fd fb ff ff       	call   c0019162 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001956b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001956f:	74 05                	je     c0019576 <Vm::faultHandler(regs*)+0x3e9>
c0019571:	83 e8 02             	sub    eax,0x2
c0019574:	eb 03                	jmp    c0019579 <Vm::faultHandler(regs*)+0x3ec>
c0019576:	83 c0 02             	add    eax,0x2
c0019579:	25 ff ff 00 00       	and    eax,0xffff
c001957e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019581:	e9 dc 01 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c0019586:	49                   	dec    ecx
c0019587:	80 f9 05             	cmp    cl,0x5
c001958a:	77 24                	ja     c00195b0 <Vm::faultHandler(regs*)+0x423>
c001958c:	0f b6 c9             	movzx  ecx,cl
c001958f:	ff 24 8d c4 2a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd53c]
c0019596:	0f b7 f5             	movzx  esi,bp
c0019599:	eb 15                	jmp    c00195b0 <Vm::faultHandler(regs*)+0x423>
c001959b:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001959f:	eb 0f                	jmp    c00195b0 <Vm::faultHandler(regs*)+0x423>
c00195a1:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c00195a5:	eb 09                	jmp    c00195b0 <Vm::faultHandler(regs*)+0x423>
c00195a7:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c00195ab:	eb 03                	jmp    c00195b0 <Vm::faultHandler(regs*)+0x423>
c00195ad:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c00195b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00195b3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00195b8:	74 0b                	je     c00195c5 <Vm::faultHandler(regs*)+0x438>
c00195ba:	3d ff ff 00 00       	cmp    eax,0xffff
c00195bf:	0f 87 f8 01 00 00    	ja     c00197bd <Vm::faultHandler(regs*)+0x630>
c00195c5:	52                   	push   edx
c00195c6:	52                   	push   edx
c00195c7:	0f b7 c0             	movzx  eax,ax
c00195ca:	50                   	push   eax
c00195cb:	56                   	push   esi
c00195cc:	e8 48 fb ff ff       	call   c0019119 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00195d1:	59                   	pop    ecx
c00195d2:	5e                   	pop    esi
c00195d3:	0f b6 c0             	movzx  eax,al
c00195d6:	50                   	push   eax
c00195d7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00195db:	50                   	push   eax
c00195dc:	e8 58 f9 ff ff       	call   c0018f39 <Vm::outbv(unsigned short, unsigned char)>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00195e7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00195eb:	74 03                	je     c00195f0 <Vm::faultHandler(regs*)+0x463>
c00195ed:	48                   	dec    eax
c00195ee:	eb 01                	jmp    c00195f1 <Vm::faultHandler(regs*)+0x464>
c00195f0:	40                   	inc    eax
c00195f1:	0f b7 c0             	movzx  eax,ax
c00195f4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00195f7:	e9 66 01 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c00195fc:	49                   	dec    ecx
c00195fd:	80 f9 05             	cmp    cl,0x5
c0019600:	77 1f                	ja     c0019621 <Vm::faultHandler(regs*)+0x494>
c0019602:	0f b6 c9             	movzx  ecx,cl
c0019605:	ff 24 8d dc 2a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd524]
c001960c:	89 ee                	mov    esi,ebp
c001960e:	eb 11                	jmp    c0019621 <Vm::faultHandler(regs*)+0x494>
c0019610:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019613:	eb 0c                	jmp    c0019621 <Vm::faultHandler(regs*)+0x494>
c0019615:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019618:	eb 07                	jmp    c0019621 <Vm::faultHandler(regs*)+0x494>
c001961a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001961d:	eb 02                	jmp    c0019621 <Vm::faultHandler(regs*)+0x494>
c001961f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019621:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019624:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019629:	74 0c                	je     c0019637 <Vm::faultHandler(regs*)+0x4aa>
c001962b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019631:	0f 87 86 01 00 00    	ja     c00197bd <Vm::faultHandler(regs*)+0x630>
c0019637:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001963a:	0f b7 d6             	movzx  edx,si
c001963d:	81 e7 00 04 00 00    	and    edi,0x400
c0019643:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019646:	0f b7 c1             	movzx  eax,cx
c0019649:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001964e:	74 1d                	je     c001966d <Vm::faultHandler(regs*)+0x4e0>
c0019650:	55                   	push   ebp
c0019651:	55                   	push   ebp
c0019652:	50                   	push   eax
c0019653:	52                   	push   edx
c0019654:	e8 e3 fa ff ff       	call   c001913c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	89 f2                	mov    edx,esi
c001965e:	ef                   	out    dx,eax
c001965f:	85 ff                	test   edi,edi
c0019661:	74 05                	je     c0019668 <Vm::faultHandler(regs*)+0x4db>
c0019663:	83 e9 04             	sub    ecx,0x4
c0019666:	eb 21                	jmp    c0019689 <Vm::faultHandler(regs*)+0x4fc>
c0019668:	83 c1 04             	add    ecx,0x4
c001966b:	eb 1c                	jmp    c0019689 <Vm::faultHandler(regs*)+0x4fc>
c001966d:	55                   	push   ebp
c001966e:	55                   	push   ebp
c001966f:	50                   	push   eax
c0019670:	52                   	push   edx
c0019671:	e8 b4 fa ff ff       	call   c001912a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019676:	83 c4 10             	add    esp,0x10
c0019679:	89 f2                	mov    edx,esi
c001967b:	66 ef                	out    dx,ax
c001967d:	85 ff                	test   edi,edi
c001967f:	74 05                	je     c0019686 <Vm::faultHandler(regs*)+0x4f9>
c0019681:	83 e9 02             	sub    ecx,0x2
c0019684:	eb 03                	jmp    c0019689 <Vm::faultHandler(regs*)+0x4fc>
c0019686:	83 c1 02             	add    ecx,0x2
c0019689:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001968f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019692:	e9 cb 00 00 00       	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c0019697:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001969e:	83 ec 0c             	sub    esp,0xc
c00196a1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00196a5:	50                   	push   eax
c00196a6:	e8 88 f8 ff ff       	call   c0018f33 <Vm::inbv(unsigned short)>
c00196ab:	0f b6 c0             	movzx  eax,al
c00196ae:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00196b1:	eb 3f                	jmp    c00196f2 <Vm::faultHandler(regs*)+0x565>
c00196b3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00196b8:	74 07                	je     c00196c1 <Vm::faultHandler(regs*)+0x534>
c00196ba:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00196be:	ed                   	in     eax,dx
c00196bf:	eb 14                	jmp    c00196d5 <Vm::faultHandler(regs*)+0x548>
c00196c1:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00196c4:	66 31 c9             	xor    cx,cx
c00196c7:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00196ca:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00196ce:	66 ed                	in     ax,dx
c00196d0:	0f b7 c0             	movzx  eax,ax
c00196d3:	09 c8                	or     eax,ecx
c00196d5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00196d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00196dc:	e9 84 00 00 00       	jmp    c0019765 <Vm::faultHandler(regs*)+0x5d8>
c00196e1:	52                   	push   edx
c00196e2:	52                   	push   edx
c00196e3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00196e7:	50                   	push   eax
c00196e8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00196ec:	50                   	push   eax
c00196ed:	e8 47 f8 ff ff       	call   c0018f39 <Vm::outbv(unsigned short, unsigned char)>
c00196f2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00196f6:	eb 53                	jmp    c001974b <Vm::faultHandler(regs*)+0x5be>
c00196f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00196fb:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00196ff:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019704:	74 03                	je     c0019709 <Vm::faultHandler(regs*)+0x57c>
c0019706:	ef                   	out    dx,eax
c0019707:	eb cf                	jmp    c00196d8 <Vm::faultHandler(regs*)+0x54b>
c0019709:	66 ef                	out    dx,ax
c001970b:	eb cb                	jmp    c00196d8 <Vm::faultHandler(regs*)+0x54b>
c001970d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019714:	83 ec 0c             	sub    esp,0xc
c0019717:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001971b:	50                   	push   eax
c001971c:	e8 12 f8 ff ff       	call   c0018f33 <Vm::inbv(unsigned short)>
c0019721:	0f b6 c0             	movzx  eax,al
c0019724:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019727:	eb 1f                	jmp    c0019748 <Vm::faultHandler(regs*)+0x5bb>
c0019729:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001972c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019731:	74 03                	je     c0019736 <Vm::faultHandler(regs*)+0x5a9>
c0019733:	ed                   	in     eax,dx
c0019734:	eb 0d                	jmp    c0019743 <Vm::faultHandler(regs*)+0x5b6>
c0019736:	66 ed                	in     ax,dx
c0019738:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001973b:	66 31 d2             	xor    dx,dx
c001973e:	0f b7 c0             	movzx  eax,ax
c0019741:	09 d0                	or     eax,edx
c0019743:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019746:	eb 1a                	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c0019748:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001974b:	83 c4 10             	add    esp,0x10
c001974e:	eb 15                	jmp    c0019765 <Vm::faultHandler(regs*)+0x5d8>
c0019750:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019753:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019756:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001975b:	74 03                	je     c0019760 <Vm::faultHandler(regs*)+0x5d3>
c001975d:	ef                   	out    dx,eax
c001975e:	eb 02                	jmp    c0019762 <Vm::faultHandler(regs*)+0x5d5>
c0019760:	66 ef                	out    dx,ax
c0019762:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019765:	b0 01                	mov    al,0x1
c0019767:	eb 56                	jmp    c00197bf <Vm::faultHandler(regs*)+0x632>
c0019769:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001976d:	50                   	push   eax
c001976e:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019772:	50                   	push   eax
c0019773:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019777:	50                   	push   eax
c0019778:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001977c:	50                   	push   eax
c001977d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019781:	50                   	push   eax
c0019782:	52                   	push   edx
c0019783:	52                   	push   edx
c0019784:	68 95 2a 02 c0       	push   0xc0022a95
c0019789:	e8 a5 59 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001978e:	83 c4 20             	add    esp,0x20
c0019791:	83 ec 0c             	sub    esp,0xc
c0019794:	6a 60                	push   0x60
c0019796:	e8 98 f7 ff ff       	call   c0018f33 <Vm::inbv(unsigned short)>
c001979b:	83 c4 10             	add    esp,0x10
c001979e:	3c 1c                	cmp    al,0x1c
c00197a0:	74 04                	je     c00197a6 <Vm::faultHandler(regs*)+0x619>
c00197a2:	3c 5a                	cmp    al,0x5a
c00197a4:	75 eb                	jne    c0019791 <Vm::faultHandler(regs*)+0x604>
c00197a6:	3c 1c                	cmp    al,0x1c
c00197a8:	74 04                	je     c00197ae <Vm::faultHandler(regs*)+0x621>
c00197aa:	3c 5a                	cmp    al,0x5a
c00197ac:	75 0f                	jne    c00197bd <Vm::faultHandler(regs*)+0x630>
c00197ae:	83 ec 0c             	sub    esp,0xc
c00197b1:	6a 60                	push   0x60
c00197b3:	e8 7b f7 ff ff       	call   c0018f33 <Vm::inbv(unsigned short)>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	eb e9                	jmp    c00197a6 <Vm::faultHandler(regs*)+0x619>
c00197bd:	31 c0                	xor    eax,eax
c00197bf:	83 c4 1c             	add    esp,0x1c
c00197c2:	5b                   	pop    ebx
c00197c3:	5e                   	pop    esi
c00197c4:	5f                   	pop    edi
c00197c5:	5d                   	pop    ebp
c00197c6:	c3                   	ret    
c00197c7:	90                   	nop

c00197c8 <FAT::getName()>:
c00197c8:	b8 f4 2a 02 c0       	mov    eax,0xc0022af4
c00197cd:	c3                   	ret    

c00197ce <FAT::tell(void*, unsigned long long*)>:
c00197ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00197d3:	75 06                	jne    c00197db <FAT::tell(void*, unsigned long long*)+0xd>
c00197d5:	b8 04 00 00 00       	mov    eax,0x4
c00197da:	c3                   	ret    
c00197db:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00197e0:	75 06                	jne    c00197e8 <FAT::tell(void*, unsigned long long*)+0x1a>
c00197e2:	b8 04 00 00 00       	mov    eax,0x4
c00197e7:	c3                   	ret    
c00197e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ec:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00197ef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00197f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197f6:	89 01                	mov    DWORD PTR [ecx],eax
c00197f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00197fb:	b8 00 00 00 00       	mov    eax,0x0
c0019800:	c3                   	ret    
c0019801:	90                   	nop

c0019802 <FAT::stat(void*, unsigned long long*)>:
c0019802:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019807:	75 06                	jne    c001980f <FAT::stat(void*, unsigned long long*)+0xd>
c0019809:	b8 04 00 00 00       	mov    eax,0x4
c001980e:	c3                   	ret    
c001980f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019814:	75 06                	jne    c001981c <FAT::stat(void*, unsigned long long*)+0x1a>
c0019816:	b8 04 00 00 00       	mov    eax,0x4
c001981b:	c3                   	ret    
c001981c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019820:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019823:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019826:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001982a:	89 01                	mov    DWORD PTR [ecx],eax
c001982c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001982f:	b8 00 00 00 00       	mov    eax,0x0
c0019834:	c3                   	ret    
c0019835:	90                   	nop

c0019836 <FAT::~FAT()>:
c0019836:	83 ec 0c             	sub    esp,0xc
c0019839:	ba 78 2b 02 c0       	mov    edx,0xc0022b78
c001983e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019842:	89 10                	mov    DWORD PTR [eax],edx
c0019844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019848:	83 ec 0c             	sub    esp,0xc
c001984b:	50                   	push   eax
c001984c:	e8 13 5c ff ff       	call   c000f464 <Filesystem::~Filesystem()>
c0019851:	83 c4 10             	add    esp,0x10
c0019854:	90                   	nop
c0019855:	83 c4 0c             	add    esp,0xc
c0019858:	c3                   	ret    
c0019859:	90                   	nop

c001985a <FAT::~FAT()>:
c001985a:	83 ec 0c             	sub    esp,0xc
c001985d:	83 ec 0c             	sub    esp,0xc
c0019860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019864:	e8 cd ff ff ff       	call   c0019836 <FAT::~FAT()>
c0019869:	83 c4 10             	add    esp,0x10
c001986c:	83 ec 08             	sub    esp,0x8
c001986f:	6a 08                	push   0x8
c0019871:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019875:	e8 93 57 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	83 c4 0c             	add    esp,0xc
c0019880:	c3                   	ret    
c0019881:	90                   	nop

c0019882 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019882:	83 ec 1c             	sub    esp,0x1c
c0019885:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001988c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019891:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019895:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c001989c:	83 f8 ff             	cmp    eax,0xffffffff
c001989f:	75 34                	jne    c00198d5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00198a1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00198a5:	88 c2                	mov    dl,al
c00198a7:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c00198ac:	01 d0                	add    eax,edx
c00198ae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00198b2:	8b 15 80 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025480
c00198b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00198bc:	89 14 85 a0 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdab60],edx
c00198c3:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c00198c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00198cc:	89 14 85 20 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaae0],edx
c00198d3:	eb 17                	jmp    c00198ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00198d5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00198d9:	88 c2                	mov    dl,al
c00198db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00198df:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c00198e6:	01 d0                	add    eax,edx
c00198e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00198ec:	83 ec 04             	sub    esp,0x4
c00198ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198f7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00198fb:	50                   	push   eax
c00198fc:	e8 1a d1 fe ff       	call   c0006a1b <f_getlabel>
c0019901:	83 c4 10             	add    esp,0x10
c0019904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019908:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001990d:	75 07                	jne    c0019916 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001990f:	b8 00 00 00 00       	mov    eax,0x0
c0019914:	eb 05                	jmp    c001991b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019916:	b8 01 00 00 00       	mov    eax,0x1
c001991b:	83 c4 1c             	add    esp,0x1c
c001991e:	c3                   	ret    
c001991f:	90                   	nop

c0019920 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019920:	57                   	push   edi
c0019921:	83 ec 58             	sub    esp,0x58
c0019924:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001992c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019930:	b8 00 00 00 00       	mov    eax,0x0
c0019935:	b9 0f 00 00 00       	mov    ecx,0xf
c001993a:	fc                   	cld    
c001993b:	89 d7                	mov    edi,edx
c001993d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001993f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019943:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c001994a:	83 f8 ff             	cmp    eax,0xffffffff
c001994d:	75 34                	jne    c0019983 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001994f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019953:	88 c2                	mov    dl,al
c0019955:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c001995a:	01 d0                	add    eax,edx
c001995c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019960:	8b 15 80 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025480
c0019966:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001996a:	89 14 85 a0 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdab60],edx
c0019971:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019976:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001997a:	89 14 85 20 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaae0],edx
c0019981:	eb 17                	jmp    c001999a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019983:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019987:	88 c2                	mov    dl,al
c0019989:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001998d:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c0019994:	01 d0                	add    eax,edx
c0019996:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001999a:	83 ec 08             	sub    esp,0x8
c001999d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00199a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199a5:	50                   	push   eax
c00199a6:	e8 b3 6d fe ff       	call   c000075e <strcat>
c00199ab:	83 c4 10             	add    esp,0x10
c00199ae:	83 ec 0c             	sub    esp,0xc
c00199b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199b5:	50                   	push   eax
c00199b6:	e8 54 d2 fe ff       	call   c0006c0f <f_setlabel>
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00199c2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00199c7:	75 07                	jne    c00199d0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00199c9:	b8 00 00 00 00       	mov    eax,0x0
c00199ce:	eb 05                	jmp    c00199d5 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00199d0:	b8 01 00 00 00       	mov    eax,0x1
c00199d5:	83 c4 58             	add    esp,0x58
c00199d8:	5f                   	pop    edi
c00199d9:	c3                   	ret    

c00199da <FAT::format(LogicalDisk*, int, char const*, int)>:
c00199da:	83 ec 2c             	sub    esp,0x2c
c00199dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199e5:	83 ec 08             	sub    esp,0x8
c00199e8:	68 18 2b 02 c0       	push   0xc0022b18
c00199ed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199f1:	e8 02 6d fe ff       	call   c00006f8 <strcmp>
c00199f6:	83 c4 10             	add    esp,0x10
c00199f9:	85 c0                	test   eax,eax
c00199fb:	0f 94 c0             	sete   al
c00199fe:	84 c0                	test   al,al
c0019a00:	74 0d                	je     c0019a0f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019a02:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019a0a:	e9 a6 00 00 00       	jmp    c0019ab5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019a0f:	83 ec 08             	sub    esp,0x8
c0019a12:	68 0a 2b 02 c0       	push   0xc0022b0a
c0019a17:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a1b:	e8 d8 6c fe ff       	call   c00006f8 <strcmp>
c0019a20:	83 c4 10             	add    esp,0x10
c0019a23:	85 c0                	test   eax,eax
c0019a25:	0f 94 c0             	sete   al
c0019a28:	84 c0                	test   al,al
c0019a2a:	74 0a                	je     c0019a36 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019a2c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019a34:	eb 7f                	jmp    c0019ab5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019a36:	83 ec 08             	sub    esp,0x8
c0019a39:	68 10 2b 02 c0       	push   0xc0022b10
c0019a3e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a42:	e8 b1 6c fe ff       	call   c00006f8 <strcmp>
c0019a47:	83 c4 10             	add    esp,0x10
c0019a4a:	85 c0                	test   eax,eax
c0019a4c:	0f 94 c0             	sete   al
c0019a4f:	84 c0                	test   al,al
c0019a51:	74 0a                	je     c0019a5d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019a53:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019a5b:	eb 58                	jmp    c0019ab5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019a5d:	83 ec 08             	sub    esp,0x8
c0019a60:	68 0c fe 01 c0       	push   0xc001fe0c
c0019a65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a69:	e8 8a 6c fe ff       	call   c00006f8 <strcmp>
c0019a6e:	83 c4 10             	add    esp,0x10
c0019a71:	85 c0                	test   eax,eax
c0019a73:	0f 94 c0             	sete   al
c0019a76:	84 c0                	test   al,al
c0019a78:	74 0a                	je     c0019a84 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019a7a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019a82:	eb 31                	jmp    c0019ab5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019a84:	83 ec 08             	sub    esp,0x8
c0019a87:	68 16 2b 02 c0       	push   0xc0022b16
c0019a8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a90:	e8 63 6c fe ff       	call   c00006f8 <strcmp>
c0019a95:	83 c4 10             	add    esp,0x10
c0019a98:	85 c0                	test   eax,eax
c0019a9a:	0f 94 c0             	sete   al
c0019a9d:	84 c0                	test   al,al
c0019a9f:	74 0a                	je     c0019aab <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019aa1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019aa9:	eb 0a                	jmp    c0019ab5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019aab:	b8 08 00 00 00       	mov    eax,0x8
c0019ab0:	e9 04 01 00 00       	jmp    c0019bb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019ab5:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019abc:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019ac1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ac5:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c0019acc:	83 f8 ff             	cmp    eax,0xffffffff
c0019acf:	75 34                	jne    c0019b05 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019ad1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019ad5:	88 c2                	mov    dl,al
c0019ad7:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019adc:	01 d0                	add    eax,edx
c0019ade:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019ae2:	8b 15 80 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025480
c0019ae8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019aec:	89 14 85 a0 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdab60],edx
c0019af3:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019af8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019afc:	89 14 85 20 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaae0],edx
c0019b03:	eb 17                	jmp    c0019b1c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019b05:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019b09:	88 c2                	mov    dl,al
c0019b0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b0f:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c0019b16:	01 d0                	add    eax,edx
c0019b18:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b20:	88 04 24             	mov    BYTE PTR [esp],al
c0019b23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019b27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019b33:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019b38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b40:	83 ec 0c             	sub    esp,0xc
c0019b43:	68 00 20 00 00       	push   0x2000
c0019b48:	e8 b4 23 ff ff       	call   c000bf01 <malloc>
c0019b4d:	83 c4 10             	add    esp,0x10
c0019b50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b54:	68 00 20 00 00       	push   0x2000
c0019b59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b5d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b61:	50                   	push   eax
c0019b62:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019b66:	50                   	push   eax
c0019b67:	e8 ee d4 fe ff       	call   c000705a <f_mkfs>
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b78:	75 07                	jne    c0019b81 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019b7a:	b8 00 00 00 00       	mov    eax,0x0
c0019b7f:	eb 38                	jmp    c0019bb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019b81:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019b86:	75 17                	jne    c0019b9f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019b88:	83 ec 0c             	sub    esp,0xc
c0019b8b:	68 48 2b 02 c0       	push   0xc0022b48
c0019b90:	e8 9e 55 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	b8 09 00 00 00       	mov    eax,0x9
c0019b9d:	eb 1a                	jmp    c0019bb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019b9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ba3:	83 ec 08             	sub    esp,0x8
c0019ba6:	50                   	push   eax
c0019ba7:	68 1c 2b 02 c0       	push   0xc0022b1c
c0019bac:	e8 82 55 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c0019bb1:	83 c4 10             	add    esp,0x10
c0019bb4:	b8 01 00 00 00       	mov    eax,0x1
c0019bb9:	83 c4 2c             	add    esp,0x2c
c0019bbc:	c3                   	ret    
c0019bbd:	90                   	nop

c0019bbe <FAT::tryMount(LogicalDisk*, int)>:
c0019bbe:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019bc4:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019bc9:	83 f8 14             	cmp    eax,0x14
c0019bcc:	75 17                	jne    c0019be5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019bce:	83 ec 0c             	sub    esp,0xc
c0019bd1:	68 2e 2b 02 c0       	push   0xc0022b2e
c0019bd6:	e8 17 b7 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c0019bdb:	83 c4 10             	add    esp,0x10
c0019bde:	b0 00                	mov    al,0x0
c0019be0:	e9 d7 01 00 00       	jmp    c0019dbc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019be5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019bec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bf2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bf8:	3d 00 02 00 00       	cmp    eax,0x200
c0019bfd:	74 07                	je     c0019c06 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019bff:	b0 00                	mov    al,0x0
c0019c01:	e9 b6 01 00 00       	jmp    c0019dbc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019c06:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019c0e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019c15:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c0019c1c:	83 f8 ff             	cmp    eax,0xffffffff
c0019c1f:	74 07                	je     c0019c28 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019c21:	b0 01                	mov    al,0x1
c0019c23:	e9 94 01 00 00       	jmp    c0019dbc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019c28:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019c32:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019c3a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019c41:	88 c2                	mov    dl,al
c0019c43:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019c48:	01 d0                	add    eax,edx
c0019c4a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019c51:	8b 15 80 54 02 c0    	mov    edx,DWORD PTR ds:0xc0025480
c0019c57:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019c5e:	89 14 85 a0 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdab60],edx
c0019c65:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019c6a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019c71:	89 14 85 20 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaae0],edx
c0019c78:	83 ec 0c             	sub    esp,0xc
c0019c7b:	68 54 02 00 00       	push   0x254
c0019c80:	e8 7c 22 ff ff       	call   c000bf01 <malloc>
c0019c85:	83 c4 10             	add    esp,0x10
c0019c88:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019c8f:	83 ec 04             	sub    esp,0x4
c0019c92:	6a 00                	push   0x0
c0019c94:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019c9b:	50                   	push   eax
c0019c9c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019ca3:	e8 a1 af fe ff       	call   c0004c49 <f_mount>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019cb2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019cba:	74 19                	je     c0019cd5 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019cbc:	83 ec 0c             	sub    esp,0xc
c0019cbf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019cc6:	e8 56 22 ff ff       	call   c000bf21 <rfree>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	b0 00                	mov    al,0x0
c0019cd0:	e9 e7 00 00 00       	jmp    c0019dbc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019cd5:	83 ec 04             	sub    esp,0x4
c0019cd8:	68 00 01 00 00       	push   0x100
c0019cdd:	6a 00                	push   0x0
c0019cdf:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019ce6:	50                   	push   eax
c0019ce7:	e8 1c 69 fe ff       	call   c0000608 <memset>
c0019cec:	83 c4 10             	add    esp,0x10
c0019cef:	83 ec 08             	sub    esp,0x8
c0019cf2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019cf9:	50                   	push   eax
c0019cfa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019d01:	50                   	push   eax
c0019d02:	e8 57 6a fe ff       	call   c000075e <strcat>
c0019d07:	83 c4 10             	add    esp,0x10
c0019d0a:	83 ec 08             	sub    esp,0x8
c0019d0d:	68 3c 2b 02 c0       	push   0xc0022b3c
c0019d12:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019d19:	50                   	push   eax
c0019d1a:	e8 3f 6a fe ff       	call   c000075e <strcat>
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	83 ec 04             	sub    esp,0x4
c0019d25:	6a 01                	push   0x1
c0019d27:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019d2e:	50                   	push   eax
c0019d2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d33:	50                   	push   eax
c0019d34:	e8 72 af fe ff       	call   c0004cab <f_open>
c0019d39:	83 c4 10             	add    esp,0x10
c0019d3c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019d43:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019d4a:	85 c0                	test   eax,eax
c0019d4c:	74 0a                	je     c0019d58 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019d4e:	78 2d                	js     c0019d7d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019d50:	83 e8 04             	sub    eax,0x4
c0019d53:	83 f8 01             	cmp    eax,0x1
c0019d56:	77 25                	ja     c0019d7d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019d58:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019d60:	83 ec 0c             	sub    esp,0xc
c0019d63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d67:	50                   	push   eax
c0019d68:	e8 90 ba fe ff       	call   c00057fd <f_close>
c0019d6d:	83 c4 10             	add    esp,0x10
c0019d70:	90                   	nop
c0019d71:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019d79:	74 3a                	je     c0019db5 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019d7b:	eb 2d                	jmp    c0019daa <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019d7d:	83 ec 0c             	sub    esp,0xc
c0019d80:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019d87:	e8 95 21 ff ff       	call   c000bf21 <rfree>
c0019d8c:	83 c4 10             	add    esp,0x10
c0019d8f:	83 ec 04             	sub    esp,0x4
c0019d92:	6a 00                	push   0x0
c0019d94:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019d9b:	50                   	push   eax
c0019d9c:	6a 00                	push   0x0
c0019d9e:	e8 a6 ae fe ff       	call   c0004c49 <f_mount>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	b0 00                	mov    al,0x0
c0019da8:	eb 12                	jmp    c0019dbc <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019daa:	a1 80 54 02 c0       	mov    eax,ds:0xc0025480
c0019daf:	40                   	inc    eax
c0019db0:	a3 80 54 02 c0       	mov    ds:0xc0025480,eax
c0019db5:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019dbc:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019dc2:	c3                   	ret    
c0019dc3:	90                   	nop

c0019dc4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019dc4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019dca:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019dd2:	74 0a                	je     c0019dde <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019dd4:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019ddc:	75 0a                	jne    c0019de8 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019dde:	b8 04 00 00 00       	mov    eax,0x4
c0019de3:	e9 dd 00 00 00       	jmp    c0019ec5 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c0019de8:	83 ec 08             	sub    esp,0x8
c0019deb:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019df2:	50                   	push   eax
c0019df3:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019dfa:	e8 b6 bf fe ff       	call   c0005db5 <f_readdir>
c0019dff:	83 c4 10             	add    esp,0x10
c0019e02:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019e09:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019e0f:	83 ec 0c             	sub    esp,0xc
c0019e12:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019e19:	83 c0 1a             	add    eax,0x1a
c0019e1c:	50                   	push   eax
c0019e1d:	e8 03 68 fe ff       	call   c0000625 <strlen>
c0019e22:	83 c4 10             	add    esp,0x10
c0019e25:	ba 00 00 00 00       	mov    edx,0x0
c0019e2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e2e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019e32:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019e39:	25 ff 00 00 00       	and    eax,0xff
c0019e3e:	83 e0 10             	and    eax,0x10
c0019e41:	74 07                	je     c0019e4a <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c0019e43:	b8 02 00 00 00       	mov    eax,0x2
c0019e48:	eb 05                	jmp    c0019e4f <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c0019e4a:	b8 01 00 00 00       	mov    eax,0x1
c0019e4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e53:	83 ec 08             	sub    esp,0x8
c0019e56:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e5d:	83 c0 1a             	add    eax,0x1a
c0019e60:	50                   	push   eax
c0019e61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e65:	83 c0 10             	add    eax,0x10
c0019e68:	50                   	push   eax
c0019e69:	e8 39 68 fe ff       	call   c00006a7 <strcpy>
c0019e6e:	83 c4 10             	add    esp,0x10
c0019e71:	83 ec 04             	sub    esp,0x4
c0019e74:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019e7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e7f:	50                   	push   eax
c0019e80:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019e87:	e8 46 67 fe ff       	call   c00005d2 <memcpy>
c0019e8c:	83 c4 10             	add    esp,0x10
c0019e8f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019e96:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019e9c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019ea3:	84 c0                	test   al,al
c0019ea5:	75 07                	jne    c0019eae <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c0019ea7:	b8 07 00 00 00       	mov    eax,0x7
c0019eac:	eb 17                	jmp    c0019ec5 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c0019eae:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019eb5:	85 c0                	test   eax,eax
c0019eb7:	75 07                	jne    c0019ec0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c0019eb9:	b8 00 00 00 00       	mov    eax,0x0
c0019ebe:	eb 05                	jmp    c0019ec5 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c0019ec0:	b8 01 00 00 00       	mov    eax,0x1
c0019ec5:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019ecb:	c3                   	ret    

c0019ecc <FAT::read(void*, unsigned long, void*, int*)>:
c0019ecc:	83 ec 1c             	sub    esp,0x1c
c0019ecf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019ed4:	74 07                	je     c0019edd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019ed6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019edb:	75 07                	jne    c0019ee4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019edd:	b8 04 00 00 00       	mov    eax,0x4
c0019ee2:	eb 3d                	jmp    c0019f21 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019ee4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ee8:	50                   	push   eax
c0019ee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019eed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019ef1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ef5:	e8 ed b1 fe ff       	call   c00050e7 <f_read>
c0019efa:	83 c4 10             	add    esp,0x10
c0019efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f05:	89 c2                	mov    edx,eax
c0019f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f0b:	89 10                	mov    DWORD PTR [eax],edx
c0019f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f11:	85 c0                	test   eax,eax
c0019f13:	75 07                	jne    c0019f1c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019f15:	b8 00 00 00 00       	mov    eax,0x0
c0019f1a:	eb 05                	jmp    c0019f21 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019f1c:	b8 01 00 00 00       	mov    eax,0x1
c0019f21:	83 c4 1c             	add    esp,0x1c
c0019f24:	c3                   	ret    
c0019f25:	90                   	nop

c0019f26 <FAT::write(void*, unsigned long, void*, int*)>:
c0019f26:	83 ec 1c             	sub    esp,0x1c
c0019f29:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019f2e:	74 07                	je     c0019f37 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019f30:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019f35:	75 07                	jne    c0019f3e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019f37:	b8 04 00 00 00       	mov    eax,0x4
c0019f3c:	eb 3d                	jmp    c0019f7b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019f3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f42:	50                   	push   eax
c0019f43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f4f:	e8 13 b4 fe ff       	call   c0005367 <f_write>
c0019f54:	83 c4 10             	add    esp,0x10
c0019f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f5f:	89 c2                	mov    edx,eax
c0019f61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f65:	89 10                	mov    DWORD PTR [eax],edx
c0019f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f6b:	85 c0                	test   eax,eax
c0019f6d:	75 07                	jne    c0019f76 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019f6f:	b8 00 00 00 00       	mov    eax,0x0
c0019f74:	eb 05                	jmp    c0019f7b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019f76:	b8 01 00 00 00       	mov    eax,0x1
c0019f7b:	83 c4 1c             	add    esp,0x1c
c0019f7e:	c3                   	ret    
c0019f7f:	90                   	nop

c0019f80 <FAT::close(void*)>:
c0019f80:	83 ec 1c             	sub    esp,0x1c
c0019f83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019f88:	75 07                	jne    c0019f91 <FAT::close(void*)+0x11>
c0019f8a:	b8 04 00 00 00       	mov    eax,0x4
c0019f8f:	eb 36                	jmp    c0019fc7 <FAT::close(void*)+0x47>
c0019f91:	83 ec 0c             	sub    esp,0xc
c0019f94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f98:	e8 60 b8 fe ff       	call   c00057fd <f_close>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fa4:	83 ec 0c             	sub    esp,0xc
c0019fa7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fab:	e8 61 1f ff ff       	call   c000bf11 <free>
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fb7:	85 c0                	test   eax,eax
c0019fb9:	75 07                	jne    c0019fc2 <FAT::close(void*)+0x42>
c0019fbb:	b8 00 00 00 00       	mov    eax,0x0
c0019fc0:	eb 05                	jmp    c0019fc7 <FAT::close(void*)+0x47>
c0019fc2:	b8 01 00 00 00       	mov    eax,0x1
c0019fc7:	83 c4 1c             	add    esp,0x1c
c0019fca:	c3                   	ret    
c0019fcb:	90                   	nop

c0019fcc <FAT::closeDir(void*)>:
c0019fcc:	83 ec 1c             	sub    esp,0x1c
c0019fcf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fd4:	75 07                	jne    c0019fdd <FAT::closeDir(void*)+0x11>
c0019fd6:	b8 04 00 00 00       	mov    eax,0x4
c0019fdb:	eb 36                	jmp    c001a013 <FAT::closeDir(void*)+0x47>
c0019fdd:	83 ec 0c             	sub    esp,0xc
c0019fe0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fe4:	e8 aa bd fe ff       	call   c0005d93 <f_closedir>
c0019fe9:	83 c4 10             	add    esp,0x10
c0019fec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ff0:	83 ec 0c             	sub    esp,0xc
c0019ff3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ff7:	e8 15 1f ff ff       	call   c000bf11 <free>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a003:	85 c0                	test   eax,eax
c001a005:	75 07                	jne    c001a00e <FAT::closeDir(void*)+0x42>
c001a007:	b8 00 00 00 00       	mov    eax,0x0
c001a00c:	eb 05                	jmp    c001a013 <FAT::closeDir(void*)+0x47>
c001a00e:	b8 01 00 00 00       	mov    eax,0x1
c001a013:	83 c4 1c             	add    esp,0x1c
c001a016:	c3                   	ret    
c001a017:	90                   	nop

c001a018 <FAT::seek(void*, unsigned long long)>:
c001a018:	83 ec 2c             	sub    esp,0x2c
c001a01b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a01f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a023:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a02b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a030:	75 07                	jne    c001a039 <FAT::seek(void*, unsigned long long)+0x21>
c001a032:	b8 04 00 00 00       	mov    eax,0x4
c001a037:	eb 2f                	jmp    c001a068 <FAT::seek(void*, unsigned long long)+0x50>
c001a039:	83 ec 04             	sub    esp,0x4
c001a03c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a040:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a044:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a048:	e8 df b7 fe ff       	call   c000582c <f_lseek>
c001a04d:	83 c4 10             	add    esp,0x10
c001a050:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a058:	85 c0                	test   eax,eax
c001a05a:	75 07                	jne    c001a063 <FAT::seek(void*, unsigned long long)+0x4b>
c001a05c:	b8 00 00 00 00       	mov    eax,0x0
c001a061:	eb 05                	jmp    c001a068 <FAT::seek(void*, unsigned long long)+0x50>
c001a063:	b8 01 00 00 00       	mov    eax,0x1
c001a068:	83 c4 2c             	add    esp,0x2c
c001a06b:	c3                   	ret    

c001a06c <fatWrapperReadDisk>:
c001a06c:	83 ec 1c             	sub    esp,0x1c
c001a06f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a073:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a077:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a07b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a07e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a082:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a086:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a08a:	25 ff 00 00 00       	and    eax,0xff
c001a08f:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c001a096:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a09a:	83 ec 0c             	sub    esp,0xc
c001a09d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0a1:	52                   	push   edx
c001a0a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0aa:	50                   	push   eax
c001a0ab:	e8 6e 80 ff ff       	call   c001211e <LogicalDisk::read(unsigned long long, int, void*)>
c001a0b0:	83 c4 20             	add    esp,0x20
c001a0b3:	83 c4 1c             	add    esp,0x1c
c001a0b6:	c3                   	ret    

c001a0b7 <fatWrapperWriteDisk>:
c001a0b7:	83 ec 1c             	sub    esp,0x1c
c001a0ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a0be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a0c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a0cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0d5:	25 ff 00 00 00       	and    eax,0xff
c001a0da:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c001a0e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a0e5:	83 ec 0c             	sub    esp,0xc
c001a0e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0ec:	52                   	push   edx
c001a0ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0f5:	50                   	push   eax
c001a0f6:	e8 8f 80 ff ff       	call   c001218a <LogicalDisk::write(unsigned long long, int, void*)>
c001a0fb:	83 c4 20             	add    esp,0x20
c001a0fe:	83 c4 1c             	add    esp,0x1c
c001a101:	c3                   	ret    

c001a102 <fatWrapperIoctl>:
c001a102:	53                   	push   ebx
c001a103:	83 ec 28             	sub    esp,0x28
c001a106:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a10a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a10e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a112:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a116:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a11b:	75 35                	jne    c001a152 <fatWrapperIoctl+0x50>
c001a11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a121:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a125:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a129:	25 ff 00 00 00       	and    eax,0xff
c001a12e:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c001a135:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a13b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a141:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a145:	66 89 02             	mov    WORD PTR [edx],ax
c001a148:	b8 00 00 00 00       	mov    eax,0x0
c001a14d:	e9 bb 00 00 00       	jmp    c001a20d <fatWrapperIoctl+0x10b>
c001a152:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a157:	75 73                	jne    c001a1cc <fatWrapperIoctl+0xca>
c001a159:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a161:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a165:	25 ff 00 00 00       	and    eax,0xff
c001a16a:	8b 04 85 00 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdba00]
c001a171:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a177:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a17d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a183:	89 c8                	mov    eax,ecx
c001a185:	89 da                	mov    edx,ebx
c001a187:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a18b:	c1 e0 0a             	shl    eax,0xa
c001a18e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a192:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a198:	8b 0c 8d 00 46 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdba00]
c001a19f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a1a5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a1ab:	89 cb                	mov    ebx,ecx
c001a1ad:	c1 fb 1f             	sar    ebx,0x1f
c001a1b0:	53                   	push   ebx
c001a1b1:	51                   	push   ecx
c001a1b2:	52                   	push   edx
c001a1b3:	50                   	push   eax
c001a1b4:	e8 03 4c 00 00       	call   c001edbc <__udivdi3>
c001a1b9:	83 c4 10             	add    esp,0x10
c001a1bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a1c0:	89 01                	mov    DWORD PTR [ecx],eax
c001a1c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a1c5:	b8 00 00 00 00       	mov    eax,0x0
c001a1ca:	eb 41                	jmp    c001a20d <fatWrapperIoctl+0x10b>
c001a1cc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a1d1:	75 07                	jne    c001a1da <fatWrapperIoctl+0xd8>
c001a1d3:	b8 00 00 00 00       	mov    eax,0x0
c001a1d8:	eb 33                	jmp    c001a20d <fatWrapperIoctl+0x10b>
c001a1da:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a1df:	75 19                	jne    c001a1fa <fatWrapperIoctl+0xf8>
c001a1e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1ed:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a1f3:	b8 00 00 00 00       	mov    eax,0x0
c001a1f8:	eb 13                	jmp    c001a20d <fatWrapperIoctl+0x10b>
c001a1fa:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a1ff:	75 07                	jne    c001a208 <fatWrapperIoctl+0x106>
c001a201:	b8 00 00 00 00       	mov    eax,0x0
c001a206:	eb 05                	jmp    c001a20d <fatWrapperIoctl+0x10b>
c001a208:	b8 04 00 00 00       	mov    eax,0x4
c001a20d:	83 c4 28             	add    esp,0x28
c001a210:	5b                   	pop    ebx
c001a211:	c3                   	ret    

c001a212 <FAT::FAT()>:
c001a212:	83 ec 1c             	sub    esp,0x1c
c001a215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a219:	83 ec 0c             	sub    esp,0xc
c001a21c:	50                   	push   eax
c001a21d:	e8 1e 52 ff ff       	call   c000f440 <Filesystem::Filesystem()>
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	ba 78 2b 02 c0       	mov    edx,0xc0022b78
c001a22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a22e:	89 10                	mov    DWORD PTR [eax],edx
c001a230:	c7 05 80 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025480,0x0
c001a23a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a242:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a247:	7f 15                	jg     c001a25e <FAT::FAT()+0x4c>
c001a249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a24d:	c7 04 85 a0 54 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdab60],0xffffffff
c001a258:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a25c:	eb e4                	jmp    c001a242 <FAT::FAT()+0x30>
c001a25e:	90                   	nop
c001a25f:	83 c4 1c             	add    esp,0x1c
c001a262:	c3                   	ret    
c001a263:	90                   	nop

c001a264 <FAT::fixFilepath(char*)>:
c001a264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a268:	8a 00                	mov    al,BYTE PTR [eax]
c001a26a:	3c 40                	cmp    al,0x40
c001a26c:	7e 2c                	jle    c001a29a <FAT::fixFilepath(char*)+0x36>
c001a26e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a272:	8a 00                	mov    al,BYTE PTR [eax]
c001a274:	83 e8 41             	sub    eax,0x41
c001a277:	88 c2                	mov    dl,al
c001a279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a27d:	88 10                	mov    BYTE PTR [eax],dl
c001a27f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a283:	8a 00                	mov    al,BYTE PTR [eax]
c001a285:	0f be c0             	movsx  eax,al
c001a288:	8b 04 85 a0 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdab60]
c001a28f:	83 c0 30             	add    eax,0x30
c001a292:	88 c2                	mov    dl,al
c001a294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a298:	88 10                	mov    BYTE PTR [eax],dl
c001a29a:	90                   	nop
c001a29b:	c3                   	ret    

c001a29c <FAT::open(char const*, void**, FileOpenMode)>:
c001a29c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2aa:	74 0a                	je     c001a2b6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a2ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a2b4:	75 0a                	jne    c001a2c0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a2b6:	b8 04 00 00 00       	mov    eax,0x4
c001a2bb:	e9 00 01 00 00       	jmp    c001a3c0 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a2c0:	83 ec 08             	sub    esp,0x8
c001a2c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2ce:	50                   	push   eax
c001a2cf:	e8 d3 63 fe ff       	call   c00006a7 <strcpy>
c001a2d4:	83 c4 10             	add    esp,0x10
c001a2d7:	83 ec 08             	sub    esp,0x8
c001a2da:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2de:	50                   	push   eax
c001a2df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2e6:	e8 79 ff ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a2eb:	83 c4 10             	add    esp,0x10
c001a2ee:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a2f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a2fd:	83 e0 01             	and    eax,0x1
c001a300:	74 08                	je     c001a30a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a302:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a30a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a311:	83 e0 04             	and    eax,0x4
c001a314:	74 10                	je     c001a326 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a316:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a31e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a326:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a32d:	83 e0 02             	and    eax,0x2
c001a330:	74 08                	je     c001a33a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a332:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a33a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a341:	83 e0 08             	and    eax,0x8
c001a344:	74 08                	je     c001a34e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a346:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a34e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a355:	83 e0 10             	and    eax,0x10
c001a358:	74 08                	je     c001a362 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a35a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a362:	83 ec 0c             	sub    esp,0xc
c001a365:	68 50 02 00 00       	push   0x250
c001a36a:	e8 92 1b ff ff       	call   c000bf01 <malloc>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	89 c2                	mov    edx,eax
c001a374:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a37b:	89 10                	mov    DWORD PTR [eax],edx
c001a37d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a384:	31 d2                	xor    edx,edx
c001a386:	88 c2                	mov    dl,al
c001a388:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a38f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a391:	83 ec 04             	sub    esp,0x4
c001a394:	52                   	push   edx
c001a395:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a399:	52                   	push   edx
c001a39a:	50                   	push   eax
c001a39b:	e8 0b a9 fe ff       	call   c0004cab <f_open>
c001a3a0:	83 c4 10             	add    esp,0x10
c001a3a3:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a3aa:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a3b2:	74 07                	je     c001a3bb <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001a3b4:	b8 01 00 00 00       	mov    eax,0x1
c001a3b9:	eb 05                	jmp    c001a3c0 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a3bb:	b8 00 00 00 00       	mov    eax,0x0
c001a3c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3c6:	c3                   	ret    
c001a3c7:	90                   	nop

c001a3c8 <FAT::openDir(char const*, void**)>:
c001a3c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3d6:	74 0a                	je     c001a3e2 <FAT::openDir(char const*, void**)+0x1a>
c001a3d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a3e0:	75 07                	jne    c001a3e9 <FAT::openDir(char const*, void**)+0x21>
c001a3e2:	b8 04 00 00 00       	mov    eax,0x4
c001a3e7:	eb 7d                	jmp    c001a466 <FAT::openDir(char const*, void**)+0x9e>
c001a3e9:	83 ec 08             	sub    esp,0x8
c001a3ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3f7:	50                   	push   eax
c001a3f8:	e8 aa 62 fe ff       	call   c00006a7 <strcpy>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	83 ec 08             	sub    esp,0x8
c001a403:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a407:	50                   	push   eax
c001a408:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a40f:	e8 50 fe ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a414:	83 c4 10             	add    esp,0x10
c001a417:	83 ec 0c             	sub    esp,0xc
c001a41a:	6a 4c                	push   0x4c
c001a41c:	e8 e0 1a ff ff       	call   c000bf01 <malloc>
c001a421:	83 c4 10             	add    esp,0x10
c001a424:	89 c2                	mov    edx,eax
c001a426:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a42d:	89 10                	mov    DWORD PTR [eax],edx
c001a42f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a436:	8b 00                	mov    eax,DWORD PTR [eax]
c001a438:	83 ec 08             	sub    esp,0x8
c001a43b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a43f:	52                   	push   edx
c001a440:	50                   	push   eax
c001a441:	e8 4b b8 fe ff       	call   c0005c91 <f_opendir>
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a450:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a458:	74 07                	je     c001a461 <FAT::openDir(char const*, void**)+0x99>
c001a45a:	b8 01 00 00 00       	mov    eax,0x1
c001a45f:	eb 05                	jmp    c001a466 <FAT::openDir(char const*, void**)+0x9e>
c001a461:	b8 00 00 00 00       	mov    eax,0x0
c001a466:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a46c:	c3                   	ret    
c001a46d:	90                   	nop

c001a46e <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a46e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a474:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a47c:	75 0a                	jne    c001a488 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a47e:	b8 04 00 00 00       	mov    eax,0x4
c001a483:	e9 cb 00 00 00       	jmp    c001a553 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a488:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a490:	75 0a                	jne    c001a49c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a492:	b8 04 00 00 00       	mov    eax,0x4
c001a497:	e9 b7 00 00 00       	jmp    c001a553 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a49c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a4a4:	75 0a                	jne    c001a4b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a4a6:	b8 04 00 00 00       	mov    eax,0x4
c001a4ab:	e9 a3 00 00 00       	jmp    c001a553 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a4b0:	83 ec 08             	sub    esp,0x8
c001a4b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a4ba:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a4c1:	50                   	push   eax
c001a4c2:	e8 e0 61 fe ff       	call   c00006a7 <strcpy>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	83 ec 08             	sub    esp,0x8
c001a4cd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a4d4:	50                   	push   eax
c001a4d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a4dc:	e8 83 fd ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a4e1:	83 c4 10             	add    esp,0x10
c001a4e4:	83 ec 08             	sub    esp,0x8
c001a4e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4eb:	50                   	push   eax
c001a4ec:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a4f3:	50                   	push   eax
c001a4f4:	e8 57 b9 fe ff       	call   c0005e50 <f_stat>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a503:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a50a:	85 c0                	test   eax,eax
c001a50c:	74 07                	je     c001a515 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001a50e:	83 f8 04             	cmp    eax,0x4
c001a511:	74 34                	je     c001a547 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001a513:	eb 39                	jmp    c001a54e <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a515:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a519:	25 ff 00 00 00       	and    eax,0xff
c001a51e:	83 e0 10             	and    eax,0x10
c001a521:	0f 95 c2             	setne  dl
c001a524:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a52b:	88 10                	mov    BYTE PTR [eax],dl
c001a52d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a534:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a53b:	89 01                	mov    DWORD PTR [ecx],eax
c001a53d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a540:	b8 00 00 00 00       	mov    eax,0x0
c001a545:	eb 0c                	jmp    c001a553 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a547:	b8 02 00 00 00       	mov    eax,0x2
c001a54c:	eb 05                	jmp    c001a553 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a54e:	b8 01 00 00 00       	mov    eax,0x1
c001a553:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a559:	c3                   	ret    

c001a55a <FAT::unlink(char const*)>:
c001a55a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a560:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a568:	75 07                	jne    c001a571 <FAT::unlink(char const*)+0x17>
c001a56a:	b8 04 00 00 00       	mov    eax,0x4
c001a56f:	eb 5c                	jmp    c001a5cd <FAT::unlink(char const*)+0x73>
c001a571:	83 ec 08             	sub    esp,0x8
c001a574:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a57b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a57f:	50                   	push   eax
c001a580:	e8 22 61 fe ff       	call   c00006a7 <strcpy>
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	83 ec 08             	sub    esp,0x8
c001a58b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a58f:	50                   	push   eax
c001a590:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a597:	e8 c8 fc ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	83 ec 0c             	sub    esp,0xc
c001a5a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5a6:	50                   	push   eax
c001a5a7:	e8 13 bc fe ff       	call   c00061bf <f_unlink>
c001a5ac:	83 c4 10             	add    esp,0x10
c001a5af:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a5b6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a5bd:	85 c0                	test   eax,eax
c001a5bf:	75 07                	jne    c001a5c8 <FAT::unlink(char const*)+0x6e>
c001a5c1:	b8 00 00 00 00       	mov    eax,0x0
c001a5c6:	eb 05                	jmp    c001a5cd <FAT::unlink(char const*)+0x73>
c001a5c8:	b8 01 00 00 00       	mov    eax,0x1
c001a5cd:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5d3:	c3                   	ret    

c001a5d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a5d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5da:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a5e1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a5e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a5ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a5f0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a5f8:	75 0a                	jne    c001a604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a5fa:	b8 04 00 00 00       	mov    eax,0x4
c001a5ff:	e9 43 01 00 00       	jmp    c001a747 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001a604:	83 ec 08             	sub    esp,0x8
c001a607:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a60e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a612:	50                   	push   eax
c001a613:	e8 8f 60 fe ff       	call   c00006a7 <strcpy>
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	83 ec 08             	sub    esp,0x8
c001a61e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a622:	50                   	push   eax
c001a623:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a62a:	e8 35 fc ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a62f:	83 c4 10             	add    esp,0x10
c001a632:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a63a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a642:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a646:	25 ff 00 00 00       	and    eax,0xff
c001a64b:	83 e0 01             	and    eax,0x1
c001a64e:	74 08                	je     c001a658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001a650:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a658:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a65c:	25 ff 00 00 00       	and    eax,0xff
c001a661:	83 e0 02             	and    eax,0x2
c001a664:	74 08                	je     c001a66e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001a666:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a66e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a672:	25 ff 00 00 00       	and    eax,0xff
c001a677:	83 e0 04             	and    eax,0x4
c001a67a:	74 08                	je     c001a684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001a67c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a684:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a688:	25 ff 00 00 00       	and    eax,0xff
c001a68d:	83 e0 08             	and    eax,0x8
c001a690:	74 08                	je     c001a69a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001a692:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a69a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a69e:	25 ff 00 00 00       	and    eax,0xff
c001a6a3:	83 e0 01             	and    eax,0x1
c001a6a6:	74 08                	je     c001a6b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001a6a8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a6b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6b4:	25 ff 00 00 00       	and    eax,0xff
c001a6b9:	83 e0 02             	and    eax,0x2
c001a6bc:	74 08                	je     c001a6c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001a6be:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a6c6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6ca:	25 ff 00 00 00       	and    eax,0xff
c001a6cf:	83 e0 04             	and    eax,0x4
c001a6d2:	74 08                	je     c001a6dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001a6d4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a6dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6e0:	25 ff 00 00 00       	and    eax,0xff
c001a6e5:	83 e0 08             	and    eax,0x8
c001a6e8:	74 08                	je     c001a6f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001a6ea:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a6f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a6f9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a700:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a707:	31 d2                	xor    edx,edx
c001a709:	88 c2                	mov    dl,al
c001a70b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a712:	25 ff 00 00 00       	and    eax,0xff
c001a717:	83 ec 04             	sub    esp,0x4
c001a71a:	52                   	push   edx
c001a71b:	50                   	push   eax
c001a71c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a720:	50                   	push   eax
c001a721:	e8 39 c1 fe ff       	call   c000685f <f_chmod>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a730:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a737:	85 c0                	test   eax,eax
c001a739:	75 07                	jne    c001a742 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001a73b:	b8 00 00 00 00       	mov    eax,0x0
c001a740:	eb 05                	jmp    c001a747 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001a742:	b8 01 00 00 00       	mov    eax,0x1
c001a747:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a74d:	c3                   	ret    

c001a74e <FAT::rename(char const*, char const*)>:
c001a74e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a754:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a75c:	74 0a                	je     c001a768 <FAT::rename(char const*, char const*)+0x1a>
c001a75e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a766:	75 0a                	jne    c001a772 <FAT::rename(char const*, char const*)+0x24>
c001a768:	b8 04 00 00 00       	mov    eax,0x4
c001a76d:	e9 98 00 00 00       	jmp    c001a80a <FAT::rename(char const*, char const*)+0xbc>
c001a772:	83 ec 08             	sub    esp,0x8
c001a775:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a77c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a783:	50                   	push   eax
c001a784:	e8 1e 5f fe ff       	call   c00006a7 <strcpy>
c001a789:	83 c4 10             	add    esp,0x10
c001a78c:	83 ec 08             	sub    esp,0x8
c001a78f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a796:	50                   	push   eax
c001a797:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a79e:	e8 c1 fa ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a7a3:	83 c4 10             	add    esp,0x10
c001a7a6:	83 ec 08             	sub    esp,0x8
c001a7a9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a7b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7b4:	50                   	push   eax
c001a7b5:	e8 ed 5e fe ff       	call   c00006a7 <strcpy>
c001a7ba:	83 c4 10             	add    esp,0x10
c001a7bd:	83 ec 08             	sub    esp,0x8
c001a7c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7c4:	50                   	push   eax
c001a7c5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a7cc:	e8 93 fa ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	83 ec 08             	sub    esp,0x8
c001a7d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7db:	50                   	push   eax
c001a7dc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a7e3:	50                   	push   eax
c001a7e4:	e8 83 bd fe ff       	call   c000656c <f_rename>
c001a7e9:	83 c4 10             	add    esp,0x10
c001a7ec:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a7f3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a7fa:	85 c0                	test   eax,eax
c001a7fc:	75 07                	jne    c001a805 <FAT::rename(char const*, char const*)+0xb7>
c001a7fe:	b8 00 00 00 00       	mov    eax,0x0
c001a803:	eb 05                	jmp    c001a80a <FAT::rename(char const*, char const*)+0xbc>
c001a805:	b8 01 00 00 00       	mov    eax,0x1
c001a80a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a810:	c3                   	ret    
c001a811:	90                   	nop

c001a812 <FAT::mkdir(char const*)>:
c001a812:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a818:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a820:	75 07                	jne    c001a829 <FAT::mkdir(char const*)+0x17>
c001a822:	b8 04 00 00 00       	mov    eax,0x4
c001a827:	eb 5c                	jmp    c001a885 <FAT::mkdir(char const*)+0x73>
c001a829:	83 ec 08             	sub    esp,0x8
c001a82c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a833:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a837:	50                   	push   eax
c001a838:	e8 6a 5e fe ff       	call   c00006a7 <strcpy>
c001a83d:	83 c4 10             	add    esp,0x10
c001a840:	83 ec 08             	sub    esp,0x8
c001a843:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a847:	50                   	push   eax
c001a848:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a84f:	e8 10 fa ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a854:	83 c4 10             	add    esp,0x10
c001a857:	83 ec 0c             	sub    esp,0xc
c001a85a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a85e:	50                   	push   eax
c001a85f:	e8 dc ba fe ff       	call   c0006340 <f_mkdir>
c001a864:	83 c4 10             	add    esp,0x10
c001a867:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a86e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a875:	85 c0                	test   eax,eax
c001a877:	75 07                	jne    c001a880 <FAT::mkdir(char const*)+0x6e>
c001a879:	b8 00 00 00 00       	mov    eax,0x0
c001a87e:	eb 05                	jmp    c001a885 <FAT::mkdir(char const*)+0x73>
c001a880:	b8 01 00 00 00       	mov    eax,0x1
c001a885:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a88b:	c3                   	ret    

c001a88c <FAT::exists(char const*)>:
c001a88c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a892:	83 ec 08             	sub    esp,0x8
c001a895:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a89c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a8a0:	50                   	push   eax
c001a8a1:	e8 01 5e fe ff       	call   c00006a7 <strcpy>
c001a8a6:	83 c4 10             	add    esp,0x10
c001a8a9:	83 ec 08             	sub    esp,0x8
c001a8ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8b0:	50                   	push   eax
c001a8b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a8b8:	e8 a7 f9 ff ff       	call   c001a264 <FAT::fixFilepath(char*)>
c001a8bd:	83 c4 10             	add    esp,0x10
c001a8c0:	83 ec 08             	sub    esp,0x8
c001a8c3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a8ca:	50                   	push   eax
c001a8cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a8cf:	50                   	push   eax
c001a8d0:	e8 7b b5 fe ff       	call   c0005e50 <f_stat>
c001a8d5:	83 c4 10             	add    esp,0x10
c001a8d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a8df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a8e6:	85 c0                	test   eax,eax
c001a8e8:	75 04                	jne    c001a8ee <FAT::exists(char const*)+0x62>
c001a8ea:	b0 01                	mov    al,0x1
c001a8ec:	eb 02                	jmp    c001a8f0 <FAT::exists(char const*)+0x64>
c001a8ee:	b0 00                	mov    al,0x0
c001a8f0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a8f6:	c3                   	ret    
c001a8f7:	90                   	nop

c001a8f8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a8f8:	b8 08 00 00 00       	mov    eax,0x8
c001a8fd:	c3                   	ret    

c001a8fe <ISO9660::seek(void*, unsigned long long)>:
c001a8fe:	53                   	push   ebx
c001a8ff:	b8 04 00 00 00       	mov    eax,0x4
c001a904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a90c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a910:	85 d2                	test   edx,edx
c001a912:	74 17                	je     c001a92b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a914:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a917:	89 c8                	mov    eax,ecx
c001a919:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a91c:	b8 01 00 00 00       	mov    eax,0x1
c001a921:	73 08                	jae    c001a92b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a923:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a926:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a929:	31 c0                	xor    eax,eax
c001a92b:	5b                   	pop    ebx
c001a92c:	c3                   	ret    
c001a92d:	90                   	nop

c001a92e <ISO9660::tell(void*, unsigned long long*)>:
c001a92e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a936:	85 d2                	test   edx,edx
c001a938:	74 12                	je     c001a94c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a93a:	85 c0                	test   eax,eax
c001a93c:	74 0e                	je     c001a94c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a93e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a941:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a944:	89 10                	mov    DWORD PTR [eax],edx
c001a946:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a949:	31 c0                	xor    eax,eax
c001a94b:	c3                   	ret    
c001a94c:	b8 04 00 00 00       	mov    eax,0x4
c001a951:	c3                   	ret    

c001a952 <ISO9660::getName()>:
c001a952:	b8 d4 2b 02 c0       	mov    eax,0xc0022bd4
c001a957:	c3                   	ret    

c001a958 <ISO9660::stat(void*, unsigned long long*)>:
c001a958:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a95c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a960:	85 d2                	test   edx,edx
c001a962:	74 12                	je     c001a976 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a964:	85 c0                	test   eax,eax
c001a966:	74 0e                	je     c001a976 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a968:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a96b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a96e:	89 10                	mov    DWORD PTR [eax],edx
c001a970:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a973:	31 c0                	xor    eax,eax
c001a975:	c3                   	ret    
c001a976:	b8 04 00 00 00       	mov    eax,0x4
c001a97b:	c3                   	ret    

c001a97c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a97c:	b8 01 00 00 00       	mov    eax,0x1
c001a981:	c3                   	ret    

c001a982 <ISO9660::unlink(char const*)>:
c001a982:	b8 01 00 00 00       	mov    eax,0x1
c001a987:	c3                   	ret    

c001a988 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a988:	b8 01 00 00 00       	mov    eax,0x1
c001a98d:	c3                   	ret    

c001a98e <ISO9660::rename(char const*, char const*)>:
c001a98e:	b8 01 00 00 00       	mov    eax,0x1
c001a993:	c3                   	ret    

c001a994 <ISO9660::mkdir(char const*)>:
c001a994:	b8 01 00 00 00       	mov    eax,0x1
c001a999:	c3                   	ret    

c001a99a <ISO9660::close(void*)>:
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	b8 04 00 00 00       	mov    eax,0x4
c001a9a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9a6:	85 d2                	test   edx,edx
c001a9a8:	74 0e                	je     c001a9b8 <ISO9660::close(void*)+0x1e>
c001a9aa:	83 ec 0c             	sub    esp,0xc
c001a9ad:	52                   	push   edx
c001a9ae:	e8 5e 15 ff ff       	call   c000bf11 <free>
c001a9b3:	83 c4 10             	add    esp,0x10
c001a9b6:	31 c0                	xor    eax,eax
c001a9b8:	83 c4 0c             	add    esp,0xc
c001a9bb:	c3                   	ret    

c001a9bc <ISO9660::closeDir(void*)>:
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	b8 04 00 00 00       	mov    eax,0x4
c001a9c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9c8:	85 d2                	test   edx,edx
c001a9ca:	74 0e                	je     c001a9da <ISO9660::closeDir(void*)+0x1e>
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	52                   	push   edx
c001a9d0:	e8 3c 15 ff ff       	call   c000bf11 <free>
c001a9d5:	83 c4 10             	add    esp,0x10
c001a9d8:	31 c0                	xor    eax,eax
c001a9da:	83 c4 0c             	add    esp,0xc
c001a9dd:	c3                   	ret    

c001a9de <ISO9660::~ISO9660()>:
c001a9de:	83 ec 0c             	sub    esp,0xc
c001a9e1:	ba 28 2c 02 c0       	mov    edx,0xc0022c28
c001a9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ea:	89 10                	mov    DWORD PTR [eax],edx
c001a9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f0:	83 ec 0c             	sub    esp,0xc
c001a9f3:	50                   	push   eax
c001a9f4:	e8 6b 4a ff ff       	call   c000f464 <Filesystem::~Filesystem()>
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	90                   	nop
c001a9fd:	83 c4 0c             	add    esp,0xc
c001aa00:	c3                   	ret    
c001aa01:	90                   	nop

c001aa02 <ISO9660::~ISO9660()>:
c001aa02:	83 ec 0c             	sub    esp,0xc
c001aa05:	83 ec 0c             	sub    esp,0xc
c001aa08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa0c:	e8 cd ff ff ff       	call   c001a9de <ISO9660::~ISO9660()>
c001aa11:	83 c4 10             	add    esp,0x10
c001aa14:	83 ec 08             	sub    esp,0x8
c001aa17:	6a 08                	push   0x8
c001aa19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa1d:	e8 eb 45 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	83 c4 0c             	add    esp,0xc
c001aa28:	c3                   	ret    

c001aa29 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001aa29:	55                   	push   ebp
c001aa2a:	31 c9                	xor    ecx,ecx
c001aa2c:	57                   	push   edi
c001aa2d:	56                   	push   esi
c001aa2e:	53                   	push   ebx
c001aa2f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001aa33:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001aa37:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001aa3b:	89 eb                	mov    ebx,ebp
c001aa3d:	39 ce                	cmp    esi,ecx
c001aa3f:	7e 17                	jle    c001aa58 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001aa41:	31 d2                	xor    edx,edx
c001aa43:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001aa47:	7d 13                	jge    c001aa5c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001aa49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aa4d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001aa50:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001aa53:	75 0d                	jne    c001aa62 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001aa55:	42                   	inc    edx
c001aa56:	eb eb                	jmp    c001aa43 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001aa58:	31 c0                	xor    eax,eax
c001aa5a:	eb 0a                	jmp    c001aa66 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001aa5c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001aa60:	eb 04                	jmp    c001aa66 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001aa62:	41                   	inc    ecx
c001aa63:	43                   	inc    ebx
c001aa64:	eb d7                	jmp    c001aa3d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001aa66:	5b                   	pop    ebx
c001aa67:	5e                   	pop    esi
c001aa68:	5f                   	pop    edi
c001aa69:	5d                   	pop    ebp
c001aa6a:	c3                   	ret    

c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa6b:	56                   	push   esi
c001aa6c:	53                   	push   ebx
c001aa6d:	52                   	push   edx
c001aa6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa72:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa7a:	39 0d 80 55 02 c0    	cmp    DWORD PTR ds:0xc0025580,ecx
c001aa80:	75 08                	jne    c001aa8a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001aa82:	38 05 28 3a 02 c0    	cmp    BYTE PTR ds:0xc0023a28,al
c001aa88:	74 2b                	je     c001aab5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001aa8a:	83 ec 0c             	sub    esp,0xc
c001aa8d:	31 db                	xor    ebx,ebx
c001aa8f:	a2 28 3a 02 c0       	mov    ds:0xc0023a28,al
c001aa94:	89 0d 80 55 02 c0    	mov    DWORD PTR ds:0xc0025580,ecx
c001aa9a:	68 a0 55 02 c0       	push   0xc00255a0
c001aa9f:	6a 01                	push   0x1
c001aaa1:	53                   	push   ebx
c001aaa2:	0f be c0             	movsx  eax,al
c001aaa5:	51                   	push   ecx
c001aaa6:	ff 34 85 fc 44 02 c0 	push   DWORD PTR [eax*4-0x3ffdbb04]
c001aaad:	e8 6c 76 ff ff       	call   c001211e <LogicalDisk::read(unsigned long long, int, void*)>
c001aab2:	83 c4 20             	add    esp,0x20
c001aab5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001aabd:	c7 44 24 14 a0 55 02 c0 	mov    DWORD PTR [esp+0x14],0xc00255a0
c001aac5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001aac9:	58                   	pop    eax
c001aaca:	5b                   	pop    ebx
c001aacb:	5e                   	pop    esi
c001aacc:	e9 01 5b fe ff       	jmp    c00005d2 <memcpy>
c001aad1:	90                   	nop

c001aad2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aad2:	81 ec 10 08 00 00    	sub    esp,0x810
c001aad8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001aadf:	83 c0 41             	add    eax,0x41
c001aae2:	0f be c0             	movsx  eax,al
c001aae5:	50                   	push   eax
c001aae6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aaea:	50                   	push   eax
c001aaeb:	6a 10                	push   0x10
c001aaed:	e8 79 ff ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aaf2:	83 c4 10             	add    esp,0x10
c001aaf5:	31 c0                	xor    eax,eax
c001aaf7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aafc:	75 1d                	jne    c001ab1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001aafe:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab03:	75 16                	jne    c001ab1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ab05:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab0a:	75 0f                	jne    c001ab1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ab0c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab11:	75 08                	jne    c001ab1b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ab13:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab18:	0f 94 c0             	sete   al
c001ab1b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ab21:	c3                   	ret    

c001ab22 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ab22:	55                   	push   ebp
c001ab23:	57                   	push   edi
c001ab24:	56                   	push   esi
c001ab25:	53                   	push   ebx
c001ab26:	81 ec 34 08 00 00    	sub    esp,0x834
c001ab2c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001ab33:	55                   	push   ebp
c001ab34:	68 ef 2b 02 c0       	push   0xc0022bef
c001ab39:	e8 f5 45 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001ab3e:	83 c4 10             	add    esp,0x10
c001ab41:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001ab49:	0f 84 06 02 00 00    	je     c001ad55 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001ab4f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ab57:	0f 84 f8 01 00 00    	je     c001ad55 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001ab5d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001ab64:	b8 01 00 00 00       	mov    eax,0x1
c001ab69:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001ab6d:	0f 85 e7 01 00 00    	jne    c001ad5a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001ab73:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001ab76:	31 d2                	xor    edx,edx
c001ab78:	89 e9                	mov    ecx,ebp
c001ab7a:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001ab7d:	01 f1                	add    ecx,esi
c001ab7f:	89 d3                	mov    ebx,edx
c001ab81:	11 fb                	adc    ebx,edi
c001ab83:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ab87:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ab8b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001ab92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001ab95:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001ab98:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ab9c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001aba0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aba4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aba8:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001abac:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001abb0:	72 19                	jb     c001abcb <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001abb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001abb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abbe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001abc9:	eb 13                	jmp    c001abde <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001abcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abd3:	29 f0                	sub    eax,esi
c001abd5:	19 fa                	sbb    edx,edi
c001abd7:	89 04 24             	mov    DWORD PTR [esp],eax
c001abda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001abde:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001abe5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001abe8:	8b 00                	mov    eax,DWORD PTR [eax]
c001abea:	0f a4 c2 0b          	shld   edx,eax,0xb
c001abee:	c1 e0 0b             	shl    eax,0xb
c001abf1:	53                   	push   ebx
c001abf2:	01 c6                	add    esi,eax
c001abf4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001abfb:	11 d7                	adc    edi,edx
c001abfd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001ac01:	50                   	push   eax
c001ac02:	89 fa                	mov    edx,edi
c001ac04:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ac08:	50                   	push   eax
c001ac09:	89 f0                	mov    eax,esi
c001ac0b:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ac0f:	50                   	push   eax
c001ac10:	e8 56 fe ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ac15:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ac1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac20:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ac24:	83 c4 10             	add    esp,0x10
c001ac27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ac2a:	b8 00 08 00 00       	mov    eax,0x800
c001ac2f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ac35:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ac39:	29 d0                	sub    eax,edx
c001ac3b:	39 c1                	cmp    ecx,eax
c001ac3d:	83 db 00             	sbb    ebx,0x0
c001ac40:	7d 19                	jge    c001ac5b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001ac42:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ac47:	75 16                	jne    c001ac5f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001ac49:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ac50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ac56:	e9 f6 00 00 00       	jmp    c001ad51 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001ac5b:	89 c5                	mov    ebp,eax
c001ac5d:	eb 03                	jmp    c001ac62 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001ac5f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001ac62:	51                   	push   ecx
c001ac63:	55                   	push   ebp
c001ac64:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001ac68:	50                   	push   eax
c001ac69:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001ac70:	e8 5d 59 fe ff       	call   c00005d2 <memcpy>
c001ac75:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001ac7c:	01 e8                	add    eax,ebp
c001ac7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac82:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac86:	89 e8                	mov    eax,ebp
c001ac88:	99                   	cdq    
c001ac89:	01 ee                	add    esi,ebp
c001ac8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac8f:	11 d7                	adc    edi,edx
c001ac91:	29 e9                	sub    ecx,ebp
c001ac93:	19 d3                	sbb    ebx,edx
c001ac95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ac99:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ac9d:	83 c4 10             	add    esp,0x10
c001aca0:	b8 ff 07 00 00       	mov    eax,0x7ff
c001aca5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001aca8:	b8 00 00 00 00       	mov    eax,0x0
c001acad:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001acb1:	7d 3f                	jge    c001acf2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001acb3:	52                   	push   edx
c001acb4:	89 fa                	mov    edx,edi
c001acb6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001acbd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001acc1:	50                   	push   eax
c001acc2:	89 f0                	mov    eax,esi
c001acc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001acc8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001accc:	50                   	push   eax
c001accd:	e8 99 fd ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001acd2:	81 c6 00 08 00 00    	add    esi,0x800
c001acd8:	83 d7 00             	adc    edi,0x0
c001acdb:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001ace3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001aceb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001acf0:	eb ab                	jmp    c001ac9d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001acf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf6:	0b 04 24             	or     eax,DWORD PTR [esp]
c001acf9:	74 34                	je     c001ad2f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001acfb:	50                   	push   eax
c001acfc:	89 fa                	mov    edx,edi
c001acfe:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ad05:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001ad09:	50                   	push   eax
c001ad0a:	89 f0                	mov    eax,esi
c001ad0c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ad10:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001ad14:	55                   	push   ebp
c001ad15:	50                   	push   eax
c001ad16:	e8 50 fd ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ad1b:	83 c4 0c             	add    esp,0xc
c001ad1e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001ad22:	55                   	push   ebp
c001ad23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad27:	e8 a6 58 fe ff       	call   c00005d2 <memcpy>
c001ad2c:	83 c4 10             	add    esp,0x10
c001ad2f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ad36:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad3e:	89 38                	mov    DWORD PTR [eax],edi
c001ad40:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001ad47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad4b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ad4e:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001ad51:	31 c0                	xor    eax,eax
c001ad53:	eb 05                	jmp    c001ad5a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001ad55:	b8 04 00 00 00       	mov    eax,0x4
c001ad5a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001ad60:	5b                   	pop    ebx
c001ad61:	5e                   	pop    esi
c001ad62:	5f                   	pop    edi
c001ad63:	5d                   	pop    ebp
c001ad64:	c3                   	ret    
c001ad65:	90                   	nop

c001ad66 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ad66:	55                   	push   ebp
c001ad67:	57                   	push   edi
c001ad68:	56                   	push   esi
c001ad69:	53                   	push   ebx
c001ad6a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001ad70:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001ad77:	85 f6                	test   esi,esi
c001ad79:	0f 84 62 02 00 00    	je     c001afe1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001ad7f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001ad87:	0f 84 54 02 00 00    	je     c001afe1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001ad8d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001ad90:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001ad93:	75 0a                	jne    c001ad9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ad95:	b8 07 00 00 00       	mov    eax,0x7
c001ad9a:	e9 47 02 00 00       	jmp    c001afe6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001ad9f:	50                   	push   eax
c001ada0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001ada4:	50                   	push   eax
c001ada5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001adac:	53                   	push   ebx
c001adad:	8b 06                	mov    eax,DWORD PTR [esi]
c001adaf:	c1 e0 0b             	shl    eax,0xb
c001adb2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001adb5:	c1 e8 0b             	shr    eax,0xb
c001adb8:	50                   	push   eax
c001adb9:	e8 ad fc ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001adbe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	89 c1                	mov    ecx,eax
c001adc6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001adc9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001adcf:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001add2:	84 db                	test   bl,bl
c001add4:	0f 85 90 00 00 00    	jne    c001ae6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001adda:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001ade0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ade6:	29 c7                	sub    edi,eax
c001ade8:	89 fb                	mov    ebx,edi
c001adea:	c1 fb 1f             	sar    ebx,0x1f
c001aded:	01 f8                	add    eax,edi
c001adef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adf3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001adf6:	11 da                	adc    edx,ebx
c001adf8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001adfb:	89 04 24             	mov    DWORD PTR [esp],eax
c001adfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae02:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001ae05:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ae08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ae0b:	89 d8                	mov    eax,ebx
c001ae0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ae11:	ba 00 00 00 00       	mov    edx,0x0
c001ae16:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ae1a:	b8 00 00 00 00       	mov    eax,0x0
c001ae1f:	73 0b                	jae    c001ae2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001ae21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ae24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ae28:	29 f8                	sub    eax,edi
c001ae2a:	19 da                	sbb    edx,ebx
c001ae2c:	89 d3                	mov    ebx,edx
c001ae2e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001ae31:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001ae34:	09 c3                	or     ebx,eax
c001ae36:	0f 84 59 ff ff ff    	je     c001ad95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001ae3c:	55                   	push   ebp
c001ae3d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001ae41:	50                   	push   eax
c001ae42:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ae49:	53                   	push   ebx
c001ae4a:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae4c:	c1 e0 0b             	shl    eax,0xb
c001ae4f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001ae53:	c1 e8 0b             	shr    eax,0xb
c001ae56:	50                   	push   eax
c001ae57:	e8 0f fc ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ae5c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	25 ff 07 00 00       	and    eax,0x7ff
c001ae67:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ae6a:	57                   	push   edi
c001ae6b:	6a 28                	push   0x28
c001ae6d:	6a 00                	push   0x0
c001ae6f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae73:	50                   	push   eax
c001ae74:	e8 8f 57 fe ff       	call   c0000608 <memset>
c001ae79:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001ae7c:	31 d2                	xor    edx,edx
c001ae7e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ae84:	89 f8                	mov    eax,edi
c001ae86:	83 c0 21             	add    eax,0x21
c001ae89:	83 d2 00             	adc    edx,0x0
c001ae8c:	89 c7                	mov    edi,eax
c001ae8e:	89 d5                	mov    ebp,edx
c001ae90:	83 c4 10             	add    esp,0x10
c001ae93:	31 c9                	xor    ecx,ecx
c001ae95:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001ae9c:	83 f9 28             	cmp    ecx,0x28
c001ae9f:	0f 94 c2             	sete   dl
c001aea2:	88 04 24             	mov    BYTE PTR [esp],al
c001aea5:	88 d0                	mov    al,dl
c001aea7:	ba ff 07 00 00       	mov    edx,0x7ff
c001aeac:	39 fa                	cmp    edx,edi
c001aeae:	ba 00 00 00 00       	mov    edx,0x0
c001aeb3:	19 ea                	sbb    edx,ebp
c001aeb5:	0f 92 c2             	setb   dl
c001aeb8:	09 c2                	or     edx,eax
c001aeba:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001aebe:	0f 94 c0             	sete   al
c001aec1:	08 d0                	or     al,dl
c001aec3:	75 16                	jne    c001aedb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001aec5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001aec9:	74 10                	je     c001aedb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001aecb:	8a 04 24             	mov    al,BYTE PTR [esp]
c001aece:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001aed2:	41                   	inc    ecx
c001aed3:	83 c7 01             	add    edi,0x1
c001aed6:	83 d5 00             	adc    ebp,0x0
c001aed9:	eb ba                	jmp    c001ae95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001aedb:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001aee2:	83 ec 0c             	sub    esp,0xc
c001aee5:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001aee9:	57                   	push   edi
c001aeea:	e8 36 57 fe ff       	call   c0000625 <strlen>
c001aeef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aef3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aef6:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001aefd:	25 ff 07 00 00       	and    eax,0x7ff
c001af02:	01 c8                	add    eax,ecx
c001af04:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001af0c:	5a                   	pop    edx
c001af0d:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001af14:	59                   	pop    ecx
c001af15:	0f 95 c0             	setne  al
c001af18:	0f b6 c0             	movzx  eax,al
c001af1b:	40                   	inc    eax
c001af1c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af20:	57                   	push   edi
c001af21:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001af25:	50                   	push   eax
c001af26:	e8 7c 57 fe ff       	call   c00006a7 <strcpy>
c001af2b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	84 c0                	test   al,al
c001af34:	75 21                	jne    c001af57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001af36:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001af3e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001af46:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001af4e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001af55:	eb 28                	jmp    c001af7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001af57:	fe c8                	dec    al
c001af59:	75 24                	jne    c001af7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001af5b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001af63:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001af6b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001af73:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001af7a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001af7f:	50                   	push   eax
c001af80:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001af87:	0f b6 fb             	movzx  edi,bl
c001af8a:	8d 44 24 48          	lea    eax,[esp+0x48]
c001af8e:	31 db                	xor    ebx,ebx
c001af90:	50                   	push   eax
c001af91:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001af98:	e8 35 56 fe ff       	call   c00005d2 <memcpy>
c001af9d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001afa4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001afaa:	89 f9                	mov    ecx,edi
c001afac:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001afaf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001afb2:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001afb5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001afb8:	83 c4 10             	add    esp,0x10
c001afbb:	39 c7                	cmp    edi,eax
c001afbd:	89 df                	mov    edi,ebx
c001afbf:	19 d7                	sbb    edi,edx
c001afc1:	72 10                	jb     c001afd3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001afc3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001afca:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001afd1:	eb 0a                	jmp    c001afdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001afd3:	29 c8                	sub    eax,ecx
c001afd5:	19 da                	sbb    edx,ebx
c001afd7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001afda:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001afdd:	31 c0                	xor    eax,eax
c001afdf:	eb 05                	jmp    c001afe6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001afe1:	b8 04 00 00 00       	mov    eax,0x4
c001afe6:	81 c4 5c 09 00 00    	add    esp,0x95c
c001afec:	5b                   	pop    ebx
c001afed:	5e                   	pop    esi
c001afee:	5f                   	pop    edi
c001afef:	5d                   	pop    ebp
c001aff0:	c3                   	ret    

c001aff1 <readRoot(unsigned int*, unsigned int*, char)>:
c001aff1:	81 ec 40 08 00 00    	sub    esp,0x840
c001aff7:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001afff:	50                   	push   eax
c001b000:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b004:	50                   	push   eax
c001b005:	6a 10                	push   0x10
c001b007:	e8 5f fa ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b00c:	83 c4 0c             	add    esp,0xc
c001b00f:	6a 22                	push   0x22
c001b011:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b018:	50                   	push   eax
c001b019:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b01d:	50                   	push   eax
c001b01e:	e8 af 55 fe ff       	call   c00005d2 <memcpy>
c001b023:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b02a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b02e:	89 10                	mov    DWORD PTR [eax],edx
c001b030:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b037:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b03b:	89 10                	mov    DWORD PTR [eax],edx
c001b03d:	b0 01                	mov    al,0x1
c001b03f:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b045:	c3                   	ret    

c001b046 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b046:	55                   	push   ebp
c001b047:	57                   	push   edi
c001b048:	56                   	push   esi
c001b049:	53                   	push   ebx
c001b04a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b050:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b057:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b05e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b062:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b066:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b06a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b06e:	75 03                	jne    c001b073 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b070:	83 c3 02             	add    ebx,0x2
c001b073:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b076:	75 03                	jne    c001b07b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b078:	43                   	inc    ebx
c001b079:	eb f8                	jmp    c001b073 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b07b:	51                   	push   ecx
c001b07c:	68 00 01 00 00       	push   0x100
c001b081:	6a 00                	push   0x0
c001b083:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b087:	50                   	push   eax
c001b088:	e8 7b 55 fe ff       	call   c0000608 <memset>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	31 d2                	xor    edx,edx
c001b092:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b095:	84 c0                	test   al,al
c001b097:	74 21                	je     c001b0ba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b099:	3c 2f                	cmp    al,0x2f
c001b09b:	75 0b                	jne    c001b0a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b09d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b0a1:	bd 01 00 00 00       	mov    ebp,0x1
c001b0a6:	eb 14                	jmp    c001b0bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b0a8:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b0ab:	80 f9 19             	cmp    cl,0x19
c001b0ae:	77 03                	ja     c001b0b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b0b0:	83 e8 20             	sub    eax,0x20
c001b0b3:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b0b7:	42                   	inc    edx
c001b0b8:	eb d8                	jmp    c001b092 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b0ba:	31 ed                	xor    ebp,ebp
c001b0bc:	83 ec 0c             	sub    esp,0xc
c001b0bf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b0c6:	e8 36 0e ff ff       	call   c000bf01 <malloc>
c001b0cb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b0d2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b0d8:	89 c6                	mov    esi,eax
c001b0da:	c1 ef 0b             	shr    edi,0xb
c001b0dd:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b0e4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b0f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0f4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b0fb:	74 28                	je     c001b125 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b0fd:	52                   	push   edx
c001b0fe:	57                   	push   edi
c001b0ff:	50                   	push   eax
c001b100:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b104:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b10b:	e8 5b f9 ff ff       	call   c001aa6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b114:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b11b:	05 00 08 00 00       	add    eax,0x800
c001b120:	83 c4 10             	add    esp,0x10
c001b123:	eb cb                	jmp    c001b0f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b125:	83 ec 0c             	sub    esp,0xc
c001b128:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b12c:	57                   	push   edi
c001b12d:	e8 f3 54 fe ff       	call   c0000625 <strlen>
c001b132:	50                   	push   eax
c001b133:	57                   	push   edi
c001b134:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b13b:	56                   	push   esi
c001b13c:	e8 e8 f8 ff ff       	call   c001aa29 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b141:	83 c4 20             	add    esp,0x20
c001b144:	85 c0                	test   eax,eax
c001b146:	75 13                	jne    c001b15b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b148:	83 ec 0c             	sub    esp,0xc
c001b14b:	56                   	push   esi
c001b14c:	e8 c0 0d ff ff       	call   c000bf11 <free>
c001b151:	83 c4 10             	add    esp,0x10
c001b154:	31 c0                	xor    eax,eax
c001b156:	e9 b3 00 00 00       	jmp    c001b20e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b15b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b15f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b163:	c1 e7 08             	shl    edi,0x8
c001b166:	c1 e2 10             	shl    edx,0x10
c001b169:	09 d7                	or     edi,edx
c001b16b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b16f:	09 d7                	or     edi,edx
c001b171:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b175:	c1 e2 18             	shl    edx,0x18
c001b178:	09 d7                	or     edi,edx
c001b17a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b17e:	89 d1                	mov    ecx,edx
c001b180:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b184:	c1 e1 08             	shl    ecx,0x8
c001b187:	c1 e2 10             	shl    edx,0x10
c001b18a:	09 ca                	or     edx,ecx
c001b18c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b190:	09 ca                	or     edx,ecx
c001b192:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b196:	c1 e1 18             	shl    ecx,0x18
c001b199:	09 ca                	or     edx,ecx
c001b19b:	89 e9                	mov    ecx,ebp
c001b19d:	84 c9                	test   cl,cl
c001b19f:	74 3c                	je     c001b1dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b1a1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b1a5:	83 ec 0c             	sub    esp,0xc
c001b1a8:	56                   	push   esi
c001b1a9:	e8 63 0d ff ff       	call   c000bf11 <free>
c001b1ae:	83 c4 0c             	add    esp,0xc
c001b1b1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b1b8:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b1bd:	50                   	push   eax
c001b1be:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b1c5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b1cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b1d0:	52                   	push   edx
c001b1d1:	57                   	push   edi
c001b1d2:	53                   	push   ebx
c001b1d3:	e8 6e fe ff ff       	call   c001b046 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b1d8:	83 c4 20             	add    esp,0x20
c001b1db:	eb 31                	jmp    c001b20e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b1dd:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b1e4:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b1e7:	d0 e8                	shr    al,1
c001b1e9:	83 ec 0c             	sub    esp,0xc
c001b1ec:	89 3b                	mov    DWORD PTR [ebx],edi
c001b1ee:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b1f5:	83 e0 01             	and    eax,0x1
c001b1f8:	89 13                	mov    DWORD PTR [ebx],edx
c001b1fa:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b201:	89 03                	mov    DWORD PTR [ebx],eax
c001b203:	56                   	push   esi
c001b204:	e8 08 0d ff ff       	call   c000bf11 <free>
c001b209:	83 c4 10             	add    esp,0x10
c001b20c:	b0 01                	mov    al,0x1
c001b20e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b214:	5b                   	pop    ebx
c001b215:	5e                   	pop    esi
c001b216:	5f                   	pop    edi
c001b217:	5d                   	pop    ebp
c001b218:	c3                   	ret    

c001b219 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b219:	55                   	push   ebp
c001b21a:	57                   	push   edi
c001b21b:	56                   	push   esi
c001b21c:	53                   	push   ebx
c001b21d:	83 ec 20             	sub    esp,0x20
c001b220:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b224:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b228:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b22d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b231:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b239:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b241:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b247:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b24d:	57                   	push   edi
c001b24e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b252:	50                   	push   eax
c001b253:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b257:	50                   	push   eax
c001b258:	e8 94 fd ff ff       	call   c001aff1 <readRoot(unsigned int*, unsigned int*, char)>
c001b25d:	5a                   	pop    edx
c001b25e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b262:	e8 be 53 fe ff       	call   c0000625 <strlen>
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	83 f8 03             	cmp    eax,0x3
c001b26d:	77 17                	ja     c001b286 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b26f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b273:	89 03                	mov    DWORD PTR [ebx],eax
c001b275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b279:	89 06                	mov    DWORD PTR [esi],eax
c001b27b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b282:	b0 01                	mov    al,0x1
c001b284:	eb 19                	jmp    c001b29f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b286:	50                   	push   eax
c001b287:	55                   	push   ebp
c001b288:	57                   	push   edi
c001b289:	56                   	push   esi
c001b28a:	53                   	push   ebx
c001b28b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b28f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b297:	e8 aa fd ff ff       	call   c001b046 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b29c:	83 c4 20             	add    esp,0x20
c001b29f:	83 c4 1c             	add    esp,0x1c
c001b2a2:	5b                   	pop    ebx
c001b2a3:	5e                   	pop    esi
c001b2a4:	5f                   	pop    edi
c001b2a5:	5d                   	pop    ebp
c001b2a6:	c3                   	ret    
c001b2a7:	90                   	nop

c001b2a8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b2a8:	57                   	push   edi
c001b2a9:	56                   	push   esi
c001b2aa:	53                   	push   ebx
c001b2ab:	83 ec 10             	sub    esp,0x10
c001b2ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b2b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b2b6:	85 f6                	test   esi,esi
c001b2b8:	74 7b                	je     c001b335 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b2ba:	85 ff                	test   edi,edi
c001b2bc:	74 77                	je     c001b335 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b2be:	83 ec 0c             	sub    esp,0xc
c001b2c1:	6a 1c                	push   0x1c
c001b2c3:	e8 39 0c ff ff       	call   c000bf01 <malloc>
c001b2c8:	89 07                	mov    DWORD PTR [edi],eax
c001b2ca:	89 c3                	mov    ebx,eax
c001b2cc:	58                   	pop    eax
c001b2cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b2d1:	50                   	push   eax
c001b2d2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b2d5:	50                   	push   eax
c001b2d6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2da:	50                   	push   eax
c001b2db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2df:	50                   	push   eax
c001b2e0:	56                   	push   esi
c001b2e1:	e8 33 ff ff ff       	call   c001b219 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b2e6:	83 c4 20             	add    esp,0x20
c001b2e9:	84 c0                	test   al,al
c001b2eb:	74 07                	je     c001b2f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b2ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b2f2:	74 0b                	je     c001b2ff <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b2f4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b2f8:	b8 01 00 00 00       	mov    eax,0x1
c001b2fd:	eb 3b                	jmp    c001b33a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b2ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b303:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b307:	89 03                	mov    DWORD PTR [ebx],eax
c001b309:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b310:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b314:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b31b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b322:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b325:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b32c:	8a 06                	mov    al,BYTE PTR [esi]
c001b32e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b331:	31 c0                	xor    eax,eax
c001b333:	eb 05                	jmp    c001b33a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b335:	b8 04 00 00 00       	mov    eax,0x4
c001b33a:	83 c4 10             	add    esp,0x10
c001b33d:	5b                   	pop    ebx
c001b33e:	5e                   	pop    esi
c001b33f:	5f                   	pop    edi
c001b340:	c3                   	ret    
c001b341:	90                   	nop

c001b342 <ISO9660::exists(char const*)>:
c001b342:	83 ec 28             	sub    esp,0x28
c001b345:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b349:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b34d:	52                   	push   edx
c001b34e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b351:	52                   	push   edx
c001b352:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b356:	52                   	push   edx
c001b357:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b35b:	52                   	push   edx
c001b35c:	50                   	push   eax
c001b35d:	e8 b7 fe ff ff       	call   c001b219 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b362:	83 c4 3c             	add    esp,0x3c
c001b365:	c3                   	ret    

c001b366 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b366:	56                   	push   esi
c001b367:	53                   	push   ebx
c001b368:	83 ec 14             	sub    esp,0x14
c001b36b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b36f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b373:	85 db                	test   ebx,ebx
c001b375:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b379:	0f 94 c2             	sete   dl
c001b37c:	85 f6                	test   esi,esi
c001b37e:	0f 94 c0             	sete   al
c001b381:	08 c2                	or     dl,al
c001b383:	75 68                	jne    c001b3ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b385:	85 c9                	test   ecx,ecx
c001b387:	74 64                	je     c001b3ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b389:	83 ec 0c             	sub    esp,0xc
c001b38c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b38f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b395:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b39c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3a0:	50                   	push   eax
c001b3a1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b3a4:	50                   	push   eax
c001b3a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b3a9:	50                   	push   eax
c001b3aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b3ae:	50                   	push   eax
c001b3af:	51                   	push   ecx
c001b3b0:	e8 64 fe ff ff       	call   c001b219 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b3b5:	83 c4 20             	add    esp,0x20
c001b3b8:	ba 01 00 00 00       	mov    edx,0x1
c001b3bd:	84 c0                	test   al,al
c001b3bf:	74 31                	je     c001b3f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b3c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b3cc:	89 03                	mov    DWORD PTR [ebx],eax
c001b3ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3d2:	85 c0                	test   eax,eax
c001b3d4:	ba 00 00 00 00       	mov    edx,0x0
c001b3d9:	0f 95 06             	setne  BYTE PTR [esi]
c001b3dc:	74 14                	je     c001b3f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b3de:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b3e4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b3eb:	eb 05                	jmp    c001b3f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b3ed:	ba 04 00 00 00       	mov    edx,0x4
c001b3f2:	83 c4 14             	add    esp,0x14
c001b3f5:	89 d0                	mov    eax,edx
c001b3f7:	5b                   	pop    ebx
c001b3f8:	5e                   	pop    esi
c001b3f9:	c3                   	ret    

c001b3fa <ISO9660::openDir(char const*, void**)>:
c001b3fa:	57                   	push   edi
c001b3fb:	56                   	push   esi
c001b3fc:	53                   	push   ebx
c001b3fd:	83 ec 10             	sub    esp,0x10
c001b400:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b404:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b408:	85 f6                	test   esi,esi
c001b40a:	0f 84 95 00 00 00    	je     c001b4a5 <ISO9660::openDir(char const*, void**)+0xab>
c001b410:	85 ff                	test   edi,edi
c001b412:	0f 84 8d 00 00 00    	je     c001b4a5 <ISO9660::openDir(char const*, void**)+0xab>
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	6a 1c                	push   0x1c
c001b41d:	e8 df 0a ff ff       	call   c000bf01 <malloc>
c001b422:	89 07                	mov    DWORD PTR [edi],eax
c001b424:	89 c3                	mov    ebx,eax
c001b426:	59                   	pop    ecx
c001b427:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b42b:	50                   	push   eax
c001b42c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b42f:	50                   	push   eax
c001b430:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b434:	50                   	push   eax
c001b435:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b439:	50                   	push   eax
c001b43a:	56                   	push   esi
c001b43b:	e8 d9 fd ff ff       	call   c001b219 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b440:	83 c4 20             	add    esp,0x20
c001b443:	84 c0                	test   al,al
c001b445:	74 07                	je     c001b44e <ISO9660::openDir(char const*, void**)+0x54>
c001b447:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b44c:	75 21                	jne    c001b46f <ISO9660::openDir(char const*, void**)+0x75>
c001b44e:	52                   	push   edx
c001b44f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b453:	0f b6 c0             	movzx  eax,al
c001b456:	50                   	push   eax
c001b457:	68 02 2c 02 c0       	push   0xc0022c02
c001b45c:	e8 d2 3c ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001b461:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	b8 01 00 00 00       	mov    eax,0x1
c001b46d:	eb 3b                	jmp    c001b4aa <ISO9660::openDir(char const*, void**)+0xb0>
c001b46f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b473:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b477:	89 03                	mov    DWORD PTR [ebx],eax
c001b479:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b484:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b48b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b492:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b495:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b49c:	8a 06                	mov    al,BYTE PTR [esi]
c001b49e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b4a1:	31 c0                	xor    eax,eax
c001b4a3:	eb 05                	jmp    c001b4aa <ISO9660::openDir(char const*, void**)+0xb0>
c001b4a5:	b8 04 00 00 00       	mov    eax,0x4
c001b4aa:	83 c4 10             	add    esp,0x10
c001b4ad:	5b                   	pop    ebx
c001b4ae:	5e                   	pop    esi
c001b4af:	5f                   	pop    edi
c001b4b0:	c3                   	ret    
c001b4b1:	90                   	nop

c001b4b2 <ISO9660::ISO9660()>:
c001b4b2:	83 ec 0c             	sub    esp,0xc
c001b4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4b9:	83 ec 0c             	sub    esp,0xc
c001b4bc:	50                   	push   eax
c001b4bd:	e8 7e 3f ff ff       	call   c000f440 <Filesystem::Filesystem()>
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	ba 28 2c 02 c0       	mov    edx,0xc0022c28
c001b4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ce:	89 10                	mov    DWORD PTR [eax],edx
c001b4d0:	90                   	nop
c001b4d1:	83 c4 0c             	add    esp,0xc
c001b4d4:	c3                   	ret    
c001b4d5:	90                   	nop

c001b4d6 <SoundChannel::~SoundChannel()>:
c001b4d6:	83 ec 0c             	sub    esp,0xc
c001b4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	50                   	push   eax
c001b4e4:	e8 28 0a ff ff       	call   c000bf11 <free>
c001b4e9:	83 c4 10             	add    esp,0x10
c001b4ec:	90                   	nop
c001b4ed:	83 c4 0c             	add    esp,0xc
c001b4f0:	c3                   	ret    
c001b4f1:	90                   	nop

c001b4f2 <SoundChannel::setSpeed(float)>:
c001b4f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4f6:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b4fa:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b4fd:	c3                   	ret    

c001b4fe <SoundChannel::getSpeed()>:
c001b4fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b502:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b505:	c3                   	ret    

c001b506 <SoundChannel::setVolume(int)>:
c001b506:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b50a:	83 f8 64             	cmp    eax,0x64
c001b50d:	7e 05                	jle    c001b514 <SoundChannel::setVolume(int)+0xe>
c001b50f:	b8 64 00 00 00       	mov    eax,0x64
c001b514:	85 c0                	test   eax,eax
c001b516:	79 02                	jns    c001b51a <SoundChannel::setVolume(int)+0x14>
c001b518:	31 c0                	xor    eax,eax
c001b51a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b51e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001b521:	c3                   	ret    

c001b522 <SoundChannel::getVolume()>:
c001b522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b526:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b529:	c3                   	ret    

c001b52a <SoundChannel::pause()>:
c001b52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b52e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001b532:	c3                   	ret    
c001b533:	90                   	nop

c001b534 <SoundChannel::SoundChannel(int, int, int, int)>:
c001b534:	83 ec 1c             	sub    esp,0x1c
c001b537:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b53b:	e8 ea ff ff ff       	call   c001b52a <SoundChannel::pause()>
c001b540:	83 c4 04             	add    esp,0x4
c001b543:	6a 50                	push   0x50
c001b545:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b549:	e8 b8 ff ff ff       	call   c001b506 <SoundChannel::setVolume(int)>
c001b54e:	83 c4 08             	add    esp,0x8
c001b551:	d9 e8                	fld1   
c001b553:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001b557:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b55a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b55e:	e8 8f ff ff ff       	call   c001b4f2 <SoundChannel::setSpeed(float)>
c001b563:	83 c4 08             	add    esp,0x8
c001b566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b56a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b56e:	89 10                	mov    DWORD PTR [eax],edx
c001b570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b574:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b578:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b57b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b57f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b583:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b586:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b58b:	75 26                	jne    c001b5b3 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001b58d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b591:	8b 10                	mov    edx,DWORD PTR [eax]
c001b593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b597:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b59a:	0f af c2             	imul   eax,edx
c001b59d:	89 c2                	mov    edx,eax
c001b59f:	c1 fa 1f             	sar    edx,0x1f
c001b5a2:	83 e2 03             	and    edx,0x3
c001b5a5:	01 d0                	add    eax,edx
c001b5a7:	c1 f8 02             	sar    eax,0x2
c001b5aa:	05 a0 0f 00 00       	add    eax,0xfa0
c001b5af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5bb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5c2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5cd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b5db:	c1 e0 02             	shl    eax,0x2
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	50                   	push   eax
c001b5e2:	e8 1a 09 ff ff       	call   c000bf01 <malloc>
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	89 c2                	mov    edx,eax
c001b5ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b5f3:	83 ec 04             	sub    esp,0x4
c001b5f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b5fa:	50                   	push   eax
c001b5fb:	6a 01                	push   0x1
c001b5fd:	6a 04                	push   0x4
c001b5ff:	e8 2c d2 fe ff       	call   c0008830 <src_new>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	89 c2                	mov    edx,eax
c001b609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b60d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b614:	85 c0                	test   eax,eax
c001b616:	74 10                	je     c001b628 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001b618:	83 ec 0c             	sub    esp,0xc
c001b61b:	68 84 2c 02 c0       	push   0xc0022c84
c001b620:	e8 cd 9c ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	90                   	nop
c001b629:	83 c4 1c             	add    esp,0x1c
c001b62c:	c3                   	ret    
c001b62d:	90                   	nop

c001b62e <SoundChannel::play()>:
c001b62e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b632:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b636:	c3                   	ret    
c001b637:	90                   	nop

c001b638 <SoundChannel::paused()>:
c001b638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b63c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b63f:	c3                   	ret    

c001b640 <SoundChannel::getSampleRate()>:
c001b640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b644:	8b 00                	mov    eax,DWORD PTR [eax]
c001b646:	c3                   	ret    
c001b647:	90                   	nop

c001b648 <SoundChannel::getBits()>:
c001b648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b64c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b64f:	c3                   	ret    

c001b650 <SoundChannel::getBufferUsed()>:
c001b650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b654:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b657:	c3                   	ret    

c001b658 <SoundChannel::getBufferSize()>:
c001b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b65c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b65f:	c3                   	ret    

c001b660 <SoundChannel::unbuffer(float*, int, int)>:
c001b660:	53                   	push   ebx
c001b661:	83 ec 40             	sub    esp,0x40
c001b664:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b668:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b670:	db 03                	fild   DWORD PTR [ebx]
c001b672:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b676:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b679:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b67d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b684:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b688:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b68c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b690:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b694:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b698:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b69b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b69f:	50                   	push   eax
c001b6a0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b6a3:	e8 42 ce fe ff       	call   c00084ea <src_process>
c001b6a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b6ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b6af:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b6b2:	83 c4 0c             	add    esp,0xc
c001b6b5:	29 d0                	sub    eax,edx
c001b6b7:	c1 e0 02             	shl    eax,0x2
c001b6ba:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b6bd:	50                   	push   eax
c001b6be:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b6c1:	50                   	push   eax
c001b6c2:	51                   	push   ecx
c001b6c3:	e8 d2 4e fe ff       	call   c000059a <memmove>
c001b6c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6cc:	83 c4 48             	add    esp,0x48
c001b6cf:	5b                   	pop    ebx
c001b6d0:	c3                   	ret    
c001b6d1:	90                   	nop

c001b6d2 <SoundChannel::buffer8(unsigned char*, int)>:
c001b6d2:	53                   	push   ebx
c001b6d3:	31 c0                	xor    eax,eax
c001b6d5:	83 ec 08             	sub    esp,0x8
c001b6d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6dc:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b6df:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b6e2:	74 35                	je     c001b719 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b6e4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b6e8:	7d 2f                	jge    c001b719 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b6ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b6ee:	d9 05 a0 2c 02 c0    	fld    DWORD PTR ds:0xc0022ca0
c001b6f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b6f8:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b6fd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b700:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b704:	40                   	inc    eax
c001b705:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b708:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b70b:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b70e:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b711:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b714:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b717:	eb c9                	jmp    c001b6e2 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b719:	83 c4 08             	add    esp,0x8
c001b71c:	5b                   	pop    ebx
c001b71d:	c3                   	ret    

c001b71e <SoundDevice::SoundDevice(char const*)>:
c001b71e:	83 ec 1c             	sub    esp,0x1c
c001b721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b725:	83 ec 08             	sub    esp,0x8
c001b728:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b72c:	50                   	push   eax
c001b72d:	e8 06 50 ff ff       	call   c0010738 <Device::Device(char const*)>
c001b732:	83 c4 10             	add    esp,0x10
c001b735:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001b73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b73e:	89 10                	mov    DWORD PTR [eax],edx
c001b740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b744:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b74e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b752:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b75c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b764:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b769:	7f 19                	jg     c001b784 <SoundDevice::SoundDevice(char const*)+0x66>
c001b76b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b76f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b773:	83 c2 54             	add    edx,0x54
c001b776:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b77e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b782:	eb e0                	jmp    c001b764 <SoundDevice::SoundDevice(char const*)+0x46>
c001b784:	90                   	nop
c001b785:	83 c4 1c             	add    esp,0x1c
c001b788:	c3                   	ret    
c001b789:	90                   	nop

c001b78a <SoundDevice::~SoundDevice()>:
c001b78a:	53                   	push   ebx
c001b78b:	83 ec 18             	sub    esp,0x18
c001b78e:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001b793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b797:	89 10                	mov    DWORD PTR [eax],edx
c001b799:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7a1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b7a6:	7f 46                	jg     c001b7ee <SoundDevice::~SoundDevice()+0x64>
c001b7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b7b0:	83 c2 54             	add    edx,0x54
c001b7b3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b7b7:	85 c0                	test   eax,eax
c001b7b9:	74 2d                	je     c001b7e8 <SoundDevice::~SoundDevice()+0x5e>
c001b7bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b7c3:	83 c2 54             	add    edx,0x54
c001b7c6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b7ca:	85 db                	test   ebx,ebx
c001b7cc:	74 1a                	je     c001b7e8 <SoundDevice::~SoundDevice()+0x5e>
c001b7ce:	83 ec 0c             	sub    esp,0xc
c001b7d1:	53                   	push   ebx
c001b7d2:	e8 ff fc ff ff       	call   c001b4d6 <SoundChannel::~SoundChannel()>
c001b7d7:	83 c4 10             	add    esp,0x10
c001b7da:	83 ec 08             	sub    esp,0x8
c001b7dd:	6a 2c                	push   0x2c
c001b7df:	53                   	push   ebx
c001b7e0:	e8 28 38 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001b7e5:	83 c4 10             	add    esp,0x10
c001b7e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b7ec:	eb b3                	jmp    c001b7a1 <SoundDevice::~SoundDevice()+0x17>
c001b7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f2:	83 ec 0c             	sub    esp,0xc
c001b7f5:	50                   	push   eax
c001b7f6:	e8 f3 4b ff ff       	call   c00103ee <Device::~Device()>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	90                   	nop
c001b7ff:	83 c4 18             	add    esp,0x18
c001b802:	5b                   	pop    ebx
c001b803:	c3                   	ret    

c001b804 <SoundDevice::~SoundDevice()>:
c001b804:	83 ec 0c             	sub    esp,0xc
c001b807:	83 ec 0c             	sub    esp,0xc
c001b80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b80e:	e8 77 ff ff ff       	call   c001b78a <SoundDevice::~SoundDevice()>
c001b813:	83 c4 10             	add    esp,0x10
c001b816:	83 ec 08             	sub    esp,0x8
c001b819:	68 e4 01 00 00       	push   0x1e4
c001b81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b822:	e8 e6 37 ff ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001b827:	83 c4 10             	add    esp,0x10
c001b82a:	83 c4 0c             	add    esp,0xc
c001b82d:	c3                   	ret    

c001b82e <SoundDevice::getFreeChannelNum()>:
c001b82e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b832:	31 c0                	xor    eax,eax
c001b834:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b83c:	74 09                	je     c001b847 <SoundDevice::getFreeChannelNum()+0x19>
c001b83e:	40                   	inc    eax
c001b83f:	83 f8 20             	cmp    eax,0x20
c001b842:	75 f0                	jne    c001b834 <SoundDevice::getFreeChannelNum()+0x6>
c001b844:	83 c8 ff             	or     eax,0xffffffff
c001b847:	c3                   	ret    

c001b848 <SoundDevice::addChannel(SoundChannel*)>:
c001b848:	56                   	push   esi
c001b849:	53                   	push   ebx
c001b84a:	51                   	push   ecx
c001b84b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b84f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b853:	53                   	push   ebx
c001b854:	e8 d5 ff ff ff       	call   c001b82e <SoundDevice::getFreeChannelNum()>
c001b859:	5a                   	pop    edx
c001b85a:	83 f8 ff             	cmp    eax,0xffffffff
c001b85d:	74 51                	je     c001b8b0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b85f:	85 f6                	test   esi,esi
c001b861:	74 4d                	je     c001b8b0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b863:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b86a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b871:	75 30                	jne    c001b8a3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	56                   	push   esi
c001b877:	e8 c4 fd ff ff       	call   c001b640 <SoundChannel::getSampleRate()>
c001b87c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b882:	89 34 24             	mov    DWORD PTR [esp],esi
c001b885:	e8 be fd ff ff       	call   c001b648 <SoundChannel::getBits()>
c001b88a:	83 c4 0c             	add    esp,0xc
c001b88d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b893:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b895:	50                   	push   eax
c001b896:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b89c:	53                   	push   ebx
c001b89d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b8a0:	83 c4 10             	add    esp,0x10
c001b8a3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b8a9:	b8 01 00 00 00       	mov    eax,0x1
c001b8ae:	eb 03                	jmp    c001b8b3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b8b0:	83 c8 ff             	or     eax,0xffffffff
c001b8b3:	5a                   	pop    edx
c001b8b4:	5b                   	pop    ebx
c001b8b5:	5e                   	pop    esi
c001b8b6:	c3                   	ret    
c001b8b7:	90                   	nop

c001b8b8 <SoundDevice::removeChannel(int)>:
c001b8b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8c0:	83 fa 1f             	cmp    edx,0x1f
c001b8c3:	77 23                	ja     c001b8e8 <SoundDevice::removeChannel(int)+0x30>
c001b8c5:	8d 14 90             	lea    edx,[eax+edx*4]
c001b8c8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b8cf:	74 17                	je     c001b8e8 <SoundDevice::removeChannel(int)+0x30>
c001b8d1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b8db:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b8e1:	75 05                	jne    c001b8e8 <SoundDevice::removeChannel(int)+0x30>
c001b8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8e5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b8e8:	c3                   	ret    
c001b8e9:	90                   	nop

c001b8ea <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b8ea:	56                   	push   esi
c001b8eb:	53                   	push   ebx
c001b8ec:	31 db                	xor    ebx,ebx
c001b8ee:	83 ec 14             	sub    esp,0x14
c001b8f1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b8f5:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b8f9:	7d 55                	jge    c001b950 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b8fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b8ff:	d9 e8                	fld1   
c001b901:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b904:	d8 0d dc 2c 02 c0    	fmul   DWORD PTR ds:0xc0022cdc
c001b90a:	d8 0d e0 2c 02 c0    	fmul   DWORD PTR ds:0xc0022ce0
c001b910:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b914:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b918:	d8 15 e4 2c 02 c0    	fcom   DWORD PTR ds:0xc0022ce4
c001b91e:	df e0                	fnstsw ax
c001b920:	9e                   	sahf   
c001b921:	72 08                	jb     c001b92b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b923:	dd d8                	fstp   st(0)
c001b925:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b929:	eb 22                	jmp    c001b94d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b92b:	d9 ee                	fldz   
c001b92d:	d8 d9                	fcomp  st(1)
c001b92f:	df e0                	fnstsw ax
c001b931:	9e                   	sahf   
c001b932:	72 08                	jb     c001b93c <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b934:	dd d8                	fstp   st(0)
c001b936:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b93a:	eb 11                	jmp    c001b94d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b93c:	83 ec 10             	sub    esp,0x10
c001b93f:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b942:	e8 c5 36 00 00       	call   c001f00c <lrintf>
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b94d:	43                   	inc    ebx
c001b94e:	eb a5                	jmp    c001b8f5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b950:	83 c4 14             	add    esp,0x14
c001b953:	5b                   	pop    ebx
c001b954:	5e                   	pop    esi
c001b955:	c3                   	ret    

c001b956 <SoundDevice::getAudio(int, float*, float*)>:
c001b956:	55                   	push   ebp
c001b957:	57                   	push   edi
c001b958:	56                   	push   esi
c001b959:	53                   	push   ebx
c001b95a:	31 db                	xor    ebx,ebx
c001b95c:	83 ec 20             	sub    esp,0x20
c001b95f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b963:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b967:	c1 e0 02             	shl    eax,0x2
c001b96a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b96e:	50                   	push   eax
c001b96f:	6a 00                	push   0x0
c001b971:	55                   	push   ebp
c001b972:	e8 91 4c fe ff       	call   c0000608 <memset>
c001b977:	83 c4 10             	add    esp,0x10
c001b97a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b97e:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b985:	85 c0                	test   eax,eax
c001b987:	0f 84 8c 00 00 00    	je     c001ba19 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b98d:	83 ec 0c             	sub    esp,0xc
c001b990:	50                   	push   eax
c001b991:	e8 a2 fc ff ff       	call   c001b638 <SoundChannel::paused()>
c001b996:	83 c4 10             	add    esp,0x10
c001b999:	84 c0                	test   al,al
c001b99b:	75 7c                	jne    c001ba19 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b99d:	83 ec 0c             	sub    esp,0xc
c001b9a0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b9a7:	e8 76 fb ff ff       	call   c001b522 <SoundChannel::getVolume()>
c001b9ac:	83 c4 10             	add    esp,0x10
c001b9af:	85 c0                	test   eax,eax
c001b9b1:	74 66                	je     c001ba19 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b9bd:	e8 60 fb ff ff       	call   c001b522 <SoundChannel::getVolume()>
c001b9c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9c6:	d9 05 e8 2c 02 c0    	fld    DWORD PTR ds:0xc0022ce8
c001b9cc:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b9d0:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b9d4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b9d8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b9de:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b9e2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b9e9:	e8 72 fc ff ff       	call   c001b660 <SoundChannel::unbuffer(float*, int, int)>
c001b9ee:	83 c4 20             	add    esp,0x20
c001b9f1:	31 d2                	xor    edx,edx
c001b9f3:	39 c2                	cmp    edx,eax
c001b9f5:	7d 1c                	jge    c001ba13 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001b9f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b9fb:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b9ff:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001ba02:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001ba08:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001ba0c:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ba10:	42                   	inc    edx
c001ba11:	eb e0                	jmp    c001b9f3 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001ba13:	39 c7                	cmp    edi,eax
c001ba15:	7e 02                	jle    c001ba19 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ba17:	89 c7                	mov    edi,eax
c001ba19:	43                   	inc    ebx
c001ba1a:	83 fb 20             	cmp    ebx,0x20
c001ba1d:	0f 85 5b ff ff ff    	jne    c001b97e <SoundDevice::getAudio(int, float*, float*)+0x28>
c001ba23:	83 c4 1c             	add    esp,0x1c
c001ba26:	89 f8                	mov    eax,edi
c001ba28:	5b                   	pop    ebx
c001ba29:	5e                   	pop    esi
c001ba2a:	5f                   	pop    edi
c001ba2b:	5d                   	pop    ebp
c001ba2c:	c3                   	ret    
c001ba2d:	90                   	nop

c001ba2e <PCI::open(int, int, void*)>:
c001ba2e:	83 ec 18             	sub    esp,0x18
c001ba31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba35:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba37:	50                   	push   eax
c001ba38:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ba3b:	31 c0                	xor    eax,eax
c001ba3d:	83 c4 1c             	add    esp,0x1c
c001ba40:	c3                   	ret    
c001ba41:	90                   	nop

c001ba42 <PCI::close(int, int, void*)>:
c001ba42:	31 c0                	xor    eax,eax
c001ba44:	c3                   	ret    
c001ba45:	90                   	nop

c001ba46 <PCI::PCI()>:
c001ba46:	83 ec 0c             	sub    esp,0xc
c001ba49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4d:	83 ec 08             	sub    esp,0x8
c001ba50:	68 ec 2c 02 c0       	push   0xc0022cec
c001ba55:	50                   	push   eax
c001ba56:	e8 67 43 ff ff       	call   c000fdc2 <Bus::Bus(char const*)>
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	ba 98 2d 02 c0       	mov    edx,0xc0022d98
c001ba63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba67:	89 10                	mov    DWORD PTR [eax],edx
c001ba69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba73:	31 d2                	xor    edx,edx
c001ba75:	88 c2                	mov    dl,al
c001ba77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ba82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba8c:	31 d2                	xor    edx,edx
c001ba8e:	88 c2                	mov    dl,al
c001ba90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba94:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ba99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001baa3:	8d 50 01             	lea    edx,[eax+0x1]
c001baa6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001baaa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bab0:	31 d2                	xor    edx,edx
c001bab2:	88 c2                	mov    dl,al
c001bab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001babc:	83 c9 c0             	or     ecx,0xffffffc0
c001babf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bac3:	90                   	nop
c001bac4:	83 c4 0c             	add    esp,0xc
c001bac7:	c3                   	ret    

c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bac8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bacc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bad1:	c1 e0 10             	shl    eax,0x10
c001bad4:	89 ca                	mov    edx,ecx
c001bad6:	81 e2 fc 00 00 00    	and    edx,0xfc
c001badc:	09 d0                	or     eax,edx
c001bade:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bae3:	c1 e2 08             	shl    edx,0x8
c001bae6:	09 d0                	or     eax,edx
c001bae8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001baed:	c1 e2 0b             	shl    edx,0xb
c001baf0:	09 d0                	or     eax,edx
c001baf2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001baf7:	0d 00 00 00 80       	or     eax,0x80000000
c001bafc:	ef                   	out    dx,eax
c001bafd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb02:	ed                   	in     eax,dx
c001bb03:	83 e1 02             	and    ecx,0x2
c001bb06:	0f b6 c9             	movzx  ecx,cl
c001bb09:	c1 e1 03             	shl    ecx,0x3
c001bb0c:	d3 e8                	shr    eax,cl
c001bb0e:	c3                   	ret    
c001bb0f:	90                   	nop

c001bb10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bb10:	6a 00                	push   0x0
c001bb12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb17:	50                   	push   eax
c001bb18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb1d:	50                   	push   eax
c001bb1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb23:	50                   	push   eax
c001bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bb28:	e8 9b ff ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb2d:	83 c4 14             	add    esp,0x14
c001bb30:	c3                   	ret    
c001bb31:	90                   	nop

c001bb32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bb32:	6a 0e                	push   0xe
c001bb34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb39:	50                   	push   eax
c001bb3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb3f:	50                   	push   eax
c001bb40:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb45:	50                   	push   eax
c001bb46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bb4a:	e8 79 ff ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb4f:	83 c4 14             	add    esp,0x14
c001bb52:	0f b6 c0             	movzx  eax,al
c001bb55:	c3                   	ret    

c001bb56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bb56:	55                   	push   ebp
c001bb57:	57                   	push   edi
c001bb58:	56                   	push   esi
c001bb59:	53                   	push   ebx
c001bb5a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb5f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bb64:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001bb69:	6a 0a                	push   0xa
c001bb6b:	56                   	push   esi
c001bb6c:	55                   	push   ebp
c001bb6d:	57                   	push   edi
c001bb6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb72:	e8 51 ff ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb77:	6a 0a                	push   0xa
c001bb79:	89 c3                	mov    ebx,eax
c001bb7b:	56                   	push   esi
c001bb7c:	55                   	push   ebp
c001bb7d:	57                   	push   edi
c001bb7e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001bb82:	e8 41 ff ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb87:	83 c4 28             	add    esp,0x28
c001bb8a:	0f b6 db             	movzx  ebx,bl
c001bb8d:	25 00 ff 00 00       	and    eax,0xff00
c001bb92:	09 d8                	or     eax,ebx
c001bb94:	5b                   	pop    ebx
c001bb95:	5e                   	pop    esi
c001bb96:	5f                   	pop    edi
c001bb97:	5d                   	pop    ebp
c001bb98:	c3                   	ret    
c001bb99:	90                   	nop

c001bb9a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bb9a:	6a 08                	push   0x8
c001bb9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bba1:	50                   	push   eax
c001bba2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bba7:	50                   	push   eax
c001bba8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbad:	50                   	push   eax
c001bbae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bbb2:	e8 11 ff ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbb7:	83 c4 14             	add    esp,0x14
c001bbba:	0f b6 c4             	movzx  eax,ah
c001bbbd:	c3                   	ret    

c001bbbe <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bbbe:	6a 08                	push   0x8
c001bbc0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbc5:	50                   	push   eax
c001bbc6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbcb:	50                   	push   eax
c001bbcc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbd1:	50                   	push   eax
c001bbd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bbd6:	e8 ed fe ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbdb:	83 c4 14             	add    esp,0x14
c001bbde:	c3                   	ret    
c001bbdf:	90                   	nop

c001bbe0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bbe0:	6a 3c                	push   0x3c
c001bbe2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbe7:	50                   	push   eax
c001bbe8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbed:	50                   	push   eax
c001bbee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bbf3:	50                   	push   eax
c001bbf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bbf8:	e8 cb fe ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbfd:	83 c4 14             	add    esp,0x14
c001bc00:	c3                   	ret    
c001bc01:	90                   	nop

c001bc02 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bc02:	6a 18                	push   0x18
c001bc04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc09:	50                   	push   eax
c001bc0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc0f:	50                   	push   eax
c001bc10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc15:	50                   	push   eax
c001bc16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc1a:	e8 a9 fe ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc1f:	83 c4 14             	add    esp,0x14
c001bc22:	0f b6 c4             	movzx  eax,ah
c001bc25:	c3                   	ret    

c001bc26 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bc26:	55                   	push   ebp
c001bc27:	57                   	push   edi
c001bc28:	56                   	push   esi
c001bc29:	53                   	push   ebx
c001bc2a:	50                   	push   eax
c001bc2b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001bc2f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001bc34:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bc3b:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc40:	8d 43 12             	lea    eax,[ebx+0x12]
c001bc43:	83 c3 10             	add    ebx,0x10
c001bc46:	0f b6 c0             	movzx  eax,al
c001bc49:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001bc4e:	50                   	push   eax
c001bc4f:	51                   	push   ecx
c001bc50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bc54:	57                   	push   edi
c001bc55:	55                   	push   ebp
c001bc56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bc5a:	e8 69 fe ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc5f:	0f b6 db             	movzx  ebx,bl
c001bc62:	53                   	push   ebx
c001bc63:	89 c6                	mov    esi,eax
c001bc65:	c1 e6 10             	shl    esi,0x10
c001bc68:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bc6c:	51                   	push   ecx
c001bc6d:	57                   	push   edi
c001bc6e:	55                   	push   ebp
c001bc6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc73:	e8 50 fe ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc78:	83 c4 2c             	add    esp,0x2c
c001bc7b:	0f b7 c0             	movzx  eax,ax
c001bc7e:	5b                   	pop    ebx
c001bc7f:	09 f0                	or     eax,esi
c001bc81:	5e                   	pop    esi
c001bc82:	5f                   	pop    edi
c001bc83:	5d                   	pop    ebp
c001bc84:	c3                   	ret    
c001bc85:	90                   	nop

c001bc86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bc86:	53                   	push   ebx
c001bc87:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bc8c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bc91:	c1 e1 10             	shl    ecx,0x10
c001bc94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc98:	25 fc 00 00 00       	and    eax,0xfc
c001bc9d:	09 c1                	or     ecx,eax
c001bc9f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bca4:	c1 e0 08             	shl    eax,0x8
c001bca7:	09 c1                	or     ecx,eax
c001bca9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bcae:	c1 e0 0b             	shl    eax,0xb
c001bcb1:	09 c1                	or     ecx,eax
c001bcb3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bcb9:	89 c8                	mov    eax,ecx
c001bcbb:	ef                   	out    dx,eax
c001bcbc:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bcc1:	ed                   	in     eax,dx
c001bcc2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001bcc7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001bccc:	74 0a                	je     c001bcd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001bcce:	0f b7 d8             	movzx  ebx,ax
c001bcd1:	89 d0                	mov    eax,edx
c001bcd3:	c1 e0 10             	shl    eax,0x10
c001bcd6:	eb 05                	jmp    c001bcdd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001bcd8:	66 31 c0             	xor    ax,ax
c001bcdb:	89 d3                	mov    ebx,edx
c001bcdd:	09 c3                	or     ebx,eax
c001bcdf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bce4:	89 c8                	mov    eax,ecx
c001bce6:	ef                   	out    dx,eax
c001bce7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bcec:	89 d8                	mov    eax,ebx
c001bcee:	ef                   	out    dx,eax
c001bcef:	5b                   	pop    ebx
c001bcf0:	c3                   	ret    
c001bcf1:	90                   	nop

c001bcf2 <PCI::checkBus(unsigned char)>:
c001bcf2:	56                   	push   esi
c001bcf3:	31 f6                	xor    esi,esi
c001bcf5:	53                   	push   ebx
c001bcf6:	51                   	push   ecx
c001bcf7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001bcfb:	52                   	push   edx
c001bcfc:	56                   	push   esi
c001bcfd:	46                   	inc    esi
c001bcfe:	0f b6 c3             	movzx  eax,bl
c001bd01:	50                   	push   eax
c001bd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd06:	e8 4d 03 00 00       	call   c001c058 <PCI::checkDevice(unsigned char, unsigned char)>
c001bd0b:	83 c4 10             	add    esp,0x10
c001bd0e:	83 fe 20             	cmp    esi,0x20
c001bd11:	75 e8                	jne    c001bcfb <PCI::checkBus(unsigned char)+0x9>
c001bd13:	58                   	pop    eax
c001bd14:	5b                   	pop    ebx
c001bd15:	5e                   	pop    esi
c001bd16:	c3                   	ret    
c001bd17:	90                   	nop

c001bd18 <PCI::foundDevice(PCIDeviceInfo)>:
c001bd18:	55                   	push   ebp
c001bd19:	57                   	push   edi
c001bd1a:	56                   	push   esi
c001bd1b:	53                   	push   ebx
c001bd1c:	83 ec 1c             	sub    esp,0x1c
c001bd1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd23:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001bd29:	0f 84 51 01 00 00    	je     c001be80 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001bd2f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bd33:	66 81 f9 06 04       	cmp    cx,0x406
c001bd38:	75 2c                	jne    c001bd66 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001bd3a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001bd3f:	50                   	push   eax
c001bd40:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001bd45:	50                   	push   eax
c001bd46:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001bd4b:	50                   	push   eax
c001bd4c:	56                   	push   esi
c001bd4d:	e8 b0 fe ff ff       	call   c001bc02 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001bd52:	0f b6 c0             	movzx  eax,al
c001bd55:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bd59:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001bd5d:	83 c4 2c             	add    esp,0x2c
c001bd60:	5b                   	pop    ebx
c001bd61:	5e                   	pop    esi
c001bd62:	5f                   	pop    edi
c001bd63:	5d                   	pop    ebp
c001bd64:	eb 8c                	jmp    c001bcf2 <PCI::checkBus(unsigned char)>
c001bd66:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bd6a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001bd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bd74:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001bd78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001bd7c:	88 d3                	mov    bl,dl
c001bd7e:	85 c0                	test   eax,eax
c001bd80:	74 33                	je     c001bdb5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001bd82:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bd85:	85 d2                	test   edx,edx
c001bd87:	74 28                	je     c001bdb1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bd89:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001bd8f:	31 ef                	xor    edi,ebp
c001bd91:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001bd97:	75 18                	jne    c001bdb1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bd99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bd9d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001bda3:	75 0c                	jne    c001bdb1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bda5:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001bdab:	0f 84 cf 00 00 00    	je     c001be80 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001bdb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdb3:	eb c9                	jmp    c001bd7e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001bdb5:	66 81 f9 01 06       	cmp    cx,0x601
c001bdba:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001bdbe:	75 18                	jne    c001bdd8 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001bdc0:	83 ec 0c             	sub    esp,0xc
c001bdc3:	68 58 01 00 00       	push   0x158
c001bdc8:	e8 31 32 ff ff       	call   c000effe <operator new(unsigned long)>
c001bdcd:	59                   	pop    ecx
c001bdce:	89 c5                	mov    ebp,eax
c001bdd0:	5f                   	pop    edi
c001bdd1:	68 f4 2c 02 c0       	push   0xc0022cf4
c001bdd6:	eb 7d                	jmp    c001be55 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001bdd8:	66 81 f9 01 01       	cmp    cx,0x101
c001bddd:	75 60                	jne    c001be3f <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001bddf:	83 ec 0c             	sub    esp,0xc
c001bde2:	68 70 02 00 00       	push   0x270
c001bde7:	e8 12 32 ff ff       	call   c000effe <operator new(unsigned long)>
c001bdec:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdef:	89 c5                	mov    ebp,eax
c001bdf1:	e8 26 03 00 00       	call   c001c11c <IDE::IDE()>
c001bdf6:	58                   	pop    eax
c001bdf7:	5a                   	pop    edx
c001bdf8:	55                   	push   ebp
c001bdf9:	56                   	push   esi
c001bdfa:	e8 49 47 ff ff       	call   c0010548 <Device::addChild(Device*)>
c001bdff:	83 ec 1c             	sub    esp,0x1c
c001be02:	b9 09 00 00 00       	mov    ecx,0x9
c001be07:	fc                   	cld    
c001be08:	89 e7                	mov    edi,esp
c001be0a:	89 de                	mov    esi,ebx
c001be0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001be0e:	55                   	push   ebp
c001be0f:	e8 12 46 ff ff       	call   c0010426 <Device::preOpenPCI(PCIDeviceInfo)>
c001be14:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be17:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001be1b:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001be23:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001be2b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001be33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001be36:	83 c4 4c             	add    esp,0x4c
c001be39:	5b                   	pop    ebx
c001be3a:	5e                   	pop    esi
c001be3b:	5f                   	pop    edi
c001be3c:	5d                   	pop    ebp
c001be3d:	ff e0                	jmp    eax
c001be3f:	83 ec 0c             	sub    esp,0xc
c001be42:	68 58 01 00 00       	push   0x158
c001be47:	e8 b2 31 ff ff       	call   c000effe <operator new(unsigned long)>
c001be4c:	59                   	pop    ecx
c001be4d:	89 c5                	mov    ebp,eax
c001be4f:	5f                   	pop    edi
c001be50:	68 13 2d 02 c0       	push   0xc0022d13
c001be55:	55                   	push   ebp
c001be56:	e8 d9 49 ff ff       	call   c0010834 <DriverlessDevice::DriverlessDevice(char const*)>
c001be5b:	58                   	pop    eax
c001be5c:	5a                   	pop    edx
c001be5d:	55                   	push   ebp
c001be5e:	56                   	push   esi
c001be5f:	e8 e4 46 ff ff       	call   c0010548 <Device::addChild(Device*)>
c001be64:	b9 09 00 00 00       	mov    ecx,0x9
c001be69:	fc                   	cld    
c001be6a:	89 df                	mov    edi,ebx
c001be6c:	89 de                	mov    esi,ebx
c001be6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001be70:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001be74:	83 c4 2c             	add    esp,0x2c
c001be77:	5b                   	pop    ebx
c001be78:	5e                   	pop    esi
c001be79:	5f                   	pop    edi
c001be7a:	5d                   	pop    ebp
c001be7b:	e9 a6 45 ff ff       	jmp    c0010426 <Device::preOpenPCI(PCIDeviceInfo)>
c001be80:	83 c4 1c             	add    esp,0x1c
c001be83:	5b                   	pop    ebx
c001be84:	5e                   	pop    esi
c001be85:	5f                   	pop    edi
c001be86:	5d                   	pop    ebp
c001be87:	c3                   	ret    

c001be88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001be88:	55                   	push   ebp
c001be89:	57                   	push   edi
c001be8a:	56                   	push   esi
c001be8b:	53                   	push   ebx
c001be8c:	83 ec 5c             	sub    esp,0x5c
c001be8f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001be93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be97:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001be9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001be9f:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001bea3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bea7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001beac:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001beb1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001beb6:	6a 0c                	push   0xc
c001beb8:	55                   	push   ebp
c001beb9:	53                   	push   ebx
c001beba:	57                   	push   edi
c001bebb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001bec2:	e8 01 fc ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bec7:	83 c4 0c             	add    esp,0xc
c001beca:	6a 00                	push   0x0
c001becc:	68 2d 2d 02 c0       	push   0xc0022d2d
c001bed1:	e8 5d 32 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001bed6:	55                   	push   ebp
c001bed7:	53                   	push   ebx
c001bed8:	57                   	push   edi
c001bed9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bee0:	e8 71 fc ff ff       	call   c001bb56 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bee5:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001beea:	83 c4 20             	add    esp,0x20
c001beed:	55                   	push   ebp
c001beee:	53                   	push   ebx
c001beef:	57                   	push   edi
c001bef0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001bef4:	e8 e7 fc ff ff       	call   c001bbe0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bef9:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001bf00:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bf04:	55                   	push   ebp
c001bf05:	53                   	push   ebx
c001bf06:	57                   	push   edi
c001bf07:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bf0e:	e8 b5 fb ff ff       	call   c001bac8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf13:	0f b6 c4             	movzx  eax,ah
c001bf16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf1a:	83 c4 18             	add    esp,0x18
c001bf1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bf21:	68 41 2d 02 c0       	push   0xc0022d41
c001bf26:	e8 08 32 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001bf2b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001bf2f:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001bf33:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001bf38:	83 c4 10             	add    esp,0x10
c001bf3b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001bf41:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001bf48:	74 6c                	je     c001bfb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001bf4a:	31 f6                	xor    esi,esi
c001bf4c:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c001bf52:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001bf58:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001bf5e:	7e 56                	jle    c001bfb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001bf60:	8d 14 f2             	lea    edx,[edx+esi*8]
c001bf63:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001bf6a:	39 cb                	cmp    ebx,ecx
c001bf6c:	75 45                	jne    c001bfb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001bf6e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001bf75:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001bf79:	75 38                	jne    c001bfb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001bf7b:	83 ec 0c             	sub    esp,0xc
c001bf7e:	68 50 2d 02 c0       	push   0xc0022d50
c001bf83:	e8 ab 31 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001bf88:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c001bf8e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001bf94:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001bf9c:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001bfa0:	52                   	push   edx
c001bfa1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bfa5:	53                   	push   ebx
c001bfa6:	68 75 2d 02 c0       	push   0xc0022d75
c001bfab:	e8 83 31 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001bfb0:	83 c4 20             	add    esp,0x20
c001bfb3:	46                   	inc    esi
c001bfb4:	eb 96                	jmp    c001bf4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001bfb6:	31 d2                	xor    edx,edx
c001bfb8:	83 ec 0c             	sub    esp,0xc
c001bfbb:	55                   	push   ebp
c001bfbc:	53                   	push   ebx
c001bfbd:	57                   	push   edi
c001bfbe:	52                   	push   edx
c001bfbf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bfc3:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bfca:	e8 57 fc ff ff       	call   c001bc26 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfcf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bfd3:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001bfd7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bfdb:	42                   	inc    edx
c001bfdc:	83 c4 20             	add    esp,0x20
c001bfdf:	83 fa 06             	cmp    edx,0x6
c001bfe2:	75 d4                	jne    c001bfb8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001bfe4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bfe8:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001bfec:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001bff0:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001bff4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001bff8:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001bffc:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c001:	86 e0                	xchg   al,ah
c001c003:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c008:	55                   	push   ebp
c001c009:	53                   	push   ebx
c001c00a:	57                   	push   edi
c001c00b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c00f:	e8 86 fb ff ff       	call   c001bb9a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c014:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c018:	55                   	push   ebp
c001c019:	53                   	push   ebx
c001c01a:	57                   	push   edi
c001c01b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c022:	e8 e9 fa ff ff       	call   c001bb10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c027:	83 ec 0c             	sub    esp,0xc
c001c02a:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c02f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c033:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c037:	b9 09 00 00 00       	mov    ecx,0x9
c001c03c:	fc                   	cld    
c001c03d:	89 e7                	mov    edi,esp
c001c03f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c041:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c048:	e8 cb fc ff ff       	call   c001bd18 <PCI::foundDevice(PCIDeviceInfo)>
c001c04d:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c053:	5b                   	pop    ebx
c001c054:	5e                   	pop    esi
c001c055:	5f                   	pop    edi
c001c056:	5d                   	pop    ebp
c001c057:	c3                   	ret    

c001c058 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c058:	55                   	push   ebp
c001c059:	57                   	push   edi
c001c05a:	56                   	push   esi
c001c05b:	53                   	push   ebx
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c064:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c068:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c06d:	6a 00                	push   0x0
c001c06f:	56                   	push   esi
c001c070:	57                   	push   edi
c001c071:	55                   	push   ebp
c001c072:	e8 99 fa ff ff       	call   c001bb10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c077:	6a 00                	push   0x0
c001c079:	56                   	push   esi
c001c07a:	57                   	push   edi
c001c07b:	55                   	push   ebp
c001c07c:	e8 07 fe ff ff       	call   c001be88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c081:	83 c4 20             	add    esp,0x20
c001c084:	6a 00                	push   0x0
c001c086:	56                   	push   esi
c001c087:	57                   	push   edi
c001c088:	55                   	push   ebp
c001c089:	e8 a4 fa ff ff       	call   c001bb32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c08e:	83 c4 10             	add    esp,0x10
c001c091:	84 c0                	test   al,al
c001c093:	79 27                	jns    c001c0bc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c095:	bb 01 00 00 00       	mov    ebx,0x1
c001c09a:	53                   	push   ebx
c001c09b:	56                   	push   esi
c001c09c:	57                   	push   edi
c001c09d:	55                   	push   ebp
c001c09e:	e8 6d fa ff ff       	call   c001bb10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c0a3:	83 c4 10             	add    esp,0x10
c001c0a6:	66 40                	inc    ax
c001c0a8:	74 0c                	je     c001c0b6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c0aa:	53                   	push   ebx
c001c0ab:	56                   	push   esi
c001c0ac:	57                   	push   edi
c001c0ad:	55                   	push   ebp
c001c0ae:	e8 d5 fd ff ff       	call   c001be88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	43                   	inc    ebx
c001c0b7:	83 fb 08             	cmp    ebx,0x8
c001c0ba:	75 de                	jne    c001c09a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c0bc:	83 c4 0c             	add    esp,0xc
c001c0bf:	5b                   	pop    ebx
c001c0c0:	5e                   	pop    esi
c001c0c1:	5f                   	pop    edi
c001c0c2:	5d                   	pop    ebp
c001c0c3:	c3                   	ret    

c001c0c4 <PCI::detect()>:
c001c0c4:	56                   	push   esi
c001c0c5:	53                   	push   ebx
c001c0c6:	53                   	push   ebx
c001c0c7:	31 db                	xor    ebx,ebx
c001c0c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c0cd:	6a 00                	push   0x0
c001c0cf:	6a 00                	push   0x0
c001c0d1:	6a 00                	push   0x0
c001c0d3:	56                   	push   esi
c001c0d4:	e8 59 fa ff ff       	call   c001bb32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c0d9:	83 c4 10             	add    esp,0x10
c001c0dc:	a8 80                	test   al,0x80
c001c0de:	75 21                	jne    c001c101 <PCI::detect()+0x3d>
c001c0e0:	51                   	push   ecx
c001c0e1:	51                   	push   ecx
c001c0e2:	6a 00                	push   0x0
c001c0e4:	56                   	push   esi
c001c0e5:	e8 08 fc ff ff       	call   c001bcf2 <PCI::checkBus(unsigned char)>
c001c0ea:	83 c4 10             	add    esp,0x10
c001c0ed:	eb 24                	jmp    c001c113 <PCI::detect()+0x4f>
c001c0ef:	52                   	push   edx
c001c0f0:	52                   	push   edx
c001c0f1:	53                   	push   ebx
c001c0f2:	43                   	inc    ebx
c001c0f3:	56                   	push   esi
c001c0f4:	e8 f9 fb ff ff       	call   c001bcf2 <PCI::checkBus(unsigned char)>
c001c0f9:	83 c4 10             	add    esp,0x10
c001c0fc:	83 fb 08             	cmp    ebx,0x8
c001c0ff:	74 12                	je     c001c113 <PCI::detect()+0x4f>
c001c101:	53                   	push   ebx
c001c102:	6a 00                	push   0x0
c001c104:	6a 00                	push   0x0
c001c106:	56                   	push   esi
c001c107:	e8 04 fa ff ff       	call   c001bb10 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c10c:	83 c4 10             	add    esp,0x10
c001c10f:	66 40                	inc    ax
c001c111:	74 dc                	je     c001c0ef <PCI::detect()+0x2b>
c001c113:	58                   	pop    eax
c001c114:	5b                   	pop    ebx
c001c115:	5e                   	pop    esi
c001c116:	c3                   	ret    
c001c117:	90                   	nop

c001c118 <IDE::close(int, int, void*)>:
c001c118:	83 c8 ff             	or     eax,0xffffffff
c001c11b:	c3                   	ret    

c001c11c <IDE::IDE()>:
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c123:	83 ec 08             	sub    esp,0x8
c001c126:	68 bc 2d 02 c0       	push   0xc0022dbc
c001c12b:	50                   	push   eax
c001c12c:	e8 99 47 ff ff       	call   c00108ca <HardDiskController::HardDiskController(char const*)>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	ba fc 2f 02 c0       	mov    edx,0xc0022ffc
c001c139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c13d:	89 10                	mov    DWORD PTR [eax],edx
c001c13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c143:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c14a:	90                   	nop
c001c14b:	83 c4 0c             	add    esp,0xc
c001c14e:	c3                   	ret    
c001c14f:	90                   	nop

c001c150 <IDE::prepareInterrupt(unsigned char)>:
c001c150:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c155:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c159:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c161:	c3                   	ret    

c001c162 <selectDrive(unsigned char, unsigned char)>:
c001c162:	c3                   	ret    
c001c163:	90                   	nop

c001c164 <IDE::getBase(unsigned char)>:
c001c164:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c16d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c175:	c3                   	ret    

c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c176:	55                   	push   ebp
c001c177:	57                   	push   edi
c001c178:	56                   	push   esi
c001c179:	53                   	push   ebx
c001c17a:	83 ec 1c             	sub    esp,0x1c
c001c17d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c181:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c185:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c189:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c18d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c190:	80 f9 03             	cmp    cl,0x3
c001c193:	77 51                	ja     c001c1e6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c195:	0f b6 f2             	movzx  esi,dl
c001c198:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c19c:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c19f:	0f b6 db             	movzx  ebx,bl
c001c1a2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c1a6:	83 ca 80             	or     edx,0xffffff80
c001c1a9:	0f b6 d2             	movzx  edx,dl
c001c1ac:	52                   	push   edx
c001c1ad:	6a 0c                	push   0xc
c001c1af:	56                   	push   esi
c001c1b0:	57                   	push   edi
c001c1b1:	e8 c0 ff ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1b6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c1bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c1bf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c1c3:	ee                   	out    dx,al
c001c1c4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c1c9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c1cd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c1d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c1d5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c1dd:	83 c4 2c             	add    esp,0x2c
c001c1e0:	5b                   	pop    ebx
c001c1e1:	5e                   	pop    esi
c001c1e2:	5f                   	pop    edi
c001c1e3:	5d                   	pop    ebp
c001c1e4:	eb 90                	jmp    c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1e6:	80 fb 07             	cmp    bl,0x7
c001c1e9:	77 12                	ja     c001c1fd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c1eb:	0f b6 d2             	movzx  edx,dl
c001c1ee:	0f b6 db             	movzx  ebx,bl
c001c1f1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c1f9:	89 da                	mov    edx,ebx
c001c1fb:	eb 2f                	jmp    c001c22c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c1fd:	80 fb 0d             	cmp    bl,0xd
c001c200:	77 13                	ja     c001c215 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c202:	0f b6 d2             	movzx  edx,dl
c001c205:	0f b6 db             	movzx  ebx,bl
c001c208:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c20f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c213:	eb 17                	jmp    c001c22c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c215:	80 fb 15             	cmp    bl,0x15
c001c218:	77 13                	ja     c001c22d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c21a:	0f b6 d2             	movzx  edx,dl
c001c21d:	0f b6 db             	movzx  ebx,bl
c001c220:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c228:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c22c:	ee                   	out    dx,al
c001c22d:	83 c4 1c             	add    esp,0x1c
c001c230:	5b                   	pop    ebx
c001c231:	5e                   	pop    esi
c001c232:	5f                   	pop    edi
c001c233:	5d                   	pop    ebp
c001c234:	c3                   	ret    
c001c235:	90                   	nop

c001c236 <IDE::read(unsigned char, unsigned char)>:
c001c236:	55                   	push   ebp
c001c237:	57                   	push   edi
c001c238:	56                   	push   esi
c001c239:	53                   	push   ebx
c001c23a:	83 ec 1c             	sub    esp,0x1c
c001c23d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c241:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c245:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c249:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c24c:	3c 03                	cmp    al,0x3
c001c24e:	77 43                	ja     c001c293 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c250:	0f b6 f2             	movzx  esi,dl
c001c253:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c256:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c25a:	83 c8 80             	or     eax,0xffffff80
c001c25d:	0f b6 c0             	movzx  eax,al
c001c260:	50                   	push   eax
c001c261:	6a 0c                	push   0xc
c001c263:	56                   	push   esi
c001c264:	57                   	push   edi
c001c265:	e8 0c ff ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c26a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c26f:	0f b6 c3             	movzx  eax,bl
c001c272:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c276:	ec                   	in     al,dx
c001c277:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c27c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c280:	52                   	push   edx
c001c281:	6a 0c                	push   0xc
c001c283:	56                   	push   esi
c001c284:	57                   	push   edi
c001c285:	e8 ec fe ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c28a:	83 c4 20             	add    esp,0x20
c001c28d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c291:	eb 49                	jmp    c001c2dc <IDE::read(unsigned char, unsigned char)+0xa6>
c001c293:	80 fb 07             	cmp    bl,0x7
c001c296:	77 12                	ja     c001c2aa <IDE::read(unsigned char, unsigned char)+0x74>
c001c298:	0f b6 d2             	movzx  edx,dl
c001c29b:	0f b6 c3             	movzx  eax,bl
c001c29e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c2a6:	89 c2                	mov    edx,eax
c001c2a8:	eb 31                	jmp    c001c2db <IDE::read(unsigned char, unsigned char)+0xa5>
c001c2aa:	80 fb 0d             	cmp    bl,0xd
c001c2ad:	77 13                	ja     c001c2c2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c2af:	0f b6 d2             	movzx  edx,dl
c001c2b2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c2b9:	0f b6 d3             	movzx  edx,bl
c001c2bc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c2c0:	eb 19                	jmp    c001c2db <IDE::read(unsigned char, unsigned char)+0xa5>
c001c2c2:	31 c0                	xor    eax,eax
c001c2c4:	80 fb 15             	cmp    bl,0x15
c001c2c7:	77 13                	ja     c001c2dc <IDE::read(unsigned char, unsigned char)+0xa6>
c001c2c9:	0f b6 d2             	movzx  edx,dl
c001c2cc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c2d4:	0f b6 d3             	movzx  edx,bl
c001c2d7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c2db:	ec                   	in     al,dx
c001c2dc:	83 c4 1c             	add    esp,0x1c
c001c2df:	5b                   	pop    ebx
c001c2e0:	5e                   	pop    esi
c001c2e1:	5f                   	pop    edi
c001c2e2:	5d                   	pop    ebp
c001c2e3:	c3                   	ret    

c001c2e4 <IDE::waitInterrupt(unsigned char)>:
c001c2e4:	57                   	push   edi
c001c2e5:	56                   	push   esi
c001c2e6:	31 f6                	xor    esi,esi
c001c2e8:	53                   	push   ebx
c001c2e9:	83 ec 10             	sub    esp,0x10
c001c2ec:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c2f0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c2f4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c2f8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c2fd:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c304:	84 db                	test   bl,bl
c001c306:	75 37                	jne    c001c33f <IDE::waitInterrupt(unsigned char)+0x5b>
c001c308:	52                   	push   edx
c001c309:	6a 0c                	push   0xc
c001c30b:	50                   	push   eax
c001c30c:	57                   	push   edi
c001c30d:	e8 24 ff ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c312:	83 c4 10             	add    esp,0x10
c001c315:	a8 01                	test   al,0x1
c001c317:	75 2e                	jne    c001c347 <IDE::waitInterrupt(unsigned char)+0x63>
c001c319:	f7 c6 04 00 00 00    	test   esi,0x4
c001c31f:	75 16                	jne    c001c337 <IDE::waitInterrupt(unsigned char)+0x53>
c001c321:	83 fe 32             	cmp    esi,0x32
c001c324:	7e 11                	jle    c001c337 <IDE::waitInterrupt(unsigned char)+0x53>
c001c326:	50                   	push   eax
c001c327:	50                   	push   eax
c001c328:	6a 00                	push   0x0
c001c32a:	68 80 96 98 00       	push   0x989680
c001c32f:	e8 25 c5 ff ff       	call   c0018859 <nanoSleep(unsigned long long)>
c001c334:	83 c4 10             	add    esp,0x10
c001c337:	83 fe 3c             	cmp    esi,0x3c
c001c33a:	74 0b                	je     c001c347 <IDE::waitInterrupt(unsigned char)+0x63>
c001c33c:	46                   	inc    esi
c001c33d:	eb b9                	jmp    c001c2f8 <IDE::waitInterrupt(unsigned char)+0x14>
c001c33f:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c347:	83 c4 10             	add    esp,0x10
c001c34a:	88 d8                	mov    al,bl
c001c34c:	5b                   	pop    ebx
c001c34d:	5e                   	pop    esi
c001c34e:	5f                   	pop    edi
c001c34f:	c3                   	ret    

c001c350 <ideChannel0IRQHandler(regs*, void*)>:
c001c350:	83 ec 10             	sub    esp,0x10
c001c353:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c357:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c35e:	6a 07                	push   0x7
c001c360:	6a 00                	push   0x0
c001c362:	50                   	push   eax
c001c363:	e8 ce fe ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c368:	83 c4 1c             	add    esp,0x1c
c001c36b:	c3                   	ret    

c001c36c <ideChannel1IRQHandler(regs*, void*)>:
c001c36c:	83 ec 10             	sub    esp,0x10
c001c36f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c373:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c37a:	6a 07                	push   0x7
c001c37c:	6a 01                	push   0x1
c001c37e:	50                   	push   eax
c001c37f:	e8 b2 fe ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c384:	83 c4 1c             	add    esp,0x1c
c001c387:	c3                   	ret    

c001c388 <IDE::enableIRQs(unsigned char, bool)>:
c001c388:	57                   	push   edi
c001c389:	56                   	push   esi
c001c38a:	be 04 00 00 00       	mov    esi,0x4
c001c38f:	53                   	push   ebx
c001c390:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c395:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c39a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c39e:	0f 94 c0             	sete   al
c001c3a1:	01 c0                	add    eax,eax
c001c3a3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c3aa:	0f b6 c0             	movzx  eax,al
c001c3ad:	50                   	push   eax
c001c3ae:	6a 0c                	push   0xc
c001c3b0:	57                   	push   edi
c001c3b1:	53                   	push   ebx
c001c3b2:	e8 bf fd ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	50                   	push   eax
c001c3bb:	6a 0c                	push   0xc
c001c3bd:	57                   	push   edi
c001c3be:	53                   	push   ebx
c001c3bf:	e8 72 fe ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	4e                   	dec    esi
c001c3c8:	75 f0                	jne    c001c3ba <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c3ca:	5b                   	pop    ebx
c001c3cb:	5e                   	pop    esi
c001c3cc:	5f                   	pop    edi
c001c3cd:	c3                   	ret    

c001c3ce <IDE::open(int, int, void*)>:
c001c3ce:	55                   	push   ebp
c001c3cf:	57                   	push   edi
c001c3d0:	56                   	push   esi
c001c3d1:	53                   	push   ebx
c001c3d2:	83 ec 1c             	sub    esp,0x1c
c001c3d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c3d9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c3e2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c3eb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c3f2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c3f9:	0f 85 b2 02 00 00    	jne    c001c6b1 <IDE::open(int, int, void*)+0x2e3>
c001c3ff:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c405:	88 04 24             	mov    BYTE PTR [esp],al
c001c408:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c40b:	83 e0 7f             	and    eax,0x7f
c001c40e:	83 f8 05             	cmp    eax,0x5
c001c411:	74 05                	je     c001c418 <IDE::open(int, int, void*)+0x4a>
c001c413:	83 f8 0f             	cmp    eax,0xf
c001c416:	75 32                	jne    c001c44a <IDE::open(int, int, void*)+0x7c>
c001c418:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c41e:	83 e0 fc             	and    eax,0xfffffffc
c001c421:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c428:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c42e:	83 e0 fc             	and    eax,0xfffffffc
c001c431:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c438:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c43e:	83 e0 fc             	and    eax,0xfffffffc
c001c441:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c448:	eb 14                	jmp    c001c45e <IDE::open(int, int, void*)+0x90>
c001c44a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c454:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c45e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c465:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c46c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c470:	89 c6                	mov    esi,eax
c001c472:	89 e8                	mov    eax,ebp
c001c474:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c479:	c1 e6 10             	shl    esi,0x10
c001c47c:	89 fa                	mov    edx,edi
c001c47e:	c1 e0 0b             	shl    eax,0xb
c001c481:	09 f0                	or     eax,esi
c001c483:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c48a:	c1 e6 08             	shl    esi,0x8
c001c48d:	09 c6                	or     esi,eax
c001c48f:	89 f0                	mov    eax,esi
c001c491:	0d 08 00 00 80       	or     eax,0x80000008
c001c496:	ef                   	out    dx,eax
c001c497:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c49c:	89 ca                	mov    edx,ecx
c001c49e:	ed                   	in     eax,dx
c001c49f:	c1 e8 10             	shr    eax,0x10
c001c4a2:	3d ff ff 00 00       	cmp    eax,0xffff
c001c4a7:	0f 84 f3 00 00 00    	je     c001c5a0 <IDE::open(int, int, void*)+0x1d2>
c001c4ad:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c4b3:	89 fa                	mov    edx,edi
c001c4b5:	89 f0                	mov    eax,esi
c001c4b7:	ef                   	out    dx,eax
c001c4b8:	b0 fe                	mov    al,0xfe
c001c4ba:	89 ca                	mov    edx,ecx
c001c4bc:	ee                   	out    dx,al
c001c4bd:	89 f0                	mov    eax,esi
c001c4bf:	89 fa                	mov    edx,edi
c001c4c1:	ef                   	out    dx,eax
c001c4c2:	89 ca                	mov    edx,ecx
c001c4c4:	ed                   	in     eax,dx
c001c4c5:	3c fe                	cmp    al,0xfe
c001c4c7:	0f 85 a9 00 00 00    	jne    c001c576 <IDE::open(int, int, void*)+0x1a8>
c001c4cd:	8b 15 08 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024008
c001c4d3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c4da:	74 33                	je     c001c50f <IDE::open(int, int, void*)+0x141>
c001c4dc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c4e2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c4e6:	40                   	inc    eax
c001c4e7:	83 ec 0c             	sub    esp,0xc
c001c4ea:	0f b6 c0             	movzx  eax,al
c001c4ed:	50                   	push   eax
c001c4ee:	55                   	push   ebp
c001c4ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4f3:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c4f9:	51                   	push   ecx
c001c4fa:	e8 1d 72 ff ff       	call   c001371c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c4ff:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c504:	83 c4 1c             	add    esp,0x1c
c001c507:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c50d:	eb 0a                	jmp    c001c519 <IDE::open(int, int, void*)+0x14b>
c001c50f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c519:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c520:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c527:	c1 e1 10             	shl    ecx,0x10
c001c52a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c52f:	c1 e0 08             	shl    eax,0x8
c001c532:	89 fa                	mov    edx,edi
c001c534:	09 c1                	or     ecx,eax
c001c536:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c53d:	c1 e0 0b             	shl    eax,0xb
c001c540:	09 c1                	or     ecx,eax
c001c542:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c548:	89 c8                	mov    eax,ecx
c001c54a:	ef                   	out    dx,eax
c001c54b:	be fc 0c 00 00       	mov    esi,0xcfc
c001c550:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c556:	89 f2                	mov    edx,esi
c001c558:	ee                   	out    dx,al
c001c559:	89 c8                	mov    eax,ecx
c001c55b:	89 fa                	mov    edx,edi
c001c55d:	ef                   	out    dx,eax
c001c55e:	89 f2                	mov    edx,esi
c001c560:	ed                   	in     eax,dx
c001c561:	0f b6 c0             	movzx  eax,al
c001c564:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c56a:	74 44                	je     c001c5b0 <IDE::open(int, int, void*)+0x1e2>
c001c56c:	83 ec 0c             	sub    esp,0xc
c001c56f:	68 d4 2d 02 c0       	push   0xc0022dd4
c001c574:	eb 32                	jmp    c001c5a8 <IDE::open(int, int, void*)+0x1da>
c001c576:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c57f:	75 15                	jne    c001c596 <IDE::open(int, int, void*)+0x1c8>
c001c581:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001c585:	74 06                	je     c001c58d <IDE::open(int, int, void*)+0x1bf>
c001c587:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001c58b:	75 09                	jne    c001c596 <IDE::open(int, int, void*)+0x1c8>
c001c58d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c594:	eb 1a                	jmp    c001c5b0 <IDE::open(int, int, void*)+0x1e2>
c001c596:	83 ec 0c             	sub    esp,0xc
c001c599:	68 dc 2d 02 c0       	push   0xc0022ddc
c001c59e:	eb 08                	jmp    c001c5a8 <IDE::open(int, int, void*)+0x1da>
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	68 0d 2e 02 c0       	push   0xc0022e0d
c001c5a8:	e8 45 8d ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c5b7:	79 1a                	jns    c001c5d3 <IDE::open(int, int, void*)+0x205>
c001c5b9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c5bf:	83 e0 fc             	and    eax,0xfffffffc
c001c5c2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c5c9:	83 c0 08             	add    eax,0x8
c001c5cc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c5d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c5d9:	89 c2                	mov    edx,eax
c001c5db:	83 e2 0f             	and    edx,0xf
c001c5de:	66 83 fa 08          	cmp    dx,0x8
c001c5e2:	75 0a                	jne    c001c5ee <IDE::open(int, int, void*)+0x220>
c001c5e4:	83 e8 02             	sub    eax,0x2
c001c5e7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c5ee:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c5f4:	89 c2                	mov    edx,eax
c001c5f6:	83 e2 0f             	and    edx,0xf
c001c5f9:	66 83 fa 08          	cmp    dx,0x8
c001c5fd:	75 0a                	jne    c001c609 <IDE::open(int, int, void*)+0x23b>
c001c5ff:	83 e8 02             	sub    eax,0x2
c001c602:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c609:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c610:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c617:	89 d0                	mov    eax,edx
c001c619:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c61c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c620:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c624:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c627:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c62c:	0f b6 c9             	movzx  ecx,cl
c001c62f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c636:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c639:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c63d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c641:	8d 50 02             	lea    edx,[eax+0x2]
c001c644:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c649:	0f b6 d2             	movzx  edx,dl
c001c64c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c652:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c655:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c659:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c65d:	8d 48 03             	lea    ecx,[eax+0x3]
c001c660:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c665:	0f b6 c9             	movzx  ecx,cl
c001c668:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c66e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c671:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c675:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c679:	8d 50 04             	lea    edx,[eax+0x4]
c001c67c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c682:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c687:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c68e:	66 85 f6             	test   si,si
c001c691:	74 3e                	je     c001c6d1 <IDE::open(int, int, void*)+0x303>
c001c693:	0f b6 d2             	movzx  edx,dl
c001c696:	83 c0 05             	add    eax,0x5
c001c699:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c69c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c6a0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c6a4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c6aa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c6af:	eb 20                	jmp    c001c6d1 <IDE::open(int, int, void*)+0x303>
c001c6b1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c6bb:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c6c5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c6cc:	e9 02 ff ff ff       	jmp    c001c5d3 <IDE::open(int, int, void*)+0x205>
c001c6d1:	52                   	push   edx
c001c6d2:	52                   	push   edx
c001c6d3:	6a 00                	push   0x0
c001c6d5:	53                   	push   ebx
c001c6d6:	e8 75 fa ff ff       	call   c001c150 <IDE::prepareInterrupt(unsigned char)>
c001c6db:	59                   	pop    ecx
c001c6dc:	5e                   	pop    esi
c001c6dd:	6a 01                	push   0x1
c001c6df:	53                   	push   ebx
c001c6e0:	e8 6b fa ff ff       	call   c001c150 <IDE::prepareInterrupt(unsigned char)>
c001c6e5:	83 c4 0c             	add    esp,0xc
c001c6e8:	6a 00                	push   0x0
c001c6ea:	6a 00                	push   0x0
c001c6ec:	53                   	push   ebx
c001c6ed:	e8 96 fc ff ff       	call   c001c388 <IDE::enableIRQs(unsigned char, bool)>
c001c6f2:	83 c4 0c             	add    esp,0xc
c001c6f5:	6a 00                	push   0x0
c001c6f7:	6a 01                	push   0x1
c001c6f9:	53                   	push   ebx
c001c6fa:	e8 89 fc ff ff       	call   c001c388 <IDE::enableIRQs(unsigned char, bool)>
c001c6ff:	83 c4 10             	add    esp,0x10
c001c702:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c709:	74 40                	je     c001c74b <IDE::open(int, int, void*)+0x37d>
c001c70b:	83 ec 0c             	sub    esp,0xc
c001c70e:	68 37 2e 02 c0       	push   0xc0022e37
c001c713:	e8 1b 2a ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001c718:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c71b:	6a 01                	push   0x1
c001c71d:	68 50 c3 01 c0       	push   0xc001c350
c001c722:	6a 0e                	push   0xe
c001c724:	53                   	push   ebx
c001c725:	e8 72 3d ff ff       	call   c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c72a:	83 c4 14             	add    esp,0x14
c001c72d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c733:	53                   	push   ebx
c001c734:	6a 01                	push   0x1
c001c736:	68 6c c3 01 c0       	push   0xc001c36c
c001c73b:	6a 0f                	push   0xf
c001c73d:	53                   	push   ebx
c001c73e:	e8 59 3d ff ff       	call   c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c743:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c749:	eb 4a                	jmp    c001c795 <IDE::open(int, int, void*)+0x3c7>
c001c74b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c755:	50                   	push   eax
c001c756:	6a 0f                	push   0xf
c001c758:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c75e:	68 53 2e 02 c0       	push   0xc0022e53
c001c763:	e8 cb 29 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001c768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c76b:	6a 00                	push   0x0
c001c76d:	68 50 c3 01 c0       	push   0xc001c350
c001c772:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c778:	53                   	push   ebx
c001c779:	e8 1e 3d ff ff       	call   c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c77e:	83 c4 14             	add    esp,0x14
c001c781:	53                   	push   ebx
c001c782:	6a 00                	push   0x0
c001c784:	68 6c c3 01 c0       	push   0xc001c36c
c001c789:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c78f:	53                   	push   ebx
c001c790:	e8 07 3d ff ff       	call   c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c795:	83 c4 20             	add    esp,0x20
c001c798:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c79a:	83 ec 0c             	sub    esp,0xc
c001c79d:	53                   	push   ebx
c001c79e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c7a1:	83 c4 0c             	add    esp,0xc
c001c7a4:	6a 07                	push   0x7
c001c7a6:	6a 00                	push   0x0
c001c7a8:	53                   	push   ebx
c001c7a9:	e8 88 fa ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c7ae:	83 c4 0c             	add    esp,0xc
c001c7b1:	6a 07                	push   0x7
c001c7b3:	6a 01                	push   0x1
c001c7b5:	53                   	push   ebx
c001c7b6:	e8 7b fa ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c7bb:	83 c4 0c             	add    esp,0xc
c001c7be:	6a 01                	push   0x1
c001c7c0:	6a 00                	push   0x0
c001c7c2:	53                   	push   ebx
c001c7c3:	e8 c0 fb ff ff       	call   c001c388 <IDE::enableIRQs(unsigned char, bool)>
c001c7c8:	83 c4 0c             	add    esp,0xc
c001c7cb:	6a 01                	push   0x1
c001c7cd:	6a 01                	push   0x1
c001c7cf:	53                   	push   ebx
c001c7d0:	e8 b3 fb ff ff       	call   c001c388 <IDE::enableIRQs(unsigned char, bool)>
c001c7d5:	83 c4 2c             	add    esp,0x2c
c001c7d8:	31 c0                	xor    eax,eax
c001c7da:	5b                   	pop    ebx
c001c7db:	5e                   	pop    esi
c001c7dc:	5f                   	pop    edi
c001c7dd:	5d                   	pop    ebp
c001c7de:	c3                   	ret    
c001c7df:	90                   	nop

c001c7e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c7e0:	55                   	push   ebp
c001c7e1:	57                   	push   edi
c001c7e2:	56                   	push   esi
c001c7e3:	53                   	push   ebx
c001c7e4:	83 ec 1c             	sub    esp,0x1c
c001c7e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c7ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c7f3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c7f7:	8d 50 f8             	lea    edx,[eax-0x8]
c001c7fa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c7fe:	80 fa 03             	cmp    dl,0x3
c001c801:	77 5d                	ja     c001c860 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c803:	0f b6 db             	movzx  ebx,bl
c001c806:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c80a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c80e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c811:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c815:	83 ca 80             	or     edx,0xffffff80
c001c818:	0f b6 d2             	movzx  edx,dl
c001c81b:	52                   	push   edx
c001c81c:	6a 0c                	push   0xc
c001c81e:	53                   	push   ebx
c001c81f:	56                   	push   esi
c001c820:	e8 51 f9 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c825:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c829:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c82e:	0f b6 c0             	movzx  eax,al
c001c831:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c835:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c839:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c83b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c840:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c844:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c848:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c84c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c854:	83 c4 2c             	add    esp,0x2c
c001c857:	5b                   	pop    ebx
c001c858:	5e                   	pop    esi
c001c859:	5f                   	pop    edi
c001c85a:	5d                   	pop    ebp
c001c85b:	e9 16 f9 ff ff       	jmp    c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c860:	3c 07                	cmp    al,0x7
c001c862:	77 10                	ja     c001c874 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c864:	0f b6 db             	movzx  ebx,bl
c001c867:	0f b6 d0             	movzx  edx,al
c001c86a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c872:	eb 2d                	jmp    c001c8a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c874:	3c 0d                	cmp    al,0xd
c001c876:	77 13                	ja     c001c88b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c878:	0f b6 db             	movzx  ebx,bl
c001c87b:	0f b6 c0             	movzx  eax,al
c001c87e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c885:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c889:	eb 16                	jmp    c001c8a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c88b:	3c 15                	cmp    al,0x15
c001c88d:	77 14                	ja     c001c8a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c88f:	0f b6 db             	movzx  ebx,bl
c001c892:	0f b6 c0             	movzx  eax,al
c001c895:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c89d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c8a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c8a3:	83 c4 1c             	add    esp,0x1c
c001c8a6:	5b                   	pop    ebx
c001c8a7:	5e                   	pop    esi
c001c8a8:	5f                   	pop    edi
c001c8a9:	5d                   	pop    ebp
c001c8aa:	c3                   	ret    
c001c8ab:	90                   	nop

c001c8ac <IDE::detect()>:
c001c8ac:	55                   	push   ebp
c001c8ad:	57                   	push   edi
c001c8ae:	56                   	push   esi
c001c8af:	53                   	push   ebx
c001c8b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c8b6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c8bd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c8c4:	0f 85 c0 02 00 00    	jne    c001cb8a <IDE::detect()+0x2de>
c001c8ca:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c8d1:	31 f6                	xor    esi,esi
c001c8d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8db:	31 ed                	xor    ebp,ebp
c001c8dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8e1:	c1 e0 06             	shl    eax,0x6
c001c8e4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c8ec:	89 e8                	mov    eax,ebp
c001c8ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c8f2:	c1 e0 04             	shl    eax,0x4
c001c8f5:	83 c8 a0             	or     eax,0xffffffa0
c001c8f8:	0f b6 c0             	movzx  eax,al
c001c8fb:	50                   	push   eax
c001c8fc:	6a 06                	push   0x6
c001c8fe:	56                   	push   esi
c001c8ff:	53                   	push   ebx
c001c900:	e8 71 f8 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c905:	83 c4 0c             	add    esp,0xc
c001c908:	6a 0c                	push   0xc
c001c90a:	56                   	push   esi
c001c90b:	53                   	push   ebx
c001c90c:	e8 25 f9 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c911:	83 c4 0c             	add    esp,0xc
c001c914:	6a 0c                	push   0xc
c001c916:	56                   	push   esi
c001c917:	53                   	push   ebx
c001c918:	e8 19 f9 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c91d:	83 c4 0c             	add    esp,0xc
c001c920:	6a 0c                	push   0xc
c001c922:	56                   	push   esi
c001c923:	53                   	push   ebx
c001c924:	e8 0d f9 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c929:	83 c4 0c             	add    esp,0xc
c001c92c:	6a 0c                	push   0xc
c001c92e:	56                   	push   esi
c001c92f:	53                   	push   ebx
c001c930:	e8 01 f9 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c935:	68 ec 00 00 00       	push   0xec
c001c93a:	6a 07                	push   0x7
c001c93c:	56                   	push   esi
c001c93d:	53                   	push   ebx
c001c93e:	e8 33 f8 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c943:	83 c4 1c             	add    esp,0x1c
c001c946:	6a 0c                	push   0xc
c001c948:	56                   	push   esi
c001c949:	53                   	push   ebx
c001c94a:	e8 e7 f8 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c94f:	83 c4 0c             	add    esp,0xc
c001c952:	6a 0c                	push   0xc
c001c954:	56                   	push   esi
c001c955:	53                   	push   ebx
c001c956:	e8 db f8 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c95b:	83 c4 0c             	add    esp,0xc
c001c95e:	6a 0c                	push   0xc
c001c960:	56                   	push   esi
c001c961:	53                   	push   ebx
c001c962:	e8 cf f8 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c967:	83 c4 0c             	add    esp,0xc
c001c96a:	6a 0c                	push   0xc
c001c96c:	56                   	push   esi
c001c96d:	53                   	push   ebx
c001c96e:	e8 c3 f8 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c973:	83 c4 0c             	add    esp,0xc
c001c976:	6a 0c                	push   0xc
c001c978:	56                   	push   esi
c001c979:	53                   	push   ebx
c001c97a:	e8 b7 f8 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c97f:	83 c4 10             	add    esp,0x10
c001c982:	84 c0                	test   al,al
c001c984:	0f 84 8b 01 00 00    	je     c001cb15 <IDE::detect()+0x269>
c001c98a:	31 ff                	xor    edi,edi
c001c98c:	50                   	push   eax
c001c98d:	6a 0c                	push   0xc
c001c98f:	56                   	push   esi
c001c990:	53                   	push   ebx
c001c991:	e8 a0 f8 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001c996:	83 c4 10             	add    esp,0x10
c001c999:	a8 01                	test   al,0x1
c001c99b:	0f 85 8e 01 00 00    	jne    c001cb2f <IDE::detect()+0x283>
c001c9a1:	84 c0                	test   al,al
c001c9a3:	78 04                	js     c001c9a9 <IDE::detect()+0xfd>
c001c9a5:	a8 08                	test   al,0x8
c001c9a7:	75 27                	jne    c001c9d0 <IDE::detect()+0x124>
c001c9a9:	47                   	inc    edi
c001c9aa:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c9b0:	7e da                	jle    c001c98c <IDE::detect()+0xe0>
c001c9b2:	50                   	push   eax
c001c9b3:	50                   	push   eax
c001c9b4:	6a 00                	push   0x0
c001c9b6:	68 40 4b 4c 00       	push   0x4c4b40
c001c9bb:	e8 99 be ff ff       	call   c0018859 <nanoSleep(unsigned long long)>
c001c9c0:	83 c4 10             	add    esp,0x10
c001c9c3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c9c9:	75 c1                	jne    c001c98c <IDE::detect()+0xe0>
c001c9cb:	e9 5f 01 00 00       	jmp    c001cb2f <IDE::detect()+0x283>
c001c9d0:	31 c9                	xor    ecx,ecx
c001c9d2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c9d6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c9da:	83 ec 0c             	sub    esp,0xc
c001c9dd:	68 80 00 00 00       	push   0x80
c001c9e2:	57                   	push   edi
c001c9e3:	6a 00                	push   0x0
c001c9e5:	56                   	push   esi
c001c9e6:	53                   	push   ebx
c001c9e7:	e8 f4 fd ff ff       	call   c001c7e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c9ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c9f0:	c1 e0 06             	shl    eax,0x6
c001c9f3:	01 d8                	add    eax,ebx
c001c9f5:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c9fa:	89 d1                	mov    ecx,edx
c001c9fc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ca03:	89 f2                	mov    edx,esi
c001ca05:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ca0c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ca12:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ca16:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ca1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ca20:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ca27:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ca2f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ca36:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ca3e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ca44:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ca4b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ca51:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ca55:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ca59:	83 c4 20             	add    esp,0x20
c001ca5c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ca5f:	83 c7 02             	add    edi,0x2
c001ca62:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001ca68:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ca6b:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001ca71:	83 c0 02             	add    eax,0x2
c001ca74:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001ca78:	75 e2                	jne    c001ca5c <IDE::detect()+0x1b0>
c001ca7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7e:	c1 e0 06             	shl    eax,0x6
c001ca81:	01 d8                	add    eax,ebx
c001ca83:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ca89:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ca90:	66 c1 ea 09          	shr    dx,0x9
c001ca94:	83 e2 01             	and    edx,0x1
c001ca97:	84 c9                	test   cl,cl
c001ca99:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ca9f:	75 2f                	jne    c001cad0 <IDE::detect()+0x224>
c001caa1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001caa7:	85 c0                	test   eax,eax
c001caa9:	74 66                	je     c001cb11 <IDE::detect()+0x265>
c001caab:	50                   	push   eax
c001caac:	55                   	push   ebp
c001caad:	56                   	push   esi
c001caae:	68 6f 2e 02 c0       	push   0xc0022e6f
c001cab3:	e8 7b 26 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cab8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cabf:	e8 3a 25 ff ff       	call   c000effe <operator new(unsigned long)>
c001cac4:	89 c7                	mov    edi,eax
c001cac6:	89 04 24             	mov    DWORD PTR [esp],eax
c001cac9:	e8 f4 02 00 00       	call   c001cdc2 <ATA::ATA()>
c001cace:	eb 28                	jmp    c001caf8 <IDE::detect()+0x24c>
c001cad0:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cad6:	55                   	push   ebp
c001cad7:	56                   	push   esi
c001cad8:	68 9e 2e 02 c0       	push   0xc0022e9e
c001cadd:	e8 51 26 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cae2:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cae9:	e8 10 25 ff ff       	call   c000effe <operator new(unsigned long)>
c001caee:	89 c7                	mov    edi,eax
c001caf0:	89 04 24             	mov    DWORD PTR [esp],eax
c001caf3:	e8 1e 09 00 00       	call   c001d416 <ATAPI::ATAPI()>
c001caf8:	5a                   	pop    edx
c001caf9:	59                   	pop    ecx
c001cafa:	57                   	push   edi
c001cafb:	53                   	push   ebx
c001cafc:	e8 47 3a ff ff       	call   c0010548 <Device::addChild(Device*)>
c001cb01:	8b 07                	mov    eax,DWORD PTR [edi]
c001cb03:	53                   	push   ebx
c001cb04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb08:	6a 00                	push   0x0
c001cb0a:	57                   	push   edi
c001cb0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb0e:	83 c4 20             	add    esp,0x20
c001cb11:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001cb15:	4d                   	dec    ebp
c001cb16:	74 0a                	je     c001cb22 <IDE::detect()+0x276>
c001cb18:	bd 01 00 00 00       	mov    ebp,0x1
c001cb1d:	e9 bb fd ff ff       	jmp    c001c8dd <IDE::detect()+0x31>
c001cb22:	4e                   	dec    esi
c001cb23:	74 65                	je     c001cb8a <IDE::detect()+0x2de>
c001cb25:	be 01 00 00 00       	mov    esi,0x1
c001cb2a:	e9 ac fd ff ff       	jmp    c001c8db <IDE::detect()+0x2f>
c001cb2f:	50                   	push   eax
c001cb30:	6a 04                	push   0x4
c001cb32:	56                   	push   esi
c001cb33:	53                   	push   ebx
c001cb34:	e8 fd f6 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001cb39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cb3d:	83 c4 0c             	add    esp,0xc
c001cb40:	6a 05                	push   0x5
c001cb42:	56                   	push   esi
c001cb43:	53                   	push   ebx
c001cb44:	e8 ed f6 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001cb50:	80 fa 14             	cmp    dl,0x14
c001cb53:	74 2f                	je     c001cb84 <IDE::detect()+0x2d8>
c001cb55:	80 fa 69             	cmp    dl,0x69
c001cb58:	75 bb                	jne    c001cb15 <IDE::detect()+0x269>
c001cb5a:	3c 96                	cmp    al,0x96
c001cb5c:	75 b7                	jne    c001cb15 <IDE::detect()+0x269>
c001cb5e:	68 a1 00 00 00       	push   0xa1
c001cb63:	6a 07                	push   0x7
c001cb65:	56                   	push   esi
c001cb66:	53                   	push   ebx
c001cb67:	e8 0a f6 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb6c:	5f                   	pop    edi
c001cb6d:	58                   	pop    eax
c001cb6e:	6a 00                	push   0x0
c001cb70:	68 40 42 0f 00       	push   0xf4240
c001cb75:	e8 df bc ff ff       	call   c0018859 <nanoSleep(unsigned long long)>
c001cb7a:	83 c4 10             	add    esp,0x10
c001cb7d:	b1 01                	mov    cl,0x1
c001cb7f:	e9 4e fe ff ff       	jmp    c001c9d2 <IDE::detect()+0x126>
c001cb84:	3c eb                	cmp    al,0xeb
c001cb86:	75 cd                	jne    c001cb55 <IDE::detect()+0x2a9>
c001cb88:	eb d4                	jmp    c001cb5e <IDE::detect()+0x2b2>
c001cb8a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cb90:	5b                   	pop    ebx
c001cb91:	5e                   	pop    esi
c001cb92:	5f                   	pop    edi
c001cb93:	5d                   	pop    ebp
c001cb94:	c3                   	ret    
c001cb95:	90                   	nop

c001cb96 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001cb96:	55                   	push   ebp
c001cb97:	57                   	push   edi
c001cb98:	56                   	push   esi
c001cb99:	53                   	push   ebx
c001cb9a:	83 ec 1c             	sub    esp,0x1c
c001cb9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cba1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cba5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cba9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001cbad:	88 c3                	mov    bl,al
c001cbaf:	84 c0                	test   al,al
c001cbb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbb5:	0f 84 67 01 00 00    	je     c001cd22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001cbbb:	83 ec 0c             	sub    esp,0xc
c001cbbe:	68 cf 2e 02 c0       	push   0xc0022ecf
c001cbc3:	e8 6b 25 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cbc8:	83 c4 10             	add    esp,0x10
c001cbcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbcf:	3c 01                	cmp    al,0x1
c001cbd1:	75 17                	jne    c001cbea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001cbd3:	83 ec 0c             	sub    esp,0xc
c001cbd6:	b3 13                	mov    bl,0x13
c001cbd8:	68 db 2e 02 c0       	push   0xc0022edb
c001cbdd:	e8 51 25 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cbe2:	83 c4 10             	add    esp,0x10
c001cbe5:	e9 25 01 00 00       	jmp    c001cd0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cbea:	3c 02                	cmp    al,0x2
c001cbec:	0f 85 ef 00 00 00    	jne    c001cce1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001cbf2:	01 f6                	add    esi,esi
c001cbf4:	52                   	push   edx
c001cbf5:	09 ee                	or     esi,ebp
c001cbf7:	6a 01                	push   0x1
c001cbf9:	89 f0                	mov    eax,esi
c001cbfb:	0f b6 f0             	movzx  esi,al
c001cbfe:	c1 e6 06             	shl    esi,0x6
c001cc01:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001cc09:	50                   	push   eax
c001cc0a:	57                   	push   edi
c001cc0b:	e8 26 f6 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001cc10:	83 c4 10             	add    esp,0x10
c001cc13:	89 c6                	mov    esi,eax
c001cc15:	a8 01                	test   al,0x1
c001cc17:	74 12                	je     c001cc2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001cc19:	83 ec 0c             	sub    esp,0xc
c001cc1c:	b3 07                	mov    bl,0x7
c001cc1e:	68 f0 2e 02 c0       	push   0xc0022ef0
c001cc23:	e8 0b 25 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cc28:	83 c4 10             	add    esp,0x10
c001cc2b:	f7 c6 02 00 00 00    	test   esi,0x2
c001cc31:	74 12                	je     c001cc45 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001cc33:	83 ec 0c             	sub    esp,0xc
c001cc36:	b3 03                	mov    bl,0x3
c001cc38:	68 0e 2f 02 c0       	push   0xc0022f0e
c001cc3d:	e8 f1 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cc42:	83 c4 10             	add    esp,0x10
c001cc45:	f7 c6 04 00 00 00    	test   esi,0x4
c001cc4b:	74 12                	je     c001cc5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001cc4d:	83 ec 0c             	sub    esp,0xc
c001cc50:	b3 14                	mov    bl,0x14
c001cc52:	68 2e 2f 02 c0       	push   0xc0022f2e
c001cc57:	e8 d7 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cc5c:	83 c4 10             	add    esp,0x10
c001cc5f:	f7 c6 08 00 00 00    	test   esi,0x8
c001cc65:	74 12                	je     c001cc79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001cc67:	83 ec 0c             	sub    esp,0xc
c001cc6a:	b3 03                	mov    bl,0x3
c001cc6c:	68 0e 2f 02 c0       	push   0xc0022f0e
c001cc71:	e8 bd 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	f7 c6 10 00 00 00    	test   esi,0x10
c001cc7f:	74 12                	je     c001cc93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001cc81:	83 ec 0c             	sub    esp,0xc
c001cc84:	b3 15                	mov    bl,0x15
c001cc86:	68 46 2f 02 c0       	push   0xc0022f46
c001cc8b:	e8 a3 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	f7 c6 20 00 00 00    	test   esi,0x20
c001cc99:	74 12                	je     c001ccad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	b3 03                	mov    bl,0x3
c001cca0:	68 0e 2f 02 c0       	push   0xc0022f0e
c001cca5:	e8 89 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001ccaa:	83 c4 10             	add    esp,0x10
c001ccad:	f7 c6 40 00 00 00    	test   esi,0x40
c001ccb3:	74 12                	je     c001ccc7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	b3 16                	mov    bl,0x16
c001ccba:	68 60 2f 02 c0       	push   0xc0022f60
c001ccbf:	e8 6f 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001ccc4:	83 c4 10             	add    esp,0x10
c001ccc7:	89 f0                	mov    eax,esi
c001ccc9:	84 c0                	test   al,al
c001cccb:	79 42                	jns    c001cd0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cccd:	83 ec 0c             	sub    esp,0xc
c001ccd0:	b3 0d                	mov    bl,0xd
c001ccd2:	68 81 2f 02 c0       	push   0xc0022f81
c001ccd7:	e8 57 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	eb 2e                	jmp    c001cd0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cce1:	3c 03                	cmp    al,0x3
c001cce3:	75 14                	jne    c001ccf9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001cce5:	83 ec 0c             	sub    esp,0xc
c001cce8:	b3 17                	mov    bl,0x17
c001ccea:	68 95 2f 02 c0       	push   0xc0022f95
c001ccef:	e8 3f 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	eb 16                	jmp    c001cd0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001ccf9:	3c 04                	cmp    al,0x4
c001ccfb:	75 12                	jne    c001cd0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001ccfd:	83 ec 0c             	sub    esp,0xc
c001cd00:	b3 08                	mov    bl,0x8
c001cd02:	68 ab 2f 02 c0       	push   0xc0022fab
c001cd07:	e8 27 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cd0c:	83 c4 10             	add    esp,0x10
c001cd0f:	50                   	push   eax
c001cd10:	50                   	push   eax
c001cd11:	0f b6 c3             	movzx  eax,bl
c001cd14:	50                   	push   eax
c001cd15:	68 c3 2f 02 c0       	push   0xc0022fc3
c001cd1a:	e8 14 24 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 c4 1c             	add    esp,0x1c
c001cd25:	88 d8                	mov    al,bl
c001cd27:	5b                   	pop    ebx
c001cd28:	5e                   	pop    esi
c001cd29:	5f                   	pop    edi
c001cd2a:	5d                   	pop    ebp
c001cd2b:	c3                   	ret    

c001cd2c <IDE::polling(unsigned char, unsigned int)>:
c001cd2c:	55                   	push   ebp
c001cd2d:	bd 04 00 00 00       	mov    ebp,0x4
c001cd32:	57                   	push   edi
c001cd33:	56                   	push   esi
c001cd34:	53                   	push   ebx
c001cd35:	83 ec 0c             	sub    esp,0xc
c001cd38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cd3c:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001cd40:	52                   	push   edx
c001cd41:	6a 0c                	push   0xc
c001cd43:	0f b6 f3             	movzx  esi,bl
c001cd46:	56                   	push   esi
c001cd47:	57                   	push   edi
c001cd48:	e8 e9 f4 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	4d                   	dec    ebp
c001cd51:	75 ed                	jne    c001cd40 <IDE::polling(unsigned char, unsigned int)+0x14>
c001cd53:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cd58:	50                   	push   eax
c001cd59:	6a 0c                	push   0xc
c001cd5b:	56                   	push   esi
c001cd5c:	57                   	push   edi
c001cd5d:	e8 d4 f4 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001cd62:	83 c4 10             	add    esp,0x10
c001cd65:	a8 01                	test   al,0x1
c001cd67:	74 12                	je     c001cd7b <IDE::polling(unsigned char, unsigned int)+0x4f>
c001cd69:	83 ec 0c             	sub    esp,0xc
c001cd6c:	68 dd 2f 02 c0       	push   0xc0022fdd
c001cd71:	e8 bd 23 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001cd76:	83 c4 10             	add    esp,0x10
c001cd79:	eb 17                	jmp    c001cd92 <IDE::polling(unsigned char, unsigned int)+0x66>
c001cd7b:	a8 20                	test   al,0x20
c001cd7d:	75 0f                	jne    c001cd8e <IDE::polling(unsigned char, unsigned int)+0x62>
c001cd7f:	4b                   	dec    ebx
c001cd80:	74 10                	je     c001cd92 <IDE::polling(unsigned char, unsigned int)+0x66>
c001cd82:	84 c0                	test   al,al
c001cd84:	78 d2                	js     c001cd58 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001cd86:	a8 08                	test   al,0x8
c001cd88:	74 ce                	je     c001cd58 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001cd8a:	31 c0                	xor    eax,eax
c001cd8c:	eb 06                	jmp    c001cd94 <IDE::polling(unsigned char, unsigned int)+0x68>
c001cd8e:	b0 01                	mov    al,0x1
c001cd90:	eb 02                	jmp    c001cd94 <IDE::polling(unsigned char, unsigned int)+0x68>
c001cd92:	b0 02                	mov    al,0x2
c001cd94:	83 c4 0c             	add    esp,0xc
c001cd97:	5b                   	pop    ebx
c001cd98:	5e                   	pop    esi
c001cd99:	5f                   	pop    edi
c001cd9a:	5d                   	pop    ebp
c001cd9b:	c3                   	ret    

c001cd9c <ATA::close(int, int, void*)>:
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cda9:	85 c0                	test   eax,eax
c001cdab:	74 0c                	je     c001cdb9 <ATA::close(int, int, void*)+0x1d>
c001cdad:	83 ec 0c             	sub    esp,0xc
c001cdb0:	8b 10                	mov    edx,DWORD PTR [eax]
c001cdb2:	50                   	push   eax
c001cdb3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cdb6:	83 c4 10             	add    esp,0x10
c001cdb9:	31 c0                	xor    eax,eax
c001cdbb:	83 c4 0c             	add    esp,0xc
c001cdbe:	c3                   	ret    
c001cdbf:	90                   	nop

c001cdc0 <ATA::powerSaving(PowerSavingLevel)>:
c001cdc0:	c3                   	ret    
c001cdc1:	90                   	nop

c001cdc2 <ATA::ATA()>:
c001cdc2:	83 ec 0c             	sub    esp,0xc
c001cdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc9:	83 ec 04             	sub    esp,0x4
c001cdcc:	68 00 02 00 00       	push   0x200
c001cdd1:	68 20 30 02 c0       	push   0xc0023020
c001cdd6:	50                   	push   eax
c001cdd7:	e8 72 3b ff ff       	call   c001094e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cddc:	83 c4 10             	add    esp,0x10
c001cddf:	ba 4c 30 02 c0       	mov    edx,0xc002304c
c001cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde8:	89 10                	mov    DWORD PTR [eax],edx
c001cdea:	90                   	nop
c001cdeb:	83 c4 0c             	add    esp,0xc
c001cdee:	c3                   	ret    
c001cdef:	90                   	nop

c001cdf0 <ATA::flush(bool)>:
c001cdf0:	53                   	push   ebx
c001cdf1:	83 ec 08             	sub    esp,0x8
c001cdf4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001cdf9:	19 c0                	sbb    eax,eax
c001cdfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdff:	83 e0 fd             	and    eax,0xfffffffd
c001ce02:	05 ea 00 00 00       	add    eax,0xea
c001ce07:	50                   	push   eax
c001ce08:	6a 07                	push   0x7
c001ce0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce11:	50                   	push   eax
c001ce12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce18:	e8 59 f3 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce1d:	83 c4 0c             	add    esp,0xc
c001ce20:	6a 00                	push   0x0
c001ce22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce29:	50                   	push   eax
c001ce2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce30:	e8 f7 fe ff ff       	call   c001cd2c <IDE::polling(unsigned char, unsigned int)>
c001ce35:	83 c4 18             	add    esp,0x18
c001ce38:	5b                   	pop    ebx
c001ce39:	c3                   	ret    

c001ce3a <ATA::readyForCommand()>:
c001ce3a:	56                   	push   esi
c001ce3b:	53                   	push   ebx
c001ce3c:	31 db                	xor    ebx,ebx
c001ce3e:	50                   	push   eax
c001ce3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce43:	50                   	push   eax
c001ce44:	6a 0c                	push   0xc
c001ce46:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce4d:	50                   	push   eax
c001ce4e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce54:	e8 dd f3 ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001ce59:	83 c4 10             	add    esp,0x10
c001ce5c:	a8 88                	test   al,0x88
c001ce5e:	74 23                	je     c001ce83 <ATA::readyForCommand()+0x49>
c001ce60:	43                   	inc    ebx
c001ce61:	83 fb 63             	cmp    ebx,0x63
c001ce64:	7e dd                	jle    c001ce43 <ATA::readyForCommand()+0x9>
c001ce66:	51                   	push   ecx
c001ce67:	51                   	push   ecx
c001ce68:	6a 00                	push   0x0
c001ce6a:	68 40 42 0f 00       	push   0xf4240
c001ce6f:	e8 e5 b9 ff ff       	call   c0018859 <nanoSleep(unsigned long long)>
c001ce74:	83 c4 10             	add    esp,0x10
c001ce77:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce7d:	75 c4                	jne    c001ce43 <ATA::readyForCommand()+0x9>
c001ce7f:	31 c0                	xor    eax,eax
c001ce81:	eb 02                	jmp    c001ce85 <ATA::readyForCommand()+0x4b>
c001ce83:	b0 01                	mov    al,0x1
c001ce85:	5a                   	pop    edx
c001ce86:	5b                   	pop    ebx
c001ce87:	5e                   	pop    esi
c001ce88:	c3                   	ret    
c001ce89:	90                   	nop

c001ce8a <ATA::access(unsigned long long, int, void*, bool)>:
c001ce8a:	55                   	push   ebp
c001ce8b:	57                   	push   edi
c001ce8c:	56                   	push   esi
c001ce8d:	53                   	push   ebx
c001ce8e:	83 ec 2c             	sub    esp,0x2c
c001ce91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ce95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce99:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce9c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cea0:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cea3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cea7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ceab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ceb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ceb5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cebb:	c1 e0 06             	shl    eax,0x6
c001cebe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001cec2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ceca:	74 5d                	je     c001cf29 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cecc:	89 fa                	mov    edx,edi
c001cece:	89 f0                	mov    eax,esi
c001ced0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ced4:	c1 ea 1c             	shr    edx,0x1c
c001ced7:	89 d1                	mov    ecx,edx
c001ced9:	09 c1                	or     ecx,eax
c001cedb:	74 25                	je     c001cf02 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001cedd:	31 ed                	xor    ebp,ebp
c001cedf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cee6:	89 fa                	mov    edx,edi
c001cee8:	89 f0                	mov    eax,esi
c001ceea:	0f ad d0             	shrd   eax,edx,cl
c001ceed:	d3 ea                	shr    edx,cl
c001ceef:	f6 c1 20             	test   cl,0x20
c001cef2:	74 02                	je     c001cef6 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001cef4:	89 d0                	mov    eax,edx
c001cef6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cefa:	45                   	inc    ebp
c001cefb:	83 fd 06             	cmp    ebp,0x6
c001cefe:	75 df                	jne    c001cedf <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001cf00:	eb 73                	jmp    c001cf75 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cf02:	89 f0                	mov    eax,esi
c001cf04:	89 fa                	mov    edx,edi
c001cf06:	0f ac d0 10          	shrd   eax,edx,0x10
c001cf0a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cf0f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cf13:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cf1a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cf1f:	c1 ee 18             	shr    esi,0x18
c001cf22:	bf 01 00 00 00       	mov    edi,0x1
c001cf27:	eb 53                	jmp    c001cf7c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cf29:	6a 00                	push   0x0
c001cf2b:	6a 3f                	push   0x3f
c001cf2d:	57                   	push   edi
c001cf2e:	56                   	push   esi
c001cf2f:	e8 88 1f 00 00       	call   c001eebc <__umoddi3>
c001cf34:	83 c4 10             	add    esp,0x10
c001cf37:	40                   	inc    eax
c001cf38:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cf3c:	6a 00                	push   0x0
c001cf3e:	68 f0 03 00 00       	push   0x3f0
c001cf43:	57                   	push   edi
c001cf44:	56                   	push   esi
c001cf45:	e8 72 1e 00 00       	call   c001edbc <__udivdi3>
c001cf4a:	83 c4 10             	add    esp,0x10
c001cf4d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cf52:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cf59:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cf5e:	6a 00                	push   0x0
c001cf60:	6a 3f                	push   0x3f
c001cf62:	57                   	push   edi
c001cf63:	31 ff                	xor    edi,edi
c001cf65:	56                   	push   esi
c001cf66:	e8 51 1e 00 00       	call   c001edbc <__udivdi3>
c001cf6b:	89 c6                	mov    esi,eax
c001cf6d:	83 c4 10             	add    esp,0x10
c001cf70:	83 e6 0f             	and    esi,0xf
c001cf73:	eb 07                	jmp    c001cf7c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cf75:	31 f6                	xor    esi,esi
c001cf77:	bf 02 00 00 00       	mov    edi,0x2
c001cf7c:	50                   	push   eax
c001cf7d:	6a 00                	push   0x0
c001cf7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf86:	50                   	push   eax
c001cf87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf8b:	e8 f8 f3 ff ff       	call   c001c388 <IDE::enableIRQs(unsigned char, bool)>
c001cf90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf93:	e8 a2 fe ff ff       	call   c001ce3a <ATA::readyForCommand()>
c001cf98:	83 c4 10             	add    esp,0x10
c001cf9b:	84 c0                	test   al,al
c001cf9d:	75 0a                	jne    c001cfa9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cf9f:	be 01 00 00 00       	mov    esi,0x1
c001cfa4:	e9 79 02 00 00       	jmp    c001d222 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001cfa9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cfaf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cfb5:	c1 e0 04             	shl    eax,0x4
c001cfb8:	09 c6                	or     esi,eax
c001cfba:	89 f8                	mov    eax,edi
c001cfbc:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cfc3:	84 c0                	test   al,al
c001cfc5:	75 05                	jne    c001cfcc <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001cfc7:	83 ce a0             	or     esi,0xffffffa0
c001cfca:	eb 03                	jmp    c001cfcf <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001cfcc:	83 ce e0             	or     esi,0xffffffe0
c001cfcf:	89 f0                	mov    eax,esi
c001cfd1:	0f b6 f0             	movzx  esi,al
c001cfd4:	56                   	push   esi
c001cfd5:	6a 06                	push   0x6
c001cfd7:	51                   	push   ecx
c001cfd8:	52                   	push   edx
c001cfd9:	e8 98 f1 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfde:	83 c4 10             	add    esp,0x10
c001cfe1:	6a 00                	push   0x0
c001cfe3:	6a 01                	push   0x1
c001cfe5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfec:	50                   	push   eax
c001cfed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cff3:	e8 7e f1 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cff8:	89 f8                	mov    eax,edi
c001cffa:	83 c4 10             	add    esp,0x10
c001cffd:	3c 02                	cmp    al,0x2
c001cfff:	75 6e                	jne    c001d06f <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d001:	6a 00                	push   0x0
c001d003:	6a 08                	push   0x8
c001d005:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d00c:	50                   	push   eax
c001d00d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d013:	e8 5e f1 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d018:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d01d:	50                   	push   eax
c001d01e:	6a 09                	push   0x9
c001d020:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d027:	50                   	push   eax
c001d028:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d02e:	e8 43 f1 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d033:	83 c4 20             	add    esp,0x20
c001d036:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d03b:	50                   	push   eax
c001d03c:	6a 0a                	push   0xa
c001d03e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d045:	50                   	push   eax
c001d046:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d04c:	e8 25 f1 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d051:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d056:	50                   	push   eax
c001d057:	6a 0b                	push   0xb
c001d059:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d060:	50                   	push   eax
c001d061:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d067:	e8 0a f1 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d06c:	83 c4 20             	add    esp,0x20
c001d06f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d074:	50                   	push   eax
c001d075:	6a 02                	push   0x2
c001d077:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d07e:	50                   	push   eax
c001d07f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d085:	e8 ec f0 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d08a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d08f:	50                   	push   eax
c001d090:	6a 03                	push   0x3
c001d092:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d099:	50                   	push   eax
c001d09a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0a0:	e8 d1 f0 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0a5:	83 c4 20             	add    esp,0x20
c001d0a8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d0ad:	50                   	push   eax
c001d0ae:	6a 04                	push   0x4
c001d0b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0b7:	50                   	push   eax
c001d0b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0be:	e8 b3 f0 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d0c8:	50                   	push   eax
c001d0c9:	6a 05                	push   0x5
c001d0cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0d2:	50                   	push   eax
c001d0d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0d9:	e8 98 f0 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0de:	83 c4 20             	add    esp,0x20
c001d0e1:	89 f8                	mov    eax,edi
c001d0e3:	3c 02                	cmp    al,0x2
c001d0e5:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d0ea:	75 06                	jne    c001d0f2 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d0ec:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d0f0:	75 40                	jne    c001d132 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d0f2:	89 f8                	mov    eax,edi
c001d0f4:	3c 02                	cmp    al,0x2
c001d0f6:	0f 95 c1             	setne  cl
c001d0f9:	74 0b                	je     c001d106 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d0fb:	b8 30 00 00 00       	mov    eax,0x30
c001d100:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d104:	75 31                	jne    c001d137 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d106:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d109:	83 f2 01             	xor    edx,0x1
c001d10c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d111:	74 09                	je     c001d11c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d113:	b8 24 00 00 00       	mov    eax,0x24
c001d118:	84 d2                	test   dl,dl
c001d11a:	75 1b                	jne    c001d137 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d11c:	84 c9                	test   cl,cl
c001d11e:	0f 84 7b fe ff ff    	je     c001cf9f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d124:	b8 20 00 00 00       	mov    eax,0x20
c001d129:	84 d2                	test   dl,dl
c001d12b:	75 0a                	jne    c001d137 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d12d:	e9 6d fe ff ff       	jmp    c001cf9f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d132:	b8 34 00 00 00       	mov    eax,0x34
c001d137:	50                   	push   eax
c001d138:	6a 07                	push   0x7
c001d13a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d141:	50                   	push   eax
c001d142:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d148:	e8 29 f0 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d14d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d151:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	85 f6                	test   esi,esi
c001d15a:	0f 84 a9 00 00 00    	je     c001d209 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d160:	50                   	push   eax
c001d161:	6a 01                	push   0x1
c001d163:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d16a:	50                   	push   eax
c001d16b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d171:	e8 b6 fb ff ff       	call   c001cd2c <IDE::polling(unsigned char, unsigned int)>
c001d176:	83 c4 10             	add    esp,0x10
c001d179:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d17f:	84 c0                	test   al,al
c001d181:	74 1d                	je     c001d1a0 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d183:	0f b6 f0             	movzx  esi,al
c001d186:	56                   	push   esi
c001d187:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d18e:	0f b6 d2             	movzx  edx,dl
c001d191:	50                   	push   eax
c001d192:	52                   	push   edx
c001d193:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d199:	e8 f8 f9 ff ff       	call   c001cb96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d19e:	eb 7f                	jmp    c001d21f <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d1a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d1a5:	74 41                	je     c001d1e8 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d1a7:	31 c9                	xor    ecx,ecx
c001d1a9:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d1ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d1b1:	50                   	push   eax
c001d1b2:	50                   	push   eax
c001d1b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1ba:	50                   	push   eax
c001d1bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1c1:	e8 9e ef ff ff       	call   c001c164 <IDE::getBase(unsigned char)>
c001d1c6:	89 c2                	mov    edx,eax
c001d1c8:	89 e8                	mov    eax,ebp
c001d1ca:	66 ef                	out    dx,ax
c001d1cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1d0:	83 c4 10             	add    esp,0x10
c001d1d3:	41                   	inc    ecx
c001d1d4:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d1da:	75 cd                	jne    c001d1a9 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d1dc:	4e                   	dec    esi
c001d1dd:	81 c7 00 02 00 00    	add    edi,0x200
c001d1e3:	e9 70 ff ff ff       	jmp    c001d158 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d1e8:	51                   	push   ecx
c001d1e9:	51                   	push   ecx
c001d1ea:	0f b6 d2             	movzx  edx,dl
c001d1ed:	52                   	push   edx
c001d1ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1f4:	e8 6b ef ff ff       	call   c001c164 <IDE::getBase(unsigned char)>
c001d1f9:	b9 00 01 00 00       	mov    ecx,0x100
c001d1fe:	89 c2                	mov    edx,eax
c001d200:	fc                   	cld    
c001d201:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d204:	83 c4 10             	add    esp,0x10
c001d207:	eb d3                	jmp    c001d1dc <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d209:	31 f6                	xor    esi,esi
c001d20b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d20f:	74 11                	je     c001d222 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d211:	50                   	push   eax
c001d212:	50                   	push   eax
c001d213:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d218:	50                   	push   eax
c001d219:	53                   	push   ebx
c001d21a:	e8 d1 fb ff ff       	call   c001cdf0 <ATA::flush(bool)>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	83 c4 2c             	add    esp,0x2c
c001d225:	89 f0                	mov    eax,esi
c001d227:	5b                   	pop    ebx
c001d228:	5e                   	pop    esi
c001d229:	5f                   	pop    edi
c001d22a:	5d                   	pop    ebp
c001d22b:	c3                   	ret    

c001d22c <ATA::read(unsigned long long, int, void*)>:
c001d22c:	57                   	push   edi
c001d22d:	b8 04 00 00 00       	mov    eax,0x4
c001d232:	56                   	push   esi
c001d233:	53                   	push   ebx
c001d234:	83 ec 10             	sub    esp,0x10
c001d237:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d23b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d23f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d243:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d247:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d24a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d250:	77 3b                	ja     c001d28d <ATA::read(unsigned long long, int, void*)+0x61>
c001d252:	b8 06 00 00 00       	mov    eax,0x6
c001d257:	85 d2                	test   edx,edx
c001d259:	74 32                	je     c001d28d <ATA::read(unsigned long long, int, void*)+0x61>
c001d25b:	50                   	push   eax
c001d25c:	50                   	push   eax
c001d25d:	6a 00                	push   0x0
c001d25f:	52                   	push   edx
c001d260:	53                   	push   ebx
c001d261:	57                   	push   edi
c001d262:	56                   	push   esi
c001d263:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d267:	e8 1e fc ff ff       	call   c001ce8a <ATA::access(unsigned long long, int, void*, bool)>
c001d26c:	83 c4 20             	add    esp,0x20
c001d26f:	85 c0                	test   eax,eax
c001d271:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d275:	75 11                	jne    c001d288 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d277:	01 1d a4 5d 02 c0    	add    DWORD PTR ds:0xc0025da4,ebx
c001d27d:	e8 88 fc fe ff       	call   c000cf0a <VgaText::updateDiskUsage()>
c001d282:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d286:	eb 05                	jmp    c001d28d <ATA::read(unsigned long long, int, void*)+0x61>
c001d288:	b8 01 00 00 00       	mov    eax,0x1
c001d28d:	83 c4 10             	add    esp,0x10
c001d290:	5b                   	pop    ebx
c001d291:	5e                   	pop    esi
c001d292:	5f                   	pop    edi
c001d293:	c3                   	ret    

c001d294 <ATA::write(unsigned long long, int, void*)>:
c001d294:	57                   	push   edi
c001d295:	b8 04 00 00 00       	mov    eax,0x4
c001d29a:	56                   	push   esi
c001d29b:	53                   	push   ebx
c001d29c:	83 ec 10             	sub    esp,0x10
c001d29f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2a3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d2a7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d2ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d2af:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d2b2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d2b8:	77 3b                	ja     c001d2f5 <ATA::write(unsigned long long, int, void*)+0x61>
c001d2ba:	b8 06 00 00 00       	mov    eax,0x6
c001d2bf:	85 d2                	test   edx,edx
c001d2c1:	74 32                	je     c001d2f5 <ATA::write(unsigned long long, int, void*)+0x61>
c001d2c3:	50                   	push   eax
c001d2c4:	50                   	push   eax
c001d2c5:	6a 01                	push   0x1
c001d2c7:	52                   	push   edx
c001d2c8:	53                   	push   ebx
c001d2c9:	57                   	push   edi
c001d2ca:	56                   	push   esi
c001d2cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2cf:	e8 b6 fb ff ff       	call   c001ce8a <ATA::access(unsigned long long, int, void*, bool)>
c001d2d4:	83 c4 20             	add    esp,0x20
c001d2d7:	85 c0                	test   eax,eax
c001d2d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2dd:	75 11                	jne    c001d2f0 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d2df:	01 1d a0 5d 02 c0    	add    DWORD PTR ds:0xc0025da0,ebx
c001d2e5:	e8 20 fc fe ff       	call   c000cf0a <VgaText::updateDiskUsage()>
c001d2ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ee:	eb 05                	jmp    c001d2f5 <ATA::write(unsigned long long, int, void*)+0x61>
c001d2f0:	b8 01 00 00 00       	mov    eax,0x1
c001d2f5:	83 c4 10             	add    esp,0x10
c001d2f8:	5b                   	pop    ebx
c001d2f9:	5e                   	pop    esi
c001d2fa:	5f                   	pop    edi
c001d2fb:	c3                   	ret    

c001d2fc <ATA::detectCHS()>:
c001d2fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d300:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d306:	c1 e0 06             	shl    eax,0x6
c001d309:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d30f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d319:	c7 44 24 04 2f 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc002302f
c001d321:	e9 cc 7f ff ff       	jmp    c00152f2 <Krnl::panic(char const*)>

c001d326 <ATA::open(int, int, void*)>:
c001d326:	53                   	push   ebx
c001d327:	83 ec 08             	sub    esp,0x8
c001d32a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d32e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d332:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d336:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d33c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d342:	c1 e0 06             	shl    eax,0x6
c001d345:	01 d0                	add    eax,edx
c001d347:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d34e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d354:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d35b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d365:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d36b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d372:	75 0c                	jne    c001d380 <ATA::open(int, int, void*)+0x5a>
c001d374:	83 ec 0c             	sub    esp,0xc
c001d377:	53                   	push   ebx
c001d378:	e8 7f ff ff ff       	call   c001d2fc <ATA::detectCHS()>
c001d37d:	83 c4 10             	add    esp,0x10
c001d380:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d386:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d38c:	c1 e0 06             	shl    eax,0x6
c001d38f:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d396:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d3a0:	d1 e8                	shr    eax,1
c001d3a2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d3a8:	6a 04                	push   0x4
c001d3aa:	6a 0c                	push   0xc
c001d3ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3b3:	50                   	push   eax
c001d3b4:	52                   	push   edx
c001d3b5:	e8 bc ed ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3ba:	90                   	nop
c001d3bb:	90                   	nop
c001d3bc:	6a 00                	push   0x0
c001d3be:	6a 0c                	push   0xc
c001d3c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d3c7:	50                   	push   eax
c001d3c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d3ce:	e8 a3 ed ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3d3:	83 c4 14             	add    esp,0x14
c001d3d6:	53                   	push   ebx
c001d3d7:	e8 da 35 ff ff       	call   c00109b6 <PhysicalDisk::startCache()>
c001d3dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3df:	e8 3e 4f ff ff       	call   c0012322 <createPartitionsForDisk(PhysicalDisk*)>
c001d3e4:	83 c4 18             	add    esp,0x18
c001d3e7:	31 c0                	xor    eax,eax
c001d3e9:	5b                   	pop    ebx
c001d3ea:	c3                   	ret    
c001d3eb:	90                   	nop

c001d3ec <ATAPI::write(unsigned long long, int, void*)>:
c001d3ec:	b8 03 00 00 00       	mov    eax,0x3
c001d3f1:	c3                   	ret    

c001d3f2 <ATAPI::close(int, int, void*)>:
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d3ff:	85 c0                	test   eax,eax
c001d401:	74 0c                	je     c001d40f <ATAPI::close(int, int, void*)+0x1d>
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	8b 10                	mov    edx,DWORD PTR [eax]
c001d408:	50                   	push   eax
c001d409:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	31 c0                	xor    eax,eax
c001d411:	83 c4 0c             	add    esp,0xc
c001d414:	c3                   	ret    
c001d415:	90                   	nop

c001d416 <ATAPI::ATAPI()>:
c001d416:	83 ec 0c             	sub    esp,0xc
c001d419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41d:	83 ec 04             	sub    esp,0x4
c001d420:	68 00 08 00 00       	push   0x800
c001d425:	68 78 30 02 c0       	push   0xc0023078
c001d42a:	50                   	push   eax
c001d42b:	e8 1e 35 ff ff       	call   c001094e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d430:	83 c4 10             	add    esp,0x10
c001d433:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001d438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43c:	89 10                	mov    DWORD PTR [eax],edx
c001d43e:	90                   	nop
c001d43f:	83 c4 0c             	add    esp,0xc
c001d442:	c3                   	ret    
c001d443:	90                   	nop

c001d444 <ATAPI::readyForCommand()>:
c001d444:	56                   	push   esi
c001d445:	53                   	push   ebx
c001d446:	31 db                	xor    ebx,ebx
c001d448:	50                   	push   eax
c001d449:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d44d:	50                   	push   eax
c001d44e:	6a 0c                	push   0xc
c001d450:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d457:	50                   	push   eax
c001d458:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d45e:	e8 d3 ed ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001d463:	83 c4 10             	add    esp,0x10
c001d466:	a8 88                	test   al,0x88
c001d468:	74 23                	je     c001d48d <ATAPI::readyForCommand()+0x49>
c001d46a:	43                   	inc    ebx
c001d46b:	83 fb 63             	cmp    ebx,0x63
c001d46e:	7e dd                	jle    c001d44d <ATAPI::readyForCommand()+0x9>
c001d470:	51                   	push   ecx
c001d471:	51                   	push   ecx
c001d472:	6a 00                	push   0x0
c001d474:	68 40 42 0f 00       	push   0xf4240
c001d479:	e8 db b3 ff ff       	call   c0018859 <nanoSleep(unsigned long long)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d487:	75 c4                	jne    c001d44d <ATAPI::readyForCommand()+0x9>
c001d489:	31 c0                	xor    eax,eax
c001d48b:	eb 02                	jmp    c001d48f <ATAPI::readyForCommand()+0x4b>
c001d48d:	b0 01                	mov    al,0x1
c001d48f:	5a                   	pop    edx
c001d490:	5b                   	pop    ebx
c001d491:	5e                   	pop    esi
c001d492:	c3                   	ret    
c001d493:	90                   	nop

c001d494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d494:	55                   	push   ebp
c001d495:	57                   	push   edi
c001d496:	56                   	push   esi
c001d497:	53                   	push   ebx
c001d498:	83 ec 20             	sub    esp,0x20
c001d49b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d49f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d4a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4a7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d4ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d4af:	6a 01                	push   0x1
c001d4b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4b8:	50                   	push   eax
c001d4b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4bf:	e8 c4 ee ff ff       	call   c001c388 <IDE::enableIRQs(unsigned char, bool)>
c001d4c4:	5e                   	pop    esi
c001d4c5:	58                   	pop    eax
c001d4c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4cd:	50                   	push   eax
c001d4ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4d4:	e8 77 ec ff ff       	call   c001c150 <IDE::prepareInterrupt(unsigned char)>
c001d4d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4dc:	e8 63 ff ff ff       	call   c001d444 <ATAPI::readyForCommand()>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	84 c0                	test   al,al
c001d4e6:	75 0a                	jne    c001d4f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d4e8:	bb 01 00 00 00       	mov    ebx,0x1
c001d4ed:	e9 57 02 00 00       	jmp    c001d749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d4f2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d4f8:	c1 e0 04             	shl    eax,0x4
c001d4fb:	0f b6 c0             	movzx  eax,al
c001d4fe:	50                   	push   eax
c001d4ff:	6a 06                	push   0x6
c001d501:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d508:	50                   	push   eax
c001d509:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d50f:	e8 62 ec ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d514:	6a 00                	push   0x0
c001d516:	6a 01                	push   0x1
c001d518:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d51f:	50                   	push   eax
c001d520:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d526:	e8 4b ec ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d52b:	83 c4 20             	add    esp,0x20
c001d52e:	0f b6 c3             	movzx  eax,bl
c001d531:	50                   	push   eax
c001d532:	6a 04                	push   0x4
c001d534:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d53b:	50                   	push   eax
c001d53c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d542:	0f b6 df             	movzx  ebx,bh
c001d545:	e8 2c ec ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d54a:	53                   	push   ebx
c001d54b:	6a 05                	push   0x5
c001d54d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d554:	50                   	push   eax
c001d555:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d55b:	e8 16 ec ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d560:	83 c4 20             	add    esp,0x20
c001d563:	68 a0 00 00 00       	push   0xa0
c001d568:	6a 07                	push   0x7
c001d56a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d571:	50                   	push   eax
c001d572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d578:	e8 f9 eb ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d57d:	83 c4 0c             	add    esp,0xc
c001d580:	6a 01                	push   0x1
c001d582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d589:	50                   	push   eax
c001d58a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d590:	e8 97 f7 ff ff       	call   c001cd2c <IDE::polling(unsigned char, unsigned int)>
c001d595:	83 c4 10             	add    esp,0x10
c001d598:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d59e:	84 c0                	test   al,al
c001d5a0:	74 23                	je     c001d5c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d5a2:	0f b6 d8             	movzx  ebx,al
c001d5a5:	53                   	push   ebx
c001d5a6:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d5ad:	0f b6 d2             	movzx  edx,dl
c001d5b0:	50                   	push   eax
c001d5b1:	52                   	push   edx
c001d5b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5b8:	e8 d9 f5 ff ff       	call   c001cb96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d5bd:	83 c4 10             	add    esp,0x10
c001d5c0:	e9 84 01 00 00       	jmp    c001d749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d5c5:	53                   	push   ebx
c001d5c6:	53                   	push   ebx
c001d5c7:	0f b6 d2             	movzx  edx,dl
c001d5ca:	52                   	push   edx
c001d5cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5d1:	e8 8e eb ff ff       	call   c001c164 <IDE::getBase(unsigned char)>
c001d5d6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5da:	b9 06 00 00 00       	mov    ecx,0x6
c001d5df:	89 c2                	mov    edx,eax
c001d5e1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d5e4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d5f1:	85 db                	test   ebx,ebx
c001d5f3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d5fa:	0f 84 ec 00 00 00    	je     c001d6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d600:	51                   	push   ecx
c001d601:	51                   	push   ecx
c001d602:	52                   	push   edx
c001d603:	50                   	push   eax
c001d604:	e8 db ec ff ff       	call   c001c2e4 <IDE::waitInterrupt(unsigned char)>
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	84 c0                	test   al,al
c001d60e:	0f 84 d4 fe ff ff    	je     c001d4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d614:	56                   	push   esi
c001d615:	56                   	push   esi
c001d616:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d61d:	50                   	push   eax
c001d61e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d624:	e8 27 eb ff ff       	call   c001c150 <IDE::prepareInterrupt(unsigned char)>
c001d629:	83 c4 0c             	add    esp,0xc
c001d62c:	6a 04                	push   0x4
c001d62e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d635:	50                   	push   eax
c001d636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d63c:	e8 f5 eb ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001d641:	83 c4 0c             	add    esp,0xc
c001d644:	6a 05                	push   0x5
c001d646:	89 c6                	mov    esi,eax
c001d648:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d64f:	50                   	push   eax
c001d650:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d656:	e8 db eb ff ff       	call   c001c236 <IDE::read(unsigned char, unsigned char)>
c001d65b:	89 f1                	mov    ecx,esi
c001d65d:	0f b6 c0             	movzx  eax,al
c001d660:	c1 e0 08             	shl    eax,0x8
c001d663:	0f b6 f1             	movzx  esi,cl
c001d666:	09 c6                	or     esi,eax
c001d668:	d1 fe                	sar    esi,1
c001d66a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d66e:	83 c4 10             	add    esp,0x10
c001d671:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d676:	74 41                	je     c001d6b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d678:	31 c9                	xor    ecx,ecx
c001d67a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d680:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d684:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d68b:	75 0a                	jne    c001d697 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d68d:	01 c9                	add    ecx,ecx
c001d68f:	01 cd                	add    ebp,ecx
c001d691:	4b                   	dec    ebx
c001d692:	e9 54 ff ff ff       	jmp    c001d5eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d697:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d69c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6a0:	51                   	push   ecx
c001d6a1:	51                   	push   ecx
c001d6a2:	52                   	push   edx
c001d6a3:	50                   	push   eax
c001d6a4:	e8 bb ea ff ff       	call   c001c164 <IDE::getBase(unsigned char)>
c001d6a9:	89 c2                	mov    edx,eax
c001d6ab:	89 f0                	mov    eax,esi
c001d6ad:	66 ef                	out    dx,ax
c001d6af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	41                   	inc    ecx
c001d6b7:	eb c1                	jmp    c001d67a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d6b9:	31 f6                	xor    esi,esi
c001d6bb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d6c1:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d6c5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6cc:	75 06                	jne    c001d6d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d6ce:	01 f6                	add    esi,esi
c001d6d0:	01 f5                	add    ebp,esi
c001d6d2:	eb bd                	jmp    c001d691 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d6d4:	51                   	push   ecx
c001d6d5:	51                   	push   ecx
c001d6d6:	52                   	push   edx
c001d6d7:	50                   	push   eax
c001d6d8:	e8 87 ea ff ff       	call   c001c164 <IDE::getBase(unsigned char)>
c001d6dd:	89 c2                	mov    edx,eax
c001d6df:	66 ed                	in     ax,dx
c001d6e1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d6e6:	83 c4 10             	add    esp,0x10
c001d6e9:	46                   	inc    esi
c001d6ea:	eb cf                	jmp    c001d6bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d6ec:	51                   	push   ecx
c001d6ed:	51                   	push   ecx
c001d6ee:	52                   	push   edx
c001d6ef:	50                   	push   eax
c001d6f0:	e8 ef eb ff ff       	call   c001c2e4 <IDE::waitInterrupt(unsigned char)>
c001d6f5:	83 c4 10             	add    esp,0x10
c001d6f8:	84 c0                	test   al,al
c001d6fa:	0f 84 e8 fd ff ff    	je     c001d4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d700:	52                   	push   edx
c001d701:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d706:	52                   	push   edx
c001d707:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d70e:	50                   	push   eax
c001d70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d715:	e8 36 ea ff ff       	call   c001c150 <IDE::prepareInterrupt(unsigned char)>
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	50                   	push   eax
c001d71e:	50                   	push   eax
c001d71f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d726:	50                   	push   eax
c001d727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72d:	e8 32 ea ff ff       	call   c001c164 <IDE::getBase(unsigned char)>
c001d732:	8d 50 07             	lea    edx,[eax+0x7]
c001d735:	ec                   	in     al,dx
c001d736:	83 c4 10             	add    esp,0x10
c001d739:	a8 88                	test   al,0x88
c001d73b:	74 0a                	je     c001d747 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d73d:	4b                   	dec    ebx
c001d73e:	75 dd                	jne    c001d71d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d740:	bb 02 00 00 00       	mov    ebx,0x2
c001d745:	eb 02                	jmp    c001d749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d747:	31 db                	xor    ebx,ebx
c001d749:	83 c4 1c             	add    esp,0x1c
c001d74c:	89 d8                	mov    eax,ebx
c001d74e:	5b                   	pop    ebx
c001d74f:	5e                   	pop    esi
c001d750:	5f                   	pop    edi
c001d751:	5d                   	pop    ebp
c001d752:	c3                   	ret    
c001d753:	90                   	nop

c001d754 <ATAPI::diskRemoved()>:
c001d754:	83 ec 18             	sub    esp,0x18
c001d757:	68 83 30 02 c0       	push   0xc0023083
c001d75c:	e8 d2 19 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001d761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d765:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d76c:	83 c4 1c             	add    esp,0x1c
c001d76f:	c3                   	ret    

c001d770 <ATAPI::eject()>:
c001d770:	57                   	push   edi
c001d771:	b9 03 00 00 00       	mov    ecx,0x3
c001d776:	53                   	push   ebx
c001d777:	83 ec 14             	sub    esp,0x14
c001d77a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d77e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d782:	fc                   	cld    
c001d783:	31 c0                	xor    eax,eax
c001d785:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d787:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d78c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d791:	50                   	push   eax
c001d792:	50                   	push   eax
c001d793:	6a 00                	push   0x0
c001d795:	6a 00                	push   0x0
c001d797:	6a 00                	push   0x0
c001d799:	6a 02                	push   0x2
c001d79b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d79f:	50                   	push   eax
c001d7a0:	53                   	push   ebx
c001d7a1:	e8 ee fc ff ff       	call   c001d494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d7a6:	83 c4 14             	add    esp,0x14
c001d7a9:	53                   	push   ebx
c001d7aa:	e8 a5 ff ff ff       	call   c001d754 <ATAPI::diskRemoved()>
c001d7af:	83 c4 24             	add    esp,0x24
c001d7b2:	5b                   	pop    ebx
c001d7b3:	5f                   	pop    edi
c001d7b4:	c3                   	ret    
c001d7b5:	90                   	nop

c001d7b6 <ATAPI::diskInserted()>:
c001d7b6:	53                   	push   ebx
c001d7b7:	83 ec 14             	sub    esp,0x14
c001d7ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d7be:	68 99 30 02 c0       	push   0xc0023099
c001d7c3:	e8 6b 19 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001d7c8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d7cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7d2:	e8 df 31 ff ff       	call   c00109b6 <PhysicalDisk::startCache()>
c001d7d7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d7db:	83 c4 18             	add    esp,0x18
c001d7de:	5b                   	pop    ebx
c001d7df:	e9 3e 4b ff ff       	jmp    c0012322 <createPartitionsForDisk(PhysicalDisk*)>

c001d7e4 <ATAPI::detectMedia()>:
c001d7e4:	56                   	push   esi
c001d7e5:	53                   	push   ebx
c001d7e6:	83 ec 28             	sub    esp,0x28
c001d7e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d7ed:	6a 0c                	push   0xc
c001d7ef:	6a 00                	push   0x0
c001d7f1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d7f5:	56                   	push   esi
c001d7f6:	e8 0d 2e fe ff       	call   c0000608 <memset>
c001d7fb:	58                   	pop    eax
c001d7fc:	5a                   	pop    edx
c001d7fd:	6a 00                	push   0x0
c001d7ff:	6a 00                	push   0x0
c001d801:	6a 00                	push   0x0
c001d803:	6a 00                	push   0x0
c001d805:	56                   	push   esi
c001d806:	53                   	push   ebx
c001d807:	e8 88 fc ff ff       	call   c001d494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d80c:	83 c4 1c             	add    esp,0x1c
c001d80f:	6a 0c                	push   0xc
c001d811:	6a 00                	push   0x0
c001d813:	56                   	push   esi
c001d814:	e8 ef 2d fe ff       	call   c0000608 <memset>
c001d819:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d81e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d823:	59                   	pop    ecx
c001d824:	58                   	pop    eax
c001d825:	6a 01                	push   0x1
c001d827:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d82b:	50                   	push   eax
c001d82c:	6a 00                	push   0x0
c001d82e:	6a 12                	push   0x12
c001d830:	56                   	push   esi
c001d831:	53                   	push   ebx
c001d832:	e8 5d fc ff ff       	call   c001d494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d837:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d83b:	83 c4 20             	add    esp,0x20
c001d83e:	83 e0 7f             	and    eax,0x7f
c001d841:	3c 70                	cmp    al,0x70
c001d843:	74 15                	je     c001d85a <ATAPI::detectMedia()+0x76>
c001d845:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d84c:	75 0c                	jne    c001d85a <ATAPI::detectMedia()+0x76>
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	53                   	push   ebx
c001d852:	e8 5f ff ff ff       	call   c001d7b6 <ATAPI::diskInserted()>
c001d857:	83 c4 10             	add    esp,0x10
c001d85a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d85e:	83 e0 0f             	and    eax,0xf
c001d861:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d866:	75 18                	jne    c001d880 <ATAPI::detectMedia()+0x9c>
c001d868:	3c 02                	cmp    al,0x2
c001d86a:	75 14                	jne    c001d880 <ATAPI::detectMedia()+0x9c>
c001d86c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d873:	74 24                	je     c001d899 <ATAPI::detectMedia()+0xb5>
c001d875:	83 ec 0c             	sub    esp,0xc
c001d878:	53                   	push   ebx
c001d879:	e8 d6 fe ff ff       	call   c001d754 <ATAPI::diskRemoved()>
c001d87e:	eb 16                	jmp    c001d896 <ATAPI::detectMedia()+0xb2>
c001d880:	84 c0                	test   al,al
c001d882:	75 15                	jne    c001d899 <ATAPI::detectMedia()+0xb5>
c001d884:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d88b:	75 0c                	jne    c001d899 <ATAPI::detectMedia()+0xb5>
c001d88d:	83 ec 0c             	sub    esp,0xc
c001d890:	53                   	push   ebx
c001d891:	e8 20 ff ff ff       	call   c001d7b6 <ATAPI::diskInserted()>
c001d896:	83 c4 10             	add    esp,0x10
c001d899:	83 c4 24             	add    esp,0x24
c001d89c:	5b                   	pop    ebx
c001d89d:	5e                   	pop    esi
c001d89e:	c3                   	ret    
c001d89f:	90                   	nop

c001d8a0 <ATAPI::open(int, int, void*)>:
c001d8a0:	53                   	push   ebx
c001d8a1:	83 ec 08             	sub    esp,0x8
c001d8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8b0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d8b6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d8bc:	c1 e0 06             	shl    eax,0x6
c001d8bf:	01 d0                	add    eax,edx
c001d8c1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d8c8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d8ce:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d8d5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d8df:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d8e5:	6a 04                	push   0x4
c001d8e7:	6a 0c                	push   0xc
c001d8e9:	51                   	push   ecx
c001d8ea:	52                   	push   edx
c001d8eb:	e8 86 e8 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8f0:	90                   	nop
c001d8f1:	90                   	nop
c001d8f2:	6a 00                	push   0x0
c001d8f4:	6a 0c                	push   0xc
c001d8f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8fd:	50                   	push   eax
c001d8fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d904:	e8 6d e8 ff ff       	call   c001c176 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d909:	83 c4 14             	add    esp,0x14
c001d90c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d913:	53                   	push   ebx
c001d914:	e8 cb fe ff ff       	call   c001d7e4 <ATAPI::detectMedia()>
c001d919:	83 c4 18             	add    esp,0x18
c001d91c:	31 c0                	xor    eax,eax
c001d91e:	5b                   	pop    ebx
c001d91f:	c3                   	ret    

c001d920 <ATAPI::read(unsigned long long, int, void*)>:
c001d920:	55                   	push   ebp
c001d921:	57                   	push   edi
c001d922:	56                   	push   esi
c001d923:	53                   	push   ebx
c001d924:	83 ec 1c             	sub    esp,0x1c
c001d927:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d92b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d92f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d933:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d93a:	74 3c                	je     c001d978 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d93c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d940:	b9 03 00 00 00       	mov    ecx,0x3
c001d945:	fc                   	cld    
c001d946:	31 c0                	xor    eax,eax
c001d948:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d94a:	0f ce                	bswap  esi
c001d94c:	89 e8                	mov    eax,ebp
c001d94e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d953:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d957:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d95b:	50                   	push   eax
c001d95c:	50                   	push   eax
c001d95d:	55                   	push   ebp
c001d95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d962:	c1 e5 0b             	shl    ebp,0xb
c001d965:	6a 00                	push   0x0
c001d967:	55                   	push   ebp
c001d968:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d96c:	50                   	push   eax
c001d96d:	53                   	push   ebx
c001d96e:	e8 21 fb ff ff       	call   c001d494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d973:	83 c4 20             	add    esp,0x20
c001d976:	eb 1a                	jmp    c001d992 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	53                   	push   ebx
c001d97c:	e8 63 fe ff ff       	call   c001d7e4 <ATAPI::detectMedia()>
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d98b:	75 af                	jne    c001d93c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d98d:	b8 02 00 00 00       	mov    eax,0x2
c001d992:	83 c4 1c             	add    esp,0x1c
c001d995:	5b                   	pop    ebx
c001d996:	5e                   	pop    esi
c001d997:	5f                   	pop    edi
c001d998:	5d                   	pop    ebp
c001d999:	c3                   	ret    

c001d99a <AVX::open(int, int, void*)>:
c001d99a:	83 ec 0c             	sub    esp,0xc
c001d99d:	e8 96 10 00 00       	call   c001ea38 <avxInit>
c001d9a2:	b8 00 00 00 00       	mov    eax,0x0
c001d9a7:	83 c4 0c             	add    esp,0xc
c001d9aa:	c3                   	ret    
c001d9ab:	90                   	nop

c001d9ac <AVX::close(int, int, void*)>:
c001d9ac:	83 ec 0c             	sub    esp,0xc
c001d9af:	e8 85 10 00 00       	call   c001ea39 <avxClose>
c001d9b4:	b8 00 00 00 00       	mov    eax,0x0
c001d9b9:	83 c4 0c             	add    esp,0xc
c001d9bc:	c3                   	ret    
c001d9bd:	90                   	nop

c001d9be <AVX::available()>:
c001d9be:	83 ec 0c             	sub    esp,0xc
c001d9c1:	e8 6a 10 00 00       	call   c001ea30 <avxDetect>
c001d9c6:	85 c0                	test   eax,eax
c001d9c8:	0f 95 c0             	setne  al
c001d9cb:	83 c4 0c             	add    esp,0xc
c001d9ce:	c3                   	ret    
c001d9cf:	90                   	nop

c001d9d0 <AVX::save(void*)>:
c001d9d0:	83 ec 0c             	sub    esp,0xc
c001d9d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9d7:	83 ec 0c             	sub    esp,0xc
c001d9da:	50                   	push   eax
c001d9db:	e8 56 10 00 00       	call   c001ea36 <avxSave>
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	90                   	nop
c001d9e4:	83 c4 0c             	add    esp,0xc
c001d9e7:	c3                   	ret    

c001d9e8 <AVX::load(void*)>:
c001d9e8:	83 ec 0c             	sub    esp,0xc
c001d9eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9ef:	83 ec 0c             	sub    esp,0xc
c001d9f2:	50                   	push   eax
c001d9f3:	e8 3f 10 00 00       	call   c001ea37 <avxLoad>
c001d9f8:	83 c4 10             	add    esp,0x10
c001d9fb:	90                   	nop
c001d9fc:	83 c4 0c             	add    esp,0xc
c001d9ff:	c3                   	ret    

c001da00 <AVX::AVX()>:
c001da00:	83 ec 0c             	sub    esp,0xc
c001da03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da07:	83 ec 08             	sub    esp,0x8
c001da0a:	68 e4 30 02 c0       	push   0xc00230e4
c001da0f:	50                   	push   eax
c001da10:	e8 17 30 ff ff       	call   c0010a2c <FPU::FPU(char const*)>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c001da1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da21:	89 10                	mov    DWORD PTR [eax],edx
c001da23:	90                   	nop
c001da24:	83 c4 0c             	add    esp,0xc
c001da27:	c3                   	ret    

c001da28 <MMX::available()>:
c001da28:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001da2d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001da33:	83 e0 20             	and    eax,0x20
c001da36:	84 c0                	test   al,al
c001da38:	0f 95 c0             	setne  al
c001da3b:	c3                   	ret    

c001da3c <MMX::open(int, int, void*)>:
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	e8 68 10 00 00       	call   c001eaac <x87Init>
c001da44:	b8 00 00 00 00       	mov    eax,0x0
c001da49:	83 c4 0c             	add    esp,0xc
c001da4c:	c3                   	ret    
c001da4d:	90                   	nop

c001da4e <MMX::close(int, int, void*)>:
c001da4e:	83 ec 0c             	sub    esp,0xc
c001da51:	e8 70 10 00 00       	call   c001eac6 <x87Close>
c001da56:	b8 00 00 00 00       	mov    eax,0x0
c001da5b:	83 c4 0c             	add    esp,0xc
c001da5e:	c3                   	ret    
c001da5f:	90                   	nop

c001da60 <MMX::save(void*)>:
c001da60:	83 ec 0c             	sub    esp,0xc
c001da63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da67:	83 ec 0c             	sub    esp,0xc
c001da6a:	50                   	push   eax
c001da6b:	e8 31 10 00 00       	call   c001eaa1 <x87Save>
c001da70:	83 c4 10             	add    esp,0x10
c001da73:	90                   	nop
c001da74:	83 c4 0c             	add    esp,0xc
c001da77:	c3                   	ret    

c001da78 <MMX::load(void*)>:
c001da78:	83 ec 0c             	sub    esp,0xc
c001da7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da7f:	83 ec 0c             	sub    esp,0xc
c001da82:	50                   	push   eax
c001da83:	e8 1f 10 00 00       	call   c001eaa7 <x87Load>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	90                   	nop
c001da8c:	83 c4 0c             	add    esp,0xc
c001da8f:	c3                   	ret    

c001da90 <MMX::MMX()>:
c001da90:	83 ec 0c             	sub    esp,0xc
c001da93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da97:	83 ec 08             	sub    esp,0x8
c001da9a:	68 24 31 02 c0       	push   0xc0023124
c001da9f:	50                   	push   eax
c001daa0:	e8 87 2f ff ff       	call   c0010a2c <FPU::FPU(char const*)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	ba 34 31 02 c0       	mov    edx,0xc0023134
c001daad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dab1:	89 10                	mov    DWORD PTR [eax],edx
c001dab3:	90                   	nop
c001dab4:	83 c4 0c             	add    esp,0xc
c001dab7:	c3                   	ret    

c001dab8 <SSE::open(int, int, void*)>:
c001dab8:	83 ec 0c             	sub    esp,0xc
c001dabb:	e8 a7 0f 00 00       	call   c001ea67 <sseInit>
c001dac0:	b8 00 00 00 00       	mov    eax,0x0
c001dac5:	83 c4 0c             	add    esp,0xc
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop

c001daca <SSE::close(int, int, void*)>:
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	e8 a5 0f 00 00       	call   c001ea77 <sseClose>
c001dad2:	b8 00 00 00 00       	mov    eax,0x0
c001dad7:	83 c4 0c             	add    esp,0xc
c001dada:	c3                   	ret    
c001dadb:	90                   	nop

c001dadc <SSE::available()>:
c001dadc:	83 ec 1c             	sub    esp,0x1c
c001dadf:	e8 5c 0f 00 00       	call   c001ea40 <sseDetect>
c001dae4:	85 c0                	test   eax,eax
c001dae6:	0f 95 c0             	setne  al
c001dae9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001daf1:	83 c4 1c             	add    esp,0x1c
c001daf4:	c3                   	ret    
c001daf5:	90                   	nop

c001daf6 <SSE::save(void*)>:
c001daf6:	83 ec 0c             	sub    esp,0xc
c001daf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dafd:	83 ec 0c             	sub    esp,0xc
c001db00:	50                   	push   eax
c001db01:	e8 55 0f 00 00       	call   c001ea5b <sseSave>
c001db06:	83 c4 10             	add    esp,0x10
c001db09:	90                   	nop
c001db0a:	83 c4 0c             	add    esp,0xc
c001db0d:	c3                   	ret    

c001db0e <SSE::load(void*)>:
c001db0e:	83 ec 0c             	sub    esp,0xc
c001db11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db15:	83 ec 0c             	sub    esp,0xc
c001db18:	50                   	push   eax
c001db19:	e8 43 0f 00 00       	call   c001ea61 <sseLoad>
c001db1e:	83 c4 10             	add    esp,0x10
c001db21:	90                   	nop
c001db22:	83 c4 0c             	add    esp,0xc
c001db25:	c3                   	ret    

c001db26 <SSE::SSE()>:
c001db26:	83 ec 0c             	sub    esp,0xc
c001db29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2d:	83 ec 08             	sub    esp,0x8
c001db30:	68 64 31 02 c0       	push   0xc0023164
c001db35:	50                   	push   eax
c001db36:	e8 f1 2e ff ff       	call   c0010a2c <FPU::FPU(char const*)>
c001db3b:	83 c4 10             	add    esp,0x10
c001db3e:	ba 74 31 02 c0       	mov    edx,0xc0023174
c001db43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db47:	89 10                	mov    DWORD PTR [eax],edx
c001db49:	90                   	nop
c001db4a:	83 c4 0c             	add    esp,0xc
c001db4d:	c3                   	ret    

c001db4e <x87::open(int, int, void*)>:
c001db4e:	83 ec 0c             	sub    esp,0xc
c001db51:	e8 56 0f 00 00       	call   c001eaac <x87Init>
c001db56:	b8 00 00 00 00       	mov    eax,0x0
c001db5b:	83 c4 0c             	add    esp,0xc
c001db5e:	c3                   	ret    
c001db5f:	90                   	nop

c001db60 <x87::close(int, int, void*)>:
c001db60:	83 ec 0c             	sub    esp,0xc
c001db63:	e8 5e 0f 00 00       	call   c001eac6 <x87Close>
c001db68:	b8 00 00 00 00       	mov    eax,0x0
c001db6d:	83 c4 0c             	add    esp,0xc
c001db70:	c3                   	ret    
c001db71:	90                   	nop

c001db72 <x87::available()>:
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	e8 0c 0f 00 00       	call   c001ea86 <x87Detect>
c001db7a:	85 c0                	test   eax,eax
c001db7c:	0f 95 c0             	setne  al
c001db7f:	83 c4 0c             	add    esp,0xc
c001db82:	c3                   	ret    
c001db83:	90                   	nop

c001db84 <x87::save(void*)>:
c001db84:	83 ec 0c             	sub    esp,0xc
c001db87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db8b:	83 ec 0c             	sub    esp,0xc
c001db8e:	50                   	push   eax
c001db8f:	e8 0d 0f 00 00       	call   c001eaa1 <x87Save>
c001db94:	83 c4 10             	add    esp,0x10
c001db97:	90                   	nop
c001db98:	83 c4 0c             	add    esp,0xc
c001db9b:	c3                   	ret    

c001db9c <x87::load(void*)>:
c001db9c:	83 ec 0c             	sub    esp,0xc
c001db9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dba3:	83 ec 0c             	sub    esp,0xc
c001dba6:	50                   	push   eax
c001dba7:	e8 fb 0e 00 00       	call   c001eaa7 <x87Load>
c001dbac:	83 c4 10             	add    esp,0x10
c001dbaf:	90                   	nop
c001dbb0:	83 c4 0c             	add    esp,0xc
c001dbb3:	c3                   	ret    

c001dbb4 <x87::x87()>:
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbb:	83 ec 08             	sub    esp,0x8
c001dbbe:	68 a4 31 02 c0       	push   0xc00231a4
c001dbc3:	50                   	push   eax
c001dbc4:	e8 63 2e ff ff       	call   c0010a2c <FPU::FPU(char const*)>
c001dbc9:	83 c4 10             	add    esp,0x10
c001dbcc:	ba b4 31 02 c0       	mov    edx,0xc00231b4
c001dbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd5:	89 10                	mov    DWORD PTR [eax],edx
c001dbd7:	90                   	nop
c001dbd8:	83 c4 0c             	add    esp,0xc
c001dbdb:	c3                   	ret    

c001dbdc <APIC::disable()>:
c001dbdc:	90                   	nop
c001dbdd:	c3                   	ret    

c001dbde <APIC::close(int, int, void*)>:
c001dbde:	55                   	push   ebp
c001dbdf:	89 e5                	mov    ebp,esp
c001dbe1:	83 ec 08             	sub    esp,0x8
c001dbe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbe9:	83 c0 3c             	add    eax,0x3c
c001dbec:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbee:	83 ec 0c             	sub    esp,0xc
c001dbf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbf4:	ff d0                	call   eax
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	b8 00 00 00 00       	mov    eax,0x0
c001dbfe:	c9                   	leave  
c001dbff:	c3                   	ret    

c001dc00 <IOAPIC::close(int, int, void*)>:
c001dc00:	b8 00 00 00 00       	mov    eax,0x0
c001dc05:	c3                   	ret    

c001dc06 <APIC::io_wait()>:
c001dc06:	eb 00                	jmp    c001dc08 <APIC::io_wait()+0x2>
c001dc08:	eb 00                	jmp    c001dc0a <APIC::io_wait()+0x4>
c001dc0a:	90                   	nop
c001dc0b:	c3                   	ret    

c001dc0c <APIC::getBase()>:
c001dc0c:	55                   	push   ebp
c001dc0d:	89 e5                	mov    ebp,esp
c001dc0f:	83 ec 18             	sub    esp,0x18
c001dc12:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001dc17:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001dc1d:	83 e0 08             	and    eax,0x8
c001dc20:	84 c0                	test   al,al
c001dc22:	75 07                	jne    c001dc2b <APIC::getBase()+0x1f>
c001dc24:	b8 00 00 00 00       	mov    eax,0x0
c001dc29:	eb 21                	jmp    c001dc4c <APIC::getBase()+0x40>
c001dc2b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001dc30:	83 ec 08             	sub    esp,0x8
c001dc33:	6a 1b                	push   0x1b
c001dc35:	50                   	push   eax
c001dc36:	e8 63 d8 fe ff       	call   c000b49e <Computer::rdmsr(unsigned int)>
c001dc3b:	83 c4 10             	add    esp,0x10
c001dc3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dc41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dc44:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc47:	25 00 f0 ff ff       	and    eax,0xfffff000
c001dc4c:	c9                   	leave  
c001dc4d:	c3                   	ret    

c001dc4e <APIC::eoi(unsigned char)>:
c001dc4e:	55                   	push   ebp
c001dc4f:	89 e5                	mov    ebp,esp
c001dc51:	83 ec 28             	sub    esp,0x28
c001dc54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dc5a:	83 ec 0c             	sub    esp,0xc
c001dc5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc60:	e8 a7 ff ff ff       	call   c001dc0c <APIC::getBase()>
c001dc65:	83 c4 10             	add    esp,0x10
c001dc68:	05 b0 00 00 00       	add    eax,0xb0
c001dc6d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001dc73:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001dc79:	90                   	nop
c001dc7a:	c9                   	leave  
c001dc7b:	c3                   	ret    

c001dc7c <APIC::open(int, int, void*)>:
c001dc7c:	55                   	push   ebp
c001dc7d:	89 e5                	mov    ebp,esp
c001dc7f:	57                   	push   edi
c001dc80:	56                   	push   esi
c001dc81:	53                   	push   ebx
c001dc82:	83 ec 1c             	sub    esp,0x1c
c001dc85:	83 ec 0c             	sub    esp,0xc
c001dc88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc8b:	e8 7c ff ff ff       	call   c001dc0c <APIC::getBase()>
c001dc90:	83 c4 10             	add    esp,0x10
c001dc93:	05 f0 00 00 00       	add    eax,0xf0
c001dc98:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dc9b:	83 ec 0c             	sub    esp,0xc
c001dc9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dca1:	e8 66 ff ff ff       	call   c001dc0c <APIC::getBase()>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	89 c2                	mov    edx,eax
c001dcab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dcae:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dcb4:	89 c7                	mov    edi,eax
c001dcb6:	81 e7 ff 00 00 00    	and    edi,0xff
c001dcbc:	89 d0                	mov    eax,edx
c001dcbe:	ba 00 00 00 00       	mov    edx,0x0
c001dcc3:	89 c1                	mov    ecx,eax
c001dcc5:	80 e5 ff             	and    ch,0xff
c001dcc8:	89 cb                	mov    ebx,ecx
c001dcca:	89 d0                	mov    eax,edx
c001dccc:	25 ff 00 00 00       	and    eax,0xff
c001dcd1:	89 c6                	mov    esi,eax
c001dcd3:	89 d8                	mov    eax,ebx
c001dcd5:	89 f2                	mov    edx,esi
c001dcd7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dcda:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dcdd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dce1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dce5:	83 e0 00             	and    eax,0x0
c001dce8:	09 d0                	or     eax,edx
c001dcea:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dcee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dcf1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dcf7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcfa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dcfd:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dd03:	31 d2                	xor    edx,edx
c001dd05:	88 c2                	mov    dl,al
c001dd07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd0a:	83 c2 08             	add    edx,0x8
c001dd0d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dd11:	81 e1 ff 00 00 00    	and    ecx,0xff
c001dd17:	81 c9 00 00 01 00    	or     ecx,0x10000
c001dd1d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dd21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001dd24:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd26:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001dd29:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001dd30:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001dd33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001dd36:	89 10                	mov    DWORD PTR [eax],edx
c001dd38:	b8 00 00 00 00       	mov    eax,0x0
c001dd3d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dd40:	5b                   	pop    ebx
c001dd41:	5e                   	pop    esi
c001dd42:	5f                   	pop    edi
c001dd43:	5d                   	pop    ebp
c001dd44:	c3                   	ret    
c001dd45:	90                   	nop

c001dd46 <IOAPIC::IOAPIC()>:
c001dd46:	83 ec 0c             	sub    esp,0xc
c001dd49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4d:	83 ec 08             	sub    esp,0x8
c001dd50:	68 e4 31 02 c0       	push   0xc00231e4
c001dd55:	50                   	push   eax
c001dd56:	e8 dd 29 ff ff       	call   c0010738 <Device::Device(char const*)>
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001dd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd67:	89 10                	mov    DWORD PTR [eax],edx
c001dd69:	90                   	nop
c001dd6a:	83 c4 0c             	add    esp,0xc
c001dd6d:	c3                   	ret    

c001dd6e <APIC::APIC()>:
c001dd6e:	53                   	push   ebx
c001dd6f:	83 ec 18             	sub    esp,0x18
c001dd72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd76:	83 ec 08             	sub    esp,0x8
c001dd79:	68 ec 31 02 c0       	push   0xc00231ec
c001dd7e:	50                   	push   eax
c001dd7f:	e8 00 31 ff ff       	call   c0010e84 <InterruptController::InterruptController(char const*)>
c001dd84:	83 c4 10             	add    esp,0x10
c001dd87:	ba c4 32 02 c0       	mov    edx,0xc00232c4
c001dd8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd90:	89 10                	mov    DWORD PTR [eax],edx
c001dd92:	a0 00 5e 02 c0       	mov    al,ds:0xc0025e00
c001dd97:	83 f0 01             	xor    eax,0x1
c001dd9a:	84 c0                	test   al,al
c001dd9c:	0f 84 a2 00 00 00    	je     c001de44 <APIC::APIC()+0xd6>
c001dda2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dda7:	a0 b0 48 02 c0       	mov    al,ds:0xc00248b0
c001ddac:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ddb0:	0f 83 87 00 00 00    	jae    c001de3d <APIC::APIC()+0xcf>
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	68 68 01 00 00       	push   0x168
c001ddbe:	e8 3b 12 ff ff       	call   c000effe <operator new(unsigned long)>
c001ddc3:	83 c4 10             	add    esp,0x10
c001ddc6:	89 c3                	mov    ebx,eax
c001ddc8:	83 ec 0c             	sub    esp,0xc
c001ddcb:	53                   	push   ebx
c001ddcc:	e8 75 ff ff ff       	call   c001dd46 <IOAPIC::IOAPIC()>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ddd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dddc:	25 ff 00 00 00       	and    eax,0xff
c001dde1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dde5:	89 14 85 e0 5d 02 c0 	mov    DWORD PTR [eax*4-0x3ffda220],edx
c001ddec:	a1 c0 5d 02 c0       	mov    eax,ds:0xc0025dc0
c001ddf1:	40                   	inc    eax
c001ddf2:	a3 c0 5d 02 c0       	mov    ds:0xc0025dc0,eax
c001ddf7:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001ddfc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001de02:	83 ec 08             	sub    esp,0x8
c001de05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001de09:	50                   	push   eax
c001de0a:	e8 39 27 ff ff       	call   c0010548 <Device::addChild(Device*)>
c001de0f:	83 c4 10             	add    esp,0x10
c001de12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001de16:	8b 00                	mov    eax,DWORD PTR [eax]
c001de18:	83 c0 08             	add    eax,0x8
c001de1b:	8b 10                	mov    edx,DWORD PTR [eax]
c001de1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001de21:	25 ff 00 00 00       	and    eax,0xff
c001de26:	6a 00                	push   0x0
c001de28:	6a 00                	push   0x0
c001de2a:	50                   	push   eax
c001de2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001de2f:	ff d2                	call   edx
c001de31:	83 c4 10             	add    esp,0x10
c001de34:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001de38:	e9 6a ff ff ff       	jmp    c001dda7 <APIC::APIC()+0x39>
c001de3d:	c6 05 00 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025e00,0x1
c001de44:	90                   	nop
c001de45:	83 c4 18             	add    esp,0x18
c001de48:	5b                   	pop    ebx
c001de49:	c3                   	ret    

c001de4a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001de4a:	55                   	push   ebp
c001de4b:	89 e5                	mov    ebp,esp
c001de4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de56:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001de59:	72 1d                	jb     c001de78 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001de5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de5e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001de64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de67:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001de6d:	01 d0                	add    eax,edx
c001de6f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001de72:	73 04                	jae    c001de78 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001de74:	b0 01                	mov    al,0x1
c001de76:	eb 02                	jmp    c001de7a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001de78:	b0 00                	mov    al,0x0
c001de7a:	5d                   	pop    ebp
c001de7b:	c3                   	ret    

c001de7c <IOAPIC::read(int)>:
c001de7c:	55                   	push   ebp
c001de7d:	89 e5                	mov    ebp,esp
c001de7f:	83 ec 10             	sub    esp,0x10
c001de82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001de8b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001de8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001de91:	31 d2                	xor    edx,edx
c001de93:	88 c2                	mov    dl,al
c001de95:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de98:	89 10                	mov    DWORD PTR [eax],edx
c001de9a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de9d:	83 c0 10             	add    eax,0x10
c001dea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dea2:	c9                   	leave  
c001dea3:	c3                   	ret    

c001dea4 <IOAPIC::open(int, int, void*)>:
c001dea4:	55                   	push   ebp
c001dea5:	89 e5                	mov    ebp,esp
c001dea7:	57                   	push   edi
c001dea8:	56                   	push   esi
c001dea9:	53                   	push   ebx
c001deaa:	83 ec 0c             	sub    esp,0xc
c001dead:	83 ec 0c             	sub    esp,0xc
c001deb0:	68 17 32 02 c0       	push   0xc0023217
c001deb5:	e8 79 12 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001deba:	83 c4 10             	add    esp,0x10
c001debd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dec0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dec3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001decc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ded2:	8b 14 85 e0 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb720]
c001ded9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dedc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dee5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001deeb:	8b 14 85 60 49 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb6a0]
c001def2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001def5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001defb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001defe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001df04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df07:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001df0d:	89 c7                	mov    edi,eax
c001df0f:	81 e7 ff 00 00 00    	and    edi,0xff
c001df15:	89 d0                	mov    eax,edx
c001df17:	ba 00 00 00 00       	mov    edx,0x0
c001df1c:	89 c1                	mov    ecx,eax
c001df1e:	80 e5 ff             	and    ch,0xff
c001df21:	89 cb                	mov    ebx,ecx
c001df23:	89 d0                	mov    eax,edx
c001df25:	25 ff 00 00 00       	and    eax,0xff
c001df2a:	89 c6                	mov    esi,eax
c001df2c:	89 d8                	mov    eax,ebx
c001df2e:	89 f2                	mov    edx,esi
c001df30:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001df33:	8d 5f 08             	lea    ebx,[edi+0x8]
c001df36:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001df3a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001df3e:	83 e0 00             	and    eax,0x0
c001df41:	09 d0                	or     eax,edx
c001df43:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001df47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df4a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001df50:	8d 50 01             	lea    edx,[eax+0x1]
c001df53:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001df56:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001df5c:	31 d2                	xor    edx,edx
c001df5e:	88 c2                	mov    dl,al
c001df60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df63:	83 c2 08             	add    edx,0x8
c001df66:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001df6a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001df70:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001df76:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001df7a:	83 ec 08             	sub    esp,0x8
c001df7d:	6a 01                	push   0x1
c001df7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df82:	e8 f5 fe ff ff       	call   c001de7c <IOAPIC::read(int)>
c001df87:	83 c4 10             	add    esp,0x10
c001df8a:	c1 f8 10             	sar    eax,0x10
c001df8d:	25 ff 00 00 00       	and    eax,0xff
c001df92:	8d 50 01             	lea    edx,[eax+0x1]
c001df95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df98:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001df9e:	b8 00 00 00 00       	mov    eax,0x0
c001dfa3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dfa6:	5b                   	pop    ebx
c001dfa7:	5e                   	pop    esi
c001dfa8:	5f                   	pop    edi
c001dfa9:	5d                   	pop    ebp
c001dfaa:	c3                   	ret    
c001dfab:	90                   	nop

c001dfac <IOAPIC::write(int, int)>:
c001dfac:	55                   	push   ebp
c001dfad:	89 e5                	mov    ebp,esp
c001dfaf:	83 ec 10             	sub    esp,0x10
c001dfb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfb5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dfbb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dfbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dfc1:	31 d2                	xor    edx,edx
c001dfc3:	88 c2                	mov    dl,al
c001dfc5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dfc8:	89 10                	mov    DWORD PTR [eax],edx
c001dfca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dfcd:	8d 50 10             	lea    edx,[eax+0x10]
c001dfd0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dfd3:	89 02                	mov    DWORD PTR [edx],eax
c001dfd5:	90                   	nop
c001dfd6:	c9                   	leave  
c001dfd7:	c3                   	ret    

c001dfd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001dfd8:	55                   	push   ebp
c001dfd9:	89 e5                	mov    ebp,esp
c001dfdb:	83 ec 20             	sub    esp,0x20
c001dfde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dfe1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dfe4:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dfe7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dfea:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001dfed:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dff0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dff3:	88 d0                	mov    al,dl
c001dff5:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001dff8:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001dffb:	25 ff 00 00 00       	and    eax,0xff
c001e000:	83 c0 08             	add    eax,0x8
c001e003:	01 c0                	add    eax,eax
c001e005:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e008:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e00b:	25 ff 00 00 00       	and    eax,0xff
c001e010:	83 c0 08             	add    eax,0x8
c001e013:	01 c0                	add    eax,eax
c001e015:	40                   	inc    eax
c001e016:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e019:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e01c:	50                   	push   eax
c001e01d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e020:	e8 57 fe ff ff       	call   c001de7c <IOAPIC::read(int)>
c001e025:	83 c4 08             	add    esp,0x8
c001e028:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e02b:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e032:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e035:	c1 e0 18             	shl    eax,0x18
c001e038:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e03b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e03e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e041:	52                   	push   edx
c001e042:	50                   	push   eax
c001e043:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e046:	e8 61 ff ff ff       	call   c001dfac <IOAPIC::write(int, int)>
c001e04b:	83 c4 0c             	add    esp,0xc
c001e04e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e051:	50                   	push   eax
c001e052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e055:	e8 22 fe ff ff       	call   c001de7c <IOAPIC::read(int)>
c001e05a:	83 c4 08             	add    esp,0x8
c001e05d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e060:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e067:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e06e:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e075:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e07c:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e07f:	25 ff 00 00 00       	and    eax,0xff
c001e084:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e087:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e08a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e08d:	52                   	push   edx
c001e08e:	50                   	push   eax
c001e08f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e092:	e8 15 ff ff ff       	call   c001dfac <IOAPIC::write(int, int)>
c001e097:	83 c4 0c             	add    esp,0xc
c001e09a:	90                   	nop
c001e09b:	c9                   	leave  
c001e09c:	c3                   	ret    
c001e09d:	90                   	nop

c001e09e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e09e:	55                   	push   ebp
c001e09f:	89 e5                	mov    ebp,esp
c001e0a1:	56                   	push   esi
c001e0a2:	53                   	push   ebx
c001e0a3:	83 ec 20             	sub    esp,0x20
c001e0a6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e0a9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e0ac:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e0b0:	74 2a                	je     c001e0dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e0b2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e0b6:	7f 14                	jg     c001e0cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e0b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e0bb:	05 60 37 02 c0       	add    eax,0xc0023760
c001e0c0:	8a 00                	mov    al,BYTE PTR [eax]
c001e0c2:	25 ff 00 00 00       	and    eax,0xff
c001e0c7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e0ca:	eb 10                	jmp    c001e0dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e0cc:	83 ec 0c             	sub    esp,0xc
c001e0cf:	68 28 32 02 c0       	push   0xc0023228
c001e0d4:	e8 19 72 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001e0d9:	83 c4 10             	add    esp,0x10
c001e0dc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e0e0:	a1 c0 5d 02 c0       	mov    eax,ds:0xc0025dc0
c001e0e5:	83 ec 08             	sub    esp,0x8
c001e0e8:	50                   	push   eax
c001e0e9:	68 60 32 02 c0       	push   0xc0023260
c001e0ee:	e8 40 10 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001e0f3:	83 c4 10             	add    esp,0x10
c001e0f6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e0fd:	a1 c0 5d 02 c0       	mov    eax,ds:0xc0025dc0
c001e102:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e105:	7d 64                	jge    c001e16b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e107:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e10a:	8b 04 85 e0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda220]
c001e111:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e114:	83 ec 08             	sub    esp,0x8
c001e117:	52                   	push   edx
c001e118:	50                   	push   eax
c001e119:	e8 2c fd ff ff       	call   c001de4a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e11e:	83 c4 10             	add    esp,0x10
c001e121:	84 c0                	test   al,al
c001e123:	74 41                	je     c001e166 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e125:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e128:	8b 1c 85 e0 5d 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffda220]
c001e12f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e132:	83 c0 20             	add    eax,0x20
c001e135:	89 c6                	mov    esi,eax
c001e137:	81 e6 ff 00 00 00    	and    esi,0xff
c001e13d:	e8 41 60 ff ff       	call   c0014183 <getCPUNumber()>
c001e142:	89 c2                	mov    edx,eax
c001e144:	c1 fa 1f             	sar    edx,0x1f
c001e147:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e14a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e150:	83 ec 0c             	sub    esp,0xc
c001e153:	56                   	push   esi
c001e154:	52                   	push   edx
c001e155:	50                   	push   eax
c001e156:	51                   	push   ecx
c001e157:	53                   	push   ebx
c001e158:	e8 7b fe ff ff       	call   c001dfd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e15d:	83 c4 20             	add    esp,0x20
c001e160:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e164:	eb 05                	jmp    c001e16b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e166:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e169:	eb 92                	jmp    c001e0fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e16b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e16e:	83 f0 01             	xor    eax,0x1
c001e171:	84 c0                	test   al,al
c001e173:	74 10                	je     c001e185 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e175:	83 ec 0c             	sub    esp,0xc
c001e178:	68 77 32 02 c0       	push   0xc0023277
c001e17d:	e8 70 71 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001e182:	83 c4 10             	add    esp,0x10
c001e185:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e189:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e190:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e194:	7f 65                	jg     c001e1fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e196:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e199:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e19c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e1a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e1a6:	01 ca                	add    edx,ecx
c001e1a8:	83 c2 54             	add    edx,0x54
c001e1ab:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e1af:	85 c0                	test   eax,eax
c001e1b1:	75 43                	jne    c001e1f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e1b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e1b9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e1c0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e1c3:	01 ca                	add    edx,ecx
c001e1c5:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e1c8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e1cb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e1cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e1d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e1dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e1df:	01 ca                	add    edx,ecx
c001e1e1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e1e7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e1ea:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e1ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1f1:	83 e8 20             	sub    eax,0x20
c001e1f4:	eb 1a                	jmp    c001e210 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e1f6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e1f9:	eb 95                	jmp    c001e190 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e1fb:	83 ec 0c             	sub    esp,0xc
c001e1fe:	68 84 32 02 c0       	push   0xc0023284
c001e203:	e8 ea 70 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e210:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e213:	5b                   	pop    ebx
c001e214:	5e                   	pop    esi
c001e215:	5d                   	pop    ebp
c001e216:	c3                   	ret    
c001e217:	90                   	nop

c001e218 <PIC::disable()>:
c001e218:	55                   	push   ebp
c001e219:	89 e5                	mov    ebp,esp
c001e21b:	83 ec 10             	sub    esp,0x10
c001e21e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e224:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e228:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e22b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e22f:	ee                   	out    dx,al
c001e230:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e236:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e23a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e23d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e241:	ee                   	out    dx,al
c001e242:	90                   	nop
c001e243:	c9                   	leave  
c001e244:	c3                   	ret    
c001e245:	90                   	nop

c001e246 <PIC::close(int, int, void*)>:
c001e246:	55                   	push   ebp
c001e247:	89 e5                	mov    ebp,esp
c001e249:	83 ec 08             	sub    esp,0x8
c001e24c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e24f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e251:	83 c0 3c             	add    eax,0x3c
c001e254:	8b 00                	mov    eax,DWORD PTR [eax]
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e25c:	ff d0                	call   eax
c001e25e:	83 c4 10             	add    esp,0x10
c001e261:	b8 00 00 00 00       	mov    eax,0x0
c001e266:	c9                   	leave  
c001e267:	c3                   	ret    

c001e268 <PIC::PIC()>:
c001e268:	83 ec 0c             	sub    esp,0xc
c001e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e26f:	83 ec 08             	sub    esp,0x8
c001e272:	68 30 33 02 c0       	push   0xc0023330
c001e277:	50                   	push   eax
c001e278:	e8 07 2c ff ff       	call   c0010e84 <InterruptController::InterruptController(char const*)>
c001e27d:	83 c4 10             	add    esp,0x10
c001e280:	ba 5c 33 02 c0       	mov    edx,0xc002335c
c001e285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e289:	89 10                	mov    DWORD PTR [eax],edx
c001e28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e295:	31 d2                	xor    edx,edx
c001e297:	88 c2                	mov    dl,al
c001e299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29d:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2ae:	31 d2                	xor    edx,edx
c001e2b0:	88 c2                	mov    dl,al
c001e2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2c5:	8d 50 01             	lea    edx,[eax+0x1]
c001e2c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e2cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e2d2:	31 d2                	xor    edx,edx
c001e2d4:	88 c2                	mov    dl,al
c001e2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2da:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e2de:	83 e1 3f             	and    ecx,0x3f
c001e2e1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2ef:	31 d2                	xor    edx,edx
c001e2f1:	88 c2                	mov    dl,al
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e302:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e308:	31 d2                	xor    edx,edx
c001e30a:	88 c2                	mov    dl,al
c001e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e310:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e319:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e31f:	8d 50 01             	lea    edx,[eax+0x1]
c001e322:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e326:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e32c:	31 d2                	xor    edx,edx
c001e32e:	88 c2                	mov    dl,al
c001e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e334:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e338:	83 e1 3f             	and    ecx,0x3f
c001e33b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e33f:	90                   	nop
c001e340:	83 c4 0c             	add    esp,0xc
c001e343:	c3                   	ret    

c001e344 <PIC::ioWait()>:
c001e344:	eb 00                	jmp    c001e346 <PIC::ioWait()+0x2>
c001e346:	eb 00                	jmp    c001e348 <PIC::ioWait()+0x4>
c001e348:	90                   	nop
c001e349:	c3                   	ret    

c001e34a <PIC::getIRQReg(int)>:
c001e34a:	55                   	push   ebp
c001e34b:	89 e5                	mov    ebp,esp
c001e34d:	83 ec 10             	sub    esp,0x10
c001e350:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e353:	25 ff 00 00 00       	and    eax,0xff
c001e358:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e35e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e361:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e364:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e368:	ee                   	out    dx,al
c001e369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e36c:	25 ff 00 00 00       	and    eax,0xff
c001e371:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e377:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e37a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e37d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e381:	ee                   	out    dx,al
c001e382:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e388:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e38c:	89 c2                	mov    edx,eax
c001e38e:	ec                   	in     al,dx
c001e38f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e392:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e395:	25 ff 00 00 00       	and    eax,0xff
c001e39a:	c1 e0 08             	shl    eax,0x8
c001e39d:	89 c1                	mov    ecx,eax
c001e39f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e3a5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e3a9:	89 c2                	mov    edx,eax
c001e3ab:	ec                   	in     al,dx
c001e3ac:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e3af:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e3b2:	25 ff 00 00 00       	and    eax,0xff
c001e3b7:	09 c8                	or     eax,ecx
c001e3b9:	c9                   	leave  
c001e3ba:	c3                   	ret    
c001e3bb:	90                   	nop

c001e3bc <PIC::eoi(unsigned char)>:
c001e3bc:	55                   	push   ebp
c001e3bd:	89 e5                	mov    ebp,esp
c001e3bf:	83 ec 14             	sub    esp,0x14
c001e3c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3c5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e3c8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e3cc:	75 23                	jne    c001e3f1 <PIC::eoi(unsigned char)+0x35>
c001e3ce:	6a 0b                	push   0xb
c001e3d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3d3:	e8 72 ff ff ff       	call   c001e34a <PIC::getIRQReg(int)>
c001e3d8:	83 c4 08             	add    esp,0x8
c001e3db:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e3df:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e3e3:	25 ff ff 00 00       	and    eax,0xffff
c001e3e8:	25 80 00 00 00       	and    eax,0x80
c001e3ed:	85 c0                	test   eax,eax
c001e3ef:	74 5f                	je     c001e450 <PIC::eoi(unsigned char)+0x94>
c001e3f1:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e3f5:	75 2d                	jne    c001e424 <PIC::eoi(unsigned char)+0x68>
c001e3f7:	6a 0b                	push   0xb
c001e3f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3fc:	e8 49 ff ff ff       	call   c001e34a <PIC::getIRQReg(int)>
c001e401:	83 c4 08             	add    esp,0x8
c001e404:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e408:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e40b:	66 85 c0             	test   ax,ax
c001e40e:	78 14                	js     c001e424 <PIC::eoi(unsigned char)+0x68>
c001e410:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e416:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e41a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e41d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e421:	ee                   	out    dx,al
c001e422:	eb 2d                	jmp    c001e451 <PIC::eoi(unsigned char)+0x95>
c001e424:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e428:	76 12                	jbe    c001e43c <PIC::eoi(unsigned char)+0x80>
c001e42a:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e430:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e434:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e437:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e43b:	ee                   	out    dx,al
c001e43c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e442:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e446:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e449:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e44d:	ee                   	out    dx,al
c001e44e:	eb 01                	jmp    c001e451 <PIC::eoi(unsigned char)+0x95>
c001e450:	90                   	nop
c001e451:	c9                   	leave  
c001e452:	c3                   	ret    
c001e453:	90                   	nop

c001e454 <PIC::remap()>:
c001e454:	55                   	push   ebp
c001e455:	89 e5                	mov    ebp,esp
c001e457:	83 ec 48             	sub    esp,0x48
c001e45a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e461:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e468:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e46e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e471:	89 c2                	mov    edx,eax
c001e473:	ec                   	in     al,dx
c001e474:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e477:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e47a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e47d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e483:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e486:	89 c2                	mov    edx,eax
c001e488:	ec                   	in     al,dx
c001e489:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e48c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e48f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e492:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e498:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e49c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e49f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e4a2:	ee                   	out    dx,al
c001e4a3:	83 ec 0c             	sub    esp,0xc
c001e4a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4a9:	e8 96 fe ff ff       	call   c001e344 <PIC::ioWait()>
c001e4ae:	83 c4 10             	add    esp,0x10
c001e4b1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e4b7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e4bb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e4be:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e4c1:	ee                   	out    dx,al
c001e4c2:	83 ec 0c             	sub    esp,0xc
c001e4c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4c8:	e8 77 fe ff ff       	call   c001e344 <PIC::ioWait()>
c001e4cd:	83 c4 10             	add    esp,0x10
c001e4d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e4d3:	25 ff 00 00 00       	and    eax,0xff
c001e4d8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e4de:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e4e1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e4e4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e4e7:	ee                   	out    dx,al
c001e4e8:	83 ec 0c             	sub    esp,0xc
c001e4eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4ee:	e8 51 fe ff ff       	call   c001e344 <PIC::ioWait()>
c001e4f3:	83 c4 10             	add    esp,0x10
c001e4f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4f9:	25 ff 00 00 00       	and    eax,0xff
c001e4fe:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e504:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e507:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e50a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e50d:	ee                   	out    dx,al
c001e50e:	83 ec 0c             	sub    esp,0xc
c001e511:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e514:	e8 2b fe ff ff       	call   c001e344 <PIC::ioWait()>
c001e519:	83 c4 10             	add    esp,0x10
c001e51c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e522:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e526:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e529:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e52c:	ee                   	out    dx,al
c001e52d:	83 ec 0c             	sub    esp,0xc
c001e530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e533:	e8 0c fe ff ff       	call   c001e344 <PIC::ioWait()>
c001e538:	83 c4 10             	add    esp,0x10
c001e53b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e541:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e545:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e548:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e54b:	ee                   	out    dx,al
c001e54c:	83 ec 0c             	sub    esp,0xc
c001e54f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e552:	e8 ed fd ff ff       	call   c001e344 <PIC::ioWait()>
c001e557:	83 c4 10             	add    esp,0x10
c001e55a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e560:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e564:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e567:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e56a:	ee                   	out    dx,al
c001e56b:	83 ec 0c             	sub    esp,0xc
c001e56e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e571:	e8 ce fd ff ff       	call   c001e344 <PIC::ioWait()>
c001e576:	83 c4 10             	add    esp,0x10
c001e579:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e57f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e583:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e586:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e589:	ee                   	out    dx,al
c001e58a:	83 ec 0c             	sub    esp,0xc
c001e58d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e590:	e8 af fd ff ff       	call   c001e344 <PIC::ioWait()>
c001e595:	83 c4 10             	add    esp,0x10
c001e598:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001e59b:	25 ff 00 00 00       	and    eax,0xff
c001e5a0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e5a6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e5a9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e5ac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e5af:	ee                   	out    dx,al
c001e5b0:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001e5b3:	25 ff 00 00 00       	and    eax,0xff
c001e5b8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e5be:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e5c1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e5c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e5c7:	ee                   	out    dx,al
c001e5c8:	90                   	nop
c001e5c9:	c9                   	leave  
c001e5ca:	c3                   	ret    
c001e5cb:	90                   	nop

c001e5cc <PIC::open(int, int, void*)>:
c001e5cc:	55                   	push   ebp
c001e5cd:	89 e5                	mov    ebp,esp
c001e5cf:	83 ec 18             	sub    esp,0x18
c001e5d2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001e5d8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001e5dc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e5df:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e5e3:	ee                   	out    dx,al
c001e5e4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001e5ea:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001e5ee:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e5f1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e5f5:	ee                   	out    dx,al
c001e5f6:	83 ec 0c             	sub    esp,0xc
c001e5f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5fc:	e8 53 fe ff ff       	call   c001e454 <PIC::remap()>
c001e601:	83 c4 10             	add    esp,0x10
c001e604:	b8 00 00 00 00       	mov    eax,0x0
c001e609:	c9                   	leave  
c001e60a:	c3                   	ret    
c001e60b:	90                   	nop

c001e60c <APICTimer::close(int, int, void*)>:
c001e60c:	b8 00 00 00 00       	mov    eax,0x0
c001e611:	c3                   	ret    

c001e612 <apicTimerHandler(regs*, void*)>:
c001e612:	83 ec 0c             	sub    esp,0xc
c001e615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e619:	8b 00                	mov    eax,DWORD PTR [eax]
c001e61b:	89 c2                	mov    edx,eax
c001e61d:	c1 fa 1f             	sar    edx,0x1f
c001e620:	52                   	push   edx
c001e621:	50                   	push   eax
c001e622:	6a 00                	push   0x0
c001e624:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e629:	e8 8e 07 00 00       	call   c001edbc <__udivdi3>
c001e62e:	83 c4 10             	add    esp,0x10
c001e631:	83 ec 08             	sub    esp,0x8
c001e634:	52                   	push   edx
c001e635:	50                   	push   eax
c001e636:	e8 08 40 ff ff       	call   c0012643 <timerHandler(unsigned long long)>
c001e63b:	83 c4 10             	add    esp,0x10
c001e63e:	90                   	nop
c001e63f:	83 c4 0c             	add    esp,0xc
c001e642:	c3                   	ret    
c001e643:	90                   	nop

c001e644 <APICTimer::write(int)>:
c001e644:	53                   	push   ebx
c001e645:	83 ec 28             	sub    esp,0x28
c001e648:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e64c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e650:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e656:	e8 2b 5b ff ff       	call   c0014186 <thisCPU()>
c001e65b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e661:	83 ec 0c             	sub    esp,0xc
c001e664:	50                   	push   eax
c001e665:	e8 a2 f5 ff ff       	call   c001dc0c <APIC::getBase()>
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e671:	a1 70 46 02 c0       	mov    eax,ds:0xc0024670
c001e676:	8b 15 74 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024674
c001e67c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e680:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e688:	05 e0 03 00 00       	add    eax,0x3e0
c001e68d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e693:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e697:	05 80 03 00 00       	add    eax,0x380
c001e69c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e6a2:	fb                   	sti    
c001e6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6ab:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e6b0:	83 d2 00             	adc    edx,0x0
c001e6b3:	89 c1                	mov    ecx,eax
c001e6b5:	89 d3                	mov    ebx,edx
c001e6b7:	a1 70 46 02 c0       	mov    eax,ds:0xc0024670
c001e6bc:	8b 15 74 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024674
c001e6c2:	39 c8                	cmp    eax,ecx
c001e6c4:	89 d0                	mov    eax,edx
c001e6c6:	19 d8                	sbb    eax,ebx
c001e6c8:	73 02                	jae    c001e6cc <APICTimer::write(int)+0x88>
c001e6ca:	eb d7                	jmp    c001e6a3 <APICTimer::write(int)+0x5f>
c001e6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6d0:	05 20 03 00 00       	add    eax,0x320
c001e6d5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6df:	05 90 03 00 00       	add    eax,0x390
c001e6e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6e6:	f7 d0                	not    eax
c001e6e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6f4:	ba 00 00 00 00       	mov    edx,0x0
c001e6f9:	f7 f3                	div    ebx
c001e6fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e6ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e703:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e709:	0d 00 00 02 00       	or     eax,0x20000
c001e70e:	89 c2                	mov    edx,eax
c001e710:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e714:	05 20 03 00 00       	add    eax,0x320
c001e719:	89 10                	mov    DWORD PTR [eax],edx
c001e71b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e71f:	05 e0 03 00 00       	add    eax,0x3e0
c001e724:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e72a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e72e:	05 80 03 00 00       	add    eax,0x380
c001e733:	89 c2                	mov    edx,eax
c001e735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e739:	89 02                	mov    DWORD PTR [edx],eax
c001e73b:	90                   	nop
c001e73c:	83 c4 28             	add    esp,0x28
c001e73f:	5b                   	pop    ebx
c001e740:	c3                   	ret    
c001e741:	90                   	nop

c001e742 <APICTimer::open(int, int, void*)>:
c001e742:	57                   	push   edi
c001e743:	56                   	push   esi
c001e744:	53                   	push   ebx
c001e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e749:	8b 00                	mov    eax,DWORD PTR [eax]
c001e74b:	83 c0 24             	add    eax,0x24
c001e74e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e750:	83 ec 08             	sub    esp,0x8
c001e753:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e757:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e75b:	ff d0                	call   eax
c001e75d:	83 c4 10             	add    esp,0x10
c001e760:	e8 21 5a ff ff       	call   c0014186 <thisCPU()>
c001e765:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e76b:	83 ec 0c             	sub    esp,0xc
c001e76e:	50                   	push   eax
c001e76f:	e8 98 f4 ff ff       	call   c001dc0c <APIC::getBase()>
c001e774:	83 c4 10             	add    esp,0x10
c001e777:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e781:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e787:	89 c7                	mov    edi,eax
c001e789:	81 e7 ff 00 00 00    	and    edi,0xff
c001e78f:	89 d0                	mov    eax,edx
c001e791:	ba 00 00 00 00       	mov    edx,0x0
c001e796:	89 c1                	mov    ecx,eax
c001e798:	80 e5 ff             	and    ch,0xff
c001e79b:	89 cb                	mov    ebx,ecx
c001e79d:	89 d0                	mov    eax,edx
c001e79f:	25 ff 00 00 00       	and    eax,0xff
c001e7a4:	89 c6                	mov    esi,eax
c001e7a6:	89 d8                	mov    eax,ebx
c001e7a8:	89 f2                	mov    edx,esi
c001e7aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7ae:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e7b1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e7b5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e7b9:	83 e0 00             	and    eax,0x0
c001e7bc:	09 d0                	or     eax,edx
c001e7be:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c001e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7d3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e7d9:	31 d2                	xor    edx,edx
c001e7db:	88 c2                	mov    dl,al
c001e7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7e1:	83 c2 08             	add    edx,0x8
c001e7e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e7e8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e7ee:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e7f4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e800:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e80e:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e814:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e818:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e81e:	83 ec 0c             	sub    esp,0xc
c001e821:	51                   	push   ecx
c001e822:	6a 01                	push   0x1
c001e824:	68 12 e6 01 c0       	push   0xc001e612
c001e829:	52                   	push   edx
c001e82a:	50                   	push   eax
c001e82b:	e8 6c 1c ff ff       	call   c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e830:	83 c4 20             	add    esp,0x20
c001e833:	89 c2                	mov    edx,eax
c001e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e839:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e83f:	b8 00 00 00 00       	mov    eax,0x0
c001e844:	5b                   	pop    ebx
c001e845:	5e                   	pop    esi
c001e846:	5f                   	pop    edi
c001e847:	c3                   	ret    

c001e848 <APICTimer::APICTimer()>:
c001e848:	83 ec 0c             	sub    esp,0xc
c001e84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84f:	83 ec 08             	sub    esp,0x8
c001e852:	68 9c 33 02 c0       	push   0xc002339c
c001e857:	50                   	push   eax
c001e858:	e8 57 3d ff ff       	call   c00125b4 <Timer::Timer(char const*)>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	ba b0 33 02 c0       	mov    edx,0xc00233b0
c001e865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e869:	89 10                	mov    DWORD PTR [eax],edx
c001e86b:	90                   	nop
c001e86c:	83 c4 0c             	add    esp,0xc
c001e86f:	c3                   	ret    

c001e870 <PIT::write(int)>:
c001e870:	83 ec 10             	sub    esp,0x10
c001e873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e87b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e881:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e885:	a3 04 5e 02 c0       	mov    ds:0xc0025e04,eax
c001e88a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e88f:	89 c2                	mov    edx,eax
c001e891:	c1 fa 1f             	sar    edx,0x1f
c001e894:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e89c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e8a3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8a8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8ac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e8b1:	ee                   	out    dx,al
c001e8b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8b6:	25 ff 00 00 00       	and    eax,0xff
c001e8bb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8c2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8c6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8ca:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8cf:	ee                   	out    dx,al
c001e8d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8d4:	c1 f8 08             	sar    eax,0x8
c001e8d7:	25 ff 00 00 00       	and    eax,0xff
c001e8dc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8e3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8eb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8f0:	ee                   	out    dx,al
c001e8f1:	90                   	nop
c001e8f2:	83 c4 10             	add    esp,0x10
c001e8f5:	c3                   	ret    

c001e8f6 <pitHandler(regs*, void*)>:
c001e8f6:	83 ec 0c             	sub    esp,0xc
c001e8f9:	a1 04 5e 02 c0       	mov    eax,ds:0xc0025e04
c001e8fe:	89 c2                	mov    edx,eax
c001e900:	c1 fa 1f             	sar    edx,0x1f
c001e903:	52                   	push   edx
c001e904:	50                   	push   eax
c001e905:	6a 00                	push   0x0
c001e907:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e90c:	e8 ab 04 00 00       	call   c001edbc <__udivdi3>
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	83 ec 08             	sub    esp,0x8
c001e917:	52                   	push   edx
c001e918:	50                   	push   eax
c001e919:	e8 25 3d ff ff       	call   c0012643 <timerHandler(unsigned long long)>
c001e91e:	83 c4 10             	add    esp,0x10
c001e921:	90                   	nop
c001e922:	83 c4 0c             	add    esp,0xc
c001e925:	c3                   	ret    

c001e926 <PIT::open(int, int, void*)>:
c001e926:	83 ec 0c             	sub    esp,0xc
c001e929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e92f:	83 c0 24             	add    eax,0x24
c001e932:	8b 00                	mov    eax,DWORD PTR [eax]
c001e934:	83 ec 08             	sub    esp,0x8
c001e937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e93f:	ff d0                	call   eax
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e948:	83 ec 0c             	sub    esp,0xc
c001e94b:	6a 00                	push   0x0
c001e94d:	6a 01                	push   0x1
c001e94f:	68 f6 e8 01 c0       	push   0xc001e8f6
c001e954:	6a 00                	push   0x0
c001e956:	50                   	push   eax
c001e957:	e8 40 1b ff ff       	call   c001049c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e95c:	83 c4 20             	add    esp,0x20
c001e95f:	89 c2                	mov    edx,eax
c001e961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e965:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e96b:	b8 00 00 00 00       	mov    eax,0x0
c001e970:	83 c4 0c             	add    esp,0xc
c001e973:	c3                   	ret    

c001e974 <PIT::close(int, int, void*)>:
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e989:	6a 01                	push   0x1
c001e98b:	68 f6 e8 01 c0       	push   0xc001e8f6
c001e990:	6a 00                	push   0x0
c001e992:	50                   	push   eax
c001e993:	e8 62 1b ff ff       	call   c00104fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	b8 00 00 00 00       	mov    eax,0x0
c001e9a0:	83 c4 0c             	add    esp,0xc
c001e9a3:	c3                   	ret    

c001e9a4 <PIT::PIT()>:
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ab:	83 ec 08             	sub    esp,0x8
c001e9ae:	68 d8 33 02 c0       	push   0xc00233d8
c001e9b3:	50                   	push   eax
c001e9b4:	e8 fb 3b ff ff       	call   c00125b4 <Timer::Timer(char const*)>
c001e9b9:	83 c4 10             	add    esp,0x10
c001e9bc:	ba 00 34 02 c0       	mov    edx,0xc0023400
c001e9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c5:	89 10                	mov    DWORD PTR [eax],edx
c001e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9d1:	31 d2                	xor    edx,edx
c001e9d3:	88 c2                	mov    dl,al
c001e9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d9:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9ea:	31 d2                	xor    edx,edx
c001e9ec:	88 c2                	mov    dl,al
c001e9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea01:	8d 50 01             	lea    edx,[eax+0x1]
c001ea04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea08:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea0e:	31 d2                	xor    edx,edx
c001ea10:	88 c2                	mov    dl,al
c001ea12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea16:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea1a:	83 e1 3f             	and    ecx,0x3f
c001ea1d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea21:	90                   	nop
c001ea22:	83 c4 0c             	add    esp,0xc
c001ea25:	c3                   	ret    
c001ea26:	66 90                	xchg   ax,ax
c001ea28:	66 90                	xchg   ax,ax
c001ea2a:	66 90                	xchg   ax,ax
c001ea2c:	66 90                	xchg   ax,ax
c001ea2e:	66 90                	xchg   ax,ax

c001ea30 <avxDetect>:
c001ea30:	b8 00 00 00 00       	mov    eax,0x0
c001ea35:	c3                   	ret    

c001ea36 <avxSave>:
c001ea36:	c3                   	ret    

c001ea37 <avxLoad>:
c001ea37:	c3                   	ret    

c001ea38 <avxInit>:
c001ea38:	c3                   	ret    

c001ea39 <avxClose>:
c001ea39:	c3                   	ret    
c001ea3a:	66 90                	xchg   ax,ax
c001ea3c:	66 90                	xchg   ax,ax
c001ea3e:	66 90                	xchg   ax,ax

c001ea40 <sseDetect>:
c001ea40:	b8 01 00 00 00       	mov    eax,0x1
c001ea45:	0f a2                	cpuid  
c001ea47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ea4d:	74 06                	je     c001ea55 <sseDetect.noSSE>
c001ea4f:	b8 01 00 00 00       	mov    eax,0x1
c001ea54:	c3                   	ret    

c001ea55 <sseDetect.noSSE>:
c001ea55:	b8 00 00 00 00       	mov    eax,0x0
c001ea5a:	c3                   	ret    

c001ea5b <sseSave>:
c001ea5b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001ea60:	c3                   	ret    

c001ea61 <sseLoad>:
c001ea61:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001ea66:	c3                   	ret    

c001ea67 <sseInit>:
c001ea67:	e8 40 00 00 00       	call   c001eaac <x87Init>
c001ea6c:	0f 20 e0             	mov    eax,cr4
c001ea6f:	66 0d 00 06          	or     ax,0x600
c001ea73:	0f 22 e0             	mov    cr4,eax
c001ea76:	c3                   	ret    

c001ea77 <sseClose>:
c001ea77:	c3                   	ret    
c001ea78:	66 90                	xchg   ax,ax
c001ea7a:	66 90                	xchg   ax,ax
c001ea7c:	66 90                	xchg   ax,ax
c001ea7e:	66 90                	xchg   ax,ax

c001ea80 <value_37F>:
c001ea80:	7f 03                	jg     c001ea85 <value_37A+0x1>

c001ea82 <value_37E>:
c001ea82:	7e 03                	jle    c001ea87 <x87Detect+0x1>

c001ea84 <value_37A>:
c001ea84:	7a 03                	jp     c001ea89 <x87Detect+0x3>

c001ea86 <x87Detect>:
c001ea86:	b8 01 00 00 00       	mov    eax,0x1
c001ea8b:	0f a2                	cpuid  
c001ea8d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ea93:	74 06                	je     c001ea9b <x87Detect.nox87>
c001ea95:	b8 01 00 00 00       	mov    eax,0x1
c001ea9a:	c3                   	ret    

c001ea9b <x87Detect.nox87>:
c001ea9b:	b8 00 00 00 00       	mov    eax,0x0
c001eaa0:	c3                   	ret    

c001eaa1 <x87Save>:
c001eaa1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001eaa6:	c3                   	ret    

c001eaa7 <x87Load>:
c001eaa7:	dd 64 24 08          	frstor [esp+0x8]
c001eaab:	c3                   	ret    

c001eaac <x87Init>:
c001eaac:	9b db e3             	finit  
c001eaaf:	0f 20 c0             	mov    eax,cr0
c001eab2:	66 25 fb ff          	and    ax,0xfffb
c001eab6:	66 0d 22 00          	or     ax,0x22
c001eaba:	0f 22 c0             	mov    cr0,eax
c001eabd:	0f 06                	clts   
c001eabf:	d9 2d 84 ea 01 c0    	fldcw  WORD PTR ds:0xc001ea84
c001eac5:	c3                   	ret    

c001eac6 <x87Close>:
c001eac6:	c3                   	ret    
c001eac7:	90                   	nop

c001eac8 <__do_global_ctors_aux>:
c001eac8:	a1 a8 fb 01 c0       	mov    eax,ds:0xc001fba8
c001eacd:	83 f8 ff             	cmp    eax,0xffffffff
c001ead0:	74 1a                	je     c001eaec <__do_global_ctors_aux+0x24>
c001ead2:	55                   	push   ebp
c001ead3:	89 e5                	mov    ebp,esp
c001ead5:	53                   	push   ebx
c001ead6:	52                   	push   edx
c001ead7:	bb a8 fb 01 c0       	mov    ebx,0xc001fba8
c001eadc:	ff d0                	call   eax
c001eade:	83 eb 04             	sub    ebx,0x4
c001eae1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eae3:	83 f8 ff             	cmp    eax,0xffffffff
c001eae6:	75 f4                	jne    c001eadc <__do_global_ctors_aux+0x14>
c001eae8:	58                   	pop    eax
c001eae9:	5b                   	pop    ebx
c001eaea:	5d                   	pop    ebp
c001eaeb:	c3                   	ret    
c001eaec:	c3                   	ret    
c001eaed:	66 90                	xchg   ax,ax
c001eaef:	90                   	nop

c001eaf0 <__divdi3>:
c001eaf0:	55                   	push   ebp
c001eaf1:	57                   	push   edi
c001eaf2:	56                   	push   esi
c001eaf3:	53                   	push   ebx
c001eaf4:	83 ec 1c             	sub    esp,0x1c
c001eaf7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eafb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eaff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eb02:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eb06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eb0e:	85 db                	test   ebx,ebx
c001eb10:	0f 88 8e 00 00 00    	js     c001eba4 <__divdi3+0xb4>
c001eb16:	89 dd                	mov    ebp,ebx
c001eb18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001eb20:	89 d3                	mov    ebx,edx
c001eb22:	85 d2                	test   edx,edx
c001eb24:	79 0d                	jns    c001eb33 <__divdi3+0x43>
c001eb26:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001eb2a:	f7 d8                	neg    eax
c001eb2c:	83 d2 00             	adc    edx,0x0
c001eb2f:	f7 da                	neg    edx
c001eb31:	89 d3                	mov    ebx,edx
c001eb33:	89 c7                	mov    edi,eax
c001eb35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eb38:	85 db                	test   ebx,ebx
c001eb3a:	75 48                	jne    c001eb84 <__divdi3+0x94>
c001eb3c:	39 ef                	cmp    edi,ebp
c001eb3e:	76 24                	jbe    c001eb64 <__divdi3+0x74>
c001eb40:	89 ea                	mov    edx,ebp
c001eb42:	f7 f7                	div    edi
c001eb44:	89 c1                	mov    ecx,eax
c001eb46:	31 f6                	xor    esi,esi
c001eb48:	89 c8                	mov    eax,ecx
c001eb4a:	89 f2                	mov    edx,esi
c001eb4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb50:	85 c9                	test   ecx,ecx
c001eb52:	74 07                	je     c001eb5b <__divdi3+0x6b>
c001eb54:	f7 d8                	neg    eax
c001eb56:	83 d2 00             	adc    edx,0x0
c001eb59:	f7 da                	neg    edx
c001eb5b:	83 c4 1c             	add    esp,0x1c
c001eb5e:	5b                   	pop    ebx
c001eb5f:	5e                   	pop    esi
c001eb60:	5f                   	pop    edi
c001eb61:	5d                   	pop    ebp
c001eb62:	c3                   	ret    
c001eb63:	90                   	nop
c001eb64:	85 ff                	test   edi,edi
c001eb66:	75 0b                	jne    c001eb73 <__divdi3+0x83>
c001eb68:	b8 01 00 00 00       	mov    eax,0x1
c001eb6d:	31 d2                	xor    edx,edx
c001eb6f:	f7 f3                	div    ebx
c001eb71:	89 c7                	mov    edi,eax
c001eb73:	31 d2                	xor    edx,edx
c001eb75:	89 e8                	mov    eax,ebp
c001eb77:	f7 f7                	div    edi
c001eb79:	89 c6                	mov    esi,eax
c001eb7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eb7e:	f7 f7                	div    edi
c001eb80:	89 c1                	mov    ecx,eax
c001eb82:	eb c4                	jmp    c001eb48 <__divdi3+0x58>
c001eb84:	39 eb                	cmp    ebx,ebp
c001eb86:	77 3c                	ja     c001ebc4 <__divdi3+0xd4>
c001eb88:	0f bd f3             	bsr    esi,ebx
c001eb8b:	83 f6 1f             	xor    esi,0x1f
c001eb8e:	75 40                	jne    c001ebd0 <__divdi3+0xe0>
c001eb90:	39 eb                	cmp    ebx,ebp
c001eb92:	72 09                	jb     c001eb9d <__divdi3+0xad>
c001eb94:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001eb97:	0f 87 97 00 00 00    	ja     c001ec34 <__divdi3+0x144>
c001eb9d:	b9 01 00 00 00       	mov    ecx,0x1
c001eba2:	eb a4                	jmp    c001eb48 <__divdi3+0x58>
c001eba4:	f7 d9                	neg    ecx
c001eba6:	83 d3 00             	adc    ebx,0x0
c001eba9:	f7 db                	neg    ebx
c001ebab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ebae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ebb2:	89 dd                	mov    ebp,ebx
c001ebb4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ebbc:	e9 5f ff ff ff       	jmp    c001eb20 <__divdi3+0x30>
c001ebc1:	8d 76 00             	lea    esi,[esi+0x0]
c001ebc4:	31 f6                	xor    esi,esi
c001ebc6:	31 c9                	xor    ecx,ecx
c001ebc8:	e9 7b ff ff ff       	jmp    c001eb48 <__divdi3+0x58>
c001ebcd:	8d 76 00             	lea    esi,[esi+0x0]
c001ebd0:	b8 20 00 00 00       	mov    eax,0x20
c001ebd5:	29 f0                	sub    eax,esi
c001ebd7:	89 f1                	mov    ecx,esi
c001ebd9:	d3 e3                	shl    ebx,cl
c001ebdb:	89 fa                	mov    edx,edi
c001ebdd:	88 c1                	mov    cl,al
c001ebdf:	d3 ea                	shr    edx,cl
c001ebe1:	09 da                	or     edx,ebx
c001ebe3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebe7:	89 f1                	mov    ecx,esi
c001ebe9:	d3 e7                	shl    edi,cl
c001ebeb:	89 eb                	mov    ebx,ebp
c001ebed:	88 c1                	mov    cl,al
c001ebef:	d3 eb                	shr    ebx,cl
c001ebf1:	89 f1                	mov    ecx,esi
c001ebf3:	d3 e5                	shl    ebp,cl
c001ebf5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ebf8:	88 c1                	mov    cl,al
c001ebfa:	d3 ea                	shr    edx,cl
c001ebfc:	09 d5                	or     ebp,edx
c001ebfe:	89 e8                	mov    eax,ebp
c001ec00:	89 da                	mov    edx,ebx
c001ec02:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ec06:	89 d3                	mov    ebx,edx
c001ec08:	89 c5                	mov    ebp,eax
c001ec0a:	f7 e7                	mul    edi
c001ec0c:	39 d3                	cmp    ebx,edx
c001ec0e:	72 18                	jb     c001ec28 <__divdi3+0x138>
c001ec10:	74 0a                	je     c001ec1c <__divdi3+0x12c>
c001ec12:	89 e9                	mov    ecx,ebp
c001ec14:	31 f6                	xor    esi,esi
c001ec16:	e9 2d ff ff ff       	jmp    c001eb48 <__divdi3+0x58>
c001ec1b:	90                   	nop
c001ec1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ec1f:	89 f1                	mov    ecx,esi
c001ec21:	d3 e7                	shl    edi,cl
c001ec23:	39 c7                	cmp    edi,eax
c001ec25:	73 eb                	jae    c001ec12 <__divdi3+0x122>
c001ec27:	90                   	nop
c001ec28:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ec2b:	31 f6                	xor    esi,esi
c001ec2d:	e9 16 ff ff ff       	jmp    c001eb48 <__divdi3+0x58>
c001ec32:	66 90                	xchg   ax,ax
c001ec34:	31 c9                	xor    ecx,ecx
c001ec36:	e9 0d ff ff ff       	jmp    c001eb48 <__divdi3+0x58>
c001ec3b:	90                   	nop

c001ec3c <__moddi3>:
c001ec3c:	55                   	push   ebp
c001ec3d:	57                   	push   edi
c001ec3e:	56                   	push   esi
c001ec3f:	53                   	push   ebx
c001ec40:	83 ec 2c             	sub    esp,0x2c
c001ec43:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ec47:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ec4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ec4f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ec53:	85 db                	test   ebx,ebx
c001ec55:	0f 88 85 00 00 00    	js     c001ece0 <__moddi3+0xa4>
c001ec5b:	89 de                	mov    esi,ebx
c001ec5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ec65:	89 d7                	mov    edi,edx
c001ec67:	85 d2                	test   edx,edx
c001ec69:	79 09                	jns    c001ec74 <__moddi3+0x38>
c001ec6b:	f7 d8                	neg    eax
c001ec6d:	83 d2 00             	adc    edx,0x0
c001ec70:	f7 da                	neg    edx
c001ec72:	89 d7                	mov    edi,edx
c001ec74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec78:	89 cd                	mov    ebp,ecx
c001ec7a:	85 ff                	test   edi,edi
c001ec7c:	75 52                	jne    c001ecd0 <__moddi3+0x94>
c001ec7e:	89 c3                	mov    ebx,eax
c001ec80:	39 f0                	cmp    eax,esi
c001ec82:	76 24                	jbe    c001eca8 <__moddi3+0x6c>
c001ec84:	89 c8                	mov    eax,ecx
c001ec86:	89 f2                	mov    edx,esi
c001ec88:	f7 f3                	div    ebx
c001ec8a:	89 d6                	mov    esi,edx
c001ec8c:	89 f0                	mov    eax,esi
c001ec8e:	31 d2                	xor    edx,edx
c001ec90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec94:	85 c9                	test   ecx,ecx
c001ec96:	74 07                	je     c001ec9f <__moddi3+0x63>
c001ec98:	f7 d8                	neg    eax
c001ec9a:	83 d2 00             	adc    edx,0x0
c001ec9d:	f7 da                	neg    edx
c001ec9f:	83 c4 2c             	add    esp,0x2c
c001eca2:	5b                   	pop    ebx
c001eca3:	5e                   	pop    esi
c001eca4:	5f                   	pop    edi
c001eca5:	5d                   	pop    ebp
c001eca6:	c3                   	ret    
c001eca7:	90                   	nop
c001eca8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecac:	85 db                	test   ebx,ebx
c001ecae:	75 0d                	jne    c001ecbd <__moddi3+0x81>
c001ecb0:	b8 01 00 00 00       	mov    eax,0x1
c001ecb5:	31 d2                	xor    edx,edx
c001ecb7:	f7 f7                	div    edi
c001ecb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecbd:	89 f0                	mov    eax,esi
c001ecbf:	31 d2                	xor    edx,edx
c001ecc1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ecc5:	f7 f7                	div    edi
c001ecc7:	89 e8                	mov    eax,ebp
c001ecc9:	f7 f7                	div    edi
c001eccb:	89 d6                	mov    esi,edx
c001eccd:	eb bd                	jmp    c001ec8c <__moddi3+0x50>
c001eccf:	90                   	nop
c001ecd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ecd4:	39 f7                	cmp    edi,esi
c001ecd6:	76 20                	jbe    c001ecf8 <__moddi3+0xbc>
c001ecd8:	89 c8                	mov    eax,ecx
c001ecda:	89 f2                	mov    edx,esi
c001ecdc:	eb b2                	jmp    c001ec90 <__moddi3+0x54>
c001ecde:	66 90                	xchg   ax,ax
c001ece0:	f7 d9                	neg    ecx
c001ece2:	83 d3 00             	adc    ebx,0x0
c001ece5:	f7 db                	neg    ebx
c001ece7:	89 de                	mov    esi,ebx
c001ece9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ecf1:	e9 6f ff ff ff       	jmp    c001ec65 <__moddi3+0x29>
c001ecf6:	66 90                	xchg   ax,ax
c001ecf8:	0f bd c7             	bsr    eax,edi
c001ecfb:	83 f0 1f             	xor    eax,0x1f
c001ecfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ed02:	75 24                	jne    c001ed28 <__moddi3+0xec>
c001ed04:	39 f7                	cmp    edi,esi
c001ed06:	72 06                	jb     c001ed0e <__moddi3+0xd2>
c001ed08:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ed0c:	77 0c                	ja     c001ed1a <__moddi3+0xde>
c001ed0e:	89 e9                	mov    ecx,ebp
c001ed10:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ed14:	19 fe                	sbb    esi,edi
c001ed16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ed1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed1e:	89 f2                	mov    edx,esi
c001ed20:	e9 6b ff ff ff       	jmp    c001ec90 <__moddi3+0x54>
c001ed25:	8d 76 00             	lea    esi,[esi+0x0]
c001ed28:	b8 20 00 00 00       	mov    eax,0x20
c001ed2d:	89 c2                	mov    edx,eax
c001ed2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ed33:	29 da                	sub    edx,ebx
c001ed35:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ed39:	88 d9                	mov    cl,bl
c001ed3b:	d3 e7                	shl    edi,cl
c001ed3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed41:	88 d1                	mov    cl,dl
c001ed43:	d3 e8                	shr    eax,cl
c001ed45:	09 c7                	or     edi,eax
c001ed47:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001ed4b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ed4f:	89 d8                	mov    eax,ebx
c001ed51:	88 d9                	mov    cl,bl
c001ed53:	d3 e7                	shl    edi,cl
c001ed55:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ed59:	89 f3                	mov    ebx,esi
c001ed5b:	88 d1                	mov    cl,dl
c001ed5d:	d3 eb                	shr    ebx,cl
c001ed5f:	89 c7                	mov    edi,eax
c001ed61:	88 c1                	mov    cl,al
c001ed63:	d3 e6                	shl    esi,cl
c001ed65:	89 e8                	mov    eax,ebp
c001ed67:	88 d1                	mov    cl,dl
c001ed69:	d3 e8                	shr    eax,cl
c001ed6b:	09 f0                	or     eax,esi
c001ed6d:	89 f9                	mov    ecx,edi
c001ed6f:	d3 e5                	shl    ebp,cl
c001ed71:	89 da                	mov    edx,ebx
c001ed73:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001ed77:	89 d3                	mov    ebx,edx
c001ed79:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ed7d:	89 c6                	mov    esi,eax
c001ed7f:	89 d1                	mov    ecx,edx
c001ed81:	39 d3                	cmp    ebx,edx
c001ed83:	72 27                	jb     c001edac <__moddi3+0x170>
c001ed85:	74 21                	je     c001eda8 <__moddi3+0x16c>
c001ed87:	29 f5                	sub    ebp,esi
c001ed89:	19 cb                	sbb    ebx,ecx
c001ed8b:	89 de                	mov    esi,ebx
c001ed8d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001ed91:	d3 e6                	shl    esi,cl
c001ed93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ed97:	89 f9                	mov    ecx,edi
c001ed99:	d3 ed                	shr    ebp,cl
c001ed9b:	09 ee                	or     esi,ebp
c001ed9d:	89 f0                	mov    eax,esi
c001ed9f:	d3 eb                	shr    ebx,cl
c001eda1:	89 da                	mov    edx,ebx
c001eda3:	e9 e8 fe ff ff       	jmp    c001ec90 <__moddi3+0x54>
c001eda8:	39 c5                	cmp    ebp,eax
c001edaa:	73 db                	jae    c001ed87 <__moddi3+0x14b>
c001edac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001edb0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001edb4:	89 d1                	mov    ecx,edx
c001edb6:	89 c6                	mov    esi,eax
c001edb8:	eb cd                	jmp    c001ed87 <__moddi3+0x14b>
c001edba:	66 90                	xchg   ax,ax

c001edbc <__udivdi3>:
c001edbc:	55                   	push   ebp
c001edbd:	57                   	push   edi
c001edbe:	56                   	push   esi
c001edbf:	53                   	push   ebx
c001edc0:	83 ec 1c             	sub    esp,0x1c
c001edc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001edc7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001edcb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001edcf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001edd3:	85 d2                	test   edx,edx
c001edd5:	75 41                	jne    c001ee18 <__udivdi3+0x5c>
c001edd7:	39 f7                	cmp    edi,esi
c001edd9:	76 15                	jbe    c001edf0 <__udivdi3+0x34>
c001eddb:	89 e8                	mov    eax,ebp
c001eddd:	89 f2                	mov    edx,esi
c001eddf:	f7 f7                	div    edi
c001ede1:	31 db                	xor    ebx,ebx
c001ede3:	89 da                	mov    edx,ebx
c001ede5:	83 c4 1c             	add    esp,0x1c
c001ede8:	5b                   	pop    ebx
c001ede9:	5e                   	pop    esi
c001edea:	5f                   	pop    edi
c001edeb:	5d                   	pop    ebp
c001edec:	c3                   	ret    
c001eded:	8d 76 00             	lea    esi,[esi+0x0]
c001edf0:	89 f9                	mov    ecx,edi
c001edf2:	85 ff                	test   edi,edi
c001edf4:	75 0b                	jne    c001ee01 <__udivdi3+0x45>
c001edf6:	b8 01 00 00 00       	mov    eax,0x1
c001edfb:	31 d2                	xor    edx,edx
c001edfd:	f7 f7                	div    edi
c001edff:	89 c1                	mov    ecx,eax
c001ee01:	31 d2                	xor    edx,edx
c001ee03:	89 f0                	mov    eax,esi
c001ee05:	f7 f1                	div    ecx
c001ee07:	89 c3                	mov    ebx,eax
c001ee09:	89 e8                	mov    eax,ebp
c001ee0b:	f7 f1                	div    ecx
c001ee0d:	89 da                	mov    edx,ebx
c001ee0f:	83 c4 1c             	add    esp,0x1c
c001ee12:	5b                   	pop    ebx
c001ee13:	5e                   	pop    esi
c001ee14:	5f                   	pop    edi
c001ee15:	5d                   	pop    ebp
c001ee16:	c3                   	ret    
c001ee17:	90                   	nop
c001ee18:	39 f2                	cmp    edx,esi
c001ee1a:	77 1c                	ja     c001ee38 <__udivdi3+0x7c>
c001ee1c:	0f bd da             	bsr    ebx,edx
c001ee1f:	83 f3 1f             	xor    ebx,0x1f
c001ee22:	75 24                	jne    c001ee48 <__udivdi3+0x8c>
c001ee24:	39 f2                	cmp    edx,esi
c001ee26:	72 08                	jb     c001ee30 <__udivdi3+0x74>
c001ee28:	39 ef                	cmp    edi,ebp
c001ee2a:	0f 87 84 00 00 00    	ja     c001eeb4 <__udivdi3+0xf8>
c001ee30:	b8 01 00 00 00       	mov    eax,0x1
c001ee35:	eb ac                	jmp    c001ede3 <__udivdi3+0x27>
c001ee37:	90                   	nop
c001ee38:	31 db                	xor    ebx,ebx
c001ee3a:	31 c0                	xor    eax,eax
c001ee3c:	89 da                	mov    edx,ebx
c001ee3e:	83 c4 1c             	add    esp,0x1c
c001ee41:	5b                   	pop    ebx
c001ee42:	5e                   	pop    esi
c001ee43:	5f                   	pop    edi
c001ee44:	5d                   	pop    ebp
c001ee45:	c3                   	ret    
c001ee46:	66 90                	xchg   ax,ax
c001ee48:	b8 20 00 00 00       	mov    eax,0x20
c001ee4d:	29 d8                	sub    eax,ebx
c001ee4f:	88 d9                	mov    cl,bl
c001ee51:	d3 e2                	shl    edx,cl
c001ee53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ee57:	89 fa                	mov    edx,edi
c001ee59:	88 c1                	mov    cl,al
c001ee5b:	d3 ea                	shr    edx,cl
c001ee5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee61:	09 d1                	or     ecx,edx
c001ee63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ee67:	88 d9                	mov    cl,bl
c001ee69:	d3 e7                	shl    edi,cl
c001ee6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ee6f:	89 f7                	mov    edi,esi
c001ee71:	88 c1                	mov    cl,al
c001ee73:	d3 ef                	shr    edi,cl
c001ee75:	88 d9                	mov    cl,bl
c001ee77:	d3 e6                	shl    esi,cl
c001ee79:	89 ea                	mov    edx,ebp
c001ee7b:	88 c1                	mov    cl,al
c001ee7d:	d3 ea                	shr    edx,cl
c001ee7f:	09 d6                	or     esi,edx
c001ee81:	89 f0                	mov    eax,esi
c001ee83:	89 fa                	mov    edx,edi
c001ee85:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ee89:	89 d7                	mov    edi,edx
c001ee8b:	89 c6                	mov    esi,eax
c001ee8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ee91:	39 d7                	cmp    edi,edx
c001ee93:	72 13                	jb     c001eea8 <__udivdi3+0xec>
c001ee95:	74 09                	je     c001eea0 <__udivdi3+0xe4>
c001ee97:	89 f0                	mov    eax,esi
c001ee99:	31 db                	xor    ebx,ebx
c001ee9b:	e9 43 ff ff ff       	jmp    c001ede3 <__udivdi3+0x27>
c001eea0:	88 d9                	mov    cl,bl
c001eea2:	d3 e5                	shl    ebp,cl
c001eea4:	39 c5                	cmp    ebp,eax
c001eea6:	73 ef                	jae    c001ee97 <__udivdi3+0xdb>
c001eea8:	8d 46 ff             	lea    eax,[esi-0x1]
c001eeab:	31 db                	xor    ebx,ebx
c001eead:	e9 31 ff ff ff       	jmp    c001ede3 <__udivdi3+0x27>
c001eeb2:	66 90                	xchg   ax,ax
c001eeb4:	31 c0                	xor    eax,eax
c001eeb6:	e9 28 ff ff ff       	jmp    c001ede3 <__udivdi3+0x27>
c001eebb:	90                   	nop

c001eebc <__umoddi3>:
c001eebc:	55                   	push   ebp
c001eebd:	57                   	push   edi
c001eebe:	56                   	push   esi
c001eebf:	53                   	push   ebx
c001eec0:	83 ec 1c             	sub    esp,0x1c
c001eec3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eec7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eecb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eecf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eed3:	89 da                	mov    edx,ebx
c001eed5:	85 c0                	test   eax,eax
c001eed7:	75 37                	jne    c001ef10 <__umoddi3+0x54>
c001eed9:	39 df                	cmp    edi,ebx
c001eedb:	76 13                	jbe    c001eef0 <__umoddi3+0x34>
c001eedd:	89 f0                	mov    eax,esi
c001eedf:	f7 f7                	div    edi
c001eee1:	89 d0                	mov    eax,edx
c001eee3:	31 d2                	xor    edx,edx
c001eee5:	83 c4 1c             	add    esp,0x1c
c001eee8:	5b                   	pop    ebx
c001eee9:	5e                   	pop    esi
c001eeea:	5f                   	pop    edi
c001eeeb:	5d                   	pop    ebp
c001eeec:	c3                   	ret    
c001eeed:	8d 76 00             	lea    esi,[esi+0x0]
c001eef0:	89 fd                	mov    ebp,edi
c001eef2:	85 ff                	test   edi,edi
c001eef4:	75 0b                	jne    c001ef01 <__umoddi3+0x45>
c001eef6:	b8 01 00 00 00       	mov    eax,0x1
c001eefb:	31 d2                	xor    edx,edx
c001eefd:	f7 f7                	div    edi
c001eeff:	89 c5                	mov    ebp,eax
c001ef01:	89 d8                	mov    eax,ebx
c001ef03:	31 d2                	xor    edx,edx
c001ef05:	f7 f5                	div    ebp
c001ef07:	89 f0                	mov    eax,esi
c001ef09:	f7 f5                	div    ebp
c001ef0b:	89 d0                	mov    eax,edx
c001ef0d:	eb d4                	jmp    c001eee3 <__umoddi3+0x27>
c001ef0f:	90                   	nop
c001ef10:	89 f1                	mov    ecx,esi
c001ef12:	39 d8                	cmp    eax,ebx
c001ef14:	76 0a                	jbe    c001ef20 <__umoddi3+0x64>
c001ef16:	89 f0                	mov    eax,esi
c001ef18:	83 c4 1c             	add    esp,0x1c
c001ef1b:	5b                   	pop    ebx
c001ef1c:	5e                   	pop    esi
c001ef1d:	5f                   	pop    edi
c001ef1e:	5d                   	pop    ebp
c001ef1f:	c3                   	ret    
c001ef20:	0f bd e8             	bsr    ebp,eax
c001ef23:	83 f5 1f             	xor    ebp,0x1f
c001ef26:	75 1c                	jne    c001ef44 <__umoddi3+0x88>
c001ef28:	39 d8                	cmp    eax,ebx
c001ef2a:	72 04                	jb     c001ef30 <__umoddi3+0x74>
c001ef2c:	39 f7                	cmp    edi,esi
c001ef2e:	77 08                	ja     c001ef38 <__umoddi3+0x7c>
c001ef30:	89 da                	mov    edx,ebx
c001ef32:	29 fe                	sub    esi,edi
c001ef34:	19 c2                	sbb    edx,eax
c001ef36:	89 f1                	mov    ecx,esi
c001ef38:	89 c8                	mov    eax,ecx
c001ef3a:	83 c4 1c             	add    esp,0x1c
c001ef3d:	5b                   	pop    ebx
c001ef3e:	5e                   	pop    esi
c001ef3f:	5f                   	pop    edi
c001ef40:	5d                   	pop    ebp
c001ef41:	c3                   	ret    
c001ef42:	66 90                	xchg   ax,ax
c001ef44:	ba 20 00 00 00       	mov    edx,0x20
c001ef49:	29 ea                	sub    edx,ebp
c001ef4b:	89 e9                	mov    ecx,ebp
c001ef4d:	d3 e0                	shl    eax,cl
c001ef4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ef53:	89 f8                	mov    eax,edi
c001ef55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ef59:	88 d1                	mov    cl,dl
c001ef5b:	d3 e8                	shr    eax,cl
c001ef5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef61:	09 c1                	or     ecx,eax
c001ef63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ef67:	89 e9                	mov    ecx,ebp
c001ef69:	d3 e7                	shl    edi,cl
c001ef6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ef6f:	89 d8                	mov    eax,ebx
c001ef71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ef75:	88 d1                	mov    cl,dl
c001ef77:	d3 e8                	shr    eax,cl
c001ef79:	89 c7                	mov    edi,eax
c001ef7b:	89 e9                	mov    ecx,ebp
c001ef7d:	d3 e3                	shl    ebx,cl
c001ef7f:	89 f0                	mov    eax,esi
c001ef81:	88 d1                	mov    cl,dl
c001ef83:	d3 e8                	shr    eax,cl
c001ef85:	09 d8                	or     eax,ebx
c001ef87:	89 e9                	mov    ecx,ebp
c001ef89:	d3 e6                	shl    esi,cl
c001ef8b:	89 f3                	mov    ebx,esi
c001ef8d:	89 fa                	mov    edx,edi
c001ef8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ef93:	89 d1                	mov    ecx,edx
c001ef95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ef99:	89 c6                	mov    esi,eax
c001ef9b:	89 d7                	mov    edi,edx
c001ef9d:	39 d1                	cmp    ecx,edx
c001ef9f:	72 27                	jb     c001efc8 <__umoddi3+0x10c>
c001efa1:	74 21                	je     c001efc4 <__umoddi3+0x108>
c001efa3:	89 ca                	mov    edx,ecx
c001efa5:	29 f3                	sub    ebx,esi
c001efa7:	19 fa                	sbb    edx,edi
c001efa9:	89 d0                	mov    eax,edx
c001efab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001efaf:	d3 e0                	shl    eax,cl
c001efb1:	89 e9                	mov    ecx,ebp
c001efb3:	d3 eb                	shr    ebx,cl
c001efb5:	09 d8                	or     eax,ebx
c001efb7:	d3 ea                	shr    edx,cl
c001efb9:	83 c4 1c             	add    esp,0x1c
c001efbc:	5b                   	pop    ebx
c001efbd:	5e                   	pop    esi
c001efbe:	5f                   	pop    edi
c001efbf:	5d                   	pop    ebp
c001efc0:	c3                   	ret    
c001efc1:	8d 76 00             	lea    esi,[esi+0x0]
c001efc4:	39 c3                	cmp    ebx,eax
c001efc6:	73 db                	jae    c001efa3 <__umoddi3+0xe7>
c001efc8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001efcc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001efd0:	89 d7                	mov    edi,edx
c001efd2:	89 c6                	mov    esi,eax
c001efd4:	eb cd                	jmp    c001efa3 <__umoddi3+0xe7>
c001efd6:	66 90                	xchg   ax,ax
c001efd8:	66 90                	xchg   ax,ax
c001efda:	66 90                	xchg   ax,ax
c001efdc:	66 90                	xchg   ax,ax
c001efde:	66 90                	xchg   ax,ax

c001efe0 <fabs>:
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe7:	89 04 24             	mov    DWORD PTR [esp],eax
c001efea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001eff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001eff7:	dd 04 24             	fld    QWORD PTR [esp]
c001effa:	83 c4 0c             	add    esp,0xc
c001effd:	c3                   	ret    
c001effe:	66 90                	xchg   ax,ax

c001f000 <lrint>:
c001f000:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f004:	83 ec 04             	sub    esp,0x4
c001f007:	db 1c 24             	fistp  DWORD PTR [esp]
c001f00a:	58                   	pop    eax
c001f00b:	c3                   	ret    

c001f00c <lrintf>:
c001f00c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f010:	83 ec 04             	sub    esp,0x4
c001f013:	db 1c 24             	fistp  DWORD PTR [esp]
c001f016:	58                   	pop    eax
c001f017:	c3                   	ret    

Disassembly of section .init:

c001f018 <_init>:
c001f018:	55                   	push   ebp
c001f019:	89 e5                	mov    ebp,esp
c001f01b:	e8 f8 10 fe ff       	call   c0000118 <frame_dummy>
c001f020:	e8 a3 fa ff ff       	call   c001eac8 <__do_global_ctors_aux>
c001f025:	5d                   	pop    ebp
c001f026:	c3                   	ret    

Disassembly of section .fini:

c001f027 <_fini>:
c001f027:	55                   	push   ebp
c001f028:	89 e5                	mov    ebp,esp
c001f02a:	e8 79 10 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f02f:	5d                   	pop    ebp
c001f030:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f032 <Computer::~Computer()>:
c001f032:	83 ec 0c             	sub    esp,0xc
c001f035:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c001f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03e:	89 10                	mov    DWORD PTR [eax],edx
c001f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	50                   	push   eax
c001f048:	e8 a1 13 ff ff       	call   c00103ee <Device::~Device()>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	90                   	nop
c001f051:	83 c4 0c             	add    esp,0xc
c001f054:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f056 <Computer::~Computer()>:
c001f056:	83 ec 0c             	sub    esp,0xc
c001f059:	83 ec 0c             	sub    esp,0xc
c001f05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f060:	e8 cd ff ff ff       	call   c001f032 <Computer::~Computer()>
c001f065:	83 c4 10             	add    esp,0x10
c001f068:	83 ec 08             	sub    esp,0x8
c001f06b:	68 ec 01 00 00       	push   0x1ec
c001f070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f074:	e8 94 ff fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	83 c4 0c             	add    esp,0xc
c001f07f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f080 <idleCommon()>:
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	e8 73 92 ff ff       	call   c00182fb <lockScheduler()>
c001f088:	e8 b7 95 ff ff       	call   c0018644 <schedule()>
c001f08d:	83 c4 0c             	add    esp,0xc
c001f090:	e9 68 92 ff ff       	jmp    c00182fd <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f095 <CPU::readCR3()>:
c001f095:	83 ec 10             	sub    esp,0x10
c001f098:	0f 20 d8             	mov    eax,cr3
c001f09b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f0a7 <CPU::writeCR3(unsigned long)>:
c001f0a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ab:	0f 22 d8             	mov    cr3,eax
c001f0ae:	90                   	nop
c001f0af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f0b0 <LinkedList<UnixFile>::~LinkedList()>:
c001f0b0:	90                   	nop
c001f0b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f0b2 <LinkedList<UnixFile>::LinkedList()>:
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0f5:	83 ec 0c             	sub    esp,0xc
c001f0f8:	68 3d 0e 02 c0       	push   0xc0020e3d
c001f0fd:	e8 31 00 ff ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001f102:	83 c4 10             	add    esp,0x10
c001f105:	90                   	nop
c001f106:	83 c4 0c             	add    esp,0xc
c001f109:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f10a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f10a:	83 ec 0c             	sub    esp,0xc
c001f10d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f112:	75 10                	jne    c001f124 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	68 58 0e 02 c0       	push   0xc0020e58
c001f11c:	e8 d1 61 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f121:	83 c4 10             	add    esp,0x10
c001f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f128:	8b 00                	mov    eax,DWORD PTR [eax]
c001f12a:	85 c0                	test   eax,eax
c001f12c:	74 34                	je     c001f162 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f135:	85 c0                	test   eax,eax
c001f137:	74 29                	je     c001f162 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f140:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f144:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f14f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f159:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f160:	eb 65                	jmp    c001f1c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f166:	8b 00                	mov    eax,DWORD PTR [eax]
c001f168:	85 c0                	test   eax,eax
c001f16a:	75 4b                	jne    c001f1b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f173:	85 c0                	test   eax,eax
c001f175:	75 40                	jne    c001f1b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f17b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f17f:	89 10                	mov    DWORD PTR [eax],edx
c001f181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f185:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f189:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f193:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1a1:	85 c0                	test   eax,eax
c001f1a3:	74 22                	je     c001f1c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f1a5:	83 ec 0c             	sub    esp,0xc
c001f1a8:	68 7a 0e 02 c0       	push   0xc0020e7a
c001f1ad:	e8 40 61 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f1b2:	83 c4 10             	add    esp,0x10
c001f1b5:	eb 10                	jmp    c001f1c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f1b7:	83 ec 0c             	sub    esp,0xc
c001f1ba:	68 84 0e 02 c0       	push   0xc0020e84
c001f1bf:	e8 2e 61 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f1c4:	83 c4 10             	add    esp,0x10
c001f1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f1ce:	8d 50 01             	lea    edx,[eax+0x1]
c001f1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f1d8:	90                   	nop
c001f1d9:	83 c4 0c             	add    esp,0xc
c001f1dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f1de <LinkedList<UnixFile>::getFirstElement()>:
c001f1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f1e6 <LinkedList<UnixFile>::removeFirst()>:
c001f1e6:	83 ec 0c             	sub    esp,0xc
c001f1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1ef:	85 c0                	test   eax,eax
c001f1f1:	75 12                	jne    c001f205 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f1f3:	83 ec 0c             	sub    esp,0xc
c001f1f6:	68 90 0e 02 c0       	push   0xc0020e90
c001f1fb:	e8 f2 60 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f200:	83 c4 10             	add    esp,0x10
c001f203:	eb 7e                	jmp    c001f283 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f209:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f20c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f20f:	85 c0                	test   eax,eax
c001f211:	74 10                	je     c001f223 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f213:	83 ec 0c             	sub    esp,0xc
c001f216:	68 db 0e 02 c0       	push   0xc0020edb
c001f21b:	e8 d2 60 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f220:	83 c4 10             	add    esp,0x10
c001f223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f227:	8b 00                	mov    eax,DWORD PTR [eax]
c001f229:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f22c:	85 c0                	test   eax,eax
c001f22e:	75 33                	jne    c001f263 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f249:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f24c:	83 f8 01             	cmp    eax,0x1
c001f24f:	74 21                	je     c001f272 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f251:	83 ec 0c             	sub    esp,0xc
c001f254:	68 b4 0e 02 c0       	push   0xc0020eb4
c001f259:	e8 94 60 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f25e:	83 c4 10             	add    esp,0x10
c001f261:	eb 0f                	jmp    c001f272 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f267:	8b 00                	mov    eax,DWORD PTR [eax]
c001f269:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f270:	89 10                	mov    DWORD PTR [eax],edx
c001f272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f276:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f279:	8d 50 ff             	lea    edx,[eax-0x1]
c001f27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f280:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f283:	83 c4 0c             	add    esp,0xc
c001f286:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f288 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f28c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f28f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f290 <DriverlessDevice::~DriverlessDevice()>:
c001f290:	ba 44 15 02 c0       	mov    edx,0xc0021544
c001f295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f299:	89 10                	mov    DWORD PTR [eax],edx
c001f29b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f29f:	50                   	push   eax
c001f2a0:	e8 49 11 ff ff       	call   c00103ee <Device::~Device()>
c001f2a5:	83 c4 04             	add    esp,0x4
c001f2a8:	90                   	nop
c001f2a9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f2aa <DriverlessDevice::~DriverlessDevice()>:
c001f2aa:	83 ec 0c             	sub    esp,0xc
c001f2ad:	83 ec 0c             	sub    esp,0xc
c001f2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b4:	e8 d7 ff ff ff       	call   c001f290 <DriverlessDevice::~DriverlessDevice()>
c001f2b9:	83 c4 10             	add    esp,0x10
c001f2bc:	83 ec 08             	sub    esp,0x8
c001f2bf:	68 58 01 00 00       	push   0x158
c001f2c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c8:	e8 40 fd fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f2cd:	83 c4 10             	add    esp,0x10
c001f2d0:	83 c4 0c             	add    esp,0xc
c001f2d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f2d4 <LinkedList<Device>::addElement(Device*)>:
c001f2d4:	83 ec 0c             	sub    esp,0xc
c001f2d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f2dc:	75 10                	jne    c001f2ee <LinkedList<Device>::addElement(Device*)+0x1a>
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	68 58 0e 02 c0       	push   0xc0020e58
c001f2e6:	e8 07 60 ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f2eb:	83 c4 10             	add    esp,0x10
c001f2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2f4:	85 c0                	test   eax,eax
c001f2f6:	74 3a                	je     c001f332 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f2ff:	85 c0                	test   eax,eax
c001f301:	74 2f                	je     c001f332 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f307:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f30a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f30e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f318:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f31c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f323:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f326:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f330:	eb 68                	jmp    c001f39a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f336:	8b 00                	mov    eax,DWORD PTR [eax]
c001f338:	85 c0                	test   eax,eax
c001f33a:	75 4e                	jne    c001f38a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f343:	85 c0                	test   eax,eax
c001f345:	75 43                	jne    c001f38a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f34f:	89 10                	mov    DWORD PTR [eax],edx
c001f351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f355:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f359:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f363:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f371:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f374:	85 c0                	test   eax,eax
c001f376:	74 22                	je     c001f39a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	68 7a 0e 02 c0       	push   0xc0020e7a
c001f380:	e8 6d 5f ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	eb 10                	jmp    c001f39a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f38a:	83 ec 0c             	sub    esp,0xc
c001f38d:	68 84 0e 02 c0       	push   0xc0020e84
c001f392:	e8 5b 5f ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f3a1:	8d 50 01             	lea    edx,[eax+0x1]
c001f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f3ab:	90                   	nop
c001f3ac:	83 c4 0c             	add    esp,0xc
c001f3af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f3b0 <LinkedList<Device>::LinkedList()>:
c001f3b0:	83 ec 0c             	sub    esp,0xc
c001f3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3f3:	83 ec 0c             	sub    esp,0xc
c001f3f6:	68 3d 0e 02 c0       	push   0xc0020e3d
c001f3fb:	e8 33 fd fe ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001f400:	83 c4 10             	add    esp,0x10
c001f403:	90                   	nop
c001f404:	83 c4 0c             	add    esp,0xc
c001f407:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f408 <CPU::readCR0()>:
c001f408:	83 ec 10             	sub    esp,0x10
c001f40b:	0f 20 c0             	mov    eax,cr0
c001f40e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f416:	83 c4 10             	add    esp,0x10
c001f419:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f41a <CPU::writeCR0(unsigned long)>:
c001f41a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41e:	0f 22 c0             	mov    cr0,eax
c001f421:	90                   	nop
c001f422:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f423 <CPU::readDR0()>:
c001f423:	83 ec 10             	sub    esp,0x10
c001f426:	0f 21 c0             	mov    eax,db0
c001f429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f42d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f431:	83 c4 10             	add    esp,0x10
c001f434:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f435 <CPU::readDR1()>:
c001f435:	83 ec 10             	sub    esp,0x10
c001f438:	0f 21 c8             	mov    eax,db1
c001f43b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f443:	83 c4 10             	add    esp,0x10
c001f446:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f447 <CPU::readDR2()>:
c001f447:	83 ec 10             	sub    esp,0x10
c001f44a:	0f 21 d0             	mov    eax,db2
c001f44d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f455:	83 c4 10             	add    esp,0x10
c001f458:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f459 <CPU::readDR3()>:
c001f459:	83 ec 10             	sub    esp,0x10
c001f45c:	0f 21 d8             	mov    eax,db3
c001f45f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f467:	83 c4 10             	add    esp,0x10
c001f46a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f46b <CPU::readDR6()>:
c001f46b:	83 ec 10             	sub    esp,0x10
c001f46e:	0f 21 f0             	mov    eax,db6
c001f471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f479:	83 c4 10             	add    esp,0x10
c001f47c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f47d <CPU::readDR7()>:
c001f47d:	83 ec 10             	sub    esp,0x10
c001f480:	0f 21 f8             	mov    eax,db7
c001f483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f48b:	83 c4 10             	add    esp,0x10
c001f48e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f494:	8b 00                	mov    eax,DWORD PTR [eax]
c001f496:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f49e:	85 c0                	test   eax,eax
c001f4a0:	75 0e                	jne    c001f4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4a9:	85 c0                	test   eax,eax
c001f4ab:	75 03                	jne    c001f4b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f4ad:	b0 01                	mov    al,0x1
c001f4af:	c3                   	ret    
c001f4b0:	b0 00                	mov    al,0x0
c001f4b2:	90                   	nop
c001f4b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f4b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4bd:	85 c0                	test   eax,eax
c001f4bf:	75 15                	jne    c001f4d6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f4c1:	83 ec 0c             	sub    esp,0xc
c001f4c4:	68 90 0e 02 c0       	push   0xc0020e90
c001f4c9:	e8 24 5e ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f4ce:	83 c4 10             	add    esp,0x10
c001f4d1:	e9 88 00 00 00       	jmp    c001f55e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f4e0:	85 c0                	test   eax,eax
c001f4e2:	0f 95 c0             	setne  al
c001f4e5:	84 c0                	test   al,al
c001f4e7:	74 10                	je     c001f4f9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f4e9:	83 ec 0c             	sub    esp,0xc
c001f4ec:	68 db 0e 02 c0       	push   0xc0020edb
c001f4f1:	e8 fc 5d ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f4f6:	83 c4 10             	add    esp,0x10
c001f4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f502:	85 c0                	test   eax,eax
c001f504:	0f 94 c0             	sete   al
c001f507:	84 c0                	test   al,al
c001f509:	74 33                	je     c001f53e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f524:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f527:	83 f8 01             	cmp    eax,0x1
c001f52a:	74 21                	je     c001f54d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f52c:	83 ec 0c             	sub    esp,0xc
c001f52f:	68 b4 0e 02 c0       	push   0xc0020eb4
c001f534:	e8 b9 5d ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f539:	83 c4 10             	add    esp,0x10
c001f53c:	eb 0f                	jmp    c001f54d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f542:	8b 00                	mov    eax,DWORD PTR [eax]
c001f544:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54b:	89 10                	mov    DWORD PTR [eax],edx
c001f54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f551:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f554:	8d 50 ff             	lea    edx,[eax-0x1]
c001f557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f55e:	83 c4 0c             	add    esp,0xc
c001f561:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f562:	83 ec 0c             	sub    esp,0xc
c001f565:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f56a:	75 10                	jne    c001f57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f56c:	83 ec 0c             	sub    esp,0xc
c001f56f:	68 58 0e 02 c0       	push   0xc0020e58
c001f574:	e8 79 5d ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f579:	83 c4 10             	add    esp,0x10
c001f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f580:	8b 00                	mov    eax,DWORD PTR [eax]
c001f582:	85 c0                	test   eax,eax
c001f584:	74 34                	je     c001f5ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f58d:	85 c0                	test   eax,eax
c001f58f:	74 29                	je     c001f5ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f59c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f5b8:	eb 65                	jmp    c001f61f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5be:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5c0:	85 c0                	test   eax,eax
c001f5c2:	75 4b                	jne    c001f60f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5cb:	85 c0                	test   eax,eax
c001f5cd:	75 40                	jne    c001f60f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5d7:	89 10                	mov    DWORD PTR [eax],edx
c001f5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5eb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5f9:	85 c0                	test   eax,eax
c001f5fb:	74 22                	je     c001f61f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f5fd:	83 ec 0c             	sub    esp,0xc
c001f600:	68 7a 0e 02 c0       	push   0xc0020e7a
c001f605:	e8 e8 5c ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f60a:	83 c4 10             	add    esp,0x10
c001f60d:	eb 10                	jmp    c001f61f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f60f:	83 ec 0c             	sub    esp,0xc
c001f612:	68 84 0e 02 c0       	push   0xc0020e84
c001f617:	e8 d6 5c ff ff       	call   c00152f2 <Krnl::panic(char const*)>
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f623:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f626:	8d 50 01             	lea    edx,[eax+0x1]
c001f629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f630:	90                   	nop
c001f631:	83 c4 0c             	add    esp,0xc
c001f634:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f636 <ACPI::~ACPI()>:
c001f636:	83 ec 0c             	sub    esp,0xc
c001f639:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c001f63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f642:	89 10                	mov    DWORD PTR [eax],edx
c001f644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f648:	83 ec 0c             	sub    esp,0xc
c001f64b:	50                   	push   eax
c001f64c:	e8 9d 0d ff ff       	call   c00103ee <Device::~Device()>
c001f651:	83 c4 10             	add    esp,0x10
c001f654:	90                   	nop
c001f655:	83 c4 0c             	add    esp,0xc
c001f658:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f65a <ACPI::~ACPI()>:
c001f65a:	83 ec 0c             	sub    esp,0xc
c001f65d:	83 ec 0c             	sub    esp,0xc
c001f660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f664:	e8 cd ff ff ff       	call   c001f636 <ACPI::~ACPI()>
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	83 ec 08             	sub    esp,0x8
c001f66f:	68 68 22 00 00       	push   0x2268
c001f674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f678:	e8 90 f9 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f67d:	83 c4 10             	add    esp,0x10
c001f680:	83 c4 0c             	add    esp,0xc
c001f683:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f684 <CPU::~CPU()>:
c001f684:	83 ec 0c             	sub    esp,0xc
c001f687:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c001f68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f690:	89 10                	mov    DWORD PTR [eax],edx
c001f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f696:	83 ec 0c             	sub    esp,0xc
c001f699:	50                   	push   eax
c001f69a:	e8 4f 0d ff ff       	call   c00103ee <Device::~Device()>
c001f69f:	83 c4 10             	add    esp,0x10
c001f6a2:	90                   	nop
c001f6a3:	83 c4 0c             	add    esp,0xc
c001f6a6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f6a8 <CPU::~CPU()>:
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b2:	e8 cd ff ff ff       	call   c001f684 <CPU::~CPU()>
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	83 ec 08             	sub    esp,0x8
c001f6bd:	68 98 11 00 00       	push   0x1198
c001f6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6c6:	e8 42 f9 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f6cb:	83 c4 10             	add    esp,0x10
c001f6ce:	83 c4 0c             	add    esp,0xc
c001f6d1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f6d2 <CPU::readCR4()>:
c001f6d2:	83 ec 10             	sub    esp,0x10
c001f6d5:	0f 20 e0             	mov    eax,cr4
c001f6d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6e0:	83 c4 10             	add    esp,0x10
c001f6e3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f6e4 <CPU::writeDR7(unsigned long)>:
c001f6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e8:	0f 23 f8             	mov    db7,eax
c001f6eb:	90                   	nop
c001f6ec:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f6ed <CPU::writeCR4(unsigned long)>:
c001f6ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f1:	0f 22 e0             	mov    cr4,eax
c001f6f4:	90                   	nop
c001f6f5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f6f6 <CPU::readCR2()>:
c001f6f6:	83 ec 10             	sub    esp,0x10
c001f6f9:	0f 20 d0             	mov    eax,cr2
c001f6fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f704:	83 c4 10             	add    esp,0x10
c001f707:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f708 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f708:	90                   	nop
c001f709:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f70a <ThreadControlBlock::ThreadControlBlock()>:
c001f70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f719:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f724:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f72b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f72f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f742:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f746:	90                   	nop
c001f747:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f748 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f748:	83 ec 0c             	sub    esp,0xc
c001f74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f78b:	83 ec 0c             	sub    esp,0xc
c001f78e:	68 3d 0e 02 c0       	push   0xc0020e3d
c001f793:	e8 9b f9 fe ff       	call   c000f133 <Dbg::kprintf(char const*, ...)>
c001f798:	83 c4 10             	add    esp,0x10
c001f79b:	90                   	nop
c001f79c:	83 c4 0c             	add    esp,0xc
c001f79f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f7a0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f7a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7a7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f7a8 <PCI::~PCI()>:
c001f7a8:	83 ec 0c             	sub    esp,0xc
c001f7ab:	ba 98 2d 02 c0       	mov    edx,0xc0022d98
c001f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b4:	89 10                	mov    DWORD PTR [eax],edx
c001f7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ba:	83 ec 0c             	sub    esp,0xc
c001f7bd:	50                   	push   eax
c001f7be:	e8 35 06 ff ff       	call   c000fdf8 <Bus::~Bus()>
c001f7c3:	83 c4 10             	add    esp,0x10
c001f7c6:	90                   	nop
c001f7c7:	83 c4 0c             	add    esp,0xc
c001f7ca:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f7cc <PCI::~PCI()>:
c001f7cc:	83 ec 0c             	sub    esp,0xc
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d6:	e8 cd ff ff ff       	call   c001f7a8 <PCI::~PCI()>
c001f7db:	83 c4 10             	add    esp,0x10
c001f7de:	83 ec 08             	sub    esp,0x8
c001f7e1:	68 58 01 00 00       	push   0x158
c001f7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ea:	e8 1e f8 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f7ef:	83 c4 10             	add    esp,0x10
c001f7f2:	83 c4 0c             	add    esp,0xc
c001f7f5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f7f6 <IDE::~IDE()>:
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	ba fc 2f 02 c0       	mov    edx,0xc0022ffc
c001f7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f802:	89 10                	mov    DWORD PTR [eax],edx
c001f804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	50                   	push   eax
c001f80c:	e8 ef 10 ff ff       	call   c0010900 <HardDiskController::~HardDiskController()>
c001f811:	83 c4 10             	add    esp,0x10
c001f814:	90                   	nop
c001f815:	83 c4 0c             	add    esp,0xc
c001f818:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f81a <IDE::~IDE()>:
c001f81a:	83 ec 0c             	sub    esp,0xc
c001f81d:	83 ec 0c             	sub    esp,0xc
c001f820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f824:	e8 cd ff ff ff       	call   c001f7f6 <IDE::~IDE()>
c001f829:	83 c4 10             	add    esp,0x10
c001f82c:	83 ec 08             	sub    esp,0x8
c001f82f:	68 70 02 00 00       	push   0x270
c001f834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f838:	e8 d0 f7 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f83d:	83 c4 10             	add    esp,0x10
c001f840:	83 c4 0c             	add    esp,0xc
c001f843:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f844 <ATA::~ATA()>:
c001f844:	83 ec 0c             	sub    esp,0xc
c001f847:	ba 4c 30 02 c0       	mov    edx,0xc002304c
c001f84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f850:	89 10                	mov    DWORD PTR [eax],edx
c001f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f856:	83 ec 0c             	sub    esp,0xc
c001f859:	50                   	push   eax
c001f85a:	e8 7f 11 ff ff       	call   c00109de <PhysicalDisk::~PhysicalDisk()>
c001f85f:	83 c4 10             	add    esp,0x10
c001f862:	90                   	nop
c001f863:	83 c4 0c             	add    esp,0xc
c001f866:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f868 <ATA::~ATA()>:
c001f868:	83 ec 0c             	sub    esp,0xc
c001f86b:	83 ec 0c             	sub    esp,0xc
c001f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f872:	e8 cd ff ff ff       	call   c001f844 <ATA::~ATA()>
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	83 ec 08             	sub    esp,0x8
c001f87d:	68 7c 01 00 00       	push   0x17c
c001f882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f886:	e8 82 f7 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f88b:	83 c4 10             	add    esp,0x10
c001f88e:	83 c4 0c             	add    esp,0xc
c001f891:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f892 <ATAPI::~ATAPI()>:
c001f892:	83 ec 0c             	sub    esp,0xc
c001f895:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001f89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89e:	89 10                	mov    DWORD PTR [eax],edx
c001f8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	50                   	push   eax
c001f8a8:	e8 31 11 ff ff       	call   c00109de <PhysicalDisk::~PhysicalDisk()>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	90                   	nop
c001f8b1:	83 c4 0c             	add    esp,0xc
c001f8b4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f8b6 <ATAPI::~ATAPI()>:
c001f8b6:	83 ec 0c             	sub    esp,0xc
c001f8b9:	83 ec 0c             	sub    esp,0xc
c001f8bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c0:	e8 cd ff ff ff       	call   c001f892 <ATAPI::~ATAPI()>
c001f8c5:	83 c4 10             	add    esp,0x10
c001f8c8:	83 ec 08             	sub    esp,0x8
c001f8cb:	68 80 01 00 00       	push   0x180
c001f8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d4:	e8 34 f7 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f8d9:	83 c4 10             	add    esp,0x10
c001f8dc:	83 c4 0c             	add    esp,0xc
c001f8df:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f8e0 <AVX::~AVX()>:
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c001f8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ec:	89 10                	mov    DWORD PTR [eax],edx
c001f8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f2:	83 ec 0c             	sub    esp,0xc
c001f8f5:	50                   	push   eax
c001f8f6:	e8 67 11 ff ff       	call   c0010a62 <FPU::~FPU()>
c001f8fb:	83 c4 10             	add    esp,0x10
c001f8fe:	90                   	nop
c001f8ff:	83 c4 0c             	add    esp,0xc
c001f902:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f904 <AVX::~AVX()>:
c001f904:	83 ec 0c             	sub    esp,0xc
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f90e:	e8 cd ff ff ff       	call   c001f8e0 <AVX::~AVX()>
c001f913:	83 c4 10             	add    esp,0x10
c001f916:	83 ec 08             	sub    esp,0x8
c001f919:	68 58 01 00 00       	push   0x158
c001f91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f922:	e8 e6 f6 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f927:	83 c4 10             	add    esp,0x10
c001f92a:	83 c4 0c             	add    esp,0xc
c001f92d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f92e <MMX::~MMX()>:
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	ba 34 31 02 c0       	mov    edx,0xc0023134
c001f936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93a:	89 10                	mov    DWORD PTR [eax],edx
c001f93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f940:	83 ec 0c             	sub    esp,0xc
c001f943:	50                   	push   eax
c001f944:	e8 19 11 ff ff       	call   c0010a62 <FPU::~FPU()>
c001f949:	83 c4 10             	add    esp,0x10
c001f94c:	90                   	nop
c001f94d:	83 c4 0c             	add    esp,0xc
c001f950:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f952 <MMX::~MMX()>:
c001f952:	83 ec 0c             	sub    esp,0xc
c001f955:	83 ec 0c             	sub    esp,0xc
c001f958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f95c:	e8 cd ff ff ff       	call   c001f92e <MMX::~MMX()>
c001f961:	83 c4 10             	add    esp,0x10
c001f964:	83 ec 08             	sub    esp,0x8
c001f967:	68 58 01 00 00       	push   0x158
c001f96c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f970:	e8 98 f6 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f975:	83 c4 10             	add    esp,0x10
c001f978:	83 c4 0c             	add    esp,0xc
c001f97b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f97c <SSE::~SSE()>:
c001f97c:	83 ec 0c             	sub    esp,0xc
c001f97f:	ba 74 31 02 c0       	mov    edx,0xc0023174
c001f984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f988:	89 10                	mov    DWORD PTR [eax],edx
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	83 ec 0c             	sub    esp,0xc
c001f991:	50                   	push   eax
c001f992:	e8 cb 10 ff ff       	call   c0010a62 <FPU::~FPU()>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	90                   	nop
c001f99b:	83 c4 0c             	add    esp,0xc
c001f99e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f9a0 <SSE::~SSE()>:
c001f9a0:	83 ec 0c             	sub    esp,0xc
c001f9a3:	83 ec 0c             	sub    esp,0xc
c001f9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9aa:	e8 cd ff ff ff       	call   c001f97c <SSE::~SSE()>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	83 ec 08             	sub    esp,0x8
c001f9b5:	68 58 01 00 00       	push   0x158
c001f9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9be:	e8 4a f6 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001f9c3:	83 c4 10             	add    esp,0x10
c001f9c6:	83 c4 0c             	add    esp,0xc
c001f9c9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f9ca <x87::~x87()>:
c001f9ca:	83 ec 0c             	sub    esp,0xc
c001f9cd:	ba b4 31 02 c0       	mov    edx,0xc00231b4
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	89 10                	mov    DWORD PTR [eax],edx
c001f9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	50                   	push   eax
c001f9e0:	e8 7d 10 ff ff       	call   c0010a62 <FPU::~FPU()>
c001f9e5:	83 c4 10             	add    esp,0x10
c001f9e8:	90                   	nop
c001f9e9:	83 c4 0c             	add    esp,0xc
c001f9ec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f9ee <x87::~x87()>:
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	83 ec 0c             	sub    esp,0xc
c001f9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f8:	e8 cd ff ff ff       	call   c001f9ca <x87::~x87()>
c001f9fd:	83 c4 10             	add    esp,0x10
c001fa00:	83 ec 08             	sub    esp,0x8
c001fa03:	68 58 01 00 00       	push   0x158
c001fa08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0c:	e8 fc f5 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001fa11:	83 c4 10             	add    esp,0x10
c001fa14:	83 c4 0c             	add    esp,0xc
c001fa17:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fa18 <IOAPIC::~IOAPIC()>:
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001fa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa24:	89 10                	mov    DWORD PTR [eax],edx
c001fa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2a:	83 ec 0c             	sub    esp,0xc
c001fa2d:	50                   	push   eax
c001fa2e:	e8 bb 09 ff ff       	call   c00103ee <Device::~Device()>
c001fa33:	83 c4 10             	add    esp,0x10
c001fa36:	90                   	nop
c001fa37:	83 c4 0c             	add    esp,0xc
c001fa3a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fa3c <IOAPIC::~IOAPIC()>:
c001fa3c:	83 ec 0c             	sub    esp,0xc
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa46:	e8 cd ff ff ff       	call   c001fa18 <IOAPIC::~IOAPIC()>
c001fa4b:	83 c4 10             	add    esp,0x10
c001fa4e:	83 ec 08             	sub    esp,0x8
c001fa51:	68 68 01 00 00       	push   0x168
c001fa56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa5a:	e8 ae f5 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001fa5f:	83 c4 10             	add    esp,0x10
c001fa62:	83 c4 0c             	add    esp,0xc
c001fa65:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fa66 <APIC::~APIC()>:
c001fa66:	83 ec 0c             	sub    esp,0xc
c001fa69:	ba c4 32 02 c0       	mov    edx,0xc00232c4
c001fa6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa72:	89 10                	mov    DWORD PTR [eax],edx
c001fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	50                   	push   eax
c001fa7c:	e8 a9 14 ff ff       	call   c0010f2a <InterruptController::~InterruptController()>
c001fa81:	83 c4 10             	add    esp,0x10
c001fa84:	90                   	nop
c001fa85:	83 c4 0c             	add    esp,0xc
c001fa88:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001fa8a <APIC::~APIC()>:
c001fa8a:	83 ec 0c             	sub    esp,0xc
c001fa8d:	83 ec 0c             	sub    esp,0xc
c001fa90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa94:	e8 cd ff ff ff       	call   c001fa66 <APIC::~APIC()>
c001fa99:	83 c4 10             	add    esp,0x10
c001fa9c:	83 ec 08             	sub    esp,0x8
c001fa9f:	68 58 21 00 00       	push   0x2158
c001faa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faa8:	e8 60 f5 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001faad:	83 c4 10             	add    esp,0x10
c001fab0:	83 c4 0c             	add    esp,0xc
c001fab3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fab4 <PIC::~PIC()>:
c001fab4:	83 ec 0c             	sub    esp,0xc
c001fab7:	ba 5c 33 02 c0       	mov    edx,0xc002335c
c001fabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac0:	89 10                	mov    DWORD PTR [eax],edx
c001fac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	50                   	push   eax
c001faca:	e8 5b 14 ff ff       	call   c0010f2a <InterruptController::~InterruptController()>
c001facf:	83 c4 10             	add    esp,0x10
c001fad2:	90                   	nop
c001fad3:	83 c4 0c             	add    esp,0xc
c001fad6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001fad8 <PIC::~PIC()>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	83 ec 0c             	sub    esp,0xc
c001fade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fae2:	e8 cd ff ff ff       	call   c001fab4 <PIC::~PIC()>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	83 ec 08             	sub    esp,0x8
c001faed:	68 58 21 00 00       	push   0x2158
c001faf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf6:	e8 12 f5 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001fafb:	83 c4 10             	add    esp,0x10
c001fafe:	83 c4 0c             	add    esp,0xc
c001fb01:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fb02 <APICTimer::~APICTimer()>:
c001fb02:	83 ec 0c             	sub    esp,0xc
c001fb05:	ba b0 33 02 c0       	mov    edx,0xc00233b0
c001fb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0e:	89 10                	mov    DWORD PTR [eax],edx
c001fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	50                   	push   eax
c001fb18:	e8 cd 2a ff ff       	call   c00125ea <Timer::~Timer()>
c001fb1d:	83 c4 10             	add    esp,0x10
c001fb20:	90                   	nop
c001fb21:	83 c4 0c             	add    esp,0xc
c001fb24:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fb26 <APICTimer::~APICTimer()>:
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	83 ec 0c             	sub    esp,0xc
c001fb2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb30:	e8 cd ff ff ff       	call   c001fb02 <APICTimer::~APICTimer()>
c001fb35:	83 c4 10             	add    esp,0x10
c001fb38:	83 ec 08             	sub    esp,0x8
c001fb3b:	68 60 01 00 00       	push   0x160
c001fb40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb44:	e8 c4 f4 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001fb49:	83 c4 10             	add    esp,0x10
c001fb4c:	83 c4 0c             	add    esp,0xc
c001fb4f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fb50 <PIT::~PIT()>:
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	ba 00 34 02 c0       	mov    edx,0xc0023400
c001fb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5c:	89 10                	mov    DWORD PTR [eax],edx
c001fb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	50                   	push   eax
c001fb66:	e8 7f 2a ff ff       	call   c00125ea <Timer::~Timer()>
c001fb6b:	83 c4 10             	add    esp,0x10
c001fb6e:	90                   	nop
c001fb6f:	83 c4 0c             	add    esp,0xc
c001fb72:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fb74 <PIT::~PIT()>:
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	83 ec 0c             	sub    esp,0xc
c001fb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb7e:	e8 cd ff ff ff       	call   c001fb50 <PIT::~PIT()>
c001fb83:	83 c4 10             	add    esp,0x10
c001fb86:	83 ec 08             	sub    esp,0x8
c001fb89:	68 5c 01 00 00       	push   0x15c
c001fb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb92:	e8 76 f4 fe ff       	call   c000f00d <operator delete(void*, unsigned long)>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	83 c4 0c             	add    esp,0xc
c001fb9d:	c3                   	ret    
